// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.frontdoor.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FrontdoorRoutingRuleRedirectConfiguration {
    /**
     * @return The destination fragment in the portion of URL after &#39;#&#39;. Set this to add a fragment to the redirect URL.
     * 
     */
    private @Nullable String customFragment;
    /**
     * @return Set this to change the URL for the redirection.
     * 
     */
    private @Nullable String customHost;
    /**
     * @return The path to retain as per the incoming request, or update in the URL for the redirection.
     * 
     */
    private @Nullable String customPath;
    /**
     * @return Replace any existing query string from the incoming request URL.
     * 
     */
    private @Nullable String customQueryString;
    /**
     * @return Protocol to use when redirecting. Valid options are `HttpOnly`, `HttpsOnly`, or `MatchRequest`.
     * 
     */
    private String redirectProtocol;
    /**
     * @return Status code for the redirect. Valida options are `Moved`, `Found`, `TemporaryRedirect`, `PermanentRedirect`.
     * 
     */
    private String redirectType;

    private FrontdoorRoutingRuleRedirectConfiguration() {}
    /**
     * @return The destination fragment in the portion of URL after &#39;#&#39;. Set this to add a fragment to the redirect URL.
     * 
     */
    public Optional<String> customFragment() {
        return Optional.ofNullable(this.customFragment);
    }
    /**
     * @return Set this to change the URL for the redirection.
     * 
     */
    public Optional<String> customHost() {
        return Optional.ofNullable(this.customHost);
    }
    /**
     * @return The path to retain as per the incoming request, or update in the URL for the redirection.
     * 
     */
    public Optional<String> customPath() {
        return Optional.ofNullable(this.customPath);
    }
    /**
     * @return Replace any existing query string from the incoming request URL.
     * 
     */
    public Optional<String> customQueryString() {
        return Optional.ofNullable(this.customQueryString);
    }
    /**
     * @return Protocol to use when redirecting. Valid options are `HttpOnly`, `HttpsOnly`, or `MatchRequest`.
     * 
     */
    public String redirectProtocol() {
        return this.redirectProtocol;
    }
    /**
     * @return Status code for the redirect. Valida options are `Moved`, `Found`, `TemporaryRedirect`, `PermanentRedirect`.
     * 
     */
    public String redirectType() {
        return this.redirectType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FrontdoorRoutingRuleRedirectConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String customFragment;
        private @Nullable String customHost;
        private @Nullable String customPath;
        private @Nullable String customQueryString;
        private String redirectProtocol;
        private String redirectType;
        public Builder() {}
        public Builder(FrontdoorRoutingRuleRedirectConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.customFragment = defaults.customFragment;
    	      this.customHost = defaults.customHost;
    	      this.customPath = defaults.customPath;
    	      this.customQueryString = defaults.customQueryString;
    	      this.redirectProtocol = defaults.redirectProtocol;
    	      this.redirectType = defaults.redirectType;
        }

        @CustomType.Setter
        public Builder customFragment(@Nullable String customFragment) {

            this.customFragment = customFragment;
            return this;
        }
        @CustomType.Setter
        public Builder customHost(@Nullable String customHost) {

            this.customHost = customHost;
            return this;
        }
        @CustomType.Setter
        public Builder customPath(@Nullable String customPath) {

            this.customPath = customPath;
            return this;
        }
        @CustomType.Setter
        public Builder customQueryString(@Nullable String customQueryString) {

            this.customQueryString = customQueryString;
            return this;
        }
        @CustomType.Setter
        public Builder redirectProtocol(String redirectProtocol) {
            if (redirectProtocol == null) {
              throw new MissingRequiredPropertyException("FrontdoorRoutingRuleRedirectConfiguration", "redirectProtocol");
            }
            this.redirectProtocol = redirectProtocol;
            return this;
        }
        @CustomType.Setter
        public Builder redirectType(String redirectType) {
            if (redirectType == null) {
              throw new MissingRequiredPropertyException("FrontdoorRoutingRuleRedirectConfiguration", "redirectType");
            }
            this.redirectType = redirectType;
            return this;
        }
        public FrontdoorRoutingRuleRedirectConfiguration build() {
            final var _resultValue = new FrontdoorRoutingRuleRedirectConfiguration();
            _resultValue.customFragment = customFragment;
            _resultValue.customHost = customHost;
            _resultValue.customPath = customPath;
            _resultValue.customQueryString = customQueryString;
            _resultValue.redirectProtocol = redirectProtocol;
            _resultValue.redirectType = redirectType;
            return _resultValue;
        }
    }
}
