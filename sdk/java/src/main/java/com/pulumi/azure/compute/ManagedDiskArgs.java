// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.compute;

import com.pulumi.azure.compute.inputs.ManagedDiskEncryptionSettingsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagedDiskArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagedDiskArgs Empty = new ManagedDiskArgs();

    /**
     * The method to use when creating the managed disk. Changing this forces a new resource to be created. Possible values include:
     * 
     */
    @Import(name="createOption", required=true)
    private Output<String> createOption;

    /**
     * @return The method to use when creating the managed disk. Changing this forces a new resource to be created. Possible values include:
     * 
     */
    public Output<String> createOption() {
        return this.createOption;
    }

    /**
     * The ID of the disk access resource for using private endpoints on disks.
     * 
     */
    @Import(name="diskAccessId")
    private @Nullable Output<String> diskAccessId;

    /**
     * @return The ID of the disk access resource for using private endpoints on disks.
     * 
     */
    public Optional<Output<String>> diskAccessId() {
        return Optional.ofNullable(this.diskAccessId);
    }

    /**
     * The ID of a Disk Encryption Set which should be used to encrypt this Managed Disk. Conflicts with `secure_vm_disk_encryption_set_id`.
     * 
     */
    @Import(name="diskEncryptionSetId")
    private @Nullable Output<String> diskEncryptionSetId;

    /**
     * @return The ID of a Disk Encryption Set which should be used to encrypt this Managed Disk. Conflicts with `secure_vm_disk_encryption_set_id`.
     * 
     */
    public Optional<Output<String>> diskEncryptionSetId() {
        return Optional.ofNullable(this.diskEncryptionSetId);
    }

    /**
     * The number of IOPS allowed across all VMs mounting the shared disk as read-only; only settable for UltraSSD disks and PremiumV2 disks with shared disk enabled. One operation can transfer between 4k and 256k bytes.
     * 
     */
    @Import(name="diskIopsReadOnly")
    private @Nullable Output<Integer> diskIopsReadOnly;

    /**
     * @return The number of IOPS allowed across all VMs mounting the shared disk as read-only; only settable for UltraSSD disks and PremiumV2 disks with shared disk enabled. One operation can transfer between 4k and 256k bytes.
     * 
     */
    public Optional<Output<Integer>> diskIopsReadOnly() {
        return Optional.ofNullable(this.diskIopsReadOnly);
    }

    /**
     * The number of IOPS allowed for this disk; only settable for UltraSSD disks and PremiumV2 disks. One operation can transfer between 4k and 256k bytes.
     * 
     */
    @Import(name="diskIopsReadWrite")
    private @Nullable Output<Integer> diskIopsReadWrite;

    /**
     * @return The number of IOPS allowed for this disk; only settable for UltraSSD disks and PremiumV2 disks. One operation can transfer between 4k and 256k bytes.
     * 
     */
    public Optional<Output<Integer>> diskIopsReadWrite() {
        return Optional.ofNullable(this.diskIopsReadWrite);
    }

    /**
     * The bandwidth allowed across all VMs mounting the shared disk as read-only; only settable for UltraSSD disks and PremiumV2 disks with shared disk enabled. MBps means millions of bytes per second.
     * 
     */
    @Import(name="diskMbpsReadOnly")
    private @Nullable Output<Integer> diskMbpsReadOnly;

    /**
     * @return The bandwidth allowed across all VMs mounting the shared disk as read-only; only settable for UltraSSD disks and PremiumV2 disks with shared disk enabled. MBps means millions of bytes per second.
     * 
     */
    public Optional<Output<Integer>> diskMbpsReadOnly() {
        return Optional.ofNullable(this.diskMbpsReadOnly);
    }

    /**
     * The bandwidth allowed for this disk; only settable for UltraSSD disks and PremiumV2 disks. MBps means millions of bytes per second.
     * 
     */
    @Import(name="diskMbpsReadWrite")
    private @Nullable Output<Integer> diskMbpsReadWrite;

    /**
     * @return The bandwidth allowed for this disk; only settable for UltraSSD disks and PremiumV2 disks. MBps means millions of bytes per second.
     * 
     */
    public Optional<Output<Integer>> diskMbpsReadWrite() {
        return Optional.ofNullable(this.diskMbpsReadWrite);
    }

    /**
     * Specifies the size of the managed disk to create in gigabytes. If `create_option` is `Copy` or `FromImage`, then the value must be equal to or greater than the source&#39;s size. The size can only be increased.
     * 
     */
    @Import(name="diskSizeGb")
    private @Nullable Output<Integer> diskSizeGb;

    /**
     * @return Specifies the size of the managed disk to create in gigabytes. If `create_option` is `Copy` or `FromImage`, then the value must be equal to or greater than the source&#39;s size. The size can only be increased.
     * 
     */
    public Optional<Output<Integer>> diskSizeGb() {
        return Optional.ofNullable(this.diskSizeGb);
    }

    /**
     * Specifies the Edge Zone within the Azure Region where this Managed Disk should exist. Changing this forces a new Managed Disk to be created.
     * 
     */
    @Import(name="edgeZone")
    private @Nullable Output<String> edgeZone;

    /**
     * @return Specifies the Edge Zone within the Azure Region where this Managed Disk should exist. Changing this forces a new Managed Disk to be created.
     * 
     */
    public Optional<Output<String>> edgeZone() {
        return Optional.ofNullable(this.edgeZone);
    }

    /**
     * A `encryption_settings` block as defined below.
     * 
     */
    @Import(name="encryptionSettings")
    private @Nullable Output<ManagedDiskEncryptionSettingsArgs> encryptionSettings;

    /**
     * @return A `encryption_settings` block as defined below.
     * 
     */
    public Optional<Output<ManagedDiskEncryptionSettingsArgs>> encryptionSettings() {
        return Optional.ofNullable(this.encryptionSettings);
    }

    /**
     * ID of a Gallery Image Version to copy when `create_option` is `FromImage`. This field cannot be specified if image_reference_id is specified.
     * 
     */
    @Import(name="galleryImageReferenceId")
    private @Nullable Output<String> galleryImageReferenceId;

    /**
     * @return ID of a Gallery Image Version to copy when `create_option` is `FromImage`. This field cannot be specified if image_reference_id is specified.
     * 
     */
    public Optional<Output<String>> galleryImageReferenceId() {
        return Optional.ofNullable(this.galleryImageReferenceId);
    }

    /**
     * The HyperV Generation of the Disk when the source of an `Import` or `Copy` operation targets a source that contains an operating system. Possible values are `V1` and `V2`. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="hyperVGeneration")
    private @Nullable Output<String> hyperVGeneration;

    /**
     * @return The HyperV Generation of the Disk when the source of an `Import` or `Copy` operation targets a source that contains an operating system. Possible values are `V1` and `V2`. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> hyperVGeneration() {
        return Optional.ofNullable(this.hyperVGeneration);
    }

    /**
     * ID of an existing platform/marketplace disk image to copy when `create_option` is `FromImage`. This field cannot be specified if gallery_image_reference_id is specified.
     * 
     */
    @Import(name="imageReferenceId")
    private @Nullable Output<String> imageReferenceId;

    /**
     * @return ID of an existing platform/marketplace disk image to copy when `create_option` is `FromImage`. This field cannot be specified if gallery_image_reference_id is specified.
     * 
     */
    public Optional<Output<String>> imageReferenceId() {
        return Optional.ofNullable(this.imageReferenceId);
    }

    /**
     * Specified the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Specified the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Logical Sector Size. Possible values are: `512` and `4096`. Defaults to `4096`. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="logicalSectorSize")
    private @Nullable Output<Integer> logicalSectorSize;

    /**
     * @return Logical Sector Size. Possible values are: `512` and `4096`. Defaults to `4096`. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<Integer>> logicalSectorSize() {
        return Optional.ofNullable(this.logicalSectorSize);
    }

    /**
     * The maximum number of VMs that can attach to the disk at the same time. Value greater than one indicates a disk that can be mounted on multiple VMs at the same time.
     * 
     */
    @Import(name="maxShares")
    private @Nullable Output<Integer> maxShares;

    /**
     * @return The maximum number of VMs that can attach to the disk at the same time. Value greater than one indicates a disk that can be mounted on multiple VMs at the same time.
     * 
     */
    public Optional<Output<Integer>> maxShares() {
        return Optional.ofNullable(this.maxShares);
    }

    /**
     * Specifies the name of the Managed Disk. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the name of the Managed Disk. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Policy for accessing the disk via network. Allowed values are `AllowAll`, `AllowPrivate`, and `DenyAll`.
     * 
     */
    @Import(name="networkAccessPolicy")
    private @Nullable Output<String> networkAccessPolicy;

    /**
     * @return Policy for accessing the disk via network. Allowed values are `AllowAll`, `AllowPrivate`, and `DenyAll`.
     * 
     */
    public Optional<Output<String>> networkAccessPolicy() {
        return Optional.ofNullable(this.networkAccessPolicy);
    }

    /**
     * Specifies if On-Demand Bursting is enabled for the Managed Disk. Defaults to `false`.
     * 
     */
    @Import(name="onDemandBurstingEnabled")
    private @Nullable Output<Boolean> onDemandBurstingEnabled;

    /**
     * @return Specifies if On-Demand Bursting is enabled for the Managed Disk. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> onDemandBurstingEnabled() {
        return Optional.ofNullable(this.onDemandBurstingEnabled);
    }

    /**
     * Specify a value when the source of an `Import` or `Copy` operation targets a source that contains an operating system. Valid values are `Linux` or `Windows`.
     * 
     */
    @Import(name="osType")
    private @Nullable Output<String> osType;

    /**
     * @return Specify a value when the source of an `Import` or `Copy` operation targets a source that contains an operating system. Valid values are `Linux` or `Windows`.
     * 
     */
    public Optional<Output<String>> osType() {
        return Optional.ofNullable(this.osType);
    }

    /**
     * Whether it is allowed to access the disk via public network. Defaults to `true`.
     * 
     */
    @Import(name="publicNetworkAccessEnabled")
    private @Nullable Output<Boolean> publicNetworkAccessEnabled;

    /**
     * @return Whether it is allowed to access the disk via public network. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> publicNetworkAccessEnabled() {
        return Optional.ofNullable(this.publicNetworkAccessEnabled);
    }

    /**
     * The name of the Resource Group where the Managed Disk should exist.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the Resource Group where the Managed Disk should exist.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The ID of the Disk Encryption Set which should be used to Encrypt this OS Disk when the Virtual Machine is a Confidential VM. Conflicts with `disk_encryption_set_id`. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="secureVmDiskEncryptionSetId")
    private @Nullable Output<String> secureVmDiskEncryptionSetId;

    /**
     * @return The ID of the Disk Encryption Set which should be used to Encrypt this OS Disk when the Virtual Machine is a Confidential VM. Conflicts with `disk_encryption_set_id`. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> secureVmDiskEncryptionSetId() {
        return Optional.ofNullable(this.secureVmDiskEncryptionSetId);
    }

    /**
     * Security Type of the Managed Disk when it is used for a Confidential VM. Possible values are `ConfidentialVM_VMGuestStateOnlyEncryptedWithPlatformKey`, `ConfidentialVM_DiskEncryptedWithPlatformKey` and `ConfidentialVM_DiskEncryptedWithCustomerKey`. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="securityType")
    private @Nullable Output<String> securityType;

    /**
     * @return Security Type of the Managed Disk when it is used for a Confidential VM. Possible values are `ConfidentialVM_VMGuestStateOnlyEncryptedWithPlatformKey`, `ConfidentialVM_DiskEncryptedWithPlatformKey` and `ConfidentialVM_DiskEncryptedWithCustomerKey`. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> securityType() {
        return Optional.ofNullable(this.securityType);
    }

    /**
     * The ID of an existing Managed Disk or Snapshot to copy when `create_option` is `Copy` or the recovery point to restore when `create_option` is `Restore`
     * 
     */
    @Import(name="sourceResourceId")
    private @Nullable Output<String> sourceResourceId;

    /**
     * @return The ID of an existing Managed Disk or Snapshot to copy when `create_option` is `Copy` or the recovery point to restore when `create_option` is `Restore`
     * 
     */
    public Optional<Output<String>> sourceResourceId() {
        return Optional.ofNullable(this.sourceResourceId);
    }

    /**
     * URI to a valid VHD file to be used when `create_option` is `Import`.
     * 
     */
    @Import(name="sourceUri")
    private @Nullable Output<String> sourceUri;

    /**
     * @return URI to a valid VHD file to be used when `create_option` is `Import`.
     * 
     */
    public Optional<Output<String>> sourceUri() {
        return Optional.ofNullable(this.sourceUri);
    }

    /**
     * The ID of the Storage Account where the `source_uri` is located. Required when `create_option` is set to `Import`.  Changing this forces a new resource to be created.
     * 
     */
    @Import(name="storageAccountId")
    private @Nullable Output<String> storageAccountId;

    /**
     * @return The ID of the Storage Account where the `source_uri` is located. Required when `create_option` is set to `Import`.  Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> storageAccountId() {
        return Optional.ofNullable(this.storageAccountId);
    }

    /**
     * The type of storage to use for the managed disk. Possible values are `Standard_LRS`, `StandardSSD_ZRS`, `Premium_LRS`, `PremiumV2_LRS`, `Premium_ZRS`, `StandardSSD_LRS` or `UltraSSD_LRS`.
     * 
     */
    @Import(name="storageAccountType", required=true)
    private Output<String> storageAccountType;

    /**
     * @return The type of storage to use for the managed disk. Possible values are `Standard_LRS`, `StandardSSD_ZRS`, `Premium_LRS`, `PremiumV2_LRS`, `Premium_ZRS`, `StandardSSD_LRS` or `UltraSSD_LRS`.
     * 
     */
    public Output<String> storageAccountType() {
        return this.storageAccountType;
    }

    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The disk performance tier to use. Possible values are documented [here](https://docs.microsoft.com/azure/virtual-machines/disks-change-performance). This feature is currently supported only for premium SSDs.
     * 
     */
    @Import(name="tier")
    private @Nullable Output<String> tier;

    /**
     * @return The disk performance tier to use. Possible values are documented [here](https://docs.microsoft.com/azure/virtual-machines/disks-change-performance). This feature is currently supported only for premium SSDs.
     * 
     */
    public Optional<Output<String>> tier() {
        return Optional.ofNullable(this.tier);
    }

    /**
     * Specifies if Trusted Launch is enabled for the Managed Disk. Defaults to `false`.
     * 
     */
    @Import(name="trustedLaunchEnabled")
    private @Nullable Output<Boolean> trustedLaunchEnabled;

    /**
     * @return Specifies if Trusted Launch is enabled for the Managed Disk. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> trustedLaunchEnabled() {
        return Optional.ofNullable(this.trustedLaunchEnabled);
    }

    /**
     * Specifies the size of the managed disk to create in bytes. Required when `create_option` is `Upload`. The value must be equal to the source disk to be copied in bytes. Source disk size could be calculated with `ls -l` or `wc -c`. More information can be found at [Copy a managed disk](https://learn.microsoft.com/en-us/azure/virtual-machines/linux/disks-upload-vhd-to-managed-disk-cli#copy-a-managed-disk). Changing this forces a new resource to be created.
     * 
     */
    @Import(name="uploadSizeBytes")
    private @Nullable Output<Integer> uploadSizeBytes;

    /**
     * @return Specifies the size of the managed disk to create in bytes. Required when `create_option` is `Upload`. The value must be equal to the source disk to be copied in bytes. Source disk size could be calculated with `ls -l` or `wc -c`. More information can be found at [Copy a managed disk](https://learn.microsoft.com/en-us/azure/virtual-machines/linux/disks-upload-vhd-to-managed-disk-cli#copy-a-managed-disk). Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<Integer>> uploadSizeBytes() {
        return Optional.ofNullable(this.uploadSizeBytes);
    }

    /**
     * Specifies the Availability Zone in which this Managed Disk should be located. Changing this property forces a new resource to be created.
     * 
     */
    @Import(name="zone")
    private @Nullable Output<String> zone;

    /**
     * @return Specifies the Availability Zone in which this Managed Disk should be located. Changing this property forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> zone() {
        return Optional.ofNullable(this.zone);
    }

    private ManagedDiskArgs() {}

    private ManagedDiskArgs(ManagedDiskArgs $) {
        this.createOption = $.createOption;
        this.diskAccessId = $.diskAccessId;
        this.diskEncryptionSetId = $.diskEncryptionSetId;
        this.diskIopsReadOnly = $.diskIopsReadOnly;
        this.diskIopsReadWrite = $.diskIopsReadWrite;
        this.diskMbpsReadOnly = $.diskMbpsReadOnly;
        this.diskMbpsReadWrite = $.diskMbpsReadWrite;
        this.diskSizeGb = $.diskSizeGb;
        this.edgeZone = $.edgeZone;
        this.encryptionSettings = $.encryptionSettings;
        this.galleryImageReferenceId = $.galleryImageReferenceId;
        this.hyperVGeneration = $.hyperVGeneration;
        this.imageReferenceId = $.imageReferenceId;
        this.location = $.location;
        this.logicalSectorSize = $.logicalSectorSize;
        this.maxShares = $.maxShares;
        this.name = $.name;
        this.networkAccessPolicy = $.networkAccessPolicy;
        this.onDemandBurstingEnabled = $.onDemandBurstingEnabled;
        this.osType = $.osType;
        this.publicNetworkAccessEnabled = $.publicNetworkAccessEnabled;
        this.resourceGroupName = $.resourceGroupName;
        this.secureVmDiskEncryptionSetId = $.secureVmDiskEncryptionSetId;
        this.securityType = $.securityType;
        this.sourceResourceId = $.sourceResourceId;
        this.sourceUri = $.sourceUri;
        this.storageAccountId = $.storageAccountId;
        this.storageAccountType = $.storageAccountType;
        this.tags = $.tags;
        this.tier = $.tier;
        this.trustedLaunchEnabled = $.trustedLaunchEnabled;
        this.uploadSizeBytes = $.uploadSizeBytes;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedDiskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedDiskArgs $;

        public Builder() {
            $ = new ManagedDiskArgs();
        }

        public Builder(ManagedDiskArgs defaults) {
            $ = new ManagedDiskArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param createOption The method to use when creating the managed disk. Changing this forces a new resource to be created. Possible values include:
         * 
         * @return builder
         * 
         */
        public Builder createOption(Output<String> createOption) {
            $.createOption = createOption;
            return this;
        }

        /**
         * @param createOption The method to use when creating the managed disk. Changing this forces a new resource to be created. Possible values include:
         * 
         * @return builder
         * 
         */
        public Builder createOption(String createOption) {
            return createOption(Output.of(createOption));
        }

        /**
         * @param diskAccessId The ID of the disk access resource for using private endpoints on disks.
         * 
         * @return builder
         * 
         */
        public Builder diskAccessId(@Nullable Output<String> diskAccessId) {
            $.diskAccessId = diskAccessId;
            return this;
        }

        /**
         * @param diskAccessId The ID of the disk access resource for using private endpoints on disks.
         * 
         * @return builder
         * 
         */
        public Builder diskAccessId(String diskAccessId) {
            return diskAccessId(Output.of(diskAccessId));
        }

        /**
         * @param diskEncryptionSetId The ID of a Disk Encryption Set which should be used to encrypt this Managed Disk. Conflicts with `secure_vm_disk_encryption_set_id`.
         * 
         * @return builder
         * 
         */
        public Builder diskEncryptionSetId(@Nullable Output<String> diskEncryptionSetId) {
            $.diskEncryptionSetId = diskEncryptionSetId;
            return this;
        }

        /**
         * @param diskEncryptionSetId The ID of a Disk Encryption Set which should be used to encrypt this Managed Disk. Conflicts with `secure_vm_disk_encryption_set_id`.
         * 
         * @return builder
         * 
         */
        public Builder diskEncryptionSetId(String diskEncryptionSetId) {
            return diskEncryptionSetId(Output.of(diskEncryptionSetId));
        }

        /**
         * @param diskIopsReadOnly The number of IOPS allowed across all VMs mounting the shared disk as read-only; only settable for UltraSSD disks and PremiumV2 disks with shared disk enabled. One operation can transfer between 4k and 256k bytes.
         * 
         * @return builder
         * 
         */
        public Builder diskIopsReadOnly(@Nullable Output<Integer> diskIopsReadOnly) {
            $.diskIopsReadOnly = diskIopsReadOnly;
            return this;
        }

        /**
         * @param diskIopsReadOnly The number of IOPS allowed across all VMs mounting the shared disk as read-only; only settable for UltraSSD disks and PremiumV2 disks with shared disk enabled. One operation can transfer between 4k and 256k bytes.
         * 
         * @return builder
         * 
         */
        public Builder diskIopsReadOnly(Integer diskIopsReadOnly) {
            return diskIopsReadOnly(Output.of(diskIopsReadOnly));
        }

        /**
         * @param diskIopsReadWrite The number of IOPS allowed for this disk; only settable for UltraSSD disks and PremiumV2 disks. One operation can transfer between 4k and 256k bytes.
         * 
         * @return builder
         * 
         */
        public Builder diskIopsReadWrite(@Nullable Output<Integer> diskIopsReadWrite) {
            $.diskIopsReadWrite = diskIopsReadWrite;
            return this;
        }

        /**
         * @param diskIopsReadWrite The number of IOPS allowed for this disk; only settable for UltraSSD disks and PremiumV2 disks. One operation can transfer between 4k and 256k bytes.
         * 
         * @return builder
         * 
         */
        public Builder diskIopsReadWrite(Integer diskIopsReadWrite) {
            return diskIopsReadWrite(Output.of(diskIopsReadWrite));
        }

        /**
         * @param diskMbpsReadOnly The bandwidth allowed across all VMs mounting the shared disk as read-only; only settable for UltraSSD disks and PremiumV2 disks with shared disk enabled. MBps means millions of bytes per second.
         * 
         * @return builder
         * 
         */
        public Builder diskMbpsReadOnly(@Nullable Output<Integer> diskMbpsReadOnly) {
            $.diskMbpsReadOnly = diskMbpsReadOnly;
            return this;
        }

        /**
         * @param diskMbpsReadOnly The bandwidth allowed across all VMs mounting the shared disk as read-only; only settable for UltraSSD disks and PremiumV2 disks with shared disk enabled. MBps means millions of bytes per second.
         * 
         * @return builder
         * 
         */
        public Builder diskMbpsReadOnly(Integer diskMbpsReadOnly) {
            return diskMbpsReadOnly(Output.of(diskMbpsReadOnly));
        }

        /**
         * @param diskMbpsReadWrite The bandwidth allowed for this disk; only settable for UltraSSD disks and PremiumV2 disks. MBps means millions of bytes per second.
         * 
         * @return builder
         * 
         */
        public Builder diskMbpsReadWrite(@Nullable Output<Integer> diskMbpsReadWrite) {
            $.diskMbpsReadWrite = diskMbpsReadWrite;
            return this;
        }

        /**
         * @param diskMbpsReadWrite The bandwidth allowed for this disk; only settable for UltraSSD disks and PremiumV2 disks. MBps means millions of bytes per second.
         * 
         * @return builder
         * 
         */
        public Builder diskMbpsReadWrite(Integer diskMbpsReadWrite) {
            return diskMbpsReadWrite(Output.of(diskMbpsReadWrite));
        }

        /**
         * @param diskSizeGb Specifies the size of the managed disk to create in gigabytes. If `create_option` is `Copy` or `FromImage`, then the value must be equal to or greater than the source&#39;s size. The size can only be increased.
         * 
         * @return builder
         * 
         */
        public Builder diskSizeGb(@Nullable Output<Integer> diskSizeGb) {
            $.diskSizeGb = diskSizeGb;
            return this;
        }

        /**
         * @param diskSizeGb Specifies the size of the managed disk to create in gigabytes. If `create_option` is `Copy` or `FromImage`, then the value must be equal to or greater than the source&#39;s size. The size can only be increased.
         * 
         * @return builder
         * 
         */
        public Builder diskSizeGb(Integer diskSizeGb) {
            return diskSizeGb(Output.of(diskSizeGb));
        }

        /**
         * @param edgeZone Specifies the Edge Zone within the Azure Region where this Managed Disk should exist. Changing this forces a new Managed Disk to be created.
         * 
         * @return builder
         * 
         */
        public Builder edgeZone(@Nullable Output<String> edgeZone) {
            $.edgeZone = edgeZone;
            return this;
        }

        /**
         * @param edgeZone Specifies the Edge Zone within the Azure Region where this Managed Disk should exist. Changing this forces a new Managed Disk to be created.
         * 
         * @return builder
         * 
         */
        public Builder edgeZone(String edgeZone) {
            return edgeZone(Output.of(edgeZone));
        }

        /**
         * @param encryptionSettings A `encryption_settings` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder encryptionSettings(@Nullable Output<ManagedDiskEncryptionSettingsArgs> encryptionSettings) {
            $.encryptionSettings = encryptionSettings;
            return this;
        }

        /**
         * @param encryptionSettings A `encryption_settings` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder encryptionSettings(ManagedDiskEncryptionSettingsArgs encryptionSettings) {
            return encryptionSettings(Output.of(encryptionSettings));
        }

        /**
         * @param galleryImageReferenceId ID of a Gallery Image Version to copy when `create_option` is `FromImage`. This field cannot be specified if image_reference_id is specified.
         * 
         * @return builder
         * 
         */
        public Builder galleryImageReferenceId(@Nullable Output<String> galleryImageReferenceId) {
            $.galleryImageReferenceId = galleryImageReferenceId;
            return this;
        }

        /**
         * @param galleryImageReferenceId ID of a Gallery Image Version to copy when `create_option` is `FromImage`. This field cannot be specified if image_reference_id is specified.
         * 
         * @return builder
         * 
         */
        public Builder galleryImageReferenceId(String galleryImageReferenceId) {
            return galleryImageReferenceId(Output.of(galleryImageReferenceId));
        }

        /**
         * @param hyperVGeneration The HyperV Generation of the Disk when the source of an `Import` or `Copy` operation targets a source that contains an operating system. Possible values are `V1` and `V2`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder hyperVGeneration(@Nullable Output<String> hyperVGeneration) {
            $.hyperVGeneration = hyperVGeneration;
            return this;
        }

        /**
         * @param hyperVGeneration The HyperV Generation of the Disk when the source of an `Import` or `Copy` operation targets a source that contains an operating system. Possible values are `V1` and `V2`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder hyperVGeneration(String hyperVGeneration) {
            return hyperVGeneration(Output.of(hyperVGeneration));
        }

        /**
         * @param imageReferenceId ID of an existing platform/marketplace disk image to copy when `create_option` is `FromImage`. This field cannot be specified if gallery_image_reference_id is specified.
         * 
         * @return builder
         * 
         */
        public Builder imageReferenceId(@Nullable Output<String> imageReferenceId) {
            $.imageReferenceId = imageReferenceId;
            return this;
        }

        /**
         * @param imageReferenceId ID of an existing platform/marketplace disk image to copy when `create_option` is `FromImage`. This field cannot be specified if gallery_image_reference_id is specified.
         * 
         * @return builder
         * 
         */
        public Builder imageReferenceId(String imageReferenceId) {
            return imageReferenceId(Output.of(imageReferenceId));
        }

        /**
         * @param location Specified the supported Azure location where the resource exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Specified the supported Azure location where the resource exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param logicalSectorSize Logical Sector Size. Possible values are: `512` and `4096`. Defaults to `4096`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder logicalSectorSize(@Nullable Output<Integer> logicalSectorSize) {
            $.logicalSectorSize = logicalSectorSize;
            return this;
        }

        /**
         * @param logicalSectorSize Logical Sector Size. Possible values are: `512` and `4096`. Defaults to `4096`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder logicalSectorSize(Integer logicalSectorSize) {
            return logicalSectorSize(Output.of(logicalSectorSize));
        }

        /**
         * @param maxShares The maximum number of VMs that can attach to the disk at the same time. Value greater than one indicates a disk that can be mounted on multiple VMs at the same time.
         * 
         * @return builder
         * 
         */
        public Builder maxShares(@Nullable Output<Integer> maxShares) {
            $.maxShares = maxShares;
            return this;
        }

        /**
         * @param maxShares The maximum number of VMs that can attach to the disk at the same time. Value greater than one indicates a disk that can be mounted on multiple VMs at the same time.
         * 
         * @return builder
         * 
         */
        public Builder maxShares(Integer maxShares) {
            return maxShares(Output.of(maxShares));
        }

        /**
         * @param name Specifies the name of the Managed Disk. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of the Managed Disk. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkAccessPolicy Policy for accessing the disk via network. Allowed values are `AllowAll`, `AllowPrivate`, and `DenyAll`.
         * 
         * @return builder
         * 
         */
        public Builder networkAccessPolicy(@Nullable Output<String> networkAccessPolicy) {
            $.networkAccessPolicy = networkAccessPolicy;
            return this;
        }

        /**
         * @param networkAccessPolicy Policy for accessing the disk via network. Allowed values are `AllowAll`, `AllowPrivate`, and `DenyAll`.
         * 
         * @return builder
         * 
         */
        public Builder networkAccessPolicy(String networkAccessPolicy) {
            return networkAccessPolicy(Output.of(networkAccessPolicy));
        }

        /**
         * @param onDemandBurstingEnabled Specifies if On-Demand Bursting is enabled for the Managed Disk. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder onDemandBurstingEnabled(@Nullable Output<Boolean> onDemandBurstingEnabled) {
            $.onDemandBurstingEnabled = onDemandBurstingEnabled;
            return this;
        }

        /**
         * @param onDemandBurstingEnabled Specifies if On-Demand Bursting is enabled for the Managed Disk. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder onDemandBurstingEnabled(Boolean onDemandBurstingEnabled) {
            return onDemandBurstingEnabled(Output.of(onDemandBurstingEnabled));
        }

        /**
         * @param osType Specify a value when the source of an `Import` or `Copy` operation targets a source that contains an operating system. Valid values are `Linux` or `Windows`.
         * 
         * @return builder
         * 
         */
        public Builder osType(@Nullable Output<String> osType) {
            $.osType = osType;
            return this;
        }

        /**
         * @param osType Specify a value when the source of an `Import` or `Copy` operation targets a source that contains an operating system. Valid values are `Linux` or `Windows`.
         * 
         * @return builder
         * 
         */
        public Builder osType(String osType) {
            return osType(Output.of(osType));
        }

        /**
         * @param publicNetworkAccessEnabled Whether it is allowed to access the disk via public network. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder publicNetworkAccessEnabled(@Nullable Output<Boolean> publicNetworkAccessEnabled) {
            $.publicNetworkAccessEnabled = publicNetworkAccessEnabled;
            return this;
        }

        /**
         * @param publicNetworkAccessEnabled Whether it is allowed to access the disk via public network. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder publicNetworkAccessEnabled(Boolean publicNetworkAccessEnabled) {
            return publicNetworkAccessEnabled(Output.of(publicNetworkAccessEnabled));
        }

        /**
         * @param resourceGroupName The name of the Resource Group where the Managed Disk should exist.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the Resource Group where the Managed Disk should exist.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param secureVmDiskEncryptionSetId The ID of the Disk Encryption Set which should be used to Encrypt this OS Disk when the Virtual Machine is a Confidential VM. Conflicts with `disk_encryption_set_id`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder secureVmDiskEncryptionSetId(@Nullable Output<String> secureVmDiskEncryptionSetId) {
            $.secureVmDiskEncryptionSetId = secureVmDiskEncryptionSetId;
            return this;
        }

        /**
         * @param secureVmDiskEncryptionSetId The ID of the Disk Encryption Set which should be used to Encrypt this OS Disk when the Virtual Machine is a Confidential VM. Conflicts with `disk_encryption_set_id`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder secureVmDiskEncryptionSetId(String secureVmDiskEncryptionSetId) {
            return secureVmDiskEncryptionSetId(Output.of(secureVmDiskEncryptionSetId));
        }

        /**
         * @param securityType Security Type of the Managed Disk when it is used for a Confidential VM. Possible values are `ConfidentialVM_VMGuestStateOnlyEncryptedWithPlatformKey`, `ConfidentialVM_DiskEncryptedWithPlatformKey` and `ConfidentialVM_DiskEncryptedWithCustomerKey`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder securityType(@Nullable Output<String> securityType) {
            $.securityType = securityType;
            return this;
        }

        /**
         * @param securityType Security Type of the Managed Disk when it is used for a Confidential VM. Possible values are `ConfidentialVM_VMGuestStateOnlyEncryptedWithPlatformKey`, `ConfidentialVM_DiskEncryptedWithPlatformKey` and `ConfidentialVM_DiskEncryptedWithCustomerKey`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder securityType(String securityType) {
            return securityType(Output.of(securityType));
        }

        /**
         * @param sourceResourceId The ID of an existing Managed Disk or Snapshot to copy when `create_option` is `Copy` or the recovery point to restore when `create_option` is `Restore`
         * 
         * @return builder
         * 
         */
        public Builder sourceResourceId(@Nullable Output<String> sourceResourceId) {
            $.sourceResourceId = sourceResourceId;
            return this;
        }

        /**
         * @param sourceResourceId The ID of an existing Managed Disk or Snapshot to copy when `create_option` is `Copy` or the recovery point to restore when `create_option` is `Restore`
         * 
         * @return builder
         * 
         */
        public Builder sourceResourceId(String sourceResourceId) {
            return sourceResourceId(Output.of(sourceResourceId));
        }

        /**
         * @param sourceUri URI to a valid VHD file to be used when `create_option` is `Import`.
         * 
         * @return builder
         * 
         */
        public Builder sourceUri(@Nullable Output<String> sourceUri) {
            $.sourceUri = sourceUri;
            return this;
        }

        /**
         * @param sourceUri URI to a valid VHD file to be used when `create_option` is `Import`.
         * 
         * @return builder
         * 
         */
        public Builder sourceUri(String sourceUri) {
            return sourceUri(Output.of(sourceUri));
        }

        /**
         * @param storageAccountId The ID of the Storage Account where the `source_uri` is located. Required when `create_option` is set to `Import`.  Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountId(@Nullable Output<String> storageAccountId) {
            $.storageAccountId = storageAccountId;
            return this;
        }

        /**
         * @param storageAccountId The ID of the Storage Account where the `source_uri` is located. Required when `create_option` is set to `Import`.  Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountId(String storageAccountId) {
            return storageAccountId(Output.of(storageAccountId));
        }

        /**
         * @param storageAccountType The type of storage to use for the managed disk. Possible values are `Standard_LRS`, `StandardSSD_ZRS`, `Premium_LRS`, `PremiumV2_LRS`, `Premium_ZRS`, `StandardSSD_LRS` or `UltraSSD_LRS`.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountType(Output<String> storageAccountType) {
            $.storageAccountType = storageAccountType;
            return this;
        }

        /**
         * @param storageAccountType The type of storage to use for the managed disk. Possible values are `Standard_LRS`, `StandardSSD_ZRS`, `Premium_LRS`, `PremiumV2_LRS`, `Premium_ZRS`, `StandardSSD_LRS` or `UltraSSD_LRS`.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountType(String storageAccountType) {
            return storageAccountType(Output.of(storageAccountType));
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tier The disk performance tier to use. Possible values are documented [here](https://docs.microsoft.com/azure/virtual-machines/disks-change-performance). This feature is currently supported only for premium SSDs.
         * 
         * @return builder
         * 
         */
        public Builder tier(@Nullable Output<String> tier) {
            $.tier = tier;
            return this;
        }

        /**
         * @param tier The disk performance tier to use. Possible values are documented [here](https://docs.microsoft.com/azure/virtual-machines/disks-change-performance). This feature is currently supported only for premium SSDs.
         * 
         * @return builder
         * 
         */
        public Builder tier(String tier) {
            return tier(Output.of(tier));
        }

        /**
         * @param trustedLaunchEnabled Specifies if Trusted Launch is enabled for the Managed Disk. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder trustedLaunchEnabled(@Nullable Output<Boolean> trustedLaunchEnabled) {
            $.trustedLaunchEnabled = trustedLaunchEnabled;
            return this;
        }

        /**
         * @param trustedLaunchEnabled Specifies if Trusted Launch is enabled for the Managed Disk. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder trustedLaunchEnabled(Boolean trustedLaunchEnabled) {
            return trustedLaunchEnabled(Output.of(trustedLaunchEnabled));
        }

        /**
         * @param uploadSizeBytes Specifies the size of the managed disk to create in bytes. Required when `create_option` is `Upload`. The value must be equal to the source disk to be copied in bytes. Source disk size could be calculated with `ls -l` or `wc -c`. More information can be found at [Copy a managed disk](https://learn.microsoft.com/en-us/azure/virtual-machines/linux/disks-upload-vhd-to-managed-disk-cli#copy-a-managed-disk). Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder uploadSizeBytes(@Nullable Output<Integer> uploadSizeBytes) {
            $.uploadSizeBytes = uploadSizeBytes;
            return this;
        }

        /**
         * @param uploadSizeBytes Specifies the size of the managed disk to create in bytes. Required when `create_option` is `Upload`. The value must be equal to the source disk to be copied in bytes. Source disk size could be calculated with `ls -l` or `wc -c`. More information can be found at [Copy a managed disk](https://learn.microsoft.com/en-us/azure/virtual-machines/linux/disks-upload-vhd-to-managed-disk-cli#copy-a-managed-disk). Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder uploadSizeBytes(Integer uploadSizeBytes) {
            return uploadSizeBytes(Output.of(uploadSizeBytes));
        }

        /**
         * @param zone Specifies the Availability Zone in which this Managed Disk should be located. Changing this property forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder zone(@Nullable Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone Specifies the Availability Zone in which this Managed Disk should be located. Changing this property forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public ManagedDiskArgs build() {
            $.createOption = Objects.requireNonNull($.createOption, "expected parameter 'createOption' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.storageAccountType = Objects.requireNonNull($.storageAccountType, "expected parameter 'storageAccountType' to be non-null");
            return $;
        }
    }

}
