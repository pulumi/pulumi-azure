// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.dataprotection;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BackupInstanceDiskArgs extends com.pulumi.resources.ResourceArgs {

    public static final BackupInstanceDiskArgs Empty = new BackupInstanceDiskArgs();

    /**
     * The ID of the Backup Policy.
     * 
     */
    @Import(name="backupPolicyId", required=true)
    private Output<String> backupPolicyId;

    /**
     * @return The ID of the Backup Policy.
     * 
     */
    public Output<String> backupPolicyId() {
        return this.backupPolicyId;
    }

    /**
     * The ID of the source Disk. Changing this forces a new Backup Instance Disk to be created.
     * 
     */
    @Import(name="diskId", required=true)
    private Output<String> diskId;

    /**
     * @return The ID of the source Disk. Changing this forces a new Backup Instance Disk to be created.
     * 
     */
    public Output<String> diskId() {
        return this.diskId;
    }

    /**
     * The Azure Region where the Backup Instance Disk should exist. Changing this forces a new Backup Instance Disk to be created.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The Azure Region where the Backup Instance Disk should exist. Changing this forces a new Backup Instance Disk to be created.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name which should be used for this Backup Instance Disk. Changing this forces a new Backup Instance Disk to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name which should be used for this Backup Instance Disk. Changing this forces a new Backup Instance Disk to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The name of the Resource Group where snapshots are stored. Changing this forces a new Backup Instance Disk to be created.
     * 
     */
    @Import(name="snapshotResourceGroupName", required=true)
    private Output<String> snapshotResourceGroupName;

    /**
     * @return The name of the Resource Group where snapshots are stored. Changing this forces a new Backup Instance Disk to be created.
     * 
     */
    public Output<String> snapshotResourceGroupName() {
        return this.snapshotResourceGroupName;
    }

    /**
     * The ID of the Backup Vault within which the Backup Instance Disk should exist. Changing this forces a new Backup Instance Disk to be created.
     * 
     */
    @Import(name="vaultId", required=true)
    private Output<String> vaultId;

    /**
     * @return The ID of the Backup Vault within which the Backup Instance Disk should exist. Changing this forces a new Backup Instance Disk to be created.
     * 
     */
    public Output<String> vaultId() {
        return this.vaultId;
    }

    private BackupInstanceDiskArgs() {}

    private BackupInstanceDiskArgs(BackupInstanceDiskArgs $) {
        this.backupPolicyId = $.backupPolicyId;
        this.diskId = $.diskId;
        this.location = $.location;
        this.name = $.name;
        this.snapshotResourceGroupName = $.snapshotResourceGroupName;
        this.vaultId = $.vaultId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackupInstanceDiskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackupInstanceDiskArgs $;

        public Builder() {
            $ = new BackupInstanceDiskArgs();
        }

        public Builder(BackupInstanceDiskArgs defaults) {
            $ = new BackupInstanceDiskArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backupPolicyId The ID of the Backup Policy.
         * 
         * @return builder
         * 
         */
        public Builder backupPolicyId(Output<String> backupPolicyId) {
            $.backupPolicyId = backupPolicyId;
            return this;
        }

        /**
         * @param backupPolicyId The ID of the Backup Policy.
         * 
         * @return builder
         * 
         */
        public Builder backupPolicyId(String backupPolicyId) {
            return backupPolicyId(Output.of(backupPolicyId));
        }

        /**
         * @param diskId The ID of the source Disk. Changing this forces a new Backup Instance Disk to be created.
         * 
         * @return builder
         * 
         */
        public Builder diskId(Output<String> diskId) {
            $.diskId = diskId;
            return this;
        }

        /**
         * @param diskId The ID of the source Disk. Changing this forces a new Backup Instance Disk to be created.
         * 
         * @return builder
         * 
         */
        public Builder diskId(String diskId) {
            return diskId(Output.of(diskId));
        }

        /**
         * @param location The Azure Region where the Backup Instance Disk should exist. Changing this forces a new Backup Instance Disk to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The Azure Region where the Backup Instance Disk should exist. Changing this forces a new Backup Instance Disk to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The name which should be used for this Backup Instance Disk. Changing this forces a new Backup Instance Disk to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this Backup Instance Disk. Changing this forces a new Backup Instance Disk to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param snapshotResourceGroupName The name of the Resource Group where snapshots are stored. Changing this forces a new Backup Instance Disk to be created.
         * 
         * @return builder
         * 
         */
        public Builder snapshotResourceGroupName(Output<String> snapshotResourceGroupName) {
            $.snapshotResourceGroupName = snapshotResourceGroupName;
            return this;
        }

        /**
         * @param snapshotResourceGroupName The name of the Resource Group where snapshots are stored. Changing this forces a new Backup Instance Disk to be created.
         * 
         * @return builder
         * 
         */
        public Builder snapshotResourceGroupName(String snapshotResourceGroupName) {
            return snapshotResourceGroupName(Output.of(snapshotResourceGroupName));
        }

        /**
         * @param vaultId The ID of the Backup Vault within which the Backup Instance Disk should exist. Changing this forces a new Backup Instance Disk to be created.
         * 
         * @return builder
         * 
         */
        public Builder vaultId(Output<String> vaultId) {
            $.vaultId = vaultId;
            return this;
        }

        /**
         * @param vaultId The ID of the Backup Vault within which the Backup Instance Disk should exist. Changing this forces a new Backup Instance Disk to be created.
         * 
         * @return builder
         * 
         */
        public Builder vaultId(String vaultId) {
            return vaultId(Output.of(vaultId));
        }

        public BackupInstanceDiskArgs build() {
            if ($.backupPolicyId == null) {
                throw new MissingRequiredPropertyException("BackupInstanceDiskArgs", "backupPolicyId");
            }
            if ($.diskId == null) {
                throw new MissingRequiredPropertyException("BackupInstanceDiskArgs", "diskId");
            }
            if ($.snapshotResourceGroupName == null) {
                throw new MissingRequiredPropertyException("BackupInstanceDiskArgs", "snapshotResourceGroupName");
            }
            if ($.vaultId == null) {
                throw new MissingRequiredPropertyException("BackupInstanceDiskArgs", "vaultId");
            }
            return $;
        }
    }

}
