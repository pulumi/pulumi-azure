// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.desktopvirtualization.inputs;

import com.pulumi.azure.desktopvirtualization.inputs.HostPoolScheduledAgentUpdatesScheduleArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HostPoolScheduledAgentUpdatesArgs extends com.pulumi.resources.ResourceArgs {

    public static final HostPoolScheduledAgentUpdatesArgs Empty = new HostPoolScheduledAgentUpdatesArgs();

    /**
     * Enables or disables scheduled updates of the AVD agent components (RDAgent, Geneva Monitoring agent, and side-by-side stack) on session hosts. If this is enabled then up to two `schedule` blocks must be defined. Default is `false`.
     * 
     * &gt; **NOTE:** if `enabled` is set to `true` then at least one and a maximum of two `schedule` blocks must be provided.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Enables or disables scheduled updates of the AVD agent components (RDAgent, Geneva Monitoring agent, and side-by-side stack) on session hosts. If this is enabled then up to two `schedule` blocks must be defined. Default is `false`.
     * 
     * &gt; **NOTE:** if `enabled` is set to `true` then at least one and a maximum of two `schedule` blocks must be provided.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * A `schedule` block as defined below. A maximum of two blocks can be added.
     * 
     */
    @Import(name="schedules")
    private @Nullable Output<List<HostPoolScheduledAgentUpdatesScheduleArgs>> schedules;

    /**
     * @return A `schedule` block as defined below. A maximum of two blocks can be added.
     * 
     */
    public Optional<Output<List<HostPoolScheduledAgentUpdatesScheduleArgs>>> schedules() {
        return Optional.ofNullable(this.schedules);
    }

    /**
     * Specifies the time zone in which the agent update schedule will apply, [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/). If `use_session_host_timezone` is enabled then it will override this setting. Default is `UTC`
     * 
     */
    @Import(name="timezone")
    private @Nullable Output<String> timezone;

    /**
     * @return Specifies the time zone in which the agent update schedule will apply, [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/). If `use_session_host_timezone` is enabled then it will override this setting. Default is `UTC`
     * 
     */
    public Optional<Output<String>> timezone() {
        return Optional.ofNullable(this.timezone);
    }

    /**
     * Specifies whether scheduled agent updates should be applied based on the timezone of the affected session host. If configured then this setting overrides `timezone`. Default is `false`.
     * 
     */
    @Import(name="useSessionHostTimezone")
    private @Nullable Output<Boolean> useSessionHostTimezone;

    /**
     * @return Specifies whether scheduled agent updates should be applied based on the timezone of the affected session host. If configured then this setting overrides `timezone`. Default is `false`.
     * 
     */
    public Optional<Output<Boolean>> useSessionHostTimezone() {
        return Optional.ofNullable(this.useSessionHostTimezone);
    }

    private HostPoolScheduledAgentUpdatesArgs() {}

    private HostPoolScheduledAgentUpdatesArgs(HostPoolScheduledAgentUpdatesArgs $) {
        this.enabled = $.enabled;
        this.schedules = $.schedules;
        this.timezone = $.timezone;
        this.useSessionHostTimezone = $.useSessionHostTimezone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HostPoolScheduledAgentUpdatesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HostPoolScheduledAgentUpdatesArgs $;

        public Builder() {
            $ = new HostPoolScheduledAgentUpdatesArgs();
        }

        public Builder(HostPoolScheduledAgentUpdatesArgs defaults) {
            $ = new HostPoolScheduledAgentUpdatesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled Enables or disables scheduled updates of the AVD agent components (RDAgent, Geneva Monitoring agent, and side-by-side stack) on session hosts. If this is enabled then up to two `schedule` blocks must be defined. Default is `false`.
         * 
         * &gt; **NOTE:** if `enabled` is set to `true` then at least one and a maximum of two `schedule` blocks must be provided.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Enables or disables scheduled updates of the AVD agent components (RDAgent, Geneva Monitoring agent, and side-by-side stack) on session hosts. If this is enabled then up to two `schedule` blocks must be defined. Default is `false`.
         * 
         * &gt; **NOTE:** if `enabled` is set to `true` then at least one and a maximum of two `schedule` blocks must be provided.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param schedules A `schedule` block as defined below. A maximum of two blocks can be added.
         * 
         * @return builder
         * 
         */
        public Builder schedules(@Nullable Output<List<HostPoolScheduledAgentUpdatesScheduleArgs>> schedules) {
            $.schedules = schedules;
            return this;
        }

        /**
         * @param schedules A `schedule` block as defined below. A maximum of two blocks can be added.
         * 
         * @return builder
         * 
         */
        public Builder schedules(List<HostPoolScheduledAgentUpdatesScheduleArgs> schedules) {
            return schedules(Output.of(schedules));
        }

        /**
         * @param schedules A `schedule` block as defined below. A maximum of two blocks can be added.
         * 
         * @return builder
         * 
         */
        public Builder schedules(HostPoolScheduledAgentUpdatesScheduleArgs... schedules) {
            return schedules(List.of(schedules));
        }

        /**
         * @param timezone Specifies the time zone in which the agent update schedule will apply, [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/). If `use_session_host_timezone` is enabled then it will override this setting. Default is `UTC`
         * 
         * @return builder
         * 
         */
        public Builder timezone(@Nullable Output<String> timezone) {
            $.timezone = timezone;
            return this;
        }

        /**
         * @param timezone Specifies the time zone in which the agent update schedule will apply, [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/). If `use_session_host_timezone` is enabled then it will override this setting. Default is `UTC`
         * 
         * @return builder
         * 
         */
        public Builder timezone(String timezone) {
            return timezone(Output.of(timezone));
        }

        /**
         * @param useSessionHostTimezone Specifies whether scheduled agent updates should be applied based on the timezone of the affected session host. If configured then this setting overrides `timezone`. Default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder useSessionHostTimezone(@Nullable Output<Boolean> useSessionHostTimezone) {
            $.useSessionHostTimezone = useSessionHostTimezone;
            return this;
        }

        /**
         * @param useSessionHostTimezone Specifies whether scheduled agent updates should be applied based on the timezone of the affected session host. If configured then this setting overrides `timezone`. Default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder useSessionHostTimezone(Boolean useSessionHostTimezone) {
            return useSessionHostTimezone(Output.of(useSessionHostTimezone));
        }

        public HostPoolScheduledAgentUpdatesArgs build() {
            return $;
        }
    }

}
