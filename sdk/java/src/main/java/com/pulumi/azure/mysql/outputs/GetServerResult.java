// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.mysql.outputs;

import com.pulumi.azure.mysql.outputs.GetServerIdentity;
import com.pulumi.azure.mysql.outputs.GetServerThreatDetectionPolicy;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetServerResult {
    /**
     * @return The Administrator login for the MySQL Server.
     * 
     */
    private String administratorLogin;
    /**
     * @return The auto grow setting for this MySQL Server.
     * 
     */
    private Boolean autoGrowEnabled;
    /**
     * @return The backup retention days for this MySQL server.
     * 
     */
    private Integer backupRetentionDays;
    /**
     * @return The FQDN of the MySQL Server.
     * 
     */
    private String fqdn;
    /**
     * @return The geo redundant backup setting for this MySQL Server.
     * 
     */
    private Boolean geoRedundantBackupEnabled;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return An `identity` block as defined below.
     * 
     */
    private List<GetServerIdentity> identities;
    /**
     * @return Whether or not infrastructure is encrypted for this MySQL Server.
     * 
     */
    private Boolean infrastructureEncryptionEnabled;
    /**
     * @return The Azure location where the resource exists.
     * 
     */
    private String location;
    private String name;
    /**
     * @return Whether or not public network access is allowed for this MySQL Server.
     * 
     */
    private Boolean publicNetworkAccessEnabled;
    private String resourceGroupName;
    private String restorePointInTime;
    /**
     * @return The SKU Name for this MySQL Server.
     * 
     */
    private String skuName;
    /**
     * @return Specifies if SSL should be enforced on connections for this MySQL Server.
     * 
     */
    private Boolean sslEnforcementEnabled;
    /**
     * @return The minimum TLS version to support for this MySQL Server.
     * 
     */
    private String sslMinimalTlsVersionEnforced;
    /**
     * @return Max storage allowed for this MySQL Server.
     * 
     */
    private Integer storageMb;
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return Threat detection policy configuration, known in the API as Server Security Alerts Policy. The `threat_detection_policy` block exports fields documented below.
     * 
     */
    private List<GetServerThreatDetectionPolicy> threatDetectionPolicies;
    /**
     * @return The version of this MySQL Server.
     * 
     */
    private String version;

    private GetServerResult() {}
    /**
     * @return The Administrator login for the MySQL Server.
     * 
     */
    public String administratorLogin() {
        return this.administratorLogin;
    }
    /**
     * @return The auto grow setting for this MySQL Server.
     * 
     */
    public Boolean autoGrowEnabled() {
        return this.autoGrowEnabled;
    }
    /**
     * @return The backup retention days for this MySQL server.
     * 
     */
    public Integer backupRetentionDays() {
        return this.backupRetentionDays;
    }
    /**
     * @return The FQDN of the MySQL Server.
     * 
     */
    public String fqdn() {
        return this.fqdn;
    }
    /**
     * @return The geo redundant backup setting for this MySQL Server.
     * 
     */
    public Boolean geoRedundantBackupEnabled() {
        return this.geoRedundantBackupEnabled;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return An `identity` block as defined below.
     * 
     */
    public List<GetServerIdentity> identities() {
        return this.identities;
    }
    /**
     * @return Whether or not infrastructure is encrypted for this MySQL Server.
     * 
     */
    public Boolean infrastructureEncryptionEnabled() {
        return this.infrastructureEncryptionEnabled;
    }
    /**
     * @return The Azure location where the resource exists.
     * 
     */
    public String location() {
        return this.location;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return Whether or not public network access is allowed for this MySQL Server.
     * 
     */
    public Boolean publicNetworkAccessEnabled() {
        return this.publicNetworkAccessEnabled;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    public String restorePointInTime() {
        return this.restorePointInTime;
    }
    /**
     * @return The SKU Name for this MySQL Server.
     * 
     */
    public String skuName() {
        return this.skuName;
    }
    /**
     * @return Specifies if SSL should be enforced on connections for this MySQL Server.
     * 
     */
    public Boolean sslEnforcementEnabled() {
        return this.sslEnforcementEnabled;
    }
    /**
     * @return The minimum TLS version to support for this MySQL Server.
     * 
     */
    public String sslMinimalTlsVersionEnforced() {
        return this.sslMinimalTlsVersionEnforced;
    }
    /**
     * @return Max storage allowed for this MySQL Server.
     * 
     */
    public Integer storageMb() {
        return this.storageMb;
    }
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return Threat detection policy configuration, known in the API as Server Security Alerts Policy. The `threat_detection_policy` block exports fields documented below.
     * 
     */
    public List<GetServerThreatDetectionPolicy> threatDetectionPolicies() {
        return this.threatDetectionPolicies;
    }
    /**
     * @return The version of this MySQL Server.
     * 
     */
    public String version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServerResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String administratorLogin;
        private Boolean autoGrowEnabled;
        private Integer backupRetentionDays;
        private String fqdn;
        private Boolean geoRedundantBackupEnabled;
        private String id;
        private List<GetServerIdentity> identities;
        private Boolean infrastructureEncryptionEnabled;
        private String location;
        private String name;
        private Boolean publicNetworkAccessEnabled;
        private String resourceGroupName;
        private String restorePointInTime;
        private String skuName;
        private Boolean sslEnforcementEnabled;
        private String sslMinimalTlsVersionEnforced;
        private Integer storageMb;
        private Map<String,String> tags;
        private List<GetServerThreatDetectionPolicy> threatDetectionPolicies;
        private String version;
        public Builder() {}
        public Builder(GetServerResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.administratorLogin = defaults.administratorLogin;
    	      this.autoGrowEnabled = defaults.autoGrowEnabled;
    	      this.backupRetentionDays = defaults.backupRetentionDays;
    	      this.fqdn = defaults.fqdn;
    	      this.geoRedundantBackupEnabled = defaults.geoRedundantBackupEnabled;
    	      this.id = defaults.id;
    	      this.identities = defaults.identities;
    	      this.infrastructureEncryptionEnabled = defaults.infrastructureEncryptionEnabled;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.publicNetworkAccessEnabled = defaults.publicNetworkAccessEnabled;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.restorePointInTime = defaults.restorePointInTime;
    	      this.skuName = defaults.skuName;
    	      this.sslEnforcementEnabled = defaults.sslEnforcementEnabled;
    	      this.sslMinimalTlsVersionEnforced = defaults.sslMinimalTlsVersionEnforced;
    	      this.storageMb = defaults.storageMb;
    	      this.tags = defaults.tags;
    	      this.threatDetectionPolicies = defaults.threatDetectionPolicies;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder administratorLogin(String administratorLogin) {
            if (administratorLogin == null) {
              throw new MissingRequiredPropertyException("GetServerResult", "administratorLogin");
            }
            this.administratorLogin = administratorLogin;
            return this;
        }
        @CustomType.Setter
        public Builder autoGrowEnabled(Boolean autoGrowEnabled) {
            if (autoGrowEnabled == null) {
              throw new MissingRequiredPropertyException("GetServerResult", "autoGrowEnabled");
            }
            this.autoGrowEnabled = autoGrowEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder backupRetentionDays(Integer backupRetentionDays) {
            if (backupRetentionDays == null) {
              throw new MissingRequiredPropertyException("GetServerResult", "backupRetentionDays");
            }
            this.backupRetentionDays = backupRetentionDays;
            return this;
        }
        @CustomType.Setter
        public Builder fqdn(String fqdn) {
            if (fqdn == null) {
              throw new MissingRequiredPropertyException("GetServerResult", "fqdn");
            }
            this.fqdn = fqdn;
            return this;
        }
        @CustomType.Setter
        public Builder geoRedundantBackupEnabled(Boolean geoRedundantBackupEnabled) {
            if (geoRedundantBackupEnabled == null) {
              throw new MissingRequiredPropertyException("GetServerResult", "geoRedundantBackupEnabled");
            }
            this.geoRedundantBackupEnabled = geoRedundantBackupEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetServerResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder identities(List<GetServerIdentity> identities) {
            if (identities == null) {
              throw new MissingRequiredPropertyException("GetServerResult", "identities");
            }
            this.identities = identities;
            return this;
        }
        public Builder identities(GetServerIdentity... identities) {
            return identities(List.of(identities));
        }
        @CustomType.Setter
        public Builder infrastructureEncryptionEnabled(Boolean infrastructureEncryptionEnabled) {
            if (infrastructureEncryptionEnabled == null) {
              throw new MissingRequiredPropertyException("GetServerResult", "infrastructureEncryptionEnabled");
            }
            this.infrastructureEncryptionEnabled = infrastructureEncryptionEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetServerResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetServerResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder publicNetworkAccessEnabled(Boolean publicNetworkAccessEnabled) {
            if (publicNetworkAccessEnabled == null) {
              throw new MissingRequiredPropertyException("GetServerResult", "publicNetworkAccessEnabled");
            }
            this.publicNetworkAccessEnabled = publicNetworkAccessEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            if (resourceGroupName == null) {
              throw new MissingRequiredPropertyException("GetServerResult", "resourceGroupName");
            }
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder restorePointInTime(String restorePointInTime) {
            if (restorePointInTime == null) {
              throw new MissingRequiredPropertyException("GetServerResult", "restorePointInTime");
            }
            this.restorePointInTime = restorePointInTime;
            return this;
        }
        @CustomType.Setter
        public Builder skuName(String skuName) {
            if (skuName == null) {
              throw new MissingRequiredPropertyException("GetServerResult", "skuName");
            }
            this.skuName = skuName;
            return this;
        }
        @CustomType.Setter
        public Builder sslEnforcementEnabled(Boolean sslEnforcementEnabled) {
            if (sslEnforcementEnabled == null) {
              throw new MissingRequiredPropertyException("GetServerResult", "sslEnforcementEnabled");
            }
            this.sslEnforcementEnabled = sslEnforcementEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder sslMinimalTlsVersionEnforced(String sslMinimalTlsVersionEnforced) {
            if (sslMinimalTlsVersionEnforced == null) {
              throw new MissingRequiredPropertyException("GetServerResult", "sslMinimalTlsVersionEnforced");
            }
            this.sslMinimalTlsVersionEnforced = sslMinimalTlsVersionEnforced;
            return this;
        }
        @CustomType.Setter
        public Builder storageMb(Integer storageMb) {
            if (storageMb == null) {
              throw new MissingRequiredPropertyException("GetServerResult", "storageMb");
            }
            this.storageMb = storageMb;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetServerResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder threatDetectionPolicies(List<GetServerThreatDetectionPolicy> threatDetectionPolicies) {
            if (threatDetectionPolicies == null) {
              throw new MissingRequiredPropertyException("GetServerResult", "threatDetectionPolicies");
            }
            this.threatDetectionPolicies = threatDetectionPolicies;
            return this;
        }
        public Builder threatDetectionPolicies(GetServerThreatDetectionPolicy... threatDetectionPolicies) {
            return threatDetectionPolicies(List.of(threatDetectionPolicies));
        }
        @CustomType.Setter
        public Builder version(String version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetServerResult", "version");
            }
            this.version = version;
            return this;
        }
        public GetServerResult build() {
            final var _resultValue = new GetServerResult();
            _resultValue.administratorLogin = administratorLogin;
            _resultValue.autoGrowEnabled = autoGrowEnabled;
            _resultValue.backupRetentionDays = backupRetentionDays;
            _resultValue.fqdn = fqdn;
            _resultValue.geoRedundantBackupEnabled = geoRedundantBackupEnabled;
            _resultValue.id = id;
            _resultValue.identities = identities;
            _resultValue.infrastructureEncryptionEnabled = infrastructureEncryptionEnabled;
            _resultValue.location = location;
            _resultValue.name = name;
            _resultValue.publicNetworkAccessEnabled = publicNetworkAccessEnabled;
            _resultValue.resourceGroupName = resourceGroupName;
            _resultValue.restorePointInTime = restorePointInTime;
            _resultValue.skuName = skuName;
            _resultValue.sslEnforcementEnabled = sslEnforcementEnabled;
            _resultValue.sslMinimalTlsVersionEnforced = sslMinimalTlsVersionEnforced;
            _resultValue.storageMb = storageMb;
            _resultValue.tags = tags;
            _resultValue.threatDetectionPolicies = threatDetectionPolicies;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
