// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.cosmosdb.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NotebookWorkspaceState extends com.pulumi.resources.ResourceArgs {

    public static final NotebookWorkspaceState Empty = new NotebookWorkspaceState();

    /**
     * The name of the Cosmos DB Account to create the SQL Notebook Workspace within. Changing this forces a new SQL Notebook Workspace to be created.
     * 
     */
    @Import(name="accountName")
    private @Nullable Output<String> accountName;

    /**
     * @return The name of the Cosmos DB Account to create the SQL Notebook Workspace within. Changing this forces a new SQL Notebook Workspace to be created.
     * 
     */
    public Optional<Output<String>> accountName() {
        return Optional.ofNullable(this.accountName);
    }

    /**
     * The name which should be used for this SQL Notebook Workspace. Possible value is `default`. Changing this forces a new SQL Notebook Workspace to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name which should be used for this SQL Notebook Workspace. Possible value is `default`. Changing this forces a new SQL Notebook Workspace to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The name of the Resource Group where the SQL Notebook Workspace should exist. Changing this forces a new SQL Notebook Workspace to be created.
     * 
     */
    @Import(name="resourceGroupName")
    private @Nullable Output<String> resourceGroupName;

    /**
     * @return The name of the Resource Group where the SQL Notebook Workspace should exist. Changing this forces a new SQL Notebook Workspace to be created.
     * 
     */
    public Optional<Output<String>> resourceGroupName() {
        return Optional.ofNullable(this.resourceGroupName);
    }

    /**
     * Specifies the endpoint of Notebook server.
     * 
     */
    @Import(name="serverEndpoint")
    private @Nullable Output<String> serverEndpoint;

    /**
     * @return Specifies the endpoint of Notebook server.
     * 
     */
    public Optional<Output<String>> serverEndpoint() {
        return Optional.ofNullable(this.serverEndpoint);
    }

    private NotebookWorkspaceState() {}

    private NotebookWorkspaceState(NotebookWorkspaceState $) {
        this.accountName = $.accountName;
        this.name = $.name;
        this.resourceGroupName = $.resourceGroupName;
        this.serverEndpoint = $.serverEndpoint;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NotebookWorkspaceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NotebookWorkspaceState $;

        public Builder() {
            $ = new NotebookWorkspaceState();
        }

        public Builder(NotebookWorkspaceState defaults) {
            $ = new NotebookWorkspaceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountName The name of the Cosmos DB Account to create the SQL Notebook Workspace within. Changing this forces a new SQL Notebook Workspace to be created.
         * 
         * @return builder
         * 
         */
        public Builder accountName(@Nullable Output<String> accountName) {
            $.accountName = accountName;
            return this;
        }

        /**
         * @param accountName The name of the Cosmos DB Account to create the SQL Notebook Workspace within. Changing this forces a new SQL Notebook Workspace to be created.
         * 
         * @return builder
         * 
         */
        public Builder accountName(String accountName) {
            return accountName(Output.of(accountName));
        }

        /**
         * @param name The name which should be used for this SQL Notebook Workspace. Possible value is `default`. Changing this forces a new SQL Notebook Workspace to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this SQL Notebook Workspace. Possible value is `default`. Changing this forces a new SQL Notebook Workspace to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param resourceGroupName The name of the Resource Group where the SQL Notebook Workspace should exist. Changing this forces a new SQL Notebook Workspace to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(@Nullable Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the Resource Group where the SQL Notebook Workspace should exist. Changing this forces a new SQL Notebook Workspace to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param serverEndpoint Specifies the endpoint of Notebook server.
         * 
         * @return builder
         * 
         */
        public Builder serverEndpoint(@Nullable Output<String> serverEndpoint) {
            $.serverEndpoint = serverEndpoint;
            return this;
        }

        /**
         * @param serverEndpoint Specifies the endpoint of Notebook server.
         * 
         * @return builder
         * 
         */
        public Builder serverEndpoint(String serverEndpoint) {
            return serverEndpoint(Output.of(serverEndpoint));
        }

        public NotebookWorkspaceState build() {
            return $;
        }
    }

}
