// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.mssql;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.mssql.ServerTransparentDataEncryptionArgs;
import com.pulumi.azure.mssql.inputs.ServerTransparentDataEncryptionState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages the transparent data encryption configuration for a MSSQL Server
 * 
 * !&gt; **IMPORTANT:** This resource should only be used with pre-existing MS SQL Instances that are over 2 years old. For new MS SQL Instances that will be created through the use of the `azure.mssql.Server` resource, please enable Transparent Data Encryption through `azure.mssql.Server` resource itself by configuring an identity block. By default all new MS SQL Instances are deployed with System Managed Transparent Data Encryption enabled.
 * 
 * &gt; **NOTE:** Once transparent data encryption is enabled on a MS SQL instance, it is not possible to remove TDE. You will be able to switch between &#39;ServiceManaged&#39; and &#39;CustomerManaged&#39; keys, but will not be able to remove encryption. For safety when this resource is deleted, the TDE mode will automatically be set to &#39;ServiceManaged&#39;. See `key_vault_uri` for more information on how to specify the key types. As SQL Server only supports a single configuration for encryption settings, this resource will replace the current encryption settings on the server.
 * 
 * &gt; **Note:** See [documentation](https://docs.microsoft.com/azure/azure-sql/database/transparent-data-encryption-byok-overview) for important information on how handle lifecycle management of the keys to prevent data lockout.
 * 
 * ## Example Usage
 * ### With Service Managed Key
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.mssql.Server;
 * import com.pulumi.azure.mssql.ServerArgs;
 * import com.pulumi.azure.mssql.ServerTransparentDataEncryption;
 * import com.pulumi.azure.mssql.ServerTransparentDataEncryptionArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new ResourceGroup(&#34;example&#34;, ResourceGroupArgs.builder()        
 *             .name(&#34;example-resources&#34;)
 *             .location(&#34;EastUs&#34;)
 *             .build());
 * 
 *         var exampleServer = new Server(&#34;exampleServer&#34;, ServerArgs.builder()        
 *             .name(&#34;mssqlserver&#34;)
 *             .resourceGroupName(example.name())
 *             .location(example.location())
 *             .version(&#34;12.0&#34;)
 *             .administratorLogin(&#34;missadministrator&#34;)
 *             .administratorLoginPassword(&#34;thisIsKat11&#34;)
 *             .minimumTlsVersion(&#34;1.2&#34;)
 *             .azureadAdministrator(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
 *             .tags(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
 *             .build());
 * 
 *         var exampleServerTransparentDataEncryption = new ServerTransparentDataEncryption(&#34;exampleServerTransparentDataEncryption&#34;, ServerTransparentDataEncryptionArgs.builder()        
 *             .serverId(exampleServer.id())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * SQL Server Transparent Data Encryption can be imported using the resource id, e.g.
 * 
 * ```sh
 * $ pulumi import azure:mssql/serverTransparentDataEncryption:ServerTransparentDataEncryption example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/encryptionProtector/current
 * ```
 * 
 */
@ResourceType(type="azure:mssql/serverTransparentDataEncryption:ServerTransparentDataEncryption")
public class ServerTransparentDataEncryption extends com.pulumi.resources.CustomResource {
    /**
     * When enabled, the server will continuously check the key vault for any new versions of the key being used as the TDE protector. If a new version of the key is detected, the TDE protector on the server will be automatically rotated to the latest key version within 60 minutes.
     * 
     */
    @Export(name="autoRotationEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> autoRotationEnabled;

    /**
     * @return When enabled, the server will continuously check the key vault for any new versions of the key being used as the TDE protector. If a new version of the key is detected, the TDE protector on the server will be automatically rotated to the latest key version within 60 minutes.
     * 
     */
    public Output<Optional<Boolean>> autoRotationEnabled() {
        return Codegen.optional(this.autoRotationEnabled);
    }
    /**
     * To use customer managed keys from Azure Key Vault, provide the AKV Key ID. To use service managed keys, omit this field.
     * 
     * &gt; **NOTE:** In order to use customer managed keys, the identity of the MSSQL server must have the following permissions on the key vault: &#39;get&#39;, &#39;wrapKey&#39; and &#39;unwrapKey&#39;
     * 
     * &gt; **NOTE:** If `server_id` denotes a secondary server deployed for disaster recovery purposes, then the `key_vault_key_id` should be the same key used for the primary server&#39;s transparent data encryption. Both primary and secondary servers should be encrypted with same key material.
     * 
     */
    @Export(name="keyVaultKeyId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> keyVaultKeyId;

    /**
     * @return To use customer managed keys from Azure Key Vault, provide the AKV Key ID. To use service managed keys, omit this field.
     * 
     * &gt; **NOTE:** In order to use customer managed keys, the identity of the MSSQL server must have the following permissions on the key vault: &#39;get&#39;, &#39;wrapKey&#39; and &#39;unwrapKey&#39;
     * 
     * &gt; **NOTE:** If `server_id` denotes a secondary server deployed for disaster recovery purposes, then the `key_vault_key_id` should be the same key used for the primary server&#39;s transparent data encryption. Both primary and secondary servers should be encrypted with same key material.
     * 
     */
    public Output<Optional<String>> keyVaultKeyId() {
        return Codegen.optional(this.keyVaultKeyId);
    }
    /**
     * Specifies the name of the MS SQL Server. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="serverId", refs={String.class}, tree="[0]")
    private Output<String> serverId;

    /**
     * @return Specifies the name of the MS SQL Server. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> serverId() {
        return this.serverId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ServerTransparentDataEncryption(String name) {
        this(name, ServerTransparentDataEncryptionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ServerTransparentDataEncryption(String name, ServerTransparentDataEncryptionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ServerTransparentDataEncryption(String name, ServerTransparentDataEncryptionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:mssql/serverTransparentDataEncryption:ServerTransparentDataEncryption", name, args == null ? ServerTransparentDataEncryptionArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private ServerTransparentDataEncryption(String name, Output<String> id, @Nullable ServerTransparentDataEncryptionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:mssql/serverTransparentDataEncryption:ServerTransparentDataEncryption", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ServerTransparentDataEncryption get(String name, Output<String> id, @Nullable ServerTransparentDataEncryptionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ServerTransparentDataEncryption(name, id, state, options);
    }
}
