// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appplatform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SpringCloudAppCosmosDBAssociationState extends com.pulumi.resources.ResourceArgs {

    public static final SpringCloudAppCosmosDBAssociationState Empty = new SpringCloudAppCosmosDBAssociationState();

    /**
     * Specifies the API type which should be used when connecting to the CosmosDB Account. Possible values are `cassandra`, `gremlin`, `mongo`, `sql` or `table`. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="apiType")
    private @Nullable Output<String> apiType;

    /**
     * @return Specifies the API type which should be used when connecting to the CosmosDB Account. Possible values are `cassandra`, `gremlin`, `mongo`, `sql` or `table`. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> apiType() {
        return Optional.ofNullable(this.apiType);
    }

    /**
     * Specifies the CosmosDB Account access key.
     * 
     */
    @Import(name="cosmosdbAccessKey")
    private @Nullable Output<String> cosmosdbAccessKey;

    /**
     * @return Specifies the CosmosDB Account access key.
     * 
     */
    public Optional<Output<String>> cosmosdbAccessKey() {
        return Optional.ofNullable(this.cosmosdbAccessKey);
    }

    /**
     * Specifies the ID of the CosmosDB Account. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="cosmosdbAccountId")
    private @Nullable Output<String> cosmosdbAccountId;

    /**
     * @return Specifies the ID of the CosmosDB Account. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> cosmosdbAccountId() {
        return Optional.ofNullable(this.cosmosdbAccountId);
    }

    /**
     * Specifies the name of the Cassandra Keyspace which the Spring Cloud App should be associated with. Should only be set when `api_type` is `cassandra`.
     * 
     */
    @Import(name="cosmosdbCassandraKeyspaceName")
    private @Nullable Output<String> cosmosdbCassandraKeyspaceName;

    /**
     * @return Specifies the name of the Cassandra Keyspace which the Spring Cloud App should be associated with. Should only be set when `api_type` is `cassandra`.
     * 
     */
    public Optional<Output<String>> cosmosdbCassandraKeyspaceName() {
        return Optional.ofNullable(this.cosmosdbCassandraKeyspaceName);
    }

    /**
     * Specifies the name of the Gremlin Database which the Spring Cloud App should be associated with. Should only be set when `api_type` is `gremlin`.
     * 
     */
    @Import(name="cosmosdbGremlinDatabaseName")
    private @Nullable Output<String> cosmosdbGremlinDatabaseName;

    /**
     * @return Specifies the name of the Gremlin Database which the Spring Cloud App should be associated with. Should only be set when `api_type` is `gremlin`.
     * 
     */
    public Optional<Output<String>> cosmosdbGremlinDatabaseName() {
        return Optional.ofNullable(this.cosmosdbGremlinDatabaseName);
    }

    /**
     * Specifies the name of the Gremlin Graph which the Spring Cloud App should be associated with. Should only be set when `api_type` is `gremlin`.
     * 
     */
    @Import(name="cosmosdbGremlinGraphName")
    private @Nullable Output<String> cosmosdbGremlinGraphName;

    /**
     * @return Specifies the name of the Gremlin Graph which the Spring Cloud App should be associated with. Should only be set when `api_type` is `gremlin`.
     * 
     */
    public Optional<Output<String>> cosmosdbGremlinGraphName() {
        return Optional.ofNullable(this.cosmosdbGremlinGraphName);
    }

    /**
     * Specifies the name of the Mongo Database which the Spring Cloud App should be associated with. Should only be set when `api_type` is `mongo`.
     * 
     */
    @Import(name="cosmosdbMongoDatabaseName")
    private @Nullable Output<String> cosmosdbMongoDatabaseName;

    /**
     * @return Specifies the name of the Mongo Database which the Spring Cloud App should be associated with. Should only be set when `api_type` is `mongo`.
     * 
     */
    public Optional<Output<String>> cosmosdbMongoDatabaseName() {
        return Optional.ofNullable(this.cosmosdbMongoDatabaseName);
    }

    /**
     * Specifies the name of the SQL Database which the Spring Cloud App should be associated with. Should only be set when `api_type` is `sql`.
     * 
     */
    @Import(name="cosmosdbSqlDatabaseName")
    private @Nullable Output<String> cosmosdbSqlDatabaseName;

    /**
     * @return Specifies the name of the SQL Database which the Spring Cloud App should be associated with. Should only be set when `api_type` is `sql`.
     * 
     */
    public Optional<Output<String>> cosmosdbSqlDatabaseName() {
        return Optional.ofNullable(this.cosmosdbSqlDatabaseName);
    }

    /**
     * Specifies the name of the Spring Cloud Application Association. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the name of the Spring Cloud Application Association. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Specifies the ID of the Spring Cloud Application where this Association is created. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="springCloudAppId")
    private @Nullable Output<String> springCloudAppId;

    /**
     * @return Specifies the ID of the Spring Cloud Application where this Association is created. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> springCloudAppId() {
        return Optional.ofNullable(this.springCloudAppId);
    }

    private SpringCloudAppCosmosDBAssociationState() {}

    private SpringCloudAppCosmosDBAssociationState(SpringCloudAppCosmosDBAssociationState $) {
        this.apiType = $.apiType;
        this.cosmosdbAccessKey = $.cosmosdbAccessKey;
        this.cosmosdbAccountId = $.cosmosdbAccountId;
        this.cosmosdbCassandraKeyspaceName = $.cosmosdbCassandraKeyspaceName;
        this.cosmosdbGremlinDatabaseName = $.cosmosdbGremlinDatabaseName;
        this.cosmosdbGremlinGraphName = $.cosmosdbGremlinGraphName;
        this.cosmosdbMongoDatabaseName = $.cosmosdbMongoDatabaseName;
        this.cosmosdbSqlDatabaseName = $.cosmosdbSqlDatabaseName;
        this.name = $.name;
        this.springCloudAppId = $.springCloudAppId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SpringCloudAppCosmosDBAssociationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SpringCloudAppCosmosDBAssociationState $;

        public Builder() {
            $ = new SpringCloudAppCosmosDBAssociationState();
        }

        public Builder(SpringCloudAppCosmosDBAssociationState defaults) {
            $ = new SpringCloudAppCosmosDBAssociationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiType Specifies the API type which should be used when connecting to the CosmosDB Account. Possible values are `cassandra`, `gremlin`, `mongo`, `sql` or `table`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder apiType(@Nullable Output<String> apiType) {
            $.apiType = apiType;
            return this;
        }

        /**
         * @param apiType Specifies the API type which should be used when connecting to the CosmosDB Account. Possible values are `cassandra`, `gremlin`, `mongo`, `sql` or `table`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder apiType(String apiType) {
            return apiType(Output.of(apiType));
        }

        /**
         * @param cosmosdbAccessKey Specifies the CosmosDB Account access key.
         * 
         * @return builder
         * 
         */
        public Builder cosmosdbAccessKey(@Nullable Output<String> cosmosdbAccessKey) {
            $.cosmosdbAccessKey = cosmosdbAccessKey;
            return this;
        }

        /**
         * @param cosmosdbAccessKey Specifies the CosmosDB Account access key.
         * 
         * @return builder
         * 
         */
        public Builder cosmosdbAccessKey(String cosmosdbAccessKey) {
            return cosmosdbAccessKey(Output.of(cosmosdbAccessKey));
        }

        /**
         * @param cosmosdbAccountId Specifies the ID of the CosmosDB Account. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder cosmosdbAccountId(@Nullable Output<String> cosmosdbAccountId) {
            $.cosmosdbAccountId = cosmosdbAccountId;
            return this;
        }

        /**
         * @param cosmosdbAccountId Specifies the ID of the CosmosDB Account. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder cosmosdbAccountId(String cosmosdbAccountId) {
            return cosmosdbAccountId(Output.of(cosmosdbAccountId));
        }

        /**
         * @param cosmosdbCassandraKeyspaceName Specifies the name of the Cassandra Keyspace which the Spring Cloud App should be associated with. Should only be set when `api_type` is `cassandra`.
         * 
         * @return builder
         * 
         */
        public Builder cosmosdbCassandraKeyspaceName(@Nullable Output<String> cosmosdbCassandraKeyspaceName) {
            $.cosmosdbCassandraKeyspaceName = cosmosdbCassandraKeyspaceName;
            return this;
        }

        /**
         * @param cosmosdbCassandraKeyspaceName Specifies the name of the Cassandra Keyspace which the Spring Cloud App should be associated with. Should only be set when `api_type` is `cassandra`.
         * 
         * @return builder
         * 
         */
        public Builder cosmosdbCassandraKeyspaceName(String cosmosdbCassandraKeyspaceName) {
            return cosmosdbCassandraKeyspaceName(Output.of(cosmosdbCassandraKeyspaceName));
        }

        /**
         * @param cosmosdbGremlinDatabaseName Specifies the name of the Gremlin Database which the Spring Cloud App should be associated with. Should only be set when `api_type` is `gremlin`.
         * 
         * @return builder
         * 
         */
        public Builder cosmosdbGremlinDatabaseName(@Nullable Output<String> cosmosdbGremlinDatabaseName) {
            $.cosmosdbGremlinDatabaseName = cosmosdbGremlinDatabaseName;
            return this;
        }

        /**
         * @param cosmosdbGremlinDatabaseName Specifies the name of the Gremlin Database which the Spring Cloud App should be associated with. Should only be set when `api_type` is `gremlin`.
         * 
         * @return builder
         * 
         */
        public Builder cosmosdbGremlinDatabaseName(String cosmosdbGremlinDatabaseName) {
            return cosmosdbGremlinDatabaseName(Output.of(cosmosdbGremlinDatabaseName));
        }

        /**
         * @param cosmosdbGremlinGraphName Specifies the name of the Gremlin Graph which the Spring Cloud App should be associated with. Should only be set when `api_type` is `gremlin`.
         * 
         * @return builder
         * 
         */
        public Builder cosmosdbGremlinGraphName(@Nullable Output<String> cosmosdbGremlinGraphName) {
            $.cosmosdbGremlinGraphName = cosmosdbGremlinGraphName;
            return this;
        }

        /**
         * @param cosmosdbGremlinGraphName Specifies the name of the Gremlin Graph which the Spring Cloud App should be associated with. Should only be set when `api_type` is `gremlin`.
         * 
         * @return builder
         * 
         */
        public Builder cosmosdbGremlinGraphName(String cosmosdbGremlinGraphName) {
            return cosmosdbGremlinGraphName(Output.of(cosmosdbGremlinGraphName));
        }

        /**
         * @param cosmosdbMongoDatabaseName Specifies the name of the Mongo Database which the Spring Cloud App should be associated with. Should only be set when `api_type` is `mongo`.
         * 
         * @return builder
         * 
         */
        public Builder cosmosdbMongoDatabaseName(@Nullable Output<String> cosmosdbMongoDatabaseName) {
            $.cosmosdbMongoDatabaseName = cosmosdbMongoDatabaseName;
            return this;
        }

        /**
         * @param cosmosdbMongoDatabaseName Specifies the name of the Mongo Database which the Spring Cloud App should be associated with. Should only be set when `api_type` is `mongo`.
         * 
         * @return builder
         * 
         */
        public Builder cosmosdbMongoDatabaseName(String cosmosdbMongoDatabaseName) {
            return cosmosdbMongoDatabaseName(Output.of(cosmosdbMongoDatabaseName));
        }

        /**
         * @param cosmosdbSqlDatabaseName Specifies the name of the SQL Database which the Spring Cloud App should be associated with. Should only be set when `api_type` is `sql`.
         * 
         * @return builder
         * 
         */
        public Builder cosmosdbSqlDatabaseName(@Nullable Output<String> cosmosdbSqlDatabaseName) {
            $.cosmosdbSqlDatabaseName = cosmosdbSqlDatabaseName;
            return this;
        }

        /**
         * @param cosmosdbSqlDatabaseName Specifies the name of the SQL Database which the Spring Cloud App should be associated with. Should only be set when `api_type` is `sql`.
         * 
         * @return builder
         * 
         */
        public Builder cosmosdbSqlDatabaseName(String cosmosdbSqlDatabaseName) {
            return cosmosdbSqlDatabaseName(Output.of(cosmosdbSqlDatabaseName));
        }

        /**
         * @param name Specifies the name of the Spring Cloud Application Association. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of the Spring Cloud Application Association. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param springCloudAppId Specifies the ID of the Spring Cloud Application where this Association is created. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder springCloudAppId(@Nullable Output<String> springCloudAppId) {
            $.springCloudAppId = springCloudAppId;
            return this;
        }

        /**
         * @param springCloudAppId Specifies the ID of the Spring Cloud Application where this Association is created. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder springCloudAppId(String springCloudAppId) {
            return springCloudAppId(Output.of(springCloudAppId));
        }

        public SpringCloudAppCosmosDBAssociationState build() {
            return $;
        }
    }

}
