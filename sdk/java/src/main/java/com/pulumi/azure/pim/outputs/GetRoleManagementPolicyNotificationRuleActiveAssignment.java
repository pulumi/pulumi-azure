// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.pim.outputs;

import com.pulumi.azure.pim.outputs.GetRoleManagementPolicyNotificationRuleActiveAssignmentAdminNotification;
import com.pulumi.azure.pim.outputs.GetRoleManagementPolicyNotificationRuleActiveAssignmentApproverNotification;
import com.pulumi.azure.pim.outputs.GetRoleManagementPolicyNotificationRuleActiveAssignmentAssigneeNotification;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetRoleManagementPolicyNotificationRuleActiveAssignment {
    /**
     * @return A `notification_settings` block as defined above.
     * 
     */
    private List<GetRoleManagementPolicyNotificationRuleActiveAssignmentAdminNotification> adminNotifications;
    /**
     * @return A `notification_settings` block as defined above.
     * 
     */
    private List<GetRoleManagementPolicyNotificationRuleActiveAssignmentApproverNotification> approverNotifications;
    /**
     * @return A `notification_settings` block as defined above.
     * 
     */
    private List<GetRoleManagementPolicyNotificationRuleActiveAssignmentAssigneeNotification> assigneeNotifications;

    private GetRoleManagementPolicyNotificationRuleActiveAssignment() {}
    /**
     * @return A `notification_settings` block as defined above.
     * 
     */
    public List<GetRoleManagementPolicyNotificationRuleActiveAssignmentAdminNotification> adminNotifications() {
        return this.adminNotifications;
    }
    /**
     * @return A `notification_settings` block as defined above.
     * 
     */
    public List<GetRoleManagementPolicyNotificationRuleActiveAssignmentApproverNotification> approverNotifications() {
        return this.approverNotifications;
    }
    /**
     * @return A `notification_settings` block as defined above.
     * 
     */
    public List<GetRoleManagementPolicyNotificationRuleActiveAssignmentAssigneeNotification> assigneeNotifications() {
        return this.assigneeNotifications;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRoleManagementPolicyNotificationRuleActiveAssignment defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetRoleManagementPolicyNotificationRuleActiveAssignmentAdminNotification> adminNotifications;
        private List<GetRoleManagementPolicyNotificationRuleActiveAssignmentApproverNotification> approverNotifications;
        private List<GetRoleManagementPolicyNotificationRuleActiveAssignmentAssigneeNotification> assigneeNotifications;
        public Builder() {}
        public Builder(GetRoleManagementPolicyNotificationRuleActiveAssignment defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adminNotifications = defaults.adminNotifications;
    	      this.approverNotifications = defaults.approverNotifications;
    	      this.assigneeNotifications = defaults.assigneeNotifications;
        }

        @CustomType.Setter
        public Builder adminNotifications(List<GetRoleManagementPolicyNotificationRuleActiveAssignmentAdminNotification> adminNotifications) {
            if (adminNotifications == null) {
              throw new MissingRequiredPropertyException("GetRoleManagementPolicyNotificationRuleActiveAssignment", "adminNotifications");
            }
            this.adminNotifications = adminNotifications;
            return this;
        }
        public Builder adminNotifications(GetRoleManagementPolicyNotificationRuleActiveAssignmentAdminNotification... adminNotifications) {
            return adminNotifications(List.of(adminNotifications));
        }
        @CustomType.Setter
        public Builder approverNotifications(List<GetRoleManagementPolicyNotificationRuleActiveAssignmentApproverNotification> approverNotifications) {
            if (approverNotifications == null) {
              throw new MissingRequiredPropertyException("GetRoleManagementPolicyNotificationRuleActiveAssignment", "approverNotifications");
            }
            this.approverNotifications = approverNotifications;
            return this;
        }
        public Builder approverNotifications(GetRoleManagementPolicyNotificationRuleActiveAssignmentApproverNotification... approverNotifications) {
            return approverNotifications(List.of(approverNotifications));
        }
        @CustomType.Setter
        public Builder assigneeNotifications(List<GetRoleManagementPolicyNotificationRuleActiveAssignmentAssigneeNotification> assigneeNotifications) {
            if (assigneeNotifications == null) {
              throw new MissingRequiredPropertyException("GetRoleManagementPolicyNotificationRuleActiveAssignment", "assigneeNotifications");
            }
            this.assigneeNotifications = assigneeNotifications;
            return this;
        }
        public Builder assigneeNotifications(GetRoleManagementPolicyNotificationRuleActiveAssignmentAssigneeNotification... assigneeNotifications) {
            return assigneeNotifications(List.of(assigneeNotifications));
        }
        public GetRoleManagementPolicyNotificationRuleActiveAssignment build() {
            final var _resultValue = new GetRoleManagementPolicyNotificationRuleActiveAssignment();
            _resultValue.adminNotifications = adminNotifications;
            _resultValue.approverNotifications = approverNotifications;
            _resultValue.assigneeNotifications = assigneeNotifications;
            return _resultValue;
        }
    }
}
