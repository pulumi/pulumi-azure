// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.eventhub.outputs;

import com.pulumi.azure.eventhub.outputs.EventSubscriptionAdvancedFilterBoolEqual;
import com.pulumi.azure.eventhub.outputs.EventSubscriptionAdvancedFilterIsNotNull;
import com.pulumi.azure.eventhub.outputs.EventSubscriptionAdvancedFilterIsNullOrUndefined;
import com.pulumi.azure.eventhub.outputs.EventSubscriptionAdvancedFilterNumberGreaterThan;
import com.pulumi.azure.eventhub.outputs.EventSubscriptionAdvancedFilterNumberGreaterThanOrEqual;
import com.pulumi.azure.eventhub.outputs.EventSubscriptionAdvancedFilterNumberIn;
import com.pulumi.azure.eventhub.outputs.EventSubscriptionAdvancedFilterNumberInRange;
import com.pulumi.azure.eventhub.outputs.EventSubscriptionAdvancedFilterNumberLessThan;
import com.pulumi.azure.eventhub.outputs.EventSubscriptionAdvancedFilterNumberLessThanOrEqual;
import com.pulumi.azure.eventhub.outputs.EventSubscriptionAdvancedFilterNumberNotIn;
import com.pulumi.azure.eventhub.outputs.EventSubscriptionAdvancedFilterNumberNotInRange;
import com.pulumi.azure.eventhub.outputs.EventSubscriptionAdvancedFilterStringBeginsWith;
import com.pulumi.azure.eventhub.outputs.EventSubscriptionAdvancedFilterStringContain;
import com.pulumi.azure.eventhub.outputs.EventSubscriptionAdvancedFilterStringEndsWith;
import com.pulumi.azure.eventhub.outputs.EventSubscriptionAdvancedFilterStringIn;
import com.pulumi.azure.eventhub.outputs.EventSubscriptionAdvancedFilterStringNotBeginsWith;
import com.pulumi.azure.eventhub.outputs.EventSubscriptionAdvancedFilterStringNotContain;
import com.pulumi.azure.eventhub.outputs.EventSubscriptionAdvancedFilterStringNotEndsWith;
import com.pulumi.azure.eventhub.outputs.EventSubscriptionAdvancedFilterStringNotIn;
import com.pulumi.core.annotations.CustomType;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class EventSubscriptionAdvancedFilter {
    /**
     * @return Compares a value of an event using a single boolean value.
     * 
     */
    private @Nullable List<EventSubscriptionAdvancedFilterBoolEqual> boolEquals;
    /**
     * @return Evaluates if a value of an event isn&#39;t NULL or undefined.
     * 
     */
    private @Nullable List<EventSubscriptionAdvancedFilterIsNotNull> isNotNulls;
    /**
     * @return Evaluates if a value of an event is NULL or undefined.
     * 
     * Each nested block consists of a key and a value(s) element.
     * 
     */
    private @Nullable List<EventSubscriptionAdvancedFilterIsNullOrUndefined> isNullOrUndefineds;
    /**
     * @return Compares a value of an event using a single floating point number.
     * 
     */
    private @Nullable List<EventSubscriptionAdvancedFilterNumberGreaterThanOrEqual> numberGreaterThanOrEquals;
    /**
     * @return Compares a value of an event using a single floating point number.
     * 
     */
    private @Nullable List<EventSubscriptionAdvancedFilterNumberGreaterThan> numberGreaterThans;
    /**
     * @return Compares a value of an event using multiple floating point number ranges.
     * 
     */
    private @Nullable List<EventSubscriptionAdvancedFilterNumberInRange> numberInRanges;
    /**
     * @return Compares a value of an event using multiple floating point numbers.
     * 
     */
    private @Nullable List<EventSubscriptionAdvancedFilterNumberIn> numberIns;
    /**
     * @return Compares a value of an event using a single floating point number.
     * 
     */
    private @Nullable List<EventSubscriptionAdvancedFilterNumberLessThanOrEqual> numberLessThanOrEquals;
    /**
     * @return Compares a value of an event using a single floating point number.
     * 
     */
    private @Nullable List<EventSubscriptionAdvancedFilterNumberLessThan> numberLessThans;
    /**
     * @return Compares a value of an event using multiple floating point number ranges.
     * 
     */
    private @Nullable List<EventSubscriptionAdvancedFilterNumberNotInRange> numberNotInRanges;
    /**
     * @return Compares a value of an event using multiple floating point numbers.
     * 
     */
    private @Nullable List<EventSubscriptionAdvancedFilterNumberNotIn> numberNotIns;
    /**
     * @return Compares a value of an event using multiple string values.
     * 
     */
    private @Nullable List<EventSubscriptionAdvancedFilterStringBeginsWith> stringBeginsWiths;
    /**
     * @return Compares a value of an event using multiple string values.
     * 
     */
    private @Nullable List<EventSubscriptionAdvancedFilterStringContain> stringContains;
    /**
     * @return Compares a value of an event using multiple string values.
     * 
     */
    private @Nullable List<EventSubscriptionAdvancedFilterStringEndsWith> stringEndsWiths;
    /**
     * @return Compares a value of an event using multiple string values.
     * 
     */
    private @Nullable List<EventSubscriptionAdvancedFilterStringIn> stringIns;
    /**
     * @return Compares a value of an event using multiple string values.
     * 
     */
    private @Nullable List<EventSubscriptionAdvancedFilterStringNotBeginsWith> stringNotBeginsWiths;
    /**
     * @return Compares a value of an event using multiple string values.
     * 
     */
    private @Nullable List<EventSubscriptionAdvancedFilterStringNotContain> stringNotContains;
    /**
     * @return Compares a value of an event using multiple string values.
     * 
     */
    private @Nullable List<EventSubscriptionAdvancedFilterStringNotEndsWith> stringNotEndsWiths;
    /**
     * @return Compares a value of an event using multiple string values.
     * 
     */
    private @Nullable List<EventSubscriptionAdvancedFilterStringNotIn> stringNotIns;

    private EventSubscriptionAdvancedFilter() {}
    /**
     * @return Compares a value of an event using a single boolean value.
     * 
     */
    public List<EventSubscriptionAdvancedFilterBoolEqual> boolEquals() {
        return this.boolEquals == null ? List.of() : this.boolEquals;
    }
    /**
     * @return Evaluates if a value of an event isn&#39;t NULL or undefined.
     * 
     */
    public List<EventSubscriptionAdvancedFilterIsNotNull> isNotNulls() {
        return this.isNotNulls == null ? List.of() : this.isNotNulls;
    }
    /**
     * @return Evaluates if a value of an event is NULL or undefined.
     * 
     * Each nested block consists of a key and a value(s) element.
     * 
     */
    public List<EventSubscriptionAdvancedFilterIsNullOrUndefined> isNullOrUndefineds() {
        return this.isNullOrUndefineds == null ? List.of() : this.isNullOrUndefineds;
    }
    /**
     * @return Compares a value of an event using a single floating point number.
     * 
     */
    public List<EventSubscriptionAdvancedFilterNumberGreaterThanOrEqual> numberGreaterThanOrEquals() {
        return this.numberGreaterThanOrEquals == null ? List.of() : this.numberGreaterThanOrEquals;
    }
    /**
     * @return Compares a value of an event using a single floating point number.
     * 
     */
    public List<EventSubscriptionAdvancedFilterNumberGreaterThan> numberGreaterThans() {
        return this.numberGreaterThans == null ? List.of() : this.numberGreaterThans;
    }
    /**
     * @return Compares a value of an event using multiple floating point number ranges.
     * 
     */
    public List<EventSubscriptionAdvancedFilterNumberInRange> numberInRanges() {
        return this.numberInRanges == null ? List.of() : this.numberInRanges;
    }
    /**
     * @return Compares a value of an event using multiple floating point numbers.
     * 
     */
    public List<EventSubscriptionAdvancedFilterNumberIn> numberIns() {
        return this.numberIns == null ? List.of() : this.numberIns;
    }
    /**
     * @return Compares a value of an event using a single floating point number.
     * 
     */
    public List<EventSubscriptionAdvancedFilterNumberLessThanOrEqual> numberLessThanOrEquals() {
        return this.numberLessThanOrEquals == null ? List.of() : this.numberLessThanOrEquals;
    }
    /**
     * @return Compares a value of an event using a single floating point number.
     * 
     */
    public List<EventSubscriptionAdvancedFilterNumberLessThan> numberLessThans() {
        return this.numberLessThans == null ? List.of() : this.numberLessThans;
    }
    /**
     * @return Compares a value of an event using multiple floating point number ranges.
     * 
     */
    public List<EventSubscriptionAdvancedFilterNumberNotInRange> numberNotInRanges() {
        return this.numberNotInRanges == null ? List.of() : this.numberNotInRanges;
    }
    /**
     * @return Compares a value of an event using multiple floating point numbers.
     * 
     */
    public List<EventSubscriptionAdvancedFilterNumberNotIn> numberNotIns() {
        return this.numberNotIns == null ? List.of() : this.numberNotIns;
    }
    /**
     * @return Compares a value of an event using multiple string values.
     * 
     */
    public List<EventSubscriptionAdvancedFilterStringBeginsWith> stringBeginsWiths() {
        return this.stringBeginsWiths == null ? List.of() : this.stringBeginsWiths;
    }
    /**
     * @return Compares a value of an event using multiple string values.
     * 
     */
    public List<EventSubscriptionAdvancedFilterStringContain> stringContains() {
        return this.stringContains == null ? List.of() : this.stringContains;
    }
    /**
     * @return Compares a value of an event using multiple string values.
     * 
     */
    public List<EventSubscriptionAdvancedFilterStringEndsWith> stringEndsWiths() {
        return this.stringEndsWiths == null ? List.of() : this.stringEndsWiths;
    }
    /**
     * @return Compares a value of an event using multiple string values.
     * 
     */
    public List<EventSubscriptionAdvancedFilterStringIn> stringIns() {
        return this.stringIns == null ? List.of() : this.stringIns;
    }
    /**
     * @return Compares a value of an event using multiple string values.
     * 
     */
    public List<EventSubscriptionAdvancedFilterStringNotBeginsWith> stringNotBeginsWiths() {
        return this.stringNotBeginsWiths == null ? List.of() : this.stringNotBeginsWiths;
    }
    /**
     * @return Compares a value of an event using multiple string values.
     * 
     */
    public List<EventSubscriptionAdvancedFilterStringNotContain> stringNotContains() {
        return this.stringNotContains == null ? List.of() : this.stringNotContains;
    }
    /**
     * @return Compares a value of an event using multiple string values.
     * 
     */
    public List<EventSubscriptionAdvancedFilterStringNotEndsWith> stringNotEndsWiths() {
        return this.stringNotEndsWiths == null ? List.of() : this.stringNotEndsWiths;
    }
    /**
     * @return Compares a value of an event using multiple string values.
     * 
     */
    public List<EventSubscriptionAdvancedFilterStringNotIn> stringNotIns() {
        return this.stringNotIns == null ? List.of() : this.stringNotIns;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EventSubscriptionAdvancedFilter defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<EventSubscriptionAdvancedFilterBoolEqual> boolEquals;
        private @Nullable List<EventSubscriptionAdvancedFilterIsNotNull> isNotNulls;
        private @Nullable List<EventSubscriptionAdvancedFilterIsNullOrUndefined> isNullOrUndefineds;
        private @Nullable List<EventSubscriptionAdvancedFilterNumberGreaterThanOrEqual> numberGreaterThanOrEquals;
        private @Nullable List<EventSubscriptionAdvancedFilterNumberGreaterThan> numberGreaterThans;
        private @Nullable List<EventSubscriptionAdvancedFilterNumberInRange> numberInRanges;
        private @Nullable List<EventSubscriptionAdvancedFilterNumberIn> numberIns;
        private @Nullable List<EventSubscriptionAdvancedFilterNumberLessThanOrEqual> numberLessThanOrEquals;
        private @Nullable List<EventSubscriptionAdvancedFilterNumberLessThan> numberLessThans;
        private @Nullable List<EventSubscriptionAdvancedFilterNumberNotInRange> numberNotInRanges;
        private @Nullable List<EventSubscriptionAdvancedFilterNumberNotIn> numberNotIns;
        private @Nullable List<EventSubscriptionAdvancedFilterStringBeginsWith> stringBeginsWiths;
        private @Nullable List<EventSubscriptionAdvancedFilterStringContain> stringContains;
        private @Nullable List<EventSubscriptionAdvancedFilterStringEndsWith> stringEndsWiths;
        private @Nullable List<EventSubscriptionAdvancedFilterStringIn> stringIns;
        private @Nullable List<EventSubscriptionAdvancedFilterStringNotBeginsWith> stringNotBeginsWiths;
        private @Nullable List<EventSubscriptionAdvancedFilterStringNotContain> stringNotContains;
        private @Nullable List<EventSubscriptionAdvancedFilterStringNotEndsWith> stringNotEndsWiths;
        private @Nullable List<EventSubscriptionAdvancedFilterStringNotIn> stringNotIns;
        public Builder() {}
        public Builder(EventSubscriptionAdvancedFilter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.boolEquals = defaults.boolEquals;
    	      this.isNotNulls = defaults.isNotNulls;
    	      this.isNullOrUndefineds = defaults.isNullOrUndefineds;
    	      this.numberGreaterThanOrEquals = defaults.numberGreaterThanOrEquals;
    	      this.numberGreaterThans = defaults.numberGreaterThans;
    	      this.numberInRanges = defaults.numberInRanges;
    	      this.numberIns = defaults.numberIns;
    	      this.numberLessThanOrEquals = defaults.numberLessThanOrEquals;
    	      this.numberLessThans = defaults.numberLessThans;
    	      this.numberNotInRanges = defaults.numberNotInRanges;
    	      this.numberNotIns = defaults.numberNotIns;
    	      this.stringBeginsWiths = defaults.stringBeginsWiths;
    	      this.stringContains = defaults.stringContains;
    	      this.stringEndsWiths = defaults.stringEndsWiths;
    	      this.stringIns = defaults.stringIns;
    	      this.stringNotBeginsWiths = defaults.stringNotBeginsWiths;
    	      this.stringNotContains = defaults.stringNotContains;
    	      this.stringNotEndsWiths = defaults.stringNotEndsWiths;
    	      this.stringNotIns = defaults.stringNotIns;
        }

        @CustomType.Setter
        public Builder boolEquals(@Nullable List<EventSubscriptionAdvancedFilterBoolEqual> boolEquals) {

            this.boolEquals = boolEquals;
            return this;
        }
        public Builder boolEquals(EventSubscriptionAdvancedFilterBoolEqual... boolEquals) {
            return boolEquals(List.of(boolEquals));
        }
        @CustomType.Setter
        public Builder isNotNulls(@Nullable List<EventSubscriptionAdvancedFilterIsNotNull> isNotNulls) {

            this.isNotNulls = isNotNulls;
            return this;
        }
        public Builder isNotNulls(EventSubscriptionAdvancedFilterIsNotNull... isNotNulls) {
            return isNotNulls(List.of(isNotNulls));
        }
        @CustomType.Setter
        public Builder isNullOrUndefineds(@Nullable List<EventSubscriptionAdvancedFilterIsNullOrUndefined> isNullOrUndefineds) {

            this.isNullOrUndefineds = isNullOrUndefineds;
            return this;
        }
        public Builder isNullOrUndefineds(EventSubscriptionAdvancedFilterIsNullOrUndefined... isNullOrUndefineds) {
            return isNullOrUndefineds(List.of(isNullOrUndefineds));
        }
        @CustomType.Setter
        public Builder numberGreaterThanOrEquals(@Nullable List<EventSubscriptionAdvancedFilterNumberGreaterThanOrEqual> numberGreaterThanOrEquals) {

            this.numberGreaterThanOrEquals = numberGreaterThanOrEquals;
            return this;
        }
        public Builder numberGreaterThanOrEquals(EventSubscriptionAdvancedFilterNumberGreaterThanOrEqual... numberGreaterThanOrEquals) {
            return numberGreaterThanOrEquals(List.of(numberGreaterThanOrEquals));
        }
        @CustomType.Setter
        public Builder numberGreaterThans(@Nullable List<EventSubscriptionAdvancedFilterNumberGreaterThan> numberGreaterThans) {

            this.numberGreaterThans = numberGreaterThans;
            return this;
        }
        public Builder numberGreaterThans(EventSubscriptionAdvancedFilterNumberGreaterThan... numberGreaterThans) {
            return numberGreaterThans(List.of(numberGreaterThans));
        }
        @CustomType.Setter
        public Builder numberInRanges(@Nullable List<EventSubscriptionAdvancedFilterNumberInRange> numberInRanges) {

            this.numberInRanges = numberInRanges;
            return this;
        }
        public Builder numberInRanges(EventSubscriptionAdvancedFilterNumberInRange... numberInRanges) {
            return numberInRanges(List.of(numberInRanges));
        }
        @CustomType.Setter
        public Builder numberIns(@Nullable List<EventSubscriptionAdvancedFilterNumberIn> numberIns) {

            this.numberIns = numberIns;
            return this;
        }
        public Builder numberIns(EventSubscriptionAdvancedFilterNumberIn... numberIns) {
            return numberIns(List.of(numberIns));
        }
        @CustomType.Setter
        public Builder numberLessThanOrEquals(@Nullable List<EventSubscriptionAdvancedFilterNumberLessThanOrEqual> numberLessThanOrEquals) {

            this.numberLessThanOrEquals = numberLessThanOrEquals;
            return this;
        }
        public Builder numberLessThanOrEquals(EventSubscriptionAdvancedFilterNumberLessThanOrEqual... numberLessThanOrEquals) {
            return numberLessThanOrEquals(List.of(numberLessThanOrEquals));
        }
        @CustomType.Setter
        public Builder numberLessThans(@Nullable List<EventSubscriptionAdvancedFilterNumberLessThan> numberLessThans) {

            this.numberLessThans = numberLessThans;
            return this;
        }
        public Builder numberLessThans(EventSubscriptionAdvancedFilterNumberLessThan... numberLessThans) {
            return numberLessThans(List.of(numberLessThans));
        }
        @CustomType.Setter
        public Builder numberNotInRanges(@Nullable List<EventSubscriptionAdvancedFilterNumberNotInRange> numberNotInRanges) {

            this.numberNotInRanges = numberNotInRanges;
            return this;
        }
        public Builder numberNotInRanges(EventSubscriptionAdvancedFilterNumberNotInRange... numberNotInRanges) {
            return numberNotInRanges(List.of(numberNotInRanges));
        }
        @CustomType.Setter
        public Builder numberNotIns(@Nullable List<EventSubscriptionAdvancedFilterNumberNotIn> numberNotIns) {

            this.numberNotIns = numberNotIns;
            return this;
        }
        public Builder numberNotIns(EventSubscriptionAdvancedFilterNumberNotIn... numberNotIns) {
            return numberNotIns(List.of(numberNotIns));
        }
        @CustomType.Setter
        public Builder stringBeginsWiths(@Nullable List<EventSubscriptionAdvancedFilterStringBeginsWith> stringBeginsWiths) {

            this.stringBeginsWiths = stringBeginsWiths;
            return this;
        }
        public Builder stringBeginsWiths(EventSubscriptionAdvancedFilterStringBeginsWith... stringBeginsWiths) {
            return stringBeginsWiths(List.of(stringBeginsWiths));
        }
        @CustomType.Setter
        public Builder stringContains(@Nullable List<EventSubscriptionAdvancedFilterStringContain> stringContains) {

            this.stringContains = stringContains;
            return this;
        }
        public Builder stringContains(EventSubscriptionAdvancedFilterStringContain... stringContains) {
            return stringContains(List.of(stringContains));
        }
        @CustomType.Setter
        public Builder stringEndsWiths(@Nullable List<EventSubscriptionAdvancedFilterStringEndsWith> stringEndsWiths) {

            this.stringEndsWiths = stringEndsWiths;
            return this;
        }
        public Builder stringEndsWiths(EventSubscriptionAdvancedFilterStringEndsWith... stringEndsWiths) {
            return stringEndsWiths(List.of(stringEndsWiths));
        }
        @CustomType.Setter
        public Builder stringIns(@Nullable List<EventSubscriptionAdvancedFilterStringIn> stringIns) {

            this.stringIns = stringIns;
            return this;
        }
        public Builder stringIns(EventSubscriptionAdvancedFilterStringIn... stringIns) {
            return stringIns(List.of(stringIns));
        }
        @CustomType.Setter
        public Builder stringNotBeginsWiths(@Nullable List<EventSubscriptionAdvancedFilterStringNotBeginsWith> stringNotBeginsWiths) {

            this.stringNotBeginsWiths = stringNotBeginsWiths;
            return this;
        }
        public Builder stringNotBeginsWiths(EventSubscriptionAdvancedFilterStringNotBeginsWith... stringNotBeginsWiths) {
            return stringNotBeginsWiths(List.of(stringNotBeginsWiths));
        }
        @CustomType.Setter
        public Builder stringNotContains(@Nullable List<EventSubscriptionAdvancedFilterStringNotContain> stringNotContains) {

            this.stringNotContains = stringNotContains;
            return this;
        }
        public Builder stringNotContains(EventSubscriptionAdvancedFilterStringNotContain... stringNotContains) {
            return stringNotContains(List.of(stringNotContains));
        }
        @CustomType.Setter
        public Builder stringNotEndsWiths(@Nullable List<EventSubscriptionAdvancedFilterStringNotEndsWith> stringNotEndsWiths) {

            this.stringNotEndsWiths = stringNotEndsWiths;
            return this;
        }
        public Builder stringNotEndsWiths(EventSubscriptionAdvancedFilterStringNotEndsWith... stringNotEndsWiths) {
            return stringNotEndsWiths(List.of(stringNotEndsWiths));
        }
        @CustomType.Setter
        public Builder stringNotIns(@Nullable List<EventSubscriptionAdvancedFilterStringNotIn> stringNotIns) {

            this.stringNotIns = stringNotIns;
            return this;
        }
        public Builder stringNotIns(EventSubscriptionAdvancedFilterStringNotIn... stringNotIns) {
            return stringNotIns(List.of(stringNotIns));
        }
        public EventSubscriptionAdvancedFilter build() {
            final var _resultValue = new EventSubscriptionAdvancedFilter();
            _resultValue.boolEquals = boolEquals;
            _resultValue.isNotNulls = isNotNulls;
            _resultValue.isNullOrUndefineds = isNullOrUndefineds;
            _resultValue.numberGreaterThanOrEquals = numberGreaterThanOrEquals;
            _resultValue.numberGreaterThans = numberGreaterThans;
            _resultValue.numberInRanges = numberInRanges;
            _resultValue.numberIns = numberIns;
            _resultValue.numberLessThanOrEquals = numberLessThanOrEquals;
            _resultValue.numberLessThans = numberLessThans;
            _resultValue.numberNotInRanges = numberNotInRanges;
            _resultValue.numberNotIns = numberNotIns;
            _resultValue.stringBeginsWiths = stringBeginsWiths;
            _resultValue.stringContains = stringContains;
            _resultValue.stringEndsWiths = stringEndsWiths;
            _resultValue.stringIns = stringIns;
            _resultValue.stringNotBeginsWiths = stringNotBeginsWiths;
            _resultValue.stringNotContains = stringNotContains;
            _resultValue.stringNotEndsWiths = stringNotEndsWiths;
            _resultValue.stringNotIns = stringNotIns;
            return _resultValue;
        }
    }
}
