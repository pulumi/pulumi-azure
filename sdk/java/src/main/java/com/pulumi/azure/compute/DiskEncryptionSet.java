// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.compute;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.compute.DiskEncryptionSetArgs;
import com.pulumi.azure.compute.inputs.DiskEncryptionSetState;
import com.pulumi.azure.compute.outputs.DiskEncryptionSetIdentity;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a Disk Encryption Set.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.CoreFunctions;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.keyvault.KeyVault;
 * import com.pulumi.azure.keyvault.KeyVaultArgs;
 * import com.pulumi.azure.keyvault.AccessPolicy;
 * import com.pulumi.azure.keyvault.AccessPolicyArgs;
 * import com.pulumi.azure.keyvault.Key;
 * import com.pulumi.azure.keyvault.KeyArgs;
 * import com.pulumi.azure.compute.DiskEncryptionSet;
 * import com.pulumi.azure.compute.DiskEncryptionSetArgs;
 * import com.pulumi.azure.compute.inputs.DiskEncryptionSetIdentityArgs;
 * import com.pulumi.azure.authorization.Assignment;
 * import com.pulumi.azure.authorization.AssignmentArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var current = CoreFunctions.getClientConfig(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
 * 
 *         var example = new ResourceGroup("example", ResourceGroupArgs.builder()
 *             .name("example-resources")
 *             .location("West Europe")
 *             .build());
 * 
 *         var exampleKeyVault = new KeyVault("exampleKeyVault", KeyVaultArgs.builder()
 *             .name("des-example-keyvault")
 *             .location(example.location())
 *             .resourceGroupName(example.name())
 *             .tenantId(current.tenantId())
 *             .skuName("premium")
 *             .enabledForDiskEncryption(true)
 *             .purgeProtectionEnabled(true)
 *             .build());
 * 
 *         var example_user = new AccessPolicy("example-user", AccessPolicyArgs.builder()
 *             .keyVaultId(exampleKeyVault.id())
 *             .tenantId(current.tenantId())
 *             .objectId(current.objectId())
 *             .keyPermissions(            
 *                 "Create",
 *                 "Delete",
 *                 "Get",
 *                 "Purge",
 *                 "Recover",
 *                 "Update",
 *                 "List",
 *                 "Decrypt",
 *                 "Sign",
 *                 "GetRotationPolicy")
 *             .build());
 * 
 *         var exampleKey = new Key("exampleKey", KeyArgs.builder()
 *             .name("des-example-key")
 *             .keyVaultId(exampleKeyVault.id())
 *             .keyType("RSA")
 *             .keySize(2048)
 *             .keyOpts(            
 *                 "decrypt",
 *                 "encrypt",
 *                 "sign",
 *                 "unwrapKey",
 *                 "verify",
 *                 "wrapKey")
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(example_user)
 *                 .build());
 * 
 *         var exampleDiskEncryptionSet = new DiskEncryptionSet("exampleDiskEncryptionSet", DiskEncryptionSetArgs.builder()
 *             .name("des")
 *             .resourceGroupName(example.name())
 *             .location(example.location())
 *             .keyVaultKeyId(exampleKey.id())
 *             .identity(DiskEncryptionSetIdentityArgs.builder()
 *                 .type("SystemAssigned")
 *                 .build())
 *             .build());
 * 
 *         var example_disk = new AccessPolicy("example-disk", AccessPolicyArgs.builder()
 *             .keyVaultId(exampleKeyVault.id())
 *             .tenantId(exampleDiskEncryptionSet.identity().applyValue(_identity -> _identity.tenantId()))
 *             .objectId(exampleDiskEncryptionSet.identity().applyValue(_identity -> _identity.principalId()))
 *             .keyPermissions(            
 *                 "Create",
 *                 "Delete",
 *                 "Get",
 *                 "Purge",
 *                 "Recover",
 *                 "Update",
 *                 "List",
 *                 "Decrypt",
 *                 "Sign")
 *             .build());
 * 
 *         var example_diskAssignment = new Assignment("example-diskAssignment", AssignmentArgs.builder()
 *             .scope(exampleKeyVault.id())
 *             .roleDefinitionName("Key Vault Crypto Service Encryption User")
 *             .principalId(exampleDiskEncryptionSet.identity().applyValue(_identity -> _identity.principalId()))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### With Automatic Key Rotation Enabled
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.CoreFunctions;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.keyvault.KeyVault;
 * import com.pulumi.azure.keyvault.KeyVaultArgs;
 * import com.pulumi.azure.keyvault.AccessPolicy;
 * import com.pulumi.azure.keyvault.AccessPolicyArgs;
 * import com.pulumi.azure.keyvault.Key;
 * import com.pulumi.azure.keyvault.KeyArgs;
 * import com.pulumi.azure.compute.DiskEncryptionSet;
 * import com.pulumi.azure.compute.DiskEncryptionSetArgs;
 * import com.pulumi.azure.compute.inputs.DiskEncryptionSetIdentityArgs;
 * import com.pulumi.azure.authorization.Assignment;
 * import com.pulumi.azure.authorization.AssignmentArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var current = CoreFunctions.getClientConfig(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
 * 
 *         var example = new ResourceGroup("example", ResourceGroupArgs.builder()
 *             .name("example-resources")
 *             .location("West Europe")
 *             .build());
 * 
 *         var exampleKeyVault = new KeyVault("exampleKeyVault", KeyVaultArgs.builder()
 *             .name("des-example-keyvault")
 *             .location(example.location())
 *             .resourceGroupName(example.name())
 *             .tenantId(current.tenantId())
 *             .skuName("premium")
 *             .enabledForDiskEncryption(true)
 *             .purgeProtectionEnabled(true)
 *             .build());
 * 
 *         var example_user = new AccessPolicy("example-user", AccessPolicyArgs.builder()
 *             .keyVaultId(exampleKeyVault.id())
 *             .tenantId(current.tenantId())
 *             .objectId(current.objectId())
 *             .keyPermissions(            
 *                 "Create",
 *                 "Delete",
 *                 "Get",
 *                 "Purge",
 *                 "Recover",
 *                 "Update",
 *                 "List",
 *                 "Decrypt",
 *                 "Sign",
 *                 "GetRotationPolicy")
 *             .build());
 * 
 *         var exampleKey = new Key("exampleKey", KeyArgs.builder()
 *             .name("des-example-key")
 *             .keyVaultId(exampleKeyVault.id())
 *             .keyType("RSA")
 *             .keySize(2048)
 *             .keyOpts(            
 *                 "decrypt",
 *                 "encrypt",
 *                 "sign",
 *                 "unwrapKey",
 *                 "verify",
 *                 "wrapKey")
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(example_user)
 *                 .build());
 * 
 *         var exampleDiskEncryptionSet = new DiskEncryptionSet("exampleDiskEncryptionSet", DiskEncryptionSetArgs.builder()
 *             .name("des")
 *             .resourceGroupName(example.name())
 *             .location(example.location())
 *             .keyVaultKeyId(exampleKey.versionlessId())
 *             .autoKeyRotationEnabled(true)
 *             .identity(DiskEncryptionSetIdentityArgs.builder()
 *                 .type("SystemAssigned")
 *                 .build())
 *             .build());
 * 
 *         var example_disk = new AccessPolicy("example-disk", AccessPolicyArgs.builder()
 *             .keyVaultId(exampleKeyVault.id())
 *             .tenantId(exampleDiskEncryptionSet.identity().applyValue(_identity -> _identity.tenantId()))
 *             .objectId(exampleDiskEncryptionSet.identity().applyValue(_identity -> _identity.principalId()))
 *             .keyPermissions(            
 *                 "Create",
 *                 "Delete",
 *                 "Get",
 *                 "Purge",
 *                 "Recover",
 *                 "Update",
 *                 "List",
 *                 "Decrypt",
 *                 "Sign")
 *             .build());
 * 
 *         var example_diskAssignment = new Assignment("example-diskAssignment", AssignmentArgs.builder()
 *             .scope(exampleKeyVault.id())
 *             .roleDefinitionName("Key Vault Crypto Service Encryption User")
 *             .principalId(exampleDiskEncryptionSet.identity().applyValue(_identity -> _identity.principalId()))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Disk Encryption Sets can be imported using the `resource id`, e.g.
 * 
 * ```sh
 * $ pulumi import azure:compute/diskEncryptionSet:DiskEncryptionSet example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Compute/diskEncryptionSets/encryptionSet1
 * ```
 * 
 */
@ResourceType(type="azure:compute/diskEncryptionSet:DiskEncryptionSet")
public class DiskEncryptionSet extends com.pulumi.resources.CustomResource {
    @Export(name="autoKeyRotationEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> autoKeyRotationEnabled;

    public Output<Optional<Boolean>> autoKeyRotationEnabled() {
        return Codegen.optional(this.autoKeyRotationEnabled);
    }
    /**
     * The type of key used to encrypt the data of the disk. Possible values are `EncryptionAtRestWithCustomerKey`, `EncryptionAtRestWithPlatformAndCustomerKeys` and `ConfidentialVmEncryptedWithCustomerKey`. Defaults to `EncryptionAtRestWithCustomerKey`. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="encryptionType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> encryptionType;

    /**
     * @return The type of key used to encrypt the data of the disk. Possible values are `EncryptionAtRestWithCustomerKey`, `EncryptionAtRestWithPlatformAndCustomerKeys` and `ConfidentialVmEncryptedWithCustomerKey`. Defaults to `EncryptionAtRestWithCustomerKey`. Changing this forces a new resource to be created.
     * 
     */
    public Output<Optional<String>> encryptionType() {
        return Codegen.optional(this.encryptionType);
    }
    /**
     * Multi-tenant application client id to access key vault in a different tenant.
     * 
     */
    @Export(name="federatedClientId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> federatedClientId;

    /**
     * @return Multi-tenant application client id to access key vault in a different tenant.
     * 
     */
    public Output<Optional<String>> federatedClientId() {
        return Codegen.optional(this.federatedClientId);
    }
    /**
     * An `identity` block as defined below.
     * 
     */
    @Export(name="identity", refs={DiskEncryptionSetIdentity.class}, tree="[0]")
    private Output<DiskEncryptionSetIdentity> identity;

    /**
     * @return An `identity` block as defined below.
     * 
     */
    public Output<DiskEncryptionSetIdentity> identity() {
        return this.identity;
    }
    /**
     * Specifies the URL to a Key Vault Key (either from a Key Vault Key, or the Key URL for the Key Vault Secret). Exactly one of `managed_hsm_key_id`, `key_vault_key_id` must be specified.
     * 
     * &gt; **Note:** Access to the KeyVault must be granted for this Disk Encryption Set, if you want to further use this Disk Encryption Set in a Managed Disk or Virtual Machine, or Virtual Machine Scale Set. For instructions, please refer to the doc of [Server side encryption of Azure managed disks](https://docs.microsoft.com/azure/virtual-machines/linux/disk-encryption).
     * 
     * &gt; **Note:** A KeyVault or Managed HSM using enable_rbac_authorization requires to use `azure.authorization.Assignment` to assign the role `Key Vault Crypto Service Encryption User` to this Disk Encryption Set.
     * In this case, `azure.keyvault.AccessPolicy` is not needed.
     * 
     */
    @Export(name="keyVaultKeyId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> keyVaultKeyId;

    /**
     * @return Specifies the URL to a Key Vault Key (either from a Key Vault Key, or the Key URL for the Key Vault Secret). Exactly one of `managed_hsm_key_id`, `key_vault_key_id` must be specified.
     * 
     * &gt; **Note:** Access to the KeyVault must be granted for this Disk Encryption Set, if you want to further use this Disk Encryption Set in a Managed Disk or Virtual Machine, or Virtual Machine Scale Set. For instructions, please refer to the doc of [Server side encryption of Azure managed disks](https://docs.microsoft.com/azure/virtual-machines/linux/disk-encryption).
     * 
     * &gt; **Note:** A KeyVault or Managed HSM using enable_rbac_authorization requires to use `azure.authorization.Assignment` to assign the role `Key Vault Crypto Service Encryption User` to this Disk Encryption Set.
     * In this case, `azure.keyvault.AccessPolicy` is not needed.
     * 
     */
    public Output<Optional<String>> keyVaultKeyId() {
        return Codegen.optional(this.keyVaultKeyId);
    }
    /**
     * The URL for the Key Vault Key or Key Vault Secret that is currently being used by the service.
     * 
     */
    @Export(name="keyVaultKeyUrl", refs={String.class}, tree="[0]")
    private Output<String> keyVaultKeyUrl;

    /**
     * @return The URL for the Key Vault Key or Key Vault Secret that is currently being used by the service.
     * 
     */
    public Output<String> keyVaultKeyUrl() {
        return this.keyVaultKeyUrl;
    }
    /**
     * Specifies the Azure Region where the Disk Encryption Set exists. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return Specifies the Azure Region where the Disk Encryption Set exists. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * Key ID of a key in a managed HSM.  Exactly one of `managed_hsm_key_id`, `key_vault_key_id` must be specified.
     * 
     */
    @Export(name="managedHsmKeyId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> managedHsmKeyId;

    /**
     * @return Key ID of a key in a managed HSM.  Exactly one of `managed_hsm_key_id`, `key_vault_key_id` must be specified.
     * 
     */
    public Output<Optional<String>> managedHsmKeyId() {
        return Codegen.optional(this.managedHsmKeyId);
    }
    /**
     * The name of the Disk Encryption Set. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the Disk Encryption Set. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Specifies the name of the Resource Group where the Disk Encryption Set should exist. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="resourceGroupName", refs={String.class}, tree="[0]")
    private Output<String> resourceGroupName;

    /**
     * @return Specifies the name of the Resource Group where the Disk Encryption Set should exist. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * A mapping of tags to assign to the Disk Encryption Set.
     * 
     */
    @Export(name="tags", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the Disk Encryption Set.
     * 
     */
    public Output<Optional<Map<String,String>>> tags() {
        return Codegen.optional(this.tags);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public DiskEncryptionSet(java.lang.String name) {
        this(name, DiskEncryptionSetArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public DiskEncryptionSet(java.lang.String name, DiskEncryptionSetArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public DiskEncryptionSet(java.lang.String name, DiskEncryptionSetArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:compute/diskEncryptionSet:DiskEncryptionSet", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private DiskEncryptionSet(java.lang.String name, Output<java.lang.String> id, @Nullable DiskEncryptionSetState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:compute/diskEncryptionSet:DiskEncryptionSet", name, state, makeResourceOptions(options, id), false);
    }

    private static DiskEncryptionSetArgs makeArgs(DiskEncryptionSetArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? DiskEncryptionSetArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static DiskEncryptionSet get(java.lang.String name, Output<java.lang.String> id, @Nullable DiskEncryptionSetState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new DiskEncryptionSet(name, id, state, options);
    }
}
