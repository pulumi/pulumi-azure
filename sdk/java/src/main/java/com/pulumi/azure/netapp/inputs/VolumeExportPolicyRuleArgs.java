// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.netapp.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VolumeExportPolicyRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final VolumeExportPolicyRuleArgs Empty = new VolumeExportPolicyRuleArgs();

    /**
     * A list of allowed clients IPv4 addresses.
     * 
     */
    @Import(name="allowedClients", required=true)
    private Output<List<String>> allowedClients;

    /**
     * @return A list of allowed clients IPv4 addresses.
     * 
     */
    public Output<List<String>> allowedClients() {
        return this.allowedClients;
    }

    /**
     * A list of allowed protocols. Valid values include `CIFS`, `NFSv3`, or `NFSv4.1`. Only one value is supported at this time. This replaces the previous arguments: `cifs_enabled`, `nfsv3_enabled` and `nfsv4_enabled`.
     * 
     */
    @Import(name="protocolsEnabled")
    private @Nullable Output<String> protocolsEnabled;

    /**
     * @return A list of allowed protocols. Valid values include `CIFS`, `NFSv3`, or `NFSv4.1`. Only one value is supported at this time. This replaces the previous arguments: `cifs_enabled`, `nfsv3_enabled` and `nfsv4_enabled`.
     * 
     */
    public Optional<Output<String>> protocolsEnabled() {
        return Optional.ofNullable(this.protocolsEnabled);
    }

    /**
     * Is root access permitted to this volume?
     * 
     */
    @Import(name="rootAccessEnabled")
    private @Nullable Output<Boolean> rootAccessEnabled;

    /**
     * @return Is root access permitted to this volume?
     * 
     */
    public Optional<Output<Boolean>> rootAccessEnabled() {
        return Optional.ofNullable(this.rootAccessEnabled);
    }

    /**
     * The index number of the rule.
     * 
     */
    @Import(name="ruleIndex", required=true)
    private Output<Integer> ruleIndex;

    /**
     * @return The index number of the rule.
     * 
     */
    public Output<Integer> ruleIndex() {
        return this.ruleIndex;
    }

    /**
     * Is the file system on unix read only?
     * 
     */
    @Import(name="unixReadOnly")
    private @Nullable Output<Boolean> unixReadOnly;

    /**
     * @return Is the file system on unix read only?
     * 
     */
    public Optional<Output<Boolean>> unixReadOnly() {
        return Optional.ofNullable(this.unixReadOnly);
    }

    /**
     * Is the file system on unix read and write?
     * 
     */
    @Import(name="unixReadWrite")
    private @Nullable Output<Boolean> unixReadWrite;

    /**
     * @return Is the file system on unix read and write?
     * 
     */
    public Optional<Output<Boolean>> unixReadWrite() {
        return Optional.ofNullable(this.unixReadWrite);
    }

    private VolumeExportPolicyRuleArgs() {}

    private VolumeExportPolicyRuleArgs(VolumeExportPolicyRuleArgs $) {
        this.allowedClients = $.allowedClients;
        this.protocolsEnabled = $.protocolsEnabled;
        this.rootAccessEnabled = $.rootAccessEnabled;
        this.ruleIndex = $.ruleIndex;
        this.unixReadOnly = $.unixReadOnly;
        this.unixReadWrite = $.unixReadWrite;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VolumeExportPolicyRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VolumeExportPolicyRuleArgs $;

        public Builder() {
            $ = new VolumeExportPolicyRuleArgs();
        }

        public Builder(VolumeExportPolicyRuleArgs defaults) {
            $ = new VolumeExportPolicyRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedClients A list of allowed clients IPv4 addresses.
         * 
         * @return builder
         * 
         */
        public Builder allowedClients(Output<List<String>> allowedClients) {
            $.allowedClients = allowedClients;
            return this;
        }

        /**
         * @param allowedClients A list of allowed clients IPv4 addresses.
         * 
         * @return builder
         * 
         */
        public Builder allowedClients(List<String> allowedClients) {
            return allowedClients(Output.of(allowedClients));
        }

        /**
         * @param allowedClients A list of allowed clients IPv4 addresses.
         * 
         * @return builder
         * 
         */
        public Builder allowedClients(String... allowedClients) {
            return allowedClients(List.of(allowedClients));
        }

        /**
         * @param protocolsEnabled A list of allowed protocols. Valid values include `CIFS`, `NFSv3`, or `NFSv4.1`. Only one value is supported at this time. This replaces the previous arguments: `cifs_enabled`, `nfsv3_enabled` and `nfsv4_enabled`.
         * 
         * @return builder
         * 
         */
        public Builder protocolsEnabled(@Nullable Output<String> protocolsEnabled) {
            $.protocolsEnabled = protocolsEnabled;
            return this;
        }

        /**
         * @param protocolsEnabled A list of allowed protocols. Valid values include `CIFS`, `NFSv3`, or `NFSv4.1`. Only one value is supported at this time. This replaces the previous arguments: `cifs_enabled`, `nfsv3_enabled` and `nfsv4_enabled`.
         * 
         * @return builder
         * 
         */
        public Builder protocolsEnabled(String protocolsEnabled) {
            return protocolsEnabled(Output.of(protocolsEnabled));
        }

        /**
         * @param rootAccessEnabled Is root access permitted to this volume?
         * 
         * @return builder
         * 
         */
        public Builder rootAccessEnabled(@Nullable Output<Boolean> rootAccessEnabled) {
            $.rootAccessEnabled = rootAccessEnabled;
            return this;
        }

        /**
         * @param rootAccessEnabled Is root access permitted to this volume?
         * 
         * @return builder
         * 
         */
        public Builder rootAccessEnabled(Boolean rootAccessEnabled) {
            return rootAccessEnabled(Output.of(rootAccessEnabled));
        }

        /**
         * @param ruleIndex The index number of the rule.
         * 
         * @return builder
         * 
         */
        public Builder ruleIndex(Output<Integer> ruleIndex) {
            $.ruleIndex = ruleIndex;
            return this;
        }

        /**
         * @param ruleIndex The index number of the rule.
         * 
         * @return builder
         * 
         */
        public Builder ruleIndex(Integer ruleIndex) {
            return ruleIndex(Output.of(ruleIndex));
        }

        /**
         * @param unixReadOnly Is the file system on unix read only?
         * 
         * @return builder
         * 
         */
        public Builder unixReadOnly(@Nullable Output<Boolean> unixReadOnly) {
            $.unixReadOnly = unixReadOnly;
            return this;
        }

        /**
         * @param unixReadOnly Is the file system on unix read only?
         * 
         * @return builder
         * 
         */
        public Builder unixReadOnly(Boolean unixReadOnly) {
            return unixReadOnly(Output.of(unixReadOnly));
        }

        /**
         * @param unixReadWrite Is the file system on unix read and write?
         * 
         * @return builder
         * 
         */
        public Builder unixReadWrite(@Nullable Output<Boolean> unixReadWrite) {
            $.unixReadWrite = unixReadWrite;
            return this;
        }

        /**
         * @param unixReadWrite Is the file system on unix read and write?
         * 
         * @return builder
         * 
         */
        public Builder unixReadWrite(Boolean unixReadWrite) {
            return unixReadWrite(Output.of(unixReadWrite));
        }

        public VolumeExportPolicyRuleArgs build() {
            if ($.allowedClients == null) {
                throw new MissingRequiredPropertyException("VolumeExportPolicyRuleArgs", "allowedClients");
            }
            if ($.ruleIndex == null) {
                throw new MissingRequiredPropertyException("VolumeExportPolicyRuleArgs", "ruleIndex");
            }
            return $;
        }
    }

}
