// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.netapp;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.netapp.inputs.GetAccountArgs;
import com.pulumi.azure.netapp.inputs.GetAccountPlainArgs;
import com.pulumi.azure.netapp.inputs.GetPoolArgs;
import com.pulumi.azure.netapp.inputs.GetPoolPlainArgs;
import com.pulumi.azure.netapp.inputs.GetSnapshotArgs;
import com.pulumi.azure.netapp.inputs.GetSnapshotPlainArgs;
import com.pulumi.azure.netapp.inputs.GetSnapshotPolicyArgs;
import com.pulumi.azure.netapp.inputs.GetSnapshotPolicyPlainArgs;
import com.pulumi.azure.netapp.inputs.GetVolumeArgs;
import com.pulumi.azure.netapp.inputs.GetVolumePlainArgs;
import com.pulumi.azure.netapp.outputs.GetAccountResult;
import com.pulumi.azure.netapp.outputs.GetPoolResult;
import com.pulumi.azure.netapp.outputs.GetSnapshotPolicyResult;
import com.pulumi.azure.netapp.outputs.GetSnapshotResult;
import com.pulumi.azure.netapp.outputs.GetVolumeResult;
import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import java.util.concurrent.CompletableFuture;

public final class NetappFunctions {
    /**
     * Uses this data source to access information about an existing NetApp Account.
     * 
     * ## NetApp Account Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azure.netapp.NetappFunctions;
     * import com.pulumi.azure.automation.inputs.GetAccountArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NetappFunctions.getAccount(GetAccountArgs.builder()
     *             .resourceGroupName(&#34;acctestRG&#34;)
     *             .name(&#34;acctestnetappaccount&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;netappAccountId&#34;, example.applyValue(getAccountResult -&gt; getAccountResult.id()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetAccountResult> getAccount(GetAccountArgs args) {
        return getAccount(args, InvokeOptions.Empty);
    }
    /**
     * Uses this data source to access information about an existing NetApp Account.
     * 
     * ## NetApp Account Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azure.netapp.NetappFunctions;
     * import com.pulumi.azure.automation.inputs.GetAccountArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NetappFunctions.getAccount(GetAccountArgs.builder()
     *             .resourceGroupName(&#34;acctestRG&#34;)
     *             .name(&#34;acctestnetappaccount&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;netappAccountId&#34;, example.applyValue(getAccountResult -&gt; getAccountResult.id()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetAccountResult> getAccountPlain(GetAccountPlainArgs args) {
        return getAccountPlain(args, InvokeOptions.Empty);
    }
    /**
     * Uses this data source to access information about an existing NetApp Account.
     * 
     * ## NetApp Account Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azure.netapp.NetappFunctions;
     * import com.pulumi.azure.automation.inputs.GetAccountArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NetappFunctions.getAccount(GetAccountArgs.builder()
     *             .resourceGroupName(&#34;acctestRG&#34;)
     *             .name(&#34;acctestnetappaccount&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;netappAccountId&#34;, example.applyValue(getAccountResult -&gt; getAccountResult.id()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetAccountResult> getAccount(GetAccountArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("azure:netapp/getAccount:getAccount", TypeShape.of(GetAccountResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Uses this data source to access information about an existing NetApp Account.
     * 
     * ## NetApp Account Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azure.netapp.NetappFunctions;
     * import com.pulumi.azure.automation.inputs.GetAccountArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NetappFunctions.getAccount(GetAccountArgs.builder()
     *             .resourceGroupName(&#34;acctestRG&#34;)
     *             .name(&#34;acctestnetappaccount&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;netappAccountId&#34;, example.applyValue(getAccountResult -&gt; getAccountResult.id()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetAccountResult> getAccountPlain(GetAccountPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("azure:netapp/getAccount:getAccount", TypeShape.of(GetAccountResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Uses this data source to access information about an existing NetApp Pool.
     * 
     * ## NetApp Pool Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azure.netapp.NetappFunctions;
     * import com.pulumi.azure.batch.inputs.GetPoolArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NetappFunctions.getPool(GetPoolArgs.builder()
     *             .resourceGroupName(&#34;acctestRG&#34;)
     *             .accountName(&#34;acctestnetappaccount&#34;)
     *             .name(&#34;acctestnetapppool&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;netappPoolId&#34;, example.applyValue(getPoolResult -&gt; getPoolResult.id()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetPoolResult> getPool(GetPoolArgs args) {
        return getPool(args, InvokeOptions.Empty);
    }
    /**
     * Uses this data source to access information about an existing NetApp Pool.
     * 
     * ## NetApp Pool Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azure.netapp.NetappFunctions;
     * import com.pulumi.azure.batch.inputs.GetPoolArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NetappFunctions.getPool(GetPoolArgs.builder()
     *             .resourceGroupName(&#34;acctestRG&#34;)
     *             .accountName(&#34;acctestnetappaccount&#34;)
     *             .name(&#34;acctestnetapppool&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;netappPoolId&#34;, example.applyValue(getPoolResult -&gt; getPoolResult.id()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetPoolResult> getPoolPlain(GetPoolPlainArgs args) {
        return getPoolPlain(args, InvokeOptions.Empty);
    }
    /**
     * Uses this data source to access information about an existing NetApp Pool.
     * 
     * ## NetApp Pool Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azure.netapp.NetappFunctions;
     * import com.pulumi.azure.batch.inputs.GetPoolArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NetappFunctions.getPool(GetPoolArgs.builder()
     *             .resourceGroupName(&#34;acctestRG&#34;)
     *             .accountName(&#34;acctestnetappaccount&#34;)
     *             .name(&#34;acctestnetapppool&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;netappPoolId&#34;, example.applyValue(getPoolResult -&gt; getPoolResult.id()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetPoolResult> getPool(GetPoolArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("azure:netapp/getPool:getPool", TypeShape.of(GetPoolResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Uses this data source to access information about an existing NetApp Pool.
     * 
     * ## NetApp Pool Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azure.netapp.NetappFunctions;
     * import com.pulumi.azure.batch.inputs.GetPoolArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NetappFunctions.getPool(GetPoolArgs.builder()
     *             .resourceGroupName(&#34;acctestRG&#34;)
     *             .accountName(&#34;acctestnetappaccount&#34;)
     *             .name(&#34;acctestnetapppool&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;netappPoolId&#34;, example.applyValue(getPoolResult -&gt; getPoolResult.id()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetPoolResult> getPoolPlain(GetPoolPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("azure:netapp/getPool:getPool", TypeShape.of(GetPoolResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Uses this data source to access information about an existing NetApp Snapshot.
     * 
     * ## NetApp Snapshot Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azure.netapp.NetappFunctions;
     * import com.pulumi.azure.compute.inputs.GetSnapshotArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = NetappFunctions.getSnapshot(GetSnapshotArgs.builder()
     *             .resourceGroupName(&#34;acctestRG&#34;)
     *             .name(&#34;acctestnetappsnapshot&#34;)
     *             .accountName(&#34;acctestnetappaccount&#34;)
     *             .poolName(&#34;acctestnetapppool&#34;)
     *             .volumeName(&#34;acctestnetappvolume&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;netappSnapshotId&#34;, data.azurerm_netapp_snapshot().example().id());
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetSnapshotResult> getSnapshot(GetSnapshotArgs args) {
        return getSnapshot(args, InvokeOptions.Empty);
    }
    /**
     * Uses this data source to access information about an existing NetApp Snapshot.
     * 
     * ## NetApp Snapshot Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azure.netapp.NetappFunctions;
     * import com.pulumi.azure.compute.inputs.GetSnapshotArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = NetappFunctions.getSnapshot(GetSnapshotArgs.builder()
     *             .resourceGroupName(&#34;acctestRG&#34;)
     *             .name(&#34;acctestnetappsnapshot&#34;)
     *             .accountName(&#34;acctestnetappaccount&#34;)
     *             .poolName(&#34;acctestnetapppool&#34;)
     *             .volumeName(&#34;acctestnetappvolume&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;netappSnapshotId&#34;, data.azurerm_netapp_snapshot().example().id());
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetSnapshotResult> getSnapshotPlain(GetSnapshotPlainArgs args) {
        return getSnapshotPlain(args, InvokeOptions.Empty);
    }
    /**
     * Uses this data source to access information about an existing NetApp Snapshot.
     * 
     * ## NetApp Snapshot Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azure.netapp.NetappFunctions;
     * import com.pulumi.azure.compute.inputs.GetSnapshotArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = NetappFunctions.getSnapshot(GetSnapshotArgs.builder()
     *             .resourceGroupName(&#34;acctestRG&#34;)
     *             .name(&#34;acctestnetappsnapshot&#34;)
     *             .accountName(&#34;acctestnetappaccount&#34;)
     *             .poolName(&#34;acctestnetapppool&#34;)
     *             .volumeName(&#34;acctestnetappvolume&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;netappSnapshotId&#34;, data.azurerm_netapp_snapshot().example().id());
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetSnapshotResult> getSnapshot(GetSnapshotArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("azure:netapp/getSnapshot:getSnapshot", TypeShape.of(GetSnapshotResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Uses this data source to access information about an existing NetApp Snapshot.
     * 
     * ## NetApp Snapshot Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azure.netapp.NetappFunctions;
     * import com.pulumi.azure.compute.inputs.GetSnapshotArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = NetappFunctions.getSnapshot(GetSnapshotArgs.builder()
     *             .resourceGroupName(&#34;acctestRG&#34;)
     *             .name(&#34;acctestnetappsnapshot&#34;)
     *             .accountName(&#34;acctestnetappaccount&#34;)
     *             .poolName(&#34;acctestnetapppool&#34;)
     *             .volumeName(&#34;acctestnetappvolume&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;netappSnapshotId&#34;, data.azurerm_netapp_snapshot().example().id());
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetSnapshotResult> getSnapshotPlain(GetSnapshotPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("azure:netapp/getSnapshot:getSnapshot", TypeShape.of(GetSnapshotResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Uses this data source to access information about an existing NetApp Snapshot Policy.
     * 
     * ## NetApp Snapshot Policy Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azure.netapp.NetappFunctions;
     * import com.pulumi.azure.netapp.inputs.GetSnapshotPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NetappFunctions.getSnapshotPolicy(GetSnapshotPolicyArgs.builder()
     *             .resourceGroupName(&#34;acctestRG&#34;)
     *             .accountName(&#34;acctestnetappaccount&#34;)
     *             .name(&#34;example-snapshot-policy&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;id&#34;, example.applyValue(getSnapshotPolicyResult -&gt; getSnapshotPolicyResult.id()));
     *         ctx.export(&#34;name&#34;, example.applyValue(getSnapshotPolicyResult -&gt; getSnapshotPolicyResult.name()));
     *         ctx.export(&#34;enabled&#34;, example.applyValue(getSnapshotPolicyResult -&gt; getSnapshotPolicyResult.enabled()));
     *         ctx.export(&#34;hourlySchedule&#34;, example.applyValue(getSnapshotPolicyResult -&gt; getSnapshotPolicyResult.hourlySchedules()));
     *         ctx.export(&#34;dailySchedule&#34;, example.applyValue(getSnapshotPolicyResult -&gt; getSnapshotPolicyResult.dailySchedules()));
     *         ctx.export(&#34;weeklySchedule&#34;, example.applyValue(getSnapshotPolicyResult -&gt; getSnapshotPolicyResult.weeklySchedules()));
     *         ctx.export(&#34;monthlySchedule&#34;, example.applyValue(getSnapshotPolicyResult -&gt; getSnapshotPolicyResult.monthlySchedules()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetSnapshotPolicyResult> getSnapshotPolicy(GetSnapshotPolicyArgs args) {
        return getSnapshotPolicy(args, InvokeOptions.Empty);
    }
    /**
     * Uses this data source to access information about an existing NetApp Snapshot Policy.
     * 
     * ## NetApp Snapshot Policy Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azure.netapp.NetappFunctions;
     * import com.pulumi.azure.netapp.inputs.GetSnapshotPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NetappFunctions.getSnapshotPolicy(GetSnapshotPolicyArgs.builder()
     *             .resourceGroupName(&#34;acctestRG&#34;)
     *             .accountName(&#34;acctestnetappaccount&#34;)
     *             .name(&#34;example-snapshot-policy&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;id&#34;, example.applyValue(getSnapshotPolicyResult -&gt; getSnapshotPolicyResult.id()));
     *         ctx.export(&#34;name&#34;, example.applyValue(getSnapshotPolicyResult -&gt; getSnapshotPolicyResult.name()));
     *         ctx.export(&#34;enabled&#34;, example.applyValue(getSnapshotPolicyResult -&gt; getSnapshotPolicyResult.enabled()));
     *         ctx.export(&#34;hourlySchedule&#34;, example.applyValue(getSnapshotPolicyResult -&gt; getSnapshotPolicyResult.hourlySchedules()));
     *         ctx.export(&#34;dailySchedule&#34;, example.applyValue(getSnapshotPolicyResult -&gt; getSnapshotPolicyResult.dailySchedules()));
     *         ctx.export(&#34;weeklySchedule&#34;, example.applyValue(getSnapshotPolicyResult -&gt; getSnapshotPolicyResult.weeklySchedules()));
     *         ctx.export(&#34;monthlySchedule&#34;, example.applyValue(getSnapshotPolicyResult -&gt; getSnapshotPolicyResult.monthlySchedules()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetSnapshotPolicyResult> getSnapshotPolicyPlain(GetSnapshotPolicyPlainArgs args) {
        return getSnapshotPolicyPlain(args, InvokeOptions.Empty);
    }
    /**
     * Uses this data source to access information about an existing NetApp Snapshot Policy.
     * 
     * ## NetApp Snapshot Policy Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azure.netapp.NetappFunctions;
     * import com.pulumi.azure.netapp.inputs.GetSnapshotPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NetappFunctions.getSnapshotPolicy(GetSnapshotPolicyArgs.builder()
     *             .resourceGroupName(&#34;acctestRG&#34;)
     *             .accountName(&#34;acctestnetappaccount&#34;)
     *             .name(&#34;example-snapshot-policy&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;id&#34;, example.applyValue(getSnapshotPolicyResult -&gt; getSnapshotPolicyResult.id()));
     *         ctx.export(&#34;name&#34;, example.applyValue(getSnapshotPolicyResult -&gt; getSnapshotPolicyResult.name()));
     *         ctx.export(&#34;enabled&#34;, example.applyValue(getSnapshotPolicyResult -&gt; getSnapshotPolicyResult.enabled()));
     *         ctx.export(&#34;hourlySchedule&#34;, example.applyValue(getSnapshotPolicyResult -&gt; getSnapshotPolicyResult.hourlySchedules()));
     *         ctx.export(&#34;dailySchedule&#34;, example.applyValue(getSnapshotPolicyResult -&gt; getSnapshotPolicyResult.dailySchedules()));
     *         ctx.export(&#34;weeklySchedule&#34;, example.applyValue(getSnapshotPolicyResult -&gt; getSnapshotPolicyResult.weeklySchedules()));
     *         ctx.export(&#34;monthlySchedule&#34;, example.applyValue(getSnapshotPolicyResult -&gt; getSnapshotPolicyResult.monthlySchedules()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetSnapshotPolicyResult> getSnapshotPolicy(GetSnapshotPolicyArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("azure:netapp/getSnapshotPolicy:getSnapshotPolicy", TypeShape.of(GetSnapshotPolicyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Uses this data source to access information about an existing NetApp Snapshot Policy.
     * 
     * ## NetApp Snapshot Policy Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azure.netapp.NetappFunctions;
     * import com.pulumi.azure.netapp.inputs.GetSnapshotPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NetappFunctions.getSnapshotPolicy(GetSnapshotPolicyArgs.builder()
     *             .resourceGroupName(&#34;acctestRG&#34;)
     *             .accountName(&#34;acctestnetappaccount&#34;)
     *             .name(&#34;example-snapshot-policy&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;id&#34;, example.applyValue(getSnapshotPolicyResult -&gt; getSnapshotPolicyResult.id()));
     *         ctx.export(&#34;name&#34;, example.applyValue(getSnapshotPolicyResult -&gt; getSnapshotPolicyResult.name()));
     *         ctx.export(&#34;enabled&#34;, example.applyValue(getSnapshotPolicyResult -&gt; getSnapshotPolicyResult.enabled()));
     *         ctx.export(&#34;hourlySchedule&#34;, example.applyValue(getSnapshotPolicyResult -&gt; getSnapshotPolicyResult.hourlySchedules()));
     *         ctx.export(&#34;dailySchedule&#34;, example.applyValue(getSnapshotPolicyResult -&gt; getSnapshotPolicyResult.dailySchedules()));
     *         ctx.export(&#34;weeklySchedule&#34;, example.applyValue(getSnapshotPolicyResult -&gt; getSnapshotPolicyResult.weeklySchedules()));
     *         ctx.export(&#34;monthlySchedule&#34;, example.applyValue(getSnapshotPolicyResult -&gt; getSnapshotPolicyResult.monthlySchedules()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetSnapshotPolicyResult> getSnapshotPolicyPlain(GetSnapshotPolicyPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("azure:netapp/getSnapshotPolicy:getSnapshotPolicy", TypeShape.of(GetSnapshotPolicyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Uses this data source to access information about an existing NetApp Volume.
     * 
     * ## NetApp Volume Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azure.netapp.NetappFunctions;
     * import com.pulumi.azure.netapp.inputs.GetVolumeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NetappFunctions.getVolume(GetVolumeArgs.builder()
     *             .resourceGroupName(&#34;acctestRG&#34;)
     *             .accountName(&#34;acctestnetappaccount&#34;)
     *             .poolName(&#34;acctestnetapppool&#34;)
     *             .name(&#34;example-volume&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;netappVolumeId&#34;, example.applyValue(getVolumeResult -&gt; getVolumeResult.id()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetVolumeResult> getVolume(GetVolumeArgs args) {
        return getVolume(args, InvokeOptions.Empty);
    }
    /**
     * Uses this data source to access information about an existing NetApp Volume.
     * 
     * ## NetApp Volume Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azure.netapp.NetappFunctions;
     * import com.pulumi.azure.netapp.inputs.GetVolumeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NetappFunctions.getVolume(GetVolumeArgs.builder()
     *             .resourceGroupName(&#34;acctestRG&#34;)
     *             .accountName(&#34;acctestnetappaccount&#34;)
     *             .poolName(&#34;acctestnetapppool&#34;)
     *             .name(&#34;example-volume&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;netappVolumeId&#34;, example.applyValue(getVolumeResult -&gt; getVolumeResult.id()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetVolumeResult> getVolumePlain(GetVolumePlainArgs args) {
        return getVolumePlain(args, InvokeOptions.Empty);
    }
    /**
     * Uses this data source to access information about an existing NetApp Volume.
     * 
     * ## NetApp Volume Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azure.netapp.NetappFunctions;
     * import com.pulumi.azure.netapp.inputs.GetVolumeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NetappFunctions.getVolume(GetVolumeArgs.builder()
     *             .resourceGroupName(&#34;acctestRG&#34;)
     *             .accountName(&#34;acctestnetappaccount&#34;)
     *             .poolName(&#34;acctestnetapppool&#34;)
     *             .name(&#34;example-volume&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;netappVolumeId&#34;, example.applyValue(getVolumeResult -&gt; getVolumeResult.id()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetVolumeResult> getVolume(GetVolumeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("azure:netapp/getVolume:getVolume", TypeShape.of(GetVolumeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Uses this data source to access information about an existing NetApp Volume.
     * 
     * ## NetApp Volume Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azure.netapp.NetappFunctions;
     * import com.pulumi.azure.netapp.inputs.GetVolumeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = NetappFunctions.getVolume(GetVolumeArgs.builder()
     *             .resourceGroupName(&#34;acctestRG&#34;)
     *             .accountName(&#34;acctestnetappaccount&#34;)
     *             .poolName(&#34;acctestnetapppool&#34;)
     *             .name(&#34;example-volume&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;netappVolumeId&#34;, example.applyValue(getVolumeResult -&gt; getVolumeResult.id()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetVolumeResult> getVolumePlain(GetVolumePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("azure:netapp/getVolume:getVolume", TypeShape.of(GetVolumeResult.class), args, Utilities.withVersion(options));
    }
}
