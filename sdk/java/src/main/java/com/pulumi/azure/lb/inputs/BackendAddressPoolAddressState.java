// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.lb.inputs;

import com.pulumi.azure.lb.inputs.BackendAddressPoolAddressInboundNatRulePortMappingArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BackendAddressPoolAddressState extends com.pulumi.resources.ResourceArgs {

    public static final BackendAddressPoolAddressState Empty = new BackendAddressPoolAddressState();

    /**
     * The ip config ID of the regional load balancer that&#39;s added to the global load balancer&#39;s backend address pool.
     * 
     */
    @Import(name="backendAddressIpConfigurationId")
    private @Nullable Output<String> backendAddressIpConfigurationId;

    /**
     * @return The ip config ID of the regional load balancer that&#39;s added to the global load balancer&#39;s backend address pool.
     * 
     */
    public Optional<Output<String>> backendAddressIpConfigurationId() {
        return Optional.ofNullable(this.backendAddressIpConfigurationId);
    }

    /**
     * The ID of the Backend Address Pool. Changing this forces a new Backend Address Pool Address to be created.
     * 
     */
    @Import(name="backendAddressPoolId")
    private @Nullable Output<String> backendAddressPoolId;

    /**
     * @return The ID of the Backend Address Pool. Changing this forces a new Backend Address Pool Address to be created.
     * 
     */
    public Optional<Output<String>> backendAddressPoolId() {
        return Optional.ofNullable(this.backendAddressPoolId);
    }

    /**
     * A list of `inbound_nat_rule_port_mapping` block as defined below.
     * 
     */
    @Import(name="inboundNatRulePortMappings")
    private @Nullable Output<List<BackendAddressPoolAddressInboundNatRulePortMappingArgs>> inboundNatRulePortMappings;

    /**
     * @return A list of `inbound_nat_rule_port_mapping` block as defined below.
     * 
     */
    public Optional<Output<List<BackendAddressPoolAddressInboundNatRulePortMappingArgs>>> inboundNatRulePortMappings() {
        return Optional.ofNullable(this.inboundNatRulePortMappings);
    }

    /**
     * The Static IP Address which should be allocated to this Backend Address Pool.
     * 
     */
    @Import(name="ipAddress")
    private @Nullable Output<String> ipAddress;

    /**
     * @return The Static IP Address which should be allocated to this Backend Address Pool.
     * 
     */
    public Optional<Output<String>> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }

    /**
     * The name which should be used for this Backend Address Pool Address. Changing this forces a new Backend Address Pool Address to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name which should be used for this Backend Address Pool Address. Changing this forces a new Backend Address Pool Address to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the Virtual Network within which the Backend Address Pool should exist.
     * 
     */
    @Import(name="virtualNetworkId")
    private @Nullable Output<String> virtualNetworkId;

    /**
     * @return The ID of the Virtual Network within which the Backend Address Pool should exist.
     * 
     */
    public Optional<Output<String>> virtualNetworkId() {
        return Optional.ofNullable(this.virtualNetworkId);
    }

    private BackendAddressPoolAddressState() {}

    private BackendAddressPoolAddressState(BackendAddressPoolAddressState $) {
        this.backendAddressIpConfigurationId = $.backendAddressIpConfigurationId;
        this.backendAddressPoolId = $.backendAddressPoolId;
        this.inboundNatRulePortMappings = $.inboundNatRulePortMappings;
        this.ipAddress = $.ipAddress;
        this.name = $.name;
        this.virtualNetworkId = $.virtualNetworkId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackendAddressPoolAddressState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackendAddressPoolAddressState $;

        public Builder() {
            $ = new BackendAddressPoolAddressState();
        }

        public Builder(BackendAddressPoolAddressState defaults) {
            $ = new BackendAddressPoolAddressState(Objects.requireNonNull(defaults));
        }

        /**
         * @param backendAddressIpConfigurationId The ip config ID of the regional load balancer that&#39;s added to the global load balancer&#39;s backend address pool.
         * 
         * @return builder
         * 
         */
        public Builder backendAddressIpConfigurationId(@Nullable Output<String> backendAddressIpConfigurationId) {
            $.backendAddressIpConfigurationId = backendAddressIpConfigurationId;
            return this;
        }

        /**
         * @param backendAddressIpConfigurationId The ip config ID of the regional load balancer that&#39;s added to the global load balancer&#39;s backend address pool.
         * 
         * @return builder
         * 
         */
        public Builder backendAddressIpConfigurationId(String backendAddressIpConfigurationId) {
            return backendAddressIpConfigurationId(Output.of(backendAddressIpConfigurationId));
        }

        /**
         * @param backendAddressPoolId The ID of the Backend Address Pool. Changing this forces a new Backend Address Pool Address to be created.
         * 
         * @return builder
         * 
         */
        public Builder backendAddressPoolId(@Nullable Output<String> backendAddressPoolId) {
            $.backendAddressPoolId = backendAddressPoolId;
            return this;
        }

        /**
         * @param backendAddressPoolId The ID of the Backend Address Pool. Changing this forces a new Backend Address Pool Address to be created.
         * 
         * @return builder
         * 
         */
        public Builder backendAddressPoolId(String backendAddressPoolId) {
            return backendAddressPoolId(Output.of(backendAddressPoolId));
        }

        /**
         * @param inboundNatRulePortMappings A list of `inbound_nat_rule_port_mapping` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder inboundNatRulePortMappings(@Nullable Output<List<BackendAddressPoolAddressInboundNatRulePortMappingArgs>> inboundNatRulePortMappings) {
            $.inboundNatRulePortMappings = inboundNatRulePortMappings;
            return this;
        }

        /**
         * @param inboundNatRulePortMappings A list of `inbound_nat_rule_port_mapping` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder inboundNatRulePortMappings(List<BackendAddressPoolAddressInboundNatRulePortMappingArgs> inboundNatRulePortMappings) {
            return inboundNatRulePortMappings(Output.of(inboundNatRulePortMappings));
        }

        /**
         * @param inboundNatRulePortMappings A list of `inbound_nat_rule_port_mapping` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder inboundNatRulePortMappings(BackendAddressPoolAddressInboundNatRulePortMappingArgs... inboundNatRulePortMappings) {
            return inboundNatRulePortMappings(List.of(inboundNatRulePortMappings));
        }

        /**
         * @param ipAddress The Static IP Address which should be allocated to this Backend Address Pool.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(@Nullable Output<String> ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        /**
         * @param ipAddress The Static IP Address which should be allocated to this Backend Address Pool.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(String ipAddress) {
            return ipAddress(Output.of(ipAddress));
        }

        /**
         * @param name The name which should be used for this Backend Address Pool Address. Changing this forces a new Backend Address Pool Address to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this Backend Address Pool Address. Changing this forces a new Backend Address Pool Address to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param virtualNetworkId The ID of the Virtual Network within which the Backend Address Pool should exist.
         * 
         * @return builder
         * 
         */
        public Builder virtualNetworkId(@Nullable Output<String> virtualNetworkId) {
            $.virtualNetworkId = virtualNetworkId;
            return this;
        }

        /**
         * @param virtualNetworkId The ID of the Virtual Network within which the Backend Address Pool should exist.
         * 
         * @return builder
         * 
         */
        public Builder virtualNetworkId(String virtualNetworkId) {
            return virtualNetworkId(Output.of(virtualNetworkId));
        }

        public BackendAddressPoolAddressState build() {
            return $;
        }
    }

}
