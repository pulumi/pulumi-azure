// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.media.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class TransformOutputCustomPresetCodecH265VideoLayer {
    /**
     * @return Whether adaptive B-frames are used when encoding this layer. If not specified, the encoder will turn it on whenever the video profile permits its use. Default to `true`.`adaptive_b_frame_enabled` - (Optional) Whether adaptive B-frames are used when encoding this layer. If not specified, the encoder will turn it on whenever the video profile permits its use. Default to `true`.
     * 
     */
    private @Nullable Boolean adaptiveBFrameEnabled;
    /**
     * @return The number of B-frames to use when encoding this layer. If not specified, the encoder chooses an appropriate number based on the video profile and level.`b_frames` - (Optional) The number of B-frames to use when encoding this layer. If not specified, the encoder chooses an appropriate number based on the video profile and level.
     * 
     */
    private @Nullable Integer bFrames;
    /**
     * @return The bitrate of the audio in bits per second. Default to `128000`.
     * 
     */
    private Integer bitrate;
    /**
     * @return Specifies the maximum amount of time that the encoder should buffer frames before encoding. The value should be in ISO 8601 format. The value should be in the range `0.1` to `100` seconds. The default is `5` seconds (`PT5S`).`buffer_window` - (Optional) Specifies the maximum amount of time that the encoder should buffer frames before encoding. The value should be in ISO 8601 format. The value should be in the range `0.1` to `100` seconds. The default is `5` seconds (`PT5S`).
     * 
     */
    private @Nullable String bufferWindow;
    /**
     * @return The value of CRF to be used when encoding this layer. This setting takes effect when `rate_control_mode` is set `CRF`. The range of CRF value is between `0` and `51`, where lower values would result in better quality, at the expense of higher file sizes. Higher values mean more compression, but at some point quality degradation will be noticed. Default to `23`.`crf` - (Optional) The value of CRF to be used when encoding this layer. This setting takes effect when `rate_control_mode` is set `CRF`. The range of CRF value is between `0` and `51`, where lower values would result in better quality, at the expense of higher file sizes. Higher values mean more compression, but at some point quality degradation will be noticed. Default to `28`.
     * 
     */
    private @Nullable Double crf;
    /**
     * @return The frame rate (in frames per second) at which to encode this layer. The value can be in the form of `M/N` where `M` and `N` are integers (For example, `30000/1001`), or in the form of a number (For example, `30`, or `29.97`). The encoder enforces constraints on allowed frame rates based on the profile and level. If it is not specified, the encoder will use the same frame rate as the input video.`frame_rate` - (Optional)
     * The frame rate (in frames per second) at which to encode this layer. The value can be in the form of `M/N` where `M` and `N` are integers (For example, `30000/1001`), or in the form of a number (For example, `30`, or `29.97`). The encoder enforces constraints on allowed frame rates based on the profile and level. If it is not specified, the encoder will use the same frame rate as the input video.
     * 
     */
    private @Nullable String frameRate;
    /**
     * @return The height of the rectangular region in pixels. This can be absolute pixel value (e.g `100`), or relative to the size of the video (For example, `50%`).
     * 
     */
    private @Nullable String height;
    /**
     * @return Specifies the label for the codec. The label can be used to control muxing behavior.
     * 
     */
    private @Nullable String label;
    /**
     * @return The H.264 levels. Currently, the resource support Level up to `6.2`. The value can be `auto`, or a number that matches the H.264 profile. If not specified, the default is `auto`, which lets the encoder choose the Level that is appropriate for this layer.`level` - (Optional) The H.264 levels. Currently, the resource support Level up to `6.2`. The value can be `auto`, or a number that matches the H.264 profile. If not specified, the default is `auto`, which lets the encoder choose the Level that is appropriate for this layer.
     * 
     */
    private @Nullable String level;
    /**
     * @return The maximum bitrate (in bits per second), at which the VBV buffer should be assumed to refill. If not specified, defaults to the same value as bitrate.`max_bitrate` - (Optional) The maximum bitrate (in bits per second), at which the VBV buffer should be assumed to refill. If not specified, defaults to the same value as bitrate.
     * 
     */
    private @Nullable Integer maxBitrate;
    /**
     * @return The encoding profile to be used when encoding audio with AAC. Possible values are `AacLc`, `HeAacV1`,and `HeAacV2`. Default to `AacLc`.
     * 
     */
    private @Nullable String profile;
    /**
     * @return The number of reference frames to be used when encoding this layer. If not specified, the encoder determines an appropriate number based on the encoder complexity setting.`reference_frames` - (Optional) The number of reference frames to be used when encoding this layer. If not specified, the encoder determines an appropriate number based on the encoder complexity setting.
     * 
     */
    private @Nullable Integer referenceFrames;
    /**
     * @return The number of slices to be used when encoding this layer. If not specified, default is `1`, which means that encoder will use a single slice for each frame.`slices` - (Optional) The number of slices to be used when encoding this layer. If not specified, default is `1`, which means that encoder will use a single slice for each frame.
     * 
     */
    private @Nullable Integer slices;
    /**
     * @return The width of the rectangular region in pixels. This can be absolute pixel value (e.g`  100 `), or relative to the size of the video (For example, `50%`).
     * 
     */
    private @Nullable String width;

    private TransformOutputCustomPresetCodecH265VideoLayer() {}
    /**
     * @return Whether adaptive B-frames are used when encoding this layer. If not specified, the encoder will turn it on whenever the video profile permits its use. Default to `true`.`adaptive_b_frame_enabled` - (Optional) Whether adaptive B-frames are used when encoding this layer. If not specified, the encoder will turn it on whenever the video profile permits its use. Default to `true`.
     * 
     */
    public Optional<Boolean> adaptiveBFrameEnabled() {
        return Optional.ofNullable(this.adaptiveBFrameEnabled);
    }
    /**
     * @return The number of B-frames to use when encoding this layer. If not specified, the encoder chooses an appropriate number based on the video profile and level.`b_frames` - (Optional) The number of B-frames to use when encoding this layer. If not specified, the encoder chooses an appropriate number based on the video profile and level.
     * 
     */
    public Optional<Integer> bFrames() {
        return Optional.ofNullable(this.bFrames);
    }
    /**
     * @return The bitrate of the audio in bits per second. Default to `128000`.
     * 
     */
    public Integer bitrate() {
        return this.bitrate;
    }
    /**
     * @return Specifies the maximum amount of time that the encoder should buffer frames before encoding. The value should be in ISO 8601 format. The value should be in the range `0.1` to `100` seconds. The default is `5` seconds (`PT5S`).`buffer_window` - (Optional) Specifies the maximum amount of time that the encoder should buffer frames before encoding. The value should be in ISO 8601 format. The value should be in the range `0.1` to `100` seconds. The default is `5` seconds (`PT5S`).
     * 
     */
    public Optional<String> bufferWindow() {
        return Optional.ofNullable(this.bufferWindow);
    }
    /**
     * @return The value of CRF to be used when encoding this layer. This setting takes effect when `rate_control_mode` is set `CRF`. The range of CRF value is between `0` and `51`, where lower values would result in better quality, at the expense of higher file sizes. Higher values mean more compression, but at some point quality degradation will be noticed. Default to `23`.`crf` - (Optional) The value of CRF to be used when encoding this layer. This setting takes effect when `rate_control_mode` is set `CRF`. The range of CRF value is between `0` and `51`, where lower values would result in better quality, at the expense of higher file sizes. Higher values mean more compression, but at some point quality degradation will be noticed. Default to `28`.
     * 
     */
    public Optional<Double> crf() {
        return Optional.ofNullable(this.crf);
    }
    /**
     * @return The frame rate (in frames per second) at which to encode this layer. The value can be in the form of `M/N` where `M` and `N` are integers (For example, `30000/1001`), or in the form of a number (For example, `30`, or `29.97`). The encoder enforces constraints on allowed frame rates based on the profile and level. If it is not specified, the encoder will use the same frame rate as the input video.`frame_rate` - (Optional)
     * The frame rate (in frames per second) at which to encode this layer. The value can be in the form of `M/N` where `M` and `N` are integers (For example, `30000/1001`), or in the form of a number (For example, `30`, or `29.97`). The encoder enforces constraints on allowed frame rates based on the profile and level. If it is not specified, the encoder will use the same frame rate as the input video.
     * 
     */
    public Optional<String> frameRate() {
        return Optional.ofNullable(this.frameRate);
    }
    /**
     * @return The height of the rectangular region in pixels. This can be absolute pixel value (e.g `100`), or relative to the size of the video (For example, `50%`).
     * 
     */
    public Optional<String> height() {
        return Optional.ofNullable(this.height);
    }
    /**
     * @return Specifies the label for the codec. The label can be used to control muxing behavior.
     * 
     */
    public Optional<String> label() {
        return Optional.ofNullable(this.label);
    }
    /**
     * @return The H.264 levels. Currently, the resource support Level up to `6.2`. The value can be `auto`, or a number that matches the H.264 profile. If not specified, the default is `auto`, which lets the encoder choose the Level that is appropriate for this layer.`level` - (Optional) The H.264 levels. Currently, the resource support Level up to `6.2`. The value can be `auto`, or a number that matches the H.264 profile. If not specified, the default is `auto`, which lets the encoder choose the Level that is appropriate for this layer.
     * 
     */
    public Optional<String> level() {
        return Optional.ofNullable(this.level);
    }
    /**
     * @return The maximum bitrate (in bits per second), at which the VBV buffer should be assumed to refill. If not specified, defaults to the same value as bitrate.`max_bitrate` - (Optional) The maximum bitrate (in bits per second), at which the VBV buffer should be assumed to refill. If not specified, defaults to the same value as bitrate.
     * 
     */
    public Optional<Integer> maxBitrate() {
        return Optional.ofNullable(this.maxBitrate);
    }
    /**
     * @return The encoding profile to be used when encoding audio with AAC. Possible values are `AacLc`, `HeAacV1`,and `HeAacV2`. Default to `AacLc`.
     * 
     */
    public Optional<String> profile() {
        return Optional.ofNullable(this.profile);
    }
    /**
     * @return The number of reference frames to be used when encoding this layer. If not specified, the encoder determines an appropriate number based on the encoder complexity setting.`reference_frames` - (Optional) The number of reference frames to be used when encoding this layer. If not specified, the encoder determines an appropriate number based on the encoder complexity setting.
     * 
     */
    public Optional<Integer> referenceFrames() {
        return Optional.ofNullable(this.referenceFrames);
    }
    /**
     * @return The number of slices to be used when encoding this layer. If not specified, default is `1`, which means that encoder will use a single slice for each frame.`slices` - (Optional) The number of slices to be used when encoding this layer. If not specified, default is `1`, which means that encoder will use a single slice for each frame.
     * 
     */
    public Optional<Integer> slices() {
        return Optional.ofNullable(this.slices);
    }
    /**
     * @return The width of the rectangular region in pixels. This can be absolute pixel value (e.g`  100 `), or relative to the size of the video (For example, `50%`).
     * 
     */
    public Optional<String> width() {
        return Optional.ofNullable(this.width);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TransformOutputCustomPresetCodecH265VideoLayer defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean adaptiveBFrameEnabled;
        private @Nullable Integer bFrames;
        private Integer bitrate;
        private @Nullable String bufferWindow;
        private @Nullable Double crf;
        private @Nullable String frameRate;
        private @Nullable String height;
        private @Nullable String label;
        private @Nullable String level;
        private @Nullable Integer maxBitrate;
        private @Nullable String profile;
        private @Nullable Integer referenceFrames;
        private @Nullable Integer slices;
        private @Nullable String width;
        public Builder() {}
        public Builder(TransformOutputCustomPresetCodecH265VideoLayer defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adaptiveBFrameEnabled = defaults.adaptiveBFrameEnabled;
    	      this.bFrames = defaults.bFrames;
    	      this.bitrate = defaults.bitrate;
    	      this.bufferWindow = defaults.bufferWindow;
    	      this.crf = defaults.crf;
    	      this.frameRate = defaults.frameRate;
    	      this.height = defaults.height;
    	      this.label = defaults.label;
    	      this.level = defaults.level;
    	      this.maxBitrate = defaults.maxBitrate;
    	      this.profile = defaults.profile;
    	      this.referenceFrames = defaults.referenceFrames;
    	      this.slices = defaults.slices;
    	      this.width = defaults.width;
        }

        @CustomType.Setter
        public Builder adaptiveBFrameEnabled(@Nullable Boolean adaptiveBFrameEnabled) {
            this.adaptiveBFrameEnabled = adaptiveBFrameEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder bFrames(@Nullable Integer bFrames) {
            this.bFrames = bFrames;
            return this;
        }
        @CustomType.Setter
        public Builder bitrate(Integer bitrate) {
            this.bitrate = Objects.requireNonNull(bitrate);
            return this;
        }
        @CustomType.Setter
        public Builder bufferWindow(@Nullable String bufferWindow) {
            this.bufferWindow = bufferWindow;
            return this;
        }
        @CustomType.Setter
        public Builder crf(@Nullable Double crf) {
            this.crf = crf;
            return this;
        }
        @CustomType.Setter
        public Builder frameRate(@Nullable String frameRate) {
            this.frameRate = frameRate;
            return this;
        }
        @CustomType.Setter
        public Builder height(@Nullable String height) {
            this.height = height;
            return this;
        }
        @CustomType.Setter
        public Builder label(@Nullable String label) {
            this.label = label;
            return this;
        }
        @CustomType.Setter
        public Builder level(@Nullable String level) {
            this.level = level;
            return this;
        }
        @CustomType.Setter
        public Builder maxBitrate(@Nullable Integer maxBitrate) {
            this.maxBitrate = maxBitrate;
            return this;
        }
        @CustomType.Setter
        public Builder profile(@Nullable String profile) {
            this.profile = profile;
            return this;
        }
        @CustomType.Setter
        public Builder referenceFrames(@Nullable Integer referenceFrames) {
            this.referenceFrames = referenceFrames;
            return this;
        }
        @CustomType.Setter
        public Builder slices(@Nullable Integer slices) {
            this.slices = slices;
            return this;
        }
        @CustomType.Setter
        public Builder width(@Nullable String width) {
            this.width = width;
            return this;
        }
        public TransformOutputCustomPresetCodecH265VideoLayer build() {
            final var _resultValue = new TransformOutputCustomPresetCodecH265VideoLayer();
            _resultValue.adaptiveBFrameEnabled = adaptiveBFrameEnabled;
            _resultValue.bFrames = bFrames;
            _resultValue.bitrate = bitrate;
            _resultValue.bufferWindow = bufferWindow;
            _resultValue.crf = crf;
            _resultValue.frameRate = frameRate;
            _resultValue.height = height;
            _resultValue.label = label;
            _resultValue.level = level;
            _resultValue.maxBitrate = maxBitrate;
            _resultValue.profile = profile;
            _resultValue.referenceFrames = referenceFrames;
            _resultValue.slices = slices;
            _resultValue.width = width;
            return _resultValue;
        }
    }
}
