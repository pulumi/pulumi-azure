// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.batch.inputs;

import com.pulumi.azure.batch.inputs.PoolNetworkConfigurationEndpointConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PoolNetworkConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final PoolNetworkConfigurationArgs Empty = new PoolNetworkConfigurationArgs();

    /**
     * A list of inbound NAT pools that can be used to address specific ports on an individual compute node externally. Set as documented in the inbound_nat_pools block below. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="endpointConfigurations")
    private @Nullable Output<List<PoolNetworkConfigurationEndpointConfigurationArgs>> endpointConfigurations;

    /**
     * @return A list of inbound NAT pools that can be used to address specific ports on an individual compute node externally. Set as documented in the inbound_nat_pools block below. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<List<PoolNetworkConfigurationEndpointConfigurationArgs>>> endpointConfigurations() {
        return Optional.ofNullable(this.endpointConfigurations);
    }

    /**
     * Type of public IP address provisioning. Supported values are `BatchManaged`, `UserManaged` and `NoPublicIPAddresses`.
     * 
     */
    @Import(name="publicAddressProvisioningType")
    private @Nullable Output<String> publicAddressProvisioningType;

    /**
     * @return Type of public IP address provisioning. Supported values are `BatchManaged`, `UserManaged` and `NoPublicIPAddresses`.
     * 
     */
    public Optional<Output<String>> publicAddressProvisioningType() {
        return Optional.ofNullable(this.publicAddressProvisioningType);
    }

    /**
     * A list of public IP ids that will be allocated to nodes. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="publicIps")
    private @Nullable Output<List<String>> publicIps;

    /**
     * @return A list of public IP ids that will be allocated to nodes. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<List<String>>> publicIps() {
        return Optional.ofNullable(this.publicIps);
    }

    /**
     * The ARM resource identifier of the virtual network subnet which the compute nodes of the pool will join. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="subnetId", required=true)
    private Output<String> subnetId;

    /**
     * @return The ARM resource identifier of the virtual network subnet which the compute nodes of the pool will join. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> subnetId() {
        return this.subnetId;
    }

    private PoolNetworkConfigurationArgs() {}

    private PoolNetworkConfigurationArgs(PoolNetworkConfigurationArgs $) {
        this.endpointConfigurations = $.endpointConfigurations;
        this.publicAddressProvisioningType = $.publicAddressProvisioningType;
        this.publicIps = $.publicIps;
        this.subnetId = $.subnetId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PoolNetworkConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PoolNetworkConfigurationArgs $;

        public Builder() {
            $ = new PoolNetworkConfigurationArgs();
        }

        public Builder(PoolNetworkConfigurationArgs defaults) {
            $ = new PoolNetworkConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param endpointConfigurations A list of inbound NAT pools that can be used to address specific ports on an individual compute node externally. Set as documented in the inbound_nat_pools block below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder endpointConfigurations(@Nullable Output<List<PoolNetworkConfigurationEndpointConfigurationArgs>> endpointConfigurations) {
            $.endpointConfigurations = endpointConfigurations;
            return this;
        }

        /**
         * @param endpointConfigurations A list of inbound NAT pools that can be used to address specific ports on an individual compute node externally. Set as documented in the inbound_nat_pools block below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder endpointConfigurations(List<PoolNetworkConfigurationEndpointConfigurationArgs> endpointConfigurations) {
            return endpointConfigurations(Output.of(endpointConfigurations));
        }

        /**
         * @param endpointConfigurations A list of inbound NAT pools that can be used to address specific ports on an individual compute node externally. Set as documented in the inbound_nat_pools block below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder endpointConfigurations(PoolNetworkConfigurationEndpointConfigurationArgs... endpointConfigurations) {
            return endpointConfigurations(List.of(endpointConfigurations));
        }

        /**
         * @param publicAddressProvisioningType Type of public IP address provisioning. Supported values are `BatchManaged`, `UserManaged` and `NoPublicIPAddresses`.
         * 
         * @return builder
         * 
         */
        public Builder publicAddressProvisioningType(@Nullable Output<String> publicAddressProvisioningType) {
            $.publicAddressProvisioningType = publicAddressProvisioningType;
            return this;
        }

        /**
         * @param publicAddressProvisioningType Type of public IP address provisioning. Supported values are `BatchManaged`, `UserManaged` and `NoPublicIPAddresses`.
         * 
         * @return builder
         * 
         */
        public Builder publicAddressProvisioningType(String publicAddressProvisioningType) {
            return publicAddressProvisioningType(Output.of(publicAddressProvisioningType));
        }

        /**
         * @param publicIps A list of public IP ids that will be allocated to nodes. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder publicIps(@Nullable Output<List<String>> publicIps) {
            $.publicIps = publicIps;
            return this;
        }

        /**
         * @param publicIps A list of public IP ids that will be allocated to nodes. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder publicIps(List<String> publicIps) {
            return publicIps(Output.of(publicIps));
        }

        /**
         * @param publicIps A list of public IP ids that will be allocated to nodes. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder publicIps(String... publicIps) {
            return publicIps(List.of(publicIps));
        }

        /**
         * @param subnetId The ARM resource identifier of the virtual network subnet which the compute nodes of the pool will join. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        /**
         * @param subnetId The ARM resource identifier of the virtual network subnet which the compute nodes of the pool will join. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        public PoolNetworkConfigurationArgs build() {
            $.subnetId = Objects.requireNonNull($.subnetId, "expected parameter 'subnetId' to be non-null");
            return $;
        }
    }

}
