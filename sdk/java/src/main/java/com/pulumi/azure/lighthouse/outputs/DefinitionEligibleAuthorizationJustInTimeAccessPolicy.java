// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.lighthouse.outputs;

import com.pulumi.azure.lighthouse.outputs.DefinitionEligibleAuthorizationJustInTimeAccessPolicyApprover;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DefinitionEligibleAuthorizationJustInTimeAccessPolicy {
    /**
     * @return An `approver` block as defined below.
     * 
     */
    private @Nullable List<DefinitionEligibleAuthorizationJustInTimeAccessPolicyApprover> approvers;
    /**
     * @return The maximum access duration in ISO 8601 format for just-in-time access requests. Defaults to `PT8H`.
     * 
     */
    private @Nullable String maximumActivationDuration;
    /**
     * @return The multi-factor authorization provider to be used for just-in-time access requests. Possible value is `Azure`.
     * 
     * &gt; **Note:** When this property isn&#39;t set, it would be set to `None`.
     * 
     */
    private @Nullable String multiFactorAuthProvider;

    private DefinitionEligibleAuthorizationJustInTimeAccessPolicy() {}
    /**
     * @return An `approver` block as defined below.
     * 
     */
    public List<DefinitionEligibleAuthorizationJustInTimeAccessPolicyApprover> approvers() {
        return this.approvers == null ? List.of() : this.approvers;
    }
    /**
     * @return The maximum access duration in ISO 8601 format for just-in-time access requests. Defaults to `PT8H`.
     * 
     */
    public Optional<String> maximumActivationDuration() {
        return Optional.ofNullable(this.maximumActivationDuration);
    }
    /**
     * @return The multi-factor authorization provider to be used for just-in-time access requests. Possible value is `Azure`.
     * 
     * &gt; **Note:** When this property isn&#39;t set, it would be set to `None`.
     * 
     */
    public Optional<String> multiFactorAuthProvider() {
        return Optional.ofNullable(this.multiFactorAuthProvider);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DefinitionEligibleAuthorizationJustInTimeAccessPolicy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<DefinitionEligibleAuthorizationJustInTimeAccessPolicyApprover> approvers;
        private @Nullable String maximumActivationDuration;
        private @Nullable String multiFactorAuthProvider;
        public Builder() {}
        public Builder(DefinitionEligibleAuthorizationJustInTimeAccessPolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.approvers = defaults.approvers;
    	      this.maximumActivationDuration = defaults.maximumActivationDuration;
    	      this.multiFactorAuthProvider = defaults.multiFactorAuthProvider;
        }

        @CustomType.Setter
        public Builder approvers(@Nullable List<DefinitionEligibleAuthorizationJustInTimeAccessPolicyApprover> approvers) {

            this.approvers = approvers;
            return this;
        }
        public Builder approvers(DefinitionEligibleAuthorizationJustInTimeAccessPolicyApprover... approvers) {
            return approvers(List.of(approvers));
        }
        @CustomType.Setter
        public Builder maximumActivationDuration(@Nullable String maximumActivationDuration) {

            this.maximumActivationDuration = maximumActivationDuration;
            return this;
        }
        @CustomType.Setter
        public Builder multiFactorAuthProvider(@Nullable String multiFactorAuthProvider) {

            this.multiFactorAuthProvider = multiFactorAuthProvider;
            return this;
        }
        public DefinitionEligibleAuthorizationJustInTimeAccessPolicy build() {
            final var _resultValue = new DefinitionEligibleAuthorizationJustInTimeAccessPolicy();
            _resultValue.approvers = approvers;
            _resultValue.maximumActivationDuration = maximumActivationDuration;
            _resultValue.multiFactorAuthProvider = multiFactorAuthProvider;
            return _resultValue;
        }
    }
}
