// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.recoveryservices.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class VaultEncryption {
    /**
     * @return Enabling/Disabling the Double Encryption state.
     * 
     */
    private Boolean infrastructureEncryptionEnabled;
    /**
     * @return The Key Vault key id used to encrypt this vault. Key managed by Vault Managed Hardware Security Module is also supported.
     * 
     */
    private String keyId;
    /**
     * @return Indicate that system assigned identity should be used or not. Defaults to `true`.
     * 
     * !&gt; **Note:** `use_system_assigned_identity` only be able to set to `false` for **new** vaults. Any vaults containing existing items registered or attempted to be registered to it are not supported. Details can be found in [the document](https://learn.microsoft.com/en-us/azure/backup/encryption-at-rest-with-cmk?tabs=portal#before-you-start)
     * 
     * !&gt; **Note:** Once `infrastructure_encryption_enabled` has been set it&#39;s not possible to change it.
     * 
     */
    private @Nullable Boolean useSystemAssignedIdentity;
    /**
     * @return Specifies the user assigned identity ID to be used.
     * 
     */
    private @Nullable String userAssignedIdentityId;

    private VaultEncryption() {}
    /**
     * @return Enabling/Disabling the Double Encryption state.
     * 
     */
    public Boolean infrastructureEncryptionEnabled() {
        return this.infrastructureEncryptionEnabled;
    }
    /**
     * @return The Key Vault key id used to encrypt this vault. Key managed by Vault Managed Hardware Security Module is also supported.
     * 
     */
    public String keyId() {
        return this.keyId;
    }
    /**
     * @return Indicate that system assigned identity should be used or not. Defaults to `true`.
     * 
     * !&gt; **Note:** `use_system_assigned_identity` only be able to set to `false` for **new** vaults. Any vaults containing existing items registered or attempted to be registered to it are not supported. Details can be found in [the document](https://learn.microsoft.com/en-us/azure/backup/encryption-at-rest-with-cmk?tabs=portal#before-you-start)
     * 
     * !&gt; **Note:** Once `infrastructure_encryption_enabled` has been set it&#39;s not possible to change it.
     * 
     */
    public Optional<Boolean> useSystemAssignedIdentity() {
        return Optional.ofNullable(this.useSystemAssignedIdentity);
    }
    /**
     * @return Specifies the user assigned identity ID to be used.
     * 
     */
    public Optional<String> userAssignedIdentityId() {
        return Optional.ofNullable(this.userAssignedIdentityId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VaultEncryption defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean infrastructureEncryptionEnabled;
        private String keyId;
        private @Nullable Boolean useSystemAssignedIdentity;
        private @Nullable String userAssignedIdentityId;
        public Builder() {}
        public Builder(VaultEncryption defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.infrastructureEncryptionEnabled = defaults.infrastructureEncryptionEnabled;
    	      this.keyId = defaults.keyId;
    	      this.useSystemAssignedIdentity = defaults.useSystemAssignedIdentity;
    	      this.userAssignedIdentityId = defaults.userAssignedIdentityId;
        }

        @CustomType.Setter
        public Builder infrastructureEncryptionEnabled(Boolean infrastructureEncryptionEnabled) {
            if (infrastructureEncryptionEnabled == null) {
              throw new MissingRequiredPropertyException("VaultEncryption", "infrastructureEncryptionEnabled");
            }
            this.infrastructureEncryptionEnabled = infrastructureEncryptionEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder keyId(String keyId) {
            if (keyId == null) {
              throw new MissingRequiredPropertyException("VaultEncryption", "keyId");
            }
            this.keyId = keyId;
            return this;
        }
        @CustomType.Setter
        public Builder useSystemAssignedIdentity(@Nullable Boolean useSystemAssignedIdentity) {

            this.useSystemAssignedIdentity = useSystemAssignedIdentity;
            return this;
        }
        @CustomType.Setter
        public Builder userAssignedIdentityId(@Nullable String userAssignedIdentityId) {

            this.userAssignedIdentityId = userAssignedIdentityId;
            return this;
        }
        public VaultEncryption build() {
            final var _resultValue = new VaultEncryption();
            _resultValue.infrastructureEncryptionEnabled = infrastructureEncryptionEnabled;
            _resultValue.keyId = keyId;
            _resultValue.useSystemAssignedIdentity = useSystemAssignedIdentity;
            _resultValue.userAssignedIdentityId = userAssignedIdentityId;
            return _resultValue;
        }
    }
}
