// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.compute.outputs;

import com.pulumi.azure.compute.outputs.GetManagedDiskEncryptionSettingDiskEncryptionKey;
import com.pulumi.azure.compute.outputs.GetManagedDiskEncryptionSettingKeyEncryptionKey;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetManagedDiskEncryptionSetting {
    /**
     * @return A `disk_encryption_key` block as defined above.
     * 
     */
    private List<GetManagedDiskEncryptionSettingDiskEncryptionKey> diskEncryptionKeys;
    private Boolean enabled;
    /**
     * @return A `key_encryption_key` block as defined below.
     * 
     */
    private List<GetManagedDiskEncryptionSettingKeyEncryptionKey> keyEncryptionKeys;

    private GetManagedDiskEncryptionSetting() {}
    /**
     * @return A `disk_encryption_key` block as defined above.
     * 
     */
    public List<GetManagedDiskEncryptionSettingDiskEncryptionKey> diskEncryptionKeys() {
        return this.diskEncryptionKeys;
    }
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return A `key_encryption_key` block as defined below.
     * 
     */
    public List<GetManagedDiskEncryptionSettingKeyEncryptionKey> keyEncryptionKeys() {
        return this.keyEncryptionKeys;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedDiskEncryptionSetting defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetManagedDiskEncryptionSettingDiskEncryptionKey> diskEncryptionKeys;
        private Boolean enabled;
        private List<GetManagedDiskEncryptionSettingKeyEncryptionKey> keyEncryptionKeys;
        public Builder() {}
        public Builder(GetManagedDiskEncryptionSetting defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.diskEncryptionKeys = defaults.diskEncryptionKeys;
    	      this.enabled = defaults.enabled;
    	      this.keyEncryptionKeys = defaults.keyEncryptionKeys;
        }

        @CustomType.Setter
        public Builder diskEncryptionKeys(List<GetManagedDiskEncryptionSettingDiskEncryptionKey> diskEncryptionKeys) {
            if (diskEncryptionKeys == null) {
              throw new MissingRequiredPropertyException("GetManagedDiskEncryptionSetting", "diskEncryptionKeys");
            }
            this.diskEncryptionKeys = diskEncryptionKeys;
            return this;
        }
        public Builder diskEncryptionKeys(GetManagedDiskEncryptionSettingDiskEncryptionKey... diskEncryptionKeys) {
            return diskEncryptionKeys(List.of(diskEncryptionKeys));
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetManagedDiskEncryptionSetting", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder keyEncryptionKeys(List<GetManagedDiskEncryptionSettingKeyEncryptionKey> keyEncryptionKeys) {
            if (keyEncryptionKeys == null) {
              throw new MissingRequiredPropertyException("GetManagedDiskEncryptionSetting", "keyEncryptionKeys");
            }
            this.keyEncryptionKeys = keyEncryptionKeys;
            return this;
        }
        public Builder keyEncryptionKeys(GetManagedDiskEncryptionSettingKeyEncryptionKey... keyEncryptionKeys) {
            return keyEncryptionKeys(List.of(keyEncryptionKeys));
        }
        public GetManagedDiskEncryptionSetting build() {
            final var _resultValue = new GetManagedDiskEncryptionSetting();
            _resultValue.diskEncryptionKeys = diskEncryptionKeys;
            _resultValue.enabled = enabled;
            _resultValue.keyEncryptionKeys = keyEncryptionKeys;
            return _resultValue;
        }
    }
}
