// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.sql;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.sql.FailoverGroupArgs;
import com.pulumi.azure.sql.inputs.FailoverGroupState;
import com.pulumi.azure.sql.outputs.FailoverGroupPartnerServer;
import com.pulumi.azure.sql.outputs.FailoverGroupReadWriteEndpointFailoverPolicy;
import com.pulumi.azure.sql.outputs.FailoverGroupReadonlyEndpointFailoverPolicy;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Create a failover group of databases on a collection of Azure SQL servers.
 * 
 * &gt; **Note:** The `azure.sql.FailoverGroup` resource is deprecated in version 3.0 of the AzureRM provider and will be removed in version 4.0. Please use the `azure.mssql.FailoverGroup` resource instead.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.sql.SqlServer;
 * import com.pulumi.azure.sql.SqlServerArgs;
 * import com.pulumi.azure.sql.Database;
 * import com.pulumi.azure.sql.DatabaseArgs;
 * import com.pulumi.azure.sql.FailoverGroup;
 * import com.pulumi.azure.sql.FailoverGroupArgs;
 * import com.pulumi.azure.sql.inputs.FailoverGroupPartnerServerArgs;
 * import com.pulumi.azure.sql.inputs.FailoverGroupReadWriteEndpointFailoverPolicyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampleResourceGroup = new ResourceGroup(&#34;exampleResourceGroup&#34;, ResourceGroupArgs.builder()        
 *             .location(&#34;West Europe&#34;)
 *             .build());
 * 
 *         var primary = new SqlServer(&#34;primary&#34;, SqlServerArgs.builder()        
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .location(exampleResourceGroup.location())
 *             .version(&#34;12.0&#34;)
 *             .administratorLogin(&#34;sqladmin&#34;)
 *             .administratorLoginPassword(&#34;pa$$w0rd&#34;)
 *             .build());
 * 
 *         var secondary = new SqlServer(&#34;secondary&#34;, SqlServerArgs.builder()        
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .location(exampleResourceGroup.location())
 *             .version(&#34;12.0&#34;)
 *             .administratorLogin(&#34;sqladmin&#34;)
 *             .administratorLoginPassword(&#34;pa$$w0rd&#34;)
 *             .build());
 * 
 *         var db1 = new Database(&#34;db1&#34;, DatabaseArgs.builder()        
 *             .resourceGroupName(primary.resourceGroupName())
 *             .location(primary.location())
 *             .serverName(primary.name())
 *             .build());
 * 
 *         var exampleFailoverGroup = new FailoverGroup(&#34;exampleFailoverGroup&#34;, FailoverGroupArgs.builder()        
 *             .resourceGroupName(primary.resourceGroupName())
 *             .serverName(primary.name())
 *             .databases(db1.id())
 *             .partnerServers(FailoverGroupPartnerServerArgs.builder()
 *                 .id(secondary.id())
 *                 .build())
 *             .readWriteEndpointFailoverPolicy(FailoverGroupReadWriteEndpointFailoverPolicyArgs.builder()
 *                 .mode(&#34;Automatic&#34;)
 *                 .graceMinutes(60)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * SQL Failover Groups can be imported using the `resource id`, e.g.
 * 
 * ```sh
 *  $ pulumi import azure:sql/failoverGroup:FailoverGroup example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myresourcegroup/providers/Microsoft.Sql/servers/myserver/failoverGroups/group1
 * ```
 * 
 */
@ResourceType(type="azure:sql/failoverGroup:FailoverGroup")
public class FailoverGroup extends com.pulumi.resources.CustomResource {
    /**
     * A list of database ids to add to the failover group
     * 
     * &gt; **NOTE:** The failover group will create a secondary database for each database listed in `databases`. If the secondary databases need to be managed through this provider, they should be defined as resources and a dependency added to the failover group to ensure the secondary databases are created first.
     * 
     */
    @Export(name="databases", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> databases;

    /**
     * @return A list of database ids to add to the failover group
     * 
     * &gt; **NOTE:** The failover group will create a secondary database for each database listed in `databases`. If the secondary databases need to be managed through this provider, they should be defined as resources and a dependency added to the failover group to ensure the secondary databases are created first.
     * 
     */
    public Output<Optional<List<String>>> databases() {
        return Codegen.optional(this.databases);
    }
    /**
     * the location of the failover group.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return the location of the failover group.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * The name of the failover group. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the failover group. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * A list of `partner_servers` blocks as documented below.
     * 
     */
    @Export(name="partnerServers", refs={List.class,FailoverGroupPartnerServer.class}, tree="[0,1]")
    private Output<List<FailoverGroupPartnerServer>> partnerServers;

    /**
     * @return A list of `partner_servers` blocks as documented below.
     * 
     */
    public Output<List<FailoverGroupPartnerServer>> partnerServers() {
        return this.partnerServers;
    }
    /**
     * A `read_write_endpoint_failover_policy` block as documented below.
     * 
     */
    @Export(name="readWriteEndpointFailoverPolicy", refs={FailoverGroupReadWriteEndpointFailoverPolicy.class}, tree="[0]")
    private Output<FailoverGroupReadWriteEndpointFailoverPolicy> readWriteEndpointFailoverPolicy;

    /**
     * @return A `read_write_endpoint_failover_policy` block as documented below.
     * 
     */
    public Output<FailoverGroupReadWriteEndpointFailoverPolicy> readWriteEndpointFailoverPolicy() {
        return this.readWriteEndpointFailoverPolicy;
    }
    /**
     * A `readonly_endpoint_failover_policy` block as documented below.
     * 
     */
    @Export(name="readonlyEndpointFailoverPolicy", refs={FailoverGroupReadonlyEndpointFailoverPolicy.class}, tree="[0]")
    private Output<FailoverGroupReadonlyEndpointFailoverPolicy> readonlyEndpointFailoverPolicy;

    /**
     * @return A `readonly_endpoint_failover_policy` block as documented below.
     * 
     */
    public Output<FailoverGroupReadonlyEndpointFailoverPolicy> readonlyEndpointFailoverPolicy() {
        return this.readonlyEndpointFailoverPolicy;
    }
    /**
     * The name of the resource group containing the SQL server Changing this forces a new resource to be created.
     * 
     */
    @Export(name="resourceGroupName", refs={String.class}, tree="[0]")
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group containing the SQL server Changing this forces a new resource to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * local replication role of the failover group instance.
     * 
     */
    @Export(name="role", refs={String.class}, tree="[0]")
    private Output<String> role;

    /**
     * @return local replication role of the failover group instance.
     * 
     */
    public Output<String> role() {
        return this.role;
    }
    /**
     * The name of the primary SQL server. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="serverName", refs={String.class}, tree="[0]")
    private Output<String> serverName;

    /**
     * @return The name of the primary SQL server. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> serverName() {
        return this.serverName;
    }
    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Export(name="tags", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> tags() {
        return Codegen.optional(this.tags);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public FailoverGroup(String name) {
        this(name, FailoverGroupArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public FailoverGroup(String name, FailoverGroupArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public FailoverGroup(String name, FailoverGroupArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:sql/failoverGroup:FailoverGroup", name, args == null ? FailoverGroupArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private FailoverGroup(String name, Output<String> id, @Nullable FailoverGroupState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:sql/failoverGroup:FailoverGroup", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static FailoverGroup get(String name, Output<String> id, @Nullable FailoverGroupState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new FailoverGroup(name, id, state, options);
    }
}
