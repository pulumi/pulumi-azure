// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.frontdoor.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FrontdoorBackendPoolBackendArgs extends com.pulumi.resources.ResourceArgs {

    public static final FrontdoorBackendPoolBackendArgs Empty = new FrontdoorBackendPoolBackendArgs();

    /**
     * Location of the backend (IP address or FQDN)
     * 
     */
    @Import(name="address", required=true)
    private Output<String> address;

    /**
     * @return Location of the backend (IP address or FQDN)
     * 
     */
    public Output<String> address() {
        return this.address;
    }

    /**
     * Specifies if the backend is enabled or not. Valid options are `true` or `false`. Defaults to `true`.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Specifies if the backend is enabled or not. Valid options are `true` or `false`. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The value to use as the host header sent to the backend.
     * 
     */
    @Import(name="hostHeader", required=true)
    private Output<String> hostHeader;

    /**
     * @return The value to use as the host header sent to the backend.
     * 
     */
    public Output<String> hostHeader() {
        return this.hostHeader;
    }

    /**
     * The HTTP TCP port number. Possible values are between `1` - `65535`.
     * 
     */
    @Import(name="httpPort", required=true)
    private Output<Integer> httpPort;

    /**
     * @return The HTTP TCP port number. Possible values are between `1` - `65535`.
     * 
     */
    public Output<Integer> httpPort() {
        return this.httpPort;
    }

    /**
     * The HTTPS TCP port number. Possible values are between `1` - `65535`.
     * 
     */
    @Import(name="httpsPort", required=true)
    private Output<Integer> httpsPort;

    /**
     * @return The HTTPS TCP port number. Possible values are between `1` - `65535`.
     * 
     */
    public Output<Integer> httpsPort() {
        return this.httpsPort;
    }

    /**
     * Priority to use for load balancing. Higher priorities will not be used for load balancing if any lower priority backend is healthy. Defaults to `1`.
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    /**
     * @return Priority to use for load balancing. Higher priorities will not be used for load balancing if any lower priority backend is healthy. Defaults to `1`.
     * 
     */
    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * Weight of this endpoint for load balancing purposes. Defaults to `50`.
     * 
     */
    @Import(name="weight")
    private @Nullable Output<Integer> weight;

    /**
     * @return Weight of this endpoint for load balancing purposes. Defaults to `50`.
     * 
     */
    public Optional<Output<Integer>> weight() {
        return Optional.ofNullable(this.weight);
    }

    private FrontdoorBackendPoolBackendArgs() {}

    private FrontdoorBackendPoolBackendArgs(FrontdoorBackendPoolBackendArgs $) {
        this.address = $.address;
        this.enabled = $.enabled;
        this.hostHeader = $.hostHeader;
        this.httpPort = $.httpPort;
        this.httpsPort = $.httpsPort;
        this.priority = $.priority;
        this.weight = $.weight;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FrontdoorBackendPoolBackendArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FrontdoorBackendPoolBackendArgs $;

        public Builder() {
            $ = new FrontdoorBackendPoolBackendArgs();
        }

        public Builder(FrontdoorBackendPoolBackendArgs defaults) {
            $ = new FrontdoorBackendPoolBackendArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param address Location of the backend (IP address or FQDN)
         * 
         * @return builder
         * 
         */
        public Builder address(Output<String> address) {
            $.address = address;
            return this;
        }

        /**
         * @param address Location of the backend (IP address or FQDN)
         * 
         * @return builder
         * 
         */
        public Builder address(String address) {
            return address(Output.of(address));
        }

        /**
         * @param enabled Specifies if the backend is enabled or not. Valid options are `true` or `false`. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Specifies if the backend is enabled or not. Valid options are `true` or `false`. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param hostHeader The value to use as the host header sent to the backend.
         * 
         * @return builder
         * 
         */
        public Builder hostHeader(Output<String> hostHeader) {
            $.hostHeader = hostHeader;
            return this;
        }

        /**
         * @param hostHeader The value to use as the host header sent to the backend.
         * 
         * @return builder
         * 
         */
        public Builder hostHeader(String hostHeader) {
            return hostHeader(Output.of(hostHeader));
        }

        /**
         * @param httpPort The HTTP TCP port number. Possible values are between `1` - `65535`.
         * 
         * @return builder
         * 
         */
        public Builder httpPort(Output<Integer> httpPort) {
            $.httpPort = httpPort;
            return this;
        }

        /**
         * @param httpPort The HTTP TCP port number. Possible values are between `1` - `65535`.
         * 
         * @return builder
         * 
         */
        public Builder httpPort(Integer httpPort) {
            return httpPort(Output.of(httpPort));
        }

        /**
         * @param httpsPort The HTTPS TCP port number. Possible values are between `1` - `65535`.
         * 
         * @return builder
         * 
         */
        public Builder httpsPort(Output<Integer> httpsPort) {
            $.httpsPort = httpsPort;
            return this;
        }

        /**
         * @param httpsPort The HTTPS TCP port number. Possible values are between `1` - `65535`.
         * 
         * @return builder
         * 
         */
        public Builder httpsPort(Integer httpsPort) {
            return httpsPort(Output.of(httpsPort));
        }

        /**
         * @param priority Priority to use for load balancing. Higher priorities will not be used for load balancing if any lower priority backend is healthy. Defaults to `1`.
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority Priority to use for load balancing. Higher priorities will not be used for load balancing if any lower priority backend is healthy. Defaults to `1`.
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param weight Weight of this endpoint for load balancing purposes. Defaults to `50`.
         * 
         * @return builder
         * 
         */
        public Builder weight(@Nullable Output<Integer> weight) {
            $.weight = weight;
            return this;
        }

        /**
         * @param weight Weight of this endpoint for load balancing purposes. Defaults to `50`.
         * 
         * @return builder
         * 
         */
        public Builder weight(Integer weight) {
            return weight(Output.of(weight));
        }

        public FrontdoorBackendPoolBackendArgs build() {
            if ($.address == null) {
                throw new MissingRequiredPropertyException("FrontdoorBackendPoolBackendArgs", "address");
            }
            if ($.hostHeader == null) {
                throw new MissingRequiredPropertyException("FrontdoorBackendPoolBackendArgs", "hostHeader");
            }
            if ($.httpPort == null) {
                throw new MissingRequiredPropertyException("FrontdoorBackendPoolBackendArgs", "httpPort");
            }
            if ($.httpsPort == null) {
                throw new MissingRequiredPropertyException("FrontdoorBackendPoolBackendArgs", "httpsPort");
            }
            return $;
        }
    }

}
