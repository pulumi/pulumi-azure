// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.logicapps.outputs;

import com.pulumi.azure.logicapps.outputs.WorkflowAccessControlAction;
import com.pulumi.azure.logicapps.outputs.WorkflowAccessControlContent;
import com.pulumi.azure.logicapps.outputs.WorkflowAccessControlTrigger;
import com.pulumi.azure.logicapps.outputs.WorkflowAccessControlWorkflowManagement;
import com.pulumi.core.annotations.CustomType;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class WorkflowAccessControl {
    /**
     * @return A `action` block as defined below.
     * 
     */
    private final @Nullable WorkflowAccessControlAction action;
    /**
     * @return A `content` block as defined below.
     * 
     */
    private final @Nullable WorkflowAccessControlContent content;
    /**
     * @return A `trigger` block as defined below.
     * 
     */
    private final @Nullable WorkflowAccessControlTrigger trigger;
    /**
     * @return A `workflow_management` block as defined below.
     * 
     */
    private final @Nullable WorkflowAccessControlWorkflowManagement workflowManagement;

    @CustomType.Constructor
    private WorkflowAccessControl(
        @CustomType.Parameter("action") @Nullable WorkflowAccessControlAction action,
        @CustomType.Parameter("content") @Nullable WorkflowAccessControlContent content,
        @CustomType.Parameter("trigger") @Nullable WorkflowAccessControlTrigger trigger,
        @CustomType.Parameter("workflowManagement") @Nullable WorkflowAccessControlWorkflowManagement workflowManagement) {
        this.action = action;
        this.content = content;
        this.trigger = trigger;
        this.workflowManagement = workflowManagement;
    }

    /**
     * @return A `action` block as defined below.
     * 
     */
    public Optional<WorkflowAccessControlAction> action() {
        return Optional.ofNullable(this.action);
    }
    /**
     * @return A `content` block as defined below.
     * 
     */
    public Optional<WorkflowAccessControlContent> content() {
        return Optional.ofNullable(this.content);
    }
    /**
     * @return A `trigger` block as defined below.
     * 
     */
    public Optional<WorkflowAccessControlTrigger> trigger() {
        return Optional.ofNullable(this.trigger);
    }
    /**
     * @return A `workflow_management` block as defined below.
     * 
     */
    public Optional<WorkflowAccessControlWorkflowManagement> workflowManagement() {
        return Optional.ofNullable(this.workflowManagement);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WorkflowAccessControl defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable WorkflowAccessControlAction action;
        private @Nullable WorkflowAccessControlContent content;
        private @Nullable WorkflowAccessControlTrigger trigger;
        private @Nullable WorkflowAccessControlWorkflowManagement workflowManagement;

        public Builder() {
    	      // Empty
        }

        public Builder(WorkflowAccessControl defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.content = defaults.content;
    	      this.trigger = defaults.trigger;
    	      this.workflowManagement = defaults.workflowManagement;
        }

        public Builder action(@Nullable WorkflowAccessControlAction action) {
            this.action = action;
            return this;
        }
        public Builder content(@Nullable WorkflowAccessControlContent content) {
            this.content = content;
            return this;
        }
        public Builder trigger(@Nullable WorkflowAccessControlTrigger trigger) {
            this.trigger = trigger;
            return this;
        }
        public Builder workflowManagement(@Nullable WorkflowAccessControlWorkflowManagement workflowManagement) {
            this.workflowManagement = workflowManagement;
            return this;
        }        public WorkflowAccessControl build() {
            return new WorkflowAccessControl(action, content, trigger, workflowManagement);
        }
    }
}
