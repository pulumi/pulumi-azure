// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.compute;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.compute.SharedImageVersionArgs;
import com.pulumi.azure.compute.inputs.SharedImageVersionState;
import com.pulumi.azure.compute.outputs.SharedImageVersionTargetRegion;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a Version of a Shared Image within a Shared Image Gallery.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.compute.ComputeFunctions;
 * import com.pulumi.azure.compute.inputs.GetImageArgs;
 * import com.pulumi.azure.compute.inputs.GetSharedImageArgs;
 * import com.pulumi.azure.compute.SharedImageVersion;
 * import com.pulumi.azure.compute.SharedImageVersionArgs;
 * import com.pulumi.azure.compute.inputs.SharedImageVersionTargetRegionArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var existingImage = ComputeFunctions.getImage(GetImageArgs.builder()
 *             .name(&#34;search-api&#34;)
 *             .resourceGroupName(&#34;packerimages&#34;)
 *             .build());
 * 
 *         final var existingSharedImage = ComputeFunctions.getSharedImage(GetSharedImageArgs.builder()
 *             .name(&#34;existing-image&#34;)
 *             .galleryName(&#34;existing_gallery&#34;)
 *             .resourceGroupName(&#34;existing-resources&#34;)
 *             .build());
 * 
 *         var example = new SharedImageVersion(&#34;example&#34;, SharedImageVersionArgs.builder()        
 *             .galleryName(existingSharedImage.applyValue(getSharedImageResult -&gt; getSharedImageResult.galleryName()))
 *             .imageName(existingSharedImage.applyValue(getSharedImageResult -&gt; getSharedImageResult.name()))
 *             .resourceGroupName(existingSharedImage.applyValue(getSharedImageResult -&gt; getSharedImageResult.resourceGroupName()))
 *             .location(existingSharedImage.applyValue(getSharedImageResult -&gt; getSharedImageResult.location()))
 *             .managedImageId(existingImage.applyValue(getImageResult -&gt; getImageResult.id()))
 *             .targetRegions(SharedImageVersionTargetRegionArgs.builder()
 *                 .name(existingSharedImage.applyValue(getSharedImageResult -&gt; getSharedImageResult.location()))
 *                 .regionalReplicaCount(5)
 *                 .storageAccountType(&#34;Standard_LRS&#34;)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Shared Image Versions can be imported using the `resource id`, e.g.
 * 
 * ```sh
 *  $ pulumi import azure:compute/sharedImageVersion:SharedImageVersion version /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Compute/galleries/gallery1/images/image1/versions/1.2.3
 * ```
 * 
 */
@ResourceType(type="azure:compute/sharedImageVersion:SharedImageVersion")
public class SharedImageVersion extends com.pulumi.resources.CustomResource {
    /**
     * URI of the Azure Storage Blob used to create the Image Version. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="blobUri", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> blobUri;

    /**
     * @return URI of the Azure Storage Blob used to create the Image Version. Changing this forces a new resource to be created.
     * 
     */
    public Output<Optional<String>> blobUri() {
        return Codegen.optional(this.blobUri);
    }
    /**
     * The end of life date in RFC3339 format of the Image Version.
     * 
     */
    @Export(name="endOfLifeDate", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> endOfLifeDate;

    /**
     * @return The end of life date in RFC3339 format of the Image Version.
     * 
     */
    public Output<Optional<String>> endOfLifeDate() {
        return Codegen.optional(this.endOfLifeDate);
    }
    /**
     * Should this Image Version be excluded from the `latest` filter? If set to `true` this Image Version won&#39;t be returned for the `latest` version. Defaults to `false`.
     * 
     */
    @Export(name="excludeFromLatest", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> excludeFromLatest;

    /**
     * @return Should this Image Version be excluded from the `latest` filter? If set to `true` this Image Version won&#39;t be returned for the `latest` version. Defaults to `false`.
     * 
     */
    public Output<Optional<Boolean>> excludeFromLatest() {
        return Codegen.optional(this.excludeFromLatest);
    }
    /**
     * The name of the Shared Image Gallery in which the Shared Image exists. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="galleryName", refs={String.class}, tree="[0]")
    private Output<String> galleryName;

    /**
     * @return The name of the Shared Image Gallery in which the Shared Image exists. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> galleryName() {
        return this.galleryName;
    }
    /**
     * The name of the Shared Image within the Shared Image Gallery in which this Version should be created. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="imageName", refs={String.class}, tree="[0]")
    private Output<String> imageName;

    /**
     * @return The name of the Shared Image within the Shared Image Gallery in which this Version should be created. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> imageName() {
        return this.imageName;
    }
    /**
     * The Azure Region in which the Shared Image Gallery exists. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return The Azure Region in which the Shared Image Gallery exists. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * The ID of the Managed Image or Virtual Machine ID which should be used for this Shared Image Version. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="managedImageId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> managedImageId;

    /**
     * @return The ID of the Managed Image or Virtual Machine ID which should be used for this Shared Image Version. Changing this forces a new resource to be created.
     * 
     */
    public Output<Optional<String>> managedImageId() {
        return Codegen.optional(this.managedImageId);
    }
    /**
     * The version number for this Image Version, such as `1.0.0`. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The version number for this Image Version, such as `1.0.0`. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the OS disk snapshot which should be used for this Shared Image Version. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="osDiskSnapshotId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> osDiskSnapshotId;

    /**
     * @return The ID of the OS disk snapshot which should be used for this Shared Image Version. Changing this forces a new resource to be created.
     * 
     */
    public Output<Optional<String>> osDiskSnapshotId() {
        return Codegen.optional(this.osDiskSnapshotId);
    }
    /**
     * Mode to be used for replication. Possible values are `Full` and `Shallow`. Defaults to `Full`. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="replicationMode", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> replicationMode;

    /**
     * @return Mode to be used for replication. Possible values are `Full` and `Shallow`. Defaults to `Full`. Changing this forces a new resource to be created.
     * 
     */
    public Output<Optional<String>> replicationMode() {
        return Codegen.optional(this.replicationMode);
    }
    /**
     * The name of the Resource Group in which the Shared Image Gallery exists. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="resourceGroupName", refs={String.class}, tree="[0]")
    private Output<String> resourceGroupName;

    /**
     * @return The name of the Resource Group in which the Shared Image Gallery exists. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * The ID of the Storage Account where the Blob exists. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="storageAccountId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> storageAccountId;

    /**
     * @return The ID of the Storage Account where the Blob exists. Changing this forces a new resource to be created.
     * 
     */
    public Output<Optional<String>> storageAccountId() {
        return Codegen.optional(this.storageAccountId);
    }
    /**
     * A collection of tags which should be applied to this resource.
     * 
     */
    @Export(name="tags", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return A collection of tags which should be applied to this resource.
     * 
     */
    public Output<Optional<Map<String,String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * One or more `target_region` blocks as documented below.
     * 
     */
    @Export(name="targetRegions", refs={List.class,SharedImageVersionTargetRegion.class}, tree="[0,1]")
    private Output<List<SharedImageVersionTargetRegion>> targetRegions;

    /**
     * @return One or more `target_region` blocks as documented below.
     * 
     */
    public Output<List<SharedImageVersionTargetRegion>> targetRegions() {
        return this.targetRegions;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public SharedImageVersion(String name) {
        this(name, SharedImageVersionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public SharedImageVersion(String name, SharedImageVersionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public SharedImageVersion(String name, SharedImageVersionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:compute/sharedImageVersion:SharedImageVersion", name, args == null ? SharedImageVersionArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private SharedImageVersion(String name, Output<String> id, @Nullable SharedImageVersionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:compute/sharedImageVersion:SharedImageVersion", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static SharedImageVersion get(String name, Output<String> id, @Nullable SharedImageVersionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new SharedImageVersion(name, id, state, options);
    }
}
