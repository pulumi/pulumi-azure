// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.privatelink.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetServiceEndpointConnectionsPrivateEndpointConnection {
    /**
     * @return A message indicating if changes on the service provider require any updates or not.
     * 
     */
    private final String actionRequired;
    /**
     * @return The resource id of the private link service connection between the private link service and the private link endpoint.
     * 
     */
    private final String connectionId;
    /**
     * @return The name of the connection between the private link service and the private link endpoint.
     * 
     */
    private final String connectionName;
    /**
     * @return The request for approval message or the reason for rejection message.
     * 
     */
    private final String description;
    /**
     * @return The resource id of the private link endpoint.
     * 
     */
    private final String privateEndpointId;
    /**
     * @return The name of the private link endpoint.
     * 
     */
    private final String privateEndpointName;
    /**
     * @return Indicates the state of the connection between the private link service and the private link endpoint, possible values are `Pending`, `Approved` or `Rejected`.
     * 
     */
    private final String status;

    @CustomType.Constructor
    private GetServiceEndpointConnectionsPrivateEndpointConnection(
        @CustomType.Parameter("actionRequired") String actionRequired,
        @CustomType.Parameter("connectionId") String connectionId,
        @CustomType.Parameter("connectionName") String connectionName,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("privateEndpointId") String privateEndpointId,
        @CustomType.Parameter("privateEndpointName") String privateEndpointName,
        @CustomType.Parameter("status") String status) {
        this.actionRequired = actionRequired;
        this.connectionId = connectionId;
        this.connectionName = connectionName;
        this.description = description;
        this.privateEndpointId = privateEndpointId;
        this.privateEndpointName = privateEndpointName;
        this.status = status;
    }

    /**
     * @return A message indicating if changes on the service provider require any updates or not.
     * 
     */
    public String actionRequired() {
        return this.actionRequired;
    }
    /**
     * @return The resource id of the private link service connection between the private link service and the private link endpoint.
     * 
     */
    public String connectionId() {
        return this.connectionId;
    }
    /**
     * @return The name of the connection between the private link service and the private link endpoint.
     * 
     */
    public String connectionName() {
        return this.connectionName;
    }
    /**
     * @return The request for approval message or the reason for rejection message.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The resource id of the private link endpoint.
     * 
     */
    public String privateEndpointId() {
        return this.privateEndpointId;
    }
    /**
     * @return The name of the private link endpoint.
     * 
     */
    public String privateEndpointName() {
        return this.privateEndpointName;
    }
    /**
     * @return Indicates the state of the connection between the private link service and the private link endpoint, possible values are `Pending`, `Approved` or `Rejected`.
     * 
     */
    public String status() {
        return this.status;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceEndpointConnectionsPrivateEndpointConnection defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String actionRequired;
        private String connectionId;
        private String connectionName;
        private String description;
        private String privateEndpointId;
        private String privateEndpointName;
        private String status;

        public Builder() {
    	      // Empty
        }

        public Builder(GetServiceEndpointConnectionsPrivateEndpointConnection defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.actionRequired = defaults.actionRequired;
    	      this.connectionId = defaults.connectionId;
    	      this.connectionName = defaults.connectionName;
    	      this.description = defaults.description;
    	      this.privateEndpointId = defaults.privateEndpointId;
    	      this.privateEndpointName = defaults.privateEndpointName;
    	      this.status = defaults.status;
        }

        public Builder actionRequired(String actionRequired) {
            this.actionRequired = Objects.requireNonNull(actionRequired);
            return this;
        }
        public Builder connectionId(String connectionId) {
            this.connectionId = Objects.requireNonNull(connectionId);
            return this;
        }
        public Builder connectionName(String connectionName) {
            this.connectionName = Objects.requireNonNull(connectionName);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder privateEndpointId(String privateEndpointId) {
            this.privateEndpointId = Objects.requireNonNull(privateEndpointId);
            return this;
        }
        public Builder privateEndpointName(String privateEndpointName) {
            this.privateEndpointName = Objects.requireNonNull(privateEndpointName);
            return this;
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }        public GetServiceEndpointConnectionsPrivateEndpointConnection build() {
            return new GetServiceEndpointConnectionsPrivateEndpointConnection(actionRequired, connectionId, connectionName, description, privateEndpointId, privateEndpointName, status);
        }
    }
}
