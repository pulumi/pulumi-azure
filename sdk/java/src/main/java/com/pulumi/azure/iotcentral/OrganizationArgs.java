// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.iotcentral;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OrganizationArgs extends com.pulumi.resources.ResourceArgs {

    public static final OrganizationArgs Empty = new OrganizationArgs();

    /**
     * Custom `displayName` for the organization.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return Custom `displayName` for the organization.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * The application `id`. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="iotcentralApplicationId", required=true)
    private Output<String> iotcentralApplicationId;

    /**
     * @return The application `id`. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> iotcentralApplicationId() {
        return this.iotcentralApplicationId;
    }

    /**
     * The ID of the organization. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="organizationId", required=true)
    private Output<String> organizationId;

    /**
     * @return The ID of the organization. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> organizationId() {
        return this.organizationId;
    }

    /**
     * The `organizationId` of the parent organization. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="parentOrganizationId")
    private @Nullable Output<String> parentOrganizationId;

    /**
     * @return The `organizationId` of the parent organization. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> parentOrganizationId() {
        return Optional.ofNullable(this.parentOrganizationId);
    }

    private OrganizationArgs() {}

    private OrganizationArgs(OrganizationArgs $) {
        this.displayName = $.displayName;
        this.iotcentralApplicationId = $.iotcentralApplicationId;
        this.organizationId = $.organizationId;
        this.parentOrganizationId = $.parentOrganizationId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OrganizationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OrganizationArgs $;

        public Builder() {
            $ = new OrganizationArgs();
        }

        public Builder(OrganizationArgs defaults) {
            $ = new OrganizationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param displayName Custom `displayName` for the organization.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Custom `displayName` for the organization.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param iotcentralApplicationId The application `id`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder iotcentralApplicationId(Output<String> iotcentralApplicationId) {
            $.iotcentralApplicationId = iotcentralApplicationId;
            return this;
        }

        /**
         * @param iotcentralApplicationId The application `id`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder iotcentralApplicationId(String iotcentralApplicationId) {
            return iotcentralApplicationId(Output.of(iotcentralApplicationId));
        }

        /**
         * @param organizationId The ID of the organization. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder organizationId(Output<String> organizationId) {
            $.organizationId = organizationId;
            return this;
        }

        /**
         * @param organizationId The ID of the organization. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder organizationId(String organizationId) {
            return organizationId(Output.of(organizationId));
        }

        /**
         * @param parentOrganizationId The `organizationId` of the parent organization. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder parentOrganizationId(@Nullable Output<String> parentOrganizationId) {
            $.parentOrganizationId = parentOrganizationId;
            return this;
        }

        /**
         * @param parentOrganizationId The `organizationId` of the parent organization. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder parentOrganizationId(String parentOrganizationId) {
            return parentOrganizationId(Output.of(parentOrganizationId));
        }

        public OrganizationArgs build() {
            if ($.displayName == null) {
                throw new MissingRequiredPropertyException("OrganizationArgs", "displayName");
            }
            if ($.iotcentralApplicationId == null) {
                throw new MissingRequiredPropertyException("OrganizationArgs", "iotcentralApplicationId");
            }
            if ($.organizationId == null) {
                throw new MissingRequiredPropertyException("OrganizationArgs", "organizationId");
            }
            return $;
        }
    }

}
