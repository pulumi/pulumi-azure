// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerservice.outputs;

import com.pulumi.azure.containerservice.outputs.KubernetesClusterNetworkProfileLoadBalancerProfile;
import com.pulumi.azure.containerservice.outputs.KubernetesClusterNetworkProfileNatGatewayProfile;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class KubernetesClusterNetworkProfile {
    /**
     * @return IP address within the Kubernetes service address range that will be used by cluster service discovery (kube-dns). Changing this forces a new resource to be created.
     * 
     */
    private @Nullable String dnsServiceIp;
    /**
     * @return IP address (in CIDR notation) used as the Docker bridge IP address on nodes. Changing this forces a new resource to be created.
     * 
     */
    private @Nullable String dockerBridgeCidr;
    /**
     * @return Specifies the eBPF data plane used for building the Kubernetes network. Possible value is `cilium`. Changing this forces a new resource to be created.
     * 
     */
    private @Nullable String ebpfDataPlane;
    /**
     * @return Specifies a list of IP versions the Kubernetes Cluster will use to assign IP addresses to its nodes and pods. Possible values are `IPv4` and/or `IPv6`. `IPv4` must always be specified. Changing this forces a new resource to be created.
     * 
     */
    private @Nullable List<String> ipVersions;
    /**
     * @return A `load_balancer_profile` block. This can only be specified when `load_balancer_sku` is set to `standard`.
     * 
     */
    private @Nullable KubernetesClusterNetworkProfileLoadBalancerProfile loadBalancerProfile;
    /**
     * @return Specifies the SKU of the Load Balancer used for this Kubernetes Cluster. Possible values are `basic` and `standard`. Defaults to `standard`. Changing this forces a new resource to be created.
     * 
     */
    private @Nullable String loadBalancerSku;
    /**
     * @return A `nat_gateway_profile` block. This can only be specified when `load_balancer_sku` is set to `standard` and `outbound_type` is set to `managedNATGateway` or `userAssignedNATGateway`.
     * 
     */
    private @Nullable KubernetesClusterNetworkProfileNatGatewayProfile natGatewayProfile;
    /**
     * @return Network mode to be used with Azure CNI. Possible values are `bridge` and `transparent`. Changing this forces a new resource to be created.
     * 
     */
    private @Nullable String networkMode;
    /**
     * @return Network plugin to use for networking. Currently supported values are `azure`, `kubenet` and `none`. Changing this forces a new resource to be created.
     * 
     */
    private String networkPlugin;
    /**
     * @return Specifies the network plugin mode used for building the Kubernetes network. Possible value is `overlay`. Changing this forces a new resource to be created.
     * 
     */
    private @Nullable String networkPluginMode;
    /**
     * @return Sets up network policy to be used with Azure CNI. [Network policy allows us to control the traffic flow between pods](https://docs.microsoft.com/azure/aks/use-network-policies). Currently supported values are `calico` and `azure`. Changing this forces a new resource to be created.
     * 
     */
    private @Nullable String networkPolicy;
    /**
     * @return The outbound (egress) routing method which should be used for this Kubernetes Cluster. Possible values are `loadBalancer`, `userDefinedRouting`, `managedNATGateway` and `userAssignedNATGateway`. Defaults to `loadBalancer`. Changing this forces a new resource to be created.
     * 
     */
    private @Nullable String outboundType;
    /**
     * @return The CIDR to use for pod IP addresses. This field can only be set when `network_plugin` is set to `kubenet`. Changing this forces a new resource to be created.
     * 
     */
    private @Nullable String podCidr;
    /**
     * @return A list of CIDRs to use for pod IP addresses. For single-stack networking a single IPv4 CIDR is expected. For dual-stack networking an IPv4 and IPv6 CIDR are expected. Changing this forces a new resource to be created.
     * 
     */
    private @Nullable List<String> podCidrs;
    /**
     * @return The Network Range used by the Kubernetes service. Changing this forces a new resource to be created.
     * 
     */
    private @Nullable String serviceCidr;
    /**
     * @return A list of CIDRs to use for Kubernetes services. For single-stack networking a single IPv4 CIDR is expected. For dual-stack networking an IPv4 and IPv6 CIDR are expected. Changing this forces a new resource to be created.
     * 
     */
    private @Nullable List<String> serviceCidrs;

    private KubernetesClusterNetworkProfile() {}
    /**
     * @return IP address within the Kubernetes service address range that will be used by cluster service discovery (kube-dns). Changing this forces a new resource to be created.
     * 
     */
    public Optional<String> dnsServiceIp() {
        return Optional.ofNullable(this.dnsServiceIp);
    }
    /**
     * @return IP address (in CIDR notation) used as the Docker bridge IP address on nodes. Changing this forces a new resource to be created.
     * 
     */
    public Optional<String> dockerBridgeCidr() {
        return Optional.ofNullable(this.dockerBridgeCidr);
    }
    /**
     * @return Specifies the eBPF data plane used for building the Kubernetes network. Possible value is `cilium`. Changing this forces a new resource to be created.
     * 
     */
    public Optional<String> ebpfDataPlane() {
        return Optional.ofNullable(this.ebpfDataPlane);
    }
    /**
     * @return Specifies a list of IP versions the Kubernetes Cluster will use to assign IP addresses to its nodes and pods. Possible values are `IPv4` and/or `IPv6`. `IPv4` must always be specified. Changing this forces a new resource to be created.
     * 
     */
    public List<String> ipVersions() {
        return this.ipVersions == null ? List.of() : this.ipVersions;
    }
    /**
     * @return A `load_balancer_profile` block. This can only be specified when `load_balancer_sku` is set to `standard`.
     * 
     */
    public Optional<KubernetesClusterNetworkProfileLoadBalancerProfile> loadBalancerProfile() {
        return Optional.ofNullable(this.loadBalancerProfile);
    }
    /**
     * @return Specifies the SKU of the Load Balancer used for this Kubernetes Cluster. Possible values are `basic` and `standard`. Defaults to `standard`. Changing this forces a new resource to be created.
     * 
     */
    public Optional<String> loadBalancerSku() {
        return Optional.ofNullable(this.loadBalancerSku);
    }
    /**
     * @return A `nat_gateway_profile` block. This can only be specified when `load_balancer_sku` is set to `standard` and `outbound_type` is set to `managedNATGateway` or `userAssignedNATGateway`.
     * 
     */
    public Optional<KubernetesClusterNetworkProfileNatGatewayProfile> natGatewayProfile() {
        return Optional.ofNullable(this.natGatewayProfile);
    }
    /**
     * @return Network mode to be used with Azure CNI. Possible values are `bridge` and `transparent`. Changing this forces a new resource to be created.
     * 
     */
    public Optional<String> networkMode() {
        return Optional.ofNullable(this.networkMode);
    }
    /**
     * @return Network plugin to use for networking. Currently supported values are `azure`, `kubenet` and `none`. Changing this forces a new resource to be created.
     * 
     */
    public String networkPlugin() {
        return this.networkPlugin;
    }
    /**
     * @return Specifies the network plugin mode used for building the Kubernetes network. Possible value is `overlay`. Changing this forces a new resource to be created.
     * 
     */
    public Optional<String> networkPluginMode() {
        return Optional.ofNullable(this.networkPluginMode);
    }
    /**
     * @return Sets up network policy to be used with Azure CNI. [Network policy allows us to control the traffic flow between pods](https://docs.microsoft.com/azure/aks/use-network-policies). Currently supported values are `calico` and `azure`. Changing this forces a new resource to be created.
     * 
     */
    public Optional<String> networkPolicy() {
        return Optional.ofNullable(this.networkPolicy);
    }
    /**
     * @return The outbound (egress) routing method which should be used for this Kubernetes Cluster. Possible values are `loadBalancer`, `userDefinedRouting`, `managedNATGateway` and `userAssignedNATGateway`. Defaults to `loadBalancer`. Changing this forces a new resource to be created.
     * 
     */
    public Optional<String> outboundType() {
        return Optional.ofNullable(this.outboundType);
    }
    /**
     * @return The CIDR to use for pod IP addresses. This field can only be set when `network_plugin` is set to `kubenet`. Changing this forces a new resource to be created.
     * 
     */
    public Optional<String> podCidr() {
        return Optional.ofNullable(this.podCidr);
    }
    /**
     * @return A list of CIDRs to use for pod IP addresses. For single-stack networking a single IPv4 CIDR is expected. For dual-stack networking an IPv4 and IPv6 CIDR are expected. Changing this forces a new resource to be created.
     * 
     */
    public List<String> podCidrs() {
        return this.podCidrs == null ? List.of() : this.podCidrs;
    }
    /**
     * @return The Network Range used by the Kubernetes service. Changing this forces a new resource to be created.
     * 
     */
    public Optional<String> serviceCidr() {
        return Optional.ofNullable(this.serviceCidr);
    }
    /**
     * @return A list of CIDRs to use for Kubernetes services. For single-stack networking a single IPv4 CIDR is expected. For dual-stack networking an IPv4 and IPv6 CIDR are expected. Changing this forces a new resource to be created.
     * 
     */
    public List<String> serviceCidrs() {
        return this.serviceCidrs == null ? List.of() : this.serviceCidrs;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(KubernetesClusterNetworkProfile defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String dnsServiceIp;
        private @Nullable String dockerBridgeCidr;
        private @Nullable String ebpfDataPlane;
        private @Nullable List<String> ipVersions;
        private @Nullable KubernetesClusterNetworkProfileLoadBalancerProfile loadBalancerProfile;
        private @Nullable String loadBalancerSku;
        private @Nullable KubernetesClusterNetworkProfileNatGatewayProfile natGatewayProfile;
        private @Nullable String networkMode;
        private String networkPlugin;
        private @Nullable String networkPluginMode;
        private @Nullable String networkPolicy;
        private @Nullable String outboundType;
        private @Nullable String podCidr;
        private @Nullable List<String> podCidrs;
        private @Nullable String serviceCidr;
        private @Nullable List<String> serviceCidrs;
        public Builder() {}
        public Builder(KubernetesClusterNetworkProfile defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dnsServiceIp = defaults.dnsServiceIp;
    	      this.dockerBridgeCidr = defaults.dockerBridgeCidr;
    	      this.ebpfDataPlane = defaults.ebpfDataPlane;
    	      this.ipVersions = defaults.ipVersions;
    	      this.loadBalancerProfile = defaults.loadBalancerProfile;
    	      this.loadBalancerSku = defaults.loadBalancerSku;
    	      this.natGatewayProfile = defaults.natGatewayProfile;
    	      this.networkMode = defaults.networkMode;
    	      this.networkPlugin = defaults.networkPlugin;
    	      this.networkPluginMode = defaults.networkPluginMode;
    	      this.networkPolicy = defaults.networkPolicy;
    	      this.outboundType = defaults.outboundType;
    	      this.podCidr = defaults.podCidr;
    	      this.podCidrs = defaults.podCidrs;
    	      this.serviceCidr = defaults.serviceCidr;
    	      this.serviceCidrs = defaults.serviceCidrs;
        }

        @CustomType.Setter
        public Builder dnsServiceIp(@Nullable String dnsServiceIp) {
            this.dnsServiceIp = dnsServiceIp;
            return this;
        }
        @CustomType.Setter
        public Builder dockerBridgeCidr(@Nullable String dockerBridgeCidr) {
            this.dockerBridgeCidr = dockerBridgeCidr;
            return this;
        }
        @CustomType.Setter
        public Builder ebpfDataPlane(@Nullable String ebpfDataPlane) {
            this.ebpfDataPlane = ebpfDataPlane;
            return this;
        }
        @CustomType.Setter
        public Builder ipVersions(@Nullable List<String> ipVersions) {
            this.ipVersions = ipVersions;
            return this;
        }
        public Builder ipVersions(String... ipVersions) {
            return ipVersions(List.of(ipVersions));
        }
        @CustomType.Setter
        public Builder loadBalancerProfile(@Nullable KubernetesClusterNetworkProfileLoadBalancerProfile loadBalancerProfile) {
            this.loadBalancerProfile = loadBalancerProfile;
            return this;
        }
        @CustomType.Setter
        public Builder loadBalancerSku(@Nullable String loadBalancerSku) {
            this.loadBalancerSku = loadBalancerSku;
            return this;
        }
        @CustomType.Setter
        public Builder natGatewayProfile(@Nullable KubernetesClusterNetworkProfileNatGatewayProfile natGatewayProfile) {
            this.natGatewayProfile = natGatewayProfile;
            return this;
        }
        @CustomType.Setter
        public Builder networkMode(@Nullable String networkMode) {
            this.networkMode = networkMode;
            return this;
        }
        @CustomType.Setter
        public Builder networkPlugin(String networkPlugin) {
            this.networkPlugin = Objects.requireNonNull(networkPlugin);
            return this;
        }
        @CustomType.Setter
        public Builder networkPluginMode(@Nullable String networkPluginMode) {
            this.networkPluginMode = networkPluginMode;
            return this;
        }
        @CustomType.Setter
        public Builder networkPolicy(@Nullable String networkPolicy) {
            this.networkPolicy = networkPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder outboundType(@Nullable String outboundType) {
            this.outboundType = outboundType;
            return this;
        }
        @CustomType.Setter
        public Builder podCidr(@Nullable String podCidr) {
            this.podCidr = podCidr;
            return this;
        }
        @CustomType.Setter
        public Builder podCidrs(@Nullable List<String> podCidrs) {
            this.podCidrs = podCidrs;
            return this;
        }
        public Builder podCidrs(String... podCidrs) {
            return podCidrs(List.of(podCidrs));
        }
        @CustomType.Setter
        public Builder serviceCidr(@Nullable String serviceCidr) {
            this.serviceCidr = serviceCidr;
            return this;
        }
        @CustomType.Setter
        public Builder serviceCidrs(@Nullable List<String> serviceCidrs) {
            this.serviceCidrs = serviceCidrs;
            return this;
        }
        public Builder serviceCidrs(String... serviceCidrs) {
            return serviceCidrs(List.of(serviceCidrs));
        }
        public KubernetesClusterNetworkProfile build() {
            final var o = new KubernetesClusterNetworkProfile();
            o.dnsServiceIp = dnsServiceIp;
            o.dockerBridgeCidr = dockerBridgeCidr;
            o.ebpfDataPlane = ebpfDataPlane;
            o.ipVersions = ipVersions;
            o.loadBalancerProfile = loadBalancerProfile;
            o.loadBalancerSku = loadBalancerSku;
            o.natGatewayProfile = natGatewayProfile;
            o.networkMode = networkMode;
            o.networkPlugin = networkPlugin;
            o.networkPluginMode = networkPluginMode;
            o.networkPolicy = networkPolicy;
            o.outboundType = outboundType;
            o.podCidr = podCidr;
            o.podCidrs = podCidrs;
            o.serviceCidr = serviceCidr;
            o.serviceCidrs = serviceCidrs;
            return o;
        }
    }
}
