// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appservice;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.appservice.PublicCertificateArgs;
import com.pulumi.azure.appservice.inputs.PublicCertificateState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Manages an App Service Public Certificate.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.appservice.Plan;
 * import com.pulumi.azure.appservice.PlanArgs;
 * import com.pulumi.azure.appservice.inputs.PlanSkuArgs;
 * import com.pulumi.azure.appservice.AppService;
 * import com.pulumi.azure.appservice.AppServiceArgs;
 * import com.pulumi.azure.appservice.PublicCertificate;
 * import com.pulumi.azure.appservice.PublicCertificateArgs;
 * import com.pulumi.std.StdFunctions;
 * import com.pulumi.std.inputs.Filebase64Args;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new ResourceGroup("example", ResourceGroupArgs.builder()
 *             .name("example-resources")
 *             .location("West Europe")
 *             .build());
 * 
 *         var examplePlan = new Plan("examplePlan", PlanArgs.builder()
 *             .name("example-app-service-plan")
 *             .location(example.location())
 *             .resourceGroupName(example.name())
 *             .sku(PlanSkuArgs.builder()
 *                 .tier("Standard")
 *                 .size("S1")
 *                 .build())
 *             .build());
 * 
 *         var exampleAppService = new AppService("exampleAppService", AppServiceArgs.builder()
 *             .name("example-app-service")
 *             .location(example.location())
 *             .resourceGroupName(example.name())
 *             .appServicePlanId(examplePlan.id())
 *             .build());
 * 
 *         var examplePublicCertificate = new PublicCertificate("examplePublicCertificate", PublicCertificateArgs.builder()
 *             .resourceGroupName(example.name())
 *             .appServiceName(exampleAppService.name())
 *             .certificateName("example-public-certificate")
 *             .certificateLocation("Unknown")
 *             .blob(StdFunctions.filebase64(Filebase64Args.builder()
 *                 .input("app_service_public_certificate.cer")
 *                 .build()).result())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * App Service Public Certificates can be imported using the `resource id`, e.g.
 * 
 * ```sh
 * $ pulumi import azure:appservice/publicCertificate:PublicCertificate example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Web/sites/site1/publicCertificates/publicCertificate1
 * ```
 * 
 */
@ResourceType(type="azure:appservice/publicCertificate:PublicCertificate")
public class PublicCertificate extends com.pulumi.resources.CustomResource {
    /**
     * The name of the App Service. Changing this forces a new App Service Public Certificate to be created.
     * 
     */
    @Export(name="appServiceName", refs={String.class}, tree="[0]")
    private Output<String> appServiceName;

    /**
     * @return The name of the App Service. Changing this forces a new App Service Public Certificate to be created.
     * 
     */
    public Output<String> appServiceName() {
        return this.appServiceName;
    }
    /**
     * The base64-encoded contents of the certificate. Changing this forces a new App Service Public Certificate to be created.
     * 
     */
    @Export(name="blob", refs={String.class}, tree="[0]")
    private Output<String> blob;

    /**
     * @return The base64-encoded contents of the certificate. Changing this forces a new App Service Public Certificate to be created.
     * 
     */
    public Output<String> blob() {
        return this.blob;
    }
    /**
     * The location of the certificate. Possible values are `CurrentUserMy`, `LocalMachineMy` and `Unknown`. Changing this forces a new App Service Public Certificate to be created.
     * 
     */
    @Export(name="certificateLocation", refs={String.class}, tree="[0]")
    private Output<String> certificateLocation;

    /**
     * @return The location of the certificate. Possible values are `CurrentUserMy`, `LocalMachineMy` and `Unknown`. Changing this forces a new App Service Public Certificate to be created.
     * 
     */
    public Output<String> certificateLocation() {
        return this.certificateLocation;
    }
    /**
     * The name of the public certificate. Changing this forces a new App Service Public Certificate to be created.
     * 
     */
    @Export(name="certificateName", refs={String.class}, tree="[0]")
    private Output<String> certificateName;

    /**
     * @return The name of the public certificate. Changing this forces a new App Service Public Certificate to be created.
     * 
     */
    public Output<String> certificateName() {
        return this.certificateName;
    }
    /**
     * The name of the Resource Group where the App Service Public Certificate should exist. Changing this forces a new App Service Public Certificate to be created.
     * 
     */
    @Export(name="resourceGroupName", refs={String.class}, tree="[0]")
    private Output<String> resourceGroupName;

    /**
     * @return The name of the Resource Group where the App Service Public Certificate should exist. Changing this forces a new App Service Public Certificate to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * The thumbprint of the public certificate.
     * 
     */
    @Export(name="thumbprint", refs={String.class}, tree="[0]")
    private Output<String> thumbprint;

    /**
     * @return The thumbprint of the public certificate.
     * 
     */
    public Output<String> thumbprint() {
        return this.thumbprint;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public PublicCertificate(java.lang.String name) {
        this(name, PublicCertificateArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public PublicCertificate(java.lang.String name, PublicCertificateArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public PublicCertificate(java.lang.String name, PublicCertificateArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:appservice/publicCertificate:PublicCertificate", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private PublicCertificate(java.lang.String name, Output<java.lang.String> id, @Nullable PublicCertificateState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:appservice/publicCertificate:PublicCertificate", name, state, makeResourceOptions(options, id), false);
    }

    private static PublicCertificateArgs makeArgs(PublicCertificateArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? PublicCertificateArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static PublicCertificate get(java.lang.String name, Output<java.lang.String> id, @Nullable PublicCertificateState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new PublicCertificate(name, id, state, options);
    }
}
