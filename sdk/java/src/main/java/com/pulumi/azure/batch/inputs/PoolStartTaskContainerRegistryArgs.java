// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.batch.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PoolStartTaskContainerRegistryArgs extends com.pulumi.resources.ResourceArgs {

    public static final PoolStartTaskContainerRegistryArgs Empty = new PoolStartTaskContainerRegistryArgs();

    @Import(name="password")
    private @Nullable Output<String> password;

    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    @Import(name="registryServer", required=true)
    private Output<String> registryServer;

    public Output<String> registryServer() {
        return this.registryServer;
    }

    /**
     * The User Assigned Identity to use for Container Registry access.
     * 
     */
    @Import(name="userAssignedIdentityId")
    private @Nullable Output<String> userAssignedIdentityId;

    /**
     * @return The User Assigned Identity to use for Container Registry access.
     * 
     */
    public Optional<Output<String>> userAssignedIdentityId() {
        return Optional.ofNullable(this.userAssignedIdentityId);
    }

    @Import(name="userName")
    private @Nullable Output<String> userName;

    public Optional<Output<String>> userName() {
        return Optional.ofNullable(this.userName);
    }

    private PoolStartTaskContainerRegistryArgs() {}

    private PoolStartTaskContainerRegistryArgs(PoolStartTaskContainerRegistryArgs $) {
        this.password = $.password;
        this.registryServer = $.registryServer;
        this.userAssignedIdentityId = $.userAssignedIdentityId;
        this.userName = $.userName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PoolStartTaskContainerRegistryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PoolStartTaskContainerRegistryArgs $;

        public Builder() {
            $ = new PoolStartTaskContainerRegistryArgs();
        }

        public Builder(PoolStartTaskContainerRegistryArgs defaults) {
            $ = new PoolStartTaskContainerRegistryArgs(Objects.requireNonNull(defaults));
        }

        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        public Builder password(String password) {
            return password(Output.of(password));
        }

        public Builder registryServer(Output<String> registryServer) {
            $.registryServer = registryServer;
            return this;
        }

        public Builder registryServer(String registryServer) {
            return registryServer(Output.of(registryServer));
        }

        /**
         * @param userAssignedIdentityId The User Assigned Identity to use for Container Registry access.
         * 
         * @return builder
         * 
         */
        public Builder userAssignedIdentityId(@Nullable Output<String> userAssignedIdentityId) {
            $.userAssignedIdentityId = userAssignedIdentityId;
            return this;
        }

        /**
         * @param userAssignedIdentityId The User Assigned Identity to use for Container Registry access.
         * 
         * @return builder
         * 
         */
        public Builder userAssignedIdentityId(String userAssignedIdentityId) {
            return userAssignedIdentityId(Output.of(userAssignedIdentityId));
        }

        public Builder userName(@Nullable Output<String> userName) {
            $.userName = userName;
            return this;
        }

        public Builder userName(String userName) {
            return userName(Output.of(userName));
        }

        public PoolStartTaskContainerRegistryArgs build() {
            if ($.registryServer == null) {
                throw new MissingRequiredPropertyException("PoolStartTaskContainerRegistryArgs", "registryServer");
            }
            return $;
        }
    }

}
