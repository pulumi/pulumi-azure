// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appservice.inputs;

import com.pulumi.azure.appservice.inputs.FunctionAppFunctionFileArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FunctionAppFunctionState extends com.pulumi.resources.ResourceArgs {

    public static final FunctionAppFunctionState Empty = new FunctionAppFunctionState();

    /**
     * The config for this Function in JSON format.
     * 
     */
    @Import(name="configJson")
    private @Nullable Output<String> configJson;

    /**
     * @return The config for this Function in JSON format.
     * 
     */
    public Optional<Output<String>> configJson() {
        return Optional.ofNullable(this.configJson);
    }

    /**
     * The URL of the configuration JSON.
     * 
     */
    @Import(name="configUrl")
    private @Nullable Output<String> configUrl;

    /**
     * @return The URL of the configuration JSON.
     * 
     */
    public Optional<Output<String>> configUrl() {
        return Optional.ofNullable(this.configUrl);
    }

    /**
     * Should this function be enabled. Defaults to `true`.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Should this function be enabled. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * A `file` block as detailed below. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="files")
    private @Nullable Output<List<FunctionAppFunctionFileArgs>> files;

    /**
     * @return A `file` block as detailed below. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<List<FunctionAppFunctionFileArgs>>> files() {
        return Optional.ofNullable(this.files);
    }

    /**
     * The ID of the Function App in which this function should reside. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="functionAppId")
    private @Nullable Output<String> functionAppId;

    /**
     * @return The ID of the Function App in which this function should reside. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> functionAppId() {
        return Optional.ofNullable(this.functionAppId);
    }

    /**
     * The invocation URL.
     * 
     */
    @Import(name="invocationUrl")
    private @Nullable Output<String> invocationUrl;

    /**
     * @return The invocation URL.
     * 
     */
    public Optional<Output<String>> invocationUrl() {
        return Optional.ofNullable(this.invocationUrl);
    }

    /**
     * The language the Function is written in. Possible values are `CSharp`, `Custom`, `Java`, `Javascript`, `Python`, `PowerShell`, and `TypeScript`.
     * 
     */
    @Import(name="language")
    private @Nullable Output<String> language;

    /**
     * @return The language the Function is written in. Possible values are `CSharp`, `Custom`, `Java`, `Javascript`, `Python`, `PowerShell`, and `TypeScript`.
     * 
     */
    public Optional<Output<String>> language() {
        return Optional.ofNullable(this.language);
    }

    /**
     * The name of the function. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the function. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The Script root path URL.
     * 
     */
    @Import(name="scriptRootPathUrl")
    private @Nullable Output<String> scriptRootPathUrl;

    /**
     * @return The Script root path URL.
     * 
     */
    public Optional<Output<String>> scriptRootPathUrl() {
        return Optional.ofNullable(this.scriptRootPathUrl);
    }

    /**
     * The script URL.
     * 
     */
    @Import(name="scriptUrl")
    private @Nullable Output<String> scriptUrl;

    /**
     * @return The script URL.
     * 
     */
    public Optional<Output<String>> scriptUrl() {
        return Optional.ofNullable(this.scriptUrl);
    }

    /**
     * The URL for the Secrets File.
     * 
     */
    @Import(name="secretsFileUrl")
    private @Nullable Output<String> secretsFileUrl;

    /**
     * @return The URL for the Secrets File.
     * 
     */
    public Optional<Output<String>> secretsFileUrl() {
        return Optional.ofNullable(this.secretsFileUrl);
    }

    /**
     * The test data for the function.
     * 
     */
    @Import(name="testData")
    private @Nullable Output<String> testData;

    /**
     * @return The test data for the function.
     * 
     */
    public Optional<Output<String>> testData() {
        return Optional.ofNullable(this.testData);
    }

    /**
     * The Test data URL.
     * 
     */
    @Import(name="testDataUrl")
    private @Nullable Output<String> testDataUrl;

    /**
     * @return The Test data URL.
     * 
     */
    public Optional<Output<String>> testDataUrl() {
        return Optional.ofNullable(this.testDataUrl);
    }

    /**
     * The function URL.
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return The function URL.
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    private FunctionAppFunctionState() {}

    private FunctionAppFunctionState(FunctionAppFunctionState $) {
        this.configJson = $.configJson;
        this.configUrl = $.configUrl;
        this.enabled = $.enabled;
        this.files = $.files;
        this.functionAppId = $.functionAppId;
        this.invocationUrl = $.invocationUrl;
        this.language = $.language;
        this.name = $.name;
        this.scriptRootPathUrl = $.scriptRootPathUrl;
        this.scriptUrl = $.scriptUrl;
        this.secretsFileUrl = $.secretsFileUrl;
        this.testData = $.testData;
        this.testDataUrl = $.testDataUrl;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FunctionAppFunctionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FunctionAppFunctionState $;

        public Builder() {
            $ = new FunctionAppFunctionState();
        }

        public Builder(FunctionAppFunctionState defaults) {
            $ = new FunctionAppFunctionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param configJson The config for this Function in JSON format.
         * 
         * @return builder
         * 
         */
        public Builder configJson(@Nullable Output<String> configJson) {
            $.configJson = configJson;
            return this;
        }

        /**
         * @param configJson The config for this Function in JSON format.
         * 
         * @return builder
         * 
         */
        public Builder configJson(String configJson) {
            return configJson(Output.of(configJson));
        }

        /**
         * @param configUrl The URL of the configuration JSON.
         * 
         * @return builder
         * 
         */
        public Builder configUrl(@Nullable Output<String> configUrl) {
            $.configUrl = configUrl;
            return this;
        }

        /**
         * @param configUrl The URL of the configuration JSON.
         * 
         * @return builder
         * 
         */
        public Builder configUrl(String configUrl) {
            return configUrl(Output.of(configUrl));
        }

        /**
         * @param enabled Should this function be enabled. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Should this function be enabled. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param files A `file` block as detailed below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder files(@Nullable Output<List<FunctionAppFunctionFileArgs>> files) {
            $.files = files;
            return this;
        }

        /**
         * @param files A `file` block as detailed below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder files(List<FunctionAppFunctionFileArgs> files) {
            return files(Output.of(files));
        }

        /**
         * @param files A `file` block as detailed below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder files(FunctionAppFunctionFileArgs... files) {
            return files(List.of(files));
        }

        /**
         * @param functionAppId The ID of the Function App in which this function should reside. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder functionAppId(@Nullable Output<String> functionAppId) {
            $.functionAppId = functionAppId;
            return this;
        }

        /**
         * @param functionAppId The ID of the Function App in which this function should reside. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder functionAppId(String functionAppId) {
            return functionAppId(Output.of(functionAppId));
        }

        /**
         * @param invocationUrl The invocation URL.
         * 
         * @return builder
         * 
         */
        public Builder invocationUrl(@Nullable Output<String> invocationUrl) {
            $.invocationUrl = invocationUrl;
            return this;
        }

        /**
         * @param invocationUrl The invocation URL.
         * 
         * @return builder
         * 
         */
        public Builder invocationUrl(String invocationUrl) {
            return invocationUrl(Output.of(invocationUrl));
        }

        /**
         * @param language The language the Function is written in. Possible values are `CSharp`, `Custom`, `Java`, `Javascript`, `Python`, `PowerShell`, and `TypeScript`.
         * 
         * @return builder
         * 
         */
        public Builder language(@Nullable Output<String> language) {
            $.language = language;
            return this;
        }

        /**
         * @param language The language the Function is written in. Possible values are `CSharp`, `Custom`, `Java`, `Javascript`, `Python`, `PowerShell`, and `TypeScript`.
         * 
         * @return builder
         * 
         */
        public Builder language(String language) {
            return language(Output.of(language));
        }

        /**
         * @param name The name of the function. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the function. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param scriptRootPathUrl The Script root path URL.
         * 
         * @return builder
         * 
         */
        public Builder scriptRootPathUrl(@Nullable Output<String> scriptRootPathUrl) {
            $.scriptRootPathUrl = scriptRootPathUrl;
            return this;
        }

        /**
         * @param scriptRootPathUrl The Script root path URL.
         * 
         * @return builder
         * 
         */
        public Builder scriptRootPathUrl(String scriptRootPathUrl) {
            return scriptRootPathUrl(Output.of(scriptRootPathUrl));
        }

        /**
         * @param scriptUrl The script URL.
         * 
         * @return builder
         * 
         */
        public Builder scriptUrl(@Nullable Output<String> scriptUrl) {
            $.scriptUrl = scriptUrl;
            return this;
        }

        /**
         * @param scriptUrl The script URL.
         * 
         * @return builder
         * 
         */
        public Builder scriptUrl(String scriptUrl) {
            return scriptUrl(Output.of(scriptUrl));
        }

        /**
         * @param secretsFileUrl The URL for the Secrets File.
         * 
         * @return builder
         * 
         */
        public Builder secretsFileUrl(@Nullable Output<String> secretsFileUrl) {
            $.secretsFileUrl = secretsFileUrl;
            return this;
        }

        /**
         * @param secretsFileUrl The URL for the Secrets File.
         * 
         * @return builder
         * 
         */
        public Builder secretsFileUrl(String secretsFileUrl) {
            return secretsFileUrl(Output.of(secretsFileUrl));
        }

        /**
         * @param testData The test data for the function.
         * 
         * @return builder
         * 
         */
        public Builder testData(@Nullable Output<String> testData) {
            $.testData = testData;
            return this;
        }

        /**
         * @param testData The test data for the function.
         * 
         * @return builder
         * 
         */
        public Builder testData(String testData) {
            return testData(Output.of(testData));
        }

        /**
         * @param testDataUrl The Test data URL.
         * 
         * @return builder
         * 
         */
        public Builder testDataUrl(@Nullable Output<String> testDataUrl) {
            $.testDataUrl = testDataUrl;
            return this;
        }

        /**
         * @param testDataUrl The Test data URL.
         * 
         * @return builder
         * 
         */
        public Builder testDataUrl(String testDataUrl) {
            return testDataUrl(Output.of(testDataUrl));
        }

        /**
         * @param url The function URL.
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url The function URL.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        public FunctionAppFunctionState build() {
            return $;
        }
    }

}
