// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.eventgrid.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PartnerConfigurationPartnerAuthorizationArgs extends com.pulumi.resources.ResourceArgs {

    public static final PartnerConfigurationPartnerAuthorizationArgs Empty = new PartnerConfigurationPartnerAuthorizationArgs();

    /**
     * Expiration time of the partner authorization. Value should be in RFC 3339 format in UTC time zone, for example: &#34;2025-02-04T00:00:00Z&#34;.
     * 
     * &gt; **Note:** If the time from `authorization_expiration_time_in_utc` expires, any request from this partner to create, update or delete resources in the subscriber&#39;s context will fail. If not specified, the authorization will expire after `default_maximum_expiration_time_in_days`.
     * 
     */
    @Import(name="authorizationExpirationTimeInUtc")
    private @Nullable Output<String> authorizationExpirationTimeInUtc;

    /**
     * @return Expiration time of the partner authorization. Value should be in RFC 3339 format in UTC time zone, for example: &#34;2025-02-04T00:00:00Z&#34;.
     * 
     * &gt; **Note:** If the time from `authorization_expiration_time_in_utc` expires, any request from this partner to create, update or delete resources in the subscriber&#39;s context will fail. If not specified, the authorization will expire after `default_maximum_expiration_time_in_days`.
     * 
     */
    public Optional<Output<String>> authorizationExpirationTimeInUtc() {
        return Optional.ofNullable(this.authorizationExpirationTimeInUtc);
    }

    /**
     * The partner name.
     * 
     */
    @Import(name="partnerName", required=true)
    private Output<String> partnerName;

    /**
     * @return The partner name.
     * 
     */
    public Output<String> partnerName() {
        return this.partnerName;
    }

    /**
     * The immutable id of the corresponding partner registration.
     * 
     */
    @Import(name="partnerRegistrationId", required=true)
    private Output<String> partnerRegistrationId;

    /**
     * @return The immutable id of the corresponding partner registration.
     * 
     */
    public Output<String> partnerRegistrationId() {
        return this.partnerRegistrationId;
    }

    private PartnerConfigurationPartnerAuthorizationArgs() {}

    private PartnerConfigurationPartnerAuthorizationArgs(PartnerConfigurationPartnerAuthorizationArgs $) {
        this.authorizationExpirationTimeInUtc = $.authorizationExpirationTimeInUtc;
        this.partnerName = $.partnerName;
        this.partnerRegistrationId = $.partnerRegistrationId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PartnerConfigurationPartnerAuthorizationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PartnerConfigurationPartnerAuthorizationArgs $;

        public Builder() {
            $ = new PartnerConfigurationPartnerAuthorizationArgs();
        }

        public Builder(PartnerConfigurationPartnerAuthorizationArgs defaults) {
            $ = new PartnerConfigurationPartnerAuthorizationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authorizationExpirationTimeInUtc Expiration time of the partner authorization. Value should be in RFC 3339 format in UTC time zone, for example: &#34;2025-02-04T00:00:00Z&#34;.
         * 
         * &gt; **Note:** If the time from `authorization_expiration_time_in_utc` expires, any request from this partner to create, update or delete resources in the subscriber&#39;s context will fail. If not specified, the authorization will expire after `default_maximum_expiration_time_in_days`.
         * 
         * @return builder
         * 
         */
        public Builder authorizationExpirationTimeInUtc(@Nullable Output<String> authorizationExpirationTimeInUtc) {
            $.authorizationExpirationTimeInUtc = authorizationExpirationTimeInUtc;
            return this;
        }

        /**
         * @param authorizationExpirationTimeInUtc Expiration time of the partner authorization. Value should be in RFC 3339 format in UTC time zone, for example: &#34;2025-02-04T00:00:00Z&#34;.
         * 
         * &gt; **Note:** If the time from `authorization_expiration_time_in_utc` expires, any request from this partner to create, update or delete resources in the subscriber&#39;s context will fail. If not specified, the authorization will expire after `default_maximum_expiration_time_in_days`.
         * 
         * @return builder
         * 
         */
        public Builder authorizationExpirationTimeInUtc(String authorizationExpirationTimeInUtc) {
            return authorizationExpirationTimeInUtc(Output.of(authorizationExpirationTimeInUtc));
        }

        /**
         * @param partnerName The partner name.
         * 
         * @return builder
         * 
         */
        public Builder partnerName(Output<String> partnerName) {
            $.partnerName = partnerName;
            return this;
        }

        /**
         * @param partnerName The partner name.
         * 
         * @return builder
         * 
         */
        public Builder partnerName(String partnerName) {
            return partnerName(Output.of(partnerName));
        }

        /**
         * @param partnerRegistrationId The immutable id of the corresponding partner registration.
         * 
         * @return builder
         * 
         */
        public Builder partnerRegistrationId(Output<String> partnerRegistrationId) {
            $.partnerRegistrationId = partnerRegistrationId;
            return this;
        }

        /**
         * @param partnerRegistrationId The immutable id of the corresponding partner registration.
         * 
         * @return builder
         * 
         */
        public Builder partnerRegistrationId(String partnerRegistrationId) {
            return partnerRegistrationId(Output.of(partnerRegistrationId));
        }

        public PartnerConfigurationPartnerAuthorizationArgs build() {
            if ($.partnerName == null) {
                throw new MissingRequiredPropertyException("PartnerConfigurationPartnerAuthorizationArgs", "partnerName");
            }
            if ($.partnerRegistrationId == null) {
                throw new MissingRequiredPropertyException("PartnerConfigurationPartnerAuthorizationArgs", "partnerRegistrationId");
            }
            return $;
        }
    }

}
