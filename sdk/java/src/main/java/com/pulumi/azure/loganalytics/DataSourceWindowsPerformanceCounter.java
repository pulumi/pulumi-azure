// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.loganalytics;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.loganalytics.DataSourceWindowsPerformanceCounterArgs;
import com.pulumi.azure.loganalytics.inputs.DataSourceWindowsPerformanceCounterState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Manages a Log Analytics (formally Operational Insights) Windows Performance Counter DataSource.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.operationalinsights.AnalyticsWorkspace;
 * import com.pulumi.azure.operationalinsights.AnalyticsWorkspaceArgs;
 * import com.pulumi.azure.loganalytics.DataSourceWindowsPerformanceCounter;
 * import com.pulumi.azure.loganalytics.DataSourceWindowsPerformanceCounterArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampleResourceGroup = new ResourceGroup(&#34;exampleResourceGroup&#34;, ResourceGroupArgs.builder()        
 *             .location(&#34;West Europe&#34;)
 *             .build());
 * 
 *         var exampleAnalyticsWorkspace = new AnalyticsWorkspace(&#34;exampleAnalyticsWorkspace&#34;, AnalyticsWorkspaceArgs.builder()        
 *             .location(exampleResourceGroup.location())
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .sku(&#34;PerGB2018&#34;)
 *             .build());
 * 
 *         var exampleDataSourceWindowsPerformanceCounter = new DataSourceWindowsPerformanceCounter(&#34;exampleDataSourceWindowsPerformanceCounter&#34;, DataSourceWindowsPerformanceCounterArgs.builder()        
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .workspaceName(exampleAnalyticsWorkspace.name())
 *             .objectName(&#34;CPU&#34;)
 *             .instanceName(&#34;*&#34;)
 *             .counterName(&#34;CPU&#34;)
 *             .intervalSeconds(10)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Log Analytics Windows Performance Counter DataSources can be imported using the `resource id`, e.g.
 * 
 * ```sh
 *  $ pulumi import azure:loganalytics/dataSourceWindowsPerformanceCounter:DataSourceWindowsPerformanceCounter example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.OperationalInsights/workspaces/workspace1/dataSources/datasource1
 * ```
 * 
 */
@ResourceType(type="azure:loganalytics/dataSourceWindowsPerformanceCounter:DataSourceWindowsPerformanceCounter")
public class DataSourceWindowsPerformanceCounter extends com.pulumi.resources.CustomResource {
    /**
     * The friendly name of the performance counter.
     * 
     */
    @Export(name="counterName", type=String.class, parameters={})
    private Output<String> counterName;

    /**
     * @return The friendly name of the performance counter.
     * 
     */
    public Output<String> counterName() {
        return this.counterName;
    }
    /**
     * The name of the virtual machine instance to which the Windows Performance Counter DataSource be applied. Specify a `*` will apply to all instances.
     * 
     */
    @Export(name="instanceName", type=String.class, parameters={})
    private Output<String> instanceName;

    /**
     * @return The name of the virtual machine instance to which the Windows Performance Counter DataSource be applied. Specify a `*` will apply to all instances.
     * 
     */
    public Output<String> instanceName() {
        return this.instanceName;
    }
    /**
     * The time of sample interval in seconds. Supports values between 10 and 2147483647.
     * 
     */
    @Export(name="intervalSeconds", type=Integer.class, parameters={})
    private Output<Integer> intervalSeconds;

    /**
     * @return The time of sample interval in seconds. Supports values between 10 and 2147483647.
     * 
     */
    public Output<Integer> intervalSeconds() {
        return this.intervalSeconds;
    }
    /**
     * The Name which should be used for this Log Analytics Windows Performance Counter DataSource. Changing this forces a new Log Analytics Windows Performance Counter DataSource to be created.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The Name which should be used for this Log Analytics Windows Performance Counter DataSource. Changing this forces a new Log Analytics Windows Performance Counter DataSource to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The object name of the Log Analytics Windows Performance Counter DataSource.
     * 
     */
    @Export(name="objectName", type=String.class, parameters={})
    private Output<String> objectName;

    /**
     * @return The object name of the Log Analytics Windows Performance Counter DataSource.
     * 
     */
    public Output<String> objectName() {
        return this.objectName;
    }
    /**
     * The name of the Resource Group where the Log Analytics Windows Performance Counter DataSource should exist. Changing this forces a new Log Analytics Windows Performance Counter DataSource to be created.
     * 
     */
    @Export(name="resourceGroupName", type=String.class, parameters={})
    private Output<String> resourceGroupName;

    /**
     * @return The name of the Resource Group where the Log Analytics Windows Performance Counter DataSource should exist. Changing this forces a new Log Analytics Windows Performance Counter DataSource to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * The name of the Log Analytics Workspace where the Log Analytics Windows Performance Counter DataSource should exist. Changing this forces a new Log Analytics Windows Performance Counter DataSource to be created.
     * 
     */
    @Export(name="workspaceName", type=String.class, parameters={})
    private Output<String> workspaceName;

    /**
     * @return The name of the Log Analytics Workspace where the Log Analytics Windows Performance Counter DataSource should exist. Changing this forces a new Log Analytics Windows Performance Counter DataSource to be created.
     * 
     */
    public Output<String> workspaceName() {
        return this.workspaceName;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public DataSourceWindowsPerformanceCounter(String name) {
        this(name, DataSourceWindowsPerformanceCounterArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public DataSourceWindowsPerformanceCounter(String name, DataSourceWindowsPerformanceCounterArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public DataSourceWindowsPerformanceCounter(String name, DataSourceWindowsPerformanceCounterArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:loganalytics/dataSourceWindowsPerformanceCounter:DataSourceWindowsPerformanceCounter", name, args == null ? DataSourceWindowsPerformanceCounterArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private DataSourceWindowsPerformanceCounter(String name, Output<String> id, @Nullable DataSourceWindowsPerformanceCounterState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:loganalytics/dataSourceWindowsPerformanceCounter:DataSourceWindowsPerformanceCounter", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static DataSourceWindowsPerformanceCounter get(String name, Output<String> id, @Nullable DataSourceWindowsPerformanceCounterState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new DataSourceWindowsPerformanceCounter(name, id, state, options);
    }
}
