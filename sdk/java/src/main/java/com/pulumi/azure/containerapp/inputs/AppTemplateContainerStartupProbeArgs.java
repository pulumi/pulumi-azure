// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerapp.inputs;

import com.pulumi.azure.containerapp.inputs.AppTemplateContainerStartupProbeHeaderArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AppTemplateContainerStartupProbeArgs extends com.pulumi.resources.ResourceArgs {

    public static final AppTemplateContainerStartupProbeArgs Empty = new AppTemplateContainerStartupProbeArgs();

    /**
     * The number of consecutive failures required to consider this probe as failed. Possible values are between `1` and `10`. Defaults to `3`.
     * 
     */
    @Import(name="failureCountThreshold")
    private @Nullable Output<Integer> failureCountThreshold;

    /**
     * @return The number of consecutive failures required to consider this probe as failed. Possible values are between `1` and `10`. Defaults to `3`.
     * 
     */
    public Optional<Output<Integer>> failureCountThreshold() {
        return Optional.ofNullable(this.failureCountThreshold);
    }

    /**
     * A `header` block as detailed below.
     * 
     */
    @Import(name="headers")
    private @Nullable Output<List<AppTemplateContainerStartupProbeHeaderArgs>> headers;

    /**
     * @return A `header` block as detailed below.
     * 
     */
    public Optional<Output<List<AppTemplateContainerStartupProbeHeaderArgs>>> headers() {
        return Optional.ofNullable(this.headers);
    }

    /**
     * The value for the host header which should be sent with this probe. If unspecified, the IP Address of the Pod is used as the host header. Setting a value for `Host` in `headers` can be used to override this for `HTTP` and `HTTPS` type probes.
     * 
     */
    @Import(name="host")
    private @Nullable Output<String> host;

    /**
     * @return The value for the host header which should be sent with this probe. If unspecified, the IP Address of the Pod is used as the host header. Setting a value for `Host` in `headers` can be used to override this for `HTTP` and `HTTPS` type probes.
     * 
     */
    public Optional<Output<String>> host() {
        return Optional.ofNullable(this.host);
    }

    /**
     * How often, in seconds, the probe should run. Possible values are between `1` and `240`. Defaults to `10`
     * 
     */
    @Import(name="intervalSeconds")
    private @Nullable Output<Integer> intervalSeconds;

    /**
     * @return How often, in seconds, the probe should run. Possible values are between `1` and `240`. Defaults to `10`
     * 
     */
    public Optional<Output<Integer>> intervalSeconds() {
        return Optional.ofNullable(this.intervalSeconds);
    }

    /**
     * The URI to use with the `host` for http type probes. Not valid for `TCP` type probes. Defaults to `/`.
     * 
     */
    @Import(name="path")
    private @Nullable Output<String> path;

    /**
     * @return The URI to use with the `host` for http type probes. Not valid for `TCP` type probes. Defaults to `/`.
     * 
     */
    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * The port number on which to connect. Possible values are between `1` and `65535`.
     * 
     */
    @Import(name="port", required=true)
    private Output<Integer> port;

    /**
     * @return The port number on which to connect. Possible values are between `1` and `65535`.
     * 
     */
    public Output<Integer> port() {
        return this.port;
    }

    /**
     * The time in seconds after the container is sent the termination signal before the process if forcibly killed.
     * 
     */
    @Import(name="terminationGracePeriodSeconds")
    private @Nullable Output<Integer> terminationGracePeriodSeconds;

    /**
     * @return The time in seconds after the container is sent the termination signal before the process if forcibly killed.
     * 
     */
    public Optional<Output<Integer>> terminationGracePeriodSeconds() {
        return Optional.ofNullable(this.terminationGracePeriodSeconds);
    }

    /**
     * Time in seconds after which the probe times out. Possible values are in the range `1` - `240`. Defaults to `1`.
     * 
     */
    @Import(name="timeout")
    private @Nullable Output<Integer> timeout;

    /**
     * @return Time in seconds after which the probe times out. Possible values are in the range `1` - `240`. Defaults to `1`.
     * 
     */
    public Optional<Output<Integer>> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    /**
     * Type of probe. Possible values are `TCP`, `HTTP`, and `HTTPS`.
     * 
     */
    @Import(name="transport", required=true)
    private Output<String> transport;

    /**
     * @return Type of probe. Possible values are `TCP`, `HTTP`, and `HTTPS`.
     * 
     */
    public Output<String> transport() {
        return this.transport;
    }

    private AppTemplateContainerStartupProbeArgs() {}

    private AppTemplateContainerStartupProbeArgs(AppTemplateContainerStartupProbeArgs $) {
        this.failureCountThreshold = $.failureCountThreshold;
        this.headers = $.headers;
        this.host = $.host;
        this.intervalSeconds = $.intervalSeconds;
        this.path = $.path;
        this.port = $.port;
        this.terminationGracePeriodSeconds = $.terminationGracePeriodSeconds;
        this.timeout = $.timeout;
        this.transport = $.transport;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppTemplateContainerStartupProbeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppTemplateContainerStartupProbeArgs $;

        public Builder() {
            $ = new AppTemplateContainerStartupProbeArgs();
        }

        public Builder(AppTemplateContainerStartupProbeArgs defaults) {
            $ = new AppTemplateContainerStartupProbeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param failureCountThreshold The number of consecutive failures required to consider this probe as failed. Possible values are between `1` and `10`. Defaults to `3`.
         * 
         * @return builder
         * 
         */
        public Builder failureCountThreshold(@Nullable Output<Integer> failureCountThreshold) {
            $.failureCountThreshold = failureCountThreshold;
            return this;
        }

        /**
         * @param failureCountThreshold The number of consecutive failures required to consider this probe as failed. Possible values are between `1` and `10`. Defaults to `3`.
         * 
         * @return builder
         * 
         */
        public Builder failureCountThreshold(Integer failureCountThreshold) {
            return failureCountThreshold(Output.of(failureCountThreshold));
        }

        /**
         * @param headers A `header` block as detailed below.
         * 
         * @return builder
         * 
         */
        public Builder headers(@Nullable Output<List<AppTemplateContainerStartupProbeHeaderArgs>> headers) {
            $.headers = headers;
            return this;
        }

        /**
         * @param headers A `header` block as detailed below.
         * 
         * @return builder
         * 
         */
        public Builder headers(List<AppTemplateContainerStartupProbeHeaderArgs> headers) {
            return headers(Output.of(headers));
        }

        /**
         * @param headers A `header` block as detailed below.
         * 
         * @return builder
         * 
         */
        public Builder headers(AppTemplateContainerStartupProbeHeaderArgs... headers) {
            return headers(List.of(headers));
        }

        /**
         * @param host The value for the host header which should be sent with this probe. If unspecified, the IP Address of the Pod is used as the host header. Setting a value for `Host` in `headers` can be used to override this for `HTTP` and `HTTPS` type probes.
         * 
         * @return builder
         * 
         */
        public Builder host(@Nullable Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host The value for the host header which should be sent with this probe. If unspecified, the IP Address of the Pod is used as the host header. Setting a value for `Host` in `headers` can be used to override this for `HTTP` and `HTTPS` type probes.
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param intervalSeconds How often, in seconds, the probe should run. Possible values are between `1` and `240`. Defaults to `10`
         * 
         * @return builder
         * 
         */
        public Builder intervalSeconds(@Nullable Output<Integer> intervalSeconds) {
            $.intervalSeconds = intervalSeconds;
            return this;
        }

        /**
         * @param intervalSeconds How often, in seconds, the probe should run. Possible values are between `1` and `240`. Defaults to `10`
         * 
         * @return builder
         * 
         */
        public Builder intervalSeconds(Integer intervalSeconds) {
            return intervalSeconds(Output.of(intervalSeconds));
        }

        /**
         * @param path The URI to use with the `host` for http type probes. Not valid for `TCP` type probes. Defaults to `/`.
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path The URI to use with the `host` for http type probes. Not valid for `TCP` type probes. Defaults to `/`.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param port The port number on which to connect. Possible values are between `1` and `65535`.
         * 
         * @return builder
         * 
         */
        public Builder port(Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The port number on which to connect. Possible values are between `1` and `65535`.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param terminationGracePeriodSeconds The time in seconds after the container is sent the termination signal before the process if forcibly killed.
         * 
         * @return builder
         * 
         */
        public Builder terminationGracePeriodSeconds(@Nullable Output<Integer> terminationGracePeriodSeconds) {
            $.terminationGracePeriodSeconds = terminationGracePeriodSeconds;
            return this;
        }

        /**
         * @param terminationGracePeriodSeconds The time in seconds after the container is sent the termination signal before the process if forcibly killed.
         * 
         * @return builder
         * 
         */
        public Builder terminationGracePeriodSeconds(Integer terminationGracePeriodSeconds) {
            return terminationGracePeriodSeconds(Output.of(terminationGracePeriodSeconds));
        }

        /**
         * @param timeout Time in seconds after which the probe times out. Possible values are in the range `1` - `240`. Defaults to `1`.
         * 
         * @return builder
         * 
         */
        public Builder timeout(@Nullable Output<Integer> timeout) {
            $.timeout = timeout;
            return this;
        }

        /**
         * @param timeout Time in seconds after which the probe times out. Possible values are in the range `1` - `240`. Defaults to `1`.
         * 
         * @return builder
         * 
         */
        public Builder timeout(Integer timeout) {
            return timeout(Output.of(timeout));
        }

        /**
         * @param transport Type of probe. Possible values are `TCP`, `HTTP`, and `HTTPS`.
         * 
         * @return builder
         * 
         */
        public Builder transport(Output<String> transport) {
            $.transport = transport;
            return this;
        }

        /**
         * @param transport Type of probe. Possible values are `TCP`, `HTTP`, and `HTTPS`.
         * 
         * @return builder
         * 
         */
        public Builder transport(String transport) {
            return transport(Output.of(transport));
        }

        public AppTemplateContainerStartupProbeArgs build() {
            if ($.port == null) {
                throw new MissingRequiredPropertyException("AppTemplateContainerStartupProbeArgs", "port");
            }
            if ($.transport == null) {
                throw new MissingRequiredPropertyException("AppTemplateContainerStartupProbeArgs", "transport");
            }
            return $;
        }
    }

}
