// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.logicapps;

import com.pulumi.azure.logicapps.inputs.IntegrationAccountCertificateKeyVaultKeyArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IntegrationAccountCertificateArgs extends com.pulumi.resources.ResourceArgs {

    public static final IntegrationAccountCertificateArgs Empty = new IntegrationAccountCertificateArgs();

    /**
     * The name of the Logic App Integration Account. Changing this forces a new Logic App Integration Account Certificate to be created.
     * 
     */
    @Import(name="integrationAccountName", required=true)
    private Output<String> integrationAccountName;

    /**
     * @return The name of the Logic App Integration Account. Changing this forces a new Logic App Integration Account Certificate to be created.
     * 
     */
    public Output<String> integrationAccountName() {
        return this.integrationAccountName;
    }

    /**
     * A `key_vault_key` block as documented below.
     * 
     */
    @Import(name="keyVaultKey")
    private @Nullable Output<IntegrationAccountCertificateKeyVaultKeyArgs> keyVaultKey;

    /**
     * @return A `key_vault_key` block as documented below.
     * 
     */
    public Optional<Output<IntegrationAccountCertificateKeyVaultKeyArgs>> keyVaultKey() {
        return Optional.ofNullable(this.keyVaultKey);
    }

    /**
     * A JSON mapping of any Metadata for this Logic App Integration Account Certificate.
     * 
     */
    @Import(name="metadata")
    private @Nullable Output<String> metadata;

    /**
     * @return A JSON mapping of any Metadata for this Logic App Integration Account Certificate.
     * 
     */
    public Optional<Output<String>> metadata() {
        return Optional.ofNullable(this.metadata);
    }

    /**
     * The name which should be used for this Logic App Integration Account Certificate. Changing this forces a new Logic App Integration Account Certificate to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name which should be used for this Logic App Integration Account Certificate. Changing this forces a new Logic App Integration Account Certificate to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The public certificate for the Logic App Integration Account Certificate.
     * 
     */
    @Import(name="publicCertificate")
    private @Nullable Output<String> publicCertificate;

    /**
     * @return The public certificate for the Logic App Integration Account Certificate.
     * 
     */
    public Optional<Output<String>> publicCertificate() {
        return Optional.ofNullable(this.publicCertificate);
    }

    /**
     * The name of the Resource Group where the Logic App Integration Account Certificate should exist. Changing this forces a new Logic App Integration Account Certificate to be created.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the Resource Group where the Logic App Integration Account Certificate should exist. Changing this forces a new Logic App Integration Account Certificate to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    private IntegrationAccountCertificateArgs() {}

    private IntegrationAccountCertificateArgs(IntegrationAccountCertificateArgs $) {
        this.integrationAccountName = $.integrationAccountName;
        this.keyVaultKey = $.keyVaultKey;
        this.metadata = $.metadata;
        this.name = $.name;
        this.publicCertificate = $.publicCertificate;
        this.resourceGroupName = $.resourceGroupName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IntegrationAccountCertificateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IntegrationAccountCertificateArgs $;

        public Builder() {
            $ = new IntegrationAccountCertificateArgs();
        }

        public Builder(IntegrationAccountCertificateArgs defaults) {
            $ = new IntegrationAccountCertificateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param integrationAccountName The name of the Logic App Integration Account. Changing this forces a new Logic App Integration Account Certificate to be created.
         * 
         * @return builder
         * 
         */
        public Builder integrationAccountName(Output<String> integrationAccountName) {
            $.integrationAccountName = integrationAccountName;
            return this;
        }

        /**
         * @param integrationAccountName The name of the Logic App Integration Account. Changing this forces a new Logic App Integration Account Certificate to be created.
         * 
         * @return builder
         * 
         */
        public Builder integrationAccountName(String integrationAccountName) {
            return integrationAccountName(Output.of(integrationAccountName));
        }

        /**
         * @param keyVaultKey A `key_vault_key` block as documented below.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultKey(@Nullable Output<IntegrationAccountCertificateKeyVaultKeyArgs> keyVaultKey) {
            $.keyVaultKey = keyVaultKey;
            return this;
        }

        /**
         * @param keyVaultKey A `key_vault_key` block as documented below.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultKey(IntegrationAccountCertificateKeyVaultKeyArgs keyVaultKey) {
            return keyVaultKey(Output.of(keyVaultKey));
        }

        /**
         * @param metadata A JSON mapping of any Metadata for this Logic App Integration Account Certificate.
         * 
         * @return builder
         * 
         */
        public Builder metadata(@Nullable Output<String> metadata) {
            $.metadata = metadata;
            return this;
        }

        /**
         * @param metadata A JSON mapping of any Metadata for this Logic App Integration Account Certificate.
         * 
         * @return builder
         * 
         */
        public Builder metadata(String metadata) {
            return metadata(Output.of(metadata));
        }

        /**
         * @param name The name which should be used for this Logic App Integration Account Certificate. Changing this forces a new Logic App Integration Account Certificate to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this Logic App Integration Account Certificate. Changing this forces a new Logic App Integration Account Certificate to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param publicCertificate The public certificate for the Logic App Integration Account Certificate.
         * 
         * @return builder
         * 
         */
        public Builder publicCertificate(@Nullable Output<String> publicCertificate) {
            $.publicCertificate = publicCertificate;
            return this;
        }

        /**
         * @param publicCertificate The public certificate for the Logic App Integration Account Certificate.
         * 
         * @return builder
         * 
         */
        public Builder publicCertificate(String publicCertificate) {
            return publicCertificate(Output.of(publicCertificate));
        }

        /**
         * @param resourceGroupName The name of the Resource Group where the Logic App Integration Account Certificate should exist. Changing this forces a new Logic App Integration Account Certificate to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the Resource Group where the Logic App Integration Account Certificate should exist. Changing this forces a new Logic App Integration Account Certificate to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public IntegrationAccountCertificateArgs build() {
            if ($.integrationAccountName == null) {
                throw new MissingRequiredPropertyException("IntegrationAccountCertificateArgs", "integrationAccountName");
            }
            if ($.resourceGroupName == null) {
                throw new MissingRequiredPropertyException("IntegrationAccountCertificateArgs", "resourceGroupName");
            }
            return $;
        }
    }

}
