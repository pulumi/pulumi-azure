// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network.outputs;

import com.pulumi.azure.network.outputs.VpnGatewayConnectionVpnLinkCustomBgpAddress;
import com.pulumi.azure.network.outputs.VpnGatewayConnectionVpnLinkIpsecPolicy;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class VpnGatewayConnectionVpnLink {
    /**
     * @return The expected connection bandwidth in MBPS. Defaults to `10`.
     * 
     */
    private @Nullable Integer bandwidthMbps;
    /**
     * @return Should the BGP be enabled? Defaults to `false`. Changing this forces a new VPN Gateway Connection to be created.
     * 
     */
    private @Nullable Boolean bgpEnabled;
    /**
     * @return The connection mode of this VPN Link. Possible values are `Default`, `InitiatorOnly` and `ResponderOnly`. Defaults to `Default`.
     * 
     */
    private @Nullable String connectionMode;
    /**
     * @return One or more `custom_bgp_address` blocks as defined below.
     * 
     */
    private @Nullable List<VpnGatewayConnectionVpnLinkCustomBgpAddress> customBgpAddresses;
    /**
     * @return A list of the egress NAT Rule Ids.
     * 
     */
    private @Nullable List<String> egressNatRuleIds;
    /**
     * @return A list of the ingress NAT Rule Ids.
     * 
     */
    private @Nullable List<String> ingressNatRuleIds;
    /**
     * @return One or more `ipsec_policy` blocks as defined above.
     * 
     */
    private @Nullable List<VpnGatewayConnectionVpnLinkIpsecPolicy> ipsecPolicies;
    /**
     * @return Whether to use local Azure IP to initiate connection? Defaults to `false`.
     * 
     */
    private @Nullable Boolean localAzureIpAddressEnabled;
    /**
     * @return The name which should be used for this VPN Link Connection.
     * 
     */
    private String name;
    /**
     * @return Whether to enable policy-based traffic selectors? Defaults to `false`.
     * 
     */
    private @Nullable Boolean policyBasedTrafficSelectorEnabled;
    /**
     * @return The protocol used for this VPN Link Connection. Possible values are `IKEv1` and `IKEv2`. Defaults to `IKEv2`.
     * 
     */
    private @Nullable String protocol;
    /**
     * @return Should the rate limit be enabled? Defaults to `false`.
     * 
     */
    private @Nullable Boolean ratelimitEnabled;
    /**
     * @return Routing weight for this VPN Link Connection. Defaults to `0`.
     * 
     */
    private @Nullable Integer routeWeight;
    /**
     * @return SharedKey for this VPN Link Connection.
     * 
     */
    private @Nullable String sharedKey;
    /**
     * @return The ID of the connected VPN Site Link. Changing this forces a new VPN Gateway Connection to be created.
     * 
     */
    private String vpnSiteLinkId;

    private VpnGatewayConnectionVpnLink() {}
    /**
     * @return The expected connection bandwidth in MBPS. Defaults to `10`.
     * 
     */
    public Optional<Integer> bandwidthMbps() {
        return Optional.ofNullable(this.bandwidthMbps);
    }
    /**
     * @return Should the BGP be enabled? Defaults to `false`. Changing this forces a new VPN Gateway Connection to be created.
     * 
     */
    public Optional<Boolean> bgpEnabled() {
        return Optional.ofNullable(this.bgpEnabled);
    }
    /**
     * @return The connection mode of this VPN Link. Possible values are `Default`, `InitiatorOnly` and `ResponderOnly`. Defaults to `Default`.
     * 
     */
    public Optional<String> connectionMode() {
        return Optional.ofNullable(this.connectionMode);
    }
    /**
     * @return One or more `custom_bgp_address` blocks as defined below.
     * 
     */
    public List<VpnGatewayConnectionVpnLinkCustomBgpAddress> customBgpAddresses() {
        return this.customBgpAddresses == null ? List.of() : this.customBgpAddresses;
    }
    /**
     * @return A list of the egress NAT Rule Ids.
     * 
     */
    public List<String> egressNatRuleIds() {
        return this.egressNatRuleIds == null ? List.of() : this.egressNatRuleIds;
    }
    /**
     * @return A list of the ingress NAT Rule Ids.
     * 
     */
    public List<String> ingressNatRuleIds() {
        return this.ingressNatRuleIds == null ? List.of() : this.ingressNatRuleIds;
    }
    /**
     * @return One or more `ipsec_policy` blocks as defined above.
     * 
     */
    public List<VpnGatewayConnectionVpnLinkIpsecPolicy> ipsecPolicies() {
        return this.ipsecPolicies == null ? List.of() : this.ipsecPolicies;
    }
    /**
     * @return Whether to use local Azure IP to initiate connection? Defaults to `false`.
     * 
     */
    public Optional<Boolean> localAzureIpAddressEnabled() {
        return Optional.ofNullable(this.localAzureIpAddressEnabled);
    }
    /**
     * @return The name which should be used for this VPN Link Connection.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Whether to enable policy-based traffic selectors? Defaults to `false`.
     * 
     */
    public Optional<Boolean> policyBasedTrafficSelectorEnabled() {
        return Optional.ofNullable(this.policyBasedTrafficSelectorEnabled);
    }
    /**
     * @return The protocol used for this VPN Link Connection. Possible values are `IKEv1` and `IKEv2`. Defaults to `IKEv2`.
     * 
     */
    public Optional<String> protocol() {
        return Optional.ofNullable(this.protocol);
    }
    /**
     * @return Should the rate limit be enabled? Defaults to `false`.
     * 
     */
    public Optional<Boolean> ratelimitEnabled() {
        return Optional.ofNullable(this.ratelimitEnabled);
    }
    /**
     * @return Routing weight for this VPN Link Connection. Defaults to `0`.
     * 
     */
    public Optional<Integer> routeWeight() {
        return Optional.ofNullable(this.routeWeight);
    }
    /**
     * @return SharedKey for this VPN Link Connection.
     * 
     */
    public Optional<String> sharedKey() {
        return Optional.ofNullable(this.sharedKey);
    }
    /**
     * @return The ID of the connected VPN Site Link. Changing this forces a new VPN Gateway Connection to be created.
     * 
     */
    public String vpnSiteLinkId() {
        return this.vpnSiteLinkId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VpnGatewayConnectionVpnLink defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer bandwidthMbps;
        private @Nullable Boolean bgpEnabled;
        private @Nullable String connectionMode;
        private @Nullable List<VpnGatewayConnectionVpnLinkCustomBgpAddress> customBgpAddresses;
        private @Nullable List<String> egressNatRuleIds;
        private @Nullable List<String> ingressNatRuleIds;
        private @Nullable List<VpnGatewayConnectionVpnLinkIpsecPolicy> ipsecPolicies;
        private @Nullable Boolean localAzureIpAddressEnabled;
        private String name;
        private @Nullable Boolean policyBasedTrafficSelectorEnabled;
        private @Nullable String protocol;
        private @Nullable Boolean ratelimitEnabled;
        private @Nullable Integer routeWeight;
        private @Nullable String sharedKey;
        private String vpnSiteLinkId;
        public Builder() {}
        public Builder(VpnGatewayConnectionVpnLink defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bandwidthMbps = defaults.bandwidthMbps;
    	      this.bgpEnabled = defaults.bgpEnabled;
    	      this.connectionMode = defaults.connectionMode;
    	      this.customBgpAddresses = defaults.customBgpAddresses;
    	      this.egressNatRuleIds = defaults.egressNatRuleIds;
    	      this.ingressNatRuleIds = defaults.ingressNatRuleIds;
    	      this.ipsecPolicies = defaults.ipsecPolicies;
    	      this.localAzureIpAddressEnabled = defaults.localAzureIpAddressEnabled;
    	      this.name = defaults.name;
    	      this.policyBasedTrafficSelectorEnabled = defaults.policyBasedTrafficSelectorEnabled;
    	      this.protocol = defaults.protocol;
    	      this.ratelimitEnabled = defaults.ratelimitEnabled;
    	      this.routeWeight = defaults.routeWeight;
    	      this.sharedKey = defaults.sharedKey;
    	      this.vpnSiteLinkId = defaults.vpnSiteLinkId;
        }

        @CustomType.Setter
        public Builder bandwidthMbps(@Nullable Integer bandwidthMbps) {

            this.bandwidthMbps = bandwidthMbps;
            return this;
        }
        @CustomType.Setter
        public Builder bgpEnabled(@Nullable Boolean bgpEnabled) {

            this.bgpEnabled = bgpEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder connectionMode(@Nullable String connectionMode) {

            this.connectionMode = connectionMode;
            return this;
        }
        @CustomType.Setter
        public Builder customBgpAddresses(@Nullable List<VpnGatewayConnectionVpnLinkCustomBgpAddress> customBgpAddresses) {

            this.customBgpAddresses = customBgpAddresses;
            return this;
        }
        public Builder customBgpAddresses(VpnGatewayConnectionVpnLinkCustomBgpAddress... customBgpAddresses) {
            return customBgpAddresses(List.of(customBgpAddresses));
        }
        @CustomType.Setter
        public Builder egressNatRuleIds(@Nullable List<String> egressNatRuleIds) {

            this.egressNatRuleIds = egressNatRuleIds;
            return this;
        }
        public Builder egressNatRuleIds(String... egressNatRuleIds) {
            return egressNatRuleIds(List.of(egressNatRuleIds));
        }
        @CustomType.Setter
        public Builder ingressNatRuleIds(@Nullable List<String> ingressNatRuleIds) {

            this.ingressNatRuleIds = ingressNatRuleIds;
            return this;
        }
        public Builder ingressNatRuleIds(String... ingressNatRuleIds) {
            return ingressNatRuleIds(List.of(ingressNatRuleIds));
        }
        @CustomType.Setter
        public Builder ipsecPolicies(@Nullable List<VpnGatewayConnectionVpnLinkIpsecPolicy> ipsecPolicies) {

            this.ipsecPolicies = ipsecPolicies;
            return this;
        }
        public Builder ipsecPolicies(VpnGatewayConnectionVpnLinkIpsecPolicy... ipsecPolicies) {
            return ipsecPolicies(List.of(ipsecPolicies));
        }
        @CustomType.Setter
        public Builder localAzureIpAddressEnabled(@Nullable Boolean localAzureIpAddressEnabled) {

            this.localAzureIpAddressEnabled = localAzureIpAddressEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("VpnGatewayConnectionVpnLink", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder policyBasedTrafficSelectorEnabled(@Nullable Boolean policyBasedTrafficSelectorEnabled) {

            this.policyBasedTrafficSelectorEnabled = policyBasedTrafficSelectorEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(@Nullable String protocol) {

            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder ratelimitEnabled(@Nullable Boolean ratelimitEnabled) {

            this.ratelimitEnabled = ratelimitEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder routeWeight(@Nullable Integer routeWeight) {

            this.routeWeight = routeWeight;
            return this;
        }
        @CustomType.Setter
        public Builder sharedKey(@Nullable String sharedKey) {

            this.sharedKey = sharedKey;
            return this;
        }
        @CustomType.Setter
        public Builder vpnSiteLinkId(String vpnSiteLinkId) {
            if (vpnSiteLinkId == null) {
              throw new MissingRequiredPropertyException("VpnGatewayConnectionVpnLink", "vpnSiteLinkId");
            }
            this.vpnSiteLinkId = vpnSiteLinkId;
            return this;
        }
        public VpnGatewayConnectionVpnLink build() {
            final var _resultValue = new VpnGatewayConnectionVpnLink();
            _resultValue.bandwidthMbps = bandwidthMbps;
            _resultValue.bgpEnabled = bgpEnabled;
            _resultValue.connectionMode = connectionMode;
            _resultValue.customBgpAddresses = customBgpAddresses;
            _resultValue.egressNatRuleIds = egressNatRuleIds;
            _resultValue.ingressNatRuleIds = ingressNatRuleIds;
            _resultValue.ipsecPolicies = ipsecPolicies;
            _resultValue.localAzureIpAddressEnabled = localAzureIpAddressEnabled;
            _resultValue.name = name;
            _resultValue.policyBasedTrafficSelectorEnabled = policyBasedTrafficSelectorEnabled;
            _resultValue.protocol = protocol;
            _resultValue.ratelimitEnabled = ratelimitEnabled;
            _resultValue.routeWeight = routeWeight;
            _resultValue.sharedKey = sharedKey;
            _resultValue.vpnSiteLinkId = vpnSiteLinkId;
            return _resultValue;
        }
    }
}
