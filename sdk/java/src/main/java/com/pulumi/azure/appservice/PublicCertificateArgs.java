// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appservice;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class PublicCertificateArgs extends com.pulumi.resources.ResourceArgs {

    public static final PublicCertificateArgs Empty = new PublicCertificateArgs();

    /**
     * The name of the App Service. Changing this forces a new App Service Public Certificate to be created.
     * 
     */
    @Import(name="appServiceName", required=true)
    private Output<String> appServiceName;

    /**
     * @return The name of the App Service. Changing this forces a new App Service Public Certificate to be created.
     * 
     */
    public Output<String> appServiceName() {
        return this.appServiceName;
    }

    /**
     * The base64-encoded contents of the certificate. Changing this forces a new App Service Public Certificate to be created.
     * 
     */
    @Import(name="blob", required=true)
    private Output<String> blob;

    /**
     * @return The base64-encoded contents of the certificate. Changing this forces a new App Service Public Certificate to be created.
     * 
     */
    public Output<String> blob() {
        return this.blob;
    }

    /**
     * The location of the certificate. Possible values are `CurrentUserMy`, `LocalMachineMy` and `Unknown`. Changing this forces a new App Service Public Certificate to be created.
     * 
     */
    @Import(name="certificateLocation", required=true)
    private Output<String> certificateLocation;

    /**
     * @return The location of the certificate. Possible values are `CurrentUserMy`, `LocalMachineMy` and `Unknown`. Changing this forces a new App Service Public Certificate to be created.
     * 
     */
    public Output<String> certificateLocation() {
        return this.certificateLocation;
    }

    /**
     * The name of the public certificate. Changing this forces a new App Service Public Certificate to be created.
     * 
     */
    @Import(name="certificateName", required=true)
    private Output<String> certificateName;

    /**
     * @return The name of the public certificate. Changing this forces a new App Service Public Certificate to be created.
     * 
     */
    public Output<String> certificateName() {
        return this.certificateName;
    }

    /**
     * The name of the Resource Group where the App Service Public Certificate should exist. Changing this forces a new App Service Public Certificate to be created.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the Resource Group where the App Service Public Certificate should exist. Changing this forces a new App Service Public Certificate to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    private PublicCertificateArgs() {}

    private PublicCertificateArgs(PublicCertificateArgs $) {
        this.appServiceName = $.appServiceName;
        this.blob = $.blob;
        this.certificateLocation = $.certificateLocation;
        this.certificateName = $.certificateName;
        this.resourceGroupName = $.resourceGroupName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PublicCertificateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PublicCertificateArgs $;

        public Builder() {
            $ = new PublicCertificateArgs();
        }

        public Builder(PublicCertificateArgs defaults) {
            $ = new PublicCertificateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param appServiceName The name of the App Service. Changing this forces a new App Service Public Certificate to be created.
         * 
         * @return builder
         * 
         */
        public Builder appServiceName(Output<String> appServiceName) {
            $.appServiceName = appServiceName;
            return this;
        }

        /**
         * @param appServiceName The name of the App Service. Changing this forces a new App Service Public Certificate to be created.
         * 
         * @return builder
         * 
         */
        public Builder appServiceName(String appServiceName) {
            return appServiceName(Output.of(appServiceName));
        }

        /**
         * @param blob The base64-encoded contents of the certificate. Changing this forces a new App Service Public Certificate to be created.
         * 
         * @return builder
         * 
         */
        public Builder blob(Output<String> blob) {
            $.blob = blob;
            return this;
        }

        /**
         * @param blob The base64-encoded contents of the certificate. Changing this forces a new App Service Public Certificate to be created.
         * 
         * @return builder
         * 
         */
        public Builder blob(String blob) {
            return blob(Output.of(blob));
        }

        /**
         * @param certificateLocation The location of the certificate. Possible values are `CurrentUserMy`, `LocalMachineMy` and `Unknown`. Changing this forces a new App Service Public Certificate to be created.
         * 
         * @return builder
         * 
         */
        public Builder certificateLocation(Output<String> certificateLocation) {
            $.certificateLocation = certificateLocation;
            return this;
        }

        /**
         * @param certificateLocation The location of the certificate. Possible values are `CurrentUserMy`, `LocalMachineMy` and `Unknown`. Changing this forces a new App Service Public Certificate to be created.
         * 
         * @return builder
         * 
         */
        public Builder certificateLocation(String certificateLocation) {
            return certificateLocation(Output.of(certificateLocation));
        }

        /**
         * @param certificateName The name of the public certificate. Changing this forces a new App Service Public Certificate to be created.
         * 
         * @return builder
         * 
         */
        public Builder certificateName(Output<String> certificateName) {
            $.certificateName = certificateName;
            return this;
        }

        /**
         * @param certificateName The name of the public certificate. Changing this forces a new App Service Public Certificate to be created.
         * 
         * @return builder
         * 
         */
        public Builder certificateName(String certificateName) {
            return certificateName(Output.of(certificateName));
        }

        /**
         * @param resourceGroupName The name of the Resource Group where the App Service Public Certificate should exist. Changing this forces a new App Service Public Certificate to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the Resource Group where the App Service Public Certificate should exist. Changing this forces a new App Service Public Certificate to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public PublicCertificateArgs build() {
            if ($.appServiceName == null) {
                throw new MissingRequiredPropertyException("PublicCertificateArgs", "appServiceName");
            }
            if ($.blob == null) {
                throw new MissingRequiredPropertyException("PublicCertificateArgs", "blob");
            }
            if ($.certificateLocation == null) {
                throw new MissingRequiredPropertyException("PublicCertificateArgs", "certificateLocation");
            }
            if ($.certificateName == null) {
                throw new MissingRequiredPropertyException("PublicCertificateArgs", "certificateName");
            }
            if ($.resourceGroupName == null) {
                throw new MissingRequiredPropertyException("PublicCertificateArgs", "resourceGroupName");
            }
            return $;
        }
    }

}
