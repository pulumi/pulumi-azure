// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.apimanagement.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BackendProxyArgs extends com.pulumi.resources.ResourceArgs {

    public static final BackendProxyArgs Empty = new BackendProxyArgs();

    /**
     * The password to connect to the proxy server.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return The password to connect to the proxy server.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * The URL of the proxy server.
     * 
     */
    @Import(name="url", required=true)
    private Output<String> url;

    /**
     * @return The URL of the proxy server.
     * 
     */
    public Output<String> url() {
        return this.url;
    }

    /**
     * The username to connect to the proxy server.
     * 
     */
    @Import(name="username", required=true)
    private Output<String> username;

    /**
     * @return The username to connect to the proxy server.
     * 
     */
    public Output<String> username() {
        return this.username;
    }

    private BackendProxyArgs() {}

    private BackendProxyArgs(BackendProxyArgs $) {
        this.password = $.password;
        this.url = $.url;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackendProxyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackendProxyArgs $;

        public Builder() {
            $ = new BackendProxyArgs();
        }

        public Builder(BackendProxyArgs defaults) {
            $ = new BackendProxyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param password The password to connect to the proxy server.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The password to connect to the proxy server.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param url The URL of the proxy server.
         * 
         * @return builder
         * 
         */
        public Builder url(Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url The URL of the proxy server.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        /**
         * @param username The username to connect to the proxy server.
         * 
         * @return builder
         * 
         */
        public Builder username(Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The username to connect to the proxy server.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public BackendProxyArgs build() {
            if ($.url == null) {
                throw new MissingRequiredPropertyException("BackendProxyArgs", "url");
            }
            if ($.username == null) {
                throw new MissingRequiredPropertyException("BackendProxyArgs", "username");
            }
            return $;
        }
    }

}
