// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.keyvault.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetManagedHardwareSecurityModuleResult {
    /**
     * @return Specifies a list of administrators object IDs for the key vault Managed Hardware Security Module.
     * 
     */
    private List<String> adminObjectIds;
    /**
     * @return The URI of the Hardware Security Module for performing operations on keys and secrets.
     * 
     */
    private String hsmUri;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The Azure Region in which the Key Vault managed Hardware Security Module exists.
     * 
     */
    private String location;
    private String name;
    /**
     * @return Is purge protection enabled on this Key Vault Managed Hardware Security Module?
     * 
     */
    private Boolean purgeProtectionEnabled;
    private String resourceGroupName;
    /**
     * @return The Name of the SKU used for this Key Vault Managed Hardware Security Module.
     * 
     */
    private String skuName;
    /**
     * @return The number of days that items should be retained for soft-deleted.
     * 
     */
    private Integer softDeleteRetentionDays;
    /**
     * @return A mapping of tags assigned to the Key Vault Managed Hardware Security Module.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return The Azure Active Directory Tenant ID used for authenticating requests to the Key Vault Managed Hardware Security Module.
     * 
     */
    private String tenantId;

    private GetManagedHardwareSecurityModuleResult() {}
    /**
     * @return Specifies a list of administrators object IDs for the key vault Managed Hardware Security Module.
     * 
     */
    public List<String> adminObjectIds() {
        return this.adminObjectIds;
    }
    /**
     * @return The URI of the Hardware Security Module for performing operations on keys and secrets.
     * 
     */
    public String hsmUri() {
        return this.hsmUri;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The Azure Region in which the Key Vault managed Hardware Security Module exists.
     * 
     */
    public String location() {
        return this.location;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return Is purge protection enabled on this Key Vault Managed Hardware Security Module?
     * 
     */
    public Boolean purgeProtectionEnabled() {
        return this.purgeProtectionEnabled;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return The Name of the SKU used for this Key Vault Managed Hardware Security Module.
     * 
     */
    public String skuName() {
        return this.skuName;
    }
    /**
     * @return The number of days that items should be retained for soft-deleted.
     * 
     */
    public Integer softDeleteRetentionDays() {
        return this.softDeleteRetentionDays;
    }
    /**
     * @return A mapping of tags assigned to the Key Vault Managed Hardware Security Module.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return The Azure Active Directory Tenant ID used for authenticating requests to the Key Vault Managed Hardware Security Module.
     * 
     */
    public String tenantId() {
        return this.tenantId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedHardwareSecurityModuleResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> adminObjectIds;
        private String hsmUri;
        private String id;
        private String location;
        private String name;
        private Boolean purgeProtectionEnabled;
        private String resourceGroupName;
        private String skuName;
        private Integer softDeleteRetentionDays;
        private Map<String,String> tags;
        private String tenantId;
        public Builder() {}
        public Builder(GetManagedHardwareSecurityModuleResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adminObjectIds = defaults.adminObjectIds;
    	      this.hsmUri = defaults.hsmUri;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.purgeProtectionEnabled = defaults.purgeProtectionEnabled;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.skuName = defaults.skuName;
    	      this.softDeleteRetentionDays = defaults.softDeleteRetentionDays;
    	      this.tags = defaults.tags;
    	      this.tenantId = defaults.tenantId;
        }

        @CustomType.Setter
        public Builder adminObjectIds(List<String> adminObjectIds) {
            if (adminObjectIds == null) {
              throw new MissingRequiredPropertyException("GetManagedHardwareSecurityModuleResult", "adminObjectIds");
            }
            this.adminObjectIds = adminObjectIds;
            return this;
        }
        public Builder adminObjectIds(String... adminObjectIds) {
            return adminObjectIds(List.of(adminObjectIds));
        }
        @CustomType.Setter
        public Builder hsmUri(String hsmUri) {
            if (hsmUri == null) {
              throw new MissingRequiredPropertyException("GetManagedHardwareSecurityModuleResult", "hsmUri");
            }
            this.hsmUri = hsmUri;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetManagedHardwareSecurityModuleResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetManagedHardwareSecurityModuleResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetManagedHardwareSecurityModuleResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder purgeProtectionEnabled(Boolean purgeProtectionEnabled) {
            if (purgeProtectionEnabled == null) {
              throw new MissingRequiredPropertyException("GetManagedHardwareSecurityModuleResult", "purgeProtectionEnabled");
            }
            this.purgeProtectionEnabled = purgeProtectionEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            if (resourceGroupName == null) {
              throw new MissingRequiredPropertyException("GetManagedHardwareSecurityModuleResult", "resourceGroupName");
            }
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder skuName(String skuName) {
            if (skuName == null) {
              throw new MissingRequiredPropertyException("GetManagedHardwareSecurityModuleResult", "skuName");
            }
            this.skuName = skuName;
            return this;
        }
        @CustomType.Setter
        public Builder softDeleteRetentionDays(Integer softDeleteRetentionDays) {
            if (softDeleteRetentionDays == null) {
              throw new MissingRequiredPropertyException("GetManagedHardwareSecurityModuleResult", "softDeleteRetentionDays");
            }
            this.softDeleteRetentionDays = softDeleteRetentionDays;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetManagedHardwareSecurityModuleResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder tenantId(String tenantId) {
            if (tenantId == null) {
              throw new MissingRequiredPropertyException("GetManagedHardwareSecurityModuleResult", "tenantId");
            }
            this.tenantId = tenantId;
            return this;
        }
        public GetManagedHardwareSecurityModuleResult build() {
            final var _resultValue = new GetManagedHardwareSecurityModuleResult();
            _resultValue.adminObjectIds = adminObjectIds;
            _resultValue.hsmUri = hsmUri;
            _resultValue.id = id;
            _resultValue.location = location;
            _resultValue.name = name;
            _resultValue.purgeProtectionEnabled = purgeProtectionEnabled;
            _resultValue.resourceGroupName = resourceGroupName;
            _resultValue.skuName = skuName;
            _resultValue.softDeleteRetentionDays = softDeleteRetentionDays;
            _resultValue.tags = tags;
            _resultValue.tenantId = tenantId;
            return _resultValue;
        }
    }
}
