// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appplatform.outputs;

import com.pulumi.azure.appplatform.outputs.GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth;
import com.pulumi.azure.appplatform.outputs.GetSpringCloudServiceConfigServerGitSettingRepositorySshAuth;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetSpringCloudServiceConfigServerGitSettingRepository {
    /**
     * @return A `http_basic_auth` block as defined below.
     * 
     */
    private List<GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth> httpBasicAuths;
    /**
     * @return The default label of the Git repository, which is a branch name, tag name, or commit-id of the repository
     * 
     */
    private String label;
    /**
     * @return Specifies The name of the Spring Cloud Service resource.
     * 
     */
    private String name;
    /**
     * @return An array of strings used to match an application name. For each pattern, use the `{application}/{profile}` format with wildcards.
     * 
     */
    private List<String> patterns;
    /**
     * @return An array of strings used to search subdirectories of the Git repository.
     * 
     */
    private List<String> searchPaths;
    /**
     * @return A `ssh_auth` block as defined below.
     * 
     */
    private List<GetSpringCloudServiceConfigServerGitSettingRepositorySshAuth> sshAuths;
    /**
     * @return The URI of the Git repository
     * 
     */
    private String uri;

    private GetSpringCloudServiceConfigServerGitSettingRepository() {}
    /**
     * @return A `http_basic_auth` block as defined below.
     * 
     */
    public List<GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth> httpBasicAuths() {
        return this.httpBasicAuths;
    }
    /**
     * @return The default label of the Git repository, which is a branch name, tag name, or commit-id of the repository
     * 
     */
    public String label() {
        return this.label;
    }
    /**
     * @return Specifies The name of the Spring Cloud Service resource.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return An array of strings used to match an application name. For each pattern, use the `{application}/{profile}` format with wildcards.
     * 
     */
    public List<String> patterns() {
        return this.patterns;
    }
    /**
     * @return An array of strings used to search subdirectories of the Git repository.
     * 
     */
    public List<String> searchPaths() {
        return this.searchPaths;
    }
    /**
     * @return A `ssh_auth` block as defined below.
     * 
     */
    public List<GetSpringCloudServiceConfigServerGitSettingRepositorySshAuth> sshAuths() {
        return this.sshAuths;
    }
    /**
     * @return The URI of the Git repository
     * 
     */
    public String uri() {
        return this.uri;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSpringCloudServiceConfigServerGitSettingRepository defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth> httpBasicAuths;
        private String label;
        private String name;
        private List<String> patterns;
        private List<String> searchPaths;
        private List<GetSpringCloudServiceConfigServerGitSettingRepositorySshAuth> sshAuths;
        private String uri;
        public Builder() {}
        public Builder(GetSpringCloudServiceConfigServerGitSettingRepository defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.httpBasicAuths = defaults.httpBasicAuths;
    	      this.label = defaults.label;
    	      this.name = defaults.name;
    	      this.patterns = defaults.patterns;
    	      this.searchPaths = defaults.searchPaths;
    	      this.sshAuths = defaults.sshAuths;
    	      this.uri = defaults.uri;
        }

        @CustomType.Setter
        public Builder httpBasicAuths(List<GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth> httpBasicAuths) {
            if (httpBasicAuths == null) {
              throw new MissingRequiredPropertyException("GetSpringCloudServiceConfigServerGitSettingRepository", "httpBasicAuths");
            }
            this.httpBasicAuths = httpBasicAuths;
            return this;
        }
        public Builder httpBasicAuths(GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth... httpBasicAuths) {
            return httpBasicAuths(List.of(httpBasicAuths));
        }
        @CustomType.Setter
        public Builder label(String label) {
            if (label == null) {
              throw new MissingRequiredPropertyException("GetSpringCloudServiceConfigServerGitSettingRepository", "label");
            }
            this.label = label;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetSpringCloudServiceConfigServerGitSettingRepository", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder patterns(List<String> patterns) {
            if (patterns == null) {
              throw new MissingRequiredPropertyException("GetSpringCloudServiceConfigServerGitSettingRepository", "patterns");
            }
            this.patterns = patterns;
            return this;
        }
        public Builder patterns(String... patterns) {
            return patterns(List.of(patterns));
        }
        @CustomType.Setter
        public Builder searchPaths(List<String> searchPaths) {
            if (searchPaths == null) {
              throw new MissingRequiredPropertyException("GetSpringCloudServiceConfigServerGitSettingRepository", "searchPaths");
            }
            this.searchPaths = searchPaths;
            return this;
        }
        public Builder searchPaths(String... searchPaths) {
            return searchPaths(List.of(searchPaths));
        }
        @CustomType.Setter
        public Builder sshAuths(List<GetSpringCloudServiceConfigServerGitSettingRepositorySshAuth> sshAuths) {
            if (sshAuths == null) {
              throw new MissingRequiredPropertyException("GetSpringCloudServiceConfigServerGitSettingRepository", "sshAuths");
            }
            this.sshAuths = sshAuths;
            return this;
        }
        public Builder sshAuths(GetSpringCloudServiceConfigServerGitSettingRepositorySshAuth... sshAuths) {
            return sshAuths(List.of(sshAuths));
        }
        @CustomType.Setter
        public Builder uri(String uri) {
            if (uri == null) {
              throw new MissingRequiredPropertyException("GetSpringCloudServiceConfigServerGitSettingRepository", "uri");
            }
            this.uri = uri;
            return this;
        }
        public GetSpringCloudServiceConfigServerGitSettingRepository build() {
            final var _resultValue = new GetSpringCloudServiceConfigServerGitSettingRepository();
            _resultValue.httpBasicAuths = httpBasicAuths;
            _resultValue.label = label;
            _resultValue.name = name;
            _resultValue.patterns = patterns;
            _resultValue.searchPaths = searchPaths;
            _resultValue.sshAuths = sshAuths;
            _resultValue.uri = uri;
            return _resultValue;
        }
    }
}
