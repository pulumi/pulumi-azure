// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerservice.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class KubernetesClusterAzureActiveDirectoryRoleBasedAccessControl {
    /**
     * @return A list of Object IDs of Azure Active Directory Groups which should have Admin Role on the Cluster.
     * 
     */
    private @Nullable List<String> adminGroupObjectIds;
    /**
     * @return Is Role Based Access Control based on Azure AD enabled?
     * 
     */
    private @Nullable Boolean azureRbacEnabled;
    /**
     * @return The Client ID of an Azure Active Directory Application.
     * 
     */
    private @Nullable String clientAppId;
    /**
     * @return Is the Azure Active Directory integration Managed, meaning that Azure will create/manage the Service Principal used for integration.
     * 
     */
    private @Nullable Boolean managed;
    /**
     * @return The Server ID of an Azure Active Directory Application.
     * 
     */
    private @Nullable String serverAppId;
    /**
     * @return The Server Secret of an Azure Active Directory Application.
     * 
     */
    private @Nullable String serverAppSecret;
    /**
     * @return The Tenant ID used for Azure Active Directory Application. If this isn&#39;t specified the Tenant ID of the current Subscription is used.
     * 
     */
    private @Nullable String tenantId;

    private KubernetesClusterAzureActiveDirectoryRoleBasedAccessControl() {}
    /**
     * @return A list of Object IDs of Azure Active Directory Groups which should have Admin Role on the Cluster.
     * 
     */
    public List<String> adminGroupObjectIds() {
        return this.adminGroupObjectIds == null ? List.of() : this.adminGroupObjectIds;
    }
    /**
     * @return Is Role Based Access Control based on Azure AD enabled?
     * 
     */
    public Optional<Boolean> azureRbacEnabled() {
        return Optional.ofNullable(this.azureRbacEnabled);
    }
    /**
     * @return The Client ID of an Azure Active Directory Application.
     * 
     */
    public Optional<String> clientAppId() {
        return Optional.ofNullable(this.clientAppId);
    }
    /**
     * @return Is the Azure Active Directory integration Managed, meaning that Azure will create/manage the Service Principal used for integration.
     * 
     */
    public Optional<Boolean> managed() {
        return Optional.ofNullable(this.managed);
    }
    /**
     * @return The Server ID of an Azure Active Directory Application.
     * 
     */
    public Optional<String> serverAppId() {
        return Optional.ofNullable(this.serverAppId);
    }
    /**
     * @return The Server Secret of an Azure Active Directory Application.
     * 
     */
    public Optional<String> serverAppSecret() {
        return Optional.ofNullable(this.serverAppSecret);
    }
    /**
     * @return The Tenant ID used for Azure Active Directory Application. If this isn&#39;t specified the Tenant ID of the current Subscription is used.
     * 
     */
    public Optional<String> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(KubernetesClusterAzureActiveDirectoryRoleBasedAccessControl defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> adminGroupObjectIds;
        private @Nullable Boolean azureRbacEnabled;
        private @Nullable String clientAppId;
        private @Nullable Boolean managed;
        private @Nullable String serverAppId;
        private @Nullable String serverAppSecret;
        private @Nullable String tenantId;
        public Builder() {}
        public Builder(KubernetesClusterAzureActiveDirectoryRoleBasedAccessControl defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adminGroupObjectIds = defaults.adminGroupObjectIds;
    	      this.azureRbacEnabled = defaults.azureRbacEnabled;
    	      this.clientAppId = defaults.clientAppId;
    	      this.managed = defaults.managed;
    	      this.serverAppId = defaults.serverAppId;
    	      this.serverAppSecret = defaults.serverAppSecret;
    	      this.tenantId = defaults.tenantId;
        }

        @CustomType.Setter
        public Builder adminGroupObjectIds(@Nullable List<String> adminGroupObjectIds) {

            this.adminGroupObjectIds = adminGroupObjectIds;
            return this;
        }
        public Builder adminGroupObjectIds(String... adminGroupObjectIds) {
            return adminGroupObjectIds(List.of(adminGroupObjectIds));
        }
        @CustomType.Setter
        public Builder azureRbacEnabled(@Nullable Boolean azureRbacEnabled) {

            this.azureRbacEnabled = azureRbacEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder clientAppId(@Nullable String clientAppId) {

            this.clientAppId = clientAppId;
            return this;
        }
        @CustomType.Setter
        public Builder managed(@Nullable Boolean managed) {

            this.managed = managed;
            return this;
        }
        @CustomType.Setter
        public Builder serverAppId(@Nullable String serverAppId) {

            this.serverAppId = serverAppId;
            return this;
        }
        @CustomType.Setter
        public Builder serverAppSecret(@Nullable String serverAppSecret) {

            this.serverAppSecret = serverAppSecret;
            return this;
        }
        @CustomType.Setter
        public Builder tenantId(@Nullable String tenantId) {

            this.tenantId = tenantId;
            return this;
        }
        public KubernetesClusterAzureActiveDirectoryRoleBasedAccessControl build() {
            final var _resultValue = new KubernetesClusterAzureActiveDirectoryRoleBasedAccessControl();
            _resultValue.adminGroupObjectIds = adminGroupObjectIds;
            _resultValue.azureRbacEnabled = azureRbacEnabled;
            _resultValue.clientAppId = clientAppId;
            _resultValue.managed = managed;
            _resultValue.serverAppId = serverAppId;
            _resultValue.serverAppSecret = serverAppSecret;
            _resultValue.tenantId = tenantId;
            return _resultValue;
        }
    }
}
