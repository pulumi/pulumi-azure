// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.sql.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetDatabaseResult {
    /**
     * @return The name of the collation.
     * 
     */
    private final String collation;
    /**
     * @return The default secondary location of the SQL Database.
     * 
     */
    private final String defaultSecondaryLocation;
    /**
     * @return The edition of the database.
     * 
     */
    private final String edition;
    /**
     * @return The name of the elastic database pool the database belongs to.
     * 
     */
    private final String elasticPoolName;
    /**
     * @return The ID of the failover group the database belongs to.
     * 
     */
    private final String failoverGroupId;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * @return The location of the Resource Group in which the SQL Server exists.
     * 
     */
    private final String location;
    /**
     * @return The name of the database.
     * 
     */
    private final String name;
    /**
     * @return Indicate if read-only connections will be redirected to a high-available replica.
     * 
     */
    private final Boolean readScale;
    /**
     * @return The name of the resource group in which the database resides. This will always be the same resource group as the Database Server.
     * 
     */
    private final String resourceGroupName;
    /**
     * @return The name of the SQL Server on which to create the database.
     * 
     */
    private final String serverName;
    /**
     * @return A mapping of tags assigned to the resource.
     * 
     */
    private final @Nullable Map<String,String> tags;

    @CustomType.Constructor
    private GetDatabaseResult(
        @CustomType.Parameter("collation") String collation,
        @CustomType.Parameter("defaultSecondaryLocation") String defaultSecondaryLocation,
        @CustomType.Parameter("edition") String edition,
        @CustomType.Parameter("elasticPoolName") String elasticPoolName,
        @CustomType.Parameter("failoverGroupId") String failoverGroupId,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("location") String location,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("readScale") Boolean readScale,
        @CustomType.Parameter("resourceGroupName") String resourceGroupName,
        @CustomType.Parameter("serverName") String serverName,
        @CustomType.Parameter("tags") @Nullable Map<String,String> tags) {
        this.collation = collation;
        this.defaultSecondaryLocation = defaultSecondaryLocation;
        this.edition = edition;
        this.elasticPoolName = elasticPoolName;
        this.failoverGroupId = failoverGroupId;
        this.id = id;
        this.location = location;
        this.name = name;
        this.readScale = readScale;
        this.resourceGroupName = resourceGroupName;
        this.serverName = serverName;
        this.tags = tags;
    }

    /**
     * @return The name of the collation.
     * 
     */
    public String collation() {
        return this.collation;
    }
    /**
     * @return The default secondary location of the SQL Database.
     * 
     */
    public String defaultSecondaryLocation() {
        return this.defaultSecondaryLocation;
    }
    /**
     * @return The edition of the database.
     * 
     */
    public String edition() {
        return this.edition;
    }
    /**
     * @return The name of the elastic database pool the database belongs to.
     * 
     */
    public String elasticPoolName() {
        return this.elasticPoolName;
    }
    /**
     * @return The ID of the failover group the database belongs to.
     * 
     */
    public String failoverGroupId() {
        return this.failoverGroupId;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The location of the Resource Group in which the SQL Server exists.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return The name of the database.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Indicate if read-only connections will be redirected to a high-available replica.
     * 
     */
    public Boolean readScale() {
        return this.readScale;
    }
    /**
     * @return The name of the resource group in which the database resides. This will always be the same resource group as the Database Server.
     * 
     */
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return The name of the SQL Server on which to create the database.
     * 
     */
    public String serverName() {
        return this.serverName;
    }
    /**
     * @return A mapping of tags assigned to the resource.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabaseResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String collation;
        private String defaultSecondaryLocation;
        private String edition;
        private String elasticPoolName;
        private String failoverGroupId;
        private String id;
        private String location;
        private String name;
        private Boolean readScale;
        private String resourceGroupName;
        private String serverName;
        private @Nullable Map<String,String> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(GetDatabaseResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.collation = defaults.collation;
    	      this.defaultSecondaryLocation = defaults.defaultSecondaryLocation;
    	      this.edition = defaults.edition;
    	      this.elasticPoolName = defaults.elasticPoolName;
    	      this.failoverGroupId = defaults.failoverGroupId;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.readScale = defaults.readScale;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.serverName = defaults.serverName;
    	      this.tags = defaults.tags;
        }

        public Builder collation(String collation) {
            this.collation = Objects.requireNonNull(collation);
            return this;
        }
        public Builder defaultSecondaryLocation(String defaultSecondaryLocation) {
            this.defaultSecondaryLocation = Objects.requireNonNull(defaultSecondaryLocation);
            return this;
        }
        public Builder edition(String edition) {
            this.edition = Objects.requireNonNull(edition);
            return this;
        }
        public Builder elasticPoolName(String elasticPoolName) {
            this.elasticPoolName = Objects.requireNonNull(elasticPoolName);
            return this;
        }
        public Builder failoverGroupId(String failoverGroupId) {
            this.failoverGroupId = Objects.requireNonNull(failoverGroupId);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder readScale(Boolean readScale) {
            this.readScale = Objects.requireNonNull(readScale);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder serverName(String serverName) {
            this.serverName = Objects.requireNonNull(serverName);
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }        public GetDatabaseResult build() {
            return new GetDatabaseResult(collation, defaultSecondaryLocation, edition, elasticPoolName, failoverGroupId, id, location, name, readScale, resourceGroupName, serverName, tags);
        }
    }
}
