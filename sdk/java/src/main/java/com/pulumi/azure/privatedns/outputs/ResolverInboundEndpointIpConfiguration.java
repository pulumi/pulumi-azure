// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.privatedns.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ResolverInboundEndpointIpConfiguration {
    /**
     * @return Private IP address of the IP configuration.
     * 
     */
    private @Nullable String privateIpAddress;
    /**
     * @return Private IP address allocation method. Allowed value is `Dynamic`. Defaults to `Dynamic`.
     * 
     */
    private @Nullable String privateIpAllocationMethod;
    /**
     * @return The subnet ID of the IP configuration.
     * 
     */
    private String subnetId;

    private ResolverInboundEndpointIpConfiguration() {}
    /**
     * @return Private IP address of the IP configuration.
     * 
     */
    public Optional<String> privateIpAddress() {
        return Optional.ofNullable(this.privateIpAddress);
    }
    /**
     * @return Private IP address allocation method. Allowed value is `Dynamic`. Defaults to `Dynamic`.
     * 
     */
    public Optional<String> privateIpAllocationMethod() {
        return Optional.ofNullable(this.privateIpAllocationMethod);
    }
    /**
     * @return The subnet ID of the IP configuration.
     * 
     */
    public String subnetId() {
        return this.subnetId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ResolverInboundEndpointIpConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String privateIpAddress;
        private @Nullable String privateIpAllocationMethod;
        private String subnetId;
        public Builder() {}
        public Builder(ResolverInboundEndpointIpConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.privateIpAddress = defaults.privateIpAddress;
    	      this.privateIpAllocationMethod = defaults.privateIpAllocationMethod;
    	      this.subnetId = defaults.subnetId;
        }

        @CustomType.Setter
        public Builder privateIpAddress(@Nullable String privateIpAddress) {

            this.privateIpAddress = privateIpAddress;
            return this;
        }
        @CustomType.Setter
        public Builder privateIpAllocationMethod(@Nullable String privateIpAllocationMethod) {

            this.privateIpAllocationMethod = privateIpAllocationMethod;
            return this;
        }
        @CustomType.Setter
        public Builder subnetId(String subnetId) {
            if (subnetId == null) {
              throw new MissingRequiredPropertyException("ResolverInboundEndpointIpConfiguration", "subnetId");
            }
            this.subnetId = subnetId;
            return this;
        }
        public ResolverInboundEndpointIpConfiguration build() {
            final var _resultValue = new ResolverInboundEndpointIpConfiguration();
            _resultValue.privateIpAddress = privateIpAddress;
            _resultValue.privateIpAllocationMethod = privateIpAllocationMethod;
            _resultValue.subnetId = subnetId;
            return _resultValue;
        }
    }
}
