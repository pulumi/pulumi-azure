// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.keyvault.inputs;

import com.pulumi.azure.keyvault.inputs.CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CertificateCertificatePolicyX509CertificatePropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final CertificateCertificatePolicyX509CertificatePropertiesArgs Empty = new CertificateCertificatePolicyX509CertificatePropertiesArgs();

    /**
     * A list of Extended/Enhanced Key Usages.
     * 
     */
    @Import(name="extendedKeyUsages")
    private @Nullable Output<List<String>> extendedKeyUsages;

    /**
     * @return A list of Extended/Enhanced Key Usages.
     * 
     */
    public Optional<Output<List<String>>> extendedKeyUsages() {
        return Optional.ofNullable(this.extendedKeyUsages);
    }

    /**
     * A list of uses associated with this Key. Possible values include `cRLSign`, `dataEncipherment`, `decipherOnly`, `digitalSignature`, `encipherOnly`, `keyAgreement`, `keyCertSign`, `keyEncipherment` and `nonRepudiation` and are case-sensitive.
     * 
     */
    @Import(name="keyUsages", required=true)
    private Output<List<String>> keyUsages;

    /**
     * @return A list of uses associated with this Key. Possible values include `cRLSign`, `dataEncipherment`, `decipherOnly`, `digitalSignature`, `encipherOnly`, `keyAgreement`, `keyCertSign`, `keyEncipherment` and `nonRepudiation` and are case-sensitive.
     * 
     */
    public Output<List<String>> keyUsages() {
        return this.keyUsages;
    }

    /**
     * The Certificate&#39;s Subject.
     * 
     */
    @Import(name="subject", required=true)
    private Output<String> subject;

    /**
     * @return The Certificate&#39;s Subject.
     * 
     */
    public Output<String> subject() {
        return this.subject;
    }

    /**
     * A `subject_alternative_names` block as defined below.
     * 
     */
    @Import(name="subjectAlternativeNames")
    private @Nullable Output<CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesArgs> subjectAlternativeNames;

    /**
     * @return A `subject_alternative_names` block as defined below.
     * 
     */
    public Optional<Output<CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesArgs>> subjectAlternativeNames() {
        return Optional.ofNullable(this.subjectAlternativeNames);
    }

    /**
     * The Certificates Validity Period in Months.
     * 
     */
    @Import(name="validityInMonths", required=true)
    private Output<Integer> validityInMonths;

    /**
     * @return The Certificates Validity Period in Months.
     * 
     */
    public Output<Integer> validityInMonths() {
        return this.validityInMonths;
    }

    private CertificateCertificatePolicyX509CertificatePropertiesArgs() {}

    private CertificateCertificatePolicyX509CertificatePropertiesArgs(CertificateCertificatePolicyX509CertificatePropertiesArgs $) {
        this.extendedKeyUsages = $.extendedKeyUsages;
        this.keyUsages = $.keyUsages;
        this.subject = $.subject;
        this.subjectAlternativeNames = $.subjectAlternativeNames;
        this.validityInMonths = $.validityInMonths;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertificateCertificatePolicyX509CertificatePropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertificateCertificatePolicyX509CertificatePropertiesArgs $;

        public Builder() {
            $ = new CertificateCertificatePolicyX509CertificatePropertiesArgs();
        }

        public Builder(CertificateCertificatePolicyX509CertificatePropertiesArgs defaults) {
            $ = new CertificateCertificatePolicyX509CertificatePropertiesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param extendedKeyUsages A list of Extended/Enhanced Key Usages.
         * 
         * @return builder
         * 
         */
        public Builder extendedKeyUsages(@Nullable Output<List<String>> extendedKeyUsages) {
            $.extendedKeyUsages = extendedKeyUsages;
            return this;
        }

        /**
         * @param extendedKeyUsages A list of Extended/Enhanced Key Usages.
         * 
         * @return builder
         * 
         */
        public Builder extendedKeyUsages(List<String> extendedKeyUsages) {
            return extendedKeyUsages(Output.of(extendedKeyUsages));
        }

        /**
         * @param extendedKeyUsages A list of Extended/Enhanced Key Usages.
         * 
         * @return builder
         * 
         */
        public Builder extendedKeyUsages(String... extendedKeyUsages) {
            return extendedKeyUsages(List.of(extendedKeyUsages));
        }

        /**
         * @param keyUsages A list of uses associated with this Key. Possible values include `cRLSign`, `dataEncipherment`, `decipherOnly`, `digitalSignature`, `encipherOnly`, `keyAgreement`, `keyCertSign`, `keyEncipherment` and `nonRepudiation` and are case-sensitive.
         * 
         * @return builder
         * 
         */
        public Builder keyUsages(Output<List<String>> keyUsages) {
            $.keyUsages = keyUsages;
            return this;
        }

        /**
         * @param keyUsages A list of uses associated with this Key. Possible values include `cRLSign`, `dataEncipherment`, `decipherOnly`, `digitalSignature`, `encipherOnly`, `keyAgreement`, `keyCertSign`, `keyEncipherment` and `nonRepudiation` and are case-sensitive.
         * 
         * @return builder
         * 
         */
        public Builder keyUsages(List<String> keyUsages) {
            return keyUsages(Output.of(keyUsages));
        }

        /**
         * @param keyUsages A list of uses associated with this Key. Possible values include `cRLSign`, `dataEncipherment`, `decipherOnly`, `digitalSignature`, `encipherOnly`, `keyAgreement`, `keyCertSign`, `keyEncipherment` and `nonRepudiation` and are case-sensitive.
         * 
         * @return builder
         * 
         */
        public Builder keyUsages(String... keyUsages) {
            return keyUsages(List.of(keyUsages));
        }

        /**
         * @param subject The Certificate&#39;s Subject.
         * 
         * @return builder
         * 
         */
        public Builder subject(Output<String> subject) {
            $.subject = subject;
            return this;
        }

        /**
         * @param subject The Certificate&#39;s Subject.
         * 
         * @return builder
         * 
         */
        public Builder subject(String subject) {
            return subject(Output.of(subject));
        }

        /**
         * @param subjectAlternativeNames A `subject_alternative_names` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder subjectAlternativeNames(@Nullable Output<CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesArgs> subjectAlternativeNames) {
            $.subjectAlternativeNames = subjectAlternativeNames;
            return this;
        }

        /**
         * @param subjectAlternativeNames A `subject_alternative_names` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder subjectAlternativeNames(CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesArgs subjectAlternativeNames) {
            return subjectAlternativeNames(Output.of(subjectAlternativeNames));
        }

        /**
         * @param validityInMonths The Certificates Validity Period in Months.
         * 
         * @return builder
         * 
         */
        public Builder validityInMonths(Output<Integer> validityInMonths) {
            $.validityInMonths = validityInMonths;
            return this;
        }

        /**
         * @param validityInMonths The Certificates Validity Period in Months.
         * 
         * @return builder
         * 
         */
        public Builder validityInMonths(Integer validityInMonths) {
            return validityInMonths(Output.of(validityInMonths));
        }

        public CertificateCertificatePolicyX509CertificatePropertiesArgs build() {
            $.keyUsages = Objects.requireNonNull($.keyUsages, "expected parameter 'keyUsages' to be non-null");
            $.subject = Objects.requireNonNull($.subject, "expected parameter 'subject' to be non-null");
            $.validityInMonths = Objects.requireNonNull($.validityInMonths, "expected parameter 'validityInMonths' to be non-null");
            return $;
        }
    }

}
