// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appservice.outputs;

import com.pulumi.azure.appservice.outputs.GetLinuxFunctionAppAuthSetting;
import com.pulumi.azure.appservice.outputs.GetLinuxFunctionAppBackup;
import com.pulumi.azure.appservice.outputs.GetLinuxFunctionAppConnectionString;
import com.pulumi.azure.appservice.outputs.GetLinuxFunctionAppIdentity;
import com.pulumi.azure.appservice.outputs.GetLinuxFunctionAppSiteConfig;
import com.pulumi.azure.appservice.outputs.GetLinuxFunctionAppSiteCredential;
import com.pulumi.azure.appservice.outputs.GetLinuxFunctionAppStickySetting;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetLinuxFunctionAppResult {
    /**
     * @return A map of key-value pairs for [App Settings](https://docs.microsoft.com/azure/azure-functions/functions-app-settings) and custom values.
     * 
     */
    private final Map<String,String> appSettings;
    /**
     * @return A `auth_settings` block as defined below.
     * 
     */
    private final List<GetLinuxFunctionAppAuthSetting> authSettings;
    /**
     * @return A `backup` block as defined below.
     * 
     */
    private final List<GetLinuxFunctionAppBackup> backups;
    /**
     * @return Is built in logging enabled?
     * 
     */
    private final Boolean builtinLoggingEnabled;
    /**
     * @return Are Client Certificates enabled?
     * 
     */
    private final Boolean clientCertificateEnabled;
    /**
     * @return The mode of the Function App&#39;s client certificates requirement for incoming requests.
     * 
     */
    private final String clientCertificateMode;
    /**
     * @return A `connection_string` blocks as defined below.
     * 
     */
    private final List<GetLinuxFunctionAppConnectionString> connectionStrings;
    /**
     * @return Are the settings for linking the Function App to storage suppressed?
     * 
     */
    private final Boolean contentShareForceDisabled;
    /**
     * @return The identifier used by App Service to perform domain ownership verification via DNS TXT record.
     * 
     */
    private final String customDomainVerificationId;
    /**
     * @return The amount of memory in gigabyte-seconds that your application is allowed to consume per day.
     * 
     */
    private final Integer dailyMemoryTimeQuota;
    /**
     * @return The default hostname of the Linux Function App.
     * 
     */
    private final String defaultHostname;
    /**
     * @return Is this backup job enabled?
     * 
     */
    private final Boolean enabled;
    /**
     * @return The runtime version associated with the Function App.
     * 
     */
    private final String functionsExtensionVersion;
    /**
     * @return Can the Function App only be accessed via HTTPS?
     * 
     */
    private final Boolean httpsOnly;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * @return A `identity` block as defined below.
     * 
     */
    private final List<GetLinuxFunctionAppIdentity> identities;
    /**
     * @return The Kind value for this Linux Function App.
     * 
     */
    private final String kind;
    /**
     * @return The Azure Region where the Linux Function App exists.
     * 
     */
    private final String location;
    /**
     * @return The Site Credentials Username used for publishing.
     * 
     */
    private final String name;
    /**
     * @return A list of outbound IP addresses. For example `[&#34;52.23.25.3&#34;, &#34;52.143.43.12&#34;]`
     * 
     */
    private final List<String> outboundIpAddressLists;
    /**
     * @return A comma separated list of outbound IP addresses as a string. For example `52.23.25.3,52.143.43.12`.
     * 
     */
    private final String outboundIpAddresses;
    /**
     * @return A list of possible outbound IP addresses, not all of which are necessarily in use. This is a superset of `outbound_ip_address_list`. For example `[&#34;52.23.25.3&#34;, &#34;52.143.43.12&#34;]`.
     * 
     */
    private final List<String> possibleOutboundIpAddressLists;
    /**
     * @return A comma separated list of possible outbound IP addresses as a string. For example `52.23.25.3,52.143.43.12,52.143.43.17`. This is a superset of `outbound_ip_addresses`. For example `[&#34;52.23.25.3&#34;, &#34;52.143.43.12&#34;,&#34;52.143.43.17&#34;]`.
     * 
     */
    private final String possibleOutboundIpAddresses;
    private final String resourceGroupName;
    /**
     * @return The ID of the App Service Plan within which this Function App has been created.
     * 
     */
    private final String servicePlanId;
    /**
     * @return A `site_config` block as defined below.
     * 
     */
    private final List<GetLinuxFunctionAppSiteConfig> siteConfigs;
    /**
     * @return A `site_credential` block as defined below.
     * 
     */
    private final List<GetLinuxFunctionAppSiteCredential> siteCredentials;
    /**
     * @return A `sticky_settings` block as defined below.
     * 
     */
    private final List<GetLinuxFunctionAppStickySetting> stickySettings;
    /**
     * @return The access key used to access the backend storage account for the Function App.
     * 
     */
    private final String storageAccountAccessKey;
    /**
     * @return The backend storage account name used by this Function App.
     * 
     */
    private final String storageAccountName;
    /**
     * @return The Key Vault Secret ID, including version, that contains the Connection String to connect to the storage account for this Function App.
     * 
     */
    private final String storageKeyVaultSecretId;
    /**
     * @return Does the Function App use Managed Identity to access the storage account?
     * 
     */
    private final Boolean storageUsesManagedIdentity;
    /**
     * @return A mapping of tags which are assigned to the Linux Function App.
     * 
     */
    private final Map<String,String> tags;
    /**
     * @return The Virtual Network Subnet ID used for this IP Restriction.
     * 
     */
    private final String virtualNetworkSubnetId;

    @CustomType.Constructor
    private GetLinuxFunctionAppResult(
        @CustomType.Parameter("appSettings") Map<String,String> appSettings,
        @CustomType.Parameter("authSettings") List<GetLinuxFunctionAppAuthSetting> authSettings,
        @CustomType.Parameter("backups") List<GetLinuxFunctionAppBackup> backups,
        @CustomType.Parameter("builtinLoggingEnabled") Boolean builtinLoggingEnabled,
        @CustomType.Parameter("clientCertificateEnabled") Boolean clientCertificateEnabled,
        @CustomType.Parameter("clientCertificateMode") String clientCertificateMode,
        @CustomType.Parameter("connectionStrings") List<GetLinuxFunctionAppConnectionString> connectionStrings,
        @CustomType.Parameter("contentShareForceDisabled") Boolean contentShareForceDisabled,
        @CustomType.Parameter("customDomainVerificationId") String customDomainVerificationId,
        @CustomType.Parameter("dailyMemoryTimeQuota") Integer dailyMemoryTimeQuota,
        @CustomType.Parameter("defaultHostname") String defaultHostname,
        @CustomType.Parameter("enabled") Boolean enabled,
        @CustomType.Parameter("functionsExtensionVersion") String functionsExtensionVersion,
        @CustomType.Parameter("httpsOnly") Boolean httpsOnly,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("identities") List<GetLinuxFunctionAppIdentity> identities,
        @CustomType.Parameter("kind") String kind,
        @CustomType.Parameter("location") String location,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("outboundIpAddressLists") List<String> outboundIpAddressLists,
        @CustomType.Parameter("outboundIpAddresses") String outboundIpAddresses,
        @CustomType.Parameter("possibleOutboundIpAddressLists") List<String> possibleOutboundIpAddressLists,
        @CustomType.Parameter("possibleOutboundIpAddresses") String possibleOutboundIpAddresses,
        @CustomType.Parameter("resourceGroupName") String resourceGroupName,
        @CustomType.Parameter("servicePlanId") String servicePlanId,
        @CustomType.Parameter("siteConfigs") List<GetLinuxFunctionAppSiteConfig> siteConfigs,
        @CustomType.Parameter("siteCredentials") List<GetLinuxFunctionAppSiteCredential> siteCredentials,
        @CustomType.Parameter("stickySettings") List<GetLinuxFunctionAppStickySetting> stickySettings,
        @CustomType.Parameter("storageAccountAccessKey") String storageAccountAccessKey,
        @CustomType.Parameter("storageAccountName") String storageAccountName,
        @CustomType.Parameter("storageKeyVaultSecretId") String storageKeyVaultSecretId,
        @CustomType.Parameter("storageUsesManagedIdentity") Boolean storageUsesManagedIdentity,
        @CustomType.Parameter("tags") Map<String,String> tags,
        @CustomType.Parameter("virtualNetworkSubnetId") String virtualNetworkSubnetId) {
        this.appSettings = appSettings;
        this.authSettings = authSettings;
        this.backups = backups;
        this.builtinLoggingEnabled = builtinLoggingEnabled;
        this.clientCertificateEnabled = clientCertificateEnabled;
        this.clientCertificateMode = clientCertificateMode;
        this.connectionStrings = connectionStrings;
        this.contentShareForceDisabled = contentShareForceDisabled;
        this.customDomainVerificationId = customDomainVerificationId;
        this.dailyMemoryTimeQuota = dailyMemoryTimeQuota;
        this.defaultHostname = defaultHostname;
        this.enabled = enabled;
        this.functionsExtensionVersion = functionsExtensionVersion;
        this.httpsOnly = httpsOnly;
        this.id = id;
        this.identities = identities;
        this.kind = kind;
        this.location = location;
        this.name = name;
        this.outboundIpAddressLists = outboundIpAddressLists;
        this.outboundIpAddresses = outboundIpAddresses;
        this.possibleOutboundIpAddressLists = possibleOutboundIpAddressLists;
        this.possibleOutboundIpAddresses = possibleOutboundIpAddresses;
        this.resourceGroupName = resourceGroupName;
        this.servicePlanId = servicePlanId;
        this.siteConfigs = siteConfigs;
        this.siteCredentials = siteCredentials;
        this.stickySettings = stickySettings;
        this.storageAccountAccessKey = storageAccountAccessKey;
        this.storageAccountName = storageAccountName;
        this.storageKeyVaultSecretId = storageKeyVaultSecretId;
        this.storageUsesManagedIdentity = storageUsesManagedIdentity;
        this.tags = tags;
        this.virtualNetworkSubnetId = virtualNetworkSubnetId;
    }

    /**
     * @return A map of key-value pairs for [App Settings](https://docs.microsoft.com/azure/azure-functions/functions-app-settings) and custom values.
     * 
     */
    public Map<String,String> appSettings() {
        return this.appSettings;
    }
    /**
     * @return A `auth_settings` block as defined below.
     * 
     */
    public List<GetLinuxFunctionAppAuthSetting> authSettings() {
        return this.authSettings;
    }
    /**
     * @return A `backup` block as defined below.
     * 
     */
    public List<GetLinuxFunctionAppBackup> backups() {
        return this.backups;
    }
    /**
     * @return Is built in logging enabled?
     * 
     */
    public Boolean builtinLoggingEnabled() {
        return this.builtinLoggingEnabled;
    }
    /**
     * @return Are Client Certificates enabled?
     * 
     */
    public Boolean clientCertificateEnabled() {
        return this.clientCertificateEnabled;
    }
    /**
     * @return The mode of the Function App&#39;s client certificates requirement for incoming requests.
     * 
     */
    public String clientCertificateMode() {
        return this.clientCertificateMode;
    }
    /**
     * @return A `connection_string` blocks as defined below.
     * 
     */
    public List<GetLinuxFunctionAppConnectionString> connectionStrings() {
        return this.connectionStrings;
    }
    /**
     * @return Are the settings for linking the Function App to storage suppressed?
     * 
     */
    public Boolean contentShareForceDisabled() {
        return this.contentShareForceDisabled;
    }
    /**
     * @return The identifier used by App Service to perform domain ownership verification via DNS TXT record.
     * 
     */
    public String customDomainVerificationId() {
        return this.customDomainVerificationId;
    }
    /**
     * @return The amount of memory in gigabyte-seconds that your application is allowed to consume per day.
     * 
     */
    public Integer dailyMemoryTimeQuota() {
        return this.dailyMemoryTimeQuota;
    }
    /**
     * @return The default hostname of the Linux Function App.
     * 
     */
    public String defaultHostname() {
        return this.defaultHostname;
    }
    /**
     * @return Is this backup job enabled?
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return The runtime version associated with the Function App.
     * 
     */
    public String functionsExtensionVersion() {
        return this.functionsExtensionVersion;
    }
    /**
     * @return Can the Function App only be accessed via HTTPS?
     * 
     */
    public Boolean httpsOnly() {
        return this.httpsOnly;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A `identity` block as defined below.
     * 
     */
    public List<GetLinuxFunctionAppIdentity> identities() {
        return this.identities;
    }
    /**
     * @return The Kind value for this Linux Function App.
     * 
     */
    public String kind() {
        return this.kind;
    }
    /**
     * @return The Azure Region where the Linux Function App exists.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return The Site Credentials Username used for publishing.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return A list of outbound IP addresses. For example `[&#34;52.23.25.3&#34;, &#34;52.143.43.12&#34;]`
     * 
     */
    public List<String> outboundIpAddressLists() {
        return this.outboundIpAddressLists;
    }
    /**
     * @return A comma separated list of outbound IP addresses as a string. For example `52.23.25.3,52.143.43.12`.
     * 
     */
    public String outboundIpAddresses() {
        return this.outboundIpAddresses;
    }
    /**
     * @return A list of possible outbound IP addresses, not all of which are necessarily in use. This is a superset of `outbound_ip_address_list`. For example `[&#34;52.23.25.3&#34;, &#34;52.143.43.12&#34;]`.
     * 
     */
    public List<String> possibleOutboundIpAddressLists() {
        return this.possibleOutboundIpAddressLists;
    }
    /**
     * @return A comma separated list of possible outbound IP addresses as a string. For example `52.23.25.3,52.143.43.12,52.143.43.17`. This is a superset of `outbound_ip_addresses`. For example `[&#34;52.23.25.3&#34;, &#34;52.143.43.12&#34;,&#34;52.143.43.17&#34;]`.
     * 
     */
    public String possibleOutboundIpAddresses() {
        return this.possibleOutboundIpAddresses;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return The ID of the App Service Plan within which this Function App has been created.
     * 
     */
    public String servicePlanId() {
        return this.servicePlanId;
    }
    /**
     * @return A `site_config` block as defined below.
     * 
     */
    public List<GetLinuxFunctionAppSiteConfig> siteConfigs() {
        return this.siteConfigs;
    }
    /**
     * @return A `site_credential` block as defined below.
     * 
     */
    public List<GetLinuxFunctionAppSiteCredential> siteCredentials() {
        return this.siteCredentials;
    }
    /**
     * @return A `sticky_settings` block as defined below.
     * 
     */
    public List<GetLinuxFunctionAppStickySetting> stickySettings() {
        return this.stickySettings;
    }
    /**
     * @return The access key used to access the backend storage account for the Function App.
     * 
     */
    public String storageAccountAccessKey() {
        return this.storageAccountAccessKey;
    }
    /**
     * @return The backend storage account name used by this Function App.
     * 
     */
    public String storageAccountName() {
        return this.storageAccountName;
    }
    /**
     * @return The Key Vault Secret ID, including version, that contains the Connection String to connect to the storage account for this Function App.
     * 
     */
    public String storageKeyVaultSecretId() {
        return this.storageKeyVaultSecretId;
    }
    /**
     * @return Does the Function App use Managed Identity to access the storage account?
     * 
     */
    public Boolean storageUsesManagedIdentity() {
        return this.storageUsesManagedIdentity;
    }
    /**
     * @return A mapping of tags which are assigned to the Linux Function App.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return The Virtual Network Subnet ID used for this IP Restriction.
     * 
     */
    public String virtualNetworkSubnetId() {
        return this.virtualNetworkSubnetId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLinuxFunctionAppResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Map<String,String> appSettings;
        private List<GetLinuxFunctionAppAuthSetting> authSettings;
        private List<GetLinuxFunctionAppBackup> backups;
        private Boolean builtinLoggingEnabled;
        private Boolean clientCertificateEnabled;
        private String clientCertificateMode;
        private List<GetLinuxFunctionAppConnectionString> connectionStrings;
        private Boolean contentShareForceDisabled;
        private String customDomainVerificationId;
        private Integer dailyMemoryTimeQuota;
        private String defaultHostname;
        private Boolean enabled;
        private String functionsExtensionVersion;
        private Boolean httpsOnly;
        private String id;
        private List<GetLinuxFunctionAppIdentity> identities;
        private String kind;
        private String location;
        private String name;
        private List<String> outboundIpAddressLists;
        private String outboundIpAddresses;
        private List<String> possibleOutboundIpAddressLists;
        private String possibleOutboundIpAddresses;
        private String resourceGroupName;
        private String servicePlanId;
        private List<GetLinuxFunctionAppSiteConfig> siteConfigs;
        private List<GetLinuxFunctionAppSiteCredential> siteCredentials;
        private List<GetLinuxFunctionAppStickySetting> stickySettings;
        private String storageAccountAccessKey;
        private String storageAccountName;
        private String storageKeyVaultSecretId;
        private Boolean storageUsesManagedIdentity;
        private Map<String,String> tags;
        private String virtualNetworkSubnetId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetLinuxFunctionAppResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appSettings = defaults.appSettings;
    	      this.authSettings = defaults.authSettings;
    	      this.backups = defaults.backups;
    	      this.builtinLoggingEnabled = defaults.builtinLoggingEnabled;
    	      this.clientCertificateEnabled = defaults.clientCertificateEnabled;
    	      this.clientCertificateMode = defaults.clientCertificateMode;
    	      this.connectionStrings = defaults.connectionStrings;
    	      this.contentShareForceDisabled = defaults.contentShareForceDisabled;
    	      this.customDomainVerificationId = defaults.customDomainVerificationId;
    	      this.dailyMemoryTimeQuota = defaults.dailyMemoryTimeQuota;
    	      this.defaultHostname = defaults.defaultHostname;
    	      this.enabled = defaults.enabled;
    	      this.functionsExtensionVersion = defaults.functionsExtensionVersion;
    	      this.httpsOnly = defaults.httpsOnly;
    	      this.id = defaults.id;
    	      this.identities = defaults.identities;
    	      this.kind = defaults.kind;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.outboundIpAddressLists = defaults.outboundIpAddressLists;
    	      this.outboundIpAddresses = defaults.outboundIpAddresses;
    	      this.possibleOutboundIpAddressLists = defaults.possibleOutboundIpAddressLists;
    	      this.possibleOutboundIpAddresses = defaults.possibleOutboundIpAddresses;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.servicePlanId = defaults.servicePlanId;
    	      this.siteConfigs = defaults.siteConfigs;
    	      this.siteCredentials = defaults.siteCredentials;
    	      this.stickySettings = defaults.stickySettings;
    	      this.storageAccountAccessKey = defaults.storageAccountAccessKey;
    	      this.storageAccountName = defaults.storageAccountName;
    	      this.storageKeyVaultSecretId = defaults.storageKeyVaultSecretId;
    	      this.storageUsesManagedIdentity = defaults.storageUsesManagedIdentity;
    	      this.tags = defaults.tags;
    	      this.virtualNetworkSubnetId = defaults.virtualNetworkSubnetId;
        }

        public Builder appSettings(Map<String,String> appSettings) {
            this.appSettings = Objects.requireNonNull(appSettings);
            return this;
        }
        public Builder authSettings(List<GetLinuxFunctionAppAuthSetting> authSettings) {
            this.authSettings = Objects.requireNonNull(authSettings);
            return this;
        }
        public Builder authSettings(GetLinuxFunctionAppAuthSetting... authSettings) {
            return authSettings(List.of(authSettings));
        }
        public Builder backups(List<GetLinuxFunctionAppBackup> backups) {
            this.backups = Objects.requireNonNull(backups);
            return this;
        }
        public Builder backups(GetLinuxFunctionAppBackup... backups) {
            return backups(List.of(backups));
        }
        public Builder builtinLoggingEnabled(Boolean builtinLoggingEnabled) {
            this.builtinLoggingEnabled = Objects.requireNonNull(builtinLoggingEnabled);
            return this;
        }
        public Builder clientCertificateEnabled(Boolean clientCertificateEnabled) {
            this.clientCertificateEnabled = Objects.requireNonNull(clientCertificateEnabled);
            return this;
        }
        public Builder clientCertificateMode(String clientCertificateMode) {
            this.clientCertificateMode = Objects.requireNonNull(clientCertificateMode);
            return this;
        }
        public Builder connectionStrings(List<GetLinuxFunctionAppConnectionString> connectionStrings) {
            this.connectionStrings = Objects.requireNonNull(connectionStrings);
            return this;
        }
        public Builder connectionStrings(GetLinuxFunctionAppConnectionString... connectionStrings) {
            return connectionStrings(List.of(connectionStrings));
        }
        public Builder contentShareForceDisabled(Boolean contentShareForceDisabled) {
            this.contentShareForceDisabled = Objects.requireNonNull(contentShareForceDisabled);
            return this;
        }
        public Builder customDomainVerificationId(String customDomainVerificationId) {
            this.customDomainVerificationId = Objects.requireNonNull(customDomainVerificationId);
            return this;
        }
        public Builder dailyMemoryTimeQuota(Integer dailyMemoryTimeQuota) {
            this.dailyMemoryTimeQuota = Objects.requireNonNull(dailyMemoryTimeQuota);
            return this;
        }
        public Builder defaultHostname(String defaultHostname) {
            this.defaultHostname = Objects.requireNonNull(defaultHostname);
            return this;
        }
        public Builder enabled(Boolean enabled) {
            this.enabled = Objects.requireNonNull(enabled);
            return this;
        }
        public Builder functionsExtensionVersion(String functionsExtensionVersion) {
            this.functionsExtensionVersion = Objects.requireNonNull(functionsExtensionVersion);
            return this;
        }
        public Builder httpsOnly(Boolean httpsOnly) {
            this.httpsOnly = Objects.requireNonNull(httpsOnly);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder identities(List<GetLinuxFunctionAppIdentity> identities) {
            this.identities = Objects.requireNonNull(identities);
            return this;
        }
        public Builder identities(GetLinuxFunctionAppIdentity... identities) {
            return identities(List.of(identities));
        }
        public Builder kind(String kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder outboundIpAddressLists(List<String> outboundIpAddressLists) {
            this.outboundIpAddressLists = Objects.requireNonNull(outboundIpAddressLists);
            return this;
        }
        public Builder outboundIpAddressLists(String... outboundIpAddressLists) {
            return outboundIpAddressLists(List.of(outboundIpAddressLists));
        }
        public Builder outboundIpAddresses(String outboundIpAddresses) {
            this.outboundIpAddresses = Objects.requireNonNull(outboundIpAddresses);
            return this;
        }
        public Builder possibleOutboundIpAddressLists(List<String> possibleOutboundIpAddressLists) {
            this.possibleOutboundIpAddressLists = Objects.requireNonNull(possibleOutboundIpAddressLists);
            return this;
        }
        public Builder possibleOutboundIpAddressLists(String... possibleOutboundIpAddressLists) {
            return possibleOutboundIpAddressLists(List.of(possibleOutboundIpAddressLists));
        }
        public Builder possibleOutboundIpAddresses(String possibleOutboundIpAddresses) {
            this.possibleOutboundIpAddresses = Objects.requireNonNull(possibleOutboundIpAddresses);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder servicePlanId(String servicePlanId) {
            this.servicePlanId = Objects.requireNonNull(servicePlanId);
            return this;
        }
        public Builder siteConfigs(List<GetLinuxFunctionAppSiteConfig> siteConfigs) {
            this.siteConfigs = Objects.requireNonNull(siteConfigs);
            return this;
        }
        public Builder siteConfigs(GetLinuxFunctionAppSiteConfig... siteConfigs) {
            return siteConfigs(List.of(siteConfigs));
        }
        public Builder siteCredentials(List<GetLinuxFunctionAppSiteCredential> siteCredentials) {
            this.siteCredentials = Objects.requireNonNull(siteCredentials);
            return this;
        }
        public Builder siteCredentials(GetLinuxFunctionAppSiteCredential... siteCredentials) {
            return siteCredentials(List.of(siteCredentials));
        }
        public Builder stickySettings(List<GetLinuxFunctionAppStickySetting> stickySettings) {
            this.stickySettings = Objects.requireNonNull(stickySettings);
            return this;
        }
        public Builder stickySettings(GetLinuxFunctionAppStickySetting... stickySettings) {
            return stickySettings(List.of(stickySettings));
        }
        public Builder storageAccountAccessKey(String storageAccountAccessKey) {
            this.storageAccountAccessKey = Objects.requireNonNull(storageAccountAccessKey);
            return this;
        }
        public Builder storageAccountName(String storageAccountName) {
            this.storageAccountName = Objects.requireNonNull(storageAccountName);
            return this;
        }
        public Builder storageKeyVaultSecretId(String storageKeyVaultSecretId) {
            this.storageKeyVaultSecretId = Objects.requireNonNull(storageKeyVaultSecretId);
            return this;
        }
        public Builder storageUsesManagedIdentity(Boolean storageUsesManagedIdentity) {
            this.storageUsesManagedIdentity = Objects.requireNonNull(storageUsesManagedIdentity);
            return this;
        }
        public Builder tags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder virtualNetworkSubnetId(String virtualNetworkSubnetId) {
            this.virtualNetworkSubnetId = Objects.requireNonNull(virtualNetworkSubnetId);
            return this;
        }        public GetLinuxFunctionAppResult build() {
            return new GetLinuxFunctionAppResult(appSettings, authSettings, backups, builtinLoggingEnabled, clientCertificateEnabled, clientCertificateMode, connectionStrings, contentShareForceDisabled, customDomainVerificationId, dailyMemoryTimeQuota, defaultHostname, enabled, functionsExtensionVersion, httpsOnly, id, identities, kind, location, name, outboundIpAddressLists, outboundIpAddresses, possibleOutboundIpAddressLists, possibleOutboundIpAddresses, resourceGroupName, servicePlanId, siteConfigs, siteCredentials, stickySettings, storageAccountAccessKey, storageAccountName, storageKeyVaultSecretId, storageUsesManagedIdentity, tags, virtualNetworkSubnetId);
        }
    }
}
