// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ImageOsDiskArgs extends com.pulumi.resources.ResourceArgs {

    public static final ImageOsDiskArgs Empty = new ImageOsDiskArgs();

    /**
     * Specifies the URI in Azure storage of the blob that you want to use to create the image. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="blobUri")
    private @Nullable Output<String> blobUri;

    /**
     * @return Specifies the URI in Azure storage of the blob that you want to use to create the image. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> blobUri() {
        return Optional.ofNullable(this.blobUri);
    }

    /**
     * Specifies the caching mode as `ReadWrite`, `ReadOnly`, or `None`. The default is `None`.
     * 
     */
    @Import(name="caching")
    private @Nullable Output<String> caching;

    /**
     * @return Specifies the caching mode as `ReadWrite`, `ReadOnly`, or `None`. The default is `None`.
     * 
     */
    public Optional<Output<String>> caching() {
        return Optional.ofNullable(this.caching);
    }

    /**
     * The ID of the Disk Encryption Set which should be used to encrypt this image. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="diskEncryptionSetId")
    private @Nullable Output<String> diskEncryptionSetId;

    /**
     * @return The ID of the Disk Encryption Set which should be used to encrypt this image. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> diskEncryptionSetId() {
        return Optional.ofNullable(this.diskEncryptionSetId);
    }

    /**
     * Specifies the ID of the managed disk resource that you want to use to create the image.
     * 
     */
    @Import(name="managedDiskId")
    private @Nullable Output<String> managedDiskId;

    /**
     * @return Specifies the ID of the managed disk resource that you want to use to create the image.
     * 
     */
    public Optional<Output<String>> managedDiskId() {
        return Optional.ofNullable(this.managedDiskId);
    }

    /**
     * Specifies the state of the operating system contained in the blob. Currently, the only value is Generalized. Possible values are `Generalized` and `Specialized`.
     * 
     */
    @Import(name="osState")
    private @Nullable Output<String> osState;

    /**
     * @return Specifies the state of the operating system contained in the blob. Currently, the only value is Generalized. Possible values are `Generalized` and `Specialized`.
     * 
     */
    public Optional<Output<String>> osState() {
        return Optional.ofNullable(this.osState);
    }

    /**
     * Specifies the type of operating system contained in the virtual machine image. Possible values are: `Windows` or `Linux`.
     * 
     */
    @Import(name="osType")
    private @Nullable Output<String> osType;

    /**
     * @return Specifies the type of operating system contained in the virtual machine image. Possible values are: `Windows` or `Linux`.
     * 
     */
    public Optional<Output<String>> osType() {
        return Optional.ofNullable(this.osType);
    }

    /**
     * Specifies the size of the image to be created. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="sizeGb")
    private @Nullable Output<Integer> sizeGb;

    /**
     * @return Specifies the size of the image to be created. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<Integer>> sizeGb() {
        return Optional.ofNullable(this.sizeGb);
    }

    private ImageOsDiskArgs() {}

    private ImageOsDiskArgs(ImageOsDiskArgs $) {
        this.blobUri = $.blobUri;
        this.caching = $.caching;
        this.diskEncryptionSetId = $.diskEncryptionSetId;
        this.managedDiskId = $.managedDiskId;
        this.osState = $.osState;
        this.osType = $.osType;
        this.sizeGb = $.sizeGb;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ImageOsDiskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ImageOsDiskArgs $;

        public Builder() {
            $ = new ImageOsDiskArgs();
        }

        public Builder(ImageOsDiskArgs defaults) {
            $ = new ImageOsDiskArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param blobUri Specifies the URI in Azure storage of the blob that you want to use to create the image. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder blobUri(@Nullable Output<String> blobUri) {
            $.blobUri = blobUri;
            return this;
        }

        /**
         * @param blobUri Specifies the URI in Azure storage of the blob that you want to use to create the image. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder blobUri(String blobUri) {
            return blobUri(Output.of(blobUri));
        }

        /**
         * @param caching Specifies the caching mode as `ReadWrite`, `ReadOnly`, or `None`. The default is `None`.
         * 
         * @return builder
         * 
         */
        public Builder caching(@Nullable Output<String> caching) {
            $.caching = caching;
            return this;
        }

        /**
         * @param caching Specifies the caching mode as `ReadWrite`, `ReadOnly`, or `None`. The default is `None`.
         * 
         * @return builder
         * 
         */
        public Builder caching(String caching) {
            return caching(Output.of(caching));
        }

        /**
         * @param diskEncryptionSetId The ID of the Disk Encryption Set which should be used to encrypt this image. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder diskEncryptionSetId(@Nullable Output<String> diskEncryptionSetId) {
            $.diskEncryptionSetId = diskEncryptionSetId;
            return this;
        }

        /**
         * @param diskEncryptionSetId The ID of the Disk Encryption Set which should be used to encrypt this image. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder diskEncryptionSetId(String diskEncryptionSetId) {
            return diskEncryptionSetId(Output.of(diskEncryptionSetId));
        }

        /**
         * @param managedDiskId Specifies the ID of the managed disk resource that you want to use to create the image.
         * 
         * @return builder
         * 
         */
        public Builder managedDiskId(@Nullable Output<String> managedDiskId) {
            $.managedDiskId = managedDiskId;
            return this;
        }

        /**
         * @param managedDiskId Specifies the ID of the managed disk resource that you want to use to create the image.
         * 
         * @return builder
         * 
         */
        public Builder managedDiskId(String managedDiskId) {
            return managedDiskId(Output.of(managedDiskId));
        }

        /**
         * @param osState Specifies the state of the operating system contained in the blob. Currently, the only value is Generalized. Possible values are `Generalized` and `Specialized`.
         * 
         * @return builder
         * 
         */
        public Builder osState(@Nullable Output<String> osState) {
            $.osState = osState;
            return this;
        }

        /**
         * @param osState Specifies the state of the operating system contained in the blob. Currently, the only value is Generalized. Possible values are `Generalized` and `Specialized`.
         * 
         * @return builder
         * 
         */
        public Builder osState(String osState) {
            return osState(Output.of(osState));
        }

        /**
         * @param osType Specifies the type of operating system contained in the virtual machine image. Possible values are: `Windows` or `Linux`.
         * 
         * @return builder
         * 
         */
        public Builder osType(@Nullable Output<String> osType) {
            $.osType = osType;
            return this;
        }

        /**
         * @param osType Specifies the type of operating system contained in the virtual machine image. Possible values are: `Windows` or `Linux`.
         * 
         * @return builder
         * 
         */
        public Builder osType(String osType) {
            return osType(Output.of(osType));
        }

        /**
         * @param sizeGb Specifies the size of the image to be created. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder sizeGb(@Nullable Output<Integer> sizeGb) {
            $.sizeGb = sizeGb;
            return this;
        }

        /**
         * @param sizeGb Specifies the size of the image to be created. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder sizeGb(Integer sizeGb) {
            return sizeGb(Output.of(sizeGb));
        }

        public ImageOsDiskArgs build() {
            return $;
        }
    }

}
