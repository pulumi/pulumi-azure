// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.domainservices.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceInitialReplicaSetArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceInitialReplicaSetArgs Empty = new ServiceInitialReplicaSetArgs();

    /**
     * A list of subnet IP addresses for the domain controllers in the initial replica set, typically two.
     * 
     */
    @Import(name="domainControllerIpAddresses")
    private @Nullable Output<List<String>> domainControllerIpAddresses;

    /**
     * @return A list of subnet IP addresses for the domain controllers in the initial replica set, typically two.
     * 
     */
    public Optional<Output<List<String>>> domainControllerIpAddresses() {
        return Optional.ofNullable(this.domainControllerIpAddresses);
    }

    /**
     * The publicly routable IP address for the domain controllers in the initial replica set.
     * 
     */
    @Import(name="externalAccessIpAddress")
    private @Nullable Output<String> externalAccessIpAddress;

    /**
     * @return The publicly routable IP address for the domain controllers in the initial replica set.
     * 
     */
    public Optional<Output<String>> externalAccessIpAddress() {
        return Optional.ofNullable(this.externalAccessIpAddress);
    }

    /**
     * A unique ID for the replica set.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return A unique ID for the replica set.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The Azure location where the Domain Service exists. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The Azure location where the Domain Service exists. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The current service status for the initial replica set.
     * 
     */
    @Import(name="serviceStatus")
    private @Nullable Output<String> serviceStatus;

    /**
     * @return The current service status for the initial replica set.
     * 
     */
    public Optional<Output<String>> serviceStatus() {
        return Optional.ofNullable(this.serviceStatus);
    }

    /**
     * The ID of the subnet in which to place the initial replica set. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="subnetId", required=true)
    private Output<String> subnetId;

    /**
     * @return The ID of the subnet in which to place the initial replica set. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> subnetId() {
        return this.subnetId;
    }

    private ServiceInitialReplicaSetArgs() {}

    private ServiceInitialReplicaSetArgs(ServiceInitialReplicaSetArgs $) {
        this.domainControllerIpAddresses = $.domainControllerIpAddresses;
        this.externalAccessIpAddress = $.externalAccessIpAddress;
        this.id = $.id;
        this.location = $.location;
        this.serviceStatus = $.serviceStatus;
        this.subnetId = $.subnetId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceInitialReplicaSetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceInitialReplicaSetArgs $;

        public Builder() {
            $ = new ServiceInitialReplicaSetArgs();
        }

        public Builder(ServiceInitialReplicaSetArgs defaults) {
            $ = new ServiceInitialReplicaSetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param domainControllerIpAddresses A list of subnet IP addresses for the domain controllers in the initial replica set, typically two.
         * 
         * @return builder
         * 
         */
        public Builder domainControllerIpAddresses(@Nullable Output<List<String>> domainControllerIpAddresses) {
            $.domainControllerIpAddresses = domainControllerIpAddresses;
            return this;
        }

        /**
         * @param domainControllerIpAddresses A list of subnet IP addresses for the domain controllers in the initial replica set, typically two.
         * 
         * @return builder
         * 
         */
        public Builder domainControllerIpAddresses(List<String> domainControllerIpAddresses) {
            return domainControllerIpAddresses(Output.of(domainControllerIpAddresses));
        }

        /**
         * @param domainControllerIpAddresses A list of subnet IP addresses for the domain controllers in the initial replica set, typically two.
         * 
         * @return builder
         * 
         */
        public Builder domainControllerIpAddresses(String... domainControllerIpAddresses) {
            return domainControllerIpAddresses(List.of(domainControllerIpAddresses));
        }

        /**
         * @param externalAccessIpAddress The publicly routable IP address for the domain controllers in the initial replica set.
         * 
         * @return builder
         * 
         */
        public Builder externalAccessIpAddress(@Nullable Output<String> externalAccessIpAddress) {
            $.externalAccessIpAddress = externalAccessIpAddress;
            return this;
        }

        /**
         * @param externalAccessIpAddress The publicly routable IP address for the domain controllers in the initial replica set.
         * 
         * @return builder
         * 
         */
        public Builder externalAccessIpAddress(String externalAccessIpAddress) {
            return externalAccessIpAddress(Output.of(externalAccessIpAddress));
        }

        /**
         * @param id A unique ID for the replica set.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id A unique ID for the replica set.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param location The Azure location where the Domain Service exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The Azure location where the Domain Service exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param serviceStatus The current service status for the initial replica set.
         * 
         * @return builder
         * 
         */
        public Builder serviceStatus(@Nullable Output<String> serviceStatus) {
            $.serviceStatus = serviceStatus;
            return this;
        }

        /**
         * @param serviceStatus The current service status for the initial replica set.
         * 
         * @return builder
         * 
         */
        public Builder serviceStatus(String serviceStatus) {
            return serviceStatus(Output.of(serviceStatus));
        }

        /**
         * @param subnetId The ID of the subnet in which to place the initial replica set. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        /**
         * @param subnetId The ID of the subnet in which to place the initial replica set. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        public ServiceInitialReplicaSetArgs build() {
            if ($.subnetId == null) {
                throw new MissingRequiredPropertyException("ServiceInitialReplicaSetArgs", "subnetId");
            }
            return $;
        }
    }

}
