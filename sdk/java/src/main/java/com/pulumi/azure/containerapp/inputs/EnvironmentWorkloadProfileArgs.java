// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerapp.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EnvironmentWorkloadProfileArgs extends com.pulumi.resources.ResourceArgs {

    public static final EnvironmentWorkloadProfileArgs Empty = new EnvironmentWorkloadProfileArgs();

    /**
     * The maximum number of instances of workload profile that can be deployed in the Container App Environment.
     * 
     */
    @Import(name="maximumCount")
    private @Nullable Output<Integer> maximumCount;

    /**
     * @return The maximum number of instances of workload profile that can be deployed in the Container App Environment.
     * 
     */
    public Optional<Output<Integer>> maximumCount() {
        return Optional.ofNullable(this.maximumCount);
    }

    /**
     * The minimum number of instances of workload profile that can be deployed in the Container App Environment.
     * 
     */
    @Import(name="minimumCount")
    private @Nullable Output<Integer> minimumCount;

    /**
     * @return The minimum number of instances of workload profile that can be deployed in the Container App Environment.
     * 
     */
    public Optional<Output<Integer>> minimumCount() {
        return Optional.ofNullable(this.minimumCount);
    }

    /**
     * The name of the workload profile.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the workload profile.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Workload profile type for the workloads to run on. Possible values include `Consumption`, `D4`, `D8`, `D16`, `D32`, `E4`, `E8`, `E16` and `E32`.
     * 
     * &gt; **NOTE:** A `Consumption` type must have a name of `Consumption` and an environment may only have one `Consumption` Workload Profile.
     * 
     * &gt; **NOTE:** Defining a `Consumption` profile is optional, however, Environments created without an initial Workload Profile cannot have them added at a later time and must be recreated. Similarly, an environment created with Profiles must always have at least one defined Profile, removing all profiles will force a recreation of the resource.
     * 
     */
    @Import(name="workloadProfileType", required=true)
    private Output<String> workloadProfileType;

    /**
     * @return Workload profile type for the workloads to run on. Possible values include `Consumption`, `D4`, `D8`, `D16`, `D32`, `E4`, `E8`, `E16` and `E32`.
     * 
     * &gt; **NOTE:** A `Consumption` type must have a name of `Consumption` and an environment may only have one `Consumption` Workload Profile.
     * 
     * &gt; **NOTE:** Defining a `Consumption` profile is optional, however, Environments created without an initial Workload Profile cannot have them added at a later time and must be recreated. Similarly, an environment created with Profiles must always have at least one defined Profile, removing all profiles will force a recreation of the resource.
     * 
     */
    public Output<String> workloadProfileType() {
        return this.workloadProfileType;
    }

    private EnvironmentWorkloadProfileArgs() {}

    private EnvironmentWorkloadProfileArgs(EnvironmentWorkloadProfileArgs $) {
        this.maximumCount = $.maximumCount;
        this.minimumCount = $.minimumCount;
        this.name = $.name;
        this.workloadProfileType = $.workloadProfileType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EnvironmentWorkloadProfileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EnvironmentWorkloadProfileArgs $;

        public Builder() {
            $ = new EnvironmentWorkloadProfileArgs();
        }

        public Builder(EnvironmentWorkloadProfileArgs defaults) {
            $ = new EnvironmentWorkloadProfileArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param maximumCount The maximum number of instances of workload profile that can be deployed in the Container App Environment.
         * 
         * @return builder
         * 
         */
        public Builder maximumCount(@Nullable Output<Integer> maximumCount) {
            $.maximumCount = maximumCount;
            return this;
        }

        /**
         * @param maximumCount The maximum number of instances of workload profile that can be deployed in the Container App Environment.
         * 
         * @return builder
         * 
         */
        public Builder maximumCount(Integer maximumCount) {
            return maximumCount(Output.of(maximumCount));
        }

        /**
         * @param minimumCount The minimum number of instances of workload profile that can be deployed in the Container App Environment.
         * 
         * @return builder
         * 
         */
        public Builder minimumCount(@Nullable Output<Integer> minimumCount) {
            $.minimumCount = minimumCount;
            return this;
        }

        /**
         * @param minimumCount The minimum number of instances of workload profile that can be deployed in the Container App Environment.
         * 
         * @return builder
         * 
         */
        public Builder minimumCount(Integer minimumCount) {
            return minimumCount(Output.of(minimumCount));
        }

        /**
         * @param name The name of the workload profile.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the workload profile.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param workloadProfileType Workload profile type for the workloads to run on. Possible values include `Consumption`, `D4`, `D8`, `D16`, `D32`, `E4`, `E8`, `E16` and `E32`.
         * 
         * &gt; **NOTE:** A `Consumption` type must have a name of `Consumption` and an environment may only have one `Consumption` Workload Profile.
         * 
         * &gt; **NOTE:** Defining a `Consumption` profile is optional, however, Environments created without an initial Workload Profile cannot have them added at a later time and must be recreated. Similarly, an environment created with Profiles must always have at least one defined Profile, removing all profiles will force a recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder workloadProfileType(Output<String> workloadProfileType) {
            $.workloadProfileType = workloadProfileType;
            return this;
        }

        /**
         * @param workloadProfileType Workload profile type for the workloads to run on. Possible values include `Consumption`, `D4`, `D8`, `D16`, `D32`, `E4`, `E8`, `E16` and `E32`.
         * 
         * &gt; **NOTE:** A `Consumption` type must have a name of `Consumption` and an environment may only have one `Consumption` Workload Profile.
         * 
         * &gt; **NOTE:** Defining a `Consumption` profile is optional, however, Environments created without an initial Workload Profile cannot have them added at a later time and must be recreated. Similarly, an environment created with Profiles must always have at least one defined Profile, removing all profiles will force a recreation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder workloadProfileType(String workloadProfileType) {
            return workloadProfileType(Output.of(workloadProfileType));
        }

        public EnvironmentWorkloadProfileArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("EnvironmentWorkloadProfileArgs", "name");
            }
            if ($.workloadProfileType == null) {
                throw new MissingRequiredPropertyException("EnvironmentWorkloadProfileArgs", "workloadProfileType");
            }
            return $;
        }
    }

}
