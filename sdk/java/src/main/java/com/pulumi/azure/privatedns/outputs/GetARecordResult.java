// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.privatedns.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetARecordResult {
    /**
     * @return The FQDN of the Private DNS A Record.
     * 
     */
    private String fqdn;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String name;
    /**
     * @return List of IPv4 Addresses.
     * 
     */
    private List<String> records;
    private String resourceGroupName;
    /**
     * @return A mapping of tags assigned to the Private DNS A Record.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return The Time To Live (TTL) of the Private DNS record in seconds.
     * 
     */
    private Integer ttl;
    private String zoneName;

    private GetARecordResult() {}
    /**
     * @return The FQDN of the Private DNS A Record.
     * 
     */
    public String fqdn() {
        return this.fqdn;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return List of IPv4 Addresses.
     * 
     */
    public List<String> records() {
        return this.records;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return A mapping of tags assigned to the Private DNS A Record.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return The Time To Live (TTL) of the Private DNS record in seconds.
     * 
     */
    public Integer ttl() {
        return this.ttl;
    }
    public String zoneName() {
        return this.zoneName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetARecordResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String fqdn;
        private String id;
        private String name;
        private List<String> records;
        private String resourceGroupName;
        private Map<String,String> tags;
        private Integer ttl;
        private String zoneName;
        public Builder() {}
        public Builder(GetARecordResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.fqdn = defaults.fqdn;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.records = defaults.records;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.tags = defaults.tags;
    	      this.ttl = defaults.ttl;
    	      this.zoneName = defaults.zoneName;
        }

        @CustomType.Setter
        public Builder fqdn(String fqdn) {
            if (fqdn == null) {
              throw new MissingRequiredPropertyException("GetARecordResult", "fqdn");
            }
            this.fqdn = fqdn;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetARecordResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetARecordResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder records(List<String> records) {
            if (records == null) {
              throw new MissingRequiredPropertyException("GetARecordResult", "records");
            }
            this.records = records;
            return this;
        }
        public Builder records(String... records) {
            return records(List.of(records));
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            if (resourceGroupName == null) {
              throw new MissingRequiredPropertyException("GetARecordResult", "resourceGroupName");
            }
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetARecordResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder ttl(Integer ttl) {
            if (ttl == null) {
              throw new MissingRequiredPropertyException("GetARecordResult", "ttl");
            }
            this.ttl = ttl;
            return this;
        }
        @CustomType.Setter
        public Builder zoneName(String zoneName) {
            if (zoneName == null) {
              throw new MissingRequiredPropertyException("GetARecordResult", "zoneName");
            }
            this.zoneName = zoneName;
            return this;
        }
        public GetARecordResult build() {
            final var _resultValue = new GetARecordResult();
            _resultValue.fqdn = fqdn;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.records = records;
            _resultValue.resourceGroupName = resourceGroupName;
            _resultValue.tags = tags;
            _resultValue.ttl = ttl;
            _resultValue.zoneName = zoneName;
            return _resultValue;
        }
    }
}
