// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.datafactory.inputs;

import com.pulumi.azure.datafactory.inputs.DataFlowTransformationDatasetArgs;
import com.pulumi.azure.datafactory.inputs.DataFlowTransformationFlowletArgs;
import com.pulumi.azure.datafactory.inputs.DataFlowTransformationLinkedServiceArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataFlowTransformationArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataFlowTransformationArgs Empty = new DataFlowTransformationArgs();

    /**
     * A `dataset` block as defined below.
     * 
     */
    @Import(name="dataset")
    private @Nullable Output<DataFlowTransformationDatasetArgs> dataset;

    /**
     * @return A `dataset` block as defined below.
     * 
     */
    public Optional<Output<DataFlowTransformationDatasetArgs>> dataset() {
        return Optional.ofNullable(this.dataset);
    }

    /**
     * The description for the Data Flow transformation.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description for the Data Flow transformation.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * A `flowlet` block as defined below.
     * 
     */
    @Import(name="flowlet")
    private @Nullable Output<DataFlowTransformationFlowletArgs> flowlet;

    /**
     * @return A `flowlet` block as defined below.
     * 
     */
    public Optional<Output<DataFlowTransformationFlowletArgs>> flowlet() {
        return Optional.ofNullable(this.flowlet);
    }

    /**
     * A `linked_service` block as defined below.
     * 
     */
    @Import(name="linkedService")
    private @Nullable Output<DataFlowTransformationLinkedServiceArgs> linkedService;

    /**
     * @return A `linked_service` block as defined below.
     * 
     */
    public Optional<Output<DataFlowTransformationLinkedServiceArgs>> linkedService() {
        return Optional.ofNullable(this.linkedService);
    }

    /**
     * The name for the Data Flow transformation.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name for the Data Flow transformation.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    private DataFlowTransformationArgs() {}

    private DataFlowTransformationArgs(DataFlowTransformationArgs $) {
        this.dataset = $.dataset;
        this.description = $.description;
        this.flowlet = $.flowlet;
        this.linkedService = $.linkedService;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataFlowTransformationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataFlowTransformationArgs $;

        public Builder() {
            $ = new DataFlowTransformationArgs();
        }

        public Builder(DataFlowTransformationArgs defaults) {
            $ = new DataFlowTransformationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataset A `dataset` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder dataset(@Nullable Output<DataFlowTransformationDatasetArgs> dataset) {
            $.dataset = dataset;
            return this;
        }

        /**
         * @param dataset A `dataset` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder dataset(DataFlowTransformationDatasetArgs dataset) {
            return dataset(Output.of(dataset));
        }

        /**
         * @param description The description for the Data Flow transformation.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description for the Data Flow transformation.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param flowlet A `flowlet` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder flowlet(@Nullable Output<DataFlowTransformationFlowletArgs> flowlet) {
            $.flowlet = flowlet;
            return this;
        }

        /**
         * @param flowlet A `flowlet` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder flowlet(DataFlowTransformationFlowletArgs flowlet) {
            return flowlet(Output.of(flowlet));
        }

        /**
         * @param linkedService A `linked_service` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder linkedService(@Nullable Output<DataFlowTransformationLinkedServiceArgs> linkedService) {
            $.linkedService = linkedService;
            return this;
        }

        /**
         * @param linkedService A `linked_service` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder linkedService(DataFlowTransformationLinkedServiceArgs linkedService) {
            return linkedService(Output.of(linkedService));
        }

        /**
         * @param name The name for the Data Flow transformation.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name for the Data Flow transformation.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public DataFlowTransformationArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("DataFlowTransformationArgs", "name");
            }
            return $;
        }
    }

}
