// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.mysql.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FlexibleServerHighAvailability {
    /**
     * @return The high availability mode for the MySQL Flexible Server. Possibles values are `SameZone` and `ZoneRedundant`.
     * 
     * &gt; **NOTE:** `storage.0.auto_grow_enabled` must be enabled when `high_availability` is enabled. To change the `high_availability` for a MySQL Flexible Server created with `high_availability` disabled during creation, the resource has to be recreated.
     * 
     */
    private String mode;
    private @Nullable String standbyAvailabilityZone;

    private FlexibleServerHighAvailability() {}
    /**
     * @return The high availability mode for the MySQL Flexible Server. Possibles values are `SameZone` and `ZoneRedundant`.
     * 
     * &gt; **NOTE:** `storage.0.auto_grow_enabled` must be enabled when `high_availability` is enabled. To change the `high_availability` for a MySQL Flexible Server created with `high_availability` disabled during creation, the resource has to be recreated.
     * 
     */
    public String mode() {
        return this.mode;
    }
    public Optional<String> standbyAvailabilityZone() {
        return Optional.ofNullable(this.standbyAvailabilityZone);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FlexibleServerHighAvailability defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String mode;
        private @Nullable String standbyAvailabilityZone;
        public Builder() {}
        public Builder(FlexibleServerHighAvailability defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.mode = defaults.mode;
    	      this.standbyAvailabilityZone = defaults.standbyAvailabilityZone;
        }

        @CustomType.Setter
        public Builder mode(String mode) {
            if (mode == null) {
              throw new MissingRequiredPropertyException("FlexibleServerHighAvailability", "mode");
            }
            this.mode = mode;
            return this;
        }
        @CustomType.Setter
        public Builder standbyAvailabilityZone(@Nullable String standbyAvailabilityZone) {

            this.standbyAvailabilityZone = standbyAvailabilityZone;
            return this;
        }
        public FlexibleServerHighAvailability build() {
            final var _resultValue = new FlexibleServerHighAvailability();
            _resultValue.mode = mode;
            _resultValue.standbyAvailabilityZone = standbyAvailabilityZone;
            return _resultValue;
        }
    }
}
