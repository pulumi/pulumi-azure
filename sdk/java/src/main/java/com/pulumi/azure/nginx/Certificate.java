// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.nginx;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.nginx.CertificateArgs;
import com.pulumi.azure.nginx.inputs.CertificateState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Manages a Certificate for an NGinx Deployment.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.nginx.Certificate;
 * import com.pulumi.azure.nginx.CertificateArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var test = new Certificate(&#34;test&#34;, CertificateArgs.builder()        
 *             .nginxDeploymentId(azurerm_nginx_deployment.test().id())
 *             .keyVirtualPath(&#34;/src/cert/soservermekey.key&#34;)
 *             .certificateVirtualPath(&#34;/src/cert/server.cert&#34;)
 *             .keyVaultSecretId(azurerm_key_vault_secret.test().id())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * An Nginx Certificate can be imported using the `resource id`, e.g.
 * 
 * ```sh
 *  $ pulumi import azure:nginx/certificate:Certificate example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Nginx.NginxPlus/nginxDeployments/deploy1/certificates/cer1
 * ```
 * 
 */
@ResourceType(type="azure:nginx/certificate:Certificate")
public class Certificate extends com.pulumi.resources.CustomResource {
    /**
     * Specify the path to the cert file of this certificate. Changing this forces a new Nginx Certificate to be created.
     * 
     */
    @Export(name="certificateVirtualPath", refs={String.class}, tree="[0]")
    private Output<String> certificateVirtualPath;

    /**
     * @return Specify the path to the cert file of this certificate. Changing this forces a new Nginx Certificate to be created.
     * 
     */
    public Output<String> certificateVirtualPath() {
        return this.certificateVirtualPath;
    }
    /**
     * Specify the ID of the Key Vault Secret for this certificate. Changing this forces a new Nginx Certificate to be created.
     * 
     */
    @Export(name="keyVaultSecretId", refs={String.class}, tree="[0]")
    private Output<String> keyVaultSecretId;

    /**
     * @return Specify the ID of the Key Vault Secret for this certificate. Changing this forces a new Nginx Certificate to be created.
     * 
     */
    public Output<String> keyVaultSecretId() {
        return this.keyVaultSecretId;
    }
    /**
     * Specify the path to the key file of this certificate. Changing this forces a new Nginx Certificate to be created.
     * 
     */
    @Export(name="keyVirtualPath", refs={String.class}, tree="[0]")
    private Output<String> keyVirtualPath;

    /**
     * @return Specify the path to the key file of this certificate. Changing this forces a new Nginx Certificate to be created.
     * 
     */
    public Output<String> keyVirtualPath() {
        return this.keyVirtualPath;
    }
    /**
     * The name which should be used for this Nginx Certificate. Changing this forces a new Nginx Certificate to be created.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name which should be used for this Nginx Certificate. Changing this forces a new Nginx Certificate to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the Nginx Deployment that this Certificate should be associated with. Changing this forces a new Nginx Certificate to be created.
     * 
     */
    @Export(name="nginxDeploymentId", refs={String.class}, tree="[0]")
    private Output<String> nginxDeploymentId;

    /**
     * @return The ID of the Nginx Deployment that this Certificate should be associated with. Changing this forces a new Nginx Certificate to be created.
     * 
     */
    public Output<String> nginxDeploymentId() {
        return this.nginxDeploymentId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Certificate(String name) {
        this(name, CertificateArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Certificate(String name, CertificateArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Certificate(String name, CertificateArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:nginx/certificate:Certificate", name, args == null ? CertificateArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Certificate(String name, Output<String> id, @Nullable CertificateState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:nginx/certificate:Certificate", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Certificate get(String name, Output<String> id, @Nullable CertificateState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Certificate(name, id, state, options);
    }
}
