// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.datafactory.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IntegrationRuntimeManagedCatalogInfoArgs extends com.pulumi.resources.ResourceArgs {

    public static final IntegrationRuntimeManagedCatalogInfoArgs Empty = new IntegrationRuntimeManagedCatalogInfoArgs();

    /**
     * Administrator login name for the SQL Server.
     * 
     */
    @Import(name="administratorLogin")
    private @Nullable Output<String> administratorLogin;

    /**
     * @return Administrator login name for the SQL Server.
     * 
     */
    public Optional<Output<String>> administratorLogin() {
        return Optional.ofNullable(this.administratorLogin);
    }

    /**
     * Administrator login password for the SQL Server.
     * 
     */
    @Import(name="administratorPassword")
    private @Nullable Output<String> administratorPassword;

    /**
     * @return Administrator login password for the SQL Server.
     * 
     */
    public Optional<Output<String>> administratorPassword() {
        return Optional.ofNullable(this.administratorPassword);
    }

    /**
     * Pricing tier for the database that will be created for the SSIS catalog. Valid values are: `Basic`, `Standard`, `Premium` and `PremiumRS`. Defaults to `Basic`.
     * 
     */
    @Import(name="pricingTier")
    private @Nullable Output<String> pricingTier;

    /**
     * @return Pricing tier for the database that will be created for the SSIS catalog. Valid values are: `Basic`, `Standard`, `Premium` and `PremiumRS`. Defaults to `Basic`.
     * 
     */
    public Optional<Output<String>> pricingTier() {
        return Optional.ofNullable(this.pricingTier);
    }

    /**
     * The endpoint of an Azure SQL Server that will be used to host the SSIS catalog.
     * 
     */
    @Import(name="serverEndpoint", required=true)
    private Output<String> serverEndpoint;

    /**
     * @return The endpoint of an Azure SQL Server that will be used to host the SSIS catalog.
     * 
     */
    public Output<String> serverEndpoint() {
        return this.serverEndpoint;
    }

    private IntegrationRuntimeManagedCatalogInfoArgs() {}

    private IntegrationRuntimeManagedCatalogInfoArgs(IntegrationRuntimeManagedCatalogInfoArgs $) {
        this.administratorLogin = $.administratorLogin;
        this.administratorPassword = $.administratorPassword;
        this.pricingTier = $.pricingTier;
        this.serverEndpoint = $.serverEndpoint;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IntegrationRuntimeManagedCatalogInfoArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IntegrationRuntimeManagedCatalogInfoArgs $;

        public Builder() {
            $ = new IntegrationRuntimeManagedCatalogInfoArgs();
        }

        public Builder(IntegrationRuntimeManagedCatalogInfoArgs defaults) {
            $ = new IntegrationRuntimeManagedCatalogInfoArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param administratorLogin Administrator login name for the SQL Server.
         * 
         * @return builder
         * 
         */
        public Builder administratorLogin(@Nullable Output<String> administratorLogin) {
            $.administratorLogin = administratorLogin;
            return this;
        }

        /**
         * @param administratorLogin Administrator login name for the SQL Server.
         * 
         * @return builder
         * 
         */
        public Builder administratorLogin(String administratorLogin) {
            return administratorLogin(Output.of(administratorLogin));
        }

        /**
         * @param administratorPassword Administrator login password for the SQL Server.
         * 
         * @return builder
         * 
         */
        public Builder administratorPassword(@Nullable Output<String> administratorPassword) {
            $.administratorPassword = administratorPassword;
            return this;
        }

        /**
         * @param administratorPassword Administrator login password for the SQL Server.
         * 
         * @return builder
         * 
         */
        public Builder administratorPassword(String administratorPassword) {
            return administratorPassword(Output.of(administratorPassword));
        }

        /**
         * @param pricingTier Pricing tier for the database that will be created for the SSIS catalog. Valid values are: `Basic`, `Standard`, `Premium` and `PremiumRS`. Defaults to `Basic`.
         * 
         * @return builder
         * 
         */
        public Builder pricingTier(@Nullable Output<String> pricingTier) {
            $.pricingTier = pricingTier;
            return this;
        }

        /**
         * @param pricingTier Pricing tier for the database that will be created for the SSIS catalog. Valid values are: `Basic`, `Standard`, `Premium` and `PremiumRS`. Defaults to `Basic`.
         * 
         * @return builder
         * 
         */
        public Builder pricingTier(String pricingTier) {
            return pricingTier(Output.of(pricingTier));
        }

        /**
         * @param serverEndpoint The endpoint of an Azure SQL Server that will be used to host the SSIS catalog.
         * 
         * @return builder
         * 
         */
        public Builder serverEndpoint(Output<String> serverEndpoint) {
            $.serverEndpoint = serverEndpoint;
            return this;
        }

        /**
         * @param serverEndpoint The endpoint of an Azure SQL Server that will be used to host the SSIS catalog.
         * 
         * @return builder
         * 
         */
        public Builder serverEndpoint(String serverEndpoint) {
            return serverEndpoint(Output.of(serverEndpoint));
        }

        public IntegrationRuntimeManagedCatalogInfoArgs build() {
            $.serverEndpoint = Objects.requireNonNull($.serverEndpoint, "expected parameter 'serverEndpoint' to be non-null");
            return $;
        }
    }

}
