// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkConnectionMonitorTestConfigurationTcpConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworkConnectionMonitorTestConfigurationTcpConfigurationArgs Empty = new NetworkConnectionMonitorTestConfigurationTcpConfigurationArgs();

    /**
     * The destination port behavior for the TCP connection. Possible values are `None` and `ListenIfAvailable`.
     * 
     */
    @Import(name="destinationPortBehavior")
    private @Nullable Output<String> destinationPortBehavior;

    /**
     * @return The destination port behavior for the TCP connection. Possible values are `None` and `ListenIfAvailable`.
     * 
     */
    public Optional<Output<String>> destinationPortBehavior() {
        return Optional.ofNullable(this.destinationPortBehavior);
    }

    /**
     * The port for the TCP connection.
     * 
     */
    @Import(name="port", required=true)
    private Output<Integer> port;

    /**
     * @return The port for the TCP connection.
     * 
     */
    public Output<Integer> port() {
        return this.port;
    }

    /**
     * Should path evaluation with trace route be enabled? Defaults to `true`.
     * 
     */
    @Import(name="traceRouteEnabled")
    private @Nullable Output<Boolean> traceRouteEnabled;

    /**
     * @return Should path evaluation with trace route be enabled? Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> traceRouteEnabled() {
        return Optional.ofNullable(this.traceRouteEnabled);
    }

    private NetworkConnectionMonitorTestConfigurationTcpConfigurationArgs() {}

    private NetworkConnectionMonitorTestConfigurationTcpConfigurationArgs(NetworkConnectionMonitorTestConfigurationTcpConfigurationArgs $) {
        this.destinationPortBehavior = $.destinationPortBehavior;
        this.port = $.port;
        this.traceRouteEnabled = $.traceRouteEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkConnectionMonitorTestConfigurationTcpConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkConnectionMonitorTestConfigurationTcpConfigurationArgs $;

        public Builder() {
            $ = new NetworkConnectionMonitorTestConfigurationTcpConfigurationArgs();
        }

        public Builder(NetworkConnectionMonitorTestConfigurationTcpConfigurationArgs defaults) {
            $ = new NetworkConnectionMonitorTestConfigurationTcpConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param destinationPortBehavior The destination port behavior for the TCP connection. Possible values are `None` and `ListenIfAvailable`.
         * 
         * @return builder
         * 
         */
        public Builder destinationPortBehavior(@Nullable Output<String> destinationPortBehavior) {
            $.destinationPortBehavior = destinationPortBehavior;
            return this;
        }

        /**
         * @param destinationPortBehavior The destination port behavior for the TCP connection. Possible values are `None` and `ListenIfAvailable`.
         * 
         * @return builder
         * 
         */
        public Builder destinationPortBehavior(String destinationPortBehavior) {
            return destinationPortBehavior(Output.of(destinationPortBehavior));
        }

        /**
         * @param port The port for the TCP connection.
         * 
         * @return builder
         * 
         */
        public Builder port(Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The port for the TCP connection.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param traceRouteEnabled Should path evaluation with trace route be enabled? Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder traceRouteEnabled(@Nullable Output<Boolean> traceRouteEnabled) {
            $.traceRouteEnabled = traceRouteEnabled;
            return this;
        }

        /**
         * @param traceRouteEnabled Should path evaluation with trace route be enabled? Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder traceRouteEnabled(Boolean traceRouteEnabled) {
            return traceRouteEnabled(Output.of(traceRouteEnabled));
        }

        public NetworkConnectionMonitorTestConfigurationTcpConfigurationArgs build() {
            if ($.port == null) {
                throw new MissingRequiredPropertyException("NetworkConnectionMonitorTestConfigurationTcpConfigurationArgs", "port");
            }
            return $;
        }
    }

}
