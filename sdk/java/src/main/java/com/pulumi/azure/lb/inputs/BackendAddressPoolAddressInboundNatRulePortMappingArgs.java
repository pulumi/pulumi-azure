// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.lb.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BackendAddressPoolAddressInboundNatRulePortMappingArgs extends com.pulumi.resources.ResourceArgs {

    public static final BackendAddressPoolAddressInboundNatRulePortMappingArgs Empty = new BackendAddressPoolAddressInboundNatRulePortMappingArgs();

    /**
     * The Backend Port of the Load Balancing Inbound NAT Rules associated with this Backend Address Pool Address.
     * 
     */
    @Import(name="backendPort")
    private @Nullable Output<Integer> backendPort;

    /**
     * @return The Backend Port of the Load Balancing Inbound NAT Rules associated with this Backend Address Pool Address.
     * 
     */
    public Optional<Output<Integer>> backendPort() {
        return Optional.ofNullable(this.backendPort);
    }

    /**
     * The Frontend Port of the Load Balancing Inbound NAT Rules associated with this Backend Address Pool Address.
     * 
     */
    @Import(name="frontendPort")
    private @Nullable Output<Integer> frontendPort;

    /**
     * @return The Frontend Port of the Load Balancing Inbound NAT Rules associated with this Backend Address Pool Address.
     * 
     */
    public Optional<Output<Integer>> frontendPort() {
        return Optional.ofNullable(this.frontendPort);
    }

    /**
     * The name of the Load Balancing Inbound NAT Rules associated with this Backend Address Pool Address.
     * 
     */
    @Import(name="inboundNatRuleName")
    private @Nullable Output<String> inboundNatRuleName;

    /**
     * @return The name of the Load Balancing Inbound NAT Rules associated with this Backend Address Pool Address.
     * 
     */
    public Optional<Output<String>> inboundNatRuleName() {
        return Optional.ofNullable(this.inboundNatRuleName);
    }

    private BackendAddressPoolAddressInboundNatRulePortMappingArgs() {}

    private BackendAddressPoolAddressInboundNatRulePortMappingArgs(BackendAddressPoolAddressInboundNatRulePortMappingArgs $) {
        this.backendPort = $.backendPort;
        this.frontendPort = $.frontendPort;
        this.inboundNatRuleName = $.inboundNatRuleName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackendAddressPoolAddressInboundNatRulePortMappingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackendAddressPoolAddressInboundNatRulePortMappingArgs $;

        public Builder() {
            $ = new BackendAddressPoolAddressInboundNatRulePortMappingArgs();
        }

        public Builder(BackendAddressPoolAddressInboundNatRulePortMappingArgs defaults) {
            $ = new BackendAddressPoolAddressInboundNatRulePortMappingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backendPort The Backend Port of the Load Balancing Inbound NAT Rules associated with this Backend Address Pool Address.
         * 
         * @return builder
         * 
         */
        public Builder backendPort(@Nullable Output<Integer> backendPort) {
            $.backendPort = backendPort;
            return this;
        }

        /**
         * @param backendPort The Backend Port of the Load Balancing Inbound NAT Rules associated with this Backend Address Pool Address.
         * 
         * @return builder
         * 
         */
        public Builder backendPort(Integer backendPort) {
            return backendPort(Output.of(backendPort));
        }

        /**
         * @param frontendPort The Frontend Port of the Load Balancing Inbound NAT Rules associated with this Backend Address Pool Address.
         * 
         * @return builder
         * 
         */
        public Builder frontendPort(@Nullable Output<Integer> frontendPort) {
            $.frontendPort = frontendPort;
            return this;
        }

        /**
         * @param frontendPort The Frontend Port of the Load Balancing Inbound NAT Rules associated with this Backend Address Pool Address.
         * 
         * @return builder
         * 
         */
        public Builder frontendPort(Integer frontendPort) {
            return frontendPort(Output.of(frontendPort));
        }

        /**
         * @param inboundNatRuleName The name of the Load Balancing Inbound NAT Rules associated with this Backend Address Pool Address.
         * 
         * @return builder
         * 
         */
        public Builder inboundNatRuleName(@Nullable Output<String> inboundNatRuleName) {
            $.inboundNatRuleName = inboundNatRuleName;
            return this;
        }

        /**
         * @param inboundNatRuleName The name of the Load Balancing Inbound NAT Rules associated with this Backend Address Pool Address.
         * 
         * @return builder
         * 
         */
        public Builder inboundNatRuleName(String inboundNatRuleName) {
            return inboundNatRuleName(Output.of(inboundNatRuleName));
        }

        public BackendAddressPoolAddressInboundNatRulePortMappingArgs build() {
            return $;
        }
    }

}
