// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.media.outputs;

import com.pulumi.azure.media.outputs.TransformOutputCustomPresetCodecH265VideoLayer;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class TransformOutputCustomPresetCodecH265Video {
    /**
     * @return The complexity of the encoding. Possible values are `Balanced`, `Speed` or `Quality`. Default to `Balanced`.
     * 
     */
    private @Nullable String complexity;
    /**
     * @return The distance between two key frames. The value should be non-zero in the range `0.5` to `20` seconds, specified in ISO 8601 format. Note that this setting is ignored if `sync_mode` is set to `Passthrough`, where the KeyFrameInterval value will follow the input source setting. Defaults to `PT2S`.
     * 
     */
    private @Nullable String keyFrameInterval;
    /**
     * @return Specifies the label for the codec. The label can be used to control muxing behavior.
     * 
     */
    private @Nullable String label;
    /**
     * @return One or more `layer` blocks as defined below.
     * 
     */
    private @Nullable List<TransformOutputCustomPresetCodecH265VideoLayer> layers;
    /**
     * @return Whether the encoder should insert key frames at scene changes. This flag should be set to true only when the encoder is being configured to produce a single output video. Default to `false`.
     * 
     */
    private @Nullable Boolean sceneChangeDetectionEnabled;
    /**
     * @return Specifies the resizing mode - how the input video will be resized to fit the desired output resolution(s). Possible values are `AutoFit`, `AutoSize` or `None`. Default to `AutoSize`.
     * 
     */
    private @Nullable String stretchMode;
    /**
     * @return Specifies the synchronization mode for the video. Possible values are `Auto`, `Cfr`, `Passthrough` or `Vfr`. Default to `Auto`.
     * 
     */
    private @Nullable String syncMode;

    private TransformOutputCustomPresetCodecH265Video() {}
    /**
     * @return The complexity of the encoding. Possible values are `Balanced`, `Speed` or `Quality`. Default to `Balanced`.
     * 
     */
    public Optional<String> complexity() {
        return Optional.ofNullable(this.complexity);
    }
    /**
     * @return The distance between two key frames. The value should be non-zero in the range `0.5` to `20` seconds, specified in ISO 8601 format. Note that this setting is ignored if `sync_mode` is set to `Passthrough`, where the KeyFrameInterval value will follow the input source setting. Defaults to `PT2S`.
     * 
     */
    public Optional<String> keyFrameInterval() {
        return Optional.ofNullable(this.keyFrameInterval);
    }
    /**
     * @return Specifies the label for the codec. The label can be used to control muxing behavior.
     * 
     */
    public Optional<String> label() {
        return Optional.ofNullable(this.label);
    }
    /**
     * @return One or more `layer` blocks as defined below.
     * 
     */
    public List<TransformOutputCustomPresetCodecH265VideoLayer> layers() {
        return this.layers == null ? List.of() : this.layers;
    }
    /**
     * @return Whether the encoder should insert key frames at scene changes. This flag should be set to true only when the encoder is being configured to produce a single output video. Default to `false`.
     * 
     */
    public Optional<Boolean> sceneChangeDetectionEnabled() {
        return Optional.ofNullable(this.sceneChangeDetectionEnabled);
    }
    /**
     * @return Specifies the resizing mode - how the input video will be resized to fit the desired output resolution(s). Possible values are `AutoFit`, `AutoSize` or `None`. Default to `AutoSize`.
     * 
     */
    public Optional<String> stretchMode() {
        return Optional.ofNullable(this.stretchMode);
    }
    /**
     * @return Specifies the synchronization mode for the video. Possible values are `Auto`, `Cfr`, `Passthrough` or `Vfr`. Default to `Auto`.
     * 
     */
    public Optional<String> syncMode() {
        return Optional.ofNullable(this.syncMode);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TransformOutputCustomPresetCodecH265Video defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String complexity;
        private @Nullable String keyFrameInterval;
        private @Nullable String label;
        private @Nullable List<TransformOutputCustomPresetCodecH265VideoLayer> layers;
        private @Nullable Boolean sceneChangeDetectionEnabled;
        private @Nullable String stretchMode;
        private @Nullable String syncMode;
        public Builder() {}
        public Builder(TransformOutputCustomPresetCodecH265Video defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.complexity = defaults.complexity;
    	      this.keyFrameInterval = defaults.keyFrameInterval;
    	      this.label = defaults.label;
    	      this.layers = defaults.layers;
    	      this.sceneChangeDetectionEnabled = defaults.sceneChangeDetectionEnabled;
    	      this.stretchMode = defaults.stretchMode;
    	      this.syncMode = defaults.syncMode;
        }

        @CustomType.Setter
        public Builder complexity(@Nullable String complexity) {

            this.complexity = complexity;
            return this;
        }
        @CustomType.Setter
        public Builder keyFrameInterval(@Nullable String keyFrameInterval) {

            this.keyFrameInterval = keyFrameInterval;
            return this;
        }
        @CustomType.Setter
        public Builder label(@Nullable String label) {

            this.label = label;
            return this;
        }
        @CustomType.Setter
        public Builder layers(@Nullable List<TransformOutputCustomPresetCodecH265VideoLayer> layers) {

            this.layers = layers;
            return this;
        }
        public Builder layers(TransformOutputCustomPresetCodecH265VideoLayer... layers) {
            return layers(List.of(layers));
        }
        @CustomType.Setter
        public Builder sceneChangeDetectionEnabled(@Nullable Boolean sceneChangeDetectionEnabled) {

            this.sceneChangeDetectionEnabled = sceneChangeDetectionEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder stretchMode(@Nullable String stretchMode) {

            this.stretchMode = stretchMode;
            return this;
        }
        @CustomType.Setter
        public Builder syncMode(@Nullable String syncMode) {

            this.syncMode = syncMode;
            return this;
        }
        public TransformOutputCustomPresetCodecH265Video build() {
            final var _resultValue = new TransformOutputCustomPresetCodecH265Video();
            _resultValue.complexity = complexity;
            _resultValue.keyFrameInterval = keyFrameInterval;
            _resultValue.label = label;
            _resultValue.layers = layers;
            _resultValue.sceneChangeDetectionEnabled = sceneChangeDetectionEnabled;
            _resultValue.stretchMode = stretchMode;
            _resultValue.syncMode = syncMode;
            return _resultValue;
        }
    }
}
