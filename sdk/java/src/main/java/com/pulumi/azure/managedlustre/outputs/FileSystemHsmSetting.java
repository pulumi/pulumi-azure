// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.managedlustre.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FileSystemHsmSetting {
    /**
     * @return The resource ID of the storage container that is used for hydrating the namespace and archiving from the namespace. Changing this forces a new resource to be created.
     * 
     */
    private String containerId;
    /**
     * @return The import prefix for the Azure Managed Lustre File System. Only blobs in the non-logging container that start with this path/prefix get hydrated into the cluster namespace. Changing this forces a new resource to be created.
     * 
     * &gt; **NOTE:** The roles `Contributor` and `Storage Blob Data Contributor` must be added to the Service Principal `HPC Cache Resource Provider` for the Storage Account. See official docs for more information.
     * 
     */
    private @Nullable String importPrefix;
    /**
     * @return The resource ID of the storage container that is used for logging events and errors. Changing this forces a new resource to be created.
     * 
     */
    private String loggingContainerId;

    private FileSystemHsmSetting() {}
    /**
     * @return The resource ID of the storage container that is used for hydrating the namespace and archiving from the namespace. Changing this forces a new resource to be created.
     * 
     */
    public String containerId() {
        return this.containerId;
    }
    /**
     * @return The import prefix for the Azure Managed Lustre File System. Only blobs in the non-logging container that start with this path/prefix get hydrated into the cluster namespace. Changing this forces a new resource to be created.
     * 
     * &gt; **NOTE:** The roles `Contributor` and `Storage Blob Data Contributor` must be added to the Service Principal `HPC Cache Resource Provider` for the Storage Account. See official docs for more information.
     * 
     */
    public Optional<String> importPrefix() {
        return Optional.ofNullable(this.importPrefix);
    }
    /**
     * @return The resource ID of the storage container that is used for logging events and errors. Changing this forces a new resource to be created.
     * 
     */
    public String loggingContainerId() {
        return this.loggingContainerId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FileSystemHsmSetting defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String containerId;
        private @Nullable String importPrefix;
        private String loggingContainerId;
        public Builder() {}
        public Builder(FileSystemHsmSetting defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.containerId = defaults.containerId;
    	      this.importPrefix = defaults.importPrefix;
    	      this.loggingContainerId = defaults.loggingContainerId;
        }

        @CustomType.Setter
        public Builder containerId(String containerId) {
            if (containerId == null) {
              throw new MissingRequiredPropertyException("FileSystemHsmSetting", "containerId");
            }
            this.containerId = containerId;
            return this;
        }
        @CustomType.Setter
        public Builder importPrefix(@Nullable String importPrefix) {

            this.importPrefix = importPrefix;
            return this;
        }
        @CustomType.Setter
        public Builder loggingContainerId(String loggingContainerId) {
            if (loggingContainerId == null) {
              throw new MissingRequiredPropertyException("FileSystemHsmSetting", "loggingContainerId");
            }
            this.loggingContainerId = loggingContainerId;
            return this;
        }
        public FileSystemHsmSetting build() {
            final var _resultValue = new FileSystemHsmSetting();
            _resultValue.containerId = containerId;
            _resultValue.importPrefix = importPrefix;
            _resultValue.loggingContainerId = loggingContainerId;
            return _resultValue;
        }
    }
}
