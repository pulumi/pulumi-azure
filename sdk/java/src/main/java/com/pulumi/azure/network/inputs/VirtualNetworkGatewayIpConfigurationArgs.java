// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VirtualNetworkGatewayIpConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final VirtualNetworkGatewayIpConfigurationArgs Empty = new VirtualNetworkGatewayIpConfigurationArgs();

    /**
     * A user-defined name of the IP configuration. Defaults to `vnetGatewayConfig`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A user-defined name of the IP configuration. Defaults to `vnetGatewayConfig`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Defines how the private IP address of the gateways virtual interface is assigned. Valid options are `Static` or `Dynamic`. Defaults to `Dynamic`.
     * 
     */
    @Import(name="privateIpAddressAllocation")
    private @Nullable Output<String> privateIpAddressAllocation;

    /**
     * @return Defines how the private IP address of the gateways virtual interface is assigned. Valid options are `Static` or `Dynamic`. Defaults to `Dynamic`.
     * 
     */
    public Optional<Output<String>> privateIpAddressAllocation() {
        return Optional.ofNullable(this.privateIpAddressAllocation);
    }

    /**
     * The ID of the public IP address to associate with the Virtual Network Gateway.
     * 
     */
    @Import(name="publicIpAddressId", required=true)
    private Output<String> publicIpAddressId;

    /**
     * @return The ID of the public IP address to associate with the Virtual Network Gateway.
     * 
     */
    public Output<String> publicIpAddressId() {
        return this.publicIpAddressId;
    }

    /**
     * The ID of the gateway subnet of a virtual network in which the virtual network gateway will be created. It is mandatory that the associated subnet is named `GatewaySubnet`. Therefore, each virtual network can contain at most a single Virtual Network Gateway.
     * 
     */
    @Import(name="subnetId", required=true)
    private Output<String> subnetId;

    /**
     * @return The ID of the gateway subnet of a virtual network in which the virtual network gateway will be created. It is mandatory that the associated subnet is named `GatewaySubnet`. Therefore, each virtual network can contain at most a single Virtual Network Gateway.
     * 
     */
    public Output<String> subnetId() {
        return this.subnetId;
    }

    private VirtualNetworkGatewayIpConfigurationArgs() {}

    private VirtualNetworkGatewayIpConfigurationArgs(VirtualNetworkGatewayIpConfigurationArgs $) {
        this.name = $.name;
        this.privateIpAddressAllocation = $.privateIpAddressAllocation;
        this.publicIpAddressId = $.publicIpAddressId;
        this.subnetId = $.subnetId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualNetworkGatewayIpConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualNetworkGatewayIpConfigurationArgs $;

        public Builder() {
            $ = new VirtualNetworkGatewayIpConfigurationArgs();
        }

        public Builder(VirtualNetworkGatewayIpConfigurationArgs defaults) {
            $ = new VirtualNetworkGatewayIpConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name A user-defined name of the IP configuration. Defaults to `vnetGatewayConfig`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A user-defined name of the IP configuration. Defaults to `vnetGatewayConfig`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param privateIpAddressAllocation Defines how the private IP address of the gateways virtual interface is assigned. Valid options are `Static` or `Dynamic`. Defaults to `Dynamic`.
         * 
         * @return builder
         * 
         */
        public Builder privateIpAddressAllocation(@Nullable Output<String> privateIpAddressAllocation) {
            $.privateIpAddressAllocation = privateIpAddressAllocation;
            return this;
        }

        /**
         * @param privateIpAddressAllocation Defines how the private IP address of the gateways virtual interface is assigned. Valid options are `Static` or `Dynamic`. Defaults to `Dynamic`.
         * 
         * @return builder
         * 
         */
        public Builder privateIpAddressAllocation(String privateIpAddressAllocation) {
            return privateIpAddressAllocation(Output.of(privateIpAddressAllocation));
        }

        /**
         * @param publicIpAddressId The ID of the public IP address to associate with the Virtual Network Gateway.
         * 
         * @return builder
         * 
         */
        public Builder publicIpAddressId(Output<String> publicIpAddressId) {
            $.publicIpAddressId = publicIpAddressId;
            return this;
        }

        /**
         * @param publicIpAddressId The ID of the public IP address to associate with the Virtual Network Gateway.
         * 
         * @return builder
         * 
         */
        public Builder publicIpAddressId(String publicIpAddressId) {
            return publicIpAddressId(Output.of(publicIpAddressId));
        }

        /**
         * @param subnetId The ID of the gateway subnet of a virtual network in which the virtual network gateway will be created. It is mandatory that the associated subnet is named `GatewaySubnet`. Therefore, each virtual network can contain at most a single Virtual Network Gateway.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        /**
         * @param subnetId The ID of the gateway subnet of a virtual network in which the virtual network gateway will be created. It is mandatory that the associated subnet is named `GatewaySubnet`. Therefore, each virtual network can contain at most a single Virtual Network Gateway.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        public VirtualNetworkGatewayIpConfigurationArgs build() {
            if ($.publicIpAddressId == null) {
                throw new MissingRequiredPropertyException("VirtualNetworkGatewayIpConfigurationArgs", "publicIpAddressId");
            }
            if ($.subnetId == null) {
                throw new MissingRequiredPropertyException("VirtualNetworkGatewayIpConfigurationArgs", "subnetId");
            }
            return $;
        }
    }

}
