// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.maintenance;

import com.pulumi.azure.maintenance.inputs.AssignmentDynamicScopeFilterArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AssignmentDynamicScopeArgs extends com.pulumi.resources.ResourceArgs {

    public static final AssignmentDynamicScopeArgs Empty = new AssignmentDynamicScopeArgs();

    /**
     * A `filter` block as defined below.
     * 
     */
    @Import(name="filter", required=true)
    private Output<AssignmentDynamicScopeFilterArgs> filter;

    /**
     * @return A `filter` block as defined below.
     * 
     */
    public Output<AssignmentDynamicScopeFilterArgs> filter() {
        return this.filter;
    }

    /**
     * The ID of the Maintenance Configuration Resource. Changing this forces a new Dynamic Maintenance Assignment to be created.
     * 
     */
    @Import(name="maintenanceConfigurationId", required=true)
    private Output<String> maintenanceConfigurationId;

    /**
     * @return The ID of the Maintenance Configuration Resource. Changing this forces a new Dynamic Maintenance Assignment to be created.
     * 
     */
    public Output<String> maintenanceConfigurationId() {
        return this.maintenanceConfigurationId;
    }

    /**
     * The name which should be used for this Dynamic Maintenance Assignment. Changing this forces a new Dynamic Maintenance Assignment to be created.
     * 
     * &gt; **Note:** The `name` must be unique per subscription.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name which should be used for this Dynamic Maintenance Assignment. Changing this forces a new Dynamic Maintenance Assignment to be created.
     * 
     * &gt; **Note:** The `name` must be unique per subscription.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private AssignmentDynamicScopeArgs() {}

    private AssignmentDynamicScopeArgs(AssignmentDynamicScopeArgs $) {
        this.filter = $.filter;
        this.maintenanceConfigurationId = $.maintenanceConfigurationId;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AssignmentDynamicScopeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AssignmentDynamicScopeArgs $;

        public Builder() {
            $ = new AssignmentDynamicScopeArgs();
        }

        public Builder(AssignmentDynamicScopeArgs defaults) {
            $ = new AssignmentDynamicScopeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param filter A `filter` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder filter(Output<AssignmentDynamicScopeFilterArgs> filter) {
            $.filter = filter;
            return this;
        }

        /**
         * @param filter A `filter` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder filter(AssignmentDynamicScopeFilterArgs filter) {
            return filter(Output.of(filter));
        }

        /**
         * @param maintenanceConfigurationId The ID of the Maintenance Configuration Resource. Changing this forces a new Dynamic Maintenance Assignment to be created.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceConfigurationId(Output<String> maintenanceConfigurationId) {
            $.maintenanceConfigurationId = maintenanceConfigurationId;
            return this;
        }

        /**
         * @param maintenanceConfigurationId The ID of the Maintenance Configuration Resource. Changing this forces a new Dynamic Maintenance Assignment to be created.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceConfigurationId(String maintenanceConfigurationId) {
            return maintenanceConfigurationId(Output.of(maintenanceConfigurationId));
        }

        /**
         * @param name The name which should be used for this Dynamic Maintenance Assignment. Changing this forces a new Dynamic Maintenance Assignment to be created.
         * 
         * &gt; **Note:** The `name` must be unique per subscription.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this Dynamic Maintenance Assignment. Changing this forces a new Dynamic Maintenance Assignment to be created.
         * 
         * &gt; **Note:** The `name` must be unique per subscription.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public AssignmentDynamicScopeArgs build() {
            if ($.filter == null) {
                throw new MissingRequiredPropertyException("AssignmentDynamicScopeArgs", "filter");
            }
            if ($.maintenanceConfigurationId == null) {
                throw new MissingRequiredPropertyException("AssignmentDynamicScopeArgs", "maintenanceConfigurationId");
            }
            return $;
        }
    }

}
