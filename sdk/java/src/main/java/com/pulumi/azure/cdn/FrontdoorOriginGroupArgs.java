// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.cdn;

import com.pulumi.azure.cdn.inputs.FrontdoorOriginGroupHealthProbeArgs;
import com.pulumi.azure.cdn.inputs.FrontdoorOriginGroupLoadBalancingArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FrontdoorOriginGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final FrontdoorOriginGroupArgs Empty = new FrontdoorOriginGroupArgs();

    /**
     * The ID of the CDN FrontDoor Profile within which this CDN FrontDoor Origin Group should exist. Changing this forces a new CDN FrontDoor Origin Group to be created.
     * 
     */
    @Import(name="cdnFrontdoorProfileId", required=true)
    private Output<String> cdnFrontdoorProfileId;

    /**
     * @return The ID of the CDN FrontDoor Profile within which this CDN FrontDoor Origin Group should exist. Changing this forces a new CDN FrontDoor Origin Group to be created.
     * 
     */
    public Output<String> cdnFrontdoorProfileId() {
        return this.cdnFrontdoorProfileId;
    }

    /**
     * A `health_probe` block as defined below.
     * 
     */
    @Import(name="healthProbe")
    private @Nullable Output<FrontdoorOriginGroupHealthProbeArgs> healthProbe;

    /**
     * @return A `health_probe` block as defined below.
     * 
     */
    public Optional<Output<FrontdoorOriginGroupHealthProbeArgs>> healthProbe() {
        return Optional.ofNullable(this.healthProbe);
    }

    /**
     * A `load_balancing` block as defined below.
     * 
     */
    @Import(name="loadBalancing", required=true)
    private Output<FrontdoorOriginGroupLoadBalancingArgs> loadBalancing;

    /**
     * @return A `load_balancing` block as defined below.
     * 
     */
    public Output<FrontdoorOriginGroupLoadBalancingArgs> loadBalancing() {
        return this.loadBalancing;
    }

    /**
     * The name which should be used for this CDN FrontDoor Origin Group. Changing this forces a new CDN FrontDoor Origin Group to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name which should be used for this CDN FrontDoor Origin Group. Changing this forces a new CDN FrontDoor Origin Group to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Specifies the amount of time which should elapse before shifting traffic to another endpoint when a healthy endpoint becomes unhealthy or a new endpoint is added. Possible values are between `0` and `50` minutes (inclusive). Default is `10` minutes.
     * 
     */
    @Import(name="restoreTrafficTimeToHealedOrNewEndpointInMinutes")
    private @Nullable Output<Integer> restoreTrafficTimeToHealedOrNewEndpointInMinutes;

    /**
     * @return Specifies the amount of time which should elapse before shifting traffic to another endpoint when a healthy endpoint becomes unhealthy or a new endpoint is added. Possible values are between `0` and `50` minutes (inclusive). Default is `10` minutes.
     * 
     */
    public Optional<Output<Integer>> restoreTrafficTimeToHealedOrNewEndpointInMinutes() {
        return Optional.ofNullable(this.restoreTrafficTimeToHealedOrNewEndpointInMinutes);
    }

    /**
     * Specifies whether session affinity should be enabled on this host. Defaults to `true`.
     * 
     */
    @Import(name="sessionAffinityEnabled")
    private @Nullable Output<Boolean> sessionAffinityEnabled;

    /**
     * @return Specifies whether session affinity should be enabled on this host. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> sessionAffinityEnabled() {
        return Optional.ofNullable(this.sessionAffinityEnabled);
    }

    private FrontdoorOriginGroupArgs() {}

    private FrontdoorOriginGroupArgs(FrontdoorOriginGroupArgs $) {
        this.cdnFrontdoorProfileId = $.cdnFrontdoorProfileId;
        this.healthProbe = $.healthProbe;
        this.loadBalancing = $.loadBalancing;
        this.name = $.name;
        this.restoreTrafficTimeToHealedOrNewEndpointInMinutes = $.restoreTrafficTimeToHealedOrNewEndpointInMinutes;
        this.sessionAffinityEnabled = $.sessionAffinityEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FrontdoorOriginGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FrontdoorOriginGroupArgs $;

        public Builder() {
            $ = new FrontdoorOriginGroupArgs();
        }

        public Builder(FrontdoorOriginGroupArgs defaults) {
            $ = new FrontdoorOriginGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cdnFrontdoorProfileId The ID of the CDN FrontDoor Profile within which this CDN FrontDoor Origin Group should exist. Changing this forces a new CDN FrontDoor Origin Group to be created.
         * 
         * @return builder
         * 
         */
        public Builder cdnFrontdoorProfileId(Output<String> cdnFrontdoorProfileId) {
            $.cdnFrontdoorProfileId = cdnFrontdoorProfileId;
            return this;
        }

        /**
         * @param cdnFrontdoorProfileId The ID of the CDN FrontDoor Profile within which this CDN FrontDoor Origin Group should exist. Changing this forces a new CDN FrontDoor Origin Group to be created.
         * 
         * @return builder
         * 
         */
        public Builder cdnFrontdoorProfileId(String cdnFrontdoorProfileId) {
            return cdnFrontdoorProfileId(Output.of(cdnFrontdoorProfileId));
        }

        /**
         * @param healthProbe A `health_probe` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder healthProbe(@Nullable Output<FrontdoorOriginGroupHealthProbeArgs> healthProbe) {
            $.healthProbe = healthProbe;
            return this;
        }

        /**
         * @param healthProbe A `health_probe` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder healthProbe(FrontdoorOriginGroupHealthProbeArgs healthProbe) {
            return healthProbe(Output.of(healthProbe));
        }

        /**
         * @param loadBalancing A `load_balancing` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancing(Output<FrontdoorOriginGroupLoadBalancingArgs> loadBalancing) {
            $.loadBalancing = loadBalancing;
            return this;
        }

        /**
         * @param loadBalancing A `load_balancing` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancing(FrontdoorOriginGroupLoadBalancingArgs loadBalancing) {
            return loadBalancing(Output.of(loadBalancing));
        }

        /**
         * @param name The name which should be used for this CDN FrontDoor Origin Group. Changing this forces a new CDN FrontDoor Origin Group to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this CDN FrontDoor Origin Group. Changing this forces a new CDN FrontDoor Origin Group to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param restoreTrafficTimeToHealedOrNewEndpointInMinutes Specifies the amount of time which should elapse before shifting traffic to another endpoint when a healthy endpoint becomes unhealthy or a new endpoint is added. Possible values are between `0` and `50` minutes (inclusive). Default is `10` minutes.
         * 
         * @return builder
         * 
         */
        public Builder restoreTrafficTimeToHealedOrNewEndpointInMinutes(@Nullable Output<Integer> restoreTrafficTimeToHealedOrNewEndpointInMinutes) {
            $.restoreTrafficTimeToHealedOrNewEndpointInMinutes = restoreTrafficTimeToHealedOrNewEndpointInMinutes;
            return this;
        }

        /**
         * @param restoreTrafficTimeToHealedOrNewEndpointInMinutes Specifies the amount of time which should elapse before shifting traffic to another endpoint when a healthy endpoint becomes unhealthy or a new endpoint is added. Possible values are between `0` and `50` minutes (inclusive). Default is `10` minutes.
         * 
         * @return builder
         * 
         */
        public Builder restoreTrafficTimeToHealedOrNewEndpointInMinutes(Integer restoreTrafficTimeToHealedOrNewEndpointInMinutes) {
            return restoreTrafficTimeToHealedOrNewEndpointInMinutes(Output.of(restoreTrafficTimeToHealedOrNewEndpointInMinutes));
        }

        /**
         * @param sessionAffinityEnabled Specifies whether session affinity should be enabled on this host. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder sessionAffinityEnabled(@Nullable Output<Boolean> sessionAffinityEnabled) {
            $.sessionAffinityEnabled = sessionAffinityEnabled;
            return this;
        }

        /**
         * @param sessionAffinityEnabled Specifies whether session affinity should be enabled on this host. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder sessionAffinityEnabled(Boolean sessionAffinityEnabled) {
            return sessionAffinityEnabled(Output.of(sessionAffinityEnabled));
        }

        public FrontdoorOriginGroupArgs build() {
            $.cdnFrontdoorProfileId = Objects.requireNonNull($.cdnFrontdoorProfileId, "expected parameter 'cdnFrontdoorProfileId' to be non-null");
            $.loadBalancing = Objects.requireNonNull($.loadBalancing, "expected parameter 'loadBalancing' to be non-null");
            return $;
        }
    }

}
