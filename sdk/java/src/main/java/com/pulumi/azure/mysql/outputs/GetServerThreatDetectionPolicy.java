// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.mysql.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetServerThreatDetectionPolicy {
    /**
     * @return Specifies a list of alerts which should be disabled. Possible values include `Access_Anomaly`, `Sql_Injection` and `Sql_Injection_Vulnerability`.
     * 
     */
    private List<String> disabledAlerts;
    /**
     * @return Should the account administrators be emailed when this alert is triggered?
     * 
     */
    private Boolean emailAccountAdmins;
    /**
     * @return A list of email addresses which alerts should be sent to.
     * 
     */
    private List<String> emailAddresses;
    /**
     * @return Is the policy enabled?
     * 
     */
    private Boolean enabled;
    /**
     * @return Specifies the number of days to keep in the Threat Detection audit logs.
     * 
     */
    private Integer retentionDays;
    /**
     * @return Specifies the identifier key of the Threat Detection audit storage account.
     * 
     */
    private String storageAccountAccessKey;
    /**
     * @return Specifies the blob storage endpoint (e.g. &lt;https://example.blob.core.windows.net&gt;). This blob storage will hold all Threat Detection audit logs.
     * 
     */
    private String storageEndpoint;

    private GetServerThreatDetectionPolicy() {}
    /**
     * @return Specifies a list of alerts which should be disabled. Possible values include `Access_Anomaly`, `Sql_Injection` and `Sql_Injection_Vulnerability`.
     * 
     */
    public List<String> disabledAlerts() {
        return this.disabledAlerts;
    }
    /**
     * @return Should the account administrators be emailed when this alert is triggered?
     * 
     */
    public Boolean emailAccountAdmins() {
        return this.emailAccountAdmins;
    }
    /**
     * @return A list of email addresses which alerts should be sent to.
     * 
     */
    public List<String> emailAddresses() {
        return this.emailAddresses;
    }
    /**
     * @return Is the policy enabled?
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return Specifies the number of days to keep in the Threat Detection audit logs.
     * 
     */
    public Integer retentionDays() {
        return this.retentionDays;
    }
    /**
     * @return Specifies the identifier key of the Threat Detection audit storage account.
     * 
     */
    public String storageAccountAccessKey() {
        return this.storageAccountAccessKey;
    }
    /**
     * @return Specifies the blob storage endpoint (e.g. &lt;https://example.blob.core.windows.net&gt;). This blob storage will hold all Threat Detection audit logs.
     * 
     */
    public String storageEndpoint() {
        return this.storageEndpoint;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServerThreatDetectionPolicy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> disabledAlerts;
        private Boolean emailAccountAdmins;
        private List<String> emailAddresses;
        private Boolean enabled;
        private Integer retentionDays;
        private String storageAccountAccessKey;
        private String storageEndpoint;
        public Builder() {}
        public Builder(GetServerThreatDetectionPolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.disabledAlerts = defaults.disabledAlerts;
    	      this.emailAccountAdmins = defaults.emailAccountAdmins;
    	      this.emailAddresses = defaults.emailAddresses;
    	      this.enabled = defaults.enabled;
    	      this.retentionDays = defaults.retentionDays;
    	      this.storageAccountAccessKey = defaults.storageAccountAccessKey;
    	      this.storageEndpoint = defaults.storageEndpoint;
        }

        @CustomType.Setter
        public Builder disabledAlerts(List<String> disabledAlerts) {
            if (disabledAlerts == null) {
              throw new MissingRequiredPropertyException("GetServerThreatDetectionPolicy", "disabledAlerts");
            }
            this.disabledAlerts = disabledAlerts;
            return this;
        }
        public Builder disabledAlerts(String... disabledAlerts) {
            return disabledAlerts(List.of(disabledAlerts));
        }
        @CustomType.Setter
        public Builder emailAccountAdmins(Boolean emailAccountAdmins) {
            if (emailAccountAdmins == null) {
              throw new MissingRequiredPropertyException("GetServerThreatDetectionPolicy", "emailAccountAdmins");
            }
            this.emailAccountAdmins = emailAccountAdmins;
            return this;
        }
        @CustomType.Setter
        public Builder emailAddresses(List<String> emailAddresses) {
            if (emailAddresses == null) {
              throw new MissingRequiredPropertyException("GetServerThreatDetectionPolicy", "emailAddresses");
            }
            this.emailAddresses = emailAddresses;
            return this;
        }
        public Builder emailAddresses(String... emailAddresses) {
            return emailAddresses(List.of(emailAddresses));
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetServerThreatDetectionPolicy", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder retentionDays(Integer retentionDays) {
            if (retentionDays == null) {
              throw new MissingRequiredPropertyException("GetServerThreatDetectionPolicy", "retentionDays");
            }
            this.retentionDays = retentionDays;
            return this;
        }
        @CustomType.Setter
        public Builder storageAccountAccessKey(String storageAccountAccessKey) {
            if (storageAccountAccessKey == null) {
              throw new MissingRequiredPropertyException("GetServerThreatDetectionPolicy", "storageAccountAccessKey");
            }
            this.storageAccountAccessKey = storageAccountAccessKey;
            return this;
        }
        @CustomType.Setter
        public Builder storageEndpoint(String storageEndpoint) {
            if (storageEndpoint == null) {
              throw new MissingRequiredPropertyException("GetServerThreatDetectionPolicy", "storageEndpoint");
            }
            this.storageEndpoint = storageEndpoint;
            return this;
        }
        public GetServerThreatDetectionPolicy build() {
            final var _resultValue = new GetServerThreatDetectionPolicy();
            _resultValue.disabledAlerts = disabledAlerts;
            _resultValue.emailAccountAdmins = emailAccountAdmins;
            _resultValue.emailAddresses = emailAddresses;
            _resultValue.enabled = enabled;
            _resultValue.retentionDays = retentionDays;
            _resultValue.storageAccountAccessKey = storageAccountAccessKey;
            _resultValue.storageEndpoint = storageEndpoint;
            return _resultValue;
        }
    }
}
