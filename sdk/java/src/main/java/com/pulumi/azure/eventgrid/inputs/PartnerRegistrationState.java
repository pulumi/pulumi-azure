// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.eventgrid.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PartnerRegistrationState extends com.pulumi.resources.ResourceArgs {

    public static final PartnerRegistrationState Empty = new PartnerRegistrationState();

    /**
     * The name which should be used for this EventGrid Partner Registration. Changing this forces a new EventGrid Partner Registration to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name which should be used for this EventGrid Partner Registration. Changing this forces a new EventGrid Partner Registration to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The immutable id of the corresponding partner registration.
     * 
     */
    @Import(name="partnerRegistrationId")
    private @Nullable Output<String> partnerRegistrationId;

    /**
     * @return The immutable id of the corresponding partner registration.
     * 
     */
    public Optional<Output<String>> partnerRegistrationId() {
        return Optional.ofNullable(this.partnerRegistrationId);
    }

    /**
     * The name of the Resource Group where the EventGrid Partner Registration should exist. Changing this forces a new EventGrid Partner Registration to be created.
     * 
     */
    @Import(name="resourceGroupName")
    private @Nullable Output<String> resourceGroupName;

    /**
     * @return The name of the Resource Group where the EventGrid Partner Registration should exist. Changing this forces a new EventGrid Partner Registration to be created.
     * 
     */
    public Optional<Output<String>> resourceGroupName() {
        return Optional.ofNullable(this.resourceGroupName);
    }

    /**
     * A mapping of tags which should be assigned to the EventGrid Partner Registration.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags which should be assigned to the EventGrid Partner Registration.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private PartnerRegistrationState() {}

    private PartnerRegistrationState(PartnerRegistrationState $) {
        this.name = $.name;
        this.partnerRegistrationId = $.partnerRegistrationId;
        this.resourceGroupName = $.resourceGroupName;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PartnerRegistrationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PartnerRegistrationState $;

        public Builder() {
            $ = new PartnerRegistrationState();
        }

        public Builder(PartnerRegistrationState defaults) {
            $ = new PartnerRegistrationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param name The name which should be used for this EventGrid Partner Registration. Changing this forces a new EventGrid Partner Registration to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this EventGrid Partner Registration. Changing this forces a new EventGrid Partner Registration to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param partnerRegistrationId The immutable id of the corresponding partner registration.
         * 
         * @return builder
         * 
         */
        public Builder partnerRegistrationId(@Nullable Output<String> partnerRegistrationId) {
            $.partnerRegistrationId = partnerRegistrationId;
            return this;
        }

        /**
         * @param partnerRegistrationId The immutable id of the corresponding partner registration.
         * 
         * @return builder
         * 
         */
        public Builder partnerRegistrationId(String partnerRegistrationId) {
            return partnerRegistrationId(Output.of(partnerRegistrationId));
        }

        /**
         * @param resourceGroupName The name of the Resource Group where the EventGrid Partner Registration should exist. Changing this forces a new EventGrid Partner Registration to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(@Nullable Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the Resource Group where the EventGrid Partner Registration should exist. Changing this forces a new EventGrid Partner Registration to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param tags A mapping of tags which should be assigned to the EventGrid Partner Registration.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags which should be assigned to the EventGrid Partner Registration.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public PartnerRegistrationState build() {
            return $;
        }
    }

}
