// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.webpubsub.inputs;

import com.pulumi.azure.webpubsub.inputs.HubEventHandlerAuthArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HubEventHandlerArgs extends com.pulumi.resources.ResourceArgs {

    public static final HubEventHandlerArgs Empty = new HubEventHandlerArgs();

    /**
     * An `auth` block as defined below.
     * 
     */
    @Import(name="auth")
    private @Nullable Output<HubEventHandlerAuthArgs> auth;

    /**
     * @return An `auth` block as defined below.
     * 
     */
    public Optional<Output<HubEventHandlerAuthArgs>> auth() {
        return Optional.ofNullable(this.auth);
    }

    /**
     * Specifies the list of system events. Supported values are `connect`, `connected` and `disconnected`.
     * 
     */
    @Import(name="systemEvents")
    private @Nullable Output<List<String>> systemEvents;

    /**
     * @return Specifies the list of system events. Supported values are `connect`, `connected` and `disconnected`.
     * 
     */
    public Optional<Output<List<String>>> systemEvents() {
        return Optional.ofNullable(this.systemEvents);
    }

    /**
     * The Event Handler URL Template. Two predefined parameters `{hub}` and `{event}` are available to use in the template. The value of the EventHandler URL is dynamically calculated when the client request comes in. Example: `http://example.com/api/{hub}/{event}`.
     * 
     */
    @Import(name="urlTemplate", required=true)
    private Output<String> urlTemplate;

    /**
     * @return The Event Handler URL Template. Two predefined parameters `{hub}` and `{event}` are available to use in the template. The value of the EventHandler URL is dynamically calculated when the client request comes in. Example: `http://example.com/api/{hub}/{event}`.
     * 
     */
    public Output<String> urlTemplate() {
        return this.urlTemplate;
    }

    /**
     * Specifies the matching event names. There are 3 kind of patterns supported: * `*` matches any event name * `,` Combine multiple events with `,` for example `event1,event2`, it matches event `event1` and `event2` * The single event name, for example `event1`, it matches `event1`.
     * 
     */
    @Import(name="userEventPattern")
    private @Nullable Output<String> userEventPattern;

    /**
     * @return Specifies the matching event names. There are 3 kind of patterns supported: * `*` matches any event name * `,` Combine multiple events with `,` for example `event1,event2`, it matches event `event1` and `event2` * The single event name, for example `event1`, it matches `event1`.
     * 
     */
    public Optional<Output<String>> userEventPattern() {
        return Optional.ofNullable(this.userEventPattern);
    }

    private HubEventHandlerArgs() {}

    private HubEventHandlerArgs(HubEventHandlerArgs $) {
        this.auth = $.auth;
        this.systemEvents = $.systemEvents;
        this.urlTemplate = $.urlTemplate;
        this.userEventPattern = $.userEventPattern;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HubEventHandlerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HubEventHandlerArgs $;

        public Builder() {
            $ = new HubEventHandlerArgs();
        }

        public Builder(HubEventHandlerArgs defaults) {
            $ = new HubEventHandlerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param auth An `auth` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder auth(@Nullable Output<HubEventHandlerAuthArgs> auth) {
            $.auth = auth;
            return this;
        }

        /**
         * @param auth An `auth` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder auth(HubEventHandlerAuthArgs auth) {
            return auth(Output.of(auth));
        }

        /**
         * @param systemEvents Specifies the list of system events. Supported values are `connect`, `connected` and `disconnected`.
         * 
         * @return builder
         * 
         */
        public Builder systemEvents(@Nullable Output<List<String>> systemEvents) {
            $.systemEvents = systemEvents;
            return this;
        }

        /**
         * @param systemEvents Specifies the list of system events. Supported values are `connect`, `connected` and `disconnected`.
         * 
         * @return builder
         * 
         */
        public Builder systemEvents(List<String> systemEvents) {
            return systemEvents(Output.of(systemEvents));
        }

        /**
         * @param systemEvents Specifies the list of system events. Supported values are `connect`, `connected` and `disconnected`.
         * 
         * @return builder
         * 
         */
        public Builder systemEvents(String... systemEvents) {
            return systemEvents(List.of(systemEvents));
        }

        /**
         * @param urlTemplate The Event Handler URL Template. Two predefined parameters `{hub}` and `{event}` are available to use in the template. The value of the EventHandler URL is dynamically calculated when the client request comes in. Example: `http://example.com/api/{hub}/{event}`.
         * 
         * @return builder
         * 
         */
        public Builder urlTemplate(Output<String> urlTemplate) {
            $.urlTemplate = urlTemplate;
            return this;
        }

        /**
         * @param urlTemplate The Event Handler URL Template. Two predefined parameters `{hub}` and `{event}` are available to use in the template. The value of the EventHandler URL is dynamically calculated when the client request comes in. Example: `http://example.com/api/{hub}/{event}`.
         * 
         * @return builder
         * 
         */
        public Builder urlTemplate(String urlTemplate) {
            return urlTemplate(Output.of(urlTemplate));
        }

        /**
         * @param userEventPattern Specifies the matching event names. There are 3 kind of patterns supported: * `*` matches any event name * `,` Combine multiple events with `,` for example `event1,event2`, it matches event `event1` and `event2` * The single event name, for example `event1`, it matches `event1`.
         * 
         * @return builder
         * 
         */
        public Builder userEventPattern(@Nullable Output<String> userEventPattern) {
            $.userEventPattern = userEventPattern;
            return this;
        }

        /**
         * @param userEventPattern Specifies the matching event names. There are 3 kind of patterns supported: * `*` matches any event name * `,` Combine multiple events with `,` for example `event1,event2`, it matches event `event1` and `event2` * The single event name, for example `event1`, it matches `event1`.
         * 
         * @return builder
         * 
         */
        public Builder userEventPattern(String userEventPattern) {
            return userEventPattern(Output.of(userEventPattern));
        }

        public HubEventHandlerArgs build() {
            if ($.urlTemplate == null) {
                throw new MissingRequiredPropertyException("HubEventHandlerArgs", "urlTemplate");
            }
            return $;
        }
    }

}
