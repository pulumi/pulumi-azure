// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.logicapps.inputs;

import com.pulumi.azure.logicapps.inputs.IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceScheduleArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceArgs extends com.pulumi.resources.ResourceArgs {

    public static final IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceArgs Empty = new IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceArgs();

    /**
     * The end time of the schedule, formatted as an RFC3339 string.
     * 
     */
    @Import(name="endTime")
    private @Nullable Output<String> endTime;

    /**
     * @return The end time of the schedule, formatted as an RFC3339 string.
     * 
     */
    public Optional<Output<String>> endTime() {
        return Optional.ofNullable(this.endTime);
    }

    /**
     * The frequency of the schedule. Possible values are `Day`, `Hour`, `Minute`, `Month`, `NotSpecified`, `Second`, `Week` and `Year`.
     * 
     */
    @Import(name="frequency", required=true)
    private Output<String> frequency;

    /**
     * @return The frequency of the schedule. Possible values are `Day`, `Hour`, `Minute`, `Month`, `NotSpecified`, `Second`, `Week` and `Year`.
     * 
     */
    public Output<String> frequency() {
        return this.frequency;
    }

    /**
     * The number of `frequency`s between runs.
     * 
     */
    @Import(name="interval", required=true)
    private Output<Integer> interval;

    /**
     * @return The number of `frequency`s between runs.
     * 
     */
    public Output<Integer> interval() {
        return this.interval;
    }

    /**
     * A `schedule` block as documented below.
     * 
     */
    @Import(name="schedule")
    private @Nullable Output<IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceScheduleArgs> schedule;

    /**
     * @return A `schedule` block as documented below.
     * 
     */
    public Optional<Output<IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceScheduleArgs>> schedule() {
        return Optional.ofNullable(this.schedule);
    }

    /**
     * The start time of the schedule, formatted as an RFC3339 string.
     * 
     */
    @Import(name="startTime")
    private @Nullable Output<String> startTime;

    /**
     * @return The start time of the schedule, formatted as an RFC3339 string.
     * 
     */
    public Optional<Output<String>> startTime() {
        return Optional.ofNullable(this.startTime);
    }

    /**
     * The timezone of the start/end time.
     * 
     */
    @Import(name="timeZone")
    private @Nullable Output<String> timeZone;

    /**
     * @return The timezone of the start/end time.
     * 
     */
    public Optional<Output<String>> timeZone() {
        return Optional.ofNullable(this.timeZone);
    }

    private IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceArgs() {}

    private IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceArgs(IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceArgs $) {
        this.endTime = $.endTime;
        this.frequency = $.frequency;
        this.interval = $.interval;
        this.schedule = $.schedule;
        this.startTime = $.startTime;
        this.timeZone = $.timeZone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceArgs $;

        public Builder() {
            $ = new IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceArgs();
        }

        public Builder(IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceArgs defaults) {
            $ = new IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param endTime The end time of the schedule, formatted as an RFC3339 string.
         * 
         * @return builder
         * 
         */
        public Builder endTime(@Nullable Output<String> endTime) {
            $.endTime = endTime;
            return this;
        }

        /**
         * @param endTime The end time of the schedule, formatted as an RFC3339 string.
         * 
         * @return builder
         * 
         */
        public Builder endTime(String endTime) {
            return endTime(Output.of(endTime));
        }

        /**
         * @param frequency The frequency of the schedule. Possible values are `Day`, `Hour`, `Minute`, `Month`, `NotSpecified`, `Second`, `Week` and `Year`.
         * 
         * @return builder
         * 
         */
        public Builder frequency(Output<String> frequency) {
            $.frequency = frequency;
            return this;
        }

        /**
         * @param frequency The frequency of the schedule. Possible values are `Day`, `Hour`, `Minute`, `Month`, `NotSpecified`, `Second`, `Week` and `Year`.
         * 
         * @return builder
         * 
         */
        public Builder frequency(String frequency) {
            return frequency(Output.of(frequency));
        }

        /**
         * @param interval The number of `frequency`s between runs.
         * 
         * @return builder
         * 
         */
        public Builder interval(Output<Integer> interval) {
            $.interval = interval;
            return this;
        }

        /**
         * @param interval The number of `frequency`s between runs.
         * 
         * @return builder
         * 
         */
        public Builder interval(Integer interval) {
            return interval(Output.of(interval));
        }

        /**
         * @param schedule A `schedule` block as documented below.
         * 
         * @return builder
         * 
         */
        public Builder schedule(@Nullable Output<IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceScheduleArgs> schedule) {
            $.schedule = schedule;
            return this;
        }

        /**
         * @param schedule A `schedule` block as documented below.
         * 
         * @return builder
         * 
         */
        public Builder schedule(IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceScheduleArgs schedule) {
            return schedule(Output.of(schedule));
        }

        /**
         * @param startTime The start time of the schedule, formatted as an RFC3339 string.
         * 
         * @return builder
         * 
         */
        public Builder startTime(@Nullable Output<String> startTime) {
            $.startTime = startTime;
            return this;
        }

        /**
         * @param startTime The start time of the schedule, formatted as an RFC3339 string.
         * 
         * @return builder
         * 
         */
        public Builder startTime(String startTime) {
            return startTime(Output.of(startTime));
        }

        /**
         * @param timeZone The timezone of the start/end time.
         * 
         * @return builder
         * 
         */
        public Builder timeZone(@Nullable Output<String> timeZone) {
            $.timeZone = timeZone;
            return this;
        }

        /**
         * @param timeZone The timezone of the start/end time.
         * 
         * @return builder
         * 
         */
        public Builder timeZone(String timeZone) {
            return timeZone(Output.of(timeZone));
        }

        public IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceArgs build() {
            if ($.frequency == null) {
                throw new MissingRequiredPropertyException("IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceArgs", "frequency");
            }
            if ($.interval == null) {
                throw new MissingRequiredPropertyException("IntegrationAccountBatchConfigurationReleaseCriteriaRecurrenceArgs", "interval");
            }
            return $;
        }
    }

}
