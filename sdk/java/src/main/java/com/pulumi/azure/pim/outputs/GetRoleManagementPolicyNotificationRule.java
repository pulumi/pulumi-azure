// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.pim.outputs;

import com.pulumi.azure.pim.outputs.GetRoleManagementPolicyNotificationRuleActiveAssignment;
import com.pulumi.azure.pim.outputs.GetRoleManagementPolicyNotificationRuleEligibleActivation;
import com.pulumi.azure.pim.outputs.GetRoleManagementPolicyNotificationRuleEligibleAssignment;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetRoleManagementPolicyNotificationRule {
    /**
     * @return A `notification_target` block as defined below with the details of notfications on active role assignments.
     * 
     */
    private List<GetRoleManagementPolicyNotificationRuleActiveAssignment> activeAssignments;
    /**
     * @return A `notification_target` block as defined below with the details of notifications on activation of eligible role.
     * 
     */
    private List<GetRoleManagementPolicyNotificationRuleEligibleActivation> eligibleActivations;
    /**
     * @return A `notification_target` block as defined below with the details of notifications on eligible role assignments.
     * 
     */
    private List<GetRoleManagementPolicyNotificationRuleEligibleAssignment> eligibleAssignments;

    private GetRoleManagementPolicyNotificationRule() {}
    /**
     * @return A `notification_target` block as defined below with the details of notfications on active role assignments.
     * 
     */
    public List<GetRoleManagementPolicyNotificationRuleActiveAssignment> activeAssignments() {
        return this.activeAssignments;
    }
    /**
     * @return A `notification_target` block as defined below with the details of notifications on activation of eligible role.
     * 
     */
    public List<GetRoleManagementPolicyNotificationRuleEligibleActivation> eligibleActivations() {
        return this.eligibleActivations;
    }
    /**
     * @return A `notification_target` block as defined below with the details of notifications on eligible role assignments.
     * 
     */
    public List<GetRoleManagementPolicyNotificationRuleEligibleAssignment> eligibleAssignments() {
        return this.eligibleAssignments;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRoleManagementPolicyNotificationRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetRoleManagementPolicyNotificationRuleActiveAssignment> activeAssignments;
        private List<GetRoleManagementPolicyNotificationRuleEligibleActivation> eligibleActivations;
        private List<GetRoleManagementPolicyNotificationRuleEligibleAssignment> eligibleAssignments;
        public Builder() {}
        public Builder(GetRoleManagementPolicyNotificationRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activeAssignments = defaults.activeAssignments;
    	      this.eligibleActivations = defaults.eligibleActivations;
    	      this.eligibleAssignments = defaults.eligibleAssignments;
        }

        @CustomType.Setter
        public Builder activeAssignments(List<GetRoleManagementPolicyNotificationRuleActiveAssignment> activeAssignments) {
            if (activeAssignments == null) {
              throw new MissingRequiredPropertyException("GetRoleManagementPolicyNotificationRule", "activeAssignments");
            }
            this.activeAssignments = activeAssignments;
            return this;
        }
        public Builder activeAssignments(GetRoleManagementPolicyNotificationRuleActiveAssignment... activeAssignments) {
            return activeAssignments(List.of(activeAssignments));
        }
        @CustomType.Setter
        public Builder eligibleActivations(List<GetRoleManagementPolicyNotificationRuleEligibleActivation> eligibleActivations) {
            if (eligibleActivations == null) {
              throw new MissingRequiredPropertyException("GetRoleManagementPolicyNotificationRule", "eligibleActivations");
            }
            this.eligibleActivations = eligibleActivations;
            return this;
        }
        public Builder eligibleActivations(GetRoleManagementPolicyNotificationRuleEligibleActivation... eligibleActivations) {
            return eligibleActivations(List.of(eligibleActivations));
        }
        @CustomType.Setter
        public Builder eligibleAssignments(List<GetRoleManagementPolicyNotificationRuleEligibleAssignment> eligibleAssignments) {
            if (eligibleAssignments == null) {
              throw new MissingRequiredPropertyException("GetRoleManagementPolicyNotificationRule", "eligibleAssignments");
            }
            this.eligibleAssignments = eligibleAssignments;
            return this;
        }
        public Builder eligibleAssignments(GetRoleManagementPolicyNotificationRuleEligibleAssignment... eligibleAssignments) {
            return eligibleAssignments(List.of(eligibleAssignments));
        }
        public GetRoleManagementPolicyNotificationRule build() {
            final var _resultValue = new GetRoleManagementPolicyNotificationRule();
            _resultValue.activeAssignments = activeAssignments;
            _resultValue.eligibleActivations = eligibleActivations;
            _resultValue.eligibleAssignments = eligibleAssignments;
            return _resultValue;
        }
    }
}
