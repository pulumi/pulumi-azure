// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.mysql;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class FlexibleServerActiveDirectoryAdministratorArgs extends com.pulumi.resources.ResourceArgs {

    public static final FlexibleServerActiveDirectoryAdministratorArgs Empty = new FlexibleServerActiveDirectoryAdministratorArgs();

    @Import(name="identityId", required=true)
    private Output<String> identityId;

    public Output<String> identityId() {
        return this.identityId;
    }

    @Import(name="login", required=true)
    private Output<String> login;

    public Output<String> login() {
        return this.login;
    }

    @Import(name="objectId", required=true)
    private Output<String> objectId;

    public Output<String> objectId() {
        return this.objectId;
    }

    @Import(name="serverId", required=true)
    private Output<String> serverId;

    public Output<String> serverId() {
        return this.serverId;
    }

    @Import(name="tenantId", required=true)
    private Output<String> tenantId;

    public Output<String> tenantId() {
        return this.tenantId;
    }

    private FlexibleServerActiveDirectoryAdministratorArgs() {}

    private FlexibleServerActiveDirectoryAdministratorArgs(FlexibleServerActiveDirectoryAdministratorArgs $) {
        this.identityId = $.identityId;
        this.login = $.login;
        this.objectId = $.objectId;
        this.serverId = $.serverId;
        this.tenantId = $.tenantId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FlexibleServerActiveDirectoryAdministratorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FlexibleServerActiveDirectoryAdministratorArgs $;

        public Builder() {
            $ = new FlexibleServerActiveDirectoryAdministratorArgs();
        }

        public Builder(FlexibleServerActiveDirectoryAdministratorArgs defaults) {
            $ = new FlexibleServerActiveDirectoryAdministratorArgs(Objects.requireNonNull(defaults));
        }

        public Builder identityId(Output<String> identityId) {
            $.identityId = identityId;
            return this;
        }

        public Builder identityId(String identityId) {
            return identityId(Output.of(identityId));
        }

        public Builder login(Output<String> login) {
            $.login = login;
            return this;
        }

        public Builder login(String login) {
            return login(Output.of(login));
        }

        public Builder objectId(Output<String> objectId) {
            $.objectId = objectId;
            return this;
        }

        public Builder objectId(String objectId) {
            return objectId(Output.of(objectId));
        }

        public Builder serverId(Output<String> serverId) {
            $.serverId = serverId;
            return this;
        }

        public Builder serverId(String serverId) {
            return serverId(Output.of(serverId));
        }

        public Builder tenantId(Output<String> tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        public Builder tenantId(String tenantId) {
            return tenantId(Output.of(tenantId));
        }

        public FlexibleServerActiveDirectoryAdministratorArgs build() {
            if ($.identityId == null) {
                throw new MissingRequiredPropertyException("FlexibleServerActiveDirectoryAdministratorArgs", "identityId");
            }
            if ($.login == null) {
                throw new MissingRequiredPropertyException("FlexibleServerActiveDirectoryAdministratorArgs", "login");
            }
            if ($.objectId == null) {
                throw new MissingRequiredPropertyException("FlexibleServerActiveDirectoryAdministratorArgs", "objectId");
            }
            if ($.serverId == null) {
                throw new MissingRequiredPropertyException("FlexibleServerActiveDirectoryAdministratorArgs", "serverId");
            }
            if ($.tenantId == null) {
                throw new MissingRequiredPropertyException("FlexibleServerActiveDirectoryAdministratorArgs", "tenantId");
            }
            return $;
        }
    }

}
