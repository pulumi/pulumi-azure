// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.hpc;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.hpc.CacheBlobTargetArgs;
import com.pulumi.azure.hpc.inputs.CacheBlobTargetState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a Blob Target within a HPC Cache.
 * 
 * &gt; **NOTE:**: By request of the service team the provider no longer automatically registering the `Microsoft.StorageCache` Resource Provider for this resource. To register it you can run `az provider register --namespace &#39;Microsoft.StorageCache&#39;`.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.network.VirtualNetwork;
 * import com.pulumi.azure.network.VirtualNetworkArgs;
 * import com.pulumi.azure.network.Subnet;
 * import com.pulumi.azure.network.SubnetArgs;
 * import com.pulumi.azure.hpc.Cache;
 * import com.pulumi.azure.hpc.CacheArgs;
 * import com.pulumi.azure.storage.Account;
 * import com.pulumi.azure.storage.AccountArgs;
 * import com.pulumi.azure.storage.Container;
 * import com.pulumi.azure.storage.ContainerArgs;
 * import com.pulumi.azuread.AzureadFunctions;
 * import com.pulumi.azuread.inputs.GetServicePrincipalArgs;
 * import com.pulumi.azure.authorization.Assignment;
 * import com.pulumi.azure.authorization.AssignmentArgs;
 * import com.pulumi.azure.hpc.CacheBlobTarget;
 * import com.pulumi.azure.hpc.CacheBlobTargetArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampleResourceGroup = new ResourceGroup(&#34;exampleResourceGroup&#34;, ResourceGroupArgs.builder()        
 *             .location(&#34;West Europe&#34;)
 *             .build());
 * 
 *         var exampleVirtualNetwork = new VirtualNetwork(&#34;exampleVirtualNetwork&#34;, VirtualNetworkArgs.builder()        
 *             .addressSpaces(&#34;10.0.0.0/16&#34;)
 *             .location(exampleResourceGroup.location())
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .build());
 * 
 *         var exampleSubnet = new Subnet(&#34;exampleSubnet&#34;, SubnetArgs.builder()        
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .virtualNetworkName(exampleVirtualNetwork.name())
 *             .addressPrefixes(&#34;10.0.1.0/24&#34;)
 *             .build());
 * 
 *         var exampleCache = new Cache(&#34;exampleCache&#34;, CacheArgs.builder()        
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .location(exampleResourceGroup.location())
 *             .cacheSizeInGb(3072)
 *             .subnetId(exampleSubnet.id())
 *             .skuName(&#34;Standard_2G&#34;)
 *             .build());
 * 
 *         var exampleAccount = new Account(&#34;exampleAccount&#34;, AccountArgs.builder()        
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .location(exampleResourceGroup.location())
 *             .accountTier(&#34;Standard&#34;)
 *             .accountReplicationType(&#34;LRS&#34;)
 *             .build());
 * 
 *         var exampleContainer = new Container(&#34;exampleContainer&#34;, ContainerArgs.builder()        
 *             .storageAccountName(exampleAccount.name())
 *             .build());
 * 
 *         final var exampleServicePrincipal = AzureadFunctions.getServicePrincipal(GetServicePrincipalArgs.builder()
 *             .displayName(&#34;HPC Cache Resource Provider&#34;)
 *             .build());
 * 
 *         var exampleStorageAccountContrib = new Assignment(&#34;exampleStorageAccountContrib&#34;, AssignmentArgs.builder()        
 *             .scope(exampleAccount.id())
 *             .roleDefinitionName(&#34;Storage Account Contributor&#34;)
 *             .principalId(exampleServicePrincipal.applyValue(getServicePrincipalResult -&gt; getServicePrincipalResult.objectId()))
 *             .build());
 * 
 *         var exampleStorageBlobDataContrib = new Assignment(&#34;exampleStorageBlobDataContrib&#34;, AssignmentArgs.builder()        
 *             .scope(exampleAccount.id())
 *             .roleDefinitionName(&#34;Storage Blob Data Contributor&#34;)
 *             .principalId(exampleServicePrincipal.applyValue(getServicePrincipalResult -&gt; getServicePrincipalResult.objectId()))
 *             .build());
 * 
 *         var exampleCacheBlobTarget = new CacheBlobTarget(&#34;exampleCacheBlobTarget&#34;, CacheBlobTargetArgs.builder()        
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .cacheName(exampleCache.name())
 *             .storageContainerId(exampleContainer.resourceManagerId())
 *             .namespacePath(&#34;/blob_storage&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Blob Targets within an HPC Cache can be imported using the `resource id`, e.g.
 * 
 * ```sh
 *  $ pulumi import azure:hpc/cacheBlobTarget:CacheBlobTarget example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.StorageCache/caches/cache1/storageTargets/target1
 * ```
 * 
 */
@ResourceType(type="azure:hpc/cacheBlobTarget:CacheBlobTarget")
public class CacheBlobTarget extends com.pulumi.resources.CustomResource {
    /**
     * The name of the access policy applied to this target. Defaults to `default`.
     * 
     */
    @Export(name="accessPolicyName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> accessPolicyName;

    /**
     * @return The name of the access policy applied to this target. Defaults to `default`.
     * 
     */
    public Output<Optional<String>> accessPolicyName() {
        return Codegen.optional(this.accessPolicyName);
    }
    /**
     * The name HPC Cache, which the HPC Cache Blob Target will be added to. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="cacheName", refs={String.class}, tree="[0]")
    private Output<String> cacheName;

    /**
     * @return The name HPC Cache, which the HPC Cache Blob Target will be added to. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> cacheName() {
        return this.cacheName;
    }
    /**
     * The name of the HPC Cache Blob Target. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the HPC Cache Blob Target. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The client-facing file path of the HPC Cache Blob Target.
     * 
     */
    @Export(name="namespacePath", refs={String.class}, tree="[0]")
    private Output<String> namespacePath;

    /**
     * @return The client-facing file path of the HPC Cache Blob Target.
     * 
     */
    public Output<String> namespacePath() {
        return this.namespacePath;
    }
    /**
     * The name of the Resource Group in which to create the HPC Cache Blob Target. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="resourceGroupName", refs={String.class}, tree="[0]")
    private Output<String> resourceGroupName;

    /**
     * @return The name of the Resource Group in which to create the HPC Cache Blob Target. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * The Resource Manager ID of the Storage Container used as the HPC Cache Blob Target. Changing this forces a new resource to be created.
     * 
     * &gt; **Note:** This is the Resource Manager ID of the Storage Container, rather than the regular ID - and can be accessed on the `azure.storage.Container` Data Source/Resource as `resource_manager_id`.
     * 
     */
    @Export(name="storageContainerId", refs={String.class}, tree="[0]")
    private Output<String> storageContainerId;

    /**
     * @return The Resource Manager ID of the Storage Container used as the HPC Cache Blob Target. Changing this forces a new resource to be created.
     * 
     * &gt; **Note:** This is the Resource Manager ID of the Storage Container, rather than the regular ID - and can be accessed on the `azure.storage.Container` Data Source/Resource as `resource_manager_id`.
     * 
     */
    public Output<String> storageContainerId() {
        return this.storageContainerId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public CacheBlobTarget(String name) {
        this(name, CacheBlobTargetArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public CacheBlobTarget(String name, CacheBlobTargetArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public CacheBlobTarget(String name, CacheBlobTargetArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:hpc/cacheBlobTarget:CacheBlobTarget", name, args == null ? CacheBlobTargetArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private CacheBlobTarget(String name, Output<String> id, @Nullable CacheBlobTargetState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:hpc/cacheBlobTarget:CacheBlobTarget", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static CacheBlobTarget get(String name, Output<String> id, @Nullable CacheBlobTargetState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new CacheBlobTarget(name, id, state, options);
    }
}
