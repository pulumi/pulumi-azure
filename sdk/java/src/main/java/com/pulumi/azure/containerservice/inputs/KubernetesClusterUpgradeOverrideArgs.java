// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerservice.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KubernetesClusterUpgradeOverrideArgs extends com.pulumi.resources.ResourceArgs {

    public static final KubernetesClusterUpgradeOverrideArgs Empty = new KubernetesClusterUpgradeOverrideArgs();

    /**
     * Specifies the duration, in RFC 3339 format (e.g., `2025-10-01T13:00:00Z`), the `upgrade_override` values are effective. This field must be set for the `upgrade_override` values to take effect. The date-time must be within the next 30 days.
     * 
     * &gt; **Note:** This only matches the start time of an upgrade, and the effectiveness won&#39;t change once an upgrade starts even if the `effective_until` value expires as the upgrade proceeds.
     * 
     */
    @Import(name="effectiveUntil")
    private @Nullable Output<String> effectiveUntil;

    /**
     * @return Specifies the duration, in RFC 3339 format (e.g., `2025-10-01T13:00:00Z`), the `upgrade_override` values are effective. This field must be set for the `upgrade_override` values to take effect. The date-time must be within the next 30 days.
     * 
     * &gt; **Note:** This only matches the start time of an upgrade, and the effectiveness won&#39;t change once an upgrade starts even if the `effective_until` value expires as the upgrade proceeds.
     * 
     */
    public Optional<Output<String>> effectiveUntil() {
        return Optional.ofNullable(this.effectiveUntil);
    }

    /**
     * Whether to force upgrade the cluster. Possible values are `true` or `false`.
     * 
     * !&gt; **Note:** The `force_upgrade_enabled` field instructs the upgrade operation to bypass upgrade protections (e.g. checking for deprecated API usage) which may render the cluster inoperative after the upgrade process has completed. Use the `force_upgrade_enabled` option with extreme caution only.
     * 
     */
    @Import(name="forceUpgradeEnabled", required=true)
    private Output<Boolean> forceUpgradeEnabled;

    /**
     * @return Whether to force upgrade the cluster. Possible values are `true` or `false`.
     * 
     * !&gt; **Note:** The `force_upgrade_enabled` field instructs the upgrade operation to bypass upgrade protections (e.g. checking for deprecated API usage) which may render the cluster inoperative after the upgrade process has completed. Use the `force_upgrade_enabled` option with extreme caution only.
     * 
     */
    public Output<Boolean> forceUpgradeEnabled() {
        return this.forceUpgradeEnabled;
    }

    private KubernetesClusterUpgradeOverrideArgs() {}

    private KubernetesClusterUpgradeOverrideArgs(KubernetesClusterUpgradeOverrideArgs $) {
        this.effectiveUntil = $.effectiveUntil;
        this.forceUpgradeEnabled = $.forceUpgradeEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KubernetesClusterUpgradeOverrideArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KubernetesClusterUpgradeOverrideArgs $;

        public Builder() {
            $ = new KubernetesClusterUpgradeOverrideArgs();
        }

        public Builder(KubernetesClusterUpgradeOverrideArgs defaults) {
            $ = new KubernetesClusterUpgradeOverrideArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param effectiveUntil Specifies the duration, in RFC 3339 format (e.g., `2025-10-01T13:00:00Z`), the `upgrade_override` values are effective. This field must be set for the `upgrade_override` values to take effect. The date-time must be within the next 30 days.
         * 
         * &gt; **Note:** This only matches the start time of an upgrade, and the effectiveness won&#39;t change once an upgrade starts even if the `effective_until` value expires as the upgrade proceeds.
         * 
         * @return builder
         * 
         */
        public Builder effectiveUntil(@Nullable Output<String> effectiveUntil) {
            $.effectiveUntil = effectiveUntil;
            return this;
        }

        /**
         * @param effectiveUntil Specifies the duration, in RFC 3339 format (e.g., `2025-10-01T13:00:00Z`), the `upgrade_override` values are effective. This field must be set for the `upgrade_override` values to take effect. The date-time must be within the next 30 days.
         * 
         * &gt; **Note:** This only matches the start time of an upgrade, and the effectiveness won&#39;t change once an upgrade starts even if the `effective_until` value expires as the upgrade proceeds.
         * 
         * @return builder
         * 
         */
        public Builder effectiveUntil(String effectiveUntil) {
            return effectiveUntil(Output.of(effectiveUntil));
        }

        /**
         * @param forceUpgradeEnabled Whether to force upgrade the cluster. Possible values are `true` or `false`.
         * 
         * !&gt; **Note:** The `force_upgrade_enabled` field instructs the upgrade operation to bypass upgrade protections (e.g. checking for deprecated API usage) which may render the cluster inoperative after the upgrade process has completed. Use the `force_upgrade_enabled` option with extreme caution only.
         * 
         * @return builder
         * 
         */
        public Builder forceUpgradeEnabled(Output<Boolean> forceUpgradeEnabled) {
            $.forceUpgradeEnabled = forceUpgradeEnabled;
            return this;
        }

        /**
         * @param forceUpgradeEnabled Whether to force upgrade the cluster. Possible values are `true` or `false`.
         * 
         * !&gt; **Note:** The `force_upgrade_enabled` field instructs the upgrade operation to bypass upgrade protections (e.g. checking for deprecated API usage) which may render the cluster inoperative after the upgrade process has completed. Use the `force_upgrade_enabled` option with extreme caution only.
         * 
         * @return builder
         * 
         */
        public Builder forceUpgradeEnabled(Boolean forceUpgradeEnabled) {
            return forceUpgradeEnabled(Output.of(forceUpgradeEnabled));
        }

        public KubernetesClusterUpgradeOverrideArgs build() {
            if ($.forceUpgradeEnabled == null) {
                throw new MissingRequiredPropertyException("KubernetesClusterUpgradeOverrideArgs", "forceUpgradeEnabled");
            }
            return $;
        }
    }

}
