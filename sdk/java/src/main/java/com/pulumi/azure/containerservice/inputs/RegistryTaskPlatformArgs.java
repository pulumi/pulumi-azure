// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerservice.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegistryTaskPlatformArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegistryTaskPlatformArgs Empty = new RegistryTaskPlatformArgs();

    /**
     * The OS architecture. Possible values are `amd64`, `x86`, `386`, `arm` and `arm64`.
     * 
     */
    @Import(name="architecture")
    private @Nullable Output<String> architecture;

    /**
     * @return The OS architecture. Possible values are `amd64`, `x86`, `386`, `arm` and `arm64`.
     * 
     */
    public Optional<Output<String>> architecture() {
        return Optional.ofNullable(this.architecture);
    }

    /**
     * The operating system type required for the task. Possible values are `Windows` and `Linux`.
     * 
     */
    @Import(name="os", required=true)
    private Output<String> os;

    /**
     * @return The operating system type required for the task. Possible values are `Windows` and `Linux`.
     * 
     */
    public Output<String> os() {
        return this.os;
    }

    /**
     * The variant of the CPU. Possible values are `v6`, `v7`, `v8`.
     * 
     */
    @Import(name="variant")
    private @Nullable Output<String> variant;

    /**
     * @return The variant of the CPU. Possible values are `v6`, `v7`, `v8`.
     * 
     */
    public Optional<Output<String>> variant() {
        return Optional.ofNullable(this.variant);
    }

    private RegistryTaskPlatformArgs() {}

    private RegistryTaskPlatformArgs(RegistryTaskPlatformArgs $) {
        this.architecture = $.architecture;
        this.os = $.os;
        this.variant = $.variant;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegistryTaskPlatformArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegistryTaskPlatformArgs $;

        public Builder() {
            $ = new RegistryTaskPlatformArgs();
        }

        public Builder(RegistryTaskPlatformArgs defaults) {
            $ = new RegistryTaskPlatformArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param architecture The OS architecture. Possible values are `amd64`, `x86`, `386`, `arm` and `arm64`.
         * 
         * @return builder
         * 
         */
        public Builder architecture(@Nullable Output<String> architecture) {
            $.architecture = architecture;
            return this;
        }

        /**
         * @param architecture The OS architecture. Possible values are `amd64`, `x86`, `386`, `arm` and `arm64`.
         * 
         * @return builder
         * 
         */
        public Builder architecture(String architecture) {
            return architecture(Output.of(architecture));
        }

        /**
         * @param os The operating system type required for the task. Possible values are `Windows` and `Linux`.
         * 
         * @return builder
         * 
         */
        public Builder os(Output<String> os) {
            $.os = os;
            return this;
        }

        /**
         * @param os The operating system type required for the task. Possible values are `Windows` and `Linux`.
         * 
         * @return builder
         * 
         */
        public Builder os(String os) {
            return os(Output.of(os));
        }

        /**
         * @param variant The variant of the CPU. Possible values are `v6`, `v7`, `v8`.
         * 
         * @return builder
         * 
         */
        public Builder variant(@Nullable Output<String> variant) {
            $.variant = variant;
            return this;
        }

        /**
         * @param variant The variant of the CPU. Possible values are `v6`, `v7`, `v8`.
         * 
         * @return builder
         * 
         */
        public Builder variant(String variant) {
            return variant(Output.of(variant));
        }

        public RegistryTaskPlatformArgs build() {
            if ($.os == null) {
                throw new MissingRequiredPropertyException("RegistryTaskPlatformArgs", "os");
            }
            return $;
        }
    }

}
