// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.stack.inputs;

import com.pulumi.azure.stack.inputs.HciLogicalNetworkSubnetIpPoolArgs;
import com.pulumi.azure.stack.inputs.HciLogicalNetworkSubnetRouteArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HciLogicalNetworkSubnetArgs extends com.pulumi.resources.ResourceArgs {

    public static final HciLogicalNetworkSubnetArgs Empty = new HciLogicalNetworkSubnetArgs();

    /**
     * The address prefix in CIDR notation. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="addressPrefix")
    private @Nullable Output<String> addressPrefix;

    /**
     * @return The address prefix in CIDR notation. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> addressPrefix() {
        return Optional.ofNullable(this.addressPrefix);
    }

    /**
     * The IP address allocation method for the subnet. Possible values are `Dynamic` and `Static`. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="ipAllocationMethod", required=true)
    private Output<String> ipAllocationMethod;

    /**
     * @return The IP address allocation method for the subnet. Possible values are `Dynamic` and `Static`. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> ipAllocationMethod() {
        return this.ipAllocationMethod;
    }

    /**
     * One or more `ip_pool` block as defined above. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="ipPools")
    private @Nullable Output<List<HciLogicalNetworkSubnetIpPoolArgs>> ipPools;

    /**
     * @return One or more `ip_pool` block as defined above. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<List<HciLogicalNetworkSubnetIpPoolArgs>>> ipPools() {
        return Optional.ofNullable(this.ipPools);
    }

    /**
     * One or more `route` block as defined above. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="routes")
    private @Nullable Output<List<HciLogicalNetworkSubnetRouteArgs>> routes;

    /**
     * @return One or more `route` block as defined above. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<List<HciLogicalNetworkSubnetRouteArgs>>> routes() {
        return Optional.ofNullable(this.routes);
    }

    /**
     * The VLAN ID for the Logical Network. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="vlanId")
    private @Nullable Output<Integer> vlanId;

    /**
     * @return The VLAN ID for the Logical Network. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<Integer>> vlanId() {
        return Optional.ofNullable(this.vlanId);
    }

    private HciLogicalNetworkSubnetArgs() {}

    private HciLogicalNetworkSubnetArgs(HciLogicalNetworkSubnetArgs $) {
        this.addressPrefix = $.addressPrefix;
        this.ipAllocationMethod = $.ipAllocationMethod;
        this.ipPools = $.ipPools;
        this.routes = $.routes;
        this.vlanId = $.vlanId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HciLogicalNetworkSubnetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HciLogicalNetworkSubnetArgs $;

        public Builder() {
            $ = new HciLogicalNetworkSubnetArgs();
        }

        public Builder(HciLogicalNetworkSubnetArgs defaults) {
            $ = new HciLogicalNetworkSubnetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param addressPrefix The address prefix in CIDR notation. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder addressPrefix(@Nullable Output<String> addressPrefix) {
            $.addressPrefix = addressPrefix;
            return this;
        }

        /**
         * @param addressPrefix The address prefix in CIDR notation. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder addressPrefix(String addressPrefix) {
            return addressPrefix(Output.of(addressPrefix));
        }

        /**
         * @param ipAllocationMethod The IP address allocation method for the subnet. Possible values are `Dynamic` and `Static`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder ipAllocationMethod(Output<String> ipAllocationMethod) {
            $.ipAllocationMethod = ipAllocationMethod;
            return this;
        }

        /**
         * @param ipAllocationMethod The IP address allocation method for the subnet. Possible values are `Dynamic` and `Static`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder ipAllocationMethod(String ipAllocationMethod) {
            return ipAllocationMethod(Output.of(ipAllocationMethod));
        }

        /**
         * @param ipPools One or more `ip_pool` block as defined above. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder ipPools(@Nullable Output<List<HciLogicalNetworkSubnetIpPoolArgs>> ipPools) {
            $.ipPools = ipPools;
            return this;
        }

        /**
         * @param ipPools One or more `ip_pool` block as defined above. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder ipPools(List<HciLogicalNetworkSubnetIpPoolArgs> ipPools) {
            return ipPools(Output.of(ipPools));
        }

        /**
         * @param ipPools One or more `ip_pool` block as defined above. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder ipPools(HciLogicalNetworkSubnetIpPoolArgs... ipPools) {
            return ipPools(List.of(ipPools));
        }

        /**
         * @param routes One or more `route` block as defined above. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder routes(@Nullable Output<List<HciLogicalNetworkSubnetRouteArgs>> routes) {
            $.routes = routes;
            return this;
        }

        /**
         * @param routes One or more `route` block as defined above. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder routes(List<HciLogicalNetworkSubnetRouteArgs> routes) {
            return routes(Output.of(routes));
        }

        /**
         * @param routes One or more `route` block as defined above. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder routes(HciLogicalNetworkSubnetRouteArgs... routes) {
            return routes(List.of(routes));
        }

        /**
         * @param vlanId The VLAN ID for the Logical Network. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder vlanId(@Nullable Output<Integer> vlanId) {
            $.vlanId = vlanId;
            return this;
        }

        /**
         * @param vlanId The VLAN ID for the Logical Network. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder vlanId(Integer vlanId) {
            return vlanId(Output.of(vlanId));
        }

        public HciLogicalNetworkSubnetArgs build() {
            if ($.ipAllocationMethod == null) {
                throw new MissingRequiredPropertyException("HciLogicalNetworkSubnetArgs", "ipAllocationMethod");
            }
            return $;
        }
    }

}
