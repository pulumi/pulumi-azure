// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.eventhub.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NamespaceSchemaGroupState extends com.pulumi.resources.ResourceArgs {

    public static final NamespaceSchemaGroupState Empty = new NamespaceSchemaGroupState();

    /**
     * Specifies the name of this schema group. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the name of this schema group. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Specifies the ID of the EventHub Namespace. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="namespaceId")
    private @Nullable Output<String> namespaceId;

    /**
     * @return Specifies the ID of the EventHub Namespace. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> namespaceId() {
        return Optional.ofNullable(this.namespaceId);
    }

    /**
     * Specifies the compatibility of this schema group. Possible values are `None`, `Backward`, `Forward`. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="schemaCompatibility")
    private @Nullable Output<String> schemaCompatibility;

    /**
     * @return Specifies the compatibility of this schema group. Possible values are `None`, `Backward`, `Forward`. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> schemaCompatibility() {
        return Optional.ofNullable(this.schemaCompatibility);
    }

    /**
     * Specifies the Type of this schema group. Possible values are `Avro`, `Unknown`. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="schemaType")
    private @Nullable Output<String> schemaType;

    /**
     * @return Specifies the Type of this schema group. Possible values are `Avro`, `Unknown`. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> schemaType() {
        return Optional.ofNullable(this.schemaType);
    }

    private NamespaceSchemaGroupState() {}

    private NamespaceSchemaGroupState(NamespaceSchemaGroupState $) {
        this.name = $.name;
        this.namespaceId = $.namespaceId;
        this.schemaCompatibility = $.schemaCompatibility;
        this.schemaType = $.schemaType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NamespaceSchemaGroupState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NamespaceSchemaGroupState $;

        public Builder() {
            $ = new NamespaceSchemaGroupState();
        }

        public Builder(NamespaceSchemaGroupState defaults) {
            $ = new NamespaceSchemaGroupState(Objects.requireNonNull(defaults));
        }

        /**
         * @param name Specifies the name of this schema group. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of this schema group. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namespaceId Specifies the ID of the EventHub Namespace. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder namespaceId(@Nullable Output<String> namespaceId) {
            $.namespaceId = namespaceId;
            return this;
        }

        /**
         * @param namespaceId Specifies the ID of the EventHub Namespace. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder namespaceId(String namespaceId) {
            return namespaceId(Output.of(namespaceId));
        }

        /**
         * @param schemaCompatibility Specifies the compatibility of this schema group. Possible values are `None`, `Backward`, `Forward`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder schemaCompatibility(@Nullable Output<String> schemaCompatibility) {
            $.schemaCompatibility = schemaCompatibility;
            return this;
        }

        /**
         * @param schemaCompatibility Specifies the compatibility of this schema group. Possible values are `None`, `Backward`, `Forward`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder schemaCompatibility(String schemaCompatibility) {
            return schemaCompatibility(Output.of(schemaCompatibility));
        }

        /**
         * @param schemaType Specifies the Type of this schema group. Possible values are `Avro`, `Unknown`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder schemaType(@Nullable Output<String> schemaType) {
            $.schemaType = schemaType;
            return this;
        }

        /**
         * @param schemaType Specifies the Type of this schema group. Possible values are `Avro`, `Unknown`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder schemaType(String schemaType) {
            return schemaType(Output.of(schemaType));
        }

        public NamespaceSchemaGroupState build() {
            return $;
        }
    }

}
