// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.redis.outputs;

import com.pulumi.azure.redis.outputs.GetCachePatchSchedule;
import com.pulumi.azure.redis.outputs.GetCacheRedisConfiguration;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetCacheResult {
    /**
     * @return The size of the Redis Cache deployed.
     * 
     */
    private Integer capacity;
    /**
     * @return Whether the SSL port is enabled.
     * 
     */
    private Boolean enableNonSslPort;
    /**
     * @return The SKU family/pricing group used. Possible values are `C` (for Basic/Standard SKU family) and `P` (for `Premium`)
     * 
     */
    private String family;
    /**
     * @return The Hostname of the Redis Instance
     * 
     */
    private String hostname;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The location of the Redis Cache.
     * 
     */
    private String location;
    /**
     * @return The minimum TLS version.
     * 
     */
    private String minimumTlsVersion;
    private String name;
    /**
     * @return A list of `patch_schedule` blocks as defined below.
     * 
     */
    private List<GetCachePatchSchedule> patchSchedules;
    /**
     * @return The non-SSL Port of the Redis Instance
     * 
     */
    private Integer port;
    /**
     * @return The Primary Access Key for the Redis Instance
     * 
     */
    private String primaryAccessKey;
    /**
     * @return The primary connection string of the Redis Instance.
     * 
     */
    private String primaryConnectionString;
    /**
     * @return The Static IP Address assigned to the Redis Cache when hosted inside the Virtual Network.
     * 
     */
    private String privateStaticIpAddress;
    /**
     * @return A `redis_configuration` block as defined below.
     * 
     */
    private List<GetCacheRedisConfiguration> redisConfigurations;
    private String resourceGroupName;
    /**
     * @return The Secondary Access Key for the Redis Instance
     * 
     */
    private String secondaryAccessKey;
    /**
     * @return The secondary connection string of the Redis Instance.
     * 
     */
    private String secondaryConnectionString;
    private Integer shardCount;
    /**
     * @return The SKU of Redis used. Possible values are `Basic`, `Standard` and `Premium`.
     * 
     */
    private String skuName;
    /**
     * @return The SSL Port of the Redis Instance
     * 
     */
    private Integer sslPort;
    private String subnetId;
    private Map<String,String> tags;
    /**
     * @return A list of Availability Zones in which this Redis Cache is located.
     * 
     */
    private List<String> zones;

    private GetCacheResult() {}
    /**
     * @return The size of the Redis Cache deployed.
     * 
     */
    public Integer capacity() {
        return this.capacity;
    }
    /**
     * @return Whether the SSL port is enabled.
     * 
     */
    public Boolean enableNonSslPort() {
        return this.enableNonSslPort;
    }
    /**
     * @return The SKU family/pricing group used. Possible values are `C` (for Basic/Standard SKU family) and `P` (for `Premium`)
     * 
     */
    public String family() {
        return this.family;
    }
    /**
     * @return The Hostname of the Redis Instance
     * 
     */
    public String hostname() {
        return this.hostname;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The location of the Redis Cache.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return The minimum TLS version.
     * 
     */
    public String minimumTlsVersion() {
        return this.minimumTlsVersion;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return A list of `patch_schedule` blocks as defined below.
     * 
     */
    public List<GetCachePatchSchedule> patchSchedules() {
        return this.patchSchedules;
    }
    /**
     * @return The non-SSL Port of the Redis Instance
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return The Primary Access Key for the Redis Instance
     * 
     */
    public String primaryAccessKey() {
        return this.primaryAccessKey;
    }
    /**
     * @return The primary connection string of the Redis Instance.
     * 
     */
    public String primaryConnectionString() {
        return this.primaryConnectionString;
    }
    /**
     * @return The Static IP Address assigned to the Redis Cache when hosted inside the Virtual Network.
     * 
     */
    public String privateStaticIpAddress() {
        return this.privateStaticIpAddress;
    }
    /**
     * @return A `redis_configuration` block as defined below.
     * 
     */
    public List<GetCacheRedisConfiguration> redisConfigurations() {
        return this.redisConfigurations;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return The Secondary Access Key for the Redis Instance
     * 
     */
    public String secondaryAccessKey() {
        return this.secondaryAccessKey;
    }
    /**
     * @return The secondary connection string of the Redis Instance.
     * 
     */
    public String secondaryConnectionString() {
        return this.secondaryConnectionString;
    }
    public Integer shardCount() {
        return this.shardCount;
    }
    /**
     * @return The SKU of Redis used. Possible values are `Basic`, `Standard` and `Premium`.
     * 
     */
    public String skuName() {
        return this.skuName;
    }
    /**
     * @return The SSL Port of the Redis Instance
     * 
     */
    public Integer sslPort() {
        return this.sslPort;
    }
    public String subnetId() {
        return this.subnetId;
    }
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return A list of Availability Zones in which this Redis Cache is located.
     * 
     */
    public List<String> zones() {
        return this.zones;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCacheResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer capacity;
        private Boolean enableNonSslPort;
        private String family;
        private String hostname;
        private String id;
        private String location;
        private String minimumTlsVersion;
        private String name;
        private List<GetCachePatchSchedule> patchSchedules;
        private Integer port;
        private String primaryAccessKey;
        private String primaryConnectionString;
        private String privateStaticIpAddress;
        private List<GetCacheRedisConfiguration> redisConfigurations;
        private String resourceGroupName;
        private String secondaryAccessKey;
        private String secondaryConnectionString;
        private Integer shardCount;
        private String skuName;
        private Integer sslPort;
        private String subnetId;
        private Map<String,String> tags;
        private List<String> zones;
        public Builder() {}
        public Builder(GetCacheResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.capacity = defaults.capacity;
    	      this.enableNonSslPort = defaults.enableNonSslPort;
    	      this.family = defaults.family;
    	      this.hostname = defaults.hostname;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.minimumTlsVersion = defaults.minimumTlsVersion;
    	      this.name = defaults.name;
    	      this.patchSchedules = defaults.patchSchedules;
    	      this.port = defaults.port;
    	      this.primaryAccessKey = defaults.primaryAccessKey;
    	      this.primaryConnectionString = defaults.primaryConnectionString;
    	      this.privateStaticIpAddress = defaults.privateStaticIpAddress;
    	      this.redisConfigurations = defaults.redisConfigurations;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.secondaryAccessKey = defaults.secondaryAccessKey;
    	      this.secondaryConnectionString = defaults.secondaryConnectionString;
    	      this.shardCount = defaults.shardCount;
    	      this.skuName = defaults.skuName;
    	      this.sslPort = defaults.sslPort;
    	      this.subnetId = defaults.subnetId;
    	      this.tags = defaults.tags;
    	      this.zones = defaults.zones;
        }

        @CustomType.Setter
        public Builder capacity(Integer capacity) {
            if (capacity == null) {
              throw new MissingRequiredPropertyException("GetCacheResult", "capacity");
            }
            this.capacity = capacity;
            return this;
        }
        @CustomType.Setter
        public Builder enableNonSslPort(Boolean enableNonSslPort) {
            if (enableNonSslPort == null) {
              throw new MissingRequiredPropertyException("GetCacheResult", "enableNonSslPort");
            }
            this.enableNonSslPort = enableNonSslPort;
            return this;
        }
        @CustomType.Setter
        public Builder family(String family) {
            if (family == null) {
              throw new MissingRequiredPropertyException("GetCacheResult", "family");
            }
            this.family = family;
            return this;
        }
        @CustomType.Setter
        public Builder hostname(String hostname) {
            if (hostname == null) {
              throw new MissingRequiredPropertyException("GetCacheResult", "hostname");
            }
            this.hostname = hostname;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetCacheResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetCacheResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder minimumTlsVersion(String minimumTlsVersion) {
            if (minimumTlsVersion == null) {
              throw new MissingRequiredPropertyException("GetCacheResult", "minimumTlsVersion");
            }
            this.minimumTlsVersion = minimumTlsVersion;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetCacheResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder patchSchedules(List<GetCachePatchSchedule> patchSchedules) {
            if (patchSchedules == null) {
              throw new MissingRequiredPropertyException("GetCacheResult", "patchSchedules");
            }
            this.patchSchedules = patchSchedules;
            return this;
        }
        public Builder patchSchedules(GetCachePatchSchedule... patchSchedules) {
            return patchSchedules(List.of(patchSchedules));
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GetCacheResult", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder primaryAccessKey(String primaryAccessKey) {
            if (primaryAccessKey == null) {
              throw new MissingRequiredPropertyException("GetCacheResult", "primaryAccessKey");
            }
            this.primaryAccessKey = primaryAccessKey;
            return this;
        }
        @CustomType.Setter
        public Builder primaryConnectionString(String primaryConnectionString) {
            if (primaryConnectionString == null) {
              throw new MissingRequiredPropertyException("GetCacheResult", "primaryConnectionString");
            }
            this.primaryConnectionString = primaryConnectionString;
            return this;
        }
        @CustomType.Setter
        public Builder privateStaticIpAddress(String privateStaticIpAddress) {
            if (privateStaticIpAddress == null) {
              throw new MissingRequiredPropertyException("GetCacheResult", "privateStaticIpAddress");
            }
            this.privateStaticIpAddress = privateStaticIpAddress;
            return this;
        }
        @CustomType.Setter
        public Builder redisConfigurations(List<GetCacheRedisConfiguration> redisConfigurations) {
            if (redisConfigurations == null) {
              throw new MissingRequiredPropertyException("GetCacheResult", "redisConfigurations");
            }
            this.redisConfigurations = redisConfigurations;
            return this;
        }
        public Builder redisConfigurations(GetCacheRedisConfiguration... redisConfigurations) {
            return redisConfigurations(List.of(redisConfigurations));
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            if (resourceGroupName == null) {
              throw new MissingRequiredPropertyException("GetCacheResult", "resourceGroupName");
            }
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder secondaryAccessKey(String secondaryAccessKey) {
            if (secondaryAccessKey == null) {
              throw new MissingRequiredPropertyException("GetCacheResult", "secondaryAccessKey");
            }
            this.secondaryAccessKey = secondaryAccessKey;
            return this;
        }
        @CustomType.Setter
        public Builder secondaryConnectionString(String secondaryConnectionString) {
            if (secondaryConnectionString == null) {
              throw new MissingRequiredPropertyException("GetCacheResult", "secondaryConnectionString");
            }
            this.secondaryConnectionString = secondaryConnectionString;
            return this;
        }
        @CustomType.Setter
        public Builder shardCount(Integer shardCount) {
            if (shardCount == null) {
              throw new MissingRequiredPropertyException("GetCacheResult", "shardCount");
            }
            this.shardCount = shardCount;
            return this;
        }
        @CustomType.Setter
        public Builder skuName(String skuName) {
            if (skuName == null) {
              throw new MissingRequiredPropertyException("GetCacheResult", "skuName");
            }
            this.skuName = skuName;
            return this;
        }
        @CustomType.Setter
        public Builder sslPort(Integer sslPort) {
            if (sslPort == null) {
              throw new MissingRequiredPropertyException("GetCacheResult", "sslPort");
            }
            this.sslPort = sslPort;
            return this;
        }
        @CustomType.Setter
        public Builder subnetId(String subnetId) {
            if (subnetId == null) {
              throw new MissingRequiredPropertyException("GetCacheResult", "subnetId");
            }
            this.subnetId = subnetId;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetCacheResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder zones(List<String> zones) {
            if (zones == null) {
              throw new MissingRequiredPropertyException("GetCacheResult", "zones");
            }
            this.zones = zones;
            return this;
        }
        public Builder zones(String... zones) {
            return zones(List.of(zones));
        }
        public GetCacheResult build() {
            final var _resultValue = new GetCacheResult();
            _resultValue.capacity = capacity;
            _resultValue.enableNonSslPort = enableNonSslPort;
            _resultValue.family = family;
            _resultValue.hostname = hostname;
            _resultValue.id = id;
            _resultValue.location = location;
            _resultValue.minimumTlsVersion = minimumTlsVersion;
            _resultValue.name = name;
            _resultValue.patchSchedules = patchSchedules;
            _resultValue.port = port;
            _resultValue.primaryAccessKey = primaryAccessKey;
            _resultValue.primaryConnectionString = primaryConnectionString;
            _resultValue.privateStaticIpAddress = privateStaticIpAddress;
            _resultValue.redisConfigurations = redisConfigurations;
            _resultValue.resourceGroupName = resourceGroupName;
            _resultValue.secondaryAccessKey = secondaryAccessKey;
            _resultValue.secondaryConnectionString = secondaryConnectionString;
            _resultValue.shardCount = shardCount;
            _resultValue.skuName = skuName;
            _resultValue.sslPort = sslPort;
            _resultValue.subnetId = subnetId;
            _resultValue.tags = tags;
            _resultValue.zones = zones;
            return _resultValue;
        }
    }
}
