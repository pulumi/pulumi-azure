// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.monitoring.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class DataCollectionRuleDataSourcesSyslogArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataCollectionRuleDataSourcesSyslogArgs Empty = new DataCollectionRuleDataSourcesSyslogArgs();

    /**
     * Specifies a list of facility names. Use a wildcard `*` to collect logs for all facility names. Possible values are `auth`, `authpriv`, `cron`, `daemon`, `kern`, `lpr`, `mail`, `mark`, `news`, `syslog`, `user`, `uucp`, `local0`, `local1`, `local2`, `local3`, `local4`, `local5`, `local6`, `local7`,and `*`.
     * 
     */
    @Import(name="facilityNames", required=true)
    private Output<List<String>> facilityNames;

    /**
     * @return Specifies a list of facility names. Use a wildcard `*` to collect logs for all facility names. Possible values are `auth`, `authpriv`, `cron`, `daemon`, `kern`, `lpr`, `mail`, `mark`, `news`, `syslog`, `user`, `uucp`, `local0`, `local1`, `local2`, `local3`, `local4`, `local5`, `local6`, `local7`,and `*`.
     * 
     */
    public Output<List<String>> facilityNames() {
        return this.facilityNames;
    }

    /**
     * Specifies a list of log levels. Use a wildcard `*` to collect logs for all log levels. Possible values are `Debug`,  `Info`, `Notice`, `Warning`, `Error`, `Critical`, `Alert`, `Emergency`,and `*`.
     * 
     */
    @Import(name="logLevels", required=true)
    private Output<List<String>> logLevels;

    /**
     * @return Specifies a list of log levels. Use a wildcard `*` to collect logs for all log levels. Possible values are `Debug`,  `Info`, `Notice`, `Warning`, `Error`, `Critical`, `Alert`, `Emergency`,and `*`.
     * 
     */
    public Output<List<String>> logLevels() {
        return this.logLevels;
    }

    /**
     * The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    private DataCollectionRuleDataSourcesSyslogArgs() {}

    private DataCollectionRuleDataSourcesSyslogArgs(DataCollectionRuleDataSourcesSyslogArgs $) {
        this.facilityNames = $.facilityNames;
        this.logLevels = $.logLevels;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataCollectionRuleDataSourcesSyslogArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataCollectionRuleDataSourcesSyslogArgs $;

        public Builder() {
            $ = new DataCollectionRuleDataSourcesSyslogArgs();
        }

        public Builder(DataCollectionRuleDataSourcesSyslogArgs defaults) {
            $ = new DataCollectionRuleDataSourcesSyslogArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param facilityNames Specifies a list of facility names. Use a wildcard `*` to collect logs for all facility names. Possible values are `auth`, `authpriv`, `cron`, `daemon`, `kern`, `lpr`, `mail`, `mark`, `news`, `syslog`, `user`, `uucp`, `local0`, `local1`, `local2`, `local3`, `local4`, `local5`, `local6`, `local7`,and `*`.
         * 
         * @return builder
         * 
         */
        public Builder facilityNames(Output<List<String>> facilityNames) {
            $.facilityNames = facilityNames;
            return this;
        }

        /**
         * @param facilityNames Specifies a list of facility names. Use a wildcard `*` to collect logs for all facility names. Possible values are `auth`, `authpriv`, `cron`, `daemon`, `kern`, `lpr`, `mail`, `mark`, `news`, `syslog`, `user`, `uucp`, `local0`, `local1`, `local2`, `local3`, `local4`, `local5`, `local6`, `local7`,and `*`.
         * 
         * @return builder
         * 
         */
        public Builder facilityNames(List<String> facilityNames) {
            return facilityNames(Output.of(facilityNames));
        }

        /**
         * @param facilityNames Specifies a list of facility names. Use a wildcard `*` to collect logs for all facility names. Possible values are `auth`, `authpriv`, `cron`, `daemon`, `kern`, `lpr`, `mail`, `mark`, `news`, `syslog`, `user`, `uucp`, `local0`, `local1`, `local2`, `local3`, `local4`, `local5`, `local6`, `local7`,and `*`.
         * 
         * @return builder
         * 
         */
        public Builder facilityNames(String... facilityNames) {
            return facilityNames(List.of(facilityNames));
        }

        /**
         * @param logLevels Specifies a list of log levels. Use a wildcard `*` to collect logs for all log levels. Possible values are `Debug`,  `Info`, `Notice`, `Warning`, `Error`, `Critical`, `Alert`, `Emergency`,and `*`.
         * 
         * @return builder
         * 
         */
        public Builder logLevels(Output<List<String>> logLevels) {
            $.logLevels = logLevels;
            return this;
        }

        /**
         * @param logLevels Specifies a list of log levels. Use a wildcard `*` to collect logs for all log levels. Possible values are `Debug`,  `Info`, `Notice`, `Warning`, `Error`, `Critical`, `Alert`, `Emergency`,and `*`.
         * 
         * @return builder
         * 
         */
        public Builder logLevels(List<String> logLevels) {
            return logLevels(Output.of(logLevels));
        }

        /**
         * @param logLevels Specifies a list of log levels. Use a wildcard `*` to collect logs for all log levels. Possible values are `Debug`,  `Info`, `Notice`, `Warning`, `Error`, `Critical`, `Alert`, `Emergency`,and `*`.
         * 
         * @return builder
         * 
         */
        public Builder logLevels(String... logLevels) {
            return logLevels(List.of(logLevels));
        }

        /**
         * @param name The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public DataCollectionRuleDataSourcesSyslogArgs build() {
            $.facilityNames = Objects.requireNonNull($.facilityNames, "expected parameter 'facilityNames' to be non-null");
            $.logLevels = Objects.requireNonNull($.logLevels, "expected parameter 'logLevels' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
