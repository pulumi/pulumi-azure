// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.monitoring.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataCollectionRuleDataSourcesSyslogArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataCollectionRuleDataSourcesSyslogArgs Empty = new DataCollectionRuleDataSourcesSyslogArgs();

    /**
     * Specifies a list of facility names. Use a wildcard `*` to collect logs for all facility names. Possible values are `alert`, `*`, `audit`, `auth`, `authpriv`, `clock`, `cron`, `daemon`, `ftp`, `kern`, `local5`, `local4`, `local1`, `local7`, `local6`, `local3`, `local2`, `local0`, `lpr`, `mail`, `mark`, `news`, `nopri`, `ntp`, `syslog`, `user` and `uucp`.
     * 
     */
    @Import(name="facilityNames", required=true)
    private Output<List<String>> facilityNames;

    /**
     * @return Specifies a list of facility names. Use a wildcard `*` to collect logs for all facility names. Possible values are `alert`, `*`, `audit`, `auth`, `authpriv`, `clock`, `cron`, `daemon`, `ftp`, `kern`, `local5`, `local4`, `local1`, `local7`, `local6`, `local3`, `local2`, `local0`, `lpr`, `mail`, `mark`, `news`, `nopri`, `ntp`, `syslog`, `user` and `uucp`.
     * 
     */
    public Output<List<String>> facilityNames() {
        return this.facilityNames;
    }

    /**
     * Specifies a list of log levels. Use a wildcard `*` to collect logs for all log levels. Possible values are `Debug`, `Info`, `Notice`, `Warning`, `Error`, `Critical`, `Alert`, `Emergency`,and `*`.
     * 
     */
    @Import(name="logLevels", required=true)
    private Output<List<String>> logLevels;

    /**
     * @return Specifies a list of log levels. Use a wildcard `*` to collect logs for all log levels. Possible values are `Debug`, `Info`, `Notice`, `Warning`, `Error`, `Critical`, `Alert`, `Emergency`,and `*`.
     * 
     */
    public Output<List<String>> logLevels() {
        return this.logLevels;
    }

    /**
     * The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible values include but not limited to `Microsoft-Syslog`,and `Microsoft-CiscoAsa`, and `Microsoft-CommonSecurityLog`.
     * 
     * &gt; **Note:** In 4.0 or later version of the provider, `streams` will be required. In 3.x version of provider, if `streams` is not specified in creation, it is default to `[&#34;Microsoft-Syslog&#34;]`. if `streams` need to be modified (include change other value to the default value), it must be explicitly specified.
     * 
     */
    @Import(name="streams")
    private @Nullable Output<List<String>> streams;

    /**
     * @return Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible values include but not limited to `Microsoft-Syslog`,and `Microsoft-CiscoAsa`, and `Microsoft-CommonSecurityLog`.
     * 
     * &gt; **Note:** In 4.0 or later version of the provider, `streams` will be required. In 3.x version of provider, if `streams` is not specified in creation, it is default to `[&#34;Microsoft-Syslog&#34;]`. if `streams` need to be modified (include change other value to the default value), it must be explicitly specified.
     * 
     */
    public Optional<Output<List<String>>> streams() {
        return Optional.ofNullable(this.streams);
    }

    private DataCollectionRuleDataSourcesSyslogArgs() {}

    private DataCollectionRuleDataSourcesSyslogArgs(DataCollectionRuleDataSourcesSyslogArgs $) {
        this.facilityNames = $.facilityNames;
        this.logLevels = $.logLevels;
        this.name = $.name;
        this.streams = $.streams;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataCollectionRuleDataSourcesSyslogArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataCollectionRuleDataSourcesSyslogArgs $;

        public Builder() {
            $ = new DataCollectionRuleDataSourcesSyslogArgs();
        }

        public Builder(DataCollectionRuleDataSourcesSyslogArgs defaults) {
            $ = new DataCollectionRuleDataSourcesSyslogArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param facilityNames Specifies a list of facility names. Use a wildcard `*` to collect logs for all facility names. Possible values are `alert`, `*`, `audit`, `auth`, `authpriv`, `clock`, `cron`, `daemon`, `ftp`, `kern`, `local5`, `local4`, `local1`, `local7`, `local6`, `local3`, `local2`, `local0`, `lpr`, `mail`, `mark`, `news`, `nopri`, `ntp`, `syslog`, `user` and `uucp`.
         * 
         * @return builder
         * 
         */
        public Builder facilityNames(Output<List<String>> facilityNames) {
            $.facilityNames = facilityNames;
            return this;
        }

        /**
         * @param facilityNames Specifies a list of facility names. Use a wildcard `*` to collect logs for all facility names. Possible values are `alert`, `*`, `audit`, `auth`, `authpriv`, `clock`, `cron`, `daemon`, `ftp`, `kern`, `local5`, `local4`, `local1`, `local7`, `local6`, `local3`, `local2`, `local0`, `lpr`, `mail`, `mark`, `news`, `nopri`, `ntp`, `syslog`, `user` and `uucp`.
         * 
         * @return builder
         * 
         */
        public Builder facilityNames(List<String> facilityNames) {
            return facilityNames(Output.of(facilityNames));
        }

        /**
         * @param facilityNames Specifies a list of facility names. Use a wildcard `*` to collect logs for all facility names. Possible values are `alert`, `*`, `audit`, `auth`, `authpriv`, `clock`, `cron`, `daemon`, `ftp`, `kern`, `local5`, `local4`, `local1`, `local7`, `local6`, `local3`, `local2`, `local0`, `lpr`, `mail`, `mark`, `news`, `nopri`, `ntp`, `syslog`, `user` and `uucp`.
         * 
         * @return builder
         * 
         */
        public Builder facilityNames(String... facilityNames) {
            return facilityNames(List.of(facilityNames));
        }

        /**
         * @param logLevels Specifies a list of log levels. Use a wildcard `*` to collect logs for all log levels. Possible values are `Debug`, `Info`, `Notice`, `Warning`, `Error`, `Critical`, `Alert`, `Emergency`,and `*`.
         * 
         * @return builder
         * 
         */
        public Builder logLevels(Output<List<String>> logLevels) {
            $.logLevels = logLevels;
            return this;
        }

        /**
         * @param logLevels Specifies a list of log levels. Use a wildcard `*` to collect logs for all log levels. Possible values are `Debug`, `Info`, `Notice`, `Warning`, `Error`, `Critical`, `Alert`, `Emergency`,and `*`.
         * 
         * @return builder
         * 
         */
        public Builder logLevels(List<String> logLevels) {
            return logLevels(Output.of(logLevels));
        }

        /**
         * @param logLevels Specifies a list of log levels. Use a wildcard `*` to collect logs for all log levels. Possible values are `Debug`, `Info`, `Notice`, `Warning`, `Error`, `Critical`, `Alert`, `Emergency`,and `*`.
         * 
         * @return builder
         * 
         */
        public Builder logLevels(String... logLevels) {
            return logLevels(List.of(logLevels));
        }

        /**
         * @param name The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param streams Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible values include but not limited to `Microsoft-Syslog`,and `Microsoft-CiscoAsa`, and `Microsoft-CommonSecurityLog`.
         * 
         * &gt; **Note:** In 4.0 or later version of the provider, `streams` will be required. In 3.x version of provider, if `streams` is not specified in creation, it is default to `[&#34;Microsoft-Syslog&#34;]`. if `streams` need to be modified (include change other value to the default value), it must be explicitly specified.
         * 
         * @return builder
         * 
         */
        public Builder streams(@Nullable Output<List<String>> streams) {
            $.streams = streams;
            return this;
        }

        /**
         * @param streams Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible values include but not limited to `Microsoft-Syslog`,and `Microsoft-CiscoAsa`, and `Microsoft-CommonSecurityLog`.
         * 
         * &gt; **Note:** In 4.0 or later version of the provider, `streams` will be required. In 3.x version of provider, if `streams` is not specified in creation, it is default to `[&#34;Microsoft-Syslog&#34;]`. if `streams` need to be modified (include change other value to the default value), it must be explicitly specified.
         * 
         * @return builder
         * 
         */
        public Builder streams(List<String> streams) {
            return streams(Output.of(streams));
        }

        /**
         * @param streams Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible values include but not limited to `Microsoft-Syslog`,and `Microsoft-CiscoAsa`, and `Microsoft-CommonSecurityLog`.
         * 
         * &gt; **Note:** In 4.0 or later version of the provider, `streams` will be required. In 3.x version of provider, if `streams` is not specified in creation, it is default to `[&#34;Microsoft-Syslog&#34;]`. if `streams` need to be modified (include change other value to the default value), it must be explicitly specified.
         * 
         * @return builder
         * 
         */
        public Builder streams(String... streams) {
            return streams(List.of(streams));
        }

        public DataCollectionRuleDataSourcesSyslogArgs build() {
            if ($.facilityNames == null) {
                throw new MissingRequiredPropertyException("DataCollectionRuleDataSourcesSyslogArgs", "facilityNames");
            }
            if ($.logLevels == null) {
                throw new MissingRequiredPropertyException("DataCollectionRuleDataSourcesSyslogArgs", "logLevels");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("DataCollectionRuleDataSourcesSyslogArgs", "name");
            }
            return $;
        }
    }

}
