// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appconfiguration.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConfigurationStoreEncryptionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConfigurationStoreEncryptionArgs Empty = new ConfigurationStoreEncryptionArgs();

    /**
     * Specifies the client ID of the identity which will be used to access key vault.
     * 
     */
    @Import(name="identityClientId")
    private @Nullable Output<String> identityClientId;

    /**
     * @return Specifies the client ID of the identity which will be used to access key vault.
     * 
     */
    public Optional<Output<String>> identityClientId() {
        return Optional.ofNullable(this.identityClientId);
    }

    /**
     * Specifies the URI of the key vault key used to encrypt data.
     * 
     */
    @Import(name="keyVaultKeyIdentifier")
    private @Nullable Output<String> keyVaultKeyIdentifier;

    /**
     * @return Specifies the URI of the key vault key used to encrypt data.
     * 
     */
    public Optional<Output<String>> keyVaultKeyIdentifier() {
        return Optional.ofNullable(this.keyVaultKeyIdentifier);
    }

    private ConfigurationStoreEncryptionArgs() {}

    private ConfigurationStoreEncryptionArgs(ConfigurationStoreEncryptionArgs $) {
        this.identityClientId = $.identityClientId;
        this.keyVaultKeyIdentifier = $.keyVaultKeyIdentifier;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConfigurationStoreEncryptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfigurationStoreEncryptionArgs $;

        public Builder() {
            $ = new ConfigurationStoreEncryptionArgs();
        }

        public Builder(ConfigurationStoreEncryptionArgs defaults) {
            $ = new ConfigurationStoreEncryptionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param identityClientId Specifies the client ID of the identity which will be used to access key vault.
         * 
         * @return builder
         * 
         */
        public Builder identityClientId(@Nullable Output<String> identityClientId) {
            $.identityClientId = identityClientId;
            return this;
        }

        /**
         * @param identityClientId Specifies the client ID of the identity which will be used to access key vault.
         * 
         * @return builder
         * 
         */
        public Builder identityClientId(String identityClientId) {
            return identityClientId(Output.of(identityClientId));
        }

        /**
         * @param keyVaultKeyIdentifier Specifies the URI of the key vault key used to encrypt data.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultKeyIdentifier(@Nullable Output<String> keyVaultKeyIdentifier) {
            $.keyVaultKeyIdentifier = keyVaultKeyIdentifier;
            return this;
        }

        /**
         * @param keyVaultKeyIdentifier Specifies the URI of the key vault key used to encrypt data.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultKeyIdentifier(String keyVaultKeyIdentifier) {
            return keyVaultKeyIdentifier(Output.of(keyVaultKeyIdentifier));
        }

        public ConfigurationStoreEncryptionArgs build() {
            return $;
        }
    }

}
