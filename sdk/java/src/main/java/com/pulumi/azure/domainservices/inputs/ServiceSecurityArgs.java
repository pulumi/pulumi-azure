// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.domainservices.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceSecurityArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceSecurityArgs Empty = new ServiceSecurityArgs();

    /**
     * Whether to enable legacy NTLM v1 support. Defaults to `false`.
     * 
     */
    @Import(name="ntlmV1Enabled")
    private @Nullable Output<Boolean> ntlmV1Enabled;

    /**
     * @return Whether to enable legacy NTLM v1 support. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> ntlmV1Enabled() {
        return Optional.ofNullable(this.ntlmV1Enabled);
    }

    /**
     * Whether to synchronize Kerberos password hashes to the managed domain. Defaults to `false`.
     * 
     */
    @Import(name="syncKerberosPasswords")
    private @Nullable Output<Boolean> syncKerberosPasswords;

    /**
     * @return Whether to synchronize Kerberos password hashes to the managed domain. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> syncKerberosPasswords() {
        return Optional.ofNullable(this.syncKerberosPasswords);
    }

    /**
     * Whether to synchronize NTLM password hashes to the managed domain. Defaults to `false`.
     * 
     */
    @Import(name="syncNtlmPasswords")
    private @Nullable Output<Boolean> syncNtlmPasswords;

    /**
     * @return Whether to synchronize NTLM password hashes to the managed domain. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> syncNtlmPasswords() {
        return Optional.ofNullable(this.syncNtlmPasswords);
    }

    /**
     * Whether to synchronize on-premises password hashes to the managed domain. Defaults to `false`.
     * 
     */
    @Import(name="syncOnPremPasswords")
    private @Nullable Output<Boolean> syncOnPremPasswords;

    /**
     * @return Whether to synchronize on-premises password hashes to the managed domain. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> syncOnPremPasswords() {
        return Optional.ofNullable(this.syncOnPremPasswords);
    }

    /**
     * Whether to enable legacy TLS v1 support. Defaults to `false`.
     * 
     */
    @Import(name="tlsV1Enabled")
    private @Nullable Output<Boolean> tlsV1Enabled;

    /**
     * @return Whether to enable legacy TLS v1 support. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> tlsV1Enabled() {
        return Optional.ofNullable(this.tlsV1Enabled);
    }

    private ServiceSecurityArgs() {}

    private ServiceSecurityArgs(ServiceSecurityArgs $) {
        this.ntlmV1Enabled = $.ntlmV1Enabled;
        this.syncKerberosPasswords = $.syncKerberosPasswords;
        this.syncNtlmPasswords = $.syncNtlmPasswords;
        this.syncOnPremPasswords = $.syncOnPremPasswords;
        this.tlsV1Enabled = $.tlsV1Enabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceSecurityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceSecurityArgs $;

        public Builder() {
            $ = new ServiceSecurityArgs();
        }

        public Builder(ServiceSecurityArgs defaults) {
            $ = new ServiceSecurityArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ntlmV1Enabled Whether to enable legacy NTLM v1 support. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder ntlmV1Enabled(@Nullable Output<Boolean> ntlmV1Enabled) {
            $.ntlmV1Enabled = ntlmV1Enabled;
            return this;
        }

        /**
         * @param ntlmV1Enabled Whether to enable legacy NTLM v1 support. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder ntlmV1Enabled(Boolean ntlmV1Enabled) {
            return ntlmV1Enabled(Output.of(ntlmV1Enabled));
        }

        /**
         * @param syncKerberosPasswords Whether to synchronize Kerberos password hashes to the managed domain. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder syncKerberosPasswords(@Nullable Output<Boolean> syncKerberosPasswords) {
            $.syncKerberosPasswords = syncKerberosPasswords;
            return this;
        }

        /**
         * @param syncKerberosPasswords Whether to synchronize Kerberos password hashes to the managed domain. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder syncKerberosPasswords(Boolean syncKerberosPasswords) {
            return syncKerberosPasswords(Output.of(syncKerberosPasswords));
        }

        /**
         * @param syncNtlmPasswords Whether to synchronize NTLM password hashes to the managed domain. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder syncNtlmPasswords(@Nullable Output<Boolean> syncNtlmPasswords) {
            $.syncNtlmPasswords = syncNtlmPasswords;
            return this;
        }

        /**
         * @param syncNtlmPasswords Whether to synchronize NTLM password hashes to the managed domain. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder syncNtlmPasswords(Boolean syncNtlmPasswords) {
            return syncNtlmPasswords(Output.of(syncNtlmPasswords));
        }

        /**
         * @param syncOnPremPasswords Whether to synchronize on-premises password hashes to the managed domain. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder syncOnPremPasswords(@Nullable Output<Boolean> syncOnPremPasswords) {
            $.syncOnPremPasswords = syncOnPremPasswords;
            return this;
        }

        /**
         * @param syncOnPremPasswords Whether to synchronize on-premises password hashes to the managed domain. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder syncOnPremPasswords(Boolean syncOnPremPasswords) {
            return syncOnPremPasswords(Output.of(syncOnPremPasswords));
        }

        /**
         * @param tlsV1Enabled Whether to enable legacy TLS v1 support. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder tlsV1Enabled(@Nullable Output<Boolean> tlsV1Enabled) {
            $.tlsV1Enabled = tlsV1Enabled;
            return this;
        }

        /**
         * @param tlsV1Enabled Whether to enable legacy TLS v1 support. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder tlsV1Enabled(Boolean tlsV1Enabled) {
            return tlsV1Enabled(Output.of(tlsV1Enabled));
        }

        public ServiceSecurityArgs build() {
            return $;
        }
    }

}
