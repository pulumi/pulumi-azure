// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.mssql.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VirtualMachineStorageConfigurationTempDbSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final VirtualMachineStorageConfigurationTempDbSettingsArgs Empty = new VirtualMachineStorageConfigurationTempDbSettingsArgs();

    /**
     * The SQL Server default file count. This value defaults to `8`
     * 
     */
    @Import(name="dataFileCount")
    private @Nullable Output<Integer> dataFileCount;

    /**
     * @return The SQL Server default file count. This value defaults to `8`
     * 
     */
    public Optional<Output<Integer>> dataFileCount() {
        return Optional.ofNullable(this.dataFileCount);
    }

    /**
     * The SQL Server default file size - This value defaults to `512`
     * 
     */
    @Import(name="dataFileGrowthInMb")
    private @Nullable Output<Integer> dataFileGrowthInMb;

    /**
     * @return The SQL Server default file size - This value defaults to `512`
     * 
     */
    public Optional<Output<Integer>> dataFileGrowthInMb() {
        return Optional.ofNullable(this.dataFileGrowthInMb);
    }

    /**
     * The SQL Server default file size - This value defaults to `256`
     * 
     */
    @Import(name="dataFileSizeMb")
    private @Nullable Output<Integer> dataFileSizeMb;

    /**
     * @return The SQL Server default file size - This value defaults to `256`
     * 
     */
    public Optional<Output<Integer>> dataFileSizeMb() {
        return Optional.ofNullable(this.dataFileSizeMb);
    }

    /**
     * The SQL Server default path
     * 
     */
    @Import(name="defaultFilePath", required=true)
    private Output<String> defaultFilePath;

    /**
     * @return The SQL Server default path
     * 
     */
    public Output<String> defaultFilePath() {
        return this.defaultFilePath;
    }

    /**
     * The SQL Server default file size - This value defaults to `512`
     * 
     */
    @Import(name="logFileGrowthMb")
    private @Nullable Output<Integer> logFileGrowthMb;

    /**
     * @return The SQL Server default file size - This value defaults to `512`
     * 
     */
    public Optional<Output<Integer>> logFileGrowthMb() {
        return Optional.ofNullable(this.logFileGrowthMb);
    }

    /**
     * The SQL Server default file size - This value defaults to `256`
     * 
     */
    @Import(name="logFileSizeMb")
    private @Nullable Output<Integer> logFileSizeMb;

    /**
     * @return The SQL Server default file size - This value defaults to `256`
     * 
     */
    public Optional<Output<Integer>> logFileSizeMb() {
        return Optional.ofNullable(this.logFileSizeMb);
    }

    /**
     * A list of Logical Unit Numbers for the disks.
     * 
     */
    @Import(name="luns", required=true)
    private Output<List<Integer>> luns;

    /**
     * @return A list of Logical Unit Numbers for the disks.
     * 
     */
    public Output<List<Integer>> luns() {
        return this.luns;
    }

    private VirtualMachineStorageConfigurationTempDbSettingsArgs() {}

    private VirtualMachineStorageConfigurationTempDbSettingsArgs(VirtualMachineStorageConfigurationTempDbSettingsArgs $) {
        this.dataFileCount = $.dataFileCount;
        this.dataFileGrowthInMb = $.dataFileGrowthInMb;
        this.dataFileSizeMb = $.dataFileSizeMb;
        this.defaultFilePath = $.defaultFilePath;
        this.logFileGrowthMb = $.logFileGrowthMb;
        this.logFileSizeMb = $.logFileSizeMb;
        this.luns = $.luns;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualMachineStorageConfigurationTempDbSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualMachineStorageConfigurationTempDbSettingsArgs $;

        public Builder() {
            $ = new VirtualMachineStorageConfigurationTempDbSettingsArgs();
        }

        public Builder(VirtualMachineStorageConfigurationTempDbSettingsArgs defaults) {
            $ = new VirtualMachineStorageConfigurationTempDbSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataFileCount The SQL Server default file count. This value defaults to `8`
         * 
         * @return builder
         * 
         */
        public Builder dataFileCount(@Nullable Output<Integer> dataFileCount) {
            $.dataFileCount = dataFileCount;
            return this;
        }

        /**
         * @param dataFileCount The SQL Server default file count. This value defaults to `8`
         * 
         * @return builder
         * 
         */
        public Builder dataFileCount(Integer dataFileCount) {
            return dataFileCount(Output.of(dataFileCount));
        }

        /**
         * @param dataFileGrowthInMb The SQL Server default file size - This value defaults to `512`
         * 
         * @return builder
         * 
         */
        public Builder dataFileGrowthInMb(@Nullable Output<Integer> dataFileGrowthInMb) {
            $.dataFileGrowthInMb = dataFileGrowthInMb;
            return this;
        }

        /**
         * @param dataFileGrowthInMb The SQL Server default file size - This value defaults to `512`
         * 
         * @return builder
         * 
         */
        public Builder dataFileGrowthInMb(Integer dataFileGrowthInMb) {
            return dataFileGrowthInMb(Output.of(dataFileGrowthInMb));
        }

        /**
         * @param dataFileSizeMb The SQL Server default file size - This value defaults to `256`
         * 
         * @return builder
         * 
         */
        public Builder dataFileSizeMb(@Nullable Output<Integer> dataFileSizeMb) {
            $.dataFileSizeMb = dataFileSizeMb;
            return this;
        }

        /**
         * @param dataFileSizeMb The SQL Server default file size - This value defaults to `256`
         * 
         * @return builder
         * 
         */
        public Builder dataFileSizeMb(Integer dataFileSizeMb) {
            return dataFileSizeMb(Output.of(dataFileSizeMb));
        }

        /**
         * @param defaultFilePath The SQL Server default path
         * 
         * @return builder
         * 
         */
        public Builder defaultFilePath(Output<String> defaultFilePath) {
            $.defaultFilePath = defaultFilePath;
            return this;
        }

        /**
         * @param defaultFilePath The SQL Server default path
         * 
         * @return builder
         * 
         */
        public Builder defaultFilePath(String defaultFilePath) {
            return defaultFilePath(Output.of(defaultFilePath));
        }

        /**
         * @param logFileGrowthMb The SQL Server default file size - This value defaults to `512`
         * 
         * @return builder
         * 
         */
        public Builder logFileGrowthMb(@Nullable Output<Integer> logFileGrowthMb) {
            $.logFileGrowthMb = logFileGrowthMb;
            return this;
        }

        /**
         * @param logFileGrowthMb The SQL Server default file size - This value defaults to `512`
         * 
         * @return builder
         * 
         */
        public Builder logFileGrowthMb(Integer logFileGrowthMb) {
            return logFileGrowthMb(Output.of(logFileGrowthMb));
        }

        /**
         * @param logFileSizeMb The SQL Server default file size - This value defaults to `256`
         * 
         * @return builder
         * 
         */
        public Builder logFileSizeMb(@Nullable Output<Integer> logFileSizeMb) {
            $.logFileSizeMb = logFileSizeMb;
            return this;
        }

        /**
         * @param logFileSizeMb The SQL Server default file size - This value defaults to `256`
         * 
         * @return builder
         * 
         */
        public Builder logFileSizeMb(Integer logFileSizeMb) {
            return logFileSizeMb(Output.of(logFileSizeMb));
        }

        /**
         * @param luns A list of Logical Unit Numbers for the disks.
         * 
         * @return builder
         * 
         */
        public Builder luns(Output<List<Integer>> luns) {
            $.luns = luns;
            return this;
        }

        /**
         * @param luns A list of Logical Unit Numbers for the disks.
         * 
         * @return builder
         * 
         */
        public Builder luns(List<Integer> luns) {
            return luns(Output.of(luns));
        }

        /**
         * @param luns A list of Logical Unit Numbers for the disks.
         * 
         * @return builder
         * 
         */
        public Builder luns(Integer... luns) {
            return luns(List.of(luns));
        }

        public VirtualMachineStorageConfigurationTempDbSettingsArgs build() {
            if ($.defaultFilePath == null) {
                throw new MissingRequiredPropertyException("VirtualMachineStorageConfigurationTempDbSettingsArgs", "defaultFilePath");
            }
            if ($.luns == null) {
                throw new MissingRequiredPropertyException("VirtualMachineStorageConfigurationTempDbSettingsArgs", "luns");
            }
            return $;
        }
    }

}
