// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.datafactory.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DatasetBinaryHttpServerLocation {
    /**
     * @return Is the `filename` using dynamic expression, function or system variables? Defaults to `false`.
     * 
     */
    private @Nullable Boolean dynamicFilenameEnabled;
    /**
     * @return Is the `path` using dynamic expression, function or system variables? Defaults to `false`.
     * 
     */
    private @Nullable Boolean dynamicPathEnabled;
    /**
     * @return The filename of the file on the web server.
     * 
     */
    private String filename;
    /**
     * @return The folder path to the file on the web server.
     * 
     */
    private String path;
    /**
     * @return The base URL to the web server hosting the file.
     * 
     */
    private String relativeUrl;

    private DatasetBinaryHttpServerLocation() {}
    /**
     * @return Is the `filename` using dynamic expression, function or system variables? Defaults to `false`.
     * 
     */
    public Optional<Boolean> dynamicFilenameEnabled() {
        return Optional.ofNullable(this.dynamicFilenameEnabled);
    }
    /**
     * @return Is the `path` using dynamic expression, function or system variables? Defaults to `false`.
     * 
     */
    public Optional<Boolean> dynamicPathEnabled() {
        return Optional.ofNullable(this.dynamicPathEnabled);
    }
    /**
     * @return The filename of the file on the web server.
     * 
     */
    public String filename() {
        return this.filename;
    }
    /**
     * @return The folder path to the file on the web server.
     * 
     */
    public String path() {
        return this.path;
    }
    /**
     * @return The base URL to the web server hosting the file.
     * 
     */
    public String relativeUrl() {
        return this.relativeUrl;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatasetBinaryHttpServerLocation defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean dynamicFilenameEnabled;
        private @Nullable Boolean dynamicPathEnabled;
        private String filename;
        private String path;
        private String relativeUrl;
        public Builder() {}
        public Builder(DatasetBinaryHttpServerLocation defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dynamicFilenameEnabled = defaults.dynamicFilenameEnabled;
    	      this.dynamicPathEnabled = defaults.dynamicPathEnabled;
    	      this.filename = defaults.filename;
    	      this.path = defaults.path;
    	      this.relativeUrl = defaults.relativeUrl;
        }

        @CustomType.Setter
        public Builder dynamicFilenameEnabled(@Nullable Boolean dynamicFilenameEnabled) {

            this.dynamicFilenameEnabled = dynamicFilenameEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder dynamicPathEnabled(@Nullable Boolean dynamicPathEnabled) {

            this.dynamicPathEnabled = dynamicPathEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder filename(String filename) {
            if (filename == null) {
              throw new MissingRequiredPropertyException("DatasetBinaryHttpServerLocation", "filename");
            }
            this.filename = filename;
            return this;
        }
        @CustomType.Setter
        public Builder path(String path) {
            if (path == null) {
              throw new MissingRequiredPropertyException("DatasetBinaryHttpServerLocation", "path");
            }
            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder relativeUrl(String relativeUrl) {
            if (relativeUrl == null) {
              throw new MissingRequiredPropertyException("DatasetBinaryHttpServerLocation", "relativeUrl");
            }
            this.relativeUrl = relativeUrl;
            return this;
        }
        public DatasetBinaryHttpServerLocation build() {
            final var _resultValue = new DatasetBinaryHttpServerLocation();
            _resultValue.dynamicFilenameEnabled = dynamicFilenameEnabled;
            _resultValue.dynamicPathEnabled = dynamicPathEnabled;
            _resultValue.filename = filename;
            _resultValue.path = path;
            _resultValue.relativeUrl = relativeUrl;
            return _resultValue;
        }
    }
}
