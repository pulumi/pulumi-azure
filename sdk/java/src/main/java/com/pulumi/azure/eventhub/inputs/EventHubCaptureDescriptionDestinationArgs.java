// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.eventhub.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class EventHubCaptureDescriptionDestinationArgs extends com.pulumi.resources.ResourceArgs {

    public static final EventHubCaptureDescriptionDestinationArgs Empty = new EventHubCaptureDescriptionDestinationArgs();

    /**
     * The Blob naming convention for archiving. e.g. `{Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}`. Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order
     * 
     */
    @Import(name="archiveNameFormat", required=true)
    private Output<String> archiveNameFormat;

    /**
     * @return The Blob naming convention for archiving. e.g. `{Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}`. Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order
     * 
     */
    public Output<String> archiveNameFormat() {
        return this.archiveNameFormat;
    }

    /**
     * The name of the Container within the Blob Storage Account where messages should be archived.
     * 
     */
    @Import(name="blobContainerName", required=true)
    private Output<String> blobContainerName;

    /**
     * @return The name of the Container within the Blob Storage Account where messages should be archived.
     * 
     */
    public Output<String> blobContainerName() {
        return this.blobContainerName;
    }

    /**
     * The Name of the Destination where the capture should take place. At this time the only supported value is `EventHubArchive.AzureBlockBlob`.
     * 
     * &gt; At this time it&#39;s only possible to Capture EventHub messages to Blob Storage. There&#39;s [a Feature Request for the Azure SDK to add support for Capturing messages to Azure Data Lake here](https://github.com/Azure/azure-rest-api-specs/issues/2255).
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The Name of the Destination where the capture should take place. At this time the only supported value is `EventHubArchive.AzureBlockBlob`.
     * 
     * &gt; At this time it&#39;s only possible to Capture EventHub messages to Blob Storage. There&#39;s [a Feature Request for the Azure SDK to add support for Capturing messages to Azure Data Lake here](https://github.com/Azure/azure-rest-api-specs/issues/2255).
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The ID of the Blob Storage Account where messages should be archived.
     * 
     */
    @Import(name="storageAccountId", required=true)
    private Output<String> storageAccountId;

    /**
     * @return The ID of the Blob Storage Account where messages should be archived.
     * 
     */
    public Output<String> storageAccountId() {
        return this.storageAccountId;
    }

    private EventHubCaptureDescriptionDestinationArgs() {}

    private EventHubCaptureDescriptionDestinationArgs(EventHubCaptureDescriptionDestinationArgs $) {
        this.archiveNameFormat = $.archiveNameFormat;
        this.blobContainerName = $.blobContainerName;
        this.name = $.name;
        this.storageAccountId = $.storageAccountId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EventHubCaptureDescriptionDestinationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EventHubCaptureDescriptionDestinationArgs $;

        public Builder() {
            $ = new EventHubCaptureDescriptionDestinationArgs();
        }

        public Builder(EventHubCaptureDescriptionDestinationArgs defaults) {
            $ = new EventHubCaptureDescriptionDestinationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param archiveNameFormat The Blob naming convention for archiving. e.g. `{Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}`. Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order
         * 
         * @return builder
         * 
         */
        public Builder archiveNameFormat(Output<String> archiveNameFormat) {
            $.archiveNameFormat = archiveNameFormat;
            return this;
        }

        /**
         * @param archiveNameFormat The Blob naming convention for archiving. e.g. `{Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}`. Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order
         * 
         * @return builder
         * 
         */
        public Builder archiveNameFormat(String archiveNameFormat) {
            return archiveNameFormat(Output.of(archiveNameFormat));
        }

        /**
         * @param blobContainerName The name of the Container within the Blob Storage Account where messages should be archived.
         * 
         * @return builder
         * 
         */
        public Builder blobContainerName(Output<String> blobContainerName) {
            $.blobContainerName = blobContainerName;
            return this;
        }

        /**
         * @param blobContainerName The name of the Container within the Blob Storage Account where messages should be archived.
         * 
         * @return builder
         * 
         */
        public Builder blobContainerName(String blobContainerName) {
            return blobContainerName(Output.of(blobContainerName));
        }

        /**
         * @param name The Name of the Destination where the capture should take place. At this time the only supported value is `EventHubArchive.AzureBlockBlob`.
         * 
         * &gt; At this time it&#39;s only possible to Capture EventHub messages to Blob Storage. There&#39;s [a Feature Request for the Azure SDK to add support for Capturing messages to Azure Data Lake here](https://github.com/Azure/azure-rest-api-specs/issues/2255).
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The Name of the Destination where the capture should take place. At this time the only supported value is `EventHubArchive.AzureBlockBlob`.
         * 
         * &gt; At this time it&#39;s only possible to Capture EventHub messages to Blob Storage. There&#39;s [a Feature Request for the Azure SDK to add support for Capturing messages to Azure Data Lake here](https://github.com/Azure/azure-rest-api-specs/issues/2255).
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param storageAccountId The ID of the Blob Storage Account where messages should be archived.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountId(Output<String> storageAccountId) {
            $.storageAccountId = storageAccountId;
            return this;
        }

        /**
         * @param storageAccountId The ID of the Blob Storage Account where messages should be archived.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountId(String storageAccountId) {
            return storageAccountId(Output.of(storageAccountId));
        }

        public EventHubCaptureDescriptionDestinationArgs build() {
            if ($.archiveNameFormat == null) {
                throw new MissingRequiredPropertyException("EventHubCaptureDescriptionDestinationArgs", "archiveNameFormat");
            }
            if ($.blobContainerName == null) {
                throw new MissingRequiredPropertyException("EventHubCaptureDescriptionDestinationArgs", "blobContainerName");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("EventHubCaptureDescriptionDestinationArgs", "name");
            }
            if ($.storageAccountId == null) {
                throw new MissingRequiredPropertyException("EventHubCaptureDescriptionDestinationArgs", "storageAccountId");
            }
            return $;
        }
    }

}
