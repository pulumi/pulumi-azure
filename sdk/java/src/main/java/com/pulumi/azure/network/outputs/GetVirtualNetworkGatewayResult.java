// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network.outputs;

import com.pulumi.azure.network.outputs.GetVirtualNetworkGatewayBgpSetting;
import com.pulumi.azure.network.outputs.GetVirtualNetworkGatewayCustomRoute;
import com.pulumi.azure.network.outputs.GetVirtualNetworkGatewayIpConfiguration;
import com.pulumi.azure.network.outputs.GetVirtualNetworkGatewayVpnClientConfiguration;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetVirtualNetworkGatewayResult {
    /**
     * @return Is this an Active-Active Gateway?
     * 
     */
    private Boolean activeActive;
    private List<GetVirtualNetworkGatewayBgpSetting> bgpSettings;
    private List<GetVirtualNetworkGatewayCustomRoute> customRoutes;
    /**
     * @return The ID of the local network gateway
     * through which outbound Internet traffic from the virtual network in which the
     * gateway is created will be routed (*forced tunneling*). Refer to the
     * [Azure documentation on forced tunneling](https://docs.microsoft.com/azure/vpn-gateway/vpn-gateway-forced-tunneling-rm).
     * 
     */
    private String defaultLocalNetworkGatewayId;
    /**
     * @return Will BGP (Border Gateway Protocol) will be enabled
     * for this Virtual Network Gateway.
     * 
     */
    private Boolean enableBgp;
    /**
     * @return The Generation of the Virtual Network Gateway.
     * 
     */
    private String generation;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return One or two `ip_configuration` blocks documented below.
     * 
     */
    private List<GetVirtualNetworkGatewayIpConfiguration> ipConfigurations;
    /**
     * @return The location/region where the Virtual Network Gateway is located.
     * 
     */
    private String location;
    /**
     * @return The user-defined name of the root certificate.
     * 
     */
    private String name;
    /**
     * @return Whether a private IP will be used for this  gateway for connections.
     * 
     */
    private Boolean privateIpAddressEnabled;
    private String resourceGroupName;
    /**
     * @return Configuration of the size and capacity of the Virtual Network Gateway.
     * 
     */
    private String sku;
    /**
     * @return A mapping of tags assigned to the resource.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return The type of the Virtual Network Gateway.
     * 
     */
    private String type;
    /**
     * @return A `vpn_client_configuration` block which is documented below.
     * 
     */
    private List<GetVirtualNetworkGatewayVpnClientConfiguration> vpnClientConfigurations;
    /**
     * @return The routing type of the Virtual Network Gateway.
     * 
     */
    private String vpnType;

    private GetVirtualNetworkGatewayResult() {}
    /**
     * @return Is this an Active-Active Gateway?
     * 
     */
    public Boolean activeActive() {
        return this.activeActive;
    }
    public List<GetVirtualNetworkGatewayBgpSetting> bgpSettings() {
        return this.bgpSettings;
    }
    public List<GetVirtualNetworkGatewayCustomRoute> customRoutes() {
        return this.customRoutes;
    }
    /**
     * @return The ID of the local network gateway
     * through which outbound Internet traffic from the virtual network in which the
     * gateway is created will be routed (*forced tunneling*). Refer to the
     * [Azure documentation on forced tunneling](https://docs.microsoft.com/azure/vpn-gateway/vpn-gateway-forced-tunneling-rm).
     * 
     */
    public String defaultLocalNetworkGatewayId() {
        return this.defaultLocalNetworkGatewayId;
    }
    /**
     * @return Will BGP (Border Gateway Protocol) will be enabled
     * for this Virtual Network Gateway.
     * 
     */
    public Boolean enableBgp() {
        return this.enableBgp;
    }
    /**
     * @return The Generation of the Virtual Network Gateway.
     * 
     */
    public String generation() {
        return this.generation;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return One or two `ip_configuration` blocks documented below.
     * 
     */
    public List<GetVirtualNetworkGatewayIpConfiguration> ipConfigurations() {
        return this.ipConfigurations;
    }
    /**
     * @return The location/region where the Virtual Network Gateway is located.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return The user-defined name of the root certificate.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Whether a private IP will be used for this  gateway for connections.
     * 
     */
    public Boolean privateIpAddressEnabled() {
        return this.privateIpAddressEnabled;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return Configuration of the size and capacity of the Virtual Network Gateway.
     * 
     */
    public String sku() {
        return this.sku;
    }
    /**
     * @return A mapping of tags assigned to the resource.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return The type of the Virtual Network Gateway.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return A `vpn_client_configuration` block which is documented below.
     * 
     */
    public List<GetVirtualNetworkGatewayVpnClientConfiguration> vpnClientConfigurations() {
        return this.vpnClientConfigurations;
    }
    /**
     * @return The routing type of the Virtual Network Gateway.
     * 
     */
    public String vpnType() {
        return this.vpnType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVirtualNetworkGatewayResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean activeActive;
        private List<GetVirtualNetworkGatewayBgpSetting> bgpSettings;
        private List<GetVirtualNetworkGatewayCustomRoute> customRoutes;
        private String defaultLocalNetworkGatewayId;
        private Boolean enableBgp;
        private String generation;
        private String id;
        private List<GetVirtualNetworkGatewayIpConfiguration> ipConfigurations;
        private String location;
        private String name;
        private Boolean privateIpAddressEnabled;
        private String resourceGroupName;
        private String sku;
        private Map<String,String> tags;
        private String type;
        private List<GetVirtualNetworkGatewayVpnClientConfiguration> vpnClientConfigurations;
        private String vpnType;
        public Builder() {}
        public Builder(GetVirtualNetworkGatewayResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activeActive = defaults.activeActive;
    	      this.bgpSettings = defaults.bgpSettings;
    	      this.customRoutes = defaults.customRoutes;
    	      this.defaultLocalNetworkGatewayId = defaults.defaultLocalNetworkGatewayId;
    	      this.enableBgp = defaults.enableBgp;
    	      this.generation = defaults.generation;
    	      this.id = defaults.id;
    	      this.ipConfigurations = defaults.ipConfigurations;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.privateIpAddressEnabled = defaults.privateIpAddressEnabled;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.sku = defaults.sku;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.vpnClientConfigurations = defaults.vpnClientConfigurations;
    	      this.vpnType = defaults.vpnType;
        }

        @CustomType.Setter
        public Builder activeActive(Boolean activeActive) {
            if (activeActive == null) {
              throw new MissingRequiredPropertyException("GetVirtualNetworkGatewayResult", "activeActive");
            }
            this.activeActive = activeActive;
            return this;
        }
        @CustomType.Setter
        public Builder bgpSettings(List<GetVirtualNetworkGatewayBgpSetting> bgpSettings) {
            if (bgpSettings == null) {
              throw new MissingRequiredPropertyException("GetVirtualNetworkGatewayResult", "bgpSettings");
            }
            this.bgpSettings = bgpSettings;
            return this;
        }
        public Builder bgpSettings(GetVirtualNetworkGatewayBgpSetting... bgpSettings) {
            return bgpSettings(List.of(bgpSettings));
        }
        @CustomType.Setter
        public Builder customRoutes(List<GetVirtualNetworkGatewayCustomRoute> customRoutes) {
            if (customRoutes == null) {
              throw new MissingRequiredPropertyException("GetVirtualNetworkGatewayResult", "customRoutes");
            }
            this.customRoutes = customRoutes;
            return this;
        }
        public Builder customRoutes(GetVirtualNetworkGatewayCustomRoute... customRoutes) {
            return customRoutes(List.of(customRoutes));
        }
        @CustomType.Setter
        public Builder defaultLocalNetworkGatewayId(String defaultLocalNetworkGatewayId) {
            if (defaultLocalNetworkGatewayId == null) {
              throw new MissingRequiredPropertyException("GetVirtualNetworkGatewayResult", "defaultLocalNetworkGatewayId");
            }
            this.defaultLocalNetworkGatewayId = defaultLocalNetworkGatewayId;
            return this;
        }
        @CustomType.Setter
        public Builder enableBgp(Boolean enableBgp) {
            if (enableBgp == null) {
              throw new MissingRequiredPropertyException("GetVirtualNetworkGatewayResult", "enableBgp");
            }
            this.enableBgp = enableBgp;
            return this;
        }
        @CustomType.Setter
        public Builder generation(String generation) {
            if (generation == null) {
              throw new MissingRequiredPropertyException("GetVirtualNetworkGatewayResult", "generation");
            }
            this.generation = generation;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetVirtualNetworkGatewayResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ipConfigurations(List<GetVirtualNetworkGatewayIpConfiguration> ipConfigurations) {
            if (ipConfigurations == null) {
              throw new MissingRequiredPropertyException("GetVirtualNetworkGatewayResult", "ipConfigurations");
            }
            this.ipConfigurations = ipConfigurations;
            return this;
        }
        public Builder ipConfigurations(GetVirtualNetworkGatewayIpConfiguration... ipConfigurations) {
            return ipConfigurations(List.of(ipConfigurations));
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetVirtualNetworkGatewayResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetVirtualNetworkGatewayResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder privateIpAddressEnabled(Boolean privateIpAddressEnabled) {
            if (privateIpAddressEnabled == null) {
              throw new MissingRequiredPropertyException("GetVirtualNetworkGatewayResult", "privateIpAddressEnabled");
            }
            this.privateIpAddressEnabled = privateIpAddressEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            if (resourceGroupName == null) {
              throw new MissingRequiredPropertyException("GetVirtualNetworkGatewayResult", "resourceGroupName");
            }
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder sku(String sku) {
            if (sku == null) {
              throw new MissingRequiredPropertyException("GetVirtualNetworkGatewayResult", "sku");
            }
            this.sku = sku;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetVirtualNetworkGatewayResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetVirtualNetworkGatewayResult", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder vpnClientConfigurations(List<GetVirtualNetworkGatewayVpnClientConfiguration> vpnClientConfigurations) {
            if (vpnClientConfigurations == null) {
              throw new MissingRequiredPropertyException("GetVirtualNetworkGatewayResult", "vpnClientConfigurations");
            }
            this.vpnClientConfigurations = vpnClientConfigurations;
            return this;
        }
        public Builder vpnClientConfigurations(GetVirtualNetworkGatewayVpnClientConfiguration... vpnClientConfigurations) {
            return vpnClientConfigurations(List.of(vpnClientConfigurations));
        }
        @CustomType.Setter
        public Builder vpnType(String vpnType) {
            if (vpnType == null) {
              throw new MissingRequiredPropertyException("GetVirtualNetworkGatewayResult", "vpnType");
            }
            this.vpnType = vpnType;
            return this;
        }
        public GetVirtualNetworkGatewayResult build() {
            final var _resultValue = new GetVirtualNetworkGatewayResult();
            _resultValue.activeActive = activeActive;
            _resultValue.bgpSettings = bgpSettings;
            _resultValue.customRoutes = customRoutes;
            _resultValue.defaultLocalNetworkGatewayId = defaultLocalNetworkGatewayId;
            _resultValue.enableBgp = enableBgp;
            _resultValue.generation = generation;
            _resultValue.id = id;
            _resultValue.ipConfigurations = ipConfigurations;
            _resultValue.location = location;
            _resultValue.name = name;
            _resultValue.privateIpAddressEnabled = privateIpAddressEnabled;
            _resultValue.resourceGroupName = resourceGroupName;
            _resultValue.sku = sku;
            _resultValue.tags = tags;
            _resultValue.type = type;
            _resultValue.vpnClientConfigurations = vpnClientConfigurations;
            _resultValue.vpnType = vpnType;
            return _resultValue;
        }
    }
}
