// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerservice.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FluxConfigurationBucket {
    /**
     * @return Specifies the plaintext access key used to securely access the S3 bucket.
     * 
     */
    private @Nullable String accessKey;
    /**
     * @return Specifies the bucket name to sync from the url endpoint for the flux configuration.
     * 
     */
    private String bucketName;
    /**
     * @return Specifies the name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets. It must be between 1 and 63 characters. It can contain only lowercase letters, numbers, and hyphens (-). It must start and end with a lowercase letter or number.
     * 
     */
    private @Nullable String localAuthReference;
    /**
     * @return Specifies the Base64-encoded secret key used to authenticate with the bucket source.
     * 
     */
    private @Nullable String secretKeyBase64;
    /**
     * @return Specifies the interval at which to re-reconcile the cluster git repository source with the remote. Defaults to `600`.
     * 
     */
    private @Nullable Integer syncIntervalInSeconds;
    /**
     * @return Specifies the maximum time to attempt to reconcile the cluster git repository source with the remote. Defaults to `600`.
     * 
     */
    private @Nullable Integer timeoutInSeconds;
    /**
     * @return Specify whether to communicate with a bucket using TLS is enabled. Defaults to `true`.
     * 
     */
    private @Nullable Boolean tlsEnabled;
    /**
     * @return Specifies the URL to sync for the flux configuration S3 bucket. It must start with `http://` or `https://`.
     * 
     */
    private String url;

    private FluxConfigurationBucket() {}
    /**
     * @return Specifies the plaintext access key used to securely access the S3 bucket.
     * 
     */
    public Optional<String> accessKey() {
        return Optional.ofNullable(this.accessKey);
    }
    /**
     * @return Specifies the bucket name to sync from the url endpoint for the flux configuration.
     * 
     */
    public String bucketName() {
        return this.bucketName;
    }
    /**
     * @return Specifies the name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets. It must be between 1 and 63 characters. It can contain only lowercase letters, numbers, and hyphens (-). It must start and end with a lowercase letter or number.
     * 
     */
    public Optional<String> localAuthReference() {
        return Optional.ofNullable(this.localAuthReference);
    }
    /**
     * @return Specifies the Base64-encoded secret key used to authenticate with the bucket source.
     * 
     */
    public Optional<String> secretKeyBase64() {
        return Optional.ofNullable(this.secretKeyBase64);
    }
    /**
     * @return Specifies the interval at which to re-reconcile the cluster git repository source with the remote. Defaults to `600`.
     * 
     */
    public Optional<Integer> syncIntervalInSeconds() {
        return Optional.ofNullable(this.syncIntervalInSeconds);
    }
    /**
     * @return Specifies the maximum time to attempt to reconcile the cluster git repository source with the remote. Defaults to `600`.
     * 
     */
    public Optional<Integer> timeoutInSeconds() {
        return Optional.ofNullable(this.timeoutInSeconds);
    }
    /**
     * @return Specify whether to communicate with a bucket using TLS is enabled. Defaults to `true`.
     * 
     */
    public Optional<Boolean> tlsEnabled() {
        return Optional.ofNullable(this.tlsEnabled);
    }
    /**
     * @return Specifies the URL to sync for the flux configuration S3 bucket. It must start with `http://` or `https://`.
     * 
     */
    public String url() {
        return this.url;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FluxConfigurationBucket defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accessKey;
        private String bucketName;
        private @Nullable String localAuthReference;
        private @Nullable String secretKeyBase64;
        private @Nullable Integer syncIntervalInSeconds;
        private @Nullable Integer timeoutInSeconds;
        private @Nullable Boolean tlsEnabled;
        private String url;
        public Builder() {}
        public Builder(FluxConfigurationBucket defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessKey = defaults.accessKey;
    	      this.bucketName = defaults.bucketName;
    	      this.localAuthReference = defaults.localAuthReference;
    	      this.secretKeyBase64 = defaults.secretKeyBase64;
    	      this.syncIntervalInSeconds = defaults.syncIntervalInSeconds;
    	      this.timeoutInSeconds = defaults.timeoutInSeconds;
    	      this.tlsEnabled = defaults.tlsEnabled;
    	      this.url = defaults.url;
        }

        @CustomType.Setter
        public Builder accessKey(@Nullable String accessKey) {

            this.accessKey = accessKey;
            return this;
        }
        @CustomType.Setter
        public Builder bucketName(String bucketName) {
            if (bucketName == null) {
              throw new MissingRequiredPropertyException("FluxConfigurationBucket", "bucketName");
            }
            this.bucketName = bucketName;
            return this;
        }
        @CustomType.Setter
        public Builder localAuthReference(@Nullable String localAuthReference) {

            this.localAuthReference = localAuthReference;
            return this;
        }
        @CustomType.Setter
        public Builder secretKeyBase64(@Nullable String secretKeyBase64) {

            this.secretKeyBase64 = secretKeyBase64;
            return this;
        }
        @CustomType.Setter
        public Builder syncIntervalInSeconds(@Nullable Integer syncIntervalInSeconds) {

            this.syncIntervalInSeconds = syncIntervalInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder timeoutInSeconds(@Nullable Integer timeoutInSeconds) {

            this.timeoutInSeconds = timeoutInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder tlsEnabled(@Nullable Boolean tlsEnabled) {

            this.tlsEnabled = tlsEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder url(String url) {
            if (url == null) {
              throw new MissingRequiredPropertyException("FluxConfigurationBucket", "url");
            }
            this.url = url;
            return this;
        }
        public FluxConfigurationBucket build() {
            final var _resultValue = new FluxConfigurationBucket();
            _resultValue.accessKey = accessKey;
            _resultValue.bucketName = bucketName;
            _resultValue.localAuthReference = localAuthReference;
            _resultValue.secretKeyBase64 = secretKeyBase64;
            _resultValue.syncIntervalInSeconds = syncIntervalInSeconds;
            _resultValue.timeoutInSeconds = timeoutInSeconds;
            _resultValue.tlsEnabled = tlsEnabled;
            _resultValue.url = url;
            return _resultValue;
        }
    }
}
