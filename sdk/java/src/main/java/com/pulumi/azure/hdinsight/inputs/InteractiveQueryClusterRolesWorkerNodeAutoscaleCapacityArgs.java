// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.hdinsight.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;


public final class InteractiveQueryClusterRolesWorkerNodeAutoscaleCapacityArgs extends com.pulumi.resources.ResourceArgs {

    public static final InteractiveQueryClusterRolesWorkerNodeAutoscaleCapacityArgs Empty = new InteractiveQueryClusterRolesWorkerNodeAutoscaleCapacityArgs();

    /**
     * The maximum number of worker nodes to autoscale to based on the cluster&#39;s activity.
     * 
     */
    @Import(name="maxInstanceCount", required=true)
    private Output<Integer> maxInstanceCount;

    /**
     * @return The maximum number of worker nodes to autoscale to based on the cluster&#39;s activity.
     * 
     */
    public Output<Integer> maxInstanceCount() {
        return this.maxInstanceCount;
    }

    /**
     * The minimum number of worker nodes to autoscale to based on the cluster&#39;s activity.
     * 
     */
    @Import(name="minInstanceCount", required=true)
    private Output<Integer> minInstanceCount;

    /**
     * @return The minimum number of worker nodes to autoscale to based on the cluster&#39;s activity.
     * 
     */
    public Output<Integer> minInstanceCount() {
        return this.minInstanceCount;
    }

    private InteractiveQueryClusterRolesWorkerNodeAutoscaleCapacityArgs() {}

    private InteractiveQueryClusterRolesWorkerNodeAutoscaleCapacityArgs(InteractiveQueryClusterRolesWorkerNodeAutoscaleCapacityArgs $) {
        this.maxInstanceCount = $.maxInstanceCount;
        this.minInstanceCount = $.minInstanceCount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InteractiveQueryClusterRolesWorkerNodeAutoscaleCapacityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InteractiveQueryClusterRolesWorkerNodeAutoscaleCapacityArgs $;

        public Builder() {
            $ = new InteractiveQueryClusterRolesWorkerNodeAutoscaleCapacityArgs();
        }

        public Builder(InteractiveQueryClusterRolesWorkerNodeAutoscaleCapacityArgs defaults) {
            $ = new InteractiveQueryClusterRolesWorkerNodeAutoscaleCapacityArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param maxInstanceCount The maximum number of worker nodes to autoscale to based on the cluster&#39;s activity.
         * 
         * @return builder
         * 
         */
        public Builder maxInstanceCount(Output<Integer> maxInstanceCount) {
            $.maxInstanceCount = maxInstanceCount;
            return this;
        }

        /**
         * @param maxInstanceCount The maximum number of worker nodes to autoscale to based on the cluster&#39;s activity.
         * 
         * @return builder
         * 
         */
        public Builder maxInstanceCount(Integer maxInstanceCount) {
            return maxInstanceCount(Output.of(maxInstanceCount));
        }

        /**
         * @param minInstanceCount The minimum number of worker nodes to autoscale to based on the cluster&#39;s activity.
         * 
         * @return builder
         * 
         */
        public Builder minInstanceCount(Output<Integer> minInstanceCount) {
            $.minInstanceCount = minInstanceCount;
            return this;
        }

        /**
         * @param minInstanceCount The minimum number of worker nodes to autoscale to based on the cluster&#39;s activity.
         * 
         * @return builder
         * 
         */
        public Builder minInstanceCount(Integer minInstanceCount) {
            return minInstanceCount(Output.of(minInstanceCount));
        }

        public InteractiveQueryClusterRolesWorkerNodeAutoscaleCapacityArgs build() {
            $.maxInstanceCount = Objects.requireNonNull($.maxInstanceCount, "expected parameter 'maxInstanceCount' to be non-null");
            $.minInstanceCount = Objects.requireNonNull($.minInstanceCount, "expected parameter 'minInstanceCount' to be non-null");
            return $;
        }
    }

}
