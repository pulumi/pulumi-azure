// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.pim.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class GetRoleManagementPolicyPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetRoleManagementPolicyPlainArgs Empty = new GetRoleManagementPolicyPlainArgs();

    /**
     * The scoped Role Definition ID of the role for which this policy applies.
     * 
     */
    @Import(name="roleDefinitionId", required=true)
    private String roleDefinitionId;

    /**
     * @return The scoped Role Definition ID of the role for which this policy applies.
     * 
     */
    public String roleDefinitionId() {
        return this.roleDefinitionId;
    }

    /**
     * The scope to which this Role Management Policy applies. Can refer to a management group, a subscription, a resource group or a resource.
     * 
     */
    @Import(name="scope", required=true)
    private String scope;

    /**
     * @return The scope to which this Role Management Policy applies. Can refer to a management group, a subscription, a resource group or a resource.
     * 
     */
    public String scope() {
        return this.scope;
    }

    private GetRoleManagementPolicyPlainArgs() {}

    private GetRoleManagementPolicyPlainArgs(GetRoleManagementPolicyPlainArgs $) {
        this.roleDefinitionId = $.roleDefinitionId;
        this.scope = $.scope;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRoleManagementPolicyPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRoleManagementPolicyPlainArgs $;

        public Builder() {
            $ = new GetRoleManagementPolicyPlainArgs();
        }

        public Builder(GetRoleManagementPolicyPlainArgs defaults) {
            $ = new GetRoleManagementPolicyPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param roleDefinitionId The scoped Role Definition ID of the role for which this policy applies.
         * 
         * @return builder
         * 
         */
        public Builder roleDefinitionId(String roleDefinitionId) {
            $.roleDefinitionId = roleDefinitionId;
            return this;
        }

        /**
         * @param scope The scope to which this Role Management Policy applies. Can refer to a management group, a subscription, a resource group or a resource.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            $.scope = scope;
            return this;
        }

        public GetRoleManagementPolicyPlainArgs build() {
            if ($.roleDefinitionId == null) {
                throw new MissingRequiredPropertyException("GetRoleManagementPolicyPlainArgs", "roleDefinitionId");
            }
            if ($.scope == null) {
                throw new MissingRequiredPropertyException("GetRoleManagementPolicyPlainArgs", "scope");
            }
            return $;
        }
    }

}
