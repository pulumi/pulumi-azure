// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appplatform.outputs;

import com.pulumi.azure.appplatform.outputs.GetSpringCloudServiceConfigServerGitSetting;
import com.pulumi.azure.appplatform.outputs.GetSpringCloudServiceRequiredNetworkTrafficRule;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetSpringCloudServiceResult {
    /**
     * @return A `config_server_git_setting` block as defined below.
     * 
     */
    private List<GetSpringCloudServiceConfigServerGitSetting> configServerGitSettings;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The location of Spring Cloud Service.
     * 
     */
    private String location;
    /**
     * @return The name to identify on the Git repository.
     * 
     */
    private String name;
    /**
     * @return A list of the outbound Public IP Addresses used by this Spring Cloud Service.
     * 
     */
    private List<String> outboundPublicIpAddresses;
    /**
     * @return A list of `required_network_traffic_rules` blocks as defined below.
     * 
     */
    private List<GetSpringCloudServiceRequiredNetworkTrafficRule> requiredNetworkTrafficRules;
    private String resourceGroupName;
    /**
     * @return A mapping of tags assigned to Spring Cloud Service.
     * 
     */
    private Map<String,String> tags;

    private GetSpringCloudServiceResult() {}
    /**
     * @return A `config_server_git_setting` block as defined below.
     * 
     */
    public List<GetSpringCloudServiceConfigServerGitSetting> configServerGitSettings() {
        return this.configServerGitSettings;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The location of Spring Cloud Service.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return The name to identify on the Git repository.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return A list of the outbound Public IP Addresses used by this Spring Cloud Service.
     * 
     */
    public List<String> outboundPublicIpAddresses() {
        return this.outboundPublicIpAddresses;
    }
    /**
     * @return A list of `required_network_traffic_rules` blocks as defined below.
     * 
     */
    public List<GetSpringCloudServiceRequiredNetworkTrafficRule> requiredNetworkTrafficRules() {
        return this.requiredNetworkTrafficRules;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return A mapping of tags assigned to Spring Cloud Service.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSpringCloudServiceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetSpringCloudServiceConfigServerGitSetting> configServerGitSettings;
        private String id;
        private String location;
        private String name;
        private List<String> outboundPublicIpAddresses;
        private List<GetSpringCloudServiceRequiredNetworkTrafficRule> requiredNetworkTrafficRules;
        private String resourceGroupName;
        private Map<String,String> tags;
        public Builder() {}
        public Builder(GetSpringCloudServiceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.configServerGitSettings = defaults.configServerGitSettings;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.outboundPublicIpAddresses = defaults.outboundPublicIpAddresses;
    	      this.requiredNetworkTrafficRules = defaults.requiredNetworkTrafficRules;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder configServerGitSettings(List<GetSpringCloudServiceConfigServerGitSetting> configServerGitSettings) {
            if (configServerGitSettings == null) {
              throw new MissingRequiredPropertyException("GetSpringCloudServiceResult", "configServerGitSettings");
            }
            this.configServerGitSettings = configServerGitSettings;
            return this;
        }
        public Builder configServerGitSettings(GetSpringCloudServiceConfigServerGitSetting... configServerGitSettings) {
            return configServerGitSettings(List.of(configServerGitSettings));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSpringCloudServiceResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetSpringCloudServiceResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetSpringCloudServiceResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder outboundPublicIpAddresses(List<String> outboundPublicIpAddresses) {
            if (outboundPublicIpAddresses == null) {
              throw new MissingRequiredPropertyException("GetSpringCloudServiceResult", "outboundPublicIpAddresses");
            }
            this.outboundPublicIpAddresses = outboundPublicIpAddresses;
            return this;
        }
        public Builder outboundPublicIpAddresses(String... outboundPublicIpAddresses) {
            return outboundPublicIpAddresses(List.of(outboundPublicIpAddresses));
        }
        @CustomType.Setter
        public Builder requiredNetworkTrafficRules(List<GetSpringCloudServiceRequiredNetworkTrafficRule> requiredNetworkTrafficRules) {
            if (requiredNetworkTrafficRules == null) {
              throw new MissingRequiredPropertyException("GetSpringCloudServiceResult", "requiredNetworkTrafficRules");
            }
            this.requiredNetworkTrafficRules = requiredNetworkTrafficRules;
            return this;
        }
        public Builder requiredNetworkTrafficRules(GetSpringCloudServiceRequiredNetworkTrafficRule... requiredNetworkTrafficRules) {
            return requiredNetworkTrafficRules(List.of(requiredNetworkTrafficRules));
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            if (resourceGroupName == null) {
              throw new MissingRequiredPropertyException("GetSpringCloudServiceResult", "resourceGroupName");
            }
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetSpringCloudServiceResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public GetSpringCloudServiceResult build() {
            final var _resultValue = new GetSpringCloudServiceResult();
            _resultValue.configServerGitSettings = configServerGitSettings;
            _resultValue.id = id;
            _resultValue.location = location;
            _resultValue.name = name;
            _resultValue.outboundPublicIpAddresses = outboundPublicIpAddresses;
            _resultValue.requiredNetworkTrafficRules = requiredNetworkTrafficRules;
            _resultValue.resourceGroupName = resourceGroupName;
            _resultValue.tags = tags;
            return _resultValue;
        }
    }
}
