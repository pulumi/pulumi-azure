// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.mobile;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.mobile.NetworkPacketCoreControlPlaneArgs;
import com.pulumi.azure.mobile.inputs.NetworkPacketCoreControlPlaneState;
import com.pulumi.azure.mobile.outputs.NetworkPacketCoreControlPlaneIdentity;
import com.pulumi.azure.mobile.outputs.NetworkPacketCoreControlPlaneLocalDiagnosticsAccess;
import com.pulumi.azure.mobile.outputs.NetworkPacketCoreControlPlanePlatform;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a Mobile Network Packet Core Control Plane.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.mobile.Network;
 * import com.pulumi.azure.mobile.NetworkArgs;
 * import com.pulumi.azure.mobile.NetworkSite;
 * import com.pulumi.azure.mobile.NetworkSiteArgs;
 * import com.pulumi.azure.databoxedge.Device;
 * import com.pulumi.azure.databoxedge.DeviceArgs;
 * import com.pulumi.azure.mobile.NetworkPacketCoreControlPlane;
 * import com.pulumi.azure.mobile.NetworkPacketCoreControlPlaneArgs;
 * import com.pulumi.azure.mobile.inputs.NetworkPacketCoreControlPlaneLocalDiagnosticsAccessArgs;
 * import com.pulumi.azure.mobile.inputs.NetworkPacketCoreControlPlanePlatformArgs;
 * import static com.pulumi.codegen.internal.Serialization.*;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampleResourceGroup = new ResourceGroup(&#34;exampleResourceGroup&#34;, ResourceGroupArgs.builder()        
 *             .location(&#34;West Europe&#34;)
 *             .build());
 * 
 *         var exampleNetwork = new Network(&#34;exampleNetwork&#34;, NetworkArgs.builder()        
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .location(exampleResourceGroup.location())
 *             .mobileCountryCode(&#34;001&#34;)
 *             .mobileNetworkCode(&#34;01&#34;)
 *             .build());
 * 
 *         var exampleNetworkSite = new NetworkSite(&#34;exampleNetworkSite&#34;, NetworkSiteArgs.builder()        
 *             .mobileNetworkId(azurerm_mobile_network.test().id())
 *             .location(exampleResourceGroup.location())
 *             .build());
 * 
 *         var exampleDevice = new Device(&#34;exampleDevice&#34;, DeviceArgs.builder()        
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .location(exampleResourceGroup.location())
 *             .skuName(&#34;EdgeP_Base-Standard&#34;)
 *             .build());
 * 
 *         var exampleNetworkPacketCoreControlPlane = new NetworkPacketCoreControlPlane(&#34;exampleNetworkPacketCoreControlPlane&#34;, NetworkPacketCoreControlPlaneArgs.builder()        
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .location(exampleResourceGroup.location())
 *             .sku(&#34;G0&#34;)
 *             .controlPlaneAccessName(&#34;default-interface&#34;)
 *             .controlPlaneAccessIpv4Address(&#34;192.168.1.199&#34;)
 *             .controlPlaneAccessIpv4Gateway(&#34;192.168.1.1&#34;)
 *             .controlPlaneAccessIpv4Subnet(&#34;192.168.1.0/25&#34;)
 *             .siteIds(exampleNetworkSite.id())
 *             .localDiagnosticsAccess(NetworkPacketCoreControlPlaneLocalDiagnosticsAccessArgs.builder()
 *                 .authenticationType(&#34;AAD&#34;)
 *                 .build())
 *             .platform(NetworkPacketCoreControlPlanePlatformArgs.builder()
 *                 .type(&#34;AKS-HCI&#34;)
 *                 .edgeDeviceId(exampleDevice.id())
 *                 .build())
 *             .interoperabilitySettingsJson(serializeJson(
 *                 jsonObject(
 *                     jsonProperty(&#34;key&#34;, &#34;value&#34;)
 *                 )))
 *             .tags(Map.of(&#34;key&#34;, &#34;value&#34;))
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Mobile Network Packet Core Control Plane can be imported using the `resource id`, e.g.
 * 
 * ```sh
 *  $ pulumi import azure:mobile/networkPacketCoreControlPlane:NetworkPacketCoreControlPlane example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/packetCoreControlPlane1
 * ```
 * 
 */
@ResourceType(type="azure:mobile/networkPacketCoreControlPlane:NetworkPacketCoreControlPlane")
public class NetworkPacketCoreControlPlane extends com.pulumi.resources.CustomResource {
    /**
     * The IPv4 address for the control plane interface. This should match one of the interfaces configured on your Azure Stack Edge device.
     * 
     */
    @Export(name="controlPlaneAccessIpv4Address", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> controlPlaneAccessIpv4Address;

    /**
     * @return The IPv4 address for the control plane interface. This should match one of the interfaces configured on your Azure Stack Edge device.
     * 
     */
    public Output<Optional<String>> controlPlaneAccessIpv4Address() {
        return Codegen.optional(this.controlPlaneAccessIpv4Address);
    }
    /**
     * The default IPv4 gateway for the control plane interface. This should match one of the interfaces configured on your Azure Stack Edge device.
     * 
     */
    @Export(name="controlPlaneAccessIpv4Gateway", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> controlPlaneAccessIpv4Gateway;

    /**
     * @return The default IPv4 gateway for the control plane interface. This should match one of the interfaces configured on your Azure Stack Edge device.
     * 
     */
    public Output<Optional<String>> controlPlaneAccessIpv4Gateway() {
        return Codegen.optional(this.controlPlaneAccessIpv4Gateway);
    }
    /**
     * The IPv4 subnet for the control plane interface. This should match one of the interfaces configured on your Azure Stack Edge device.
     * 
     */
    @Export(name="controlPlaneAccessIpv4Subnet", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> controlPlaneAccessIpv4Subnet;

    /**
     * @return The IPv4 subnet for the control plane interface. This should match one of the interfaces configured on your Azure Stack Edge device.
     * 
     */
    public Output<Optional<String>> controlPlaneAccessIpv4Subnet() {
        return Codegen.optional(this.controlPlaneAccessIpv4Subnet);
    }
    /**
     * Specifies the logical name for this interface. This should match one of the interfaces configured on your Azure Stack Edge device.
     * 
     */
    @Export(name="controlPlaneAccessName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> controlPlaneAccessName;

    /**
     * @return Specifies the logical name for this interface. This should match one of the interfaces configured on your Azure Stack Edge device.
     * 
     */
    public Output<Optional<String>> controlPlaneAccessName() {
        return Codegen.optional(this.controlPlaneAccessName);
    }
    /**
     * The core network technology generation. Possible values are `5GC` and `EPC`.
     * 
     */
    @Export(name="coreNetworkTechnology", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> coreNetworkTechnology;

    /**
     * @return The core network technology generation. Possible values are `5GC` and `EPC`.
     * 
     */
    public Output<Optional<String>> coreNetworkTechnology() {
        return Codegen.optional(this.coreNetworkTechnology);
    }
    /**
     * An `identity` block as defined below.
     * 
     */
    @Export(name="identity", refs={NetworkPacketCoreControlPlaneIdentity.class}, tree="[0]")
    private Output</* @Nullable */ NetworkPacketCoreControlPlaneIdentity> identity;

    /**
     * @return An `identity` block as defined below.
     * 
     */
    public Output<Optional<NetworkPacketCoreControlPlaneIdentity>> identity() {
        return Codegen.optional(this.identity);
    }
    /**
     * Settings in JSON format to allow interoperability with third party components e.g. RANs and UEs.
     * 
     */
    @Export(name="interoperabilitySettingsJson", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> interoperabilitySettingsJson;

    /**
     * @return Settings in JSON format to allow interoperability with third party components e.g. RANs and UEs.
     * 
     */
    public Output<Optional<String>> interoperabilitySettingsJson() {
        return Codegen.optional(this.interoperabilitySettingsJson);
    }
    /**
     * One or more `local_diagnostics_access` blocks as defined below. Specifies the Kubernetes ingress configuration that controls access to the packet core diagnostics through local APIs.
     * 
     */
    @Export(name="localDiagnosticsAccess", refs={NetworkPacketCoreControlPlaneLocalDiagnosticsAccess.class}, tree="[0]")
    private Output<NetworkPacketCoreControlPlaneLocalDiagnosticsAccess> localDiagnosticsAccess;

    /**
     * @return One or more `local_diagnostics_access` blocks as defined below. Specifies the Kubernetes ingress configuration that controls access to the packet core diagnostics through local APIs.
     * 
     */
    public Output<NetworkPacketCoreControlPlaneLocalDiagnosticsAccess> localDiagnosticsAccess() {
        return this.localDiagnosticsAccess;
    }
    /**
     * Specifies the Azure Region where the Mobile Network Packet Core Control Plane should exist. Changing this forces a new Mobile Network Packet Core Control Plane to be created.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return Specifies the Azure Region where the Mobile Network Packet Core Control Plane should exist. Changing this forces a new Mobile Network Packet Core Control Plane to be created.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * Specifies The name of the Mobile Network Packet Core Control Plane. Changing this forces a new Mobile Network Packet Core Control Plane to be created.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Specifies The name of the Mobile Network Packet Core Control Plane. Changing this forces a new Mobile Network Packet Core Control Plane to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * A `platform` block as defined below.
     * 
     */
    @Export(name="platform", refs={NetworkPacketCoreControlPlanePlatform.class}, tree="[0]")
    private Output</* @Nullable */ NetworkPacketCoreControlPlanePlatform> platform;

    /**
     * @return A `platform` block as defined below.
     * 
     */
    public Output<Optional<NetworkPacketCoreControlPlanePlatform>> platform() {
        return Codegen.optional(this.platform);
    }
    /**
     * Specifies the name of the Resource Group where the Mobile Network Packet Core Control Plane should exist. Changing this forces a new Mobile Network Packet Core Control Plane to be created.
     * 
     */
    @Export(name="resourceGroupName", refs={String.class}, tree="[0]")
    private Output<String> resourceGroupName;

    /**
     * @return Specifies the name of the Resource Group where the Mobile Network Packet Core Control Plane should exist. Changing this forces a new Mobile Network Packet Core Control Plane to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * A list of Mobile Network Site IDs in which this packet core control plane should be deployed. The Sites must be in the same location as the packet core control plane.
     * 
     */
    @Export(name="siteIds", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> siteIds;

    /**
     * @return A list of Mobile Network Site IDs in which this packet core control plane should be deployed. The Sites must be in the same location as the packet core control plane.
     * 
     */
    public Output<List<String>> siteIds() {
        return this.siteIds;
    }
    /**
     * The SKU defining the throughput and SIM allowances for this packet core control plane deployment. Possible values are `G0`, `G1`, `G2`, `G3`, `G4`, `G5` and `G10`.
     * 
     */
    @Export(name="sku", refs={String.class}, tree="[0]")
    private Output<String> sku;

    /**
     * @return The SKU defining the throughput and SIM allowances for this packet core control plane deployment. Possible values are `G0`, `G1`, `G2`, `G3`, `G4`, `G5` and `G10`.
     * 
     */
    public Output<String> sku() {
        return this.sku;
    }
    /**
     * Specifies the version of the packet core software that is deployed.
     * 
     */
    @Export(name="softwareVersion", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> softwareVersion;

    /**
     * @return Specifies the version of the packet core software that is deployed.
     * 
     */
    public Output<Optional<String>> softwareVersion() {
        return Codegen.optional(this.softwareVersion);
    }
    /**
     * A mapping of tags which should be assigned to the Mobile Network Packet Core Control Plane.
     * 
     */
    @Export(name="tags", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return A mapping of tags which should be assigned to the Mobile Network Packet Core Control Plane.
     * 
     */
    public Output<Optional<Map<String,String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * Specifies the MTU in bytes that can be sent to the user equipment. The same MTU is set on the user plane data links for all data networks. The MTU set on the user plane access link will be 60 bytes greater than this value to allow for GTP encapsulation.
     * 
     */
    @Export(name="userEquipmentMtuInBytes", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> userEquipmentMtuInBytes;

    /**
     * @return Specifies the MTU in bytes that can be sent to the user equipment. The same MTU is set on the user plane data links for all data networks. The MTU set on the user plane access link will be 60 bytes greater than this value to allow for GTP encapsulation.
     * 
     */
    public Output<Optional<Integer>> userEquipmentMtuInBytes() {
        return Codegen.optional(this.userEquipmentMtuInBytes);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public NetworkPacketCoreControlPlane(String name) {
        this(name, NetworkPacketCoreControlPlaneArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public NetworkPacketCoreControlPlane(String name, NetworkPacketCoreControlPlaneArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public NetworkPacketCoreControlPlane(String name, NetworkPacketCoreControlPlaneArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:mobile/networkPacketCoreControlPlane:NetworkPacketCoreControlPlane", name, args == null ? NetworkPacketCoreControlPlaneArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private NetworkPacketCoreControlPlane(String name, Output<String> id, @Nullable NetworkPacketCoreControlPlaneState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:mobile/networkPacketCoreControlPlane:NetworkPacketCoreControlPlane", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static NetworkPacketCoreControlPlane get(String name, Output<String> id, @Nullable NetworkPacketCoreControlPlaneState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new NetworkPacketCoreControlPlane(name, id, state, options);
    }
}
