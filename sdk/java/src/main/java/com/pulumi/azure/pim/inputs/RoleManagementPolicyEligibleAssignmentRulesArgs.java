// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.pim.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RoleManagementPolicyEligibleAssignmentRulesArgs extends com.pulumi.resources.ResourceArgs {

    public static final RoleManagementPolicyEligibleAssignmentRulesArgs Empty = new RoleManagementPolicyEligibleAssignmentRulesArgs();

    /**
     * Must an assignment have an expiry date. `false` allows permanent assignment.
     * 
     */
    @Import(name="expirationRequired")
    private @Nullable Output<Boolean> expirationRequired;

    /**
     * @return Must an assignment have an expiry date. `false` allows permanent assignment.
     * 
     */
    public Optional<Output<Boolean>> expirationRequired() {
        return Optional.ofNullable(this.expirationRequired);
    }

    /**
     * The maximum length of time an assignment can be valid, as an ISO8601 duration. Permitted values: `P15D`, `P30D`, `P90D`, `P180D`, or `P365D`.
     * 
     * One of `expiration_required` or `expire_after` must be provided.
     * 
     */
    @Import(name="expireAfter")
    private @Nullable Output<String> expireAfter;

    /**
     * @return The maximum length of time an assignment can be valid, as an ISO8601 duration. Permitted values: `P15D`, `P30D`, `P90D`, `P180D`, or `P365D`.
     * 
     * One of `expiration_required` or `expire_after` must be provided.
     * 
     */
    public Optional<Output<String>> expireAfter() {
        return Optional.ofNullable(this.expireAfter);
    }

    private RoleManagementPolicyEligibleAssignmentRulesArgs() {}

    private RoleManagementPolicyEligibleAssignmentRulesArgs(RoleManagementPolicyEligibleAssignmentRulesArgs $) {
        this.expirationRequired = $.expirationRequired;
        this.expireAfter = $.expireAfter;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RoleManagementPolicyEligibleAssignmentRulesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RoleManagementPolicyEligibleAssignmentRulesArgs $;

        public Builder() {
            $ = new RoleManagementPolicyEligibleAssignmentRulesArgs();
        }

        public Builder(RoleManagementPolicyEligibleAssignmentRulesArgs defaults) {
            $ = new RoleManagementPolicyEligibleAssignmentRulesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param expirationRequired Must an assignment have an expiry date. `false` allows permanent assignment.
         * 
         * @return builder
         * 
         */
        public Builder expirationRequired(@Nullable Output<Boolean> expirationRequired) {
            $.expirationRequired = expirationRequired;
            return this;
        }

        /**
         * @param expirationRequired Must an assignment have an expiry date. `false` allows permanent assignment.
         * 
         * @return builder
         * 
         */
        public Builder expirationRequired(Boolean expirationRequired) {
            return expirationRequired(Output.of(expirationRequired));
        }

        /**
         * @param expireAfter The maximum length of time an assignment can be valid, as an ISO8601 duration. Permitted values: `P15D`, `P30D`, `P90D`, `P180D`, or `P365D`.
         * 
         * One of `expiration_required` or `expire_after` must be provided.
         * 
         * @return builder
         * 
         */
        public Builder expireAfter(@Nullable Output<String> expireAfter) {
            $.expireAfter = expireAfter;
            return this;
        }

        /**
         * @param expireAfter The maximum length of time an assignment can be valid, as an ISO8601 duration. Permitted values: `P15D`, `P30D`, `P90D`, `P180D`, or `P365D`.
         * 
         * One of `expiration_required` or `expire_after` must be provided.
         * 
         * @return builder
         * 
         */
        public Builder expireAfter(String expireAfter) {
            return expireAfter(Output.of(expireAfter));
        }

        public RoleManagementPolicyEligibleAssignmentRulesArgs build() {
            return $;
        }
    }

}
