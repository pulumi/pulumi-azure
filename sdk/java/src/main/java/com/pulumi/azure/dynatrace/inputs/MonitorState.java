// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.dynatrace.inputs;

import com.pulumi.azure.dynatrace.inputs.MonitorEnvironmentPropertyArgs;
import com.pulumi.azure.dynatrace.inputs.MonitorIdentityArgs;
import com.pulumi.azure.dynatrace.inputs.MonitorPlanArgs;
import com.pulumi.azure.dynatrace.inputs.MonitorUserArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MonitorState extends com.pulumi.resources.ResourceArgs {

    public static final MonitorState Empty = new MonitorState();

    /**
     * Properties of the Dynatrace environment. An `environment_properties` block as defined below.
     * 
     */
    @Import(name="environmentProperties")
    private @Nullable Output<List<MonitorEnvironmentPropertyArgs>> environmentProperties;

    /**
     * @return Properties of the Dynatrace environment. An `environment_properties` block as defined below.
     * 
     */
    public Optional<Output<List<MonitorEnvironmentPropertyArgs>>> environmentProperties() {
        return Optional.ofNullable(this.environmentProperties);
    }

    /**
     * The kind of managed identity assigned to this resource.  A `identity` block as defined below.
     * 
     */
    @Import(name="identity")
    private @Nullable Output<MonitorIdentityArgs> identity;

    /**
     * @return The kind of managed identity assigned to this resource.  A `identity` block as defined below.
     * 
     */
    public Optional<Output<MonitorIdentityArgs>> identity() {
        return Optional.ofNullable(this.identity);
    }

    /**
     * The Azure Region where the Dynatrace monitor should exist. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The Azure Region where the Dynatrace monitor should exist. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Flag specifying the Marketplace Subscription Status of the resource. If payment is not made in time, the resource will go in Suspended state. Possible values are `Active` and `Suspended`.
     * 
     */
    @Import(name="marketplaceSubscription")
    private @Nullable Output<String> marketplaceSubscription;

    /**
     * @return Flag specifying the Marketplace Subscription Status of the resource. If payment is not made in time, the resource will go in Suspended state. Possible values are `Active` and `Suspended`.
     * 
     */
    public Optional<Output<String>> marketplaceSubscription() {
        return Optional.ofNullable(this.marketplaceSubscription);
    }

    /**
     * Flag specifying if the resource monitoring is enabled or disabled. Default is `true`.
     * 
     */
    @Import(name="monitoringEnabled")
    private @Nullable Output<Boolean> monitoringEnabled;

    /**
     * @return Flag specifying if the resource monitoring is enabled or disabled. Default is `true`.
     * 
     */
    public Optional<Output<Boolean>> monitoringEnabled() {
        return Optional.ofNullable(this.monitoringEnabled);
    }

    /**
     * Name of the Dynatrace monitor. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the Dynatrace monitor. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Billing plan information. A `plan` block as defined below. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="plan")
    private @Nullable Output<MonitorPlanArgs> plan;

    /**
     * @return Billing plan information. A `plan` block as defined below. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<MonitorPlanArgs>> plan() {
        return Optional.ofNullable(this.plan);
    }

    /**
     * The name of the Resource Group where the Dynatrace monitor should exist. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="resourceGroupName")
    private @Nullable Output<String> resourceGroupName;

    /**
     * @return The name of the Resource Group where the Dynatrace monitor should exist. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> resourceGroupName() {
        return Optional.ofNullable(this.resourceGroupName);
    }

    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * User&#39;s information. A `user` block as defined below. Chainging this forces a new resource to be created.
     * 
     */
    @Import(name="user")
    private @Nullable Output<MonitorUserArgs> user;

    /**
     * @return User&#39;s information. A `user` block as defined below. Chainging this forces a new resource to be created.
     * 
     */
    public Optional<Output<MonitorUserArgs>> user() {
        return Optional.ofNullable(this.user);
    }

    private MonitorState() {}

    private MonitorState(MonitorState $) {
        this.environmentProperties = $.environmentProperties;
        this.identity = $.identity;
        this.location = $.location;
        this.marketplaceSubscription = $.marketplaceSubscription;
        this.monitoringEnabled = $.monitoringEnabled;
        this.name = $.name;
        this.plan = $.plan;
        this.resourceGroupName = $.resourceGroupName;
        this.tags = $.tags;
        this.user = $.user;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MonitorState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MonitorState $;

        public Builder() {
            $ = new MonitorState();
        }

        public Builder(MonitorState defaults) {
            $ = new MonitorState(Objects.requireNonNull(defaults));
        }

        /**
         * @param environmentProperties Properties of the Dynatrace environment. An `environment_properties` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder environmentProperties(@Nullable Output<List<MonitorEnvironmentPropertyArgs>> environmentProperties) {
            $.environmentProperties = environmentProperties;
            return this;
        }

        /**
         * @param environmentProperties Properties of the Dynatrace environment. An `environment_properties` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder environmentProperties(List<MonitorEnvironmentPropertyArgs> environmentProperties) {
            return environmentProperties(Output.of(environmentProperties));
        }

        /**
         * @param environmentProperties Properties of the Dynatrace environment. An `environment_properties` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder environmentProperties(MonitorEnvironmentPropertyArgs... environmentProperties) {
            return environmentProperties(List.of(environmentProperties));
        }

        /**
         * @param identity The kind of managed identity assigned to this resource.  A `identity` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder identity(@Nullable Output<MonitorIdentityArgs> identity) {
            $.identity = identity;
            return this;
        }

        /**
         * @param identity The kind of managed identity assigned to this resource.  A `identity` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder identity(MonitorIdentityArgs identity) {
            return identity(Output.of(identity));
        }

        /**
         * @param location The Azure Region where the Dynatrace monitor should exist. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The Azure Region where the Dynatrace monitor should exist. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param marketplaceSubscription Flag specifying the Marketplace Subscription Status of the resource. If payment is not made in time, the resource will go in Suspended state. Possible values are `Active` and `Suspended`.
         * 
         * @return builder
         * 
         */
        public Builder marketplaceSubscription(@Nullable Output<String> marketplaceSubscription) {
            $.marketplaceSubscription = marketplaceSubscription;
            return this;
        }

        /**
         * @param marketplaceSubscription Flag specifying the Marketplace Subscription Status of the resource. If payment is not made in time, the resource will go in Suspended state. Possible values are `Active` and `Suspended`.
         * 
         * @return builder
         * 
         */
        public Builder marketplaceSubscription(String marketplaceSubscription) {
            return marketplaceSubscription(Output.of(marketplaceSubscription));
        }

        /**
         * @param monitoringEnabled Flag specifying if the resource monitoring is enabled or disabled. Default is `true`.
         * 
         * @return builder
         * 
         */
        public Builder monitoringEnabled(@Nullable Output<Boolean> monitoringEnabled) {
            $.monitoringEnabled = monitoringEnabled;
            return this;
        }

        /**
         * @param monitoringEnabled Flag specifying if the resource monitoring is enabled or disabled. Default is `true`.
         * 
         * @return builder
         * 
         */
        public Builder monitoringEnabled(Boolean monitoringEnabled) {
            return monitoringEnabled(Output.of(monitoringEnabled));
        }

        /**
         * @param name Name of the Dynatrace monitor. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the Dynatrace monitor. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param plan Billing plan information. A `plan` block as defined below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder plan(@Nullable Output<MonitorPlanArgs> plan) {
            $.plan = plan;
            return this;
        }

        /**
         * @param plan Billing plan information. A `plan` block as defined below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder plan(MonitorPlanArgs plan) {
            return plan(Output.of(plan));
        }

        /**
         * @param resourceGroupName The name of the Resource Group where the Dynatrace monitor should exist. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(@Nullable Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the Resource Group where the Dynatrace monitor should exist. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param user User&#39;s information. A `user` block as defined below. Chainging this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder user(@Nullable Output<MonitorUserArgs> user) {
            $.user = user;
            return this;
        }

        /**
         * @param user User&#39;s information. A `user` block as defined below. Chainging this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder user(MonitorUserArgs user) {
            return user(Output.of(user));
        }

        public MonitorState build() {
            return $;
        }
    }

}
