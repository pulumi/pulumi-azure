// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.batch.inputs;

import com.pulumi.azure.batch.inputs.AccountEncryptionArgs;
import com.pulumi.azure.batch.inputs.AccountIdentityArgs;
import com.pulumi.azure.batch.inputs.AccountKeyVaultReferenceArgs;
import com.pulumi.azure.batch.inputs.AccountNetworkProfileArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AccountState extends com.pulumi.resources.ResourceArgs {

    public static final AccountState Empty = new AccountState();

    /**
     * The account endpoint used to interact with the Batch service.
     * 
     */
    @Import(name="accountEndpoint")
    private @Nullable Output<String> accountEndpoint;

    /**
     * @return The account endpoint used to interact with the Batch service.
     * 
     */
    public Optional<Output<String>> accountEndpoint() {
        return Optional.ofNullable(this.accountEndpoint);
    }

    /**
     * Specifies the allowed authentication mode for the Batch account. Possible values include `AAD`, `SharedKey` or `TaskAuthenticationToken`.
     * 
     */
    @Import(name="allowedAuthenticationModes")
    private @Nullable Output<List<String>> allowedAuthenticationModes;

    /**
     * @return Specifies the allowed authentication mode for the Batch account. Possible values include `AAD`, `SharedKey` or `TaskAuthenticationToken`.
     * 
     */
    public Optional<Output<List<String>>> allowedAuthenticationModes() {
        return Optional.ofNullable(this.allowedAuthenticationModes);
    }

    /**
     * Specifies if customer managed key encryption should be used to encrypt batch account data. One `encryption` block as defined below.
     * 
     */
    @Import(name="encryption")
    private @Nullable Output<AccountEncryptionArgs> encryption;

    /**
     * @return Specifies if customer managed key encryption should be used to encrypt batch account data. One `encryption` block as defined below.
     * 
     */
    public Optional<Output<AccountEncryptionArgs>> encryption() {
        return Optional.ofNullable(this.encryption);
    }

    /**
     * An `identity` block as defined below.
     * 
     */
    @Import(name="identity")
    private @Nullable Output<AccountIdentityArgs> identity;

    /**
     * @return An `identity` block as defined below.
     * 
     */
    public Optional<Output<AccountIdentityArgs>> identity() {
        return Optional.ofNullable(this.identity);
    }

    /**
     * A `key_vault_reference` block, as defined below, that describes the Azure KeyVault reference to use when deploying the Azure Batch account using the `UserSubscription` pool allocation mode.
     * 
     */
    @Import(name="keyVaultReference")
    private @Nullable Output<AccountKeyVaultReferenceArgs> keyVaultReference;

    /**
     * @return A `key_vault_reference` block, as defined below, that describes the Azure KeyVault reference to use when deploying the Azure Batch account using the `UserSubscription` pool allocation mode.
     * 
     */
    public Optional<Output<AccountKeyVaultReferenceArgs>> keyVaultReference() {
        return Optional.ofNullable(this.keyVaultReference);
    }

    /**
     * Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Specifies the name of the Batch account. Only lowercase Alphanumeric characters allowed. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the name of the Batch account. Only lowercase Alphanumeric characters allowed. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A `network_profile` block as defined below.
     * 
     */
    @Import(name="networkProfile")
    private @Nullable Output<AccountNetworkProfileArgs> networkProfile;

    /**
     * @return A `network_profile` block as defined below.
     * 
     */
    public Optional<Output<AccountNetworkProfileArgs>> networkProfile() {
        return Optional.ofNullable(this.networkProfile);
    }

    /**
     * Specifies the mode to use for pool allocation. Possible values are `BatchService` or `UserSubscription`. Defaults to `BatchService`.
     * 
     */
    @Import(name="poolAllocationMode")
    private @Nullable Output<String> poolAllocationMode;

    /**
     * @return Specifies the mode to use for pool allocation. Possible values are `BatchService` or `UserSubscription`. Defaults to `BatchService`.
     * 
     */
    public Optional<Output<String>> poolAllocationMode() {
        return Optional.ofNullable(this.poolAllocationMode);
    }

    /**
     * The Batch account primary access key.
     * 
     */
    @Import(name="primaryAccessKey")
    private @Nullable Output<String> primaryAccessKey;

    /**
     * @return The Batch account primary access key.
     * 
     */
    public Optional<Output<String>> primaryAccessKey() {
        return Optional.ofNullable(this.primaryAccessKey);
    }

    /**
     * Whether public network access is allowed for this server. Defaults to `true`.
     * 
     * &gt; **NOTE:** When using `UserSubscription` mode, an Azure KeyVault reference has to be specified. See `key_vault_reference` below.
     * 
     * &gt; **NOTE:** When using `UserSubscription` mode, the `Microsoft Azure Batch` service principal has to have `Contributor` role on your subscription scope, as documented [here](https://docs.microsoft.com/azure/batch/batch-account-create-portal#additional-configuration-for-user-subscription-mode).
     * 
     */
    @Import(name="publicNetworkAccessEnabled")
    private @Nullable Output<Boolean> publicNetworkAccessEnabled;

    /**
     * @return Whether public network access is allowed for this server. Defaults to `true`.
     * 
     * &gt; **NOTE:** When using `UserSubscription` mode, an Azure KeyVault reference has to be specified. See `key_vault_reference` below.
     * 
     * &gt; **NOTE:** When using `UserSubscription` mode, the `Microsoft Azure Batch` service principal has to have `Contributor` role on your subscription scope, as documented [here](https://docs.microsoft.com/azure/batch/batch-account-create-portal#additional-configuration-for-user-subscription-mode).
     * 
     */
    public Optional<Output<Boolean>> publicNetworkAccessEnabled() {
        return Optional.ofNullable(this.publicNetworkAccessEnabled);
    }

    /**
     * The name of the resource group in which to create the Batch account. Changing this forces a new resource to be created.
     * 
     * &gt; **NOTE:** To work around [a bug in the Azure API](https://github.com/Azure/azure-rest-api-specs/issues/5574) this property is currently treated as case-insensitive. A future version of this provider will require that the casing is correct.
     * 
     */
    @Import(name="resourceGroupName")
    private @Nullable Output<String> resourceGroupName;

    /**
     * @return The name of the resource group in which to create the Batch account. Changing this forces a new resource to be created.
     * 
     * &gt; **NOTE:** To work around [a bug in the Azure API](https://github.com/Azure/azure-rest-api-specs/issues/5574) this property is currently treated as case-insensitive. A future version of this provider will require that the casing is correct.
     * 
     */
    public Optional<Output<String>> resourceGroupName() {
        return Optional.ofNullable(this.resourceGroupName);
    }

    /**
     * The Batch account secondary access key.
     * 
     */
    @Import(name="secondaryAccessKey")
    private @Nullable Output<String> secondaryAccessKey;

    /**
     * @return The Batch account secondary access key.
     * 
     */
    public Optional<Output<String>> secondaryAccessKey() {
        return Optional.ofNullable(this.secondaryAccessKey);
    }

    /**
     * Specifies the storage account authentication mode. Possible values include `StorageKeys`, `BatchAccountManagedIdentity`.
     * 
     * &gt; **NOTE:** When using `BatchAccountManagedIdentity` mod, the `identity.type` must set to `UserAssigned` or `SystemAssigned`.
     * 
     */
    @Import(name="storageAccountAuthenticationMode")
    private @Nullable Output<String> storageAccountAuthenticationMode;

    /**
     * @return Specifies the storage account authentication mode. Possible values include `StorageKeys`, `BatchAccountManagedIdentity`.
     * 
     * &gt; **NOTE:** When using `BatchAccountManagedIdentity` mod, the `identity.type` must set to `UserAssigned` or `SystemAssigned`.
     * 
     */
    public Optional<Output<String>> storageAccountAuthenticationMode() {
        return Optional.ofNullable(this.storageAccountAuthenticationMode);
    }

    /**
     * Specifies the storage account to use for the Batch account. If not specified, Azure Batch will manage the storage.
     * 
     * &gt; **NOTE:** When using `storage_account_id`, the `storage_account_authentication_mode` must be specified as well.
     * 
     */
    @Import(name="storageAccountId")
    private @Nullable Output<String> storageAccountId;

    /**
     * @return Specifies the storage account to use for the Batch account. If not specified, Azure Batch will manage the storage.
     * 
     * &gt; **NOTE:** When using `storage_account_id`, the `storage_account_authentication_mode` must be specified as well.
     * 
     */
    public Optional<Output<String>> storageAccountId() {
        return Optional.ofNullable(this.storageAccountId);
    }

    /**
     * Specifies the user assigned identity for the storage account.
     * 
     */
    @Import(name="storageAccountNodeIdentity")
    private @Nullable Output<String> storageAccountNodeIdentity;

    /**
     * @return Specifies the user assigned identity for the storage account.
     * 
     */
    public Optional<Output<String>> storageAccountNodeIdentity() {
        return Optional.ofNullable(this.storageAccountNodeIdentity);
    }

    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private AccountState() {}

    private AccountState(AccountState $) {
        this.accountEndpoint = $.accountEndpoint;
        this.allowedAuthenticationModes = $.allowedAuthenticationModes;
        this.encryption = $.encryption;
        this.identity = $.identity;
        this.keyVaultReference = $.keyVaultReference;
        this.location = $.location;
        this.name = $.name;
        this.networkProfile = $.networkProfile;
        this.poolAllocationMode = $.poolAllocationMode;
        this.primaryAccessKey = $.primaryAccessKey;
        this.publicNetworkAccessEnabled = $.publicNetworkAccessEnabled;
        this.resourceGroupName = $.resourceGroupName;
        this.secondaryAccessKey = $.secondaryAccessKey;
        this.storageAccountAuthenticationMode = $.storageAccountAuthenticationMode;
        this.storageAccountId = $.storageAccountId;
        this.storageAccountNodeIdentity = $.storageAccountNodeIdentity;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccountState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccountState $;

        public Builder() {
            $ = new AccountState();
        }

        public Builder(AccountState defaults) {
            $ = new AccountState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountEndpoint The account endpoint used to interact with the Batch service.
         * 
         * @return builder
         * 
         */
        public Builder accountEndpoint(@Nullable Output<String> accountEndpoint) {
            $.accountEndpoint = accountEndpoint;
            return this;
        }

        /**
         * @param accountEndpoint The account endpoint used to interact with the Batch service.
         * 
         * @return builder
         * 
         */
        public Builder accountEndpoint(String accountEndpoint) {
            return accountEndpoint(Output.of(accountEndpoint));
        }

        /**
         * @param allowedAuthenticationModes Specifies the allowed authentication mode for the Batch account. Possible values include `AAD`, `SharedKey` or `TaskAuthenticationToken`.
         * 
         * @return builder
         * 
         */
        public Builder allowedAuthenticationModes(@Nullable Output<List<String>> allowedAuthenticationModes) {
            $.allowedAuthenticationModes = allowedAuthenticationModes;
            return this;
        }

        /**
         * @param allowedAuthenticationModes Specifies the allowed authentication mode for the Batch account. Possible values include `AAD`, `SharedKey` or `TaskAuthenticationToken`.
         * 
         * @return builder
         * 
         */
        public Builder allowedAuthenticationModes(List<String> allowedAuthenticationModes) {
            return allowedAuthenticationModes(Output.of(allowedAuthenticationModes));
        }

        /**
         * @param allowedAuthenticationModes Specifies the allowed authentication mode for the Batch account. Possible values include `AAD`, `SharedKey` or `TaskAuthenticationToken`.
         * 
         * @return builder
         * 
         */
        public Builder allowedAuthenticationModes(String... allowedAuthenticationModes) {
            return allowedAuthenticationModes(List.of(allowedAuthenticationModes));
        }

        /**
         * @param encryption Specifies if customer managed key encryption should be used to encrypt batch account data. One `encryption` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder encryption(@Nullable Output<AccountEncryptionArgs> encryption) {
            $.encryption = encryption;
            return this;
        }

        /**
         * @param encryption Specifies if customer managed key encryption should be used to encrypt batch account data. One `encryption` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder encryption(AccountEncryptionArgs encryption) {
            return encryption(Output.of(encryption));
        }

        /**
         * @param identity An `identity` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder identity(@Nullable Output<AccountIdentityArgs> identity) {
            $.identity = identity;
            return this;
        }

        /**
         * @param identity An `identity` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder identity(AccountIdentityArgs identity) {
            return identity(Output.of(identity));
        }

        /**
         * @param keyVaultReference A `key_vault_reference` block, as defined below, that describes the Azure KeyVault reference to use when deploying the Azure Batch account using the `UserSubscription` pool allocation mode.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultReference(@Nullable Output<AccountKeyVaultReferenceArgs> keyVaultReference) {
            $.keyVaultReference = keyVaultReference;
            return this;
        }

        /**
         * @param keyVaultReference A `key_vault_reference` block, as defined below, that describes the Azure KeyVault reference to use when deploying the Azure Batch account using the `UserSubscription` pool allocation mode.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultReference(AccountKeyVaultReferenceArgs keyVaultReference) {
            return keyVaultReference(Output.of(keyVaultReference));
        }

        /**
         * @param location Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name Specifies the name of the Batch account. Only lowercase Alphanumeric characters allowed. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of the Batch account. Only lowercase Alphanumeric characters allowed. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkProfile A `network_profile` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder networkProfile(@Nullable Output<AccountNetworkProfileArgs> networkProfile) {
            $.networkProfile = networkProfile;
            return this;
        }

        /**
         * @param networkProfile A `network_profile` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder networkProfile(AccountNetworkProfileArgs networkProfile) {
            return networkProfile(Output.of(networkProfile));
        }

        /**
         * @param poolAllocationMode Specifies the mode to use for pool allocation. Possible values are `BatchService` or `UserSubscription`. Defaults to `BatchService`.
         * 
         * @return builder
         * 
         */
        public Builder poolAllocationMode(@Nullable Output<String> poolAllocationMode) {
            $.poolAllocationMode = poolAllocationMode;
            return this;
        }

        /**
         * @param poolAllocationMode Specifies the mode to use for pool allocation. Possible values are `BatchService` or `UserSubscription`. Defaults to `BatchService`.
         * 
         * @return builder
         * 
         */
        public Builder poolAllocationMode(String poolAllocationMode) {
            return poolAllocationMode(Output.of(poolAllocationMode));
        }

        /**
         * @param primaryAccessKey The Batch account primary access key.
         * 
         * @return builder
         * 
         */
        public Builder primaryAccessKey(@Nullable Output<String> primaryAccessKey) {
            $.primaryAccessKey = primaryAccessKey;
            return this;
        }

        /**
         * @param primaryAccessKey The Batch account primary access key.
         * 
         * @return builder
         * 
         */
        public Builder primaryAccessKey(String primaryAccessKey) {
            return primaryAccessKey(Output.of(primaryAccessKey));
        }

        /**
         * @param publicNetworkAccessEnabled Whether public network access is allowed for this server. Defaults to `true`.
         * 
         * &gt; **NOTE:** When using `UserSubscription` mode, an Azure KeyVault reference has to be specified. See `key_vault_reference` below.
         * 
         * &gt; **NOTE:** When using `UserSubscription` mode, the `Microsoft Azure Batch` service principal has to have `Contributor` role on your subscription scope, as documented [here](https://docs.microsoft.com/azure/batch/batch-account-create-portal#additional-configuration-for-user-subscription-mode).
         * 
         * @return builder
         * 
         */
        public Builder publicNetworkAccessEnabled(@Nullable Output<Boolean> publicNetworkAccessEnabled) {
            $.publicNetworkAccessEnabled = publicNetworkAccessEnabled;
            return this;
        }

        /**
         * @param publicNetworkAccessEnabled Whether public network access is allowed for this server. Defaults to `true`.
         * 
         * &gt; **NOTE:** When using `UserSubscription` mode, an Azure KeyVault reference has to be specified. See `key_vault_reference` below.
         * 
         * &gt; **NOTE:** When using `UserSubscription` mode, the `Microsoft Azure Batch` service principal has to have `Contributor` role on your subscription scope, as documented [here](https://docs.microsoft.com/azure/batch/batch-account-create-portal#additional-configuration-for-user-subscription-mode).
         * 
         * @return builder
         * 
         */
        public Builder publicNetworkAccessEnabled(Boolean publicNetworkAccessEnabled) {
            return publicNetworkAccessEnabled(Output.of(publicNetworkAccessEnabled));
        }

        /**
         * @param resourceGroupName The name of the resource group in which to create the Batch account. Changing this forces a new resource to be created.
         * 
         * &gt; **NOTE:** To work around [a bug in the Azure API](https://github.com/Azure/azure-rest-api-specs/issues/5574) this property is currently treated as case-insensitive. A future version of this provider will require that the casing is correct.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(@Nullable Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group in which to create the Batch account. Changing this forces a new resource to be created.
         * 
         * &gt; **NOTE:** To work around [a bug in the Azure API](https://github.com/Azure/azure-rest-api-specs/issues/5574) this property is currently treated as case-insensitive. A future version of this provider will require that the casing is correct.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param secondaryAccessKey The Batch account secondary access key.
         * 
         * @return builder
         * 
         */
        public Builder secondaryAccessKey(@Nullable Output<String> secondaryAccessKey) {
            $.secondaryAccessKey = secondaryAccessKey;
            return this;
        }

        /**
         * @param secondaryAccessKey The Batch account secondary access key.
         * 
         * @return builder
         * 
         */
        public Builder secondaryAccessKey(String secondaryAccessKey) {
            return secondaryAccessKey(Output.of(secondaryAccessKey));
        }

        /**
         * @param storageAccountAuthenticationMode Specifies the storage account authentication mode. Possible values include `StorageKeys`, `BatchAccountManagedIdentity`.
         * 
         * &gt; **NOTE:** When using `BatchAccountManagedIdentity` mod, the `identity.type` must set to `UserAssigned` or `SystemAssigned`.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountAuthenticationMode(@Nullable Output<String> storageAccountAuthenticationMode) {
            $.storageAccountAuthenticationMode = storageAccountAuthenticationMode;
            return this;
        }

        /**
         * @param storageAccountAuthenticationMode Specifies the storage account authentication mode. Possible values include `StorageKeys`, `BatchAccountManagedIdentity`.
         * 
         * &gt; **NOTE:** When using `BatchAccountManagedIdentity` mod, the `identity.type` must set to `UserAssigned` or `SystemAssigned`.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountAuthenticationMode(String storageAccountAuthenticationMode) {
            return storageAccountAuthenticationMode(Output.of(storageAccountAuthenticationMode));
        }

        /**
         * @param storageAccountId Specifies the storage account to use for the Batch account. If not specified, Azure Batch will manage the storage.
         * 
         * &gt; **NOTE:** When using `storage_account_id`, the `storage_account_authentication_mode` must be specified as well.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountId(@Nullable Output<String> storageAccountId) {
            $.storageAccountId = storageAccountId;
            return this;
        }

        /**
         * @param storageAccountId Specifies the storage account to use for the Batch account. If not specified, Azure Batch will manage the storage.
         * 
         * &gt; **NOTE:** When using `storage_account_id`, the `storage_account_authentication_mode` must be specified as well.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountId(String storageAccountId) {
            return storageAccountId(Output.of(storageAccountId));
        }

        /**
         * @param storageAccountNodeIdentity Specifies the user assigned identity for the storage account.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountNodeIdentity(@Nullable Output<String> storageAccountNodeIdentity) {
            $.storageAccountNodeIdentity = storageAccountNodeIdentity;
            return this;
        }

        /**
         * @param storageAccountNodeIdentity Specifies the user assigned identity for the storage account.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountNodeIdentity(String storageAccountNodeIdentity) {
            return storageAccountNodeIdentity(Output.of(storageAccountNodeIdentity));
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public AccountState build() {
            return $;
        }
    }

}
