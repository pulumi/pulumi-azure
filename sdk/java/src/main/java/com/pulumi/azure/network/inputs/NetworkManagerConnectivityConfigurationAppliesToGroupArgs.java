// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkManagerConnectivityConfigurationAppliesToGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworkManagerConnectivityConfigurationAppliesToGroupArgs Empty = new NetworkManagerConnectivityConfigurationAppliesToGroupArgs();

    /**
     * Indicates whether to global mesh is supported for this group. Possible values are `true` and `false`.
     * 
     * &gt; **NOTE:** A group can be global only if the `group_connectivity` is `DirectlyConnected`.
     * 
     */
    @Import(name="globalMeshEnabled")
    private @Nullable Output<Boolean> globalMeshEnabled;

    /**
     * @return Indicates whether to global mesh is supported for this group. Possible values are `true` and `false`.
     * 
     * &gt; **NOTE:** A group can be global only if the `group_connectivity` is `DirectlyConnected`.
     * 
     */
    public Optional<Output<Boolean>> globalMeshEnabled() {
        return Optional.ofNullable(this.globalMeshEnabled);
    }

    /**
     * Specifies the group connectivity type. Possible values are `None` and `DirectlyConnected`.
     * 
     */
    @Import(name="groupConnectivity", required=true)
    private Output<String> groupConnectivity;

    /**
     * @return Specifies the group connectivity type. Possible values are `None` and `DirectlyConnected`.
     * 
     */
    public Output<String> groupConnectivity() {
        return this.groupConnectivity;
    }

    /**
     * Specifies the resource ID of Network Group which the configuration applies to.
     * 
     */
    @Import(name="networkGroupId", required=true)
    private Output<String> networkGroupId;

    /**
     * @return Specifies the resource ID of Network Group which the configuration applies to.
     * 
     */
    public Output<String> networkGroupId() {
        return this.networkGroupId;
    }

    /**
     * Indicates whether the hub gateway is used. Possible values are `true` and `false`.
     * 
     */
    @Import(name="useHubGateway")
    private @Nullable Output<Boolean> useHubGateway;

    /**
     * @return Indicates whether the hub gateway is used. Possible values are `true` and `false`.
     * 
     */
    public Optional<Output<Boolean>> useHubGateway() {
        return Optional.ofNullable(this.useHubGateway);
    }

    private NetworkManagerConnectivityConfigurationAppliesToGroupArgs() {}

    private NetworkManagerConnectivityConfigurationAppliesToGroupArgs(NetworkManagerConnectivityConfigurationAppliesToGroupArgs $) {
        this.globalMeshEnabled = $.globalMeshEnabled;
        this.groupConnectivity = $.groupConnectivity;
        this.networkGroupId = $.networkGroupId;
        this.useHubGateway = $.useHubGateway;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkManagerConnectivityConfigurationAppliesToGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkManagerConnectivityConfigurationAppliesToGroupArgs $;

        public Builder() {
            $ = new NetworkManagerConnectivityConfigurationAppliesToGroupArgs();
        }

        public Builder(NetworkManagerConnectivityConfigurationAppliesToGroupArgs defaults) {
            $ = new NetworkManagerConnectivityConfigurationAppliesToGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param globalMeshEnabled Indicates whether to global mesh is supported for this group. Possible values are `true` and `false`.
         * 
         * &gt; **NOTE:** A group can be global only if the `group_connectivity` is `DirectlyConnected`.
         * 
         * @return builder
         * 
         */
        public Builder globalMeshEnabled(@Nullable Output<Boolean> globalMeshEnabled) {
            $.globalMeshEnabled = globalMeshEnabled;
            return this;
        }

        /**
         * @param globalMeshEnabled Indicates whether to global mesh is supported for this group. Possible values are `true` and `false`.
         * 
         * &gt; **NOTE:** A group can be global only if the `group_connectivity` is `DirectlyConnected`.
         * 
         * @return builder
         * 
         */
        public Builder globalMeshEnabled(Boolean globalMeshEnabled) {
            return globalMeshEnabled(Output.of(globalMeshEnabled));
        }

        /**
         * @param groupConnectivity Specifies the group connectivity type. Possible values are `None` and `DirectlyConnected`.
         * 
         * @return builder
         * 
         */
        public Builder groupConnectivity(Output<String> groupConnectivity) {
            $.groupConnectivity = groupConnectivity;
            return this;
        }

        /**
         * @param groupConnectivity Specifies the group connectivity type. Possible values are `None` and `DirectlyConnected`.
         * 
         * @return builder
         * 
         */
        public Builder groupConnectivity(String groupConnectivity) {
            return groupConnectivity(Output.of(groupConnectivity));
        }

        /**
         * @param networkGroupId Specifies the resource ID of Network Group which the configuration applies to.
         * 
         * @return builder
         * 
         */
        public Builder networkGroupId(Output<String> networkGroupId) {
            $.networkGroupId = networkGroupId;
            return this;
        }

        /**
         * @param networkGroupId Specifies the resource ID of Network Group which the configuration applies to.
         * 
         * @return builder
         * 
         */
        public Builder networkGroupId(String networkGroupId) {
            return networkGroupId(Output.of(networkGroupId));
        }

        /**
         * @param useHubGateway Indicates whether the hub gateway is used. Possible values are `true` and `false`.
         * 
         * @return builder
         * 
         */
        public Builder useHubGateway(@Nullable Output<Boolean> useHubGateway) {
            $.useHubGateway = useHubGateway;
            return this;
        }

        /**
         * @param useHubGateway Indicates whether the hub gateway is used. Possible values are `true` and `false`.
         * 
         * @return builder
         * 
         */
        public Builder useHubGateway(Boolean useHubGateway) {
            return useHubGateway(Output.of(useHubGateway));
        }

        public NetworkManagerConnectivityConfigurationAppliesToGroupArgs build() {
            if ($.groupConnectivity == null) {
                throw new MissingRequiredPropertyException("NetworkManagerConnectivityConfigurationAppliesToGroupArgs", "groupConnectivity");
            }
            if ($.networkGroupId == null) {
                throw new MissingRequiredPropertyException("NetworkManagerConnectivityConfigurationAppliesToGroupArgs", "networkGroupId");
            }
            return $;
        }
    }

}
