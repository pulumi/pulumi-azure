// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network.inputs;

import com.pulumi.azure.network.inputs.FirewallPolicyDnsArgs;
import com.pulumi.azure.network.inputs.FirewallPolicyIdentityArgs;
import com.pulumi.azure.network.inputs.FirewallPolicyInsightsArgs;
import com.pulumi.azure.network.inputs.FirewallPolicyIntrusionDetectionArgs;
import com.pulumi.azure.network.inputs.FirewallPolicyThreatIntelligenceAllowlistArgs;
import com.pulumi.azure.network.inputs.FirewallPolicyTlsCertificateArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FirewallPolicyState extends com.pulumi.resources.ResourceArgs {

    public static final FirewallPolicyState Empty = new FirewallPolicyState();

    /**
     * The ID of the base Firewall Policy.
     * 
     */
    @Import(name="basePolicyId")
    private @Nullable Output<String> basePolicyId;

    /**
     * @return The ID of the base Firewall Policy.
     * 
     */
    public Optional<Output<String>> basePolicyId() {
        return Optional.ofNullable(this.basePolicyId);
    }

    /**
     * A list of reference to child Firewall Policies of this Firewall Policy.
     * 
     */
    @Import(name="childPolicies")
    private @Nullable Output<List<String>> childPolicies;

    /**
     * @return A list of reference to child Firewall Policies of this Firewall Policy.
     * 
     */
    public Optional<Output<List<String>>> childPolicies() {
        return Optional.ofNullable(this.childPolicies);
    }

    /**
     * A `dns` block as defined below.
     * 
     */
    @Import(name="dns")
    private @Nullable Output<FirewallPolicyDnsArgs> dns;

    /**
     * @return A `dns` block as defined below.
     * 
     */
    public Optional<Output<FirewallPolicyDnsArgs>> dns() {
        return Optional.ofNullable(this.dns);
    }

    /**
     * A list of references to Azure Firewalls that this Firewall Policy is associated with.
     * 
     */
    @Import(name="firewalls")
    private @Nullable Output<List<String>> firewalls;

    /**
     * @return A list of references to Azure Firewalls that this Firewall Policy is associated with.
     * 
     */
    public Optional<Output<List<String>>> firewalls() {
        return Optional.ofNullable(this.firewalls);
    }

    /**
     * An `identity` block as defined below.
     * 
     */
    @Import(name="identity")
    private @Nullable Output<FirewallPolicyIdentityArgs> identity;

    /**
     * @return An `identity` block as defined below.
     * 
     */
    public Optional<Output<FirewallPolicyIdentityArgs>> identity() {
        return Optional.ofNullable(this.identity);
    }

    /**
     * An `insights` block as defined below.
     * 
     */
    @Import(name="insights")
    private @Nullable Output<FirewallPolicyInsightsArgs> insights;

    /**
     * @return An `insights` block as defined below.
     * 
     */
    public Optional<Output<FirewallPolicyInsightsArgs>> insights() {
        return Optional.ofNullable(this.insights);
    }

    /**
     * A `intrusion_detection` block as defined below.
     * 
     */
    @Import(name="intrusionDetection")
    private @Nullable Output<FirewallPolicyIntrusionDetectionArgs> intrusionDetection;

    /**
     * @return A `intrusion_detection` block as defined below.
     * 
     */
    public Optional<Output<FirewallPolicyIntrusionDetectionArgs>> intrusionDetection() {
        return Optional.ofNullable(this.intrusionDetection);
    }

    /**
     * The Azure Region where the Firewall Policy should exist. Changing this forces a new Firewall Policy to be created.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The Azure Region where the Firewall Policy should exist. Changing this forces a new Firewall Policy to be created.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name which should be used for this Firewall Policy. Changing this forces a new Firewall Policy to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name which should be used for this Firewall Policy. Changing this forces a new Firewall Policy to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A list of private IP ranges to which traffic will not be SNAT.
     * 
     */
    @Import(name="privateIpRanges")
    private @Nullable Output<List<String>> privateIpRanges;

    /**
     * @return A list of private IP ranges to which traffic will not be SNAT.
     * 
     */
    public Optional<Output<List<String>>> privateIpRanges() {
        return Optional.ofNullable(this.privateIpRanges);
    }

    /**
     * The name of the Resource Group where the Firewall Policy should exist. Changing this forces a new Firewall Policy to be created.
     * 
     */
    @Import(name="resourceGroupName")
    private @Nullable Output<String> resourceGroupName;

    /**
     * @return The name of the Resource Group where the Firewall Policy should exist. Changing this forces a new Firewall Policy to be created.
     * 
     */
    public Optional<Output<String>> resourceGroupName() {
        return Optional.ofNullable(this.resourceGroupName);
    }

    /**
     * A list of references to Firewall Policy Rule Collection Groups that belongs to this Firewall Policy.
     * 
     */
    @Import(name="ruleCollectionGroups")
    private @Nullable Output<List<String>> ruleCollectionGroups;

    /**
     * @return A list of references to Firewall Policy Rule Collection Groups that belongs to this Firewall Policy.
     * 
     */
    public Optional<Output<List<String>>> ruleCollectionGroups() {
        return Optional.ofNullable(this.ruleCollectionGroups);
    }

    /**
     * The SKU Tier of the Firewall Policy. Possible values are `Standard`, `Premium`. Changing this forces a new Firewall Policy to be created.
     * 
     */
    @Import(name="sku")
    private @Nullable Output<String> sku;

    /**
     * @return The SKU Tier of the Firewall Policy. Possible values are `Standard`, `Premium`. Changing this forces a new Firewall Policy to be created.
     * 
     */
    public Optional<Output<String>> sku() {
        return Optional.ofNullable(this.sku);
    }

    /**
     * A mapping of tags which should be assigned to the Firewall Policy.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags which should be assigned to the Firewall Policy.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A `threat_intelligence_allowlist` block as defined below.
     * 
     */
    @Import(name="threatIntelligenceAllowlist")
    private @Nullable Output<FirewallPolicyThreatIntelligenceAllowlistArgs> threatIntelligenceAllowlist;

    /**
     * @return A `threat_intelligence_allowlist` block as defined below.
     * 
     */
    public Optional<Output<FirewallPolicyThreatIntelligenceAllowlistArgs>> threatIntelligenceAllowlist() {
        return Optional.ofNullable(this.threatIntelligenceAllowlist);
    }

    /**
     * The operation mode for Threat Intelligence. Possible values are `Alert`, `Deny` and `Off`. Defaults to `Alert`.
     * 
     */
    @Import(name="threatIntelligenceMode")
    private @Nullable Output<String> threatIntelligenceMode;

    /**
     * @return The operation mode for Threat Intelligence. Possible values are `Alert`, `Deny` and `Off`. Defaults to `Alert`.
     * 
     */
    public Optional<Output<String>> threatIntelligenceMode() {
        return Optional.ofNullable(this.threatIntelligenceMode);
    }

    /**
     * A `tls_certificate` block as defined below.
     * 
     */
    @Import(name="tlsCertificate")
    private @Nullable Output<FirewallPolicyTlsCertificateArgs> tlsCertificate;

    /**
     * @return A `tls_certificate` block as defined below.
     * 
     */
    public Optional<Output<FirewallPolicyTlsCertificateArgs>> tlsCertificate() {
        return Optional.ofNullable(this.tlsCertificate);
    }

    private FirewallPolicyState() {}

    private FirewallPolicyState(FirewallPolicyState $) {
        this.basePolicyId = $.basePolicyId;
        this.childPolicies = $.childPolicies;
        this.dns = $.dns;
        this.firewalls = $.firewalls;
        this.identity = $.identity;
        this.insights = $.insights;
        this.intrusionDetection = $.intrusionDetection;
        this.location = $.location;
        this.name = $.name;
        this.privateIpRanges = $.privateIpRanges;
        this.resourceGroupName = $.resourceGroupName;
        this.ruleCollectionGroups = $.ruleCollectionGroups;
        this.sku = $.sku;
        this.tags = $.tags;
        this.threatIntelligenceAllowlist = $.threatIntelligenceAllowlist;
        this.threatIntelligenceMode = $.threatIntelligenceMode;
        this.tlsCertificate = $.tlsCertificate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FirewallPolicyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FirewallPolicyState $;

        public Builder() {
            $ = new FirewallPolicyState();
        }

        public Builder(FirewallPolicyState defaults) {
            $ = new FirewallPolicyState(Objects.requireNonNull(defaults));
        }

        /**
         * @param basePolicyId The ID of the base Firewall Policy.
         * 
         * @return builder
         * 
         */
        public Builder basePolicyId(@Nullable Output<String> basePolicyId) {
            $.basePolicyId = basePolicyId;
            return this;
        }

        /**
         * @param basePolicyId The ID of the base Firewall Policy.
         * 
         * @return builder
         * 
         */
        public Builder basePolicyId(String basePolicyId) {
            return basePolicyId(Output.of(basePolicyId));
        }

        /**
         * @param childPolicies A list of reference to child Firewall Policies of this Firewall Policy.
         * 
         * @return builder
         * 
         */
        public Builder childPolicies(@Nullable Output<List<String>> childPolicies) {
            $.childPolicies = childPolicies;
            return this;
        }

        /**
         * @param childPolicies A list of reference to child Firewall Policies of this Firewall Policy.
         * 
         * @return builder
         * 
         */
        public Builder childPolicies(List<String> childPolicies) {
            return childPolicies(Output.of(childPolicies));
        }

        /**
         * @param childPolicies A list of reference to child Firewall Policies of this Firewall Policy.
         * 
         * @return builder
         * 
         */
        public Builder childPolicies(String... childPolicies) {
            return childPolicies(List.of(childPolicies));
        }

        /**
         * @param dns A `dns` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder dns(@Nullable Output<FirewallPolicyDnsArgs> dns) {
            $.dns = dns;
            return this;
        }

        /**
         * @param dns A `dns` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder dns(FirewallPolicyDnsArgs dns) {
            return dns(Output.of(dns));
        }

        /**
         * @param firewalls A list of references to Azure Firewalls that this Firewall Policy is associated with.
         * 
         * @return builder
         * 
         */
        public Builder firewalls(@Nullable Output<List<String>> firewalls) {
            $.firewalls = firewalls;
            return this;
        }

        /**
         * @param firewalls A list of references to Azure Firewalls that this Firewall Policy is associated with.
         * 
         * @return builder
         * 
         */
        public Builder firewalls(List<String> firewalls) {
            return firewalls(Output.of(firewalls));
        }

        /**
         * @param firewalls A list of references to Azure Firewalls that this Firewall Policy is associated with.
         * 
         * @return builder
         * 
         */
        public Builder firewalls(String... firewalls) {
            return firewalls(List.of(firewalls));
        }

        /**
         * @param identity An `identity` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder identity(@Nullable Output<FirewallPolicyIdentityArgs> identity) {
            $.identity = identity;
            return this;
        }

        /**
         * @param identity An `identity` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder identity(FirewallPolicyIdentityArgs identity) {
            return identity(Output.of(identity));
        }

        /**
         * @param insights An `insights` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder insights(@Nullable Output<FirewallPolicyInsightsArgs> insights) {
            $.insights = insights;
            return this;
        }

        /**
         * @param insights An `insights` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder insights(FirewallPolicyInsightsArgs insights) {
            return insights(Output.of(insights));
        }

        /**
         * @param intrusionDetection A `intrusion_detection` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder intrusionDetection(@Nullable Output<FirewallPolicyIntrusionDetectionArgs> intrusionDetection) {
            $.intrusionDetection = intrusionDetection;
            return this;
        }

        /**
         * @param intrusionDetection A `intrusion_detection` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder intrusionDetection(FirewallPolicyIntrusionDetectionArgs intrusionDetection) {
            return intrusionDetection(Output.of(intrusionDetection));
        }

        /**
         * @param location The Azure Region where the Firewall Policy should exist. Changing this forces a new Firewall Policy to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The Azure Region where the Firewall Policy should exist. Changing this forces a new Firewall Policy to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The name which should be used for this Firewall Policy. Changing this forces a new Firewall Policy to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this Firewall Policy. Changing this forces a new Firewall Policy to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param privateIpRanges A list of private IP ranges to which traffic will not be SNAT.
         * 
         * @return builder
         * 
         */
        public Builder privateIpRanges(@Nullable Output<List<String>> privateIpRanges) {
            $.privateIpRanges = privateIpRanges;
            return this;
        }

        /**
         * @param privateIpRanges A list of private IP ranges to which traffic will not be SNAT.
         * 
         * @return builder
         * 
         */
        public Builder privateIpRanges(List<String> privateIpRanges) {
            return privateIpRanges(Output.of(privateIpRanges));
        }

        /**
         * @param privateIpRanges A list of private IP ranges to which traffic will not be SNAT.
         * 
         * @return builder
         * 
         */
        public Builder privateIpRanges(String... privateIpRanges) {
            return privateIpRanges(List.of(privateIpRanges));
        }

        /**
         * @param resourceGroupName The name of the Resource Group where the Firewall Policy should exist. Changing this forces a new Firewall Policy to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(@Nullable Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the Resource Group where the Firewall Policy should exist. Changing this forces a new Firewall Policy to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param ruleCollectionGroups A list of references to Firewall Policy Rule Collection Groups that belongs to this Firewall Policy.
         * 
         * @return builder
         * 
         */
        public Builder ruleCollectionGroups(@Nullable Output<List<String>> ruleCollectionGroups) {
            $.ruleCollectionGroups = ruleCollectionGroups;
            return this;
        }

        /**
         * @param ruleCollectionGroups A list of references to Firewall Policy Rule Collection Groups that belongs to this Firewall Policy.
         * 
         * @return builder
         * 
         */
        public Builder ruleCollectionGroups(List<String> ruleCollectionGroups) {
            return ruleCollectionGroups(Output.of(ruleCollectionGroups));
        }

        /**
         * @param ruleCollectionGroups A list of references to Firewall Policy Rule Collection Groups that belongs to this Firewall Policy.
         * 
         * @return builder
         * 
         */
        public Builder ruleCollectionGroups(String... ruleCollectionGroups) {
            return ruleCollectionGroups(List.of(ruleCollectionGroups));
        }

        /**
         * @param sku The SKU Tier of the Firewall Policy. Possible values are `Standard`, `Premium`. Changing this forces a new Firewall Policy to be created.
         * 
         * @return builder
         * 
         */
        public Builder sku(@Nullable Output<String> sku) {
            $.sku = sku;
            return this;
        }

        /**
         * @param sku The SKU Tier of the Firewall Policy. Possible values are `Standard`, `Premium`. Changing this forces a new Firewall Policy to be created.
         * 
         * @return builder
         * 
         */
        public Builder sku(String sku) {
            return sku(Output.of(sku));
        }

        /**
         * @param tags A mapping of tags which should be assigned to the Firewall Policy.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags which should be assigned to the Firewall Policy.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param threatIntelligenceAllowlist A `threat_intelligence_allowlist` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder threatIntelligenceAllowlist(@Nullable Output<FirewallPolicyThreatIntelligenceAllowlistArgs> threatIntelligenceAllowlist) {
            $.threatIntelligenceAllowlist = threatIntelligenceAllowlist;
            return this;
        }

        /**
         * @param threatIntelligenceAllowlist A `threat_intelligence_allowlist` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder threatIntelligenceAllowlist(FirewallPolicyThreatIntelligenceAllowlistArgs threatIntelligenceAllowlist) {
            return threatIntelligenceAllowlist(Output.of(threatIntelligenceAllowlist));
        }

        /**
         * @param threatIntelligenceMode The operation mode for Threat Intelligence. Possible values are `Alert`, `Deny` and `Off`. Defaults to `Alert`.
         * 
         * @return builder
         * 
         */
        public Builder threatIntelligenceMode(@Nullable Output<String> threatIntelligenceMode) {
            $.threatIntelligenceMode = threatIntelligenceMode;
            return this;
        }

        /**
         * @param threatIntelligenceMode The operation mode for Threat Intelligence. Possible values are `Alert`, `Deny` and `Off`. Defaults to `Alert`.
         * 
         * @return builder
         * 
         */
        public Builder threatIntelligenceMode(String threatIntelligenceMode) {
            return threatIntelligenceMode(Output.of(threatIntelligenceMode));
        }

        /**
         * @param tlsCertificate A `tls_certificate` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder tlsCertificate(@Nullable Output<FirewallPolicyTlsCertificateArgs> tlsCertificate) {
            $.tlsCertificate = tlsCertificate;
            return this;
        }

        /**
         * @param tlsCertificate A `tls_certificate` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder tlsCertificate(FirewallPolicyTlsCertificateArgs tlsCertificate) {
            return tlsCertificate(Output.of(tlsCertificate));
        }

        public FirewallPolicyState build() {
            return $;
        }
    }

}
