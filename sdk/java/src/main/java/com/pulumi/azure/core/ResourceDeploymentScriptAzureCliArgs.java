// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.core;

import com.pulumi.azure.core.inputs.ResourceDeploymentScriptAzureCliContainerArgs;
import com.pulumi.azure.core.inputs.ResourceDeploymentScriptAzureCliEnvironmentVariableArgs;
import com.pulumi.azure.core.inputs.ResourceDeploymentScriptAzureCliIdentityArgs;
import com.pulumi.azure.core.inputs.ResourceDeploymentScriptAzureCliStorageAccountArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ResourceDeploymentScriptAzureCliArgs extends com.pulumi.resources.ResourceArgs {

    public static final ResourceDeploymentScriptAzureCliArgs Empty = new ResourceDeploymentScriptAzureCliArgs();

    /**
     * Specifies the cleanup preference when the script execution gets in a terminal state. Possible values are `Always`, `OnExpiration`, `OnSuccess`. Defaults to `Always`. Changing this forces a new Resource Deployment Script to be created.
     * 
     */
    @Import(name="cleanupPreference")
    private @Nullable Output<String> cleanupPreference;

    /**
     * @return Specifies the cleanup preference when the script execution gets in a terminal state. Possible values are `Always`, `OnExpiration`, `OnSuccess`. Defaults to `Always`. Changing this forces a new Resource Deployment Script to be created.
     * 
     */
    public Optional<Output<String>> cleanupPreference() {
        return Optional.ofNullable(this.cleanupPreference);
    }

    /**
     * Command line arguments to pass to the script. Changing this forces a new Resource Deployment Script to be created.
     * 
     */
    @Import(name="commandLine")
    private @Nullable Output<String> commandLine;

    /**
     * @return Command line arguments to pass to the script. Changing this forces a new Resource Deployment Script to be created.
     * 
     */
    public Optional<Output<String>> commandLine() {
        return Optional.ofNullable(this.commandLine);
    }

    /**
     * A `container` block as defined below. Changing this forces a new Resource Deployment Script to be created.
     * 
     */
    @Import(name="container")
    private @Nullable Output<ResourceDeploymentScriptAzureCliContainerArgs> container;

    /**
     * @return A `container` block as defined below. Changing this forces a new Resource Deployment Script to be created.
     * 
     */
    public Optional<Output<ResourceDeploymentScriptAzureCliContainerArgs>> container() {
        return Optional.ofNullable(this.container);
    }

    /**
     * An `environment_variable` block as defined below. Changing this forces a new Resource Deployment Script to be created.
     * 
     */
    @Import(name="environmentVariables")
    private @Nullable Output<List<ResourceDeploymentScriptAzureCliEnvironmentVariableArgs>> environmentVariables;

    /**
     * @return An `environment_variable` block as defined below. Changing this forces a new Resource Deployment Script to be created.
     * 
     */
    public Optional<Output<List<ResourceDeploymentScriptAzureCliEnvironmentVariableArgs>>> environmentVariables() {
        return Optional.ofNullable(this.environmentVariables);
    }

    /**
     * Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID. Changing this forces a new Resource Deployment Script to be created.
     * 
     */
    @Import(name="forceUpdateTag")
    private @Nullable Output<String> forceUpdateTag;

    /**
     * @return Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID. Changing this forces a new Resource Deployment Script to be created.
     * 
     */
    public Optional<Output<String>> forceUpdateTag() {
        return Optional.ofNullable(this.forceUpdateTag);
    }

    /**
     * An `identity` block as defined below. Changing this forces a new Resource Deployment Script to be created.
     * 
     */
    @Import(name="identity")
    private @Nullable Output<ResourceDeploymentScriptAzureCliIdentityArgs> identity;

    /**
     * @return An `identity` block as defined below. Changing this forces a new Resource Deployment Script to be created.
     * 
     */
    public Optional<Output<ResourceDeploymentScriptAzureCliIdentityArgs>> identity() {
        return Optional.ofNullable(this.identity);
    }

    /**
     * Specifies the Azure Region where the Resource Deployment Script should exist. Changing this forces a new Resource Deployment Script to be created.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Specifies the Azure Region where the Resource Deployment Script should exist. Changing this forces a new Resource Deployment Script to be created.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Specifies the name which should be used for this Resource Deployment Script. The name length must be from 1 to 260 characters. The name can only contain alphanumeric, underscore, parentheses, hyphen and period, and it cannot end with a period. Changing this forces a new Resource Deployment Script to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the name which should be used for this Resource Deployment Script. The name length must be from 1 to 260 characters. The name can only contain alphanumeric, underscore, parentheses, hyphen and period, and it cannot end with a period. Changing this forces a new Resource Deployment Script to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Uri for the script. This is the entry point for the external script. Changing this forces a new Resource Deployment Script to be created.
     * 
     */
    @Import(name="primaryScriptUri")
    private @Nullable Output<String> primaryScriptUri;

    /**
     * @return Uri for the script. This is the entry point for the external script. Changing this forces a new Resource Deployment Script to be created.
     * 
     */
    public Optional<Output<String>> primaryScriptUri() {
        return Optional.ofNullable(this.primaryScriptUri);
    }

    /**
     * Specifies the name of the Resource Group where the Resource Deployment Script should exist. Changing this forces a new Resource Deployment Script to be created.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return Specifies the name of the Resource Group where the Resource Deployment Script should exist. Changing this forces a new Resource Deployment Script to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. The time duration should be between `1` hour and `26` hours (inclusive) and should be specified in ISO 8601 format. Changing this forces a new Resource Deployment Script to be created.
     * 
     */
    @Import(name="retentionInterval", required=true)
    private Output<String> retentionInterval;

    /**
     * @return Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. The time duration should be between `1` hour and `26` hours (inclusive) and should be specified in ISO 8601 format. Changing this forces a new Resource Deployment Script to be created.
     * 
     */
    public Output<String> retentionInterval() {
        return this.retentionInterval;
    }

    /**
     * Script body. Changing this forces a new Resource Deployment Script to be created.
     * 
     */
    @Import(name="scriptContent")
    private @Nullable Output<String> scriptContent;

    /**
     * @return Script body. Changing this forces a new Resource Deployment Script to be created.
     * 
     */
    public Optional<Output<String>> scriptContent() {
        return Optional.ofNullable(this.scriptContent);
    }

    /**
     * A `storage_account` block as defined below. Changing this forces a new Resource Deployment Script to be created.
     * 
     */
    @Import(name="storageAccount")
    private @Nullable Output<ResourceDeploymentScriptAzureCliStorageAccountArgs> storageAccount;

    /**
     * @return A `storage_account` block as defined below. Changing this forces a new Resource Deployment Script to be created.
     * 
     */
    public Optional<Output<ResourceDeploymentScriptAzureCliStorageAccountArgs>> storageAccount() {
        return Optional.ofNullable(this.storageAccount);
    }

    /**
     * Supporting files for the external script. Changing this forces a new Resource Deployment Script to be created.
     * 
     */
    @Import(name="supportingScriptUris")
    private @Nullable Output<List<String>> supportingScriptUris;

    /**
     * @return Supporting files for the external script. Changing this forces a new Resource Deployment Script to be created.
     * 
     */
    public Optional<Output<List<String>>> supportingScriptUris() {
        return Optional.ofNullable(this.supportingScriptUris);
    }

    /**
     * A mapping of tags which should be assigned to the Resource Deployment Script.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags which should be assigned to the Resource Deployment Script.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Maximum allowed script execution time specified in ISO 8601 format. Needs to be greater than 0 and smaller than 1 day. Defaults to `P1D`. Changing this forces a new Resource Deployment Script to be created.
     * 
     */
    @Import(name="timeout")
    private @Nullable Output<String> timeout;

    /**
     * @return Maximum allowed script execution time specified in ISO 8601 format. Needs to be greater than 0 and smaller than 1 day. Defaults to `P1D`. Changing this forces a new Resource Deployment Script to be created.
     * 
     */
    public Optional<Output<String>> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    /**
     * Azure CLI module version to be used. The supported versions are `2.0.77`, `2.0.78`, `2.0.79`, `2.0.80`, `2.0.81`, `2.1.0`, `2.10.0`, `2.10.1`, `2.11.0`, `2.11.1`, `2.12.0`, `2.12.1`, `2.13.0`, `2.14.0`, `2.14.1`, `2.14.2`, `2.15.0`, `2.15.1`, `2.16.0`, `2.17.0`, `2.17.1`, `2.18.0`, `2.19.0`, `2.19.1`, `2.2.0`, `2.20.0`, `2.21.0`, `2.22.0`, `2.22.1`, `2.23.0`, `2.24.0`, `2.24.1`, `2.24.2`, `2.25.0`, `2.26.0`, `2.26.1`, `2.27.0`, `2.27.1`, `2.27.2`, `2.28.0`, `2.29.0`, `2.29.1`, `2.29.2`, `2.3.0`, `2.3.1`, `2.30.0`, `2.31.0`, `2.32.0`, `2.33.0`, `2.33.1`, `2.34.0`, `2.34.1`, `2.35.0`, `2.36.0`, `2.37.0`, `2.38.0`, `2.39.0`, `2.4.0`, `2.40.0`, `2.41.0`, `2.5.0`, `2.5.1`, `2.6.0`, `2.7.0`, `2.8.0`, `2.9.0`, `2.9.1`. Changing this forces a new Resource Deployment Script to be created.
     * 
     */
    @Import(name="version", required=true)
    private Output<String> version;

    /**
     * @return Azure CLI module version to be used. The supported versions are `2.0.77`, `2.0.78`, `2.0.79`, `2.0.80`, `2.0.81`, `2.1.0`, `2.10.0`, `2.10.1`, `2.11.0`, `2.11.1`, `2.12.0`, `2.12.1`, `2.13.0`, `2.14.0`, `2.14.1`, `2.14.2`, `2.15.0`, `2.15.1`, `2.16.0`, `2.17.0`, `2.17.1`, `2.18.0`, `2.19.0`, `2.19.1`, `2.2.0`, `2.20.0`, `2.21.0`, `2.22.0`, `2.22.1`, `2.23.0`, `2.24.0`, `2.24.1`, `2.24.2`, `2.25.0`, `2.26.0`, `2.26.1`, `2.27.0`, `2.27.1`, `2.27.2`, `2.28.0`, `2.29.0`, `2.29.1`, `2.29.2`, `2.3.0`, `2.3.1`, `2.30.0`, `2.31.0`, `2.32.0`, `2.33.0`, `2.33.1`, `2.34.0`, `2.34.1`, `2.35.0`, `2.36.0`, `2.37.0`, `2.38.0`, `2.39.0`, `2.4.0`, `2.40.0`, `2.41.0`, `2.5.0`, `2.5.1`, `2.6.0`, `2.7.0`, `2.8.0`, `2.9.0`, `2.9.1`. Changing this forces a new Resource Deployment Script to be created.
     * 
     */
    public Output<String> version() {
        return this.version;
    }

    private ResourceDeploymentScriptAzureCliArgs() {}

    private ResourceDeploymentScriptAzureCliArgs(ResourceDeploymentScriptAzureCliArgs $) {
        this.cleanupPreference = $.cleanupPreference;
        this.commandLine = $.commandLine;
        this.container = $.container;
        this.environmentVariables = $.environmentVariables;
        this.forceUpdateTag = $.forceUpdateTag;
        this.identity = $.identity;
        this.location = $.location;
        this.name = $.name;
        this.primaryScriptUri = $.primaryScriptUri;
        this.resourceGroupName = $.resourceGroupName;
        this.retentionInterval = $.retentionInterval;
        this.scriptContent = $.scriptContent;
        this.storageAccount = $.storageAccount;
        this.supportingScriptUris = $.supportingScriptUris;
        this.tags = $.tags;
        this.timeout = $.timeout;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ResourceDeploymentScriptAzureCliArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ResourceDeploymentScriptAzureCliArgs $;

        public Builder() {
            $ = new ResourceDeploymentScriptAzureCliArgs();
        }

        public Builder(ResourceDeploymentScriptAzureCliArgs defaults) {
            $ = new ResourceDeploymentScriptAzureCliArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cleanupPreference Specifies the cleanup preference when the script execution gets in a terminal state. Possible values are `Always`, `OnExpiration`, `OnSuccess`. Defaults to `Always`. Changing this forces a new Resource Deployment Script to be created.
         * 
         * @return builder
         * 
         */
        public Builder cleanupPreference(@Nullable Output<String> cleanupPreference) {
            $.cleanupPreference = cleanupPreference;
            return this;
        }

        /**
         * @param cleanupPreference Specifies the cleanup preference when the script execution gets in a terminal state. Possible values are `Always`, `OnExpiration`, `OnSuccess`. Defaults to `Always`. Changing this forces a new Resource Deployment Script to be created.
         * 
         * @return builder
         * 
         */
        public Builder cleanupPreference(String cleanupPreference) {
            return cleanupPreference(Output.of(cleanupPreference));
        }

        /**
         * @param commandLine Command line arguments to pass to the script. Changing this forces a new Resource Deployment Script to be created.
         * 
         * @return builder
         * 
         */
        public Builder commandLine(@Nullable Output<String> commandLine) {
            $.commandLine = commandLine;
            return this;
        }

        /**
         * @param commandLine Command line arguments to pass to the script. Changing this forces a new Resource Deployment Script to be created.
         * 
         * @return builder
         * 
         */
        public Builder commandLine(String commandLine) {
            return commandLine(Output.of(commandLine));
        }

        /**
         * @param container A `container` block as defined below. Changing this forces a new Resource Deployment Script to be created.
         * 
         * @return builder
         * 
         */
        public Builder container(@Nullable Output<ResourceDeploymentScriptAzureCliContainerArgs> container) {
            $.container = container;
            return this;
        }

        /**
         * @param container A `container` block as defined below. Changing this forces a new Resource Deployment Script to be created.
         * 
         * @return builder
         * 
         */
        public Builder container(ResourceDeploymentScriptAzureCliContainerArgs container) {
            return container(Output.of(container));
        }

        /**
         * @param environmentVariables An `environment_variable` block as defined below. Changing this forces a new Resource Deployment Script to be created.
         * 
         * @return builder
         * 
         */
        public Builder environmentVariables(@Nullable Output<List<ResourceDeploymentScriptAzureCliEnvironmentVariableArgs>> environmentVariables) {
            $.environmentVariables = environmentVariables;
            return this;
        }

        /**
         * @param environmentVariables An `environment_variable` block as defined below. Changing this forces a new Resource Deployment Script to be created.
         * 
         * @return builder
         * 
         */
        public Builder environmentVariables(List<ResourceDeploymentScriptAzureCliEnvironmentVariableArgs> environmentVariables) {
            return environmentVariables(Output.of(environmentVariables));
        }

        /**
         * @param environmentVariables An `environment_variable` block as defined below. Changing this forces a new Resource Deployment Script to be created.
         * 
         * @return builder
         * 
         */
        public Builder environmentVariables(ResourceDeploymentScriptAzureCliEnvironmentVariableArgs... environmentVariables) {
            return environmentVariables(List.of(environmentVariables));
        }

        /**
         * @param forceUpdateTag Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID. Changing this forces a new Resource Deployment Script to be created.
         * 
         * @return builder
         * 
         */
        public Builder forceUpdateTag(@Nullable Output<String> forceUpdateTag) {
            $.forceUpdateTag = forceUpdateTag;
            return this;
        }

        /**
         * @param forceUpdateTag Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID. Changing this forces a new Resource Deployment Script to be created.
         * 
         * @return builder
         * 
         */
        public Builder forceUpdateTag(String forceUpdateTag) {
            return forceUpdateTag(Output.of(forceUpdateTag));
        }

        /**
         * @param identity An `identity` block as defined below. Changing this forces a new Resource Deployment Script to be created.
         * 
         * @return builder
         * 
         */
        public Builder identity(@Nullable Output<ResourceDeploymentScriptAzureCliIdentityArgs> identity) {
            $.identity = identity;
            return this;
        }

        /**
         * @param identity An `identity` block as defined below. Changing this forces a new Resource Deployment Script to be created.
         * 
         * @return builder
         * 
         */
        public Builder identity(ResourceDeploymentScriptAzureCliIdentityArgs identity) {
            return identity(Output.of(identity));
        }

        /**
         * @param location Specifies the Azure Region where the Resource Deployment Script should exist. Changing this forces a new Resource Deployment Script to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Specifies the Azure Region where the Resource Deployment Script should exist. Changing this forces a new Resource Deployment Script to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name Specifies the name which should be used for this Resource Deployment Script. The name length must be from 1 to 260 characters. The name can only contain alphanumeric, underscore, parentheses, hyphen and period, and it cannot end with a period. Changing this forces a new Resource Deployment Script to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name which should be used for this Resource Deployment Script. The name length must be from 1 to 260 characters. The name can only contain alphanumeric, underscore, parentheses, hyphen and period, and it cannot end with a period. Changing this forces a new Resource Deployment Script to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param primaryScriptUri Uri for the script. This is the entry point for the external script. Changing this forces a new Resource Deployment Script to be created.
         * 
         * @return builder
         * 
         */
        public Builder primaryScriptUri(@Nullable Output<String> primaryScriptUri) {
            $.primaryScriptUri = primaryScriptUri;
            return this;
        }

        /**
         * @param primaryScriptUri Uri for the script. This is the entry point for the external script. Changing this forces a new Resource Deployment Script to be created.
         * 
         * @return builder
         * 
         */
        public Builder primaryScriptUri(String primaryScriptUri) {
            return primaryScriptUri(Output.of(primaryScriptUri));
        }

        /**
         * @param resourceGroupName Specifies the name of the Resource Group where the Resource Deployment Script should exist. Changing this forces a new Resource Deployment Script to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName Specifies the name of the Resource Group where the Resource Deployment Script should exist. Changing this forces a new Resource Deployment Script to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param retentionInterval Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. The time duration should be between `1` hour and `26` hours (inclusive) and should be specified in ISO 8601 format. Changing this forces a new Resource Deployment Script to be created.
         * 
         * @return builder
         * 
         */
        public Builder retentionInterval(Output<String> retentionInterval) {
            $.retentionInterval = retentionInterval;
            return this;
        }

        /**
         * @param retentionInterval Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. The time duration should be between `1` hour and `26` hours (inclusive) and should be specified in ISO 8601 format. Changing this forces a new Resource Deployment Script to be created.
         * 
         * @return builder
         * 
         */
        public Builder retentionInterval(String retentionInterval) {
            return retentionInterval(Output.of(retentionInterval));
        }

        /**
         * @param scriptContent Script body. Changing this forces a new Resource Deployment Script to be created.
         * 
         * @return builder
         * 
         */
        public Builder scriptContent(@Nullable Output<String> scriptContent) {
            $.scriptContent = scriptContent;
            return this;
        }

        /**
         * @param scriptContent Script body. Changing this forces a new Resource Deployment Script to be created.
         * 
         * @return builder
         * 
         */
        public Builder scriptContent(String scriptContent) {
            return scriptContent(Output.of(scriptContent));
        }

        /**
         * @param storageAccount A `storage_account` block as defined below. Changing this forces a new Resource Deployment Script to be created.
         * 
         * @return builder
         * 
         */
        public Builder storageAccount(@Nullable Output<ResourceDeploymentScriptAzureCliStorageAccountArgs> storageAccount) {
            $.storageAccount = storageAccount;
            return this;
        }

        /**
         * @param storageAccount A `storage_account` block as defined below. Changing this forces a new Resource Deployment Script to be created.
         * 
         * @return builder
         * 
         */
        public Builder storageAccount(ResourceDeploymentScriptAzureCliStorageAccountArgs storageAccount) {
            return storageAccount(Output.of(storageAccount));
        }

        /**
         * @param supportingScriptUris Supporting files for the external script. Changing this forces a new Resource Deployment Script to be created.
         * 
         * @return builder
         * 
         */
        public Builder supportingScriptUris(@Nullable Output<List<String>> supportingScriptUris) {
            $.supportingScriptUris = supportingScriptUris;
            return this;
        }

        /**
         * @param supportingScriptUris Supporting files for the external script. Changing this forces a new Resource Deployment Script to be created.
         * 
         * @return builder
         * 
         */
        public Builder supportingScriptUris(List<String> supportingScriptUris) {
            return supportingScriptUris(Output.of(supportingScriptUris));
        }

        /**
         * @param supportingScriptUris Supporting files for the external script. Changing this forces a new Resource Deployment Script to be created.
         * 
         * @return builder
         * 
         */
        public Builder supportingScriptUris(String... supportingScriptUris) {
            return supportingScriptUris(List.of(supportingScriptUris));
        }

        /**
         * @param tags A mapping of tags which should be assigned to the Resource Deployment Script.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags which should be assigned to the Resource Deployment Script.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param timeout Maximum allowed script execution time specified in ISO 8601 format. Needs to be greater than 0 and smaller than 1 day. Defaults to `P1D`. Changing this forces a new Resource Deployment Script to be created.
         * 
         * @return builder
         * 
         */
        public Builder timeout(@Nullable Output<String> timeout) {
            $.timeout = timeout;
            return this;
        }

        /**
         * @param timeout Maximum allowed script execution time specified in ISO 8601 format. Needs to be greater than 0 and smaller than 1 day. Defaults to `P1D`. Changing this forces a new Resource Deployment Script to be created.
         * 
         * @return builder
         * 
         */
        public Builder timeout(String timeout) {
            return timeout(Output.of(timeout));
        }

        /**
         * @param version Azure CLI module version to be used. The supported versions are `2.0.77`, `2.0.78`, `2.0.79`, `2.0.80`, `2.0.81`, `2.1.0`, `2.10.0`, `2.10.1`, `2.11.0`, `2.11.1`, `2.12.0`, `2.12.1`, `2.13.0`, `2.14.0`, `2.14.1`, `2.14.2`, `2.15.0`, `2.15.1`, `2.16.0`, `2.17.0`, `2.17.1`, `2.18.0`, `2.19.0`, `2.19.1`, `2.2.0`, `2.20.0`, `2.21.0`, `2.22.0`, `2.22.1`, `2.23.0`, `2.24.0`, `2.24.1`, `2.24.2`, `2.25.0`, `2.26.0`, `2.26.1`, `2.27.0`, `2.27.1`, `2.27.2`, `2.28.0`, `2.29.0`, `2.29.1`, `2.29.2`, `2.3.0`, `2.3.1`, `2.30.0`, `2.31.0`, `2.32.0`, `2.33.0`, `2.33.1`, `2.34.0`, `2.34.1`, `2.35.0`, `2.36.0`, `2.37.0`, `2.38.0`, `2.39.0`, `2.4.0`, `2.40.0`, `2.41.0`, `2.5.0`, `2.5.1`, `2.6.0`, `2.7.0`, `2.8.0`, `2.9.0`, `2.9.1`. Changing this forces a new Resource Deployment Script to be created.
         * 
         * @return builder
         * 
         */
        public Builder version(Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version Azure CLI module version to be used. The supported versions are `2.0.77`, `2.0.78`, `2.0.79`, `2.0.80`, `2.0.81`, `2.1.0`, `2.10.0`, `2.10.1`, `2.11.0`, `2.11.1`, `2.12.0`, `2.12.1`, `2.13.0`, `2.14.0`, `2.14.1`, `2.14.2`, `2.15.0`, `2.15.1`, `2.16.0`, `2.17.0`, `2.17.1`, `2.18.0`, `2.19.0`, `2.19.1`, `2.2.0`, `2.20.0`, `2.21.0`, `2.22.0`, `2.22.1`, `2.23.0`, `2.24.0`, `2.24.1`, `2.24.2`, `2.25.0`, `2.26.0`, `2.26.1`, `2.27.0`, `2.27.1`, `2.27.2`, `2.28.0`, `2.29.0`, `2.29.1`, `2.29.2`, `2.3.0`, `2.3.1`, `2.30.0`, `2.31.0`, `2.32.0`, `2.33.0`, `2.33.1`, `2.34.0`, `2.34.1`, `2.35.0`, `2.36.0`, `2.37.0`, `2.38.0`, `2.39.0`, `2.4.0`, `2.40.0`, `2.41.0`, `2.5.0`, `2.5.1`, `2.6.0`, `2.7.0`, `2.8.0`, `2.9.0`, `2.9.1`. Changing this forces a new Resource Deployment Script to be created.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public ResourceDeploymentScriptAzureCliArgs build() {
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.retentionInterval = Objects.requireNonNull($.retentionInterval, "expected parameter 'retentionInterval' to be non-null");
            $.version = Objects.requireNonNull($.version, "expected parameter 'version' to be non-null");
            return $;
        }
    }

}
