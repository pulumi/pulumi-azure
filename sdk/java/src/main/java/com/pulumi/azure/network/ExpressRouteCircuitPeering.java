// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.network.ExpressRouteCircuitPeeringArgs;
import com.pulumi.azure.network.inputs.ExpressRouteCircuitPeeringState;
import com.pulumi.azure.network.outputs.ExpressRouteCircuitPeeringIpv6;
import com.pulumi.azure.network.outputs.ExpressRouteCircuitPeeringMicrosoftPeeringConfig;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages an ExpressRoute Circuit Peering.
 * 
 * ## Example Usage
 * ### Creating A Microsoft Peering)
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.network.ExpressRouteCircuit;
 * import com.pulumi.azure.network.ExpressRouteCircuitArgs;
 * import com.pulumi.azure.network.inputs.ExpressRouteCircuitSkuArgs;
 * import com.pulumi.azure.network.ExpressRouteCircuitPeering;
 * import com.pulumi.azure.network.ExpressRouteCircuitPeeringArgs;
 * import com.pulumi.azure.network.inputs.ExpressRouteCircuitPeeringMicrosoftPeeringConfigArgs;
 * import com.pulumi.azure.network.inputs.ExpressRouteCircuitPeeringIpv6Args;
 * import com.pulumi.azure.network.inputs.ExpressRouteCircuitPeeringIpv6MicrosoftPeeringArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampleResourceGroup = new ResourceGroup(&#34;exampleResourceGroup&#34;, ResourceGroupArgs.builder()        
 *             .location(&#34;West Europe&#34;)
 *             .build());
 * 
 *         var exampleExpressRouteCircuit = new ExpressRouteCircuit(&#34;exampleExpressRouteCircuit&#34;, ExpressRouteCircuitArgs.builder()        
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .location(exampleResourceGroup.location())
 *             .serviceProviderName(&#34;Equinix&#34;)
 *             .peeringLocation(&#34;Silicon Valley&#34;)
 *             .bandwidthInMbps(50)
 *             .sku(ExpressRouteCircuitSkuArgs.builder()
 *                 .tier(&#34;Standard&#34;)
 *                 .family(&#34;MeteredData&#34;)
 *                 .build())
 *             .allowClassicOperations(false)
 *             .tags(Map.of(&#34;environment&#34;, &#34;Production&#34;))
 *             .build());
 * 
 *         var exampleExpressRouteCircuitPeering = new ExpressRouteCircuitPeering(&#34;exampleExpressRouteCircuitPeering&#34;, ExpressRouteCircuitPeeringArgs.builder()        
 *             .peeringType(&#34;MicrosoftPeering&#34;)
 *             .expressRouteCircuitName(exampleExpressRouteCircuit.name())
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .peerAsn(100)
 *             .primaryPeerAddressPrefix(&#34;123.0.0.0/30&#34;)
 *             .secondaryPeerAddressPrefix(&#34;123.0.0.4/30&#34;)
 *             .ipv4Enabled(true)
 *             .vlanId(300)
 *             .microsoftPeeringConfig(ExpressRouteCircuitPeeringMicrosoftPeeringConfigArgs.builder()
 *                 .advertisedPublicPrefixes(&#34;123.1.0.0/24&#34;)
 *                 .build())
 *             .ipv6(ExpressRouteCircuitPeeringIpv6Args.builder()
 *                 .primaryPeerAddressPrefix(&#34;2002:db01::/126&#34;)
 *                 .secondaryPeerAddressPrefix(&#34;2003:db01::/126&#34;)
 *                 .enabled(true)
 *                 .microsoftPeering(ExpressRouteCircuitPeeringIpv6MicrosoftPeeringArgs.builder()
 *                     .advertisedPublicPrefixes(&#34;2002:db01::/126&#34;)
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Creating Azure Private Peering)
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.network.ExpressRouteCircuit;
 * import com.pulumi.azure.network.ExpressRouteCircuitArgs;
 * import com.pulumi.azure.network.inputs.ExpressRouteCircuitSkuArgs;
 * import com.pulumi.azure.network.ExpressRouteCircuitPeering;
 * import com.pulumi.azure.network.ExpressRouteCircuitPeeringArgs;
 * import com.pulumi.azure.network.inputs.ExpressRouteCircuitPeeringIpv6Args;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampleResourceGroup = new ResourceGroup(&#34;exampleResourceGroup&#34;, ResourceGroupArgs.builder()        
 *             .location(&#34;West Europe&#34;)
 *             .build());
 * 
 *         var exampleExpressRouteCircuit = new ExpressRouteCircuit(&#34;exampleExpressRouteCircuit&#34;, ExpressRouteCircuitArgs.builder()        
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .location(exampleResourceGroup.location())
 *             .serviceProviderName(&#34;Equinix&#34;)
 *             .peeringLocation(&#34;Silicon Valley&#34;)
 *             .bandwidthInMbps(50)
 *             .sku(ExpressRouteCircuitSkuArgs.builder()
 *                 .tier(&#34;Standard&#34;)
 *                 .family(&#34;MeteredData&#34;)
 *                 .build())
 *             .allowClassicOperations(false)
 *             .tags(Map.of(&#34;environment&#34;, &#34;Production&#34;))
 *             .build());
 * 
 *         var exampleExpressRouteCircuitPeering = new ExpressRouteCircuitPeering(&#34;exampleExpressRouteCircuitPeering&#34;, ExpressRouteCircuitPeeringArgs.builder()        
 *             .peeringType(&#34;AzurePrivatePeering&#34;)
 *             .expressRouteCircuitName(exampleExpressRouteCircuit.name())
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .peerAsn(100)
 *             .primaryPeerAddressPrefix(&#34;123.0.0.0/30&#34;)
 *             .secondaryPeerAddressPrefix(&#34;123.0.0.4/30&#34;)
 *             .ipv4Enabled(true)
 *             .vlanId(300)
 *             .ipv6(ExpressRouteCircuitPeeringIpv6Args.builder()
 *                 .primaryPeerAddressPrefix(&#34;2002:db01::/126&#34;)
 *                 .secondaryPeerAddressPrefix(&#34;2003:db01::/126&#34;)
 *                 .enabled(true)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * ExpressRoute Circuit Peerings can be imported using the `resource id`, e.g.
 * 
 * ```sh
 *  $ pulumi import azure:network/expressRouteCircuitPeering:ExpressRouteCircuitPeering peering1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/expressRouteCircuits/myExpressRoute/peerings/peering1
 * ```
 * 
 */
@ResourceType(type="azure:network/expressRouteCircuitPeering:ExpressRouteCircuitPeering")
public class ExpressRouteCircuitPeering extends com.pulumi.resources.CustomResource {
    /**
     * The ASN used by Azure.
     * 
     */
    @Export(name="azureAsn", refs={Integer.class}, tree="[0]")
    private Output<Integer> azureAsn;

    /**
     * @return The ASN used by Azure.
     * 
     */
    public Output<Integer> azureAsn() {
        return this.azureAsn;
    }
    /**
     * The name of the ExpressRoute Circuit in which to create the Peering. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="expressRouteCircuitName", refs={String.class}, tree="[0]")
    private Output<String> expressRouteCircuitName;

    /**
     * @return The name of the ExpressRoute Circuit in which to create the Peering. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> expressRouteCircuitName() {
        return this.expressRouteCircuitName;
    }
    @Export(name="gatewayManagerEtag", refs={String.class}, tree="[0]")
    private Output<String> gatewayManagerEtag;

    public Output<String> gatewayManagerEtag() {
        return this.gatewayManagerEtag;
    }
    /**
     * A boolean value indicating whether the IPv4 peering is enabled. Defaults to `true`.
     * 
     */
    @Export(name="ipv4Enabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> ipv4Enabled;

    /**
     * @return A boolean value indicating whether the IPv4 peering is enabled. Defaults to `true`.
     * 
     */
    public Output<Optional<Boolean>> ipv4Enabled() {
        return Codegen.optional(this.ipv4Enabled);
    }
    /**
     * A `ipv6` block as defined below.
     * 
     */
    @Export(name="ipv6", refs={ExpressRouteCircuitPeeringIpv6.class}, tree="[0]")
    private Output</* @Nullable */ ExpressRouteCircuitPeeringIpv6> ipv6;

    /**
     * @return A `ipv6` block as defined below.
     * 
     */
    public Output<Optional<ExpressRouteCircuitPeeringIpv6>> ipv6() {
        return Codegen.optional(this.ipv6);
    }
    /**
     * A `microsoft_peering_config` block as defined below. Required when `peering_type` is set to `MicrosoftPeering` and config for IPv4.
     * 
     */
    @Export(name="microsoftPeeringConfig", refs={ExpressRouteCircuitPeeringMicrosoftPeeringConfig.class}, tree="[0]")
    private Output</* @Nullable */ ExpressRouteCircuitPeeringMicrosoftPeeringConfig> microsoftPeeringConfig;

    /**
     * @return A `microsoft_peering_config` block as defined below. Required when `peering_type` is set to `MicrosoftPeering` and config for IPv4.
     * 
     */
    public Output<Optional<ExpressRouteCircuitPeeringMicrosoftPeeringConfig>> microsoftPeeringConfig() {
        return Codegen.optional(this.microsoftPeeringConfig);
    }
    /**
     * The Either a 16-bit or a 32-bit ASN. Can either be public or private.
     * 
     */
    @Export(name="peerAsn", refs={Integer.class}, tree="[0]")
    private Output<Integer> peerAsn;

    /**
     * @return The Either a 16-bit or a 32-bit ASN. Can either be public or private.
     * 
     */
    public Output<Integer> peerAsn() {
        return this.peerAsn;
    }
    /**
     * The type of the ExpressRoute Circuit Peering. Acceptable values include `AzurePrivatePeering`, `AzurePublicPeering` and `MicrosoftPeering`.
     * 
     */
    @Export(name="peeringType", refs={String.class}, tree="[0]")
    private Output<String> peeringType;

    /**
     * @return The type of the ExpressRoute Circuit Peering. Acceptable values include `AzurePrivatePeering`, `AzurePublicPeering` and `MicrosoftPeering`.
     * 
     */
    public Output<String> peeringType() {
        return this.peeringType;
    }
    /**
     * The Primary Port used by Azure for this Peering.
     * 
     */
    @Export(name="primaryAzurePort", refs={String.class}, tree="[0]")
    private Output<String> primaryAzurePort;

    /**
     * @return The Primary Port used by Azure for this Peering.
     * 
     */
    public Output<String> primaryAzurePort() {
        return this.primaryAzurePort;
    }
    /**
     * A subnet for the primary link.
     * 
     */
    @Export(name="primaryPeerAddressPrefix", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> primaryPeerAddressPrefix;

    /**
     * @return A subnet for the primary link.
     * 
     */
    public Output<Optional<String>> primaryPeerAddressPrefix() {
        return Codegen.optional(this.primaryPeerAddressPrefix);
    }
    /**
     * The name of the resource group in which to create the Express Route Circuit Peering. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="resourceGroupName", refs={String.class}, tree="[0]")
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group in which to create the Express Route Circuit Peering. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * The ID of the Route Filter. Only available when `peering_type` is set to `MicrosoftPeering`.
     * 
     */
    @Export(name="routeFilterId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> routeFilterId;

    /**
     * @return The ID of the Route Filter. Only available when `peering_type` is set to `MicrosoftPeering`.
     * 
     */
    public Output<Optional<String>> routeFilterId() {
        return Codegen.optional(this.routeFilterId);
    }
    /**
     * The Secondary Port used by Azure for this Peering.
     * 
     */
    @Export(name="secondaryAzurePort", refs={String.class}, tree="[0]")
    private Output<String> secondaryAzurePort;

    /**
     * @return The Secondary Port used by Azure for this Peering.
     * 
     */
    public Output<String> secondaryAzurePort() {
        return this.secondaryAzurePort;
    }
    /**
     * A subnet for the secondary link.
     * 
     */
    @Export(name="secondaryPeerAddressPrefix", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> secondaryPeerAddressPrefix;

    /**
     * @return A subnet for the secondary link.
     * 
     */
    public Output<Optional<String>> secondaryPeerAddressPrefix() {
        return Codegen.optional(this.secondaryPeerAddressPrefix);
    }
    /**
     * The shared key. Can be a maximum of 25 characters.
     * 
     */
    @Export(name="sharedKey", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> sharedKey;

    /**
     * @return The shared key. Can be a maximum of 25 characters.
     * 
     */
    public Output<Optional<String>> sharedKey() {
        return Codegen.optional(this.sharedKey);
    }
    /**
     * A valid VLAN ID to establish this peering on.
     * 
     */
    @Export(name="vlanId", refs={Integer.class}, tree="[0]")
    private Output<Integer> vlanId;

    /**
     * @return A valid VLAN ID to establish this peering on.
     * 
     */
    public Output<Integer> vlanId() {
        return this.vlanId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ExpressRouteCircuitPeering(String name) {
        this(name, ExpressRouteCircuitPeeringArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ExpressRouteCircuitPeering(String name, ExpressRouteCircuitPeeringArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ExpressRouteCircuitPeering(String name, ExpressRouteCircuitPeeringArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:network/expressRouteCircuitPeering:ExpressRouteCircuitPeering", name, args == null ? ExpressRouteCircuitPeeringArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private ExpressRouteCircuitPeering(String name, Output<String> id, @Nullable ExpressRouteCircuitPeeringState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:network/expressRouteCircuitPeering:ExpressRouteCircuitPeering", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "sharedKey"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ExpressRouteCircuitPeering get(String name, Output<String> id, @Nullable ExpressRouteCircuitPeeringState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ExpressRouteCircuitPeering(name, id, state, options);
    }
}
