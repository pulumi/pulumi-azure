// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.domainservices.outputs;

import com.pulumi.azure.domainservices.outputs.GetServiceNotification;
import com.pulumi.azure.domainservices.outputs.GetServiceReplicaSet;
import com.pulumi.azure.domainservices.outputs.GetServiceSecureLdap;
import com.pulumi.azure.domainservices.outputs.GetServiceSecurity;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetServiceResult {
    /**
     * @return A unique ID for the managed domain deployment.
     * 
     */
    private String deploymentId;
    /**
     * @return The forest type used by the managed domain. One of `ResourceTrusting`, for a _Resource Forest_, or blank, for a _User Forest_.
     * 
     */
    private String domainConfigurationType;
    /**
     * @return The Active Directory domain of the Domain Service. See [official documentation](https://docs.microsoft.com/azure/active-directory-domain-services/tutorial-create-instance#create-a-managed-domain) for constraints and recommendations.
     * 
     */
    private String domainName;
    /**
     * @return Whether group-based filtered sync (also called scoped synchronisation) is enabled.
     * 
     */
    private Boolean filteredSyncEnabled;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The Azure location in which the replica set resides.
     * 
     */
    private String location;
    private String name;
    /**
     * @return A `notifications` block as defined below.
     * 
     */
    private List<GetServiceNotification> notifications;
    /**
     * @return One or more `replica_set` blocks as defined below.
     * 
     */
    private List<GetServiceReplicaSet> replicaSets;
    private String resourceGroupName;
    private String resourceId;
    /**
     * @return A `secure_ldap` block as defined below.
     * 
     */
    private List<GetServiceSecureLdap> secureLdaps;
    /**
     * @return A `security` block as defined below.
     * 
     */
    private List<GetServiceSecurity> securities;
    /**
     * @return The SKU of the Domain Service resource. One of `Standard`, `Enterprise` or `Premium`.
     * 
     */
    private String sku;
    private String syncOwner;
    /**
     * @return A mapping of tags assigned to the resource.
     * 
     */
    private @Nullable Map<String,String> tags;
    private String tenantId;
    private Integer version;

    private GetServiceResult() {}
    /**
     * @return A unique ID for the managed domain deployment.
     * 
     */
    public String deploymentId() {
        return this.deploymentId;
    }
    /**
     * @return The forest type used by the managed domain. One of `ResourceTrusting`, for a _Resource Forest_, or blank, for a _User Forest_.
     * 
     */
    public String domainConfigurationType() {
        return this.domainConfigurationType;
    }
    /**
     * @return The Active Directory domain of the Domain Service. See [official documentation](https://docs.microsoft.com/azure/active-directory-domain-services/tutorial-create-instance#create-a-managed-domain) for constraints and recommendations.
     * 
     */
    public String domainName() {
        return this.domainName;
    }
    /**
     * @return Whether group-based filtered sync (also called scoped synchronisation) is enabled.
     * 
     */
    public Boolean filteredSyncEnabled() {
        return this.filteredSyncEnabled;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The Azure location in which the replica set resides.
     * 
     */
    public String location() {
        return this.location;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return A `notifications` block as defined below.
     * 
     */
    public List<GetServiceNotification> notifications() {
        return this.notifications;
    }
    /**
     * @return One or more `replica_set` blocks as defined below.
     * 
     */
    public List<GetServiceReplicaSet> replicaSets() {
        return this.replicaSets;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    public String resourceId() {
        return this.resourceId;
    }
    /**
     * @return A `secure_ldap` block as defined below.
     * 
     */
    public List<GetServiceSecureLdap> secureLdaps() {
        return this.secureLdaps;
    }
    /**
     * @return A `security` block as defined below.
     * 
     */
    public List<GetServiceSecurity> securities() {
        return this.securities;
    }
    /**
     * @return The SKU of the Domain Service resource. One of `Standard`, `Enterprise` or `Premium`.
     * 
     */
    public String sku() {
        return this.sku;
    }
    public String syncOwner() {
        return this.syncOwner;
    }
    /**
     * @return A mapping of tags assigned to the resource.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    public String tenantId() {
        return this.tenantId;
    }
    public Integer version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String deploymentId;
        private String domainConfigurationType;
        private String domainName;
        private Boolean filteredSyncEnabled;
        private String id;
        private String location;
        private String name;
        private List<GetServiceNotification> notifications;
        private List<GetServiceReplicaSet> replicaSets;
        private String resourceGroupName;
        private String resourceId;
        private List<GetServiceSecureLdap> secureLdaps;
        private List<GetServiceSecurity> securities;
        private String sku;
        private String syncOwner;
        private @Nullable Map<String,String> tags;
        private String tenantId;
        private Integer version;
        public Builder() {}
        public Builder(GetServiceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deploymentId = defaults.deploymentId;
    	      this.domainConfigurationType = defaults.domainConfigurationType;
    	      this.domainName = defaults.domainName;
    	      this.filteredSyncEnabled = defaults.filteredSyncEnabled;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.notifications = defaults.notifications;
    	      this.replicaSets = defaults.replicaSets;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.resourceId = defaults.resourceId;
    	      this.secureLdaps = defaults.secureLdaps;
    	      this.securities = defaults.securities;
    	      this.sku = defaults.sku;
    	      this.syncOwner = defaults.syncOwner;
    	      this.tags = defaults.tags;
    	      this.tenantId = defaults.tenantId;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder deploymentId(String deploymentId) {
            if (deploymentId == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "deploymentId");
            }
            this.deploymentId = deploymentId;
            return this;
        }
        @CustomType.Setter
        public Builder domainConfigurationType(String domainConfigurationType) {
            if (domainConfigurationType == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "domainConfigurationType");
            }
            this.domainConfigurationType = domainConfigurationType;
            return this;
        }
        @CustomType.Setter
        public Builder domainName(String domainName) {
            if (domainName == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "domainName");
            }
            this.domainName = domainName;
            return this;
        }
        @CustomType.Setter
        public Builder filteredSyncEnabled(Boolean filteredSyncEnabled) {
            if (filteredSyncEnabled == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "filteredSyncEnabled");
            }
            this.filteredSyncEnabled = filteredSyncEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder notifications(List<GetServiceNotification> notifications) {
            if (notifications == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "notifications");
            }
            this.notifications = notifications;
            return this;
        }
        public Builder notifications(GetServiceNotification... notifications) {
            return notifications(List.of(notifications));
        }
        @CustomType.Setter
        public Builder replicaSets(List<GetServiceReplicaSet> replicaSets) {
            if (replicaSets == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "replicaSets");
            }
            this.replicaSets = replicaSets;
            return this;
        }
        public Builder replicaSets(GetServiceReplicaSet... replicaSets) {
            return replicaSets(List.of(replicaSets));
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            if (resourceGroupName == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "resourceGroupName");
            }
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder resourceId(String resourceId) {
            if (resourceId == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "resourceId");
            }
            this.resourceId = resourceId;
            return this;
        }
        @CustomType.Setter
        public Builder secureLdaps(List<GetServiceSecureLdap> secureLdaps) {
            if (secureLdaps == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "secureLdaps");
            }
            this.secureLdaps = secureLdaps;
            return this;
        }
        public Builder secureLdaps(GetServiceSecureLdap... secureLdaps) {
            return secureLdaps(List.of(secureLdaps));
        }
        @CustomType.Setter
        public Builder securities(List<GetServiceSecurity> securities) {
            if (securities == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "securities");
            }
            this.securities = securities;
            return this;
        }
        public Builder securities(GetServiceSecurity... securities) {
            return securities(List.of(securities));
        }
        @CustomType.Setter
        public Builder sku(String sku) {
            if (sku == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "sku");
            }
            this.sku = sku;
            return this;
        }
        @CustomType.Setter
        public Builder syncOwner(String syncOwner) {
            if (syncOwner == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "syncOwner");
            }
            this.syncOwner = syncOwner;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {

            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder tenantId(String tenantId) {
            if (tenantId == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "tenantId");
            }
            this.tenantId = tenantId;
            return this;
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "version");
            }
            this.version = version;
            return this;
        }
        public GetServiceResult build() {
            final var _resultValue = new GetServiceResult();
            _resultValue.deploymentId = deploymentId;
            _resultValue.domainConfigurationType = domainConfigurationType;
            _resultValue.domainName = domainName;
            _resultValue.filteredSyncEnabled = filteredSyncEnabled;
            _resultValue.id = id;
            _resultValue.location = location;
            _resultValue.name = name;
            _resultValue.notifications = notifications;
            _resultValue.replicaSets = replicaSets;
            _resultValue.resourceGroupName = resourceGroupName;
            _resultValue.resourceId = resourceId;
            _resultValue.secureLdaps = secureLdaps;
            _resultValue.securities = securities;
            _resultValue.sku = sku;
            _resultValue.syncOwner = syncOwner;
            _resultValue.tags = tags;
            _resultValue.tenantId = tenantId;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
