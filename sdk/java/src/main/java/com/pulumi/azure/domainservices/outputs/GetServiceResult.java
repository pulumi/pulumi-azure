// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.domainservices.outputs;

import com.pulumi.azure.domainservices.outputs.GetServiceNotification;
import com.pulumi.azure.domainservices.outputs.GetServiceReplicaSet;
import com.pulumi.azure.domainservices.outputs.GetServiceSecureLdap;
import com.pulumi.azure.domainservices.outputs.GetServiceSecurity;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetServiceResult {
    /**
     * @return A unique ID for the managed domain deployment.
     * 
     */
    private final String deploymentId;
    /**
     * @return The forest type used by the managed domain. One of `ResourceTrusting`, for a _Resource Forest_, or blank, for a _User Forest_.
     * 
     */
    private final String domainConfigurationType;
    /**
     * @return The Active Directory domain of the Domain Service. See [official documentation](https://docs.microsoft.com/azure/active-directory-domain-services/tutorial-create-instance#create-a-managed-domain) for constraints and recommendations.
     * 
     */
    private final String domainName;
    /**
     * @return Whether group-based filtered sync (also called scoped synchronisation) is enabled.
     * 
     */
    private final Boolean filteredSyncEnabled;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * @return The Azure location in which the replica set resides.
     * 
     */
    private final String location;
    private final String name;
    /**
     * @return A `notifications` block as defined below.
     * 
     */
    private final List<GetServiceNotification> notifications;
    /**
     * @return One or more `replica_set` blocks as defined below.
     * 
     */
    private final List<GetServiceReplicaSet> replicaSets;
    private final String resourceGroupName;
    private final String resourceId;
    /**
     * @return A `secure_ldap` block as defined below.
     * 
     */
    private final List<GetServiceSecureLdap> secureLdaps;
    /**
     * @return A `security` block as defined below.
     * 
     */
    private final List<GetServiceSecurity> securities;
    /**
     * @return The SKU of the Domain Service resource. One of `Standard`, `Enterprise` or `Premium`.
     * 
     */
    private final String sku;
    private final String syncOwner;
    /**
     * @return A mapping of tags assigned to the resource.
     * 
     */
    private final Map<String,String> tags;
    private final String tenantId;
    private final Integer version;

    @CustomType.Constructor
    private GetServiceResult(
        @CustomType.Parameter("deploymentId") String deploymentId,
        @CustomType.Parameter("domainConfigurationType") String domainConfigurationType,
        @CustomType.Parameter("domainName") String domainName,
        @CustomType.Parameter("filteredSyncEnabled") Boolean filteredSyncEnabled,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("location") String location,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("notifications") List<GetServiceNotification> notifications,
        @CustomType.Parameter("replicaSets") List<GetServiceReplicaSet> replicaSets,
        @CustomType.Parameter("resourceGroupName") String resourceGroupName,
        @CustomType.Parameter("resourceId") String resourceId,
        @CustomType.Parameter("secureLdaps") List<GetServiceSecureLdap> secureLdaps,
        @CustomType.Parameter("securities") List<GetServiceSecurity> securities,
        @CustomType.Parameter("sku") String sku,
        @CustomType.Parameter("syncOwner") String syncOwner,
        @CustomType.Parameter("tags") Map<String,String> tags,
        @CustomType.Parameter("tenantId") String tenantId,
        @CustomType.Parameter("version") Integer version) {
        this.deploymentId = deploymentId;
        this.domainConfigurationType = domainConfigurationType;
        this.domainName = domainName;
        this.filteredSyncEnabled = filteredSyncEnabled;
        this.id = id;
        this.location = location;
        this.name = name;
        this.notifications = notifications;
        this.replicaSets = replicaSets;
        this.resourceGroupName = resourceGroupName;
        this.resourceId = resourceId;
        this.secureLdaps = secureLdaps;
        this.securities = securities;
        this.sku = sku;
        this.syncOwner = syncOwner;
        this.tags = tags;
        this.tenantId = tenantId;
        this.version = version;
    }

    /**
     * @return A unique ID for the managed domain deployment.
     * 
     */
    public String deploymentId() {
        return this.deploymentId;
    }
    /**
     * @return The forest type used by the managed domain. One of `ResourceTrusting`, for a _Resource Forest_, or blank, for a _User Forest_.
     * 
     */
    public String domainConfigurationType() {
        return this.domainConfigurationType;
    }
    /**
     * @return The Active Directory domain of the Domain Service. See [official documentation](https://docs.microsoft.com/azure/active-directory-domain-services/tutorial-create-instance#create-a-managed-domain) for constraints and recommendations.
     * 
     */
    public String domainName() {
        return this.domainName;
    }
    /**
     * @return Whether group-based filtered sync (also called scoped synchronisation) is enabled.
     * 
     */
    public Boolean filteredSyncEnabled() {
        return this.filteredSyncEnabled;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The Azure location in which the replica set resides.
     * 
     */
    public String location() {
        return this.location;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return A `notifications` block as defined below.
     * 
     */
    public List<GetServiceNotification> notifications() {
        return this.notifications;
    }
    /**
     * @return One or more `replica_set` blocks as defined below.
     * 
     */
    public List<GetServiceReplicaSet> replicaSets() {
        return this.replicaSets;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    public String resourceId() {
        return this.resourceId;
    }
    /**
     * @return A `secure_ldap` block as defined below.
     * 
     */
    public List<GetServiceSecureLdap> secureLdaps() {
        return this.secureLdaps;
    }
    /**
     * @return A `security` block as defined below.
     * 
     */
    public List<GetServiceSecurity> securities() {
        return this.securities;
    }
    /**
     * @return The SKU of the Domain Service resource. One of `Standard`, `Enterprise` or `Premium`.
     * 
     */
    public String sku() {
        return this.sku;
    }
    public String syncOwner() {
        return this.syncOwner;
    }
    /**
     * @return A mapping of tags assigned to the resource.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    public String tenantId() {
        return this.tenantId;
    }
    public Integer version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String deploymentId;
        private String domainConfigurationType;
        private String domainName;
        private Boolean filteredSyncEnabled;
        private String id;
        private String location;
        private String name;
        private List<GetServiceNotification> notifications;
        private List<GetServiceReplicaSet> replicaSets;
        private String resourceGroupName;
        private String resourceId;
        private List<GetServiceSecureLdap> secureLdaps;
        private List<GetServiceSecurity> securities;
        private String sku;
        private String syncOwner;
        private Map<String,String> tags;
        private String tenantId;
        private Integer version;

        public Builder() {
    	      // Empty
        }

        public Builder(GetServiceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deploymentId = defaults.deploymentId;
    	      this.domainConfigurationType = defaults.domainConfigurationType;
    	      this.domainName = defaults.domainName;
    	      this.filteredSyncEnabled = defaults.filteredSyncEnabled;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.notifications = defaults.notifications;
    	      this.replicaSets = defaults.replicaSets;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.resourceId = defaults.resourceId;
    	      this.secureLdaps = defaults.secureLdaps;
    	      this.securities = defaults.securities;
    	      this.sku = defaults.sku;
    	      this.syncOwner = defaults.syncOwner;
    	      this.tags = defaults.tags;
    	      this.tenantId = defaults.tenantId;
    	      this.version = defaults.version;
        }

        public Builder deploymentId(String deploymentId) {
            this.deploymentId = Objects.requireNonNull(deploymentId);
            return this;
        }
        public Builder domainConfigurationType(String domainConfigurationType) {
            this.domainConfigurationType = Objects.requireNonNull(domainConfigurationType);
            return this;
        }
        public Builder domainName(String domainName) {
            this.domainName = Objects.requireNonNull(domainName);
            return this;
        }
        public Builder filteredSyncEnabled(Boolean filteredSyncEnabled) {
            this.filteredSyncEnabled = Objects.requireNonNull(filteredSyncEnabled);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder notifications(List<GetServiceNotification> notifications) {
            this.notifications = Objects.requireNonNull(notifications);
            return this;
        }
        public Builder notifications(GetServiceNotification... notifications) {
            return notifications(List.of(notifications));
        }
        public Builder replicaSets(List<GetServiceReplicaSet> replicaSets) {
            this.replicaSets = Objects.requireNonNull(replicaSets);
            return this;
        }
        public Builder replicaSets(GetServiceReplicaSet... replicaSets) {
            return replicaSets(List.of(replicaSets));
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceId(String resourceId) {
            this.resourceId = Objects.requireNonNull(resourceId);
            return this;
        }
        public Builder secureLdaps(List<GetServiceSecureLdap> secureLdaps) {
            this.secureLdaps = Objects.requireNonNull(secureLdaps);
            return this;
        }
        public Builder secureLdaps(GetServiceSecureLdap... secureLdaps) {
            return secureLdaps(List.of(secureLdaps));
        }
        public Builder securities(List<GetServiceSecurity> securities) {
            this.securities = Objects.requireNonNull(securities);
            return this;
        }
        public Builder securities(GetServiceSecurity... securities) {
            return securities(List.of(securities));
        }
        public Builder sku(String sku) {
            this.sku = Objects.requireNonNull(sku);
            return this;
        }
        public Builder syncOwner(String syncOwner) {
            this.syncOwner = Objects.requireNonNull(syncOwner);
            return this;
        }
        public Builder tags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder tenantId(String tenantId) {
            this.tenantId = Objects.requireNonNull(tenantId);
            return this;
        }
        public Builder version(Integer version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }        public GetServiceResult build() {
            return new GetServiceResult(deploymentId, domainConfigurationType, domainName, filteredSyncEnabled, id, location, name, notifications, replicaSets, resourceGroupName, resourceId, secureLdaps, securities, sku, syncOwner, tags, tenantId, version);
        }
    }
}
