// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.streamanalytics;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.streamanalytics.ReferenceInputMssqlArgs;
import com.pulumi.azure.streamanalytics.inputs.ReferenceInputMssqlState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a Stream Analytics Reference Input from MS SQL. Reference data (also known as a lookup table) is a finite data set that is static or slowly changing in nature, used to perform a lookup or to correlate with your data stream. Learn more [here](https://docs.microsoft.com/azure/stream-analytics/stream-analytics-use-reference-data#azure-sql-database).
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.streamanalytics.StreamanalyticsFunctions;
 * import com.pulumi.azure.streamanalytics.inputs.GetJobArgs;
 * import com.pulumi.azure.mssql.Server;
 * import com.pulumi.azure.mssql.ServerArgs;
 * import com.pulumi.azure.mssql.Database;
 * import com.pulumi.azure.mssql.DatabaseArgs;
 * import com.pulumi.azure.streamanalytics.ReferenceInputMssql;
 * import com.pulumi.azure.streamanalytics.ReferenceInputMssqlArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampleResourceGroup = new ResourceGroup(&#34;exampleResourceGroup&#34;, ResourceGroupArgs.builder()        
 *             .location(&#34;West Europe&#34;)
 *             .build());
 * 
 *         final var exampleJob = StreamanalyticsFunctions.getJob(GetJobArgs.builder()
 *             .name(&#34;example-job&#34;)
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .build());
 * 
 *         var exampleServer = new Server(&#34;exampleServer&#34;, ServerArgs.builder()        
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .location(exampleResourceGroup.location())
 *             .version(&#34;12.0&#34;)
 *             .administratorLogin(&#34;admin&#34;)
 *             .administratorLoginPassword(&#34;password&#34;)
 *             .build());
 * 
 *         var exampleDatabase = new Database(&#34;exampleDatabase&#34;, DatabaseArgs.builder()        
 *             .serverId(exampleServer.id())
 *             .build());
 * 
 *         var exampleReferenceInputMssql = new ReferenceInputMssql(&#34;exampleReferenceInputMssql&#34;, ReferenceInputMssqlArgs.builder()        
 *             .resourceGroupName(exampleJob.applyValue(getJobResult -&gt; getJobResult).applyValue(exampleJob -&gt; exampleJob.applyValue(getJobResult -&gt; getJobResult.resourceGroupName())))
 *             .streamAnalyticsJobName(exampleJob.applyValue(getJobResult -&gt; getJobResult).applyValue(exampleJob -&gt; exampleJob.applyValue(getJobResult -&gt; getJobResult.name())))
 *             .server(exampleServer.fullyQualifiedDomainName())
 *             .database(exampleDatabase.name())
 *             .username(&#34;exampleuser&#34;)
 *             .password(&#34;examplepassword&#34;)
 *             .refreshType(&#34;RefreshPeriodicallyWithFull&#34;)
 *             .refreshIntervalDuration(&#34;00:20:00&#34;)
 *             .fullSnapshotQuery(&#34;&#34;&#34;
 *     SELECT *
 *     INTO [YourOutputAlias]
 *     FROM [YourInputAlias]
 *             &#34;&#34;&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Stream Analytics can be imported using the `resource id`, e.g.
 * 
 * ```sh
 *  $ pulumi import azure:streamanalytics/referenceInputMssql:ReferenceInputMssql example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.StreamAnalytics/streamingjobs/job1/inputs/input1
 * ```
 * 
 */
@ResourceType(type="azure:streamanalytics/referenceInputMssql:ReferenceInputMssql")
public class ReferenceInputMssql extends com.pulumi.resources.CustomResource {
    /**
     * The MS SQL database name where the reference data exists.
     * 
     */
    @Export(name="database", type=String.class, parameters={})
    private Output<String> database;

    /**
     * @return The MS SQL database name where the reference data exists.
     * 
     */
    public Output<String> database() {
        return this.database;
    }
    /**
     * The query used to retrieve incremental changes in the reference data from the MS SQL database. Cannot be set when `refresh_type` is `Static`.
     * 
     */
    @Export(name="deltaSnapshotQuery", type=String.class, parameters={})
    private Output</* @Nullable */ String> deltaSnapshotQuery;

    /**
     * @return The query used to retrieve incremental changes in the reference data from the MS SQL database. Cannot be set when `refresh_type` is `Static`.
     * 
     */
    public Output<Optional<String>> deltaSnapshotQuery() {
        return Codegen.optional(this.deltaSnapshotQuery);
    }
    /**
     * The query used to retrieve the reference data from the MS SQL database.
     * 
     */
    @Export(name="fullSnapshotQuery", type=String.class, parameters={})
    private Output<String> fullSnapshotQuery;

    /**
     * @return The query used to retrieve the reference data from the MS SQL database.
     * 
     */
    public Output<String> fullSnapshotQuery() {
        return this.fullSnapshotQuery;
    }
    /**
     * The name of the Reference Input MS SQL data. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the Reference Input MS SQL data. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The username to connect to the MS SQL database.
     * 
     */
    @Export(name="password", type=String.class, parameters={})
    private Output<String> password;

    /**
     * @return The username to connect to the MS SQL database.
     * 
     */
    public Output<String> password() {
        return this.password;
    }
    /**
     * The frequency in `hh:mm:ss` with which the reference data should be retrieved from the MS SQL database e.g. `00:20:00` for every 20 minutes. Must be set when `refresh_type` is `RefreshPeriodicallyWithFull` or `RefreshPeriodicallyWithDelta`.
     * 
     */
    @Export(name="refreshIntervalDuration", type=String.class, parameters={})
    private Output</* @Nullable */ String> refreshIntervalDuration;

    /**
     * @return The frequency in `hh:mm:ss` with which the reference data should be retrieved from the MS SQL database e.g. `00:20:00` for every 20 minutes. Must be set when `refresh_type` is `RefreshPeriodicallyWithFull` or `RefreshPeriodicallyWithDelta`.
     * 
     */
    public Output<Optional<String>> refreshIntervalDuration() {
        return Codegen.optional(this.refreshIntervalDuration);
    }
    /**
     * Defines whether and how the reference data should be refreshed. Accepted values are `Static`, `RefreshPeriodicallyWithFull` and `RefreshPeriodicallyWithDelta`.
     * 
     */
    @Export(name="refreshType", type=String.class, parameters={})
    private Output<String> refreshType;

    /**
     * @return Defines whether and how the reference data should be refreshed. Accepted values are `Static`, `RefreshPeriodicallyWithFull` and `RefreshPeriodicallyWithDelta`.
     * 
     */
    public Output<String> refreshType() {
        return this.refreshType;
    }
    /**
     * The name of the Resource Group where the Stream Analytics Job should exist. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="resourceGroupName", type=String.class, parameters={})
    private Output<String> resourceGroupName;

    /**
     * @return The name of the Resource Group where the Stream Analytics Job should exist. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * The fully qualified domain name of the MS SQL server.
     * 
     */
    @Export(name="server", type=String.class, parameters={})
    private Output<String> server;

    /**
     * @return The fully qualified domain name of the MS SQL server.
     * 
     */
    public Output<String> server() {
        return this.server;
    }
    /**
     * The name of the Stream Analytics Job. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="streamAnalyticsJobName", type=String.class, parameters={})
    private Output<String> streamAnalyticsJobName;

    /**
     * @return The name of the Stream Analytics Job. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> streamAnalyticsJobName() {
        return this.streamAnalyticsJobName;
    }
    /**
     * The name of the table in the Azure SQL database.
     * 
     */
    @Export(name="table", type=String.class, parameters={})
    private Output</* @Nullable */ String> table;

    /**
     * @return The name of the table in the Azure SQL database.
     * 
     */
    public Output<Optional<String>> table() {
        return Codegen.optional(this.table);
    }
    /**
     * The username to connect to the MS SQL database.
     * 
     */
    @Export(name="username", type=String.class, parameters={})
    private Output<String> username;

    /**
     * @return The username to connect to the MS SQL database.
     * 
     */
    public Output<String> username() {
        return this.username;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ReferenceInputMssql(String name) {
        this(name, ReferenceInputMssqlArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ReferenceInputMssql(String name, ReferenceInputMssqlArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ReferenceInputMssql(String name, ReferenceInputMssqlArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:streamanalytics/referenceInputMssql:ReferenceInputMssql", name, args == null ? ReferenceInputMssqlArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private ReferenceInputMssql(String name, Output<String> id, @Nullable ReferenceInputMssqlState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:streamanalytics/referenceInputMssql:ReferenceInputMssql", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ReferenceInputMssql get(String name, Output<String> id, @Nullable ReferenceInputMssqlState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ReferenceInputMssql(name, id, state, options);
    }
}
