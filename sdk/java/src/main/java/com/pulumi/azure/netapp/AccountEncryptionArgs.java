// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.netapp;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AccountEncryptionArgs extends com.pulumi.resources.ResourceArgs {

    public static final AccountEncryptionArgs Empty = new AccountEncryptionArgs();

    /**
     * The full resource ID of the cross-tenant key vault. This is recommended when using `federated_client_id` for cross-tenant scenarios to ensure proper validation by Azure APIs.
     * 
     */
    @Import(name="crossTenantKeyVaultResourceId")
    private @Nullable Output<String> crossTenantKeyVaultResourceId;

    /**
     * @return The full resource ID of the cross-tenant key vault. This is recommended when using `federated_client_id` for cross-tenant scenarios to ensure proper validation by Azure APIs.
     * 
     */
    public Optional<Output<String>> crossTenantKeyVaultResourceId() {
        return Optional.ofNullable(this.crossTenantKeyVaultResourceId);
    }

    /**
     * Specify the versionless ID of the encryption key.
     * 
     */
    @Import(name="encryptionKey", required=true)
    private Output<String> encryptionKey;

    /**
     * @return Specify the versionless ID of the encryption key.
     * 
     */
    public Output<String> encryptionKey() {
        return this.encryptionKey;
    }

    /**
     * The Client ID of the multi-tenant Entra ID application used to access cross-tenant key vaults. This is only required when accessing a key vault in a different tenant than the NetApp account.
     * 
     */
    @Import(name="federatedClientId")
    private @Nullable Output<String> federatedClientId;

    /**
     * @return The Client ID of the multi-tenant Entra ID application used to access cross-tenant key vaults. This is only required when accessing a key vault in a different tenant than the NetApp account.
     * 
     */
    public Optional<Output<String>> federatedClientId() {
        return Optional.ofNullable(this.federatedClientId);
    }

    /**
     * The ID of the NetApp account where volume under it will have customer managed keys-based encryption enabled.
     * 
     */
    @Import(name="netappAccountId", required=true)
    private Output<String> netappAccountId;

    /**
     * @return The ID of the NetApp account where volume under it will have customer managed keys-based encryption enabled.
     * 
     */
    public Output<String> netappAccountId() {
        return this.netappAccountId;
    }

    /**
     * The ID of the System Assigned Manged Identity. Conflicts with `user_assigned_identity_id`.
     * 
     */
    @Import(name="systemAssignedIdentityPrincipalId")
    private @Nullable Output<String> systemAssignedIdentityPrincipalId;

    /**
     * @return The ID of the System Assigned Manged Identity. Conflicts with `user_assigned_identity_id`.
     * 
     */
    public Optional<Output<String>> systemAssignedIdentityPrincipalId() {
        return Optional.ofNullable(this.systemAssignedIdentityPrincipalId);
    }

    /**
     * The ID of the User Assigned Managed Identity. Conflicts with `system_assigned_identity_principal_id`.
     * 
     */
    @Import(name="userAssignedIdentityId")
    private @Nullable Output<String> userAssignedIdentityId;

    /**
     * @return The ID of the User Assigned Managed Identity. Conflicts with `system_assigned_identity_principal_id`.
     * 
     */
    public Optional<Output<String>> userAssignedIdentityId() {
        return Optional.ofNullable(this.userAssignedIdentityId);
    }

    private AccountEncryptionArgs() {}

    private AccountEncryptionArgs(AccountEncryptionArgs $) {
        this.crossTenantKeyVaultResourceId = $.crossTenantKeyVaultResourceId;
        this.encryptionKey = $.encryptionKey;
        this.federatedClientId = $.federatedClientId;
        this.netappAccountId = $.netappAccountId;
        this.systemAssignedIdentityPrincipalId = $.systemAssignedIdentityPrincipalId;
        this.userAssignedIdentityId = $.userAssignedIdentityId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccountEncryptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccountEncryptionArgs $;

        public Builder() {
            $ = new AccountEncryptionArgs();
        }

        public Builder(AccountEncryptionArgs defaults) {
            $ = new AccountEncryptionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param crossTenantKeyVaultResourceId The full resource ID of the cross-tenant key vault. This is recommended when using `federated_client_id` for cross-tenant scenarios to ensure proper validation by Azure APIs.
         * 
         * @return builder
         * 
         */
        public Builder crossTenantKeyVaultResourceId(@Nullable Output<String> crossTenantKeyVaultResourceId) {
            $.crossTenantKeyVaultResourceId = crossTenantKeyVaultResourceId;
            return this;
        }

        /**
         * @param crossTenantKeyVaultResourceId The full resource ID of the cross-tenant key vault. This is recommended when using `federated_client_id` for cross-tenant scenarios to ensure proper validation by Azure APIs.
         * 
         * @return builder
         * 
         */
        public Builder crossTenantKeyVaultResourceId(String crossTenantKeyVaultResourceId) {
            return crossTenantKeyVaultResourceId(Output.of(crossTenantKeyVaultResourceId));
        }

        /**
         * @param encryptionKey Specify the versionless ID of the encryption key.
         * 
         * @return builder
         * 
         */
        public Builder encryptionKey(Output<String> encryptionKey) {
            $.encryptionKey = encryptionKey;
            return this;
        }

        /**
         * @param encryptionKey Specify the versionless ID of the encryption key.
         * 
         * @return builder
         * 
         */
        public Builder encryptionKey(String encryptionKey) {
            return encryptionKey(Output.of(encryptionKey));
        }

        /**
         * @param federatedClientId The Client ID of the multi-tenant Entra ID application used to access cross-tenant key vaults. This is only required when accessing a key vault in a different tenant than the NetApp account.
         * 
         * @return builder
         * 
         */
        public Builder federatedClientId(@Nullable Output<String> federatedClientId) {
            $.federatedClientId = federatedClientId;
            return this;
        }

        /**
         * @param federatedClientId The Client ID of the multi-tenant Entra ID application used to access cross-tenant key vaults. This is only required when accessing a key vault in a different tenant than the NetApp account.
         * 
         * @return builder
         * 
         */
        public Builder federatedClientId(String federatedClientId) {
            return federatedClientId(Output.of(federatedClientId));
        }

        /**
         * @param netappAccountId The ID of the NetApp account where volume under it will have customer managed keys-based encryption enabled.
         * 
         * @return builder
         * 
         */
        public Builder netappAccountId(Output<String> netappAccountId) {
            $.netappAccountId = netappAccountId;
            return this;
        }

        /**
         * @param netappAccountId The ID of the NetApp account where volume under it will have customer managed keys-based encryption enabled.
         * 
         * @return builder
         * 
         */
        public Builder netappAccountId(String netappAccountId) {
            return netappAccountId(Output.of(netappAccountId));
        }

        /**
         * @param systemAssignedIdentityPrincipalId The ID of the System Assigned Manged Identity. Conflicts with `user_assigned_identity_id`.
         * 
         * @return builder
         * 
         */
        public Builder systemAssignedIdentityPrincipalId(@Nullable Output<String> systemAssignedIdentityPrincipalId) {
            $.systemAssignedIdentityPrincipalId = systemAssignedIdentityPrincipalId;
            return this;
        }

        /**
         * @param systemAssignedIdentityPrincipalId The ID of the System Assigned Manged Identity. Conflicts with `user_assigned_identity_id`.
         * 
         * @return builder
         * 
         */
        public Builder systemAssignedIdentityPrincipalId(String systemAssignedIdentityPrincipalId) {
            return systemAssignedIdentityPrincipalId(Output.of(systemAssignedIdentityPrincipalId));
        }

        /**
         * @param userAssignedIdentityId The ID of the User Assigned Managed Identity. Conflicts with `system_assigned_identity_principal_id`.
         * 
         * @return builder
         * 
         */
        public Builder userAssignedIdentityId(@Nullable Output<String> userAssignedIdentityId) {
            $.userAssignedIdentityId = userAssignedIdentityId;
            return this;
        }

        /**
         * @param userAssignedIdentityId The ID of the User Assigned Managed Identity. Conflicts with `system_assigned_identity_principal_id`.
         * 
         * @return builder
         * 
         */
        public Builder userAssignedIdentityId(String userAssignedIdentityId) {
            return userAssignedIdentityId(Output.of(userAssignedIdentityId));
        }

        public AccountEncryptionArgs build() {
            if ($.encryptionKey == null) {
                throw new MissingRequiredPropertyException("AccountEncryptionArgs", "encryptionKey");
            }
            if ($.netappAccountId == null) {
                throw new MissingRequiredPropertyException("AccountEncryptionArgs", "netappAccountId");
            }
            return $;
        }
    }

}
