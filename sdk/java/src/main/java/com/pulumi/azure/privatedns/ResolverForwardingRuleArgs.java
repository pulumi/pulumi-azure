// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.privatedns;

import com.pulumi.azure.privatedns.inputs.ResolverForwardingRuleTargetDnsServerArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ResolverForwardingRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final ResolverForwardingRuleArgs Empty = new ResolverForwardingRuleArgs();

    /**
     * Specifies the ID of the Private DNS Resolver Forwarding Ruleset. Changing this forces a new Private DNS Resolver Forwarding Rule to be created.
     * 
     */
    @Import(name="dnsForwardingRulesetId", required=true)
    private Output<String> dnsForwardingRulesetId;

    /**
     * @return Specifies the ID of the Private DNS Resolver Forwarding Ruleset. Changing this forces a new Private DNS Resolver Forwarding Rule to be created.
     * 
     */
    public Output<String> dnsForwardingRulesetId() {
        return this.dnsForwardingRulesetId;
    }

    /**
     * Specifies the domain name for the Private DNS Resolver Forwarding Rule. Changing this forces a new Private DNS Resolver Forwarding Rule to be created.
     * 
     */
    @Import(name="domainName", required=true)
    private Output<String> domainName;

    /**
     * @return Specifies the domain name for the Private DNS Resolver Forwarding Rule. Changing this forces a new Private DNS Resolver Forwarding Rule to be created.
     * 
     */
    public Output<String> domainName() {
        return this.domainName;
    }

    /**
     * Specifies the state of the Private DNS Resolver Forwarding Rule. Defaults to `true`.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Specifies the state of the Private DNS Resolver Forwarding Rule. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Metadata attached to the Private DNS Resolver Forwarding Rule.
     * 
     */
    @Import(name="metadata")
    private @Nullable Output<Map<String,String>> metadata;

    /**
     * @return Metadata attached to the Private DNS Resolver Forwarding Rule.
     * 
     */
    public Optional<Output<Map<String,String>>> metadata() {
        return Optional.ofNullable(this.metadata);
    }

    /**
     * Specifies the name which should be used for this Private DNS Resolver Forwarding Rule. Changing this forces a new Private DNS Resolver Forwarding Rule to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the name which should be used for this Private DNS Resolver Forwarding Rule. Changing this forces a new Private DNS Resolver Forwarding Rule to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Can be specified multiple times to define multiple target DNS servers. Each `target_dns_servers` block as defined below.
     * 
     */
    @Import(name="targetDnsServers", required=true)
    private Output<List<ResolverForwardingRuleTargetDnsServerArgs>> targetDnsServers;

    /**
     * @return Can be specified multiple times to define multiple target DNS servers. Each `target_dns_servers` block as defined below.
     * 
     */
    public Output<List<ResolverForwardingRuleTargetDnsServerArgs>> targetDnsServers() {
        return this.targetDnsServers;
    }

    private ResolverForwardingRuleArgs() {}

    private ResolverForwardingRuleArgs(ResolverForwardingRuleArgs $) {
        this.dnsForwardingRulesetId = $.dnsForwardingRulesetId;
        this.domainName = $.domainName;
        this.enabled = $.enabled;
        this.metadata = $.metadata;
        this.name = $.name;
        this.targetDnsServers = $.targetDnsServers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ResolverForwardingRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ResolverForwardingRuleArgs $;

        public Builder() {
            $ = new ResolverForwardingRuleArgs();
        }

        public Builder(ResolverForwardingRuleArgs defaults) {
            $ = new ResolverForwardingRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dnsForwardingRulesetId Specifies the ID of the Private DNS Resolver Forwarding Ruleset. Changing this forces a new Private DNS Resolver Forwarding Rule to be created.
         * 
         * @return builder
         * 
         */
        public Builder dnsForwardingRulesetId(Output<String> dnsForwardingRulesetId) {
            $.dnsForwardingRulesetId = dnsForwardingRulesetId;
            return this;
        }

        /**
         * @param dnsForwardingRulesetId Specifies the ID of the Private DNS Resolver Forwarding Ruleset. Changing this forces a new Private DNS Resolver Forwarding Rule to be created.
         * 
         * @return builder
         * 
         */
        public Builder dnsForwardingRulesetId(String dnsForwardingRulesetId) {
            return dnsForwardingRulesetId(Output.of(dnsForwardingRulesetId));
        }

        /**
         * @param domainName Specifies the domain name for the Private DNS Resolver Forwarding Rule. Changing this forces a new Private DNS Resolver Forwarding Rule to be created.
         * 
         * @return builder
         * 
         */
        public Builder domainName(Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        /**
         * @param domainName Specifies the domain name for the Private DNS Resolver Forwarding Rule. Changing this forces a new Private DNS Resolver Forwarding Rule to be created.
         * 
         * @return builder
         * 
         */
        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        /**
         * @param enabled Specifies the state of the Private DNS Resolver Forwarding Rule. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Specifies the state of the Private DNS Resolver Forwarding Rule. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param metadata Metadata attached to the Private DNS Resolver Forwarding Rule.
         * 
         * @return builder
         * 
         */
        public Builder metadata(@Nullable Output<Map<String,String>> metadata) {
            $.metadata = metadata;
            return this;
        }

        /**
         * @param metadata Metadata attached to the Private DNS Resolver Forwarding Rule.
         * 
         * @return builder
         * 
         */
        public Builder metadata(Map<String,String> metadata) {
            return metadata(Output.of(metadata));
        }

        /**
         * @param name Specifies the name which should be used for this Private DNS Resolver Forwarding Rule. Changing this forces a new Private DNS Resolver Forwarding Rule to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name which should be used for this Private DNS Resolver Forwarding Rule. Changing this forces a new Private DNS Resolver Forwarding Rule to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param targetDnsServers Can be specified multiple times to define multiple target DNS servers. Each `target_dns_servers` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder targetDnsServers(Output<List<ResolverForwardingRuleTargetDnsServerArgs>> targetDnsServers) {
            $.targetDnsServers = targetDnsServers;
            return this;
        }

        /**
         * @param targetDnsServers Can be specified multiple times to define multiple target DNS servers. Each `target_dns_servers` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder targetDnsServers(List<ResolverForwardingRuleTargetDnsServerArgs> targetDnsServers) {
            return targetDnsServers(Output.of(targetDnsServers));
        }

        /**
         * @param targetDnsServers Can be specified multiple times to define multiple target DNS servers. Each `target_dns_servers` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder targetDnsServers(ResolverForwardingRuleTargetDnsServerArgs... targetDnsServers) {
            return targetDnsServers(List.of(targetDnsServers));
        }

        public ResolverForwardingRuleArgs build() {
            if ($.dnsForwardingRulesetId == null) {
                throw new MissingRequiredPropertyException("ResolverForwardingRuleArgs", "dnsForwardingRulesetId");
            }
            if ($.domainName == null) {
                throw new MissingRequiredPropertyException("ResolverForwardingRuleArgs", "domainName");
            }
            if ($.targetDnsServers == null) {
                throw new MissingRequiredPropertyException("ResolverForwardingRuleArgs", "targetDnsServers");
            }
            return $;
        }
    }

}
