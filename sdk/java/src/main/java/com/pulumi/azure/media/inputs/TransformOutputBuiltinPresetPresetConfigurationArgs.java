// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.media.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TransformOutputBuiltinPresetPresetConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final TransformOutputBuiltinPresetPresetConfigurationArgs Empty = new TransformOutputBuiltinPresetPresetConfigurationArgs();

    /**
     * The complexity of the encoding. Possible values are `Balanced`, `Speed` or `Quality`.
     * 
     */
    @Import(name="complexity")
    private @Nullable Output<String> complexity;

    /**
     * @return The complexity of the encoding. Possible values are `Balanced`, `Speed` or `Quality`.
     * 
     */
    public Optional<Output<String>> complexity() {
        return Optional.ofNullable(this.complexity);
    }

    /**
     * Specifies the interleave mode of the output to control how audio are stored in the container format. Possible values are `InterleavedOutput` and `NonInterleavedOutput`.
     * 
     */
    @Import(name="interleaveOutput")
    private @Nullable Output<String> interleaveOutput;

    /**
     * @return Specifies the interleave mode of the output to control how audio are stored in the container format. Possible values are `InterleavedOutput` and `NonInterleavedOutput`.
     * 
     */
    public Optional<Output<String>> interleaveOutput() {
        return Optional.ofNullable(this.interleaveOutput);
    }

    /**
     * The key frame interval in seconds. Possible value is a positive float. For example, set as `2.0` to reduce the playback buffering for some players.
     * 
     */
    @Import(name="keyFrameIntervalInSeconds")
    private @Nullable Output<Double> keyFrameIntervalInSeconds;

    /**
     * @return The key frame interval in seconds. Possible value is a positive float. For example, set as `2.0` to reduce the playback buffering for some players.
     * 
     */
    public Optional<Output<Double>> keyFrameIntervalInSeconds() {
        return Optional.ofNullable(this.keyFrameIntervalInSeconds);
    }

    /**
     * The maximum bitrate in bits per second (threshold for the top video layer). For example, set as `6000000` to avoid producing very high bitrate outputs for contents with high complexity.
     * 
     */
    @Import(name="maxBitrateBps")
    private @Nullable Output<Integer> maxBitrateBps;

    /**
     * @return The maximum bitrate in bits per second (threshold for the top video layer). For example, set as `6000000` to avoid producing very high bitrate outputs for contents with high complexity.
     * 
     */
    public Optional<Output<Integer>> maxBitrateBps() {
        return Optional.ofNullable(this.maxBitrateBps);
    }

    /**
     * The maximum height of output video layers. For example, set as `720` to produce output layers up to 720P even if the input is 4K.
     * 
     */
    @Import(name="maxHeight")
    private @Nullable Output<Integer> maxHeight;

    /**
     * @return The maximum height of output video layers. For example, set as `720` to produce output layers up to 720P even if the input is 4K.
     * 
     */
    public Optional<Output<Integer>> maxHeight() {
        return Optional.ofNullable(this.maxHeight);
    }

    /**
     * The maximum number of output video layers. For example, set as `4` to make sure at most 4 output layers are produced to control the overall cost of the encoding job.
     * 
     */
    @Import(name="maxLayers")
    private @Nullable Output<Integer> maxLayers;

    /**
     * @return The maximum number of output video layers. For example, set as `4` to make sure at most 4 output layers are produced to control the overall cost of the encoding job.
     * 
     */
    public Optional<Output<Integer>> maxLayers() {
        return Optional.ofNullable(this.maxLayers);
    }

    /**
     * The minimum bitrate in bits per second (threshold for the bottom video layer). For example, set as `200000` to have a bottom layer that covers users with low network bandwidth.
     * 
     */
    @Import(name="minBitrateBps")
    private @Nullable Output<Integer> minBitrateBps;

    /**
     * @return The minimum bitrate in bits per second (threshold for the bottom video layer). For example, set as `200000` to have a bottom layer that covers users with low network bandwidth.
     * 
     */
    public Optional<Output<Integer>> minBitrateBps() {
        return Optional.ofNullable(this.minBitrateBps);
    }

    /**
     * The minimum height of output video layers. For example, set as `360` to avoid output layers of smaller resolutions like 180P.
     * 
     */
    @Import(name="minHeight")
    private @Nullable Output<Integer> minHeight;

    /**
     * @return The minimum height of output video layers. For example, set as `360` to avoid output layers of smaller resolutions like 180P.
     * 
     */
    public Optional<Output<Integer>> minHeight() {
        return Optional.ofNullable(this.minHeight);
    }

    private TransformOutputBuiltinPresetPresetConfigurationArgs() {}

    private TransformOutputBuiltinPresetPresetConfigurationArgs(TransformOutputBuiltinPresetPresetConfigurationArgs $) {
        this.complexity = $.complexity;
        this.interleaveOutput = $.interleaveOutput;
        this.keyFrameIntervalInSeconds = $.keyFrameIntervalInSeconds;
        this.maxBitrateBps = $.maxBitrateBps;
        this.maxHeight = $.maxHeight;
        this.maxLayers = $.maxLayers;
        this.minBitrateBps = $.minBitrateBps;
        this.minHeight = $.minHeight;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TransformOutputBuiltinPresetPresetConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TransformOutputBuiltinPresetPresetConfigurationArgs $;

        public Builder() {
            $ = new TransformOutputBuiltinPresetPresetConfigurationArgs();
        }

        public Builder(TransformOutputBuiltinPresetPresetConfigurationArgs defaults) {
            $ = new TransformOutputBuiltinPresetPresetConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param complexity The complexity of the encoding. Possible values are `Balanced`, `Speed` or `Quality`.
         * 
         * @return builder
         * 
         */
        public Builder complexity(@Nullable Output<String> complexity) {
            $.complexity = complexity;
            return this;
        }

        /**
         * @param complexity The complexity of the encoding. Possible values are `Balanced`, `Speed` or `Quality`.
         * 
         * @return builder
         * 
         */
        public Builder complexity(String complexity) {
            return complexity(Output.of(complexity));
        }

        /**
         * @param interleaveOutput Specifies the interleave mode of the output to control how audio are stored in the container format. Possible values are `InterleavedOutput` and `NonInterleavedOutput`.
         * 
         * @return builder
         * 
         */
        public Builder interleaveOutput(@Nullable Output<String> interleaveOutput) {
            $.interleaveOutput = interleaveOutput;
            return this;
        }

        /**
         * @param interleaveOutput Specifies the interleave mode of the output to control how audio are stored in the container format. Possible values are `InterleavedOutput` and `NonInterleavedOutput`.
         * 
         * @return builder
         * 
         */
        public Builder interleaveOutput(String interleaveOutput) {
            return interleaveOutput(Output.of(interleaveOutput));
        }

        /**
         * @param keyFrameIntervalInSeconds The key frame interval in seconds. Possible value is a positive float. For example, set as `2.0` to reduce the playback buffering for some players.
         * 
         * @return builder
         * 
         */
        public Builder keyFrameIntervalInSeconds(@Nullable Output<Double> keyFrameIntervalInSeconds) {
            $.keyFrameIntervalInSeconds = keyFrameIntervalInSeconds;
            return this;
        }

        /**
         * @param keyFrameIntervalInSeconds The key frame interval in seconds. Possible value is a positive float. For example, set as `2.0` to reduce the playback buffering for some players.
         * 
         * @return builder
         * 
         */
        public Builder keyFrameIntervalInSeconds(Double keyFrameIntervalInSeconds) {
            return keyFrameIntervalInSeconds(Output.of(keyFrameIntervalInSeconds));
        }

        /**
         * @param maxBitrateBps The maximum bitrate in bits per second (threshold for the top video layer). For example, set as `6000000` to avoid producing very high bitrate outputs for contents with high complexity.
         * 
         * @return builder
         * 
         */
        public Builder maxBitrateBps(@Nullable Output<Integer> maxBitrateBps) {
            $.maxBitrateBps = maxBitrateBps;
            return this;
        }

        /**
         * @param maxBitrateBps The maximum bitrate in bits per second (threshold for the top video layer). For example, set as `6000000` to avoid producing very high bitrate outputs for contents with high complexity.
         * 
         * @return builder
         * 
         */
        public Builder maxBitrateBps(Integer maxBitrateBps) {
            return maxBitrateBps(Output.of(maxBitrateBps));
        }

        /**
         * @param maxHeight The maximum height of output video layers. For example, set as `720` to produce output layers up to 720P even if the input is 4K.
         * 
         * @return builder
         * 
         */
        public Builder maxHeight(@Nullable Output<Integer> maxHeight) {
            $.maxHeight = maxHeight;
            return this;
        }

        /**
         * @param maxHeight The maximum height of output video layers. For example, set as `720` to produce output layers up to 720P even if the input is 4K.
         * 
         * @return builder
         * 
         */
        public Builder maxHeight(Integer maxHeight) {
            return maxHeight(Output.of(maxHeight));
        }

        /**
         * @param maxLayers The maximum number of output video layers. For example, set as `4` to make sure at most 4 output layers are produced to control the overall cost of the encoding job.
         * 
         * @return builder
         * 
         */
        public Builder maxLayers(@Nullable Output<Integer> maxLayers) {
            $.maxLayers = maxLayers;
            return this;
        }

        /**
         * @param maxLayers The maximum number of output video layers. For example, set as `4` to make sure at most 4 output layers are produced to control the overall cost of the encoding job.
         * 
         * @return builder
         * 
         */
        public Builder maxLayers(Integer maxLayers) {
            return maxLayers(Output.of(maxLayers));
        }

        /**
         * @param minBitrateBps The minimum bitrate in bits per second (threshold for the bottom video layer). For example, set as `200000` to have a bottom layer that covers users with low network bandwidth.
         * 
         * @return builder
         * 
         */
        public Builder minBitrateBps(@Nullable Output<Integer> minBitrateBps) {
            $.minBitrateBps = minBitrateBps;
            return this;
        }

        /**
         * @param minBitrateBps The minimum bitrate in bits per second (threshold for the bottom video layer). For example, set as `200000` to have a bottom layer that covers users with low network bandwidth.
         * 
         * @return builder
         * 
         */
        public Builder minBitrateBps(Integer minBitrateBps) {
            return minBitrateBps(Output.of(minBitrateBps));
        }

        /**
         * @param minHeight The minimum height of output video layers. For example, set as `360` to avoid output layers of smaller resolutions like 180P.
         * 
         * @return builder
         * 
         */
        public Builder minHeight(@Nullable Output<Integer> minHeight) {
            $.minHeight = minHeight;
            return this;
        }

        /**
         * @param minHeight The minimum height of output video layers. For example, set as `360` to avoid output layers of smaller resolutions like 180P.
         * 
         * @return builder
         * 
         */
        public Builder minHeight(Integer minHeight) {
            return minHeight(Output.of(minHeight));
        }

        public TransformOutputBuiltinPresetPresetConfigurationArgs build() {
            return $;
        }
    }

}
