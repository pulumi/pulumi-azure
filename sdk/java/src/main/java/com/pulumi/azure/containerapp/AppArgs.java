// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerapp;

import com.pulumi.azure.containerapp.inputs.AppDaprArgs;
import com.pulumi.azure.containerapp.inputs.AppIdentityArgs;
import com.pulumi.azure.containerapp.inputs.AppIngressArgs;
import com.pulumi.azure.containerapp.inputs.AppRegistryArgs;
import com.pulumi.azure.containerapp.inputs.AppSecretArgs;
import com.pulumi.azure.containerapp.inputs.AppTemplateArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AppArgs extends com.pulumi.resources.ResourceArgs {

    public static final AppArgs Empty = new AppArgs();

    /**
     * The ID of the Container App Environment within which this Container App should exist. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="containerAppEnvironmentId", required=true)
    private Output<String> containerAppEnvironmentId;

    /**
     * @return The ID of the Container App Environment within which this Container App should exist. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> containerAppEnvironmentId() {
        return this.containerAppEnvironmentId;
    }

    /**
     * A `dapr` block as detailed below.
     * 
     */
    @Import(name="dapr")
    private @Nullable Output<AppDaprArgs> dapr;

    /**
     * @return A `dapr` block as detailed below.
     * 
     */
    public Optional<Output<AppDaprArgs>> dapr() {
        return Optional.ofNullable(this.dapr);
    }

    /**
     * An `identity` block as detailed below.
     * 
     */
    @Import(name="identity")
    private @Nullable Output<AppIdentityArgs> identity;

    /**
     * @return An `identity` block as detailed below.
     * 
     */
    public Optional<Output<AppIdentityArgs>> identity() {
        return Optional.ofNullable(this.identity);
    }

    /**
     * An `ingress` block as detailed below.
     * 
     */
    @Import(name="ingress")
    private @Nullable Output<AppIngressArgs> ingress;

    /**
     * @return An `ingress` block as detailed below.
     * 
     */
    public Optional<Output<AppIngressArgs>> ingress() {
        return Optional.ofNullable(this.ingress);
    }

    /**
     * The name for this Container App. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name for this Container App. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A `registry` block as detailed below.
     * 
     */
    @Import(name="registries")
    private @Nullable Output<List<AppRegistryArgs>> registries;

    /**
     * @return A `registry` block as detailed below.
     * 
     */
    public Optional<Output<List<AppRegistryArgs>>> registries() {
        return Optional.ofNullable(this.registries);
    }

    /**
     * The name of the resource group in which the Container App Environment is to be created. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group in which the Container App Environment is to be created. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The revisions operational mode for the Container App. Possible values include `Single` and `Multiple`. In `Single` mode, a single revision is in operation at any given time. In `Multiple` mode, more than one revision can be active at a time and can be configured with load distribution via the `traffic_weight` block in the `ingress` configuration.
     * 
     */
    @Import(name="revisionMode", required=true)
    private Output<String> revisionMode;

    /**
     * @return The revisions operational mode for the Container App. Possible values include `Single` and `Multiple`. In `Single` mode, a single revision is in operation at any given time. In `Multiple` mode, more than one revision can be active at a time and can be configured with load distribution via the `traffic_weight` block in the `ingress` configuration.
     * 
     */
    public Output<String> revisionMode() {
        return this.revisionMode;
    }

    /**
     * One or more `secret` block as detailed below.
     * 
     */
    @Import(name="secrets")
    private @Nullable Output<List<AppSecretArgs>> secrets;

    /**
     * @return One or more `secret` block as detailed below.
     * 
     */
    public Optional<Output<List<AppSecretArgs>>> secrets() {
        return Optional.ofNullable(this.secrets);
    }

    /**
     * A mapping of tags to assign to the Container App.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the Container App.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A `template` block as detailed below.
     * 
     */
    @Import(name="template", required=true)
    private Output<AppTemplateArgs> template;

    /**
     * @return A `template` block as detailed below.
     * 
     */
    public Output<AppTemplateArgs> template() {
        return this.template;
    }

    /**
     * The name of the Workload Profile in the Container App Environment to place this Container App.
     * 
     * &gt; **Note:** Omit this value to use the default `Consumption` Workload Profile.
     * 
     */
    @Import(name="workloadProfileName")
    private @Nullable Output<String> workloadProfileName;

    /**
     * @return The name of the Workload Profile in the Container App Environment to place this Container App.
     * 
     * &gt; **Note:** Omit this value to use the default `Consumption` Workload Profile.
     * 
     */
    public Optional<Output<String>> workloadProfileName() {
        return Optional.ofNullable(this.workloadProfileName);
    }

    private AppArgs() {}

    private AppArgs(AppArgs $) {
        this.containerAppEnvironmentId = $.containerAppEnvironmentId;
        this.dapr = $.dapr;
        this.identity = $.identity;
        this.ingress = $.ingress;
        this.name = $.name;
        this.registries = $.registries;
        this.resourceGroupName = $.resourceGroupName;
        this.revisionMode = $.revisionMode;
        this.secrets = $.secrets;
        this.tags = $.tags;
        this.template = $.template;
        this.workloadProfileName = $.workloadProfileName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppArgs $;

        public Builder() {
            $ = new AppArgs();
        }

        public Builder(AppArgs defaults) {
            $ = new AppArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param containerAppEnvironmentId The ID of the Container App Environment within which this Container App should exist. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder containerAppEnvironmentId(Output<String> containerAppEnvironmentId) {
            $.containerAppEnvironmentId = containerAppEnvironmentId;
            return this;
        }

        /**
         * @param containerAppEnvironmentId The ID of the Container App Environment within which this Container App should exist. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder containerAppEnvironmentId(String containerAppEnvironmentId) {
            return containerAppEnvironmentId(Output.of(containerAppEnvironmentId));
        }

        /**
         * @param dapr A `dapr` block as detailed below.
         * 
         * @return builder
         * 
         */
        public Builder dapr(@Nullable Output<AppDaprArgs> dapr) {
            $.dapr = dapr;
            return this;
        }

        /**
         * @param dapr A `dapr` block as detailed below.
         * 
         * @return builder
         * 
         */
        public Builder dapr(AppDaprArgs dapr) {
            return dapr(Output.of(dapr));
        }

        /**
         * @param identity An `identity` block as detailed below.
         * 
         * @return builder
         * 
         */
        public Builder identity(@Nullable Output<AppIdentityArgs> identity) {
            $.identity = identity;
            return this;
        }

        /**
         * @param identity An `identity` block as detailed below.
         * 
         * @return builder
         * 
         */
        public Builder identity(AppIdentityArgs identity) {
            return identity(Output.of(identity));
        }

        /**
         * @param ingress An `ingress` block as detailed below.
         * 
         * @return builder
         * 
         */
        public Builder ingress(@Nullable Output<AppIngressArgs> ingress) {
            $.ingress = ingress;
            return this;
        }

        /**
         * @param ingress An `ingress` block as detailed below.
         * 
         * @return builder
         * 
         */
        public Builder ingress(AppIngressArgs ingress) {
            return ingress(Output.of(ingress));
        }

        /**
         * @param name The name for this Container App. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name for this Container App. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param registries A `registry` block as detailed below.
         * 
         * @return builder
         * 
         */
        public Builder registries(@Nullable Output<List<AppRegistryArgs>> registries) {
            $.registries = registries;
            return this;
        }

        /**
         * @param registries A `registry` block as detailed below.
         * 
         * @return builder
         * 
         */
        public Builder registries(List<AppRegistryArgs> registries) {
            return registries(Output.of(registries));
        }

        /**
         * @param registries A `registry` block as detailed below.
         * 
         * @return builder
         * 
         */
        public Builder registries(AppRegistryArgs... registries) {
            return registries(List.of(registries));
        }

        /**
         * @param resourceGroupName The name of the resource group in which the Container App Environment is to be created. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group in which the Container App Environment is to be created. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param revisionMode The revisions operational mode for the Container App. Possible values include `Single` and `Multiple`. In `Single` mode, a single revision is in operation at any given time. In `Multiple` mode, more than one revision can be active at a time and can be configured with load distribution via the `traffic_weight` block in the `ingress` configuration.
         * 
         * @return builder
         * 
         */
        public Builder revisionMode(Output<String> revisionMode) {
            $.revisionMode = revisionMode;
            return this;
        }

        /**
         * @param revisionMode The revisions operational mode for the Container App. Possible values include `Single` and `Multiple`. In `Single` mode, a single revision is in operation at any given time. In `Multiple` mode, more than one revision can be active at a time and can be configured with load distribution via the `traffic_weight` block in the `ingress` configuration.
         * 
         * @return builder
         * 
         */
        public Builder revisionMode(String revisionMode) {
            return revisionMode(Output.of(revisionMode));
        }

        /**
         * @param secrets One or more `secret` block as detailed below.
         * 
         * @return builder
         * 
         */
        public Builder secrets(@Nullable Output<List<AppSecretArgs>> secrets) {
            $.secrets = secrets;
            return this;
        }

        /**
         * @param secrets One or more `secret` block as detailed below.
         * 
         * @return builder
         * 
         */
        public Builder secrets(List<AppSecretArgs> secrets) {
            return secrets(Output.of(secrets));
        }

        /**
         * @param secrets One or more `secret` block as detailed below.
         * 
         * @return builder
         * 
         */
        public Builder secrets(AppSecretArgs... secrets) {
            return secrets(List.of(secrets));
        }

        /**
         * @param tags A mapping of tags to assign to the Container App.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags to assign to the Container App.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param template A `template` block as detailed below.
         * 
         * @return builder
         * 
         */
        public Builder template(Output<AppTemplateArgs> template) {
            $.template = template;
            return this;
        }

        /**
         * @param template A `template` block as detailed below.
         * 
         * @return builder
         * 
         */
        public Builder template(AppTemplateArgs template) {
            return template(Output.of(template));
        }

        /**
         * @param workloadProfileName The name of the Workload Profile in the Container App Environment to place this Container App.
         * 
         * &gt; **Note:** Omit this value to use the default `Consumption` Workload Profile.
         * 
         * @return builder
         * 
         */
        public Builder workloadProfileName(@Nullable Output<String> workloadProfileName) {
            $.workloadProfileName = workloadProfileName;
            return this;
        }

        /**
         * @param workloadProfileName The name of the Workload Profile in the Container App Environment to place this Container App.
         * 
         * &gt; **Note:** Omit this value to use the default `Consumption` Workload Profile.
         * 
         * @return builder
         * 
         */
        public Builder workloadProfileName(String workloadProfileName) {
            return workloadProfileName(Output.of(workloadProfileName));
        }

        public AppArgs build() {
            if ($.containerAppEnvironmentId == null) {
                throw new MissingRequiredPropertyException("AppArgs", "containerAppEnvironmentId");
            }
            if ($.resourceGroupName == null) {
                throw new MissingRequiredPropertyException("AppArgs", "resourceGroupName");
            }
            if ($.revisionMode == null) {
                throw new MissingRequiredPropertyException("AppArgs", "revisionMode");
            }
            if ($.template == null) {
                throw new MissingRequiredPropertyException("AppArgs", "template");
            }
            return $;
        }
    }

}
