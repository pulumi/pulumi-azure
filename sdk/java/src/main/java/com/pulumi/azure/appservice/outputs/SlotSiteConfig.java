// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appservice.outputs;

import com.pulumi.azure.appservice.outputs.SlotSiteConfigCors;
import com.pulumi.azure.appservice.outputs.SlotSiteConfigIpRestriction;
import com.pulumi.azure.appservice.outputs.SlotSiteConfigScmIpRestriction;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SlotSiteConfig {
    /**
     * @return Are Managed Identity Credentials used for Azure Container Registry pull
     * 
     */
    private @Nullable Boolean acrUseManagedIdentityCredentials;
    /**
     * @return If using User Managed Identity, the User Managed Identity Client Id
     * 
     * &gt; **NOTE:** When using User Managed Identity with Azure Container Registry the Identity will need to have the [ACRPull role assigned](https://docs.microsoft.com/azure/container-registry/container-registry-authentication-managed-identity#example-1-access-with-a-user-assigned-identity)
     * 
     */
    private @Nullable String acrUserManagedIdentityClientId;
    /**
     * @return Should the slot be loaded at all times? Defaults to `false`.
     * 
     * &gt; **NOTE:** when using an App Service Plan in the `Free` or `Shared` Tiers `always_on` must be set to `false`.
     * 
     */
    private @Nullable Boolean alwaysOn;
    /**
     * @return App command line to launch, e.g. `/sbin/myserver -b 0.0.0.0`.
     * 
     */
    private @Nullable String appCommandLine;
    /**
     * @return The name of the slot to automatically swap to during deployment
     * 
     */
    private @Nullable String autoSwapSlotName;
    /**
     * @return A `cors` block as defined below.
     * 
     */
    private @Nullable SlotSiteConfigCors cors;
    /**
     * @return The ordering of default documents to load, if an address isn&#39;t specified.
     * 
     */
    private @Nullable List<String> defaultDocuments;
    /**
     * @return The version of the .NET framework&#39;s CLR used in this App Service Slot. Possible values are `v2.0` (which will use the latest version of the .NET framework for the .NET CLR v2 - currently `.net 3.5`), `v4.0` (which corresponds to the latest version of the .NET CLR v4 - which at the time of writing is `.net 4.7.1`), `v5.0` and `v6.0`. [For more information on which .NET CLR version to use based on the .NET framework you&#39;re targeting - please see this table](https://en.wikipedia.org/wiki/.NET_Framework_version_history#Overview). Defaults to `v4.0`.
     * 
     */
    private @Nullable String dotnetFrameworkVersion;
    /**
     * @return State of FTP / FTPS service for this App Service Slot. Possible values include: `AllAllowed`, `FtpsOnly` and `Disabled`.
     * 
     */
    private @Nullable String ftpsState;
    /**
     * @return The health check path to be pinged by App Service Slot. [For more information - please see App Service health check announcement](https://azure.github.io/AppService/2020/08/24/healthcheck-on-app-service.html).
     * 
     */
    private @Nullable String healthCheckPath;
    /**
     * @return Is HTTP2 Enabled on this App Service? Defaults to `false`.
     * 
     */
    private @Nullable Boolean http2Enabled;
    /**
     * @return A list of objects representing ip restrictions as defined below.
     * 
     * &gt; **NOTE** User has to explicitly set `ip_restriction` to empty slice (`[]`) to remove it.
     * 
     */
    private @Nullable List<SlotSiteConfigIpRestriction> ipRestrictions;
    /**
     * @return The Java Container to use. If specified `java_version` and `java_container_version` must also be specified. Possible values are `JAVA`, `JETTY`, and `TOMCAT`.
     * 
     */
    private @Nullable String javaContainer;
    /**
     * @return The version of the Java Container to use. If specified `java_version` and `java_container` must also be specified.
     * 
     */
    private @Nullable String javaContainerVersion;
    /**
     * @return The version of Java to use. If specified `java_container` and `java_container_version` must also be specified. Possible values are `1.7`, `1.8`, and `11` and their specific versions - except for Java 11 (e.g. `1.7.0_80`, `1.8.0_181`, `11`)
     * 
     */
    private @Nullable String javaVersion;
    /**
     * @return Linux App Framework and version for the App Service Slot. Possible options are a Docker container (`DOCKER|&lt;user/image:tag&gt;`), a base-64 encoded Docker Compose file (`COMPOSE|${filebase64(&#34;compose.yml&#34;)}`) or a base-64 encoded Kubernetes Manifest (`KUBE|${filebase64(&#34;kubernetes.yml&#34;)}`).
     * 
     * &gt; **NOTE:** To set this property the App Service Plan to which the App belongs must be configured with `kind = &#34;Linux&#34;`, and `reserved = true` or the API will reject any value supplied.
     * 
     */
    private @Nullable String linuxFxVersion;
    /**
     * @return Is &#34;MySQL In App&#34; Enabled? This runs a local MySQL instance with your app and shares resources from the App Service plan.
     * 
     * &gt; **NOTE:** MySQL In App is not intended for production environments and will not scale beyond a single instance. Instead you may wish to use Azure Database for MySQL.
     * 
     */
    private @Nullable Boolean localMysqlEnabled;
    /**
     * @return The Managed Pipeline Mode. Possible values are `Integrated` and `Classic`. Defaults to `Integrated`.
     * 
     */
    private @Nullable String managedPipelineMode;
    /**
     * @return The minimum supported TLS version for the app service. Possible values are `1.0`, `1.1`, and `1.2`. Defaults to `1.2` for new app services.
     * 
     */
    private @Nullable String minTlsVersion;
    /**
     * @return The scaled number of workers (for per site scaling) of this App Service Slot. Requires that `per_site_scaling` is enabled on the `azure.appservice.Plan`. [For more information - please see Microsoft documentation on high-density hosting](https://docs.microsoft.com/azure/app-service/manage-scale-per-app).
     * 
     */
    private @Nullable Integer numberOfWorkers;
    /**
     * @return The version of PHP to use in this App Service Slot. Possible values are `5.5`, `5.6`, `7.0`, `7.1`, `7.2`, `7.3`, and `7.4`.
     * 
     */
    private @Nullable String phpVersion;
    /**
     * @return The version of Python to use in this App Service Slot. Possible values are `2.7` and `3.4`.
     * 
     */
    private @Nullable String pythonVersion;
    /**
     * @return Is Remote Debugging Enabled? Defaults to `false`.
     * 
     */
    private @Nullable Boolean remoteDebuggingEnabled;
    /**
     * @return Which version of Visual Studio should the Remote Debugger be compatible with? Possible values are `VS2017` and `VS2019`.
     * 
     */
    private @Nullable String remoteDebuggingVersion;
    /**
     * @return A list of `scm_ip_restriction` objects representing IP restrictions as defined below.
     * 
     * &gt; **NOTE** User has to explicitly set `scm_ip_restriction` to empty slice (`[]`) to remove it.
     * 
     */
    private @Nullable List<SlotSiteConfigScmIpRestriction> scmIpRestrictions;
    /**
     * @return The type of Source Control enabled for this App Service Slot. Defaults to `None`. Possible values are: `BitbucketGit`, `BitbucketHg`, `CodePlexGit`, `CodePlexHg`, `Dropbox`, `ExternalGit`, `ExternalHg`, `GitHub`, `LocalGit`, `None`, `OneDrive`, `Tfs`, `VSO`, and `VSTSRM`
     * 
     */
    private @Nullable String scmType;
    /**
     * @return IP security restrictions for scm to use main. Defaults to `false`.
     * 
     * &gt; **NOTE** Any `scm_ip_restriction` blocks configured are ignored by the service when `scm_use_main_ip_restriction` is set to `true`. Any scm restrictions will become active if this is subsequently set to `false` or removed.
     * 
     */
    private @Nullable Boolean scmUseMainIpRestriction;
    /**
     * @return Should the App Service Slot run in 32 bit mode, rather than 64 bit mode?
     * 
     * &gt; **NOTE:** when using an App Service Plan in the `Free` or `Shared` Tiers `use_32_bit_worker_process` must be set to `true`.
     * 
     */
    private @Nullable Boolean use32BitWorkerProcess;
    private @Nullable Boolean vnetRouteAllEnabled;
    /**
     * @return Should WebSockets be enabled?
     * 
     */
    private @Nullable Boolean websocketsEnabled;
    private @Nullable String windowsFxVersion;

    private SlotSiteConfig() {}
    /**
     * @return Are Managed Identity Credentials used for Azure Container Registry pull
     * 
     */
    public Optional<Boolean> acrUseManagedIdentityCredentials() {
        return Optional.ofNullable(this.acrUseManagedIdentityCredentials);
    }
    /**
     * @return If using User Managed Identity, the User Managed Identity Client Id
     * 
     * &gt; **NOTE:** When using User Managed Identity with Azure Container Registry the Identity will need to have the [ACRPull role assigned](https://docs.microsoft.com/azure/container-registry/container-registry-authentication-managed-identity#example-1-access-with-a-user-assigned-identity)
     * 
     */
    public Optional<String> acrUserManagedIdentityClientId() {
        return Optional.ofNullable(this.acrUserManagedIdentityClientId);
    }
    /**
     * @return Should the slot be loaded at all times? Defaults to `false`.
     * 
     * &gt; **NOTE:** when using an App Service Plan in the `Free` or `Shared` Tiers `always_on` must be set to `false`.
     * 
     */
    public Optional<Boolean> alwaysOn() {
        return Optional.ofNullable(this.alwaysOn);
    }
    /**
     * @return App command line to launch, e.g. `/sbin/myserver -b 0.0.0.0`.
     * 
     */
    public Optional<String> appCommandLine() {
        return Optional.ofNullable(this.appCommandLine);
    }
    /**
     * @return The name of the slot to automatically swap to during deployment
     * 
     */
    public Optional<String> autoSwapSlotName() {
        return Optional.ofNullable(this.autoSwapSlotName);
    }
    /**
     * @return A `cors` block as defined below.
     * 
     */
    public Optional<SlotSiteConfigCors> cors() {
        return Optional.ofNullable(this.cors);
    }
    /**
     * @return The ordering of default documents to load, if an address isn&#39;t specified.
     * 
     */
    public List<String> defaultDocuments() {
        return this.defaultDocuments == null ? List.of() : this.defaultDocuments;
    }
    /**
     * @return The version of the .NET framework&#39;s CLR used in this App Service Slot. Possible values are `v2.0` (which will use the latest version of the .NET framework for the .NET CLR v2 - currently `.net 3.5`), `v4.0` (which corresponds to the latest version of the .NET CLR v4 - which at the time of writing is `.net 4.7.1`), `v5.0` and `v6.0`. [For more information on which .NET CLR version to use based on the .NET framework you&#39;re targeting - please see this table](https://en.wikipedia.org/wiki/.NET_Framework_version_history#Overview). Defaults to `v4.0`.
     * 
     */
    public Optional<String> dotnetFrameworkVersion() {
        return Optional.ofNullable(this.dotnetFrameworkVersion);
    }
    /**
     * @return State of FTP / FTPS service for this App Service Slot. Possible values include: `AllAllowed`, `FtpsOnly` and `Disabled`.
     * 
     */
    public Optional<String> ftpsState() {
        return Optional.ofNullable(this.ftpsState);
    }
    /**
     * @return The health check path to be pinged by App Service Slot. [For more information - please see App Service health check announcement](https://azure.github.io/AppService/2020/08/24/healthcheck-on-app-service.html).
     * 
     */
    public Optional<String> healthCheckPath() {
        return Optional.ofNullable(this.healthCheckPath);
    }
    /**
     * @return Is HTTP2 Enabled on this App Service? Defaults to `false`.
     * 
     */
    public Optional<Boolean> http2Enabled() {
        return Optional.ofNullable(this.http2Enabled);
    }
    /**
     * @return A list of objects representing ip restrictions as defined below.
     * 
     * &gt; **NOTE** User has to explicitly set `ip_restriction` to empty slice (`[]`) to remove it.
     * 
     */
    public List<SlotSiteConfigIpRestriction> ipRestrictions() {
        return this.ipRestrictions == null ? List.of() : this.ipRestrictions;
    }
    /**
     * @return The Java Container to use. If specified `java_version` and `java_container_version` must also be specified. Possible values are `JAVA`, `JETTY`, and `TOMCAT`.
     * 
     */
    public Optional<String> javaContainer() {
        return Optional.ofNullable(this.javaContainer);
    }
    /**
     * @return The version of the Java Container to use. If specified `java_version` and `java_container` must also be specified.
     * 
     */
    public Optional<String> javaContainerVersion() {
        return Optional.ofNullable(this.javaContainerVersion);
    }
    /**
     * @return The version of Java to use. If specified `java_container` and `java_container_version` must also be specified. Possible values are `1.7`, `1.8`, and `11` and their specific versions - except for Java 11 (e.g. `1.7.0_80`, `1.8.0_181`, `11`)
     * 
     */
    public Optional<String> javaVersion() {
        return Optional.ofNullable(this.javaVersion);
    }
    /**
     * @return Linux App Framework and version for the App Service Slot. Possible options are a Docker container (`DOCKER|&lt;user/image:tag&gt;`), a base-64 encoded Docker Compose file (`COMPOSE|${filebase64(&#34;compose.yml&#34;)}`) or a base-64 encoded Kubernetes Manifest (`KUBE|${filebase64(&#34;kubernetes.yml&#34;)}`).
     * 
     * &gt; **NOTE:** To set this property the App Service Plan to which the App belongs must be configured with `kind = &#34;Linux&#34;`, and `reserved = true` or the API will reject any value supplied.
     * 
     */
    public Optional<String> linuxFxVersion() {
        return Optional.ofNullable(this.linuxFxVersion);
    }
    /**
     * @return Is &#34;MySQL In App&#34; Enabled? This runs a local MySQL instance with your app and shares resources from the App Service plan.
     * 
     * &gt; **NOTE:** MySQL In App is not intended for production environments and will not scale beyond a single instance. Instead you may wish to use Azure Database for MySQL.
     * 
     */
    public Optional<Boolean> localMysqlEnabled() {
        return Optional.ofNullable(this.localMysqlEnabled);
    }
    /**
     * @return The Managed Pipeline Mode. Possible values are `Integrated` and `Classic`. Defaults to `Integrated`.
     * 
     */
    public Optional<String> managedPipelineMode() {
        return Optional.ofNullable(this.managedPipelineMode);
    }
    /**
     * @return The minimum supported TLS version for the app service. Possible values are `1.0`, `1.1`, and `1.2`. Defaults to `1.2` for new app services.
     * 
     */
    public Optional<String> minTlsVersion() {
        return Optional.ofNullable(this.minTlsVersion);
    }
    /**
     * @return The scaled number of workers (for per site scaling) of this App Service Slot. Requires that `per_site_scaling` is enabled on the `azure.appservice.Plan`. [For more information - please see Microsoft documentation on high-density hosting](https://docs.microsoft.com/azure/app-service/manage-scale-per-app).
     * 
     */
    public Optional<Integer> numberOfWorkers() {
        return Optional.ofNullable(this.numberOfWorkers);
    }
    /**
     * @return The version of PHP to use in this App Service Slot. Possible values are `5.5`, `5.6`, `7.0`, `7.1`, `7.2`, `7.3`, and `7.4`.
     * 
     */
    public Optional<String> phpVersion() {
        return Optional.ofNullable(this.phpVersion);
    }
    /**
     * @return The version of Python to use in this App Service Slot. Possible values are `2.7` and `3.4`.
     * 
     */
    public Optional<String> pythonVersion() {
        return Optional.ofNullable(this.pythonVersion);
    }
    /**
     * @return Is Remote Debugging Enabled? Defaults to `false`.
     * 
     */
    public Optional<Boolean> remoteDebuggingEnabled() {
        return Optional.ofNullable(this.remoteDebuggingEnabled);
    }
    /**
     * @return Which version of Visual Studio should the Remote Debugger be compatible with? Possible values are `VS2017` and `VS2019`.
     * 
     */
    public Optional<String> remoteDebuggingVersion() {
        return Optional.ofNullable(this.remoteDebuggingVersion);
    }
    /**
     * @return A list of `scm_ip_restriction` objects representing IP restrictions as defined below.
     * 
     * &gt; **NOTE** User has to explicitly set `scm_ip_restriction` to empty slice (`[]`) to remove it.
     * 
     */
    public List<SlotSiteConfigScmIpRestriction> scmIpRestrictions() {
        return this.scmIpRestrictions == null ? List.of() : this.scmIpRestrictions;
    }
    /**
     * @return The type of Source Control enabled for this App Service Slot. Defaults to `None`. Possible values are: `BitbucketGit`, `BitbucketHg`, `CodePlexGit`, `CodePlexHg`, `Dropbox`, `ExternalGit`, `ExternalHg`, `GitHub`, `LocalGit`, `None`, `OneDrive`, `Tfs`, `VSO`, and `VSTSRM`
     * 
     */
    public Optional<String> scmType() {
        return Optional.ofNullable(this.scmType);
    }
    /**
     * @return IP security restrictions for scm to use main. Defaults to `false`.
     * 
     * &gt; **NOTE** Any `scm_ip_restriction` blocks configured are ignored by the service when `scm_use_main_ip_restriction` is set to `true`. Any scm restrictions will become active if this is subsequently set to `false` or removed.
     * 
     */
    public Optional<Boolean> scmUseMainIpRestriction() {
        return Optional.ofNullable(this.scmUseMainIpRestriction);
    }
    /**
     * @return Should the App Service Slot run in 32 bit mode, rather than 64 bit mode?
     * 
     * &gt; **NOTE:** when using an App Service Plan in the `Free` or `Shared` Tiers `use_32_bit_worker_process` must be set to `true`.
     * 
     */
    public Optional<Boolean> use32BitWorkerProcess() {
        return Optional.ofNullable(this.use32BitWorkerProcess);
    }
    public Optional<Boolean> vnetRouteAllEnabled() {
        return Optional.ofNullable(this.vnetRouteAllEnabled);
    }
    /**
     * @return Should WebSockets be enabled?
     * 
     */
    public Optional<Boolean> websocketsEnabled() {
        return Optional.ofNullable(this.websocketsEnabled);
    }
    public Optional<String> windowsFxVersion() {
        return Optional.ofNullable(this.windowsFxVersion);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SlotSiteConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean acrUseManagedIdentityCredentials;
        private @Nullable String acrUserManagedIdentityClientId;
        private @Nullable Boolean alwaysOn;
        private @Nullable String appCommandLine;
        private @Nullable String autoSwapSlotName;
        private @Nullable SlotSiteConfigCors cors;
        private @Nullable List<String> defaultDocuments;
        private @Nullable String dotnetFrameworkVersion;
        private @Nullable String ftpsState;
        private @Nullable String healthCheckPath;
        private @Nullable Boolean http2Enabled;
        private @Nullable List<SlotSiteConfigIpRestriction> ipRestrictions;
        private @Nullable String javaContainer;
        private @Nullable String javaContainerVersion;
        private @Nullable String javaVersion;
        private @Nullable String linuxFxVersion;
        private @Nullable Boolean localMysqlEnabled;
        private @Nullable String managedPipelineMode;
        private @Nullable String minTlsVersion;
        private @Nullable Integer numberOfWorkers;
        private @Nullable String phpVersion;
        private @Nullable String pythonVersion;
        private @Nullable Boolean remoteDebuggingEnabled;
        private @Nullable String remoteDebuggingVersion;
        private @Nullable List<SlotSiteConfigScmIpRestriction> scmIpRestrictions;
        private @Nullable String scmType;
        private @Nullable Boolean scmUseMainIpRestriction;
        private @Nullable Boolean use32BitWorkerProcess;
        private @Nullable Boolean vnetRouteAllEnabled;
        private @Nullable Boolean websocketsEnabled;
        private @Nullable String windowsFxVersion;
        public Builder() {}
        public Builder(SlotSiteConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acrUseManagedIdentityCredentials = defaults.acrUseManagedIdentityCredentials;
    	      this.acrUserManagedIdentityClientId = defaults.acrUserManagedIdentityClientId;
    	      this.alwaysOn = defaults.alwaysOn;
    	      this.appCommandLine = defaults.appCommandLine;
    	      this.autoSwapSlotName = defaults.autoSwapSlotName;
    	      this.cors = defaults.cors;
    	      this.defaultDocuments = defaults.defaultDocuments;
    	      this.dotnetFrameworkVersion = defaults.dotnetFrameworkVersion;
    	      this.ftpsState = defaults.ftpsState;
    	      this.healthCheckPath = defaults.healthCheckPath;
    	      this.http2Enabled = defaults.http2Enabled;
    	      this.ipRestrictions = defaults.ipRestrictions;
    	      this.javaContainer = defaults.javaContainer;
    	      this.javaContainerVersion = defaults.javaContainerVersion;
    	      this.javaVersion = defaults.javaVersion;
    	      this.linuxFxVersion = defaults.linuxFxVersion;
    	      this.localMysqlEnabled = defaults.localMysqlEnabled;
    	      this.managedPipelineMode = defaults.managedPipelineMode;
    	      this.minTlsVersion = defaults.minTlsVersion;
    	      this.numberOfWorkers = defaults.numberOfWorkers;
    	      this.phpVersion = defaults.phpVersion;
    	      this.pythonVersion = defaults.pythonVersion;
    	      this.remoteDebuggingEnabled = defaults.remoteDebuggingEnabled;
    	      this.remoteDebuggingVersion = defaults.remoteDebuggingVersion;
    	      this.scmIpRestrictions = defaults.scmIpRestrictions;
    	      this.scmType = defaults.scmType;
    	      this.scmUseMainIpRestriction = defaults.scmUseMainIpRestriction;
    	      this.use32BitWorkerProcess = defaults.use32BitWorkerProcess;
    	      this.vnetRouteAllEnabled = defaults.vnetRouteAllEnabled;
    	      this.websocketsEnabled = defaults.websocketsEnabled;
    	      this.windowsFxVersion = defaults.windowsFxVersion;
        }

        @CustomType.Setter
        public Builder acrUseManagedIdentityCredentials(@Nullable Boolean acrUseManagedIdentityCredentials) {

            this.acrUseManagedIdentityCredentials = acrUseManagedIdentityCredentials;
            return this;
        }
        @CustomType.Setter
        public Builder acrUserManagedIdentityClientId(@Nullable String acrUserManagedIdentityClientId) {

            this.acrUserManagedIdentityClientId = acrUserManagedIdentityClientId;
            return this;
        }
        @CustomType.Setter
        public Builder alwaysOn(@Nullable Boolean alwaysOn) {

            this.alwaysOn = alwaysOn;
            return this;
        }
        @CustomType.Setter
        public Builder appCommandLine(@Nullable String appCommandLine) {

            this.appCommandLine = appCommandLine;
            return this;
        }
        @CustomType.Setter
        public Builder autoSwapSlotName(@Nullable String autoSwapSlotName) {

            this.autoSwapSlotName = autoSwapSlotName;
            return this;
        }
        @CustomType.Setter
        public Builder cors(@Nullable SlotSiteConfigCors cors) {

            this.cors = cors;
            return this;
        }
        @CustomType.Setter
        public Builder defaultDocuments(@Nullable List<String> defaultDocuments) {

            this.defaultDocuments = defaultDocuments;
            return this;
        }
        public Builder defaultDocuments(String... defaultDocuments) {
            return defaultDocuments(List.of(defaultDocuments));
        }
        @CustomType.Setter
        public Builder dotnetFrameworkVersion(@Nullable String dotnetFrameworkVersion) {

            this.dotnetFrameworkVersion = dotnetFrameworkVersion;
            return this;
        }
        @CustomType.Setter
        public Builder ftpsState(@Nullable String ftpsState) {

            this.ftpsState = ftpsState;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckPath(@Nullable String healthCheckPath) {

            this.healthCheckPath = healthCheckPath;
            return this;
        }
        @CustomType.Setter
        public Builder http2Enabled(@Nullable Boolean http2Enabled) {

            this.http2Enabled = http2Enabled;
            return this;
        }
        @CustomType.Setter
        public Builder ipRestrictions(@Nullable List<SlotSiteConfigIpRestriction> ipRestrictions) {

            this.ipRestrictions = ipRestrictions;
            return this;
        }
        public Builder ipRestrictions(SlotSiteConfigIpRestriction... ipRestrictions) {
            return ipRestrictions(List.of(ipRestrictions));
        }
        @CustomType.Setter
        public Builder javaContainer(@Nullable String javaContainer) {

            this.javaContainer = javaContainer;
            return this;
        }
        @CustomType.Setter
        public Builder javaContainerVersion(@Nullable String javaContainerVersion) {

            this.javaContainerVersion = javaContainerVersion;
            return this;
        }
        @CustomType.Setter
        public Builder javaVersion(@Nullable String javaVersion) {

            this.javaVersion = javaVersion;
            return this;
        }
        @CustomType.Setter
        public Builder linuxFxVersion(@Nullable String linuxFxVersion) {

            this.linuxFxVersion = linuxFxVersion;
            return this;
        }
        @CustomType.Setter
        public Builder localMysqlEnabled(@Nullable Boolean localMysqlEnabled) {

            this.localMysqlEnabled = localMysqlEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder managedPipelineMode(@Nullable String managedPipelineMode) {

            this.managedPipelineMode = managedPipelineMode;
            return this;
        }
        @CustomType.Setter
        public Builder minTlsVersion(@Nullable String minTlsVersion) {

            this.minTlsVersion = minTlsVersion;
            return this;
        }
        @CustomType.Setter
        public Builder numberOfWorkers(@Nullable Integer numberOfWorkers) {

            this.numberOfWorkers = numberOfWorkers;
            return this;
        }
        @CustomType.Setter
        public Builder phpVersion(@Nullable String phpVersion) {

            this.phpVersion = phpVersion;
            return this;
        }
        @CustomType.Setter
        public Builder pythonVersion(@Nullable String pythonVersion) {

            this.pythonVersion = pythonVersion;
            return this;
        }
        @CustomType.Setter
        public Builder remoteDebuggingEnabled(@Nullable Boolean remoteDebuggingEnabled) {

            this.remoteDebuggingEnabled = remoteDebuggingEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder remoteDebuggingVersion(@Nullable String remoteDebuggingVersion) {

            this.remoteDebuggingVersion = remoteDebuggingVersion;
            return this;
        }
        @CustomType.Setter
        public Builder scmIpRestrictions(@Nullable List<SlotSiteConfigScmIpRestriction> scmIpRestrictions) {

            this.scmIpRestrictions = scmIpRestrictions;
            return this;
        }
        public Builder scmIpRestrictions(SlotSiteConfigScmIpRestriction... scmIpRestrictions) {
            return scmIpRestrictions(List.of(scmIpRestrictions));
        }
        @CustomType.Setter
        public Builder scmType(@Nullable String scmType) {

            this.scmType = scmType;
            return this;
        }
        @CustomType.Setter
        public Builder scmUseMainIpRestriction(@Nullable Boolean scmUseMainIpRestriction) {

            this.scmUseMainIpRestriction = scmUseMainIpRestriction;
            return this;
        }
        @CustomType.Setter
        public Builder use32BitWorkerProcess(@Nullable Boolean use32BitWorkerProcess) {

            this.use32BitWorkerProcess = use32BitWorkerProcess;
            return this;
        }
        @CustomType.Setter
        public Builder vnetRouteAllEnabled(@Nullable Boolean vnetRouteAllEnabled) {

            this.vnetRouteAllEnabled = vnetRouteAllEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder websocketsEnabled(@Nullable Boolean websocketsEnabled) {

            this.websocketsEnabled = websocketsEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder windowsFxVersion(@Nullable String windowsFxVersion) {

            this.windowsFxVersion = windowsFxVersion;
            return this;
        }
        public SlotSiteConfig build() {
            final var _resultValue = new SlotSiteConfig();
            _resultValue.acrUseManagedIdentityCredentials = acrUseManagedIdentityCredentials;
            _resultValue.acrUserManagedIdentityClientId = acrUserManagedIdentityClientId;
            _resultValue.alwaysOn = alwaysOn;
            _resultValue.appCommandLine = appCommandLine;
            _resultValue.autoSwapSlotName = autoSwapSlotName;
            _resultValue.cors = cors;
            _resultValue.defaultDocuments = defaultDocuments;
            _resultValue.dotnetFrameworkVersion = dotnetFrameworkVersion;
            _resultValue.ftpsState = ftpsState;
            _resultValue.healthCheckPath = healthCheckPath;
            _resultValue.http2Enabled = http2Enabled;
            _resultValue.ipRestrictions = ipRestrictions;
            _resultValue.javaContainer = javaContainer;
            _resultValue.javaContainerVersion = javaContainerVersion;
            _resultValue.javaVersion = javaVersion;
            _resultValue.linuxFxVersion = linuxFxVersion;
            _resultValue.localMysqlEnabled = localMysqlEnabled;
            _resultValue.managedPipelineMode = managedPipelineMode;
            _resultValue.minTlsVersion = minTlsVersion;
            _resultValue.numberOfWorkers = numberOfWorkers;
            _resultValue.phpVersion = phpVersion;
            _resultValue.pythonVersion = pythonVersion;
            _resultValue.remoteDebuggingEnabled = remoteDebuggingEnabled;
            _resultValue.remoteDebuggingVersion = remoteDebuggingVersion;
            _resultValue.scmIpRestrictions = scmIpRestrictions;
            _resultValue.scmType = scmType;
            _resultValue.scmUseMainIpRestriction = scmUseMainIpRestriction;
            _resultValue.use32BitWorkerProcess = use32BitWorkerProcess;
            _resultValue.vnetRouteAllEnabled = vnetRouteAllEnabled;
            _resultValue.websocketsEnabled = websocketsEnabled;
            _resultValue.windowsFxVersion = windowsFxVersion;
            return _resultValue;
        }
    }
}
