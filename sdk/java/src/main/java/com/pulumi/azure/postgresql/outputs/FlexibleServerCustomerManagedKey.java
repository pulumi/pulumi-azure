// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.postgresql.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FlexibleServerCustomerManagedKey {
    /**
     * @return The versioned/versionless ID of the geo backup Key Vault Key.
     * 
     * &gt; **Note:** The key vault in which this key exists must be in the same region as the geo-redundant backup.
     * 
     */
    private @Nullable String geoBackupKeyVaultKeyId;
    /**
     * @return The geo backup user managed identity id for a Customer Managed Key. Must be added to `identity.identity_ids`.
     * 
     * &gt; **Note:** This managed identity cannot be the same as `primary_user_assigned_identity_id`, additionally this identity must be created in the same region as the geo-redundant backup.
     * 
     * &gt; **Note:** `primary_user_assigned_identity_id` or `geo_backup_user_assigned_identity_id` is required when `type` is set to `UserAssigned`.
     * 
     */
    private @Nullable String geoBackupUserAssignedIdentityId;
    /**
     * @return The versioned/versionless ID of the Key Vault Key.
     * 
     */
    private String keyVaultKeyId;
    /**
     * @return Specifies the primary user managed identity id for a Customer Managed Key. Must be added to `identity.identity_ids`.
     * 
     */
    private @Nullable String primaryUserAssignedIdentityId;

    private FlexibleServerCustomerManagedKey() {}
    /**
     * @return The versioned/versionless ID of the geo backup Key Vault Key.
     * 
     * &gt; **Note:** The key vault in which this key exists must be in the same region as the geo-redundant backup.
     * 
     */
    public Optional<String> geoBackupKeyVaultKeyId() {
        return Optional.ofNullable(this.geoBackupKeyVaultKeyId);
    }
    /**
     * @return The geo backup user managed identity id for a Customer Managed Key. Must be added to `identity.identity_ids`.
     * 
     * &gt; **Note:** This managed identity cannot be the same as `primary_user_assigned_identity_id`, additionally this identity must be created in the same region as the geo-redundant backup.
     * 
     * &gt; **Note:** `primary_user_assigned_identity_id` or `geo_backup_user_assigned_identity_id` is required when `type` is set to `UserAssigned`.
     * 
     */
    public Optional<String> geoBackupUserAssignedIdentityId() {
        return Optional.ofNullable(this.geoBackupUserAssignedIdentityId);
    }
    /**
     * @return The versioned/versionless ID of the Key Vault Key.
     * 
     */
    public String keyVaultKeyId() {
        return this.keyVaultKeyId;
    }
    /**
     * @return Specifies the primary user managed identity id for a Customer Managed Key. Must be added to `identity.identity_ids`.
     * 
     */
    public Optional<String> primaryUserAssignedIdentityId() {
        return Optional.ofNullable(this.primaryUserAssignedIdentityId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FlexibleServerCustomerManagedKey defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String geoBackupKeyVaultKeyId;
        private @Nullable String geoBackupUserAssignedIdentityId;
        private String keyVaultKeyId;
        private @Nullable String primaryUserAssignedIdentityId;
        public Builder() {}
        public Builder(FlexibleServerCustomerManagedKey defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.geoBackupKeyVaultKeyId = defaults.geoBackupKeyVaultKeyId;
    	      this.geoBackupUserAssignedIdentityId = defaults.geoBackupUserAssignedIdentityId;
    	      this.keyVaultKeyId = defaults.keyVaultKeyId;
    	      this.primaryUserAssignedIdentityId = defaults.primaryUserAssignedIdentityId;
        }

        @CustomType.Setter
        public Builder geoBackupKeyVaultKeyId(@Nullable String geoBackupKeyVaultKeyId) {

            this.geoBackupKeyVaultKeyId = geoBackupKeyVaultKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder geoBackupUserAssignedIdentityId(@Nullable String geoBackupUserAssignedIdentityId) {

            this.geoBackupUserAssignedIdentityId = geoBackupUserAssignedIdentityId;
            return this;
        }
        @CustomType.Setter
        public Builder keyVaultKeyId(String keyVaultKeyId) {
            if (keyVaultKeyId == null) {
              throw new MissingRequiredPropertyException("FlexibleServerCustomerManagedKey", "keyVaultKeyId");
            }
            this.keyVaultKeyId = keyVaultKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder primaryUserAssignedIdentityId(@Nullable String primaryUserAssignedIdentityId) {

            this.primaryUserAssignedIdentityId = primaryUserAssignedIdentityId;
            return this;
        }
        public FlexibleServerCustomerManagedKey build() {
            final var _resultValue = new FlexibleServerCustomerManagedKey();
            _resultValue.geoBackupKeyVaultKeyId = geoBackupKeyVaultKeyId;
            _resultValue.geoBackupUserAssignedIdentityId = geoBackupUserAssignedIdentityId;
            _resultValue.keyVaultKeyId = keyVaultKeyId;
            _resultValue.primaryUserAssignedIdentityId = primaryUserAssignedIdentityId;
            return _resultValue;
        }
    }
}
