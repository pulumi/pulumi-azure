// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.mssql.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DatabaseImport {
    /**
     * @return Specifies the name of the SQL administrator.
     * 
     */
    private String administratorLogin;
    /**
     * @return Specifies the password of the SQL administrator.
     * 
     */
    private String administratorLoginPassword;
    /**
     * @return Specifies the type of authentication used to access the server. Valid values are `SQL` or `ADPassword`.
     * 
     */
    private String authenticationType;
    /**
     * @return The resource id for the storage account used to store BACPAC file. If set, private endpoint connection will be created for the storage account. Must match storage account used for storage_uri parameter.
     * 
     */
    private @Nullable String storageAccountId;
    /**
     * @return Specifies the access key for the storage account.
     * 
     */
    private String storageKey;
    /**
     * @return Specifies the type of access key for the storage account. Valid values are `StorageAccessKey` or `SharedAccessKey`.
     * 
     */
    private String storageKeyType;
    /**
     * @return Specifies the blob URI of the .bacpac file.
     * 
     */
    private String storageUri;

    private DatabaseImport() {}
    /**
     * @return Specifies the name of the SQL administrator.
     * 
     */
    public String administratorLogin() {
        return this.administratorLogin;
    }
    /**
     * @return Specifies the password of the SQL administrator.
     * 
     */
    public String administratorLoginPassword() {
        return this.administratorLoginPassword;
    }
    /**
     * @return Specifies the type of authentication used to access the server. Valid values are `SQL` or `ADPassword`.
     * 
     */
    public String authenticationType() {
        return this.authenticationType;
    }
    /**
     * @return The resource id for the storage account used to store BACPAC file. If set, private endpoint connection will be created for the storage account. Must match storage account used for storage_uri parameter.
     * 
     */
    public Optional<String> storageAccountId() {
        return Optional.ofNullable(this.storageAccountId);
    }
    /**
     * @return Specifies the access key for the storage account.
     * 
     */
    public String storageKey() {
        return this.storageKey;
    }
    /**
     * @return Specifies the type of access key for the storage account. Valid values are `StorageAccessKey` or `SharedAccessKey`.
     * 
     */
    public String storageKeyType() {
        return this.storageKeyType;
    }
    /**
     * @return Specifies the blob URI of the .bacpac file.
     * 
     */
    public String storageUri() {
        return this.storageUri;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatabaseImport defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String administratorLogin;
        private String administratorLoginPassword;
        private String authenticationType;
        private @Nullable String storageAccountId;
        private String storageKey;
        private String storageKeyType;
        private String storageUri;
        public Builder() {}
        public Builder(DatabaseImport defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.administratorLogin = defaults.administratorLogin;
    	      this.administratorLoginPassword = defaults.administratorLoginPassword;
    	      this.authenticationType = defaults.authenticationType;
    	      this.storageAccountId = defaults.storageAccountId;
    	      this.storageKey = defaults.storageKey;
    	      this.storageKeyType = defaults.storageKeyType;
    	      this.storageUri = defaults.storageUri;
        }

        @CustomType.Setter
        public Builder administratorLogin(String administratorLogin) {
            if (administratorLogin == null) {
              throw new MissingRequiredPropertyException("DatabaseImport", "administratorLogin");
            }
            this.administratorLogin = administratorLogin;
            return this;
        }
        @CustomType.Setter
        public Builder administratorLoginPassword(String administratorLoginPassword) {
            if (administratorLoginPassword == null) {
              throw new MissingRequiredPropertyException("DatabaseImport", "administratorLoginPassword");
            }
            this.administratorLoginPassword = administratorLoginPassword;
            return this;
        }
        @CustomType.Setter
        public Builder authenticationType(String authenticationType) {
            if (authenticationType == null) {
              throw new MissingRequiredPropertyException("DatabaseImport", "authenticationType");
            }
            this.authenticationType = authenticationType;
            return this;
        }
        @CustomType.Setter
        public Builder storageAccountId(@Nullable String storageAccountId) {

            this.storageAccountId = storageAccountId;
            return this;
        }
        @CustomType.Setter
        public Builder storageKey(String storageKey) {
            if (storageKey == null) {
              throw new MissingRequiredPropertyException("DatabaseImport", "storageKey");
            }
            this.storageKey = storageKey;
            return this;
        }
        @CustomType.Setter
        public Builder storageKeyType(String storageKeyType) {
            if (storageKeyType == null) {
              throw new MissingRequiredPropertyException("DatabaseImport", "storageKeyType");
            }
            this.storageKeyType = storageKeyType;
            return this;
        }
        @CustomType.Setter
        public Builder storageUri(String storageUri) {
            if (storageUri == null) {
              throw new MissingRequiredPropertyException("DatabaseImport", "storageUri");
            }
            this.storageUri = storageUri;
            return this;
        }
        public DatabaseImport build() {
            final var _resultValue = new DatabaseImport();
            _resultValue.administratorLogin = administratorLogin;
            _resultValue.administratorLoginPassword = administratorLoginPassword;
            _resultValue.authenticationType = authenticationType;
            _resultValue.storageAccountId = storageAccountId;
            _resultValue.storageKey = storageKey;
            _resultValue.storageKeyType = storageKeyType;
            _resultValue.storageUri = storageUri;
            return _resultValue;
        }
    }
}
