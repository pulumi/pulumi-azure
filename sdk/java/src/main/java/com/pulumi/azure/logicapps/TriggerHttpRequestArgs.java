// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.logicapps;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TriggerHttpRequestArgs extends com.pulumi.resources.ResourceArgs {

    public static final TriggerHttpRequestArgs Empty = new TriggerHttpRequestArgs();

    /**
     * Specifies the ID of the Logic App Workflow. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="logicAppId", required=true)
    private Output<String> logicAppId;

    /**
     * @return Specifies the ID of the Logic App Workflow. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> logicAppId() {
        return this.logicAppId;
    }

    /**
     * Specifies the HTTP Method which the request be using. Possible values include `DELETE`, `GET`, `PATCH`, `POST` or `PUT`.
     * 
     */
    @Import(name="method")
    private @Nullable Output<String> method;

    /**
     * @return Specifies the HTTP Method which the request be using. Possible values include `DELETE`, `GET`, `PATCH`, `POST` or `PUT`.
     * 
     */
    public Optional<Output<String>> method() {
        return Optional.ofNullable(this.method);
    }

    /**
     * Specifies the name of the HTTP Request Trigger to be created within the Logic App Workflow. Changing this forces a new resource to be created.
     * 
     * &gt; **NOTE:** This name must be unique across all Triggers within the Logic App Workflow.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the name of the HTTP Request Trigger to be created within the Logic App Workflow. Changing this forces a new resource to be created.
     * 
     * &gt; **NOTE:** This name must be unique across all Triggers within the Logic App Workflow.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Specifies the Relative Path used for this Request.
     * 
     * &gt; **NOTE:** When `relative_path` is set a `method` must also be set.
     * 
     */
    @Import(name="relativePath")
    private @Nullable Output<String> relativePath;

    /**
     * @return Specifies the Relative Path used for this Request.
     * 
     * &gt; **NOTE:** When `relative_path` is set a `method` must also be set.
     * 
     */
    public Optional<Output<String>> relativePath() {
        return Optional.ofNullable(this.relativePath);
    }

    /**
     * A JSON Blob defining the Schema of the incoming request. This needs to be valid JSON.
     * 
     */
    @Import(name="schema", required=true)
    private Output<String> schema;

    /**
     * @return A JSON Blob defining the Schema of the incoming request. This needs to be valid JSON.
     * 
     */
    public Output<String> schema() {
        return this.schema;
    }

    private TriggerHttpRequestArgs() {}

    private TriggerHttpRequestArgs(TriggerHttpRequestArgs $) {
        this.logicAppId = $.logicAppId;
        this.method = $.method;
        this.name = $.name;
        this.relativePath = $.relativePath;
        this.schema = $.schema;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TriggerHttpRequestArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TriggerHttpRequestArgs $;

        public Builder() {
            $ = new TriggerHttpRequestArgs();
        }

        public Builder(TriggerHttpRequestArgs defaults) {
            $ = new TriggerHttpRequestArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param logicAppId Specifies the ID of the Logic App Workflow. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder logicAppId(Output<String> logicAppId) {
            $.logicAppId = logicAppId;
            return this;
        }

        /**
         * @param logicAppId Specifies the ID of the Logic App Workflow. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder logicAppId(String logicAppId) {
            return logicAppId(Output.of(logicAppId));
        }

        /**
         * @param method Specifies the HTTP Method which the request be using. Possible values include `DELETE`, `GET`, `PATCH`, `POST` or `PUT`.
         * 
         * @return builder
         * 
         */
        public Builder method(@Nullable Output<String> method) {
            $.method = method;
            return this;
        }

        /**
         * @param method Specifies the HTTP Method which the request be using. Possible values include `DELETE`, `GET`, `PATCH`, `POST` or `PUT`.
         * 
         * @return builder
         * 
         */
        public Builder method(String method) {
            return method(Output.of(method));
        }

        /**
         * @param name Specifies the name of the HTTP Request Trigger to be created within the Logic App Workflow. Changing this forces a new resource to be created.
         * 
         * &gt; **NOTE:** This name must be unique across all Triggers within the Logic App Workflow.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of the HTTP Request Trigger to be created within the Logic App Workflow. Changing this forces a new resource to be created.
         * 
         * &gt; **NOTE:** This name must be unique across all Triggers within the Logic App Workflow.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param relativePath Specifies the Relative Path used for this Request.
         * 
         * &gt; **NOTE:** When `relative_path` is set a `method` must also be set.
         * 
         * @return builder
         * 
         */
        public Builder relativePath(@Nullable Output<String> relativePath) {
            $.relativePath = relativePath;
            return this;
        }

        /**
         * @param relativePath Specifies the Relative Path used for this Request.
         * 
         * &gt; **NOTE:** When `relative_path` is set a `method` must also be set.
         * 
         * @return builder
         * 
         */
        public Builder relativePath(String relativePath) {
            return relativePath(Output.of(relativePath));
        }

        /**
         * @param schema A JSON Blob defining the Schema of the incoming request. This needs to be valid JSON.
         * 
         * @return builder
         * 
         */
        public Builder schema(Output<String> schema) {
            $.schema = schema;
            return this;
        }

        /**
         * @param schema A JSON Blob defining the Schema of the incoming request. This needs to be valid JSON.
         * 
         * @return builder
         * 
         */
        public Builder schema(String schema) {
            return schema(Output.of(schema));
        }

        public TriggerHttpRequestArgs build() {
            if ($.logicAppId == null) {
                throw new MissingRequiredPropertyException("TriggerHttpRequestArgs", "logicAppId");
            }
            if ($.schema == null) {
                throw new MissingRequiredPropertyException("TriggerHttpRequestArgs", "schema");
            }
            return $;
        }
    }

}
