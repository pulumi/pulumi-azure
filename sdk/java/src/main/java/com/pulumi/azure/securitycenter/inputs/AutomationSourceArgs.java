// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.securitycenter.inputs;

import com.pulumi.azure.securitycenter.inputs.AutomationSourceRuleSetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AutomationSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final AutomationSourceArgs Empty = new AutomationSourceArgs();

    /**
     * Type of data that will trigger this automation. Must be one of `Alerts`, `Assessments`, `AssessmentsSnapshot`, `RegulatoryComplianceAssessment`, `RegulatoryComplianceAssessmentSnapshot`, `SecureScoreControls`, `SecureScoreControlsSnapshot`, `SecureScores`, `SecureScoresSnapshot`, `SubAssessments` or `SubAssessmentsSnapshot`. Note. assessments are also referred to as recommendations
     * 
     */
    @Import(name="eventSource", required=true)
    private Output<String> eventSource;

    /**
     * @return Type of data that will trigger this automation. Must be one of `Alerts`, `Assessments`, `AssessmentsSnapshot`, `RegulatoryComplianceAssessment`, `RegulatoryComplianceAssessmentSnapshot`, `SecureScoreControls`, `SecureScoreControlsSnapshot`, `SecureScores`, `SecureScoresSnapshot`, `SubAssessments` or `SubAssessmentsSnapshot`. Note. assessments are also referred to as recommendations
     * 
     */
    public Output<String> eventSource() {
        return this.eventSource;
    }

    /**
     * A set of rules which evaluate upon event and data interception. This is defined in one or more `rule_set` blocks as defined below.
     * 
     * &gt; **NOTE:** When multiple `rule_set` block are provided, a logical &#39;OR&#39; is applied to the evaluation of them.
     * 
     */
    @Import(name="ruleSets")
    private @Nullable Output<List<AutomationSourceRuleSetArgs>> ruleSets;

    /**
     * @return A set of rules which evaluate upon event and data interception. This is defined in one or more `rule_set` blocks as defined below.
     * 
     * &gt; **NOTE:** When multiple `rule_set` block are provided, a logical &#39;OR&#39; is applied to the evaluation of them.
     * 
     */
    public Optional<Output<List<AutomationSourceRuleSetArgs>>> ruleSets() {
        return Optional.ofNullable(this.ruleSets);
    }

    private AutomationSourceArgs() {}

    private AutomationSourceArgs(AutomationSourceArgs $) {
        this.eventSource = $.eventSource;
        this.ruleSets = $.ruleSets;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AutomationSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AutomationSourceArgs $;

        public Builder() {
            $ = new AutomationSourceArgs();
        }

        public Builder(AutomationSourceArgs defaults) {
            $ = new AutomationSourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param eventSource Type of data that will trigger this automation. Must be one of `Alerts`, `Assessments`, `AssessmentsSnapshot`, `RegulatoryComplianceAssessment`, `RegulatoryComplianceAssessmentSnapshot`, `SecureScoreControls`, `SecureScoreControlsSnapshot`, `SecureScores`, `SecureScoresSnapshot`, `SubAssessments` or `SubAssessmentsSnapshot`. Note. assessments are also referred to as recommendations
         * 
         * @return builder
         * 
         */
        public Builder eventSource(Output<String> eventSource) {
            $.eventSource = eventSource;
            return this;
        }

        /**
         * @param eventSource Type of data that will trigger this automation. Must be one of `Alerts`, `Assessments`, `AssessmentsSnapshot`, `RegulatoryComplianceAssessment`, `RegulatoryComplianceAssessmentSnapshot`, `SecureScoreControls`, `SecureScoreControlsSnapshot`, `SecureScores`, `SecureScoresSnapshot`, `SubAssessments` or `SubAssessmentsSnapshot`. Note. assessments are also referred to as recommendations
         * 
         * @return builder
         * 
         */
        public Builder eventSource(String eventSource) {
            return eventSource(Output.of(eventSource));
        }

        /**
         * @param ruleSets A set of rules which evaluate upon event and data interception. This is defined in one or more `rule_set` blocks as defined below.
         * 
         * &gt; **NOTE:** When multiple `rule_set` block are provided, a logical &#39;OR&#39; is applied to the evaluation of them.
         * 
         * @return builder
         * 
         */
        public Builder ruleSets(@Nullable Output<List<AutomationSourceRuleSetArgs>> ruleSets) {
            $.ruleSets = ruleSets;
            return this;
        }

        /**
         * @param ruleSets A set of rules which evaluate upon event and data interception. This is defined in one or more `rule_set` blocks as defined below.
         * 
         * &gt; **NOTE:** When multiple `rule_set` block are provided, a logical &#39;OR&#39; is applied to the evaluation of them.
         * 
         * @return builder
         * 
         */
        public Builder ruleSets(List<AutomationSourceRuleSetArgs> ruleSets) {
            return ruleSets(Output.of(ruleSets));
        }

        /**
         * @param ruleSets A set of rules which evaluate upon event and data interception. This is defined in one or more `rule_set` blocks as defined below.
         * 
         * &gt; **NOTE:** When multiple `rule_set` block are provided, a logical &#39;OR&#39; is applied to the evaluation of them.
         * 
         * @return builder
         * 
         */
        public Builder ruleSets(AutomationSourceRuleSetArgs... ruleSets) {
            return ruleSets(List.of(ruleSets));
        }

        public AutomationSourceArgs build() {
            if ($.eventSource == null) {
                throw new MissingRequiredPropertyException("AutomationSourceArgs", "eventSource");
            }
            return $;
        }
    }

}
