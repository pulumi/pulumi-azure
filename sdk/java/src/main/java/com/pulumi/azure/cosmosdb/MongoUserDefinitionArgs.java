// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.cosmosdb;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MongoUserDefinitionArgs extends com.pulumi.resources.ResourceArgs {

    public static final MongoUserDefinitionArgs Empty = new MongoUserDefinitionArgs();

    /**
     * The resource ID of the Mongo DB. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="cosmosMongoDatabaseId", required=true)
    private Output<String> cosmosMongoDatabaseId;

    /**
     * @return The resource ID of the Mongo DB. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> cosmosMongoDatabaseId() {
        return this.cosmosMongoDatabaseId;
    }

    /**
     * A list of Mongo Roles that are inherited to the Mongo User Definition.
     * 
     * &gt; **Note:** The role that needs to be inherited should exist in the Mongo DB of `cosmos_mongo_database_id`.
     * 
     */
    @Import(name="inheritedRoleNames")
    private @Nullable Output<List<String>> inheritedRoleNames;

    /**
     * @return A list of Mongo Roles that are inherited to the Mongo User Definition.
     * 
     * &gt; **Note:** The role that needs to be inherited should exist in the Mongo DB of `cosmos_mongo_database_id`.
     * 
     */
    public Optional<Output<List<String>>> inheritedRoleNames() {
        return Optional.ofNullable(this.inheritedRoleNames);
    }

    /**
     * The password for the Mongo User Definition.
     * 
     */
    @Import(name="password", required=true)
    private Output<String> password;

    /**
     * @return The password for the Mongo User Definition.
     * 
     */
    public Output<String> password() {
        return this.password;
    }

    /**
     * The username for the Mongo User Definition. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="username", required=true)
    private Output<String> username;

    /**
     * @return The username for the Mongo User Definition. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> username() {
        return this.username;
    }

    private MongoUserDefinitionArgs() {}

    private MongoUserDefinitionArgs(MongoUserDefinitionArgs $) {
        this.cosmosMongoDatabaseId = $.cosmosMongoDatabaseId;
        this.inheritedRoleNames = $.inheritedRoleNames;
        this.password = $.password;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MongoUserDefinitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MongoUserDefinitionArgs $;

        public Builder() {
            $ = new MongoUserDefinitionArgs();
        }

        public Builder(MongoUserDefinitionArgs defaults) {
            $ = new MongoUserDefinitionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cosmosMongoDatabaseId The resource ID of the Mongo DB. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder cosmosMongoDatabaseId(Output<String> cosmosMongoDatabaseId) {
            $.cosmosMongoDatabaseId = cosmosMongoDatabaseId;
            return this;
        }

        /**
         * @param cosmosMongoDatabaseId The resource ID of the Mongo DB. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder cosmosMongoDatabaseId(String cosmosMongoDatabaseId) {
            return cosmosMongoDatabaseId(Output.of(cosmosMongoDatabaseId));
        }

        /**
         * @param inheritedRoleNames A list of Mongo Roles that are inherited to the Mongo User Definition.
         * 
         * &gt; **Note:** The role that needs to be inherited should exist in the Mongo DB of `cosmos_mongo_database_id`.
         * 
         * @return builder
         * 
         */
        public Builder inheritedRoleNames(@Nullable Output<List<String>> inheritedRoleNames) {
            $.inheritedRoleNames = inheritedRoleNames;
            return this;
        }

        /**
         * @param inheritedRoleNames A list of Mongo Roles that are inherited to the Mongo User Definition.
         * 
         * &gt; **Note:** The role that needs to be inherited should exist in the Mongo DB of `cosmos_mongo_database_id`.
         * 
         * @return builder
         * 
         */
        public Builder inheritedRoleNames(List<String> inheritedRoleNames) {
            return inheritedRoleNames(Output.of(inheritedRoleNames));
        }

        /**
         * @param inheritedRoleNames A list of Mongo Roles that are inherited to the Mongo User Definition.
         * 
         * &gt; **Note:** The role that needs to be inherited should exist in the Mongo DB of `cosmos_mongo_database_id`.
         * 
         * @return builder
         * 
         */
        public Builder inheritedRoleNames(String... inheritedRoleNames) {
            return inheritedRoleNames(List.of(inheritedRoleNames));
        }

        /**
         * @param password The password for the Mongo User Definition.
         * 
         * @return builder
         * 
         */
        public Builder password(Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The password for the Mongo User Definition.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param username The username for the Mongo User Definition. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder username(Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The username for the Mongo User Definition. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public MongoUserDefinitionArgs build() {
            if ($.cosmosMongoDatabaseId == null) {
                throw new MissingRequiredPropertyException("MongoUserDefinitionArgs", "cosmosMongoDatabaseId");
            }
            if ($.password == null) {
                throw new MissingRequiredPropertyException("MongoUserDefinitionArgs", "password");
            }
            if ($.username == null) {
                throw new MissingRequiredPropertyException("MongoUserDefinitionArgs", "username");
            }
            return $;
        }
    }

}
