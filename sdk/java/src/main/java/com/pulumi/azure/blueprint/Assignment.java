// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.blueprint;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.blueprint.AssignmentArgs;
import com.pulumi.azure.blueprint.inputs.AssignmentState;
import com.pulumi.azure.blueprint.outputs.AssignmentIdentity;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a Blueprint Assignment resource
 * 
 * &gt; **NOTE:** Azure Blueprints are in Preview and potentially subject to breaking change without notice.
 * 
 * &gt; **NOTE:** Azure Blueprint Assignments can only be applied to Subscriptions.  Assignments to Management Groups is not currently supported by the service or by this provider.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.CoreFunctions;
 * import com.pulumi.azure.core.inputs.GetSubscriptionArgs;
 * import com.pulumi.azure.blueprint.BlueprintFunctions;
 * import com.pulumi.azure.blueprint.inputs.GetDefinitionArgs;
 * import com.pulumi.azure.blueprint.inputs.GetPublishedVersionArgs;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.authorization.UserAssignedIdentity;
 * import com.pulumi.azure.authorization.UserAssignedIdentityArgs;
 * import com.pulumi.azure.authorization.Assignment;
 * import com.pulumi.azure.authorization.AssignmentArgs;
 * import com.pulumi.azure.blueprint.Assignment;
 * import com.pulumi.azure.blueprint.AssignmentArgs;
 * import com.pulumi.azure.blueprint.inputs.AssignmentIdentityArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var current = CoreFunctions.getClientConfig();
 * 
 *         final var exampleSubscription = CoreFunctions.getSubscription();
 * 
 *         final var exampleDefinition = BlueprintFunctions.getDefinition(GetDefinitionArgs.builder()
 *             .name(&#34;exampleBlueprint&#34;)
 *             .scopeId(exampleSubscription.applyValue(getSubscriptionResult -&gt; getSubscriptionResult.id()))
 *             .build());
 * 
 *         final var examplePublishedVersion = BlueprintFunctions.getPublishedVersion(GetPublishedVersionArgs.builder()
 *             .scopeId(exampleDefinition.applyValue(getDefinitionResult -&gt; getDefinitionResult.scopeId()))
 *             .blueprintName(exampleDefinition.applyValue(getDefinitionResult -&gt; getDefinitionResult.name()))
 *             .version(&#34;v1.0.0&#34;)
 *             .build());
 * 
 *         var exampleResourceGroup = new ResourceGroup(&#34;exampleResourceGroup&#34;, ResourceGroupArgs.builder()        
 *             .location(&#34;West Europe&#34;)
 *             .tags(Map.of(&#34;Environment&#34;, &#34;example&#34;))
 *             .build());
 * 
 *         var exampleUserAssignedIdentity = new UserAssignedIdentity(&#34;exampleUserAssignedIdentity&#34;, UserAssignedIdentityArgs.builder()        
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .location(exampleResourceGroup.location())
 *             .build());
 * 
 *         var operator = new Assignment(&#34;operator&#34;, AssignmentArgs.builder()        
 *             .scope(exampleSubscription.applyValue(getSubscriptionResult -&gt; getSubscriptionResult.id()))
 *             .roleDefinitionName(&#34;Blueprint Operator&#34;)
 *             .principalId(exampleUserAssignedIdentity.principalId())
 *             .build());
 * 
 *         var owner = new Assignment(&#34;owner&#34;, AssignmentArgs.builder()        
 *             .scope(exampleSubscription.applyValue(getSubscriptionResult -&gt; getSubscriptionResult.id()))
 *             .roleDefinitionName(&#34;Owner&#34;)
 *             .principalId(exampleUserAssignedIdentity.principalId())
 *             .build());
 * 
 *         var exampleAssignment = new Assignment(&#34;exampleAssignment&#34;, AssignmentArgs.builder()        
 *             .targetSubscriptionId(exampleSubscription.applyValue(getSubscriptionResult -&gt; getSubscriptionResult.id()))
 *             .versionId(examplePublishedVersion.applyValue(getPublishedVersionResult -&gt; getPublishedVersionResult.id()))
 *             .location(exampleResourceGroup.location())
 *             .lockMode(&#34;AllResourcesDoNotDelete&#34;)
 *             .lockExcludePrincipals(current.applyValue(getClientConfigResult -&gt; getClientConfigResult.objectId()))
 *             .identity(AssignmentIdentityArgs.builder()
 *                 .type(&#34;UserAssigned&#34;)
 *                 .identityIds(exampleUserAssignedIdentity.id())
 *                 .build())
 *             .resourceGroups(&#34;&#34;&#34;
 *     {
 *       &#34;ResourceGroup&#34;: {
 *         &#34;name&#34;: &#34;exampleRG-bp&#34;
 *       }
 *     }
 *             &#34;&#34;&#34;)
 *             .parameterValues(&#34;&#34;&#34;
 *     {
 *       &#34;allowedlocationsforresourcegroups_listOfAllowedLocations&#34;: {
 *         &#34;value&#34;: [&#34;westus&#34;, &#34;westus2&#34;, &#34;eastus&#34;, &#34;centralus&#34;, &#34;centraluseuap&#34;, &#34;southcentralus&#34;, &#34;northcentralus&#34;, &#34;westcentralus&#34;, &#34;eastus2&#34;, &#34;eastus2euap&#34;, &#34;brazilsouth&#34;, &#34;brazilus&#34;, &#34;northeurope&#34;, &#34;westeurope&#34;, &#34;eastasia&#34;, &#34;southeastasia&#34;, &#34;japanwest&#34;, &#34;japaneast&#34;, &#34;koreacentral&#34;, &#34;koreasouth&#34;, &#34;indiasouth&#34;, &#34;indiawest&#34;, &#34;indiacentral&#34;, &#34;australiaeast&#34;, &#34;australiasoutheast&#34;, &#34;canadacentral&#34;, &#34;canadaeast&#34;, &#34;uknorth&#34;, &#34;uksouth2&#34;, &#34;uksouth&#34;, &#34;ukwest&#34;, &#34;francecentral&#34;, &#34;francesouth&#34;, &#34;australiacentral&#34;, &#34;australiacentral2&#34;, &#34;uaecentral&#34;, &#34;uaenorth&#34;, &#34;southafricanorth&#34;, &#34;southafricawest&#34;, &#34;switzerlandnorth&#34;, &#34;switzerlandwest&#34;, &#34;germanynorth&#34;, &#34;germanywestcentral&#34;, &#34;norwayeast&#34;, &#34;norwaywest&#34;]
 *       }
 *     }
 *             &#34;&#34;&#34;)
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(                
 *                     operator,
 *                     owner)
 *                 .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Azure Blueprint Assignments can be imported using the `resource id`, e.g.
 * 
 * ```sh
 *  $ pulumi import azure:blueprint/assignment:Assignment example &#34;/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Blueprint/blueprintAssignments/assignSimpleBlueprint&#34;
 * ```
 * 
 */
@ResourceType(type="azure:blueprint/assignment:Assignment")
public class Assignment extends com.pulumi.resources.CustomResource {
    /**
     * The name of the blueprint assigned
     * 
     */
    @Export(name="blueprintName", refs={String.class}, tree="[0]")
    private Output<String> blueprintName;

    /**
     * @return The name of the blueprint assigned
     * 
     */
    public Output<String> blueprintName() {
        return this.blueprintName;
    }
    /**
     * The Description on the Blueprint
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output<String> description;

    /**
     * @return The Description on the Blueprint
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * The display name of the blueprint
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output<String> displayName;

    /**
     * @return The display name of the blueprint
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }
    /**
     * An `identity` block as defined below.
     * 
     */
    @Export(name="identity", refs={AssignmentIdentity.class}, tree="[0]")
    private Output<AssignmentIdentity> identity;

    /**
     * @return An `identity` block as defined below.
     * 
     */
    public Output<AssignmentIdentity> identity() {
        return this.identity;
    }
    /**
     * The Azure location of the Assignment. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return The Azure location of the Assignment. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * a list of up to 200 actions that are permitted to bypass the locks applied by the Blueprint.
     * 
     */
    @Export(name="lockExcludeActions", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> lockExcludeActions;

    /**
     * @return a list of up to 200 actions that are permitted to bypass the locks applied by the Blueprint.
     * 
     */
    public Output<Optional<List<String>>> lockExcludeActions() {
        return Codegen.optional(this.lockExcludeActions);
    }
    /**
     * a list of up to 5 Principal IDs that are permitted to bypass the locks applied by the Blueprint.
     * 
     */
    @Export(name="lockExcludePrincipals", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> lockExcludePrincipals;

    /**
     * @return a list of up to 5 Principal IDs that are permitted to bypass the locks applied by the Blueprint.
     * 
     */
    public Output<Optional<List<String>>> lockExcludePrincipals() {
        return Codegen.optional(this.lockExcludePrincipals);
    }
    /**
     * The locking mode of the Blueprint Assignment. One of `None` (Default), `AllResourcesReadOnly`, or `AllResourcesDoNotDelete`. Defaults to `None`.
     * 
     */
    @Export(name="lockMode", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> lockMode;

    /**
     * @return The locking mode of the Blueprint Assignment. One of `None` (Default), `AllResourcesReadOnly`, or `AllResourcesDoNotDelete`. Defaults to `None`.
     * 
     */
    public Output<Optional<String>> lockMode() {
        return Codegen.optional(this.lockMode);
    }
    /**
     * The name of the Blueprint Assignment. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the Blueprint Assignment. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * a JSON string to supply Blueprint Assignment parameter values.
     * 
     * &gt; **NOTE:** Improperly formatted JSON, or missing values required by a Blueprint will cause the assignment to fail.
     * 
     */
    @Export(name="parameterValues", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> parameterValues;

    /**
     * @return a JSON string to supply Blueprint Assignment parameter values.
     * 
     * &gt; **NOTE:** Improperly formatted JSON, or missing values required by a Blueprint will cause the assignment to fail.
     * 
     */
    public Output<Optional<String>> parameterValues() {
        return Codegen.optional(this.parameterValues);
    }
    /**
     * a JSON string to supply the Blueprint Resource Group information.
     * 
     * &gt; **NOTE:** Improperly formatted JSON, or missing values required by a Blueprint will cause the assignment to fail.
     * 
     */
    @Export(name="resourceGroups", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> resourceGroups;

    /**
     * @return a JSON string to supply the Blueprint Resource Group information.
     * 
     * &gt; **NOTE:** Improperly formatted JSON, or missing values required by a Blueprint will cause the assignment to fail.
     * 
     */
    public Output<Optional<String>> resourceGroups() {
        return Codegen.optional(this.resourceGroups);
    }
    /**
     * The Subscription ID the Blueprint Published Version is to be applied to. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="targetSubscriptionId", refs={String.class}, tree="[0]")
    private Output<String> targetSubscriptionId;

    /**
     * @return The Subscription ID the Blueprint Published Version is to be applied to. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> targetSubscriptionId() {
        return this.targetSubscriptionId;
    }
    /**
     * Specifies the type of Managed Service Identity that should be configured on this Blueprint. Possible values are `SystemAssigned` and `UserAssigned`.
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return Specifies the type of Managed Service Identity that should be configured on this Blueprint. Possible values are `SystemAssigned` and `UserAssigned`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * The ID of the Published Version of the blueprint to be assigned.
     * 
     */
    @Export(name="versionId", refs={String.class}, tree="[0]")
    private Output<String> versionId;

    /**
     * @return The ID of the Published Version of the blueprint to be assigned.
     * 
     */
    public Output<String> versionId() {
        return this.versionId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Assignment(String name) {
        this(name, AssignmentArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Assignment(String name, AssignmentArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Assignment(String name, AssignmentArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:blueprint/assignment:Assignment", name, args == null ? AssignmentArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Assignment(String name, Output<String> id, @Nullable AssignmentState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:blueprint/assignment:Assignment", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Assignment get(String name, Output<String> id, @Nullable AssignmentState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Assignment(name, id, state, options);
    }
}
