// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.blueprint;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.blueprint.AssignmentArgs;
import com.pulumi.azure.blueprint.inputs.AssignmentState;
import com.pulumi.azure.blueprint.outputs.AssignmentIdentity;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a Blueprint Assignment resource
 * 
 * &gt; **NOTE:** Azure Blueprints are in Preview and potentially subject to breaking change without notice.
 * 
 * &gt; **NOTE:** Azure Blueprint Assignments can only be applied to Subscriptions.  Assignments to Management Groups is not currently supported by the service or by this provider.
 * 
 * ## Example Usage
 * 
 * ## Import
 * 
 * Azure Blueprint Assignments can be imported using the `resource id`, e.g.
 * 
 * ```sh
 *  $ pulumi import azure:blueprint/assignment:Assignment example &#34;/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Blueprint/blueprintAssignments/assignSimpleBlueprint&#34;
 * ```
 * 
 */
@ResourceType(type="azure:blueprint/assignment:Assignment")
public class Assignment extends com.pulumi.resources.CustomResource {
    /**
     * The name of the blueprint assigned
     * 
     */
    @Export(name="blueprintName", type=String.class, parameters={})
    private Output<String> blueprintName;

    /**
     * @return The name of the blueprint assigned
     * 
     */
    public Output<String> blueprintName() {
        return this.blueprintName;
    }
    /**
     * The Description on the Blueprint
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output<String> description;

    /**
     * @return The Description on the Blueprint
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * The display name of the blueprint
     * 
     */
    @Export(name="displayName", type=String.class, parameters={})
    private Output<String> displayName;

    /**
     * @return The display name of the blueprint
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }
    /**
     * An `identity` block as defined below.
     * 
     */
    @Export(name="identity", type=AssignmentIdentity.class, parameters={})
    private Output<AssignmentIdentity> identity;

    /**
     * @return An `identity` block as defined below.
     * 
     */
    public Output<AssignmentIdentity> identity() {
        return this.identity;
    }
    /**
     * The Azure location of the Assignment.
     * 
     */
    @Export(name="location", type=String.class, parameters={})
    private Output<String> location;

    /**
     * @return The Azure location of the Assignment.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * a list of up to 200 actions that are permitted to bypass the locks applied by the Blueprint.
     * 
     */
    @Export(name="lockExcludeActions", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> lockExcludeActions;

    /**
     * @return a list of up to 200 actions that are permitted to bypass the locks applied by the Blueprint.
     * 
     */
    public Output<Optional<List<String>>> lockExcludeActions() {
        return Codegen.optional(this.lockExcludeActions);
    }
    /**
     * a list of up to 5 Principal IDs that are permitted to bypass the locks applied by the Blueprint.
     * 
     */
    @Export(name="lockExcludePrincipals", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> lockExcludePrincipals;

    /**
     * @return a list of up to 5 Principal IDs that are permitted to bypass the locks applied by the Blueprint.
     * 
     */
    public Output<Optional<List<String>>> lockExcludePrincipals() {
        return Codegen.optional(this.lockExcludePrincipals);
    }
    /**
     * The locking mode of the Blueprint Assignment.  One of `None` (Default), `AllResourcesReadOnly`, or `AllResourcesDoNotDelete`.
     * 
     */
    @Export(name="lockMode", type=String.class, parameters={})
    private Output</* @Nullable */ String> lockMode;

    /**
     * @return The locking mode of the Blueprint Assignment.  One of `None` (Default), `AllResourcesReadOnly`, or `AllResourcesDoNotDelete`.
     * 
     */
    public Output<Optional<String>> lockMode() {
        return Codegen.optional(this.lockMode);
    }
    /**
     * The name of the Blueprint Assignment
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the Blueprint Assignment
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * a JSON string to supply Blueprint Assignment parameter values.
     * 
     */
    @Export(name="parameterValues", type=String.class, parameters={})
    private Output</* @Nullable */ String> parameterValues;

    /**
     * @return a JSON string to supply Blueprint Assignment parameter values.
     * 
     */
    public Output<Optional<String>> parameterValues() {
        return Codegen.optional(this.parameterValues);
    }
    /**
     * a JSON string to supply the Blueprint Resource Group information.
     * 
     */
    @Export(name="resourceGroups", type=String.class, parameters={})
    private Output</* @Nullable */ String> resourceGroups;

    /**
     * @return a JSON string to supply the Blueprint Resource Group information.
     * 
     */
    public Output<Optional<String>> resourceGroups() {
        return Codegen.optional(this.resourceGroups);
    }
    /**
     * The Subscription ID the Blueprint Published Version is to be applied to.
     * 
     */
    @Export(name="targetSubscriptionId", type=String.class, parameters={})
    private Output<String> targetSubscriptionId;

    /**
     * @return The Subscription ID the Blueprint Published Version is to be applied to.
     * 
     */
    public Output<String> targetSubscriptionId() {
        return this.targetSubscriptionId;
    }
    /**
     * Specifies the type of Managed Service Identity that should be configured on this Blueprint. Only possible value is `UserAssigned`.
     * 
     */
    @Export(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return Specifies the type of Managed Service Identity that should be configured on this Blueprint. Only possible value is `UserAssigned`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * The ID of the Published Version of the blueprint to be assigned.
     * 
     */
    @Export(name="versionId", type=String.class, parameters={})
    private Output<String> versionId;

    /**
     * @return The ID of the Published Version of the blueprint to be assigned.
     * 
     */
    public Output<String> versionId() {
        return this.versionId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Assignment(String name) {
        this(name, AssignmentArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Assignment(String name, AssignmentArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Assignment(String name, AssignmentArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:blueprint/assignment:Assignment", name, args == null ? AssignmentArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Assignment(String name, Output<String> id, @Nullable AssignmentState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:blueprint/assignment:Assignment", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Assignment get(String name, Output<String> id, @Nullable AssignmentState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Assignment(name, id, state, options);
    }
}
