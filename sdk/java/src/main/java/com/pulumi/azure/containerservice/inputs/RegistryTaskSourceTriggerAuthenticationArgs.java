// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerservice.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegistryTaskSourceTriggerAuthenticationArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegistryTaskSourceTriggerAuthenticationArgs Empty = new RegistryTaskSourceTriggerAuthenticationArgs();

    /**
     * Time in seconds that the token remains valid.
     * 
     */
    @Import(name="expireInSeconds")
    private @Nullable Output<Integer> expireInSeconds;

    /**
     * @return Time in seconds that the token remains valid.
     * 
     */
    public Optional<Output<Integer>> expireInSeconds() {
        return Optional.ofNullable(this.expireInSeconds);
    }

    /**
     * The refresh token used to refresh the access token.
     * 
     */
    @Import(name="refreshToken")
    private @Nullable Output<String> refreshToken;

    /**
     * @return The refresh token used to refresh the access token.
     * 
     */
    public Optional<Output<String>> refreshToken() {
        return Optional.ofNullable(this.refreshToken);
    }

    /**
     * The scope of the access token.
     * 
     */
    @Import(name="scope")
    private @Nullable Output<String> scope;

    /**
     * @return The scope of the access token.
     * 
     */
    public Optional<Output<String>> scope() {
        return Optional.ofNullable(this.scope);
    }

    /**
     * The access token used to access the source control provider.
     * 
     */
    @Import(name="token", required=true)
    private Output<String> token;

    /**
     * @return The access token used to access the source control provider.
     * 
     */
    public Output<String> token() {
        return this.token;
    }

    /**
     * The type of the token. Possible values are `PAT` (personal access token) and `OAuth`.
     * 
     */
    @Import(name="tokenType", required=true)
    private Output<String> tokenType;

    /**
     * @return The type of the token. Possible values are `PAT` (personal access token) and `OAuth`.
     * 
     */
    public Output<String> tokenType() {
        return this.tokenType;
    }

    private RegistryTaskSourceTriggerAuthenticationArgs() {}

    private RegistryTaskSourceTriggerAuthenticationArgs(RegistryTaskSourceTriggerAuthenticationArgs $) {
        this.expireInSeconds = $.expireInSeconds;
        this.refreshToken = $.refreshToken;
        this.scope = $.scope;
        this.token = $.token;
        this.tokenType = $.tokenType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegistryTaskSourceTriggerAuthenticationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegistryTaskSourceTriggerAuthenticationArgs $;

        public Builder() {
            $ = new RegistryTaskSourceTriggerAuthenticationArgs();
        }

        public Builder(RegistryTaskSourceTriggerAuthenticationArgs defaults) {
            $ = new RegistryTaskSourceTriggerAuthenticationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param expireInSeconds Time in seconds that the token remains valid.
         * 
         * @return builder
         * 
         */
        public Builder expireInSeconds(@Nullable Output<Integer> expireInSeconds) {
            $.expireInSeconds = expireInSeconds;
            return this;
        }

        /**
         * @param expireInSeconds Time in seconds that the token remains valid.
         * 
         * @return builder
         * 
         */
        public Builder expireInSeconds(Integer expireInSeconds) {
            return expireInSeconds(Output.of(expireInSeconds));
        }

        /**
         * @param refreshToken The refresh token used to refresh the access token.
         * 
         * @return builder
         * 
         */
        public Builder refreshToken(@Nullable Output<String> refreshToken) {
            $.refreshToken = refreshToken;
            return this;
        }

        /**
         * @param refreshToken The refresh token used to refresh the access token.
         * 
         * @return builder
         * 
         */
        public Builder refreshToken(String refreshToken) {
            return refreshToken(Output.of(refreshToken));
        }

        /**
         * @param scope The scope of the access token.
         * 
         * @return builder
         * 
         */
        public Builder scope(@Nullable Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope The scope of the access token.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param token The access token used to access the source control provider.
         * 
         * @return builder
         * 
         */
        public Builder token(Output<String> token) {
            $.token = token;
            return this;
        }

        /**
         * @param token The access token used to access the source control provider.
         * 
         * @return builder
         * 
         */
        public Builder token(String token) {
            return token(Output.of(token));
        }

        /**
         * @param tokenType The type of the token. Possible values are `PAT` (personal access token) and `OAuth`.
         * 
         * @return builder
         * 
         */
        public Builder tokenType(Output<String> tokenType) {
            $.tokenType = tokenType;
            return this;
        }

        /**
         * @param tokenType The type of the token. Possible values are `PAT` (personal access token) and `OAuth`.
         * 
         * @return builder
         * 
         */
        public Builder tokenType(String tokenType) {
            return tokenType(Output.of(tokenType));
        }

        public RegistryTaskSourceTriggerAuthenticationArgs build() {
            if ($.token == null) {
                throw new MissingRequiredPropertyException("RegistryTaskSourceTriggerAuthenticationArgs", "token");
            }
            if ($.tokenType == null) {
                throw new MissingRequiredPropertyException("RegistryTaskSourceTriggerAuthenticationArgs", "tokenType");
            }
            return $;
        }
    }

}
