// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.eventhub.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainInputMappingFieldsArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainInputMappingFieldsArgs Empty = new DomainInputMappingFieldsArgs();

    /**
     * Specifies the data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="dataVersion")
    private @Nullable Output<String> dataVersion;

    /**
     * @return Specifies the data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> dataVersion() {
        return Optional.ofNullable(this.dataVersion);
    }

    /**
     * Specifies the event time of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="eventTime")
    private @Nullable Output<String> eventTime;

    /**
     * @return Specifies the event time of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> eventTime() {
        return Optional.ofNullable(this.eventTime);
    }

    /**
     * Specifies the event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="eventType")
    private @Nullable Output<String> eventType;

    /**
     * @return Specifies the event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> eventType() {
        return Optional.ofNullable(this.eventType);
    }

    /**
     * Specifies the id of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return Specifies the id of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Specifies the subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="subject")
    private @Nullable Output<String> subject;

    /**
     * @return Specifies the subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> subject() {
        return Optional.ofNullable(this.subject);
    }

    /**
     * Specifies the topic of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="topic")
    private @Nullable Output<String> topic;

    /**
     * @return Specifies the topic of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> topic() {
        return Optional.ofNullable(this.topic);
    }

    private DomainInputMappingFieldsArgs() {}

    private DomainInputMappingFieldsArgs(DomainInputMappingFieldsArgs $) {
        this.dataVersion = $.dataVersion;
        this.eventTime = $.eventTime;
        this.eventType = $.eventType;
        this.id = $.id;
        this.subject = $.subject;
        this.topic = $.topic;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainInputMappingFieldsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainInputMappingFieldsArgs $;

        public Builder() {
            $ = new DomainInputMappingFieldsArgs();
        }

        public Builder(DomainInputMappingFieldsArgs defaults) {
            $ = new DomainInputMappingFieldsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataVersion Specifies the data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder dataVersion(@Nullable Output<String> dataVersion) {
            $.dataVersion = dataVersion;
            return this;
        }

        /**
         * @param dataVersion Specifies the data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder dataVersion(String dataVersion) {
            return dataVersion(Output.of(dataVersion));
        }

        /**
         * @param eventTime Specifies the event time of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder eventTime(@Nullable Output<String> eventTime) {
            $.eventTime = eventTime;
            return this;
        }

        /**
         * @param eventTime Specifies the event time of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder eventTime(String eventTime) {
            return eventTime(Output.of(eventTime));
        }

        /**
         * @param eventType Specifies the event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder eventType(@Nullable Output<String> eventType) {
            $.eventType = eventType;
            return this;
        }

        /**
         * @param eventType Specifies the event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder eventType(String eventType) {
            return eventType(Output.of(eventType));
        }

        /**
         * @param id Specifies the id of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id Specifies the id of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param subject Specifies the subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder subject(@Nullable Output<String> subject) {
            $.subject = subject;
            return this;
        }

        /**
         * @param subject Specifies the subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder subject(String subject) {
            return subject(Output.of(subject));
        }

        /**
         * @param topic Specifies the topic of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder topic(@Nullable Output<String> topic) {
            $.topic = topic;
            return this;
        }

        /**
         * @param topic Specifies the topic of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder topic(String topic) {
            return topic(Output.of(topic));
        }

        public DomainInputMappingFieldsArgs build() {
            return $;
        }
    }

}
