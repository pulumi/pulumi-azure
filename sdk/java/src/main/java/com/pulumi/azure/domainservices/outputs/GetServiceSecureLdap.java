// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.domainservices.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetServiceSecureLdap {
    private String certificateExpiry;
    private String certificateThumbprint;
    /**
     * @return Whether secure LDAP is enabled for the managed domain.
     * 
     */
    private Boolean enabled;
    /**
     * @return Whether external access to LDAPS over the Internet, is enabled.
     * 
     */
    private Boolean externalAccessEnabled;
    private String publicCertificate;

    private GetServiceSecureLdap() {}
    public String certificateExpiry() {
        return this.certificateExpiry;
    }
    public String certificateThumbprint() {
        return this.certificateThumbprint;
    }
    /**
     * @return Whether secure LDAP is enabled for the managed domain.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return Whether external access to LDAPS over the Internet, is enabled.
     * 
     */
    public Boolean externalAccessEnabled() {
        return this.externalAccessEnabled;
    }
    public String publicCertificate() {
        return this.publicCertificate;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceSecureLdap defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String certificateExpiry;
        private String certificateThumbprint;
        private Boolean enabled;
        private Boolean externalAccessEnabled;
        private String publicCertificate;
        public Builder() {}
        public Builder(GetServiceSecureLdap defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateExpiry = defaults.certificateExpiry;
    	      this.certificateThumbprint = defaults.certificateThumbprint;
    	      this.enabled = defaults.enabled;
    	      this.externalAccessEnabled = defaults.externalAccessEnabled;
    	      this.publicCertificate = defaults.publicCertificate;
        }

        @CustomType.Setter
        public Builder certificateExpiry(String certificateExpiry) {
            if (certificateExpiry == null) {
              throw new MissingRequiredPropertyException("GetServiceSecureLdap", "certificateExpiry");
            }
            this.certificateExpiry = certificateExpiry;
            return this;
        }
        @CustomType.Setter
        public Builder certificateThumbprint(String certificateThumbprint) {
            if (certificateThumbprint == null) {
              throw new MissingRequiredPropertyException("GetServiceSecureLdap", "certificateThumbprint");
            }
            this.certificateThumbprint = certificateThumbprint;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetServiceSecureLdap", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder externalAccessEnabled(Boolean externalAccessEnabled) {
            if (externalAccessEnabled == null) {
              throw new MissingRequiredPropertyException("GetServiceSecureLdap", "externalAccessEnabled");
            }
            this.externalAccessEnabled = externalAccessEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder publicCertificate(String publicCertificate) {
            if (publicCertificate == null) {
              throw new MissingRequiredPropertyException("GetServiceSecureLdap", "publicCertificate");
            }
            this.publicCertificate = publicCertificate;
            return this;
        }
        public GetServiceSecureLdap build() {
            final var _resultValue = new GetServiceSecureLdap();
            _resultValue.certificateExpiry = certificateExpiry;
            _resultValue.certificateThumbprint = certificateThumbprint;
            _resultValue.enabled = enabled;
            _resultValue.externalAccessEnabled = externalAccessEnabled;
            _resultValue.publicCertificate = publicCertificate;
            return _resultValue;
        }
    }
}
