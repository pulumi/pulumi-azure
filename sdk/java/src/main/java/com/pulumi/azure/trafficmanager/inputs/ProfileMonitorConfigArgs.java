// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.trafficmanager.inputs;

import com.pulumi.azure.trafficmanager.inputs.ProfileMonitorConfigCustomHeaderArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProfileMonitorConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProfileMonitorConfigArgs Empty = new ProfileMonitorConfigArgs();

    /**
     * One or more `custom_header` blocks as defined below.
     * 
     */
    @Import(name="customHeaders")
    private @Nullable Output<List<ProfileMonitorConfigCustomHeaderArgs>> customHeaders;

    /**
     * @return One or more `custom_header` blocks as defined below.
     * 
     */
    public Optional<Output<List<ProfileMonitorConfigCustomHeaderArgs>>> customHeaders() {
        return Optional.ofNullable(this.customHeaders);
    }

    /**
     * A list of status code ranges in the format of `100-101`.
     * 
     */
    @Import(name="expectedStatusCodeRanges")
    private @Nullable Output<List<String>> expectedStatusCodeRanges;

    /**
     * @return A list of status code ranges in the format of `100-101`.
     * 
     */
    public Optional<Output<List<String>>> expectedStatusCodeRanges() {
        return Optional.ofNullable(this.expectedStatusCodeRanges);
    }

    /**
     * The interval used to check the endpoint health from a Traffic Manager probing agent. You can specify two values here: `30` (normal probing) and `10` (fast probing). The default value is `30`.
     * 
     */
    @Import(name="intervalInSeconds")
    private @Nullable Output<Integer> intervalInSeconds;

    /**
     * @return The interval used to check the endpoint health from a Traffic Manager probing agent. You can specify two values here: `30` (normal probing) and `10` (fast probing). The default value is `30`.
     * 
     */
    public Optional<Output<Integer>> intervalInSeconds() {
        return Optional.ofNullable(this.intervalInSeconds);
    }

    /**
     * The path used by the monitoring checks. Required when `protocol` is set to `HTTP` or `HTTPS` - cannot be set when `protocol` is set to `TCP`.
     * 
     */
    @Import(name="path")
    private @Nullable Output<String> path;

    /**
     * @return The path used by the monitoring checks. Required when `protocol` is set to `HTTP` or `HTTPS` - cannot be set when `protocol` is set to `TCP`.
     * 
     */
    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * The port number used by the monitoring checks.
     * 
     */
    @Import(name="port", required=true)
    private Output<Integer> port;

    /**
     * @return The port number used by the monitoring checks.
     * 
     */
    public Output<Integer> port() {
        return this.port;
    }

    /**
     * The protocol used by the monitoring checks, supported values are `HTTP`, `HTTPS` and `TCP`.
     * 
     */
    @Import(name="protocol", required=true)
    private Output<String> protocol;

    /**
     * @return The protocol used by the monitoring checks, supported values are `HTTP`, `HTTPS` and `TCP`.
     * 
     */
    public Output<String> protocol() {
        return this.protocol;
    }

    /**
     * The amount of time the Traffic Manager probing agent should wait before considering that check a failure when a health check probe is sent to the endpoint. If `interval_in_seconds` is set to `30`, then `timeout_in_seconds` can be between `5` and `10`. The default value is `10`. If `interval_in_seconds` is set to `10`, then valid values are between `5` and `9` and `timeout_in_seconds` is required.
     * 
     */
    @Import(name="timeoutInSeconds")
    private @Nullable Output<Integer> timeoutInSeconds;

    /**
     * @return The amount of time the Traffic Manager probing agent should wait before considering that check a failure when a health check probe is sent to the endpoint. If `interval_in_seconds` is set to `30`, then `timeout_in_seconds` can be between `5` and `10`. The default value is `10`. If `interval_in_seconds` is set to `10`, then valid values are between `5` and `9` and `timeout_in_seconds` is required.
     * 
     */
    public Optional<Output<Integer>> timeoutInSeconds() {
        return Optional.ofNullable(this.timeoutInSeconds);
    }

    /**
     * The number of failures a Traffic Manager probing agent tolerates before marking that endpoint as unhealthy. Valid values are between `0` and `9`. The default value is `3`
     * 
     */
    @Import(name="toleratedNumberOfFailures")
    private @Nullable Output<Integer> toleratedNumberOfFailures;

    /**
     * @return The number of failures a Traffic Manager probing agent tolerates before marking that endpoint as unhealthy. Valid values are between `0` and `9`. The default value is `3`
     * 
     */
    public Optional<Output<Integer>> toleratedNumberOfFailures() {
        return Optional.ofNullable(this.toleratedNumberOfFailures);
    }

    private ProfileMonitorConfigArgs() {}

    private ProfileMonitorConfigArgs(ProfileMonitorConfigArgs $) {
        this.customHeaders = $.customHeaders;
        this.expectedStatusCodeRanges = $.expectedStatusCodeRanges;
        this.intervalInSeconds = $.intervalInSeconds;
        this.path = $.path;
        this.port = $.port;
        this.protocol = $.protocol;
        this.timeoutInSeconds = $.timeoutInSeconds;
        this.toleratedNumberOfFailures = $.toleratedNumberOfFailures;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProfileMonitorConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProfileMonitorConfigArgs $;

        public Builder() {
            $ = new ProfileMonitorConfigArgs();
        }

        public Builder(ProfileMonitorConfigArgs defaults) {
            $ = new ProfileMonitorConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param customHeaders One or more `custom_header` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder customHeaders(@Nullable Output<List<ProfileMonitorConfigCustomHeaderArgs>> customHeaders) {
            $.customHeaders = customHeaders;
            return this;
        }

        /**
         * @param customHeaders One or more `custom_header` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder customHeaders(List<ProfileMonitorConfigCustomHeaderArgs> customHeaders) {
            return customHeaders(Output.of(customHeaders));
        }

        /**
         * @param customHeaders One or more `custom_header` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder customHeaders(ProfileMonitorConfigCustomHeaderArgs... customHeaders) {
            return customHeaders(List.of(customHeaders));
        }

        /**
         * @param expectedStatusCodeRanges A list of status code ranges in the format of `100-101`.
         * 
         * @return builder
         * 
         */
        public Builder expectedStatusCodeRanges(@Nullable Output<List<String>> expectedStatusCodeRanges) {
            $.expectedStatusCodeRanges = expectedStatusCodeRanges;
            return this;
        }

        /**
         * @param expectedStatusCodeRanges A list of status code ranges in the format of `100-101`.
         * 
         * @return builder
         * 
         */
        public Builder expectedStatusCodeRanges(List<String> expectedStatusCodeRanges) {
            return expectedStatusCodeRanges(Output.of(expectedStatusCodeRanges));
        }

        /**
         * @param expectedStatusCodeRanges A list of status code ranges in the format of `100-101`.
         * 
         * @return builder
         * 
         */
        public Builder expectedStatusCodeRanges(String... expectedStatusCodeRanges) {
            return expectedStatusCodeRanges(List.of(expectedStatusCodeRanges));
        }

        /**
         * @param intervalInSeconds The interval used to check the endpoint health from a Traffic Manager probing agent. You can specify two values here: `30` (normal probing) and `10` (fast probing). The default value is `30`.
         * 
         * @return builder
         * 
         */
        public Builder intervalInSeconds(@Nullable Output<Integer> intervalInSeconds) {
            $.intervalInSeconds = intervalInSeconds;
            return this;
        }

        /**
         * @param intervalInSeconds The interval used to check the endpoint health from a Traffic Manager probing agent. You can specify two values here: `30` (normal probing) and `10` (fast probing). The default value is `30`.
         * 
         * @return builder
         * 
         */
        public Builder intervalInSeconds(Integer intervalInSeconds) {
            return intervalInSeconds(Output.of(intervalInSeconds));
        }

        /**
         * @param path The path used by the monitoring checks. Required when `protocol` is set to `HTTP` or `HTTPS` - cannot be set when `protocol` is set to `TCP`.
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path The path used by the monitoring checks. Required when `protocol` is set to `HTTP` or `HTTPS` - cannot be set when `protocol` is set to `TCP`.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param port The port number used by the monitoring checks.
         * 
         * @return builder
         * 
         */
        public Builder port(Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The port number used by the monitoring checks.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param protocol The protocol used by the monitoring checks, supported values are `HTTP`, `HTTPS` and `TCP`.
         * 
         * @return builder
         * 
         */
        public Builder protocol(Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol The protocol used by the monitoring checks, supported values are `HTTP`, `HTTPS` and `TCP`.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param timeoutInSeconds The amount of time the Traffic Manager probing agent should wait before considering that check a failure when a health check probe is sent to the endpoint. If `interval_in_seconds` is set to `30`, then `timeout_in_seconds` can be between `5` and `10`. The default value is `10`. If `interval_in_seconds` is set to `10`, then valid values are between `5` and `9` and `timeout_in_seconds` is required.
         * 
         * @return builder
         * 
         */
        public Builder timeoutInSeconds(@Nullable Output<Integer> timeoutInSeconds) {
            $.timeoutInSeconds = timeoutInSeconds;
            return this;
        }

        /**
         * @param timeoutInSeconds The amount of time the Traffic Manager probing agent should wait before considering that check a failure when a health check probe is sent to the endpoint. If `interval_in_seconds` is set to `30`, then `timeout_in_seconds` can be between `5` and `10`. The default value is `10`. If `interval_in_seconds` is set to `10`, then valid values are between `5` and `9` and `timeout_in_seconds` is required.
         * 
         * @return builder
         * 
         */
        public Builder timeoutInSeconds(Integer timeoutInSeconds) {
            return timeoutInSeconds(Output.of(timeoutInSeconds));
        }

        /**
         * @param toleratedNumberOfFailures The number of failures a Traffic Manager probing agent tolerates before marking that endpoint as unhealthy. Valid values are between `0` and `9`. The default value is `3`
         * 
         * @return builder
         * 
         */
        public Builder toleratedNumberOfFailures(@Nullable Output<Integer> toleratedNumberOfFailures) {
            $.toleratedNumberOfFailures = toleratedNumberOfFailures;
            return this;
        }

        /**
         * @param toleratedNumberOfFailures The number of failures a Traffic Manager probing agent tolerates before marking that endpoint as unhealthy. Valid values are between `0` and `9`. The default value is `3`
         * 
         * @return builder
         * 
         */
        public Builder toleratedNumberOfFailures(Integer toleratedNumberOfFailures) {
            return toleratedNumberOfFailures(Output.of(toleratedNumberOfFailures));
        }

        public ProfileMonitorConfigArgs build() {
            if ($.port == null) {
                throw new MissingRequiredPropertyException("ProfileMonitorConfigArgs", "port");
            }
            if ($.protocol == null) {
                throw new MissingRequiredPropertyException("ProfileMonitorConfigArgs", "protocol");
            }
            return $;
        }
    }

}
