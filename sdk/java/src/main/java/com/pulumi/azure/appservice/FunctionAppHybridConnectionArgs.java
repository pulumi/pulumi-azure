// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appservice;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FunctionAppHybridConnectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final FunctionAppHybridConnectionArgs Empty = new FunctionAppHybridConnectionArgs();

    /**
     * The ID of the Function App for this Hybrid Connection. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="functionAppId", required=true)
    private Output<String> functionAppId;

    /**
     * @return The ID of the Function App for this Hybrid Connection. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> functionAppId() {
        return this.functionAppId;
    }

    /**
     * The hostname of the endpoint.
     * 
     */
    @Import(name="hostname", required=true)
    private Output<String> hostname;

    /**
     * @return The hostname of the endpoint.
     * 
     */
    public Output<String> hostname() {
        return this.hostname;
    }

    /**
     * The port to use for the endpoint
     * 
     */
    @Import(name="port", required=true)
    private Output<Integer> port;

    /**
     * @return The port to use for the endpoint
     * 
     */
    public Output<Integer> port() {
        return this.port;
    }

    /**
     * The ID of the Relay Hybrid Connection to use. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="relayId", required=true)
    private Output<String> relayId;

    /**
     * @return The ID of the Relay Hybrid Connection to use. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> relayId() {
        return this.relayId;
    }

    /**
     * The name of the Relay key with `Send` permission to use. Defaults to `RootManageSharedAccessKey`
     * 
     */
    @Import(name="sendKeyName")
    private @Nullable Output<String> sendKeyName;

    /**
     * @return The name of the Relay key with `Send` permission to use. Defaults to `RootManageSharedAccessKey`
     * 
     */
    public Optional<Output<String>> sendKeyName() {
        return Optional.ofNullable(this.sendKeyName);
    }

    private FunctionAppHybridConnectionArgs() {}

    private FunctionAppHybridConnectionArgs(FunctionAppHybridConnectionArgs $) {
        this.functionAppId = $.functionAppId;
        this.hostname = $.hostname;
        this.port = $.port;
        this.relayId = $.relayId;
        this.sendKeyName = $.sendKeyName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FunctionAppHybridConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FunctionAppHybridConnectionArgs $;

        public Builder() {
            $ = new FunctionAppHybridConnectionArgs();
        }

        public Builder(FunctionAppHybridConnectionArgs defaults) {
            $ = new FunctionAppHybridConnectionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param functionAppId The ID of the Function App for this Hybrid Connection. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder functionAppId(Output<String> functionAppId) {
            $.functionAppId = functionAppId;
            return this;
        }

        /**
         * @param functionAppId The ID of the Function App for this Hybrid Connection. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder functionAppId(String functionAppId) {
            return functionAppId(Output.of(functionAppId));
        }

        /**
         * @param hostname The hostname of the endpoint.
         * 
         * @return builder
         * 
         */
        public Builder hostname(Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname The hostname of the endpoint.
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        /**
         * @param port The port to use for the endpoint
         * 
         * @return builder
         * 
         */
        public Builder port(Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The port to use for the endpoint
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param relayId The ID of the Relay Hybrid Connection to use. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder relayId(Output<String> relayId) {
            $.relayId = relayId;
            return this;
        }

        /**
         * @param relayId The ID of the Relay Hybrid Connection to use. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder relayId(String relayId) {
            return relayId(Output.of(relayId));
        }

        /**
         * @param sendKeyName The name of the Relay key with `Send` permission to use. Defaults to `RootManageSharedAccessKey`
         * 
         * @return builder
         * 
         */
        public Builder sendKeyName(@Nullable Output<String> sendKeyName) {
            $.sendKeyName = sendKeyName;
            return this;
        }

        /**
         * @param sendKeyName The name of the Relay key with `Send` permission to use. Defaults to `RootManageSharedAccessKey`
         * 
         * @return builder
         * 
         */
        public Builder sendKeyName(String sendKeyName) {
            return sendKeyName(Output.of(sendKeyName));
        }

        public FunctionAppHybridConnectionArgs build() {
            if ($.functionAppId == null) {
                throw new MissingRequiredPropertyException("FunctionAppHybridConnectionArgs", "functionAppId");
            }
            if ($.hostname == null) {
                throw new MissingRequiredPropertyException("FunctionAppHybridConnectionArgs", "hostname");
            }
            if ($.port == null) {
                throw new MissingRequiredPropertyException("FunctionAppHybridConnectionArgs", "port");
            }
            if ($.relayId == null) {
                throw new MissingRequiredPropertyException("FunctionAppHybridConnectionArgs", "relayId");
            }
            return $;
        }
    }

}
