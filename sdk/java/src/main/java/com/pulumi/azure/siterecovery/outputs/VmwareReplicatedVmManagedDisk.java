// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.siterecovery.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class VmwareReplicatedVmManagedDisk {
    /**
     * @return The ID of the disk to be replicated.
     * 
     */
    private String diskId;
    /**
     * @return The ID of the storage account that should be used for logging during replication.
     * 
     */
    private @Nullable String logStorageAccountId;
    /**
     * @return The ID of the Disk Encryption Set that should be used for the disks when a failover is done.
     * 
     */
    private @Nullable String targetDiskEncryptionSetId;
    /**
     * @return The disk type of the disk to be created when a failover is done. Possible values are `Premium_LRS`, `Standard_LRS` and `StandardSSD_LRS`.
     * 
     */
    private String targetDiskType;

    private VmwareReplicatedVmManagedDisk() {}
    /**
     * @return The ID of the disk to be replicated.
     * 
     */
    public String diskId() {
        return this.diskId;
    }
    /**
     * @return The ID of the storage account that should be used for logging during replication.
     * 
     */
    public Optional<String> logStorageAccountId() {
        return Optional.ofNullable(this.logStorageAccountId);
    }
    /**
     * @return The ID of the Disk Encryption Set that should be used for the disks when a failover is done.
     * 
     */
    public Optional<String> targetDiskEncryptionSetId() {
        return Optional.ofNullable(this.targetDiskEncryptionSetId);
    }
    /**
     * @return The disk type of the disk to be created when a failover is done. Possible values are `Premium_LRS`, `Standard_LRS` and `StandardSSD_LRS`.
     * 
     */
    public String targetDiskType() {
        return this.targetDiskType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VmwareReplicatedVmManagedDisk defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String diskId;
        private @Nullable String logStorageAccountId;
        private @Nullable String targetDiskEncryptionSetId;
        private String targetDiskType;
        public Builder() {}
        public Builder(VmwareReplicatedVmManagedDisk defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.diskId = defaults.diskId;
    	      this.logStorageAccountId = defaults.logStorageAccountId;
    	      this.targetDiskEncryptionSetId = defaults.targetDiskEncryptionSetId;
    	      this.targetDiskType = defaults.targetDiskType;
        }

        @CustomType.Setter
        public Builder diskId(String diskId) {
            if (diskId == null) {
              throw new MissingRequiredPropertyException("VmwareReplicatedVmManagedDisk", "diskId");
            }
            this.diskId = diskId;
            return this;
        }
        @CustomType.Setter
        public Builder logStorageAccountId(@Nullable String logStorageAccountId) {

            this.logStorageAccountId = logStorageAccountId;
            return this;
        }
        @CustomType.Setter
        public Builder targetDiskEncryptionSetId(@Nullable String targetDiskEncryptionSetId) {

            this.targetDiskEncryptionSetId = targetDiskEncryptionSetId;
            return this;
        }
        @CustomType.Setter
        public Builder targetDiskType(String targetDiskType) {
            if (targetDiskType == null) {
              throw new MissingRequiredPropertyException("VmwareReplicatedVmManagedDisk", "targetDiskType");
            }
            this.targetDiskType = targetDiskType;
            return this;
        }
        public VmwareReplicatedVmManagedDisk build() {
            final var _resultValue = new VmwareReplicatedVmManagedDisk();
            _resultValue.diskId = diskId;
            _resultValue.logStorageAccountId = logStorageAccountId;
            _resultValue.targetDiskEncryptionSetId = targetDiskEncryptionSetId;
            _resultValue.targetDiskType = targetDiskType;
            return _resultValue;
        }
    }
}
