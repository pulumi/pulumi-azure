// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.apimanagement.outputs;

import com.pulumi.azure.apimanagement.outputs.ApiImportWsdlSelector;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ApiImport {
    /**
     * @return The format of the content from which the API Definition should be imported. Possible values are: `openapi`, `openapi+json`, `openapi+json-link`, `openapi-link`, `swagger-json`, `swagger-link-json`, `wadl-link-json`, `wadl-xml`, `wsdl` and `wsdl-link`.
     * 
     */
    private String contentFormat;
    /**
     * @return The Content from which the API Definition should be imported. When a `content_format` of `*-link-*` is specified this must be a URL, otherwise this must be defined inline.
     * 
     */
    private String contentValue;
    /**
     * @return A `wsdl_selector` block as defined below, which allows you to limit the import of a WSDL to only a subset of the document. This can only be specified when `content_format` is `wsdl` or `wsdl-link`.
     * 
     */
    private @Nullable ApiImportWsdlSelector wsdlSelector;

    private ApiImport() {}
    /**
     * @return The format of the content from which the API Definition should be imported. Possible values are: `openapi`, `openapi+json`, `openapi+json-link`, `openapi-link`, `swagger-json`, `swagger-link-json`, `wadl-link-json`, `wadl-xml`, `wsdl` and `wsdl-link`.
     * 
     */
    public String contentFormat() {
        return this.contentFormat;
    }
    /**
     * @return The Content from which the API Definition should be imported. When a `content_format` of `*-link-*` is specified this must be a URL, otherwise this must be defined inline.
     * 
     */
    public String contentValue() {
        return this.contentValue;
    }
    /**
     * @return A `wsdl_selector` block as defined below, which allows you to limit the import of a WSDL to only a subset of the document. This can only be specified when `content_format` is `wsdl` or `wsdl-link`.
     * 
     */
    public Optional<ApiImportWsdlSelector> wsdlSelector() {
        return Optional.ofNullable(this.wsdlSelector);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApiImport defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String contentFormat;
        private String contentValue;
        private @Nullable ApiImportWsdlSelector wsdlSelector;
        public Builder() {}
        public Builder(ApiImport defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.contentFormat = defaults.contentFormat;
    	      this.contentValue = defaults.contentValue;
    	      this.wsdlSelector = defaults.wsdlSelector;
        }

        @CustomType.Setter
        public Builder contentFormat(String contentFormat) {
            if (contentFormat == null) {
              throw new MissingRequiredPropertyException("ApiImport", "contentFormat");
            }
            this.contentFormat = contentFormat;
            return this;
        }
        @CustomType.Setter
        public Builder contentValue(String contentValue) {
            if (contentValue == null) {
              throw new MissingRequiredPropertyException("ApiImport", "contentValue");
            }
            this.contentValue = contentValue;
            return this;
        }
        @CustomType.Setter
        public Builder wsdlSelector(@Nullable ApiImportWsdlSelector wsdlSelector) {

            this.wsdlSelector = wsdlSelector;
            return this;
        }
        public ApiImport build() {
            final var _resultValue = new ApiImport();
            _resultValue.contentFormat = contentFormat;
            _resultValue.contentValue = contentValue;
            _resultValue.wsdlSelector = wsdlSelector;
            return _resultValue;
        }
    }
}
