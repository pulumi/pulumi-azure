// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.mobile.inputs;

import com.pulumi.azure.mobile.inputs.NetworkSimPolicySliceArgs;
import com.pulumi.azure.mobile.inputs.NetworkSimPolicyUserEquipmentAggregateMaximumBitRateArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkSimPolicyState extends com.pulumi.resources.ResourceArgs {

    public static final NetworkSimPolicyState Empty = new NetworkSimPolicyState();

    /**
     * The ID of default slice to use if the UE does not explicitly specify it. This slice must exist in the `slice` block.
     * 
     */
    @Import(name="defaultSliceId")
    private @Nullable Output<String> defaultSliceId;

    /**
     * @return The ID of default slice to use if the UE does not explicitly specify it. This slice must exist in the `slice` block.
     * 
     */
    public Optional<Output<String>> defaultSliceId() {
        return Optional.ofNullable(this.defaultSliceId);
    }

    /**
     * Specifies the Azure Region where the Mobile Network Sim Policy should exist. Changing this forces a new Mobile Network Sim Policies to be created.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Specifies the Azure Region where the Mobile Network Sim Policy should exist. Changing this forces a new Mobile Network Sim Policies to be created.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The ID of the Mobile Network which the Sim Policy belongs to. Changing this forces a new Mobile Network Sim Policies to be created.
     * 
     */
    @Import(name="mobileNetworkId")
    private @Nullable Output<String> mobileNetworkId;

    /**
     * @return The ID of the Mobile Network which the Sim Policy belongs to. Changing this forces a new Mobile Network Sim Policies to be created.
     * 
     */
    public Optional<Output<String>> mobileNetworkId() {
        return Optional.ofNullable(this.mobileNetworkId);
    }

    /**
     * The name which should be used for this Mobile Network Sim Policies. Changing this forces a new Mobile Network Sim Policies to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name which should be used for this Mobile Network Sim Policies. Changing this forces a new Mobile Network Sim Policies to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * RAT/Frequency Selection Priority Index, defined in 3GPP TS 36.413.
     * 
     */
    @Import(name="ratFrequencySelectionPriorityIndex")
    private @Nullable Output<Integer> ratFrequencySelectionPriorityIndex;

    /**
     * @return RAT/Frequency Selection Priority Index, defined in 3GPP TS 36.413.
     * 
     */
    public Optional<Output<Integer>> ratFrequencySelectionPriorityIndex() {
        return Optional.ofNullable(this.ratFrequencySelectionPriorityIndex);
    }

    /**
     * Interval for the user equipment periodic registration update procedure. Defaults to `3240`.
     * 
     */
    @Import(name="registrationTimerInSeconds")
    private @Nullable Output<Integer> registrationTimerInSeconds;

    /**
     * @return Interval for the user equipment periodic registration update procedure. Defaults to `3240`.
     * 
     */
    public Optional<Output<Integer>> registrationTimerInSeconds() {
        return Optional.ofNullable(this.registrationTimerInSeconds);
    }

    /**
     * An array of `slice` block as defined below. The allowed slices and the settings to use for them. The list must not contain duplicate items and must contain at least one item.
     * 
     */
    @Import(name="slices")
    private @Nullable Output<List<NetworkSimPolicySliceArgs>> slices;

    /**
     * @return An array of `slice` block as defined below. The allowed slices and the settings to use for them. The list must not contain duplicate items and must contain at least one item.
     * 
     */
    public Optional<Output<List<NetworkSimPolicySliceArgs>>> slices() {
        return Optional.ofNullable(this.slices);
    }

    /**
     * A mapping of tags which should be assigned to the Mobile Network Sim Policies.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags which should be assigned to the Mobile Network Sim Policies.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A `user_equipment_aggregate_maximum_bit_rate` block as defined below.
     * 
     */
    @Import(name="userEquipmentAggregateMaximumBitRate")
    private @Nullable Output<NetworkSimPolicyUserEquipmentAggregateMaximumBitRateArgs> userEquipmentAggregateMaximumBitRate;

    /**
     * @return A `user_equipment_aggregate_maximum_bit_rate` block as defined below.
     * 
     */
    public Optional<Output<NetworkSimPolicyUserEquipmentAggregateMaximumBitRateArgs>> userEquipmentAggregateMaximumBitRate() {
        return Optional.ofNullable(this.userEquipmentAggregateMaximumBitRate);
    }

    private NetworkSimPolicyState() {}

    private NetworkSimPolicyState(NetworkSimPolicyState $) {
        this.defaultSliceId = $.defaultSliceId;
        this.location = $.location;
        this.mobileNetworkId = $.mobileNetworkId;
        this.name = $.name;
        this.ratFrequencySelectionPriorityIndex = $.ratFrequencySelectionPriorityIndex;
        this.registrationTimerInSeconds = $.registrationTimerInSeconds;
        this.slices = $.slices;
        this.tags = $.tags;
        this.userEquipmentAggregateMaximumBitRate = $.userEquipmentAggregateMaximumBitRate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkSimPolicyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkSimPolicyState $;

        public Builder() {
            $ = new NetworkSimPolicyState();
        }

        public Builder(NetworkSimPolicyState defaults) {
            $ = new NetworkSimPolicyState(Objects.requireNonNull(defaults));
        }

        /**
         * @param defaultSliceId The ID of default slice to use if the UE does not explicitly specify it. This slice must exist in the `slice` block.
         * 
         * @return builder
         * 
         */
        public Builder defaultSliceId(@Nullable Output<String> defaultSliceId) {
            $.defaultSliceId = defaultSliceId;
            return this;
        }

        /**
         * @param defaultSliceId The ID of default slice to use if the UE does not explicitly specify it. This slice must exist in the `slice` block.
         * 
         * @return builder
         * 
         */
        public Builder defaultSliceId(String defaultSliceId) {
            return defaultSliceId(Output.of(defaultSliceId));
        }

        /**
         * @param location Specifies the Azure Region where the Mobile Network Sim Policy should exist. Changing this forces a new Mobile Network Sim Policies to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Specifies the Azure Region where the Mobile Network Sim Policy should exist. Changing this forces a new Mobile Network Sim Policies to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param mobileNetworkId The ID of the Mobile Network which the Sim Policy belongs to. Changing this forces a new Mobile Network Sim Policies to be created.
         * 
         * @return builder
         * 
         */
        public Builder mobileNetworkId(@Nullable Output<String> mobileNetworkId) {
            $.mobileNetworkId = mobileNetworkId;
            return this;
        }

        /**
         * @param mobileNetworkId The ID of the Mobile Network which the Sim Policy belongs to. Changing this forces a new Mobile Network Sim Policies to be created.
         * 
         * @return builder
         * 
         */
        public Builder mobileNetworkId(String mobileNetworkId) {
            return mobileNetworkId(Output.of(mobileNetworkId));
        }

        /**
         * @param name The name which should be used for this Mobile Network Sim Policies. Changing this forces a new Mobile Network Sim Policies to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this Mobile Network Sim Policies. Changing this forces a new Mobile Network Sim Policies to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param ratFrequencySelectionPriorityIndex RAT/Frequency Selection Priority Index, defined in 3GPP TS 36.413.
         * 
         * @return builder
         * 
         */
        public Builder ratFrequencySelectionPriorityIndex(@Nullable Output<Integer> ratFrequencySelectionPriorityIndex) {
            $.ratFrequencySelectionPriorityIndex = ratFrequencySelectionPriorityIndex;
            return this;
        }

        /**
         * @param ratFrequencySelectionPriorityIndex RAT/Frequency Selection Priority Index, defined in 3GPP TS 36.413.
         * 
         * @return builder
         * 
         */
        public Builder ratFrequencySelectionPriorityIndex(Integer ratFrequencySelectionPriorityIndex) {
            return ratFrequencySelectionPriorityIndex(Output.of(ratFrequencySelectionPriorityIndex));
        }

        /**
         * @param registrationTimerInSeconds Interval for the user equipment periodic registration update procedure. Defaults to `3240`.
         * 
         * @return builder
         * 
         */
        public Builder registrationTimerInSeconds(@Nullable Output<Integer> registrationTimerInSeconds) {
            $.registrationTimerInSeconds = registrationTimerInSeconds;
            return this;
        }

        /**
         * @param registrationTimerInSeconds Interval for the user equipment periodic registration update procedure. Defaults to `3240`.
         * 
         * @return builder
         * 
         */
        public Builder registrationTimerInSeconds(Integer registrationTimerInSeconds) {
            return registrationTimerInSeconds(Output.of(registrationTimerInSeconds));
        }

        /**
         * @param slices An array of `slice` block as defined below. The allowed slices and the settings to use for them. The list must not contain duplicate items and must contain at least one item.
         * 
         * @return builder
         * 
         */
        public Builder slices(@Nullable Output<List<NetworkSimPolicySliceArgs>> slices) {
            $.slices = slices;
            return this;
        }

        /**
         * @param slices An array of `slice` block as defined below. The allowed slices and the settings to use for them. The list must not contain duplicate items and must contain at least one item.
         * 
         * @return builder
         * 
         */
        public Builder slices(List<NetworkSimPolicySliceArgs> slices) {
            return slices(Output.of(slices));
        }

        /**
         * @param slices An array of `slice` block as defined below. The allowed slices and the settings to use for them. The list must not contain duplicate items and must contain at least one item.
         * 
         * @return builder
         * 
         */
        public Builder slices(NetworkSimPolicySliceArgs... slices) {
            return slices(List.of(slices));
        }

        /**
         * @param tags A mapping of tags which should be assigned to the Mobile Network Sim Policies.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags which should be assigned to the Mobile Network Sim Policies.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param userEquipmentAggregateMaximumBitRate A `user_equipment_aggregate_maximum_bit_rate` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder userEquipmentAggregateMaximumBitRate(@Nullable Output<NetworkSimPolicyUserEquipmentAggregateMaximumBitRateArgs> userEquipmentAggregateMaximumBitRate) {
            $.userEquipmentAggregateMaximumBitRate = userEquipmentAggregateMaximumBitRate;
            return this;
        }

        /**
         * @param userEquipmentAggregateMaximumBitRate A `user_equipment_aggregate_maximum_bit_rate` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder userEquipmentAggregateMaximumBitRate(NetworkSimPolicyUserEquipmentAggregateMaximumBitRateArgs userEquipmentAggregateMaximumBitRate) {
            return userEquipmentAggregateMaximumBitRate(Output.of(userEquipmentAggregateMaximumBitRate));
        }

        public NetworkSimPolicyState build() {
            return $;
        }
    }

}
