// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.workloadssap.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class ThreeTierVirtualInstanceThreeTierConfigurationDatabaseServerConfigurationDiskVolumeConfiguration {
    /**
     * @return The total number of disks required for the concerned volume. Possible values are at least `1`. Changing this forces a new resource to be created.
     * 
     */
    private Integer numberOfDisks;
    /**
     * @return The size of the Disk in GB. Changing this forces a new resource to be created.
     * 
     */
    private Integer sizeInGb;
    /**
     * @return The name of the Disk SKU. Possible values are `Premium_LRS`, `PremiumV2_LRS`, `Premium_ZRS`, `Standard_LRS`, `StandardSSD_LRS`, `StandardSSD_ZRS` and `UltraSSD_LRS`. Changing this forces a new resource to be created.
     * 
     */
    private String skuName;
    /**
     * @return Specifies the volumn name of the database disk. Possible values are `backup`, `hana/data`, `hana/log`, `hana/shared`, `os` and `usr/sap`. Changing this forces a new resource to be created.
     * 
     */
    private String volumeName;

    private ThreeTierVirtualInstanceThreeTierConfigurationDatabaseServerConfigurationDiskVolumeConfiguration() {}
    /**
     * @return The total number of disks required for the concerned volume. Possible values are at least `1`. Changing this forces a new resource to be created.
     * 
     */
    public Integer numberOfDisks() {
        return this.numberOfDisks;
    }
    /**
     * @return The size of the Disk in GB. Changing this forces a new resource to be created.
     * 
     */
    public Integer sizeInGb() {
        return this.sizeInGb;
    }
    /**
     * @return The name of the Disk SKU. Possible values are `Premium_LRS`, `PremiumV2_LRS`, `Premium_ZRS`, `Standard_LRS`, `StandardSSD_LRS`, `StandardSSD_ZRS` and `UltraSSD_LRS`. Changing this forces a new resource to be created.
     * 
     */
    public String skuName() {
        return this.skuName;
    }
    /**
     * @return Specifies the volumn name of the database disk. Possible values are `backup`, `hana/data`, `hana/log`, `hana/shared`, `os` and `usr/sap`. Changing this forces a new resource to be created.
     * 
     */
    public String volumeName() {
        return this.volumeName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ThreeTierVirtualInstanceThreeTierConfigurationDatabaseServerConfigurationDiskVolumeConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer numberOfDisks;
        private Integer sizeInGb;
        private String skuName;
        private String volumeName;
        public Builder() {}
        public Builder(ThreeTierVirtualInstanceThreeTierConfigurationDatabaseServerConfigurationDiskVolumeConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.numberOfDisks = defaults.numberOfDisks;
    	      this.sizeInGb = defaults.sizeInGb;
    	      this.skuName = defaults.skuName;
    	      this.volumeName = defaults.volumeName;
        }

        @CustomType.Setter
        public Builder numberOfDisks(Integer numberOfDisks) {
            if (numberOfDisks == null) {
              throw new MissingRequiredPropertyException("ThreeTierVirtualInstanceThreeTierConfigurationDatabaseServerConfigurationDiskVolumeConfiguration", "numberOfDisks");
            }
            this.numberOfDisks = numberOfDisks;
            return this;
        }
        @CustomType.Setter
        public Builder sizeInGb(Integer sizeInGb) {
            if (sizeInGb == null) {
              throw new MissingRequiredPropertyException("ThreeTierVirtualInstanceThreeTierConfigurationDatabaseServerConfigurationDiskVolumeConfiguration", "sizeInGb");
            }
            this.sizeInGb = sizeInGb;
            return this;
        }
        @CustomType.Setter
        public Builder skuName(String skuName) {
            if (skuName == null) {
              throw new MissingRequiredPropertyException("ThreeTierVirtualInstanceThreeTierConfigurationDatabaseServerConfigurationDiskVolumeConfiguration", "skuName");
            }
            this.skuName = skuName;
            return this;
        }
        @CustomType.Setter
        public Builder volumeName(String volumeName) {
            if (volumeName == null) {
              throw new MissingRequiredPropertyException("ThreeTierVirtualInstanceThreeTierConfigurationDatabaseServerConfigurationDiskVolumeConfiguration", "volumeName");
            }
            this.volumeName = volumeName;
            return this;
        }
        public ThreeTierVirtualInstanceThreeTierConfigurationDatabaseServerConfigurationDiskVolumeConfiguration build() {
            final var _resultValue = new ThreeTierVirtualInstanceThreeTierConfigurationDatabaseServerConfigurationDiskVolumeConfiguration();
            _resultValue.numberOfDisks = numberOfDisks;
            _resultValue.sizeInGb = sizeInGb;
            _resultValue.skuName = skuName;
            _resultValue.volumeName = volumeName;
            return _resultValue;
        }
    }
}
