// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.securitycenter.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SubscriptionPricingExtensionArgs extends com.pulumi.resources.ResourceArgs {

    public static final SubscriptionPricingExtensionArgs Empty = new SubscriptionPricingExtensionArgs();

    /**
     * Key/Value pairs that are required for some extensions.
     * 
     * &gt; **NOTE:** If an extension is not defined, it will not be enabled.
     * 
     * &gt; **NOTE:** Changing the pricing tier to `Standard` affects all resources of the given type in the subscription and could be quite costly.
     * 
     */
    @Import(name="additionalExtensionProperties")
    private @Nullable Output<Map<String,String>> additionalExtensionProperties;

    /**
     * @return Key/Value pairs that are required for some extensions.
     * 
     * &gt; **NOTE:** If an extension is not defined, it will not be enabled.
     * 
     * &gt; **NOTE:** Changing the pricing tier to `Standard` affects all resources of the given type in the subscription and could be quite costly.
     * 
     */
    public Optional<Output<Map<String,String>>> additionalExtensionProperties() {
        return Optional.ofNullable(this.additionalExtensionProperties);
    }

    /**
     * The name of extension.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of extension.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    private SubscriptionPricingExtensionArgs() {}

    private SubscriptionPricingExtensionArgs(SubscriptionPricingExtensionArgs $) {
        this.additionalExtensionProperties = $.additionalExtensionProperties;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SubscriptionPricingExtensionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SubscriptionPricingExtensionArgs $;

        public Builder() {
            $ = new SubscriptionPricingExtensionArgs();
        }

        public Builder(SubscriptionPricingExtensionArgs defaults) {
            $ = new SubscriptionPricingExtensionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param additionalExtensionProperties Key/Value pairs that are required for some extensions.
         * 
         * &gt; **NOTE:** If an extension is not defined, it will not be enabled.
         * 
         * &gt; **NOTE:** Changing the pricing tier to `Standard` affects all resources of the given type in the subscription and could be quite costly.
         * 
         * @return builder
         * 
         */
        public Builder additionalExtensionProperties(@Nullable Output<Map<String,String>> additionalExtensionProperties) {
            $.additionalExtensionProperties = additionalExtensionProperties;
            return this;
        }

        /**
         * @param additionalExtensionProperties Key/Value pairs that are required for some extensions.
         * 
         * &gt; **NOTE:** If an extension is not defined, it will not be enabled.
         * 
         * &gt; **NOTE:** Changing the pricing tier to `Standard` affects all resources of the given type in the subscription and could be quite costly.
         * 
         * @return builder
         * 
         */
        public Builder additionalExtensionProperties(Map<String,String> additionalExtensionProperties) {
            return additionalExtensionProperties(Output.of(additionalExtensionProperties));
        }

        /**
         * @param name The name of extension.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of extension.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public SubscriptionPricingExtensionArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("SubscriptionPricingExtensionArgs", "name");
            }
            return $;
        }
    }

}
