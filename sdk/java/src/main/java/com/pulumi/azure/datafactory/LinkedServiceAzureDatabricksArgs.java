// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.datafactory;

import com.pulumi.azure.datafactory.inputs.LinkedServiceAzureDatabricksInstancePoolArgs;
import com.pulumi.azure.datafactory.inputs.LinkedServiceAzureDatabricksKeyVaultPasswordArgs;
import com.pulumi.azure.datafactory.inputs.LinkedServiceAzureDatabricksNewClusterConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LinkedServiceAzureDatabricksArgs extends com.pulumi.resources.ResourceArgs {

    public static final LinkedServiceAzureDatabricksArgs Empty = new LinkedServiceAzureDatabricksArgs();

    /**
     * Authenticate to ADB via an access token.
     * 
     */
    @Import(name="accessToken")
    private @Nullable Output<String> accessToken;

    /**
     * @return Authenticate to ADB via an access token.
     * 
     */
    public Optional<Output<String>> accessToken() {
        return Optional.ofNullable(this.accessToken);
    }

    /**
     * The domain URL of the databricks instance.
     * 
     */
    @Import(name="adbDomain", required=true)
    private Output<String> adbDomain;

    /**
     * @return The domain URL of the databricks instance.
     * 
     */
    public Output<String> adbDomain() {
        return this.adbDomain;
    }

    /**
     * A map of additional properties to associate with the Data Factory Linked Service.
     * 
     */
    @Import(name="additionalProperties")
    private @Nullable Output<Map<String,String>> additionalProperties;

    /**
     * @return A map of additional properties to associate with the Data Factory Linked Service.
     * 
     */
    public Optional<Output<Map<String,String>>> additionalProperties() {
        return Optional.ofNullable(this.additionalProperties);
    }

    /**
     * List of tags that can be used for describing the Data Factory Linked Service.
     * 
     */
    @Import(name="annotations")
    private @Nullable Output<List<String>> annotations;

    /**
     * @return List of tags that can be used for describing the Data Factory Linked Service.
     * 
     */
    public Optional<Output<List<String>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
     * 
     */
    @Import(name="dataFactoryId", required=true)
    private Output<String> dataFactoryId;

    /**
     * @return The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
     * 
     */
    public Output<String> dataFactoryId() {
        return this.dataFactoryId;
    }

    /**
     * The description for the Data Factory Linked Service.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description for the Data Factory Linked Service.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The cluster_id of an existing cluster within the linked ADB instance.
     * 
     */
    @Import(name="existingClusterId")
    private @Nullable Output<String> existingClusterId;

    /**
     * @return The cluster_id of an existing cluster within the linked ADB instance.
     * 
     */
    public Optional<Output<String>> existingClusterId() {
        return Optional.ofNullable(this.existingClusterId);
    }

    /**
     * Leverages an instance pool within the linked ADB instance as one `instance_pool` block defined below.
     * 
     */
    @Import(name="instancePool")
    private @Nullable Output<LinkedServiceAzureDatabricksInstancePoolArgs> instancePool;

    /**
     * @return Leverages an instance pool within the linked ADB instance as one `instance_pool` block defined below.
     * 
     */
    public Optional<Output<LinkedServiceAzureDatabricksInstancePoolArgs>> instancePool() {
        return Optional.ofNullable(this.instancePool);
    }

    /**
     * The integration runtime reference to associate with the Data Factory Linked Service.
     * 
     */
    @Import(name="integrationRuntimeName")
    private @Nullable Output<String> integrationRuntimeName;

    /**
     * @return The integration runtime reference to associate with the Data Factory Linked Service.
     * 
     */
    public Optional<Output<String>> integrationRuntimeName() {
        return Optional.ofNullable(this.integrationRuntimeName);
    }

    /**
     * Authenticate to ADB via Azure Key Vault Linked Service as defined in the `key_vault_password` block below.
     * 
     */
    @Import(name="keyVaultPassword")
    private @Nullable Output<LinkedServiceAzureDatabricksKeyVaultPasswordArgs> keyVaultPassword;

    /**
     * @return Authenticate to ADB via Azure Key Vault Linked Service as defined in the `key_vault_password` block below.
     * 
     */
    public Optional<Output<LinkedServiceAzureDatabricksKeyVaultPasswordArgs>> keyVaultPassword() {
        return Optional.ofNullable(this.keyVaultPassword);
    }

    /**
     * Authenticate to ADB via managed service identity.
     * 
     */
    @Import(name="msiWorkSpaceResourceId")
    private @Nullable Output<String> msiWorkSpaceResourceId;

    /**
     * @return Authenticate to ADB via managed service identity.
     * 
     */
    public Optional<Output<String>> msiWorkSpaceResourceId() {
        return Optional.ofNullable(this.msiWorkSpaceResourceId);
    }

    /**
     * Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Creates new clusters within the linked ADB instance as defined in the `new_cluster_config` block below.
     * 
     */
    @Import(name="newClusterConfig")
    private @Nullable Output<LinkedServiceAzureDatabricksNewClusterConfigArgs> newClusterConfig;

    /**
     * @return Creates new clusters within the linked ADB instance as defined in the `new_cluster_config` block below.
     * 
     */
    public Optional<Output<LinkedServiceAzureDatabricksNewClusterConfigArgs>> newClusterConfig() {
        return Optional.ofNullable(this.newClusterConfig);
    }

    /**
     * A map of parameters to associate with the Data Factory Linked Service.
     * 
     */
    @Import(name="parameters")
    private @Nullable Output<Map<String,String>> parameters;

    /**
     * @return A map of parameters to associate with the Data Factory Linked Service.
     * 
     */
    public Optional<Output<Map<String,String>>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    private LinkedServiceAzureDatabricksArgs() {}

    private LinkedServiceAzureDatabricksArgs(LinkedServiceAzureDatabricksArgs $) {
        this.accessToken = $.accessToken;
        this.adbDomain = $.adbDomain;
        this.additionalProperties = $.additionalProperties;
        this.annotations = $.annotations;
        this.dataFactoryId = $.dataFactoryId;
        this.description = $.description;
        this.existingClusterId = $.existingClusterId;
        this.instancePool = $.instancePool;
        this.integrationRuntimeName = $.integrationRuntimeName;
        this.keyVaultPassword = $.keyVaultPassword;
        this.msiWorkSpaceResourceId = $.msiWorkSpaceResourceId;
        this.name = $.name;
        this.newClusterConfig = $.newClusterConfig;
        this.parameters = $.parameters;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LinkedServiceAzureDatabricksArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LinkedServiceAzureDatabricksArgs $;

        public Builder() {
            $ = new LinkedServiceAzureDatabricksArgs();
        }

        public Builder(LinkedServiceAzureDatabricksArgs defaults) {
            $ = new LinkedServiceAzureDatabricksArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessToken Authenticate to ADB via an access token.
         * 
         * @return builder
         * 
         */
        public Builder accessToken(@Nullable Output<String> accessToken) {
            $.accessToken = accessToken;
            return this;
        }

        /**
         * @param accessToken Authenticate to ADB via an access token.
         * 
         * @return builder
         * 
         */
        public Builder accessToken(String accessToken) {
            return accessToken(Output.of(accessToken));
        }

        /**
         * @param adbDomain The domain URL of the databricks instance.
         * 
         * @return builder
         * 
         */
        public Builder adbDomain(Output<String> adbDomain) {
            $.adbDomain = adbDomain;
            return this;
        }

        /**
         * @param adbDomain The domain URL of the databricks instance.
         * 
         * @return builder
         * 
         */
        public Builder adbDomain(String adbDomain) {
            return adbDomain(Output.of(adbDomain));
        }

        /**
         * @param additionalProperties A map of additional properties to associate with the Data Factory Linked Service.
         * 
         * @return builder
         * 
         */
        public Builder additionalProperties(@Nullable Output<Map<String,String>> additionalProperties) {
            $.additionalProperties = additionalProperties;
            return this;
        }

        /**
         * @param additionalProperties A map of additional properties to associate with the Data Factory Linked Service.
         * 
         * @return builder
         * 
         */
        public Builder additionalProperties(Map<String,String> additionalProperties) {
            return additionalProperties(Output.of(additionalProperties));
        }

        /**
         * @param annotations List of tags that can be used for describing the Data Factory Linked Service.
         * 
         * @return builder
         * 
         */
        public Builder annotations(@Nullable Output<List<String>> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param annotations List of tags that can be used for describing the Data Factory Linked Service.
         * 
         * @return builder
         * 
         */
        public Builder annotations(List<String> annotations) {
            return annotations(Output.of(annotations));
        }

        /**
         * @param annotations List of tags that can be used for describing the Data Factory Linked Service.
         * 
         * @return builder
         * 
         */
        public Builder annotations(String... annotations) {
            return annotations(List.of(annotations));
        }

        /**
         * @param dataFactoryId The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
         * 
         * @return builder
         * 
         */
        public Builder dataFactoryId(Output<String> dataFactoryId) {
            $.dataFactoryId = dataFactoryId;
            return this;
        }

        /**
         * @param dataFactoryId The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
         * 
         * @return builder
         * 
         */
        public Builder dataFactoryId(String dataFactoryId) {
            return dataFactoryId(Output.of(dataFactoryId));
        }

        /**
         * @param description The description for the Data Factory Linked Service.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description for the Data Factory Linked Service.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param existingClusterId The cluster_id of an existing cluster within the linked ADB instance.
         * 
         * @return builder
         * 
         */
        public Builder existingClusterId(@Nullable Output<String> existingClusterId) {
            $.existingClusterId = existingClusterId;
            return this;
        }

        /**
         * @param existingClusterId The cluster_id of an existing cluster within the linked ADB instance.
         * 
         * @return builder
         * 
         */
        public Builder existingClusterId(String existingClusterId) {
            return existingClusterId(Output.of(existingClusterId));
        }

        /**
         * @param instancePool Leverages an instance pool within the linked ADB instance as one `instance_pool` block defined below.
         * 
         * @return builder
         * 
         */
        public Builder instancePool(@Nullable Output<LinkedServiceAzureDatabricksInstancePoolArgs> instancePool) {
            $.instancePool = instancePool;
            return this;
        }

        /**
         * @param instancePool Leverages an instance pool within the linked ADB instance as one `instance_pool` block defined below.
         * 
         * @return builder
         * 
         */
        public Builder instancePool(LinkedServiceAzureDatabricksInstancePoolArgs instancePool) {
            return instancePool(Output.of(instancePool));
        }

        /**
         * @param integrationRuntimeName The integration runtime reference to associate with the Data Factory Linked Service.
         * 
         * @return builder
         * 
         */
        public Builder integrationRuntimeName(@Nullable Output<String> integrationRuntimeName) {
            $.integrationRuntimeName = integrationRuntimeName;
            return this;
        }

        /**
         * @param integrationRuntimeName The integration runtime reference to associate with the Data Factory Linked Service.
         * 
         * @return builder
         * 
         */
        public Builder integrationRuntimeName(String integrationRuntimeName) {
            return integrationRuntimeName(Output.of(integrationRuntimeName));
        }

        /**
         * @param keyVaultPassword Authenticate to ADB via Azure Key Vault Linked Service as defined in the `key_vault_password` block below.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultPassword(@Nullable Output<LinkedServiceAzureDatabricksKeyVaultPasswordArgs> keyVaultPassword) {
            $.keyVaultPassword = keyVaultPassword;
            return this;
        }

        /**
         * @param keyVaultPassword Authenticate to ADB via Azure Key Vault Linked Service as defined in the `key_vault_password` block below.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultPassword(LinkedServiceAzureDatabricksKeyVaultPasswordArgs keyVaultPassword) {
            return keyVaultPassword(Output.of(keyVaultPassword));
        }

        /**
         * @param msiWorkSpaceResourceId Authenticate to ADB via managed service identity.
         * 
         * @return builder
         * 
         */
        public Builder msiWorkSpaceResourceId(@Nullable Output<String> msiWorkSpaceResourceId) {
            $.msiWorkSpaceResourceId = msiWorkSpaceResourceId;
            return this;
        }

        /**
         * @param msiWorkSpaceResourceId Authenticate to ADB via managed service identity.
         * 
         * @return builder
         * 
         */
        public Builder msiWorkSpaceResourceId(String msiWorkSpaceResourceId) {
            return msiWorkSpaceResourceId(Output.of(msiWorkSpaceResourceId));
        }

        /**
         * @param name Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param newClusterConfig Creates new clusters within the linked ADB instance as defined in the `new_cluster_config` block below.
         * 
         * @return builder
         * 
         */
        public Builder newClusterConfig(@Nullable Output<LinkedServiceAzureDatabricksNewClusterConfigArgs> newClusterConfig) {
            $.newClusterConfig = newClusterConfig;
            return this;
        }

        /**
         * @param newClusterConfig Creates new clusters within the linked ADB instance as defined in the `new_cluster_config` block below.
         * 
         * @return builder
         * 
         */
        public Builder newClusterConfig(LinkedServiceAzureDatabricksNewClusterConfigArgs newClusterConfig) {
            return newClusterConfig(Output.of(newClusterConfig));
        }

        /**
         * @param parameters A map of parameters to associate with the Data Factory Linked Service.
         * 
         * @return builder
         * 
         */
        public Builder parameters(@Nullable Output<Map<String,String>> parameters) {
            $.parameters = parameters;
            return this;
        }

        /**
         * @param parameters A map of parameters to associate with the Data Factory Linked Service.
         * 
         * @return builder
         * 
         */
        public Builder parameters(Map<String,String> parameters) {
            return parameters(Output.of(parameters));
        }

        public LinkedServiceAzureDatabricksArgs build() {
            if ($.adbDomain == null) {
                throw new MissingRequiredPropertyException("LinkedServiceAzureDatabricksArgs", "adbDomain");
            }
            if ($.dataFactoryId == null) {
                throw new MissingRequiredPropertyException("LinkedServiceAzureDatabricksArgs", "dataFactoryId");
            }
            return $;
        }
    }

}
