// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.netapp.outputs;

import com.pulumi.azure.netapp.outputs.GetVolumeGroupSapHanaVolumeDataProtectionReplication;
import com.pulumi.azure.netapp.outputs.GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicy;
import com.pulumi.azure.netapp.outputs.GetVolumeGroupSapHanaVolumeExportPolicyRule;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetVolumeGroupSapHanaVolume {
    /**
     * @return The ID of the Capacity Pool.
     * 
     */
    private String capacityPoolId;
    /**
     * @return A `data_protection_replication` block as defined below.
     * 
     */
    private List<GetVolumeGroupSapHanaVolumeDataProtectionReplication> dataProtectionReplications;
    /**
     * @return A `data_protection_snapshot_policy` block as defined below.
     * 
     */
    private List<GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicy> dataProtectionSnapshotPolicies;
    /**
     * @return A `export_policy_rule` block as defined below.
     * 
     */
    private List<GetVolumeGroupSapHanaVolumeExportPolicyRule> exportPolicyRules;
    /**
     * @return Volume ID.
     * 
     */
    private String id;
    /**
     * @return A `mount_ip_addresses` block as defined below.
     * 
     */
    private List<String> mountIpAddresses;
    /**
     * @return The name of this Application Volume Group for SAP HANA application.
     * 
     */
    private String name;
    /**
     * @return A `protocols` block as defined below.
     * 
     */
    private List<String> protocols;
    /**
     * @return The ID of the proximity placement group.
     * 
     */
    private String proximityPlacementGroupId;
    /**
     * @return Volume security style.
     * 
     */
    private String securityStyle;
    /**
     * @return The target performance of the file system.
     * 
     */
    private String serviceLevel;
    /**
     * @return Is the .snapshot (NFS clients) path of a volume visible?
     * 
     */
    private Boolean snapshotDirectoryVisible;
    /**
     * @return The maximum Storage Quota allowed for a file system in Gigabytes.
     * 
     */
    private Integer storageQuotaInGb;
    /**
     * @return The ID of the Subnet the NetApp Volume resides in.
     * 
     */
    private String subnetId;
    /**
     * @return A mapping of tags assigned to the Application Volume Group.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return Throughput of this volume in Mibps.
     * 
     */
    private Double throughputInMibps;
    /**
     * @return A unique file path for the volume.
     * 
     */
    private String volumePath;
    /**
     * @return Volume spec name.
     * 
     */
    private String volumeSpecName;

    private GetVolumeGroupSapHanaVolume() {}
    /**
     * @return The ID of the Capacity Pool.
     * 
     */
    public String capacityPoolId() {
        return this.capacityPoolId;
    }
    /**
     * @return A `data_protection_replication` block as defined below.
     * 
     */
    public List<GetVolumeGroupSapHanaVolumeDataProtectionReplication> dataProtectionReplications() {
        return this.dataProtectionReplications;
    }
    /**
     * @return A `data_protection_snapshot_policy` block as defined below.
     * 
     */
    public List<GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicy> dataProtectionSnapshotPolicies() {
        return this.dataProtectionSnapshotPolicies;
    }
    /**
     * @return A `export_policy_rule` block as defined below.
     * 
     */
    public List<GetVolumeGroupSapHanaVolumeExportPolicyRule> exportPolicyRules() {
        return this.exportPolicyRules;
    }
    /**
     * @return Volume ID.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A `mount_ip_addresses` block as defined below.
     * 
     */
    public List<String> mountIpAddresses() {
        return this.mountIpAddresses;
    }
    /**
     * @return The name of this Application Volume Group for SAP HANA application.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return A `protocols` block as defined below.
     * 
     */
    public List<String> protocols() {
        return this.protocols;
    }
    /**
     * @return The ID of the proximity placement group.
     * 
     */
    public String proximityPlacementGroupId() {
        return this.proximityPlacementGroupId;
    }
    /**
     * @return Volume security style.
     * 
     */
    public String securityStyle() {
        return this.securityStyle;
    }
    /**
     * @return The target performance of the file system.
     * 
     */
    public String serviceLevel() {
        return this.serviceLevel;
    }
    /**
     * @return Is the .snapshot (NFS clients) path of a volume visible?
     * 
     */
    public Boolean snapshotDirectoryVisible() {
        return this.snapshotDirectoryVisible;
    }
    /**
     * @return The maximum Storage Quota allowed for a file system in Gigabytes.
     * 
     */
    public Integer storageQuotaInGb() {
        return this.storageQuotaInGb;
    }
    /**
     * @return The ID of the Subnet the NetApp Volume resides in.
     * 
     */
    public String subnetId() {
        return this.subnetId;
    }
    /**
     * @return A mapping of tags assigned to the Application Volume Group.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return Throughput of this volume in Mibps.
     * 
     */
    public Double throughputInMibps() {
        return this.throughputInMibps;
    }
    /**
     * @return A unique file path for the volume.
     * 
     */
    public String volumePath() {
        return this.volumePath;
    }
    /**
     * @return Volume spec name.
     * 
     */
    public String volumeSpecName() {
        return this.volumeSpecName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVolumeGroupSapHanaVolume defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String capacityPoolId;
        private List<GetVolumeGroupSapHanaVolumeDataProtectionReplication> dataProtectionReplications;
        private List<GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicy> dataProtectionSnapshotPolicies;
        private List<GetVolumeGroupSapHanaVolumeExportPolicyRule> exportPolicyRules;
        private String id;
        private List<String> mountIpAddresses;
        private String name;
        private List<String> protocols;
        private String proximityPlacementGroupId;
        private String securityStyle;
        private String serviceLevel;
        private Boolean snapshotDirectoryVisible;
        private Integer storageQuotaInGb;
        private String subnetId;
        private Map<String,String> tags;
        private Double throughputInMibps;
        private String volumePath;
        private String volumeSpecName;
        public Builder() {}
        public Builder(GetVolumeGroupSapHanaVolume defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.capacityPoolId = defaults.capacityPoolId;
    	      this.dataProtectionReplications = defaults.dataProtectionReplications;
    	      this.dataProtectionSnapshotPolicies = defaults.dataProtectionSnapshotPolicies;
    	      this.exportPolicyRules = defaults.exportPolicyRules;
    	      this.id = defaults.id;
    	      this.mountIpAddresses = defaults.mountIpAddresses;
    	      this.name = defaults.name;
    	      this.protocols = defaults.protocols;
    	      this.proximityPlacementGroupId = defaults.proximityPlacementGroupId;
    	      this.securityStyle = defaults.securityStyle;
    	      this.serviceLevel = defaults.serviceLevel;
    	      this.snapshotDirectoryVisible = defaults.snapshotDirectoryVisible;
    	      this.storageQuotaInGb = defaults.storageQuotaInGb;
    	      this.subnetId = defaults.subnetId;
    	      this.tags = defaults.tags;
    	      this.throughputInMibps = defaults.throughputInMibps;
    	      this.volumePath = defaults.volumePath;
    	      this.volumeSpecName = defaults.volumeSpecName;
        }

        @CustomType.Setter
        public Builder capacityPoolId(String capacityPoolId) {
            this.capacityPoolId = Objects.requireNonNull(capacityPoolId);
            return this;
        }
        @CustomType.Setter
        public Builder dataProtectionReplications(List<GetVolumeGroupSapHanaVolumeDataProtectionReplication> dataProtectionReplications) {
            this.dataProtectionReplications = Objects.requireNonNull(dataProtectionReplications);
            return this;
        }
        public Builder dataProtectionReplications(GetVolumeGroupSapHanaVolumeDataProtectionReplication... dataProtectionReplications) {
            return dataProtectionReplications(List.of(dataProtectionReplications));
        }
        @CustomType.Setter
        public Builder dataProtectionSnapshotPolicies(List<GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicy> dataProtectionSnapshotPolicies) {
            this.dataProtectionSnapshotPolicies = Objects.requireNonNull(dataProtectionSnapshotPolicies);
            return this;
        }
        public Builder dataProtectionSnapshotPolicies(GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicy... dataProtectionSnapshotPolicies) {
            return dataProtectionSnapshotPolicies(List.of(dataProtectionSnapshotPolicies));
        }
        @CustomType.Setter
        public Builder exportPolicyRules(List<GetVolumeGroupSapHanaVolumeExportPolicyRule> exportPolicyRules) {
            this.exportPolicyRules = Objects.requireNonNull(exportPolicyRules);
            return this;
        }
        public Builder exportPolicyRules(GetVolumeGroupSapHanaVolumeExportPolicyRule... exportPolicyRules) {
            return exportPolicyRules(List.of(exportPolicyRules));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder mountIpAddresses(List<String> mountIpAddresses) {
            this.mountIpAddresses = Objects.requireNonNull(mountIpAddresses);
            return this;
        }
        public Builder mountIpAddresses(String... mountIpAddresses) {
            return mountIpAddresses(List.of(mountIpAddresses));
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder protocols(List<String> protocols) {
            this.protocols = Objects.requireNonNull(protocols);
            return this;
        }
        public Builder protocols(String... protocols) {
            return protocols(List.of(protocols));
        }
        @CustomType.Setter
        public Builder proximityPlacementGroupId(String proximityPlacementGroupId) {
            this.proximityPlacementGroupId = Objects.requireNonNull(proximityPlacementGroupId);
            return this;
        }
        @CustomType.Setter
        public Builder securityStyle(String securityStyle) {
            this.securityStyle = Objects.requireNonNull(securityStyle);
            return this;
        }
        @CustomType.Setter
        public Builder serviceLevel(String serviceLevel) {
            this.serviceLevel = Objects.requireNonNull(serviceLevel);
            return this;
        }
        @CustomType.Setter
        public Builder snapshotDirectoryVisible(Boolean snapshotDirectoryVisible) {
            this.snapshotDirectoryVisible = Objects.requireNonNull(snapshotDirectoryVisible);
            return this;
        }
        @CustomType.Setter
        public Builder storageQuotaInGb(Integer storageQuotaInGb) {
            this.storageQuotaInGb = Objects.requireNonNull(storageQuotaInGb);
            return this;
        }
        @CustomType.Setter
        public Builder subnetId(String subnetId) {
            this.subnetId = Objects.requireNonNull(subnetId);
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        @CustomType.Setter
        public Builder throughputInMibps(Double throughputInMibps) {
            this.throughputInMibps = Objects.requireNonNull(throughputInMibps);
            return this;
        }
        @CustomType.Setter
        public Builder volumePath(String volumePath) {
            this.volumePath = Objects.requireNonNull(volumePath);
            return this;
        }
        @CustomType.Setter
        public Builder volumeSpecName(String volumeSpecName) {
            this.volumeSpecName = Objects.requireNonNull(volumeSpecName);
            return this;
        }
        public GetVolumeGroupSapHanaVolume build() {
            final var _resultValue = new GetVolumeGroupSapHanaVolume();
            _resultValue.capacityPoolId = capacityPoolId;
            _resultValue.dataProtectionReplications = dataProtectionReplications;
            _resultValue.dataProtectionSnapshotPolicies = dataProtectionSnapshotPolicies;
            _resultValue.exportPolicyRules = exportPolicyRules;
            _resultValue.id = id;
            _resultValue.mountIpAddresses = mountIpAddresses;
            _resultValue.name = name;
            _resultValue.protocols = protocols;
            _resultValue.proximityPlacementGroupId = proximityPlacementGroupId;
            _resultValue.securityStyle = securityStyle;
            _resultValue.serviceLevel = serviceLevel;
            _resultValue.snapshotDirectoryVisible = snapshotDirectoryVisible;
            _resultValue.storageQuotaInGb = storageQuotaInGb;
            _resultValue.subnetId = subnetId;
            _resultValue.tags = tags;
            _resultValue.throughputInMibps = throughputInMibps;
            _resultValue.volumePath = volumePath;
            _resultValue.volumeSpecName = volumeSpecName;
            return _resultValue;
        }
    }
}
