// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.compute.outputs;

import com.pulumi.azure.compute.outputs.GetManagedDisksDiskEncryptionSettingDiskEncryptionKey;
import com.pulumi.azure.compute.outputs.GetManagedDisksDiskEncryptionSettingKeyEncryptionKey;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetManagedDisksDiskEncryptionSetting {
    /**
     * @return A `diskEncryptionKey` block as defined above.
     * 
     */
    private List<GetManagedDisksDiskEncryptionSettingDiskEncryptionKey> diskEncryptionKeys;
    private Boolean enabled;
    /**
     * @return A `keyEncryptionKey` block as defined below.
     * 
     */
    private List<GetManagedDisksDiskEncryptionSettingKeyEncryptionKey> keyEncryptionKeys;

    private GetManagedDisksDiskEncryptionSetting() {}
    /**
     * @return A `diskEncryptionKey` block as defined above.
     * 
     */
    public List<GetManagedDisksDiskEncryptionSettingDiskEncryptionKey> diskEncryptionKeys() {
        return this.diskEncryptionKeys;
    }
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return A `keyEncryptionKey` block as defined below.
     * 
     */
    public List<GetManagedDisksDiskEncryptionSettingKeyEncryptionKey> keyEncryptionKeys() {
        return this.keyEncryptionKeys;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedDisksDiskEncryptionSetting defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetManagedDisksDiskEncryptionSettingDiskEncryptionKey> diskEncryptionKeys;
        private Boolean enabled;
        private List<GetManagedDisksDiskEncryptionSettingKeyEncryptionKey> keyEncryptionKeys;
        public Builder() {}
        public Builder(GetManagedDisksDiskEncryptionSetting defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.diskEncryptionKeys = defaults.diskEncryptionKeys;
    	      this.enabled = defaults.enabled;
    	      this.keyEncryptionKeys = defaults.keyEncryptionKeys;
        }

        @CustomType.Setter
        public Builder diskEncryptionKeys(List<GetManagedDisksDiskEncryptionSettingDiskEncryptionKey> diskEncryptionKeys) {
            if (diskEncryptionKeys == null) {
              throw new MissingRequiredPropertyException("GetManagedDisksDiskEncryptionSetting", "diskEncryptionKeys");
            }
            this.diskEncryptionKeys = diskEncryptionKeys;
            return this;
        }
        public Builder diskEncryptionKeys(GetManagedDisksDiskEncryptionSettingDiskEncryptionKey... diskEncryptionKeys) {
            return diskEncryptionKeys(List.of(diskEncryptionKeys));
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetManagedDisksDiskEncryptionSetting", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder keyEncryptionKeys(List<GetManagedDisksDiskEncryptionSettingKeyEncryptionKey> keyEncryptionKeys) {
            if (keyEncryptionKeys == null) {
              throw new MissingRequiredPropertyException("GetManagedDisksDiskEncryptionSetting", "keyEncryptionKeys");
            }
            this.keyEncryptionKeys = keyEncryptionKeys;
            return this;
        }
        public Builder keyEncryptionKeys(GetManagedDisksDiskEncryptionSettingKeyEncryptionKey... keyEncryptionKeys) {
            return keyEncryptionKeys(List.of(keyEncryptionKeys));
        }
        public GetManagedDisksDiskEncryptionSetting build() {
            final var _resultValue = new GetManagedDisksDiskEncryptionSetting();
            _resultValue.diskEncryptionKeys = diskEncryptionKeys;
            _resultValue.enabled = enabled;
            _resultValue.keyEncryptionKeys = keyEncryptionKeys;
            return _resultValue;
        }
    }
}
