// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appplatform.inputs;

import com.pulumi.azure.appplatform.inputs.SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArgs;
import com.pulumi.azure.appplatform.inputs.SpringCloudServiceConfigServerGitSettingRepositorySshAuthArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SpringCloudServiceConfigServerGitSettingRepositoryArgs extends com.pulumi.resources.ResourceArgs {

    public static final SpringCloudServiceConfigServerGitSettingRepositoryArgs Empty = new SpringCloudServiceConfigServerGitSettingRepositoryArgs();

    /**
     * A `http_basic_auth` block as defined below.
     * 
     */
    @Import(name="httpBasicAuth")
    private @Nullable Output<SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArgs> httpBasicAuth;

    /**
     * @return A `http_basic_auth` block as defined below.
     * 
     */
    public Optional<Output<SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArgs>> httpBasicAuth() {
        return Optional.ofNullable(this.httpBasicAuth);
    }

    /**
     * The default label of the Git repository, should be the branch name, tag name, or commit-id of the repository.
     * 
     */
    @Import(name="label")
    private @Nullable Output<String> label;

    /**
     * @return The default label of the Git repository, should be the branch name, tag name, or commit-id of the repository.
     * 
     */
    public Optional<Output<String>> label() {
        return Optional.ofNullable(this.label);
    }

    /**
     * A name to identify on the Git repository, required only if repos exists.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return A name to identify on the Git repository, required only if repos exists.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * An array of strings used to match an application name. For each pattern, use the `{application}/{profile}` format with wildcards.
     * 
     */
    @Import(name="patterns")
    private @Nullable Output<List<String>> patterns;

    /**
     * @return An array of strings used to match an application name. For each pattern, use the `{application}/{profile}` format with wildcards.
     * 
     */
    public Optional<Output<List<String>>> patterns() {
        return Optional.ofNullable(this.patterns);
    }

    /**
     * An array of strings used to search subdirectories of the Git repository.
     * 
     */
    @Import(name="searchPaths")
    private @Nullable Output<List<String>> searchPaths;

    /**
     * @return An array of strings used to search subdirectories of the Git repository.
     * 
     */
    public Optional<Output<List<String>>> searchPaths() {
        return Optional.ofNullable(this.searchPaths);
    }

    /**
     * A `ssh_auth` block as defined below.
     * 
     */
    @Import(name="sshAuth")
    private @Nullable Output<SpringCloudServiceConfigServerGitSettingRepositorySshAuthArgs> sshAuth;

    /**
     * @return A `ssh_auth` block as defined below.
     * 
     */
    public Optional<Output<SpringCloudServiceConfigServerGitSettingRepositorySshAuthArgs>> sshAuth() {
        return Optional.ofNullable(this.sshAuth);
    }

    /**
     * The URI of the Git repository that&#39;s used as the Config Server back end should be started with `http://`, `https://`, `git@`, or `ssh://`.
     * 
     */
    @Import(name="uri", required=true)
    private Output<String> uri;

    /**
     * @return The URI of the Git repository that&#39;s used as the Config Server back end should be started with `http://`, `https://`, `git@`, or `ssh://`.
     * 
     */
    public Output<String> uri() {
        return this.uri;
    }

    private SpringCloudServiceConfigServerGitSettingRepositoryArgs() {}

    private SpringCloudServiceConfigServerGitSettingRepositoryArgs(SpringCloudServiceConfigServerGitSettingRepositoryArgs $) {
        this.httpBasicAuth = $.httpBasicAuth;
        this.label = $.label;
        this.name = $.name;
        this.patterns = $.patterns;
        this.searchPaths = $.searchPaths;
        this.sshAuth = $.sshAuth;
        this.uri = $.uri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SpringCloudServiceConfigServerGitSettingRepositoryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SpringCloudServiceConfigServerGitSettingRepositoryArgs $;

        public Builder() {
            $ = new SpringCloudServiceConfigServerGitSettingRepositoryArgs();
        }

        public Builder(SpringCloudServiceConfigServerGitSettingRepositoryArgs defaults) {
            $ = new SpringCloudServiceConfigServerGitSettingRepositoryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param httpBasicAuth A `http_basic_auth` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder httpBasicAuth(@Nullable Output<SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArgs> httpBasicAuth) {
            $.httpBasicAuth = httpBasicAuth;
            return this;
        }

        /**
         * @param httpBasicAuth A `http_basic_auth` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder httpBasicAuth(SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArgs httpBasicAuth) {
            return httpBasicAuth(Output.of(httpBasicAuth));
        }

        /**
         * @param label The default label of the Git repository, should be the branch name, tag name, or commit-id of the repository.
         * 
         * @return builder
         * 
         */
        public Builder label(@Nullable Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label The default label of the Git repository, should be the branch name, tag name, or commit-id of the repository.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param name A name to identify on the Git repository, required only if repos exists.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A name to identify on the Git repository, required only if repos exists.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param patterns An array of strings used to match an application name. For each pattern, use the `{application}/{profile}` format with wildcards.
         * 
         * @return builder
         * 
         */
        public Builder patterns(@Nullable Output<List<String>> patterns) {
            $.patterns = patterns;
            return this;
        }

        /**
         * @param patterns An array of strings used to match an application name. For each pattern, use the `{application}/{profile}` format with wildcards.
         * 
         * @return builder
         * 
         */
        public Builder patterns(List<String> patterns) {
            return patterns(Output.of(patterns));
        }

        /**
         * @param patterns An array of strings used to match an application name. For each pattern, use the `{application}/{profile}` format with wildcards.
         * 
         * @return builder
         * 
         */
        public Builder patterns(String... patterns) {
            return patterns(List.of(patterns));
        }

        /**
         * @param searchPaths An array of strings used to search subdirectories of the Git repository.
         * 
         * @return builder
         * 
         */
        public Builder searchPaths(@Nullable Output<List<String>> searchPaths) {
            $.searchPaths = searchPaths;
            return this;
        }

        /**
         * @param searchPaths An array of strings used to search subdirectories of the Git repository.
         * 
         * @return builder
         * 
         */
        public Builder searchPaths(List<String> searchPaths) {
            return searchPaths(Output.of(searchPaths));
        }

        /**
         * @param searchPaths An array of strings used to search subdirectories of the Git repository.
         * 
         * @return builder
         * 
         */
        public Builder searchPaths(String... searchPaths) {
            return searchPaths(List.of(searchPaths));
        }

        /**
         * @param sshAuth A `ssh_auth` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder sshAuth(@Nullable Output<SpringCloudServiceConfigServerGitSettingRepositorySshAuthArgs> sshAuth) {
            $.sshAuth = sshAuth;
            return this;
        }

        /**
         * @param sshAuth A `ssh_auth` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder sshAuth(SpringCloudServiceConfigServerGitSettingRepositorySshAuthArgs sshAuth) {
            return sshAuth(Output.of(sshAuth));
        }

        /**
         * @param uri The URI of the Git repository that&#39;s used as the Config Server back end should be started with `http://`, `https://`, `git@`, or `ssh://`.
         * 
         * @return builder
         * 
         */
        public Builder uri(Output<String> uri) {
            $.uri = uri;
            return this;
        }

        /**
         * @param uri The URI of the Git repository that&#39;s used as the Config Server back end should be started with `http://`, `https://`, `git@`, or `ssh://`.
         * 
         * @return builder
         * 
         */
        public Builder uri(String uri) {
            return uri(Output.of(uri));
        }

        public SpringCloudServiceConfigServerGitSettingRepositoryArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("SpringCloudServiceConfigServerGitSettingRepositoryArgs", "name");
            }
            if ($.uri == null) {
                throw new MissingRequiredPropertyException("SpringCloudServiceConfigServerGitSettingRepositoryArgs", "uri");
            }
            return $;
        }
    }

}
