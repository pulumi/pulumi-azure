// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.communication.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetServiceResult {
    /**
     * @return The location where the Communication service stores its data at rest.
     * 
     */
    private String dataLocation;
    /**
     * @return The hostname of the Communication Service.
     * 
     */
    private String hostname;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The immutable resource id of the Communication Service.
     * 
     */
    private String immutableResourceId;
    private String name;
    /**
     * @return The primary connection string of the Communication Service.
     * 
     */
    private String primaryConnectionString;
    /**
     * @return The primary key of the Communication Service.
     * 
     */
    private String primaryKey;
    private String resourceGroupName;
    /**
     * @return The secondary connection string of the Communication Service.
     * 
     */
    private String secondaryConnectionString;
    /**
     * @return The secondary key of the Communication Service.
     * 
     */
    private String secondaryKey;
    /**
     * @return A mapping of tags assigned to the Communication Service.
     * 
     */
    private Map<String,String> tags;

    private GetServiceResult() {}
    /**
     * @return The location where the Communication service stores its data at rest.
     * 
     */
    public String dataLocation() {
        return this.dataLocation;
    }
    /**
     * @return The hostname of the Communication Service.
     * 
     */
    public String hostname() {
        return this.hostname;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The immutable resource id of the Communication Service.
     * 
     */
    public String immutableResourceId() {
        return this.immutableResourceId;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return The primary connection string of the Communication Service.
     * 
     */
    public String primaryConnectionString() {
        return this.primaryConnectionString;
    }
    /**
     * @return The primary key of the Communication Service.
     * 
     */
    public String primaryKey() {
        return this.primaryKey;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return The secondary connection string of the Communication Service.
     * 
     */
    public String secondaryConnectionString() {
        return this.secondaryConnectionString;
    }
    /**
     * @return The secondary key of the Communication Service.
     * 
     */
    public String secondaryKey() {
        return this.secondaryKey;
    }
    /**
     * @return A mapping of tags assigned to the Communication Service.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String dataLocation;
        private String hostname;
        private String id;
        private String immutableResourceId;
        private String name;
        private String primaryConnectionString;
        private String primaryKey;
        private String resourceGroupName;
        private String secondaryConnectionString;
        private String secondaryKey;
        private Map<String,String> tags;
        public Builder() {}
        public Builder(GetServiceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataLocation = defaults.dataLocation;
    	      this.hostname = defaults.hostname;
    	      this.id = defaults.id;
    	      this.immutableResourceId = defaults.immutableResourceId;
    	      this.name = defaults.name;
    	      this.primaryConnectionString = defaults.primaryConnectionString;
    	      this.primaryKey = defaults.primaryKey;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.secondaryConnectionString = defaults.secondaryConnectionString;
    	      this.secondaryKey = defaults.secondaryKey;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder dataLocation(String dataLocation) {
            if (dataLocation == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "dataLocation");
            }
            this.dataLocation = dataLocation;
            return this;
        }
        @CustomType.Setter
        public Builder hostname(String hostname) {
            if (hostname == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "hostname");
            }
            this.hostname = hostname;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder immutableResourceId(String immutableResourceId) {
            if (immutableResourceId == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "immutableResourceId");
            }
            this.immutableResourceId = immutableResourceId;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder primaryConnectionString(String primaryConnectionString) {
            if (primaryConnectionString == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "primaryConnectionString");
            }
            this.primaryConnectionString = primaryConnectionString;
            return this;
        }
        @CustomType.Setter
        public Builder primaryKey(String primaryKey) {
            if (primaryKey == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "primaryKey");
            }
            this.primaryKey = primaryKey;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            if (resourceGroupName == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "resourceGroupName");
            }
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder secondaryConnectionString(String secondaryConnectionString) {
            if (secondaryConnectionString == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "secondaryConnectionString");
            }
            this.secondaryConnectionString = secondaryConnectionString;
            return this;
        }
        @CustomType.Setter
        public Builder secondaryKey(String secondaryKey) {
            if (secondaryKey == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "secondaryKey");
            }
            this.secondaryKey = secondaryKey;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public GetServiceResult build() {
            final var _resultValue = new GetServiceResult();
            _resultValue.dataLocation = dataLocation;
            _resultValue.hostname = hostname;
            _resultValue.id = id;
            _resultValue.immutableResourceId = immutableResourceId;
            _resultValue.name = name;
            _resultValue.primaryConnectionString = primaryConnectionString;
            _resultValue.primaryKey = primaryKey;
            _resultValue.resourceGroupName = resourceGroupName;
            _resultValue.secondaryConnectionString = secondaryConnectionString;
            _resultValue.secondaryKey = secondaryKey;
            _resultValue.tags = tags;
            return _resultValue;
        }
    }
}
