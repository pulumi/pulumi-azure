// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.media;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.media.StreamingLocatorArgs;
import com.pulumi.azure.media.inputs.StreamingLocatorState;
import com.pulumi.azure.media.outputs.StreamingLocatorContentKey;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a Media Streaming Locator.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.storage.Account;
 * import com.pulumi.azure.storage.AccountArgs;
 * import com.pulumi.azure.media.ServiceAccount;
 * import com.pulumi.azure.media.ServiceAccountArgs;
 * import com.pulumi.azure.media.inputs.ServiceAccountStorageAccountArgs;
 * import com.pulumi.azure.media.AccountFilter;
 * import com.pulumi.azure.media.AccountFilterArgs;
 * import com.pulumi.azure.media.Asset;
 * import com.pulumi.azure.media.AssetArgs;
 * import com.pulumi.azure.media.StreamingLocator;
 * import com.pulumi.azure.media.StreamingLocatorArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampleResourceGroup = new ResourceGroup(&#34;exampleResourceGroup&#34;, ResourceGroupArgs.builder()        
 *             .location(&#34;West Europe&#34;)
 *             .build());
 * 
 *         var exampleAccount = new Account(&#34;exampleAccount&#34;, AccountArgs.builder()        
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .location(exampleResourceGroup.location())
 *             .accountTier(&#34;Standard&#34;)
 *             .accountReplicationType(&#34;GRS&#34;)
 *             .build());
 * 
 *         var exampleServiceAccount = new ServiceAccount(&#34;exampleServiceAccount&#34;, ServiceAccountArgs.builder()        
 *             .location(exampleResourceGroup.location())
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .storageAccounts(ServiceAccountStorageAccountArgs.builder()
 *                 .id(exampleAccount.id())
 *                 .isPrimary(true)
 *                 .build())
 *             .build());
 * 
 *         var exampleAccountFilter = new AccountFilter(&#34;exampleAccountFilter&#34;, AccountFilterArgs.builder()        
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .mediaServicesAccountName(exampleServiceAccount.name())
 *             .build());
 * 
 *         var exampleAsset = new Asset(&#34;exampleAsset&#34;, AssetArgs.builder()        
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .mediaServicesAccountName(exampleServiceAccount.name())
 *             .description(&#34;Asset description&#34;)
 *             .build());
 * 
 *         var exampleStreamingLocator = new StreamingLocator(&#34;exampleStreamingLocator&#34;, StreamingLocatorArgs.builder()        
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .mediaServicesAccountName(exampleServiceAccount.name())
 *             .assetName(exampleAsset.name())
 *             .streamingPolicyName(&#34;Predefined_ClearStreamingOnly&#34;)
 *             .filterNames(exampleAccountFilter.name())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Streaming Locators can be imported using the `resource id`, e.g.
 * 
 * ```sh
 *  $ pulumi import azure:media/streamingLocator:StreamingLocator example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Media/mediaServices/account1/streamingLocators/locator1
 * ```
 * 
 */
@ResourceType(type="azure:media/streamingLocator:StreamingLocator")
public class StreamingLocator extends com.pulumi.resources.CustomResource {
    /**
     * Alternative Media ID of this Streaming Locator. Changing this forces a new Streaming Locator to be created.
     * 
     */
    @Export(name="alternativeMediaId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> alternativeMediaId;

    /**
     * @return Alternative Media ID of this Streaming Locator. Changing this forces a new Streaming Locator to be created.
     * 
     */
    public Output<Optional<String>> alternativeMediaId() {
        return Codegen.optional(this.alternativeMediaId);
    }
    /**
     * Asset Name. Changing this forces a new Streaming Locator to be created.
     * 
     */
    @Export(name="assetName", refs={String.class}, tree="[0]")
    private Output<String> assetName;

    /**
     * @return Asset Name. Changing this forces a new Streaming Locator to be created.
     * 
     */
    public Output<String> assetName() {
        return this.assetName;
    }
    /**
     * One or more `content_key` blocks as defined below. Changing this forces a new Streaming Locator to be created.
     * 
     */
    @Export(name="contentKeys", refs={List.class,StreamingLocatorContentKey.class}, tree="[0,1]")
    private Output</* @Nullable */ List<StreamingLocatorContentKey>> contentKeys;

    /**
     * @return One or more `content_key` blocks as defined below. Changing this forces a new Streaming Locator to be created.
     * 
     */
    public Output<Optional<List<StreamingLocatorContentKey>>> contentKeys() {
        return Codegen.optional(this.contentKeys);
    }
    /**
     * Name of the default Content Key Policy used by this Streaming Locator.Changing this forces a new Streaming Locator to be created.
     * 
     */
    @Export(name="defaultContentKeyPolicyName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> defaultContentKeyPolicyName;

    /**
     * @return Name of the default Content Key Policy used by this Streaming Locator.Changing this forces a new Streaming Locator to be created.
     * 
     */
    public Output<Optional<String>> defaultContentKeyPolicyName() {
        return Codegen.optional(this.defaultContentKeyPolicyName);
    }
    /**
     * The end time of the Streaming Locator. Changing this forces a new Streaming Locator to be created.
     * 
     */
    @Export(name="endTime", refs={String.class}, tree="[0]")
    private Output<String> endTime;

    /**
     * @return The end time of the Streaming Locator. Changing this forces a new Streaming Locator to be created.
     * 
     */
    public Output<String> endTime() {
        return this.endTime;
    }
    /**
     * A list of names of asset or account filters which apply to this Streaming Locator. Changing this forces a new Streaming Locator to be created.
     * 
     */
    @Export(name="filterNames", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> filterNames;

    /**
     * @return A list of names of asset or account filters which apply to this Streaming Locator. Changing this forces a new Streaming Locator to be created.
     * 
     */
    public Output<Optional<List<String>>> filterNames() {
        return Codegen.optional(this.filterNames);
    }
    /**
     * The Media Services account name. Changing this forces a new Streaming Locator to be created.
     * 
     */
    @Export(name="mediaServicesAccountName", refs={String.class}, tree="[0]")
    private Output<String> mediaServicesAccountName;

    /**
     * @return The Media Services account name. Changing this forces a new Streaming Locator to be created.
     * 
     */
    public Output<String> mediaServicesAccountName() {
        return this.mediaServicesAccountName;
    }
    /**
     * The name which should be used for this Streaming Locator. Changing this forces a new Streaming Locator to be created.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name which should be used for this Streaming Locator. Changing this forces a new Streaming Locator to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The name of the Resource Group where the Streaming Locator should exist. Changing this forces a new Streaming Locator to be created.
     * 
     */
    @Export(name="resourceGroupName", refs={String.class}, tree="[0]")
    private Output<String> resourceGroupName;

    /**
     * @return The name of the Resource Group where the Streaming Locator should exist. Changing this forces a new Streaming Locator to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * The start time of the Streaming Locator. Changing this forces a new Streaming Locator to be created.
     * 
     */
    @Export(name="startTime", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> startTime;

    /**
     * @return The start time of the Streaming Locator. Changing this forces a new Streaming Locator to be created.
     * 
     */
    public Output<Optional<String>> startTime() {
        return Codegen.optional(this.startTime);
    }
    /**
     * The ID of the Streaming Locator. Changing this forces a new Streaming Locator to be created.
     * 
     */
    @Export(name="streamingLocatorId", refs={String.class}, tree="[0]")
    private Output<String> streamingLocatorId;

    /**
     * @return The ID of the Streaming Locator. Changing this forces a new Streaming Locator to be created.
     * 
     */
    public Output<String> streamingLocatorId() {
        return this.streamingLocatorId;
    }
    /**
     * Name of the Streaming Policy used by this Streaming Locator. Either specify the name of Streaming Policy you created or use one of the predefined Streaming Policies. The predefined Streaming Policies available are: `Predefined_DownloadOnly`, `Predefined_ClearStreamingOnly`, `Predefined_DownloadAndClearStreaming`, `Predefined_ClearKey`, `Predefined_MultiDrmCencStreaming` and `Predefined_MultiDrmStreaming`. Changing this forces a new Streaming Locator to be created.
     * 
     */
    @Export(name="streamingPolicyName", refs={String.class}, tree="[0]")
    private Output<String> streamingPolicyName;

    /**
     * @return Name of the Streaming Policy used by this Streaming Locator. Either specify the name of Streaming Policy you created or use one of the predefined Streaming Policies. The predefined Streaming Policies available are: `Predefined_DownloadOnly`, `Predefined_ClearStreamingOnly`, `Predefined_DownloadAndClearStreaming`, `Predefined_ClearKey`, `Predefined_MultiDrmCencStreaming` and `Predefined_MultiDrmStreaming`. Changing this forces a new Streaming Locator to be created.
     * 
     */
    public Output<String> streamingPolicyName() {
        return this.streamingPolicyName;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public StreamingLocator(String name) {
        this(name, StreamingLocatorArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public StreamingLocator(String name, StreamingLocatorArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public StreamingLocator(String name, StreamingLocatorArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:media/streamingLocator:StreamingLocator", name, args == null ? StreamingLocatorArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private StreamingLocator(String name, Output<String> id, @Nullable StreamingLocatorState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:media/streamingLocator:StreamingLocator", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static StreamingLocator get(String name, Output<String> id, @Nullable StreamingLocatorState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new StreamingLocator(name, id, state, options);
    }
}
