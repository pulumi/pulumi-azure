// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appservice.outputs;

import com.pulumi.azure.appservice.outputs.GetLinuxWebAppAuthSetting;
import com.pulumi.azure.appservice.outputs.GetLinuxWebAppAuthSettingsV2;
import com.pulumi.azure.appservice.outputs.GetLinuxWebAppBackup;
import com.pulumi.azure.appservice.outputs.GetLinuxWebAppConnectionString;
import com.pulumi.azure.appservice.outputs.GetLinuxWebAppIdentity;
import com.pulumi.azure.appservice.outputs.GetLinuxWebAppLog;
import com.pulumi.azure.appservice.outputs.GetLinuxWebAppSiteConfig;
import com.pulumi.azure.appservice.outputs.GetLinuxWebAppSiteCredential;
import com.pulumi.azure.appservice.outputs.GetLinuxWebAppStickySetting;
import com.pulumi.azure.appservice.outputs.GetLinuxWebAppStorageAccount;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetLinuxWebAppResult {
    /**
     * @return An `app_metadata` block as defined below.
     * 
     */
    private Map<String,String> appMetadata;
    /**
     * @return An `app_settings` block as defined below.
     * 
     */
    private Map<String,String> appSettings;
    /**
     * @return An `auth_settings` block as defined below.
     * 
     */
    private List<GetLinuxWebAppAuthSetting> authSettings;
    /**
     * @return An `auth_settings_v2` block as defined below.
     * 
     */
    private List<GetLinuxWebAppAuthSettingsV2> authSettingsV2s;
    /**
     * @return The current availability state. Possible values are `Normal`, `Limited`, and `DisasterRecoveryMode`.
     * 
     */
    private String availability;
    /**
     * @return A `backup` block as defined below.
     * 
     */
    private List<GetLinuxWebAppBackup> backups;
    /**
     * @return Is Client Affinity enabled?
     * 
     */
    private Boolean clientAffinityEnabled;
    /**
     * @return Are Client Certificates enabled?
     * 
     */
    private Boolean clientCertificateEnabled;
    /**
     * @return Paths to exclude when using client certificates, separated by ;
     * 
     */
    private String clientCertificateExclusionPaths;
    /**
     * @return The Client Certificate mode.
     * 
     */
    private String clientCertificateMode;
    /**
     * @return A `connection_string` block as defined below.
     * 
     */
    private List<GetLinuxWebAppConnectionString> connectionStrings;
    /**
     * @return The identifier used by App Service to perform domain ownership verification via DNS TXT record.
     * 
     */
    private String customDomainVerificationId;
    /**
     * @return The default hostname of the Linux Web App.
     * 
     */
    private String defaultHostname;
    /**
     * @return Is the Backup enabled?
     * 
     */
    private Boolean enabled;
    /**
     * @return Are the default FTP Basic Authentication publishing credentials enabled.
     * 
     */
    private Boolean ftpPublishBasicAuthenticationEnabled;
    /**
     * @return The ID of the App Service Environment used by App Service.
     * 
     */
    private String hostingEnvironmentId;
    /**
     * @return Should the Linux Web App require HTTPS connections.
     * 
     */
    private Boolean httpsOnly;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return A `identity` block as defined below.
     * 
     */
    private List<GetLinuxWebAppIdentity> identities;
    private String keyVaultReferenceIdentityId;
    /**
     * @return The Kind value for this Linux Web App.
     * 
     */
    private String kind;
    /**
     * @return The Azure Region where the Linux Web App exists.
     * 
     */
    private String location;
    /**
     * @return A `logs` block as defined below.
     * 
     */
    private List<GetLinuxWebAppLog> logs;
    /**
     * @return The name of this Storage Account.
     * 
     */
    private String name;
    /**
     * @return A `outbound_ip_address_list` block as defined below.
     * 
     */
    private List<String> outboundIpAddressLists;
    /**
     * @return A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12`.
     * 
     */
    private String outboundIpAddresses;
    /**
     * @return A `possible_outbound_ip_address_list` block as defined below.
     * 
     */
    private List<String> possibleOutboundIpAddressLists;
    /**
     * @return A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12,52.143.43.17` - not all of which are necessarily in use. Superset of `outbound_ip_addresses`.
     * 
     */
    private String possibleOutboundIpAddresses;
    /**
     * @return Is Public Network Access enabled for this Linux Web App.
     * 
     */
    private Boolean publicNetworkAccessEnabled;
    private String resourceGroupName;
    /**
     * @return The ID of the Service Plan that this Linux Web App exists in.
     * 
     */
    private String servicePlanId;
    /**
     * @return A `site_config` block as defined below.
     * 
     */
    private List<GetLinuxWebAppSiteConfig> siteConfigs;
    /**
     * @return A `site_credential` block as defined below.
     * 
     */
    private List<GetLinuxWebAppSiteCredential> siteCredentials;
    /**
     * @return A `sticky_settings` block as defined below.
     * 
     */
    private List<GetLinuxWebAppStickySetting> stickySettings;
    /**
     * @return A `storage_account` block as defined below.
     * 
     */
    private List<GetLinuxWebAppStorageAccount> storageAccounts;
    /**
     * @return A mapping of tags assigned to the Linux Web App.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return The current usage state. Possible values are `Normal` and `Exceeded`.
     * 
     */
    private String usage;
    /**
     * @return The subnet id which the Linux Web App is vNet Integrated with.
     * 
     */
    private String virtualNetworkSubnetId;
    /**
     * @return Are the default WebDeploy Basic Authentication publishing credentials enabled.
     * 
     */
    private Boolean webdeployPublishBasicAuthenticationEnabled;

    private GetLinuxWebAppResult() {}
    /**
     * @return An `app_metadata` block as defined below.
     * 
     */
    public Map<String,String> appMetadata() {
        return this.appMetadata;
    }
    /**
     * @return An `app_settings` block as defined below.
     * 
     */
    public Map<String,String> appSettings() {
        return this.appSettings;
    }
    /**
     * @return An `auth_settings` block as defined below.
     * 
     */
    public List<GetLinuxWebAppAuthSetting> authSettings() {
        return this.authSettings;
    }
    /**
     * @return An `auth_settings_v2` block as defined below.
     * 
     */
    public List<GetLinuxWebAppAuthSettingsV2> authSettingsV2s() {
        return this.authSettingsV2s;
    }
    /**
     * @return The current availability state. Possible values are `Normal`, `Limited`, and `DisasterRecoveryMode`.
     * 
     */
    public String availability() {
        return this.availability;
    }
    /**
     * @return A `backup` block as defined below.
     * 
     */
    public List<GetLinuxWebAppBackup> backups() {
        return this.backups;
    }
    /**
     * @return Is Client Affinity enabled?
     * 
     */
    public Boolean clientAffinityEnabled() {
        return this.clientAffinityEnabled;
    }
    /**
     * @return Are Client Certificates enabled?
     * 
     */
    public Boolean clientCertificateEnabled() {
        return this.clientCertificateEnabled;
    }
    /**
     * @return Paths to exclude when using client certificates, separated by ;
     * 
     */
    public String clientCertificateExclusionPaths() {
        return this.clientCertificateExclusionPaths;
    }
    /**
     * @return The Client Certificate mode.
     * 
     */
    public String clientCertificateMode() {
        return this.clientCertificateMode;
    }
    /**
     * @return A `connection_string` block as defined below.
     * 
     */
    public List<GetLinuxWebAppConnectionString> connectionStrings() {
        return this.connectionStrings;
    }
    /**
     * @return The identifier used by App Service to perform domain ownership verification via DNS TXT record.
     * 
     */
    public String customDomainVerificationId() {
        return this.customDomainVerificationId;
    }
    /**
     * @return The default hostname of the Linux Web App.
     * 
     */
    public String defaultHostname() {
        return this.defaultHostname;
    }
    /**
     * @return Is the Backup enabled?
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return Are the default FTP Basic Authentication publishing credentials enabled.
     * 
     */
    public Boolean ftpPublishBasicAuthenticationEnabled() {
        return this.ftpPublishBasicAuthenticationEnabled;
    }
    /**
     * @return The ID of the App Service Environment used by App Service.
     * 
     */
    public String hostingEnvironmentId() {
        return this.hostingEnvironmentId;
    }
    /**
     * @return Should the Linux Web App require HTTPS connections.
     * 
     */
    public Boolean httpsOnly() {
        return this.httpsOnly;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A `identity` block as defined below.
     * 
     */
    public List<GetLinuxWebAppIdentity> identities() {
        return this.identities;
    }
    public String keyVaultReferenceIdentityId() {
        return this.keyVaultReferenceIdentityId;
    }
    /**
     * @return The Kind value for this Linux Web App.
     * 
     */
    public String kind() {
        return this.kind;
    }
    /**
     * @return The Azure Region where the Linux Web App exists.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return A `logs` block as defined below.
     * 
     */
    public List<GetLinuxWebAppLog> logs() {
        return this.logs;
    }
    /**
     * @return The name of this Storage Account.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return A `outbound_ip_address_list` block as defined below.
     * 
     */
    public List<String> outboundIpAddressLists() {
        return this.outboundIpAddressLists;
    }
    /**
     * @return A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12`.
     * 
     */
    public String outboundIpAddresses() {
        return this.outboundIpAddresses;
    }
    /**
     * @return A `possible_outbound_ip_address_list` block as defined below.
     * 
     */
    public List<String> possibleOutboundIpAddressLists() {
        return this.possibleOutboundIpAddressLists;
    }
    /**
     * @return A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12,52.143.43.17` - not all of which are necessarily in use. Superset of `outbound_ip_addresses`.
     * 
     */
    public String possibleOutboundIpAddresses() {
        return this.possibleOutboundIpAddresses;
    }
    /**
     * @return Is Public Network Access enabled for this Linux Web App.
     * 
     */
    public Boolean publicNetworkAccessEnabled() {
        return this.publicNetworkAccessEnabled;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return The ID of the Service Plan that this Linux Web App exists in.
     * 
     */
    public String servicePlanId() {
        return this.servicePlanId;
    }
    /**
     * @return A `site_config` block as defined below.
     * 
     */
    public List<GetLinuxWebAppSiteConfig> siteConfigs() {
        return this.siteConfigs;
    }
    /**
     * @return A `site_credential` block as defined below.
     * 
     */
    public List<GetLinuxWebAppSiteCredential> siteCredentials() {
        return this.siteCredentials;
    }
    /**
     * @return A `sticky_settings` block as defined below.
     * 
     */
    public List<GetLinuxWebAppStickySetting> stickySettings() {
        return this.stickySettings;
    }
    /**
     * @return A `storage_account` block as defined below.
     * 
     */
    public List<GetLinuxWebAppStorageAccount> storageAccounts() {
        return this.storageAccounts;
    }
    /**
     * @return A mapping of tags assigned to the Linux Web App.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return The current usage state. Possible values are `Normal` and `Exceeded`.
     * 
     */
    public String usage() {
        return this.usage;
    }
    /**
     * @return The subnet id which the Linux Web App is vNet Integrated with.
     * 
     */
    public String virtualNetworkSubnetId() {
        return this.virtualNetworkSubnetId;
    }
    /**
     * @return Are the default WebDeploy Basic Authentication publishing credentials enabled.
     * 
     */
    public Boolean webdeployPublishBasicAuthenticationEnabled() {
        return this.webdeployPublishBasicAuthenticationEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLinuxWebAppResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,String> appMetadata;
        private Map<String,String> appSettings;
        private List<GetLinuxWebAppAuthSetting> authSettings;
        private List<GetLinuxWebAppAuthSettingsV2> authSettingsV2s;
        private String availability;
        private List<GetLinuxWebAppBackup> backups;
        private Boolean clientAffinityEnabled;
        private Boolean clientCertificateEnabled;
        private String clientCertificateExclusionPaths;
        private String clientCertificateMode;
        private List<GetLinuxWebAppConnectionString> connectionStrings;
        private String customDomainVerificationId;
        private String defaultHostname;
        private Boolean enabled;
        private Boolean ftpPublishBasicAuthenticationEnabled;
        private String hostingEnvironmentId;
        private Boolean httpsOnly;
        private String id;
        private List<GetLinuxWebAppIdentity> identities;
        private String keyVaultReferenceIdentityId;
        private String kind;
        private String location;
        private List<GetLinuxWebAppLog> logs;
        private String name;
        private List<String> outboundIpAddressLists;
        private String outboundIpAddresses;
        private List<String> possibleOutboundIpAddressLists;
        private String possibleOutboundIpAddresses;
        private Boolean publicNetworkAccessEnabled;
        private String resourceGroupName;
        private String servicePlanId;
        private List<GetLinuxWebAppSiteConfig> siteConfigs;
        private List<GetLinuxWebAppSiteCredential> siteCredentials;
        private List<GetLinuxWebAppStickySetting> stickySettings;
        private List<GetLinuxWebAppStorageAccount> storageAccounts;
        private Map<String,String> tags;
        private String usage;
        private String virtualNetworkSubnetId;
        private Boolean webdeployPublishBasicAuthenticationEnabled;
        public Builder() {}
        public Builder(GetLinuxWebAppResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appMetadata = defaults.appMetadata;
    	      this.appSettings = defaults.appSettings;
    	      this.authSettings = defaults.authSettings;
    	      this.authSettingsV2s = defaults.authSettingsV2s;
    	      this.availability = defaults.availability;
    	      this.backups = defaults.backups;
    	      this.clientAffinityEnabled = defaults.clientAffinityEnabled;
    	      this.clientCertificateEnabled = defaults.clientCertificateEnabled;
    	      this.clientCertificateExclusionPaths = defaults.clientCertificateExclusionPaths;
    	      this.clientCertificateMode = defaults.clientCertificateMode;
    	      this.connectionStrings = defaults.connectionStrings;
    	      this.customDomainVerificationId = defaults.customDomainVerificationId;
    	      this.defaultHostname = defaults.defaultHostname;
    	      this.enabled = defaults.enabled;
    	      this.ftpPublishBasicAuthenticationEnabled = defaults.ftpPublishBasicAuthenticationEnabled;
    	      this.hostingEnvironmentId = defaults.hostingEnvironmentId;
    	      this.httpsOnly = defaults.httpsOnly;
    	      this.id = defaults.id;
    	      this.identities = defaults.identities;
    	      this.keyVaultReferenceIdentityId = defaults.keyVaultReferenceIdentityId;
    	      this.kind = defaults.kind;
    	      this.location = defaults.location;
    	      this.logs = defaults.logs;
    	      this.name = defaults.name;
    	      this.outboundIpAddressLists = defaults.outboundIpAddressLists;
    	      this.outboundIpAddresses = defaults.outboundIpAddresses;
    	      this.possibleOutboundIpAddressLists = defaults.possibleOutboundIpAddressLists;
    	      this.possibleOutboundIpAddresses = defaults.possibleOutboundIpAddresses;
    	      this.publicNetworkAccessEnabled = defaults.publicNetworkAccessEnabled;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.servicePlanId = defaults.servicePlanId;
    	      this.siteConfigs = defaults.siteConfigs;
    	      this.siteCredentials = defaults.siteCredentials;
    	      this.stickySettings = defaults.stickySettings;
    	      this.storageAccounts = defaults.storageAccounts;
    	      this.tags = defaults.tags;
    	      this.usage = defaults.usage;
    	      this.virtualNetworkSubnetId = defaults.virtualNetworkSubnetId;
    	      this.webdeployPublishBasicAuthenticationEnabled = defaults.webdeployPublishBasicAuthenticationEnabled;
        }

        @CustomType.Setter
        public Builder appMetadata(Map<String,String> appMetadata) {
            this.appMetadata = Objects.requireNonNull(appMetadata);
            return this;
        }
        @CustomType.Setter
        public Builder appSettings(Map<String,String> appSettings) {
            this.appSettings = Objects.requireNonNull(appSettings);
            return this;
        }
        @CustomType.Setter
        public Builder authSettings(List<GetLinuxWebAppAuthSetting> authSettings) {
            this.authSettings = Objects.requireNonNull(authSettings);
            return this;
        }
        public Builder authSettings(GetLinuxWebAppAuthSetting... authSettings) {
            return authSettings(List.of(authSettings));
        }
        @CustomType.Setter
        public Builder authSettingsV2s(List<GetLinuxWebAppAuthSettingsV2> authSettingsV2s) {
            this.authSettingsV2s = Objects.requireNonNull(authSettingsV2s);
            return this;
        }
        public Builder authSettingsV2s(GetLinuxWebAppAuthSettingsV2... authSettingsV2s) {
            return authSettingsV2s(List.of(authSettingsV2s));
        }
        @CustomType.Setter
        public Builder availability(String availability) {
            this.availability = Objects.requireNonNull(availability);
            return this;
        }
        @CustomType.Setter
        public Builder backups(List<GetLinuxWebAppBackup> backups) {
            this.backups = Objects.requireNonNull(backups);
            return this;
        }
        public Builder backups(GetLinuxWebAppBackup... backups) {
            return backups(List.of(backups));
        }
        @CustomType.Setter
        public Builder clientAffinityEnabled(Boolean clientAffinityEnabled) {
            this.clientAffinityEnabled = Objects.requireNonNull(clientAffinityEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder clientCertificateEnabled(Boolean clientCertificateEnabled) {
            this.clientCertificateEnabled = Objects.requireNonNull(clientCertificateEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder clientCertificateExclusionPaths(String clientCertificateExclusionPaths) {
            this.clientCertificateExclusionPaths = Objects.requireNonNull(clientCertificateExclusionPaths);
            return this;
        }
        @CustomType.Setter
        public Builder clientCertificateMode(String clientCertificateMode) {
            this.clientCertificateMode = Objects.requireNonNull(clientCertificateMode);
            return this;
        }
        @CustomType.Setter
        public Builder connectionStrings(List<GetLinuxWebAppConnectionString> connectionStrings) {
            this.connectionStrings = Objects.requireNonNull(connectionStrings);
            return this;
        }
        public Builder connectionStrings(GetLinuxWebAppConnectionString... connectionStrings) {
            return connectionStrings(List.of(connectionStrings));
        }
        @CustomType.Setter
        public Builder customDomainVerificationId(String customDomainVerificationId) {
            this.customDomainVerificationId = Objects.requireNonNull(customDomainVerificationId);
            return this;
        }
        @CustomType.Setter
        public Builder defaultHostname(String defaultHostname) {
            this.defaultHostname = Objects.requireNonNull(defaultHostname);
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            this.enabled = Objects.requireNonNull(enabled);
            return this;
        }
        @CustomType.Setter
        public Builder ftpPublishBasicAuthenticationEnabled(Boolean ftpPublishBasicAuthenticationEnabled) {
            this.ftpPublishBasicAuthenticationEnabled = Objects.requireNonNull(ftpPublishBasicAuthenticationEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder hostingEnvironmentId(String hostingEnvironmentId) {
            this.hostingEnvironmentId = Objects.requireNonNull(hostingEnvironmentId);
            return this;
        }
        @CustomType.Setter
        public Builder httpsOnly(Boolean httpsOnly) {
            this.httpsOnly = Objects.requireNonNull(httpsOnly);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder identities(List<GetLinuxWebAppIdentity> identities) {
            this.identities = Objects.requireNonNull(identities);
            return this;
        }
        public Builder identities(GetLinuxWebAppIdentity... identities) {
            return identities(List.of(identities));
        }
        @CustomType.Setter
        public Builder keyVaultReferenceIdentityId(String keyVaultReferenceIdentityId) {
            this.keyVaultReferenceIdentityId = Objects.requireNonNull(keyVaultReferenceIdentityId);
            return this;
        }
        @CustomType.Setter
        public Builder kind(String kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder logs(List<GetLinuxWebAppLog> logs) {
            this.logs = Objects.requireNonNull(logs);
            return this;
        }
        public Builder logs(GetLinuxWebAppLog... logs) {
            return logs(List.of(logs));
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder outboundIpAddressLists(List<String> outboundIpAddressLists) {
            this.outboundIpAddressLists = Objects.requireNonNull(outboundIpAddressLists);
            return this;
        }
        public Builder outboundIpAddressLists(String... outboundIpAddressLists) {
            return outboundIpAddressLists(List.of(outboundIpAddressLists));
        }
        @CustomType.Setter
        public Builder outboundIpAddresses(String outboundIpAddresses) {
            this.outboundIpAddresses = Objects.requireNonNull(outboundIpAddresses);
            return this;
        }
        @CustomType.Setter
        public Builder possibleOutboundIpAddressLists(List<String> possibleOutboundIpAddressLists) {
            this.possibleOutboundIpAddressLists = Objects.requireNonNull(possibleOutboundIpAddressLists);
            return this;
        }
        public Builder possibleOutboundIpAddressLists(String... possibleOutboundIpAddressLists) {
            return possibleOutboundIpAddressLists(List.of(possibleOutboundIpAddressLists));
        }
        @CustomType.Setter
        public Builder possibleOutboundIpAddresses(String possibleOutboundIpAddresses) {
            this.possibleOutboundIpAddresses = Objects.requireNonNull(possibleOutboundIpAddresses);
            return this;
        }
        @CustomType.Setter
        public Builder publicNetworkAccessEnabled(Boolean publicNetworkAccessEnabled) {
            this.publicNetworkAccessEnabled = Objects.requireNonNull(publicNetworkAccessEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        @CustomType.Setter
        public Builder servicePlanId(String servicePlanId) {
            this.servicePlanId = Objects.requireNonNull(servicePlanId);
            return this;
        }
        @CustomType.Setter
        public Builder siteConfigs(List<GetLinuxWebAppSiteConfig> siteConfigs) {
            this.siteConfigs = Objects.requireNonNull(siteConfigs);
            return this;
        }
        public Builder siteConfigs(GetLinuxWebAppSiteConfig... siteConfigs) {
            return siteConfigs(List.of(siteConfigs));
        }
        @CustomType.Setter
        public Builder siteCredentials(List<GetLinuxWebAppSiteCredential> siteCredentials) {
            this.siteCredentials = Objects.requireNonNull(siteCredentials);
            return this;
        }
        public Builder siteCredentials(GetLinuxWebAppSiteCredential... siteCredentials) {
            return siteCredentials(List.of(siteCredentials));
        }
        @CustomType.Setter
        public Builder stickySettings(List<GetLinuxWebAppStickySetting> stickySettings) {
            this.stickySettings = Objects.requireNonNull(stickySettings);
            return this;
        }
        public Builder stickySettings(GetLinuxWebAppStickySetting... stickySettings) {
            return stickySettings(List.of(stickySettings));
        }
        @CustomType.Setter
        public Builder storageAccounts(List<GetLinuxWebAppStorageAccount> storageAccounts) {
            this.storageAccounts = Objects.requireNonNull(storageAccounts);
            return this;
        }
        public Builder storageAccounts(GetLinuxWebAppStorageAccount... storageAccounts) {
            return storageAccounts(List.of(storageAccounts));
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        @CustomType.Setter
        public Builder usage(String usage) {
            this.usage = Objects.requireNonNull(usage);
            return this;
        }
        @CustomType.Setter
        public Builder virtualNetworkSubnetId(String virtualNetworkSubnetId) {
            this.virtualNetworkSubnetId = Objects.requireNonNull(virtualNetworkSubnetId);
            return this;
        }
        @CustomType.Setter
        public Builder webdeployPublishBasicAuthenticationEnabled(Boolean webdeployPublishBasicAuthenticationEnabled) {
            this.webdeployPublishBasicAuthenticationEnabled = Objects.requireNonNull(webdeployPublishBasicAuthenticationEnabled);
            return this;
        }
        public GetLinuxWebAppResult build() {
            final var _resultValue = new GetLinuxWebAppResult();
            _resultValue.appMetadata = appMetadata;
            _resultValue.appSettings = appSettings;
            _resultValue.authSettings = authSettings;
            _resultValue.authSettingsV2s = authSettingsV2s;
            _resultValue.availability = availability;
            _resultValue.backups = backups;
            _resultValue.clientAffinityEnabled = clientAffinityEnabled;
            _resultValue.clientCertificateEnabled = clientCertificateEnabled;
            _resultValue.clientCertificateExclusionPaths = clientCertificateExclusionPaths;
            _resultValue.clientCertificateMode = clientCertificateMode;
            _resultValue.connectionStrings = connectionStrings;
            _resultValue.customDomainVerificationId = customDomainVerificationId;
            _resultValue.defaultHostname = defaultHostname;
            _resultValue.enabled = enabled;
            _resultValue.ftpPublishBasicAuthenticationEnabled = ftpPublishBasicAuthenticationEnabled;
            _resultValue.hostingEnvironmentId = hostingEnvironmentId;
            _resultValue.httpsOnly = httpsOnly;
            _resultValue.id = id;
            _resultValue.identities = identities;
            _resultValue.keyVaultReferenceIdentityId = keyVaultReferenceIdentityId;
            _resultValue.kind = kind;
            _resultValue.location = location;
            _resultValue.logs = logs;
            _resultValue.name = name;
            _resultValue.outboundIpAddressLists = outboundIpAddressLists;
            _resultValue.outboundIpAddresses = outboundIpAddresses;
            _resultValue.possibleOutboundIpAddressLists = possibleOutboundIpAddressLists;
            _resultValue.possibleOutboundIpAddresses = possibleOutboundIpAddresses;
            _resultValue.publicNetworkAccessEnabled = publicNetworkAccessEnabled;
            _resultValue.resourceGroupName = resourceGroupName;
            _resultValue.servicePlanId = servicePlanId;
            _resultValue.siteConfigs = siteConfigs;
            _resultValue.siteCredentials = siteCredentials;
            _resultValue.stickySettings = stickySettings;
            _resultValue.storageAccounts = storageAccounts;
            _resultValue.tags = tags;
            _resultValue.usage = usage;
            _resultValue.virtualNetworkSubnetId = virtualNetworkSubnetId;
            _resultValue.webdeployPublishBasicAuthenticationEnabled = webdeployPublishBasicAuthenticationEnabled;
            return _resultValue;
        }
    }
}
