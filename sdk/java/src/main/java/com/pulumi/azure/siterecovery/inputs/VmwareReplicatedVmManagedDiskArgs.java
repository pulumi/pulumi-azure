// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.siterecovery.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VmwareReplicatedVmManagedDiskArgs extends com.pulumi.resources.ResourceArgs {

    public static final VmwareReplicatedVmManagedDiskArgs Empty = new VmwareReplicatedVmManagedDiskArgs();

    /**
     * The ID of the disk to be replicated.
     * 
     */
    @Import(name="diskId", required=true)
    private Output<String> diskId;

    /**
     * @return The ID of the disk to be replicated.
     * 
     */
    public Output<String> diskId() {
        return this.diskId;
    }

    /**
     * The ID of the storage account that should be used for logging during replication.
     * 
     */
    @Import(name="logStorageAccountId")
    private @Nullable Output<String> logStorageAccountId;

    /**
     * @return The ID of the storage account that should be used for logging during replication.
     * 
     */
    public Optional<Output<String>> logStorageAccountId() {
        return Optional.ofNullable(this.logStorageAccountId);
    }

    /**
     * The ID of the Disk Encryption Set that should be used for the disks when a failover is done.
     * 
     */
    @Import(name="targetDiskEncryptionSetId")
    private @Nullable Output<String> targetDiskEncryptionSetId;

    /**
     * @return The ID of the Disk Encryption Set that should be used for the disks when a failover is done.
     * 
     */
    public Optional<Output<String>> targetDiskEncryptionSetId() {
        return Optional.ofNullable(this.targetDiskEncryptionSetId);
    }

    /**
     * The disk type of the disk to be created when a failover is done. Possible values are `Premium_LRS`, `Standard_LRS` and `StandardSSD_LRS`.
     * 
     */
    @Import(name="targetDiskType", required=true)
    private Output<String> targetDiskType;

    /**
     * @return The disk type of the disk to be created when a failover is done. Possible values are `Premium_LRS`, `Standard_LRS` and `StandardSSD_LRS`.
     * 
     */
    public Output<String> targetDiskType() {
        return this.targetDiskType;
    }

    private VmwareReplicatedVmManagedDiskArgs() {}

    private VmwareReplicatedVmManagedDiskArgs(VmwareReplicatedVmManagedDiskArgs $) {
        this.diskId = $.diskId;
        this.logStorageAccountId = $.logStorageAccountId;
        this.targetDiskEncryptionSetId = $.targetDiskEncryptionSetId;
        this.targetDiskType = $.targetDiskType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VmwareReplicatedVmManagedDiskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VmwareReplicatedVmManagedDiskArgs $;

        public Builder() {
            $ = new VmwareReplicatedVmManagedDiskArgs();
        }

        public Builder(VmwareReplicatedVmManagedDiskArgs defaults) {
            $ = new VmwareReplicatedVmManagedDiskArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param diskId The ID of the disk to be replicated.
         * 
         * @return builder
         * 
         */
        public Builder diskId(Output<String> diskId) {
            $.diskId = diskId;
            return this;
        }

        /**
         * @param diskId The ID of the disk to be replicated.
         * 
         * @return builder
         * 
         */
        public Builder diskId(String diskId) {
            return diskId(Output.of(diskId));
        }

        /**
         * @param logStorageAccountId The ID of the storage account that should be used for logging during replication.
         * 
         * @return builder
         * 
         */
        public Builder logStorageAccountId(@Nullable Output<String> logStorageAccountId) {
            $.logStorageAccountId = logStorageAccountId;
            return this;
        }

        /**
         * @param logStorageAccountId The ID of the storage account that should be used for logging during replication.
         * 
         * @return builder
         * 
         */
        public Builder logStorageAccountId(String logStorageAccountId) {
            return logStorageAccountId(Output.of(logStorageAccountId));
        }

        /**
         * @param targetDiskEncryptionSetId The ID of the Disk Encryption Set that should be used for the disks when a failover is done.
         * 
         * @return builder
         * 
         */
        public Builder targetDiskEncryptionSetId(@Nullable Output<String> targetDiskEncryptionSetId) {
            $.targetDiskEncryptionSetId = targetDiskEncryptionSetId;
            return this;
        }

        /**
         * @param targetDiskEncryptionSetId The ID of the Disk Encryption Set that should be used for the disks when a failover is done.
         * 
         * @return builder
         * 
         */
        public Builder targetDiskEncryptionSetId(String targetDiskEncryptionSetId) {
            return targetDiskEncryptionSetId(Output.of(targetDiskEncryptionSetId));
        }

        /**
         * @param targetDiskType The disk type of the disk to be created when a failover is done. Possible values are `Premium_LRS`, `Standard_LRS` and `StandardSSD_LRS`.
         * 
         * @return builder
         * 
         */
        public Builder targetDiskType(Output<String> targetDiskType) {
            $.targetDiskType = targetDiskType;
            return this;
        }

        /**
         * @param targetDiskType The disk type of the disk to be created when a failover is done. Possible values are `Premium_LRS`, `Standard_LRS` and `StandardSSD_LRS`.
         * 
         * @return builder
         * 
         */
        public Builder targetDiskType(String targetDiskType) {
            return targetDiskType(Output.of(targetDiskType));
        }

        public VmwareReplicatedVmManagedDiskArgs build() {
            if ($.diskId == null) {
                throw new MissingRequiredPropertyException("VmwareReplicatedVmManagedDiskArgs", "diskId");
            }
            if ($.targetDiskType == null) {
                throw new MissingRequiredPropertyException("VmwareReplicatedVmManagedDiskArgs", "targetDiskType");
            }
            return $;
        }
    }

}
