// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.siterecovery.inputs;

import com.pulumi.azure.siterecovery.inputs.ReplicatedVMManagedDiskTargetDiskEncryptionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReplicatedVMManagedDiskArgs extends com.pulumi.resources.ResourceArgs {

    public static final ReplicatedVMManagedDiskArgs Empty = new ReplicatedVMManagedDiskArgs();

    /**
     * Id of disk that should be replicated. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="diskId", required=true)
    private Output<String> diskId;

    /**
     * @return Id of disk that should be replicated. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> diskId() {
        return this.diskId;
    }

    /**
     * Storage account that should be used for caching. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="stagingStorageAccountId", required=true)
    private Output<String> stagingStorageAccountId;

    /**
     * @return Storage account that should be used for caching. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> stagingStorageAccountId() {
        return this.stagingStorageAccountId;
    }

    /**
     * A `target_disk_encryption` block as defined below.
     * 
     */
    @Import(name="targetDiskEncryption")
    private @Nullable Output<ReplicatedVMManagedDiskTargetDiskEncryptionArgs> targetDiskEncryption;

    /**
     * @return A `target_disk_encryption` block as defined below.
     * 
     */
    public Optional<Output<ReplicatedVMManagedDiskTargetDiskEncryptionArgs>> targetDiskEncryption() {
        return Optional.ofNullable(this.targetDiskEncryption);
    }

    /**
     * The Disk Encryption Set that the Managed Disk will be associated with. Changing this forces a new resource to be created.
     * 
     * &gt; **NOTE:** Creating replicated vm with `target_disk_encryption_set_id` wil take more time (up to 5 hours), please extend the `timeout` for `create`.
     * 
     */
    @Import(name="targetDiskEncryptionSetId")
    private @Nullable Output<String> targetDiskEncryptionSetId;

    /**
     * @return The Disk Encryption Set that the Managed Disk will be associated with. Changing this forces a new resource to be created.
     * 
     * &gt; **NOTE:** Creating replicated vm with `target_disk_encryption_set_id` wil take more time (up to 5 hours), please extend the `timeout` for `create`.
     * 
     */
    public Optional<Output<String>> targetDiskEncryptionSetId() {
        return Optional.ofNullable(this.targetDiskEncryptionSetId);
    }

    /**
     * What type should the disk be when a failover is done. Possible values are `Standard_LRS`, `Premium_LRS`, `StandardSSD_LRS` and `UltraSSD_LRS`. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="targetDiskType", required=true)
    private Output<String> targetDiskType;

    /**
     * @return What type should the disk be when a failover is done. Possible values are `Standard_LRS`, `Premium_LRS`, `StandardSSD_LRS` and `UltraSSD_LRS`. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> targetDiskType() {
        return this.targetDiskType;
    }

    /**
     * What type should the disk be that holds the replication data. Possible values are `Standard_LRS`, `Premium_LRS`, `StandardSSD_LRS` and `UltraSSD_LRS`. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="targetReplicaDiskType", required=true)
    private Output<String> targetReplicaDiskType;

    /**
     * @return What type should the disk be that holds the replication data. Possible values are `Standard_LRS`, `Premium_LRS`, `StandardSSD_LRS` and `UltraSSD_LRS`. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> targetReplicaDiskType() {
        return this.targetReplicaDiskType;
    }

    /**
     * Resource group disk should belong to when a failover is done. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="targetResourceGroupId", required=true)
    private Output<String> targetResourceGroupId;

    /**
     * @return Resource group disk should belong to when a failover is done. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> targetResourceGroupId() {
        return this.targetResourceGroupId;
    }

    private ReplicatedVMManagedDiskArgs() {}

    private ReplicatedVMManagedDiskArgs(ReplicatedVMManagedDiskArgs $) {
        this.diskId = $.diskId;
        this.stagingStorageAccountId = $.stagingStorageAccountId;
        this.targetDiskEncryption = $.targetDiskEncryption;
        this.targetDiskEncryptionSetId = $.targetDiskEncryptionSetId;
        this.targetDiskType = $.targetDiskType;
        this.targetReplicaDiskType = $.targetReplicaDiskType;
        this.targetResourceGroupId = $.targetResourceGroupId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReplicatedVMManagedDiskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReplicatedVMManagedDiskArgs $;

        public Builder() {
            $ = new ReplicatedVMManagedDiskArgs();
        }

        public Builder(ReplicatedVMManagedDiskArgs defaults) {
            $ = new ReplicatedVMManagedDiskArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param diskId Id of disk that should be replicated. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder diskId(Output<String> diskId) {
            $.diskId = diskId;
            return this;
        }

        /**
         * @param diskId Id of disk that should be replicated. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder diskId(String diskId) {
            return diskId(Output.of(diskId));
        }

        /**
         * @param stagingStorageAccountId Storage account that should be used for caching. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder stagingStorageAccountId(Output<String> stagingStorageAccountId) {
            $.stagingStorageAccountId = stagingStorageAccountId;
            return this;
        }

        /**
         * @param stagingStorageAccountId Storage account that should be used for caching. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder stagingStorageAccountId(String stagingStorageAccountId) {
            return stagingStorageAccountId(Output.of(stagingStorageAccountId));
        }

        /**
         * @param targetDiskEncryption A `target_disk_encryption` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder targetDiskEncryption(@Nullable Output<ReplicatedVMManagedDiskTargetDiskEncryptionArgs> targetDiskEncryption) {
            $.targetDiskEncryption = targetDiskEncryption;
            return this;
        }

        /**
         * @param targetDiskEncryption A `target_disk_encryption` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder targetDiskEncryption(ReplicatedVMManagedDiskTargetDiskEncryptionArgs targetDiskEncryption) {
            return targetDiskEncryption(Output.of(targetDiskEncryption));
        }

        /**
         * @param targetDiskEncryptionSetId The Disk Encryption Set that the Managed Disk will be associated with. Changing this forces a new resource to be created.
         * 
         * &gt; **NOTE:** Creating replicated vm with `target_disk_encryption_set_id` wil take more time (up to 5 hours), please extend the `timeout` for `create`.
         * 
         * @return builder
         * 
         */
        public Builder targetDiskEncryptionSetId(@Nullable Output<String> targetDiskEncryptionSetId) {
            $.targetDiskEncryptionSetId = targetDiskEncryptionSetId;
            return this;
        }

        /**
         * @param targetDiskEncryptionSetId The Disk Encryption Set that the Managed Disk will be associated with. Changing this forces a new resource to be created.
         * 
         * &gt; **NOTE:** Creating replicated vm with `target_disk_encryption_set_id` wil take more time (up to 5 hours), please extend the `timeout` for `create`.
         * 
         * @return builder
         * 
         */
        public Builder targetDiskEncryptionSetId(String targetDiskEncryptionSetId) {
            return targetDiskEncryptionSetId(Output.of(targetDiskEncryptionSetId));
        }

        /**
         * @param targetDiskType What type should the disk be when a failover is done. Possible values are `Standard_LRS`, `Premium_LRS`, `StandardSSD_LRS` and `UltraSSD_LRS`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder targetDiskType(Output<String> targetDiskType) {
            $.targetDiskType = targetDiskType;
            return this;
        }

        /**
         * @param targetDiskType What type should the disk be when a failover is done. Possible values are `Standard_LRS`, `Premium_LRS`, `StandardSSD_LRS` and `UltraSSD_LRS`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder targetDiskType(String targetDiskType) {
            return targetDiskType(Output.of(targetDiskType));
        }

        /**
         * @param targetReplicaDiskType What type should the disk be that holds the replication data. Possible values are `Standard_LRS`, `Premium_LRS`, `StandardSSD_LRS` and `UltraSSD_LRS`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder targetReplicaDiskType(Output<String> targetReplicaDiskType) {
            $.targetReplicaDiskType = targetReplicaDiskType;
            return this;
        }

        /**
         * @param targetReplicaDiskType What type should the disk be that holds the replication data. Possible values are `Standard_LRS`, `Premium_LRS`, `StandardSSD_LRS` and `UltraSSD_LRS`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder targetReplicaDiskType(String targetReplicaDiskType) {
            return targetReplicaDiskType(Output.of(targetReplicaDiskType));
        }

        /**
         * @param targetResourceGroupId Resource group disk should belong to when a failover is done. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder targetResourceGroupId(Output<String> targetResourceGroupId) {
            $.targetResourceGroupId = targetResourceGroupId;
            return this;
        }

        /**
         * @param targetResourceGroupId Resource group disk should belong to when a failover is done. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder targetResourceGroupId(String targetResourceGroupId) {
            return targetResourceGroupId(Output.of(targetResourceGroupId));
        }

        public ReplicatedVMManagedDiskArgs build() {
            if ($.diskId == null) {
                throw new MissingRequiredPropertyException("ReplicatedVMManagedDiskArgs", "diskId");
            }
            if ($.stagingStorageAccountId == null) {
                throw new MissingRequiredPropertyException("ReplicatedVMManagedDiskArgs", "stagingStorageAccountId");
            }
            if ($.targetDiskType == null) {
                throw new MissingRequiredPropertyException("ReplicatedVMManagedDiskArgs", "targetDiskType");
            }
            if ($.targetReplicaDiskType == null) {
                throw new MissingRequiredPropertyException("ReplicatedVMManagedDiskArgs", "targetReplicaDiskType");
            }
            if ($.targetResourceGroupId == null) {
                throw new MissingRequiredPropertyException("ReplicatedVMManagedDiskArgs", "targetResourceGroupId");
            }
            return $;
        }
    }

}
