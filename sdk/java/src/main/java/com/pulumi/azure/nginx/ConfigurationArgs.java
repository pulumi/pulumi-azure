// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.nginx;

import com.pulumi.azure.nginx.inputs.ConfigurationConfigFileArgs;
import com.pulumi.azure.nginx.inputs.ConfigurationProtectedFileArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConfigurationArgs Empty = new ConfigurationArgs();

    @Import(name="configFiles")
    private @Nullable Output<List<ConfigurationConfigFileArgs>> configFiles;

    public Optional<Output<List<ConfigurationConfigFileArgs>>> configFiles() {
        return Optional.ofNullable(this.configFiles);
    }

    @Import(name="nginxDeploymentId", required=true)
    private Output<String> nginxDeploymentId;

    public Output<String> nginxDeploymentId() {
        return this.nginxDeploymentId;
    }

    @Import(name="packageData")
    private @Nullable Output<String> packageData;

    public Optional<Output<String>> packageData() {
        return Optional.ofNullable(this.packageData);
    }

    @Import(name="protectedFiles")
    private @Nullable Output<List<ConfigurationProtectedFileArgs>> protectedFiles;

    public Optional<Output<List<ConfigurationProtectedFileArgs>>> protectedFiles() {
        return Optional.ofNullable(this.protectedFiles);
    }

    @Import(name="rootFile", required=true)
    private Output<String> rootFile;

    public Output<String> rootFile() {
        return this.rootFile;
    }

    private ConfigurationArgs() {}

    private ConfigurationArgs(ConfigurationArgs $) {
        this.configFiles = $.configFiles;
        this.nginxDeploymentId = $.nginxDeploymentId;
        this.packageData = $.packageData;
        this.protectedFiles = $.protectedFiles;
        this.rootFile = $.rootFile;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfigurationArgs $;

        public Builder() {
            $ = new ConfigurationArgs();
        }

        public Builder(ConfigurationArgs defaults) {
            $ = new ConfigurationArgs(Objects.requireNonNull(defaults));
        }

        public Builder configFiles(@Nullable Output<List<ConfigurationConfigFileArgs>> configFiles) {
            $.configFiles = configFiles;
            return this;
        }

        public Builder configFiles(List<ConfigurationConfigFileArgs> configFiles) {
            return configFiles(Output.of(configFiles));
        }

        public Builder configFiles(ConfigurationConfigFileArgs... configFiles) {
            return configFiles(List.of(configFiles));
        }

        public Builder nginxDeploymentId(Output<String> nginxDeploymentId) {
            $.nginxDeploymentId = nginxDeploymentId;
            return this;
        }

        public Builder nginxDeploymentId(String nginxDeploymentId) {
            return nginxDeploymentId(Output.of(nginxDeploymentId));
        }

        public Builder packageData(@Nullable Output<String> packageData) {
            $.packageData = packageData;
            return this;
        }

        public Builder packageData(String packageData) {
            return packageData(Output.of(packageData));
        }

        public Builder protectedFiles(@Nullable Output<List<ConfigurationProtectedFileArgs>> protectedFiles) {
            $.protectedFiles = protectedFiles;
            return this;
        }

        public Builder protectedFiles(List<ConfigurationProtectedFileArgs> protectedFiles) {
            return protectedFiles(Output.of(protectedFiles));
        }

        public Builder protectedFiles(ConfigurationProtectedFileArgs... protectedFiles) {
            return protectedFiles(List.of(protectedFiles));
        }

        public Builder rootFile(Output<String> rootFile) {
            $.rootFile = rootFile;
            return this;
        }

        public Builder rootFile(String rootFile) {
            return rootFile(Output.of(rootFile));
        }

        public ConfigurationArgs build() {
            if ($.nginxDeploymentId == null) {
                throw new MissingRequiredPropertyException("ConfigurationArgs", "nginxDeploymentId");
            }
            if ($.rootFile == null) {
                throw new MissingRequiredPropertyException("ConfigurationArgs", "rootFile");
            }
            return $;
        }
    }

}
