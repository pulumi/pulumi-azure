// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.eventhub;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NamespaceCustomerManagedKeyArgs extends com.pulumi.resources.ResourceArgs {

    public static final NamespaceCustomerManagedKeyArgs Empty = new NamespaceCustomerManagedKeyArgs();

    /**
     * The ID of the EventHub Namespace. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="eventhubNamespaceId", required=true)
    private Output<String> eventhubNamespaceId;

    /**
     * @return The ID of the EventHub Namespace. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> eventhubNamespaceId() {
        return this.eventhubNamespaceId;
    }

    /**
     * Whether to enable Infrastructure Encryption (Double Encryption). Changing this forces a new resource to be created.
     * 
     */
    @Import(name="infrastructureEncryptionEnabled")
    private @Nullable Output<Boolean> infrastructureEncryptionEnabled;

    /**
     * @return Whether to enable Infrastructure Encryption (Double Encryption). Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<Boolean>> infrastructureEncryptionEnabled() {
        return Optional.ofNullable(this.infrastructureEncryptionEnabled);
    }

    /**
     * The list of keys of Key Vault.
     * 
     */
    @Import(name="keyVaultKeyIds", required=true)
    private Output<List<String>> keyVaultKeyIds;

    /**
     * @return The list of keys of Key Vault.
     * 
     */
    public Output<List<String>> keyVaultKeyIds() {
        return this.keyVaultKeyIds;
    }

    /**
     * The ID of a User Managed Identity that will be used to access Key Vaults that contain the encryption keys.
     * 
     * &gt; **Note:** If using `user_assigned_identity_id`, ensure the User Assigned Identity is also assigned to the parent Event Hub.
     * 
     * &gt; **Note:** If using `user_assigned_identity_id`, make sure to assign the identity the appropriate permissions to access the Key Vault key. Failure to grant `Get, UnwrapKey, and WrapKey` will cause this resource to fail to apply.
     * 
     */
    @Import(name="userAssignedIdentityId")
    private @Nullable Output<String> userAssignedIdentityId;

    /**
     * @return The ID of a User Managed Identity that will be used to access Key Vaults that contain the encryption keys.
     * 
     * &gt; **Note:** If using `user_assigned_identity_id`, ensure the User Assigned Identity is also assigned to the parent Event Hub.
     * 
     * &gt; **Note:** If using `user_assigned_identity_id`, make sure to assign the identity the appropriate permissions to access the Key Vault key. Failure to grant `Get, UnwrapKey, and WrapKey` will cause this resource to fail to apply.
     * 
     */
    public Optional<Output<String>> userAssignedIdentityId() {
        return Optional.ofNullable(this.userAssignedIdentityId);
    }

    private NamespaceCustomerManagedKeyArgs() {}

    private NamespaceCustomerManagedKeyArgs(NamespaceCustomerManagedKeyArgs $) {
        this.eventhubNamespaceId = $.eventhubNamespaceId;
        this.infrastructureEncryptionEnabled = $.infrastructureEncryptionEnabled;
        this.keyVaultKeyIds = $.keyVaultKeyIds;
        this.userAssignedIdentityId = $.userAssignedIdentityId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NamespaceCustomerManagedKeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NamespaceCustomerManagedKeyArgs $;

        public Builder() {
            $ = new NamespaceCustomerManagedKeyArgs();
        }

        public Builder(NamespaceCustomerManagedKeyArgs defaults) {
            $ = new NamespaceCustomerManagedKeyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param eventhubNamespaceId The ID of the EventHub Namespace. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder eventhubNamespaceId(Output<String> eventhubNamespaceId) {
            $.eventhubNamespaceId = eventhubNamespaceId;
            return this;
        }

        /**
         * @param eventhubNamespaceId The ID of the EventHub Namespace. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder eventhubNamespaceId(String eventhubNamespaceId) {
            return eventhubNamespaceId(Output.of(eventhubNamespaceId));
        }

        /**
         * @param infrastructureEncryptionEnabled Whether to enable Infrastructure Encryption (Double Encryption). Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder infrastructureEncryptionEnabled(@Nullable Output<Boolean> infrastructureEncryptionEnabled) {
            $.infrastructureEncryptionEnabled = infrastructureEncryptionEnabled;
            return this;
        }

        /**
         * @param infrastructureEncryptionEnabled Whether to enable Infrastructure Encryption (Double Encryption). Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder infrastructureEncryptionEnabled(Boolean infrastructureEncryptionEnabled) {
            return infrastructureEncryptionEnabled(Output.of(infrastructureEncryptionEnabled));
        }

        /**
         * @param keyVaultKeyIds The list of keys of Key Vault.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultKeyIds(Output<List<String>> keyVaultKeyIds) {
            $.keyVaultKeyIds = keyVaultKeyIds;
            return this;
        }

        /**
         * @param keyVaultKeyIds The list of keys of Key Vault.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultKeyIds(List<String> keyVaultKeyIds) {
            return keyVaultKeyIds(Output.of(keyVaultKeyIds));
        }

        /**
         * @param keyVaultKeyIds The list of keys of Key Vault.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultKeyIds(String... keyVaultKeyIds) {
            return keyVaultKeyIds(List.of(keyVaultKeyIds));
        }

        /**
         * @param userAssignedIdentityId The ID of a User Managed Identity that will be used to access Key Vaults that contain the encryption keys.
         * 
         * &gt; **Note:** If using `user_assigned_identity_id`, ensure the User Assigned Identity is also assigned to the parent Event Hub.
         * 
         * &gt; **Note:** If using `user_assigned_identity_id`, make sure to assign the identity the appropriate permissions to access the Key Vault key. Failure to grant `Get, UnwrapKey, and WrapKey` will cause this resource to fail to apply.
         * 
         * @return builder
         * 
         */
        public Builder userAssignedIdentityId(@Nullable Output<String> userAssignedIdentityId) {
            $.userAssignedIdentityId = userAssignedIdentityId;
            return this;
        }

        /**
         * @param userAssignedIdentityId The ID of a User Managed Identity that will be used to access Key Vaults that contain the encryption keys.
         * 
         * &gt; **Note:** If using `user_assigned_identity_id`, ensure the User Assigned Identity is also assigned to the parent Event Hub.
         * 
         * &gt; **Note:** If using `user_assigned_identity_id`, make sure to assign the identity the appropriate permissions to access the Key Vault key. Failure to grant `Get, UnwrapKey, and WrapKey` will cause this resource to fail to apply.
         * 
         * @return builder
         * 
         */
        public Builder userAssignedIdentityId(String userAssignedIdentityId) {
            return userAssignedIdentityId(Output.of(userAssignedIdentityId));
        }

        public NamespaceCustomerManagedKeyArgs build() {
            if ($.eventhubNamespaceId == null) {
                throw new MissingRequiredPropertyException("NamespaceCustomerManagedKeyArgs", "eventhubNamespaceId");
            }
            if ($.keyVaultKeyIds == null) {
                throw new MissingRequiredPropertyException("NamespaceCustomerManagedKeyArgs", "keyVaultKeyIds");
            }
            return $;
        }
    }

}
