// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.compute;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class DiskPoolManagedDiskAttachmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final DiskPoolManagedDiskAttachmentArgs Empty = new DiskPoolManagedDiskAttachmentArgs();

    /**
     * The ID of the Disk Pool. Changing this forces a new Disk Pool Managed Disk Attachment to be created.
     * 
     */
    @Import(name="diskPoolId", required=true)
    private Output<String> diskPoolId;

    /**
     * @return The ID of the Disk Pool. Changing this forces a new Disk Pool Managed Disk Attachment to be created.
     * 
     */
    public Output<String> diskPoolId() {
        return this.diskPoolId;
    }

    /**
     * The ID of the Managed Disk. Changing this forces a new Disks Pool Managed Disk Attachment to be created.
     * 
     */
    @Import(name="managedDiskId", required=true)
    private Output<String> managedDiskId;

    /**
     * @return The ID of the Managed Disk. Changing this forces a new Disks Pool Managed Disk Attachment to be created.
     * 
     */
    public Output<String> managedDiskId() {
        return this.managedDiskId;
    }

    private DiskPoolManagedDiskAttachmentArgs() {}

    private DiskPoolManagedDiskAttachmentArgs(DiskPoolManagedDiskAttachmentArgs $) {
        this.diskPoolId = $.diskPoolId;
        this.managedDiskId = $.managedDiskId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DiskPoolManagedDiskAttachmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DiskPoolManagedDiskAttachmentArgs $;

        public Builder() {
            $ = new DiskPoolManagedDiskAttachmentArgs();
        }

        public Builder(DiskPoolManagedDiskAttachmentArgs defaults) {
            $ = new DiskPoolManagedDiskAttachmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param diskPoolId The ID of the Disk Pool. Changing this forces a new Disk Pool Managed Disk Attachment to be created.
         * 
         * @return builder
         * 
         */
        public Builder diskPoolId(Output<String> diskPoolId) {
            $.diskPoolId = diskPoolId;
            return this;
        }

        /**
         * @param diskPoolId The ID of the Disk Pool. Changing this forces a new Disk Pool Managed Disk Attachment to be created.
         * 
         * @return builder
         * 
         */
        public Builder diskPoolId(String diskPoolId) {
            return diskPoolId(Output.of(diskPoolId));
        }

        /**
         * @param managedDiskId The ID of the Managed Disk. Changing this forces a new Disks Pool Managed Disk Attachment to be created.
         * 
         * @return builder
         * 
         */
        public Builder managedDiskId(Output<String> managedDiskId) {
            $.managedDiskId = managedDiskId;
            return this;
        }

        /**
         * @param managedDiskId The ID of the Managed Disk. Changing this forces a new Disks Pool Managed Disk Attachment to be created.
         * 
         * @return builder
         * 
         */
        public Builder managedDiskId(String managedDiskId) {
            return managedDiskId(Output.of(managedDiskId));
        }

        public DiskPoolManagedDiskAttachmentArgs build() {
            if ($.diskPoolId == null) {
                throw new MissingRequiredPropertyException("DiskPoolManagedDiskAttachmentArgs", "diskPoolId");
            }
            if ($.managedDiskId == null) {
                throw new MissingRequiredPropertyException("DiskPoolManagedDiskAttachmentArgs", "managedDiskId");
            }
            return $;
        }
    }

}
