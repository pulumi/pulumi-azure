// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.cdn.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class EndpointCustomDomainCdnManagedHttps {
    /**
     * @return The type of HTTPS certificate. Possible values are `Shared` and `Dedicated`.
     * 
     */
    private String certificateType;
    /**
     * @return The type of protocol. Possible values are `ServerNameIndication` and `IPBased`.
     * 
     */
    private String protocolType;
    /**
     * @return The minimum TLS protocol version that is used for HTTPS. Possible values are `TLS10` (representing TLS 1.0/1.1), `TLS12` (representing TLS 1.2) and `None` (representing no minimums). Defaults to `TLS12`.
     * 
     */
    private @Nullable String tlsVersion;

    private EndpointCustomDomainCdnManagedHttps() {}
    /**
     * @return The type of HTTPS certificate. Possible values are `Shared` and `Dedicated`.
     * 
     */
    public String certificateType() {
        return this.certificateType;
    }
    /**
     * @return The type of protocol. Possible values are `ServerNameIndication` and `IPBased`.
     * 
     */
    public String protocolType() {
        return this.protocolType;
    }
    /**
     * @return The minimum TLS protocol version that is used for HTTPS. Possible values are `TLS10` (representing TLS 1.0/1.1), `TLS12` (representing TLS 1.2) and `None` (representing no minimums). Defaults to `TLS12`.
     * 
     */
    public Optional<String> tlsVersion() {
        return Optional.ofNullable(this.tlsVersion);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EndpointCustomDomainCdnManagedHttps defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String certificateType;
        private String protocolType;
        private @Nullable String tlsVersion;
        public Builder() {}
        public Builder(EndpointCustomDomainCdnManagedHttps defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateType = defaults.certificateType;
    	      this.protocolType = defaults.protocolType;
    	      this.tlsVersion = defaults.tlsVersion;
        }

        @CustomType.Setter
        public Builder certificateType(String certificateType) {
            if (certificateType == null) {
              throw new MissingRequiredPropertyException("EndpointCustomDomainCdnManagedHttps", "certificateType");
            }
            this.certificateType = certificateType;
            return this;
        }
        @CustomType.Setter
        public Builder protocolType(String protocolType) {
            if (protocolType == null) {
              throw new MissingRequiredPropertyException("EndpointCustomDomainCdnManagedHttps", "protocolType");
            }
            this.protocolType = protocolType;
            return this;
        }
        @CustomType.Setter
        public Builder tlsVersion(@Nullable String tlsVersion) {

            this.tlsVersion = tlsVersion;
            return this;
        }
        public EndpointCustomDomainCdnManagedHttps build() {
            final var _resultValue = new EndpointCustomDomainCdnManagedHttps();
            _resultValue.certificateType = certificateType;
            _resultValue.protocolType = protocolType;
            _resultValue.tlsVersion = tlsVersion;
            return _resultValue;
        }
    }
}
