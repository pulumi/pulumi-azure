// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.stack.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class HciDeploymentSettingScaleUnitHostNetworkIntentAdapterPropertyOverride {
    /**
     * @return The jumbo frame size of the adapter. This parameter should only be modified based on your OEM guidance. Changing this forces a new Stack HCI Deployment Setting to be created.
     * 
     */
    private @Nullable String jumboPacket;
    /**
     * @return The network direct of the adapter. This parameter should only be modified based on your OEM guidance. Changing this forces a new Stack HCI Deployment Setting to be created.
     * 
     */
    private @Nullable String networkDirect;
    /**
     * @return The network direct technology of the adapter. This parameter should only be modified based on your OEM guidance. Changing this forces a new Stack HCI Deployment Setting to be created.
     * 
     */
    private @Nullable String networkDirectTechnology;

    private HciDeploymentSettingScaleUnitHostNetworkIntentAdapterPropertyOverride() {}
    /**
     * @return The jumbo frame size of the adapter. This parameter should only be modified based on your OEM guidance. Changing this forces a new Stack HCI Deployment Setting to be created.
     * 
     */
    public Optional<String> jumboPacket() {
        return Optional.ofNullable(this.jumboPacket);
    }
    /**
     * @return The network direct of the adapter. This parameter should only be modified based on your OEM guidance. Changing this forces a new Stack HCI Deployment Setting to be created.
     * 
     */
    public Optional<String> networkDirect() {
        return Optional.ofNullable(this.networkDirect);
    }
    /**
     * @return The network direct technology of the adapter. This parameter should only be modified based on your OEM guidance. Changing this forces a new Stack HCI Deployment Setting to be created.
     * 
     */
    public Optional<String> networkDirectTechnology() {
        return Optional.ofNullable(this.networkDirectTechnology);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HciDeploymentSettingScaleUnitHostNetworkIntentAdapterPropertyOverride defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String jumboPacket;
        private @Nullable String networkDirect;
        private @Nullable String networkDirectTechnology;
        public Builder() {}
        public Builder(HciDeploymentSettingScaleUnitHostNetworkIntentAdapterPropertyOverride defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.jumboPacket = defaults.jumboPacket;
    	      this.networkDirect = defaults.networkDirect;
    	      this.networkDirectTechnology = defaults.networkDirectTechnology;
        }

        @CustomType.Setter
        public Builder jumboPacket(@Nullable String jumboPacket) {

            this.jumboPacket = jumboPacket;
            return this;
        }
        @CustomType.Setter
        public Builder networkDirect(@Nullable String networkDirect) {

            this.networkDirect = networkDirect;
            return this;
        }
        @CustomType.Setter
        public Builder networkDirectTechnology(@Nullable String networkDirectTechnology) {

            this.networkDirectTechnology = networkDirectTechnology;
            return this;
        }
        public HciDeploymentSettingScaleUnitHostNetworkIntentAdapterPropertyOverride build() {
            final var _resultValue = new HciDeploymentSettingScaleUnitHostNetworkIntentAdapterPropertyOverride();
            _resultValue.jumboPacket = jumboPacket;
            _resultValue.networkDirect = networkDirect;
            _resultValue.networkDirectTechnology = networkDirectTechnology;
            return _resultValue;
        }
    }
}
