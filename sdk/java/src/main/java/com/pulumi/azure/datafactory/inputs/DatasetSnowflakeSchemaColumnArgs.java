// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.datafactory.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatasetSnowflakeSchemaColumnArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatasetSnowflakeSchemaColumnArgs Empty = new DatasetSnowflakeSchemaColumnArgs();

    /**
     * The name of the column.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the column.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The total number of digits allowed.
     * 
     */
    @Import(name="precision")
    private @Nullable Output<Integer> precision;

    /**
     * @return The total number of digits allowed.
     * 
     */
    public Optional<Output<Integer>> precision() {
        return Optional.ofNullable(this.precision);
    }

    /**
     * The number of digits allowed to the right of the decimal point.
     * 
     */
    @Import(name="scale")
    private @Nullable Output<Integer> scale;

    /**
     * @return The number of digits allowed to the right of the decimal point.
     * 
     */
    public Optional<Output<Integer>> scale() {
        return Optional.ofNullable(this.scale);
    }

    /**
     * Type of the column. Valid values are `NUMBER`, `DECIMAL`, `NUMERIC`, `INT`, `INTEGER`, `BIGINT`, `SMALLINT`, `FLOAT``FLOAT4`, `FLOAT8`, `DOUBLE`, `DOUBLE PRECISION`, `REAL`, `VARCHAR`, `CHAR`, `CHARACTER`, `STRING`, `TEXT`, `BINARY`, `VARBINARY`, `BOOLEAN`, `DATE`, `DATETIME`, `TIME`, `TIMESTAMP`, `TIMESTAMP_LTZ`, `TIMESTAMP_NTZ`, `TIMESTAMP_TZ`, `VARIANT`, `OBJECT`, `ARRAY`, `GEOGRAPHY`. Please note these values are case sensitive.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Type of the column. Valid values are `NUMBER`, `DECIMAL`, `NUMERIC`, `INT`, `INTEGER`, `BIGINT`, `SMALLINT`, `FLOAT``FLOAT4`, `FLOAT8`, `DOUBLE`, `DOUBLE PRECISION`, `REAL`, `VARCHAR`, `CHAR`, `CHARACTER`, `STRING`, `TEXT`, `BINARY`, `VARBINARY`, `BOOLEAN`, `DATE`, `DATETIME`, `TIME`, `TIMESTAMP`, `TIMESTAMP_LTZ`, `TIMESTAMP_NTZ`, `TIMESTAMP_TZ`, `VARIANT`, `OBJECT`, `ARRAY`, `GEOGRAPHY`. Please note these values are case sensitive.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private DatasetSnowflakeSchemaColumnArgs() {}

    private DatasetSnowflakeSchemaColumnArgs(DatasetSnowflakeSchemaColumnArgs $) {
        this.name = $.name;
        this.precision = $.precision;
        this.scale = $.scale;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatasetSnowflakeSchemaColumnArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatasetSnowflakeSchemaColumnArgs $;

        public Builder() {
            $ = new DatasetSnowflakeSchemaColumnArgs();
        }

        public Builder(DatasetSnowflakeSchemaColumnArgs defaults) {
            $ = new DatasetSnowflakeSchemaColumnArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name The name of the column.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the column.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param precision The total number of digits allowed.
         * 
         * @return builder
         * 
         */
        public Builder precision(@Nullable Output<Integer> precision) {
            $.precision = precision;
            return this;
        }

        /**
         * @param precision The total number of digits allowed.
         * 
         * @return builder
         * 
         */
        public Builder precision(Integer precision) {
            return precision(Output.of(precision));
        }

        /**
         * @param scale The number of digits allowed to the right of the decimal point.
         * 
         * @return builder
         * 
         */
        public Builder scale(@Nullable Output<Integer> scale) {
            $.scale = scale;
            return this;
        }

        /**
         * @param scale The number of digits allowed to the right of the decimal point.
         * 
         * @return builder
         * 
         */
        public Builder scale(Integer scale) {
            return scale(Output.of(scale));
        }

        /**
         * @param type Type of the column. Valid values are `NUMBER`, `DECIMAL`, `NUMERIC`, `INT`, `INTEGER`, `BIGINT`, `SMALLINT`, `FLOAT``FLOAT4`, `FLOAT8`, `DOUBLE`, `DOUBLE PRECISION`, `REAL`, `VARCHAR`, `CHAR`, `CHARACTER`, `STRING`, `TEXT`, `BINARY`, `VARBINARY`, `BOOLEAN`, `DATE`, `DATETIME`, `TIME`, `TIMESTAMP`, `TIMESTAMP_LTZ`, `TIMESTAMP_NTZ`, `TIMESTAMP_TZ`, `VARIANT`, `OBJECT`, `ARRAY`, `GEOGRAPHY`. Please note these values are case sensitive.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of the column. Valid values are `NUMBER`, `DECIMAL`, `NUMERIC`, `INT`, `INTEGER`, `BIGINT`, `SMALLINT`, `FLOAT``FLOAT4`, `FLOAT8`, `DOUBLE`, `DOUBLE PRECISION`, `REAL`, `VARCHAR`, `CHAR`, `CHARACTER`, `STRING`, `TEXT`, `BINARY`, `VARBINARY`, `BOOLEAN`, `DATE`, `DATETIME`, `TIME`, `TIMESTAMP`, `TIMESTAMP_LTZ`, `TIMESTAMP_NTZ`, `TIMESTAMP_TZ`, `VARIANT`, `OBJECT`, `ARRAY`, `GEOGRAPHY`. Please note these values are case sensitive.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public DatasetSnowflakeSchemaColumnArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("DatasetSnowflakeSchemaColumnArgs", "name");
            }
            return $;
        }
    }

}
