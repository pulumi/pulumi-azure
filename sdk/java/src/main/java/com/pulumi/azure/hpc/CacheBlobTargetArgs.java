// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.hpc;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CacheBlobTargetArgs extends com.pulumi.resources.ResourceArgs {

    public static final CacheBlobTargetArgs Empty = new CacheBlobTargetArgs();

    /**
     * The name of the access policy applied to this target. Defaults to `default`.
     * 
     */
    @Import(name="accessPolicyName")
    private @Nullable Output<String> accessPolicyName;

    /**
     * @return The name of the access policy applied to this target. Defaults to `default`.
     * 
     */
    public Optional<Output<String>> accessPolicyName() {
        return Optional.ofNullable(this.accessPolicyName);
    }

    /**
     * The name HPC Cache, which the HPC Cache Blob Target will be added to. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="cacheName", required=true)
    private Output<String> cacheName;

    /**
     * @return The name HPC Cache, which the HPC Cache Blob Target will be added to. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> cacheName() {
        return this.cacheName;
    }

    /**
     * The name of the HPC Cache Blob Target. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the HPC Cache Blob Target. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The client-facing file path of the HPC Cache Blob Target.
     * 
     */
    @Import(name="namespacePath", required=true)
    private Output<String> namespacePath;

    /**
     * @return The client-facing file path of the HPC Cache Blob Target.
     * 
     */
    public Output<String> namespacePath() {
        return this.namespacePath;
    }

    /**
     * The name of the Resource Group in which to create the HPC Cache Blob Target. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the Resource Group in which to create the HPC Cache Blob Target. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The Resource Manager ID of the Storage Container used as the HPC Cache Blob Target. Changing this forces a new resource to be created.
     * 
     * &gt; **Note:** This is the Resource Manager ID of the Storage Container, rather than the regular ID - and can be accessed on the `azure.storage.Container` Data Source/Resource as `resource_manager_id`.
     * 
     */
    @Import(name="storageContainerId", required=true)
    private Output<String> storageContainerId;

    /**
     * @return The Resource Manager ID of the Storage Container used as the HPC Cache Blob Target. Changing this forces a new resource to be created.
     * 
     * &gt; **Note:** This is the Resource Manager ID of the Storage Container, rather than the regular ID - and can be accessed on the `azure.storage.Container` Data Source/Resource as `resource_manager_id`.
     * 
     */
    public Output<String> storageContainerId() {
        return this.storageContainerId;
    }

    private CacheBlobTargetArgs() {}

    private CacheBlobTargetArgs(CacheBlobTargetArgs $) {
        this.accessPolicyName = $.accessPolicyName;
        this.cacheName = $.cacheName;
        this.name = $.name;
        this.namespacePath = $.namespacePath;
        this.resourceGroupName = $.resourceGroupName;
        this.storageContainerId = $.storageContainerId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CacheBlobTargetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CacheBlobTargetArgs $;

        public Builder() {
            $ = new CacheBlobTargetArgs();
        }

        public Builder(CacheBlobTargetArgs defaults) {
            $ = new CacheBlobTargetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessPolicyName The name of the access policy applied to this target. Defaults to `default`.
         * 
         * @return builder
         * 
         */
        public Builder accessPolicyName(@Nullable Output<String> accessPolicyName) {
            $.accessPolicyName = accessPolicyName;
            return this;
        }

        /**
         * @param accessPolicyName The name of the access policy applied to this target. Defaults to `default`.
         * 
         * @return builder
         * 
         */
        public Builder accessPolicyName(String accessPolicyName) {
            return accessPolicyName(Output.of(accessPolicyName));
        }

        /**
         * @param cacheName The name HPC Cache, which the HPC Cache Blob Target will be added to. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder cacheName(Output<String> cacheName) {
            $.cacheName = cacheName;
            return this;
        }

        /**
         * @param cacheName The name HPC Cache, which the HPC Cache Blob Target will be added to. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder cacheName(String cacheName) {
            return cacheName(Output.of(cacheName));
        }

        /**
         * @param name The name of the HPC Cache Blob Target. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the HPC Cache Blob Target. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namespacePath The client-facing file path of the HPC Cache Blob Target.
         * 
         * @return builder
         * 
         */
        public Builder namespacePath(Output<String> namespacePath) {
            $.namespacePath = namespacePath;
            return this;
        }

        /**
         * @param namespacePath The client-facing file path of the HPC Cache Blob Target.
         * 
         * @return builder
         * 
         */
        public Builder namespacePath(String namespacePath) {
            return namespacePath(Output.of(namespacePath));
        }

        /**
         * @param resourceGroupName The name of the Resource Group in which to create the HPC Cache Blob Target. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the Resource Group in which to create the HPC Cache Blob Target. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param storageContainerId The Resource Manager ID of the Storage Container used as the HPC Cache Blob Target. Changing this forces a new resource to be created.
         * 
         * &gt; **Note:** This is the Resource Manager ID of the Storage Container, rather than the regular ID - and can be accessed on the `azure.storage.Container` Data Source/Resource as `resource_manager_id`.
         * 
         * @return builder
         * 
         */
        public Builder storageContainerId(Output<String> storageContainerId) {
            $.storageContainerId = storageContainerId;
            return this;
        }

        /**
         * @param storageContainerId The Resource Manager ID of the Storage Container used as the HPC Cache Blob Target. Changing this forces a new resource to be created.
         * 
         * &gt; **Note:** This is the Resource Manager ID of the Storage Container, rather than the regular ID - and can be accessed on the `azure.storage.Container` Data Source/Resource as `resource_manager_id`.
         * 
         * @return builder
         * 
         */
        public Builder storageContainerId(String storageContainerId) {
            return storageContainerId(Output.of(storageContainerId));
        }

        public CacheBlobTargetArgs build() {
            if ($.cacheName == null) {
                throw new MissingRequiredPropertyException("CacheBlobTargetArgs", "cacheName");
            }
            if ($.namespacePath == null) {
                throw new MissingRequiredPropertyException("CacheBlobTargetArgs", "namespacePath");
            }
            if ($.resourceGroupName == null) {
                throw new MissingRequiredPropertyException("CacheBlobTargetArgs", "resourceGroupName");
            }
            if ($.storageContainerId == null) {
                throw new MissingRequiredPropertyException("CacheBlobTargetArgs", "storageContainerId");
            }
            return $;
        }
    }

}
