// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.nginx.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetCertificateResult {
    /**
     * @return The path to the certificate file of this certificate.
     * 
     */
    private String certificateVirtualPath;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The ID of the Key Vault Secret for this certificate.
     * 
     */
    private String keyVaultSecretId;
    /**
     * @return The path to the key file of this certificate.
     * 
     */
    private String keyVirtualPath;
    private String name;
    private String nginxDeploymentId;

    private GetCertificateResult() {}
    /**
     * @return The path to the certificate file of this certificate.
     * 
     */
    public String certificateVirtualPath() {
        return this.certificateVirtualPath;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The ID of the Key Vault Secret for this certificate.
     * 
     */
    public String keyVaultSecretId() {
        return this.keyVaultSecretId;
    }
    /**
     * @return The path to the key file of this certificate.
     * 
     */
    public String keyVirtualPath() {
        return this.keyVirtualPath;
    }
    public String name() {
        return this.name;
    }
    public String nginxDeploymentId() {
        return this.nginxDeploymentId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCertificateResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String certificateVirtualPath;
        private String id;
        private String keyVaultSecretId;
        private String keyVirtualPath;
        private String name;
        private String nginxDeploymentId;
        public Builder() {}
        public Builder(GetCertificateResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateVirtualPath = defaults.certificateVirtualPath;
    	      this.id = defaults.id;
    	      this.keyVaultSecretId = defaults.keyVaultSecretId;
    	      this.keyVirtualPath = defaults.keyVirtualPath;
    	      this.name = defaults.name;
    	      this.nginxDeploymentId = defaults.nginxDeploymentId;
        }

        @CustomType.Setter
        public Builder certificateVirtualPath(String certificateVirtualPath) {
            if (certificateVirtualPath == null) {
              throw new MissingRequiredPropertyException("GetCertificateResult", "certificateVirtualPath");
            }
            this.certificateVirtualPath = certificateVirtualPath;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetCertificateResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder keyVaultSecretId(String keyVaultSecretId) {
            if (keyVaultSecretId == null) {
              throw new MissingRequiredPropertyException("GetCertificateResult", "keyVaultSecretId");
            }
            this.keyVaultSecretId = keyVaultSecretId;
            return this;
        }
        @CustomType.Setter
        public Builder keyVirtualPath(String keyVirtualPath) {
            if (keyVirtualPath == null) {
              throw new MissingRequiredPropertyException("GetCertificateResult", "keyVirtualPath");
            }
            this.keyVirtualPath = keyVirtualPath;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetCertificateResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nginxDeploymentId(String nginxDeploymentId) {
            if (nginxDeploymentId == null) {
              throw new MissingRequiredPropertyException("GetCertificateResult", "nginxDeploymentId");
            }
            this.nginxDeploymentId = nginxDeploymentId;
            return this;
        }
        public GetCertificateResult build() {
            final var _resultValue = new GetCertificateResult();
            _resultValue.certificateVirtualPath = certificateVirtualPath;
            _resultValue.id = id;
            _resultValue.keyVaultSecretId = keyVaultSecretId;
            _resultValue.keyVirtualPath = keyVirtualPath;
            _resultValue.name = name;
            _resultValue.nginxDeploymentId = nginxDeploymentId;
            return _resultValue;
        }
    }
}
