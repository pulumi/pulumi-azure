// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.datafactory;

import com.pulumi.azure.datafactory.inputs.TriggerSchedulePipelineArgs;
import com.pulumi.azure.datafactory.inputs.TriggerScheduleScheduleArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TriggerScheduleArgs extends com.pulumi.resources.ResourceArgs {

    public static final TriggerScheduleArgs Empty = new TriggerScheduleArgs();

    /**
     * Specifies if the Data Factory Schedule Trigger is activated. Defaults to `true`.
     * 
     */
    @Import(name="activated")
    private @Nullable Output<Boolean> activated;

    /**
     * @return Specifies if the Data Factory Schedule Trigger is activated. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> activated() {
        return Optional.ofNullable(this.activated);
    }

    /**
     * List of tags that can be used for describing the Data Factory Schedule Trigger.
     * 
     */
    @Import(name="annotations")
    private @Nullable Output<List<String>> annotations;

    /**
     * @return List of tags that can be used for describing the Data Factory Schedule Trigger.
     * 
     */
    public Optional<Output<List<String>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
     * 
     */
    @Import(name="dataFactoryId", required=true)
    private Output<String> dataFactoryId;

    /**
     * @return The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
     * 
     */
    public Output<String> dataFactoryId() {
        return this.dataFactoryId;
    }

    /**
     * The Schedule Trigger&#39;s description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The Schedule Trigger&#39;s description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The time the Schedule Trigger should end. The time will be represented in UTC.
     * 
     */
    @Import(name="endTime")
    private @Nullable Output<String> endTime;

    /**
     * @return The time the Schedule Trigger should end. The time will be represented in UTC.
     * 
     */
    public Optional<Output<String>> endTime() {
        return Optional.ofNullable(this.endTime);
    }

    /**
     * The trigger frequency. Valid values include `Minute`, `Hour`, `Day`, `Week`, `Month`. Defaults to `Minute`.
     * 
     */
    @Import(name="frequency")
    private @Nullable Output<String> frequency;

    /**
     * @return The trigger frequency. Valid values include `Minute`, `Hour`, `Day`, `Week`, `Month`. Defaults to `Minute`.
     * 
     */
    public Optional<Output<String>> frequency() {
        return Optional.ofNullable(this.frequency);
    }

    /**
     * The interval for how often the trigger occurs. This defaults to `1`.
     * 
     */
    @Import(name="interval")
    private @Nullable Output<Integer> interval;

    /**
     * @return The interval for how often the trigger occurs. This defaults to `1`.
     * 
     */
    public Optional<Output<Integer>> interval() {
        return Optional.ofNullable(this.interval);
    }

    /**
     * Specifies the name of the Data Factory Schedule Trigger. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the name of the Data Factory Schedule Trigger. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The Data Factory Pipeline name that the trigger will act on.
     * 
     */
    @Import(name="pipelineName")
    private @Nullable Output<String> pipelineName;

    /**
     * @return The Data Factory Pipeline name that the trigger will act on.
     * 
     */
    public Optional<Output<String>> pipelineName() {
        return Optional.ofNullable(this.pipelineName);
    }

    /**
     * The pipeline parameters that the trigger will act upon.
     * 
     */
    @Import(name="pipelineParameters")
    private @Nullable Output<Map<String,String>> pipelineParameters;

    /**
     * @return The pipeline parameters that the trigger will act upon.
     * 
     */
    public Optional<Output<Map<String,String>>> pipelineParameters() {
        return Optional.ofNullable(this.pipelineParameters);
    }

    /**
     * A `pipeline` block as defined below.
     * 
     */
    @Import(name="pipelines")
    private @Nullable Output<List<TriggerSchedulePipelineArgs>> pipelines;

    /**
     * @return A `pipeline` block as defined below.
     * 
     */
    public Optional<Output<List<TriggerSchedulePipelineArgs>>> pipelines() {
        return Optional.ofNullable(this.pipelines);
    }

    /**
     * A `schedule` block as defined below, which further specifies the recurrence schedule for the trigger. A schedule is capable of limiting or increasing the number of trigger executions specified by the `frequency` and `interval` properties.
     * 
     */
    @Import(name="schedule")
    private @Nullable Output<TriggerScheduleScheduleArgs> schedule;

    /**
     * @return A `schedule` block as defined below, which further specifies the recurrence schedule for the trigger. A schedule is capable of limiting or increasing the number of trigger executions specified by the `frequency` and `interval` properties.
     * 
     */
    public Optional<Output<TriggerScheduleScheduleArgs>> schedule() {
        return Optional.ofNullable(this.schedule);
    }

    /**
     * The time the Schedule Trigger will start. This defaults to the current time. The time will be represented in UTC.
     * 
     */
    @Import(name="startTime")
    private @Nullable Output<String> startTime;

    /**
     * @return The time the Schedule Trigger will start. This defaults to the current time. The time will be represented in UTC.
     * 
     */
    public Optional<Output<String>> startTime() {
        return Optional.ofNullable(this.startTime);
    }

    /**
     * The timezone of the start/end time.
     * 
     */
    @Import(name="timeZone")
    private @Nullable Output<String> timeZone;

    /**
     * @return The timezone of the start/end time.
     * 
     */
    public Optional<Output<String>> timeZone() {
        return Optional.ofNullable(this.timeZone);
    }

    private TriggerScheduleArgs() {}

    private TriggerScheduleArgs(TriggerScheduleArgs $) {
        this.activated = $.activated;
        this.annotations = $.annotations;
        this.dataFactoryId = $.dataFactoryId;
        this.description = $.description;
        this.endTime = $.endTime;
        this.frequency = $.frequency;
        this.interval = $.interval;
        this.name = $.name;
        this.pipelineName = $.pipelineName;
        this.pipelineParameters = $.pipelineParameters;
        this.pipelines = $.pipelines;
        this.schedule = $.schedule;
        this.startTime = $.startTime;
        this.timeZone = $.timeZone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TriggerScheduleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TriggerScheduleArgs $;

        public Builder() {
            $ = new TriggerScheduleArgs();
        }

        public Builder(TriggerScheduleArgs defaults) {
            $ = new TriggerScheduleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param activated Specifies if the Data Factory Schedule Trigger is activated. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder activated(@Nullable Output<Boolean> activated) {
            $.activated = activated;
            return this;
        }

        /**
         * @param activated Specifies if the Data Factory Schedule Trigger is activated. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder activated(Boolean activated) {
            return activated(Output.of(activated));
        }

        /**
         * @param annotations List of tags that can be used for describing the Data Factory Schedule Trigger.
         * 
         * @return builder
         * 
         */
        public Builder annotations(@Nullable Output<List<String>> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param annotations List of tags that can be used for describing the Data Factory Schedule Trigger.
         * 
         * @return builder
         * 
         */
        public Builder annotations(List<String> annotations) {
            return annotations(Output.of(annotations));
        }

        /**
         * @param annotations List of tags that can be used for describing the Data Factory Schedule Trigger.
         * 
         * @return builder
         * 
         */
        public Builder annotations(String... annotations) {
            return annotations(List.of(annotations));
        }

        /**
         * @param dataFactoryId The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
         * 
         * @return builder
         * 
         */
        public Builder dataFactoryId(Output<String> dataFactoryId) {
            $.dataFactoryId = dataFactoryId;
            return this;
        }

        /**
         * @param dataFactoryId The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
         * 
         * @return builder
         * 
         */
        public Builder dataFactoryId(String dataFactoryId) {
            return dataFactoryId(Output.of(dataFactoryId));
        }

        /**
         * @param description The Schedule Trigger&#39;s description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The Schedule Trigger&#39;s description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param endTime The time the Schedule Trigger should end. The time will be represented in UTC.
         * 
         * @return builder
         * 
         */
        public Builder endTime(@Nullable Output<String> endTime) {
            $.endTime = endTime;
            return this;
        }

        /**
         * @param endTime The time the Schedule Trigger should end. The time will be represented in UTC.
         * 
         * @return builder
         * 
         */
        public Builder endTime(String endTime) {
            return endTime(Output.of(endTime));
        }

        /**
         * @param frequency The trigger frequency. Valid values include `Minute`, `Hour`, `Day`, `Week`, `Month`. Defaults to `Minute`.
         * 
         * @return builder
         * 
         */
        public Builder frequency(@Nullable Output<String> frequency) {
            $.frequency = frequency;
            return this;
        }

        /**
         * @param frequency The trigger frequency. Valid values include `Minute`, `Hour`, `Day`, `Week`, `Month`. Defaults to `Minute`.
         * 
         * @return builder
         * 
         */
        public Builder frequency(String frequency) {
            return frequency(Output.of(frequency));
        }

        /**
         * @param interval The interval for how often the trigger occurs. This defaults to `1`.
         * 
         * @return builder
         * 
         */
        public Builder interval(@Nullable Output<Integer> interval) {
            $.interval = interval;
            return this;
        }

        /**
         * @param interval The interval for how often the trigger occurs. This defaults to `1`.
         * 
         * @return builder
         * 
         */
        public Builder interval(Integer interval) {
            return interval(Output.of(interval));
        }

        /**
         * @param name Specifies the name of the Data Factory Schedule Trigger. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of the Data Factory Schedule Trigger. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param pipelineName The Data Factory Pipeline name that the trigger will act on.
         * 
         * @return builder
         * 
         */
        public Builder pipelineName(@Nullable Output<String> pipelineName) {
            $.pipelineName = pipelineName;
            return this;
        }

        /**
         * @param pipelineName The Data Factory Pipeline name that the trigger will act on.
         * 
         * @return builder
         * 
         */
        public Builder pipelineName(String pipelineName) {
            return pipelineName(Output.of(pipelineName));
        }

        /**
         * @param pipelineParameters The pipeline parameters that the trigger will act upon.
         * 
         * @return builder
         * 
         */
        public Builder pipelineParameters(@Nullable Output<Map<String,String>> pipelineParameters) {
            $.pipelineParameters = pipelineParameters;
            return this;
        }

        /**
         * @param pipelineParameters The pipeline parameters that the trigger will act upon.
         * 
         * @return builder
         * 
         */
        public Builder pipelineParameters(Map<String,String> pipelineParameters) {
            return pipelineParameters(Output.of(pipelineParameters));
        }

        /**
         * @param pipelines A `pipeline` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder pipelines(@Nullable Output<List<TriggerSchedulePipelineArgs>> pipelines) {
            $.pipelines = pipelines;
            return this;
        }

        /**
         * @param pipelines A `pipeline` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder pipelines(List<TriggerSchedulePipelineArgs> pipelines) {
            return pipelines(Output.of(pipelines));
        }

        /**
         * @param pipelines A `pipeline` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder pipelines(TriggerSchedulePipelineArgs... pipelines) {
            return pipelines(List.of(pipelines));
        }

        /**
         * @param schedule A `schedule` block as defined below, which further specifies the recurrence schedule for the trigger. A schedule is capable of limiting or increasing the number of trigger executions specified by the `frequency` and `interval` properties.
         * 
         * @return builder
         * 
         */
        public Builder schedule(@Nullable Output<TriggerScheduleScheduleArgs> schedule) {
            $.schedule = schedule;
            return this;
        }

        /**
         * @param schedule A `schedule` block as defined below, which further specifies the recurrence schedule for the trigger. A schedule is capable of limiting or increasing the number of trigger executions specified by the `frequency` and `interval` properties.
         * 
         * @return builder
         * 
         */
        public Builder schedule(TriggerScheduleScheduleArgs schedule) {
            return schedule(Output.of(schedule));
        }

        /**
         * @param startTime The time the Schedule Trigger will start. This defaults to the current time. The time will be represented in UTC.
         * 
         * @return builder
         * 
         */
        public Builder startTime(@Nullable Output<String> startTime) {
            $.startTime = startTime;
            return this;
        }

        /**
         * @param startTime The time the Schedule Trigger will start. This defaults to the current time. The time will be represented in UTC.
         * 
         * @return builder
         * 
         */
        public Builder startTime(String startTime) {
            return startTime(Output.of(startTime));
        }

        /**
         * @param timeZone The timezone of the start/end time.
         * 
         * @return builder
         * 
         */
        public Builder timeZone(@Nullable Output<String> timeZone) {
            $.timeZone = timeZone;
            return this;
        }

        /**
         * @param timeZone The timezone of the start/end time.
         * 
         * @return builder
         * 
         */
        public Builder timeZone(String timeZone) {
            return timeZone(Output.of(timeZone));
        }

        public TriggerScheduleArgs build() {
            $.dataFactoryId = Objects.requireNonNull($.dataFactoryId, "expected parameter 'dataFactoryId' to be non-null");
            return $;
        }
    }

}
