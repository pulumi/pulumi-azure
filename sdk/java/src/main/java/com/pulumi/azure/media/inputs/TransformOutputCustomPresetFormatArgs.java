// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.media.inputs;

import com.pulumi.azure.media.inputs.TransformOutputCustomPresetFormatJpgArgs;
import com.pulumi.azure.media.inputs.TransformOutputCustomPresetFormatMp4Args;
import com.pulumi.azure.media.inputs.TransformOutputCustomPresetFormatPngArgs;
import com.pulumi.azure.media.inputs.TransformOutputCustomPresetFormatTransportStreamArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TransformOutputCustomPresetFormatArgs extends com.pulumi.resources.ResourceArgs {

    public static final TransformOutputCustomPresetFormatArgs Empty = new TransformOutputCustomPresetFormatArgs();

    /**
     * A `jpg` block as defined below.
     * 
     */
    @Import(name="jpg")
    private @Nullable Output<TransformOutputCustomPresetFormatJpgArgs> jpg;

    /**
     * @return A `jpg` block as defined below.
     * 
     */
    public Optional<Output<TransformOutputCustomPresetFormatJpgArgs>> jpg() {
        return Optional.ofNullable(this.jpg);
    }

    /**
     * A `mp4` block as defined below.
     * 
     */
    @Import(name="mp4")
    private @Nullable Output<TransformOutputCustomPresetFormatMp4Args> mp4;

    /**
     * @return A `mp4` block as defined below.
     * 
     */
    public Optional<Output<TransformOutputCustomPresetFormatMp4Args>> mp4() {
        return Optional.ofNullable(this.mp4);
    }

    /**
     * A `png` block as defined below.
     * 
     */
    @Import(name="png")
    private @Nullable Output<TransformOutputCustomPresetFormatPngArgs> png;

    /**
     * @return A `png` block as defined below.
     * 
     */
    public Optional<Output<TransformOutputCustomPresetFormatPngArgs>> png() {
        return Optional.ofNullable(this.png);
    }

    /**
     * A `transport_stream` block as defined below.
     * 
     * &gt; **NOTE:** Each format can only have one type: `jpg`, `mp4`, `png` or `transport_stream`. If you need to apply different type you must create one format for each one.
     * 
     */
    @Import(name="transportStream")
    private @Nullable Output<TransformOutputCustomPresetFormatTransportStreamArgs> transportStream;

    /**
     * @return A `transport_stream` block as defined below.
     * 
     * &gt; **NOTE:** Each format can only have one type: `jpg`, `mp4`, `png` or `transport_stream`. If you need to apply different type you must create one format for each one.
     * 
     */
    public Optional<Output<TransformOutputCustomPresetFormatTransportStreamArgs>> transportStream() {
        return Optional.ofNullable(this.transportStream);
    }

    private TransformOutputCustomPresetFormatArgs() {}

    private TransformOutputCustomPresetFormatArgs(TransformOutputCustomPresetFormatArgs $) {
        this.jpg = $.jpg;
        this.mp4 = $.mp4;
        this.png = $.png;
        this.transportStream = $.transportStream;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TransformOutputCustomPresetFormatArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TransformOutputCustomPresetFormatArgs $;

        public Builder() {
            $ = new TransformOutputCustomPresetFormatArgs();
        }

        public Builder(TransformOutputCustomPresetFormatArgs defaults) {
            $ = new TransformOutputCustomPresetFormatArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param jpg A `jpg` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder jpg(@Nullable Output<TransformOutputCustomPresetFormatJpgArgs> jpg) {
            $.jpg = jpg;
            return this;
        }

        /**
         * @param jpg A `jpg` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder jpg(TransformOutputCustomPresetFormatJpgArgs jpg) {
            return jpg(Output.of(jpg));
        }

        /**
         * @param mp4 A `mp4` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder mp4(@Nullable Output<TransformOutputCustomPresetFormatMp4Args> mp4) {
            $.mp4 = mp4;
            return this;
        }

        /**
         * @param mp4 A `mp4` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder mp4(TransformOutputCustomPresetFormatMp4Args mp4) {
            return mp4(Output.of(mp4));
        }

        /**
         * @param png A `png` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder png(@Nullable Output<TransformOutputCustomPresetFormatPngArgs> png) {
            $.png = png;
            return this;
        }

        /**
         * @param png A `png` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder png(TransformOutputCustomPresetFormatPngArgs png) {
            return png(Output.of(png));
        }

        /**
         * @param transportStream A `transport_stream` block as defined below.
         * 
         * &gt; **NOTE:** Each format can only have one type: `jpg`, `mp4`, `png` or `transport_stream`. If you need to apply different type you must create one format for each one.
         * 
         * @return builder
         * 
         */
        public Builder transportStream(@Nullable Output<TransformOutputCustomPresetFormatTransportStreamArgs> transportStream) {
            $.transportStream = transportStream;
            return this;
        }

        /**
         * @param transportStream A `transport_stream` block as defined below.
         * 
         * &gt; **NOTE:** Each format can only have one type: `jpg`, `mp4`, `png` or `transport_stream`. If you need to apply different type you must create one format for each one.
         * 
         * @return builder
         * 
         */
        public Builder transportStream(TransformOutputCustomPresetFormatTransportStreamArgs transportStream) {
            return transportStream(Output.of(transportStream));
        }

        public TransformOutputCustomPresetFormatArgs build() {
            return $;
        }
    }

}
