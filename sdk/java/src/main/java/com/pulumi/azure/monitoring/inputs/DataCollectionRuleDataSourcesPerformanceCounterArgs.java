// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.monitoring.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class DataCollectionRuleDataSourcesPerformanceCounterArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataCollectionRuleDataSourcesPerformanceCounterArgs Empty = new DataCollectionRuleDataSourcesPerformanceCounterArgs();

    /**
     * Specifies a list of specifier names of the performance counters you want to collect. To get a list of performance counters on Windows, run the command `typeperf`. Please see [this document](https://learn.microsoft.com/en-us/azure/azure-monitor/agents/data-sources-performance-counters#configure-performance-counters) for more information.
     * 
     */
    @Import(name="counterSpecifiers", required=true)
    private Output<List<String>> counterSpecifiers;

    /**
     * @return Specifies a list of specifier names of the performance counters you want to collect. To get a list of performance counters on Windows, run the command `typeperf`. Please see [this document](https://learn.microsoft.com/en-us/azure/azure-monitor/agents/data-sources-performance-counters#configure-performance-counters) for more information.
     * 
     */
    public Output<List<String>> counterSpecifiers() {
        return this.counterSpecifiers;
    }

    /**
     * The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The number of seconds between consecutive counter measurements (samples). The value should be integer between `1` and `300` inclusive. `sampling_frequency_in_seconds` must be equal to `60` seconds for counters collected with `Microsoft-InsightsMetrics` stream.
     * 
     */
    @Import(name="samplingFrequencyInSeconds", required=true)
    private Output<Integer> samplingFrequencyInSeconds;

    /**
     * @return The number of seconds between consecutive counter measurements (samples). The value should be integer between `1` and `300` inclusive. `sampling_frequency_in_seconds` must be equal to `60` seconds for counters collected with `Microsoft-InsightsMetrics` stream.
     * 
     */
    public Output<Integer> samplingFrequencyInSeconds() {
        return this.samplingFrequencyInSeconds;
    }

    /**
     * Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible values include but not limited to `Microsoft-InsightsMetrics`,and `Microsoft-Perf`.
     * 
     */
    @Import(name="streams", required=true)
    private Output<List<String>> streams;

    /**
     * @return Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible values include but not limited to `Microsoft-InsightsMetrics`,and `Microsoft-Perf`.
     * 
     */
    public Output<List<String>> streams() {
        return this.streams;
    }

    private DataCollectionRuleDataSourcesPerformanceCounterArgs() {}

    private DataCollectionRuleDataSourcesPerformanceCounterArgs(DataCollectionRuleDataSourcesPerformanceCounterArgs $) {
        this.counterSpecifiers = $.counterSpecifiers;
        this.name = $.name;
        this.samplingFrequencyInSeconds = $.samplingFrequencyInSeconds;
        this.streams = $.streams;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataCollectionRuleDataSourcesPerformanceCounterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataCollectionRuleDataSourcesPerformanceCounterArgs $;

        public Builder() {
            $ = new DataCollectionRuleDataSourcesPerformanceCounterArgs();
        }

        public Builder(DataCollectionRuleDataSourcesPerformanceCounterArgs defaults) {
            $ = new DataCollectionRuleDataSourcesPerformanceCounterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param counterSpecifiers Specifies a list of specifier names of the performance counters you want to collect. To get a list of performance counters on Windows, run the command `typeperf`. Please see [this document](https://learn.microsoft.com/en-us/azure/azure-monitor/agents/data-sources-performance-counters#configure-performance-counters) for more information.
         * 
         * @return builder
         * 
         */
        public Builder counterSpecifiers(Output<List<String>> counterSpecifiers) {
            $.counterSpecifiers = counterSpecifiers;
            return this;
        }

        /**
         * @param counterSpecifiers Specifies a list of specifier names of the performance counters you want to collect. To get a list of performance counters on Windows, run the command `typeperf`. Please see [this document](https://learn.microsoft.com/en-us/azure/azure-monitor/agents/data-sources-performance-counters#configure-performance-counters) for more information.
         * 
         * @return builder
         * 
         */
        public Builder counterSpecifiers(List<String> counterSpecifiers) {
            return counterSpecifiers(Output.of(counterSpecifiers));
        }

        /**
         * @param counterSpecifiers Specifies a list of specifier names of the performance counters you want to collect. To get a list of performance counters on Windows, run the command `typeperf`. Please see [this document](https://learn.microsoft.com/en-us/azure/azure-monitor/agents/data-sources-performance-counters#configure-performance-counters) for more information.
         * 
         * @return builder
         * 
         */
        public Builder counterSpecifiers(String... counterSpecifiers) {
            return counterSpecifiers(List.of(counterSpecifiers));
        }

        /**
         * @param name The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param samplingFrequencyInSeconds The number of seconds between consecutive counter measurements (samples). The value should be integer between `1` and `300` inclusive. `sampling_frequency_in_seconds` must be equal to `60` seconds for counters collected with `Microsoft-InsightsMetrics` stream.
         * 
         * @return builder
         * 
         */
        public Builder samplingFrequencyInSeconds(Output<Integer> samplingFrequencyInSeconds) {
            $.samplingFrequencyInSeconds = samplingFrequencyInSeconds;
            return this;
        }

        /**
         * @param samplingFrequencyInSeconds The number of seconds between consecutive counter measurements (samples). The value should be integer between `1` and `300` inclusive. `sampling_frequency_in_seconds` must be equal to `60` seconds for counters collected with `Microsoft-InsightsMetrics` stream.
         * 
         * @return builder
         * 
         */
        public Builder samplingFrequencyInSeconds(Integer samplingFrequencyInSeconds) {
            return samplingFrequencyInSeconds(Output.of(samplingFrequencyInSeconds));
        }

        /**
         * @param streams Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible values include but not limited to `Microsoft-InsightsMetrics`,and `Microsoft-Perf`.
         * 
         * @return builder
         * 
         */
        public Builder streams(Output<List<String>> streams) {
            $.streams = streams;
            return this;
        }

        /**
         * @param streams Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible values include but not limited to `Microsoft-InsightsMetrics`,and `Microsoft-Perf`.
         * 
         * @return builder
         * 
         */
        public Builder streams(List<String> streams) {
            return streams(Output.of(streams));
        }

        /**
         * @param streams Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible values include but not limited to `Microsoft-InsightsMetrics`,and `Microsoft-Perf`.
         * 
         * @return builder
         * 
         */
        public Builder streams(String... streams) {
            return streams(List.of(streams));
        }

        public DataCollectionRuleDataSourcesPerformanceCounterArgs build() {
            if ($.counterSpecifiers == null) {
                throw new MissingRequiredPropertyException("DataCollectionRuleDataSourcesPerformanceCounterArgs", "counterSpecifiers");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("DataCollectionRuleDataSourcesPerformanceCounterArgs", "name");
            }
            if ($.samplingFrequencyInSeconds == null) {
                throw new MissingRequiredPropertyException("DataCollectionRuleDataSourcesPerformanceCounterArgs", "samplingFrequencyInSeconds");
            }
            if ($.streams == null) {
                throw new MissingRequiredPropertyException("DataCollectionRuleDataSourcesPerformanceCounterArgs", "streams");
            }
            return $;
        }
    }

}
