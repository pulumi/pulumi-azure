// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.lb;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final RuleArgs Empty = new RuleArgs();

    /**
     * A list of reference to a Backend Address Pool over which this Load Balancing Rule operates.
     * 
     * &gt; **Note:** In most cases users can only set one Backend Address Pool ID in the `backendAddressPoolIds`. Especially, when the sku of the LB is `Gateway`, users can set up to two IDs in the `backendAddressPoolIds`.
     * 
     */
    @Import(name="backendAddressPoolIds")
    private @Nullable Output<List<String>> backendAddressPoolIds;

    /**
     * @return A list of reference to a Backend Address Pool over which this Load Balancing Rule operates.
     * 
     * &gt; **Note:** In most cases users can only set one Backend Address Pool ID in the `backendAddressPoolIds`. Especially, when the sku of the LB is `Gateway`, users can set up to two IDs in the `backendAddressPoolIds`.
     * 
     */
    public Optional<Output<List<String>>> backendAddressPoolIds() {
        return Optional.ofNullable(this.backendAddressPoolIds);
    }

    /**
     * The port used for internal connections on the endpoint. Possible values range between 0 and 65535, inclusive. A port of `0` means &#34;Any Port&#34;.
     * 
     */
    @Import(name="backendPort", required=true)
    private Output<Integer> backendPort;

    /**
     * @return The port used for internal connections on the endpoint. Possible values range between 0 and 65535, inclusive. A port of `0` means &#34;Any Port&#34;.
     * 
     */
    public Output<Integer> backendPort() {
        return this.backendPort;
    }

    /**
     * Is snat enabled for this Load Balancer Rule? Default `false`.
     * 
     */
    @Import(name="disableOutboundSnat")
    private @Nullable Output<Boolean> disableOutboundSnat;

    /**
     * @return Is snat enabled for this Load Balancer Rule? Default `false`.
     * 
     */
    public Optional<Output<Boolean>> disableOutboundSnat() {
        return Optional.ofNullable(this.disableOutboundSnat);
    }

    /**
     * @deprecated
     * This field is deprecated in favour of `floatingIpEnabled` and will be removed in version 5.0 of the provider.
     * 
     */
    @Deprecated /* This field is deprecated in favour of `floatingIpEnabled` and will be removed in version 5.0 of the provider. */
    @Import(name="enableFloatingIp")
    private @Nullable Output<Boolean> enableFloatingIp;

    /**
     * @deprecated
     * This field is deprecated in favour of `floatingIpEnabled` and will be removed in version 5.0 of the provider.
     * 
     */
    @Deprecated /* This field is deprecated in favour of `floatingIpEnabled` and will be removed in version 5.0 of the provider. */
    public Optional<Output<Boolean>> enableFloatingIp() {
        return Optional.ofNullable(this.enableFloatingIp);
    }

    /**
     * @deprecated
     * This field is deprecated in favour of `tcpResetEnabled` and will be removed in version 5.0 of the provider.
     * 
     */
    @Deprecated /* This field is deprecated in favour of `tcpResetEnabled` and will be removed in version 5.0 of the provider. */
    @Import(name="enableTcpReset")
    private @Nullable Output<Boolean> enableTcpReset;

    /**
     * @deprecated
     * This field is deprecated in favour of `tcpResetEnabled` and will be removed in version 5.0 of the provider.
     * 
     */
    @Deprecated /* This field is deprecated in favour of `tcpResetEnabled` and will be removed in version 5.0 of the provider. */
    public Optional<Output<Boolean>> enableTcpReset() {
        return Optional.ofNullable(this.enableTcpReset);
    }

    /**
     * Are the Floating IPs enabled for this Load Balancer Rule? A &#34;floating&#34; IP is reassigned to a secondary server in case the primary server fails. Required to configure a SQL AlwaysOn Availability Group. Defaults to `false`.
     * 
     */
    @Import(name="floatingIpEnabled")
    private @Nullable Output<Boolean> floatingIpEnabled;

    /**
     * @return Are the Floating IPs enabled for this Load Balancer Rule? A &#34;floating&#34; IP is reassigned to a secondary server in case the primary server fails. Required to configure a SQL AlwaysOn Availability Group. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> floatingIpEnabled() {
        return Optional.ofNullable(this.floatingIpEnabled);
    }

    /**
     * The name of the frontend IP configuration to which the rule is associated.
     * 
     */
    @Import(name="frontendIpConfigurationName", required=true)
    private Output<String> frontendIpConfigurationName;

    /**
     * @return The name of the frontend IP configuration to which the rule is associated.
     * 
     */
    public Output<String> frontendIpConfigurationName() {
        return this.frontendIpConfigurationName;
    }

    /**
     * The port for the external endpoint. Port numbers for each Rule must be unique within the Load Balancer. Possible values range between 0 and 65534, inclusive. A port of `0` means &#34;Any Port&#34;.
     * 
     */
    @Import(name="frontendPort", required=true)
    private Output<Integer> frontendPort;

    /**
     * @return The port for the external endpoint. Port numbers for each Rule must be unique within the Load Balancer. Possible values range between 0 and 65534, inclusive. A port of `0` means &#34;Any Port&#34;.
     * 
     */
    public Output<Integer> frontendPort() {
        return this.frontendPort;
    }

    /**
     * Specifies the idle timeout in minutes for TCP connections. Valid values are between `4` and `100` minutes. Defaults to `4` minutes.
     * 
     */
    @Import(name="idleTimeoutInMinutes")
    private @Nullable Output<Integer> idleTimeoutInMinutes;

    /**
     * @return Specifies the idle timeout in minutes for TCP connections. Valid values are between `4` and `100` minutes. Defaults to `4` minutes.
     * 
     */
    public Optional<Output<Integer>> idleTimeoutInMinutes() {
        return Optional.ofNullable(this.idleTimeoutInMinutes);
    }

    /**
     * Specifies the load balancing distribution type to be used by the Load Balancer. Possible values are: `Default` – The load balancer is configured to use a 5 tuple hash to map traffic to available servers. `SourceIP` – The load balancer is configured to use a 2 tuple hash to map traffic to available servers. `SourceIPProtocol` – The load balancer is configured to use a 3 tuple hash to map traffic to available servers. Also known as Session Persistence, where in the Azure portal the options are called `None`, `Client IP` and `Client IP and Protocol` respectively. Defaults to `Default`.
     * 
     */
    @Import(name="loadDistribution")
    private @Nullable Output<String> loadDistribution;

    /**
     * @return Specifies the load balancing distribution type to be used by the Load Balancer. Possible values are: `Default` – The load balancer is configured to use a 5 tuple hash to map traffic to available servers. `SourceIP` – The load balancer is configured to use a 2 tuple hash to map traffic to available servers. `SourceIPProtocol` – The load balancer is configured to use a 3 tuple hash to map traffic to available servers. Also known as Session Persistence, where in the Azure portal the options are called `None`, `Client IP` and `Client IP and Protocol` respectively. Defaults to `Default`.
     * 
     */
    public Optional<Output<String>> loadDistribution() {
        return Optional.ofNullable(this.loadDistribution);
    }

    /**
     * The ID of the Load Balancer in which to create the Rule. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="loadbalancerId", required=true)
    private Output<String> loadbalancerId;

    /**
     * @return The ID of the Load Balancer in which to create the Rule. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> loadbalancerId() {
        return this.loadbalancerId;
    }

    /**
     * Specifies the name of the LB Rule. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the name of the LB Rule. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A reference to a Probe used by this Load Balancing Rule.
     * 
     */
    @Import(name="probeId")
    private @Nullable Output<String> probeId;

    /**
     * @return A reference to a Probe used by this Load Balancing Rule.
     * 
     */
    public Optional<Output<String>> probeId() {
        return Optional.ofNullable(this.probeId);
    }

    /**
     * The transport protocol for the external endpoint. Possible values are `Tcp`, `Udp` or `All`.
     * 
     */
    @Import(name="protocol", required=true)
    private Output<String> protocol;

    /**
     * @return The transport protocol for the external endpoint. Possible values are `Tcp`, `Udp` or `All`.
     * 
     */
    public Output<String> protocol() {
        return this.protocol;
    }

    /**
     * Is TCP Reset enabled for this Load Balancer Rule?
     * 
     */
    @Import(name="tcpResetEnabled")
    private @Nullable Output<Boolean> tcpResetEnabled;

    /**
     * @return Is TCP Reset enabled for this Load Balancer Rule?
     * 
     */
    public Optional<Output<Boolean>> tcpResetEnabled() {
        return Optional.ofNullable(this.tcpResetEnabled);
    }

    private RuleArgs() {}

    private RuleArgs(RuleArgs $) {
        this.backendAddressPoolIds = $.backendAddressPoolIds;
        this.backendPort = $.backendPort;
        this.disableOutboundSnat = $.disableOutboundSnat;
        this.enableFloatingIp = $.enableFloatingIp;
        this.enableTcpReset = $.enableTcpReset;
        this.floatingIpEnabled = $.floatingIpEnabled;
        this.frontendIpConfigurationName = $.frontendIpConfigurationName;
        this.frontendPort = $.frontendPort;
        this.idleTimeoutInMinutes = $.idleTimeoutInMinutes;
        this.loadDistribution = $.loadDistribution;
        this.loadbalancerId = $.loadbalancerId;
        this.name = $.name;
        this.probeId = $.probeId;
        this.protocol = $.protocol;
        this.tcpResetEnabled = $.tcpResetEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RuleArgs $;

        public Builder() {
            $ = new RuleArgs();
        }

        public Builder(RuleArgs defaults) {
            $ = new RuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backendAddressPoolIds A list of reference to a Backend Address Pool over which this Load Balancing Rule operates.
         * 
         * &gt; **Note:** In most cases users can only set one Backend Address Pool ID in the `backendAddressPoolIds`. Especially, when the sku of the LB is `Gateway`, users can set up to two IDs in the `backendAddressPoolIds`.
         * 
         * @return builder
         * 
         */
        public Builder backendAddressPoolIds(@Nullable Output<List<String>> backendAddressPoolIds) {
            $.backendAddressPoolIds = backendAddressPoolIds;
            return this;
        }

        /**
         * @param backendAddressPoolIds A list of reference to a Backend Address Pool over which this Load Balancing Rule operates.
         * 
         * &gt; **Note:** In most cases users can only set one Backend Address Pool ID in the `backendAddressPoolIds`. Especially, when the sku of the LB is `Gateway`, users can set up to two IDs in the `backendAddressPoolIds`.
         * 
         * @return builder
         * 
         */
        public Builder backendAddressPoolIds(List<String> backendAddressPoolIds) {
            return backendAddressPoolIds(Output.of(backendAddressPoolIds));
        }

        /**
         * @param backendAddressPoolIds A list of reference to a Backend Address Pool over which this Load Balancing Rule operates.
         * 
         * &gt; **Note:** In most cases users can only set one Backend Address Pool ID in the `backendAddressPoolIds`. Especially, when the sku of the LB is `Gateway`, users can set up to two IDs in the `backendAddressPoolIds`.
         * 
         * @return builder
         * 
         */
        public Builder backendAddressPoolIds(String... backendAddressPoolIds) {
            return backendAddressPoolIds(List.of(backendAddressPoolIds));
        }

        /**
         * @param backendPort The port used for internal connections on the endpoint. Possible values range between 0 and 65535, inclusive. A port of `0` means &#34;Any Port&#34;.
         * 
         * @return builder
         * 
         */
        public Builder backendPort(Output<Integer> backendPort) {
            $.backendPort = backendPort;
            return this;
        }

        /**
         * @param backendPort The port used for internal connections on the endpoint. Possible values range between 0 and 65535, inclusive. A port of `0` means &#34;Any Port&#34;.
         * 
         * @return builder
         * 
         */
        public Builder backendPort(Integer backendPort) {
            return backendPort(Output.of(backendPort));
        }

        /**
         * @param disableOutboundSnat Is snat enabled for this Load Balancer Rule? Default `false`.
         * 
         * @return builder
         * 
         */
        public Builder disableOutboundSnat(@Nullable Output<Boolean> disableOutboundSnat) {
            $.disableOutboundSnat = disableOutboundSnat;
            return this;
        }

        /**
         * @param disableOutboundSnat Is snat enabled for this Load Balancer Rule? Default `false`.
         * 
         * @return builder
         * 
         */
        public Builder disableOutboundSnat(Boolean disableOutboundSnat) {
            return disableOutboundSnat(Output.of(disableOutboundSnat));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * This field is deprecated in favour of `floatingIpEnabled` and will be removed in version 5.0 of the provider.
         * 
         */
        @Deprecated /* This field is deprecated in favour of `floatingIpEnabled` and will be removed in version 5.0 of the provider. */
        public Builder enableFloatingIp(@Nullable Output<Boolean> enableFloatingIp) {
            $.enableFloatingIp = enableFloatingIp;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * This field is deprecated in favour of `floatingIpEnabled` and will be removed in version 5.0 of the provider.
         * 
         */
        @Deprecated /* This field is deprecated in favour of `floatingIpEnabled` and will be removed in version 5.0 of the provider. */
        public Builder enableFloatingIp(Boolean enableFloatingIp) {
            return enableFloatingIp(Output.of(enableFloatingIp));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * This field is deprecated in favour of `tcpResetEnabled` and will be removed in version 5.0 of the provider.
         * 
         */
        @Deprecated /* This field is deprecated in favour of `tcpResetEnabled` and will be removed in version 5.0 of the provider. */
        public Builder enableTcpReset(@Nullable Output<Boolean> enableTcpReset) {
            $.enableTcpReset = enableTcpReset;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * This field is deprecated in favour of `tcpResetEnabled` and will be removed in version 5.0 of the provider.
         * 
         */
        @Deprecated /* This field is deprecated in favour of `tcpResetEnabled` and will be removed in version 5.0 of the provider. */
        public Builder enableTcpReset(Boolean enableTcpReset) {
            return enableTcpReset(Output.of(enableTcpReset));
        }

        /**
         * @param floatingIpEnabled Are the Floating IPs enabled for this Load Balancer Rule? A &#34;floating&#34; IP is reassigned to a secondary server in case the primary server fails. Required to configure a SQL AlwaysOn Availability Group. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder floatingIpEnabled(@Nullable Output<Boolean> floatingIpEnabled) {
            $.floatingIpEnabled = floatingIpEnabled;
            return this;
        }

        /**
         * @param floatingIpEnabled Are the Floating IPs enabled for this Load Balancer Rule? A &#34;floating&#34; IP is reassigned to a secondary server in case the primary server fails. Required to configure a SQL AlwaysOn Availability Group. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder floatingIpEnabled(Boolean floatingIpEnabled) {
            return floatingIpEnabled(Output.of(floatingIpEnabled));
        }

        /**
         * @param frontendIpConfigurationName The name of the frontend IP configuration to which the rule is associated.
         * 
         * @return builder
         * 
         */
        public Builder frontendIpConfigurationName(Output<String> frontendIpConfigurationName) {
            $.frontendIpConfigurationName = frontendIpConfigurationName;
            return this;
        }

        /**
         * @param frontendIpConfigurationName The name of the frontend IP configuration to which the rule is associated.
         * 
         * @return builder
         * 
         */
        public Builder frontendIpConfigurationName(String frontendIpConfigurationName) {
            return frontendIpConfigurationName(Output.of(frontendIpConfigurationName));
        }

        /**
         * @param frontendPort The port for the external endpoint. Port numbers for each Rule must be unique within the Load Balancer. Possible values range between 0 and 65534, inclusive. A port of `0` means &#34;Any Port&#34;.
         * 
         * @return builder
         * 
         */
        public Builder frontendPort(Output<Integer> frontendPort) {
            $.frontendPort = frontendPort;
            return this;
        }

        /**
         * @param frontendPort The port for the external endpoint. Port numbers for each Rule must be unique within the Load Balancer. Possible values range between 0 and 65534, inclusive. A port of `0` means &#34;Any Port&#34;.
         * 
         * @return builder
         * 
         */
        public Builder frontendPort(Integer frontendPort) {
            return frontendPort(Output.of(frontendPort));
        }

        /**
         * @param idleTimeoutInMinutes Specifies the idle timeout in minutes for TCP connections. Valid values are between `4` and `100` minutes. Defaults to `4` minutes.
         * 
         * @return builder
         * 
         */
        public Builder idleTimeoutInMinutes(@Nullable Output<Integer> idleTimeoutInMinutes) {
            $.idleTimeoutInMinutes = idleTimeoutInMinutes;
            return this;
        }

        /**
         * @param idleTimeoutInMinutes Specifies the idle timeout in minutes for TCP connections. Valid values are between `4` and `100` minutes. Defaults to `4` minutes.
         * 
         * @return builder
         * 
         */
        public Builder idleTimeoutInMinutes(Integer idleTimeoutInMinutes) {
            return idleTimeoutInMinutes(Output.of(idleTimeoutInMinutes));
        }

        /**
         * @param loadDistribution Specifies the load balancing distribution type to be used by the Load Balancer. Possible values are: `Default` – The load balancer is configured to use a 5 tuple hash to map traffic to available servers. `SourceIP` – The load balancer is configured to use a 2 tuple hash to map traffic to available servers. `SourceIPProtocol` – The load balancer is configured to use a 3 tuple hash to map traffic to available servers. Also known as Session Persistence, where in the Azure portal the options are called `None`, `Client IP` and `Client IP and Protocol` respectively. Defaults to `Default`.
         * 
         * @return builder
         * 
         */
        public Builder loadDistribution(@Nullable Output<String> loadDistribution) {
            $.loadDistribution = loadDistribution;
            return this;
        }

        /**
         * @param loadDistribution Specifies the load balancing distribution type to be used by the Load Balancer. Possible values are: `Default` – The load balancer is configured to use a 5 tuple hash to map traffic to available servers. `SourceIP` – The load balancer is configured to use a 2 tuple hash to map traffic to available servers. `SourceIPProtocol` – The load balancer is configured to use a 3 tuple hash to map traffic to available servers. Also known as Session Persistence, where in the Azure portal the options are called `None`, `Client IP` and `Client IP and Protocol` respectively. Defaults to `Default`.
         * 
         * @return builder
         * 
         */
        public Builder loadDistribution(String loadDistribution) {
            return loadDistribution(Output.of(loadDistribution));
        }

        /**
         * @param loadbalancerId The ID of the Load Balancer in which to create the Rule. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder loadbalancerId(Output<String> loadbalancerId) {
            $.loadbalancerId = loadbalancerId;
            return this;
        }

        /**
         * @param loadbalancerId The ID of the Load Balancer in which to create the Rule. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder loadbalancerId(String loadbalancerId) {
            return loadbalancerId(Output.of(loadbalancerId));
        }

        /**
         * @param name Specifies the name of the LB Rule. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of the LB Rule. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param probeId A reference to a Probe used by this Load Balancing Rule.
         * 
         * @return builder
         * 
         */
        public Builder probeId(@Nullable Output<String> probeId) {
            $.probeId = probeId;
            return this;
        }

        /**
         * @param probeId A reference to a Probe used by this Load Balancing Rule.
         * 
         * @return builder
         * 
         */
        public Builder probeId(String probeId) {
            return probeId(Output.of(probeId));
        }

        /**
         * @param protocol The transport protocol for the external endpoint. Possible values are `Tcp`, `Udp` or `All`.
         * 
         * @return builder
         * 
         */
        public Builder protocol(Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol The transport protocol for the external endpoint. Possible values are `Tcp`, `Udp` or `All`.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param tcpResetEnabled Is TCP Reset enabled for this Load Balancer Rule?
         * 
         * @return builder
         * 
         */
        public Builder tcpResetEnabled(@Nullable Output<Boolean> tcpResetEnabled) {
            $.tcpResetEnabled = tcpResetEnabled;
            return this;
        }

        /**
         * @param tcpResetEnabled Is TCP Reset enabled for this Load Balancer Rule?
         * 
         * @return builder
         * 
         */
        public Builder tcpResetEnabled(Boolean tcpResetEnabled) {
            return tcpResetEnabled(Output.of(tcpResetEnabled));
        }

        public RuleArgs build() {
            if ($.backendPort == null) {
                throw new MissingRequiredPropertyException("RuleArgs", "backendPort");
            }
            if ($.frontendIpConfigurationName == null) {
                throw new MissingRequiredPropertyException("RuleArgs", "frontendIpConfigurationName");
            }
            if ($.frontendPort == null) {
                throw new MissingRequiredPropertyException("RuleArgs", "frontendPort");
            }
            if ($.loadbalancerId == null) {
                throw new MissingRequiredPropertyException("RuleArgs", "loadbalancerId");
            }
            if ($.protocol == null) {
                throw new MissingRequiredPropertyException("RuleArgs", "protocol");
            }
            return $;
        }
    }

}
