// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appservice.outputs;

import com.pulumi.azure.appservice.outputs.GetEnvironmentV3ClusterSetting;
import com.pulumi.azure.appservice.outputs.GetEnvironmentV3InboundNetworkDependency;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetEnvironmentV3Result {
    /**
     * @return Are new Private Endpoint Connections allowed.
     * 
     */
    private Boolean allowNewPrivateEndpointConnections;
    /**
     * @return A `cluster_setting` block as defined below.
     * 
     */
    private List<GetEnvironmentV3ClusterSetting> clusterSettings;
    /**
     * @return The number of Dedicated Hosts used by this ASEv3.
     * 
     */
    private Integer dedicatedHostCount;
    /**
     * @return the DNS suffix for this App Service Environment V3.
     * 
     */
    private String dnsSuffix;
    /**
     * @return The external inbound IP addresses of the App Service Environment V3.
     * 
     */
    private List<String> externalInboundIpAddresses;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return An Inbound Network Dependencies block as defined below.
     * 
     */
    private List<GetEnvironmentV3InboundNetworkDependency> inboundNetworkDependencies;
    /**
     * @return The internal inbound IP addresses of the App Service Environment V3.
     * 
     */
    private List<String> internalInboundIpAddresses;
    /**
     * @return The Internal Load Balancing Mode of this ASEv3.
     * 
     */
    private String internalLoadBalancingMode;
    /**
     * @return The number of IP SSL addresses reserved for the App Service Environment V3.
     * 
     */
    private Integer ipSslAddressCount;
    /**
     * @return The list of Outbound IP Addresses of Linux based Apps in this App Service Environment V3.
     * 
     */
    private List<String> linuxOutboundIpAddresses;
    /**
     * @return The location where the App Service Environment exists.
     * 
     */
    private String location;
    /**
     * @return The name of the Cluster Setting.
     * 
     */
    private String name;
    /**
     * @return Pricing tier for the front end instances.
     * 
     */
    private String pricingTier;
    private String resourceGroupName;
    /**
     * @return The ID of the v3 App Service Environment Subnet.
     * 
     */
    private String subnetId;
    /**
     * @return A mapping of tags assigned to the v3 App Service Environment.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return Outbound addresses of Windows based Apps in this App Service Environment V3.
     * 
     */
    private List<String> windowsOutboundIpAddresses;
    private Boolean zoneRedundant;

    private GetEnvironmentV3Result() {}
    /**
     * @return Are new Private Endpoint Connections allowed.
     * 
     */
    public Boolean allowNewPrivateEndpointConnections() {
        return this.allowNewPrivateEndpointConnections;
    }
    /**
     * @return A `cluster_setting` block as defined below.
     * 
     */
    public List<GetEnvironmentV3ClusterSetting> clusterSettings() {
        return this.clusterSettings;
    }
    /**
     * @return The number of Dedicated Hosts used by this ASEv3.
     * 
     */
    public Integer dedicatedHostCount() {
        return this.dedicatedHostCount;
    }
    /**
     * @return the DNS suffix for this App Service Environment V3.
     * 
     */
    public String dnsSuffix() {
        return this.dnsSuffix;
    }
    /**
     * @return The external inbound IP addresses of the App Service Environment V3.
     * 
     */
    public List<String> externalInboundIpAddresses() {
        return this.externalInboundIpAddresses;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return An Inbound Network Dependencies block as defined below.
     * 
     */
    public List<GetEnvironmentV3InboundNetworkDependency> inboundNetworkDependencies() {
        return this.inboundNetworkDependencies;
    }
    /**
     * @return The internal inbound IP addresses of the App Service Environment V3.
     * 
     */
    public List<String> internalInboundIpAddresses() {
        return this.internalInboundIpAddresses;
    }
    /**
     * @return The Internal Load Balancing Mode of this ASEv3.
     * 
     */
    public String internalLoadBalancingMode() {
        return this.internalLoadBalancingMode;
    }
    /**
     * @return The number of IP SSL addresses reserved for the App Service Environment V3.
     * 
     */
    public Integer ipSslAddressCount() {
        return this.ipSslAddressCount;
    }
    /**
     * @return The list of Outbound IP Addresses of Linux based Apps in this App Service Environment V3.
     * 
     */
    public List<String> linuxOutboundIpAddresses() {
        return this.linuxOutboundIpAddresses;
    }
    /**
     * @return The location where the App Service Environment exists.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return The name of the Cluster Setting.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Pricing tier for the front end instances.
     * 
     */
    public String pricingTier() {
        return this.pricingTier;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return The ID of the v3 App Service Environment Subnet.
     * 
     */
    public String subnetId() {
        return this.subnetId;
    }
    /**
     * @return A mapping of tags assigned to the v3 App Service Environment.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return Outbound addresses of Windows based Apps in this App Service Environment V3.
     * 
     */
    public List<String> windowsOutboundIpAddresses() {
        return this.windowsOutboundIpAddresses;
    }
    public Boolean zoneRedundant() {
        return this.zoneRedundant;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEnvironmentV3Result defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean allowNewPrivateEndpointConnections;
        private List<GetEnvironmentV3ClusterSetting> clusterSettings;
        private Integer dedicatedHostCount;
        private String dnsSuffix;
        private List<String> externalInboundIpAddresses;
        private String id;
        private List<GetEnvironmentV3InboundNetworkDependency> inboundNetworkDependencies;
        private List<String> internalInboundIpAddresses;
        private String internalLoadBalancingMode;
        private Integer ipSslAddressCount;
        private List<String> linuxOutboundIpAddresses;
        private String location;
        private String name;
        private String pricingTier;
        private String resourceGroupName;
        private String subnetId;
        private Map<String,String> tags;
        private List<String> windowsOutboundIpAddresses;
        private Boolean zoneRedundant;
        public Builder() {}
        public Builder(GetEnvironmentV3Result defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowNewPrivateEndpointConnections = defaults.allowNewPrivateEndpointConnections;
    	      this.clusterSettings = defaults.clusterSettings;
    	      this.dedicatedHostCount = defaults.dedicatedHostCount;
    	      this.dnsSuffix = defaults.dnsSuffix;
    	      this.externalInboundIpAddresses = defaults.externalInboundIpAddresses;
    	      this.id = defaults.id;
    	      this.inboundNetworkDependencies = defaults.inboundNetworkDependencies;
    	      this.internalInboundIpAddresses = defaults.internalInboundIpAddresses;
    	      this.internalLoadBalancingMode = defaults.internalLoadBalancingMode;
    	      this.ipSslAddressCount = defaults.ipSslAddressCount;
    	      this.linuxOutboundIpAddresses = defaults.linuxOutboundIpAddresses;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.pricingTier = defaults.pricingTier;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.subnetId = defaults.subnetId;
    	      this.tags = defaults.tags;
    	      this.windowsOutboundIpAddresses = defaults.windowsOutboundIpAddresses;
    	      this.zoneRedundant = defaults.zoneRedundant;
        }

        @CustomType.Setter
        public Builder allowNewPrivateEndpointConnections(Boolean allowNewPrivateEndpointConnections) {
            if (allowNewPrivateEndpointConnections == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentV3Result", "allowNewPrivateEndpointConnections");
            }
            this.allowNewPrivateEndpointConnections = allowNewPrivateEndpointConnections;
            return this;
        }
        @CustomType.Setter
        public Builder clusterSettings(List<GetEnvironmentV3ClusterSetting> clusterSettings) {
            if (clusterSettings == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentV3Result", "clusterSettings");
            }
            this.clusterSettings = clusterSettings;
            return this;
        }
        public Builder clusterSettings(GetEnvironmentV3ClusterSetting... clusterSettings) {
            return clusterSettings(List.of(clusterSettings));
        }
        @CustomType.Setter
        public Builder dedicatedHostCount(Integer dedicatedHostCount) {
            if (dedicatedHostCount == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentV3Result", "dedicatedHostCount");
            }
            this.dedicatedHostCount = dedicatedHostCount;
            return this;
        }
        @CustomType.Setter
        public Builder dnsSuffix(String dnsSuffix) {
            if (dnsSuffix == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentV3Result", "dnsSuffix");
            }
            this.dnsSuffix = dnsSuffix;
            return this;
        }
        @CustomType.Setter
        public Builder externalInboundIpAddresses(List<String> externalInboundIpAddresses) {
            if (externalInboundIpAddresses == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentV3Result", "externalInboundIpAddresses");
            }
            this.externalInboundIpAddresses = externalInboundIpAddresses;
            return this;
        }
        public Builder externalInboundIpAddresses(String... externalInboundIpAddresses) {
            return externalInboundIpAddresses(List.of(externalInboundIpAddresses));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentV3Result", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder inboundNetworkDependencies(List<GetEnvironmentV3InboundNetworkDependency> inboundNetworkDependencies) {
            if (inboundNetworkDependencies == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentV3Result", "inboundNetworkDependencies");
            }
            this.inboundNetworkDependencies = inboundNetworkDependencies;
            return this;
        }
        public Builder inboundNetworkDependencies(GetEnvironmentV3InboundNetworkDependency... inboundNetworkDependencies) {
            return inboundNetworkDependencies(List.of(inboundNetworkDependencies));
        }
        @CustomType.Setter
        public Builder internalInboundIpAddresses(List<String> internalInboundIpAddresses) {
            if (internalInboundIpAddresses == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentV3Result", "internalInboundIpAddresses");
            }
            this.internalInboundIpAddresses = internalInboundIpAddresses;
            return this;
        }
        public Builder internalInboundIpAddresses(String... internalInboundIpAddresses) {
            return internalInboundIpAddresses(List.of(internalInboundIpAddresses));
        }
        @CustomType.Setter
        public Builder internalLoadBalancingMode(String internalLoadBalancingMode) {
            if (internalLoadBalancingMode == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentV3Result", "internalLoadBalancingMode");
            }
            this.internalLoadBalancingMode = internalLoadBalancingMode;
            return this;
        }
        @CustomType.Setter
        public Builder ipSslAddressCount(Integer ipSslAddressCount) {
            if (ipSslAddressCount == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentV3Result", "ipSslAddressCount");
            }
            this.ipSslAddressCount = ipSslAddressCount;
            return this;
        }
        @CustomType.Setter
        public Builder linuxOutboundIpAddresses(List<String> linuxOutboundIpAddresses) {
            if (linuxOutboundIpAddresses == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentV3Result", "linuxOutboundIpAddresses");
            }
            this.linuxOutboundIpAddresses = linuxOutboundIpAddresses;
            return this;
        }
        public Builder linuxOutboundIpAddresses(String... linuxOutboundIpAddresses) {
            return linuxOutboundIpAddresses(List.of(linuxOutboundIpAddresses));
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentV3Result", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentV3Result", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder pricingTier(String pricingTier) {
            if (pricingTier == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentV3Result", "pricingTier");
            }
            this.pricingTier = pricingTier;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            if (resourceGroupName == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentV3Result", "resourceGroupName");
            }
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder subnetId(String subnetId) {
            if (subnetId == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentV3Result", "subnetId");
            }
            this.subnetId = subnetId;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentV3Result", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder windowsOutboundIpAddresses(List<String> windowsOutboundIpAddresses) {
            if (windowsOutboundIpAddresses == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentV3Result", "windowsOutboundIpAddresses");
            }
            this.windowsOutboundIpAddresses = windowsOutboundIpAddresses;
            return this;
        }
        public Builder windowsOutboundIpAddresses(String... windowsOutboundIpAddresses) {
            return windowsOutboundIpAddresses(List.of(windowsOutboundIpAddresses));
        }
        @CustomType.Setter
        public Builder zoneRedundant(Boolean zoneRedundant) {
            if (zoneRedundant == null) {
              throw new MissingRequiredPropertyException("GetEnvironmentV3Result", "zoneRedundant");
            }
            this.zoneRedundant = zoneRedundant;
            return this;
        }
        public GetEnvironmentV3Result build() {
            final var _resultValue = new GetEnvironmentV3Result();
            _resultValue.allowNewPrivateEndpointConnections = allowNewPrivateEndpointConnections;
            _resultValue.clusterSettings = clusterSettings;
            _resultValue.dedicatedHostCount = dedicatedHostCount;
            _resultValue.dnsSuffix = dnsSuffix;
            _resultValue.externalInboundIpAddresses = externalInboundIpAddresses;
            _resultValue.id = id;
            _resultValue.inboundNetworkDependencies = inboundNetworkDependencies;
            _resultValue.internalInboundIpAddresses = internalInboundIpAddresses;
            _resultValue.internalLoadBalancingMode = internalLoadBalancingMode;
            _resultValue.ipSslAddressCount = ipSslAddressCount;
            _resultValue.linuxOutboundIpAddresses = linuxOutboundIpAddresses;
            _resultValue.location = location;
            _resultValue.name = name;
            _resultValue.pricingTier = pricingTier;
            _resultValue.resourceGroupName = resourceGroupName;
            _resultValue.subnetId = subnetId;
            _resultValue.tags = tags;
            _resultValue.windowsOutboundIpAddresses = windowsOutboundIpAddresses;
            _resultValue.zoneRedundant = zoneRedundant;
            return _resultValue;
        }
    }
}
