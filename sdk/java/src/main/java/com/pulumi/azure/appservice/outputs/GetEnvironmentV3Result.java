// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appservice.outputs;

import com.pulumi.azure.appservice.outputs.GetEnvironmentV3ClusterSetting;
import com.pulumi.azure.appservice.outputs.GetEnvironmentV3InboundNetworkDependency;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetEnvironmentV3Result {
    /**
     * @return Are new Private Endpoint Connections allowed.
     * 
     */
    private final Boolean allowNewPrivateEndpointConnections;
    /**
     * @return A `cluster_setting` block as defined below.
     * 
     */
    private final List<GetEnvironmentV3ClusterSetting> clusterSettings;
    /**
     * @return The number of Dedicated Hosts used by this ASEv3.
     * 
     */
    private final Integer dedicatedHostCount;
    /**
     * @return the DNS suffix for this App Service Environment V3.
     * 
     */
    private final String dnsSuffix;
    /**
     * @return The external inbound IP addresses of the App Service Environment V3.
     * 
     */
    private final List<String> externalInboundIpAddresses;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * @return An Inbound Network Dependencies block as defined below.
     * 
     */
    private final List<GetEnvironmentV3InboundNetworkDependency> inboundNetworkDependencies;
    /**
     * @return The internal inbound IP addresses of the App Service Environment V3.
     * 
     */
    private final List<String> internalInboundIpAddresses;
    /**
     * @return The Internal Load Balancing Mode of this ASEv3.
     * 
     */
    private final String internalLoadBalancingMode;
    /**
     * @return The number of IP SSL addresses reserved for the App Service Environment V3.
     * 
     */
    private final Integer ipSslAddressCount;
    /**
     * @return The list of Outbound IP Addresses of Linux based Apps in this App Service Environment V3.
     * 
     */
    private final List<String> linuxOutboundIpAddresses;
    /**
     * @return The location where the App Service Environment exists.
     * 
     */
    private final String location;
    /**
     * @return The name of the Cluster Setting.
     * 
     */
    private final String name;
    /**
     * @return Pricing tier for the front end instances.
     * 
     */
    private final String pricingTier;
    private final String resourceGroupName;
    /**
     * @return The ID of the v3 App Service Environment Subnet.
     * 
     */
    private final String subnetId;
    /**
     * @return A mapping of tags assigned to the v3 App Service Environment.
     * 
     */
    private final Map<String,String> tags;
    /**
     * @return Outbound addresses of Windows based Apps in this App Service Environment V3.
     * 
     */
    private final List<String> windowsOutboundIpAddresses;
    private final Boolean zoneRedundant;

    @CustomType.Constructor
    private GetEnvironmentV3Result(
        @CustomType.Parameter("allowNewPrivateEndpointConnections") Boolean allowNewPrivateEndpointConnections,
        @CustomType.Parameter("clusterSettings") List<GetEnvironmentV3ClusterSetting> clusterSettings,
        @CustomType.Parameter("dedicatedHostCount") Integer dedicatedHostCount,
        @CustomType.Parameter("dnsSuffix") String dnsSuffix,
        @CustomType.Parameter("externalInboundIpAddresses") List<String> externalInboundIpAddresses,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("inboundNetworkDependencies") List<GetEnvironmentV3InboundNetworkDependency> inboundNetworkDependencies,
        @CustomType.Parameter("internalInboundIpAddresses") List<String> internalInboundIpAddresses,
        @CustomType.Parameter("internalLoadBalancingMode") String internalLoadBalancingMode,
        @CustomType.Parameter("ipSslAddressCount") Integer ipSslAddressCount,
        @CustomType.Parameter("linuxOutboundIpAddresses") List<String> linuxOutboundIpAddresses,
        @CustomType.Parameter("location") String location,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("pricingTier") String pricingTier,
        @CustomType.Parameter("resourceGroupName") String resourceGroupName,
        @CustomType.Parameter("subnetId") String subnetId,
        @CustomType.Parameter("tags") Map<String,String> tags,
        @CustomType.Parameter("windowsOutboundIpAddresses") List<String> windowsOutboundIpAddresses,
        @CustomType.Parameter("zoneRedundant") Boolean zoneRedundant) {
        this.allowNewPrivateEndpointConnections = allowNewPrivateEndpointConnections;
        this.clusterSettings = clusterSettings;
        this.dedicatedHostCount = dedicatedHostCount;
        this.dnsSuffix = dnsSuffix;
        this.externalInboundIpAddresses = externalInboundIpAddresses;
        this.id = id;
        this.inboundNetworkDependencies = inboundNetworkDependencies;
        this.internalInboundIpAddresses = internalInboundIpAddresses;
        this.internalLoadBalancingMode = internalLoadBalancingMode;
        this.ipSslAddressCount = ipSslAddressCount;
        this.linuxOutboundIpAddresses = linuxOutboundIpAddresses;
        this.location = location;
        this.name = name;
        this.pricingTier = pricingTier;
        this.resourceGroupName = resourceGroupName;
        this.subnetId = subnetId;
        this.tags = tags;
        this.windowsOutboundIpAddresses = windowsOutboundIpAddresses;
        this.zoneRedundant = zoneRedundant;
    }

    /**
     * @return Are new Private Endpoint Connections allowed.
     * 
     */
    public Boolean allowNewPrivateEndpointConnections() {
        return this.allowNewPrivateEndpointConnections;
    }
    /**
     * @return A `cluster_setting` block as defined below.
     * 
     */
    public List<GetEnvironmentV3ClusterSetting> clusterSettings() {
        return this.clusterSettings;
    }
    /**
     * @return The number of Dedicated Hosts used by this ASEv3.
     * 
     */
    public Integer dedicatedHostCount() {
        return this.dedicatedHostCount;
    }
    /**
     * @return the DNS suffix for this App Service Environment V3.
     * 
     */
    public String dnsSuffix() {
        return this.dnsSuffix;
    }
    /**
     * @return The external inbound IP addresses of the App Service Environment V3.
     * 
     */
    public List<String> externalInboundIpAddresses() {
        return this.externalInboundIpAddresses;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return An Inbound Network Dependencies block as defined below.
     * 
     */
    public List<GetEnvironmentV3InboundNetworkDependency> inboundNetworkDependencies() {
        return this.inboundNetworkDependencies;
    }
    /**
     * @return The internal inbound IP addresses of the App Service Environment V3.
     * 
     */
    public List<String> internalInboundIpAddresses() {
        return this.internalInboundIpAddresses;
    }
    /**
     * @return The Internal Load Balancing Mode of this ASEv3.
     * 
     */
    public String internalLoadBalancingMode() {
        return this.internalLoadBalancingMode;
    }
    /**
     * @return The number of IP SSL addresses reserved for the App Service Environment V3.
     * 
     */
    public Integer ipSslAddressCount() {
        return this.ipSslAddressCount;
    }
    /**
     * @return The list of Outbound IP Addresses of Linux based Apps in this App Service Environment V3.
     * 
     */
    public List<String> linuxOutboundIpAddresses() {
        return this.linuxOutboundIpAddresses;
    }
    /**
     * @return The location where the App Service Environment exists.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return The name of the Cluster Setting.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Pricing tier for the front end instances.
     * 
     */
    public String pricingTier() {
        return this.pricingTier;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return The ID of the v3 App Service Environment Subnet.
     * 
     */
    public String subnetId() {
        return this.subnetId;
    }
    /**
     * @return A mapping of tags assigned to the v3 App Service Environment.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return Outbound addresses of Windows based Apps in this App Service Environment V3.
     * 
     */
    public List<String> windowsOutboundIpAddresses() {
        return this.windowsOutboundIpAddresses;
    }
    public Boolean zoneRedundant() {
        return this.zoneRedundant;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEnvironmentV3Result defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean allowNewPrivateEndpointConnections;
        private List<GetEnvironmentV3ClusterSetting> clusterSettings;
        private Integer dedicatedHostCount;
        private String dnsSuffix;
        private List<String> externalInboundIpAddresses;
        private String id;
        private List<GetEnvironmentV3InboundNetworkDependency> inboundNetworkDependencies;
        private List<String> internalInboundIpAddresses;
        private String internalLoadBalancingMode;
        private Integer ipSslAddressCount;
        private List<String> linuxOutboundIpAddresses;
        private String location;
        private String name;
        private String pricingTier;
        private String resourceGroupName;
        private String subnetId;
        private Map<String,String> tags;
        private List<String> windowsOutboundIpAddresses;
        private Boolean zoneRedundant;

        public Builder() {
    	      // Empty
        }

        public Builder(GetEnvironmentV3Result defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowNewPrivateEndpointConnections = defaults.allowNewPrivateEndpointConnections;
    	      this.clusterSettings = defaults.clusterSettings;
    	      this.dedicatedHostCount = defaults.dedicatedHostCount;
    	      this.dnsSuffix = defaults.dnsSuffix;
    	      this.externalInboundIpAddresses = defaults.externalInboundIpAddresses;
    	      this.id = defaults.id;
    	      this.inboundNetworkDependencies = defaults.inboundNetworkDependencies;
    	      this.internalInboundIpAddresses = defaults.internalInboundIpAddresses;
    	      this.internalLoadBalancingMode = defaults.internalLoadBalancingMode;
    	      this.ipSslAddressCount = defaults.ipSslAddressCount;
    	      this.linuxOutboundIpAddresses = defaults.linuxOutboundIpAddresses;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.pricingTier = defaults.pricingTier;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.subnetId = defaults.subnetId;
    	      this.tags = defaults.tags;
    	      this.windowsOutboundIpAddresses = defaults.windowsOutboundIpAddresses;
    	      this.zoneRedundant = defaults.zoneRedundant;
        }

        public Builder allowNewPrivateEndpointConnections(Boolean allowNewPrivateEndpointConnections) {
            this.allowNewPrivateEndpointConnections = Objects.requireNonNull(allowNewPrivateEndpointConnections);
            return this;
        }
        public Builder clusterSettings(List<GetEnvironmentV3ClusterSetting> clusterSettings) {
            this.clusterSettings = Objects.requireNonNull(clusterSettings);
            return this;
        }
        public Builder clusterSettings(GetEnvironmentV3ClusterSetting... clusterSettings) {
            return clusterSettings(List.of(clusterSettings));
        }
        public Builder dedicatedHostCount(Integer dedicatedHostCount) {
            this.dedicatedHostCount = Objects.requireNonNull(dedicatedHostCount);
            return this;
        }
        public Builder dnsSuffix(String dnsSuffix) {
            this.dnsSuffix = Objects.requireNonNull(dnsSuffix);
            return this;
        }
        public Builder externalInboundIpAddresses(List<String> externalInboundIpAddresses) {
            this.externalInboundIpAddresses = Objects.requireNonNull(externalInboundIpAddresses);
            return this;
        }
        public Builder externalInboundIpAddresses(String... externalInboundIpAddresses) {
            return externalInboundIpAddresses(List.of(externalInboundIpAddresses));
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder inboundNetworkDependencies(List<GetEnvironmentV3InboundNetworkDependency> inboundNetworkDependencies) {
            this.inboundNetworkDependencies = Objects.requireNonNull(inboundNetworkDependencies);
            return this;
        }
        public Builder inboundNetworkDependencies(GetEnvironmentV3InboundNetworkDependency... inboundNetworkDependencies) {
            return inboundNetworkDependencies(List.of(inboundNetworkDependencies));
        }
        public Builder internalInboundIpAddresses(List<String> internalInboundIpAddresses) {
            this.internalInboundIpAddresses = Objects.requireNonNull(internalInboundIpAddresses);
            return this;
        }
        public Builder internalInboundIpAddresses(String... internalInboundIpAddresses) {
            return internalInboundIpAddresses(List.of(internalInboundIpAddresses));
        }
        public Builder internalLoadBalancingMode(String internalLoadBalancingMode) {
            this.internalLoadBalancingMode = Objects.requireNonNull(internalLoadBalancingMode);
            return this;
        }
        public Builder ipSslAddressCount(Integer ipSslAddressCount) {
            this.ipSslAddressCount = Objects.requireNonNull(ipSslAddressCount);
            return this;
        }
        public Builder linuxOutboundIpAddresses(List<String> linuxOutboundIpAddresses) {
            this.linuxOutboundIpAddresses = Objects.requireNonNull(linuxOutboundIpAddresses);
            return this;
        }
        public Builder linuxOutboundIpAddresses(String... linuxOutboundIpAddresses) {
            return linuxOutboundIpAddresses(List.of(linuxOutboundIpAddresses));
        }
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder pricingTier(String pricingTier) {
            this.pricingTier = Objects.requireNonNull(pricingTier);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder subnetId(String subnetId) {
            this.subnetId = Objects.requireNonNull(subnetId);
            return this;
        }
        public Builder tags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder windowsOutboundIpAddresses(List<String> windowsOutboundIpAddresses) {
            this.windowsOutboundIpAddresses = Objects.requireNonNull(windowsOutboundIpAddresses);
            return this;
        }
        public Builder windowsOutboundIpAddresses(String... windowsOutboundIpAddresses) {
            return windowsOutboundIpAddresses(List.of(windowsOutboundIpAddresses));
        }
        public Builder zoneRedundant(Boolean zoneRedundant) {
            this.zoneRedundant = Objects.requireNonNull(zoneRedundant);
            return this;
        }        public GetEnvironmentV3Result build() {
            return new GetEnvironmentV3Result(allowNewPrivateEndpointConnections, clusterSettings, dedicatedHostCount, dnsSuffix, externalInboundIpAddresses, id, inboundNetworkDependencies, internalInboundIpAddresses, internalLoadBalancingMode, ipSslAddressCount, linuxOutboundIpAddresses, location, name, pricingTier, resourceGroupName, subnetId, tags, windowsOutboundIpAddresses, zoneRedundant);
        }
    }
}
