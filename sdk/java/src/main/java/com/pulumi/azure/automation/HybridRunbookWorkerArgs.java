// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.automation;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class HybridRunbookWorkerArgs extends com.pulumi.resources.ResourceArgs {

    public static final HybridRunbookWorkerArgs Empty = new HybridRunbookWorkerArgs();

    /**
     * The name of the automation account in which the Hybrid Worker is created. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="automationAccountName", required=true)
    private Output<String> automationAccountName;

    /**
     * @return The name of the automation account in which the Hybrid Worker is created. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> automationAccountName() {
        return this.automationAccountName;
    }

    /**
     * The name of the Resource Group where the Automation should exist. Changing this forces a new Automation to be created.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the Resource Group where the Automation should exist. Changing this forces a new Automation to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The ID of the virtual machine used for this HybridWorker. Changing this forces a new Automation to be created.
     * 
     */
    @Import(name="vmResourceId", required=true)
    private Output<String> vmResourceId;

    /**
     * @return The ID of the virtual machine used for this HybridWorker. Changing this forces a new Automation to be created.
     * 
     */
    public Output<String> vmResourceId() {
        return this.vmResourceId;
    }

    /**
     * The name of the HybridWorker Group. Changing this forces a new Automation to be created.
     * 
     */
    @Import(name="workerGroupName", required=true)
    private Output<String> workerGroupName;

    /**
     * @return The name of the HybridWorker Group. Changing this forces a new Automation to be created.
     * 
     */
    public Output<String> workerGroupName() {
        return this.workerGroupName;
    }

    /**
     * Specify the ID of this HybridWorker in UUID notation. Changing this forces a new Automation to be created.
     * 
     */
    @Import(name="workerId", required=true)
    private Output<String> workerId;

    /**
     * @return Specify the ID of this HybridWorker in UUID notation. Changing this forces a new Automation to be created.
     * 
     */
    public Output<String> workerId() {
        return this.workerId;
    }

    private HybridRunbookWorkerArgs() {}

    private HybridRunbookWorkerArgs(HybridRunbookWorkerArgs $) {
        this.automationAccountName = $.automationAccountName;
        this.resourceGroupName = $.resourceGroupName;
        this.vmResourceId = $.vmResourceId;
        this.workerGroupName = $.workerGroupName;
        this.workerId = $.workerId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HybridRunbookWorkerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HybridRunbookWorkerArgs $;

        public Builder() {
            $ = new HybridRunbookWorkerArgs();
        }

        public Builder(HybridRunbookWorkerArgs defaults) {
            $ = new HybridRunbookWorkerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param automationAccountName The name of the automation account in which the Hybrid Worker is created. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder automationAccountName(Output<String> automationAccountName) {
            $.automationAccountName = automationAccountName;
            return this;
        }

        /**
         * @param automationAccountName The name of the automation account in which the Hybrid Worker is created. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder automationAccountName(String automationAccountName) {
            return automationAccountName(Output.of(automationAccountName));
        }

        /**
         * @param resourceGroupName The name of the Resource Group where the Automation should exist. Changing this forces a new Automation to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the Resource Group where the Automation should exist. Changing this forces a new Automation to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param vmResourceId The ID of the virtual machine used for this HybridWorker. Changing this forces a new Automation to be created.
         * 
         * @return builder
         * 
         */
        public Builder vmResourceId(Output<String> vmResourceId) {
            $.vmResourceId = vmResourceId;
            return this;
        }

        /**
         * @param vmResourceId The ID of the virtual machine used for this HybridWorker. Changing this forces a new Automation to be created.
         * 
         * @return builder
         * 
         */
        public Builder vmResourceId(String vmResourceId) {
            return vmResourceId(Output.of(vmResourceId));
        }

        /**
         * @param workerGroupName The name of the HybridWorker Group. Changing this forces a new Automation to be created.
         * 
         * @return builder
         * 
         */
        public Builder workerGroupName(Output<String> workerGroupName) {
            $.workerGroupName = workerGroupName;
            return this;
        }

        /**
         * @param workerGroupName The name of the HybridWorker Group. Changing this forces a new Automation to be created.
         * 
         * @return builder
         * 
         */
        public Builder workerGroupName(String workerGroupName) {
            return workerGroupName(Output.of(workerGroupName));
        }

        /**
         * @param workerId Specify the ID of this HybridWorker in UUID notation. Changing this forces a new Automation to be created.
         * 
         * @return builder
         * 
         */
        public Builder workerId(Output<String> workerId) {
            $.workerId = workerId;
            return this;
        }

        /**
         * @param workerId Specify the ID of this HybridWorker in UUID notation. Changing this forces a new Automation to be created.
         * 
         * @return builder
         * 
         */
        public Builder workerId(String workerId) {
            return workerId(Output.of(workerId));
        }

        public HybridRunbookWorkerArgs build() {
            if ($.automationAccountName == null) {
                throw new MissingRequiredPropertyException("HybridRunbookWorkerArgs", "automationAccountName");
            }
            if ($.resourceGroupName == null) {
                throw new MissingRequiredPropertyException("HybridRunbookWorkerArgs", "resourceGroupName");
            }
            if ($.vmResourceId == null) {
                throw new MissingRequiredPropertyException("HybridRunbookWorkerArgs", "vmResourceId");
            }
            if ($.workerGroupName == null) {
                throw new MissingRequiredPropertyException("HybridRunbookWorkerArgs", "workerGroupName");
            }
            if ($.workerId == null) {
                throw new MissingRequiredPropertyException("HybridRunbookWorkerArgs", "workerId");
            }
            return $;
        }
    }

}
