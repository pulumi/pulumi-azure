// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.costmanagement;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ScheduledActionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ScheduledActionArgs Empty = new ScheduledActionArgs();

    /**
     * UTC day on which cost analysis data will be emailed. Must be between `1` and `31`. This property is applicable when `frequency` is `Monthly`.
     * 
     */
    @Import(name="dayOfMonth")
    private @Nullable Output<Integer> dayOfMonth;

    /**
     * @return UTC day on which cost analysis data will be emailed. Must be between `1` and `31`. This property is applicable when `frequency` is `Monthly`.
     * 
     */
    public Optional<Output<Integer>> dayOfMonth() {
        return Optional.ofNullable(this.dayOfMonth);
    }

    /**
     * Specifies a list of day names on which cost analysis data will be emailed. This property is applicable when frequency is `Weekly` or `Monthly`. Possible values are `Friday`, `Monday`, `Saturday`, `Sunday`, `Thursday`, `Tuesday` and `Wednesday`.
     * 
     */
    @Import(name="daysOfWeeks")
    private @Nullable Output<List<String>> daysOfWeeks;

    /**
     * @return Specifies a list of day names on which cost analysis data will be emailed. This property is applicable when frequency is `Weekly` or `Monthly`. Possible values are `Friday`, `Monday`, `Saturday`, `Sunday`, `Thursday`, `Tuesday` and `Wednesday`.
     * 
     */
    public Optional<Output<List<String>>> daysOfWeeks() {
        return Optional.ofNullable(this.daysOfWeeks);
    }

    /**
     * User visible input name of the Cost Management Scheduled Action.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return User visible input name of the Cost Management Scheduled Action.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * Email address of the point of contact that should get the unsubscribe requests of Scheduled Action notification emails.
     * 
     */
    @Import(name="emailAddressSender", required=true)
    private Output<String> emailAddressSender;

    /**
     * @return Email address of the point of contact that should get the unsubscribe requests of Scheduled Action notification emails.
     * 
     */
    public Output<String> emailAddressSender() {
        return this.emailAddressSender;
    }

    /**
     * Specifies a list of email addresses that will receive the Scheduled Action.
     * 
     */
    @Import(name="emailAddresses", required=true)
    private Output<List<String>> emailAddresses;

    /**
     * @return Specifies a list of email addresses that will receive the Scheduled Action.
     * 
     */
    public Output<List<String>> emailAddresses() {
        return this.emailAddresses;
    }

    /**
     * Subject of the email. Length is limited to 70 characters.
     * 
     */
    @Import(name="emailSubject", required=true)
    private Output<String> emailSubject;

    /**
     * @return Subject of the email. Length is limited to 70 characters.
     * 
     */
    public Output<String> emailSubject() {
        return this.emailSubject;
    }

    /**
     * The end date and time of the Scheduled Action (UTC).
     * 
     */
    @Import(name="endDate", required=true)
    private Output<String> endDate;

    /**
     * @return The end date and time of the Scheduled Action (UTC).
     * 
     */
    public Output<String> endDate() {
        return this.endDate;
    }

    /**
     * Frequency of the schedule. Possible values are `Daily`, `Monthly` and `Weekly`. Value `Monthly` requires either `weeks_of_month` and `days_of_week` or `day_of_month` to be specified. Value `Weekly` requires `days_of_week` to be specified.
     * 
     */
    @Import(name="frequency", required=true)
    private Output<String> frequency;

    /**
     * @return Frequency of the schedule. Possible values are `Daily`, `Monthly` and `Weekly`. Value `Monthly` requires either `weeks_of_month` and `days_of_week` or `day_of_month` to be specified. Value `Weekly` requires `days_of_week` to be specified.
     * 
     */
    public Output<String> frequency() {
        return this.frequency;
    }

    /**
     * UTC time at which cost analysis data will be emailed. Must be between `0` and `23`.
     * 
     */
    @Import(name="hourOfDay")
    private @Nullable Output<Integer> hourOfDay;

    /**
     * @return UTC time at which cost analysis data will be emailed. Must be between `0` and `23`.
     * 
     */
    public Optional<Output<Integer>> hourOfDay() {
        return Optional.ofNullable(this.hourOfDay);
    }

    /**
     * Message to be added in the email. Length is limited to 250 characters.
     * 
     */
    @Import(name="message")
    private @Nullable Output<String> message;

    /**
     * @return Message to be added in the email. Length is limited to 250 characters.
     * 
     */
    public Optional<Output<String>> message() {
        return Optional.ofNullable(this.message);
    }

    /**
     * The name which should be used for this Azure Cost Management Scheduled Action. Changing this forces a new Azure Cost Management Scheduled Action to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name which should be used for this Azure Cost Management Scheduled Action. Changing this forces a new Azure Cost Management Scheduled Action to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The start date and time of the Scheduled Action (UTC).
     * 
     */
    @Import(name="startDate", required=true)
    private Output<String> startDate;

    /**
     * @return The start date and time of the Scheduled Action (UTC).
     * 
     */
    public Output<String> startDate() {
        return this.startDate;
    }

    /**
     * The ID of the Cost Management View that is used by the Scheduled Action. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="viewId", required=true)
    private Output<String> viewId;

    /**
     * @return The ID of the Cost Management View that is used by the Scheduled Action. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> viewId() {
        return this.viewId;
    }

    /**
     * Specifies a list of weeks in which cost analysis data will be emailed. This property is applicable when `frequency` is `Monthly` and used in combination with `days_of_week`. Possible values are `First`, `Fourth`, `Last`, `Second` and `Third`.
     * 
     */
    @Import(name="weeksOfMonths")
    private @Nullable Output<List<String>> weeksOfMonths;

    /**
     * @return Specifies a list of weeks in which cost analysis data will be emailed. This property is applicable when `frequency` is `Monthly` and used in combination with `days_of_week`. Possible values are `First`, `Fourth`, `Last`, `Second` and `Third`.
     * 
     */
    public Optional<Output<List<String>>> weeksOfMonths() {
        return Optional.ofNullable(this.weeksOfMonths);
    }

    private ScheduledActionArgs() {}

    private ScheduledActionArgs(ScheduledActionArgs $) {
        this.dayOfMonth = $.dayOfMonth;
        this.daysOfWeeks = $.daysOfWeeks;
        this.displayName = $.displayName;
        this.emailAddressSender = $.emailAddressSender;
        this.emailAddresses = $.emailAddresses;
        this.emailSubject = $.emailSubject;
        this.endDate = $.endDate;
        this.frequency = $.frequency;
        this.hourOfDay = $.hourOfDay;
        this.message = $.message;
        this.name = $.name;
        this.startDate = $.startDate;
        this.viewId = $.viewId;
        this.weeksOfMonths = $.weeksOfMonths;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScheduledActionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScheduledActionArgs $;

        public Builder() {
            $ = new ScheduledActionArgs();
        }

        public Builder(ScheduledActionArgs defaults) {
            $ = new ScheduledActionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dayOfMonth UTC day on which cost analysis data will be emailed. Must be between `1` and `31`. This property is applicable when `frequency` is `Monthly`.
         * 
         * @return builder
         * 
         */
        public Builder dayOfMonth(@Nullable Output<Integer> dayOfMonth) {
            $.dayOfMonth = dayOfMonth;
            return this;
        }

        /**
         * @param dayOfMonth UTC day on which cost analysis data will be emailed. Must be between `1` and `31`. This property is applicable when `frequency` is `Monthly`.
         * 
         * @return builder
         * 
         */
        public Builder dayOfMonth(Integer dayOfMonth) {
            return dayOfMonth(Output.of(dayOfMonth));
        }

        /**
         * @param daysOfWeeks Specifies a list of day names on which cost analysis data will be emailed. This property is applicable when frequency is `Weekly` or `Monthly`. Possible values are `Friday`, `Monday`, `Saturday`, `Sunday`, `Thursday`, `Tuesday` and `Wednesday`.
         * 
         * @return builder
         * 
         */
        public Builder daysOfWeeks(@Nullable Output<List<String>> daysOfWeeks) {
            $.daysOfWeeks = daysOfWeeks;
            return this;
        }

        /**
         * @param daysOfWeeks Specifies a list of day names on which cost analysis data will be emailed. This property is applicable when frequency is `Weekly` or `Monthly`. Possible values are `Friday`, `Monday`, `Saturday`, `Sunday`, `Thursday`, `Tuesday` and `Wednesday`.
         * 
         * @return builder
         * 
         */
        public Builder daysOfWeeks(List<String> daysOfWeeks) {
            return daysOfWeeks(Output.of(daysOfWeeks));
        }

        /**
         * @param daysOfWeeks Specifies a list of day names on which cost analysis data will be emailed. This property is applicable when frequency is `Weekly` or `Monthly`. Possible values are `Friday`, `Monday`, `Saturday`, `Sunday`, `Thursday`, `Tuesday` and `Wednesday`.
         * 
         * @return builder
         * 
         */
        public Builder daysOfWeeks(String... daysOfWeeks) {
            return daysOfWeeks(List.of(daysOfWeeks));
        }

        /**
         * @param displayName User visible input name of the Cost Management Scheduled Action.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName User visible input name of the Cost Management Scheduled Action.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param emailAddressSender Email address of the point of contact that should get the unsubscribe requests of Scheduled Action notification emails.
         * 
         * @return builder
         * 
         */
        public Builder emailAddressSender(Output<String> emailAddressSender) {
            $.emailAddressSender = emailAddressSender;
            return this;
        }

        /**
         * @param emailAddressSender Email address of the point of contact that should get the unsubscribe requests of Scheduled Action notification emails.
         * 
         * @return builder
         * 
         */
        public Builder emailAddressSender(String emailAddressSender) {
            return emailAddressSender(Output.of(emailAddressSender));
        }

        /**
         * @param emailAddresses Specifies a list of email addresses that will receive the Scheduled Action.
         * 
         * @return builder
         * 
         */
        public Builder emailAddresses(Output<List<String>> emailAddresses) {
            $.emailAddresses = emailAddresses;
            return this;
        }

        /**
         * @param emailAddresses Specifies a list of email addresses that will receive the Scheduled Action.
         * 
         * @return builder
         * 
         */
        public Builder emailAddresses(List<String> emailAddresses) {
            return emailAddresses(Output.of(emailAddresses));
        }

        /**
         * @param emailAddresses Specifies a list of email addresses that will receive the Scheduled Action.
         * 
         * @return builder
         * 
         */
        public Builder emailAddresses(String... emailAddresses) {
            return emailAddresses(List.of(emailAddresses));
        }

        /**
         * @param emailSubject Subject of the email. Length is limited to 70 characters.
         * 
         * @return builder
         * 
         */
        public Builder emailSubject(Output<String> emailSubject) {
            $.emailSubject = emailSubject;
            return this;
        }

        /**
         * @param emailSubject Subject of the email. Length is limited to 70 characters.
         * 
         * @return builder
         * 
         */
        public Builder emailSubject(String emailSubject) {
            return emailSubject(Output.of(emailSubject));
        }

        /**
         * @param endDate The end date and time of the Scheduled Action (UTC).
         * 
         * @return builder
         * 
         */
        public Builder endDate(Output<String> endDate) {
            $.endDate = endDate;
            return this;
        }

        /**
         * @param endDate The end date and time of the Scheduled Action (UTC).
         * 
         * @return builder
         * 
         */
        public Builder endDate(String endDate) {
            return endDate(Output.of(endDate));
        }

        /**
         * @param frequency Frequency of the schedule. Possible values are `Daily`, `Monthly` and `Weekly`. Value `Monthly` requires either `weeks_of_month` and `days_of_week` or `day_of_month` to be specified. Value `Weekly` requires `days_of_week` to be specified.
         * 
         * @return builder
         * 
         */
        public Builder frequency(Output<String> frequency) {
            $.frequency = frequency;
            return this;
        }

        /**
         * @param frequency Frequency of the schedule. Possible values are `Daily`, `Monthly` and `Weekly`. Value `Monthly` requires either `weeks_of_month` and `days_of_week` or `day_of_month` to be specified. Value `Weekly` requires `days_of_week` to be specified.
         * 
         * @return builder
         * 
         */
        public Builder frequency(String frequency) {
            return frequency(Output.of(frequency));
        }

        /**
         * @param hourOfDay UTC time at which cost analysis data will be emailed. Must be between `0` and `23`.
         * 
         * @return builder
         * 
         */
        public Builder hourOfDay(@Nullable Output<Integer> hourOfDay) {
            $.hourOfDay = hourOfDay;
            return this;
        }

        /**
         * @param hourOfDay UTC time at which cost analysis data will be emailed. Must be between `0` and `23`.
         * 
         * @return builder
         * 
         */
        public Builder hourOfDay(Integer hourOfDay) {
            return hourOfDay(Output.of(hourOfDay));
        }

        /**
         * @param message Message to be added in the email. Length is limited to 250 characters.
         * 
         * @return builder
         * 
         */
        public Builder message(@Nullable Output<String> message) {
            $.message = message;
            return this;
        }

        /**
         * @param message Message to be added in the email. Length is limited to 250 characters.
         * 
         * @return builder
         * 
         */
        public Builder message(String message) {
            return message(Output.of(message));
        }

        /**
         * @param name The name which should be used for this Azure Cost Management Scheduled Action. Changing this forces a new Azure Cost Management Scheduled Action to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this Azure Cost Management Scheduled Action. Changing this forces a new Azure Cost Management Scheduled Action to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param startDate The start date and time of the Scheduled Action (UTC).
         * 
         * @return builder
         * 
         */
        public Builder startDate(Output<String> startDate) {
            $.startDate = startDate;
            return this;
        }

        /**
         * @param startDate The start date and time of the Scheduled Action (UTC).
         * 
         * @return builder
         * 
         */
        public Builder startDate(String startDate) {
            return startDate(Output.of(startDate));
        }

        /**
         * @param viewId The ID of the Cost Management View that is used by the Scheduled Action. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder viewId(Output<String> viewId) {
            $.viewId = viewId;
            return this;
        }

        /**
         * @param viewId The ID of the Cost Management View that is used by the Scheduled Action. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder viewId(String viewId) {
            return viewId(Output.of(viewId));
        }

        /**
         * @param weeksOfMonths Specifies a list of weeks in which cost analysis data will be emailed. This property is applicable when `frequency` is `Monthly` and used in combination with `days_of_week`. Possible values are `First`, `Fourth`, `Last`, `Second` and `Third`.
         * 
         * @return builder
         * 
         */
        public Builder weeksOfMonths(@Nullable Output<List<String>> weeksOfMonths) {
            $.weeksOfMonths = weeksOfMonths;
            return this;
        }

        /**
         * @param weeksOfMonths Specifies a list of weeks in which cost analysis data will be emailed. This property is applicable when `frequency` is `Monthly` and used in combination with `days_of_week`. Possible values are `First`, `Fourth`, `Last`, `Second` and `Third`.
         * 
         * @return builder
         * 
         */
        public Builder weeksOfMonths(List<String> weeksOfMonths) {
            return weeksOfMonths(Output.of(weeksOfMonths));
        }

        /**
         * @param weeksOfMonths Specifies a list of weeks in which cost analysis data will be emailed. This property is applicable when `frequency` is `Monthly` and used in combination with `days_of_week`. Possible values are `First`, `Fourth`, `Last`, `Second` and `Third`.
         * 
         * @return builder
         * 
         */
        public Builder weeksOfMonths(String... weeksOfMonths) {
            return weeksOfMonths(List.of(weeksOfMonths));
        }

        public ScheduledActionArgs build() {
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            $.emailAddressSender = Objects.requireNonNull($.emailAddressSender, "expected parameter 'emailAddressSender' to be non-null");
            $.emailAddresses = Objects.requireNonNull($.emailAddresses, "expected parameter 'emailAddresses' to be non-null");
            $.emailSubject = Objects.requireNonNull($.emailSubject, "expected parameter 'emailSubject' to be non-null");
            $.endDate = Objects.requireNonNull($.endDate, "expected parameter 'endDate' to be non-null");
            $.frequency = Objects.requireNonNull($.frequency, "expected parameter 'frequency' to be non-null");
            $.startDate = Objects.requireNonNull($.startDate, "expected parameter 'startDate' to be non-null");
            $.viewId = Objects.requireNonNull($.viewId, "expected parameter 'viewId' to be non-null");
            return $;
        }
    }

}
