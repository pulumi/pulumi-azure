// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.mobile.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class NetworkServicePccRuleServiceDataFlowTemplate {
    /**
     * @return Specifies the direction of this flow. Possible values are `Uplink`, `Downlink` and `Bidirectional`.
     * 
     */
    private String direction;
    /**
     * @return Specifies the name of the data flow template. This must be unique within the parent data flow policy rule. You must not use any of the following reserved strings - `default`, `requested` or `service`.
     * 
     */
    private String name;
    /**
     * @return The port(s) to which UEs will connect for this flow. You can specify zero or more ports or port ranges. If you specify one or more ports or port ranges then you must specify a value other than `ip` in the `protocol` field. If it is not specified then connections will be allowed on all ports. Port ranges must be specified as &lt;FirstPort&gt;-&lt;LastPort&gt;. For example: [`8080`, `8082-8085`].
     * 
     */
    private @Nullable List<String> ports;
    /**
     * @return A list of the allowed protocol(s) for this flow. If you want this flow to be able to use any protocol within the internet protocol suite, use the value `ip`. If you only want to allow a selection of protocols, you must use the corresponding IANA Assigned Internet Protocol Number for each protocol, as described in https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml. For example, for UDP, you must use 17. If you use the value `ip` then you must leave the field `port` unspecified.
     * 
     */
    private List<String> protocols;
    /**
     * @return Specifies the remote IP address(es) to which UEs will connect for this flow. If you want to allow connections on any IP address, use the value `any`. Otherwise, you must provide each of the remote IP addresses to which the packet core instance will connect for this flow. You must provide each IP address in CIDR notation, including the netmask (for example, `192.0.2.54/24`).
     * 
     */
    private List<String> remoteIpLists;

    private NetworkServicePccRuleServiceDataFlowTemplate() {}
    /**
     * @return Specifies the direction of this flow. Possible values are `Uplink`, `Downlink` and `Bidirectional`.
     * 
     */
    public String direction() {
        return this.direction;
    }
    /**
     * @return Specifies the name of the data flow template. This must be unique within the parent data flow policy rule. You must not use any of the following reserved strings - `default`, `requested` or `service`.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The port(s) to which UEs will connect for this flow. You can specify zero or more ports or port ranges. If you specify one or more ports or port ranges then you must specify a value other than `ip` in the `protocol` field. If it is not specified then connections will be allowed on all ports. Port ranges must be specified as &lt;FirstPort&gt;-&lt;LastPort&gt;. For example: [`8080`, `8082-8085`].
     * 
     */
    public List<String> ports() {
        return this.ports == null ? List.of() : this.ports;
    }
    /**
     * @return A list of the allowed protocol(s) for this flow. If you want this flow to be able to use any protocol within the internet protocol suite, use the value `ip`. If you only want to allow a selection of protocols, you must use the corresponding IANA Assigned Internet Protocol Number for each protocol, as described in https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml. For example, for UDP, you must use 17. If you use the value `ip` then you must leave the field `port` unspecified.
     * 
     */
    public List<String> protocols() {
        return this.protocols;
    }
    /**
     * @return Specifies the remote IP address(es) to which UEs will connect for this flow. If you want to allow connections on any IP address, use the value `any`. Otherwise, you must provide each of the remote IP addresses to which the packet core instance will connect for this flow. You must provide each IP address in CIDR notation, including the netmask (for example, `192.0.2.54/24`).
     * 
     */
    public List<String> remoteIpLists() {
        return this.remoteIpLists;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NetworkServicePccRuleServiceDataFlowTemplate defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String direction;
        private String name;
        private @Nullable List<String> ports;
        private List<String> protocols;
        private List<String> remoteIpLists;
        public Builder() {}
        public Builder(NetworkServicePccRuleServiceDataFlowTemplate defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.direction = defaults.direction;
    	      this.name = defaults.name;
    	      this.ports = defaults.ports;
    	      this.protocols = defaults.protocols;
    	      this.remoteIpLists = defaults.remoteIpLists;
        }

        @CustomType.Setter
        public Builder direction(String direction) {
            if (direction == null) {
              throw new MissingRequiredPropertyException("NetworkServicePccRuleServiceDataFlowTemplate", "direction");
            }
            this.direction = direction;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("NetworkServicePccRuleServiceDataFlowTemplate", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder ports(@Nullable List<String> ports) {

            this.ports = ports;
            return this;
        }
        public Builder ports(String... ports) {
            return ports(List.of(ports));
        }
        @CustomType.Setter
        public Builder protocols(List<String> protocols) {
            if (protocols == null) {
              throw new MissingRequiredPropertyException("NetworkServicePccRuleServiceDataFlowTemplate", "protocols");
            }
            this.protocols = protocols;
            return this;
        }
        public Builder protocols(String... protocols) {
            return protocols(List.of(protocols));
        }
        @CustomType.Setter
        public Builder remoteIpLists(List<String> remoteIpLists) {
            if (remoteIpLists == null) {
              throw new MissingRequiredPropertyException("NetworkServicePccRuleServiceDataFlowTemplate", "remoteIpLists");
            }
            this.remoteIpLists = remoteIpLists;
            return this;
        }
        public Builder remoteIpLists(String... remoteIpLists) {
            return remoteIpLists(List.of(remoteIpLists));
        }
        public NetworkServicePccRuleServiceDataFlowTemplate build() {
            final var _resultValue = new NetworkServicePccRuleServiceDataFlowTemplate();
            _resultValue.direction = direction;
            _resultValue.name = name;
            _resultValue.ports = ports;
            _resultValue.protocols = protocols;
            _resultValue.remoteIpLists = remoteIpLists;
            return _resultValue;
        }
    }
}
