// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.synapse;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkspaceKeyArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkspaceKeyArgs Empty = new WorkspaceKeyArgs();

    /**
     * Specifies if the workspace should be encrypted with this key.
     * 
     * &gt; **Note:** Only one key can actively encrypt a workspace. When performing a key rotation, setting a new key as the active key will disable existing keys.
     * 
     */
    @Import(name="active", required=true)
    private Output<Boolean> active;

    /**
     * @return Specifies if the workspace should be encrypted with this key.
     * 
     * &gt; **Note:** Only one key can actively encrypt a workspace. When performing a key rotation, setting a new key as the active key will disable existing keys.
     * 
     */
    public Output<Boolean> active() {
        return this.active;
    }

    /**
     * Specifies the name of the workspace key. Should match the name of the key in the synapse workspace.
     * 
     */
    @Import(name="customerManagedKeyName", required=true)
    private Output<String> customerManagedKeyName;

    /**
     * @return Specifies the name of the workspace key. Should match the name of the key in the synapse workspace.
     * 
     */
    public Output<String> customerManagedKeyName() {
        return this.customerManagedKeyName;
    }

    /**
     * The Azure Key Vault Key Versionless ID to be used as the Customer Managed Key (CMK) for double encryption
     * 
     */
    @Import(name="customerManagedKeyVersionlessId")
    private @Nullable Output<String> customerManagedKeyVersionlessId;

    /**
     * @return The Azure Key Vault Key Versionless ID to be used as the Customer Managed Key (CMK) for double encryption
     * 
     */
    public Optional<Output<String>> customerManagedKeyVersionlessId() {
        return Optional.ofNullable(this.customerManagedKeyVersionlessId);
    }

    /**
     * The ID of the Synapse Workspace where the encryption key should be configured.
     * 
     */
    @Import(name="synapseWorkspaceId", required=true)
    private Output<String> synapseWorkspaceId;

    /**
     * @return The ID of the Synapse Workspace where the encryption key should be configured.
     * 
     */
    public Output<String> synapseWorkspaceId() {
        return this.synapseWorkspaceId;
    }

    private WorkspaceKeyArgs() {}

    private WorkspaceKeyArgs(WorkspaceKeyArgs $) {
        this.active = $.active;
        this.customerManagedKeyName = $.customerManagedKeyName;
        this.customerManagedKeyVersionlessId = $.customerManagedKeyVersionlessId;
        this.synapseWorkspaceId = $.synapseWorkspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkspaceKeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkspaceKeyArgs $;

        public Builder() {
            $ = new WorkspaceKeyArgs();
        }

        public Builder(WorkspaceKeyArgs defaults) {
            $ = new WorkspaceKeyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param active Specifies if the workspace should be encrypted with this key.
         * 
         * &gt; **Note:** Only one key can actively encrypt a workspace. When performing a key rotation, setting a new key as the active key will disable existing keys.
         * 
         * @return builder
         * 
         */
        public Builder active(Output<Boolean> active) {
            $.active = active;
            return this;
        }

        /**
         * @param active Specifies if the workspace should be encrypted with this key.
         * 
         * &gt; **Note:** Only one key can actively encrypt a workspace. When performing a key rotation, setting a new key as the active key will disable existing keys.
         * 
         * @return builder
         * 
         */
        public Builder active(Boolean active) {
            return active(Output.of(active));
        }

        /**
         * @param customerManagedKeyName Specifies the name of the workspace key. Should match the name of the key in the synapse workspace.
         * 
         * @return builder
         * 
         */
        public Builder customerManagedKeyName(Output<String> customerManagedKeyName) {
            $.customerManagedKeyName = customerManagedKeyName;
            return this;
        }

        /**
         * @param customerManagedKeyName Specifies the name of the workspace key. Should match the name of the key in the synapse workspace.
         * 
         * @return builder
         * 
         */
        public Builder customerManagedKeyName(String customerManagedKeyName) {
            return customerManagedKeyName(Output.of(customerManagedKeyName));
        }

        /**
         * @param customerManagedKeyVersionlessId The Azure Key Vault Key Versionless ID to be used as the Customer Managed Key (CMK) for double encryption
         * 
         * @return builder
         * 
         */
        public Builder customerManagedKeyVersionlessId(@Nullable Output<String> customerManagedKeyVersionlessId) {
            $.customerManagedKeyVersionlessId = customerManagedKeyVersionlessId;
            return this;
        }

        /**
         * @param customerManagedKeyVersionlessId The Azure Key Vault Key Versionless ID to be used as the Customer Managed Key (CMK) for double encryption
         * 
         * @return builder
         * 
         */
        public Builder customerManagedKeyVersionlessId(String customerManagedKeyVersionlessId) {
            return customerManagedKeyVersionlessId(Output.of(customerManagedKeyVersionlessId));
        }

        /**
         * @param synapseWorkspaceId The ID of the Synapse Workspace where the encryption key should be configured.
         * 
         * @return builder
         * 
         */
        public Builder synapseWorkspaceId(Output<String> synapseWorkspaceId) {
            $.synapseWorkspaceId = synapseWorkspaceId;
            return this;
        }

        /**
         * @param synapseWorkspaceId The ID of the Synapse Workspace where the encryption key should be configured.
         * 
         * @return builder
         * 
         */
        public Builder synapseWorkspaceId(String synapseWorkspaceId) {
            return synapseWorkspaceId(Output.of(synapseWorkspaceId));
        }

        public WorkspaceKeyArgs build() {
            if ($.active == null) {
                throw new MissingRequiredPropertyException("WorkspaceKeyArgs", "active");
            }
            if ($.customerManagedKeyName == null) {
                throw new MissingRequiredPropertyException("WorkspaceKeyArgs", "customerManagedKeyName");
            }
            if ($.synapseWorkspaceId == null) {
                throw new MissingRequiredPropertyException("WorkspaceKeyArgs", "synapseWorkspaceId");
            }
            return $;
        }
    }

}
