// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.monitoring.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArgs extends com.pulumi.resources.ResourceArgs {

    public static final AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArgs Empty = new AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArgs();

    /**
     * Specifies a list of dayOfWeek to recurrence. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, and `Saturday`.
     * 
     */
    @Import(name="daysOfWeeks", required=true)
    private Output<List<String>> daysOfWeeks;

    /**
     * @return Specifies a list of dayOfWeek to recurrence. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, and `Saturday`.
     * 
     */
    public Output<List<String>> daysOfWeeks() {
        return this.daysOfWeeks;
    }

    /**
     * Specifies the recurrence end time (H:M:S).
     * 
     */
    @Import(name="endTime")
    private @Nullable Output<String> endTime;

    /**
     * @return Specifies the recurrence end time (H:M:S).
     * 
     */
    public Optional<Output<String>> endTime() {
        return Optional.ofNullable(this.endTime);
    }

    /**
     * Specifies the recurrence start time (H:M:S).
     * 
     */
    @Import(name="startTime")
    private @Nullable Output<String> startTime;

    /**
     * @return Specifies the recurrence start time (H:M:S).
     * 
     */
    public Optional<Output<String>> startTime() {
        return Optional.ofNullable(this.startTime);
    }

    private AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArgs() {}

    private AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArgs(AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArgs $) {
        this.daysOfWeeks = $.daysOfWeeks;
        this.endTime = $.endTime;
        this.startTime = $.startTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArgs $;

        public Builder() {
            $ = new AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArgs();
        }

        public Builder(AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArgs defaults) {
            $ = new AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param daysOfWeeks Specifies a list of dayOfWeek to recurrence. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, and `Saturday`.
         * 
         * @return builder
         * 
         */
        public Builder daysOfWeeks(Output<List<String>> daysOfWeeks) {
            $.daysOfWeeks = daysOfWeeks;
            return this;
        }

        /**
         * @param daysOfWeeks Specifies a list of dayOfWeek to recurrence. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, and `Saturday`.
         * 
         * @return builder
         * 
         */
        public Builder daysOfWeeks(List<String> daysOfWeeks) {
            return daysOfWeeks(Output.of(daysOfWeeks));
        }

        /**
         * @param daysOfWeeks Specifies a list of dayOfWeek to recurrence. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, and `Saturday`.
         * 
         * @return builder
         * 
         */
        public Builder daysOfWeeks(String... daysOfWeeks) {
            return daysOfWeeks(List.of(daysOfWeeks));
        }

        /**
         * @param endTime Specifies the recurrence end time (H:M:S).
         * 
         * @return builder
         * 
         */
        public Builder endTime(@Nullable Output<String> endTime) {
            $.endTime = endTime;
            return this;
        }

        /**
         * @param endTime Specifies the recurrence end time (H:M:S).
         * 
         * @return builder
         * 
         */
        public Builder endTime(String endTime) {
            return endTime(Output.of(endTime));
        }

        /**
         * @param startTime Specifies the recurrence start time (H:M:S).
         * 
         * @return builder
         * 
         */
        public Builder startTime(@Nullable Output<String> startTime) {
            $.startTime = startTime;
            return this;
        }

        /**
         * @param startTime Specifies the recurrence start time (H:M:S).
         * 
         * @return builder
         * 
         */
        public Builder startTime(String startTime) {
            return startTime(Output.of(startTime));
        }

        public AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArgs build() {
            if ($.daysOfWeeks == null) {
                throw new MissingRequiredPropertyException("AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArgs", "daysOfWeeks");
            }
            return $;
        }
    }

}
