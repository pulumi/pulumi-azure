// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.securitycenter;

import com.pulumi.azure.securitycenter.inputs.AssessmentStatusArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AssessmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final AssessmentArgs Empty = new AssessmentArgs();

    /**
     * A map of additional data to associate with the assessment.
     * 
     */
    @Import(name="additionalData")
    private @Nullable Output<Map<String,String>> additionalData;

    /**
     * @return A map of additional data to associate with the assessment.
     * 
     */
    public Optional<Output<Map<String,String>>> additionalData() {
        return Optional.ofNullable(this.additionalData);
    }

    /**
     * The ID of the security Assessment policy to apply to this resource. Changing this forces a new security Assessment to be created.
     * 
     */
    @Import(name="assessmentPolicyId", required=true)
    private Output<String> assessmentPolicyId;

    /**
     * @return The ID of the security Assessment policy to apply to this resource. Changing this forces a new security Assessment to be created.
     * 
     */
    public Output<String> assessmentPolicyId() {
        return this.assessmentPolicyId;
    }

    /**
     * A `status` block as defined below.
     * 
     */
    @Import(name="status", required=true)
    private Output<AssessmentStatusArgs> status;

    /**
     * @return A `status` block as defined below.
     * 
     */
    public Output<AssessmentStatusArgs> status() {
        return this.status;
    }

    /**
     * The ID of the target resource. Changing this forces a new security Assessment to be created.
     * 
     */
    @Import(name="targetResourceId", required=true)
    private Output<String> targetResourceId;

    /**
     * @return The ID of the target resource. Changing this forces a new security Assessment to be created.
     * 
     */
    public Output<String> targetResourceId() {
        return this.targetResourceId;
    }

    private AssessmentArgs() {}

    private AssessmentArgs(AssessmentArgs $) {
        this.additionalData = $.additionalData;
        this.assessmentPolicyId = $.assessmentPolicyId;
        this.status = $.status;
        this.targetResourceId = $.targetResourceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AssessmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AssessmentArgs $;

        public Builder() {
            $ = new AssessmentArgs();
        }

        public Builder(AssessmentArgs defaults) {
            $ = new AssessmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param additionalData A map of additional data to associate with the assessment.
         * 
         * @return builder
         * 
         */
        public Builder additionalData(@Nullable Output<Map<String,String>> additionalData) {
            $.additionalData = additionalData;
            return this;
        }

        /**
         * @param additionalData A map of additional data to associate with the assessment.
         * 
         * @return builder
         * 
         */
        public Builder additionalData(Map<String,String> additionalData) {
            return additionalData(Output.of(additionalData));
        }

        /**
         * @param assessmentPolicyId The ID of the security Assessment policy to apply to this resource. Changing this forces a new security Assessment to be created.
         * 
         * @return builder
         * 
         */
        public Builder assessmentPolicyId(Output<String> assessmentPolicyId) {
            $.assessmentPolicyId = assessmentPolicyId;
            return this;
        }

        /**
         * @param assessmentPolicyId The ID of the security Assessment policy to apply to this resource. Changing this forces a new security Assessment to be created.
         * 
         * @return builder
         * 
         */
        public Builder assessmentPolicyId(String assessmentPolicyId) {
            return assessmentPolicyId(Output.of(assessmentPolicyId));
        }

        /**
         * @param status A `status` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder status(Output<AssessmentStatusArgs> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status A `status` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder status(AssessmentStatusArgs status) {
            return status(Output.of(status));
        }

        /**
         * @param targetResourceId The ID of the target resource. Changing this forces a new security Assessment to be created.
         * 
         * @return builder
         * 
         */
        public Builder targetResourceId(Output<String> targetResourceId) {
            $.targetResourceId = targetResourceId;
            return this;
        }

        /**
         * @param targetResourceId The ID of the target resource. Changing this forces a new security Assessment to be created.
         * 
         * @return builder
         * 
         */
        public Builder targetResourceId(String targetResourceId) {
            return targetResourceId(Output.of(targetResourceId));
        }

        public AssessmentArgs build() {
            if ($.assessmentPolicyId == null) {
                throw new MissingRequiredPropertyException("AssessmentArgs", "assessmentPolicyId");
            }
            if ($.status == null) {
                throw new MissingRequiredPropertyException("AssessmentArgs", "status");
            }
            if ($.targetResourceId == null) {
                throw new MissingRequiredPropertyException("AssessmentArgs", "targetResourceId");
            }
            return $;
        }
    }

}
