// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.domainservices.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetServiceReplicaSet {
    /**
     * @return A list of subnet IP addresses for the domain controllers in the replica set, typically two.
     * 
     */
    private List<String> domainControllerIpAddresses;
    /**
     * @return The publicly routable IP address for the domain controllers in the replica set.
     * 
     */
    private String externalAccessIpAddress;
    /**
     * @return The ID of the Domain Service.
     * 
     */
    private String id;
    /**
     * @return The Azure location in which the replica set resides.
     * 
     */
    private String location;
    /**
     * @return The current service status for the replica set.
     * 
     */
    private String serviceStatus;
    /**
     * @return The ID of the subnet in which the replica set resides.
     * 
     */
    private String subnetId;

    private GetServiceReplicaSet() {}
    /**
     * @return A list of subnet IP addresses for the domain controllers in the replica set, typically two.
     * 
     */
    public List<String> domainControllerIpAddresses() {
        return this.domainControllerIpAddresses;
    }
    /**
     * @return The publicly routable IP address for the domain controllers in the replica set.
     * 
     */
    public String externalAccessIpAddress() {
        return this.externalAccessIpAddress;
    }
    /**
     * @return The ID of the Domain Service.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The Azure location in which the replica set resides.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return The current service status for the replica set.
     * 
     */
    public String serviceStatus() {
        return this.serviceStatus;
    }
    /**
     * @return The ID of the subnet in which the replica set resides.
     * 
     */
    public String subnetId() {
        return this.subnetId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceReplicaSet defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> domainControllerIpAddresses;
        private String externalAccessIpAddress;
        private String id;
        private String location;
        private String serviceStatus;
        private String subnetId;
        public Builder() {}
        public Builder(GetServiceReplicaSet defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.domainControllerIpAddresses = defaults.domainControllerIpAddresses;
    	      this.externalAccessIpAddress = defaults.externalAccessIpAddress;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.serviceStatus = defaults.serviceStatus;
    	      this.subnetId = defaults.subnetId;
        }

        @CustomType.Setter
        public Builder domainControllerIpAddresses(List<String> domainControllerIpAddresses) {
            this.domainControllerIpAddresses = Objects.requireNonNull(domainControllerIpAddresses);
            return this;
        }
        public Builder domainControllerIpAddresses(String... domainControllerIpAddresses) {
            return domainControllerIpAddresses(List.of(domainControllerIpAddresses));
        }
        @CustomType.Setter
        public Builder externalAccessIpAddress(String externalAccessIpAddress) {
            this.externalAccessIpAddress = Objects.requireNonNull(externalAccessIpAddress);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder serviceStatus(String serviceStatus) {
            this.serviceStatus = Objects.requireNonNull(serviceStatus);
            return this;
        }
        @CustomType.Setter
        public Builder subnetId(String subnetId) {
            this.subnetId = Objects.requireNonNull(subnetId);
            return this;
        }
        public GetServiceReplicaSet build() {
            final var _resultValue = new GetServiceReplicaSet();
            _resultValue.domainControllerIpAddresses = domainControllerIpAddresses;
            _resultValue.externalAccessIpAddress = externalAccessIpAddress;
            _resultValue.id = id;
            _resultValue.location = location;
            _resultValue.serviceStatus = serviceStatus;
            _resultValue.subnetId = subnetId;
            return _resultValue;
        }
    }
}
