// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appservice.outputs;

import com.pulumi.azure.appservice.outputs.WindowsWebAppSiteConfigApplicationStack;
import com.pulumi.azure.appservice.outputs.WindowsWebAppSiteConfigAutoHealSetting;
import com.pulumi.azure.appservice.outputs.WindowsWebAppSiteConfigCors;
import com.pulumi.azure.appservice.outputs.WindowsWebAppSiteConfigIpRestriction;
import com.pulumi.azure.appservice.outputs.WindowsWebAppSiteConfigScmIpRestriction;
import com.pulumi.azure.appservice.outputs.WindowsWebAppSiteConfigVirtualApplication;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class WindowsWebAppSiteConfig {
    /**
     * @return If this Windows Web App is Always On enabled. Defaults to `true`.
     * 
     */
    private final @Nullable Boolean alwaysOn;
    private final @Nullable String apiDefinitionUrl;
    /**
     * @return The API Management API ID this Windows Web App Slot is associated with.
     * 
     */
    private final @Nullable String apiManagementApiId;
    /**
     * @return The App command line to launch.
     * 
     */
    private final @Nullable String appCommandLine;
    /**
     * @return A `application_stack` block as defined above.
     * 
     */
    private final @Nullable WindowsWebAppSiteConfigApplicationStack applicationStack;
    /**
     * @return Should Auto heal rules be enabled. Required with `auto_heal_setting`.
     * 
     */
    private final @Nullable Boolean autoHealEnabled;
    /**
     * @return A `auto_heal_setting` block as defined above. Required with `auto_heal`.
     * 
     */
    private final @Nullable WindowsWebAppSiteConfigAutoHealSetting autoHealSetting;
    /**
     * @return The Client ID of the Managed Service Identity to use for connections to the Azure Container Registry.
     * 
     */
    private final @Nullable String containerRegistryManagedIdentityClientId;
    /**
     * @return Should connections for Azure Container Registry use Managed Identity.
     * 
     */
    private final @Nullable Boolean containerRegistryUseManagedIdentity;
    /**
     * @return A `cors` block as defined above.
     * 
     */
    private final @Nullable WindowsWebAppSiteConfigCors cors;
    /**
     * @return Specifies a list of Default Documents for the Windows Web App.
     * 
     */
    private final @Nullable List<String> defaultDocuments;
    private final @Nullable Boolean detailedErrorLoggingEnabled;
    /**
     * @return The State of FTP / FTPS service. Possible values include: `AllAllowed`, `FtpsOnly`, `Disabled`.
     * 
     */
    private final @Nullable String ftpsState;
    /**
     * @return The amount of time in minutes that a node can be unhealthy before being removed from the load balancer. Possible values are between `2` and `10`. Only valid in conjunction with `health_check_path`.
     * 
     */
    private final @Nullable Integer healthCheckEvictionTimeInMin;
    /**
     * @return The path to the Health Check.
     * 
     */
    private final @Nullable String healthCheckPath;
    /**
     * @return Should the HTTP2 be enabled?
     * 
     */
    private final @Nullable Boolean http2Enabled;
    /**
     * @return One or more `ip_restriction` blocks as defined above.
     * 
     */
    private final @Nullable List<WindowsWebAppSiteConfigIpRestriction> ipRestrictions;
    private final @Nullable String linuxFxVersion;
    /**
     * @return The Site load balancing. Possible values include: `WeightedRoundRobin`, `LeastRequests`, `LeastResponseTime`, `WeightedTotalTraffic`, `RequestHash`, `PerSiteRoundRobin`. Defaults to `LeastRequests` if omitted.
     * 
     */
    private final @Nullable String loadBalancingMode;
    /**
     * @return Use Local MySQL. Defaults to `false`.
     * 
     */
    private final @Nullable Boolean localMysqlEnabled;
    /**
     * @return Managed pipeline mode. Possible values include: `Integrated`, `Classic`.
     * 
     */
    private final @Nullable String managedPipelineMode;
    /**
     * @return The configures the minimum version of TLS required for SSL requests. Possible values include: `1.0`, `1.1`, and  `1.2`. Defaults to `1.2`.
     * 
     */
    private final @Nullable String minimumTlsVersion;
    private final @Nullable Boolean remoteDebuggingEnabled;
    /**
     * @return The Remote Debugging Version. Possible values include `VS2017` and `VS2019`
     * 
     */
    private final @Nullable String remoteDebuggingVersion;
    /**
     * @return One or more `scm_ip_restriction` blocks as defined above.
     * 
     */
    private final @Nullable List<WindowsWebAppSiteConfigScmIpRestriction> scmIpRestrictions;
    /**
     * @return The configures the minimum version of TLS required for SSL requests to the SCM site Possible values include: `1.0`, `1.1`, and  `1.2`. Defaults to `1.2`.
     * 
     */
    private final @Nullable String scmMinimumTlsVersion;
    private final @Nullable String scmType;
    /**
     * @return Should the Windows Web App `ip_restriction` configuration be used for the SCM also.
     * 
     */
    private final @Nullable Boolean scmUseMainIpRestriction;
    /**
     * @return Should the Windows Web App use a 32-bit worker.
     * 
     */
    private final @Nullable Boolean use32BitWorker;
    /**
     * @return One or more `virtual_application` blocks as defined below.
     * 
     */
    private final @Nullable List<WindowsWebAppSiteConfigVirtualApplication> virtualApplications;
    /**
     * @return Should all outbound traffic to have NAT Gateways, Network Security Groups and User Defined Routes applied? Defaults to `false`.
     * 
     */
    private final @Nullable Boolean vnetRouteAllEnabled;
    /**
     * @return Should Web Sockets be enabled. Defaults to `false`.
     * 
     */
    private final @Nullable Boolean websocketsEnabled;
    private final @Nullable String windowsFxVersion;
    /**
     * @return The number of Workers for this Windows App Service.
     * 
     */
    private final @Nullable Integer workerCount;

    @CustomType.Constructor
    private WindowsWebAppSiteConfig(
        @CustomType.Parameter("alwaysOn") @Nullable Boolean alwaysOn,
        @CustomType.Parameter("apiDefinitionUrl") @Nullable String apiDefinitionUrl,
        @CustomType.Parameter("apiManagementApiId") @Nullable String apiManagementApiId,
        @CustomType.Parameter("appCommandLine") @Nullable String appCommandLine,
        @CustomType.Parameter("applicationStack") @Nullable WindowsWebAppSiteConfigApplicationStack applicationStack,
        @CustomType.Parameter("autoHealEnabled") @Nullable Boolean autoHealEnabled,
        @CustomType.Parameter("autoHealSetting") @Nullable WindowsWebAppSiteConfigAutoHealSetting autoHealSetting,
        @CustomType.Parameter("containerRegistryManagedIdentityClientId") @Nullable String containerRegistryManagedIdentityClientId,
        @CustomType.Parameter("containerRegistryUseManagedIdentity") @Nullable Boolean containerRegistryUseManagedIdentity,
        @CustomType.Parameter("cors") @Nullable WindowsWebAppSiteConfigCors cors,
        @CustomType.Parameter("defaultDocuments") @Nullable List<String> defaultDocuments,
        @CustomType.Parameter("detailedErrorLoggingEnabled") @Nullable Boolean detailedErrorLoggingEnabled,
        @CustomType.Parameter("ftpsState") @Nullable String ftpsState,
        @CustomType.Parameter("healthCheckEvictionTimeInMin") @Nullable Integer healthCheckEvictionTimeInMin,
        @CustomType.Parameter("healthCheckPath") @Nullable String healthCheckPath,
        @CustomType.Parameter("http2Enabled") @Nullable Boolean http2Enabled,
        @CustomType.Parameter("ipRestrictions") @Nullable List<WindowsWebAppSiteConfigIpRestriction> ipRestrictions,
        @CustomType.Parameter("linuxFxVersion") @Nullable String linuxFxVersion,
        @CustomType.Parameter("loadBalancingMode") @Nullable String loadBalancingMode,
        @CustomType.Parameter("localMysqlEnabled") @Nullable Boolean localMysqlEnabled,
        @CustomType.Parameter("managedPipelineMode") @Nullable String managedPipelineMode,
        @CustomType.Parameter("minimumTlsVersion") @Nullable String minimumTlsVersion,
        @CustomType.Parameter("remoteDebuggingEnabled") @Nullable Boolean remoteDebuggingEnabled,
        @CustomType.Parameter("remoteDebuggingVersion") @Nullable String remoteDebuggingVersion,
        @CustomType.Parameter("scmIpRestrictions") @Nullable List<WindowsWebAppSiteConfigScmIpRestriction> scmIpRestrictions,
        @CustomType.Parameter("scmMinimumTlsVersion") @Nullable String scmMinimumTlsVersion,
        @CustomType.Parameter("scmType") @Nullable String scmType,
        @CustomType.Parameter("scmUseMainIpRestriction") @Nullable Boolean scmUseMainIpRestriction,
        @CustomType.Parameter("use32BitWorker") @Nullable Boolean use32BitWorker,
        @CustomType.Parameter("virtualApplications") @Nullable List<WindowsWebAppSiteConfigVirtualApplication> virtualApplications,
        @CustomType.Parameter("vnetRouteAllEnabled") @Nullable Boolean vnetRouteAllEnabled,
        @CustomType.Parameter("websocketsEnabled") @Nullable Boolean websocketsEnabled,
        @CustomType.Parameter("windowsFxVersion") @Nullable String windowsFxVersion,
        @CustomType.Parameter("workerCount") @Nullable Integer workerCount) {
        this.alwaysOn = alwaysOn;
        this.apiDefinitionUrl = apiDefinitionUrl;
        this.apiManagementApiId = apiManagementApiId;
        this.appCommandLine = appCommandLine;
        this.applicationStack = applicationStack;
        this.autoHealEnabled = autoHealEnabled;
        this.autoHealSetting = autoHealSetting;
        this.containerRegistryManagedIdentityClientId = containerRegistryManagedIdentityClientId;
        this.containerRegistryUseManagedIdentity = containerRegistryUseManagedIdentity;
        this.cors = cors;
        this.defaultDocuments = defaultDocuments;
        this.detailedErrorLoggingEnabled = detailedErrorLoggingEnabled;
        this.ftpsState = ftpsState;
        this.healthCheckEvictionTimeInMin = healthCheckEvictionTimeInMin;
        this.healthCheckPath = healthCheckPath;
        this.http2Enabled = http2Enabled;
        this.ipRestrictions = ipRestrictions;
        this.linuxFxVersion = linuxFxVersion;
        this.loadBalancingMode = loadBalancingMode;
        this.localMysqlEnabled = localMysqlEnabled;
        this.managedPipelineMode = managedPipelineMode;
        this.minimumTlsVersion = minimumTlsVersion;
        this.remoteDebuggingEnabled = remoteDebuggingEnabled;
        this.remoteDebuggingVersion = remoteDebuggingVersion;
        this.scmIpRestrictions = scmIpRestrictions;
        this.scmMinimumTlsVersion = scmMinimumTlsVersion;
        this.scmType = scmType;
        this.scmUseMainIpRestriction = scmUseMainIpRestriction;
        this.use32BitWorker = use32BitWorker;
        this.virtualApplications = virtualApplications;
        this.vnetRouteAllEnabled = vnetRouteAllEnabled;
        this.websocketsEnabled = websocketsEnabled;
        this.windowsFxVersion = windowsFxVersion;
        this.workerCount = workerCount;
    }

    /**
     * @return If this Windows Web App is Always On enabled. Defaults to `true`.
     * 
     */
    public Optional<Boolean> alwaysOn() {
        return Optional.ofNullable(this.alwaysOn);
    }
    public Optional<String> apiDefinitionUrl() {
        return Optional.ofNullable(this.apiDefinitionUrl);
    }
    /**
     * @return The API Management API ID this Windows Web App Slot is associated with.
     * 
     */
    public Optional<String> apiManagementApiId() {
        return Optional.ofNullable(this.apiManagementApiId);
    }
    /**
     * @return The App command line to launch.
     * 
     */
    public Optional<String> appCommandLine() {
        return Optional.ofNullable(this.appCommandLine);
    }
    /**
     * @return A `application_stack` block as defined above.
     * 
     */
    public Optional<WindowsWebAppSiteConfigApplicationStack> applicationStack() {
        return Optional.ofNullable(this.applicationStack);
    }
    /**
     * @return Should Auto heal rules be enabled. Required with `auto_heal_setting`.
     * 
     */
    public Optional<Boolean> autoHealEnabled() {
        return Optional.ofNullable(this.autoHealEnabled);
    }
    /**
     * @return A `auto_heal_setting` block as defined above. Required with `auto_heal`.
     * 
     */
    public Optional<WindowsWebAppSiteConfigAutoHealSetting> autoHealSetting() {
        return Optional.ofNullable(this.autoHealSetting);
    }
    /**
     * @return The Client ID of the Managed Service Identity to use for connections to the Azure Container Registry.
     * 
     */
    public Optional<String> containerRegistryManagedIdentityClientId() {
        return Optional.ofNullable(this.containerRegistryManagedIdentityClientId);
    }
    /**
     * @return Should connections for Azure Container Registry use Managed Identity.
     * 
     */
    public Optional<Boolean> containerRegistryUseManagedIdentity() {
        return Optional.ofNullable(this.containerRegistryUseManagedIdentity);
    }
    /**
     * @return A `cors` block as defined above.
     * 
     */
    public Optional<WindowsWebAppSiteConfigCors> cors() {
        return Optional.ofNullable(this.cors);
    }
    /**
     * @return Specifies a list of Default Documents for the Windows Web App.
     * 
     */
    public List<String> defaultDocuments() {
        return this.defaultDocuments == null ? List.of() : this.defaultDocuments;
    }
    public Optional<Boolean> detailedErrorLoggingEnabled() {
        return Optional.ofNullable(this.detailedErrorLoggingEnabled);
    }
    /**
     * @return The State of FTP / FTPS service. Possible values include: `AllAllowed`, `FtpsOnly`, `Disabled`.
     * 
     */
    public Optional<String> ftpsState() {
        return Optional.ofNullable(this.ftpsState);
    }
    /**
     * @return The amount of time in minutes that a node can be unhealthy before being removed from the load balancer. Possible values are between `2` and `10`. Only valid in conjunction with `health_check_path`.
     * 
     */
    public Optional<Integer> healthCheckEvictionTimeInMin() {
        return Optional.ofNullable(this.healthCheckEvictionTimeInMin);
    }
    /**
     * @return The path to the Health Check.
     * 
     */
    public Optional<String> healthCheckPath() {
        return Optional.ofNullable(this.healthCheckPath);
    }
    /**
     * @return Should the HTTP2 be enabled?
     * 
     */
    public Optional<Boolean> http2Enabled() {
        return Optional.ofNullable(this.http2Enabled);
    }
    /**
     * @return One or more `ip_restriction` blocks as defined above.
     * 
     */
    public List<WindowsWebAppSiteConfigIpRestriction> ipRestrictions() {
        return this.ipRestrictions == null ? List.of() : this.ipRestrictions;
    }
    public Optional<String> linuxFxVersion() {
        return Optional.ofNullable(this.linuxFxVersion);
    }
    /**
     * @return The Site load balancing. Possible values include: `WeightedRoundRobin`, `LeastRequests`, `LeastResponseTime`, `WeightedTotalTraffic`, `RequestHash`, `PerSiteRoundRobin`. Defaults to `LeastRequests` if omitted.
     * 
     */
    public Optional<String> loadBalancingMode() {
        return Optional.ofNullable(this.loadBalancingMode);
    }
    /**
     * @return Use Local MySQL. Defaults to `false`.
     * 
     */
    public Optional<Boolean> localMysqlEnabled() {
        return Optional.ofNullable(this.localMysqlEnabled);
    }
    /**
     * @return Managed pipeline mode. Possible values include: `Integrated`, `Classic`.
     * 
     */
    public Optional<String> managedPipelineMode() {
        return Optional.ofNullable(this.managedPipelineMode);
    }
    /**
     * @return The configures the minimum version of TLS required for SSL requests. Possible values include: `1.0`, `1.1`, and  `1.2`. Defaults to `1.2`.
     * 
     */
    public Optional<String> minimumTlsVersion() {
        return Optional.ofNullable(this.minimumTlsVersion);
    }
    public Optional<Boolean> remoteDebuggingEnabled() {
        return Optional.ofNullable(this.remoteDebuggingEnabled);
    }
    /**
     * @return The Remote Debugging Version. Possible values include `VS2017` and `VS2019`
     * 
     */
    public Optional<String> remoteDebuggingVersion() {
        return Optional.ofNullable(this.remoteDebuggingVersion);
    }
    /**
     * @return One or more `scm_ip_restriction` blocks as defined above.
     * 
     */
    public List<WindowsWebAppSiteConfigScmIpRestriction> scmIpRestrictions() {
        return this.scmIpRestrictions == null ? List.of() : this.scmIpRestrictions;
    }
    /**
     * @return The configures the minimum version of TLS required for SSL requests to the SCM site Possible values include: `1.0`, `1.1`, and  `1.2`. Defaults to `1.2`.
     * 
     */
    public Optional<String> scmMinimumTlsVersion() {
        return Optional.ofNullable(this.scmMinimumTlsVersion);
    }
    public Optional<String> scmType() {
        return Optional.ofNullable(this.scmType);
    }
    /**
     * @return Should the Windows Web App `ip_restriction` configuration be used for the SCM also.
     * 
     */
    public Optional<Boolean> scmUseMainIpRestriction() {
        return Optional.ofNullable(this.scmUseMainIpRestriction);
    }
    /**
     * @return Should the Windows Web App use a 32-bit worker.
     * 
     */
    public Optional<Boolean> use32BitWorker() {
        return Optional.ofNullable(this.use32BitWorker);
    }
    /**
     * @return One or more `virtual_application` blocks as defined below.
     * 
     */
    public List<WindowsWebAppSiteConfigVirtualApplication> virtualApplications() {
        return this.virtualApplications == null ? List.of() : this.virtualApplications;
    }
    /**
     * @return Should all outbound traffic to have NAT Gateways, Network Security Groups and User Defined Routes applied? Defaults to `false`.
     * 
     */
    public Optional<Boolean> vnetRouteAllEnabled() {
        return Optional.ofNullable(this.vnetRouteAllEnabled);
    }
    /**
     * @return Should Web Sockets be enabled. Defaults to `false`.
     * 
     */
    public Optional<Boolean> websocketsEnabled() {
        return Optional.ofNullable(this.websocketsEnabled);
    }
    public Optional<String> windowsFxVersion() {
        return Optional.ofNullable(this.windowsFxVersion);
    }
    /**
     * @return The number of Workers for this Windows App Service.
     * 
     */
    public Optional<Integer> workerCount() {
        return Optional.ofNullable(this.workerCount);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WindowsWebAppSiteConfig defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Boolean alwaysOn;
        private @Nullable String apiDefinitionUrl;
        private @Nullable String apiManagementApiId;
        private @Nullable String appCommandLine;
        private @Nullable WindowsWebAppSiteConfigApplicationStack applicationStack;
        private @Nullable Boolean autoHealEnabled;
        private @Nullable WindowsWebAppSiteConfigAutoHealSetting autoHealSetting;
        private @Nullable String containerRegistryManagedIdentityClientId;
        private @Nullable Boolean containerRegistryUseManagedIdentity;
        private @Nullable WindowsWebAppSiteConfigCors cors;
        private @Nullable List<String> defaultDocuments;
        private @Nullable Boolean detailedErrorLoggingEnabled;
        private @Nullable String ftpsState;
        private @Nullable Integer healthCheckEvictionTimeInMin;
        private @Nullable String healthCheckPath;
        private @Nullable Boolean http2Enabled;
        private @Nullable List<WindowsWebAppSiteConfigIpRestriction> ipRestrictions;
        private @Nullable String linuxFxVersion;
        private @Nullable String loadBalancingMode;
        private @Nullable Boolean localMysqlEnabled;
        private @Nullable String managedPipelineMode;
        private @Nullable String minimumTlsVersion;
        private @Nullable Boolean remoteDebuggingEnabled;
        private @Nullable String remoteDebuggingVersion;
        private @Nullable List<WindowsWebAppSiteConfigScmIpRestriction> scmIpRestrictions;
        private @Nullable String scmMinimumTlsVersion;
        private @Nullable String scmType;
        private @Nullable Boolean scmUseMainIpRestriction;
        private @Nullable Boolean use32BitWorker;
        private @Nullable List<WindowsWebAppSiteConfigVirtualApplication> virtualApplications;
        private @Nullable Boolean vnetRouteAllEnabled;
        private @Nullable Boolean websocketsEnabled;
        private @Nullable String windowsFxVersion;
        private @Nullable Integer workerCount;

        public Builder() {
    	      // Empty
        }

        public Builder(WindowsWebAppSiteConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alwaysOn = defaults.alwaysOn;
    	      this.apiDefinitionUrl = defaults.apiDefinitionUrl;
    	      this.apiManagementApiId = defaults.apiManagementApiId;
    	      this.appCommandLine = defaults.appCommandLine;
    	      this.applicationStack = defaults.applicationStack;
    	      this.autoHealEnabled = defaults.autoHealEnabled;
    	      this.autoHealSetting = defaults.autoHealSetting;
    	      this.containerRegistryManagedIdentityClientId = defaults.containerRegistryManagedIdentityClientId;
    	      this.containerRegistryUseManagedIdentity = defaults.containerRegistryUseManagedIdentity;
    	      this.cors = defaults.cors;
    	      this.defaultDocuments = defaults.defaultDocuments;
    	      this.detailedErrorLoggingEnabled = defaults.detailedErrorLoggingEnabled;
    	      this.ftpsState = defaults.ftpsState;
    	      this.healthCheckEvictionTimeInMin = defaults.healthCheckEvictionTimeInMin;
    	      this.healthCheckPath = defaults.healthCheckPath;
    	      this.http2Enabled = defaults.http2Enabled;
    	      this.ipRestrictions = defaults.ipRestrictions;
    	      this.linuxFxVersion = defaults.linuxFxVersion;
    	      this.loadBalancingMode = defaults.loadBalancingMode;
    	      this.localMysqlEnabled = defaults.localMysqlEnabled;
    	      this.managedPipelineMode = defaults.managedPipelineMode;
    	      this.minimumTlsVersion = defaults.minimumTlsVersion;
    	      this.remoteDebuggingEnabled = defaults.remoteDebuggingEnabled;
    	      this.remoteDebuggingVersion = defaults.remoteDebuggingVersion;
    	      this.scmIpRestrictions = defaults.scmIpRestrictions;
    	      this.scmMinimumTlsVersion = defaults.scmMinimumTlsVersion;
    	      this.scmType = defaults.scmType;
    	      this.scmUseMainIpRestriction = defaults.scmUseMainIpRestriction;
    	      this.use32BitWorker = defaults.use32BitWorker;
    	      this.virtualApplications = defaults.virtualApplications;
    	      this.vnetRouteAllEnabled = defaults.vnetRouteAllEnabled;
    	      this.websocketsEnabled = defaults.websocketsEnabled;
    	      this.windowsFxVersion = defaults.windowsFxVersion;
    	      this.workerCount = defaults.workerCount;
        }

        public Builder alwaysOn(@Nullable Boolean alwaysOn) {
            this.alwaysOn = alwaysOn;
            return this;
        }
        public Builder apiDefinitionUrl(@Nullable String apiDefinitionUrl) {
            this.apiDefinitionUrl = apiDefinitionUrl;
            return this;
        }
        public Builder apiManagementApiId(@Nullable String apiManagementApiId) {
            this.apiManagementApiId = apiManagementApiId;
            return this;
        }
        public Builder appCommandLine(@Nullable String appCommandLine) {
            this.appCommandLine = appCommandLine;
            return this;
        }
        public Builder applicationStack(@Nullable WindowsWebAppSiteConfigApplicationStack applicationStack) {
            this.applicationStack = applicationStack;
            return this;
        }
        public Builder autoHealEnabled(@Nullable Boolean autoHealEnabled) {
            this.autoHealEnabled = autoHealEnabled;
            return this;
        }
        public Builder autoHealSetting(@Nullable WindowsWebAppSiteConfigAutoHealSetting autoHealSetting) {
            this.autoHealSetting = autoHealSetting;
            return this;
        }
        public Builder containerRegistryManagedIdentityClientId(@Nullable String containerRegistryManagedIdentityClientId) {
            this.containerRegistryManagedIdentityClientId = containerRegistryManagedIdentityClientId;
            return this;
        }
        public Builder containerRegistryUseManagedIdentity(@Nullable Boolean containerRegistryUseManagedIdentity) {
            this.containerRegistryUseManagedIdentity = containerRegistryUseManagedIdentity;
            return this;
        }
        public Builder cors(@Nullable WindowsWebAppSiteConfigCors cors) {
            this.cors = cors;
            return this;
        }
        public Builder defaultDocuments(@Nullable List<String> defaultDocuments) {
            this.defaultDocuments = defaultDocuments;
            return this;
        }
        public Builder defaultDocuments(String... defaultDocuments) {
            return defaultDocuments(List.of(defaultDocuments));
        }
        public Builder detailedErrorLoggingEnabled(@Nullable Boolean detailedErrorLoggingEnabled) {
            this.detailedErrorLoggingEnabled = detailedErrorLoggingEnabled;
            return this;
        }
        public Builder ftpsState(@Nullable String ftpsState) {
            this.ftpsState = ftpsState;
            return this;
        }
        public Builder healthCheckEvictionTimeInMin(@Nullable Integer healthCheckEvictionTimeInMin) {
            this.healthCheckEvictionTimeInMin = healthCheckEvictionTimeInMin;
            return this;
        }
        public Builder healthCheckPath(@Nullable String healthCheckPath) {
            this.healthCheckPath = healthCheckPath;
            return this;
        }
        public Builder http2Enabled(@Nullable Boolean http2Enabled) {
            this.http2Enabled = http2Enabled;
            return this;
        }
        public Builder ipRestrictions(@Nullable List<WindowsWebAppSiteConfigIpRestriction> ipRestrictions) {
            this.ipRestrictions = ipRestrictions;
            return this;
        }
        public Builder ipRestrictions(WindowsWebAppSiteConfigIpRestriction... ipRestrictions) {
            return ipRestrictions(List.of(ipRestrictions));
        }
        public Builder linuxFxVersion(@Nullable String linuxFxVersion) {
            this.linuxFxVersion = linuxFxVersion;
            return this;
        }
        public Builder loadBalancingMode(@Nullable String loadBalancingMode) {
            this.loadBalancingMode = loadBalancingMode;
            return this;
        }
        public Builder localMysqlEnabled(@Nullable Boolean localMysqlEnabled) {
            this.localMysqlEnabled = localMysqlEnabled;
            return this;
        }
        public Builder managedPipelineMode(@Nullable String managedPipelineMode) {
            this.managedPipelineMode = managedPipelineMode;
            return this;
        }
        public Builder minimumTlsVersion(@Nullable String minimumTlsVersion) {
            this.minimumTlsVersion = minimumTlsVersion;
            return this;
        }
        public Builder remoteDebuggingEnabled(@Nullable Boolean remoteDebuggingEnabled) {
            this.remoteDebuggingEnabled = remoteDebuggingEnabled;
            return this;
        }
        public Builder remoteDebuggingVersion(@Nullable String remoteDebuggingVersion) {
            this.remoteDebuggingVersion = remoteDebuggingVersion;
            return this;
        }
        public Builder scmIpRestrictions(@Nullable List<WindowsWebAppSiteConfigScmIpRestriction> scmIpRestrictions) {
            this.scmIpRestrictions = scmIpRestrictions;
            return this;
        }
        public Builder scmIpRestrictions(WindowsWebAppSiteConfigScmIpRestriction... scmIpRestrictions) {
            return scmIpRestrictions(List.of(scmIpRestrictions));
        }
        public Builder scmMinimumTlsVersion(@Nullable String scmMinimumTlsVersion) {
            this.scmMinimumTlsVersion = scmMinimumTlsVersion;
            return this;
        }
        public Builder scmType(@Nullable String scmType) {
            this.scmType = scmType;
            return this;
        }
        public Builder scmUseMainIpRestriction(@Nullable Boolean scmUseMainIpRestriction) {
            this.scmUseMainIpRestriction = scmUseMainIpRestriction;
            return this;
        }
        public Builder use32BitWorker(@Nullable Boolean use32BitWorker) {
            this.use32BitWorker = use32BitWorker;
            return this;
        }
        public Builder virtualApplications(@Nullable List<WindowsWebAppSiteConfigVirtualApplication> virtualApplications) {
            this.virtualApplications = virtualApplications;
            return this;
        }
        public Builder virtualApplications(WindowsWebAppSiteConfigVirtualApplication... virtualApplications) {
            return virtualApplications(List.of(virtualApplications));
        }
        public Builder vnetRouteAllEnabled(@Nullable Boolean vnetRouteAllEnabled) {
            this.vnetRouteAllEnabled = vnetRouteAllEnabled;
            return this;
        }
        public Builder websocketsEnabled(@Nullable Boolean websocketsEnabled) {
            this.websocketsEnabled = websocketsEnabled;
            return this;
        }
        public Builder windowsFxVersion(@Nullable String windowsFxVersion) {
            this.windowsFxVersion = windowsFxVersion;
            return this;
        }
        public Builder workerCount(@Nullable Integer workerCount) {
            this.workerCount = workerCount;
            return this;
        }        public WindowsWebAppSiteConfig build() {
            return new WindowsWebAppSiteConfig(alwaysOn, apiDefinitionUrl, apiManagementApiId, appCommandLine, applicationStack, autoHealEnabled, autoHealSetting, containerRegistryManagedIdentityClientId, containerRegistryUseManagedIdentity, cors, defaultDocuments, detailedErrorLoggingEnabled, ftpsState, healthCheckEvictionTimeInMin, healthCheckPath, http2Enabled, ipRestrictions, linuxFxVersion, loadBalancingMode, localMysqlEnabled, managedPipelineMode, minimumTlsVersion, remoteDebuggingEnabled, remoteDebuggingVersion, scmIpRestrictions, scmMinimumTlsVersion, scmType, scmUseMainIpRestriction, use32BitWorker, virtualApplications, vnetRouteAllEnabled, websocketsEnabled, windowsFxVersion, workerCount);
        }
    }
}
