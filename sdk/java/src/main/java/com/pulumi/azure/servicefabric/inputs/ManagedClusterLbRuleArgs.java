// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.servicefabric.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagedClusterLbRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagedClusterLbRuleArgs Empty = new ManagedClusterLbRuleArgs();

    /**
     * LB Backend port.
     * 
     */
    @Import(name="backendPort", required=true)
    private Output<Integer> backendPort;

    /**
     * @return LB Backend port.
     * 
     */
    public Output<Integer> backendPort() {
        return this.backendPort;
    }

    /**
     * LB Frontend port.
     * 
     */
    @Import(name="frontendPort", required=true)
    private Output<Integer> frontendPort;

    /**
     * @return LB Frontend port.
     * 
     */
    public Output<Integer> frontendPort() {
        return this.frontendPort;
    }

    /**
     * Protocol for the probe. Can be one of `tcp`, `udp`, `http`, or `https`.
     * 
     */
    @Import(name="probeProtocol", required=true)
    private Output<String> probeProtocol;

    /**
     * @return Protocol for the probe. Can be one of `tcp`, `udp`, `http`, or `https`.
     * 
     */
    public Output<String> probeProtocol() {
        return this.probeProtocol;
    }

    /**
     * Path for the probe to check, when probe protocol is set to `http`.
     * 
     */
    @Import(name="probeRequestPath")
    private @Nullable Output<String> probeRequestPath;

    /**
     * @return Path for the probe to check, when probe protocol is set to `http`.
     * 
     */
    public Optional<Output<String>> probeRequestPath() {
        return Optional.ofNullable(this.probeRequestPath);
    }

    /**
     * The transport protocol used in this rule. Can be one of `tcp` or `udp`.
     * 
     */
    @Import(name="protocol", required=true)
    private Output<String> protocol;

    /**
     * @return The transport protocol used in this rule. Can be one of `tcp` or `udp`.
     * 
     */
    public Output<String> protocol() {
        return this.protocol;
    }

    private ManagedClusterLbRuleArgs() {}

    private ManagedClusterLbRuleArgs(ManagedClusterLbRuleArgs $) {
        this.backendPort = $.backendPort;
        this.frontendPort = $.frontendPort;
        this.probeProtocol = $.probeProtocol;
        this.probeRequestPath = $.probeRequestPath;
        this.protocol = $.protocol;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedClusterLbRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedClusterLbRuleArgs $;

        public Builder() {
            $ = new ManagedClusterLbRuleArgs();
        }

        public Builder(ManagedClusterLbRuleArgs defaults) {
            $ = new ManagedClusterLbRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backendPort LB Backend port.
         * 
         * @return builder
         * 
         */
        public Builder backendPort(Output<Integer> backendPort) {
            $.backendPort = backendPort;
            return this;
        }

        /**
         * @param backendPort LB Backend port.
         * 
         * @return builder
         * 
         */
        public Builder backendPort(Integer backendPort) {
            return backendPort(Output.of(backendPort));
        }

        /**
         * @param frontendPort LB Frontend port.
         * 
         * @return builder
         * 
         */
        public Builder frontendPort(Output<Integer> frontendPort) {
            $.frontendPort = frontendPort;
            return this;
        }

        /**
         * @param frontendPort LB Frontend port.
         * 
         * @return builder
         * 
         */
        public Builder frontendPort(Integer frontendPort) {
            return frontendPort(Output.of(frontendPort));
        }

        /**
         * @param probeProtocol Protocol for the probe. Can be one of `tcp`, `udp`, `http`, or `https`.
         * 
         * @return builder
         * 
         */
        public Builder probeProtocol(Output<String> probeProtocol) {
            $.probeProtocol = probeProtocol;
            return this;
        }

        /**
         * @param probeProtocol Protocol for the probe. Can be one of `tcp`, `udp`, `http`, or `https`.
         * 
         * @return builder
         * 
         */
        public Builder probeProtocol(String probeProtocol) {
            return probeProtocol(Output.of(probeProtocol));
        }

        /**
         * @param probeRequestPath Path for the probe to check, when probe protocol is set to `http`.
         * 
         * @return builder
         * 
         */
        public Builder probeRequestPath(@Nullable Output<String> probeRequestPath) {
            $.probeRequestPath = probeRequestPath;
            return this;
        }

        /**
         * @param probeRequestPath Path for the probe to check, when probe protocol is set to `http`.
         * 
         * @return builder
         * 
         */
        public Builder probeRequestPath(String probeRequestPath) {
            return probeRequestPath(Output.of(probeRequestPath));
        }

        /**
         * @param protocol The transport protocol used in this rule. Can be one of `tcp` or `udp`.
         * 
         * @return builder
         * 
         */
        public Builder protocol(Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol The transport protocol used in this rule. Can be one of `tcp` or `udp`.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        public ManagedClusterLbRuleArgs build() {
            if ($.backendPort == null) {
                throw new MissingRequiredPropertyException("ManagedClusterLbRuleArgs", "backendPort");
            }
            if ($.frontendPort == null) {
                throw new MissingRequiredPropertyException("ManagedClusterLbRuleArgs", "frontendPort");
            }
            if ($.probeProtocol == null) {
                throw new MissingRequiredPropertyException("ManagedClusterLbRuleArgs", "probeProtocol");
            }
            if ($.protocol == null) {
                throw new MissingRequiredPropertyException("ManagedClusterLbRuleArgs", "protocol");
            }
            return $;
        }
    }

}
