// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerservice.outputs;

import com.pulumi.azure.containerservice.outputs.GetClusterNodePoolUpgradeSetting;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetClusterNodePoolResult {
    /**
     * @return Does this Node Pool have Auto-Scaling enabled?
     * 
     */
    private Boolean enableAutoScaling;
    /**
     * @return Do nodes in this Node Pool have a Public IP Address?
     * 
     */
    private Boolean enableNodePublicIp;
    /**
     * @return The eviction policy used for Virtual Machines in the Virtual Machine Scale Set, when `priority` is set to `Spot`.
     * 
     */
    private String evictionPolicy;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String kubernetesClusterName;
    /**
     * @return The maximum number of Nodes allowed when auto-scaling is enabled.
     * 
     */
    private Integer maxCount;
    /**
     * @return The maximum number of Pods allowed on each Node in this Node Pool.
     * 
     */
    private Integer maxPods;
    /**
     * @return The minimum number of Nodes allowed when auto-scaling is enabled.
     * 
     */
    private Integer minCount;
    /**
     * @return The Mode for this Node Pool, specifying how these Nodes should be used (for either System or User resources).
     * 
     */
    private String mode;
    private String name;
    /**
     * @return The current number of Nodes in the Node Pool.
     * 
     */
    private Integer nodeCount;
    /**
     * @return A map of Kubernetes Labels applied to each Node in this Node Pool.
     * 
     */
    private Map<String,String> nodeLabels;
    /**
     * @return Resource ID for the Public IP Addresses Prefix for the nodes in this Agent Pool.
     * 
     */
    private String nodePublicIpPrefixId;
    /**
     * @return A map of Kubernetes Taints applied to each Node in this Node Pool.
     * 
     */
    private List<String> nodeTaints;
    /**
     * @return The version of Kubernetes configured on each Node in this Node Pool.
     * 
     */
    private String orchestratorVersion;
    /**
     * @return The size of the OS Disk on each Node in this Node Pool.
     * 
     */
    private Integer osDiskSizeGb;
    /**
     * @return The type of the OS Disk on each Node in this Node Pool.
     * 
     */
    private String osDiskType;
    /**
     * @return The operating system used on each Node in this Node Pool.
     * 
     */
    private String osType;
    /**
     * @return The priority of the Virtual Machines in the Virtual Machine Scale Set backing this Node Pool.
     * 
     */
    private String priority;
    /**
     * @return The ID of the Proximity Placement Group where the Virtual Machine Scale Set backing this Node Pool will be placed.
     * 
     */
    private String proximityPlacementGroupId;
    private String resourceGroupName;
    /**
     * @return The maximum price being paid for Virtual Machines in this Scale Set. `-1` means the current on-demand price for a Virtual Machine.
     * 
     */
    private Double spotMaxPrice;
    /**
     * @return A mapping of tags assigned to the Kubernetes Cluster Node Pool.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return A `upgrade_settings` block as documented below.
     * 
     */
    private List<GetClusterNodePoolUpgradeSetting> upgradeSettings;
    /**
     * @return The size of the Virtual Machines used in the Virtual Machine Scale Set backing this Node Pool.
     * 
     */
    private String vmSize;
    /**
     * @return The ID of the Subnet in which this Node Pool exists.
     * 
     */
    private String vnetSubnetId;
    /**
     * @return A list of the Availability Zones where the Nodes in this Node Pool exist.
     * 
     */
    private List<String> zones;

    private GetClusterNodePoolResult() {}
    /**
     * @return Does this Node Pool have Auto-Scaling enabled?
     * 
     */
    public Boolean enableAutoScaling() {
        return this.enableAutoScaling;
    }
    /**
     * @return Do nodes in this Node Pool have a Public IP Address?
     * 
     */
    public Boolean enableNodePublicIp() {
        return this.enableNodePublicIp;
    }
    /**
     * @return The eviction policy used for Virtual Machines in the Virtual Machine Scale Set, when `priority` is set to `Spot`.
     * 
     */
    public String evictionPolicy() {
        return this.evictionPolicy;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String kubernetesClusterName() {
        return this.kubernetesClusterName;
    }
    /**
     * @return The maximum number of Nodes allowed when auto-scaling is enabled.
     * 
     */
    public Integer maxCount() {
        return this.maxCount;
    }
    /**
     * @return The maximum number of Pods allowed on each Node in this Node Pool.
     * 
     */
    public Integer maxPods() {
        return this.maxPods;
    }
    /**
     * @return The minimum number of Nodes allowed when auto-scaling is enabled.
     * 
     */
    public Integer minCount() {
        return this.minCount;
    }
    /**
     * @return The Mode for this Node Pool, specifying how these Nodes should be used (for either System or User resources).
     * 
     */
    public String mode() {
        return this.mode;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return The current number of Nodes in the Node Pool.
     * 
     */
    public Integer nodeCount() {
        return this.nodeCount;
    }
    /**
     * @return A map of Kubernetes Labels applied to each Node in this Node Pool.
     * 
     */
    public Map<String,String> nodeLabels() {
        return this.nodeLabels;
    }
    /**
     * @return Resource ID for the Public IP Addresses Prefix for the nodes in this Agent Pool.
     * 
     */
    public String nodePublicIpPrefixId() {
        return this.nodePublicIpPrefixId;
    }
    /**
     * @return A map of Kubernetes Taints applied to each Node in this Node Pool.
     * 
     */
    public List<String> nodeTaints() {
        return this.nodeTaints;
    }
    /**
     * @return The version of Kubernetes configured on each Node in this Node Pool.
     * 
     */
    public String orchestratorVersion() {
        return this.orchestratorVersion;
    }
    /**
     * @return The size of the OS Disk on each Node in this Node Pool.
     * 
     */
    public Integer osDiskSizeGb() {
        return this.osDiskSizeGb;
    }
    /**
     * @return The type of the OS Disk on each Node in this Node Pool.
     * 
     */
    public String osDiskType() {
        return this.osDiskType;
    }
    /**
     * @return The operating system used on each Node in this Node Pool.
     * 
     */
    public String osType() {
        return this.osType;
    }
    /**
     * @return The priority of the Virtual Machines in the Virtual Machine Scale Set backing this Node Pool.
     * 
     */
    public String priority() {
        return this.priority;
    }
    /**
     * @return The ID of the Proximity Placement Group where the Virtual Machine Scale Set backing this Node Pool will be placed.
     * 
     */
    public String proximityPlacementGroupId() {
        return this.proximityPlacementGroupId;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return The maximum price being paid for Virtual Machines in this Scale Set. `-1` means the current on-demand price for a Virtual Machine.
     * 
     */
    public Double spotMaxPrice() {
        return this.spotMaxPrice;
    }
    /**
     * @return A mapping of tags assigned to the Kubernetes Cluster Node Pool.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return A `upgrade_settings` block as documented below.
     * 
     */
    public List<GetClusterNodePoolUpgradeSetting> upgradeSettings() {
        return this.upgradeSettings;
    }
    /**
     * @return The size of the Virtual Machines used in the Virtual Machine Scale Set backing this Node Pool.
     * 
     */
    public String vmSize() {
        return this.vmSize;
    }
    /**
     * @return The ID of the Subnet in which this Node Pool exists.
     * 
     */
    public String vnetSubnetId() {
        return this.vnetSubnetId;
    }
    /**
     * @return A list of the Availability Zones where the Nodes in this Node Pool exist.
     * 
     */
    public List<String> zones() {
        return this.zones;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterNodePoolResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean enableAutoScaling;
        private Boolean enableNodePublicIp;
        private String evictionPolicy;
        private String id;
        private String kubernetesClusterName;
        private Integer maxCount;
        private Integer maxPods;
        private Integer minCount;
        private String mode;
        private String name;
        private Integer nodeCount;
        private Map<String,String> nodeLabels;
        private String nodePublicIpPrefixId;
        private List<String> nodeTaints;
        private String orchestratorVersion;
        private Integer osDiskSizeGb;
        private String osDiskType;
        private String osType;
        private String priority;
        private String proximityPlacementGroupId;
        private String resourceGroupName;
        private Double spotMaxPrice;
        private Map<String,String> tags;
        private List<GetClusterNodePoolUpgradeSetting> upgradeSettings;
        private String vmSize;
        private String vnetSubnetId;
        private List<String> zones;
        public Builder() {}
        public Builder(GetClusterNodePoolResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enableAutoScaling = defaults.enableAutoScaling;
    	      this.enableNodePublicIp = defaults.enableNodePublicIp;
    	      this.evictionPolicy = defaults.evictionPolicy;
    	      this.id = defaults.id;
    	      this.kubernetesClusterName = defaults.kubernetesClusterName;
    	      this.maxCount = defaults.maxCount;
    	      this.maxPods = defaults.maxPods;
    	      this.minCount = defaults.minCount;
    	      this.mode = defaults.mode;
    	      this.name = defaults.name;
    	      this.nodeCount = defaults.nodeCount;
    	      this.nodeLabels = defaults.nodeLabels;
    	      this.nodePublicIpPrefixId = defaults.nodePublicIpPrefixId;
    	      this.nodeTaints = defaults.nodeTaints;
    	      this.orchestratorVersion = defaults.orchestratorVersion;
    	      this.osDiskSizeGb = defaults.osDiskSizeGb;
    	      this.osDiskType = defaults.osDiskType;
    	      this.osType = defaults.osType;
    	      this.priority = defaults.priority;
    	      this.proximityPlacementGroupId = defaults.proximityPlacementGroupId;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.spotMaxPrice = defaults.spotMaxPrice;
    	      this.tags = defaults.tags;
    	      this.upgradeSettings = defaults.upgradeSettings;
    	      this.vmSize = defaults.vmSize;
    	      this.vnetSubnetId = defaults.vnetSubnetId;
    	      this.zones = defaults.zones;
        }

        @CustomType.Setter
        public Builder enableAutoScaling(Boolean enableAutoScaling) {
            if (enableAutoScaling == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolResult", "enableAutoScaling");
            }
            this.enableAutoScaling = enableAutoScaling;
            return this;
        }
        @CustomType.Setter
        public Builder enableNodePublicIp(Boolean enableNodePublicIp) {
            if (enableNodePublicIp == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolResult", "enableNodePublicIp");
            }
            this.enableNodePublicIp = enableNodePublicIp;
            return this;
        }
        @CustomType.Setter
        public Builder evictionPolicy(String evictionPolicy) {
            if (evictionPolicy == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolResult", "evictionPolicy");
            }
            this.evictionPolicy = evictionPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder kubernetesClusterName(String kubernetesClusterName) {
            if (kubernetesClusterName == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolResult", "kubernetesClusterName");
            }
            this.kubernetesClusterName = kubernetesClusterName;
            return this;
        }
        @CustomType.Setter
        public Builder maxCount(Integer maxCount) {
            if (maxCount == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolResult", "maxCount");
            }
            this.maxCount = maxCount;
            return this;
        }
        @CustomType.Setter
        public Builder maxPods(Integer maxPods) {
            if (maxPods == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolResult", "maxPods");
            }
            this.maxPods = maxPods;
            return this;
        }
        @CustomType.Setter
        public Builder minCount(Integer minCount) {
            if (minCount == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolResult", "minCount");
            }
            this.minCount = minCount;
            return this;
        }
        @CustomType.Setter
        public Builder mode(String mode) {
            if (mode == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolResult", "mode");
            }
            this.mode = mode;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nodeCount(Integer nodeCount) {
            if (nodeCount == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolResult", "nodeCount");
            }
            this.nodeCount = nodeCount;
            return this;
        }
        @CustomType.Setter
        public Builder nodeLabels(Map<String,String> nodeLabels) {
            if (nodeLabels == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolResult", "nodeLabels");
            }
            this.nodeLabels = nodeLabels;
            return this;
        }
        @CustomType.Setter
        public Builder nodePublicIpPrefixId(String nodePublicIpPrefixId) {
            if (nodePublicIpPrefixId == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolResult", "nodePublicIpPrefixId");
            }
            this.nodePublicIpPrefixId = nodePublicIpPrefixId;
            return this;
        }
        @CustomType.Setter
        public Builder nodeTaints(List<String> nodeTaints) {
            if (nodeTaints == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolResult", "nodeTaints");
            }
            this.nodeTaints = nodeTaints;
            return this;
        }
        public Builder nodeTaints(String... nodeTaints) {
            return nodeTaints(List.of(nodeTaints));
        }
        @CustomType.Setter
        public Builder orchestratorVersion(String orchestratorVersion) {
            if (orchestratorVersion == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolResult", "orchestratorVersion");
            }
            this.orchestratorVersion = orchestratorVersion;
            return this;
        }
        @CustomType.Setter
        public Builder osDiskSizeGb(Integer osDiskSizeGb) {
            if (osDiskSizeGb == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolResult", "osDiskSizeGb");
            }
            this.osDiskSizeGb = osDiskSizeGb;
            return this;
        }
        @CustomType.Setter
        public Builder osDiskType(String osDiskType) {
            if (osDiskType == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolResult", "osDiskType");
            }
            this.osDiskType = osDiskType;
            return this;
        }
        @CustomType.Setter
        public Builder osType(String osType) {
            if (osType == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolResult", "osType");
            }
            this.osType = osType;
            return this;
        }
        @CustomType.Setter
        public Builder priority(String priority) {
            if (priority == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolResult", "priority");
            }
            this.priority = priority;
            return this;
        }
        @CustomType.Setter
        public Builder proximityPlacementGroupId(String proximityPlacementGroupId) {
            if (proximityPlacementGroupId == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolResult", "proximityPlacementGroupId");
            }
            this.proximityPlacementGroupId = proximityPlacementGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            if (resourceGroupName == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolResult", "resourceGroupName");
            }
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder spotMaxPrice(Double spotMaxPrice) {
            if (spotMaxPrice == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolResult", "spotMaxPrice");
            }
            this.spotMaxPrice = spotMaxPrice;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder upgradeSettings(List<GetClusterNodePoolUpgradeSetting> upgradeSettings) {
            if (upgradeSettings == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolResult", "upgradeSettings");
            }
            this.upgradeSettings = upgradeSettings;
            return this;
        }
        public Builder upgradeSettings(GetClusterNodePoolUpgradeSetting... upgradeSettings) {
            return upgradeSettings(List.of(upgradeSettings));
        }
        @CustomType.Setter
        public Builder vmSize(String vmSize) {
            if (vmSize == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolResult", "vmSize");
            }
            this.vmSize = vmSize;
            return this;
        }
        @CustomType.Setter
        public Builder vnetSubnetId(String vnetSubnetId) {
            if (vnetSubnetId == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolResult", "vnetSubnetId");
            }
            this.vnetSubnetId = vnetSubnetId;
            return this;
        }
        @CustomType.Setter
        public Builder zones(List<String> zones) {
            if (zones == null) {
              throw new MissingRequiredPropertyException("GetClusterNodePoolResult", "zones");
            }
            this.zones = zones;
            return this;
        }
        public Builder zones(String... zones) {
            return zones(List.of(zones));
        }
        public GetClusterNodePoolResult build() {
            final var _resultValue = new GetClusterNodePoolResult();
            _resultValue.enableAutoScaling = enableAutoScaling;
            _resultValue.enableNodePublicIp = enableNodePublicIp;
            _resultValue.evictionPolicy = evictionPolicy;
            _resultValue.id = id;
            _resultValue.kubernetesClusterName = kubernetesClusterName;
            _resultValue.maxCount = maxCount;
            _resultValue.maxPods = maxPods;
            _resultValue.minCount = minCount;
            _resultValue.mode = mode;
            _resultValue.name = name;
            _resultValue.nodeCount = nodeCount;
            _resultValue.nodeLabels = nodeLabels;
            _resultValue.nodePublicIpPrefixId = nodePublicIpPrefixId;
            _resultValue.nodeTaints = nodeTaints;
            _resultValue.orchestratorVersion = orchestratorVersion;
            _resultValue.osDiskSizeGb = osDiskSizeGb;
            _resultValue.osDiskType = osDiskType;
            _resultValue.osType = osType;
            _resultValue.priority = priority;
            _resultValue.proximityPlacementGroupId = proximityPlacementGroupId;
            _resultValue.resourceGroupName = resourceGroupName;
            _resultValue.spotMaxPrice = spotMaxPrice;
            _resultValue.tags = tags;
            _resultValue.upgradeSettings = upgradeSettings;
            _resultValue.vmSize = vmSize;
            _resultValue.vnetSubnetId = vnetSubnetId;
            _resultValue.zones = zones;
            return _resultValue;
        }
    }
}
