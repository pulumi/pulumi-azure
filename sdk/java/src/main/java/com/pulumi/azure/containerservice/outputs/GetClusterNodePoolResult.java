// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerservice.outputs;

import com.pulumi.azure.containerservice.outputs.GetClusterNodePoolUpgradeSetting;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetClusterNodePoolResult {
    /**
     * @return Does this Node Pool have Auto-Scaling enabled?
     * 
     */
    private final Boolean enableAutoScaling;
    /**
     * @return Do nodes in this Node Pool have a Public IP Address?
     * 
     */
    private final Boolean enableNodePublicIp;
    /**
     * @return The eviction policy used for Virtual Machines in the Virtual Machine Scale Set, when `priority` is set to `Spot`.
     * 
     */
    private final String evictionPolicy;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    private final String kubernetesClusterName;
    /**
     * @return The maximum number of Nodes allowed when auto-scaling is enabled.
     * 
     */
    private final Integer maxCount;
    /**
     * @return The maximum number of Pods allowed on each Node in this Node Pool.
     * 
     */
    private final Integer maxPods;
    /**
     * @return The minimum number of Nodes allowed when auto-scaling is enabled.
     * 
     */
    private final Integer minCount;
    /**
     * @return The Mode for this Node Pool, specifying how these Nodes should be used (for either System or User resources).
     * 
     */
    private final String mode;
    private final String name;
    /**
     * @return The current number of Nodes in the Node Pool.
     * 
     */
    private final Integer nodeCount;
    /**
     * @return A map of Kubernetes Labels applied to each Node in this Node Pool.
     * 
     */
    private final Map<String,String> nodeLabels;
    /**
     * @return Resource ID for the Public IP Addresses Prefix for the nodes in this Agent Pool.
     * 
     */
    private final String nodePublicIpPrefixId;
    /**
     * @return A map of Kubernetes Taints applied to each Node in this Node Pool.
     * 
     */
    private final List<String> nodeTaints;
    /**
     * @return The version of Kubernetes configured on each Node in this Node Pool.
     * 
     */
    private final String orchestratorVersion;
    /**
     * @return The size of the OS Disk on each Node in this Node Pool.
     * 
     */
    private final Integer osDiskSizeGb;
    /**
     * @return The type of the OS Disk on each Node in this Node Pool.
     * 
     */
    private final String osDiskType;
    /**
     * @return The operating system used on each Node in this Node Pool.
     * 
     */
    private final String osType;
    /**
     * @return The priority of the Virtual Machines in the Virtual Machine Scale Set backing this Node Pool.
     * 
     */
    private final String priority;
    /**
     * @return The ID of the Proximity Placement Group where the Virtual Machine Scale Set backing this Node Pool will be placed.
     * 
     */
    private final String proximityPlacementGroupId;
    private final String resourceGroupName;
    /**
     * @return The maximum price being paid for Virtual Machines in this Scale Set. `-1` means the current on-demand price for a Virtual Machine.
     * 
     */
    private final Double spotMaxPrice;
    /**
     * @return A mapping of tags assigned to the Kubernetes Cluster Node Pool.
     * 
     */
    private final Map<String,String> tags;
    /**
     * @return A `upgrade_settings` block as documented below.
     * 
     */
    private final List<GetClusterNodePoolUpgradeSetting> upgradeSettings;
    /**
     * @return The size of the Virtual Machines used in the Virtual Machine Scale Set backing this Node Pool.
     * 
     */
    private final String vmSize;
    /**
     * @return The ID of the Subnet in which this Node Pool exists.
     * 
     */
    private final String vnetSubnetId;
    /**
     * @return A list of the Availability Zones where the Nodes in this Node Pool exist.
     * 
     */
    private final List<String> zones;

    @CustomType.Constructor
    private GetClusterNodePoolResult(
        @CustomType.Parameter("enableAutoScaling") Boolean enableAutoScaling,
        @CustomType.Parameter("enableNodePublicIp") Boolean enableNodePublicIp,
        @CustomType.Parameter("evictionPolicy") String evictionPolicy,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("kubernetesClusterName") String kubernetesClusterName,
        @CustomType.Parameter("maxCount") Integer maxCount,
        @CustomType.Parameter("maxPods") Integer maxPods,
        @CustomType.Parameter("minCount") Integer minCount,
        @CustomType.Parameter("mode") String mode,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("nodeCount") Integer nodeCount,
        @CustomType.Parameter("nodeLabels") Map<String,String> nodeLabels,
        @CustomType.Parameter("nodePublicIpPrefixId") String nodePublicIpPrefixId,
        @CustomType.Parameter("nodeTaints") List<String> nodeTaints,
        @CustomType.Parameter("orchestratorVersion") String orchestratorVersion,
        @CustomType.Parameter("osDiskSizeGb") Integer osDiskSizeGb,
        @CustomType.Parameter("osDiskType") String osDiskType,
        @CustomType.Parameter("osType") String osType,
        @CustomType.Parameter("priority") String priority,
        @CustomType.Parameter("proximityPlacementGroupId") String proximityPlacementGroupId,
        @CustomType.Parameter("resourceGroupName") String resourceGroupName,
        @CustomType.Parameter("spotMaxPrice") Double spotMaxPrice,
        @CustomType.Parameter("tags") Map<String,String> tags,
        @CustomType.Parameter("upgradeSettings") List<GetClusterNodePoolUpgradeSetting> upgradeSettings,
        @CustomType.Parameter("vmSize") String vmSize,
        @CustomType.Parameter("vnetSubnetId") String vnetSubnetId,
        @CustomType.Parameter("zones") List<String> zones) {
        this.enableAutoScaling = enableAutoScaling;
        this.enableNodePublicIp = enableNodePublicIp;
        this.evictionPolicy = evictionPolicy;
        this.id = id;
        this.kubernetesClusterName = kubernetesClusterName;
        this.maxCount = maxCount;
        this.maxPods = maxPods;
        this.minCount = minCount;
        this.mode = mode;
        this.name = name;
        this.nodeCount = nodeCount;
        this.nodeLabels = nodeLabels;
        this.nodePublicIpPrefixId = nodePublicIpPrefixId;
        this.nodeTaints = nodeTaints;
        this.orchestratorVersion = orchestratorVersion;
        this.osDiskSizeGb = osDiskSizeGb;
        this.osDiskType = osDiskType;
        this.osType = osType;
        this.priority = priority;
        this.proximityPlacementGroupId = proximityPlacementGroupId;
        this.resourceGroupName = resourceGroupName;
        this.spotMaxPrice = spotMaxPrice;
        this.tags = tags;
        this.upgradeSettings = upgradeSettings;
        this.vmSize = vmSize;
        this.vnetSubnetId = vnetSubnetId;
        this.zones = zones;
    }

    /**
     * @return Does this Node Pool have Auto-Scaling enabled?
     * 
     */
    public Boolean enableAutoScaling() {
        return this.enableAutoScaling;
    }
    /**
     * @return Do nodes in this Node Pool have a Public IP Address?
     * 
     */
    public Boolean enableNodePublicIp() {
        return this.enableNodePublicIp;
    }
    /**
     * @return The eviction policy used for Virtual Machines in the Virtual Machine Scale Set, when `priority` is set to `Spot`.
     * 
     */
    public String evictionPolicy() {
        return this.evictionPolicy;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String kubernetesClusterName() {
        return this.kubernetesClusterName;
    }
    /**
     * @return The maximum number of Nodes allowed when auto-scaling is enabled.
     * 
     */
    public Integer maxCount() {
        return this.maxCount;
    }
    /**
     * @return The maximum number of Pods allowed on each Node in this Node Pool.
     * 
     */
    public Integer maxPods() {
        return this.maxPods;
    }
    /**
     * @return The minimum number of Nodes allowed when auto-scaling is enabled.
     * 
     */
    public Integer minCount() {
        return this.minCount;
    }
    /**
     * @return The Mode for this Node Pool, specifying how these Nodes should be used (for either System or User resources).
     * 
     */
    public String mode() {
        return this.mode;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return The current number of Nodes in the Node Pool.
     * 
     */
    public Integer nodeCount() {
        return this.nodeCount;
    }
    /**
     * @return A map of Kubernetes Labels applied to each Node in this Node Pool.
     * 
     */
    public Map<String,String> nodeLabels() {
        return this.nodeLabels;
    }
    /**
     * @return Resource ID for the Public IP Addresses Prefix for the nodes in this Agent Pool.
     * 
     */
    public String nodePublicIpPrefixId() {
        return this.nodePublicIpPrefixId;
    }
    /**
     * @return A map of Kubernetes Taints applied to each Node in this Node Pool.
     * 
     */
    public List<String> nodeTaints() {
        return this.nodeTaints;
    }
    /**
     * @return The version of Kubernetes configured on each Node in this Node Pool.
     * 
     */
    public String orchestratorVersion() {
        return this.orchestratorVersion;
    }
    /**
     * @return The size of the OS Disk on each Node in this Node Pool.
     * 
     */
    public Integer osDiskSizeGb() {
        return this.osDiskSizeGb;
    }
    /**
     * @return The type of the OS Disk on each Node in this Node Pool.
     * 
     */
    public String osDiskType() {
        return this.osDiskType;
    }
    /**
     * @return The operating system used on each Node in this Node Pool.
     * 
     */
    public String osType() {
        return this.osType;
    }
    /**
     * @return The priority of the Virtual Machines in the Virtual Machine Scale Set backing this Node Pool.
     * 
     */
    public String priority() {
        return this.priority;
    }
    /**
     * @return The ID of the Proximity Placement Group where the Virtual Machine Scale Set backing this Node Pool will be placed.
     * 
     */
    public String proximityPlacementGroupId() {
        return this.proximityPlacementGroupId;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return The maximum price being paid for Virtual Machines in this Scale Set. `-1` means the current on-demand price for a Virtual Machine.
     * 
     */
    public Double spotMaxPrice() {
        return this.spotMaxPrice;
    }
    /**
     * @return A mapping of tags assigned to the Kubernetes Cluster Node Pool.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return A `upgrade_settings` block as documented below.
     * 
     */
    public List<GetClusterNodePoolUpgradeSetting> upgradeSettings() {
        return this.upgradeSettings;
    }
    /**
     * @return The size of the Virtual Machines used in the Virtual Machine Scale Set backing this Node Pool.
     * 
     */
    public String vmSize() {
        return this.vmSize;
    }
    /**
     * @return The ID of the Subnet in which this Node Pool exists.
     * 
     */
    public String vnetSubnetId() {
        return this.vnetSubnetId;
    }
    /**
     * @return A list of the Availability Zones where the Nodes in this Node Pool exist.
     * 
     */
    public List<String> zones() {
        return this.zones;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterNodePoolResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean enableAutoScaling;
        private Boolean enableNodePublicIp;
        private String evictionPolicy;
        private String id;
        private String kubernetesClusterName;
        private Integer maxCount;
        private Integer maxPods;
        private Integer minCount;
        private String mode;
        private String name;
        private Integer nodeCount;
        private Map<String,String> nodeLabels;
        private String nodePublicIpPrefixId;
        private List<String> nodeTaints;
        private String orchestratorVersion;
        private Integer osDiskSizeGb;
        private String osDiskType;
        private String osType;
        private String priority;
        private String proximityPlacementGroupId;
        private String resourceGroupName;
        private Double spotMaxPrice;
        private Map<String,String> tags;
        private List<GetClusterNodePoolUpgradeSetting> upgradeSettings;
        private String vmSize;
        private String vnetSubnetId;
        private List<String> zones;

        public Builder() {
    	      // Empty
        }

        public Builder(GetClusterNodePoolResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enableAutoScaling = defaults.enableAutoScaling;
    	      this.enableNodePublicIp = defaults.enableNodePublicIp;
    	      this.evictionPolicy = defaults.evictionPolicy;
    	      this.id = defaults.id;
    	      this.kubernetesClusterName = defaults.kubernetesClusterName;
    	      this.maxCount = defaults.maxCount;
    	      this.maxPods = defaults.maxPods;
    	      this.minCount = defaults.minCount;
    	      this.mode = defaults.mode;
    	      this.name = defaults.name;
    	      this.nodeCount = defaults.nodeCount;
    	      this.nodeLabels = defaults.nodeLabels;
    	      this.nodePublicIpPrefixId = defaults.nodePublicIpPrefixId;
    	      this.nodeTaints = defaults.nodeTaints;
    	      this.orchestratorVersion = defaults.orchestratorVersion;
    	      this.osDiskSizeGb = defaults.osDiskSizeGb;
    	      this.osDiskType = defaults.osDiskType;
    	      this.osType = defaults.osType;
    	      this.priority = defaults.priority;
    	      this.proximityPlacementGroupId = defaults.proximityPlacementGroupId;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.spotMaxPrice = defaults.spotMaxPrice;
    	      this.tags = defaults.tags;
    	      this.upgradeSettings = defaults.upgradeSettings;
    	      this.vmSize = defaults.vmSize;
    	      this.vnetSubnetId = defaults.vnetSubnetId;
    	      this.zones = defaults.zones;
        }

        public Builder enableAutoScaling(Boolean enableAutoScaling) {
            this.enableAutoScaling = Objects.requireNonNull(enableAutoScaling);
            return this;
        }
        public Builder enableNodePublicIp(Boolean enableNodePublicIp) {
            this.enableNodePublicIp = Objects.requireNonNull(enableNodePublicIp);
            return this;
        }
        public Builder evictionPolicy(String evictionPolicy) {
            this.evictionPolicy = Objects.requireNonNull(evictionPolicy);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder kubernetesClusterName(String kubernetesClusterName) {
            this.kubernetesClusterName = Objects.requireNonNull(kubernetesClusterName);
            return this;
        }
        public Builder maxCount(Integer maxCount) {
            this.maxCount = Objects.requireNonNull(maxCount);
            return this;
        }
        public Builder maxPods(Integer maxPods) {
            this.maxPods = Objects.requireNonNull(maxPods);
            return this;
        }
        public Builder minCount(Integer minCount) {
            this.minCount = Objects.requireNonNull(minCount);
            return this;
        }
        public Builder mode(String mode) {
            this.mode = Objects.requireNonNull(mode);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder nodeCount(Integer nodeCount) {
            this.nodeCount = Objects.requireNonNull(nodeCount);
            return this;
        }
        public Builder nodeLabels(Map<String,String> nodeLabels) {
            this.nodeLabels = Objects.requireNonNull(nodeLabels);
            return this;
        }
        public Builder nodePublicIpPrefixId(String nodePublicIpPrefixId) {
            this.nodePublicIpPrefixId = Objects.requireNonNull(nodePublicIpPrefixId);
            return this;
        }
        public Builder nodeTaints(List<String> nodeTaints) {
            this.nodeTaints = Objects.requireNonNull(nodeTaints);
            return this;
        }
        public Builder nodeTaints(String... nodeTaints) {
            return nodeTaints(List.of(nodeTaints));
        }
        public Builder orchestratorVersion(String orchestratorVersion) {
            this.orchestratorVersion = Objects.requireNonNull(orchestratorVersion);
            return this;
        }
        public Builder osDiskSizeGb(Integer osDiskSizeGb) {
            this.osDiskSizeGb = Objects.requireNonNull(osDiskSizeGb);
            return this;
        }
        public Builder osDiskType(String osDiskType) {
            this.osDiskType = Objects.requireNonNull(osDiskType);
            return this;
        }
        public Builder osType(String osType) {
            this.osType = Objects.requireNonNull(osType);
            return this;
        }
        public Builder priority(String priority) {
            this.priority = Objects.requireNonNull(priority);
            return this;
        }
        public Builder proximityPlacementGroupId(String proximityPlacementGroupId) {
            this.proximityPlacementGroupId = Objects.requireNonNull(proximityPlacementGroupId);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder spotMaxPrice(Double spotMaxPrice) {
            this.spotMaxPrice = Objects.requireNonNull(spotMaxPrice);
            return this;
        }
        public Builder tags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder upgradeSettings(List<GetClusterNodePoolUpgradeSetting> upgradeSettings) {
            this.upgradeSettings = Objects.requireNonNull(upgradeSettings);
            return this;
        }
        public Builder upgradeSettings(GetClusterNodePoolUpgradeSetting... upgradeSettings) {
            return upgradeSettings(List.of(upgradeSettings));
        }
        public Builder vmSize(String vmSize) {
            this.vmSize = Objects.requireNonNull(vmSize);
            return this;
        }
        public Builder vnetSubnetId(String vnetSubnetId) {
            this.vnetSubnetId = Objects.requireNonNull(vnetSubnetId);
            return this;
        }
        public Builder zones(List<String> zones) {
            this.zones = Objects.requireNonNull(zones);
            return this;
        }
        public Builder zones(String... zones) {
            return zones(List.of(zones));
        }        public GetClusterNodePoolResult build() {
            return new GetClusterNodePoolResult(enableAutoScaling, enableNodePublicIp, evictionPolicy, id, kubernetesClusterName, maxCount, maxPods, minCount, mode, name, nodeCount, nodeLabels, nodePublicIpPrefixId, nodeTaints, orchestratorVersion, osDiskSizeGb, osDiskType, osType, priority, proximityPlacementGroupId, resourceGroupName, spotMaxPrice, tags, upgradeSettings, vmSize, vnetSubnetId, zones);
        }
    }
}
