// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.keyvault.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetCertificateDataPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetCertificateDataPlainArgs Empty = new GetCertificateDataPlainArgs();

    /**
     * Specifies the ID of the Key Vault instance where the Secret resides, available on the `azure.keyvault.KeyVault` Data Source / Resource.
     * 
     */
    @Import(name="keyVaultId", required=true)
    private String keyVaultId;

    /**
     * @return Specifies the ID of the Key Vault instance where the Secret resides, available on the `azure.keyvault.KeyVault` Data Source / Resource.
     * 
     */
    public String keyVaultId() {
        return this.keyVaultId;
    }

    /**
     * Specifies the name of the Key Vault Secret.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return Specifies the name of the Key Vault Secret.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * Specifies the version of the certificate to look up.  (Defaults to latest)
     * 
     */
    @Import(name="version")
    private @Nullable String version;

    /**
     * @return Specifies the version of the certificate to look up.  (Defaults to latest)
     * 
     */
    public Optional<String> version() {
        return Optional.ofNullable(this.version);
    }

    private GetCertificateDataPlainArgs() {}

    private GetCertificateDataPlainArgs(GetCertificateDataPlainArgs $) {
        this.keyVaultId = $.keyVaultId;
        this.name = $.name;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCertificateDataPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCertificateDataPlainArgs $;

        public Builder() {
            $ = new GetCertificateDataPlainArgs();
        }

        public Builder(GetCertificateDataPlainArgs defaults) {
            $ = new GetCertificateDataPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param keyVaultId Specifies the ID of the Key Vault instance where the Secret resides, available on the `azure.keyvault.KeyVault` Data Source / Resource.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultId(String keyVaultId) {
            $.keyVaultId = keyVaultId;
            return this;
        }

        /**
         * @param name Specifies the name of the Key Vault Secret.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param version Specifies the version of the certificate to look up.  (Defaults to latest)
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable String version) {
            $.version = version;
            return this;
        }

        public GetCertificateDataPlainArgs build() {
            $.keyVaultId = Objects.requireNonNull($.keyVaultId, "expected parameter 'keyVaultId' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
