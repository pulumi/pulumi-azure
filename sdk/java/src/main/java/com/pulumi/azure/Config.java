// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure;

import com.pulumi.azure.config.inputs.Features;
import com.pulumi.core.TypeShape;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;

public final class Config {

    private static final com.pulumi.Config config = com.pulumi.Config.of("azure");
    public Optional<List<String>> auxiliaryTenantIds() {
        return Codegen.objectProp("auxiliaryTenantIds", TypeShape.<List<String>>builder(List.class).addParameter(String.class).build()).config(config).get();
    }
/**
 * Base64 encoded PKCS#12 certificate bundle to use when authenticating as a Service Principal using a Client Certificate
 * 
 */
    public Optional<String> clientCertificate() {
        return Codegen.stringProp("clientCertificate").config(config).get();
    }
/**
 * The password associated with the Client Certificate. For use when authenticating as a Service Principal using a Client
 * Certificate
 * 
 */
    public Optional<String> clientCertificatePassword() {
        return Codegen.stringProp("clientCertificatePassword").config(config).get();
    }
/**
 * The path to the Client Certificate associated with the Service Principal for use when authenticating as a Service
 * Principal using a Client Certificate.
 * 
 */
    public Optional<String> clientCertificatePath() {
        return Codegen.stringProp("clientCertificatePath").config(config).get();
    }
/**
 * The Client ID which should be used.
 * 
 */
    public Optional<String> clientId() {
        return Codegen.stringProp("clientId").config(config).get();
    }
/**
 * The path to a file containing the Client ID which should be used.
 * 
 */
    public Optional<String> clientIdFilePath() {
        return Codegen.stringProp("clientIdFilePath").config(config).get();
    }
/**
 * The Client Secret which should be used. For use When authenticating as a Service Principal using a Client Secret.
 * 
 */
    public Optional<String> clientSecret() {
        return Codegen.stringProp("clientSecret").config(config).get();
    }
/**
 * The path to a file containing the Client Secret which should be used. For use When authenticating as a Service Principal
 * using a Client Secret.
 * 
 */
    public Optional<String> clientSecretFilePath() {
        return Codegen.stringProp("clientSecretFilePath").config(config).get();
    }
/**
 * This will disable the x-ms-correlation-request-id header.
 * 
 */
    public Optional<Boolean> disableCorrelationRequestId() {
        return Codegen.booleanProp("disableCorrelationRequestId").config(config).get();
    }
/**
 * This will disable the Terraform Partner ID which is used if a custom `partner_id` isn&#39;t specified.
 * 
 */
    public Optional<Boolean> disableTerraformPartnerId() {
        return Codegen.booleanProp("disableTerraformPartnerId").config(config).get();
    }
/**
 * The Cloud Environment which should be used. Possible values are public, usgovernment, and china. Defaults to public.
 * 
 */
    public String environment() {
        return Codegen.stringProp("environment").config(config).env("AZURE_ENVIRONMENT", "ARM_ENVIRONMENT").def("public").require();
    }
    public Optional<Features> features() {
        return Codegen.objectProp("features", Features.class).config(config).get();
    }
    public Optional<String> location() {
        return Codegen.stringProp("location").config(config).env("ARM_LOCATION").get();
    }
/**
 * The Hostname which should be used for the Azure Metadata Service.
 * 
 */
    public String metadataHost() {
        return Codegen.stringProp("metadataHost").config(config).env("ARM_METADATA_HOSTNAME").require();
    }
/**
 * The path to a custom endpoint for Managed Service Identity - in most circumstances this should be detected
 * automatically.
 * 
 */
    public Optional<String> msiEndpoint() {
        return Codegen.stringProp("msiEndpoint").config(config).get();
    }
/**
 * The bearer token for the request to the OIDC provider. For use when authenticating as a Service Principal using OpenID
 * Connect.
 * 
 */
    public Optional<String> oidcRequestToken() {
        return Codegen.stringProp("oidcRequestToken").config(config).get();
    }
/**
 * The URL for the OIDC provider from which to request an ID token. For use when authenticating as a Service Principal
 * using OpenID Connect.
 * 
 */
    public Optional<String> oidcRequestUrl() {
        return Codegen.stringProp("oidcRequestUrl").config(config).get();
    }
/**
 * The OIDC ID token for use when authenticating as a Service Principal using OpenID Connect.
 * 
 */
    public Optional<String> oidcToken() {
        return Codegen.stringProp("oidcToken").config(config).get();
    }
/**
 * The path to a file containing an OIDC ID token for use when authenticating as a Service Principal using OpenID Connect.
 * 
 */
    public Optional<String> oidcTokenFilePath() {
        return Codegen.stringProp("oidcTokenFilePath").config(config).get();
    }
/**
 * A GUID/UUID that is registered with Microsoft to facilitate partner resource usage attribution.
 * 
 */
    public Optional<String> partnerId() {
        return Codegen.stringProp("partnerId").config(config).get();
    }
/**
 * Should the AzureRM Provider skip registering all of the Resource Providers that it supports, if they&#39;re not already
 * registered?
 * 
 */
    public Optional<Boolean> skipProviderRegistration() {
        return Codegen.booleanProp("skipProviderRegistration").config(config).env("ARM_SKIP_PROVIDER_REGISTRATION").def(false).get();
    }
/**
 * Should the AzureRM Provider use AzureAD to access the Storage Data Plane API&#39;s?
 * 
 */
    public Optional<Boolean> storageUseAzuread() {
        return Codegen.booleanProp("storageUseAzuread").config(config).env("ARM_STORAGE_USE_AZUREAD").def(false).get();
    }
/**
 * The Subscription ID which should be used.
 * 
 */
    public Optional<String> subscriptionId() {
        return Codegen.stringProp("subscriptionId").config(config).env("ARM_SUBSCRIPTION_ID").def("").get();
    }
/**
 * The Tenant ID which should be used.
 * 
 */
    public Optional<String> tenantId() {
        return Codegen.stringProp("tenantId").config(config).get();
    }
/**
 * Allow Azure AKS Workload Identity to be used for Authentication.
 * 
 */
    public Optional<Boolean> useAksWorkloadIdentity() {
        return Codegen.booleanProp("useAksWorkloadIdentity").config(config).get();
    }
/**
 * Allow Azure CLI to be used for Authentication.
 * 
 */
    public Optional<Boolean> useCli() {
        return Codegen.booleanProp("useCli").config(config).get();
    }
/**
 * Allow Managed Service Identity to be used for Authentication.
 * 
 */
    public Optional<Boolean> useMsi() {
        return Codegen.booleanProp("useMsi").config(config).get();
    }
/**
 * Allow OpenID Connect to be used for authentication
 * 
 */
    public Optional<Boolean> useOidc() {
        return Codegen.booleanProp("useOidc").config(config).get();
    }
}
