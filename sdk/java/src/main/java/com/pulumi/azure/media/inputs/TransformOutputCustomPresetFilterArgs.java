// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.media.inputs;

import com.pulumi.azure.media.inputs.TransformOutputCustomPresetFilterCropRectangleArgs;
import com.pulumi.azure.media.inputs.TransformOutputCustomPresetFilterDeinterlaceArgs;
import com.pulumi.azure.media.inputs.TransformOutputCustomPresetFilterFadeInArgs;
import com.pulumi.azure.media.inputs.TransformOutputCustomPresetFilterFadeOutArgs;
import com.pulumi.azure.media.inputs.TransformOutputCustomPresetFilterOverlayArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TransformOutputCustomPresetFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final TransformOutputCustomPresetFilterArgs Empty = new TransformOutputCustomPresetFilterArgs();

    /**
     * A `crop_rectangle` block as defined above.
     * 
     */
    @Import(name="cropRectangle")
    private @Nullable Output<TransformOutputCustomPresetFilterCropRectangleArgs> cropRectangle;

    /**
     * @return A `crop_rectangle` block as defined above.
     * 
     */
    public Optional<Output<TransformOutputCustomPresetFilterCropRectangleArgs>> cropRectangle() {
        return Optional.ofNullable(this.cropRectangle);
    }

    /**
     * A `deinterlace` block as defined below.
     * 
     */
    @Import(name="deinterlace")
    private @Nullable Output<TransformOutputCustomPresetFilterDeinterlaceArgs> deinterlace;

    /**
     * @return A `deinterlace` block as defined below.
     * 
     */
    public Optional<Output<TransformOutputCustomPresetFilterDeinterlaceArgs>> deinterlace() {
        return Optional.ofNullable(this.deinterlace);
    }

    /**
     * A `fade_in` block as defined above.
     * 
     */
    @Import(name="fadeIn")
    private @Nullable Output<TransformOutputCustomPresetFilterFadeInArgs> fadeIn;

    /**
     * @return A `fade_in` block as defined above.
     * 
     */
    public Optional<Output<TransformOutputCustomPresetFilterFadeInArgs>> fadeIn() {
        return Optional.ofNullable(this.fadeIn);
    }

    /**
     * A `fade_out` block as defined above.
     * 
     */
    @Import(name="fadeOut")
    private @Nullable Output<TransformOutputCustomPresetFilterFadeOutArgs> fadeOut;

    /**
     * @return A `fade_out` block as defined above.
     * 
     */
    public Optional<Output<TransformOutputCustomPresetFilterFadeOutArgs>> fadeOut() {
        return Optional.ofNullable(this.fadeOut);
    }

    /**
     * One or more `overlay` blocks as defined below.
     * 
     */
    @Import(name="overlays")
    private @Nullable Output<List<TransformOutputCustomPresetFilterOverlayArgs>> overlays;

    /**
     * @return One or more `overlay` blocks as defined below.
     * 
     */
    public Optional<Output<List<TransformOutputCustomPresetFilterOverlayArgs>>> overlays() {
        return Optional.ofNullable(this.overlays);
    }

    /**
     * The rotation to be applied to the input video before it is encoded. Possible values are `Auto`, `None`, `Rotate90`, `Rotate180`, `Rotate270`,or `Rotate0`. Default to `Auto`.
     * 
     */
    @Import(name="rotation")
    private @Nullable Output<String> rotation;

    /**
     * @return The rotation to be applied to the input video before it is encoded. Possible values are `Auto`, `None`, `Rotate90`, `Rotate180`, `Rotate270`,or `Rotate0`. Default to `Auto`.
     * 
     */
    public Optional<Output<String>> rotation() {
        return Optional.ofNullable(this.rotation);
    }

    private TransformOutputCustomPresetFilterArgs() {}

    private TransformOutputCustomPresetFilterArgs(TransformOutputCustomPresetFilterArgs $) {
        this.cropRectangle = $.cropRectangle;
        this.deinterlace = $.deinterlace;
        this.fadeIn = $.fadeIn;
        this.fadeOut = $.fadeOut;
        this.overlays = $.overlays;
        this.rotation = $.rotation;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TransformOutputCustomPresetFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TransformOutputCustomPresetFilterArgs $;

        public Builder() {
            $ = new TransformOutputCustomPresetFilterArgs();
        }

        public Builder(TransformOutputCustomPresetFilterArgs defaults) {
            $ = new TransformOutputCustomPresetFilterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cropRectangle A `crop_rectangle` block as defined above.
         * 
         * @return builder
         * 
         */
        public Builder cropRectangle(@Nullable Output<TransformOutputCustomPresetFilterCropRectangleArgs> cropRectangle) {
            $.cropRectangle = cropRectangle;
            return this;
        }

        /**
         * @param cropRectangle A `crop_rectangle` block as defined above.
         * 
         * @return builder
         * 
         */
        public Builder cropRectangle(TransformOutputCustomPresetFilterCropRectangleArgs cropRectangle) {
            return cropRectangle(Output.of(cropRectangle));
        }

        /**
         * @param deinterlace A `deinterlace` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder deinterlace(@Nullable Output<TransformOutputCustomPresetFilterDeinterlaceArgs> deinterlace) {
            $.deinterlace = deinterlace;
            return this;
        }

        /**
         * @param deinterlace A `deinterlace` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder deinterlace(TransformOutputCustomPresetFilterDeinterlaceArgs deinterlace) {
            return deinterlace(Output.of(deinterlace));
        }

        /**
         * @param fadeIn A `fade_in` block as defined above.
         * 
         * @return builder
         * 
         */
        public Builder fadeIn(@Nullable Output<TransformOutputCustomPresetFilterFadeInArgs> fadeIn) {
            $.fadeIn = fadeIn;
            return this;
        }

        /**
         * @param fadeIn A `fade_in` block as defined above.
         * 
         * @return builder
         * 
         */
        public Builder fadeIn(TransformOutputCustomPresetFilterFadeInArgs fadeIn) {
            return fadeIn(Output.of(fadeIn));
        }

        /**
         * @param fadeOut A `fade_out` block as defined above.
         * 
         * @return builder
         * 
         */
        public Builder fadeOut(@Nullable Output<TransformOutputCustomPresetFilterFadeOutArgs> fadeOut) {
            $.fadeOut = fadeOut;
            return this;
        }

        /**
         * @param fadeOut A `fade_out` block as defined above.
         * 
         * @return builder
         * 
         */
        public Builder fadeOut(TransformOutputCustomPresetFilterFadeOutArgs fadeOut) {
            return fadeOut(Output.of(fadeOut));
        }

        /**
         * @param overlays One or more `overlay` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder overlays(@Nullable Output<List<TransformOutputCustomPresetFilterOverlayArgs>> overlays) {
            $.overlays = overlays;
            return this;
        }

        /**
         * @param overlays One or more `overlay` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder overlays(List<TransformOutputCustomPresetFilterOverlayArgs> overlays) {
            return overlays(Output.of(overlays));
        }

        /**
         * @param overlays One or more `overlay` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder overlays(TransformOutputCustomPresetFilterOverlayArgs... overlays) {
            return overlays(List.of(overlays));
        }

        /**
         * @param rotation The rotation to be applied to the input video before it is encoded. Possible values are `Auto`, `None`, `Rotate90`, `Rotate180`, `Rotate270`,or `Rotate0`. Default to `Auto`.
         * 
         * @return builder
         * 
         */
        public Builder rotation(@Nullable Output<String> rotation) {
            $.rotation = rotation;
            return this;
        }

        /**
         * @param rotation The rotation to be applied to the input video before it is encoded. Possible values are `Auto`, `None`, `Rotate90`, `Rotate180`, `Rotate270`,or `Rotate0`. Default to `Auto`.
         * 
         * @return builder
         * 
         */
        public Builder rotation(String rotation) {
            return rotation(Output.of(rotation));
        }

        public TransformOutputCustomPresetFilterArgs build() {
            return $;
        }
    }

}
