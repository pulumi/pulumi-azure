// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.confidentialledger.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class LedgerCertificateBasedSecurityPrincipalArgs extends com.pulumi.resources.ResourceArgs {

    public static final LedgerCertificateBasedSecurityPrincipalArgs Empty = new LedgerCertificateBasedSecurityPrincipalArgs();

    /**
     * Specifies the Ledger Role to grant this Certificate Security Principal. Possible values are `Administrator`, `Contributor` and `Reader`.
     * 
     */
    @Import(name="ledgerRoleName", required=true)
    private Output<String> ledgerRoleName;

    /**
     * @return Specifies the Ledger Role to grant this Certificate Security Principal. Possible values are `Administrator`, `Contributor` and `Reader`.
     * 
     */
    public Output<String> ledgerRoleName() {
        return this.ledgerRoleName;
    }

    /**
     * The public key, in PEM format, of the certificate used by this identity to authenticate with the Confidential Ledger.
     * 
     */
    @Import(name="pemPublicKey", required=true)
    private Output<String> pemPublicKey;

    /**
     * @return The public key, in PEM format, of the certificate used by this identity to authenticate with the Confidential Ledger.
     * 
     */
    public Output<String> pemPublicKey() {
        return this.pemPublicKey;
    }

    private LedgerCertificateBasedSecurityPrincipalArgs() {}

    private LedgerCertificateBasedSecurityPrincipalArgs(LedgerCertificateBasedSecurityPrincipalArgs $) {
        this.ledgerRoleName = $.ledgerRoleName;
        this.pemPublicKey = $.pemPublicKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LedgerCertificateBasedSecurityPrincipalArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LedgerCertificateBasedSecurityPrincipalArgs $;

        public Builder() {
            $ = new LedgerCertificateBasedSecurityPrincipalArgs();
        }

        public Builder(LedgerCertificateBasedSecurityPrincipalArgs defaults) {
            $ = new LedgerCertificateBasedSecurityPrincipalArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ledgerRoleName Specifies the Ledger Role to grant this Certificate Security Principal. Possible values are `Administrator`, `Contributor` and `Reader`.
         * 
         * @return builder
         * 
         */
        public Builder ledgerRoleName(Output<String> ledgerRoleName) {
            $.ledgerRoleName = ledgerRoleName;
            return this;
        }

        /**
         * @param ledgerRoleName Specifies the Ledger Role to grant this Certificate Security Principal. Possible values are `Administrator`, `Contributor` and `Reader`.
         * 
         * @return builder
         * 
         */
        public Builder ledgerRoleName(String ledgerRoleName) {
            return ledgerRoleName(Output.of(ledgerRoleName));
        }

        /**
         * @param pemPublicKey The public key, in PEM format, of the certificate used by this identity to authenticate with the Confidential Ledger.
         * 
         * @return builder
         * 
         */
        public Builder pemPublicKey(Output<String> pemPublicKey) {
            $.pemPublicKey = pemPublicKey;
            return this;
        }

        /**
         * @param pemPublicKey The public key, in PEM format, of the certificate used by this identity to authenticate with the Confidential Ledger.
         * 
         * @return builder
         * 
         */
        public Builder pemPublicKey(String pemPublicKey) {
            return pemPublicKey(Output.of(pemPublicKey));
        }

        public LedgerCertificateBasedSecurityPrincipalArgs build() {
            if ($.ledgerRoleName == null) {
                throw new MissingRequiredPropertyException("LedgerCertificateBasedSecurityPrincipalArgs", "ledgerRoleName");
            }
            if ($.pemPublicKey == null) {
                throw new MissingRequiredPropertyException("LedgerCertificateBasedSecurityPrincipalArgs", "pemPublicKey");
            }
            return $;
        }
    }

}
