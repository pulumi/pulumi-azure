// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.mobile;

import com.pulumi.azure.mobile.inputs.NetworkSimStaticIpConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkSimArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworkSimArgs Empty = new NetworkSimArgs();

    /**
     * The Ki value for the SIM.
     * 
     */
    @Import(name="authenticationKey", required=true)
    private Output<String> authenticationKey;

    /**
     * @return The Ki value for the SIM.
     * 
     */
    public Output<String> authenticationKey() {
        return this.authenticationKey;
    }

    /**
     * An optional free-form text field that can be used to record the device type this SIM is associated with, for example `Video camera`. The Azure portal allows SIMs to be grouped and filtered based on this value.
     * 
     */
    @Import(name="deviceType")
    private @Nullable Output<String> deviceType;

    /**
     * @return An optional free-form text field that can be used to record the device type this SIM is associated with, for example `Video camera`. The Azure portal allows SIMs to be grouped and filtered based on this value.
     * 
     */
    public Optional<Output<String>> deviceType() {
        return Optional.ofNullable(this.deviceType);
    }

    /**
     * The integrated circuit card ID (ICCID) for the SIM. Changing this forces a new Mobile Network Sim to be created.
     * 
     */
    @Import(name="integratedCircuitCardIdentifier", required=true)
    private Output<String> integratedCircuitCardIdentifier;

    /**
     * @return The integrated circuit card ID (ICCID) for the SIM. Changing this forces a new Mobile Network Sim to be created.
     * 
     */
    public Output<String> integratedCircuitCardIdentifier() {
        return this.integratedCircuitCardIdentifier;
    }

    /**
     * The international mobile subscriber identity (IMSI) for the SIM. Changing this forces a new Mobile Network Sim to be created.
     * 
     */
    @Import(name="internationalMobileSubscriberIdentity", required=true)
    private Output<String> internationalMobileSubscriberIdentity;

    /**
     * @return The international mobile subscriber identity (IMSI) for the SIM. Changing this forces a new Mobile Network Sim to be created.
     * 
     */
    public Output<String> internationalMobileSubscriberIdentity() {
        return this.internationalMobileSubscriberIdentity;
    }

    /**
     * The ID of the Mobile Network which the Mobile Network Sim belongs to. Changing this forces a new Mobile Network Sim to be created.
     * 
     */
    @Import(name="mobileNetworkSimGroupId", required=true)
    private Output<String> mobileNetworkSimGroupId;

    /**
     * @return The ID of the Mobile Network which the Mobile Network Sim belongs to. Changing this forces a new Mobile Network Sim to be created.
     * 
     */
    public Output<String> mobileNetworkSimGroupId() {
        return this.mobileNetworkSimGroupId;
    }

    /**
     * The name which should be used for this Mobile Network Sim. Changing this forces a new Mobile Network Sim to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name which should be used for this Mobile Network Sim. Changing this forces a new Mobile Network Sim to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The Opc value for the SIM.
     * 
     */
    @Import(name="operatorKeyCode", required=true)
    private Output<String> operatorKeyCode;

    /**
     * @return The Opc value for the SIM.
     * 
     */
    public Output<String> operatorKeyCode() {
        return this.operatorKeyCode;
    }

    /**
     * The ID of SIM policy used by this SIM.
     * 
     */
    @Import(name="simPolicyId")
    private @Nullable Output<String> simPolicyId;

    /**
     * @return The ID of SIM policy used by this SIM.
     * 
     */
    public Optional<Output<String>> simPolicyId() {
        return Optional.ofNullable(this.simPolicyId);
    }

    /**
     * A `static_ip_configuration` block as defined below.
     * 
     */
    @Import(name="staticIpConfigurations")
    private @Nullable Output<List<NetworkSimStaticIpConfigurationArgs>> staticIpConfigurations;

    /**
     * @return A `static_ip_configuration` block as defined below.
     * 
     */
    public Optional<Output<List<NetworkSimStaticIpConfigurationArgs>>> staticIpConfigurations() {
        return Optional.ofNullable(this.staticIpConfigurations);
    }

    private NetworkSimArgs() {}

    private NetworkSimArgs(NetworkSimArgs $) {
        this.authenticationKey = $.authenticationKey;
        this.deviceType = $.deviceType;
        this.integratedCircuitCardIdentifier = $.integratedCircuitCardIdentifier;
        this.internationalMobileSubscriberIdentity = $.internationalMobileSubscriberIdentity;
        this.mobileNetworkSimGroupId = $.mobileNetworkSimGroupId;
        this.name = $.name;
        this.operatorKeyCode = $.operatorKeyCode;
        this.simPolicyId = $.simPolicyId;
        this.staticIpConfigurations = $.staticIpConfigurations;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkSimArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkSimArgs $;

        public Builder() {
            $ = new NetworkSimArgs();
        }

        public Builder(NetworkSimArgs defaults) {
            $ = new NetworkSimArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authenticationKey The Ki value for the SIM.
         * 
         * @return builder
         * 
         */
        public Builder authenticationKey(Output<String> authenticationKey) {
            $.authenticationKey = authenticationKey;
            return this;
        }

        /**
         * @param authenticationKey The Ki value for the SIM.
         * 
         * @return builder
         * 
         */
        public Builder authenticationKey(String authenticationKey) {
            return authenticationKey(Output.of(authenticationKey));
        }

        /**
         * @param deviceType An optional free-form text field that can be used to record the device type this SIM is associated with, for example `Video camera`. The Azure portal allows SIMs to be grouped and filtered based on this value.
         * 
         * @return builder
         * 
         */
        public Builder deviceType(@Nullable Output<String> deviceType) {
            $.deviceType = deviceType;
            return this;
        }

        /**
         * @param deviceType An optional free-form text field that can be used to record the device type this SIM is associated with, for example `Video camera`. The Azure portal allows SIMs to be grouped and filtered based on this value.
         * 
         * @return builder
         * 
         */
        public Builder deviceType(String deviceType) {
            return deviceType(Output.of(deviceType));
        }

        /**
         * @param integratedCircuitCardIdentifier The integrated circuit card ID (ICCID) for the SIM. Changing this forces a new Mobile Network Sim to be created.
         * 
         * @return builder
         * 
         */
        public Builder integratedCircuitCardIdentifier(Output<String> integratedCircuitCardIdentifier) {
            $.integratedCircuitCardIdentifier = integratedCircuitCardIdentifier;
            return this;
        }

        /**
         * @param integratedCircuitCardIdentifier The integrated circuit card ID (ICCID) for the SIM. Changing this forces a new Mobile Network Sim to be created.
         * 
         * @return builder
         * 
         */
        public Builder integratedCircuitCardIdentifier(String integratedCircuitCardIdentifier) {
            return integratedCircuitCardIdentifier(Output.of(integratedCircuitCardIdentifier));
        }

        /**
         * @param internationalMobileSubscriberIdentity The international mobile subscriber identity (IMSI) for the SIM. Changing this forces a new Mobile Network Sim to be created.
         * 
         * @return builder
         * 
         */
        public Builder internationalMobileSubscriberIdentity(Output<String> internationalMobileSubscriberIdentity) {
            $.internationalMobileSubscriberIdentity = internationalMobileSubscriberIdentity;
            return this;
        }

        /**
         * @param internationalMobileSubscriberIdentity The international mobile subscriber identity (IMSI) for the SIM. Changing this forces a new Mobile Network Sim to be created.
         * 
         * @return builder
         * 
         */
        public Builder internationalMobileSubscriberIdentity(String internationalMobileSubscriberIdentity) {
            return internationalMobileSubscriberIdentity(Output.of(internationalMobileSubscriberIdentity));
        }

        /**
         * @param mobileNetworkSimGroupId The ID of the Mobile Network which the Mobile Network Sim belongs to. Changing this forces a new Mobile Network Sim to be created.
         * 
         * @return builder
         * 
         */
        public Builder mobileNetworkSimGroupId(Output<String> mobileNetworkSimGroupId) {
            $.mobileNetworkSimGroupId = mobileNetworkSimGroupId;
            return this;
        }

        /**
         * @param mobileNetworkSimGroupId The ID of the Mobile Network which the Mobile Network Sim belongs to. Changing this forces a new Mobile Network Sim to be created.
         * 
         * @return builder
         * 
         */
        public Builder mobileNetworkSimGroupId(String mobileNetworkSimGroupId) {
            return mobileNetworkSimGroupId(Output.of(mobileNetworkSimGroupId));
        }

        /**
         * @param name The name which should be used for this Mobile Network Sim. Changing this forces a new Mobile Network Sim to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this Mobile Network Sim. Changing this forces a new Mobile Network Sim to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param operatorKeyCode The Opc value for the SIM.
         * 
         * @return builder
         * 
         */
        public Builder operatorKeyCode(Output<String> operatorKeyCode) {
            $.operatorKeyCode = operatorKeyCode;
            return this;
        }

        /**
         * @param operatorKeyCode The Opc value for the SIM.
         * 
         * @return builder
         * 
         */
        public Builder operatorKeyCode(String operatorKeyCode) {
            return operatorKeyCode(Output.of(operatorKeyCode));
        }

        /**
         * @param simPolicyId The ID of SIM policy used by this SIM.
         * 
         * @return builder
         * 
         */
        public Builder simPolicyId(@Nullable Output<String> simPolicyId) {
            $.simPolicyId = simPolicyId;
            return this;
        }

        /**
         * @param simPolicyId The ID of SIM policy used by this SIM.
         * 
         * @return builder
         * 
         */
        public Builder simPolicyId(String simPolicyId) {
            return simPolicyId(Output.of(simPolicyId));
        }

        /**
         * @param staticIpConfigurations A `static_ip_configuration` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder staticIpConfigurations(@Nullable Output<List<NetworkSimStaticIpConfigurationArgs>> staticIpConfigurations) {
            $.staticIpConfigurations = staticIpConfigurations;
            return this;
        }

        /**
         * @param staticIpConfigurations A `static_ip_configuration` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder staticIpConfigurations(List<NetworkSimStaticIpConfigurationArgs> staticIpConfigurations) {
            return staticIpConfigurations(Output.of(staticIpConfigurations));
        }

        /**
         * @param staticIpConfigurations A `static_ip_configuration` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder staticIpConfigurations(NetworkSimStaticIpConfigurationArgs... staticIpConfigurations) {
            return staticIpConfigurations(List.of(staticIpConfigurations));
        }

        public NetworkSimArgs build() {
            if ($.authenticationKey == null) {
                throw new MissingRequiredPropertyException("NetworkSimArgs", "authenticationKey");
            }
            if ($.integratedCircuitCardIdentifier == null) {
                throw new MissingRequiredPropertyException("NetworkSimArgs", "integratedCircuitCardIdentifier");
            }
            if ($.internationalMobileSubscriberIdentity == null) {
                throw new MissingRequiredPropertyException("NetworkSimArgs", "internationalMobileSubscriberIdentity");
            }
            if ($.mobileNetworkSimGroupId == null) {
                throw new MissingRequiredPropertyException("NetworkSimArgs", "mobileNetworkSimGroupId");
            }
            if ($.operatorKeyCode == null) {
                throw new MissingRequiredPropertyException("NetworkSimArgs", "operatorKeyCode");
            }
            return $;
        }
    }

}
