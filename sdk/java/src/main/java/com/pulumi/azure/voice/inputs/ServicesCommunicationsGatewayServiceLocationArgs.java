// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.voice.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServicesCommunicationsGatewayServiceLocationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServicesCommunicationsGatewayServiceLocationArgs Empty = new ServicesCommunicationsGatewayServiceLocationArgs();

    /**
     * Specifies the allowed source IP address or CIDR ranges for media.
     * 
     */
    @Import(name="allowedMediaSourceAddressPrefixes")
    private @Nullable Output<List<String>> allowedMediaSourceAddressPrefixes;

    /**
     * @return Specifies the allowed source IP address or CIDR ranges for media.
     * 
     */
    public Optional<Output<List<String>>> allowedMediaSourceAddressPrefixes() {
        return Optional.ofNullable(this.allowedMediaSourceAddressPrefixes);
    }

    /**
     * Specifies the allowed source IP address or CIDR ranges for signaling.
     * 
     */
    @Import(name="allowedSignalingSourceAddressPrefixes")
    private @Nullable Output<List<String>> allowedSignalingSourceAddressPrefixes;

    /**
     * @return Specifies the allowed source IP address or CIDR ranges for signaling.
     * 
     */
    public Optional<Output<List<String>>> allowedSignalingSourceAddressPrefixes() {
        return Optional.ofNullable(this.allowedSignalingSourceAddressPrefixes);
    }

    /**
     * IP address to use to contact the ESRP from this region.
     * 
     * !&gt; **NOTE:** The `esrp_addresses` must be specified for each `service_location` when the`e911_type` is set to `DirectToEsrp`.  The `esrp_addresses` must not be specified for each `service_location` when the`e911_type` is set to `Standard`.
     * 
     */
    @Import(name="esrpAddresses")
    private @Nullable Output<List<String>> esrpAddresses;

    /**
     * @return IP address to use to contact the ESRP from this region.
     * 
     * !&gt; **NOTE:** The `esrp_addresses` must be specified for each `service_location` when the`e911_type` is set to `DirectToEsrp`.  The `esrp_addresses` must not be specified for each `service_location` when the`e911_type` is set to `Standard`.
     * 
     */
    public Optional<Output<List<String>>> esrpAddresses() {
        return Optional.ofNullable(this.esrpAddresses);
    }

    /**
     * Specifies the region in which the resources needed for Teams Calling will be deployed.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return Specifies the region in which the resources needed for Teams Calling will be deployed.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * IP address to use to contact the operator network from this region.
     * 
     */
    @Import(name="operatorAddresses", required=true)
    private Output<List<String>> operatorAddresses;

    /**
     * @return IP address to use to contact the operator network from this region.
     * 
     */
    public Output<List<String>> operatorAddresses() {
        return this.operatorAddresses;
    }

    private ServicesCommunicationsGatewayServiceLocationArgs() {}

    private ServicesCommunicationsGatewayServiceLocationArgs(ServicesCommunicationsGatewayServiceLocationArgs $) {
        this.allowedMediaSourceAddressPrefixes = $.allowedMediaSourceAddressPrefixes;
        this.allowedSignalingSourceAddressPrefixes = $.allowedSignalingSourceAddressPrefixes;
        this.esrpAddresses = $.esrpAddresses;
        this.location = $.location;
        this.operatorAddresses = $.operatorAddresses;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServicesCommunicationsGatewayServiceLocationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServicesCommunicationsGatewayServiceLocationArgs $;

        public Builder() {
            $ = new ServicesCommunicationsGatewayServiceLocationArgs();
        }

        public Builder(ServicesCommunicationsGatewayServiceLocationArgs defaults) {
            $ = new ServicesCommunicationsGatewayServiceLocationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedMediaSourceAddressPrefixes Specifies the allowed source IP address or CIDR ranges for media.
         * 
         * @return builder
         * 
         */
        public Builder allowedMediaSourceAddressPrefixes(@Nullable Output<List<String>> allowedMediaSourceAddressPrefixes) {
            $.allowedMediaSourceAddressPrefixes = allowedMediaSourceAddressPrefixes;
            return this;
        }

        /**
         * @param allowedMediaSourceAddressPrefixes Specifies the allowed source IP address or CIDR ranges for media.
         * 
         * @return builder
         * 
         */
        public Builder allowedMediaSourceAddressPrefixes(List<String> allowedMediaSourceAddressPrefixes) {
            return allowedMediaSourceAddressPrefixes(Output.of(allowedMediaSourceAddressPrefixes));
        }

        /**
         * @param allowedMediaSourceAddressPrefixes Specifies the allowed source IP address or CIDR ranges for media.
         * 
         * @return builder
         * 
         */
        public Builder allowedMediaSourceAddressPrefixes(String... allowedMediaSourceAddressPrefixes) {
            return allowedMediaSourceAddressPrefixes(List.of(allowedMediaSourceAddressPrefixes));
        }

        /**
         * @param allowedSignalingSourceAddressPrefixes Specifies the allowed source IP address or CIDR ranges for signaling.
         * 
         * @return builder
         * 
         */
        public Builder allowedSignalingSourceAddressPrefixes(@Nullable Output<List<String>> allowedSignalingSourceAddressPrefixes) {
            $.allowedSignalingSourceAddressPrefixes = allowedSignalingSourceAddressPrefixes;
            return this;
        }

        /**
         * @param allowedSignalingSourceAddressPrefixes Specifies the allowed source IP address or CIDR ranges for signaling.
         * 
         * @return builder
         * 
         */
        public Builder allowedSignalingSourceAddressPrefixes(List<String> allowedSignalingSourceAddressPrefixes) {
            return allowedSignalingSourceAddressPrefixes(Output.of(allowedSignalingSourceAddressPrefixes));
        }

        /**
         * @param allowedSignalingSourceAddressPrefixes Specifies the allowed source IP address or CIDR ranges for signaling.
         * 
         * @return builder
         * 
         */
        public Builder allowedSignalingSourceAddressPrefixes(String... allowedSignalingSourceAddressPrefixes) {
            return allowedSignalingSourceAddressPrefixes(List.of(allowedSignalingSourceAddressPrefixes));
        }

        /**
         * @param esrpAddresses IP address to use to contact the ESRP from this region.
         * 
         * !&gt; **NOTE:** The `esrp_addresses` must be specified for each `service_location` when the`e911_type` is set to `DirectToEsrp`.  The `esrp_addresses` must not be specified for each `service_location` when the`e911_type` is set to `Standard`.
         * 
         * @return builder
         * 
         */
        public Builder esrpAddresses(@Nullable Output<List<String>> esrpAddresses) {
            $.esrpAddresses = esrpAddresses;
            return this;
        }

        /**
         * @param esrpAddresses IP address to use to contact the ESRP from this region.
         * 
         * !&gt; **NOTE:** The `esrp_addresses` must be specified for each `service_location` when the`e911_type` is set to `DirectToEsrp`.  The `esrp_addresses` must not be specified for each `service_location` when the`e911_type` is set to `Standard`.
         * 
         * @return builder
         * 
         */
        public Builder esrpAddresses(List<String> esrpAddresses) {
            return esrpAddresses(Output.of(esrpAddresses));
        }

        /**
         * @param esrpAddresses IP address to use to contact the ESRP from this region.
         * 
         * !&gt; **NOTE:** The `esrp_addresses` must be specified for each `service_location` when the`e911_type` is set to `DirectToEsrp`.  The `esrp_addresses` must not be specified for each `service_location` when the`e911_type` is set to `Standard`.
         * 
         * @return builder
         * 
         */
        public Builder esrpAddresses(String... esrpAddresses) {
            return esrpAddresses(List.of(esrpAddresses));
        }

        /**
         * @param location Specifies the region in which the resources needed for Teams Calling will be deployed.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Specifies the region in which the resources needed for Teams Calling will be deployed.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param operatorAddresses IP address to use to contact the operator network from this region.
         * 
         * @return builder
         * 
         */
        public Builder operatorAddresses(Output<List<String>> operatorAddresses) {
            $.operatorAddresses = operatorAddresses;
            return this;
        }

        /**
         * @param operatorAddresses IP address to use to contact the operator network from this region.
         * 
         * @return builder
         * 
         */
        public Builder operatorAddresses(List<String> operatorAddresses) {
            return operatorAddresses(Output.of(operatorAddresses));
        }

        /**
         * @param operatorAddresses IP address to use to contact the operator network from this region.
         * 
         * @return builder
         * 
         */
        public Builder operatorAddresses(String... operatorAddresses) {
            return operatorAddresses(List.of(operatorAddresses));
        }

        public ServicesCommunicationsGatewayServiceLocationArgs build() {
            if ($.location == null) {
                throw new MissingRequiredPropertyException("ServicesCommunicationsGatewayServiceLocationArgs", "location");
            }
            if ($.operatorAddresses == null) {
                throw new MissingRequiredPropertyException("ServicesCommunicationsGatewayServiceLocationArgs", "operatorAddresses");
            }
            return $;
        }
    }

}
