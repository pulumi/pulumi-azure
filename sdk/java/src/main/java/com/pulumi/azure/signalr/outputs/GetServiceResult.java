// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.signalr.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetServiceResult {
    /**
     * @return Is aad auth enabled for this SignalR service?
     * 
     */
    private Boolean aadAuthEnabled;
    /**
     * @return The FQDN of the SignalR service.
     * 
     */
    private String hostname;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The publicly accessible IP of the SignalR service.
     * 
     */
    private String ipAddress;
    /**
     * @return Is local auth enable for this SignalR serviced?
     * 
     */
    private Boolean localAuthEnabled;
    /**
     * @return Specifies the supported Azure location where the SignalR service exists.
     * 
     */
    private String location;
    private String name;
    /**
     * @return The primary access key of the SignalR service.
     * 
     */
    private String primaryAccessKey;
    /**
     * @return The primary connection string of the SignalR service.
     * 
     */
    private String primaryConnectionString;
    /**
     * @return Is public network access enabled for this SignalR service?
     * 
     */
    private Boolean publicNetworkAccessEnabled;
    /**
     * @return The publicly accessible port of the SignalR service which is designed for browser/client use.
     * 
     */
    private Integer publicPort;
    private String resourceGroupName;
    /**
     * @return The secondary access key of the SignalR service.
     * 
     */
    private String secondaryAccessKey;
    /**
     * @return The secondary connection string of the SignalR service.
     * 
     */
    private String secondaryConnectionString;
    /**
     * @return The publicly accessible port of the SignalR service which is designed for customer server side use.
     * 
     */
    private Integer serverPort;
    /**
     * @return The serverless connection timeout of this SignalR service.
     * 
     */
    private Integer serverlessConnectionTimeoutInSeconds;
    private Map<String,String> tags;
    /**
     * @return Is tls client cert enabled for this SignalR service?
     * 
     */
    private Boolean tlsClientCertEnabled;

    private GetServiceResult() {}
    /**
     * @return Is aad auth enabled for this SignalR service?
     * 
     */
    public Boolean aadAuthEnabled() {
        return this.aadAuthEnabled;
    }
    /**
     * @return The FQDN of the SignalR service.
     * 
     */
    public String hostname() {
        return this.hostname;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The publicly accessible IP of the SignalR service.
     * 
     */
    public String ipAddress() {
        return this.ipAddress;
    }
    /**
     * @return Is local auth enable for this SignalR serviced?
     * 
     */
    public Boolean localAuthEnabled() {
        return this.localAuthEnabled;
    }
    /**
     * @return Specifies the supported Azure location where the SignalR service exists.
     * 
     */
    public String location() {
        return this.location;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return The primary access key of the SignalR service.
     * 
     */
    public String primaryAccessKey() {
        return this.primaryAccessKey;
    }
    /**
     * @return The primary connection string of the SignalR service.
     * 
     */
    public String primaryConnectionString() {
        return this.primaryConnectionString;
    }
    /**
     * @return Is public network access enabled for this SignalR service?
     * 
     */
    public Boolean publicNetworkAccessEnabled() {
        return this.publicNetworkAccessEnabled;
    }
    /**
     * @return The publicly accessible port of the SignalR service which is designed for browser/client use.
     * 
     */
    public Integer publicPort() {
        return this.publicPort;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return The secondary access key of the SignalR service.
     * 
     */
    public String secondaryAccessKey() {
        return this.secondaryAccessKey;
    }
    /**
     * @return The secondary connection string of the SignalR service.
     * 
     */
    public String secondaryConnectionString() {
        return this.secondaryConnectionString;
    }
    /**
     * @return The publicly accessible port of the SignalR service which is designed for customer server side use.
     * 
     */
    public Integer serverPort() {
        return this.serverPort;
    }
    /**
     * @return The serverless connection timeout of this SignalR service.
     * 
     */
    public Integer serverlessConnectionTimeoutInSeconds() {
        return this.serverlessConnectionTimeoutInSeconds;
    }
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return Is tls client cert enabled for this SignalR service?
     * 
     */
    public Boolean tlsClientCertEnabled() {
        return this.tlsClientCertEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean aadAuthEnabled;
        private String hostname;
        private String id;
        private String ipAddress;
        private Boolean localAuthEnabled;
        private String location;
        private String name;
        private String primaryAccessKey;
        private String primaryConnectionString;
        private Boolean publicNetworkAccessEnabled;
        private Integer publicPort;
        private String resourceGroupName;
        private String secondaryAccessKey;
        private String secondaryConnectionString;
        private Integer serverPort;
        private Integer serverlessConnectionTimeoutInSeconds;
        private Map<String,String> tags;
        private Boolean tlsClientCertEnabled;
        public Builder() {}
        public Builder(GetServiceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aadAuthEnabled = defaults.aadAuthEnabled;
    	      this.hostname = defaults.hostname;
    	      this.id = defaults.id;
    	      this.ipAddress = defaults.ipAddress;
    	      this.localAuthEnabled = defaults.localAuthEnabled;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.primaryAccessKey = defaults.primaryAccessKey;
    	      this.primaryConnectionString = defaults.primaryConnectionString;
    	      this.publicNetworkAccessEnabled = defaults.publicNetworkAccessEnabled;
    	      this.publicPort = defaults.publicPort;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.secondaryAccessKey = defaults.secondaryAccessKey;
    	      this.secondaryConnectionString = defaults.secondaryConnectionString;
    	      this.serverPort = defaults.serverPort;
    	      this.serverlessConnectionTimeoutInSeconds = defaults.serverlessConnectionTimeoutInSeconds;
    	      this.tags = defaults.tags;
    	      this.tlsClientCertEnabled = defaults.tlsClientCertEnabled;
        }

        @CustomType.Setter
        public Builder aadAuthEnabled(Boolean aadAuthEnabled) {
            if (aadAuthEnabled == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "aadAuthEnabled");
            }
            this.aadAuthEnabled = aadAuthEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder hostname(String hostname) {
            if (hostname == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "hostname");
            }
            this.hostname = hostname;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ipAddress(String ipAddress) {
            if (ipAddress == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "ipAddress");
            }
            this.ipAddress = ipAddress;
            return this;
        }
        @CustomType.Setter
        public Builder localAuthEnabled(Boolean localAuthEnabled) {
            if (localAuthEnabled == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "localAuthEnabled");
            }
            this.localAuthEnabled = localAuthEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder primaryAccessKey(String primaryAccessKey) {
            if (primaryAccessKey == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "primaryAccessKey");
            }
            this.primaryAccessKey = primaryAccessKey;
            return this;
        }
        @CustomType.Setter
        public Builder primaryConnectionString(String primaryConnectionString) {
            if (primaryConnectionString == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "primaryConnectionString");
            }
            this.primaryConnectionString = primaryConnectionString;
            return this;
        }
        @CustomType.Setter
        public Builder publicNetworkAccessEnabled(Boolean publicNetworkAccessEnabled) {
            if (publicNetworkAccessEnabled == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "publicNetworkAccessEnabled");
            }
            this.publicNetworkAccessEnabled = publicNetworkAccessEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder publicPort(Integer publicPort) {
            if (publicPort == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "publicPort");
            }
            this.publicPort = publicPort;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            if (resourceGroupName == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "resourceGroupName");
            }
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder secondaryAccessKey(String secondaryAccessKey) {
            if (secondaryAccessKey == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "secondaryAccessKey");
            }
            this.secondaryAccessKey = secondaryAccessKey;
            return this;
        }
        @CustomType.Setter
        public Builder secondaryConnectionString(String secondaryConnectionString) {
            if (secondaryConnectionString == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "secondaryConnectionString");
            }
            this.secondaryConnectionString = secondaryConnectionString;
            return this;
        }
        @CustomType.Setter
        public Builder serverPort(Integer serverPort) {
            if (serverPort == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "serverPort");
            }
            this.serverPort = serverPort;
            return this;
        }
        @CustomType.Setter
        public Builder serverlessConnectionTimeoutInSeconds(Integer serverlessConnectionTimeoutInSeconds) {
            if (serverlessConnectionTimeoutInSeconds == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "serverlessConnectionTimeoutInSeconds");
            }
            this.serverlessConnectionTimeoutInSeconds = serverlessConnectionTimeoutInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder tlsClientCertEnabled(Boolean tlsClientCertEnabled) {
            if (tlsClientCertEnabled == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "tlsClientCertEnabled");
            }
            this.tlsClientCertEnabled = tlsClientCertEnabled;
            return this;
        }
        public GetServiceResult build() {
            final var _resultValue = new GetServiceResult();
            _resultValue.aadAuthEnabled = aadAuthEnabled;
            _resultValue.hostname = hostname;
            _resultValue.id = id;
            _resultValue.ipAddress = ipAddress;
            _resultValue.localAuthEnabled = localAuthEnabled;
            _resultValue.location = location;
            _resultValue.name = name;
            _resultValue.primaryAccessKey = primaryAccessKey;
            _resultValue.primaryConnectionString = primaryConnectionString;
            _resultValue.publicNetworkAccessEnabled = publicNetworkAccessEnabled;
            _resultValue.publicPort = publicPort;
            _resultValue.resourceGroupName = resourceGroupName;
            _resultValue.secondaryAccessKey = secondaryAccessKey;
            _resultValue.secondaryConnectionString = secondaryConnectionString;
            _resultValue.serverPort = serverPort;
            _resultValue.serverlessConnectionTimeoutInSeconds = serverlessConnectionTimeoutInSeconds;
            _resultValue.tags = tags;
            _resultValue.tlsClientCertEnabled = tlsClientCertEnabled;
            return _resultValue;
        }
    }
}
