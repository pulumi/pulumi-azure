// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerservice.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KubernetesClusterNodePoolUpgradeSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final KubernetesClusterNodePoolUpgradeSettingsArgs Empty = new KubernetesClusterNodePoolUpgradeSettingsArgs();

    /**
     * The amount of time in minutes to wait on eviction of pods and graceful termination per node. This eviction wait time honors waiting on pod disruption budgets. If this time is exceeded, the upgrade fails. Unsetting this after configuring it will force a new resource to be created.
     * 
     */
    @Import(name="drainTimeoutInMinutes")
    private @Nullable Output<Integer> drainTimeoutInMinutes;

    /**
     * @return The amount of time in minutes to wait on eviction of pods and graceful termination per node. This eviction wait time honors waiting on pod disruption budgets. If this time is exceeded, the upgrade fails. Unsetting this after configuring it will force a new resource to be created.
     * 
     */
    public Optional<Output<Integer>> drainTimeoutInMinutes() {
        return Optional.ofNullable(this.drainTimeoutInMinutes);
    }

    /**
     * The maximum number or percentage of nodes which will be added to the Node Pool size during an upgrade.
     * 
     */
    @Import(name="maxSurge", required=true)
    private Output<String> maxSurge;

    /**
     * @return The maximum number or percentage of nodes which will be added to the Node Pool size during an upgrade.
     * 
     */
    public Output<String> maxSurge() {
        return this.maxSurge;
    }

    /**
     * The amount of time in minutes to wait after draining a node and before reimaging and moving on to next node.
     * 
     */
    @Import(name="nodeSoakDurationInMinutes")
    private @Nullable Output<Integer> nodeSoakDurationInMinutes;

    /**
     * @return The amount of time in minutes to wait after draining a node and before reimaging and moving on to next node.
     * 
     */
    public Optional<Output<Integer>> nodeSoakDurationInMinutes() {
        return Optional.ofNullable(this.nodeSoakDurationInMinutes);
    }

    private KubernetesClusterNodePoolUpgradeSettingsArgs() {}

    private KubernetesClusterNodePoolUpgradeSettingsArgs(KubernetesClusterNodePoolUpgradeSettingsArgs $) {
        this.drainTimeoutInMinutes = $.drainTimeoutInMinutes;
        this.maxSurge = $.maxSurge;
        this.nodeSoakDurationInMinutes = $.nodeSoakDurationInMinutes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KubernetesClusterNodePoolUpgradeSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KubernetesClusterNodePoolUpgradeSettingsArgs $;

        public Builder() {
            $ = new KubernetesClusterNodePoolUpgradeSettingsArgs();
        }

        public Builder(KubernetesClusterNodePoolUpgradeSettingsArgs defaults) {
            $ = new KubernetesClusterNodePoolUpgradeSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param drainTimeoutInMinutes The amount of time in minutes to wait on eviction of pods and graceful termination per node. This eviction wait time honors waiting on pod disruption budgets. If this time is exceeded, the upgrade fails. Unsetting this after configuring it will force a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder drainTimeoutInMinutes(@Nullable Output<Integer> drainTimeoutInMinutes) {
            $.drainTimeoutInMinutes = drainTimeoutInMinutes;
            return this;
        }

        /**
         * @param drainTimeoutInMinutes The amount of time in minutes to wait on eviction of pods and graceful termination per node. This eviction wait time honors waiting on pod disruption budgets. If this time is exceeded, the upgrade fails. Unsetting this after configuring it will force a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder drainTimeoutInMinutes(Integer drainTimeoutInMinutes) {
            return drainTimeoutInMinutes(Output.of(drainTimeoutInMinutes));
        }

        /**
         * @param maxSurge The maximum number or percentage of nodes which will be added to the Node Pool size during an upgrade.
         * 
         * @return builder
         * 
         */
        public Builder maxSurge(Output<String> maxSurge) {
            $.maxSurge = maxSurge;
            return this;
        }

        /**
         * @param maxSurge The maximum number or percentage of nodes which will be added to the Node Pool size during an upgrade.
         * 
         * @return builder
         * 
         */
        public Builder maxSurge(String maxSurge) {
            return maxSurge(Output.of(maxSurge));
        }

        /**
         * @param nodeSoakDurationInMinutes The amount of time in minutes to wait after draining a node and before reimaging and moving on to next node.
         * 
         * @return builder
         * 
         */
        public Builder nodeSoakDurationInMinutes(@Nullable Output<Integer> nodeSoakDurationInMinutes) {
            $.nodeSoakDurationInMinutes = nodeSoakDurationInMinutes;
            return this;
        }

        /**
         * @param nodeSoakDurationInMinutes The amount of time in minutes to wait after draining a node and before reimaging and moving on to next node.
         * 
         * @return builder
         * 
         */
        public Builder nodeSoakDurationInMinutes(Integer nodeSoakDurationInMinutes) {
            return nodeSoakDurationInMinutes(Output.of(nodeSoakDurationInMinutes));
        }

        public KubernetesClusterNodePoolUpgradeSettingsArgs build() {
            if ($.maxSurge == null) {
                throw new MissingRequiredPropertyException("KubernetesClusterNodePoolUpgradeSettingsArgs", "maxSurge");
            }
            return $;
        }
    }

}
