// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appservice.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LinuxWebAppAuthSettingsV2ActiveDirectoryV2Args extends com.pulumi.resources.ResourceArgs {

    public static final LinuxWebAppAuthSettingsV2ActiveDirectoryV2Args Empty = new LinuxWebAppAuthSettingsV2ActiveDirectoryV2Args();

    /**
     * The list of allowed Applications for the Default Authorisation Policy.
     * 
     */
    @Import(name="allowedApplications")
    private @Nullable Output<List<String>> allowedApplications;

    /**
     * @return The list of allowed Applications for the Default Authorisation Policy.
     * 
     */
    public Optional<Output<List<String>>> allowedApplications() {
        return Optional.ofNullable(this.allowedApplications);
    }

    /**
     * Specifies a list of Allowed audience values to consider when validating JWTs issued by Azure Active Directory.
     * 
     * &gt; **Note:** The `client_id` value is always considered an allowed audience.
     * 
     */
    @Import(name="allowedAudiences")
    private @Nullable Output<List<String>> allowedAudiences;

    /**
     * @return Specifies a list of Allowed audience values to consider when validating JWTs issued by Azure Active Directory.
     * 
     * &gt; **Note:** The `client_id` value is always considered an allowed audience.
     * 
     */
    public Optional<Output<List<String>>> allowedAudiences() {
        return Optional.ofNullable(this.allowedAudiences);
    }

    /**
     * The list of allowed Group Names for the Default Authorisation Policy.
     * 
     */
    @Import(name="allowedGroups")
    private @Nullable Output<List<String>> allowedGroups;

    /**
     * @return The list of allowed Group Names for the Default Authorisation Policy.
     * 
     */
    public Optional<Output<List<String>>> allowedGroups() {
        return Optional.ofNullable(this.allowedGroups);
    }

    /**
     * The list of allowed Identities for the Default Authorisation Policy.
     * 
     */
    @Import(name="allowedIdentities")
    private @Nullable Output<List<String>> allowedIdentities;

    /**
     * @return The list of allowed Identities for the Default Authorisation Policy.
     * 
     */
    public Optional<Output<List<String>>> allowedIdentities() {
        return Optional.ofNullable(this.allowedIdentities);
    }

    /**
     * The ID of the Client to use to authenticate with Azure Active Directory.
     * 
     */
    @Import(name="clientId", required=true)
    private Output<String> clientId;

    /**
     * @return The ID of the Client to use to authenticate with Azure Active Directory.
     * 
     */
    public Output<String> clientId() {
        return this.clientId;
    }

    @Import(name="clientSecretCertificateThumbprint")
    private @Nullable Output<String> clientSecretCertificateThumbprint;

    public Optional<Output<String>> clientSecretCertificateThumbprint() {
        return Optional.ofNullable(this.clientSecretCertificateThumbprint);
    }

    /**
     * The App Setting name that contains the client secret of the Client. Cannot be used with `client_secret`.
     * 
     */
    @Import(name="clientSecretSettingName")
    private @Nullable Output<String> clientSecretSettingName;

    /**
     * @return The App Setting name that contains the client secret of the Client. Cannot be used with `client_secret`.
     * 
     */
    public Optional<Output<String>> clientSecretSettingName() {
        return Optional.ofNullable(this.clientSecretSettingName);
    }

    /**
     * A list of Allowed Client Applications in the JWT Claim.
     * 
     */
    @Import(name="jwtAllowedClientApplications")
    private @Nullable Output<List<String>> jwtAllowedClientApplications;

    /**
     * @return A list of Allowed Client Applications in the JWT Claim.
     * 
     */
    public Optional<Output<List<String>>> jwtAllowedClientApplications() {
        return Optional.ofNullable(this.jwtAllowedClientApplications);
    }

    /**
     * A list of Allowed Groups in the JWT Claim.
     * 
     */
    @Import(name="jwtAllowedGroups")
    private @Nullable Output<List<String>> jwtAllowedGroups;

    /**
     * @return A list of Allowed Groups in the JWT Claim.
     * 
     */
    public Optional<Output<List<String>>> jwtAllowedGroups() {
        return Optional.ofNullable(this.jwtAllowedGroups);
    }

    /**
     * A map of key-value pairs to send to the Authorisation Endpoint when a user logs in.
     * 
     */
    @Import(name="loginParameters")
    private @Nullable Output<Map<String,String>> loginParameters;

    /**
     * @return A map of key-value pairs to send to the Authorisation Endpoint when a user logs in.
     * 
     */
    public Optional<Output<Map<String,String>>> loginParameters() {
        return Optional.ofNullable(this.loginParameters);
    }

    /**
     * The Azure Tenant Endpoint for the Authenticating Tenant. e.g. `https://login.microsoftonline.com/v2.0/{tenant-guid}/`
     * 
     */
    @Import(name="tenantAuthEndpoint", required=true)
    private Output<String> tenantAuthEndpoint;

    /**
     * @return The Azure Tenant Endpoint for the Authenticating Tenant. e.g. `https://login.microsoftonline.com/v2.0/{tenant-guid}/`
     * 
     */
    public Output<String> tenantAuthEndpoint() {
        return this.tenantAuthEndpoint;
    }

    /**
     * Should the www-authenticate provider should be omitted from the request? Defaults to `false`.
     * 
     */
    @Import(name="wwwAuthenticationDisabled")
    private @Nullable Output<Boolean> wwwAuthenticationDisabled;

    /**
     * @return Should the www-authenticate provider should be omitted from the request? Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> wwwAuthenticationDisabled() {
        return Optional.ofNullable(this.wwwAuthenticationDisabled);
    }

    private LinuxWebAppAuthSettingsV2ActiveDirectoryV2Args() {}

    private LinuxWebAppAuthSettingsV2ActiveDirectoryV2Args(LinuxWebAppAuthSettingsV2ActiveDirectoryV2Args $) {
        this.allowedApplications = $.allowedApplications;
        this.allowedAudiences = $.allowedAudiences;
        this.allowedGroups = $.allowedGroups;
        this.allowedIdentities = $.allowedIdentities;
        this.clientId = $.clientId;
        this.clientSecretCertificateThumbprint = $.clientSecretCertificateThumbprint;
        this.clientSecretSettingName = $.clientSecretSettingName;
        this.jwtAllowedClientApplications = $.jwtAllowedClientApplications;
        this.jwtAllowedGroups = $.jwtAllowedGroups;
        this.loginParameters = $.loginParameters;
        this.tenantAuthEndpoint = $.tenantAuthEndpoint;
        this.wwwAuthenticationDisabled = $.wwwAuthenticationDisabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LinuxWebAppAuthSettingsV2ActiveDirectoryV2Args defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LinuxWebAppAuthSettingsV2ActiveDirectoryV2Args $;

        public Builder() {
            $ = new LinuxWebAppAuthSettingsV2ActiveDirectoryV2Args();
        }

        public Builder(LinuxWebAppAuthSettingsV2ActiveDirectoryV2Args defaults) {
            $ = new LinuxWebAppAuthSettingsV2ActiveDirectoryV2Args(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedApplications The list of allowed Applications for the Default Authorisation Policy.
         * 
         * @return builder
         * 
         */
        public Builder allowedApplications(@Nullable Output<List<String>> allowedApplications) {
            $.allowedApplications = allowedApplications;
            return this;
        }

        /**
         * @param allowedApplications The list of allowed Applications for the Default Authorisation Policy.
         * 
         * @return builder
         * 
         */
        public Builder allowedApplications(List<String> allowedApplications) {
            return allowedApplications(Output.of(allowedApplications));
        }

        /**
         * @param allowedApplications The list of allowed Applications for the Default Authorisation Policy.
         * 
         * @return builder
         * 
         */
        public Builder allowedApplications(String... allowedApplications) {
            return allowedApplications(List.of(allowedApplications));
        }

        /**
         * @param allowedAudiences Specifies a list of Allowed audience values to consider when validating JWTs issued by Azure Active Directory.
         * 
         * &gt; **Note:** The `client_id` value is always considered an allowed audience.
         * 
         * @return builder
         * 
         */
        public Builder allowedAudiences(@Nullable Output<List<String>> allowedAudiences) {
            $.allowedAudiences = allowedAudiences;
            return this;
        }

        /**
         * @param allowedAudiences Specifies a list of Allowed audience values to consider when validating JWTs issued by Azure Active Directory.
         * 
         * &gt; **Note:** The `client_id` value is always considered an allowed audience.
         * 
         * @return builder
         * 
         */
        public Builder allowedAudiences(List<String> allowedAudiences) {
            return allowedAudiences(Output.of(allowedAudiences));
        }

        /**
         * @param allowedAudiences Specifies a list of Allowed audience values to consider when validating JWTs issued by Azure Active Directory.
         * 
         * &gt; **Note:** The `client_id` value is always considered an allowed audience.
         * 
         * @return builder
         * 
         */
        public Builder allowedAudiences(String... allowedAudiences) {
            return allowedAudiences(List.of(allowedAudiences));
        }

        /**
         * @param allowedGroups The list of allowed Group Names for the Default Authorisation Policy.
         * 
         * @return builder
         * 
         */
        public Builder allowedGroups(@Nullable Output<List<String>> allowedGroups) {
            $.allowedGroups = allowedGroups;
            return this;
        }

        /**
         * @param allowedGroups The list of allowed Group Names for the Default Authorisation Policy.
         * 
         * @return builder
         * 
         */
        public Builder allowedGroups(List<String> allowedGroups) {
            return allowedGroups(Output.of(allowedGroups));
        }

        /**
         * @param allowedGroups The list of allowed Group Names for the Default Authorisation Policy.
         * 
         * @return builder
         * 
         */
        public Builder allowedGroups(String... allowedGroups) {
            return allowedGroups(List.of(allowedGroups));
        }

        /**
         * @param allowedIdentities The list of allowed Identities for the Default Authorisation Policy.
         * 
         * @return builder
         * 
         */
        public Builder allowedIdentities(@Nullable Output<List<String>> allowedIdentities) {
            $.allowedIdentities = allowedIdentities;
            return this;
        }

        /**
         * @param allowedIdentities The list of allowed Identities for the Default Authorisation Policy.
         * 
         * @return builder
         * 
         */
        public Builder allowedIdentities(List<String> allowedIdentities) {
            return allowedIdentities(Output.of(allowedIdentities));
        }

        /**
         * @param allowedIdentities The list of allowed Identities for the Default Authorisation Policy.
         * 
         * @return builder
         * 
         */
        public Builder allowedIdentities(String... allowedIdentities) {
            return allowedIdentities(List.of(allowedIdentities));
        }

        /**
         * @param clientId The ID of the Client to use to authenticate with Azure Active Directory.
         * 
         * @return builder
         * 
         */
        public Builder clientId(Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId The ID of the Client to use to authenticate with Azure Active Directory.
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        public Builder clientSecretCertificateThumbprint(@Nullable Output<String> clientSecretCertificateThumbprint) {
            $.clientSecretCertificateThumbprint = clientSecretCertificateThumbprint;
            return this;
        }

        public Builder clientSecretCertificateThumbprint(String clientSecretCertificateThumbprint) {
            return clientSecretCertificateThumbprint(Output.of(clientSecretCertificateThumbprint));
        }

        /**
         * @param clientSecretSettingName The App Setting name that contains the client secret of the Client. Cannot be used with `client_secret`.
         * 
         * @return builder
         * 
         */
        public Builder clientSecretSettingName(@Nullable Output<String> clientSecretSettingName) {
            $.clientSecretSettingName = clientSecretSettingName;
            return this;
        }

        /**
         * @param clientSecretSettingName The App Setting name that contains the client secret of the Client. Cannot be used with `client_secret`.
         * 
         * @return builder
         * 
         */
        public Builder clientSecretSettingName(String clientSecretSettingName) {
            return clientSecretSettingName(Output.of(clientSecretSettingName));
        }

        /**
         * @param jwtAllowedClientApplications A list of Allowed Client Applications in the JWT Claim.
         * 
         * @return builder
         * 
         */
        public Builder jwtAllowedClientApplications(@Nullable Output<List<String>> jwtAllowedClientApplications) {
            $.jwtAllowedClientApplications = jwtAllowedClientApplications;
            return this;
        }

        /**
         * @param jwtAllowedClientApplications A list of Allowed Client Applications in the JWT Claim.
         * 
         * @return builder
         * 
         */
        public Builder jwtAllowedClientApplications(List<String> jwtAllowedClientApplications) {
            return jwtAllowedClientApplications(Output.of(jwtAllowedClientApplications));
        }

        /**
         * @param jwtAllowedClientApplications A list of Allowed Client Applications in the JWT Claim.
         * 
         * @return builder
         * 
         */
        public Builder jwtAllowedClientApplications(String... jwtAllowedClientApplications) {
            return jwtAllowedClientApplications(List.of(jwtAllowedClientApplications));
        }

        /**
         * @param jwtAllowedGroups A list of Allowed Groups in the JWT Claim.
         * 
         * @return builder
         * 
         */
        public Builder jwtAllowedGroups(@Nullable Output<List<String>> jwtAllowedGroups) {
            $.jwtAllowedGroups = jwtAllowedGroups;
            return this;
        }

        /**
         * @param jwtAllowedGroups A list of Allowed Groups in the JWT Claim.
         * 
         * @return builder
         * 
         */
        public Builder jwtAllowedGroups(List<String> jwtAllowedGroups) {
            return jwtAllowedGroups(Output.of(jwtAllowedGroups));
        }

        /**
         * @param jwtAllowedGroups A list of Allowed Groups in the JWT Claim.
         * 
         * @return builder
         * 
         */
        public Builder jwtAllowedGroups(String... jwtAllowedGroups) {
            return jwtAllowedGroups(List.of(jwtAllowedGroups));
        }

        /**
         * @param loginParameters A map of key-value pairs to send to the Authorisation Endpoint when a user logs in.
         * 
         * @return builder
         * 
         */
        public Builder loginParameters(@Nullable Output<Map<String,String>> loginParameters) {
            $.loginParameters = loginParameters;
            return this;
        }

        /**
         * @param loginParameters A map of key-value pairs to send to the Authorisation Endpoint when a user logs in.
         * 
         * @return builder
         * 
         */
        public Builder loginParameters(Map<String,String> loginParameters) {
            return loginParameters(Output.of(loginParameters));
        }

        /**
         * @param tenantAuthEndpoint The Azure Tenant Endpoint for the Authenticating Tenant. e.g. `https://login.microsoftonline.com/v2.0/{tenant-guid}/`
         * 
         * @return builder
         * 
         */
        public Builder tenantAuthEndpoint(Output<String> tenantAuthEndpoint) {
            $.tenantAuthEndpoint = tenantAuthEndpoint;
            return this;
        }

        /**
         * @param tenantAuthEndpoint The Azure Tenant Endpoint for the Authenticating Tenant. e.g. `https://login.microsoftonline.com/v2.0/{tenant-guid}/`
         * 
         * @return builder
         * 
         */
        public Builder tenantAuthEndpoint(String tenantAuthEndpoint) {
            return tenantAuthEndpoint(Output.of(tenantAuthEndpoint));
        }

        /**
         * @param wwwAuthenticationDisabled Should the www-authenticate provider should be omitted from the request? Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder wwwAuthenticationDisabled(@Nullable Output<Boolean> wwwAuthenticationDisabled) {
            $.wwwAuthenticationDisabled = wwwAuthenticationDisabled;
            return this;
        }

        /**
         * @param wwwAuthenticationDisabled Should the www-authenticate provider should be omitted from the request? Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder wwwAuthenticationDisabled(Boolean wwwAuthenticationDisabled) {
            return wwwAuthenticationDisabled(Output.of(wwwAuthenticationDisabled));
        }

        public LinuxWebAppAuthSettingsV2ActiveDirectoryV2Args build() {
            $.clientId = Objects.requireNonNull($.clientId, "expected parameter 'clientId' to be non-null");
            $.tenantAuthEndpoint = Objects.requireNonNull($.tenantAuthEndpoint, "expected parameter 'tenantAuthEndpoint' to be non-null");
            return $;
        }
    }

}
