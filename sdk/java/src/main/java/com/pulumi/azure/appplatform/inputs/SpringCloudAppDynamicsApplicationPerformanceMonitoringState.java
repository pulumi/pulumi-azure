// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appplatform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SpringCloudAppDynamicsApplicationPerformanceMonitoringState extends com.pulumi.resources.ResourceArgs {

    public static final SpringCloudAppDynamicsApplicationPerformanceMonitoringState Empty = new SpringCloudAppDynamicsApplicationPerformanceMonitoringState();

    /**
     * Specifies the account access key used to authenticate with the Controller.
     * 
     */
    @Import(name="agentAccountAccessKey")
    private @Nullable Output<String> agentAccountAccessKey;

    /**
     * @return Specifies the account access key used to authenticate with the Controller.
     * 
     */
    public Optional<Output<String>> agentAccountAccessKey() {
        return Optional.ofNullable(this.agentAccountAccessKey);
    }

    /**
     * Specifies the account name of the App Dynamics account.
     * 
     */
    @Import(name="agentAccountName")
    private @Nullable Output<String> agentAccountName;

    /**
     * @return Specifies the account name of the App Dynamics account.
     * 
     */
    public Optional<Output<String>> agentAccountName() {
        return Optional.ofNullable(this.agentAccountName);
    }

    /**
     * Specifies the name of the logical business application that this JVM node belongs to.
     * 
     */
    @Import(name="agentApplicationName")
    private @Nullable Output<String> agentApplicationName;

    /**
     * @return Specifies the name of the logical business application that this JVM node belongs to.
     * 
     */
    public Optional<Output<String>> agentApplicationName() {
        return Optional.ofNullable(this.agentApplicationName);
    }

    /**
     * Specifies the name of the node. Where JVMs are dynamically created.
     * 
     */
    @Import(name="agentNodeName")
    private @Nullable Output<String> agentNodeName;

    /**
     * @return Specifies the name of the node. Where JVMs are dynamically created.
     * 
     */
    public Optional<Output<String>> agentNodeName() {
        return Optional.ofNullable(this.agentNodeName);
    }

    /**
     * Specifies the name of the tier that this JVM node belongs to.
     * 
     */
    @Import(name="agentTierName")
    private @Nullable Output<String> agentTierName;

    /**
     * @return Specifies the name of the tier that this JVM node belongs to.
     * 
     */
    public Optional<Output<String>> agentTierName() {
        return Optional.ofNullable(this.agentTierName);
    }

    /**
     * Specifies the unique host ID which is used to Logically partition a single physical host or virtual machine such that it appears to the Controller that the application is running on different machines.
     * 
     */
    @Import(name="agentUniqueHostId")
    private @Nullable Output<String> agentUniqueHostId;

    /**
     * @return Specifies the unique host ID which is used to Logically partition a single physical host or virtual machine such that it appears to the Controller that the application is running on different machines.
     * 
     */
    public Optional<Output<String>> agentUniqueHostId() {
        return Optional.ofNullable(this.agentUniqueHostId);
    }

    /**
     * Specifies the hostname or the IP address of the AppDynamics Controller.
     * 
     */
    @Import(name="controllerHostName")
    private @Nullable Output<String> controllerHostName;

    /**
     * @return Specifies the hostname or the IP address of the AppDynamics Controller.
     * 
     */
    public Optional<Output<String>> controllerHostName() {
        return Optional.ofNullable(this.controllerHostName);
    }

    /**
     * Specifies the HTTP(S) port of the AppDynamics Controller. This is the port used to access the AppDynamics browser-based user interface.
     * 
     */
    @Import(name="controllerPort")
    private @Nullable Output<Integer> controllerPort;

    /**
     * @return Specifies the HTTP(S) port of the AppDynamics Controller. This is the port used to access the AppDynamics browser-based user interface.
     * 
     */
    public Optional<Output<Integer>> controllerPort() {
        return Optional.ofNullable(this.controllerPort);
    }

    /**
     * Specifies whether enable use SSL (HTTPS) to connect to the AppDynamics Controller.
     * 
     */
    @Import(name="controllerSslEnabled")
    private @Nullable Output<Boolean> controllerSslEnabled;

    /**
     * @return Specifies whether enable use SSL (HTTPS) to connect to the AppDynamics Controller.
     * 
     */
    public Optional<Output<Boolean>> controllerSslEnabled() {
        return Optional.ofNullable(this.controllerSslEnabled);
    }

    /**
     * Specifies whether the Spring Cloud Application Performance Monitoring resource for Application Insights is enabled globally. Defaults to `false`.
     * 
     */
    @Import(name="globallyEnabled")
    private @Nullable Output<Boolean> globallyEnabled;

    /**
     * @return Specifies whether the Spring Cloud Application Performance Monitoring resource for Application Insights is enabled globally. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> globallyEnabled() {
        return Optional.ofNullable(this.globallyEnabled);
    }

    /**
     * The name which should be used for this Spring Cloud Application Performance Monitoring resource for App Dynamics. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name which should be used for this Spring Cloud Application Performance Monitoring resource for App Dynamics. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the Spring Cloud Service. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="springCloudServiceId")
    private @Nullable Output<String> springCloudServiceId;

    /**
     * @return The ID of the Spring Cloud Service. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> springCloudServiceId() {
        return Optional.ofNullable(this.springCloudServiceId);
    }

    private SpringCloudAppDynamicsApplicationPerformanceMonitoringState() {}

    private SpringCloudAppDynamicsApplicationPerformanceMonitoringState(SpringCloudAppDynamicsApplicationPerformanceMonitoringState $) {
        this.agentAccountAccessKey = $.agentAccountAccessKey;
        this.agentAccountName = $.agentAccountName;
        this.agentApplicationName = $.agentApplicationName;
        this.agentNodeName = $.agentNodeName;
        this.agentTierName = $.agentTierName;
        this.agentUniqueHostId = $.agentUniqueHostId;
        this.controllerHostName = $.controllerHostName;
        this.controllerPort = $.controllerPort;
        this.controllerSslEnabled = $.controllerSslEnabled;
        this.globallyEnabled = $.globallyEnabled;
        this.name = $.name;
        this.springCloudServiceId = $.springCloudServiceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SpringCloudAppDynamicsApplicationPerformanceMonitoringState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SpringCloudAppDynamicsApplicationPerformanceMonitoringState $;

        public Builder() {
            $ = new SpringCloudAppDynamicsApplicationPerformanceMonitoringState();
        }

        public Builder(SpringCloudAppDynamicsApplicationPerformanceMonitoringState defaults) {
            $ = new SpringCloudAppDynamicsApplicationPerformanceMonitoringState(Objects.requireNonNull(defaults));
        }

        /**
         * @param agentAccountAccessKey Specifies the account access key used to authenticate with the Controller.
         * 
         * @return builder
         * 
         */
        public Builder agentAccountAccessKey(@Nullable Output<String> agentAccountAccessKey) {
            $.agentAccountAccessKey = agentAccountAccessKey;
            return this;
        }

        /**
         * @param agentAccountAccessKey Specifies the account access key used to authenticate with the Controller.
         * 
         * @return builder
         * 
         */
        public Builder agentAccountAccessKey(String agentAccountAccessKey) {
            return agentAccountAccessKey(Output.of(agentAccountAccessKey));
        }

        /**
         * @param agentAccountName Specifies the account name of the App Dynamics account.
         * 
         * @return builder
         * 
         */
        public Builder agentAccountName(@Nullable Output<String> agentAccountName) {
            $.agentAccountName = agentAccountName;
            return this;
        }

        /**
         * @param agentAccountName Specifies the account name of the App Dynamics account.
         * 
         * @return builder
         * 
         */
        public Builder agentAccountName(String agentAccountName) {
            return agentAccountName(Output.of(agentAccountName));
        }

        /**
         * @param agentApplicationName Specifies the name of the logical business application that this JVM node belongs to.
         * 
         * @return builder
         * 
         */
        public Builder agentApplicationName(@Nullable Output<String> agentApplicationName) {
            $.agentApplicationName = agentApplicationName;
            return this;
        }

        /**
         * @param agentApplicationName Specifies the name of the logical business application that this JVM node belongs to.
         * 
         * @return builder
         * 
         */
        public Builder agentApplicationName(String agentApplicationName) {
            return agentApplicationName(Output.of(agentApplicationName));
        }

        /**
         * @param agentNodeName Specifies the name of the node. Where JVMs are dynamically created.
         * 
         * @return builder
         * 
         */
        public Builder agentNodeName(@Nullable Output<String> agentNodeName) {
            $.agentNodeName = agentNodeName;
            return this;
        }

        /**
         * @param agentNodeName Specifies the name of the node. Where JVMs are dynamically created.
         * 
         * @return builder
         * 
         */
        public Builder agentNodeName(String agentNodeName) {
            return agentNodeName(Output.of(agentNodeName));
        }

        /**
         * @param agentTierName Specifies the name of the tier that this JVM node belongs to.
         * 
         * @return builder
         * 
         */
        public Builder agentTierName(@Nullable Output<String> agentTierName) {
            $.agentTierName = agentTierName;
            return this;
        }

        /**
         * @param agentTierName Specifies the name of the tier that this JVM node belongs to.
         * 
         * @return builder
         * 
         */
        public Builder agentTierName(String agentTierName) {
            return agentTierName(Output.of(agentTierName));
        }

        /**
         * @param agentUniqueHostId Specifies the unique host ID which is used to Logically partition a single physical host or virtual machine such that it appears to the Controller that the application is running on different machines.
         * 
         * @return builder
         * 
         */
        public Builder agentUniqueHostId(@Nullable Output<String> agentUniqueHostId) {
            $.agentUniqueHostId = agentUniqueHostId;
            return this;
        }

        /**
         * @param agentUniqueHostId Specifies the unique host ID which is used to Logically partition a single physical host or virtual machine such that it appears to the Controller that the application is running on different machines.
         * 
         * @return builder
         * 
         */
        public Builder agentUniqueHostId(String agentUniqueHostId) {
            return agentUniqueHostId(Output.of(agentUniqueHostId));
        }

        /**
         * @param controllerHostName Specifies the hostname or the IP address of the AppDynamics Controller.
         * 
         * @return builder
         * 
         */
        public Builder controllerHostName(@Nullable Output<String> controllerHostName) {
            $.controllerHostName = controllerHostName;
            return this;
        }

        /**
         * @param controllerHostName Specifies the hostname or the IP address of the AppDynamics Controller.
         * 
         * @return builder
         * 
         */
        public Builder controllerHostName(String controllerHostName) {
            return controllerHostName(Output.of(controllerHostName));
        }

        /**
         * @param controllerPort Specifies the HTTP(S) port of the AppDynamics Controller. This is the port used to access the AppDynamics browser-based user interface.
         * 
         * @return builder
         * 
         */
        public Builder controllerPort(@Nullable Output<Integer> controllerPort) {
            $.controllerPort = controllerPort;
            return this;
        }

        /**
         * @param controllerPort Specifies the HTTP(S) port of the AppDynamics Controller. This is the port used to access the AppDynamics browser-based user interface.
         * 
         * @return builder
         * 
         */
        public Builder controllerPort(Integer controllerPort) {
            return controllerPort(Output.of(controllerPort));
        }

        /**
         * @param controllerSslEnabled Specifies whether enable use SSL (HTTPS) to connect to the AppDynamics Controller.
         * 
         * @return builder
         * 
         */
        public Builder controllerSslEnabled(@Nullable Output<Boolean> controllerSslEnabled) {
            $.controllerSslEnabled = controllerSslEnabled;
            return this;
        }

        /**
         * @param controllerSslEnabled Specifies whether enable use SSL (HTTPS) to connect to the AppDynamics Controller.
         * 
         * @return builder
         * 
         */
        public Builder controllerSslEnabled(Boolean controllerSslEnabled) {
            return controllerSslEnabled(Output.of(controllerSslEnabled));
        }

        /**
         * @param globallyEnabled Specifies whether the Spring Cloud Application Performance Monitoring resource for Application Insights is enabled globally. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder globallyEnabled(@Nullable Output<Boolean> globallyEnabled) {
            $.globallyEnabled = globallyEnabled;
            return this;
        }

        /**
         * @param globallyEnabled Specifies whether the Spring Cloud Application Performance Monitoring resource for Application Insights is enabled globally. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder globallyEnabled(Boolean globallyEnabled) {
            return globallyEnabled(Output.of(globallyEnabled));
        }

        /**
         * @param name The name which should be used for this Spring Cloud Application Performance Monitoring resource for App Dynamics. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this Spring Cloud Application Performance Monitoring resource for App Dynamics. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param springCloudServiceId The ID of the Spring Cloud Service. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder springCloudServiceId(@Nullable Output<String> springCloudServiceId) {
            $.springCloudServiceId = springCloudServiceId;
            return this;
        }

        /**
         * @param springCloudServiceId The ID of the Spring Cloud Service. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder springCloudServiceId(String springCloudServiceId) {
            return springCloudServiceId(Output.of(springCloudServiceId));
        }

        public SpringCloudAppDynamicsApplicationPerformanceMonitoringState build() {
            return $;
        }
    }

}
