// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appservice.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WindowsWebAppSiteConfigApplicationStackArgs extends com.pulumi.resources.ResourceArgs {

    public static final WindowsWebAppSiteConfigApplicationStackArgs Empty = new WindowsWebAppSiteConfigApplicationStackArgs();

    /**
     * The Application Stack for the Windows Web App. Possible values include `dotnet`, `dotnetcore`, `node`, `python`, `php`, and `java`.
     * 
     * &gt; **NOTE:** Whilst this property is Optional omitting it can cause unexpected behaviour, in particular for display of settings in the Azure Portal.
     * 
     */
    @Import(name="currentStack")
    private @Nullable Output<String> currentStack;

    /**
     * @return The Application Stack for the Windows Web App. Possible values include `dotnet`, `dotnetcore`, `node`, `python`, `php`, and `java`.
     * 
     * &gt; **NOTE:** Whilst this property is Optional omitting it can cause unexpected behaviour, in particular for display of settings in the Azure Portal.
     * 
     */
    public Optional<Output<String>> currentStack() {
        return Optional.ofNullable(this.currentStack);
    }

    /**
     * The name of the container to be used. This value is required with `docker_container_tag`.
     * 
     */
    @Import(name="dockerContainerName")
    private @Nullable Output<String> dockerContainerName;

    /**
     * @return The name of the container to be used. This value is required with `docker_container_tag`.
     * 
     */
    public Optional<Output<String>> dockerContainerName() {
        return Optional.ofNullable(this.dockerContainerName);
    }

    /**
     * @deprecated
     * This property has been deprecated and will be removed in a future release of the provider.
     * 
     */
    @Deprecated /* This property has been deprecated and will be removed in a future release of the provider. */
    @Import(name="dockerContainerRegistry")
    private @Nullable Output<String> dockerContainerRegistry;

    /**
     * @deprecated
     * This property has been deprecated and will be removed in a future release of the provider.
     * 
     */
    @Deprecated /* This property has been deprecated and will be removed in a future release of the provider. */
    public Optional<Output<String>> dockerContainerRegistry() {
        return Optional.ofNullable(this.dockerContainerRegistry);
    }

    /**
     * The tag of the container to be used. This value is required with `docker_container_name`.
     * 
     */
    @Import(name="dockerContainerTag")
    private @Nullable Output<String> dockerContainerTag;

    /**
     * @return The tag of the container to be used. This value is required with `docker_container_name`.
     * 
     */
    public Optional<Output<String>> dockerContainerTag() {
        return Optional.ofNullable(this.dockerContainerTag);
    }

    /**
     * The docker image, including tag, to be used. e.g. `azure-app-service/windows/parkingpage:latest`.
     * 
     */
    @Import(name="dockerImageName")
    private @Nullable Output<String> dockerImageName;

    /**
     * @return The docker image, including tag, to be used. e.g. `azure-app-service/windows/parkingpage:latest`.
     * 
     */
    public Optional<Output<String>> dockerImageName() {
        return Optional.ofNullable(this.dockerImageName);
    }

    /**
     * The User Name to use for authentication against the registry to pull the image.
     * 
     * &gt; **NOTE:** `docker_registry_url`, `docker_registry_username`, and `docker_registry_password` replace the use of the `app_settings` values of `DOCKER_REGISTRY_SERVER_URL`, `DOCKER_REGISTRY_SERVER_USERNAME` and `DOCKER_REGISTRY_SERVER_PASSWORD` respectively, these values will be managed by the provider and should not be specified in the `app_settings` map.
     * 
     */
    @Import(name="dockerRegistryPassword")
    private @Nullable Output<String> dockerRegistryPassword;

    /**
     * @return The User Name to use for authentication against the registry to pull the image.
     * 
     * &gt; **NOTE:** `docker_registry_url`, `docker_registry_username`, and `docker_registry_password` replace the use of the `app_settings` values of `DOCKER_REGISTRY_SERVER_URL`, `DOCKER_REGISTRY_SERVER_USERNAME` and `DOCKER_REGISTRY_SERVER_PASSWORD` respectively, these values will be managed by the provider and should not be specified in the `app_settings` map.
     * 
     */
    public Optional<Output<String>> dockerRegistryPassword() {
        return Optional.ofNullable(this.dockerRegistryPassword);
    }

    /**
     * The URL of the container registry where the `docker_image_name` is located. e.g. `https://index.docker.io` or `https://mcr.microsoft.com`. This value is required with `docker_image_name`.
     * 
     */
    @Import(name="dockerRegistryUrl")
    private @Nullable Output<String> dockerRegistryUrl;

    /**
     * @return The URL of the container registry where the `docker_image_name` is located. e.g. `https://index.docker.io` or `https://mcr.microsoft.com`. This value is required with `docker_image_name`.
     * 
     */
    public Optional<Output<String>> dockerRegistryUrl() {
        return Optional.ofNullable(this.dockerRegistryUrl);
    }

    /**
     * The User Name to use for authentication against the registry to pull the image.
     * 
     */
    @Import(name="dockerRegistryUsername")
    private @Nullable Output<String> dockerRegistryUsername;

    /**
     * @return The User Name to use for authentication against the registry to pull the image.
     * 
     */
    public Optional<Output<String>> dockerRegistryUsername() {
        return Optional.ofNullable(this.dockerRegistryUsername);
    }

    /**
     * The version of .NET to use when `current_stack` is set to `dotnetcore`. Possible values include `v4.0`.
     * 
     */
    @Import(name="dotnetCoreVersion")
    private @Nullable Output<String> dotnetCoreVersion;

    /**
     * @return The version of .NET to use when `current_stack` is set to `dotnetcore`. Possible values include `v4.0`.
     * 
     */
    public Optional<Output<String>> dotnetCoreVersion() {
        return Optional.ofNullable(this.dotnetCoreVersion);
    }

    /**
     * The version of .NET to use when `current_stack` is set to `dotnet`. Possible values include `v2.0`,`v3.0`, `v4.0`, `v5.0`, `v6.0` and `v7.0`.
     * 
     * &gt; **NOTE:** The Portal displayed values and the actual underlying API values differ for this setting, as follows:
     * Portal Value | API value
     * :--|--:
     * ASP.NET V3.5 | v2.0
     * ASP.NET V4.8 | v4.0
     * .NET 6 (LTS) | v6.0
     * .NET 7 (STS) | v7.0
     * 
     */
    @Import(name="dotnetVersion")
    private @Nullable Output<String> dotnetVersion;

    /**
     * @return The version of .NET to use when `current_stack` is set to `dotnet`. Possible values include `v2.0`,`v3.0`, `v4.0`, `v5.0`, `v6.0` and `v7.0`.
     * 
     * &gt; **NOTE:** The Portal displayed values and the actual underlying API values differ for this setting, as follows:
     * Portal Value | API value
     * :--|--:
     * ASP.NET V3.5 | v2.0
     * ASP.NET V4.8 | v4.0
     * .NET 6 (LTS) | v6.0
     * .NET 7 (STS) | v7.0
     * 
     */
    public Optional<Output<String>> dotnetVersion() {
        return Optional.ofNullable(this.dotnetVersion);
    }

    /**
     * @deprecated
     * this property has been deprecated in favour of `tomcat_version` and `java_embedded_server_enabled`
     * 
     */
    @Deprecated /* this property has been deprecated in favour of `tomcat_version` and `java_embedded_server_enabled` */
    @Import(name="javaContainer")
    private @Nullable Output<String> javaContainer;

    /**
     * @deprecated
     * this property has been deprecated in favour of `tomcat_version` and `java_embedded_server_enabled`
     * 
     */
    @Deprecated /* this property has been deprecated in favour of `tomcat_version` and `java_embedded_server_enabled` */
    public Optional<Output<String>> javaContainer() {
        return Optional.ofNullable(this.javaContainer);
    }

    /**
     * @deprecated
     * This property has been deprecated in favour of `tomcat_version` and `java_embedded_server_enabled`
     * 
     */
    @Deprecated /* This property has been deprecated in favour of `tomcat_version` and `java_embedded_server_enabled` */
    @Import(name="javaContainerVersion")
    private @Nullable Output<String> javaContainerVersion;

    /**
     * @deprecated
     * This property has been deprecated in favour of `tomcat_version` and `java_embedded_server_enabled`
     * 
     */
    @Deprecated /* This property has been deprecated in favour of `tomcat_version` and `java_embedded_server_enabled` */
    public Optional<Output<String>> javaContainerVersion() {
        return Optional.ofNullable(this.javaContainerVersion);
    }

    /**
     * Should the Java Embedded Server (Java SE) be used to run the app.
     * 
     */
    @Import(name="javaEmbeddedServerEnabled")
    private @Nullable Output<Boolean> javaEmbeddedServerEnabled;

    /**
     * @return Should the Java Embedded Server (Java SE) be used to run the app.
     * 
     */
    public Optional<Output<Boolean>> javaEmbeddedServerEnabled() {
        return Optional.ofNullable(this.javaEmbeddedServerEnabled);
    }

    /**
     * The version of Java to use when `current_stack` is set to `java`.
     * 
     * &gt; **NOTE:** For currently supported versions, please see the official documentation. Some example values include: `1.8`, `1.8.0_322`,  `11`, `11.0.14`, `17` and `17.0.2`
     * 
     */
    @Import(name="javaVersion")
    private @Nullable Output<String> javaVersion;

    /**
     * @return The version of Java to use when `current_stack` is set to `java`.
     * 
     * &gt; **NOTE:** For currently supported versions, please see the official documentation. Some example values include: `1.8`, `1.8.0_322`,  `11`, `11.0.14`, `17` and `17.0.2`
     * 
     */
    public Optional<Output<String>> javaVersion() {
        return Optional.ofNullable(this.javaVersion);
    }

    /**
     * The version of node to use when `current_stack` is set to `node`. Possible values are `~12`, `~14`, `~16`, and `~18`.
     * 
     * &gt; **NOTE:** This property conflicts with `java_version`.
     * 
     */
    @Import(name="nodeVersion")
    private @Nullable Output<String> nodeVersion;

    /**
     * @return The version of node to use when `current_stack` is set to `node`. Possible values are `~12`, `~14`, `~16`, and `~18`.
     * 
     * &gt; **NOTE:** This property conflicts with `java_version`.
     * 
     */
    public Optional<Output<String>> nodeVersion() {
        return Optional.ofNullable(this.nodeVersion);
    }

    /**
     * The version of PHP to use when `current_stack` is set to `php`. Possible values are `7.1`, `7.4` and `Off`.
     * 
     * &gt; **NOTE:** The value `Off` is used to signify latest supported by the service.
     * 
     */
    @Import(name="phpVersion")
    private @Nullable Output<String> phpVersion;

    /**
     * @return The version of PHP to use when `current_stack` is set to `php`. Possible values are `7.1`, `7.4` and `Off`.
     * 
     * &gt; **NOTE:** The value `Off` is used to signify latest supported by the service.
     * 
     */
    public Optional<Output<String>> phpVersion() {
        return Optional.ofNullable(this.phpVersion);
    }

    /**
     * Specifies whether this is a Python app. Defaults to `false`.
     * 
     */
    @Import(name="python")
    private @Nullable Output<Boolean> python;

    /**
     * @return Specifies whether this is a Python app. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> python() {
        return Optional.ofNullable(this.python);
    }

    /**
     * @deprecated
     * This property is deprecated. Values set are not used by the service.
     * 
     */
    @Deprecated /* This property is deprecated. Values set are not used by the service. */
    @Import(name="pythonVersion")
    private @Nullable Output<String> pythonVersion;

    /**
     * @deprecated
     * This property is deprecated. Values set are not used by the service.
     * 
     */
    @Deprecated /* This property is deprecated. Values set are not used by the service. */
    public Optional<Output<String>> pythonVersion() {
        return Optional.ofNullable(this.pythonVersion);
    }

    /**
     * The version of Tomcat the Java App should use. Conflicts with `java_embedded_server_enabled`
     * 
     * &gt; **NOTE:** See the official documentation for current supported versions.  Some example valuess include: `10.0`, `10.0.20`.
     * 
     */
    @Import(name="tomcatVersion")
    private @Nullable Output<String> tomcatVersion;

    /**
     * @return The version of Tomcat the Java App should use. Conflicts with `java_embedded_server_enabled`
     * 
     * &gt; **NOTE:** See the official documentation for current supported versions.  Some example valuess include: `10.0`, `10.0.20`.
     * 
     */
    public Optional<Output<String>> tomcatVersion() {
        return Optional.ofNullable(this.tomcatVersion);
    }

    private WindowsWebAppSiteConfigApplicationStackArgs() {}

    private WindowsWebAppSiteConfigApplicationStackArgs(WindowsWebAppSiteConfigApplicationStackArgs $) {
        this.currentStack = $.currentStack;
        this.dockerContainerName = $.dockerContainerName;
        this.dockerContainerRegistry = $.dockerContainerRegistry;
        this.dockerContainerTag = $.dockerContainerTag;
        this.dockerImageName = $.dockerImageName;
        this.dockerRegistryPassword = $.dockerRegistryPassword;
        this.dockerRegistryUrl = $.dockerRegistryUrl;
        this.dockerRegistryUsername = $.dockerRegistryUsername;
        this.dotnetCoreVersion = $.dotnetCoreVersion;
        this.dotnetVersion = $.dotnetVersion;
        this.javaContainer = $.javaContainer;
        this.javaContainerVersion = $.javaContainerVersion;
        this.javaEmbeddedServerEnabled = $.javaEmbeddedServerEnabled;
        this.javaVersion = $.javaVersion;
        this.nodeVersion = $.nodeVersion;
        this.phpVersion = $.phpVersion;
        this.python = $.python;
        this.pythonVersion = $.pythonVersion;
        this.tomcatVersion = $.tomcatVersion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WindowsWebAppSiteConfigApplicationStackArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WindowsWebAppSiteConfigApplicationStackArgs $;

        public Builder() {
            $ = new WindowsWebAppSiteConfigApplicationStackArgs();
        }

        public Builder(WindowsWebAppSiteConfigApplicationStackArgs defaults) {
            $ = new WindowsWebAppSiteConfigApplicationStackArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param currentStack The Application Stack for the Windows Web App. Possible values include `dotnet`, `dotnetcore`, `node`, `python`, `php`, and `java`.
         * 
         * &gt; **NOTE:** Whilst this property is Optional omitting it can cause unexpected behaviour, in particular for display of settings in the Azure Portal.
         * 
         * @return builder
         * 
         */
        public Builder currentStack(@Nullable Output<String> currentStack) {
            $.currentStack = currentStack;
            return this;
        }

        /**
         * @param currentStack The Application Stack for the Windows Web App. Possible values include `dotnet`, `dotnetcore`, `node`, `python`, `php`, and `java`.
         * 
         * &gt; **NOTE:** Whilst this property is Optional omitting it can cause unexpected behaviour, in particular for display of settings in the Azure Portal.
         * 
         * @return builder
         * 
         */
        public Builder currentStack(String currentStack) {
            return currentStack(Output.of(currentStack));
        }

        /**
         * @param dockerContainerName The name of the container to be used. This value is required with `docker_container_tag`.
         * 
         * @return builder
         * 
         */
        public Builder dockerContainerName(@Nullable Output<String> dockerContainerName) {
            $.dockerContainerName = dockerContainerName;
            return this;
        }

        /**
         * @param dockerContainerName The name of the container to be used. This value is required with `docker_container_tag`.
         * 
         * @return builder
         * 
         */
        public Builder dockerContainerName(String dockerContainerName) {
            return dockerContainerName(Output.of(dockerContainerName));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * This property has been deprecated and will be removed in a future release of the provider.
         * 
         */
        @Deprecated /* This property has been deprecated and will be removed in a future release of the provider. */
        public Builder dockerContainerRegistry(@Nullable Output<String> dockerContainerRegistry) {
            $.dockerContainerRegistry = dockerContainerRegistry;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * This property has been deprecated and will be removed in a future release of the provider.
         * 
         */
        @Deprecated /* This property has been deprecated and will be removed in a future release of the provider. */
        public Builder dockerContainerRegistry(String dockerContainerRegistry) {
            return dockerContainerRegistry(Output.of(dockerContainerRegistry));
        }

        /**
         * @param dockerContainerTag The tag of the container to be used. This value is required with `docker_container_name`.
         * 
         * @return builder
         * 
         */
        public Builder dockerContainerTag(@Nullable Output<String> dockerContainerTag) {
            $.dockerContainerTag = dockerContainerTag;
            return this;
        }

        /**
         * @param dockerContainerTag The tag of the container to be used. This value is required with `docker_container_name`.
         * 
         * @return builder
         * 
         */
        public Builder dockerContainerTag(String dockerContainerTag) {
            return dockerContainerTag(Output.of(dockerContainerTag));
        }

        /**
         * @param dockerImageName The docker image, including tag, to be used. e.g. `azure-app-service/windows/parkingpage:latest`.
         * 
         * @return builder
         * 
         */
        public Builder dockerImageName(@Nullable Output<String> dockerImageName) {
            $.dockerImageName = dockerImageName;
            return this;
        }

        /**
         * @param dockerImageName The docker image, including tag, to be used. e.g. `azure-app-service/windows/parkingpage:latest`.
         * 
         * @return builder
         * 
         */
        public Builder dockerImageName(String dockerImageName) {
            return dockerImageName(Output.of(dockerImageName));
        }

        /**
         * @param dockerRegistryPassword The User Name to use for authentication against the registry to pull the image.
         * 
         * &gt; **NOTE:** `docker_registry_url`, `docker_registry_username`, and `docker_registry_password` replace the use of the `app_settings` values of `DOCKER_REGISTRY_SERVER_URL`, `DOCKER_REGISTRY_SERVER_USERNAME` and `DOCKER_REGISTRY_SERVER_PASSWORD` respectively, these values will be managed by the provider and should not be specified in the `app_settings` map.
         * 
         * @return builder
         * 
         */
        public Builder dockerRegistryPassword(@Nullable Output<String> dockerRegistryPassword) {
            $.dockerRegistryPassword = dockerRegistryPassword;
            return this;
        }

        /**
         * @param dockerRegistryPassword The User Name to use for authentication against the registry to pull the image.
         * 
         * &gt; **NOTE:** `docker_registry_url`, `docker_registry_username`, and `docker_registry_password` replace the use of the `app_settings` values of `DOCKER_REGISTRY_SERVER_URL`, `DOCKER_REGISTRY_SERVER_USERNAME` and `DOCKER_REGISTRY_SERVER_PASSWORD` respectively, these values will be managed by the provider and should not be specified in the `app_settings` map.
         * 
         * @return builder
         * 
         */
        public Builder dockerRegistryPassword(String dockerRegistryPassword) {
            return dockerRegistryPassword(Output.of(dockerRegistryPassword));
        }

        /**
         * @param dockerRegistryUrl The URL of the container registry where the `docker_image_name` is located. e.g. `https://index.docker.io` or `https://mcr.microsoft.com`. This value is required with `docker_image_name`.
         * 
         * @return builder
         * 
         */
        public Builder dockerRegistryUrl(@Nullable Output<String> dockerRegistryUrl) {
            $.dockerRegistryUrl = dockerRegistryUrl;
            return this;
        }

        /**
         * @param dockerRegistryUrl The URL of the container registry where the `docker_image_name` is located. e.g. `https://index.docker.io` or `https://mcr.microsoft.com`. This value is required with `docker_image_name`.
         * 
         * @return builder
         * 
         */
        public Builder dockerRegistryUrl(String dockerRegistryUrl) {
            return dockerRegistryUrl(Output.of(dockerRegistryUrl));
        }

        /**
         * @param dockerRegistryUsername The User Name to use for authentication against the registry to pull the image.
         * 
         * @return builder
         * 
         */
        public Builder dockerRegistryUsername(@Nullable Output<String> dockerRegistryUsername) {
            $.dockerRegistryUsername = dockerRegistryUsername;
            return this;
        }

        /**
         * @param dockerRegistryUsername The User Name to use for authentication against the registry to pull the image.
         * 
         * @return builder
         * 
         */
        public Builder dockerRegistryUsername(String dockerRegistryUsername) {
            return dockerRegistryUsername(Output.of(dockerRegistryUsername));
        }

        /**
         * @param dotnetCoreVersion The version of .NET to use when `current_stack` is set to `dotnetcore`. Possible values include `v4.0`.
         * 
         * @return builder
         * 
         */
        public Builder dotnetCoreVersion(@Nullable Output<String> dotnetCoreVersion) {
            $.dotnetCoreVersion = dotnetCoreVersion;
            return this;
        }

        /**
         * @param dotnetCoreVersion The version of .NET to use when `current_stack` is set to `dotnetcore`. Possible values include `v4.0`.
         * 
         * @return builder
         * 
         */
        public Builder dotnetCoreVersion(String dotnetCoreVersion) {
            return dotnetCoreVersion(Output.of(dotnetCoreVersion));
        }

        /**
         * @param dotnetVersion The version of .NET to use when `current_stack` is set to `dotnet`. Possible values include `v2.0`,`v3.0`, `v4.0`, `v5.0`, `v6.0` and `v7.0`.
         * 
         * &gt; **NOTE:** The Portal displayed values and the actual underlying API values differ for this setting, as follows:
         * Portal Value | API value
         * :--|--:
         * ASP.NET V3.5 | v2.0
         * ASP.NET V4.8 | v4.0
         * .NET 6 (LTS) | v6.0
         * .NET 7 (STS) | v7.0
         * 
         * @return builder
         * 
         */
        public Builder dotnetVersion(@Nullable Output<String> dotnetVersion) {
            $.dotnetVersion = dotnetVersion;
            return this;
        }

        /**
         * @param dotnetVersion The version of .NET to use when `current_stack` is set to `dotnet`. Possible values include `v2.0`,`v3.0`, `v4.0`, `v5.0`, `v6.0` and `v7.0`.
         * 
         * &gt; **NOTE:** The Portal displayed values and the actual underlying API values differ for this setting, as follows:
         * Portal Value | API value
         * :--|--:
         * ASP.NET V3.5 | v2.0
         * ASP.NET V4.8 | v4.0
         * .NET 6 (LTS) | v6.0
         * .NET 7 (STS) | v7.0
         * 
         * @return builder
         * 
         */
        public Builder dotnetVersion(String dotnetVersion) {
            return dotnetVersion(Output.of(dotnetVersion));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * this property has been deprecated in favour of `tomcat_version` and `java_embedded_server_enabled`
         * 
         */
        @Deprecated /* this property has been deprecated in favour of `tomcat_version` and `java_embedded_server_enabled` */
        public Builder javaContainer(@Nullable Output<String> javaContainer) {
            $.javaContainer = javaContainer;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * this property has been deprecated in favour of `tomcat_version` and `java_embedded_server_enabled`
         * 
         */
        @Deprecated /* this property has been deprecated in favour of `tomcat_version` and `java_embedded_server_enabled` */
        public Builder javaContainer(String javaContainer) {
            return javaContainer(Output.of(javaContainer));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * This property has been deprecated in favour of `tomcat_version` and `java_embedded_server_enabled`
         * 
         */
        @Deprecated /* This property has been deprecated in favour of `tomcat_version` and `java_embedded_server_enabled` */
        public Builder javaContainerVersion(@Nullable Output<String> javaContainerVersion) {
            $.javaContainerVersion = javaContainerVersion;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * This property has been deprecated in favour of `tomcat_version` and `java_embedded_server_enabled`
         * 
         */
        @Deprecated /* This property has been deprecated in favour of `tomcat_version` and `java_embedded_server_enabled` */
        public Builder javaContainerVersion(String javaContainerVersion) {
            return javaContainerVersion(Output.of(javaContainerVersion));
        }

        /**
         * @param javaEmbeddedServerEnabled Should the Java Embedded Server (Java SE) be used to run the app.
         * 
         * @return builder
         * 
         */
        public Builder javaEmbeddedServerEnabled(@Nullable Output<Boolean> javaEmbeddedServerEnabled) {
            $.javaEmbeddedServerEnabled = javaEmbeddedServerEnabled;
            return this;
        }

        /**
         * @param javaEmbeddedServerEnabled Should the Java Embedded Server (Java SE) be used to run the app.
         * 
         * @return builder
         * 
         */
        public Builder javaEmbeddedServerEnabled(Boolean javaEmbeddedServerEnabled) {
            return javaEmbeddedServerEnabled(Output.of(javaEmbeddedServerEnabled));
        }

        /**
         * @param javaVersion The version of Java to use when `current_stack` is set to `java`.
         * 
         * &gt; **NOTE:** For currently supported versions, please see the official documentation. Some example values include: `1.8`, `1.8.0_322`,  `11`, `11.0.14`, `17` and `17.0.2`
         * 
         * @return builder
         * 
         */
        public Builder javaVersion(@Nullable Output<String> javaVersion) {
            $.javaVersion = javaVersion;
            return this;
        }

        /**
         * @param javaVersion The version of Java to use when `current_stack` is set to `java`.
         * 
         * &gt; **NOTE:** For currently supported versions, please see the official documentation. Some example values include: `1.8`, `1.8.0_322`,  `11`, `11.0.14`, `17` and `17.0.2`
         * 
         * @return builder
         * 
         */
        public Builder javaVersion(String javaVersion) {
            return javaVersion(Output.of(javaVersion));
        }

        /**
         * @param nodeVersion The version of node to use when `current_stack` is set to `node`. Possible values are `~12`, `~14`, `~16`, and `~18`.
         * 
         * &gt; **NOTE:** This property conflicts with `java_version`.
         * 
         * @return builder
         * 
         */
        public Builder nodeVersion(@Nullable Output<String> nodeVersion) {
            $.nodeVersion = nodeVersion;
            return this;
        }

        /**
         * @param nodeVersion The version of node to use when `current_stack` is set to `node`. Possible values are `~12`, `~14`, `~16`, and `~18`.
         * 
         * &gt; **NOTE:** This property conflicts with `java_version`.
         * 
         * @return builder
         * 
         */
        public Builder nodeVersion(String nodeVersion) {
            return nodeVersion(Output.of(nodeVersion));
        }

        /**
         * @param phpVersion The version of PHP to use when `current_stack` is set to `php`. Possible values are `7.1`, `7.4` and `Off`.
         * 
         * &gt; **NOTE:** The value `Off` is used to signify latest supported by the service.
         * 
         * @return builder
         * 
         */
        public Builder phpVersion(@Nullable Output<String> phpVersion) {
            $.phpVersion = phpVersion;
            return this;
        }

        /**
         * @param phpVersion The version of PHP to use when `current_stack` is set to `php`. Possible values are `7.1`, `7.4` and `Off`.
         * 
         * &gt; **NOTE:** The value `Off` is used to signify latest supported by the service.
         * 
         * @return builder
         * 
         */
        public Builder phpVersion(String phpVersion) {
            return phpVersion(Output.of(phpVersion));
        }

        /**
         * @param python Specifies whether this is a Python app. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder python(@Nullable Output<Boolean> python) {
            $.python = python;
            return this;
        }

        /**
         * @param python Specifies whether this is a Python app. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder python(Boolean python) {
            return python(Output.of(python));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * This property is deprecated. Values set are not used by the service.
         * 
         */
        @Deprecated /* This property is deprecated. Values set are not used by the service. */
        public Builder pythonVersion(@Nullable Output<String> pythonVersion) {
            $.pythonVersion = pythonVersion;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * This property is deprecated. Values set are not used by the service.
         * 
         */
        @Deprecated /* This property is deprecated. Values set are not used by the service. */
        public Builder pythonVersion(String pythonVersion) {
            return pythonVersion(Output.of(pythonVersion));
        }

        /**
         * @param tomcatVersion The version of Tomcat the Java App should use. Conflicts with `java_embedded_server_enabled`
         * 
         * &gt; **NOTE:** See the official documentation for current supported versions.  Some example valuess include: `10.0`, `10.0.20`.
         * 
         * @return builder
         * 
         */
        public Builder tomcatVersion(@Nullable Output<String> tomcatVersion) {
            $.tomcatVersion = tomcatVersion;
            return this;
        }

        /**
         * @param tomcatVersion The version of Tomcat the Java App should use. Conflicts with `java_embedded_server_enabled`
         * 
         * &gt; **NOTE:** See the official documentation for current supported versions.  Some example valuess include: `10.0`, `10.0.20`.
         * 
         * @return builder
         * 
         */
        public Builder tomcatVersion(String tomcatVersion) {
            return tomcatVersion(Output.of(tomcatVersion));
        }

        public WindowsWebAppSiteConfigApplicationStackArgs build() {
            return $;
        }
    }

}
