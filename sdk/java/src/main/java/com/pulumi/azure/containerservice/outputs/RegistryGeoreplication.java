// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerservice.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RegistryGeoreplication {
    /**
     * @return A location where the container registry should be geo-replicated.
     * 
     */
    private String location;
    /**
     * @return Whether regional endpoint is enabled for this Container Registry?
     * 
     */
    private @Nullable Boolean regionalEndpointEnabled;
    /**
     * @return A mapping of tags to assign to this replication location.
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return Whether zone redundancy is enabled for this replication location? Defaults to `false`.
     * 
     * &gt; **NOTE:** Changing the `zone_redundancy_enabled` forces the a underlying replication to be created.
     * 
     */
    private @Nullable Boolean zoneRedundancyEnabled;

    private RegistryGeoreplication() {}
    /**
     * @return A location where the container registry should be geo-replicated.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return Whether regional endpoint is enabled for this Container Registry?
     * 
     */
    public Optional<Boolean> regionalEndpointEnabled() {
        return Optional.ofNullable(this.regionalEndpointEnabled);
    }
    /**
     * @return A mapping of tags to assign to this replication location.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return Whether zone redundancy is enabled for this replication location? Defaults to `false`.
     * 
     * &gt; **NOTE:** Changing the `zone_redundancy_enabled` forces the a underlying replication to be created.
     * 
     */
    public Optional<Boolean> zoneRedundancyEnabled() {
        return Optional.ofNullable(this.zoneRedundancyEnabled);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RegistryGeoreplication defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String location;
        private @Nullable Boolean regionalEndpointEnabled;
        private @Nullable Map<String,String> tags;
        private @Nullable Boolean zoneRedundancyEnabled;
        public Builder() {}
        public Builder(RegistryGeoreplication defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.location = defaults.location;
    	      this.regionalEndpointEnabled = defaults.regionalEndpointEnabled;
    	      this.tags = defaults.tags;
    	      this.zoneRedundancyEnabled = defaults.zoneRedundancyEnabled;
        }

        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("RegistryGeoreplication", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder regionalEndpointEnabled(@Nullable Boolean regionalEndpointEnabled) {

            this.regionalEndpointEnabled = regionalEndpointEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {

            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder zoneRedundancyEnabled(@Nullable Boolean zoneRedundancyEnabled) {

            this.zoneRedundancyEnabled = zoneRedundancyEnabled;
            return this;
        }
        public RegistryGeoreplication build() {
            final var _resultValue = new RegistryGeoreplication();
            _resultValue.location = location;
            _resultValue.regionalEndpointEnabled = regionalEndpointEnabled;
            _resultValue.tags = tags;
            _resultValue.zoneRedundancyEnabled = zoneRedundancyEnabled;
            return _resultValue;
        }
    }
}
