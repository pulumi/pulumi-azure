// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ApplicationGatewayRequestRoutingRule {
    /**
     * @return The ID of the associated Backend Address Pool.
     * 
     */
    private @Nullable String backendAddressPoolId;
    /**
     * @return The Name of the Backend Address Pool which should be used for this Routing Rule. Cannot be set if `redirect_configuration_name` is set.
     * 
     */
    private @Nullable String backendAddressPoolName;
    /**
     * @return The ID of the associated Backend HTTP Settings Configuration.
     * 
     */
    private @Nullable String backendHttpSettingsId;
    /**
     * @return The Name of the Backend HTTP Settings Collection which should be used for this Routing Rule. Cannot be set if `redirect_configuration_name` is set.
     * 
     */
    private @Nullable String backendHttpSettingsName;
    /**
     * @return The ID of the associated HTTP Listener.
     * 
     */
    private @Nullable String httpListenerId;
    /**
     * @return The Name of the HTTP Listener which should be used for this Routing Rule.
     * 
     */
    private String httpListenerName;
    /**
     * @return The ID of the Rewrite Rule Set
     * 
     */
    private @Nullable String id;
    /**
     * @return The Name of this Request Routing Rule.
     * 
     */
    private String name;
    /**
     * @return Rule evaluation order can be dictated by specifying an integer value from `1` to `20000` with `1` being the highest priority and `20000` being the lowest priority.
     * 
     * &gt; **NOTE:** `priority` is required when `sku.0.tier` is set to `*_v2`.
     * 
     */
    private @Nullable Integer priority;
    /**
     * @return The ID of the associated Redirect Configuration.
     * 
     */
    private @Nullable String redirectConfigurationId;
    /**
     * @return The Name of the Redirect Configuration which should be used for this Routing Rule. Cannot be set if either `backend_address_pool_name` or `backend_http_settings_name` is set.
     * 
     */
    private @Nullable String redirectConfigurationName;
    /**
     * @return The ID of the associated Rewrite Rule Set.
     * 
     */
    private @Nullable String rewriteRuleSetId;
    /**
     * @return The Name of the Rewrite Rule Set which should be used for this Routing Rule. Only valid for v2 SKUs.
     * 
     * &gt; **NOTE:** `backend_address_pool_name`, `backend_http_settings_name`, `redirect_configuration_name`, and `rewrite_rule_set_name` are applicable only when `rule_type` is `Basic`.
     * 
     */
    private @Nullable String rewriteRuleSetName;
    /**
     * @return The Type of Routing that should be used for this Rule. Possible values are `Basic` and `PathBasedRouting`.
     * 
     */
    private String ruleType;
    /**
     * @return The ID of the associated URL Path Map.
     * 
     */
    private @Nullable String urlPathMapId;
    /**
     * @return The Name of the URL Path Map which should be associated with this Routing Rule.
     * 
     */
    private @Nullable String urlPathMapName;

    private ApplicationGatewayRequestRoutingRule() {}
    /**
     * @return The ID of the associated Backend Address Pool.
     * 
     */
    public Optional<String> backendAddressPoolId() {
        return Optional.ofNullable(this.backendAddressPoolId);
    }
    /**
     * @return The Name of the Backend Address Pool which should be used for this Routing Rule. Cannot be set if `redirect_configuration_name` is set.
     * 
     */
    public Optional<String> backendAddressPoolName() {
        return Optional.ofNullable(this.backendAddressPoolName);
    }
    /**
     * @return The ID of the associated Backend HTTP Settings Configuration.
     * 
     */
    public Optional<String> backendHttpSettingsId() {
        return Optional.ofNullable(this.backendHttpSettingsId);
    }
    /**
     * @return The Name of the Backend HTTP Settings Collection which should be used for this Routing Rule. Cannot be set if `redirect_configuration_name` is set.
     * 
     */
    public Optional<String> backendHttpSettingsName() {
        return Optional.ofNullable(this.backendHttpSettingsName);
    }
    /**
     * @return The ID of the associated HTTP Listener.
     * 
     */
    public Optional<String> httpListenerId() {
        return Optional.ofNullable(this.httpListenerId);
    }
    /**
     * @return The Name of the HTTP Listener which should be used for this Routing Rule.
     * 
     */
    public String httpListenerName() {
        return this.httpListenerName;
    }
    /**
     * @return The ID of the Rewrite Rule Set
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The Name of this Request Routing Rule.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Rule evaluation order can be dictated by specifying an integer value from `1` to `20000` with `1` being the highest priority and `20000` being the lowest priority.
     * 
     * &gt; **NOTE:** `priority` is required when `sku.0.tier` is set to `*_v2`.
     * 
     */
    public Optional<Integer> priority() {
        return Optional.ofNullable(this.priority);
    }
    /**
     * @return The ID of the associated Redirect Configuration.
     * 
     */
    public Optional<String> redirectConfigurationId() {
        return Optional.ofNullable(this.redirectConfigurationId);
    }
    /**
     * @return The Name of the Redirect Configuration which should be used for this Routing Rule. Cannot be set if either `backend_address_pool_name` or `backend_http_settings_name` is set.
     * 
     */
    public Optional<String> redirectConfigurationName() {
        return Optional.ofNullable(this.redirectConfigurationName);
    }
    /**
     * @return The ID of the associated Rewrite Rule Set.
     * 
     */
    public Optional<String> rewriteRuleSetId() {
        return Optional.ofNullable(this.rewriteRuleSetId);
    }
    /**
     * @return The Name of the Rewrite Rule Set which should be used for this Routing Rule. Only valid for v2 SKUs.
     * 
     * &gt; **NOTE:** `backend_address_pool_name`, `backend_http_settings_name`, `redirect_configuration_name`, and `rewrite_rule_set_name` are applicable only when `rule_type` is `Basic`.
     * 
     */
    public Optional<String> rewriteRuleSetName() {
        return Optional.ofNullable(this.rewriteRuleSetName);
    }
    /**
     * @return The Type of Routing that should be used for this Rule. Possible values are `Basic` and `PathBasedRouting`.
     * 
     */
    public String ruleType() {
        return this.ruleType;
    }
    /**
     * @return The ID of the associated URL Path Map.
     * 
     */
    public Optional<String> urlPathMapId() {
        return Optional.ofNullable(this.urlPathMapId);
    }
    /**
     * @return The Name of the URL Path Map which should be associated with this Routing Rule.
     * 
     */
    public Optional<String> urlPathMapName() {
        return Optional.ofNullable(this.urlPathMapName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplicationGatewayRequestRoutingRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String backendAddressPoolId;
        private @Nullable String backendAddressPoolName;
        private @Nullable String backendHttpSettingsId;
        private @Nullable String backendHttpSettingsName;
        private @Nullable String httpListenerId;
        private String httpListenerName;
        private @Nullable String id;
        private String name;
        private @Nullable Integer priority;
        private @Nullable String redirectConfigurationId;
        private @Nullable String redirectConfigurationName;
        private @Nullable String rewriteRuleSetId;
        private @Nullable String rewriteRuleSetName;
        private String ruleType;
        private @Nullable String urlPathMapId;
        private @Nullable String urlPathMapName;
        public Builder() {}
        public Builder(ApplicationGatewayRequestRoutingRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backendAddressPoolId = defaults.backendAddressPoolId;
    	      this.backendAddressPoolName = defaults.backendAddressPoolName;
    	      this.backendHttpSettingsId = defaults.backendHttpSettingsId;
    	      this.backendHttpSettingsName = defaults.backendHttpSettingsName;
    	      this.httpListenerId = defaults.httpListenerId;
    	      this.httpListenerName = defaults.httpListenerName;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.priority = defaults.priority;
    	      this.redirectConfigurationId = defaults.redirectConfigurationId;
    	      this.redirectConfigurationName = defaults.redirectConfigurationName;
    	      this.rewriteRuleSetId = defaults.rewriteRuleSetId;
    	      this.rewriteRuleSetName = defaults.rewriteRuleSetName;
    	      this.ruleType = defaults.ruleType;
    	      this.urlPathMapId = defaults.urlPathMapId;
    	      this.urlPathMapName = defaults.urlPathMapName;
        }

        @CustomType.Setter
        public Builder backendAddressPoolId(@Nullable String backendAddressPoolId) {

            this.backendAddressPoolId = backendAddressPoolId;
            return this;
        }
        @CustomType.Setter
        public Builder backendAddressPoolName(@Nullable String backendAddressPoolName) {

            this.backendAddressPoolName = backendAddressPoolName;
            return this;
        }
        @CustomType.Setter
        public Builder backendHttpSettingsId(@Nullable String backendHttpSettingsId) {

            this.backendHttpSettingsId = backendHttpSettingsId;
            return this;
        }
        @CustomType.Setter
        public Builder backendHttpSettingsName(@Nullable String backendHttpSettingsName) {

            this.backendHttpSettingsName = backendHttpSettingsName;
            return this;
        }
        @CustomType.Setter
        public Builder httpListenerId(@Nullable String httpListenerId) {

            this.httpListenerId = httpListenerId;
            return this;
        }
        @CustomType.Setter
        public Builder httpListenerName(String httpListenerName) {
            if (httpListenerName == null) {
              throw new MissingRequiredPropertyException("ApplicationGatewayRequestRoutingRule", "httpListenerName");
            }
            this.httpListenerName = httpListenerName;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("ApplicationGatewayRequestRoutingRule", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder priority(@Nullable Integer priority) {

            this.priority = priority;
            return this;
        }
        @CustomType.Setter
        public Builder redirectConfigurationId(@Nullable String redirectConfigurationId) {

            this.redirectConfigurationId = redirectConfigurationId;
            return this;
        }
        @CustomType.Setter
        public Builder redirectConfigurationName(@Nullable String redirectConfigurationName) {

            this.redirectConfigurationName = redirectConfigurationName;
            return this;
        }
        @CustomType.Setter
        public Builder rewriteRuleSetId(@Nullable String rewriteRuleSetId) {

            this.rewriteRuleSetId = rewriteRuleSetId;
            return this;
        }
        @CustomType.Setter
        public Builder rewriteRuleSetName(@Nullable String rewriteRuleSetName) {

            this.rewriteRuleSetName = rewriteRuleSetName;
            return this;
        }
        @CustomType.Setter
        public Builder ruleType(String ruleType) {
            if (ruleType == null) {
              throw new MissingRequiredPropertyException("ApplicationGatewayRequestRoutingRule", "ruleType");
            }
            this.ruleType = ruleType;
            return this;
        }
        @CustomType.Setter
        public Builder urlPathMapId(@Nullable String urlPathMapId) {

            this.urlPathMapId = urlPathMapId;
            return this;
        }
        @CustomType.Setter
        public Builder urlPathMapName(@Nullable String urlPathMapName) {

            this.urlPathMapName = urlPathMapName;
            return this;
        }
        public ApplicationGatewayRequestRoutingRule build() {
            final var _resultValue = new ApplicationGatewayRequestRoutingRule();
            _resultValue.backendAddressPoolId = backendAddressPoolId;
            _resultValue.backendAddressPoolName = backendAddressPoolName;
            _resultValue.backendHttpSettingsId = backendHttpSettingsId;
            _resultValue.backendHttpSettingsName = backendHttpSettingsName;
            _resultValue.httpListenerId = httpListenerId;
            _resultValue.httpListenerName = httpListenerName;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.priority = priority;
            _resultValue.redirectConfigurationId = redirectConfigurationId;
            _resultValue.redirectConfigurationName = redirectConfigurationName;
            _resultValue.rewriteRuleSetId = rewriteRuleSetId;
            _resultValue.rewriteRuleSetName = rewriteRuleSetName;
            _resultValue.ruleType = ruleType;
            _resultValue.urlPathMapId = urlPathMapId;
            _resultValue.urlPathMapName = urlPathMapName;
            return _resultValue;
        }
    }
}
