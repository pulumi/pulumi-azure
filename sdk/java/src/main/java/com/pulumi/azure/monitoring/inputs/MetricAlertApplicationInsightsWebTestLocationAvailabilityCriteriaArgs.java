// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.monitoring.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaArgs extends com.pulumi.resources.ResourceArgs {

    public static final MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaArgs Empty = new MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaArgs();

    /**
     * The ID of the Application Insights Resource.
     * 
     */
    @Import(name="componentId", required=true)
    private Output<String> componentId;

    /**
     * @return The ID of the Application Insights Resource.
     * 
     */
    public Output<String> componentId() {
        return this.componentId;
    }

    /**
     * The number of failed locations.
     * 
     */
    @Import(name="failedLocationCount", required=true)
    private Output<Integer> failedLocationCount;

    /**
     * @return The number of failed locations.
     * 
     */
    public Output<Integer> failedLocationCount() {
        return this.failedLocationCount;
    }

    /**
     * The ID of the Application Insights Web Test.
     * 
     */
    @Import(name="webTestId", required=true)
    private Output<String> webTestId;

    /**
     * @return The ID of the Application Insights Web Test.
     * 
     */
    public Output<String> webTestId() {
        return this.webTestId;
    }

    private MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaArgs() {}

    private MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaArgs(MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaArgs $) {
        this.componentId = $.componentId;
        this.failedLocationCount = $.failedLocationCount;
        this.webTestId = $.webTestId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaArgs $;

        public Builder() {
            $ = new MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaArgs();
        }

        public Builder(MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaArgs defaults) {
            $ = new MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param componentId The ID of the Application Insights Resource.
         * 
         * @return builder
         * 
         */
        public Builder componentId(Output<String> componentId) {
            $.componentId = componentId;
            return this;
        }

        /**
         * @param componentId The ID of the Application Insights Resource.
         * 
         * @return builder
         * 
         */
        public Builder componentId(String componentId) {
            return componentId(Output.of(componentId));
        }

        /**
         * @param failedLocationCount The number of failed locations.
         * 
         * @return builder
         * 
         */
        public Builder failedLocationCount(Output<Integer> failedLocationCount) {
            $.failedLocationCount = failedLocationCount;
            return this;
        }

        /**
         * @param failedLocationCount The number of failed locations.
         * 
         * @return builder
         * 
         */
        public Builder failedLocationCount(Integer failedLocationCount) {
            return failedLocationCount(Output.of(failedLocationCount));
        }

        /**
         * @param webTestId The ID of the Application Insights Web Test.
         * 
         * @return builder
         * 
         */
        public Builder webTestId(Output<String> webTestId) {
            $.webTestId = webTestId;
            return this;
        }

        /**
         * @param webTestId The ID of the Application Insights Web Test.
         * 
         * @return builder
         * 
         */
        public Builder webTestId(String webTestId) {
            return webTestId(Output.of(webTestId));
        }

        public MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaArgs build() {
            if ($.componentId == null) {
                throw new MissingRequiredPropertyException("MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaArgs", "componentId");
            }
            if ($.failedLocationCount == null) {
                throw new MissingRequiredPropertyException("MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaArgs", "failedLocationCount");
            }
            if ($.webTestId == null) {
                throw new MissingRequiredPropertyException("MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaArgs", "webTestId");
            }
            return $;
        }
    }

}
