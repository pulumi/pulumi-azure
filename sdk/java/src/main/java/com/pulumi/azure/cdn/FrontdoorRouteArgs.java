// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.cdn;

import com.pulumi.azure.cdn.inputs.FrontdoorRouteCacheArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FrontdoorRouteArgs extends com.pulumi.resources.ResourceArgs {

    public static final FrontdoorRouteArgs Empty = new FrontdoorRouteArgs();

    /**
     * A `cache` block as defined below.
     * 
     * &gt; **NOTE:** To disable caching, do not provide the `cache` block in the configuration file.
     * 
     */
    @Import(name="cache")
    private @Nullable Output<FrontdoorRouteCacheArgs> cache;

    /**
     * @return A `cache` block as defined below.
     * 
     * &gt; **NOTE:** To disable caching, do not provide the `cache` block in the configuration file.
     * 
     */
    public Optional<Output<FrontdoorRouteCacheArgs>> cache() {
        return Optional.ofNullable(this.cache);
    }

    /**
     * The IDs of the Front Door Custom Domains which are associated with this Front Door Route.
     * 
     */
    @Import(name="cdnFrontdoorCustomDomainIds")
    private @Nullable Output<List<String>> cdnFrontdoorCustomDomainIds;

    /**
     * @return The IDs of the Front Door Custom Domains which are associated with this Front Door Route.
     * 
     */
    public Optional<Output<List<String>>> cdnFrontdoorCustomDomainIds() {
        return Optional.ofNullable(this.cdnFrontdoorCustomDomainIds);
    }

    /**
     * The resource ID of the Front Door Endpoint where this Front Door Route should exist. Changing this forces a new Front Door Route to be created.
     * 
     */
    @Import(name="cdnFrontdoorEndpointId", required=true)
    private Output<String> cdnFrontdoorEndpointId;

    /**
     * @return The resource ID of the Front Door Endpoint where this Front Door Route should exist. Changing this forces a new Front Door Route to be created.
     * 
     */
    public Output<String> cdnFrontdoorEndpointId() {
        return this.cdnFrontdoorEndpointId;
    }

    /**
     * The resource ID of the Front Door Origin Group where this Front Door Route should be created.
     * 
     */
    @Import(name="cdnFrontdoorOriginGroupId", required=true)
    private Output<String> cdnFrontdoorOriginGroupId;

    /**
     * @return The resource ID of the Front Door Origin Group where this Front Door Route should be created.
     * 
     */
    public Output<String> cdnFrontdoorOriginGroupId() {
        return this.cdnFrontdoorOriginGroupId;
    }

    /**
     * One or more Front Door Origin resource IDs that this Front Door Route will link to.
     * 
     */
    @Import(name="cdnFrontdoorOriginIds", required=true)
    private Output<List<String>> cdnFrontdoorOriginIds;

    /**
     * @return One or more Front Door Origin resource IDs that this Front Door Route will link to.
     * 
     */
    public Output<List<String>> cdnFrontdoorOriginIds() {
        return this.cdnFrontdoorOriginIds;
    }

    /**
     * A directory path on the Front Door Origin that can be used to retrieve content (e.g. `contoso.cloudapp.net/originpath`).
     * 
     */
    @Import(name="cdnFrontdoorOriginPath")
    private @Nullable Output<String> cdnFrontdoorOriginPath;

    /**
     * @return A directory path on the Front Door Origin that can be used to retrieve content (e.g. `contoso.cloudapp.net/originpath`).
     * 
     */
    public Optional<Output<String>> cdnFrontdoorOriginPath() {
        return Optional.ofNullable(this.cdnFrontdoorOriginPath);
    }

    /**
     * A list of the Front Door Rule Set IDs which should be assigned to this Front Door Route.
     * 
     */
    @Import(name="cdnFrontdoorRuleSetIds")
    private @Nullable Output<List<String>> cdnFrontdoorRuleSetIds;

    /**
     * @return A list of the Front Door Rule Set IDs which should be assigned to this Front Door Route.
     * 
     */
    public Optional<Output<List<String>>> cdnFrontdoorRuleSetIds() {
        return Optional.ofNullable(this.cdnFrontdoorRuleSetIds);
    }

    /**
     * Is this Front Door Route enabled? Possible values are `true` or `false`. Defaults to `true`.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Is this Front Door Route enabled? Possible values are `true` or `false`. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The Protocol that will be use when forwarding traffic to backends. Possible values are `HttpOnly`, `HttpsOnly` or `MatchRequest`. Defaults to `MatchRequest`.
     * 
     */
    @Import(name="forwardingProtocol")
    private @Nullable Output<String> forwardingProtocol;

    /**
     * @return The Protocol that will be use when forwarding traffic to backends. Possible values are `HttpOnly`, `HttpsOnly` or `MatchRequest`. Defaults to `MatchRequest`.
     * 
     */
    public Optional<Output<String>> forwardingProtocol() {
        return Optional.ofNullable(this.forwardingProtocol);
    }

    /**
     * Automatically redirect HTTP traffic to HTTPS traffic? Possible values are `true` or `false`. Defaults to `true`.
     * 
     * &gt; **NOTE:** The `https_redirect_enabled` rule is the first rule that will be executed.
     * 
     */
    @Import(name="httpsRedirectEnabled")
    private @Nullable Output<Boolean> httpsRedirectEnabled;

    /**
     * @return Automatically redirect HTTP traffic to HTTPS traffic? Possible values are `true` or `false`. Defaults to `true`.
     * 
     * &gt; **NOTE:** The `https_redirect_enabled` rule is the first rule that will be executed.
     * 
     */
    public Optional<Output<Boolean>> httpsRedirectEnabled() {
        return Optional.ofNullable(this.httpsRedirectEnabled);
    }

    /**
     * Should this Front Door Route be linked to the default endpoint? Possible values include `true` or `false`. Defaults to `true`.
     * 
     */
    @Import(name="linkToDefaultDomain")
    private @Nullable Output<Boolean> linkToDefaultDomain;

    /**
     * @return Should this Front Door Route be linked to the default endpoint? Possible values include `true` or `false`. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> linkToDefaultDomain() {
        return Optional.ofNullable(this.linkToDefaultDomain);
    }

    /**
     * The name which should be used for this Front Door Route. Valid values must begin with a letter or number, end with a letter or number and may only contain letters, numbers and hyphens with a maximum length of 90 characters. Changing this forces a new Front Door Route to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name which should be used for this Front Door Route. Valid values must begin with a letter or number, end with a letter or number and may only contain letters, numbers and hyphens with a maximum length of 90 characters. Changing this forces a new Front Door Route to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The route patterns of the rule.
     * 
     */
    @Import(name="patternsToMatches", required=true)
    private Output<List<String>> patternsToMatches;

    /**
     * @return The route patterns of the rule.
     * 
     */
    public Output<List<String>> patternsToMatches() {
        return this.patternsToMatches;
    }

    /**
     * One or more Protocols supported by this Front Door Route. Possible values are `Http` or `Https`.
     * 
     * &gt; **NOTE:** If `https_redirect_enabled` is set to `true` the `supported_protocols` field must contain both `Http` and `Https` values.
     * 
     */
    @Import(name="supportedProtocols", required=true)
    private Output<List<String>> supportedProtocols;

    /**
     * @return One or more Protocols supported by this Front Door Route. Possible values are `Http` or `Https`.
     * 
     * &gt; **NOTE:** If `https_redirect_enabled` is set to `true` the `supported_protocols` field must contain both `Http` and `Https` values.
     * 
     */
    public Output<List<String>> supportedProtocols() {
        return this.supportedProtocols;
    }

    private FrontdoorRouteArgs() {}

    private FrontdoorRouteArgs(FrontdoorRouteArgs $) {
        this.cache = $.cache;
        this.cdnFrontdoorCustomDomainIds = $.cdnFrontdoorCustomDomainIds;
        this.cdnFrontdoorEndpointId = $.cdnFrontdoorEndpointId;
        this.cdnFrontdoorOriginGroupId = $.cdnFrontdoorOriginGroupId;
        this.cdnFrontdoorOriginIds = $.cdnFrontdoorOriginIds;
        this.cdnFrontdoorOriginPath = $.cdnFrontdoorOriginPath;
        this.cdnFrontdoorRuleSetIds = $.cdnFrontdoorRuleSetIds;
        this.enabled = $.enabled;
        this.forwardingProtocol = $.forwardingProtocol;
        this.httpsRedirectEnabled = $.httpsRedirectEnabled;
        this.linkToDefaultDomain = $.linkToDefaultDomain;
        this.name = $.name;
        this.patternsToMatches = $.patternsToMatches;
        this.supportedProtocols = $.supportedProtocols;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FrontdoorRouteArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FrontdoorRouteArgs $;

        public Builder() {
            $ = new FrontdoorRouteArgs();
        }

        public Builder(FrontdoorRouteArgs defaults) {
            $ = new FrontdoorRouteArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cache A `cache` block as defined below.
         * 
         * &gt; **NOTE:** To disable caching, do not provide the `cache` block in the configuration file.
         * 
         * @return builder
         * 
         */
        public Builder cache(@Nullable Output<FrontdoorRouteCacheArgs> cache) {
            $.cache = cache;
            return this;
        }

        /**
         * @param cache A `cache` block as defined below.
         * 
         * &gt; **NOTE:** To disable caching, do not provide the `cache` block in the configuration file.
         * 
         * @return builder
         * 
         */
        public Builder cache(FrontdoorRouteCacheArgs cache) {
            return cache(Output.of(cache));
        }

        /**
         * @param cdnFrontdoorCustomDomainIds The IDs of the Front Door Custom Domains which are associated with this Front Door Route.
         * 
         * @return builder
         * 
         */
        public Builder cdnFrontdoorCustomDomainIds(@Nullable Output<List<String>> cdnFrontdoorCustomDomainIds) {
            $.cdnFrontdoorCustomDomainIds = cdnFrontdoorCustomDomainIds;
            return this;
        }

        /**
         * @param cdnFrontdoorCustomDomainIds The IDs of the Front Door Custom Domains which are associated with this Front Door Route.
         * 
         * @return builder
         * 
         */
        public Builder cdnFrontdoorCustomDomainIds(List<String> cdnFrontdoorCustomDomainIds) {
            return cdnFrontdoorCustomDomainIds(Output.of(cdnFrontdoorCustomDomainIds));
        }

        /**
         * @param cdnFrontdoorCustomDomainIds The IDs of the Front Door Custom Domains which are associated with this Front Door Route.
         * 
         * @return builder
         * 
         */
        public Builder cdnFrontdoorCustomDomainIds(String... cdnFrontdoorCustomDomainIds) {
            return cdnFrontdoorCustomDomainIds(List.of(cdnFrontdoorCustomDomainIds));
        }

        /**
         * @param cdnFrontdoorEndpointId The resource ID of the Front Door Endpoint where this Front Door Route should exist. Changing this forces a new Front Door Route to be created.
         * 
         * @return builder
         * 
         */
        public Builder cdnFrontdoorEndpointId(Output<String> cdnFrontdoorEndpointId) {
            $.cdnFrontdoorEndpointId = cdnFrontdoorEndpointId;
            return this;
        }

        /**
         * @param cdnFrontdoorEndpointId The resource ID of the Front Door Endpoint where this Front Door Route should exist. Changing this forces a new Front Door Route to be created.
         * 
         * @return builder
         * 
         */
        public Builder cdnFrontdoorEndpointId(String cdnFrontdoorEndpointId) {
            return cdnFrontdoorEndpointId(Output.of(cdnFrontdoorEndpointId));
        }

        /**
         * @param cdnFrontdoorOriginGroupId The resource ID of the Front Door Origin Group where this Front Door Route should be created.
         * 
         * @return builder
         * 
         */
        public Builder cdnFrontdoorOriginGroupId(Output<String> cdnFrontdoorOriginGroupId) {
            $.cdnFrontdoorOriginGroupId = cdnFrontdoorOriginGroupId;
            return this;
        }

        /**
         * @param cdnFrontdoorOriginGroupId The resource ID of the Front Door Origin Group where this Front Door Route should be created.
         * 
         * @return builder
         * 
         */
        public Builder cdnFrontdoorOriginGroupId(String cdnFrontdoorOriginGroupId) {
            return cdnFrontdoorOriginGroupId(Output.of(cdnFrontdoorOriginGroupId));
        }

        /**
         * @param cdnFrontdoorOriginIds One or more Front Door Origin resource IDs that this Front Door Route will link to.
         * 
         * @return builder
         * 
         */
        public Builder cdnFrontdoorOriginIds(Output<List<String>> cdnFrontdoorOriginIds) {
            $.cdnFrontdoorOriginIds = cdnFrontdoorOriginIds;
            return this;
        }

        /**
         * @param cdnFrontdoorOriginIds One or more Front Door Origin resource IDs that this Front Door Route will link to.
         * 
         * @return builder
         * 
         */
        public Builder cdnFrontdoorOriginIds(List<String> cdnFrontdoorOriginIds) {
            return cdnFrontdoorOriginIds(Output.of(cdnFrontdoorOriginIds));
        }

        /**
         * @param cdnFrontdoorOriginIds One or more Front Door Origin resource IDs that this Front Door Route will link to.
         * 
         * @return builder
         * 
         */
        public Builder cdnFrontdoorOriginIds(String... cdnFrontdoorOriginIds) {
            return cdnFrontdoorOriginIds(List.of(cdnFrontdoorOriginIds));
        }

        /**
         * @param cdnFrontdoorOriginPath A directory path on the Front Door Origin that can be used to retrieve content (e.g. `contoso.cloudapp.net/originpath`).
         * 
         * @return builder
         * 
         */
        public Builder cdnFrontdoorOriginPath(@Nullable Output<String> cdnFrontdoorOriginPath) {
            $.cdnFrontdoorOriginPath = cdnFrontdoorOriginPath;
            return this;
        }

        /**
         * @param cdnFrontdoorOriginPath A directory path on the Front Door Origin that can be used to retrieve content (e.g. `contoso.cloudapp.net/originpath`).
         * 
         * @return builder
         * 
         */
        public Builder cdnFrontdoorOriginPath(String cdnFrontdoorOriginPath) {
            return cdnFrontdoorOriginPath(Output.of(cdnFrontdoorOriginPath));
        }

        /**
         * @param cdnFrontdoorRuleSetIds A list of the Front Door Rule Set IDs which should be assigned to this Front Door Route.
         * 
         * @return builder
         * 
         */
        public Builder cdnFrontdoorRuleSetIds(@Nullable Output<List<String>> cdnFrontdoorRuleSetIds) {
            $.cdnFrontdoorRuleSetIds = cdnFrontdoorRuleSetIds;
            return this;
        }

        /**
         * @param cdnFrontdoorRuleSetIds A list of the Front Door Rule Set IDs which should be assigned to this Front Door Route.
         * 
         * @return builder
         * 
         */
        public Builder cdnFrontdoorRuleSetIds(List<String> cdnFrontdoorRuleSetIds) {
            return cdnFrontdoorRuleSetIds(Output.of(cdnFrontdoorRuleSetIds));
        }

        /**
         * @param cdnFrontdoorRuleSetIds A list of the Front Door Rule Set IDs which should be assigned to this Front Door Route.
         * 
         * @return builder
         * 
         */
        public Builder cdnFrontdoorRuleSetIds(String... cdnFrontdoorRuleSetIds) {
            return cdnFrontdoorRuleSetIds(List.of(cdnFrontdoorRuleSetIds));
        }

        /**
         * @param enabled Is this Front Door Route enabled? Possible values are `true` or `false`. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Is this Front Door Route enabled? Possible values are `true` or `false`. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param forwardingProtocol The Protocol that will be use when forwarding traffic to backends. Possible values are `HttpOnly`, `HttpsOnly` or `MatchRequest`. Defaults to `MatchRequest`.
         * 
         * @return builder
         * 
         */
        public Builder forwardingProtocol(@Nullable Output<String> forwardingProtocol) {
            $.forwardingProtocol = forwardingProtocol;
            return this;
        }

        /**
         * @param forwardingProtocol The Protocol that will be use when forwarding traffic to backends. Possible values are `HttpOnly`, `HttpsOnly` or `MatchRequest`. Defaults to `MatchRequest`.
         * 
         * @return builder
         * 
         */
        public Builder forwardingProtocol(String forwardingProtocol) {
            return forwardingProtocol(Output.of(forwardingProtocol));
        }

        /**
         * @param httpsRedirectEnabled Automatically redirect HTTP traffic to HTTPS traffic? Possible values are `true` or `false`. Defaults to `true`.
         * 
         * &gt; **NOTE:** The `https_redirect_enabled` rule is the first rule that will be executed.
         * 
         * @return builder
         * 
         */
        public Builder httpsRedirectEnabled(@Nullable Output<Boolean> httpsRedirectEnabled) {
            $.httpsRedirectEnabled = httpsRedirectEnabled;
            return this;
        }

        /**
         * @param httpsRedirectEnabled Automatically redirect HTTP traffic to HTTPS traffic? Possible values are `true` or `false`. Defaults to `true`.
         * 
         * &gt; **NOTE:** The `https_redirect_enabled` rule is the first rule that will be executed.
         * 
         * @return builder
         * 
         */
        public Builder httpsRedirectEnabled(Boolean httpsRedirectEnabled) {
            return httpsRedirectEnabled(Output.of(httpsRedirectEnabled));
        }

        /**
         * @param linkToDefaultDomain Should this Front Door Route be linked to the default endpoint? Possible values include `true` or `false`. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder linkToDefaultDomain(@Nullable Output<Boolean> linkToDefaultDomain) {
            $.linkToDefaultDomain = linkToDefaultDomain;
            return this;
        }

        /**
         * @param linkToDefaultDomain Should this Front Door Route be linked to the default endpoint? Possible values include `true` or `false`. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder linkToDefaultDomain(Boolean linkToDefaultDomain) {
            return linkToDefaultDomain(Output.of(linkToDefaultDomain));
        }

        /**
         * @param name The name which should be used for this Front Door Route. Valid values must begin with a letter or number, end with a letter or number and may only contain letters, numbers and hyphens with a maximum length of 90 characters. Changing this forces a new Front Door Route to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this Front Door Route. Valid values must begin with a letter or number, end with a letter or number and may only contain letters, numbers and hyphens with a maximum length of 90 characters. Changing this forces a new Front Door Route to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param patternsToMatches The route patterns of the rule.
         * 
         * @return builder
         * 
         */
        public Builder patternsToMatches(Output<List<String>> patternsToMatches) {
            $.patternsToMatches = patternsToMatches;
            return this;
        }

        /**
         * @param patternsToMatches The route patterns of the rule.
         * 
         * @return builder
         * 
         */
        public Builder patternsToMatches(List<String> patternsToMatches) {
            return patternsToMatches(Output.of(patternsToMatches));
        }

        /**
         * @param patternsToMatches The route patterns of the rule.
         * 
         * @return builder
         * 
         */
        public Builder patternsToMatches(String... patternsToMatches) {
            return patternsToMatches(List.of(patternsToMatches));
        }

        /**
         * @param supportedProtocols One or more Protocols supported by this Front Door Route. Possible values are `Http` or `Https`.
         * 
         * &gt; **NOTE:** If `https_redirect_enabled` is set to `true` the `supported_protocols` field must contain both `Http` and `Https` values.
         * 
         * @return builder
         * 
         */
        public Builder supportedProtocols(Output<List<String>> supportedProtocols) {
            $.supportedProtocols = supportedProtocols;
            return this;
        }

        /**
         * @param supportedProtocols One or more Protocols supported by this Front Door Route. Possible values are `Http` or `Https`.
         * 
         * &gt; **NOTE:** If `https_redirect_enabled` is set to `true` the `supported_protocols` field must contain both `Http` and `Https` values.
         * 
         * @return builder
         * 
         */
        public Builder supportedProtocols(List<String> supportedProtocols) {
            return supportedProtocols(Output.of(supportedProtocols));
        }

        /**
         * @param supportedProtocols One or more Protocols supported by this Front Door Route. Possible values are `Http` or `Https`.
         * 
         * &gt; **NOTE:** If `https_redirect_enabled` is set to `true` the `supported_protocols` field must contain both `Http` and `Https` values.
         * 
         * @return builder
         * 
         */
        public Builder supportedProtocols(String... supportedProtocols) {
            return supportedProtocols(List.of(supportedProtocols));
        }

        public FrontdoorRouteArgs build() {
            $.cdnFrontdoorEndpointId = Objects.requireNonNull($.cdnFrontdoorEndpointId, "expected parameter 'cdnFrontdoorEndpointId' to be non-null");
            $.cdnFrontdoorOriginGroupId = Objects.requireNonNull($.cdnFrontdoorOriginGroupId, "expected parameter 'cdnFrontdoorOriginGroupId' to be non-null");
            $.cdnFrontdoorOriginIds = Objects.requireNonNull($.cdnFrontdoorOriginIds, "expected parameter 'cdnFrontdoorOriginIds' to be non-null");
            $.patternsToMatches = Objects.requireNonNull($.patternsToMatches, "expected parameter 'patternsToMatches' to be non-null");
            $.supportedProtocols = Objects.requireNonNull($.supportedProtocols, "expected parameter 'supportedProtocols' to be non-null");
            return $;
        }
    }

}
