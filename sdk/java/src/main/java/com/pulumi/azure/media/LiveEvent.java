// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.media;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.media.LiveEventArgs;
import com.pulumi.azure.media.inputs.LiveEventState;
import com.pulumi.azure.media.outputs.LiveEventCrossSiteAccessPolicy;
import com.pulumi.azure.media.outputs.LiveEventEncoding;
import com.pulumi.azure.media.outputs.LiveEventInput;
import com.pulumi.azure.media.outputs.LiveEventPreview;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a Live Event.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.storage.Account;
 * import com.pulumi.azure.storage.AccountArgs;
 * import com.pulumi.azure.media.ServiceAccount;
 * import com.pulumi.azure.media.ServiceAccountArgs;
 * import com.pulumi.azure.media.inputs.ServiceAccountStorageAccountArgs;
 * import com.pulumi.azure.media.LiveEvent;
 * import com.pulumi.azure.media.LiveEventArgs;
 * import com.pulumi.azure.media.inputs.LiveEventInputArgs;
 * import com.pulumi.azure.media.inputs.LiveEventEncodingArgs;
 * import com.pulumi.azure.media.inputs.LiveEventPreviewArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampleResourceGroup = new ResourceGroup(&#34;exampleResourceGroup&#34;, ResourceGroupArgs.builder()        
 *             .location(&#34;West Europe&#34;)
 *             .build());
 * 
 *         var exampleAccount = new Account(&#34;exampleAccount&#34;, AccountArgs.builder()        
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .location(exampleResourceGroup.location())
 *             .accountTier(&#34;Standard&#34;)
 *             .accountReplicationType(&#34;GRS&#34;)
 *             .build());
 * 
 *         var exampleServiceAccount = new ServiceAccount(&#34;exampleServiceAccount&#34;, ServiceAccountArgs.builder()        
 *             .location(exampleResourceGroup.location())
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .storageAccounts(ServiceAccountStorageAccountArgs.builder()
 *                 .id(exampleAccount.id())
 *                 .isPrimary(true)
 *                 .build())
 *             .build());
 * 
 *         var exampleLiveEvent = new LiveEvent(&#34;exampleLiveEvent&#34;, LiveEventArgs.builder()        
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .location(exampleResourceGroup.location())
 *             .mediaServicesAccountName(exampleServiceAccount.name())
 *             .description(&#34;My Event Description&#34;)
 *             .input(LiveEventInputArgs.builder()
 *                 .streamingProtocol(&#34;RTMP&#34;)
 *                 .ipAccessControlAllows(LiveEventInputIpAccessControlAllowArgs.builder()
 *                     .name(&#34;AllowAll&#34;)
 *                     .address(&#34;0.0.0.0&#34;)
 *                     .subnetPrefixLength(0)
 *                     .build())
 *                 .build())
 *             .encoding(LiveEventEncodingArgs.builder()
 *                 .type(&#34;Standard&#34;)
 *                 .presetName(&#34;Default720p&#34;)
 *                 .stretchMode(&#34;AutoFit&#34;)
 *                 .keyFrameInterval(&#34;PT2S&#34;)
 *                 .build())
 *             .preview(LiveEventPreviewArgs.builder()
 *                 .ipAccessControlAllows(LiveEventPreviewIpAccessControlAllowArgs.builder()
 *                     .name(&#34;AllowAll&#34;)
 *                     .address(&#34;0.0.0.0&#34;)
 *                     .subnetPrefixLength(0)
 *                     .build())
 *                 .build())
 *             .streamOptions(&#34;LowLatency&#34;)
 *             .useStaticHostname(true)
 *             .hostnamePrefix(&#34;special-event&#34;)
 *             .transcriptionLanguages(&#34;en-US&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Live Events can be imported using the `resource id`, e.g.
 * 
 * ```sh
 *  $ pulumi import azure:media/liveEvent:LiveEvent example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resGroup1/providers/Microsoft.Media/mediaServices/account1/liveEvents/event1
 * ```
 * 
 */
@ResourceType(type="azure:media/liveEvent:LiveEvent")
public class LiveEvent extends com.pulumi.resources.CustomResource {
    /**
     * The flag indicates if the resource should be automatically started on creation. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="autoStartEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> autoStartEnabled;

    /**
     * @return The flag indicates if the resource should be automatically started on creation. Changing this forces a new resource to be created.
     * 
     */
    public Output<Optional<Boolean>> autoStartEnabled() {
        return Codegen.optional(this.autoStartEnabled);
    }
    /**
     * A `cross_site_access_policy` block as defined below.
     * 
     */
    @Export(name="crossSiteAccessPolicy", refs={LiveEventCrossSiteAccessPolicy.class}, tree="[0]")
    private Output</* @Nullable */ LiveEventCrossSiteAccessPolicy> crossSiteAccessPolicy;

    /**
     * @return A `cross_site_access_policy` block as defined below.
     * 
     */
    public Output<Optional<LiveEventCrossSiteAccessPolicy>> crossSiteAccessPolicy() {
        return Codegen.optional(this.crossSiteAccessPolicy);
    }
    /**
     * A description for the live event.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return A description for the live event.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * A `encoding` block as defined below.
     * 
     */
    @Export(name="encoding", refs={LiveEventEncoding.class}, tree="[0]")
    private Output</* @Nullable */ LiveEventEncoding> encoding;

    /**
     * @return A `encoding` block as defined below.
     * 
     */
    public Output<Optional<LiveEventEncoding>> encoding() {
        return Codegen.optional(this.encoding);
    }
    /**
     * When `use_static_hostname` is set to true, the `hostname_prefix` specifies the first part of the hostname assigned to the live event preview and ingest endpoints. The final hostname would be a combination of this prefix, the media service account name and a short code for the Azure Media Services data center.
     * 
     */
    @Export(name="hostnamePrefix", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> hostnamePrefix;

    /**
     * @return When `use_static_hostname` is set to true, the `hostname_prefix` specifies the first part of the hostname assigned to the live event preview and ingest endpoints. The final hostname would be a combination of this prefix, the media service account name and a short code for the Azure Media Services data center.
     * 
     */
    public Output<Optional<String>> hostnamePrefix() {
        return Codegen.optional(this.hostnamePrefix);
    }
    /**
     * A `input` block as defined below.
     * 
     */
    @Export(name="input", refs={LiveEventInput.class}, tree="[0]")
    private Output<LiveEventInput> input;

    /**
     * @return A `input` block as defined below.
     * 
     */
    public Output<LiveEventInput> input() {
        return this.input;
    }
    /**
     * The Azure Region where the Live Event should exist. Changing this forces a new Live Event to be created.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return The Azure Region where the Live Event should exist. Changing this forces a new Live Event to be created.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * The Media Services account name. Changing this forces a new Live Event to be created.
     * 
     */
    @Export(name="mediaServicesAccountName", refs={String.class}, tree="[0]")
    private Output<String> mediaServicesAccountName;

    /**
     * @return The Media Services account name. Changing this forces a new Live Event to be created.
     * 
     */
    public Output<String> mediaServicesAccountName() {
        return this.mediaServicesAccountName;
    }
    /**
     * The name which should be used for this Live Event. Changing this forces a new Live Event to be created.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name which should be used for this Live Event. Changing this forces a new Live Event to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * A `preview` block as defined below.
     * 
     */
    @Export(name="preview", refs={LiveEventPreview.class}, tree="[0]")
    private Output<LiveEventPreview> preview;

    /**
     * @return A `preview` block as defined below.
     * 
     */
    public Output<LiveEventPreview> preview() {
        return this.preview;
    }
    /**
     * The name of the Resource Group where the Live Event should exist. Changing this forces a new Live Event to be created.
     * 
     */
    @Export(name="resourceGroupName", refs={String.class}, tree="[0]")
    private Output<String> resourceGroupName;

    /**
     * @return The name of the Resource Group where the Live Event should exist. Changing this forces a new Live Event to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * A list of options to use for the LiveEvent. Possible values are `Default`, `LowLatency`, `LowLatencyV2`. Please see more at this [document](https://learn.microsoft.com/en-us/azure/media-services/latest/live-event-latency-reference#lowlatency-and-lowlatencyv2-options). Changing this forces a new resource to be created.
     * 
     */
    @Export(name="streamOptions", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> streamOptions;

    /**
     * @return A list of options to use for the LiveEvent. Possible values are `Default`, `LowLatency`, `LowLatencyV2`. Please see more at this [document](https://learn.microsoft.com/en-us/azure/media-services/latest/live-event-latency-reference#lowlatency-and-lowlatencyv2-options). Changing this forces a new resource to be created.
     * 
     */
    public Output<Optional<List<String>>> streamOptions() {
        return Codegen.optional(this.streamOptions);
    }
    /**
     * A mapping of tags which should be assigned to the Live Event.
     * 
     */
    @Export(name="tags", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return A mapping of tags which should be assigned to the Live Event.
     * 
     */
    public Output<Optional<Map<String,String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * Specifies a list of languages (locale) to be used for speech-to-text transcription – it should match the spoken language in the audio track. The value should be in `BCP-47` format (e.g: `en-US`). [See the Microsoft Documentation for more information about the live transcription feature and the list of supported languages](https://go.microsoft.com/fwlink/?linkid=2133742).
     * 
     */
    @Export(name="transcriptionLanguages", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> transcriptionLanguages;

    /**
     * @return Specifies a list of languages (locale) to be used for speech-to-text transcription – it should match the spoken language in the audio track. The value should be in `BCP-47` format (e.g: `en-US`). [See the Microsoft Documentation for more information about the live transcription feature and the list of supported languages](https://go.microsoft.com/fwlink/?linkid=2133742).
     * 
     */
    public Output<Optional<List<String>>> transcriptionLanguages() {
        return Codegen.optional(this.transcriptionLanguages);
    }
    /**
     * Specifies whether a static hostname would be assigned to the live event preview and ingest endpoints. Changing this forces a new Live Event to be created.
     * 
     */
    @Export(name="useStaticHostname", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> useStaticHostname;

    /**
     * @return Specifies whether a static hostname would be assigned to the live event preview and ingest endpoints. Changing this forces a new Live Event to be created.
     * 
     */
    public Output<Optional<Boolean>> useStaticHostname() {
        return Codegen.optional(this.useStaticHostname);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public LiveEvent(String name) {
        this(name, LiveEventArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public LiveEvent(String name, LiveEventArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public LiveEvent(String name, LiveEventArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:media/liveEvent:LiveEvent", name, args == null ? LiveEventArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private LiveEvent(String name, Output<String> id, @Nullable LiveEventState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:media/liveEvent:LiveEvent", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static LiveEvent get(String name, Output<String> id, @Nullable LiveEventState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new LiveEvent(name, id, state, options);
    }
}
