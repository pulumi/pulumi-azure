// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appservice.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LinuxWebAppSiteConfigApplicationStackArgs extends com.pulumi.resources.ResourceArgs {

    public static final LinuxWebAppSiteConfigApplicationStackArgs Empty = new LinuxWebAppSiteConfigApplicationStackArgs();

    /**
     * The Docker image reference, including repository host as needed.
     * 
     */
    @Import(name="dockerImage")
    private @Nullable Output<String> dockerImage;

    /**
     * @return The Docker image reference, including repository host as needed.
     * 
     */
    public Optional<Output<String>> dockerImage() {
        return Optional.ofNullable(this.dockerImage);
    }

    /**
     * The image Tag to use. e.g. `latest`.
     * 
     */
    @Import(name="dockerImageTag")
    private @Nullable Output<String> dockerImageTag;

    /**
     * @return The image Tag to use. e.g. `latest`.
     * 
     */
    public Optional<Output<String>> dockerImageTag() {
        return Optional.ofNullable(this.dockerImageTag);
    }

    /**
     * The version of .NET to use. Possible values include `3.1`, `5.0`, and `6.0`.
     * 
     */
    @Import(name="dotnetVersion")
    private @Nullable Output<String> dotnetVersion;

    /**
     * @return The version of .NET to use. Possible values include `3.1`, `5.0`, and `6.0`.
     * 
     */
    public Optional<Output<String>> dotnetVersion() {
        return Optional.ofNullable(this.dotnetVersion);
    }

    /**
     * The Java server type. Possible values include `JAVA`, `TOMCAT`, and `JBOSSEAP`.
     * 
     */
    @Import(name="javaServer")
    private @Nullable Output<String> javaServer;

    /**
     * @return The Java server type. Possible values include `JAVA`, `TOMCAT`, and `JBOSSEAP`.
     * 
     */
    public Optional<Output<String>> javaServer() {
        return Optional.ofNullable(this.javaServer);
    }

    /**
     * The Version of the `java_server` to use.
     * 
     */
    @Import(name="javaServerVersion")
    private @Nullable Output<String> javaServerVersion;

    /**
     * @return The Version of the `java_server` to use.
     * 
     */
    public Optional<Output<String>> javaServerVersion() {
        return Optional.ofNullable(this.javaServerVersion);
    }

    /**
     * The Version of Java to use. Supported versions of Java vary depending on the `java_server` and `java_server_version`, as well as security and fixes to major versions. Please see Azure documentation for the latest information.
     * 
     */
    @Import(name="javaVersion")
    private @Nullable Output<String> javaVersion;

    /**
     * @return The Version of Java to use. Supported versions of Java vary depending on the `java_server` and `java_server_version`, as well as security and fixes to major versions. Please see Azure documentation for the latest information.
     * 
     */
    public Optional<Output<String>> javaVersion() {
        return Optional.ofNullable(this.javaVersion);
    }

    /**
     * The version of Node to run. Possible values include `12-lts`, `14-lts`, and `16-lts`. This property conflicts with `java_version`.
     * 
     */
    @Import(name="nodeVersion")
    private @Nullable Output<String> nodeVersion;

    /**
     * @return The version of Node to run. Possible values include `12-lts`, `14-lts`, and `16-lts`. This property conflicts with `java_version`.
     * 
     */
    public Optional<Output<String>> nodeVersion() {
        return Optional.ofNullable(this.nodeVersion);
    }

    /**
     * The version of PHP to run. Possible values include `7.4`, and `8.0`.
     * 
     */
    @Import(name="phpVersion")
    private @Nullable Output<String> phpVersion;

    /**
     * @return The version of PHP to run. Possible values include `7.4`, and `8.0`.
     * 
     */
    public Optional<Output<String>> phpVersion() {
        return Optional.ofNullable(this.phpVersion);
    }

    /**
     * The version of Python to run. Possible values include `3.7`, `3.8`, and `3.9`.
     * 
     */
    @Import(name="pythonVersion")
    private @Nullable Output<String> pythonVersion;

    /**
     * @return The version of Python to run. Possible values include `3.7`, `3.8`, and `3.9`.
     * 
     */
    public Optional<Output<String>> pythonVersion() {
        return Optional.ofNullable(this.pythonVersion);
    }

    /**
     * Te version of Ruby to run. Possible values include `2.6` and `2.7`.
     * 
     */
    @Import(name="rubyVersion")
    private @Nullable Output<String> rubyVersion;

    /**
     * @return Te version of Ruby to run. Possible values include `2.6` and `2.7`.
     * 
     */
    public Optional<Output<String>> rubyVersion() {
        return Optional.ofNullable(this.rubyVersion);
    }

    private LinuxWebAppSiteConfigApplicationStackArgs() {}

    private LinuxWebAppSiteConfigApplicationStackArgs(LinuxWebAppSiteConfigApplicationStackArgs $) {
        this.dockerImage = $.dockerImage;
        this.dockerImageTag = $.dockerImageTag;
        this.dotnetVersion = $.dotnetVersion;
        this.javaServer = $.javaServer;
        this.javaServerVersion = $.javaServerVersion;
        this.javaVersion = $.javaVersion;
        this.nodeVersion = $.nodeVersion;
        this.phpVersion = $.phpVersion;
        this.pythonVersion = $.pythonVersion;
        this.rubyVersion = $.rubyVersion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LinuxWebAppSiteConfigApplicationStackArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LinuxWebAppSiteConfigApplicationStackArgs $;

        public Builder() {
            $ = new LinuxWebAppSiteConfigApplicationStackArgs();
        }

        public Builder(LinuxWebAppSiteConfigApplicationStackArgs defaults) {
            $ = new LinuxWebAppSiteConfigApplicationStackArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dockerImage The Docker image reference, including repository host as needed.
         * 
         * @return builder
         * 
         */
        public Builder dockerImage(@Nullable Output<String> dockerImage) {
            $.dockerImage = dockerImage;
            return this;
        }

        /**
         * @param dockerImage The Docker image reference, including repository host as needed.
         * 
         * @return builder
         * 
         */
        public Builder dockerImage(String dockerImage) {
            return dockerImage(Output.of(dockerImage));
        }

        /**
         * @param dockerImageTag The image Tag to use. e.g. `latest`.
         * 
         * @return builder
         * 
         */
        public Builder dockerImageTag(@Nullable Output<String> dockerImageTag) {
            $.dockerImageTag = dockerImageTag;
            return this;
        }

        /**
         * @param dockerImageTag The image Tag to use. e.g. `latest`.
         * 
         * @return builder
         * 
         */
        public Builder dockerImageTag(String dockerImageTag) {
            return dockerImageTag(Output.of(dockerImageTag));
        }

        /**
         * @param dotnetVersion The version of .NET to use. Possible values include `3.1`, `5.0`, and `6.0`.
         * 
         * @return builder
         * 
         */
        public Builder dotnetVersion(@Nullable Output<String> dotnetVersion) {
            $.dotnetVersion = dotnetVersion;
            return this;
        }

        /**
         * @param dotnetVersion The version of .NET to use. Possible values include `3.1`, `5.0`, and `6.0`.
         * 
         * @return builder
         * 
         */
        public Builder dotnetVersion(String dotnetVersion) {
            return dotnetVersion(Output.of(dotnetVersion));
        }

        /**
         * @param javaServer The Java server type. Possible values include `JAVA`, `TOMCAT`, and `JBOSSEAP`.
         * 
         * @return builder
         * 
         */
        public Builder javaServer(@Nullable Output<String> javaServer) {
            $.javaServer = javaServer;
            return this;
        }

        /**
         * @param javaServer The Java server type. Possible values include `JAVA`, `TOMCAT`, and `JBOSSEAP`.
         * 
         * @return builder
         * 
         */
        public Builder javaServer(String javaServer) {
            return javaServer(Output.of(javaServer));
        }

        /**
         * @param javaServerVersion The Version of the `java_server` to use.
         * 
         * @return builder
         * 
         */
        public Builder javaServerVersion(@Nullable Output<String> javaServerVersion) {
            $.javaServerVersion = javaServerVersion;
            return this;
        }

        /**
         * @param javaServerVersion The Version of the `java_server` to use.
         * 
         * @return builder
         * 
         */
        public Builder javaServerVersion(String javaServerVersion) {
            return javaServerVersion(Output.of(javaServerVersion));
        }

        /**
         * @param javaVersion The Version of Java to use. Supported versions of Java vary depending on the `java_server` and `java_server_version`, as well as security and fixes to major versions. Please see Azure documentation for the latest information.
         * 
         * @return builder
         * 
         */
        public Builder javaVersion(@Nullable Output<String> javaVersion) {
            $.javaVersion = javaVersion;
            return this;
        }

        /**
         * @param javaVersion The Version of Java to use. Supported versions of Java vary depending on the `java_server` and `java_server_version`, as well as security and fixes to major versions. Please see Azure documentation for the latest information.
         * 
         * @return builder
         * 
         */
        public Builder javaVersion(String javaVersion) {
            return javaVersion(Output.of(javaVersion));
        }

        /**
         * @param nodeVersion The version of Node to run. Possible values include `12-lts`, `14-lts`, and `16-lts`. This property conflicts with `java_version`.
         * 
         * @return builder
         * 
         */
        public Builder nodeVersion(@Nullable Output<String> nodeVersion) {
            $.nodeVersion = nodeVersion;
            return this;
        }

        /**
         * @param nodeVersion The version of Node to run. Possible values include `12-lts`, `14-lts`, and `16-lts`. This property conflicts with `java_version`.
         * 
         * @return builder
         * 
         */
        public Builder nodeVersion(String nodeVersion) {
            return nodeVersion(Output.of(nodeVersion));
        }

        /**
         * @param phpVersion The version of PHP to run. Possible values include `7.4`, and `8.0`.
         * 
         * @return builder
         * 
         */
        public Builder phpVersion(@Nullable Output<String> phpVersion) {
            $.phpVersion = phpVersion;
            return this;
        }

        /**
         * @param phpVersion The version of PHP to run. Possible values include `7.4`, and `8.0`.
         * 
         * @return builder
         * 
         */
        public Builder phpVersion(String phpVersion) {
            return phpVersion(Output.of(phpVersion));
        }

        /**
         * @param pythonVersion The version of Python to run. Possible values include `3.7`, `3.8`, and `3.9`.
         * 
         * @return builder
         * 
         */
        public Builder pythonVersion(@Nullable Output<String> pythonVersion) {
            $.pythonVersion = pythonVersion;
            return this;
        }

        /**
         * @param pythonVersion The version of Python to run. Possible values include `3.7`, `3.8`, and `3.9`.
         * 
         * @return builder
         * 
         */
        public Builder pythonVersion(String pythonVersion) {
            return pythonVersion(Output.of(pythonVersion));
        }

        /**
         * @param rubyVersion Te version of Ruby to run. Possible values include `2.6` and `2.7`.
         * 
         * @return builder
         * 
         */
        public Builder rubyVersion(@Nullable Output<String> rubyVersion) {
            $.rubyVersion = rubyVersion;
            return this;
        }

        /**
         * @param rubyVersion Te version of Ruby to run. Possible values include `2.6` and `2.7`.
         * 
         * @return builder
         * 
         */
        public Builder rubyVersion(String rubyVersion) {
            return rubyVersion(Output.of(rubyVersion));
        }

        public LinuxWebAppSiteConfigApplicationStackArgs build() {
            return $;
        }
    }

}
