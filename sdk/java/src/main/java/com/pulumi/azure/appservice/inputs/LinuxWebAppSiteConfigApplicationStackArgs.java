// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appservice.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LinuxWebAppSiteConfigApplicationStackArgs extends com.pulumi.resources.ResourceArgs {

    public static final LinuxWebAppSiteConfigApplicationStackArgs Empty = new LinuxWebAppSiteConfigApplicationStackArgs();

    /**
     * @deprecated
     * This property has been deprecated and will be removed in 4.0 of the provider.
     * 
     */
    @Deprecated /* This property has been deprecated and will be removed in 4.0 of the provider. */
    @Import(name="dockerImage")
    private @Nullable Output<String> dockerImage;

    /**
     * @deprecated
     * This property has been deprecated and will be removed in 4.0 of the provider.
     * 
     */
    @Deprecated /* This property has been deprecated and will be removed in 4.0 of the provider. */
    public Optional<Output<String>> dockerImage() {
        return Optional.ofNullable(this.dockerImage);
    }

    /**
     * The docker image, including tag, to be used. e.g. `appsvc/staticsite:latest`.
     * 
     */
    @Import(name="dockerImageName")
    private @Nullable Output<String> dockerImageName;

    /**
     * @return The docker image, including tag, to be used. e.g. `appsvc/staticsite:latest`.
     * 
     */
    public Optional<Output<String>> dockerImageName() {
        return Optional.ofNullable(this.dockerImageName);
    }

    /**
     * @deprecated
     * This property has been deprecated and will be removed in 4.0 of the provider.
     * 
     */
    @Deprecated /* This property has been deprecated and will be removed in 4.0 of the provider. */
    @Import(name="dockerImageTag")
    private @Nullable Output<String> dockerImageTag;

    /**
     * @deprecated
     * This property has been deprecated and will be removed in 4.0 of the provider.
     * 
     */
    @Deprecated /* This property has been deprecated and will be removed in 4.0 of the provider. */
    public Optional<Output<String>> dockerImageTag() {
        return Optional.ofNullable(this.dockerImageTag);
    }

    /**
     * The User Name to use for authentication against the registry to pull the image.
     * 
     * &gt; **NOTE:** `docker_registry_url`, `docker_registry_username`, and `docker_registry_password` replace the use of the `app_settings` values of `DOCKER_REGISTRY_SERVER_URL`, `DOCKER_REGISTRY_SERVER_USERNAME` and `DOCKER_REGISTRY_SERVER_PASSWORD` respectively, these values will be managed by the provider and should not be specified in the `app_settings` map.
     * 
     */
    @Import(name="dockerRegistryPassword")
    private @Nullable Output<String> dockerRegistryPassword;

    /**
     * @return The User Name to use for authentication against the registry to pull the image.
     * 
     * &gt; **NOTE:** `docker_registry_url`, `docker_registry_username`, and `docker_registry_password` replace the use of the `app_settings` values of `DOCKER_REGISTRY_SERVER_URL`, `DOCKER_REGISTRY_SERVER_USERNAME` and `DOCKER_REGISTRY_SERVER_PASSWORD` respectively, these values will be managed by the provider and should not be specified in the `app_settings` map.
     * 
     */
    public Optional<Output<String>> dockerRegistryPassword() {
        return Optional.ofNullable(this.dockerRegistryPassword);
    }

    /**
     * The URL of the container registry where the `docker_image_name` is located. e.g. `https://index.docker.io` or `https://mcr.microsoft.com`. This value is required with `docker_image_name`.
     * 
     */
    @Import(name="dockerRegistryUrl")
    private @Nullable Output<String> dockerRegistryUrl;

    /**
     * @return The URL of the container registry where the `docker_image_name` is located. e.g. `https://index.docker.io` or `https://mcr.microsoft.com`. This value is required with `docker_image_name`.
     * 
     */
    public Optional<Output<String>> dockerRegistryUrl() {
        return Optional.ofNullable(this.dockerRegistryUrl);
    }

    /**
     * The User Name to use for authentication against the registry to pull the image.
     * 
     */
    @Import(name="dockerRegistryUsername")
    private @Nullable Output<String> dockerRegistryUsername;

    /**
     * @return The User Name to use for authentication against the registry to pull the image.
     * 
     */
    public Optional<Output<String>> dockerRegistryUsername() {
        return Optional.ofNullable(this.dockerRegistryUsername);
    }

    /**
     * The version of .NET to use. Possible values include `3.1`, `5.0`, `6.0`, `7.0` and `8.0`.
     * 
     */
    @Import(name="dotnetVersion")
    private @Nullable Output<String> dotnetVersion;

    /**
     * @return The version of .NET to use. Possible values include `3.1`, `5.0`, `6.0`, `7.0` and `8.0`.
     * 
     */
    public Optional<Output<String>> dotnetVersion() {
        return Optional.ofNullable(this.dotnetVersion);
    }

    /**
     * The version of Go to use. Possible values include `1.18`, and `1.19`.
     * 
     */
    @Import(name="goVersion")
    private @Nullable Output<String> goVersion;

    /**
     * @return The version of Go to use. Possible values include `1.18`, and `1.19`.
     * 
     */
    public Optional<Output<String>> goVersion() {
        return Optional.ofNullable(this.goVersion);
    }

    /**
     * The Java server type. Possible values include `JAVA`, `TOMCAT`, and `JBOSSEAP`.
     * 
     * &gt; **NOTE:** `JBOSSEAP` requires a Premium Service Plan SKU to be a valid option.
     * 
     */
    @Import(name="javaServer")
    private @Nullable Output<String> javaServer;

    /**
     * @return The Java server type. Possible values include `JAVA`, `TOMCAT`, and `JBOSSEAP`.
     * 
     * &gt; **NOTE:** `JBOSSEAP` requires a Premium Service Plan SKU to be a valid option.
     * 
     */
    public Optional<Output<String>> javaServer() {
        return Optional.ofNullable(this.javaServer);
    }

    /**
     * The Version of the `java_server` to use.
     * 
     */
    @Import(name="javaServerVersion")
    private @Nullable Output<String> javaServerVersion;

    /**
     * @return The Version of the `java_server` to use.
     * 
     */
    public Optional<Output<String>> javaServerVersion() {
        return Optional.ofNullable(this.javaServerVersion);
    }

    /**
     * The Version of Java to use. Possible values include `8`, `11`, and `17`.
     * 
     * &gt; **NOTE:** The valid version combinations for `java_version`, `java_server` and `java_server_version` can be checked from the command line via `az webapp list-runtimes --linux`.
     * 
     */
    @Import(name="javaVersion")
    private @Nullable Output<String> javaVersion;

    /**
     * @return The Version of Java to use. Possible values include `8`, `11`, and `17`.
     * 
     * &gt; **NOTE:** The valid version combinations for `java_version`, `java_server` and `java_server_version` can be checked from the command line via `az webapp list-runtimes --linux`.
     * 
     */
    public Optional<Output<String>> javaVersion() {
        return Optional.ofNullable(this.javaVersion);
    }

    /**
     * The version of Node to run. Possible values include `12-lts`, `14-lts`, `16-lts`, `18-lts` and `20-lts`. This property conflicts with `java_version`.
     * 
     * &gt; **NOTE:** 10.x versions have been/are being deprecated so may cease to work for new resources in the future and may be removed from the provider.
     * 
     */
    @Import(name="nodeVersion")
    private @Nullable Output<String> nodeVersion;

    /**
     * @return The version of Node to run. Possible values include `12-lts`, `14-lts`, `16-lts`, `18-lts` and `20-lts`. This property conflicts with `java_version`.
     * 
     * &gt; **NOTE:** 10.x versions have been/are being deprecated so may cease to work for new resources in the future and may be removed from the provider.
     * 
     */
    public Optional<Output<String>> nodeVersion() {
        return Optional.ofNullable(this.nodeVersion);
    }

    /**
     * The version of PHP to run. Possible values are `7.4`, `8.0`, `8.1` and `8.2`.
     * 
     * &gt; **NOTE:** version `7.4` is deprecated and will be removed from the provider in a future version.
     * 
     */
    @Import(name="phpVersion")
    private @Nullable Output<String> phpVersion;

    /**
     * @return The version of PHP to run. Possible values are `7.4`, `8.0`, `8.1` and `8.2`.
     * 
     * &gt; **NOTE:** version `7.4` is deprecated and will be removed from the provider in a future version.
     * 
     */
    public Optional<Output<String>> phpVersion() {
        return Optional.ofNullable(this.phpVersion);
    }

    /**
     * The version of Python to run. Possible values include `3.7`, `3.8`, `3.9`, `3.10`, `3.11` and `3.12`.
     * 
     */
    @Import(name="pythonVersion")
    private @Nullable Output<String> pythonVersion;

    /**
     * @return The version of Python to run. Possible values include `3.7`, `3.8`, `3.9`, `3.10`, `3.11` and `3.12`.
     * 
     */
    public Optional<Output<String>> pythonVersion() {
        return Optional.ofNullable(this.pythonVersion);
    }

    /**
     * Te version of Ruby to run. Possible values include `2.6` and `2.7`.
     * 
     */
    @Import(name="rubyVersion")
    private @Nullable Output<String> rubyVersion;

    /**
     * @return Te version of Ruby to run. Possible values include `2.6` and `2.7`.
     * 
     */
    public Optional<Output<String>> rubyVersion() {
        return Optional.ofNullable(this.rubyVersion);
    }

    private LinuxWebAppSiteConfigApplicationStackArgs() {}

    private LinuxWebAppSiteConfigApplicationStackArgs(LinuxWebAppSiteConfigApplicationStackArgs $) {
        this.dockerImage = $.dockerImage;
        this.dockerImageName = $.dockerImageName;
        this.dockerImageTag = $.dockerImageTag;
        this.dockerRegistryPassword = $.dockerRegistryPassword;
        this.dockerRegistryUrl = $.dockerRegistryUrl;
        this.dockerRegistryUsername = $.dockerRegistryUsername;
        this.dotnetVersion = $.dotnetVersion;
        this.goVersion = $.goVersion;
        this.javaServer = $.javaServer;
        this.javaServerVersion = $.javaServerVersion;
        this.javaVersion = $.javaVersion;
        this.nodeVersion = $.nodeVersion;
        this.phpVersion = $.phpVersion;
        this.pythonVersion = $.pythonVersion;
        this.rubyVersion = $.rubyVersion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LinuxWebAppSiteConfigApplicationStackArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LinuxWebAppSiteConfigApplicationStackArgs $;

        public Builder() {
            $ = new LinuxWebAppSiteConfigApplicationStackArgs();
        }

        public Builder(LinuxWebAppSiteConfigApplicationStackArgs defaults) {
            $ = new LinuxWebAppSiteConfigApplicationStackArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * This property has been deprecated and will be removed in 4.0 of the provider.
         * 
         */
        @Deprecated /* This property has been deprecated and will be removed in 4.0 of the provider. */
        public Builder dockerImage(@Nullable Output<String> dockerImage) {
            $.dockerImage = dockerImage;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * This property has been deprecated and will be removed in 4.0 of the provider.
         * 
         */
        @Deprecated /* This property has been deprecated and will be removed in 4.0 of the provider. */
        public Builder dockerImage(String dockerImage) {
            return dockerImage(Output.of(dockerImage));
        }

        /**
         * @param dockerImageName The docker image, including tag, to be used. e.g. `appsvc/staticsite:latest`.
         * 
         * @return builder
         * 
         */
        public Builder dockerImageName(@Nullable Output<String> dockerImageName) {
            $.dockerImageName = dockerImageName;
            return this;
        }

        /**
         * @param dockerImageName The docker image, including tag, to be used. e.g. `appsvc/staticsite:latest`.
         * 
         * @return builder
         * 
         */
        public Builder dockerImageName(String dockerImageName) {
            return dockerImageName(Output.of(dockerImageName));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * This property has been deprecated and will be removed in 4.0 of the provider.
         * 
         */
        @Deprecated /* This property has been deprecated and will be removed in 4.0 of the provider. */
        public Builder dockerImageTag(@Nullable Output<String> dockerImageTag) {
            $.dockerImageTag = dockerImageTag;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * This property has been deprecated and will be removed in 4.0 of the provider.
         * 
         */
        @Deprecated /* This property has been deprecated and will be removed in 4.0 of the provider. */
        public Builder dockerImageTag(String dockerImageTag) {
            return dockerImageTag(Output.of(dockerImageTag));
        }

        /**
         * @param dockerRegistryPassword The User Name to use for authentication against the registry to pull the image.
         * 
         * &gt; **NOTE:** `docker_registry_url`, `docker_registry_username`, and `docker_registry_password` replace the use of the `app_settings` values of `DOCKER_REGISTRY_SERVER_URL`, `DOCKER_REGISTRY_SERVER_USERNAME` and `DOCKER_REGISTRY_SERVER_PASSWORD` respectively, these values will be managed by the provider and should not be specified in the `app_settings` map.
         * 
         * @return builder
         * 
         */
        public Builder dockerRegistryPassword(@Nullable Output<String> dockerRegistryPassword) {
            $.dockerRegistryPassword = dockerRegistryPassword;
            return this;
        }

        /**
         * @param dockerRegistryPassword The User Name to use for authentication against the registry to pull the image.
         * 
         * &gt; **NOTE:** `docker_registry_url`, `docker_registry_username`, and `docker_registry_password` replace the use of the `app_settings` values of `DOCKER_REGISTRY_SERVER_URL`, `DOCKER_REGISTRY_SERVER_USERNAME` and `DOCKER_REGISTRY_SERVER_PASSWORD` respectively, these values will be managed by the provider and should not be specified in the `app_settings` map.
         * 
         * @return builder
         * 
         */
        public Builder dockerRegistryPassword(String dockerRegistryPassword) {
            return dockerRegistryPassword(Output.of(dockerRegistryPassword));
        }

        /**
         * @param dockerRegistryUrl The URL of the container registry where the `docker_image_name` is located. e.g. `https://index.docker.io` or `https://mcr.microsoft.com`. This value is required with `docker_image_name`.
         * 
         * @return builder
         * 
         */
        public Builder dockerRegistryUrl(@Nullable Output<String> dockerRegistryUrl) {
            $.dockerRegistryUrl = dockerRegistryUrl;
            return this;
        }

        /**
         * @param dockerRegistryUrl The URL of the container registry where the `docker_image_name` is located. e.g. `https://index.docker.io` or `https://mcr.microsoft.com`. This value is required with `docker_image_name`.
         * 
         * @return builder
         * 
         */
        public Builder dockerRegistryUrl(String dockerRegistryUrl) {
            return dockerRegistryUrl(Output.of(dockerRegistryUrl));
        }

        /**
         * @param dockerRegistryUsername The User Name to use for authentication against the registry to pull the image.
         * 
         * @return builder
         * 
         */
        public Builder dockerRegistryUsername(@Nullable Output<String> dockerRegistryUsername) {
            $.dockerRegistryUsername = dockerRegistryUsername;
            return this;
        }

        /**
         * @param dockerRegistryUsername The User Name to use for authentication against the registry to pull the image.
         * 
         * @return builder
         * 
         */
        public Builder dockerRegistryUsername(String dockerRegistryUsername) {
            return dockerRegistryUsername(Output.of(dockerRegistryUsername));
        }

        /**
         * @param dotnetVersion The version of .NET to use. Possible values include `3.1`, `5.0`, `6.0`, `7.0` and `8.0`.
         * 
         * @return builder
         * 
         */
        public Builder dotnetVersion(@Nullable Output<String> dotnetVersion) {
            $.dotnetVersion = dotnetVersion;
            return this;
        }

        /**
         * @param dotnetVersion The version of .NET to use. Possible values include `3.1`, `5.0`, `6.0`, `7.0` and `8.0`.
         * 
         * @return builder
         * 
         */
        public Builder dotnetVersion(String dotnetVersion) {
            return dotnetVersion(Output.of(dotnetVersion));
        }

        /**
         * @param goVersion The version of Go to use. Possible values include `1.18`, and `1.19`.
         * 
         * @return builder
         * 
         */
        public Builder goVersion(@Nullable Output<String> goVersion) {
            $.goVersion = goVersion;
            return this;
        }

        /**
         * @param goVersion The version of Go to use. Possible values include `1.18`, and `1.19`.
         * 
         * @return builder
         * 
         */
        public Builder goVersion(String goVersion) {
            return goVersion(Output.of(goVersion));
        }

        /**
         * @param javaServer The Java server type. Possible values include `JAVA`, `TOMCAT`, and `JBOSSEAP`.
         * 
         * &gt; **NOTE:** `JBOSSEAP` requires a Premium Service Plan SKU to be a valid option.
         * 
         * @return builder
         * 
         */
        public Builder javaServer(@Nullable Output<String> javaServer) {
            $.javaServer = javaServer;
            return this;
        }

        /**
         * @param javaServer The Java server type. Possible values include `JAVA`, `TOMCAT`, and `JBOSSEAP`.
         * 
         * &gt; **NOTE:** `JBOSSEAP` requires a Premium Service Plan SKU to be a valid option.
         * 
         * @return builder
         * 
         */
        public Builder javaServer(String javaServer) {
            return javaServer(Output.of(javaServer));
        }

        /**
         * @param javaServerVersion The Version of the `java_server` to use.
         * 
         * @return builder
         * 
         */
        public Builder javaServerVersion(@Nullable Output<String> javaServerVersion) {
            $.javaServerVersion = javaServerVersion;
            return this;
        }

        /**
         * @param javaServerVersion The Version of the `java_server` to use.
         * 
         * @return builder
         * 
         */
        public Builder javaServerVersion(String javaServerVersion) {
            return javaServerVersion(Output.of(javaServerVersion));
        }

        /**
         * @param javaVersion The Version of Java to use. Possible values include `8`, `11`, and `17`.
         * 
         * &gt; **NOTE:** The valid version combinations for `java_version`, `java_server` and `java_server_version` can be checked from the command line via `az webapp list-runtimes --linux`.
         * 
         * @return builder
         * 
         */
        public Builder javaVersion(@Nullable Output<String> javaVersion) {
            $.javaVersion = javaVersion;
            return this;
        }

        /**
         * @param javaVersion The Version of Java to use. Possible values include `8`, `11`, and `17`.
         * 
         * &gt; **NOTE:** The valid version combinations for `java_version`, `java_server` and `java_server_version` can be checked from the command line via `az webapp list-runtimes --linux`.
         * 
         * @return builder
         * 
         */
        public Builder javaVersion(String javaVersion) {
            return javaVersion(Output.of(javaVersion));
        }

        /**
         * @param nodeVersion The version of Node to run. Possible values include `12-lts`, `14-lts`, `16-lts`, `18-lts` and `20-lts`. This property conflicts with `java_version`.
         * 
         * &gt; **NOTE:** 10.x versions have been/are being deprecated so may cease to work for new resources in the future and may be removed from the provider.
         * 
         * @return builder
         * 
         */
        public Builder nodeVersion(@Nullable Output<String> nodeVersion) {
            $.nodeVersion = nodeVersion;
            return this;
        }

        /**
         * @param nodeVersion The version of Node to run. Possible values include `12-lts`, `14-lts`, `16-lts`, `18-lts` and `20-lts`. This property conflicts with `java_version`.
         * 
         * &gt; **NOTE:** 10.x versions have been/are being deprecated so may cease to work for new resources in the future and may be removed from the provider.
         * 
         * @return builder
         * 
         */
        public Builder nodeVersion(String nodeVersion) {
            return nodeVersion(Output.of(nodeVersion));
        }

        /**
         * @param phpVersion The version of PHP to run. Possible values are `7.4`, `8.0`, `8.1` and `8.2`.
         * 
         * &gt; **NOTE:** version `7.4` is deprecated and will be removed from the provider in a future version.
         * 
         * @return builder
         * 
         */
        public Builder phpVersion(@Nullable Output<String> phpVersion) {
            $.phpVersion = phpVersion;
            return this;
        }

        /**
         * @param phpVersion The version of PHP to run. Possible values are `7.4`, `8.0`, `8.1` and `8.2`.
         * 
         * &gt; **NOTE:** version `7.4` is deprecated and will be removed from the provider in a future version.
         * 
         * @return builder
         * 
         */
        public Builder phpVersion(String phpVersion) {
            return phpVersion(Output.of(phpVersion));
        }

        /**
         * @param pythonVersion The version of Python to run. Possible values include `3.7`, `3.8`, `3.9`, `3.10`, `3.11` and `3.12`.
         * 
         * @return builder
         * 
         */
        public Builder pythonVersion(@Nullable Output<String> pythonVersion) {
            $.pythonVersion = pythonVersion;
            return this;
        }

        /**
         * @param pythonVersion The version of Python to run. Possible values include `3.7`, `3.8`, `3.9`, `3.10`, `3.11` and `3.12`.
         * 
         * @return builder
         * 
         */
        public Builder pythonVersion(String pythonVersion) {
            return pythonVersion(Output.of(pythonVersion));
        }

        /**
         * @param rubyVersion Te version of Ruby to run. Possible values include `2.6` and `2.7`.
         * 
         * @return builder
         * 
         */
        public Builder rubyVersion(@Nullable Output<String> rubyVersion) {
            $.rubyVersion = rubyVersion;
            return this;
        }

        /**
         * @param rubyVersion Te version of Ruby to run. Possible values include `2.6` and `2.7`.
         * 
         * @return builder
         * 
         */
        public Builder rubyVersion(String rubyVersion) {
            return rubyVersion(Output.of(rubyVersion));
        }

        public LinuxWebAppSiteConfigApplicationStackArgs build() {
            return $;
        }
    }

}
