// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.compute.outputs;

import com.pulumi.azure.compute.outputs.GetSnapshotEncryptionSetting;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetSnapshotResult {
    private String creationOption;
    /**
     * @return The size of the Snapshotted Disk in GB.
     * 
     */
    private Integer diskSizeGb;
    private List<GetSnapshotEncryptionSetting> encryptionSettings;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String name;
    private String osType;
    private String resourceGroupName;
    /**
     * @return The reference to an existing snapshot.
     * 
     */
    private String sourceResourceId;
    /**
     * @return The URI to a Managed or Unmanaged Disk.
     * 
     */
    private String sourceUri;
    /**
     * @return The ID of an storage account.
     * 
     */
    private String storageAccountId;
    private String timeCreated;
    /**
     * @return Whether Trusted Launch is enabled for the Snapshot.
     * 
     */
    private Boolean trustedLaunchEnabled;

    private GetSnapshotResult() {}
    public String creationOption() {
        return this.creationOption;
    }
    /**
     * @return The size of the Snapshotted Disk in GB.
     * 
     */
    public Integer diskSizeGb() {
        return this.diskSizeGb;
    }
    public List<GetSnapshotEncryptionSetting> encryptionSettings() {
        return this.encryptionSettings;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String name() {
        return this.name;
    }
    public String osType() {
        return this.osType;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return The reference to an existing snapshot.
     * 
     */
    public String sourceResourceId() {
        return this.sourceResourceId;
    }
    /**
     * @return The URI to a Managed or Unmanaged Disk.
     * 
     */
    public String sourceUri() {
        return this.sourceUri;
    }
    /**
     * @return The ID of an storage account.
     * 
     */
    public String storageAccountId() {
        return this.storageAccountId;
    }
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return Whether Trusted Launch is enabled for the Snapshot.
     * 
     */
    public Boolean trustedLaunchEnabled() {
        return this.trustedLaunchEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSnapshotResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String creationOption;
        private Integer diskSizeGb;
        private List<GetSnapshotEncryptionSetting> encryptionSettings;
        private String id;
        private String name;
        private String osType;
        private String resourceGroupName;
        private String sourceResourceId;
        private String sourceUri;
        private String storageAccountId;
        private String timeCreated;
        private Boolean trustedLaunchEnabled;
        public Builder() {}
        public Builder(GetSnapshotResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.creationOption = defaults.creationOption;
    	      this.diskSizeGb = defaults.diskSizeGb;
    	      this.encryptionSettings = defaults.encryptionSettings;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.osType = defaults.osType;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.sourceResourceId = defaults.sourceResourceId;
    	      this.sourceUri = defaults.sourceUri;
    	      this.storageAccountId = defaults.storageAccountId;
    	      this.timeCreated = defaults.timeCreated;
    	      this.trustedLaunchEnabled = defaults.trustedLaunchEnabled;
        }

        @CustomType.Setter
        public Builder creationOption(String creationOption) {
            this.creationOption = Objects.requireNonNull(creationOption);
            return this;
        }
        @CustomType.Setter
        public Builder diskSizeGb(Integer diskSizeGb) {
            this.diskSizeGb = Objects.requireNonNull(diskSizeGb);
            return this;
        }
        @CustomType.Setter
        public Builder encryptionSettings(List<GetSnapshotEncryptionSetting> encryptionSettings) {
            this.encryptionSettings = Objects.requireNonNull(encryptionSettings);
            return this;
        }
        public Builder encryptionSettings(GetSnapshotEncryptionSetting... encryptionSettings) {
            return encryptionSettings(List.of(encryptionSettings));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder osType(String osType) {
            this.osType = Objects.requireNonNull(osType);
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        @CustomType.Setter
        public Builder sourceResourceId(String sourceResourceId) {
            this.sourceResourceId = Objects.requireNonNull(sourceResourceId);
            return this;
        }
        @CustomType.Setter
        public Builder sourceUri(String sourceUri) {
            this.sourceUri = Objects.requireNonNull(sourceUri);
            return this;
        }
        @CustomType.Setter
        public Builder storageAccountId(String storageAccountId) {
            this.storageAccountId = Objects.requireNonNull(storageAccountId);
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        @CustomType.Setter
        public Builder trustedLaunchEnabled(Boolean trustedLaunchEnabled) {
            this.trustedLaunchEnabled = Objects.requireNonNull(trustedLaunchEnabled);
            return this;
        }
        public GetSnapshotResult build() {
            final var o = new GetSnapshotResult();
            o.creationOption = creationOption;
            o.diskSizeGb = diskSizeGb;
            o.encryptionSettings = encryptionSettings;
            o.id = id;
            o.name = name;
            o.osType = osType;
            o.resourceGroupName = resourceGroupName;
            o.sourceResourceId = sourceResourceId;
            o.sourceUri = sourceUri;
            o.storageAccountId = storageAccountId;
            o.timeCreated = timeCreated;
            o.trustedLaunchEnabled = trustedLaunchEnabled;
            return o;
        }
    }
}
