// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.compute.outputs;

import com.pulumi.azure.compute.outputs.GetSnapshotEncryptionSetting;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetSnapshotResult {
    private String creationOption;
    /**
     * @return The size of the Snapshotted Disk in GB.
     * 
     */
    private Integer diskSizeGb;
    private List<GetSnapshotEncryptionSetting> encryptionSettings;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String name;
    private String osType;
    private String resourceGroupName;
    /**
     * @return The reference to an existing snapshot.
     * 
     */
    private String sourceResourceId;
    /**
     * @return The URI to a Managed or Unmanaged Disk.
     * 
     */
    private String sourceUri;
    /**
     * @return The ID of an storage account.
     * 
     */
    private String storageAccountId;
    private String timeCreated;
    /**
     * @return Whether Trusted Launch is enabled for the Snapshot.
     * 
     */
    private Boolean trustedLaunchEnabled;

    private GetSnapshotResult() {}
    public String creationOption() {
        return this.creationOption;
    }
    /**
     * @return The size of the Snapshotted Disk in GB.
     * 
     */
    public Integer diskSizeGb() {
        return this.diskSizeGb;
    }
    public List<GetSnapshotEncryptionSetting> encryptionSettings() {
        return this.encryptionSettings;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String name() {
        return this.name;
    }
    public String osType() {
        return this.osType;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return The reference to an existing snapshot.
     * 
     */
    public String sourceResourceId() {
        return this.sourceResourceId;
    }
    /**
     * @return The URI to a Managed or Unmanaged Disk.
     * 
     */
    public String sourceUri() {
        return this.sourceUri;
    }
    /**
     * @return The ID of an storage account.
     * 
     */
    public String storageAccountId() {
        return this.storageAccountId;
    }
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return Whether Trusted Launch is enabled for the Snapshot.
     * 
     */
    public Boolean trustedLaunchEnabled() {
        return this.trustedLaunchEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSnapshotResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String creationOption;
        private Integer diskSizeGb;
        private List<GetSnapshotEncryptionSetting> encryptionSettings;
        private String id;
        private String name;
        private String osType;
        private String resourceGroupName;
        private String sourceResourceId;
        private String sourceUri;
        private String storageAccountId;
        private String timeCreated;
        private Boolean trustedLaunchEnabled;
        public Builder() {}
        public Builder(GetSnapshotResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.creationOption = defaults.creationOption;
    	      this.diskSizeGb = defaults.diskSizeGb;
    	      this.encryptionSettings = defaults.encryptionSettings;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.osType = defaults.osType;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.sourceResourceId = defaults.sourceResourceId;
    	      this.sourceUri = defaults.sourceUri;
    	      this.storageAccountId = defaults.storageAccountId;
    	      this.timeCreated = defaults.timeCreated;
    	      this.trustedLaunchEnabled = defaults.trustedLaunchEnabled;
        }

        @CustomType.Setter
        public Builder creationOption(String creationOption) {
            if (creationOption == null) {
              throw new MissingRequiredPropertyException("GetSnapshotResult", "creationOption");
            }
            this.creationOption = creationOption;
            return this;
        }
        @CustomType.Setter
        public Builder diskSizeGb(Integer diskSizeGb) {
            if (diskSizeGb == null) {
              throw new MissingRequiredPropertyException("GetSnapshotResult", "diskSizeGb");
            }
            this.diskSizeGb = diskSizeGb;
            return this;
        }
        @CustomType.Setter
        public Builder encryptionSettings(List<GetSnapshotEncryptionSetting> encryptionSettings) {
            if (encryptionSettings == null) {
              throw new MissingRequiredPropertyException("GetSnapshotResult", "encryptionSettings");
            }
            this.encryptionSettings = encryptionSettings;
            return this;
        }
        public Builder encryptionSettings(GetSnapshotEncryptionSetting... encryptionSettings) {
            return encryptionSettings(List.of(encryptionSettings));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSnapshotResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetSnapshotResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder osType(String osType) {
            if (osType == null) {
              throw new MissingRequiredPropertyException("GetSnapshotResult", "osType");
            }
            this.osType = osType;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            if (resourceGroupName == null) {
              throw new MissingRequiredPropertyException("GetSnapshotResult", "resourceGroupName");
            }
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder sourceResourceId(String sourceResourceId) {
            if (sourceResourceId == null) {
              throw new MissingRequiredPropertyException("GetSnapshotResult", "sourceResourceId");
            }
            this.sourceResourceId = sourceResourceId;
            return this;
        }
        @CustomType.Setter
        public Builder sourceUri(String sourceUri) {
            if (sourceUri == null) {
              throw new MissingRequiredPropertyException("GetSnapshotResult", "sourceUri");
            }
            this.sourceUri = sourceUri;
            return this;
        }
        @CustomType.Setter
        public Builder storageAccountId(String storageAccountId) {
            if (storageAccountId == null) {
              throw new MissingRequiredPropertyException("GetSnapshotResult", "storageAccountId");
            }
            this.storageAccountId = storageAccountId;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetSnapshotResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder trustedLaunchEnabled(Boolean trustedLaunchEnabled) {
            if (trustedLaunchEnabled == null) {
              throw new MissingRequiredPropertyException("GetSnapshotResult", "trustedLaunchEnabled");
            }
            this.trustedLaunchEnabled = trustedLaunchEnabled;
            return this;
        }
        public GetSnapshotResult build() {
            final var _resultValue = new GetSnapshotResult();
            _resultValue.creationOption = creationOption;
            _resultValue.diskSizeGb = diskSizeGb;
            _resultValue.encryptionSettings = encryptionSettings;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.osType = osType;
            _resultValue.resourceGroupName = resourceGroupName;
            _resultValue.sourceResourceId = sourceResourceId;
            _resultValue.sourceUri = sourceUri;
            _resultValue.storageAccountId = storageAccountId;
            _resultValue.timeCreated = timeCreated;
            _resultValue.trustedLaunchEnabled = trustedLaunchEnabled;
            return _resultValue;
        }
    }
}
