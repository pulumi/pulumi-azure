// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.expressroute;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.expressroute.inputs.GetCircuitPeeringArgs;
import com.pulumi.azure.expressroute.inputs.GetCircuitPeeringPlainArgs;
import com.pulumi.azure.expressroute.outputs.GetCircuitPeeringResult;
import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.deployment.InvokeOutputOptions;
import java.util.concurrent.CompletableFuture;

public final class ExpressrouteFunctions {
    /**
     * Use this data source to access information about an existing ExpressRoute Circuit Peering.
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azure.expressroute.ExpressrouteFunctions;
     * import com.pulumi.azure.expressroute.inputs.GetCircuitPeeringArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = ExpressrouteFunctions.getCircuitPeering(GetCircuitPeeringArgs.builder()
     *             .peeringType("example-peering")
     *             .expressRouteCircuitName("example-expressroute")
     *             .resourceGroupName("example-resources")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ## API Providers
     * 
     * &lt;!-- This section is generated, changes will be overwritten --&gt;
     * This data source uses the following Azure API Providers:
     * 
     * * `Microsoft.Network` - 2024-05-01
     * 
     */
    public static Output<GetCircuitPeeringResult> getCircuitPeering(GetCircuitPeeringArgs args) {
        return getCircuitPeering(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to access information about an existing ExpressRoute Circuit Peering.
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azure.expressroute.ExpressrouteFunctions;
     * import com.pulumi.azure.expressroute.inputs.GetCircuitPeeringArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = ExpressrouteFunctions.getCircuitPeering(GetCircuitPeeringArgs.builder()
     *             .peeringType("example-peering")
     *             .expressRouteCircuitName("example-expressroute")
     *             .resourceGroupName("example-resources")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ## API Providers
     * 
     * &lt;!-- This section is generated, changes will be overwritten --&gt;
     * This data source uses the following Azure API Providers:
     * 
     * * `Microsoft.Network` - 2024-05-01
     * 
     */
    public static CompletableFuture<GetCircuitPeeringResult> getCircuitPeeringPlain(GetCircuitPeeringPlainArgs args) {
        return getCircuitPeeringPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to access information about an existing ExpressRoute Circuit Peering.
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azure.expressroute.ExpressrouteFunctions;
     * import com.pulumi.azure.expressroute.inputs.GetCircuitPeeringArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = ExpressrouteFunctions.getCircuitPeering(GetCircuitPeeringArgs.builder()
     *             .peeringType("example-peering")
     *             .expressRouteCircuitName("example-expressroute")
     *             .resourceGroupName("example-resources")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ## API Providers
     * 
     * &lt;!-- This section is generated, changes will be overwritten --&gt;
     * This data source uses the following Azure API Providers:
     * 
     * * `Microsoft.Network` - 2024-05-01
     * 
     */
    public static Output<GetCircuitPeeringResult> getCircuitPeering(GetCircuitPeeringArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("azure:expressroute/getCircuitPeering:getCircuitPeering", TypeShape.of(GetCircuitPeeringResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to access information about an existing ExpressRoute Circuit Peering.
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azure.expressroute.ExpressrouteFunctions;
     * import com.pulumi.azure.expressroute.inputs.GetCircuitPeeringArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = ExpressrouteFunctions.getCircuitPeering(GetCircuitPeeringArgs.builder()
     *             .peeringType("example-peering")
     *             .expressRouteCircuitName("example-expressroute")
     *             .resourceGroupName("example-resources")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ## API Providers
     * 
     * &lt;!-- This section is generated, changes will be overwritten --&gt;
     * This data source uses the following Azure API Providers:
     * 
     * * `Microsoft.Network` - 2024-05-01
     * 
     */
    public static Output<GetCircuitPeeringResult> getCircuitPeering(GetCircuitPeeringArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("azure:expressroute/getCircuitPeering:getCircuitPeering", TypeShape.of(GetCircuitPeeringResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to access information about an existing ExpressRoute Circuit Peering.
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azure.expressroute.ExpressrouteFunctions;
     * import com.pulumi.azure.expressroute.inputs.GetCircuitPeeringArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = ExpressrouteFunctions.getCircuitPeering(GetCircuitPeeringArgs.builder()
     *             .peeringType("example-peering")
     *             .expressRouteCircuitName("example-expressroute")
     *             .resourceGroupName("example-resources")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ## API Providers
     * 
     * &lt;!-- This section is generated, changes will be overwritten --&gt;
     * This data source uses the following Azure API Providers:
     * 
     * * `Microsoft.Network` - 2024-05-01
     * 
     */
    public static CompletableFuture<GetCircuitPeeringResult> getCircuitPeeringPlain(GetCircuitPeeringPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("azure:expressroute/getCircuitPeering:getCircuitPeering", TypeShape.of(GetCircuitPeeringResult.class), args, Utilities.withVersion(options));
    }
}
