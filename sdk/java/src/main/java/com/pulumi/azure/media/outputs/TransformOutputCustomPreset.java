// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.media.outputs;

import com.pulumi.azure.media.outputs.TransformOutputCustomPresetCodec;
import com.pulumi.azure.media.outputs.TransformOutputCustomPresetFilter;
import com.pulumi.azure.media.outputs.TransformOutputCustomPresetFormat;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class TransformOutputCustomPreset {
    /**
     * @return One or more `codec` blocks as defined above.
     * 
     */
    private List<TransformOutputCustomPresetCodec> codecs;
    /**
     * @return Dictionary containing key value pairs for parameters not exposed in the preset itself.
     * 
     */
    private @Nullable Map<String,String> experimentalOptions;
    /**
     * @return A `filter` block as defined below.
     * 
     */
    private @Nullable TransformOutputCustomPresetFilter filter;
    /**
     * @return One or more `format` blocks as defined below.
     * 
     */
    private List<TransformOutputCustomPresetFormat> formats;

    private TransformOutputCustomPreset() {}
    /**
     * @return One or more `codec` blocks as defined above.
     * 
     */
    public List<TransformOutputCustomPresetCodec> codecs() {
        return this.codecs;
    }
    /**
     * @return Dictionary containing key value pairs for parameters not exposed in the preset itself.
     * 
     */
    public Map<String,String> experimentalOptions() {
        return this.experimentalOptions == null ? Map.of() : this.experimentalOptions;
    }
    /**
     * @return A `filter` block as defined below.
     * 
     */
    public Optional<TransformOutputCustomPresetFilter> filter() {
        return Optional.ofNullable(this.filter);
    }
    /**
     * @return One or more `format` blocks as defined below.
     * 
     */
    public List<TransformOutputCustomPresetFormat> formats() {
        return this.formats;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TransformOutputCustomPreset defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<TransformOutputCustomPresetCodec> codecs;
        private @Nullable Map<String,String> experimentalOptions;
        private @Nullable TransformOutputCustomPresetFilter filter;
        private List<TransformOutputCustomPresetFormat> formats;
        public Builder() {}
        public Builder(TransformOutputCustomPreset defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.codecs = defaults.codecs;
    	      this.experimentalOptions = defaults.experimentalOptions;
    	      this.filter = defaults.filter;
    	      this.formats = defaults.formats;
        }

        @CustomType.Setter
        public Builder codecs(List<TransformOutputCustomPresetCodec> codecs) {
            this.codecs = Objects.requireNonNull(codecs);
            return this;
        }
        public Builder codecs(TransformOutputCustomPresetCodec... codecs) {
            return codecs(List.of(codecs));
        }
        @CustomType.Setter
        public Builder experimentalOptions(@Nullable Map<String,String> experimentalOptions) {
            this.experimentalOptions = experimentalOptions;
            return this;
        }
        @CustomType.Setter
        public Builder filter(@Nullable TransformOutputCustomPresetFilter filter) {
            this.filter = filter;
            return this;
        }
        @CustomType.Setter
        public Builder formats(List<TransformOutputCustomPresetFormat> formats) {
            this.formats = Objects.requireNonNull(formats);
            return this;
        }
        public Builder formats(TransformOutputCustomPresetFormat... formats) {
            return formats(List.of(formats));
        }
        public TransformOutputCustomPreset build() {
            final var o = new TransformOutputCustomPreset();
            o.codecs = codecs;
            o.experimentalOptions = experimentalOptions;
            o.filter = filter;
            o.formats = formats;
            return o;
        }
    }
}
