// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.systemcenter.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VirtualMachineManagerVirtualMachineInstanceHardwareArgs extends com.pulumi.resources.ResourceArgs {

    public static final VirtualMachineManagerVirtualMachineInstanceHardwareArgs Empty = new VirtualMachineManagerVirtualMachineInstanceHardwareArgs();

    /**
     * The number of vCPUs for the Virtual Machine. Possible values are between `1` and `64`.
     * 
     */
    @Import(name="cpuCount")
    private @Nullable Output<Integer> cpuCount;

    /**
     * @return The number of vCPUs for the Virtual Machine. Possible values are between `1` and `64`.
     * 
     */
    public Optional<Output<Integer>> cpuCount() {
        return Optional.ofNullable(this.cpuCount);
    }

    /**
     * The max dynamic memory for the Virtual Machine. Possible values are between `32` and `1048576`.
     * 
     */
    @Import(name="dynamicMemoryMaxInMb")
    private @Nullable Output<Integer> dynamicMemoryMaxInMb;

    /**
     * @return The max dynamic memory for the Virtual Machine. Possible values are between `32` and `1048576`.
     * 
     */
    public Optional<Output<Integer>> dynamicMemoryMaxInMb() {
        return Optional.ofNullable(this.dynamicMemoryMaxInMb);
    }

    /**
     * The min dynamic memory for the Virtual Machine. Possible values are between `32` and `1048576`.
     * 
     */
    @Import(name="dynamicMemoryMinInMb")
    private @Nullable Output<Integer> dynamicMemoryMinInMb;

    /**
     * @return The min dynamic memory for the Virtual Machine. Possible values are between `32` and `1048576`.
     * 
     */
    public Optional<Output<Integer>> dynamicMemoryMinInMb() {
        return Optional.ofNullable(this.dynamicMemoryMinInMb);
    }

    /**
     * Whether processor compatibility mode for live migration of Virtual Machines is enabled.
     * 
     */
    @Import(name="limitCpuForMigrationEnabled")
    private @Nullable Output<Boolean> limitCpuForMigrationEnabled;

    /**
     * @return Whether processor compatibility mode for live migration of Virtual Machines is enabled.
     * 
     */
    public Optional<Output<Boolean>> limitCpuForMigrationEnabled() {
        return Optional.ofNullable(this.limitCpuForMigrationEnabled);
    }

    /**
     * The size of a Virtual Machine&#39;s memory. Possible values are between `32` and `1048576`.
     * 
     */
    @Import(name="memoryInMb")
    private @Nullable Output<Integer> memoryInMb;

    /**
     * @return The size of a Virtual Machine&#39;s memory. Possible values are between `32` and `1048576`.
     * 
     */
    public Optional<Output<Integer>> memoryInMb() {
        return Optional.ofNullable(this.memoryInMb);
    }

    private VirtualMachineManagerVirtualMachineInstanceHardwareArgs() {}

    private VirtualMachineManagerVirtualMachineInstanceHardwareArgs(VirtualMachineManagerVirtualMachineInstanceHardwareArgs $) {
        this.cpuCount = $.cpuCount;
        this.dynamicMemoryMaxInMb = $.dynamicMemoryMaxInMb;
        this.dynamicMemoryMinInMb = $.dynamicMemoryMinInMb;
        this.limitCpuForMigrationEnabled = $.limitCpuForMigrationEnabled;
        this.memoryInMb = $.memoryInMb;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualMachineManagerVirtualMachineInstanceHardwareArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualMachineManagerVirtualMachineInstanceHardwareArgs $;

        public Builder() {
            $ = new VirtualMachineManagerVirtualMachineInstanceHardwareArgs();
        }

        public Builder(VirtualMachineManagerVirtualMachineInstanceHardwareArgs defaults) {
            $ = new VirtualMachineManagerVirtualMachineInstanceHardwareArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cpuCount The number of vCPUs for the Virtual Machine. Possible values are between `1` and `64`.
         * 
         * @return builder
         * 
         */
        public Builder cpuCount(@Nullable Output<Integer> cpuCount) {
            $.cpuCount = cpuCount;
            return this;
        }

        /**
         * @param cpuCount The number of vCPUs for the Virtual Machine. Possible values are between `1` and `64`.
         * 
         * @return builder
         * 
         */
        public Builder cpuCount(Integer cpuCount) {
            return cpuCount(Output.of(cpuCount));
        }

        /**
         * @param dynamicMemoryMaxInMb The max dynamic memory for the Virtual Machine. Possible values are between `32` and `1048576`.
         * 
         * @return builder
         * 
         */
        public Builder dynamicMemoryMaxInMb(@Nullable Output<Integer> dynamicMemoryMaxInMb) {
            $.dynamicMemoryMaxInMb = dynamicMemoryMaxInMb;
            return this;
        }

        /**
         * @param dynamicMemoryMaxInMb The max dynamic memory for the Virtual Machine. Possible values are between `32` and `1048576`.
         * 
         * @return builder
         * 
         */
        public Builder dynamicMemoryMaxInMb(Integer dynamicMemoryMaxInMb) {
            return dynamicMemoryMaxInMb(Output.of(dynamicMemoryMaxInMb));
        }

        /**
         * @param dynamicMemoryMinInMb The min dynamic memory for the Virtual Machine. Possible values are between `32` and `1048576`.
         * 
         * @return builder
         * 
         */
        public Builder dynamicMemoryMinInMb(@Nullable Output<Integer> dynamicMemoryMinInMb) {
            $.dynamicMemoryMinInMb = dynamicMemoryMinInMb;
            return this;
        }

        /**
         * @param dynamicMemoryMinInMb The min dynamic memory for the Virtual Machine. Possible values are between `32` and `1048576`.
         * 
         * @return builder
         * 
         */
        public Builder dynamicMemoryMinInMb(Integer dynamicMemoryMinInMb) {
            return dynamicMemoryMinInMb(Output.of(dynamicMemoryMinInMb));
        }

        /**
         * @param limitCpuForMigrationEnabled Whether processor compatibility mode for live migration of Virtual Machines is enabled.
         * 
         * @return builder
         * 
         */
        public Builder limitCpuForMigrationEnabled(@Nullable Output<Boolean> limitCpuForMigrationEnabled) {
            $.limitCpuForMigrationEnabled = limitCpuForMigrationEnabled;
            return this;
        }

        /**
         * @param limitCpuForMigrationEnabled Whether processor compatibility mode for live migration of Virtual Machines is enabled.
         * 
         * @return builder
         * 
         */
        public Builder limitCpuForMigrationEnabled(Boolean limitCpuForMigrationEnabled) {
            return limitCpuForMigrationEnabled(Output.of(limitCpuForMigrationEnabled));
        }

        /**
         * @param memoryInMb The size of a Virtual Machine&#39;s memory. Possible values are between `32` and `1048576`.
         * 
         * @return builder
         * 
         */
        public Builder memoryInMb(@Nullable Output<Integer> memoryInMb) {
            $.memoryInMb = memoryInMb;
            return this;
        }

        /**
         * @param memoryInMb The size of a Virtual Machine&#39;s memory. Possible values are between `32` and `1048576`.
         * 
         * @return builder
         * 
         */
        public Builder memoryInMb(Integer memoryInMb) {
            return memoryInMb(Output.of(memoryInMb));
        }

        public VirtualMachineManagerVirtualMachineInstanceHardwareArgs build() {
            return $;
        }
    }

}
