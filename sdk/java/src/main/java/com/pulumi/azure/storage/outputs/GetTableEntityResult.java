// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.storage.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetTableEntityResult {
    /**
     * @return A map of key/value pairs that describe the entity to be stored in the storage table.
     * 
     */
    private Map<String,String> entity;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String partitionKey;
    private String rowKey;
    private String storageAccountName;
    private String tableName;

    private GetTableEntityResult() {}
    /**
     * @return A map of key/value pairs that describe the entity to be stored in the storage table.
     * 
     */
    public Map<String,String> entity() {
        return this.entity;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String partitionKey() {
        return this.partitionKey;
    }
    public String rowKey() {
        return this.rowKey;
    }
    public String storageAccountName() {
        return this.storageAccountName;
    }
    public String tableName() {
        return this.tableName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTableEntityResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,String> entity;
        private String id;
        private String partitionKey;
        private String rowKey;
        private String storageAccountName;
        private String tableName;
        public Builder() {}
        public Builder(GetTableEntityResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.entity = defaults.entity;
    	      this.id = defaults.id;
    	      this.partitionKey = defaults.partitionKey;
    	      this.rowKey = defaults.rowKey;
    	      this.storageAccountName = defaults.storageAccountName;
    	      this.tableName = defaults.tableName;
        }

        @CustomType.Setter
        public Builder entity(Map<String,String> entity) {
            this.entity = Objects.requireNonNull(entity);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder partitionKey(String partitionKey) {
            this.partitionKey = Objects.requireNonNull(partitionKey);
            return this;
        }
        @CustomType.Setter
        public Builder rowKey(String rowKey) {
            this.rowKey = Objects.requireNonNull(rowKey);
            return this;
        }
        @CustomType.Setter
        public Builder storageAccountName(String storageAccountName) {
            this.storageAccountName = Objects.requireNonNull(storageAccountName);
            return this;
        }
        @CustomType.Setter
        public Builder tableName(String tableName) {
            this.tableName = Objects.requireNonNull(tableName);
            return this;
        }
        public GetTableEntityResult build() {
            final var o = new GetTableEntityResult();
            o.entity = entity;
            o.id = id;
            o.partitionKey = partitionKey;
            o.rowKey = rowKey;
            o.storageAccountName = storageAccountName;
            o.tableName = tableName;
            return o;
        }
    }
}
