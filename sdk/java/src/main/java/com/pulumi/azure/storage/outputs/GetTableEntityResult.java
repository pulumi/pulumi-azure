// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.storage.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetTableEntityResult {
    /**
     * @return A map of key/value pairs that describe the entity to be stored in the storage table.
     * 
     */
    private Map<String,String> entity;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String partitionKey;
    private String rowKey;
    private String storageAccountName;
    private String tableName;

    private GetTableEntityResult() {}
    /**
     * @return A map of key/value pairs that describe the entity to be stored in the storage table.
     * 
     */
    public Map<String,String> entity() {
        return this.entity;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String partitionKey() {
        return this.partitionKey;
    }
    public String rowKey() {
        return this.rowKey;
    }
    public String storageAccountName() {
        return this.storageAccountName;
    }
    public String tableName() {
        return this.tableName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTableEntityResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,String> entity;
        private String id;
        private String partitionKey;
        private String rowKey;
        private String storageAccountName;
        private String tableName;
        public Builder() {}
        public Builder(GetTableEntityResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.entity = defaults.entity;
    	      this.id = defaults.id;
    	      this.partitionKey = defaults.partitionKey;
    	      this.rowKey = defaults.rowKey;
    	      this.storageAccountName = defaults.storageAccountName;
    	      this.tableName = defaults.tableName;
        }

        @CustomType.Setter
        public Builder entity(Map<String,String> entity) {
            if (entity == null) {
              throw new MissingRequiredPropertyException("GetTableEntityResult", "entity");
            }
            this.entity = entity;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetTableEntityResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder partitionKey(String partitionKey) {
            if (partitionKey == null) {
              throw new MissingRequiredPropertyException("GetTableEntityResult", "partitionKey");
            }
            this.partitionKey = partitionKey;
            return this;
        }
        @CustomType.Setter
        public Builder rowKey(String rowKey) {
            if (rowKey == null) {
              throw new MissingRequiredPropertyException("GetTableEntityResult", "rowKey");
            }
            this.rowKey = rowKey;
            return this;
        }
        @CustomType.Setter
        public Builder storageAccountName(String storageAccountName) {
            if (storageAccountName == null) {
              throw new MissingRequiredPropertyException("GetTableEntityResult", "storageAccountName");
            }
            this.storageAccountName = storageAccountName;
            return this;
        }
        @CustomType.Setter
        public Builder tableName(String tableName) {
            if (tableName == null) {
              throw new MissingRequiredPropertyException("GetTableEntityResult", "tableName");
            }
            this.tableName = tableName;
            return this;
        }
        public GetTableEntityResult build() {
            final var _resultValue = new GetTableEntityResult();
            _resultValue.entity = entity;
            _resultValue.id = id;
            _resultValue.partitionKey = partitionKey;
            _resultValue.rowKey = rowKey;
            _resultValue.storageAccountName = storageAccountName;
            _resultValue.tableName = tableName;
            return _resultValue;
        }
    }
}
