// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.dashboard.inputs;

import com.pulumi.azure.dashboard.inputs.GetGrafanaIdentity;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetGrafanaPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetGrafanaPlainArgs Empty = new GetGrafanaPlainArgs();

    /**
     * The managed identity of the grafana resource.
     * 
     */
    @Import(name="identity")
    private @Nullable GetGrafanaIdentity identity;

    /**
     * @return The managed identity of the grafana resource.
     * 
     */
    public Optional<GetGrafanaIdentity> identity() {
        return Optional.ofNullable(this.identity);
    }

    /**
     * Name of the grafana dashboard.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return Name of the grafana dashboard.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * Name of the resource group where resource belongs to.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private String resourceGroupName;

    /**
     * @return Name of the resource group where resource belongs to.
     * 
     */
    public String resourceGroupName() {
        return this.resourceGroupName;
    }

    private GetGrafanaPlainArgs() {}

    private GetGrafanaPlainArgs(GetGrafanaPlainArgs $) {
        this.identity = $.identity;
        this.name = $.name;
        this.resourceGroupName = $.resourceGroupName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetGrafanaPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetGrafanaPlainArgs $;

        public Builder() {
            $ = new GetGrafanaPlainArgs();
        }

        public Builder(GetGrafanaPlainArgs defaults) {
            $ = new GetGrafanaPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param identity The managed identity of the grafana resource.
         * 
         * @return builder
         * 
         */
        public Builder identity(@Nullable GetGrafanaIdentity identity) {
            $.identity = identity;
            return this;
        }

        /**
         * @param name Name of the grafana dashboard.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param resourceGroupName Name of the resource group where resource belongs to.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public GetGrafanaPlainArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetGrafanaPlainArgs", "name");
            }
            if ($.resourceGroupName == null) {
                throw new MissingRequiredPropertyException("GetGrafanaPlainArgs", "resourceGroupName");
            }
            return $;
        }
    }

}
