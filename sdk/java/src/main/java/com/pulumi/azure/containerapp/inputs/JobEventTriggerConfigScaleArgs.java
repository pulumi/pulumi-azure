// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerapp.inputs;

import com.pulumi.azure.containerapp.inputs.JobEventTriggerConfigScaleRuleArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class JobEventTriggerConfigScaleArgs extends com.pulumi.resources.ResourceArgs {

    public static final JobEventTriggerConfigScaleArgs Empty = new JobEventTriggerConfigScaleArgs();

    /**
     * Maximum number of job executions that are created for a trigger.
     * 
     */
    @Import(name="maxExecutions")
    private @Nullable Output<Integer> maxExecutions;

    /**
     * @return Maximum number of job executions that are created for a trigger.
     * 
     */
    public Optional<Output<Integer>> maxExecutions() {
        return Optional.ofNullable(this.maxExecutions);
    }

    /**
     * Minimum number of job executions that are created for a trigger.
     * 
     */
    @Import(name="minExecutions")
    private @Nullable Output<Integer> minExecutions;

    /**
     * @return Minimum number of job executions that are created for a trigger.
     * 
     */
    public Optional<Output<Integer>> minExecutions() {
        return Optional.ofNullable(this.minExecutions);
    }

    /**
     * Interval to check each event source in seconds.
     * 
     */
    @Import(name="pollingIntervalInSeconds")
    private @Nullable Output<Integer> pollingIntervalInSeconds;

    /**
     * @return Interval to check each event source in seconds.
     * 
     */
    public Optional<Output<Integer>> pollingIntervalInSeconds() {
        return Optional.ofNullable(this.pollingIntervalInSeconds);
    }

    /**
     * A `rules` block as defined below.
     * 
     */
    @Import(name="rules")
    private @Nullable Output<List<JobEventTriggerConfigScaleRuleArgs>> rules;

    /**
     * @return A `rules` block as defined below.
     * 
     */
    public Optional<Output<List<JobEventTriggerConfigScaleRuleArgs>>> rules() {
        return Optional.ofNullable(this.rules);
    }

    private JobEventTriggerConfigScaleArgs() {}

    private JobEventTriggerConfigScaleArgs(JobEventTriggerConfigScaleArgs $) {
        this.maxExecutions = $.maxExecutions;
        this.minExecutions = $.minExecutions;
        this.pollingIntervalInSeconds = $.pollingIntervalInSeconds;
        this.rules = $.rules;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JobEventTriggerConfigScaleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JobEventTriggerConfigScaleArgs $;

        public Builder() {
            $ = new JobEventTriggerConfigScaleArgs();
        }

        public Builder(JobEventTriggerConfigScaleArgs defaults) {
            $ = new JobEventTriggerConfigScaleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param maxExecutions Maximum number of job executions that are created for a trigger.
         * 
         * @return builder
         * 
         */
        public Builder maxExecutions(@Nullable Output<Integer> maxExecutions) {
            $.maxExecutions = maxExecutions;
            return this;
        }

        /**
         * @param maxExecutions Maximum number of job executions that are created for a trigger.
         * 
         * @return builder
         * 
         */
        public Builder maxExecutions(Integer maxExecutions) {
            return maxExecutions(Output.of(maxExecutions));
        }

        /**
         * @param minExecutions Minimum number of job executions that are created for a trigger.
         * 
         * @return builder
         * 
         */
        public Builder minExecutions(@Nullable Output<Integer> minExecutions) {
            $.minExecutions = minExecutions;
            return this;
        }

        /**
         * @param minExecutions Minimum number of job executions that are created for a trigger.
         * 
         * @return builder
         * 
         */
        public Builder minExecutions(Integer minExecutions) {
            return minExecutions(Output.of(minExecutions));
        }

        /**
         * @param pollingIntervalInSeconds Interval to check each event source in seconds.
         * 
         * @return builder
         * 
         */
        public Builder pollingIntervalInSeconds(@Nullable Output<Integer> pollingIntervalInSeconds) {
            $.pollingIntervalInSeconds = pollingIntervalInSeconds;
            return this;
        }

        /**
         * @param pollingIntervalInSeconds Interval to check each event source in seconds.
         * 
         * @return builder
         * 
         */
        public Builder pollingIntervalInSeconds(Integer pollingIntervalInSeconds) {
            return pollingIntervalInSeconds(Output.of(pollingIntervalInSeconds));
        }

        /**
         * @param rules A `rules` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder rules(@Nullable Output<List<JobEventTriggerConfigScaleRuleArgs>> rules) {
            $.rules = rules;
            return this;
        }

        /**
         * @param rules A `rules` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder rules(List<JobEventTriggerConfigScaleRuleArgs> rules) {
            return rules(Output.of(rules));
        }

        /**
         * @param rules A `rules` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder rules(JobEventTriggerConfigScaleRuleArgs... rules) {
            return rules(List.of(rules));
        }

        public JobEventTriggerConfigScaleArgs build() {
            return $;
        }
    }

}
