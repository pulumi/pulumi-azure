// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.compute.outputs;

import com.pulumi.azure.compute.outputs.GetImagesImage;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetImagesResult {
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return One or more `images` blocks as defined below:
     * 
     */
    private List<GetImagesImage> images;
    private String resourceGroupName;
    private @Nullable Map<String,String> tagsFilter;

    private GetImagesResult() {}
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return One or more `images` blocks as defined below:
     * 
     */
    public List<GetImagesImage> images() {
        return this.images;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    public Map<String,String> tagsFilter() {
        return this.tagsFilter == null ? Map.of() : this.tagsFilter;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetImagesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String id;
        private List<GetImagesImage> images;
        private String resourceGroupName;
        private @Nullable Map<String,String> tagsFilter;
        public Builder() {}
        public Builder(GetImagesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.images = defaults.images;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.tagsFilter = defaults.tagsFilter;
        }

        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetImagesResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder images(List<GetImagesImage> images) {
            if (images == null) {
              throw new MissingRequiredPropertyException("GetImagesResult", "images");
            }
            this.images = images;
            return this;
        }
        public Builder images(GetImagesImage... images) {
            return images(List.of(images));
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            if (resourceGroupName == null) {
              throw new MissingRequiredPropertyException("GetImagesResult", "resourceGroupName");
            }
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder tagsFilter(@Nullable Map<String,String> tagsFilter) {

            this.tagsFilter = tagsFilter;
            return this;
        }
        public GetImagesResult build() {
            final var _resultValue = new GetImagesResult();
            _resultValue.id = id;
            _resultValue.images = images;
            _resultValue.resourceGroupName = resourceGroupName;
            _resultValue.tagsFilter = tagsFilter;
            return _resultValue;
        }
    }
}
