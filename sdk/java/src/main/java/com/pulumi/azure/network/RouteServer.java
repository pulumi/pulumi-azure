// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.network.RouteServerArgs;
import com.pulumi.azure.network.inputs.RouteServerState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages an Azure Route Server
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.network.VirtualNetwork;
 * import com.pulumi.azure.network.VirtualNetworkArgs;
 * import com.pulumi.azure.network.Subnet;
 * import com.pulumi.azure.network.SubnetArgs;
 * import com.pulumi.azure.network.PublicIp;
 * import com.pulumi.azure.network.PublicIpArgs;
 * import com.pulumi.azure.network.RouteServer;
 * import com.pulumi.azure.network.RouteServerArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new ResourceGroup("example", ResourceGroupArgs.builder()        
 *             .name("example-resources")
 *             .location("West Europe")
 *             .build());
 * 
 *         var exampleVirtualNetwork = new VirtualNetwork("exampleVirtualNetwork", VirtualNetworkArgs.builder()        
 *             .name("example-vn")
 *             .addressSpaces("10.0.0.0/16")
 *             .resourceGroupName(example.name())
 *             .location(example.location())
 *             .tags(Map.of("environment", "Production"))
 *             .build());
 * 
 *         var exampleSubnet = new Subnet("exampleSubnet", SubnetArgs.builder()        
 *             .name("RouteServerSubnet")
 *             .virtualNetworkName(exampleVirtualNetwork.name())
 *             .resourceGroupName(example.name())
 *             .addressPrefixes("10.0.1.0/24")
 *             .build());
 * 
 *         var examplePublicIp = new PublicIp("examplePublicIp", PublicIpArgs.builder()        
 *             .name("example-pip")
 *             .resourceGroupName(example.name())
 *             .location(example.location())
 *             .allocationMethod("Static")
 *             .sku("Standard")
 *             .build());
 * 
 *         var exampleRouteServer = new RouteServer("exampleRouteServer", RouteServerArgs.builder()        
 *             .name("example-routerserver")
 *             .resourceGroupName(example.name())
 *             .location(example.location())
 *             .sku("Standard")
 *             .publicIpAddressId(examplePublicIp.id())
 *             .subnetId(exampleSubnet.id())
 *             .branchToBranchTrafficEnabled(true)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Route Server can be imported using the `resource id`, e.g.
 * 
 * ```sh
 * $ pulumi import azure:network/routeServer:RouteServer example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Network/virtualHubs/routeServer1
 * ```
 * 
 */
@ResourceType(type="azure:network/routeServer:RouteServer")
public class RouteServer extends com.pulumi.resources.CustomResource {
    /**
     * Whether to enable route exchange between Azure Route Server and the gateway(s)
     * 
     */
    @Export(name="branchToBranchTrafficEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> branchToBranchTrafficEnabled;

    /**
     * @return Whether to enable route exchange between Azure Route Server and the gateway(s)
     * 
     */
    public Output<Optional<Boolean>> branchToBranchTrafficEnabled() {
        return Codegen.optional(this.branchToBranchTrafficEnabled);
    }
    /**
     * Specifies the supported Azure location where the Route Server should exist. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return Specifies the supported Azure location where the Route Server should exist. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * The name of the Route Server. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the Route Server. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the Public IP Address. This option is required since September 1st 2021. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="publicIpAddressId", refs={String.class}, tree="[0]")
    private Output<String> publicIpAddressId;

    /**
     * @return The ID of the Public IP Address. This option is required since September 1st 2021. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> publicIpAddressId() {
        return this.publicIpAddressId;
    }
    /**
     * Specifies the name of the Resource Group where the Route Server should exist. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="resourceGroupName", refs={String.class}, tree="[0]")
    private Output<String> resourceGroupName;

    /**
     * @return Specifies the name of the Resource Group where the Route Server should exist. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }
    @Export(name="routingState", refs={String.class}, tree="[0]")
    private Output<String> routingState;

    public Output<String> routingState() {
        return this.routingState;
    }
    /**
     * The SKU of the Route Server. The only possible value is `Standard`. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="sku", refs={String.class}, tree="[0]")
    private Output<String> sku;

    /**
     * @return The SKU of the Route Server. The only possible value is `Standard`. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> sku() {
        return this.sku;
    }
    /**
     * The ID of the Subnet that the Route Server will reside. Changing this forces a new resource to be created.
     * 
     * &gt; **NOTE:** Azure Route Server requires a dedicated subnet named RouteServerSubnet. The subnet size has to be at least /27 or short prefix (such as /26 or /25) and cannot be attached to any security group, otherwise, you&#39;ll receive an error message when deploying the Route Server
     * 
     */
    @Export(name="subnetId", refs={String.class}, tree="[0]")
    private Output<String> subnetId;

    /**
     * @return The ID of the Subnet that the Route Server will reside. Changing this forces a new resource to be created.
     * 
     * &gt; **NOTE:** Azure Route Server requires a dedicated subnet named RouteServerSubnet. The subnet size has to be at least /27 or short prefix (such as /26 or /25) and cannot be attached to any security group, otherwise, you&#39;ll receive an error message when deploying the Route Server
     * 
     */
    public Output<String> subnetId() {
        return this.subnetId;
    }
    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Export(name="tags", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> tags() {
        return Codegen.optional(this.tags);
    }
    @Export(name="virtualRouterAsn", refs={Integer.class}, tree="[0]")
    private Output<Integer> virtualRouterAsn;

    public Output<Integer> virtualRouterAsn() {
        return this.virtualRouterAsn;
    }
    @Export(name="virtualRouterIps", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> virtualRouterIps;

    public Output<List<String>> virtualRouterIps() {
        return this.virtualRouterIps;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public RouteServer(String name) {
        this(name, RouteServerArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public RouteServer(String name, RouteServerArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public RouteServer(String name, RouteServerArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:network/routeServer:RouteServer", name, args == null ? RouteServerArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private RouteServer(String name, Output<String> id, @Nullable RouteServerState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:network/routeServer:RouteServer", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static RouteServer get(String name, Output<String> id, @Nullable RouteServerState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new RouteServer(name, id, state, options);
    }
}
