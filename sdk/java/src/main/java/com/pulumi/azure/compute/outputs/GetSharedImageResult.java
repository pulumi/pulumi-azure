// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.compute.outputs;

import com.pulumi.azure.compute.outputs.GetSharedImageIdentifier;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetSharedImageResult {
    /**
     * @return The description of this Shared Image.
     * 
     */
    private final String description;
    /**
     * @return The End User Licence Agreement for the Shared Image.
     * 
     */
    private final String eula;
    private final String galleryName;
    /**
     * @return The generation of HyperV that the Virtual Machine used to create the Shared Image is based on.
     * 
     */
    private final String hyperVGeneration;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * @return An `identifier` block as defined below.
     * 
     */
    private final List<GetSharedImageIdentifier> identifiers;
    /**
     * @return The supported Azure location where the Shared Image Gallery exists.
     * 
     */
    private final String location;
    private final String name;
    /**
     * @return The type of Operating System present in this Shared Image.
     * 
     */
    private final String osType;
    /**
     * @return The URI containing the Privacy Statement for this Shared Image.
     * 
     */
    private final String privacyStatementUri;
    /**
     * @return The URI containing the Release Notes for this Shared Image.
     * 
     */
    private final String releaseNoteUri;
    private final String resourceGroupName;
    /**
     * @return Specifies that the Operating System used inside this Image has not been Generalized (for example, `sysprep` on Windows has not been run).
     * 
     */
    private final Boolean specialized;
    /**
     * @return A mapping of tags assigned to the Shared Image.
     * 
     */
    private final Map<String,String> tags;

    @CustomType.Constructor
    private GetSharedImageResult(
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("eula") String eula,
        @CustomType.Parameter("galleryName") String galleryName,
        @CustomType.Parameter("hyperVGeneration") String hyperVGeneration,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("identifiers") List<GetSharedImageIdentifier> identifiers,
        @CustomType.Parameter("location") String location,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("osType") String osType,
        @CustomType.Parameter("privacyStatementUri") String privacyStatementUri,
        @CustomType.Parameter("releaseNoteUri") String releaseNoteUri,
        @CustomType.Parameter("resourceGroupName") String resourceGroupName,
        @CustomType.Parameter("specialized") Boolean specialized,
        @CustomType.Parameter("tags") Map<String,String> tags) {
        this.description = description;
        this.eula = eula;
        this.galleryName = galleryName;
        this.hyperVGeneration = hyperVGeneration;
        this.id = id;
        this.identifiers = identifiers;
        this.location = location;
        this.name = name;
        this.osType = osType;
        this.privacyStatementUri = privacyStatementUri;
        this.releaseNoteUri = releaseNoteUri;
        this.resourceGroupName = resourceGroupName;
        this.specialized = specialized;
        this.tags = tags;
    }

    /**
     * @return The description of this Shared Image.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The End User Licence Agreement for the Shared Image.
     * 
     */
    public String eula() {
        return this.eula;
    }
    public String galleryName() {
        return this.galleryName;
    }
    /**
     * @return The generation of HyperV that the Virtual Machine used to create the Shared Image is based on.
     * 
     */
    public String hyperVGeneration() {
        return this.hyperVGeneration;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return An `identifier` block as defined below.
     * 
     */
    public List<GetSharedImageIdentifier> identifiers() {
        return this.identifiers;
    }
    /**
     * @return The supported Azure location where the Shared Image Gallery exists.
     * 
     */
    public String location() {
        return this.location;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return The type of Operating System present in this Shared Image.
     * 
     */
    public String osType() {
        return this.osType;
    }
    /**
     * @return The URI containing the Privacy Statement for this Shared Image.
     * 
     */
    public String privacyStatementUri() {
        return this.privacyStatementUri;
    }
    /**
     * @return The URI containing the Release Notes for this Shared Image.
     * 
     */
    public String releaseNoteUri() {
        return this.releaseNoteUri;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return Specifies that the Operating System used inside this Image has not been Generalized (for example, `sysprep` on Windows has not been run).
     * 
     */
    public Boolean specialized() {
        return this.specialized;
    }
    /**
     * @return A mapping of tags assigned to the Shared Image.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSharedImageResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String description;
        private String eula;
        private String galleryName;
        private String hyperVGeneration;
        private String id;
        private List<GetSharedImageIdentifier> identifiers;
        private String location;
        private String name;
        private String osType;
        private String privacyStatementUri;
        private String releaseNoteUri;
        private String resourceGroupName;
        private Boolean specialized;
        private Map<String,String> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(GetSharedImageResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.eula = defaults.eula;
    	      this.galleryName = defaults.galleryName;
    	      this.hyperVGeneration = defaults.hyperVGeneration;
    	      this.id = defaults.id;
    	      this.identifiers = defaults.identifiers;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.osType = defaults.osType;
    	      this.privacyStatementUri = defaults.privacyStatementUri;
    	      this.releaseNoteUri = defaults.releaseNoteUri;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.specialized = defaults.specialized;
    	      this.tags = defaults.tags;
        }

        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder eula(String eula) {
            this.eula = Objects.requireNonNull(eula);
            return this;
        }
        public Builder galleryName(String galleryName) {
            this.galleryName = Objects.requireNonNull(galleryName);
            return this;
        }
        public Builder hyperVGeneration(String hyperVGeneration) {
            this.hyperVGeneration = Objects.requireNonNull(hyperVGeneration);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder identifiers(List<GetSharedImageIdentifier> identifiers) {
            this.identifiers = Objects.requireNonNull(identifiers);
            return this;
        }
        public Builder identifiers(GetSharedImageIdentifier... identifiers) {
            return identifiers(List.of(identifiers));
        }
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder osType(String osType) {
            this.osType = Objects.requireNonNull(osType);
            return this;
        }
        public Builder privacyStatementUri(String privacyStatementUri) {
            this.privacyStatementUri = Objects.requireNonNull(privacyStatementUri);
            return this;
        }
        public Builder releaseNoteUri(String releaseNoteUri) {
            this.releaseNoteUri = Objects.requireNonNull(releaseNoteUri);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder specialized(Boolean specialized) {
            this.specialized = Objects.requireNonNull(specialized);
            return this;
        }
        public Builder tags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }        public GetSharedImageResult build() {
            return new GetSharedImageResult(description, eula, galleryName, hyperVGeneration, id, identifiers, location, name, osType, privacyStatementUri, releaseNoteUri, resourceGroupName, specialized, tags);
        }
    }
}
