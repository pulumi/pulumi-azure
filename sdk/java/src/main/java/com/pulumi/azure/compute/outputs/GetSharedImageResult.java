// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.compute.outputs;

import com.pulumi.azure.compute.outputs.GetSharedImageIdentifier;
import com.pulumi.azure.compute.outputs.GetSharedImagePurchasePlan;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetSharedImageResult {
    private String architecture;
    /**
     * @return The description of this Shared Image.
     * 
     */
    private String description;
    /**
     * @return The End User Licence Agreement for the Shared Image.
     * 
     */
    private String eula;
    private String galleryName;
    /**
     * @return The generation of HyperV that the Virtual Machine used to create the Shared Image is based on.
     * 
     */
    private String hyperVGeneration;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return An `identifier` block as defined below.
     * 
     */
    private List<GetSharedImageIdentifier> identifiers;
    /**
     * @return The supported Azure location where the Shared Image Gallery exists.
     * 
     */
    private String location;
    /**
     * @return (Required) The Purchase Plan Name for this Shared Image.
     * 
     */
    private String name;
    /**
     * @return The type of Operating System present in this Shared Image.
     * 
     */
    private String osType;
    /**
     * @return The URI containing the Privacy Statement for this Shared Image.
     * 
     */
    private String privacyStatementUri;
    /**
     * @return (Optional) A `purchase_plan` block as defined below.
     * 
     */
    private List<GetSharedImagePurchasePlan> purchasePlans;
    /**
     * @return The URI containing the Release Notes for this Shared Image.
     * 
     */
    private String releaseNoteUri;
    private String resourceGroupName;
    /**
     * @return Specifies that the Operating System used inside this Image has not been Generalized (for example, `sysprep` on Windows has not been run).
     * 
     */
    private Boolean specialized;
    /**
     * @return A mapping of tags assigned to the Shared Image.
     * 
     */
    private Map<String,String> tags;

    private GetSharedImageResult() {}
    public String architecture() {
        return this.architecture;
    }
    /**
     * @return The description of this Shared Image.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The End User Licence Agreement for the Shared Image.
     * 
     */
    public String eula() {
        return this.eula;
    }
    public String galleryName() {
        return this.galleryName;
    }
    /**
     * @return The generation of HyperV that the Virtual Machine used to create the Shared Image is based on.
     * 
     */
    public String hyperVGeneration() {
        return this.hyperVGeneration;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return An `identifier` block as defined below.
     * 
     */
    public List<GetSharedImageIdentifier> identifiers() {
        return this.identifiers;
    }
    /**
     * @return The supported Azure location where the Shared Image Gallery exists.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return (Required) The Purchase Plan Name for this Shared Image.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The type of Operating System present in this Shared Image.
     * 
     */
    public String osType() {
        return this.osType;
    }
    /**
     * @return The URI containing the Privacy Statement for this Shared Image.
     * 
     */
    public String privacyStatementUri() {
        return this.privacyStatementUri;
    }
    /**
     * @return (Optional) A `purchase_plan` block as defined below.
     * 
     */
    public List<GetSharedImagePurchasePlan> purchasePlans() {
        return this.purchasePlans;
    }
    /**
     * @return The URI containing the Release Notes for this Shared Image.
     * 
     */
    public String releaseNoteUri() {
        return this.releaseNoteUri;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return Specifies that the Operating System used inside this Image has not been Generalized (for example, `sysprep` on Windows has not been run).
     * 
     */
    public Boolean specialized() {
        return this.specialized;
    }
    /**
     * @return A mapping of tags assigned to the Shared Image.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSharedImageResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String architecture;
        private String description;
        private String eula;
        private String galleryName;
        private String hyperVGeneration;
        private String id;
        private List<GetSharedImageIdentifier> identifiers;
        private String location;
        private String name;
        private String osType;
        private String privacyStatementUri;
        private List<GetSharedImagePurchasePlan> purchasePlans;
        private String releaseNoteUri;
        private String resourceGroupName;
        private Boolean specialized;
        private Map<String,String> tags;
        public Builder() {}
        public Builder(GetSharedImageResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.architecture = defaults.architecture;
    	      this.description = defaults.description;
    	      this.eula = defaults.eula;
    	      this.galleryName = defaults.galleryName;
    	      this.hyperVGeneration = defaults.hyperVGeneration;
    	      this.id = defaults.id;
    	      this.identifiers = defaults.identifiers;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.osType = defaults.osType;
    	      this.privacyStatementUri = defaults.privacyStatementUri;
    	      this.purchasePlans = defaults.purchasePlans;
    	      this.releaseNoteUri = defaults.releaseNoteUri;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.specialized = defaults.specialized;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder architecture(String architecture) {
            if (architecture == null) {
              throw new MissingRequiredPropertyException("GetSharedImageResult", "architecture");
            }
            this.architecture = architecture;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetSharedImageResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder eula(String eula) {
            if (eula == null) {
              throw new MissingRequiredPropertyException("GetSharedImageResult", "eula");
            }
            this.eula = eula;
            return this;
        }
        @CustomType.Setter
        public Builder galleryName(String galleryName) {
            if (galleryName == null) {
              throw new MissingRequiredPropertyException("GetSharedImageResult", "galleryName");
            }
            this.galleryName = galleryName;
            return this;
        }
        @CustomType.Setter
        public Builder hyperVGeneration(String hyperVGeneration) {
            if (hyperVGeneration == null) {
              throw new MissingRequiredPropertyException("GetSharedImageResult", "hyperVGeneration");
            }
            this.hyperVGeneration = hyperVGeneration;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSharedImageResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder identifiers(List<GetSharedImageIdentifier> identifiers) {
            if (identifiers == null) {
              throw new MissingRequiredPropertyException("GetSharedImageResult", "identifiers");
            }
            this.identifiers = identifiers;
            return this;
        }
        public Builder identifiers(GetSharedImageIdentifier... identifiers) {
            return identifiers(List.of(identifiers));
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetSharedImageResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetSharedImageResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder osType(String osType) {
            if (osType == null) {
              throw new MissingRequiredPropertyException("GetSharedImageResult", "osType");
            }
            this.osType = osType;
            return this;
        }
        @CustomType.Setter
        public Builder privacyStatementUri(String privacyStatementUri) {
            if (privacyStatementUri == null) {
              throw new MissingRequiredPropertyException("GetSharedImageResult", "privacyStatementUri");
            }
            this.privacyStatementUri = privacyStatementUri;
            return this;
        }
        @CustomType.Setter
        public Builder purchasePlans(List<GetSharedImagePurchasePlan> purchasePlans) {
            if (purchasePlans == null) {
              throw new MissingRequiredPropertyException("GetSharedImageResult", "purchasePlans");
            }
            this.purchasePlans = purchasePlans;
            return this;
        }
        public Builder purchasePlans(GetSharedImagePurchasePlan... purchasePlans) {
            return purchasePlans(List.of(purchasePlans));
        }
        @CustomType.Setter
        public Builder releaseNoteUri(String releaseNoteUri) {
            if (releaseNoteUri == null) {
              throw new MissingRequiredPropertyException("GetSharedImageResult", "releaseNoteUri");
            }
            this.releaseNoteUri = releaseNoteUri;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            if (resourceGroupName == null) {
              throw new MissingRequiredPropertyException("GetSharedImageResult", "resourceGroupName");
            }
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder specialized(Boolean specialized) {
            if (specialized == null) {
              throw new MissingRequiredPropertyException("GetSharedImageResult", "specialized");
            }
            this.specialized = specialized;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetSharedImageResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public GetSharedImageResult build() {
            final var _resultValue = new GetSharedImageResult();
            _resultValue.architecture = architecture;
            _resultValue.description = description;
            _resultValue.eula = eula;
            _resultValue.galleryName = galleryName;
            _resultValue.hyperVGeneration = hyperVGeneration;
            _resultValue.id = id;
            _resultValue.identifiers = identifiers;
            _resultValue.location = location;
            _resultValue.name = name;
            _resultValue.osType = osType;
            _resultValue.privacyStatementUri = privacyStatementUri;
            _resultValue.purchasePlans = purchasePlans;
            _resultValue.releaseNoteUri = releaseNoteUri;
            _resultValue.resourceGroupName = resourceGroupName;
            _resultValue.specialized = specialized;
            _resultValue.tags = tags;
            return _resultValue;
        }
    }
}
