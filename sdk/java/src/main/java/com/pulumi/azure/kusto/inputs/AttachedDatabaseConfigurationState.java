// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.kusto.inputs;

import com.pulumi.azure.kusto.inputs.AttachedDatabaseConfigurationSharingArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AttachedDatabaseConfigurationState extends com.pulumi.resources.ResourceArgs {

    public static final AttachedDatabaseConfigurationState Empty = new AttachedDatabaseConfigurationState();

    /**
     * The list of databases from the `cluster_resource_id` which are currently attached to the cluster.
     * 
     */
    @Import(name="attachedDatabaseNames")
    private @Nullable Output<List<String>> attachedDatabaseNames;

    /**
     * @return The list of databases from the `cluster_resource_id` which are currently attached to the cluster.
     * 
     */
    public Optional<Output<List<String>>> attachedDatabaseNames() {
        return Optional.ofNullable(this.attachedDatabaseNames);
    }

    /**
     * Specifies the name of the Kusto Cluster for which the configuration will be created. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="clusterName")
    private @Nullable Output<String> clusterName;

    /**
     * @return Specifies the name of the Kusto Cluster for which the configuration will be created. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> clusterName() {
        return Optional.ofNullable(this.clusterName);
    }

    /**
     * The resource id of the cluster where the databases you would like to attach reside. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="clusterResourceId")
    private @Nullable Output<String> clusterResourceId;

    /**
     * @return The resource id of the cluster where the databases you would like to attach reside. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> clusterResourceId() {
        return Optional.ofNullable(this.clusterResourceId);
    }

    /**
     * The name of the database which you would like to attach, use * if you want to follow all current and future databases. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="databaseName")
    private @Nullable Output<String> databaseName;

    /**
     * @return The name of the database which you would like to attach, use * if you want to follow all current and future databases. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> databaseName() {
        return Optional.ofNullable(this.databaseName);
    }

    /**
     * The default principals modification kind. Valid values are: `None` (default), `Replace` and `Union`. Defaults to `None`.
     * 
     */
    @Import(name="defaultPrincipalModificationKind")
    private @Nullable Output<String> defaultPrincipalModificationKind;

    /**
     * @return The default principals modification kind. Valid values are: `None` (default), `Replace` and `Union`. Defaults to `None`.
     * 
     */
    public Optional<Output<String>> defaultPrincipalModificationKind() {
        return Optional.ofNullable(this.defaultPrincipalModificationKind);
    }

    /**
     * Specifies the location of the Kusto Cluster for which the configuration will be created. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Specifies the location of the Kusto Cluster for which the configuration will be created. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the Kusto Attached Database Configuration to create. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the Kusto Attached Database Configuration to create. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Specifies the resource group of the Kusto Cluster for which the configuration will be created. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="resourceGroupName")
    private @Nullable Output<String> resourceGroupName;

    /**
     * @return Specifies the resource group of the Kusto Cluster for which the configuration will be created. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> resourceGroupName() {
        return Optional.ofNullable(this.resourceGroupName);
    }

    /**
     * A `sharing` block as defined below.
     * 
     */
    @Import(name="sharing")
    private @Nullable Output<AttachedDatabaseConfigurationSharingArgs> sharing;

    /**
     * @return A `sharing` block as defined below.
     * 
     */
    public Optional<Output<AttachedDatabaseConfigurationSharingArgs>> sharing() {
        return Optional.ofNullable(this.sharing);
    }

    private AttachedDatabaseConfigurationState() {}

    private AttachedDatabaseConfigurationState(AttachedDatabaseConfigurationState $) {
        this.attachedDatabaseNames = $.attachedDatabaseNames;
        this.clusterName = $.clusterName;
        this.clusterResourceId = $.clusterResourceId;
        this.databaseName = $.databaseName;
        this.defaultPrincipalModificationKind = $.defaultPrincipalModificationKind;
        this.location = $.location;
        this.name = $.name;
        this.resourceGroupName = $.resourceGroupName;
        this.sharing = $.sharing;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AttachedDatabaseConfigurationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AttachedDatabaseConfigurationState $;

        public Builder() {
            $ = new AttachedDatabaseConfigurationState();
        }

        public Builder(AttachedDatabaseConfigurationState defaults) {
            $ = new AttachedDatabaseConfigurationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param attachedDatabaseNames The list of databases from the `cluster_resource_id` which are currently attached to the cluster.
         * 
         * @return builder
         * 
         */
        public Builder attachedDatabaseNames(@Nullable Output<List<String>> attachedDatabaseNames) {
            $.attachedDatabaseNames = attachedDatabaseNames;
            return this;
        }

        /**
         * @param attachedDatabaseNames The list of databases from the `cluster_resource_id` which are currently attached to the cluster.
         * 
         * @return builder
         * 
         */
        public Builder attachedDatabaseNames(List<String> attachedDatabaseNames) {
            return attachedDatabaseNames(Output.of(attachedDatabaseNames));
        }

        /**
         * @param attachedDatabaseNames The list of databases from the `cluster_resource_id` which are currently attached to the cluster.
         * 
         * @return builder
         * 
         */
        public Builder attachedDatabaseNames(String... attachedDatabaseNames) {
            return attachedDatabaseNames(List.of(attachedDatabaseNames));
        }

        /**
         * @param clusterName Specifies the name of the Kusto Cluster for which the configuration will be created. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder clusterName(@Nullable Output<String> clusterName) {
            $.clusterName = clusterName;
            return this;
        }

        /**
         * @param clusterName Specifies the name of the Kusto Cluster for which the configuration will be created. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder clusterName(String clusterName) {
            return clusterName(Output.of(clusterName));
        }

        /**
         * @param clusterResourceId The resource id of the cluster where the databases you would like to attach reside. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder clusterResourceId(@Nullable Output<String> clusterResourceId) {
            $.clusterResourceId = clusterResourceId;
            return this;
        }

        /**
         * @param clusterResourceId The resource id of the cluster where the databases you would like to attach reside. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder clusterResourceId(String clusterResourceId) {
            return clusterResourceId(Output.of(clusterResourceId));
        }

        /**
         * @param databaseName The name of the database which you would like to attach, use * if you want to follow all current and future databases. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(@Nullable Output<String> databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        /**
         * @param databaseName The name of the database which you would like to attach, use * if you want to follow all current and future databases. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(String databaseName) {
            return databaseName(Output.of(databaseName));
        }

        /**
         * @param defaultPrincipalModificationKind The default principals modification kind. Valid values are: `None` (default), `Replace` and `Union`. Defaults to `None`.
         * 
         * @return builder
         * 
         */
        public Builder defaultPrincipalModificationKind(@Nullable Output<String> defaultPrincipalModificationKind) {
            $.defaultPrincipalModificationKind = defaultPrincipalModificationKind;
            return this;
        }

        /**
         * @param defaultPrincipalModificationKind The default principals modification kind. Valid values are: `None` (default), `Replace` and `Union`. Defaults to `None`.
         * 
         * @return builder
         * 
         */
        public Builder defaultPrincipalModificationKind(String defaultPrincipalModificationKind) {
            return defaultPrincipalModificationKind(Output.of(defaultPrincipalModificationKind));
        }

        /**
         * @param location Specifies the location of the Kusto Cluster for which the configuration will be created. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Specifies the location of the Kusto Cluster for which the configuration will be created. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The name of the Kusto Attached Database Configuration to create. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Kusto Attached Database Configuration to create. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param resourceGroupName Specifies the resource group of the Kusto Cluster for which the configuration will be created. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(@Nullable Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName Specifies the resource group of the Kusto Cluster for which the configuration will be created. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param sharing A `sharing` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder sharing(@Nullable Output<AttachedDatabaseConfigurationSharingArgs> sharing) {
            $.sharing = sharing;
            return this;
        }

        /**
         * @param sharing A `sharing` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder sharing(AttachedDatabaseConfigurationSharingArgs sharing) {
            return sharing(Output.of(sharing));
        }

        public AttachedDatabaseConfigurationState build() {
            return $;
        }
    }

}
