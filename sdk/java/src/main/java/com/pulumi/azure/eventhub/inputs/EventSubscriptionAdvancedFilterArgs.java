// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.eventhub.inputs;

import com.pulumi.azure.eventhub.inputs.EventSubscriptionAdvancedFilterBoolEqualArgs;
import com.pulumi.azure.eventhub.inputs.EventSubscriptionAdvancedFilterIsNotNullArgs;
import com.pulumi.azure.eventhub.inputs.EventSubscriptionAdvancedFilterIsNullOrUndefinedArgs;
import com.pulumi.azure.eventhub.inputs.EventSubscriptionAdvancedFilterNumberGreaterThanArgs;
import com.pulumi.azure.eventhub.inputs.EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArgs;
import com.pulumi.azure.eventhub.inputs.EventSubscriptionAdvancedFilterNumberInArgs;
import com.pulumi.azure.eventhub.inputs.EventSubscriptionAdvancedFilterNumberInRangeArgs;
import com.pulumi.azure.eventhub.inputs.EventSubscriptionAdvancedFilterNumberLessThanArgs;
import com.pulumi.azure.eventhub.inputs.EventSubscriptionAdvancedFilterNumberLessThanOrEqualArgs;
import com.pulumi.azure.eventhub.inputs.EventSubscriptionAdvancedFilterNumberNotInArgs;
import com.pulumi.azure.eventhub.inputs.EventSubscriptionAdvancedFilterNumberNotInRangeArgs;
import com.pulumi.azure.eventhub.inputs.EventSubscriptionAdvancedFilterStringBeginsWithArgs;
import com.pulumi.azure.eventhub.inputs.EventSubscriptionAdvancedFilterStringContainArgs;
import com.pulumi.azure.eventhub.inputs.EventSubscriptionAdvancedFilterStringEndsWithArgs;
import com.pulumi.azure.eventhub.inputs.EventSubscriptionAdvancedFilterStringInArgs;
import com.pulumi.azure.eventhub.inputs.EventSubscriptionAdvancedFilterStringNotBeginsWithArgs;
import com.pulumi.azure.eventhub.inputs.EventSubscriptionAdvancedFilterStringNotContainArgs;
import com.pulumi.azure.eventhub.inputs.EventSubscriptionAdvancedFilterStringNotEndsWithArgs;
import com.pulumi.azure.eventhub.inputs.EventSubscriptionAdvancedFilterStringNotInArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EventSubscriptionAdvancedFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final EventSubscriptionAdvancedFilterArgs Empty = new EventSubscriptionAdvancedFilterArgs();

    /**
     * Compares a value of an event using a single boolean value.
     * 
     */
    @Import(name="boolEquals")
    private @Nullable Output<List<EventSubscriptionAdvancedFilterBoolEqualArgs>> boolEquals;

    /**
     * @return Compares a value of an event using a single boolean value.
     * 
     */
    public Optional<Output<List<EventSubscriptionAdvancedFilterBoolEqualArgs>>> boolEquals() {
        return Optional.ofNullable(this.boolEquals);
    }

    /**
     * Evaluates if a value of an event isn&#39;t NULL or undefined.
     * 
     */
    @Import(name="isNotNulls")
    private @Nullable Output<List<EventSubscriptionAdvancedFilterIsNotNullArgs>> isNotNulls;

    /**
     * @return Evaluates if a value of an event isn&#39;t NULL or undefined.
     * 
     */
    public Optional<Output<List<EventSubscriptionAdvancedFilterIsNotNullArgs>>> isNotNulls() {
        return Optional.ofNullable(this.isNotNulls);
    }

    /**
     * Evaluates if a value of an event is NULL or undefined.
     * 
     */
    @Import(name="isNullOrUndefineds")
    private @Nullable Output<List<EventSubscriptionAdvancedFilterIsNullOrUndefinedArgs>> isNullOrUndefineds;

    /**
     * @return Evaluates if a value of an event is NULL or undefined.
     * 
     */
    public Optional<Output<List<EventSubscriptionAdvancedFilterIsNullOrUndefinedArgs>>> isNullOrUndefineds() {
        return Optional.ofNullable(this.isNullOrUndefineds);
    }

    /**
     * Compares a value of an event using a single floating point number.
     * 
     */
    @Import(name="numberGreaterThanOrEquals")
    private @Nullable Output<List<EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArgs>> numberGreaterThanOrEquals;

    /**
     * @return Compares a value of an event using a single floating point number.
     * 
     */
    public Optional<Output<List<EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArgs>>> numberGreaterThanOrEquals() {
        return Optional.ofNullable(this.numberGreaterThanOrEquals);
    }

    /**
     * Compares a value of an event using a single floating point number.
     * 
     */
    @Import(name="numberGreaterThans")
    private @Nullable Output<List<EventSubscriptionAdvancedFilterNumberGreaterThanArgs>> numberGreaterThans;

    /**
     * @return Compares a value of an event using a single floating point number.
     * 
     */
    public Optional<Output<List<EventSubscriptionAdvancedFilterNumberGreaterThanArgs>>> numberGreaterThans() {
        return Optional.ofNullable(this.numberGreaterThans);
    }

    /**
     * Compares a value of an event using multiple floating point number ranges.
     * 
     */
    @Import(name="numberInRanges")
    private @Nullable Output<List<EventSubscriptionAdvancedFilterNumberInRangeArgs>> numberInRanges;

    /**
     * @return Compares a value of an event using multiple floating point number ranges.
     * 
     */
    public Optional<Output<List<EventSubscriptionAdvancedFilterNumberInRangeArgs>>> numberInRanges() {
        return Optional.ofNullable(this.numberInRanges);
    }

    /**
     * Compares a value of an event using multiple floating point numbers.
     * 
     */
    @Import(name="numberIns")
    private @Nullable Output<List<EventSubscriptionAdvancedFilterNumberInArgs>> numberIns;

    /**
     * @return Compares a value of an event using multiple floating point numbers.
     * 
     */
    public Optional<Output<List<EventSubscriptionAdvancedFilterNumberInArgs>>> numberIns() {
        return Optional.ofNullable(this.numberIns);
    }

    /**
     * Compares a value of an event using a single floating point number.
     * 
     */
    @Import(name="numberLessThanOrEquals")
    private @Nullable Output<List<EventSubscriptionAdvancedFilterNumberLessThanOrEqualArgs>> numberLessThanOrEquals;

    /**
     * @return Compares a value of an event using a single floating point number.
     * 
     */
    public Optional<Output<List<EventSubscriptionAdvancedFilterNumberLessThanOrEqualArgs>>> numberLessThanOrEquals() {
        return Optional.ofNullable(this.numberLessThanOrEquals);
    }

    /**
     * Compares a value of an event using a single floating point number.
     * 
     */
    @Import(name="numberLessThans")
    private @Nullable Output<List<EventSubscriptionAdvancedFilterNumberLessThanArgs>> numberLessThans;

    /**
     * @return Compares a value of an event using a single floating point number.
     * 
     */
    public Optional<Output<List<EventSubscriptionAdvancedFilterNumberLessThanArgs>>> numberLessThans() {
        return Optional.ofNullable(this.numberLessThans);
    }

    /**
     * Compares a value of an event using multiple floating point number ranges.
     * 
     */
    @Import(name="numberNotInRanges")
    private @Nullable Output<List<EventSubscriptionAdvancedFilterNumberNotInRangeArgs>> numberNotInRanges;

    /**
     * @return Compares a value of an event using multiple floating point number ranges.
     * 
     */
    public Optional<Output<List<EventSubscriptionAdvancedFilterNumberNotInRangeArgs>>> numberNotInRanges() {
        return Optional.ofNullable(this.numberNotInRanges);
    }

    /**
     * Compares a value of an event using multiple floating point numbers.
     * 
     */
    @Import(name="numberNotIns")
    private @Nullable Output<List<EventSubscriptionAdvancedFilterNumberNotInArgs>> numberNotIns;

    /**
     * @return Compares a value of an event using multiple floating point numbers.
     * 
     */
    public Optional<Output<List<EventSubscriptionAdvancedFilterNumberNotInArgs>>> numberNotIns() {
        return Optional.ofNullable(this.numberNotIns);
    }

    /**
     * Compares a value of an event using multiple string values.
     * 
     */
    @Import(name="stringBeginsWiths")
    private @Nullable Output<List<EventSubscriptionAdvancedFilterStringBeginsWithArgs>> stringBeginsWiths;

    /**
     * @return Compares a value of an event using multiple string values.
     * 
     */
    public Optional<Output<List<EventSubscriptionAdvancedFilterStringBeginsWithArgs>>> stringBeginsWiths() {
        return Optional.ofNullable(this.stringBeginsWiths);
    }

    /**
     * Compares a value of an event using multiple string values.
     * 
     */
    @Import(name="stringContains")
    private @Nullable Output<List<EventSubscriptionAdvancedFilterStringContainArgs>> stringContains;

    /**
     * @return Compares a value of an event using multiple string values.
     * 
     */
    public Optional<Output<List<EventSubscriptionAdvancedFilterStringContainArgs>>> stringContains() {
        return Optional.ofNullable(this.stringContains);
    }

    /**
     * Compares a value of an event using multiple string values.
     * 
     */
    @Import(name="stringEndsWiths")
    private @Nullable Output<List<EventSubscriptionAdvancedFilterStringEndsWithArgs>> stringEndsWiths;

    /**
     * @return Compares a value of an event using multiple string values.
     * 
     */
    public Optional<Output<List<EventSubscriptionAdvancedFilterStringEndsWithArgs>>> stringEndsWiths() {
        return Optional.ofNullable(this.stringEndsWiths);
    }

    /**
     * Compares a value of an event using multiple string values.
     * 
     */
    @Import(name="stringIns")
    private @Nullable Output<List<EventSubscriptionAdvancedFilterStringInArgs>> stringIns;

    /**
     * @return Compares a value of an event using multiple string values.
     * 
     */
    public Optional<Output<List<EventSubscriptionAdvancedFilterStringInArgs>>> stringIns() {
        return Optional.ofNullable(this.stringIns);
    }

    /**
     * Compares a value of an event using multiple string values.
     * 
     */
    @Import(name="stringNotBeginsWiths")
    private @Nullable Output<List<EventSubscriptionAdvancedFilterStringNotBeginsWithArgs>> stringNotBeginsWiths;

    /**
     * @return Compares a value of an event using multiple string values.
     * 
     */
    public Optional<Output<List<EventSubscriptionAdvancedFilterStringNotBeginsWithArgs>>> stringNotBeginsWiths() {
        return Optional.ofNullable(this.stringNotBeginsWiths);
    }

    /**
     * Compares a value of an event using multiple string values.
     * 
     */
    @Import(name="stringNotContains")
    private @Nullable Output<List<EventSubscriptionAdvancedFilterStringNotContainArgs>> stringNotContains;

    /**
     * @return Compares a value of an event using multiple string values.
     * 
     */
    public Optional<Output<List<EventSubscriptionAdvancedFilterStringNotContainArgs>>> stringNotContains() {
        return Optional.ofNullable(this.stringNotContains);
    }

    /**
     * Compares a value of an event using multiple string values.
     * 
     */
    @Import(name="stringNotEndsWiths")
    private @Nullable Output<List<EventSubscriptionAdvancedFilterStringNotEndsWithArgs>> stringNotEndsWiths;

    /**
     * @return Compares a value of an event using multiple string values.
     * 
     */
    public Optional<Output<List<EventSubscriptionAdvancedFilterStringNotEndsWithArgs>>> stringNotEndsWiths() {
        return Optional.ofNullable(this.stringNotEndsWiths);
    }

    /**
     * Compares a value of an event using multiple string values.
     * 
     */
    @Import(name="stringNotIns")
    private @Nullable Output<List<EventSubscriptionAdvancedFilterStringNotInArgs>> stringNotIns;

    /**
     * @return Compares a value of an event using multiple string values.
     * 
     */
    public Optional<Output<List<EventSubscriptionAdvancedFilterStringNotInArgs>>> stringNotIns() {
        return Optional.ofNullable(this.stringNotIns);
    }

    private EventSubscriptionAdvancedFilterArgs() {}

    private EventSubscriptionAdvancedFilterArgs(EventSubscriptionAdvancedFilterArgs $) {
        this.boolEquals = $.boolEquals;
        this.isNotNulls = $.isNotNulls;
        this.isNullOrUndefineds = $.isNullOrUndefineds;
        this.numberGreaterThanOrEquals = $.numberGreaterThanOrEquals;
        this.numberGreaterThans = $.numberGreaterThans;
        this.numberInRanges = $.numberInRanges;
        this.numberIns = $.numberIns;
        this.numberLessThanOrEquals = $.numberLessThanOrEquals;
        this.numberLessThans = $.numberLessThans;
        this.numberNotInRanges = $.numberNotInRanges;
        this.numberNotIns = $.numberNotIns;
        this.stringBeginsWiths = $.stringBeginsWiths;
        this.stringContains = $.stringContains;
        this.stringEndsWiths = $.stringEndsWiths;
        this.stringIns = $.stringIns;
        this.stringNotBeginsWiths = $.stringNotBeginsWiths;
        this.stringNotContains = $.stringNotContains;
        this.stringNotEndsWiths = $.stringNotEndsWiths;
        this.stringNotIns = $.stringNotIns;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EventSubscriptionAdvancedFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EventSubscriptionAdvancedFilterArgs $;

        public Builder() {
            $ = new EventSubscriptionAdvancedFilterArgs();
        }

        public Builder(EventSubscriptionAdvancedFilterArgs defaults) {
            $ = new EventSubscriptionAdvancedFilterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param boolEquals Compares a value of an event using a single boolean value.
         * 
         * @return builder
         * 
         */
        public Builder boolEquals(@Nullable Output<List<EventSubscriptionAdvancedFilterBoolEqualArgs>> boolEquals) {
            $.boolEquals = boolEquals;
            return this;
        }

        /**
         * @param boolEquals Compares a value of an event using a single boolean value.
         * 
         * @return builder
         * 
         */
        public Builder boolEquals(List<EventSubscriptionAdvancedFilterBoolEqualArgs> boolEquals) {
            return boolEquals(Output.of(boolEquals));
        }

        /**
         * @param boolEquals Compares a value of an event using a single boolean value.
         * 
         * @return builder
         * 
         */
        public Builder boolEquals(EventSubscriptionAdvancedFilterBoolEqualArgs... boolEquals) {
            return boolEquals(List.of(boolEquals));
        }

        /**
         * @param isNotNulls Evaluates if a value of an event isn&#39;t NULL or undefined.
         * 
         * @return builder
         * 
         */
        public Builder isNotNulls(@Nullable Output<List<EventSubscriptionAdvancedFilterIsNotNullArgs>> isNotNulls) {
            $.isNotNulls = isNotNulls;
            return this;
        }

        /**
         * @param isNotNulls Evaluates if a value of an event isn&#39;t NULL or undefined.
         * 
         * @return builder
         * 
         */
        public Builder isNotNulls(List<EventSubscriptionAdvancedFilterIsNotNullArgs> isNotNulls) {
            return isNotNulls(Output.of(isNotNulls));
        }

        /**
         * @param isNotNulls Evaluates if a value of an event isn&#39;t NULL or undefined.
         * 
         * @return builder
         * 
         */
        public Builder isNotNulls(EventSubscriptionAdvancedFilterIsNotNullArgs... isNotNulls) {
            return isNotNulls(List.of(isNotNulls));
        }

        /**
         * @param isNullOrUndefineds Evaluates if a value of an event is NULL or undefined.
         * 
         * @return builder
         * 
         */
        public Builder isNullOrUndefineds(@Nullable Output<List<EventSubscriptionAdvancedFilterIsNullOrUndefinedArgs>> isNullOrUndefineds) {
            $.isNullOrUndefineds = isNullOrUndefineds;
            return this;
        }

        /**
         * @param isNullOrUndefineds Evaluates if a value of an event is NULL or undefined.
         * 
         * @return builder
         * 
         */
        public Builder isNullOrUndefineds(List<EventSubscriptionAdvancedFilterIsNullOrUndefinedArgs> isNullOrUndefineds) {
            return isNullOrUndefineds(Output.of(isNullOrUndefineds));
        }

        /**
         * @param isNullOrUndefineds Evaluates if a value of an event is NULL or undefined.
         * 
         * @return builder
         * 
         */
        public Builder isNullOrUndefineds(EventSubscriptionAdvancedFilterIsNullOrUndefinedArgs... isNullOrUndefineds) {
            return isNullOrUndefineds(List.of(isNullOrUndefineds));
        }

        /**
         * @param numberGreaterThanOrEquals Compares a value of an event using a single floating point number.
         * 
         * @return builder
         * 
         */
        public Builder numberGreaterThanOrEquals(@Nullable Output<List<EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArgs>> numberGreaterThanOrEquals) {
            $.numberGreaterThanOrEquals = numberGreaterThanOrEquals;
            return this;
        }

        /**
         * @param numberGreaterThanOrEquals Compares a value of an event using a single floating point number.
         * 
         * @return builder
         * 
         */
        public Builder numberGreaterThanOrEquals(List<EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArgs> numberGreaterThanOrEquals) {
            return numberGreaterThanOrEquals(Output.of(numberGreaterThanOrEquals));
        }

        /**
         * @param numberGreaterThanOrEquals Compares a value of an event using a single floating point number.
         * 
         * @return builder
         * 
         */
        public Builder numberGreaterThanOrEquals(EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArgs... numberGreaterThanOrEquals) {
            return numberGreaterThanOrEquals(List.of(numberGreaterThanOrEquals));
        }

        /**
         * @param numberGreaterThans Compares a value of an event using a single floating point number.
         * 
         * @return builder
         * 
         */
        public Builder numberGreaterThans(@Nullable Output<List<EventSubscriptionAdvancedFilterNumberGreaterThanArgs>> numberGreaterThans) {
            $.numberGreaterThans = numberGreaterThans;
            return this;
        }

        /**
         * @param numberGreaterThans Compares a value of an event using a single floating point number.
         * 
         * @return builder
         * 
         */
        public Builder numberGreaterThans(List<EventSubscriptionAdvancedFilterNumberGreaterThanArgs> numberGreaterThans) {
            return numberGreaterThans(Output.of(numberGreaterThans));
        }

        /**
         * @param numberGreaterThans Compares a value of an event using a single floating point number.
         * 
         * @return builder
         * 
         */
        public Builder numberGreaterThans(EventSubscriptionAdvancedFilterNumberGreaterThanArgs... numberGreaterThans) {
            return numberGreaterThans(List.of(numberGreaterThans));
        }

        /**
         * @param numberInRanges Compares a value of an event using multiple floating point number ranges.
         * 
         * @return builder
         * 
         */
        public Builder numberInRanges(@Nullable Output<List<EventSubscriptionAdvancedFilterNumberInRangeArgs>> numberInRanges) {
            $.numberInRanges = numberInRanges;
            return this;
        }

        /**
         * @param numberInRanges Compares a value of an event using multiple floating point number ranges.
         * 
         * @return builder
         * 
         */
        public Builder numberInRanges(List<EventSubscriptionAdvancedFilterNumberInRangeArgs> numberInRanges) {
            return numberInRanges(Output.of(numberInRanges));
        }

        /**
         * @param numberInRanges Compares a value of an event using multiple floating point number ranges.
         * 
         * @return builder
         * 
         */
        public Builder numberInRanges(EventSubscriptionAdvancedFilterNumberInRangeArgs... numberInRanges) {
            return numberInRanges(List.of(numberInRanges));
        }

        /**
         * @param numberIns Compares a value of an event using multiple floating point numbers.
         * 
         * @return builder
         * 
         */
        public Builder numberIns(@Nullable Output<List<EventSubscriptionAdvancedFilterNumberInArgs>> numberIns) {
            $.numberIns = numberIns;
            return this;
        }

        /**
         * @param numberIns Compares a value of an event using multiple floating point numbers.
         * 
         * @return builder
         * 
         */
        public Builder numberIns(List<EventSubscriptionAdvancedFilterNumberInArgs> numberIns) {
            return numberIns(Output.of(numberIns));
        }

        /**
         * @param numberIns Compares a value of an event using multiple floating point numbers.
         * 
         * @return builder
         * 
         */
        public Builder numberIns(EventSubscriptionAdvancedFilterNumberInArgs... numberIns) {
            return numberIns(List.of(numberIns));
        }

        /**
         * @param numberLessThanOrEquals Compares a value of an event using a single floating point number.
         * 
         * @return builder
         * 
         */
        public Builder numberLessThanOrEquals(@Nullable Output<List<EventSubscriptionAdvancedFilterNumberLessThanOrEqualArgs>> numberLessThanOrEquals) {
            $.numberLessThanOrEquals = numberLessThanOrEquals;
            return this;
        }

        /**
         * @param numberLessThanOrEquals Compares a value of an event using a single floating point number.
         * 
         * @return builder
         * 
         */
        public Builder numberLessThanOrEquals(List<EventSubscriptionAdvancedFilterNumberLessThanOrEqualArgs> numberLessThanOrEquals) {
            return numberLessThanOrEquals(Output.of(numberLessThanOrEquals));
        }

        /**
         * @param numberLessThanOrEquals Compares a value of an event using a single floating point number.
         * 
         * @return builder
         * 
         */
        public Builder numberLessThanOrEquals(EventSubscriptionAdvancedFilterNumberLessThanOrEqualArgs... numberLessThanOrEquals) {
            return numberLessThanOrEquals(List.of(numberLessThanOrEquals));
        }

        /**
         * @param numberLessThans Compares a value of an event using a single floating point number.
         * 
         * @return builder
         * 
         */
        public Builder numberLessThans(@Nullable Output<List<EventSubscriptionAdvancedFilterNumberLessThanArgs>> numberLessThans) {
            $.numberLessThans = numberLessThans;
            return this;
        }

        /**
         * @param numberLessThans Compares a value of an event using a single floating point number.
         * 
         * @return builder
         * 
         */
        public Builder numberLessThans(List<EventSubscriptionAdvancedFilterNumberLessThanArgs> numberLessThans) {
            return numberLessThans(Output.of(numberLessThans));
        }

        /**
         * @param numberLessThans Compares a value of an event using a single floating point number.
         * 
         * @return builder
         * 
         */
        public Builder numberLessThans(EventSubscriptionAdvancedFilterNumberLessThanArgs... numberLessThans) {
            return numberLessThans(List.of(numberLessThans));
        }

        /**
         * @param numberNotInRanges Compares a value of an event using multiple floating point number ranges.
         * 
         * @return builder
         * 
         */
        public Builder numberNotInRanges(@Nullable Output<List<EventSubscriptionAdvancedFilterNumberNotInRangeArgs>> numberNotInRanges) {
            $.numberNotInRanges = numberNotInRanges;
            return this;
        }

        /**
         * @param numberNotInRanges Compares a value of an event using multiple floating point number ranges.
         * 
         * @return builder
         * 
         */
        public Builder numberNotInRanges(List<EventSubscriptionAdvancedFilterNumberNotInRangeArgs> numberNotInRanges) {
            return numberNotInRanges(Output.of(numberNotInRanges));
        }

        /**
         * @param numberNotInRanges Compares a value of an event using multiple floating point number ranges.
         * 
         * @return builder
         * 
         */
        public Builder numberNotInRanges(EventSubscriptionAdvancedFilterNumberNotInRangeArgs... numberNotInRanges) {
            return numberNotInRanges(List.of(numberNotInRanges));
        }

        /**
         * @param numberNotIns Compares a value of an event using multiple floating point numbers.
         * 
         * @return builder
         * 
         */
        public Builder numberNotIns(@Nullable Output<List<EventSubscriptionAdvancedFilterNumberNotInArgs>> numberNotIns) {
            $.numberNotIns = numberNotIns;
            return this;
        }

        /**
         * @param numberNotIns Compares a value of an event using multiple floating point numbers.
         * 
         * @return builder
         * 
         */
        public Builder numberNotIns(List<EventSubscriptionAdvancedFilterNumberNotInArgs> numberNotIns) {
            return numberNotIns(Output.of(numberNotIns));
        }

        /**
         * @param numberNotIns Compares a value of an event using multiple floating point numbers.
         * 
         * @return builder
         * 
         */
        public Builder numberNotIns(EventSubscriptionAdvancedFilterNumberNotInArgs... numberNotIns) {
            return numberNotIns(List.of(numberNotIns));
        }

        /**
         * @param stringBeginsWiths Compares a value of an event using multiple string values.
         * 
         * @return builder
         * 
         */
        public Builder stringBeginsWiths(@Nullable Output<List<EventSubscriptionAdvancedFilterStringBeginsWithArgs>> stringBeginsWiths) {
            $.stringBeginsWiths = stringBeginsWiths;
            return this;
        }

        /**
         * @param stringBeginsWiths Compares a value of an event using multiple string values.
         * 
         * @return builder
         * 
         */
        public Builder stringBeginsWiths(List<EventSubscriptionAdvancedFilterStringBeginsWithArgs> stringBeginsWiths) {
            return stringBeginsWiths(Output.of(stringBeginsWiths));
        }

        /**
         * @param stringBeginsWiths Compares a value of an event using multiple string values.
         * 
         * @return builder
         * 
         */
        public Builder stringBeginsWiths(EventSubscriptionAdvancedFilterStringBeginsWithArgs... stringBeginsWiths) {
            return stringBeginsWiths(List.of(stringBeginsWiths));
        }

        /**
         * @param stringContains Compares a value of an event using multiple string values.
         * 
         * @return builder
         * 
         */
        public Builder stringContains(@Nullable Output<List<EventSubscriptionAdvancedFilterStringContainArgs>> stringContains) {
            $.stringContains = stringContains;
            return this;
        }

        /**
         * @param stringContains Compares a value of an event using multiple string values.
         * 
         * @return builder
         * 
         */
        public Builder stringContains(List<EventSubscriptionAdvancedFilterStringContainArgs> stringContains) {
            return stringContains(Output.of(stringContains));
        }

        /**
         * @param stringContains Compares a value of an event using multiple string values.
         * 
         * @return builder
         * 
         */
        public Builder stringContains(EventSubscriptionAdvancedFilterStringContainArgs... stringContains) {
            return stringContains(List.of(stringContains));
        }

        /**
         * @param stringEndsWiths Compares a value of an event using multiple string values.
         * 
         * @return builder
         * 
         */
        public Builder stringEndsWiths(@Nullable Output<List<EventSubscriptionAdvancedFilterStringEndsWithArgs>> stringEndsWiths) {
            $.stringEndsWiths = stringEndsWiths;
            return this;
        }

        /**
         * @param stringEndsWiths Compares a value of an event using multiple string values.
         * 
         * @return builder
         * 
         */
        public Builder stringEndsWiths(List<EventSubscriptionAdvancedFilterStringEndsWithArgs> stringEndsWiths) {
            return stringEndsWiths(Output.of(stringEndsWiths));
        }

        /**
         * @param stringEndsWiths Compares a value of an event using multiple string values.
         * 
         * @return builder
         * 
         */
        public Builder stringEndsWiths(EventSubscriptionAdvancedFilterStringEndsWithArgs... stringEndsWiths) {
            return stringEndsWiths(List.of(stringEndsWiths));
        }

        /**
         * @param stringIns Compares a value of an event using multiple string values.
         * 
         * @return builder
         * 
         */
        public Builder stringIns(@Nullable Output<List<EventSubscriptionAdvancedFilterStringInArgs>> stringIns) {
            $.stringIns = stringIns;
            return this;
        }

        /**
         * @param stringIns Compares a value of an event using multiple string values.
         * 
         * @return builder
         * 
         */
        public Builder stringIns(List<EventSubscriptionAdvancedFilterStringInArgs> stringIns) {
            return stringIns(Output.of(stringIns));
        }

        /**
         * @param stringIns Compares a value of an event using multiple string values.
         * 
         * @return builder
         * 
         */
        public Builder stringIns(EventSubscriptionAdvancedFilterStringInArgs... stringIns) {
            return stringIns(List.of(stringIns));
        }

        /**
         * @param stringNotBeginsWiths Compares a value of an event using multiple string values.
         * 
         * @return builder
         * 
         */
        public Builder stringNotBeginsWiths(@Nullable Output<List<EventSubscriptionAdvancedFilterStringNotBeginsWithArgs>> stringNotBeginsWiths) {
            $.stringNotBeginsWiths = stringNotBeginsWiths;
            return this;
        }

        /**
         * @param stringNotBeginsWiths Compares a value of an event using multiple string values.
         * 
         * @return builder
         * 
         */
        public Builder stringNotBeginsWiths(List<EventSubscriptionAdvancedFilterStringNotBeginsWithArgs> stringNotBeginsWiths) {
            return stringNotBeginsWiths(Output.of(stringNotBeginsWiths));
        }

        /**
         * @param stringNotBeginsWiths Compares a value of an event using multiple string values.
         * 
         * @return builder
         * 
         */
        public Builder stringNotBeginsWiths(EventSubscriptionAdvancedFilterStringNotBeginsWithArgs... stringNotBeginsWiths) {
            return stringNotBeginsWiths(List.of(stringNotBeginsWiths));
        }

        /**
         * @param stringNotContains Compares a value of an event using multiple string values.
         * 
         * @return builder
         * 
         */
        public Builder stringNotContains(@Nullable Output<List<EventSubscriptionAdvancedFilterStringNotContainArgs>> stringNotContains) {
            $.stringNotContains = stringNotContains;
            return this;
        }

        /**
         * @param stringNotContains Compares a value of an event using multiple string values.
         * 
         * @return builder
         * 
         */
        public Builder stringNotContains(List<EventSubscriptionAdvancedFilterStringNotContainArgs> stringNotContains) {
            return stringNotContains(Output.of(stringNotContains));
        }

        /**
         * @param stringNotContains Compares a value of an event using multiple string values.
         * 
         * @return builder
         * 
         */
        public Builder stringNotContains(EventSubscriptionAdvancedFilterStringNotContainArgs... stringNotContains) {
            return stringNotContains(List.of(stringNotContains));
        }

        /**
         * @param stringNotEndsWiths Compares a value of an event using multiple string values.
         * 
         * @return builder
         * 
         */
        public Builder stringNotEndsWiths(@Nullable Output<List<EventSubscriptionAdvancedFilterStringNotEndsWithArgs>> stringNotEndsWiths) {
            $.stringNotEndsWiths = stringNotEndsWiths;
            return this;
        }

        /**
         * @param stringNotEndsWiths Compares a value of an event using multiple string values.
         * 
         * @return builder
         * 
         */
        public Builder stringNotEndsWiths(List<EventSubscriptionAdvancedFilterStringNotEndsWithArgs> stringNotEndsWiths) {
            return stringNotEndsWiths(Output.of(stringNotEndsWiths));
        }

        /**
         * @param stringNotEndsWiths Compares a value of an event using multiple string values.
         * 
         * @return builder
         * 
         */
        public Builder stringNotEndsWiths(EventSubscriptionAdvancedFilterStringNotEndsWithArgs... stringNotEndsWiths) {
            return stringNotEndsWiths(List.of(stringNotEndsWiths));
        }

        /**
         * @param stringNotIns Compares a value of an event using multiple string values.
         * 
         * @return builder
         * 
         */
        public Builder stringNotIns(@Nullable Output<List<EventSubscriptionAdvancedFilterStringNotInArgs>> stringNotIns) {
            $.stringNotIns = stringNotIns;
            return this;
        }

        /**
         * @param stringNotIns Compares a value of an event using multiple string values.
         * 
         * @return builder
         * 
         */
        public Builder stringNotIns(List<EventSubscriptionAdvancedFilterStringNotInArgs> stringNotIns) {
            return stringNotIns(Output.of(stringNotIns));
        }

        /**
         * @param stringNotIns Compares a value of an event using multiple string values.
         * 
         * @return builder
         * 
         */
        public Builder stringNotIns(EventSubscriptionAdvancedFilterStringNotInArgs... stringNotIns) {
            return stringNotIns(List.of(stringNotIns));
        }

        public EventSubscriptionAdvancedFilterArgs build() {
            return $;
        }
    }

}
