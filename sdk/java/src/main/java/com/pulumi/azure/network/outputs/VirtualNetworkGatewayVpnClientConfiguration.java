// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network.outputs;

import com.pulumi.azure.network.outputs.VirtualNetworkGatewayVpnClientConfigurationRevokedCertificate;
import com.pulumi.azure.network.outputs.VirtualNetworkGatewayVpnClientConfigurationRootCertificate;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class VirtualNetworkGatewayVpnClientConfiguration {
    /**
     * @return The client id of the Azure VPN application.
     * See [Create an Active Directory (AD) tenant for P2S OpenVPN protocol connections](https://docs.microsoft.com/en-gb/azure/vpn-gateway/openvpn-azure-ad-tenant-multi-app) for values
     * 
     */
    private final @Nullable String aadAudience;
    /**
     * @return The STS url for your tenant
     * 
     */
    private final @Nullable String aadIssuer;
    /**
     * @return AzureAD Tenant URL
     * 
     */
    private final @Nullable String aadTenant;
    /**
     * @return The address space out of which IP addresses for
     * vpn clients will be taken. You can provide more than one address space, e.g.
     * in CIDR notation.
     * 
     */
    private final List<String> addressSpaces;
    /**
     * @return The address of the Radius server.
     * 
     */
    private final @Nullable String radiusServerAddress;
    /**
     * @return The secret used by the Radius server.
     * 
     */
    private final @Nullable String radiusServerSecret;
    /**
     * @return One or more `revoked_certificate` blocks which
     * are defined below.
     * 
     */
    private final @Nullable List<VirtualNetworkGatewayVpnClientConfigurationRevokedCertificate> revokedCertificates;
    /**
     * @return One or more `root_certificate` blocks which are
     * defined below. These root certificates are used to sign the client certificate
     * used by the VPN clients to connect to the gateway.
     * 
     */
    private final @Nullable List<VirtualNetworkGatewayVpnClientConfigurationRootCertificate> rootCertificates;
    /**
     * @return List of the vpn authentication types for the virtual network gateway.
     * The supported values are `AAD`, `Radius` and `Certificate`.
     * 
     */
    private final @Nullable List<String> vpnAuthTypes;
    /**
     * @return List of the protocols supported by the vpn client.
     * The supported values are `SSTP`, `IkeV2` and `OpenVPN`.
     * Values `SSTP` and `IkeV2` are incompatible with the use of
     * `aad_tenant`, `aad_audience` and `aad_issuer`.
     * 
     */
    private final @Nullable List<String> vpnClientProtocols;

    @CustomType.Constructor
    private VirtualNetworkGatewayVpnClientConfiguration(
        @CustomType.Parameter("aadAudience") @Nullable String aadAudience,
        @CustomType.Parameter("aadIssuer") @Nullable String aadIssuer,
        @CustomType.Parameter("aadTenant") @Nullable String aadTenant,
        @CustomType.Parameter("addressSpaces") List<String> addressSpaces,
        @CustomType.Parameter("radiusServerAddress") @Nullable String radiusServerAddress,
        @CustomType.Parameter("radiusServerSecret") @Nullable String radiusServerSecret,
        @CustomType.Parameter("revokedCertificates") @Nullable List<VirtualNetworkGatewayVpnClientConfigurationRevokedCertificate> revokedCertificates,
        @CustomType.Parameter("rootCertificates") @Nullable List<VirtualNetworkGatewayVpnClientConfigurationRootCertificate> rootCertificates,
        @CustomType.Parameter("vpnAuthTypes") @Nullable List<String> vpnAuthTypes,
        @CustomType.Parameter("vpnClientProtocols") @Nullable List<String> vpnClientProtocols) {
        this.aadAudience = aadAudience;
        this.aadIssuer = aadIssuer;
        this.aadTenant = aadTenant;
        this.addressSpaces = addressSpaces;
        this.radiusServerAddress = radiusServerAddress;
        this.radiusServerSecret = radiusServerSecret;
        this.revokedCertificates = revokedCertificates;
        this.rootCertificates = rootCertificates;
        this.vpnAuthTypes = vpnAuthTypes;
        this.vpnClientProtocols = vpnClientProtocols;
    }

    /**
     * @return The client id of the Azure VPN application.
     * See [Create an Active Directory (AD) tenant for P2S OpenVPN protocol connections](https://docs.microsoft.com/en-gb/azure/vpn-gateway/openvpn-azure-ad-tenant-multi-app) for values
     * 
     */
    public Optional<String> aadAudience() {
        return Optional.ofNullable(this.aadAudience);
    }
    /**
     * @return The STS url for your tenant
     * 
     */
    public Optional<String> aadIssuer() {
        return Optional.ofNullable(this.aadIssuer);
    }
    /**
     * @return AzureAD Tenant URL
     * 
     */
    public Optional<String> aadTenant() {
        return Optional.ofNullable(this.aadTenant);
    }
    /**
     * @return The address space out of which IP addresses for
     * vpn clients will be taken. You can provide more than one address space, e.g.
     * in CIDR notation.
     * 
     */
    public List<String> addressSpaces() {
        return this.addressSpaces;
    }
    /**
     * @return The address of the Radius server.
     * 
     */
    public Optional<String> radiusServerAddress() {
        return Optional.ofNullable(this.radiusServerAddress);
    }
    /**
     * @return The secret used by the Radius server.
     * 
     */
    public Optional<String> radiusServerSecret() {
        return Optional.ofNullable(this.radiusServerSecret);
    }
    /**
     * @return One or more `revoked_certificate` blocks which
     * are defined below.
     * 
     */
    public List<VirtualNetworkGatewayVpnClientConfigurationRevokedCertificate> revokedCertificates() {
        return this.revokedCertificates == null ? List.of() : this.revokedCertificates;
    }
    /**
     * @return One or more `root_certificate` blocks which are
     * defined below. These root certificates are used to sign the client certificate
     * used by the VPN clients to connect to the gateway.
     * 
     */
    public List<VirtualNetworkGatewayVpnClientConfigurationRootCertificate> rootCertificates() {
        return this.rootCertificates == null ? List.of() : this.rootCertificates;
    }
    /**
     * @return List of the vpn authentication types for the virtual network gateway.
     * The supported values are `AAD`, `Radius` and `Certificate`.
     * 
     */
    public List<String> vpnAuthTypes() {
        return this.vpnAuthTypes == null ? List.of() : this.vpnAuthTypes;
    }
    /**
     * @return List of the protocols supported by the vpn client.
     * The supported values are `SSTP`, `IkeV2` and `OpenVPN`.
     * Values `SSTP` and `IkeV2` are incompatible with the use of
     * `aad_tenant`, `aad_audience` and `aad_issuer`.
     * 
     */
    public List<String> vpnClientProtocols() {
        return this.vpnClientProtocols == null ? List.of() : this.vpnClientProtocols;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VirtualNetworkGatewayVpnClientConfiguration defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String aadAudience;
        private @Nullable String aadIssuer;
        private @Nullable String aadTenant;
        private List<String> addressSpaces;
        private @Nullable String radiusServerAddress;
        private @Nullable String radiusServerSecret;
        private @Nullable List<VirtualNetworkGatewayVpnClientConfigurationRevokedCertificate> revokedCertificates;
        private @Nullable List<VirtualNetworkGatewayVpnClientConfigurationRootCertificate> rootCertificates;
        private @Nullable List<String> vpnAuthTypes;
        private @Nullable List<String> vpnClientProtocols;

        public Builder() {
    	      // Empty
        }

        public Builder(VirtualNetworkGatewayVpnClientConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aadAudience = defaults.aadAudience;
    	      this.aadIssuer = defaults.aadIssuer;
    	      this.aadTenant = defaults.aadTenant;
    	      this.addressSpaces = defaults.addressSpaces;
    	      this.radiusServerAddress = defaults.radiusServerAddress;
    	      this.radiusServerSecret = defaults.radiusServerSecret;
    	      this.revokedCertificates = defaults.revokedCertificates;
    	      this.rootCertificates = defaults.rootCertificates;
    	      this.vpnAuthTypes = defaults.vpnAuthTypes;
    	      this.vpnClientProtocols = defaults.vpnClientProtocols;
        }

        public Builder aadAudience(@Nullable String aadAudience) {
            this.aadAudience = aadAudience;
            return this;
        }
        public Builder aadIssuer(@Nullable String aadIssuer) {
            this.aadIssuer = aadIssuer;
            return this;
        }
        public Builder aadTenant(@Nullable String aadTenant) {
            this.aadTenant = aadTenant;
            return this;
        }
        public Builder addressSpaces(List<String> addressSpaces) {
            this.addressSpaces = Objects.requireNonNull(addressSpaces);
            return this;
        }
        public Builder addressSpaces(String... addressSpaces) {
            return addressSpaces(List.of(addressSpaces));
        }
        public Builder radiusServerAddress(@Nullable String radiusServerAddress) {
            this.radiusServerAddress = radiusServerAddress;
            return this;
        }
        public Builder radiusServerSecret(@Nullable String radiusServerSecret) {
            this.radiusServerSecret = radiusServerSecret;
            return this;
        }
        public Builder revokedCertificates(@Nullable List<VirtualNetworkGatewayVpnClientConfigurationRevokedCertificate> revokedCertificates) {
            this.revokedCertificates = revokedCertificates;
            return this;
        }
        public Builder revokedCertificates(VirtualNetworkGatewayVpnClientConfigurationRevokedCertificate... revokedCertificates) {
            return revokedCertificates(List.of(revokedCertificates));
        }
        public Builder rootCertificates(@Nullable List<VirtualNetworkGatewayVpnClientConfigurationRootCertificate> rootCertificates) {
            this.rootCertificates = rootCertificates;
            return this;
        }
        public Builder rootCertificates(VirtualNetworkGatewayVpnClientConfigurationRootCertificate... rootCertificates) {
            return rootCertificates(List.of(rootCertificates));
        }
        public Builder vpnAuthTypes(@Nullable List<String> vpnAuthTypes) {
            this.vpnAuthTypes = vpnAuthTypes;
            return this;
        }
        public Builder vpnAuthTypes(String... vpnAuthTypes) {
            return vpnAuthTypes(List.of(vpnAuthTypes));
        }
        public Builder vpnClientProtocols(@Nullable List<String> vpnClientProtocols) {
            this.vpnClientProtocols = vpnClientProtocols;
            return this;
        }
        public Builder vpnClientProtocols(String... vpnClientProtocols) {
            return vpnClientProtocols(List.of(vpnClientProtocols));
        }        public VirtualNetworkGatewayVpnClientConfiguration build() {
            return new VirtualNetworkGatewayVpnClientConfiguration(aadAudience, aadIssuer, aadTenant, addressSpaces, radiusServerAddress, radiusServerSecret, revokedCertificates, rootCertificates, vpnAuthTypes, vpnClientProtocols);
        }
    }
}
