// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.eventgrid.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class EventSubscriptionStorageBlobDeadLetterDestinationArgs extends com.pulumi.resources.ResourceArgs {

    public static final EventSubscriptionStorageBlobDeadLetterDestinationArgs Empty = new EventSubscriptionStorageBlobDeadLetterDestinationArgs();

    /**
     * Specifies the id of the storage account id where the storage blob is located.
     * 
     */
    @Import(name="storageAccountId", required=true)
    private Output<String> storageAccountId;

    /**
     * @return Specifies the id of the storage account id where the storage blob is located.
     * 
     */
    public Output<String> storageAccountId() {
        return this.storageAccountId;
    }

    /**
     * Specifies the name of the Storage blob container that is the destination of the deadletter events.
     * 
     */
    @Import(name="storageBlobContainerName", required=true)
    private Output<String> storageBlobContainerName;

    /**
     * @return Specifies the name of the Storage blob container that is the destination of the deadletter events.
     * 
     */
    public Output<String> storageBlobContainerName() {
        return this.storageBlobContainerName;
    }

    private EventSubscriptionStorageBlobDeadLetterDestinationArgs() {}

    private EventSubscriptionStorageBlobDeadLetterDestinationArgs(EventSubscriptionStorageBlobDeadLetterDestinationArgs $) {
        this.storageAccountId = $.storageAccountId;
        this.storageBlobContainerName = $.storageBlobContainerName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EventSubscriptionStorageBlobDeadLetterDestinationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EventSubscriptionStorageBlobDeadLetterDestinationArgs $;

        public Builder() {
            $ = new EventSubscriptionStorageBlobDeadLetterDestinationArgs();
        }

        public Builder(EventSubscriptionStorageBlobDeadLetterDestinationArgs defaults) {
            $ = new EventSubscriptionStorageBlobDeadLetterDestinationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param storageAccountId Specifies the id of the storage account id where the storage blob is located.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountId(Output<String> storageAccountId) {
            $.storageAccountId = storageAccountId;
            return this;
        }

        /**
         * @param storageAccountId Specifies the id of the storage account id where the storage blob is located.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountId(String storageAccountId) {
            return storageAccountId(Output.of(storageAccountId));
        }

        /**
         * @param storageBlobContainerName Specifies the name of the Storage blob container that is the destination of the deadletter events.
         * 
         * @return builder
         * 
         */
        public Builder storageBlobContainerName(Output<String> storageBlobContainerName) {
            $.storageBlobContainerName = storageBlobContainerName;
            return this;
        }

        /**
         * @param storageBlobContainerName Specifies the name of the Storage blob container that is the destination of the deadletter events.
         * 
         * @return builder
         * 
         */
        public Builder storageBlobContainerName(String storageBlobContainerName) {
            return storageBlobContainerName(Output.of(storageBlobContainerName));
        }

        public EventSubscriptionStorageBlobDeadLetterDestinationArgs build() {
            if ($.storageAccountId == null) {
                throw new MissingRequiredPropertyException("EventSubscriptionStorageBlobDeadLetterDestinationArgs", "storageAccountId");
            }
            if ($.storageBlobContainerName == null) {
                throw new MissingRequiredPropertyException("EventSubscriptionStorageBlobDeadLetterDestinationArgs", "storageBlobContainerName");
            }
            return $;
        }
    }

}
