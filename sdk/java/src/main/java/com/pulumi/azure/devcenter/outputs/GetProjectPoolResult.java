// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.devcenter.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetProjectPoolResult {
    /**
     * @return The name of the Dev Center Dev Box Definition.
     * 
     */
    private String devBoxDefinitionName;
    /**
     * @return The name of the Dev Center Attached Network in parent Project of the Dev Center Project Pool.
     * 
     */
    private String devCenterAttachedNetworkName;
    private String devCenterProjectId;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Specifies whether owners of Dev Boxes in the Dev Center Project Pool are added as local administrators on the Dev Box.
     * 
     */
    private Boolean localAdministratorEnabled;
    /**
     * @return The Azure Region where the Dev Center Project Pool exists.
     * 
     */
    private String location;
    private String name;
    /**
     * @return The specified time in minutes to wait before stopping a Dev Center Dev Box once disconnect is detected.
     * 
     */
    private Integer stopOnDisconnectGracePeriodMinutes;
    /**
     * @return A mapping of tags assigned to the Dev Center Project Pool.
     * 
     */
    private Map<String,String> tags;

    private GetProjectPoolResult() {}
    /**
     * @return The name of the Dev Center Dev Box Definition.
     * 
     */
    public String devBoxDefinitionName() {
        return this.devBoxDefinitionName;
    }
    /**
     * @return The name of the Dev Center Attached Network in parent Project of the Dev Center Project Pool.
     * 
     */
    public String devCenterAttachedNetworkName() {
        return this.devCenterAttachedNetworkName;
    }
    public String devCenterProjectId() {
        return this.devCenterProjectId;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Specifies whether owners of Dev Boxes in the Dev Center Project Pool are added as local administrators on the Dev Box.
     * 
     */
    public Boolean localAdministratorEnabled() {
        return this.localAdministratorEnabled;
    }
    /**
     * @return The Azure Region where the Dev Center Project Pool exists.
     * 
     */
    public String location() {
        return this.location;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return The specified time in minutes to wait before stopping a Dev Center Dev Box once disconnect is detected.
     * 
     */
    public Integer stopOnDisconnectGracePeriodMinutes() {
        return this.stopOnDisconnectGracePeriodMinutes;
    }
    /**
     * @return A mapping of tags assigned to the Dev Center Project Pool.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProjectPoolResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String devBoxDefinitionName;
        private String devCenterAttachedNetworkName;
        private String devCenterProjectId;
        private String id;
        private Boolean localAdministratorEnabled;
        private String location;
        private String name;
        private Integer stopOnDisconnectGracePeriodMinutes;
        private Map<String,String> tags;
        public Builder() {}
        public Builder(GetProjectPoolResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.devBoxDefinitionName = defaults.devBoxDefinitionName;
    	      this.devCenterAttachedNetworkName = defaults.devCenterAttachedNetworkName;
    	      this.devCenterProjectId = defaults.devCenterProjectId;
    	      this.id = defaults.id;
    	      this.localAdministratorEnabled = defaults.localAdministratorEnabled;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.stopOnDisconnectGracePeriodMinutes = defaults.stopOnDisconnectGracePeriodMinutes;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder devBoxDefinitionName(String devBoxDefinitionName) {
            if (devBoxDefinitionName == null) {
              throw new MissingRequiredPropertyException("GetProjectPoolResult", "devBoxDefinitionName");
            }
            this.devBoxDefinitionName = devBoxDefinitionName;
            return this;
        }
        @CustomType.Setter
        public Builder devCenterAttachedNetworkName(String devCenterAttachedNetworkName) {
            if (devCenterAttachedNetworkName == null) {
              throw new MissingRequiredPropertyException("GetProjectPoolResult", "devCenterAttachedNetworkName");
            }
            this.devCenterAttachedNetworkName = devCenterAttachedNetworkName;
            return this;
        }
        @CustomType.Setter
        public Builder devCenterProjectId(String devCenterProjectId) {
            if (devCenterProjectId == null) {
              throw new MissingRequiredPropertyException("GetProjectPoolResult", "devCenterProjectId");
            }
            this.devCenterProjectId = devCenterProjectId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetProjectPoolResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder localAdministratorEnabled(Boolean localAdministratorEnabled) {
            if (localAdministratorEnabled == null) {
              throw new MissingRequiredPropertyException("GetProjectPoolResult", "localAdministratorEnabled");
            }
            this.localAdministratorEnabled = localAdministratorEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetProjectPoolResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetProjectPoolResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder stopOnDisconnectGracePeriodMinutes(Integer stopOnDisconnectGracePeriodMinutes) {
            if (stopOnDisconnectGracePeriodMinutes == null) {
              throw new MissingRequiredPropertyException("GetProjectPoolResult", "stopOnDisconnectGracePeriodMinutes");
            }
            this.stopOnDisconnectGracePeriodMinutes = stopOnDisconnectGracePeriodMinutes;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetProjectPoolResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public GetProjectPoolResult build() {
            final var _resultValue = new GetProjectPoolResult();
            _resultValue.devBoxDefinitionName = devBoxDefinitionName;
            _resultValue.devCenterAttachedNetworkName = devCenterAttachedNetworkName;
            _resultValue.devCenterProjectId = devCenterProjectId;
            _resultValue.id = id;
            _resultValue.localAdministratorEnabled = localAdministratorEnabled;
            _resultValue.location = location;
            _resultValue.name = name;
            _resultValue.stopOnDisconnectGracePeriodMinutes = stopOnDisconnectGracePeriodMinutes;
            _resultValue.tags = tags;
            return _resultValue;
        }
    }
}
