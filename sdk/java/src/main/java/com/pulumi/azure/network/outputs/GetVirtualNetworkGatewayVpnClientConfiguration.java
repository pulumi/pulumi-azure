// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network.outputs;

import com.pulumi.azure.network.outputs.GetVirtualNetworkGatewayVpnClientConfigurationRevokedCertificate;
import com.pulumi.azure.network.outputs.GetVirtualNetworkGatewayVpnClientConfigurationRootCertificate;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetVirtualNetworkGatewayVpnClientConfiguration {
    /**
     * @return The client id of the Azure VPN application.
     * See [Create an Active Directory (AD) tenant for P2S OpenVPN protocol connections](https://docs.microsoft.com/en-gb/azure/vpn-gateway/openvpn-azure-ad-tenant-multi-app) for values
     * This setting is incompatible with the use of
     * `root_certificate` and `revoked_certificate`, `radius_server_address`, and `radius_server_secret`.
     * 
     */
    private String aadAudience;
    /**
     * @return The STS url for your tenant
     * This setting is incompatible with the use of
     * `root_certificate` and `revoked_certificate`, `radius_server_address`, and `radius_server_secret`.
     * 
     */
    private String aadIssuer;
    /**
     * @return AzureAD Tenant URL
     * This setting is incompatible with the use of
     * `root_certificate` and `revoked_certificate`, `radius_server_address`, and `radius_server_secret`.
     * 
     */
    private String aadTenant;
    /**
     * @return The address space out of which IP addresses for
     * vpn clients will be taken. You can provide more than one address space, e.g.
     * in CIDR notation.
     * 
     */
    private List<String> addressSpaces;
    /**
     * @return The address of the Radius server.
     * This setting is incompatible with the use of
     * `aad_tenant`, `aad_audience`, `aad_issuer`, `root_certificate` and `revoked_certificate`.
     * 
     */
    private String radiusServerAddress;
    /**
     * @return The secret used by the Radius server.
     * This setting is incompatible with the use of
     * `aad_tenant`, `aad_audience`, `aad_issuer`, `root_certificate` and `revoked_certificate`.
     * 
     */
    private String radiusServerSecret;
    /**
     * @return One or more `revoked_certificate` blocks which
     * are defined below.
     * This setting is incompatible with the use of
     * `aad_tenant`, `aad_audience`, `aad_issuer`, `radius_server_address`, and `radius_server_secret`.
     * 
     */
    private List<GetVirtualNetworkGatewayVpnClientConfigurationRevokedCertificate> revokedCertificates;
    /**
     * @return One or more `root_certificate` blocks which are
     * defined below. These root certificates are used to sign the client certificate
     * used by the VPN clients to connect to the gateway.
     * This setting is incompatible with the use of
     * `aad_tenant`, `aad_audience`, `aad_issuer`, `radius_server_address`, and `radius_server_secret`.
     * 
     */
    private List<GetVirtualNetworkGatewayVpnClientConfigurationRootCertificate> rootCertificates;
    /**
     * @return List of the protocols supported by the vpn client.
     * The supported values are `SSTP`, `IkeV2` and `OpenVPN`.
     * 
     */
    private List<String> vpnClientProtocols;

    private GetVirtualNetworkGatewayVpnClientConfiguration() {}
    /**
     * @return The client id of the Azure VPN application.
     * See [Create an Active Directory (AD) tenant for P2S OpenVPN protocol connections](https://docs.microsoft.com/en-gb/azure/vpn-gateway/openvpn-azure-ad-tenant-multi-app) for values
     * This setting is incompatible with the use of
     * `root_certificate` and `revoked_certificate`, `radius_server_address`, and `radius_server_secret`.
     * 
     */
    public String aadAudience() {
        return this.aadAudience;
    }
    /**
     * @return The STS url for your tenant
     * This setting is incompatible with the use of
     * `root_certificate` and `revoked_certificate`, `radius_server_address`, and `radius_server_secret`.
     * 
     */
    public String aadIssuer() {
        return this.aadIssuer;
    }
    /**
     * @return AzureAD Tenant URL
     * This setting is incompatible with the use of
     * `root_certificate` and `revoked_certificate`, `radius_server_address`, and `radius_server_secret`.
     * 
     */
    public String aadTenant() {
        return this.aadTenant;
    }
    /**
     * @return The address space out of which IP addresses for
     * vpn clients will be taken. You can provide more than one address space, e.g.
     * in CIDR notation.
     * 
     */
    public List<String> addressSpaces() {
        return this.addressSpaces;
    }
    /**
     * @return The address of the Radius server.
     * This setting is incompatible with the use of
     * `aad_tenant`, `aad_audience`, `aad_issuer`, `root_certificate` and `revoked_certificate`.
     * 
     */
    public String radiusServerAddress() {
        return this.radiusServerAddress;
    }
    /**
     * @return The secret used by the Radius server.
     * This setting is incompatible with the use of
     * `aad_tenant`, `aad_audience`, `aad_issuer`, `root_certificate` and `revoked_certificate`.
     * 
     */
    public String radiusServerSecret() {
        return this.radiusServerSecret;
    }
    /**
     * @return One or more `revoked_certificate` blocks which
     * are defined below.
     * This setting is incompatible with the use of
     * `aad_tenant`, `aad_audience`, `aad_issuer`, `radius_server_address`, and `radius_server_secret`.
     * 
     */
    public List<GetVirtualNetworkGatewayVpnClientConfigurationRevokedCertificate> revokedCertificates() {
        return this.revokedCertificates;
    }
    /**
     * @return One or more `root_certificate` blocks which are
     * defined below. These root certificates are used to sign the client certificate
     * used by the VPN clients to connect to the gateway.
     * This setting is incompatible with the use of
     * `aad_tenant`, `aad_audience`, `aad_issuer`, `radius_server_address`, and `radius_server_secret`.
     * 
     */
    public List<GetVirtualNetworkGatewayVpnClientConfigurationRootCertificate> rootCertificates() {
        return this.rootCertificates;
    }
    /**
     * @return List of the protocols supported by the vpn client.
     * The supported values are `SSTP`, `IkeV2` and `OpenVPN`.
     * 
     */
    public List<String> vpnClientProtocols() {
        return this.vpnClientProtocols;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVirtualNetworkGatewayVpnClientConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String aadAudience;
        private String aadIssuer;
        private String aadTenant;
        private List<String> addressSpaces;
        private String radiusServerAddress;
        private String radiusServerSecret;
        private List<GetVirtualNetworkGatewayVpnClientConfigurationRevokedCertificate> revokedCertificates;
        private List<GetVirtualNetworkGatewayVpnClientConfigurationRootCertificate> rootCertificates;
        private List<String> vpnClientProtocols;
        public Builder() {}
        public Builder(GetVirtualNetworkGatewayVpnClientConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aadAudience = defaults.aadAudience;
    	      this.aadIssuer = defaults.aadIssuer;
    	      this.aadTenant = defaults.aadTenant;
    	      this.addressSpaces = defaults.addressSpaces;
    	      this.radiusServerAddress = defaults.radiusServerAddress;
    	      this.radiusServerSecret = defaults.radiusServerSecret;
    	      this.revokedCertificates = defaults.revokedCertificates;
    	      this.rootCertificates = defaults.rootCertificates;
    	      this.vpnClientProtocols = defaults.vpnClientProtocols;
        }

        @CustomType.Setter
        public Builder aadAudience(String aadAudience) {
            if (aadAudience == null) {
              throw new MissingRequiredPropertyException("GetVirtualNetworkGatewayVpnClientConfiguration", "aadAudience");
            }
            this.aadAudience = aadAudience;
            return this;
        }
        @CustomType.Setter
        public Builder aadIssuer(String aadIssuer) {
            if (aadIssuer == null) {
              throw new MissingRequiredPropertyException("GetVirtualNetworkGatewayVpnClientConfiguration", "aadIssuer");
            }
            this.aadIssuer = aadIssuer;
            return this;
        }
        @CustomType.Setter
        public Builder aadTenant(String aadTenant) {
            if (aadTenant == null) {
              throw new MissingRequiredPropertyException("GetVirtualNetworkGatewayVpnClientConfiguration", "aadTenant");
            }
            this.aadTenant = aadTenant;
            return this;
        }
        @CustomType.Setter
        public Builder addressSpaces(List<String> addressSpaces) {
            if (addressSpaces == null) {
              throw new MissingRequiredPropertyException("GetVirtualNetworkGatewayVpnClientConfiguration", "addressSpaces");
            }
            this.addressSpaces = addressSpaces;
            return this;
        }
        public Builder addressSpaces(String... addressSpaces) {
            return addressSpaces(List.of(addressSpaces));
        }
        @CustomType.Setter
        public Builder radiusServerAddress(String radiusServerAddress) {
            if (radiusServerAddress == null) {
              throw new MissingRequiredPropertyException("GetVirtualNetworkGatewayVpnClientConfiguration", "radiusServerAddress");
            }
            this.radiusServerAddress = radiusServerAddress;
            return this;
        }
        @CustomType.Setter
        public Builder radiusServerSecret(String radiusServerSecret) {
            if (radiusServerSecret == null) {
              throw new MissingRequiredPropertyException("GetVirtualNetworkGatewayVpnClientConfiguration", "radiusServerSecret");
            }
            this.radiusServerSecret = radiusServerSecret;
            return this;
        }
        @CustomType.Setter
        public Builder revokedCertificates(List<GetVirtualNetworkGatewayVpnClientConfigurationRevokedCertificate> revokedCertificates) {
            if (revokedCertificates == null) {
              throw new MissingRequiredPropertyException("GetVirtualNetworkGatewayVpnClientConfiguration", "revokedCertificates");
            }
            this.revokedCertificates = revokedCertificates;
            return this;
        }
        public Builder revokedCertificates(GetVirtualNetworkGatewayVpnClientConfigurationRevokedCertificate... revokedCertificates) {
            return revokedCertificates(List.of(revokedCertificates));
        }
        @CustomType.Setter
        public Builder rootCertificates(List<GetVirtualNetworkGatewayVpnClientConfigurationRootCertificate> rootCertificates) {
            if (rootCertificates == null) {
              throw new MissingRequiredPropertyException("GetVirtualNetworkGatewayVpnClientConfiguration", "rootCertificates");
            }
            this.rootCertificates = rootCertificates;
            return this;
        }
        public Builder rootCertificates(GetVirtualNetworkGatewayVpnClientConfigurationRootCertificate... rootCertificates) {
            return rootCertificates(List.of(rootCertificates));
        }
        @CustomType.Setter
        public Builder vpnClientProtocols(List<String> vpnClientProtocols) {
            if (vpnClientProtocols == null) {
              throw new MissingRequiredPropertyException("GetVirtualNetworkGatewayVpnClientConfiguration", "vpnClientProtocols");
            }
            this.vpnClientProtocols = vpnClientProtocols;
            return this;
        }
        public Builder vpnClientProtocols(String... vpnClientProtocols) {
            return vpnClientProtocols(List.of(vpnClientProtocols));
        }
        public GetVirtualNetworkGatewayVpnClientConfiguration build() {
            final var _resultValue = new GetVirtualNetworkGatewayVpnClientConfiguration();
            _resultValue.aadAudience = aadAudience;
            _resultValue.aadIssuer = aadIssuer;
            _resultValue.aadTenant = aadTenant;
            _resultValue.addressSpaces = addressSpaces;
            _resultValue.radiusServerAddress = radiusServerAddress;
            _resultValue.radiusServerSecret = radiusServerSecret;
            _resultValue.revokedCertificates = revokedCertificates;
            _resultValue.rootCertificates = rootCertificates;
            _resultValue.vpnClientProtocols = vpnClientProtocols;
            return _resultValue;
        }
    }
}
