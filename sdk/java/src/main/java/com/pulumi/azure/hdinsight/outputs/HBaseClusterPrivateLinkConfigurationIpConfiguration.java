// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.hdinsight.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class HBaseClusterPrivateLinkConfigurationIpConfiguration {
    /**
     * @return Specifies the name for this HDInsight HBase Cluster. Changing this forces a new resource to be created.
     * 
     */
    private String name;
    /**
     * @return Indicates whether this IP configuration is primary.
     * 
     */
    private @Nullable Boolean primary;
    /**
     * @return The private IP address of the IP configuration.
     * 
     */
    private @Nullable String privateIpAddress;
    /**
     * @return The private IP allocation method. The only possible value now is `Dynamic`.
     * 
     */
    private @Nullable String privateIpAllocationMethod;
    private @Nullable String subnetId;

    private HBaseClusterPrivateLinkConfigurationIpConfiguration() {}
    /**
     * @return Specifies the name for this HDInsight HBase Cluster. Changing this forces a new resource to be created.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Indicates whether this IP configuration is primary.
     * 
     */
    public Optional<Boolean> primary() {
        return Optional.ofNullable(this.primary);
    }
    /**
     * @return The private IP address of the IP configuration.
     * 
     */
    public Optional<String> privateIpAddress() {
        return Optional.ofNullable(this.privateIpAddress);
    }
    /**
     * @return The private IP allocation method. The only possible value now is `Dynamic`.
     * 
     */
    public Optional<String> privateIpAllocationMethod() {
        return Optional.ofNullable(this.privateIpAllocationMethod);
    }
    public Optional<String> subnetId() {
        return Optional.ofNullable(this.subnetId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HBaseClusterPrivateLinkConfigurationIpConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String name;
        private @Nullable Boolean primary;
        private @Nullable String privateIpAddress;
        private @Nullable String privateIpAllocationMethod;
        private @Nullable String subnetId;
        public Builder() {}
        public Builder(HBaseClusterPrivateLinkConfigurationIpConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.name = defaults.name;
    	      this.primary = defaults.primary;
    	      this.privateIpAddress = defaults.privateIpAddress;
    	      this.privateIpAllocationMethod = defaults.privateIpAllocationMethod;
    	      this.subnetId = defaults.subnetId;
        }

        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("HBaseClusterPrivateLinkConfigurationIpConfiguration", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder primary(@Nullable Boolean primary) {

            this.primary = primary;
            return this;
        }
        @CustomType.Setter
        public Builder privateIpAddress(@Nullable String privateIpAddress) {

            this.privateIpAddress = privateIpAddress;
            return this;
        }
        @CustomType.Setter
        public Builder privateIpAllocationMethod(@Nullable String privateIpAllocationMethod) {

            this.privateIpAllocationMethod = privateIpAllocationMethod;
            return this;
        }
        @CustomType.Setter
        public Builder subnetId(@Nullable String subnetId) {

            this.subnetId = subnetId;
            return this;
        }
        public HBaseClusterPrivateLinkConfigurationIpConfiguration build() {
            final var _resultValue = new HBaseClusterPrivateLinkConfigurationIpConfiguration();
            _resultValue.name = name;
            _resultValue.primary = primary;
            _resultValue.privateIpAddress = privateIpAddress;
            _resultValue.privateIpAllocationMethod = privateIpAllocationMethod;
            _resultValue.subnetId = subnetId;
            return _resultValue;
        }
    }
}
