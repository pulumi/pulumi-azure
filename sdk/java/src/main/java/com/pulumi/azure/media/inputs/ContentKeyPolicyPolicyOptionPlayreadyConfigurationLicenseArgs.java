// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.media.inputs;

import com.pulumi.azure.media.inputs.ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArgs Empty = new ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArgs();

    /**
     * A flag indicating whether test devices can use the license.
     * 
     */
    @Import(name="allowTestDevices")
    private @Nullable Output<Boolean> allowTestDevices;

    /**
     * @return A flag indicating whether test devices can use the license.
     * 
     */
    public Optional<Output<Boolean>> allowTestDevices() {
        return Optional.ofNullable(this.allowTestDevices);
    }

    /**
     * The begin date of license.
     * 
     */
    @Import(name="beginDate")
    private @Nullable Output<String> beginDate;

    /**
     * @return The begin date of license.
     * 
     */
    public Optional<Output<String>> beginDate() {
        return Optional.ofNullable(this.beginDate);
    }

    /**
     * Specifies that the content key ID is in the PlayReady header.
     * 
     */
    @Import(name="contentKeyLocationFromHeaderEnabled")
    private @Nullable Output<Boolean> contentKeyLocationFromHeaderEnabled;

    /**
     * @return Specifies that the content key ID is in the PlayReady header.
     * 
     */
    public Optional<Output<Boolean>> contentKeyLocationFromHeaderEnabled() {
        return Optional.ofNullable(this.contentKeyLocationFromHeaderEnabled);
    }

    /**
     * The content key ID. Specifies that the content key ID is specified in the PlayReady configuration.
     * 
     */
    @Import(name="contentKeyLocationFromKeyId")
    private @Nullable Output<String> contentKeyLocationFromKeyId;

    /**
     * @return The content key ID. Specifies that the content key ID is specified in the PlayReady configuration.
     * 
     */
    public Optional<Output<String>> contentKeyLocationFromKeyId() {
        return Optional.ofNullable(this.contentKeyLocationFromKeyId);
    }

    /**
     * The PlayReady content type. Supported values are `UltraVioletDownload`, `UltraVioletStreaming` or `Unspecified`.
     * 
     */
    @Import(name="contentType")
    private @Nullable Output<String> contentType;

    /**
     * @return The PlayReady content type. Supported values are `UltraVioletDownload`, `UltraVioletStreaming` or `Unspecified`.
     * 
     */
    public Optional<Output<String>> contentType() {
        return Optional.ofNullable(this.contentType);
    }

    /**
     * The expiration date of license.
     * 
     */
    @Import(name="expirationDate")
    private @Nullable Output<String> expirationDate;

    /**
     * @return The expiration date of license.
     * 
     */
    public Optional<Output<String>> expirationDate() {
        return Optional.ofNullable(this.expirationDate);
    }

    /**
     * The grace period of license.
     * 
     */
    @Import(name="gracePeriod")
    private @Nullable Output<String> gracePeriod;

    /**
     * @return The grace period of license.
     * 
     */
    public Optional<Output<String>> gracePeriod() {
        return Optional.ofNullable(this.gracePeriod);
    }

    /**
     * The license type. Supported values are `NonPersistent` or `Persistent`.
     * 
     */
    @Import(name="licenseType")
    private @Nullable Output<String> licenseType;

    /**
     * @return The license type. Supported values are `NonPersistent` or `Persistent`.
     * 
     */
    public Optional<Output<String>> licenseType() {
        return Optional.ofNullable(this.licenseType);
    }

    /**
     * A `play_right` block as defined above.
     * 
     */
    @Import(name="playRight")
    private @Nullable Output<ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightArgs> playRight;

    /**
     * @return A `play_right` block as defined above.
     * 
     */
    public Optional<Output<ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightArgs>> playRight() {
        return Optional.ofNullable(this.playRight);
    }

    /**
     * The relative begin date of license.
     * 
     */
    @Import(name="relativeBeginDate")
    private @Nullable Output<String> relativeBeginDate;

    /**
     * @return The relative begin date of license.
     * 
     */
    public Optional<Output<String>> relativeBeginDate() {
        return Optional.ofNullable(this.relativeBeginDate);
    }

    /**
     * The relative expiration date of license.
     * 
     */
    @Import(name="relativeExpirationDate")
    private @Nullable Output<String> relativeExpirationDate;

    /**
     * @return The relative expiration date of license.
     * 
     */
    public Optional<Output<String>> relativeExpirationDate() {
        return Optional.ofNullable(this.relativeExpirationDate);
    }

    private ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArgs() {}

    private ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArgs(ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArgs $) {
        this.allowTestDevices = $.allowTestDevices;
        this.beginDate = $.beginDate;
        this.contentKeyLocationFromHeaderEnabled = $.contentKeyLocationFromHeaderEnabled;
        this.contentKeyLocationFromKeyId = $.contentKeyLocationFromKeyId;
        this.contentType = $.contentType;
        this.expirationDate = $.expirationDate;
        this.gracePeriod = $.gracePeriod;
        this.licenseType = $.licenseType;
        this.playRight = $.playRight;
        this.relativeBeginDate = $.relativeBeginDate;
        this.relativeExpirationDate = $.relativeExpirationDate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArgs $;

        public Builder() {
            $ = new ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArgs();
        }

        public Builder(ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArgs defaults) {
            $ = new ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowTestDevices A flag indicating whether test devices can use the license.
         * 
         * @return builder
         * 
         */
        public Builder allowTestDevices(@Nullable Output<Boolean> allowTestDevices) {
            $.allowTestDevices = allowTestDevices;
            return this;
        }

        /**
         * @param allowTestDevices A flag indicating whether test devices can use the license.
         * 
         * @return builder
         * 
         */
        public Builder allowTestDevices(Boolean allowTestDevices) {
            return allowTestDevices(Output.of(allowTestDevices));
        }

        /**
         * @param beginDate The begin date of license.
         * 
         * @return builder
         * 
         */
        public Builder beginDate(@Nullable Output<String> beginDate) {
            $.beginDate = beginDate;
            return this;
        }

        /**
         * @param beginDate The begin date of license.
         * 
         * @return builder
         * 
         */
        public Builder beginDate(String beginDate) {
            return beginDate(Output.of(beginDate));
        }

        /**
         * @param contentKeyLocationFromHeaderEnabled Specifies that the content key ID is in the PlayReady header.
         * 
         * @return builder
         * 
         */
        public Builder contentKeyLocationFromHeaderEnabled(@Nullable Output<Boolean> contentKeyLocationFromHeaderEnabled) {
            $.contentKeyLocationFromHeaderEnabled = contentKeyLocationFromHeaderEnabled;
            return this;
        }

        /**
         * @param contentKeyLocationFromHeaderEnabled Specifies that the content key ID is in the PlayReady header.
         * 
         * @return builder
         * 
         */
        public Builder contentKeyLocationFromHeaderEnabled(Boolean contentKeyLocationFromHeaderEnabled) {
            return contentKeyLocationFromHeaderEnabled(Output.of(contentKeyLocationFromHeaderEnabled));
        }

        /**
         * @param contentKeyLocationFromKeyId The content key ID. Specifies that the content key ID is specified in the PlayReady configuration.
         * 
         * @return builder
         * 
         */
        public Builder contentKeyLocationFromKeyId(@Nullable Output<String> contentKeyLocationFromKeyId) {
            $.contentKeyLocationFromKeyId = contentKeyLocationFromKeyId;
            return this;
        }

        /**
         * @param contentKeyLocationFromKeyId The content key ID. Specifies that the content key ID is specified in the PlayReady configuration.
         * 
         * @return builder
         * 
         */
        public Builder contentKeyLocationFromKeyId(String contentKeyLocationFromKeyId) {
            return contentKeyLocationFromKeyId(Output.of(contentKeyLocationFromKeyId));
        }

        /**
         * @param contentType The PlayReady content type. Supported values are `UltraVioletDownload`, `UltraVioletStreaming` or `Unspecified`.
         * 
         * @return builder
         * 
         */
        public Builder contentType(@Nullable Output<String> contentType) {
            $.contentType = contentType;
            return this;
        }

        /**
         * @param contentType The PlayReady content type. Supported values are `UltraVioletDownload`, `UltraVioletStreaming` or `Unspecified`.
         * 
         * @return builder
         * 
         */
        public Builder contentType(String contentType) {
            return contentType(Output.of(contentType));
        }

        /**
         * @param expirationDate The expiration date of license.
         * 
         * @return builder
         * 
         */
        public Builder expirationDate(@Nullable Output<String> expirationDate) {
            $.expirationDate = expirationDate;
            return this;
        }

        /**
         * @param expirationDate The expiration date of license.
         * 
         * @return builder
         * 
         */
        public Builder expirationDate(String expirationDate) {
            return expirationDate(Output.of(expirationDate));
        }

        /**
         * @param gracePeriod The grace period of license.
         * 
         * @return builder
         * 
         */
        public Builder gracePeriod(@Nullable Output<String> gracePeriod) {
            $.gracePeriod = gracePeriod;
            return this;
        }

        /**
         * @param gracePeriod The grace period of license.
         * 
         * @return builder
         * 
         */
        public Builder gracePeriod(String gracePeriod) {
            return gracePeriod(Output.of(gracePeriod));
        }

        /**
         * @param licenseType The license type. Supported values are `NonPersistent` or `Persistent`.
         * 
         * @return builder
         * 
         */
        public Builder licenseType(@Nullable Output<String> licenseType) {
            $.licenseType = licenseType;
            return this;
        }

        /**
         * @param licenseType The license type. Supported values are `NonPersistent` or `Persistent`.
         * 
         * @return builder
         * 
         */
        public Builder licenseType(String licenseType) {
            return licenseType(Output.of(licenseType));
        }

        /**
         * @param playRight A `play_right` block as defined above.
         * 
         * @return builder
         * 
         */
        public Builder playRight(@Nullable Output<ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightArgs> playRight) {
            $.playRight = playRight;
            return this;
        }

        /**
         * @param playRight A `play_right` block as defined above.
         * 
         * @return builder
         * 
         */
        public Builder playRight(ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightArgs playRight) {
            return playRight(Output.of(playRight));
        }

        /**
         * @param relativeBeginDate The relative begin date of license.
         * 
         * @return builder
         * 
         */
        public Builder relativeBeginDate(@Nullable Output<String> relativeBeginDate) {
            $.relativeBeginDate = relativeBeginDate;
            return this;
        }

        /**
         * @param relativeBeginDate The relative begin date of license.
         * 
         * @return builder
         * 
         */
        public Builder relativeBeginDate(String relativeBeginDate) {
            return relativeBeginDate(Output.of(relativeBeginDate));
        }

        /**
         * @param relativeExpirationDate The relative expiration date of license.
         * 
         * @return builder
         * 
         */
        public Builder relativeExpirationDate(@Nullable Output<String> relativeExpirationDate) {
            $.relativeExpirationDate = relativeExpirationDate;
            return this;
        }

        /**
         * @param relativeExpirationDate The relative expiration date of license.
         * 
         * @return builder
         * 
         */
        public Builder relativeExpirationDate(String relativeExpirationDate) {
            return relativeExpirationDate(Output.of(relativeExpirationDate));
        }

        public ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArgs build() {
            return $;
        }
    }

}
