// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.dashboard.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GrafanaSmtpArgs extends com.pulumi.resources.ResourceArgs {

    public static final GrafanaSmtpArgs Empty = new GrafanaSmtpArgs();

    /**
     * Whether to enable the smtp setting of the Grafana instance. Defaults to `false`.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether to enable the smtp setting of the Grafana instance. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Address used when sending emails.
     * 
     */
    @Import(name="fromAddress", required=true)
    private Output<String> fromAddress;

    /**
     * @return Address used when sending emails.
     * 
     */
    public Output<String> fromAddress() {
        return this.fromAddress;
    }

    /**
     * Name used when sending emails. Defaults to `Azure Managed Grafana Notification`.
     * 
     */
    @Import(name="fromName")
    private @Nullable Output<String> fromName;

    /**
     * @return Name used when sending emails. Defaults to `Azure Managed Grafana Notification`.
     * 
     */
    public Optional<Output<String>> fromName() {
        return Optional.ofNullable(this.fromName);
    }

    /**
     * SMTP server hostname with port, e.g. test.email.net:587
     * 
     */
    @Import(name="host", required=true)
    private Output<String> host;

    /**
     * @return SMTP server hostname with port, e.g. test.email.net:587
     * 
     */
    public Output<String> host() {
        return this.host;
    }

    /**
     * Password of SMTP authentication.
     * *
     * 
     */
    @Import(name="password", required=true)
    private Output<String> password;

    /**
     * @return Password of SMTP authentication.
     * *
     * 
     */
    public Output<String> password() {
        return this.password;
    }

    /**
     * Whether to use TLS when connecting to SMTP server. Possible values are `OpportunisticStartTLS`, `NoStartTLS`, `MandatoryStartTLS`.
     * 
     */
    @Import(name="startTlsPolicy", required=true)
    private Output<String> startTlsPolicy;

    /**
     * @return Whether to use TLS when connecting to SMTP server. Possible values are `OpportunisticStartTLS`, `NoStartTLS`, `MandatoryStartTLS`.
     * 
     */
    public Output<String> startTlsPolicy() {
        return this.startTlsPolicy;
    }

    /**
     * User of SMTP authentication.
     * 
     */
    @Import(name="user", required=true)
    private Output<String> user;

    /**
     * @return User of SMTP authentication.
     * 
     */
    public Output<String> user() {
        return this.user;
    }

    /**
     * Whether verify SSL for SMTP server. Defaults to `false`.
     * 
     */
    @Import(name="verificationSkipEnabled")
    private @Nullable Output<Boolean> verificationSkipEnabled;

    /**
     * @return Whether verify SSL for SMTP server. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> verificationSkipEnabled() {
        return Optional.ofNullable(this.verificationSkipEnabled);
    }

    private GrafanaSmtpArgs() {}

    private GrafanaSmtpArgs(GrafanaSmtpArgs $) {
        this.enabled = $.enabled;
        this.fromAddress = $.fromAddress;
        this.fromName = $.fromName;
        this.host = $.host;
        this.password = $.password;
        this.startTlsPolicy = $.startTlsPolicy;
        this.user = $.user;
        this.verificationSkipEnabled = $.verificationSkipEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GrafanaSmtpArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GrafanaSmtpArgs $;

        public Builder() {
            $ = new GrafanaSmtpArgs();
        }

        public Builder(GrafanaSmtpArgs defaults) {
            $ = new GrafanaSmtpArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled Whether to enable the smtp setting of the Grafana instance. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether to enable the smtp setting of the Grafana instance. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param fromAddress Address used when sending emails.
         * 
         * @return builder
         * 
         */
        public Builder fromAddress(Output<String> fromAddress) {
            $.fromAddress = fromAddress;
            return this;
        }

        /**
         * @param fromAddress Address used when sending emails.
         * 
         * @return builder
         * 
         */
        public Builder fromAddress(String fromAddress) {
            return fromAddress(Output.of(fromAddress));
        }

        /**
         * @param fromName Name used when sending emails. Defaults to `Azure Managed Grafana Notification`.
         * 
         * @return builder
         * 
         */
        public Builder fromName(@Nullable Output<String> fromName) {
            $.fromName = fromName;
            return this;
        }

        /**
         * @param fromName Name used when sending emails. Defaults to `Azure Managed Grafana Notification`.
         * 
         * @return builder
         * 
         */
        public Builder fromName(String fromName) {
            return fromName(Output.of(fromName));
        }

        /**
         * @param host SMTP server hostname with port, e.g. test.email.net:587
         * 
         * @return builder
         * 
         */
        public Builder host(Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host SMTP server hostname with port, e.g. test.email.net:587
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param password Password of SMTP authentication.
         * *
         * 
         * @return builder
         * 
         */
        public Builder password(Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password Password of SMTP authentication.
         * *
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param startTlsPolicy Whether to use TLS when connecting to SMTP server. Possible values are `OpportunisticStartTLS`, `NoStartTLS`, `MandatoryStartTLS`.
         * 
         * @return builder
         * 
         */
        public Builder startTlsPolicy(Output<String> startTlsPolicy) {
            $.startTlsPolicy = startTlsPolicy;
            return this;
        }

        /**
         * @param startTlsPolicy Whether to use TLS when connecting to SMTP server. Possible values are `OpportunisticStartTLS`, `NoStartTLS`, `MandatoryStartTLS`.
         * 
         * @return builder
         * 
         */
        public Builder startTlsPolicy(String startTlsPolicy) {
            return startTlsPolicy(Output.of(startTlsPolicy));
        }

        /**
         * @param user User of SMTP authentication.
         * 
         * @return builder
         * 
         */
        public Builder user(Output<String> user) {
            $.user = user;
            return this;
        }

        /**
         * @param user User of SMTP authentication.
         * 
         * @return builder
         * 
         */
        public Builder user(String user) {
            return user(Output.of(user));
        }

        /**
         * @param verificationSkipEnabled Whether verify SSL for SMTP server. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder verificationSkipEnabled(@Nullable Output<Boolean> verificationSkipEnabled) {
            $.verificationSkipEnabled = verificationSkipEnabled;
            return this;
        }

        /**
         * @param verificationSkipEnabled Whether verify SSL for SMTP server. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder verificationSkipEnabled(Boolean verificationSkipEnabled) {
            return verificationSkipEnabled(Output.of(verificationSkipEnabled));
        }

        public GrafanaSmtpArgs build() {
            if ($.fromAddress == null) {
                throw new MissingRequiredPropertyException("GrafanaSmtpArgs", "fromAddress");
            }
            if ($.host == null) {
                throw new MissingRequiredPropertyException("GrafanaSmtpArgs", "host");
            }
            if ($.password == null) {
                throw new MissingRequiredPropertyException("GrafanaSmtpArgs", "password");
            }
            if ($.startTlsPolicy == null) {
                throw new MissingRequiredPropertyException("GrafanaSmtpArgs", "startTlsPolicy");
            }
            if ($.user == null) {
                throw new MissingRequiredPropertyException("GrafanaSmtpArgs", "user");
            }
            return $;
        }
    }

}
