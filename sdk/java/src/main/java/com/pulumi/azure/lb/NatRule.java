// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.lb;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.lb.NatRuleArgs;
import com.pulumi.azure.lb.inputs.NatRuleState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a Load Balancer NAT Rule.
 * 
 * &gt; **Note:** This resource cannot be used with with virtual machine scale sets, instead use the `azure.lb.NatPool` resource.
 * 
 * &gt; **Note:** When using this resource, the Load Balancer needs to have a FrontEnd IP Configuration Attached
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.network.PublicIp;
 * import com.pulumi.azure.network.PublicIpArgs;
 * import com.pulumi.azure.lb.LoadBalancer;
 * import com.pulumi.azure.lb.LoadBalancerArgs;
 * import com.pulumi.azure.lb.inputs.LoadBalancerFrontendIpConfigurationArgs;
 * import com.pulumi.azure.lb.BackendAddressPool;
 * import com.pulumi.azure.lb.BackendAddressPoolArgs;
 * import com.pulumi.azure.lb.NatRule;
 * import com.pulumi.azure.lb.NatRuleArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new ResourceGroup("example", ResourceGroupArgs.builder()
 *             .name("LoadBalancerRG")
 *             .location("West Europe")
 *             .build());
 * 
 *         var examplePublicIp = new PublicIp("examplePublicIp", PublicIpArgs.builder()
 *             .name("PublicIPForLB")
 *             .location("West US")
 *             .resourceGroupName(example.name())
 *             .allocationMethod("Static")
 *             .build());
 * 
 *         var exampleLoadBalancer = new LoadBalancer("exampleLoadBalancer", LoadBalancerArgs.builder()
 *             .name("TestLoadBalancer")
 *             .location("West US")
 *             .resourceGroupName(example.name())
 *             .frontendIpConfigurations(LoadBalancerFrontendIpConfigurationArgs.builder()
 *                 .name("PublicIPAddress")
 *                 .publicIpAddressId(examplePublicIp.id())
 *                 .build())
 *             .build());
 * 
 *         var exampleBackendAddressPool = new BackendAddressPool("exampleBackendAddressPool", BackendAddressPoolArgs.builder()
 *             .loadbalancerId(exampleLoadBalancer.id())
 *             .name("be")
 *             .build());
 * 
 *         var exampleNatRule = new NatRule("exampleNatRule", NatRuleArgs.builder()
 *             .resourceGroupName(example.name())
 *             .loadbalancerId(exampleLoadBalancer.id())
 *             .name("RDPAccess")
 *             .protocol("Tcp")
 *             .frontendPort(3389)
 *             .backendPort(3389)
 *             .frontendIpConfigurationName("PublicIPAddress")
 *             .build());
 * 
 *         var example1 = new NatRule("example1", NatRuleArgs.builder()
 *             .resourceGroupName(example.name())
 *             .loadbalancerId(exampleLoadBalancer.id())
 *             .name("RDPAccess")
 *             .protocol("Tcp")
 *             .frontendPortStart(3000)
 *             .frontendPortEnd(3389)
 *             .backendPort(3389)
 *             .backendAddressPoolId(exampleBackendAddressPool.id())
 *             .frontendIpConfigurationName("PublicIPAddress")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## API Providers
 * 
 * &lt;!-- This section is generated, changes will be overwritten --&gt;
 * This resource uses the following Azure API Providers:
 * 
 * * `Microsoft.Network` - 2023-09-01
 * 
 * ## Import
 * 
 * Load Balancer NAT Rules can be imported using the `resource id`, e.g.
 * 
 * ```sh
 * $ pulumi import azure:lb/natRule:NatRule example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Network/loadBalancers/lb1/inboundNatRules/rule1
 * ```
 * 
 */
@ResourceType(type="azure:lb/natRule:NatRule")
public class NatRule extends com.pulumi.resources.CustomResource {
    /**
     * Specifies a reference to backendAddressPool resource.
     * 
     */
    @Export(name="backendAddressPoolId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> backendAddressPoolId;

    /**
     * @return Specifies a reference to backendAddressPool resource.
     * 
     */
    public Output<Optional<String>> backendAddressPoolId() {
        return Codegen.optional(this.backendAddressPoolId);
    }
    @Export(name="backendIpConfigurationId", refs={String.class}, tree="[0]")
    private Output<String> backendIpConfigurationId;

    public Output<String> backendIpConfigurationId() {
        return this.backendIpConfigurationId;
    }
    /**
     * The port used for internal connections on the endpoint. Possible values range between 1 and 65535, inclusive.
     * 
     */
    @Export(name="backendPort", refs={Integer.class}, tree="[0]")
    private Output<Integer> backendPort;

    /**
     * @return The port used for internal connections on the endpoint. Possible values range between 1 and 65535, inclusive.
     * 
     */
    public Output<Integer> backendPort() {
        return this.backendPort;
    }
    /**
     * @deprecated
     * This field is deprecated in favour of `floating_ip_enabled` and will be removed in version 5.0 of the provider.
     * 
     */
    @Deprecated /* This field is deprecated in favour of `floating_ip_enabled` and will be removed in version 5.0 of the provider. */
    @Export(name="enableFloatingIp", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enableFloatingIp;

    public Output<Boolean> enableFloatingIp() {
        return this.enableFloatingIp;
    }
    /**
     * @deprecated
     * This field is deprecated in favour of `tcp_reset_enabled` and will be removed in version 5.0 of the provider.
     * 
     */
    @Deprecated /* This field is deprecated in favour of `tcp_reset_enabled` and will be removed in version 5.0 of the provider. */
    @Export(name="enableTcpReset", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enableTcpReset;

    public Output<Boolean> enableTcpReset() {
        return this.enableTcpReset;
    }
    /**
     * Are the Floating IPs enabled for this Load Balancer Rule? A &#34;floating&#34; IP is reassigned to a secondary server in case the primary server fails. Required to configure a SQL AlwaysOn Availability Group. Defaults to `false`.
     * 
     */
    @Export(name="floatingIpEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> floatingIpEnabled;

    /**
     * @return Are the Floating IPs enabled for this Load Balancer Rule? A &#34;floating&#34; IP is reassigned to a secondary server in case the primary server fails. Required to configure a SQL AlwaysOn Availability Group. Defaults to `false`.
     * 
     */
    public Output<Boolean> floatingIpEnabled() {
        return this.floatingIpEnabled;
    }
    @Export(name="frontendIpConfigurationId", refs={String.class}, tree="[0]")
    private Output<String> frontendIpConfigurationId;

    public Output<String> frontendIpConfigurationId() {
        return this.frontendIpConfigurationId;
    }
    /**
     * The name of the frontend IP configuration exposing this rule.
     * 
     */
    @Export(name="frontendIpConfigurationName", refs={String.class}, tree="[0]")
    private Output<String> frontendIpConfigurationName;

    /**
     * @return The name of the frontend IP configuration exposing this rule.
     * 
     */
    public Output<String> frontendIpConfigurationName() {
        return this.frontendIpConfigurationName;
    }
    /**
     * The port for the external endpoint. Port numbers for each Rule must be unique within the Load Balancer. Possible values range between 1 and 65534, inclusive.
     * 
     */
    @Export(name="frontendPort", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> frontendPort;

    /**
     * @return The port for the external endpoint. Port numbers for each Rule must be unique within the Load Balancer. Possible values range between 1 and 65534, inclusive.
     * 
     */
    public Output<Optional<Integer>> frontendPort() {
        return Codegen.optional(this.frontendPort);
    }
    /**
     * The port range end for the external endpoint. This property is used together with BackendAddressPool and FrontendPortRangeStart. Individual inbound NAT rule port mappings will be created for each backend address from BackendAddressPool. Acceptable values range from 1 to 65534, inclusive.
     * 
     */
    @Export(name="frontendPortEnd", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> frontendPortEnd;

    /**
     * @return The port range end for the external endpoint. This property is used together with BackendAddressPool and FrontendPortRangeStart. Individual inbound NAT rule port mappings will be created for each backend address from BackendAddressPool. Acceptable values range from 1 to 65534, inclusive.
     * 
     */
    public Output<Optional<Integer>> frontendPortEnd() {
        return Codegen.optional(this.frontendPortEnd);
    }
    /**
     * The port range start for the external endpoint. This property is used together with BackendAddressPool and FrontendPortRangeEnd. Individual inbound NAT rule port mappings will be created for each backend address from BackendAddressPool. Acceptable values range from 1 to 65534, inclusive.
     * 
     */
    @Export(name="frontendPortStart", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> frontendPortStart;

    /**
     * @return The port range start for the external endpoint. This property is used together with BackendAddressPool and FrontendPortRangeEnd. Individual inbound NAT rule port mappings will be created for each backend address from BackendAddressPool. Acceptable values range from 1 to 65534, inclusive.
     * 
     */
    public Output<Optional<Integer>> frontendPortStart() {
        return Codegen.optional(this.frontendPortStart);
    }
    /**
     * Specifies the idle timeout in minutes for TCP connections. Valid values are between `4` and `30` minutes. Defaults to `4` minutes.
     * 
     */
    @Export(name="idleTimeoutInMinutes", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> idleTimeoutInMinutes;

    /**
     * @return Specifies the idle timeout in minutes for TCP connections. Valid values are between `4` and `30` minutes. Defaults to `4` minutes.
     * 
     */
    public Output<Optional<Integer>> idleTimeoutInMinutes() {
        return Codegen.optional(this.idleTimeoutInMinutes);
    }
    /**
     * The ID of the Load Balancer in which to create the NAT Rule. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="loadbalancerId", refs={String.class}, tree="[0]")
    private Output<String> loadbalancerId;

    /**
     * @return The ID of the Load Balancer in which to create the NAT Rule. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> loadbalancerId() {
        return this.loadbalancerId;
    }
    /**
     * Specifies the name of the NAT Rule. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Specifies the name of the NAT Rule. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The transport protocol for the external endpoint. Possible values are `Udp`, `Tcp` or `All`.
     * 
     */
    @Export(name="protocol", refs={String.class}, tree="[0]")
    private Output<String> protocol;

    /**
     * @return The transport protocol for the external endpoint. Possible values are `Udp`, `Tcp` or `All`.
     * 
     */
    public Output<String> protocol() {
        return this.protocol;
    }
    /**
     * The name of the resource group in which to create the resource. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="resourceGroupName", refs={String.class}, tree="[0]")
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group in which to create the resource. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * Is TCP Reset enabled for this Load Balancer Rule?
     * 
     */
    @Export(name="tcpResetEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> tcpResetEnabled;

    /**
     * @return Is TCP Reset enabled for this Load Balancer Rule?
     * 
     */
    public Output<Boolean> tcpResetEnabled() {
        return this.tcpResetEnabled;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public NatRule(java.lang.String name) {
        this(name, NatRuleArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public NatRule(java.lang.String name, NatRuleArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public NatRule(java.lang.String name, NatRuleArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:lb/natRule:NatRule", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private NatRule(java.lang.String name, Output<java.lang.String> id, @Nullable NatRuleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:lb/natRule:NatRule", name, state, makeResourceOptions(options, id), false);
    }

    private static NatRuleArgs makeArgs(NatRuleArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? NatRuleArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static NatRule get(java.lang.String name, Output<java.lang.String> id, @Nullable NatRuleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new NatRule(name, id, state, options);
    }
}
