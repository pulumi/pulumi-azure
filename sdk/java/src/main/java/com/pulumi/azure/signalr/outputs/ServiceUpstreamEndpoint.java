// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.signalr.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ServiceUpstreamEndpoint {
    /**
     * @return The categories to match on, or `*` for all.
     * 
     */
    private List<String> categoryPatterns;
    /**
     * @return The events to match on, or `*` for all.
     * 
     */
    private List<String> eventPatterns;
    /**
     * @return The hubs to match on, or `*` for all.
     * 
     */
    private List<String> hubPatterns;
    /**
     * @return The upstream URL Template. This can be a url or a template such as `http://host.com/{hub}/api/{category}/{event}`.
     * 
     */
    private String urlTemplate;
    /**
     * @return Specifies the Managed Identity IDs to be assigned to this signalR upstream setting by using resource uuid as both system assigned and user assigned identity is supported.
     * 
     */
    private @Nullable String userAssignedIdentityId;

    private ServiceUpstreamEndpoint() {}
    /**
     * @return The categories to match on, or `*` for all.
     * 
     */
    public List<String> categoryPatterns() {
        return this.categoryPatterns;
    }
    /**
     * @return The events to match on, or `*` for all.
     * 
     */
    public List<String> eventPatterns() {
        return this.eventPatterns;
    }
    /**
     * @return The hubs to match on, or `*` for all.
     * 
     */
    public List<String> hubPatterns() {
        return this.hubPatterns;
    }
    /**
     * @return The upstream URL Template. This can be a url or a template such as `http://host.com/{hub}/api/{category}/{event}`.
     * 
     */
    public String urlTemplate() {
        return this.urlTemplate;
    }
    /**
     * @return Specifies the Managed Identity IDs to be assigned to this signalR upstream setting by using resource uuid as both system assigned and user assigned identity is supported.
     * 
     */
    public Optional<String> userAssignedIdentityId() {
        return Optional.ofNullable(this.userAssignedIdentityId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceUpstreamEndpoint defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> categoryPatterns;
        private List<String> eventPatterns;
        private List<String> hubPatterns;
        private String urlTemplate;
        private @Nullable String userAssignedIdentityId;
        public Builder() {}
        public Builder(ServiceUpstreamEndpoint defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.categoryPatterns = defaults.categoryPatterns;
    	      this.eventPatterns = defaults.eventPatterns;
    	      this.hubPatterns = defaults.hubPatterns;
    	      this.urlTemplate = defaults.urlTemplate;
    	      this.userAssignedIdentityId = defaults.userAssignedIdentityId;
        }

        @CustomType.Setter
        public Builder categoryPatterns(List<String> categoryPatterns) {
            if (categoryPatterns == null) {
              throw new MissingRequiredPropertyException("ServiceUpstreamEndpoint", "categoryPatterns");
            }
            this.categoryPatterns = categoryPatterns;
            return this;
        }
        public Builder categoryPatterns(String... categoryPatterns) {
            return categoryPatterns(List.of(categoryPatterns));
        }
        @CustomType.Setter
        public Builder eventPatterns(List<String> eventPatterns) {
            if (eventPatterns == null) {
              throw new MissingRequiredPropertyException("ServiceUpstreamEndpoint", "eventPatterns");
            }
            this.eventPatterns = eventPatterns;
            return this;
        }
        public Builder eventPatterns(String... eventPatterns) {
            return eventPatterns(List.of(eventPatterns));
        }
        @CustomType.Setter
        public Builder hubPatterns(List<String> hubPatterns) {
            if (hubPatterns == null) {
              throw new MissingRequiredPropertyException("ServiceUpstreamEndpoint", "hubPatterns");
            }
            this.hubPatterns = hubPatterns;
            return this;
        }
        public Builder hubPatterns(String... hubPatterns) {
            return hubPatterns(List.of(hubPatterns));
        }
        @CustomType.Setter
        public Builder urlTemplate(String urlTemplate) {
            if (urlTemplate == null) {
              throw new MissingRequiredPropertyException("ServiceUpstreamEndpoint", "urlTemplate");
            }
            this.urlTemplate = urlTemplate;
            return this;
        }
        @CustomType.Setter
        public Builder userAssignedIdentityId(@Nullable String userAssignedIdentityId) {

            this.userAssignedIdentityId = userAssignedIdentityId;
            return this;
        }
        public ServiceUpstreamEndpoint build() {
            final var _resultValue = new ServiceUpstreamEndpoint();
            _resultValue.categoryPatterns = categoryPatterns;
            _resultValue.eventPatterns = eventPatterns;
            _resultValue.hubPatterns = hubPatterns;
            _resultValue.urlTemplate = urlTemplate;
            _resultValue.userAssignedIdentityId = userAssignedIdentityId;
            return _resultValue;
        }
    }
}
