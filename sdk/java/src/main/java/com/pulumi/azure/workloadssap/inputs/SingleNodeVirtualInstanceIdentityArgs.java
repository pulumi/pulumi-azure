// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.workloadssap.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class SingleNodeVirtualInstanceIdentityArgs extends com.pulumi.resources.ResourceArgs {

    public static final SingleNodeVirtualInstanceIdentityArgs Empty = new SingleNodeVirtualInstanceIdentityArgs();

    /**
     * A list of User Assigned Managed Identity IDs to be assigned to this SAP Single Node Virtual Instance.
     * 
     */
    @Import(name="identityIds", required=true)
    private Output<List<String>> identityIds;

    /**
     * @return A list of User Assigned Managed Identity IDs to be assigned to this SAP Single Node Virtual Instance.
     * 
     */
    public Output<List<String>> identityIds() {
        return this.identityIds;
    }

    /**
     * The type of Managed Service Identity that should be configured on this SAP Single Node Virtual Instance. The only possible value is `UserAssigned`.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of Managed Service Identity that should be configured on this SAP Single Node Virtual Instance. The only possible value is `UserAssigned`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private SingleNodeVirtualInstanceIdentityArgs() {}

    private SingleNodeVirtualInstanceIdentityArgs(SingleNodeVirtualInstanceIdentityArgs $) {
        this.identityIds = $.identityIds;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SingleNodeVirtualInstanceIdentityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SingleNodeVirtualInstanceIdentityArgs $;

        public Builder() {
            $ = new SingleNodeVirtualInstanceIdentityArgs();
        }

        public Builder(SingleNodeVirtualInstanceIdentityArgs defaults) {
            $ = new SingleNodeVirtualInstanceIdentityArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param identityIds A list of User Assigned Managed Identity IDs to be assigned to this SAP Single Node Virtual Instance.
         * 
         * @return builder
         * 
         */
        public Builder identityIds(Output<List<String>> identityIds) {
            $.identityIds = identityIds;
            return this;
        }

        /**
         * @param identityIds A list of User Assigned Managed Identity IDs to be assigned to this SAP Single Node Virtual Instance.
         * 
         * @return builder
         * 
         */
        public Builder identityIds(List<String> identityIds) {
            return identityIds(Output.of(identityIds));
        }

        /**
         * @param identityIds A list of User Assigned Managed Identity IDs to be assigned to this SAP Single Node Virtual Instance.
         * 
         * @return builder
         * 
         */
        public Builder identityIds(String... identityIds) {
            return identityIds(List.of(identityIds));
        }

        /**
         * @param type The type of Managed Service Identity that should be configured on this SAP Single Node Virtual Instance. The only possible value is `UserAssigned`.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of Managed Service Identity that should be configured on this SAP Single Node Virtual Instance. The only possible value is `UserAssigned`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public SingleNodeVirtualInstanceIdentityArgs build() {
            if ($.identityIds == null) {
                throw new MissingRequiredPropertyException("SingleNodeVirtualInstanceIdentityArgs", "identityIds");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("SingleNodeVirtualInstanceIdentityArgs", "type");
            }
            return $;
        }
    }

}
