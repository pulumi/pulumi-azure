// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class LinuxVirtualMachineScaleSetDataDisk {
    /**
     * @return The type of Caching which should be used for this Data Disk. Possible values are `None`, `ReadOnly` and `ReadWrite`.
     * 
     */
    private String caching;
    /**
     * @return The create option which should be used for this Data Disk. Possible values are `Empty` and `FromImage`. Defaults to `Empty`. (`FromImage` should only be used if the source image includes data disks).
     * 
     */
    private @Nullable String createOption;
    /**
     * @return The ID of the Disk Encryption Set which should be used to encrypt this Data Disk. Changing this forces a new resource to be created.
     * 
     */
    private @Nullable String diskEncryptionSetId;
    /**
     * @return The size of the Data Disk which should be created.
     * 
     */
    private Integer diskSizeGb;
    /**
     * @return The Logical Unit Number of the Data Disk, which must be unique within the Virtual Machine.
     * 
     */
    private Integer lun;
    /**
     * @return The name of the Data Disk.
     * 
     */
    private @Nullable String name;
    /**
     * @return The Type of Storage Account which should back this Data Disk. Possible values include `Standard_LRS`, `StandardSSD_LRS`, `StandardSSD_ZRS`, `Premium_LRS`, `PremiumV2_LRS`, `Premium_ZRS` and `UltraSSD_LRS`.
     * 
     */
    private String storageAccountType;
    /**
     * @return Specifies the Read-Write IOPS for this Data Disk. Only settable for UltraSSD disks.
     * 
     */
    private @Nullable Integer ultraSsdDiskIopsReadWrite;
    /**
     * @return Specifies the bandwidth in MB per second for this Data Disk. Only settable for UltraSSD disks.
     * 
     */
    private @Nullable Integer ultraSsdDiskMbpsReadWrite;
    /**
     * @return Should Write Accelerator be enabled for this Data Disk? Defaults to `false`.
     * 
     */
    private @Nullable Boolean writeAcceleratorEnabled;

    private LinuxVirtualMachineScaleSetDataDisk() {}
    /**
     * @return The type of Caching which should be used for this Data Disk. Possible values are `None`, `ReadOnly` and `ReadWrite`.
     * 
     */
    public String caching() {
        return this.caching;
    }
    /**
     * @return The create option which should be used for this Data Disk. Possible values are `Empty` and `FromImage`. Defaults to `Empty`. (`FromImage` should only be used if the source image includes data disks).
     * 
     */
    public Optional<String> createOption() {
        return Optional.ofNullable(this.createOption);
    }
    /**
     * @return The ID of the Disk Encryption Set which should be used to encrypt this Data Disk. Changing this forces a new resource to be created.
     * 
     */
    public Optional<String> diskEncryptionSetId() {
        return Optional.ofNullable(this.diskEncryptionSetId);
    }
    /**
     * @return The size of the Data Disk which should be created.
     * 
     */
    public Integer diskSizeGb() {
        return this.diskSizeGb;
    }
    /**
     * @return The Logical Unit Number of the Data Disk, which must be unique within the Virtual Machine.
     * 
     */
    public Integer lun() {
        return this.lun;
    }
    /**
     * @return The name of the Data Disk.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The Type of Storage Account which should back this Data Disk. Possible values include `Standard_LRS`, `StandardSSD_LRS`, `StandardSSD_ZRS`, `Premium_LRS`, `PremiumV2_LRS`, `Premium_ZRS` and `UltraSSD_LRS`.
     * 
     */
    public String storageAccountType() {
        return this.storageAccountType;
    }
    /**
     * @return Specifies the Read-Write IOPS for this Data Disk. Only settable for UltraSSD disks.
     * 
     */
    public Optional<Integer> ultraSsdDiskIopsReadWrite() {
        return Optional.ofNullable(this.ultraSsdDiskIopsReadWrite);
    }
    /**
     * @return Specifies the bandwidth in MB per second for this Data Disk. Only settable for UltraSSD disks.
     * 
     */
    public Optional<Integer> ultraSsdDiskMbpsReadWrite() {
        return Optional.ofNullable(this.ultraSsdDiskMbpsReadWrite);
    }
    /**
     * @return Should Write Accelerator be enabled for this Data Disk? Defaults to `false`.
     * 
     */
    public Optional<Boolean> writeAcceleratorEnabled() {
        return Optional.ofNullable(this.writeAcceleratorEnabled);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LinuxVirtualMachineScaleSetDataDisk defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String caching;
        private @Nullable String createOption;
        private @Nullable String diskEncryptionSetId;
        private Integer diskSizeGb;
        private Integer lun;
        private @Nullable String name;
        private String storageAccountType;
        private @Nullable Integer ultraSsdDiskIopsReadWrite;
        private @Nullable Integer ultraSsdDiskMbpsReadWrite;
        private @Nullable Boolean writeAcceleratorEnabled;
        public Builder() {}
        public Builder(LinuxVirtualMachineScaleSetDataDisk defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.caching = defaults.caching;
    	      this.createOption = defaults.createOption;
    	      this.diskEncryptionSetId = defaults.diskEncryptionSetId;
    	      this.diskSizeGb = defaults.diskSizeGb;
    	      this.lun = defaults.lun;
    	      this.name = defaults.name;
    	      this.storageAccountType = defaults.storageAccountType;
    	      this.ultraSsdDiskIopsReadWrite = defaults.ultraSsdDiskIopsReadWrite;
    	      this.ultraSsdDiskMbpsReadWrite = defaults.ultraSsdDiskMbpsReadWrite;
    	      this.writeAcceleratorEnabled = defaults.writeAcceleratorEnabled;
        }

        @CustomType.Setter
        public Builder caching(String caching) {
            this.caching = Objects.requireNonNull(caching);
            return this;
        }
        @CustomType.Setter
        public Builder createOption(@Nullable String createOption) {
            this.createOption = createOption;
            return this;
        }
        @CustomType.Setter
        public Builder diskEncryptionSetId(@Nullable String diskEncryptionSetId) {
            this.diskEncryptionSetId = diskEncryptionSetId;
            return this;
        }
        @CustomType.Setter
        public Builder diskSizeGb(Integer diskSizeGb) {
            this.diskSizeGb = Objects.requireNonNull(diskSizeGb);
            return this;
        }
        @CustomType.Setter
        public Builder lun(Integer lun) {
            this.lun = Objects.requireNonNull(lun);
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder storageAccountType(String storageAccountType) {
            this.storageAccountType = Objects.requireNonNull(storageAccountType);
            return this;
        }
        @CustomType.Setter
        public Builder ultraSsdDiskIopsReadWrite(@Nullable Integer ultraSsdDiskIopsReadWrite) {
            this.ultraSsdDiskIopsReadWrite = ultraSsdDiskIopsReadWrite;
            return this;
        }
        @CustomType.Setter
        public Builder ultraSsdDiskMbpsReadWrite(@Nullable Integer ultraSsdDiskMbpsReadWrite) {
            this.ultraSsdDiskMbpsReadWrite = ultraSsdDiskMbpsReadWrite;
            return this;
        }
        @CustomType.Setter
        public Builder writeAcceleratorEnabled(@Nullable Boolean writeAcceleratorEnabled) {
            this.writeAcceleratorEnabled = writeAcceleratorEnabled;
            return this;
        }
        public LinuxVirtualMachineScaleSetDataDisk build() {
            final var o = new LinuxVirtualMachineScaleSetDataDisk();
            o.caching = caching;
            o.createOption = createOption;
            o.diskEncryptionSetId = diskEncryptionSetId;
            o.diskSizeGb = diskSizeGb;
            o.lun = lun;
            o.name = name;
            o.storageAccountType = storageAccountType;
            o.ultraSsdDiskIopsReadWrite = ultraSsdDiskIopsReadWrite;
            o.ultraSsdDiskMbpsReadWrite = ultraSsdDiskMbpsReadWrite;
            o.writeAcceleratorEnabled = writeAcceleratorEnabled;
            return o;
        }
    }
}
