// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.datafactory;

import com.pulumi.azure.datafactory.inputs.LinkedServiceSftpKeyVaultPasswordArgs;
import com.pulumi.azure.datafactory.inputs.LinkedServiceSftpKeyVaultPrivateKeyContentBase64Args;
import com.pulumi.azure.datafactory.inputs.LinkedServiceSftpKeyVaultPrivateKeyPassphraseArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LinkedServiceSftpArgs extends com.pulumi.resources.ResourceArgs {

    public static final LinkedServiceSftpArgs Empty = new LinkedServiceSftpArgs();

    /**
     * A map of additional properties to associate with the Data Factory Linked Service.
     * 
     * The following supported arguments are specific to SFTP Linked Service:
     * 
     */
    @Import(name="additionalProperties")
    private @Nullable Output<Map<String,String>> additionalProperties;

    /**
     * @return A map of additional properties to associate with the Data Factory Linked Service.
     * 
     * The following supported arguments are specific to SFTP Linked Service:
     * 
     */
    public Optional<Output<Map<String,String>>> additionalProperties() {
        return Optional.ofNullable(this.additionalProperties);
    }

    /**
     * List of tags that can be used for describing the Data Factory Linked Service.
     * 
     */
    @Import(name="annotations")
    private @Nullable Output<List<String>> annotations;

    /**
     * @return List of tags that can be used for describing the Data Factory Linked Service.
     * 
     */
    public Optional<Output<List<String>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * The type of authentication used to connect to the SFTP server. Valid options are `MultiFactor`, `Basic` and `SshPublicKey`.
     * 
     */
    @Import(name="authenticationType", required=true)
    private Output<String> authenticationType;

    /**
     * @return The type of authentication used to connect to the SFTP server. Valid options are `MultiFactor`, `Basic` and `SshPublicKey`.
     * 
     */
    public Output<String> authenticationType() {
        return this.authenticationType;
    }

    /**
     * The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
     * 
     */
    @Import(name="dataFactoryId", required=true)
    private Output<String> dataFactoryId;

    /**
     * @return The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
     * 
     */
    public Output<String> dataFactoryId() {
        return this.dataFactoryId;
    }

    /**
     * The description for the Data Factory Linked Service.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description for the Data Factory Linked Service.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The SFTP server hostname.
     * 
     */
    @Import(name="host", required=true)
    private Output<String> host;

    /**
     * @return The SFTP server hostname.
     * 
     */
    public Output<String> host() {
        return this.host;
    }

    /**
     * The host key fingerprint of the SFTP server.
     * 
     */
    @Import(name="hostKeyFingerprint")
    private @Nullable Output<String> hostKeyFingerprint;

    /**
     * @return The host key fingerprint of the SFTP server.
     * 
     */
    public Optional<Output<String>> hostKeyFingerprint() {
        return Optional.ofNullable(this.hostKeyFingerprint);
    }

    /**
     * The name of the integration runtime to associate with the Data Factory Linked Service.
     * 
     */
    @Import(name="integrationRuntimeName")
    private @Nullable Output<String> integrationRuntimeName;

    /**
     * @return The name of the integration runtime to associate with the Data Factory Linked Service.
     * 
     */
    public Optional<Output<String>> integrationRuntimeName() {
        return Optional.ofNullable(this.integrationRuntimeName);
    }

    /**
     * A `key_vault_password` block as defined below.
     * 
     * &gt; **Note:** Either `password` or `key_vault_password` is required when `authentication_type` is set to `Basic`.
     * 
     */
    @Import(name="keyVaultPasswords")
    private @Nullable Output<List<LinkedServiceSftpKeyVaultPasswordArgs>> keyVaultPasswords;

    /**
     * @return A `key_vault_password` block as defined below.
     * 
     * &gt; **Note:** Either `password` or `key_vault_password` is required when `authentication_type` is set to `Basic`.
     * 
     */
    public Optional<Output<List<LinkedServiceSftpKeyVaultPasswordArgs>>> keyVaultPasswords() {
        return Optional.ofNullable(this.keyVaultPasswords);
    }

    /**
     * A `key_vault_private_key_content_base64` block as defined below.
     * 
     */
    @Import(name="keyVaultPrivateKeyContentBase64")
    private @Nullable Output<LinkedServiceSftpKeyVaultPrivateKeyContentBase64Args> keyVaultPrivateKeyContentBase64;

    /**
     * @return A `key_vault_private_key_content_base64` block as defined below.
     * 
     */
    public Optional<Output<LinkedServiceSftpKeyVaultPrivateKeyContentBase64Args>> keyVaultPrivateKeyContentBase64() {
        return Optional.ofNullable(this.keyVaultPrivateKeyContentBase64);
    }

    /**
     * A `key_vault_private_key_passphrase` block as defined below.
     * 
     * &gt; **Note:** One of `private_key_content_base64` or `private_key_path` (or their Key Vault equivalent) is required when `authentication_type` is set to `SshPublicKey`.
     * 
     */
    @Import(name="keyVaultPrivateKeyPassphrase")
    private @Nullable Output<LinkedServiceSftpKeyVaultPrivateKeyPassphraseArgs> keyVaultPrivateKeyPassphrase;

    /**
     * @return A `key_vault_private_key_passphrase` block as defined below.
     * 
     * &gt; **Note:** One of `private_key_content_base64` or `private_key_path` (or their Key Vault equivalent) is required when `authentication_type` is set to `SshPublicKey`.
     * 
     */
    public Optional<Output<LinkedServiceSftpKeyVaultPrivateKeyPassphraseArgs>> keyVaultPrivateKeyPassphrase() {
        return Optional.ofNullable(this.keyVaultPrivateKeyPassphrase);
    }

    /**
     * Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A map of parameters to associate with the Data Factory Linked Service.
     * 
     */
    @Import(name="parameters")
    private @Nullable Output<Map<String,String>> parameters;

    /**
     * @return A map of parameters to associate with the Data Factory Linked Service.
     * 
     */
    public Optional<Output<Map<String,String>>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * Password to log on to the SFTP Server for Basic Authentication.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return Password to log on to the SFTP Server for Basic Authentication.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * The TCP port number that the SFTP server uses to listen for client connection. Default value is 22.
     * 
     */
    @Import(name="port", required=true)
    private Output<Integer> port;

    /**
     * @return The TCP port number that the SFTP server uses to listen for client connection. Default value is 22.
     * 
     */
    public Output<Integer> port() {
        return this.port;
    }

    /**
     * The Base64 encoded private key content in OpenSSH format used to log on to the SFTP server.
     * 
     */
    @Import(name="privateKeyContentBase64")
    private @Nullable Output<String> privateKeyContentBase64;

    /**
     * @return The Base64 encoded private key content in OpenSSH format used to log on to the SFTP server.
     * 
     */
    public Optional<Output<String>> privateKeyContentBase64() {
        return Optional.ofNullable(this.privateKeyContentBase64);
    }

    /**
     * The passphrase for the private key if the key is encrypted.
     * 
     */
    @Import(name="privateKeyPassphrase")
    private @Nullable Output<String> privateKeyPassphrase;

    /**
     * @return The passphrase for the private key if the key is encrypted.
     * 
     */
    public Optional<Output<String>> privateKeyPassphrase() {
        return Optional.ofNullable(this.privateKeyPassphrase);
    }

    /**
     * The absolute path to the private key file that the self-hosted integration runtime can access.
     * 
     * &gt; **Note:** `private_key_path` only applies when using a self-hosted integration runtime (instead of the default Azure provided runtime), as indicated by supplying a value for `integration_runtime_name`.
     * 
     */
    @Import(name="privateKeyPath")
    private @Nullable Output<String> privateKeyPath;

    /**
     * @return The absolute path to the private key file that the self-hosted integration runtime can access.
     * 
     * &gt; **Note:** `private_key_path` only applies when using a self-hosted integration runtime (instead of the default Azure provided runtime), as indicated by supplying a value for `integration_runtime_name`.
     * 
     */
    public Optional<Output<String>> privateKeyPath() {
        return Optional.ofNullable(this.privateKeyPath);
    }

    /**
     * Whether to validate host key fingerprint while connecting. If set to `false`, `host_key_fingerprint` must also be set.
     * 
     */
    @Import(name="skipHostKeyValidation")
    private @Nullable Output<Boolean> skipHostKeyValidation;

    /**
     * @return Whether to validate host key fingerprint while connecting. If set to `false`, `host_key_fingerprint` must also be set.
     * 
     */
    public Optional<Output<Boolean>> skipHostKeyValidation() {
        return Optional.ofNullable(this.skipHostKeyValidation);
    }

    /**
     * The username used to log on to the SFTP server.
     * 
     */
    @Import(name="username", required=true)
    private Output<String> username;

    /**
     * @return The username used to log on to the SFTP server.
     * 
     */
    public Output<String> username() {
        return this.username;
    }

    private LinkedServiceSftpArgs() {}

    private LinkedServiceSftpArgs(LinkedServiceSftpArgs $) {
        this.additionalProperties = $.additionalProperties;
        this.annotations = $.annotations;
        this.authenticationType = $.authenticationType;
        this.dataFactoryId = $.dataFactoryId;
        this.description = $.description;
        this.host = $.host;
        this.hostKeyFingerprint = $.hostKeyFingerprint;
        this.integrationRuntimeName = $.integrationRuntimeName;
        this.keyVaultPasswords = $.keyVaultPasswords;
        this.keyVaultPrivateKeyContentBase64 = $.keyVaultPrivateKeyContentBase64;
        this.keyVaultPrivateKeyPassphrase = $.keyVaultPrivateKeyPassphrase;
        this.name = $.name;
        this.parameters = $.parameters;
        this.password = $.password;
        this.port = $.port;
        this.privateKeyContentBase64 = $.privateKeyContentBase64;
        this.privateKeyPassphrase = $.privateKeyPassphrase;
        this.privateKeyPath = $.privateKeyPath;
        this.skipHostKeyValidation = $.skipHostKeyValidation;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LinkedServiceSftpArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LinkedServiceSftpArgs $;

        public Builder() {
            $ = new LinkedServiceSftpArgs();
        }

        public Builder(LinkedServiceSftpArgs defaults) {
            $ = new LinkedServiceSftpArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param additionalProperties A map of additional properties to associate with the Data Factory Linked Service.
         * 
         * The following supported arguments are specific to SFTP Linked Service:
         * 
         * @return builder
         * 
         */
        public Builder additionalProperties(@Nullable Output<Map<String,String>> additionalProperties) {
            $.additionalProperties = additionalProperties;
            return this;
        }

        /**
         * @param additionalProperties A map of additional properties to associate with the Data Factory Linked Service.
         * 
         * The following supported arguments are specific to SFTP Linked Service:
         * 
         * @return builder
         * 
         */
        public Builder additionalProperties(Map<String,String> additionalProperties) {
            return additionalProperties(Output.of(additionalProperties));
        }

        /**
         * @param annotations List of tags that can be used for describing the Data Factory Linked Service.
         * 
         * @return builder
         * 
         */
        public Builder annotations(@Nullable Output<List<String>> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param annotations List of tags that can be used for describing the Data Factory Linked Service.
         * 
         * @return builder
         * 
         */
        public Builder annotations(List<String> annotations) {
            return annotations(Output.of(annotations));
        }

        /**
         * @param annotations List of tags that can be used for describing the Data Factory Linked Service.
         * 
         * @return builder
         * 
         */
        public Builder annotations(String... annotations) {
            return annotations(List.of(annotations));
        }

        /**
         * @param authenticationType The type of authentication used to connect to the SFTP server. Valid options are `MultiFactor`, `Basic` and `SshPublicKey`.
         * 
         * @return builder
         * 
         */
        public Builder authenticationType(Output<String> authenticationType) {
            $.authenticationType = authenticationType;
            return this;
        }

        /**
         * @param authenticationType The type of authentication used to connect to the SFTP server. Valid options are `MultiFactor`, `Basic` and `SshPublicKey`.
         * 
         * @return builder
         * 
         */
        public Builder authenticationType(String authenticationType) {
            return authenticationType(Output.of(authenticationType));
        }

        /**
         * @param dataFactoryId The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
         * 
         * @return builder
         * 
         */
        public Builder dataFactoryId(Output<String> dataFactoryId) {
            $.dataFactoryId = dataFactoryId;
            return this;
        }

        /**
         * @param dataFactoryId The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
         * 
         * @return builder
         * 
         */
        public Builder dataFactoryId(String dataFactoryId) {
            return dataFactoryId(Output.of(dataFactoryId));
        }

        /**
         * @param description The description for the Data Factory Linked Service.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description for the Data Factory Linked Service.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param host The SFTP server hostname.
         * 
         * @return builder
         * 
         */
        public Builder host(Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host The SFTP server hostname.
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param hostKeyFingerprint The host key fingerprint of the SFTP server.
         * 
         * @return builder
         * 
         */
        public Builder hostKeyFingerprint(@Nullable Output<String> hostKeyFingerprint) {
            $.hostKeyFingerprint = hostKeyFingerprint;
            return this;
        }

        /**
         * @param hostKeyFingerprint The host key fingerprint of the SFTP server.
         * 
         * @return builder
         * 
         */
        public Builder hostKeyFingerprint(String hostKeyFingerprint) {
            return hostKeyFingerprint(Output.of(hostKeyFingerprint));
        }

        /**
         * @param integrationRuntimeName The name of the integration runtime to associate with the Data Factory Linked Service.
         * 
         * @return builder
         * 
         */
        public Builder integrationRuntimeName(@Nullable Output<String> integrationRuntimeName) {
            $.integrationRuntimeName = integrationRuntimeName;
            return this;
        }

        /**
         * @param integrationRuntimeName The name of the integration runtime to associate with the Data Factory Linked Service.
         * 
         * @return builder
         * 
         */
        public Builder integrationRuntimeName(String integrationRuntimeName) {
            return integrationRuntimeName(Output.of(integrationRuntimeName));
        }

        /**
         * @param keyVaultPasswords A `key_vault_password` block as defined below.
         * 
         * &gt; **Note:** Either `password` or `key_vault_password` is required when `authentication_type` is set to `Basic`.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultPasswords(@Nullable Output<List<LinkedServiceSftpKeyVaultPasswordArgs>> keyVaultPasswords) {
            $.keyVaultPasswords = keyVaultPasswords;
            return this;
        }

        /**
         * @param keyVaultPasswords A `key_vault_password` block as defined below.
         * 
         * &gt; **Note:** Either `password` or `key_vault_password` is required when `authentication_type` is set to `Basic`.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultPasswords(List<LinkedServiceSftpKeyVaultPasswordArgs> keyVaultPasswords) {
            return keyVaultPasswords(Output.of(keyVaultPasswords));
        }

        /**
         * @param keyVaultPasswords A `key_vault_password` block as defined below.
         * 
         * &gt; **Note:** Either `password` or `key_vault_password` is required when `authentication_type` is set to `Basic`.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultPasswords(LinkedServiceSftpKeyVaultPasswordArgs... keyVaultPasswords) {
            return keyVaultPasswords(List.of(keyVaultPasswords));
        }

        /**
         * @param keyVaultPrivateKeyContentBase64 A `key_vault_private_key_content_base64` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultPrivateKeyContentBase64(@Nullable Output<LinkedServiceSftpKeyVaultPrivateKeyContentBase64Args> keyVaultPrivateKeyContentBase64) {
            $.keyVaultPrivateKeyContentBase64 = keyVaultPrivateKeyContentBase64;
            return this;
        }

        /**
         * @param keyVaultPrivateKeyContentBase64 A `key_vault_private_key_content_base64` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultPrivateKeyContentBase64(LinkedServiceSftpKeyVaultPrivateKeyContentBase64Args keyVaultPrivateKeyContentBase64) {
            return keyVaultPrivateKeyContentBase64(Output.of(keyVaultPrivateKeyContentBase64));
        }

        /**
         * @param keyVaultPrivateKeyPassphrase A `key_vault_private_key_passphrase` block as defined below.
         * 
         * &gt; **Note:** One of `private_key_content_base64` or `private_key_path` (or their Key Vault equivalent) is required when `authentication_type` is set to `SshPublicKey`.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultPrivateKeyPassphrase(@Nullable Output<LinkedServiceSftpKeyVaultPrivateKeyPassphraseArgs> keyVaultPrivateKeyPassphrase) {
            $.keyVaultPrivateKeyPassphrase = keyVaultPrivateKeyPassphrase;
            return this;
        }

        /**
         * @param keyVaultPrivateKeyPassphrase A `key_vault_private_key_passphrase` block as defined below.
         * 
         * &gt; **Note:** One of `private_key_content_base64` or `private_key_path` (or their Key Vault equivalent) is required when `authentication_type` is set to `SshPublicKey`.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultPrivateKeyPassphrase(LinkedServiceSftpKeyVaultPrivateKeyPassphraseArgs keyVaultPrivateKeyPassphrase) {
            return keyVaultPrivateKeyPassphrase(Output.of(keyVaultPrivateKeyPassphrase));
        }

        /**
         * @param name Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param parameters A map of parameters to associate with the Data Factory Linked Service.
         * 
         * @return builder
         * 
         */
        public Builder parameters(@Nullable Output<Map<String,String>> parameters) {
            $.parameters = parameters;
            return this;
        }

        /**
         * @param parameters A map of parameters to associate with the Data Factory Linked Service.
         * 
         * @return builder
         * 
         */
        public Builder parameters(Map<String,String> parameters) {
            return parameters(Output.of(parameters));
        }

        /**
         * @param password Password to log on to the SFTP Server for Basic Authentication.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password Password to log on to the SFTP Server for Basic Authentication.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param port The TCP port number that the SFTP server uses to listen for client connection. Default value is 22.
         * 
         * @return builder
         * 
         */
        public Builder port(Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The TCP port number that the SFTP server uses to listen for client connection. Default value is 22.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param privateKeyContentBase64 The Base64 encoded private key content in OpenSSH format used to log on to the SFTP server.
         * 
         * @return builder
         * 
         */
        public Builder privateKeyContentBase64(@Nullable Output<String> privateKeyContentBase64) {
            $.privateKeyContentBase64 = privateKeyContentBase64;
            return this;
        }

        /**
         * @param privateKeyContentBase64 The Base64 encoded private key content in OpenSSH format used to log on to the SFTP server.
         * 
         * @return builder
         * 
         */
        public Builder privateKeyContentBase64(String privateKeyContentBase64) {
            return privateKeyContentBase64(Output.of(privateKeyContentBase64));
        }

        /**
         * @param privateKeyPassphrase The passphrase for the private key if the key is encrypted.
         * 
         * @return builder
         * 
         */
        public Builder privateKeyPassphrase(@Nullable Output<String> privateKeyPassphrase) {
            $.privateKeyPassphrase = privateKeyPassphrase;
            return this;
        }

        /**
         * @param privateKeyPassphrase The passphrase for the private key if the key is encrypted.
         * 
         * @return builder
         * 
         */
        public Builder privateKeyPassphrase(String privateKeyPassphrase) {
            return privateKeyPassphrase(Output.of(privateKeyPassphrase));
        }

        /**
         * @param privateKeyPath The absolute path to the private key file that the self-hosted integration runtime can access.
         * 
         * &gt; **Note:** `private_key_path` only applies when using a self-hosted integration runtime (instead of the default Azure provided runtime), as indicated by supplying a value for `integration_runtime_name`.
         * 
         * @return builder
         * 
         */
        public Builder privateKeyPath(@Nullable Output<String> privateKeyPath) {
            $.privateKeyPath = privateKeyPath;
            return this;
        }

        /**
         * @param privateKeyPath The absolute path to the private key file that the self-hosted integration runtime can access.
         * 
         * &gt; **Note:** `private_key_path` only applies when using a self-hosted integration runtime (instead of the default Azure provided runtime), as indicated by supplying a value for `integration_runtime_name`.
         * 
         * @return builder
         * 
         */
        public Builder privateKeyPath(String privateKeyPath) {
            return privateKeyPath(Output.of(privateKeyPath));
        }

        /**
         * @param skipHostKeyValidation Whether to validate host key fingerprint while connecting. If set to `false`, `host_key_fingerprint` must also be set.
         * 
         * @return builder
         * 
         */
        public Builder skipHostKeyValidation(@Nullable Output<Boolean> skipHostKeyValidation) {
            $.skipHostKeyValidation = skipHostKeyValidation;
            return this;
        }

        /**
         * @param skipHostKeyValidation Whether to validate host key fingerprint while connecting. If set to `false`, `host_key_fingerprint` must also be set.
         * 
         * @return builder
         * 
         */
        public Builder skipHostKeyValidation(Boolean skipHostKeyValidation) {
            return skipHostKeyValidation(Output.of(skipHostKeyValidation));
        }

        /**
         * @param username The username used to log on to the SFTP server.
         * 
         * @return builder
         * 
         */
        public Builder username(Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The username used to log on to the SFTP server.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public LinkedServiceSftpArgs build() {
            if ($.authenticationType == null) {
                throw new MissingRequiredPropertyException("LinkedServiceSftpArgs", "authenticationType");
            }
            if ($.dataFactoryId == null) {
                throw new MissingRequiredPropertyException("LinkedServiceSftpArgs", "dataFactoryId");
            }
            if ($.host == null) {
                throw new MissingRequiredPropertyException("LinkedServiceSftpArgs", "host");
            }
            if ($.port == null) {
                throw new MissingRequiredPropertyException("LinkedServiceSftpArgs", "port");
            }
            if ($.username == null) {
                throw new MissingRequiredPropertyException("LinkedServiceSftpArgs", "username");
            }
            return $;
        }
    }

}
