// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.mssql.outputs;

import com.pulumi.azure.mssql.outputs.GetFailoverGroupPartnerServer;
import com.pulumi.azure.mssql.outputs.GetFailoverGroupReadWriteEndpointFailoverPolicy;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetFailoverGroupResult {
    /**
     * @return A set of database names in the Failover Group.
     * 
     */
    private List<String> databases;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String name;
    /**
     * @return A `partner_server` block as defined below.
     * 
     */
    private List<GetFailoverGroupPartnerServer> partnerServers;
    /**
     * @return A `read_write_endpoint_failover_policy` block as defined below.
     * 
     */
    private List<GetFailoverGroupReadWriteEndpointFailoverPolicy> readWriteEndpointFailoverPolicies;
    /**
     * @return Whether failover is enabled for the readonly endpoint.
     * 
     */
    private Boolean readonlyEndpointFailoverPolicyEnabled;
    private String serverId;
    /**
     * @return A mapping of tags which are assigned to the resource.
     * 
     */
    private Map<String,String> tags;

    private GetFailoverGroupResult() {}
    /**
     * @return A set of database names in the Failover Group.
     * 
     */
    public List<String> databases() {
        return this.databases;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return A `partner_server` block as defined below.
     * 
     */
    public List<GetFailoverGroupPartnerServer> partnerServers() {
        return this.partnerServers;
    }
    /**
     * @return A `read_write_endpoint_failover_policy` block as defined below.
     * 
     */
    public List<GetFailoverGroupReadWriteEndpointFailoverPolicy> readWriteEndpointFailoverPolicies() {
        return this.readWriteEndpointFailoverPolicies;
    }
    /**
     * @return Whether failover is enabled for the readonly endpoint.
     * 
     */
    public Boolean readonlyEndpointFailoverPolicyEnabled() {
        return this.readonlyEndpointFailoverPolicyEnabled;
    }
    public String serverId() {
        return this.serverId;
    }
    /**
     * @return A mapping of tags which are assigned to the resource.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFailoverGroupResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> databases;
        private String id;
        private String name;
        private List<GetFailoverGroupPartnerServer> partnerServers;
        private List<GetFailoverGroupReadWriteEndpointFailoverPolicy> readWriteEndpointFailoverPolicies;
        private Boolean readonlyEndpointFailoverPolicyEnabled;
        private String serverId;
        private Map<String,String> tags;
        public Builder() {}
        public Builder(GetFailoverGroupResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.databases = defaults.databases;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.partnerServers = defaults.partnerServers;
    	      this.readWriteEndpointFailoverPolicies = defaults.readWriteEndpointFailoverPolicies;
    	      this.readonlyEndpointFailoverPolicyEnabled = defaults.readonlyEndpointFailoverPolicyEnabled;
    	      this.serverId = defaults.serverId;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder databases(List<String> databases) {
            if (databases == null) {
              throw new MissingRequiredPropertyException("GetFailoverGroupResult", "databases");
            }
            this.databases = databases;
            return this;
        }
        public Builder databases(String... databases) {
            return databases(List.of(databases));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetFailoverGroupResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetFailoverGroupResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder partnerServers(List<GetFailoverGroupPartnerServer> partnerServers) {
            if (partnerServers == null) {
              throw new MissingRequiredPropertyException("GetFailoverGroupResult", "partnerServers");
            }
            this.partnerServers = partnerServers;
            return this;
        }
        public Builder partnerServers(GetFailoverGroupPartnerServer... partnerServers) {
            return partnerServers(List.of(partnerServers));
        }
        @CustomType.Setter
        public Builder readWriteEndpointFailoverPolicies(List<GetFailoverGroupReadWriteEndpointFailoverPolicy> readWriteEndpointFailoverPolicies) {
            if (readWriteEndpointFailoverPolicies == null) {
              throw new MissingRequiredPropertyException("GetFailoverGroupResult", "readWriteEndpointFailoverPolicies");
            }
            this.readWriteEndpointFailoverPolicies = readWriteEndpointFailoverPolicies;
            return this;
        }
        public Builder readWriteEndpointFailoverPolicies(GetFailoverGroupReadWriteEndpointFailoverPolicy... readWriteEndpointFailoverPolicies) {
            return readWriteEndpointFailoverPolicies(List.of(readWriteEndpointFailoverPolicies));
        }
        @CustomType.Setter
        public Builder readonlyEndpointFailoverPolicyEnabled(Boolean readonlyEndpointFailoverPolicyEnabled) {
            if (readonlyEndpointFailoverPolicyEnabled == null) {
              throw new MissingRequiredPropertyException("GetFailoverGroupResult", "readonlyEndpointFailoverPolicyEnabled");
            }
            this.readonlyEndpointFailoverPolicyEnabled = readonlyEndpointFailoverPolicyEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder serverId(String serverId) {
            if (serverId == null) {
              throw new MissingRequiredPropertyException("GetFailoverGroupResult", "serverId");
            }
            this.serverId = serverId;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetFailoverGroupResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public GetFailoverGroupResult build() {
            final var _resultValue = new GetFailoverGroupResult();
            _resultValue.databases = databases;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.partnerServers = partnerServers;
            _resultValue.readWriteEndpointFailoverPolicies = readWriteEndpointFailoverPolicies;
            _resultValue.readonlyEndpointFailoverPolicyEnabled = readonlyEndpointFailoverPolicyEnabled;
            _resultValue.serverId = serverId;
            _resultValue.tags = tags;
            return _resultValue;
        }
    }
}
