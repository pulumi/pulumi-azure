// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.apimanagement.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApiOauth2AuthorizationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApiOauth2AuthorizationArgs Empty = new ApiOauth2AuthorizationArgs();

    /**
     * OAuth authorization server identifier. The name of an OAuth2 Authorization Server.
     * 
     */
    @Import(name="authorizationServerName", required=true)
    private Output<String> authorizationServerName;

    /**
     * @return OAuth authorization server identifier. The name of an OAuth2 Authorization Server.
     * 
     */
    public Output<String> authorizationServerName() {
        return this.authorizationServerName;
    }

    /**
     * Operations scope.
     * 
     */
    @Import(name="scope")
    private @Nullable Output<String> scope;

    /**
     * @return Operations scope.
     * 
     */
    public Optional<Output<String>> scope() {
        return Optional.ofNullable(this.scope);
    }

    private ApiOauth2AuthorizationArgs() {}

    private ApiOauth2AuthorizationArgs(ApiOauth2AuthorizationArgs $) {
        this.authorizationServerName = $.authorizationServerName;
        this.scope = $.scope;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApiOauth2AuthorizationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApiOauth2AuthorizationArgs $;

        public Builder() {
            $ = new ApiOauth2AuthorizationArgs();
        }

        public Builder(ApiOauth2AuthorizationArgs defaults) {
            $ = new ApiOauth2AuthorizationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authorizationServerName OAuth authorization server identifier. The name of an OAuth2 Authorization Server.
         * 
         * @return builder
         * 
         */
        public Builder authorizationServerName(Output<String> authorizationServerName) {
            $.authorizationServerName = authorizationServerName;
            return this;
        }

        /**
         * @param authorizationServerName OAuth authorization server identifier. The name of an OAuth2 Authorization Server.
         * 
         * @return builder
         * 
         */
        public Builder authorizationServerName(String authorizationServerName) {
            return authorizationServerName(Output.of(authorizationServerName));
        }

        /**
         * @param scope Operations scope.
         * 
         * @return builder
         * 
         */
        public Builder scope(@Nullable Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope Operations scope.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        public ApiOauth2AuthorizationArgs build() {
            if ($.authorizationServerName == null) {
                throw new MissingRequiredPropertyException("ApiOauth2AuthorizationArgs", "authorizationServerName");
            }
            return $;
        }
    }

}
