// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.hpc;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.hpc.CacheNfsTargetArgs;
import com.pulumi.azure.hpc.inputs.CacheNfsTargetState;
import com.pulumi.azure.hpc.outputs.CacheNfsTargetNamespaceJunction;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * Manages a NFS Target within a HPC Cache.
 * 
 * &gt; **NOTE:**: By request of the service team the provider no longer automatically registering the `Microsoft.StorageCache` Resource Provider for this resource. To register it you can run `az provider register --namespace &#39;Microsoft.StorageCache&#39;`.
 * 
 * ## Import
 * 
 * NFS Target within a HPC Cache can be imported using the `resource id`, e.g.
 * 
 * ```sh
 *  $ pulumi import azure:hpc/cacheNfsTarget:CacheNfsTarget example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.StorageCache/caches/cache1/storageTargets/target1
 * ```
 * 
 */
@ResourceType(type="azure:hpc/cacheNfsTarget:CacheNfsTarget")
public class CacheNfsTarget extends com.pulumi.resources.CustomResource {
    /**
     * The name HPC Cache, which the HPC Cache NFS Target will be added to. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="cacheName", refs={String.class}, tree="[0]")
    private Output<String> cacheName;

    /**
     * @return The name HPC Cache, which the HPC Cache NFS Target will be added to. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> cacheName() {
        return this.cacheName;
    }
    /**
     * The name of the HPC Cache NFS Target. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the HPC Cache NFS Target. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Can be specified multiple times to define multiple `namespace_junction`. Each `namespace_junction` block supports fields documented below.
     * 
     */
    @Export(name="namespaceJunctions", refs={List.class,CacheNfsTargetNamespaceJunction.class}, tree="[0,1]")
    private Output<List<CacheNfsTargetNamespaceJunction>> namespaceJunctions;

    /**
     * @return Can be specified multiple times to define multiple `namespace_junction`. Each `namespace_junction` block supports fields documented below.
     * 
     */
    public Output<List<CacheNfsTargetNamespaceJunction>> namespaceJunctions() {
        return this.namespaceJunctions;
    }
    /**
     * The name of the Resource Group in which to create the HPC Cache NFS Target. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="resourceGroupName", refs={String.class}, tree="[0]")
    private Output<String> resourceGroupName;

    /**
     * @return The name of the Resource Group in which to create the HPC Cache NFS Target. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * The IP address or fully qualified domain name (FQDN) of the HPC Cache NFS target. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="targetHostName", refs={String.class}, tree="[0]")
    private Output<String> targetHostName;

    /**
     * @return The IP address or fully qualified domain name (FQDN) of the HPC Cache NFS target. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> targetHostName() {
        return this.targetHostName;
    }
    /**
     * The type of usage of the HPC Cache NFS Target. Possible values are: `READ_HEAVY_INFREQ`, `READ_HEAVY_CHECK_180`, `READ_ONLY`, `READ_WRITE`, `WRITE_WORKLOAD_15`, `WRITE_AROUND`, `WRITE_WORKLOAD_CHECK_30`, `WRITE_WORKLOAD_CHECK_60` and `WRITE_WORKLOAD_CLOUDWS`.
     * 
     */
    @Export(name="usageModel", refs={String.class}, tree="[0]")
    private Output<String> usageModel;

    /**
     * @return The type of usage of the HPC Cache NFS Target. Possible values are: `READ_HEAVY_INFREQ`, `READ_HEAVY_CHECK_180`, `READ_ONLY`, `READ_WRITE`, `WRITE_WORKLOAD_15`, `WRITE_AROUND`, `WRITE_WORKLOAD_CHECK_30`, `WRITE_WORKLOAD_CHECK_60` and `WRITE_WORKLOAD_CLOUDWS`.
     * 
     */
    public Output<String> usageModel() {
        return this.usageModel;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public CacheNfsTarget(String name) {
        this(name, CacheNfsTargetArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public CacheNfsTarget(String name, CacheNfsTargetArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public CacheNfsTarget(String name, CacheNfsTargetArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:hpc/cacheNfsTarget:CacheNfsTarget", name, args == null ? CacheNfsTargetArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private CacheNfsTarget(String name, Output<String> id, @Nullable CacheNfsTargetState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:hpc/cacheNfsTarget:CacheNfsTarget", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static CacheNfsTarget get(String name, Output<String> id, @Nullable CacheNfsTargetState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new CacheNfsTarget(name, id, state, options);
    }
}
