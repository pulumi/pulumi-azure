// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.hpc;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.hpc.CacheNfsTargetArgs;
import com.pulumi.azure.hpc.inputs.CacheNfsTargetState;
import com.pulumi.azure.hpc.outputs.CacheNfsTargetNamespaceJunction;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a NFS Target within a HPC Cache.
 * 
 * &gt; **NOTE:**: By request of the service team the provider no longer automatically registering the `Microsoft.StorageCache` Resource Provider for this resource. To register it you can run `az provider register --namespace &#39;Microsoft.StorageCache&#39;`.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.network.VirtualNetwork;
 * import com.pulumi.azure.network.VirtualNetworkArgs;
 * import com.pulumi.azure.network.Subnet;
 * import com.pulumi.azure.network.SubnetArgs;
 * import com.pulumi.azure.hpc.Cache;
 * import com.pulumi.azure.hpc.CacheArgs;
 * import com.pulumi.azure.network.NetworkInterface;
 * import com.pulumi.azure.network.NetworkInterfaceArgs;
 * import com.pulumi.azure.network.inputs.NetworkInterfaceIpConfigurationArgs;
 * import com.pulumi.azure.compute.LinuxVirtualMachine;
 * import com.pulumi.azure.compute.LinuxVirtualMachineArgs;
 * import com.pulumi.azure.compute.inputs.LinuxVirtualMachineAdminSshKeyArgs;
 * import com.pulumi.azure.compute.inputs.LinuxVirtualMachineOsDiskArgs;
 * import com.pulumi.azure.compute.inputs.LinuxVirtualMachineSourceImageReferenceArgs;
 * import com.pulumi.azure.hpc.CacheNfsTarget;
 * import com.pulumi.azure.hpc.CacheNfsTargetArgs;
 * import com.pulumi.azure.hpc.inputs.CacheNfsTargetNamespaceJunctionArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new ResourceGroup(&#34;example&#34;, ResourceGroupArgs.builder()        
 *             .name(&#34;example-resources&#34;)
 *             .location(&#34;West Europe&#34;)
 *             .build());
 * 
 *         var exampleVirtualNetwork = new VirtualNetwork(&#34;exampleVirtualNetwork&#34;, VirtualNetworkArgs.builder()        
 *             .name(&#34;examplevn&#34;)
 *             .addressSpaces(&#34;10.0.0.0/16&#34;)
 *             .location(example.location())
 *             .resourceGroupName(example.name())
 *             .build());
 * 
 *         var exampleHpc = new Subnet(&#34;exampleHpc&#34;, SubnetArgs.builder()        
 *             .name(&#34;examplesubnethpc&#34;)
 *             .resourceGroupName(example.name())
 *             .virtualNetworkName(exampleVirtualNetwork.name())
 *             .addressPrefixes(&#34;10.0.1.0/24&#34;)
 *             .build());
 * 
 *         var exampleCache = new Cache(&#34;exampleCache&#34;, CacheArgs.builder()        
 *             .name(&#34;examplehpccache&#34;)
 *             .resourceGroupName(example.name())
 *             .location(example.location())
 *             .cacheSizeInGb(3072)
 *             .subnetId(exampleHpc.id())
 *             .skuName(&#34;Standard_2G&#34;)
 *             .build());
 * 
 *         var exampleVm = new Subnet(&#34;exampleVm&#34;, SubnetArgs.builder()        
 *             .name(&#34;examplesubnetvm&#34;)
 *             .resourceGroupName(example.name())
 *             .virtualNetworkName(exampleVirtualNetwork.name())
 *             .addressPrefixes(&#34;10.0.2.0/24&#34;)
 *             .build());
 * 
 *         var exampleNetworkInterface = new NetworkInterface(&#34;exampleNetworkInterface&#34;, NetworkInterfaceArgs.builder()        
 *             .name(&#34;examplenic&#34;)
 *             .location(example.location())
 *             .resourceGroupName(example.name())
 *             .ipConfigurations(NetworkInterfaceIpConfigurationArgs.builder()
 *                 .name(&#34;internal&#34;)
 *                 .subnetId(exampleVm.id())
 *                 .privateIpAddressAllocation(&#34;Dynamic&#34;)
 *                 .build())
 *             .build());
 * 
 *         final var customData = &#34;&#34;&#34;
 * #!/bin/bash
 * sudo -i 
 * apt-get install -y nfs-kernel-server
 * mkdir -p /export/a/1
 * mkdir -p /export/a/2
 * mkdir -p /export/b
 * cat &lt;&lt; EOF &gt; /etc/exports
 * /export/a *(rw,fsid=0,insecure,no_subtree_check,async)
 * /export/b *(rw,fsid=0,insecure,no_subtree_check,async)
 * EOF
 * systemctl start nfs-server
 * exportfs -arv
 *         &#34;&#34;&#34;;
 * 
 *         var exampleLinuxVirtualMachine = new LinuxVirtualMachine(&#34;exampleLinuxVirtualMachine&#34;, LinuxVirtualMachineArgs.builder()        
 *             .name(&#34;examplevm&#34;)
 *             .resourceGroupName(example.name())
 *             .location(example.location())
 *             .size(&#34;Standard_F2&#34;)
 *             .adminUsername(&#34;adminuser&#34;)
 *             .networkInterfaceIds(exampleNetworkInterface.id())
 *             .adminSshKeys(LinuxVirtualMachineAdminSshKeyArgs.builder()
 *                 .username(&#34;adminuser&#34;)
 *                 .publicKey(StdFunctions.file(FileArgs.builder()
 *                     .input(&#34;~/.ssh/id_rsa.pub&#34;)
 *                     .build()).result())
 *                 .build())
 *             .osDisk(LinuxVirtualMachineOsDiskArgs.builder()
 *                 .caching(&#34;ReadWrite&#34;)
 *                 .storageAccountType(&#34;Standard_LRS&#34;)
 *                 .build())
 *             .sourceImageReference(LinuxVirtualMachineSourceImageReferenceArgs.builder()
 *                 .publisher(&#34;Canonical&#34;)
 *                 .offer(&#34;0001-com-ubuntu-server-jammy&#34;)
 *                 .sku(&#34;22_04-lts&#34;)
 *                 .version(&#34;latest&#34;)
 *                 .build())
 *             .customData(StdFunctions.base64encode(Base64encodeArgs.builder()
 *                 .input(customData)
 *                 .build()).result())
 *             .build());
 * 
 *         var exampleCacheNfsTarget = new CacheNfsTarget(&#34;exampleCacheNfsTarget&#34;, CacheNfsTargetArgs.builder()        
 *             .name(&#34;examplehpcnfstarget&#34;)
 *             .resourceGroupName(example.name())
 *             .cacheName(exampleCache.name())
 *             .targetHostName(exampleLinuxVirtualMachine.privateIpAddress())
 *             .usageModel(&#34;READ_HEAVY_INFREQ&#34;)
 *             .namespaceJunctions(            
 *                 CacheNfsTargetNamespaceJunctionArgs.builder()
 *                     .namespacePath(&#34;/nfs/a1&#34;)
 *                     .nfsExport(&#34;/export/a&#34;)
 *                     .targetPath(&#34;1&#34;)
 *                     .build(),
 *                 CacheNfsTargetNamespaceJunctionArgs.builder()
 *                     .namespacePath(&#34;/nfs/b&#34;)
 *                     .nfsExport(&#34;/export/b&#34;)
 *                     .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * NFS Target within a HPC Cache can be imported using the `resource id`, e.g.
 * 
 * ```sh
 * $ pulumi import azure:hpc/cacheNfsTarget:CacheNfsTarget example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.StorageCache/caches/cache1/storageTargets/target1
 * ```
 * 
 */
@ResourceType(type="azure:hpc/cacheNfsTarget:CacheNfsTarget")
public class CacheNfsTarget extends com.pulumi.resources.CustomResource {
    /**
     * The name HPC Cache, which the HPC Cache NFS Target will be added to. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="cacheName", refs={String.class}, tree="[0]")
    private Output<String> cacheName;

    /**
     * @return The name HPC Cache, which the HPC Cache NFS Target will be added to. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> cacheName() {
        return this.cacheName;
    }
    /**
     * The name of the HPC Cache NFS Target. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the HPC Cache NFS Target. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Can be specified multiple times to define multiple `namespace_junction`. Each `namespace_junction` block supports fields documented below.
     * 
     */
    @Export(name="namespaceJunctions", refs={List.class,CacheNfsTargetNamespaceJunction.class}, tree="[0,1]")
    private Output<List<CacheNfsTargetNamespaceJunction>> namespaceJunctions;

    /**
     * @return Can be specified multiple times to define multiple `namespace_junction`. Each `namespace_junction` block supports fields documented below.
     * 
     */
    public Output<List<CacheNfsTargetNamespaceJunction>> namespaceJunctions() {
        return this.namespaceJunctions;
    }
    /**
     * The name of the Resource Group in which to create the HPC Cache NFS Target. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="resourceGroupName", refs={String.class}, tree="[0]")
    private Output<String> resourceGroupName;

    /**
     * @return The name of the Resource Group in which to create the HPC Cache NFS Target. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * The IP address or fully qualified domain name (FQDN) of the HPC Cache NFS target. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="targetHostName", refs={String.class}, tree="[0]")
    private Output<String> targetHostName;

    /**
     * @return The IP address or fully qualified domain name (FQDN) of the HPC Cache NFS target. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> targetHostName() {
        return this.targetHostName;
    }
    /**
     * The type of usage of the HPC Cache NFS Target. Possible values are: `READ_HEAVY_INFREQ`, `READ_HEAVY_CHECK_180`, `READ_ONLY`, `READ_WRITE`, `WRITE_WORKLOAD_15`, `WRITE_AROUND`, `WRITE_WORKLOAD_CHECK_30`, `WRITE_WORKLOAD_CHECK_60` and `WRITE_WORKLOAD_CLOUDWS`.
     * 
     */
    @Export(name="usageModel", refs={String.class}, tree="[0]")
    private Output<String> usageModel;

    /**
     * @return The type of usage of the HPC Cache NFS Target. Possible values are: `READ_HEAVY_INFREQ`, `READ_HEAVY_CHECK_180`, `READ_ONLY`, `READ_WRITE`, `WRITE_WORKLOAD_15`, `WRITE_AROUND`, `WRITE_WORKLOAD_CHECK_30`, `WRITE_WORKLOAD_CHECK_60` and `WRITE_WORKLOAD_CLOUDWS`.
     * 
     */
    public Output<String> usageModel() {
        return this.usageModel;
    }
    /**
     * The amount of time the cache waits before it checks the back-end storage for file updates. Possible values are between `1` and `31536000`.
     * 
     */
    @Export(name="verificationTimerInSeconds", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> verificationTimerInSeconds;

    /**
     * @return The amount of time the cache waits before it checks the back-end storage for file updates. Possible values are between `1` and `31536000`.
     * 
     */
    public Output<Optional<Integer>> verificationTimerInSeconds() {
        return Codegen.optional(this.verificationTimerInSeconds);
    }
    /**
     * The amount of time the cache waits after the last file change before it copies the changed file to back-end storage. Possible values are between `1` and `31536000`.
     * 
     */
    @Export(name="writeBackTimerInSeconds", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> writeBackTimerInSeconds;

    /**
     * @return The amount of time the cache waits after the last file change before it copies the changed file to back-end storage. Possible values are between `1` and `31536000`.
     * 
     */
    public Output<Optional<Integer>> writeBackTimerInSeconds() {
        return Codegen.optional(this.writeBackTimerInSeconds);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public CacheNfsTarget(String name) {
        this(name, CacheNfsTargetArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public CacheNfsTarget(String name, CacheNfsTargetArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public CacheNfsTarget(String name, CacheNfsTargetArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:hpc/cacheNfsTarget:CacheNfsTarget", name, args == null ? CacheNfsTargetArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private CacheNfsTarget(String name, Output<String> id, @Nullable CacheNfsTargetState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:hpc/cacheNfsTarget:CacheNfsTarget", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static CacheNfsTarget get(String name, Output<String> id, @Nullable CacheNfsTargetState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new CacheNfsTarget(name, id, state, options);
    }
}
