// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.keyvault.outputs;

import com.pulumi.azure.keyvault.outputs.GetCertificateCertificatePolicy;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetCertificateResult {
    /**
     * @return The raw Key Vault Certificate data represented as a hexadecimal string.
     * 
     */
    private String certificateData;
    /**
     * @return The raw Key Vault Certificate data represented as a base64 string.
     * 
     */
    private String certificateDataBase64;
    /**
     * @return A `certificate_policy` block as defined below.
     * 
     */
    private List<GetCertificateCertificatePolicy> certificatePolicies;
    /**
     * @return Expiry date of certificate in RFC3339 format.
     * 
     */
    private String expires;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String keyVaultId;
    /**
     * @return The name of the Certificate Issuer.
     * 
     */
    private String name;
    /**
     * @return Not Before date of certificate in RFC3339 format.
     * 
     */
    private String notBefore;
    /**
     * @return The (Versioned) ID for this Key Vault Certificate. This property points to a specific version of a Key Vault Certificate, as such using this won&#39;t auto-rotate values if used in other Azure Services.
     * 
     */
    private String resourceManagerId;
    /**
     * @return The Versionless ID of the Key Vault Certificate. This property allows other Azure Services (that support it) to auto-rotate their value when the Key Vault Certificate is updated.
     * 
     */
    private String resourceManagerVersionlessId;
    /**
     * @return The ID of the associated Key Vault Secret.
     * 
     */
    private String secretId;
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return The X509 Thumbprint of the Key Vault Certificate represented as a hexadecimal string.
     * 
     */
    private String thumbprint;
    /**
     * @return The current version of the Key Vault Certificate.
     * 
     */
    private String version;
    /**
     * @return The Base ID of the Key Vault Certificate.
     * 
     */
    private String versionlessId;
    /**
     * @return The Base ID of the Key Vault Secret.
     * 
     */
    private String versionlessSecretId;

    private GetCertificateResult() {}
    /**
     * @return The raw Key Vault Certificate data represented as a hexadecimal string.
     * 
     */
    public String certificateData() {
        return this.certificateData;
    }
    /**
     * @return The raw Key Vault Certificate data represented as a base64 string.
     * 
     */
    public String certificateDataBase64() {
        return this.certificateDataBase64;
    }
    /**
     * @return A `certificate_policy` block as defined below.
     * 
     */
    public List<GetCertificateCertificatePolicy> certificatePolicies() {
        return this.certificatePolicies;
    }
    /**
     * @return Expiry date of certificate in RFC3339 format.
     * 
     */
    public String expires() {
        return this.expires;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String keyVaultId() {
        return this.keyVaultId;
    }
    /**
     * @return The name of the Certificate Issuer.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Not Before date of certificate in RFC3339 format.
     * 
     */
    public String notBefore() {
        return this.notBefore;
    }
    /**
     * @return The (Versioned) ID for this Key Vault Certificate. This property points to a specific version of a Key Vault Certificate, as such using this won&#39;t auto-rotate values if used in other Azure Services.
     * 
     */
    public String resourceManagerId() {
        return this.resourceManagerId;
    }
    /**
     * @return The Versionless ID of the Key Vault Certificate. This property allows other Azure Services (that support it) to auto-rotate their value when the Key Vault Certificate is updated.
     * 
     */
    public String resourceManagerVersionlessId() {
        return this.resourceManagerVersionlessId;
    }
    /**
     * @return The ID of the associated Key Vault Secret.
     * 
     */
    public String secretId() {
        return this.secretId;
    }
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return The X509 Thumbprint of the Key Vault Certificate represented as a hexadecimal string.
     * 
     */
    public String thumbprint() {
        return this.thumbprint;
    }
    /**
     * @return The current version of the Key Vault Certificate.
     * 
     */
    public String version() {
        return this.version;
    }
    /**
     * @return The Base ID of the Key Vault Certificate.
     * 
     */
    public String versionlessId() {
        return this.versionlessId;
    }
    /**
     * @return The Base ID of the Key Vault Secret.
     * 
     */
    public String versionlessSecretId() {
        return this.versionlessSecretId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCertificateResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String certificateData;
        private String certificateDataBase64;
        private List<GetCertificateCertificatePolicy> certificatePolicies;
        private String expires;
        private String id;
        private String keyVaultId;
        private String name;
        private String notBefore;
        private String resourceManagerId;
        private String resourceManagerVersionlessId;
        private String secretId;
        private Map<String,String> tags;
        private String thumbprint;
        private String version;
        private String versionlessId;
        private String versionlessSecretId;
        public Builder() {}
        public Builder(GetCertificateResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateData = defaults.certificateData;
    	      this.certificateDataBase64 = defaults.certificateDataBase64;
    	      this.certificatePolicies = defaults.certificatePolicies;
    	      this.expires = defaults.expires;
    	      this.id = defaults.id;
    	      this.keyVaultId = defaults.keyVaultId;
    	      this.name = defaults.name;
    	      this.notBefore = defaults.notBefore;
    	      this.resourceManagerId = defaults.resourceManagerId;
    	      this.resourceManagerVersionlessId = defaults.resourceManagerVersionlessId;
    	      this.secretId = defaults.secretId;
    	      this.tags = defaults.tags;
    	      this.thumbprint = defaults.thumbprint;
    	      this.version = defaults.version;
    	      this.versionlessId = defaults.versionlessId;
    	      this.versionlessSecretId = defaults.versionlessSecretId;
        }

        @CustomType.Setter
        public Builder certificateData(String certificateData) {
            if (certificateData == null) {
              throw new MissingRequiredPropertyException("GetCertificateResult", "certificateData");
            }
            this.certificateData = certificateData;
            return this;
        }
        @CustomType.Setter
        public Builder certificateDataBase64(String certificateDataBase64) {
            if (certificateDataBase64 == null) {
              throw new MissingRequiredPropertyException("GetCertificateResult", "certificateDataBase64");
            }
            this.certificateDataBase64 = certificateDataBase64;
            return this;
        }
        @CustomType.Setter
        public Builder certificatePolicies(List<GetCertificateCertificatePolicy> certificatePolicies) {
            if (certificatePolicies == null) {
              throw new MissingRequiredPropertyException("GetCertificateResult", "certificatePolicies");
            }
            this.certificatePolicies = certificatePolicies;
            return this;
        }
        public Builder certificatePolicies(GetCertificateCertificatePolicy... certificatePolicies) {
            return certificatePolicies(List.of(certificatePolicies));
        }
        @CustomType.Setter
        public Builder expires(String expires) {
            if (expires == null) {
              throw new MissingRequiredPropertyException("GetCertificateResult", "expires");
            }
            this.expires = expires;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetCertificateResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder keyVaultId(String keyVaultId) {
            if (keyVaultId == null) {
              throw new MissingRequiredPropertyException("GetCertificateResult", "keyVaultId");
            }
            this.keyVaultId = keyVaultId;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetCertificateResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder notBefore(String notBefore) {
            if (notBefore == null) {
              throw new MissingRequiredPropertyException("GetCertificateResult", "notBefore");
            }
            this.notBefore = notBefore;
            return this;
        }
        @CustomType.Setter
        public Builder resourceManagerId(String resourceManagerId) {
            if (resourceManagerId == null) {
              throw new MissingRequiredPropertyException("GetCertificateResult", "resourceManagerId");
            }
            this.resourceManagerId = resourceManagerId;
            return this;
        }
        @CustomType.Setter
        public Builder resourceManagerVersionlessId(String resourceManagerVersionlessId) {
            if (resourceManagerVersionlessId == null) {
              throw new MissingRequiredPropertyException("GetCertificateResult", "resourceManagerVersionlessId");
            }
            this.resourceManagerVersionlessId = resourceManagerVersionlessId;
            return this;
        }
        @CustomType.Setter
        public Builder secretId(String secretId) {
            if (secretId == null) {
              throw new MissingRequiredPropertyException("GetCertificateResult", "secretId");
            }
            this.secretId = secretId;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetCertificateResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder thumbprint(String thumbprint) {
            if (thumbprint == null) {
              throw new MissingRequiredPropertyException("GetCertificateResult", "thumbprint");
            }
            this.thumbprint = thumbprint;
            return this;
        }
        @CustomType.Setter
        public Builder version(String version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetCertificateResult", "version");
            }
            this.version = version;
            return this;
        }
        @CustomType.Setter
        public Builder versionlessId(String versionlessId) {
            if (versionlessId == null) {
              throw new MissingRequiredPropertyException("GetCertificateResult", "versionlessId");
            }
            this.versionlessId = versionlessId;
            return this;
        }
        @CustomType.Setter
        public Builder versionlessSecretId(String versionlessSecretId) {
            if (versionlessSecretId == null) {
              throw new MissingRequiredPropertyException("GetCertificateResult", "versionlessSecretId");
            }
            this.versionlessSecretId = versionlessSecretId;
            return this;
        }
        public GetCertificateResult build() {
            final var _resultValue = new GetCertificateResult();
            _resultValue.certificateData = certificateData;
            _resultValue.certificateDataBase64 = certificateDataBase64;
            _resultValue.certificatePolicies = certificatePolicies;
            _resultValue.expires = expires;
            _resultValue.id = id;
            _resultValue.keyVaultId = keyVaultId;
            _resultValue.name = name;
            _resultValue.notBefore = notBefore;
            _resultValue.resourceManagerId = resourceManagerId;
            _resultValue.resourceManagerVersionlessId = resourceManagerVersionlessId;
            _resultValue.secretId = secretId;
            _resultValue.tags = tags;
            _resultValue.thumbprint = thumbprint;
            _resultValue.version = version;
            _resultValue.versionlessId = versionlessId;
            _resultValue.versionlessSecretId = versionlessSecretId;
            return _resultValue;
        }
    }
}
