// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerservice.outputs;

import com.pulumi.azure.containerservice.outputs.GroupContainerGpu;
import com.pulumi.azure.containerservice.outputs.GroupContainerGpuLimit;
import com.pulumi.azure.containerservice.outputs.GroupContainerLivenessProbe;
import com.pulumi.azure.containerservice.outputs.GroupContainerPort;
import com.pulumi.azure.containerservice.outputs.GroupContainerReadinessProbe;
import com.pulumi.azure.containerservice.outputs.GroupContainerSecurity;
import com.pulumi.azure.containerservice.outputs.GroupContainerVolume;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GroupContainer {
    /**
     * @return A list of commands which should be run on the container. Changing this forces a new resource to be created.
     * 
     */
    private @Nullable List<String> commands;
    /**
     * @return The required number of CPU cores of the containers. Changing this forces a new resource to be created.
     * 
     */
    private Double cpu;
    /**
     * @return The upper limit of the number of CPU cores of the containers.
     * 
     */
    private @Nullable Double cpuLimit;
    /**
     * @return A list of environment variables to be set on the container. Specified as a map of name/value pairs. Changing this forces a new resource to be created.
     * 
     */
    private @Nullable Map<String,String> environmentVariables;
    /**
     * @return A `gpu` block as defined below. Changing this forces a new resource to be created.
     * 
     * &gt; **Note:** Gpu resources are currently only supported in Linux containers.
     * 
     */
    private @Nullable GroupContainerGpu gpu;
    /**
     * @return A `gpu_limit` block as defined below.
     * 
     */
    private @Nullable GroupContainerGpuLimit gpuLimit;
    /**
     * @return The container image name. Changing this forces a new resource to be created.
     * 
     */
    private String image;
    /**
     * @return The definition of a readiness probe for this container as documented in the `liveness_probe` block below. Changing this forces a new resource to be created.
     * 
     */
    private @Nullable GroupContainerLivenessProbe livenessProbe;
    /**
     * @return The required memory of the containers in GB. Changing this forces a new resource to be created.
     * 
     */
    private Double memory;
    /**
     * @return The the upper limit of the memory of the containers in GB.
     * 
     */
    private @Nullable Double memoryLimit;
    /**
     * @return Specifies the name of the Container. Changing this forces a new resource to be created.
     * 
     */
    private String name;
    /**
     * @return A set of public ports for the container. Changing this forces a new resource to be created. Set as documented in the `ports` block below.
     * 
     */
    private @Nullable List<GroupContainerPort> ports;
    /**
     * @return The definition of a readiness probe for this container as documented in the `readiness_probe` block below. Changing this forces a new resource to be created.
     * 
     */
    private @Nullable GroupContainerReadinessProbe readinessProbe;
    /**
     * @return A list of sensitive environment variables to be set on the container. Specified as a map of name/value pairs. Changing this forces a new resource to be created.
     * 
     */
    private @Nullable Map<String,String> secureEnvironmentVariables;
    /**
     * @return The definition of the security context for this container as documented in the `security` block below. Changing this forces a new resource to be created.
     * 
     */
    private @Nullable List<GroupContainerSecurity> securities;
    /**
     * @return The definition of a volume mount for this container as documented in the `volume` block below. Changing this forces a new resource to be created.
     * 
     */
    private @Nullable List<GroupContainerVolume> volumes;

    private GroupContainer() {}
    /**
     * @return A list of commands which should be run on the container. Changing this forces a new resource to be created.
     * 
     */
    public List<String> commands() {
        return this.commands == null ? List.of() : this.commands;
    }
    /**
     * @return The required number of CPU cores of the containers. Changing this forces a new resource to be created.
     * 
     */
    public Double cpu() {
        return this.cpu;
    }
    /**
     * @return The upper limit of the number of CPU cores of the containers.
     * 
     */
    public Optional<Double> cpuLimit() {
        return Optional.ofNullable(this.cpuLimit);
    }
    /**
     * @return A list of environment variables to be set on the container. Specified as a map of name/value pairs. Changing this forces a new resource to be created.
     * 
     */
    public Map<String,String> environmentVariables() {
        return this.environmentVariables == null ? Map.of() : this.environmentVariables;
    }
    /**
     * @return A `gpu` block as defined below. Changing this forces a new resource to be created.
     * 
     * &gt; **Note:** Gpu resources are currently only supported in Linux containers.
     * 
     */
    public Optional<GroupContainerGpu> gpu() {
        return Optional.ofNullable(this.gpu);
    }
    /**
     * @return A `gpu_limit` block as defined below.
     * 
     */
    public Optional<GroupContainerGpuLimit> gpuLimit() {
        return Optional.ofNullable(this.gpuLimit);
    }
    /**
     * @return The container image name. Changing this forces a new resource to be created.
     * 
     */
    public String image() {
        return this.image;
    }
    /**
     * @return The definition of a readiness probe for this container as documented in the `liveness_probe` block below. Changing this forces a new resource to be created.
     * 
     */
    public Optional<GroupContainerLivenessProbe> livenessProbe() {
        return Optional.ofNullable(this.livenessProbe);
    }
    /**
     * @return The required memory of the containers in GB. Changing this forces a new resource to be created.
     * 
     */
    public Double memory() {
        return this.memory;
    }
    /**
     * @return The the upper limit of the memory of the containers in GB.
     * 
     */
    public Optional<Double> memoryLimit() {
        return Optional.ofNullable(this.memoryLimit);
    }
    /**
     * @return Specifies the name of the Container. Changing this forces a new resource to be created.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return A set of public ports for the container. Changing this forces a new resource to be created. Set as documented in the `ports` block below.
     * 
     */
    public List<GroupContainerPort> ports() {
        return this.ports == null ? List.of() : this.ports;
    }
    /**
     * @return The definition of a readiness probe for this container as documented in the `readiness_probe` block below. Changing this forces a new resource to be created.
     * 
     */
    public Optional<GroupContainerReadinessProbe> readinessProbe() {
        return Optional.ofNullable(this.readinessProbe);
    }
    /**
     * @return A list of sensitive environment variables to be set on the container. Specified as a map of name/value pairs. Changing this forces a new resource to be created.
     * 
     */
    public Map<String,String> secureEnvironmentVariables() {
        return this.secureEnvironmentVariables == null ? Map.of() : this.secureEnvironmentVariables;
    }
    /**
     * @return The definition of the security context for this container as documented in the `security` block below. Changing this forces a new resource to be created.
     * 
     */
    public List<GroupContainerSecurity> securities() {
        return this.securities == null ? List.of() : this.securities;
    }
    /**
     * @return The definition of a volume mount for this container as documented in the `volume` block below. Changing this forces a new resource to be created.
     * 
     */
    public List<GroupContainerVolume> volumes() {
        return this.volumes == null ? List.of() : this.volumes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GroupContainer defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> commands;
        private Double cpu;
        private @Nullable Double cpuLimit;
        private @Nullable Map<String,String> environmentVariables;
        private @Nullable GroupContainerGpu gpu;
        private @Nullable GroupContainerGpuLimit gpuLimit;
        private String image;
        private @Nullable GroupContainerLivenessProbe livenessProbe;
        private Double memory;
        private @Nullable Double memoryLimit;
        private String name;
        private @Nullable List<GroupContainerPort> ports;
        private @Nullable GroupContainerReadinessProbe readinessProbe;
        private @Nullable Map<String,String> secureEnvironmentVariables;
        private @Nullable List<GroupContainerSecurity> securities;
        private @Nullable List<GroupContainerVolume> volumes;
        public Builder() {}
        public Builder(GroupContainer defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.commands = defaults.commands;
    	      this.cpu = defaults.cpu;
    	      this.cpuLimit = defaults.cpuLimit;
    	      this.environmentVariables = defaults.environmentVariables;
    	      this.gpu = defaults.gpu;
    	      this.gpuLimit = defaults.gpuLimit;
    	      this.image = defaults.image;
    	      this.livenessProbe = defaults.livenessProbe;
    	      this.memory = defaults.memory;
    	      this.memoryLimit = defaults.memoryLimit;
    	      this.name = defaults.name;
    	      this.ports = defaults.ports;
    	      this.readinessProbe = defaults.readinessProbe;
    	      this.secureEnvironmentVariables = defaults.secureEnvironmentVariables;
    	      this.securities = defaults.securities;
    	      this.volumes = defaults.volumes;
        }

        @CustomType.Setter
        public Builder commands(@Nullable List<String> commands) {

            this.commands = commands;
            return this;
        }
        public Builder commands(String... commands) {
            return commands(List.of(commands));
        }
        @CustomType.Setter
        public Builder cpu(Double cpu) {
            if (cpu == null) {
              throw new MissingRequiredPropertyException("GroupContainer", "cpu");
            }
            this.cpu = cpu;
            return this;
        }
        @CustomType.Setter
        public Builder cpuLimit(@Nullable Double cpuLimit) {

            this.cpuLimit = cpuLimit;
            return this;
        }
        @CustomType.Setter
        public Builder environmentVariables(@Nullable Map<String,String> environmentVariables) {

            this.environmentVariables = environmentVariables;
            return this;
        }
        @CustomType.Setter
        public Builder gpu(@Nullable GroupContainerGpu gpu) {

            this.gpu = gpu;
            return this;
        }
        @CustomType.Setter
        public Builder gpuLimit(@Nullable GroupContainerGpuLimit gpuLimit) {

            this.gpuLimit = gpuLimit;
            return this;
        }
        @CustomType.Setter
        public Builder image(String image) {
            if (image == null) {
              throw new MissingRequiredPropertyException("GroupContainer", "image");
            }
            this.image = image;
            return this;
        }
        @CustomType.Setter
        public Builder livenessProbe(@Nullable GroupContainerLivenessProbe livenessProbe) {

            this.livenessProbe = livenessProbe;
            return this;
        }
        @CustomType.Setter
        public Builder memory(Double memory) {
            if (memory == null) {
              throw new MissingRequiredPropertyException("GroupContainer", "memory");
            }
            this.memory = memory;
            return this;
        }
        @CustomType.Setter
        public Builder memoryLimit(@Nullable Double memoryLimit) {

            this.memoryLimit = memoryLimit;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GroupContainer", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder ports(@Nullable List<GroupContainerPort> ports) {

            this.ports = ports;
            return this;
        }
        public Builder ports(GroupContainerPort... ports) {
            return ports(List.of(ports));
        }
        @CustomType.Setter
        public Builder readinessProbe(@Nullable GroupContainerReadinessProbe readinessProbe) {

            this.readinessProbe = readinessProbe;
            return this;
        }
        @CustomType.Setter
        public Builder secureEnvironmentVariables(@Nullable Map<String,String> secureEnvironmentVariables) {

            this.secureEnvironmentVariables = secureEnvironmentVariables;
            return this;
        }
        @CustomType.Setter
        public Builder securities(@Nullable List<GroupContainerSecurity> securities) {

            this.securities = securities;
            return this;
        }
        public Builder securities(GroupContainerSecurity... securities) {
            return securities(List.of(securities));
        }
        @CustomType.Setter
        public Builder volumes(@Nullable List<GroupContainerVolume> volumes) {

            this.volumes = volumes;
            return this;
        }
        public Builder volumes(GroupContainerVolume... volumes) {
            return volumes(List.of(volumes));
        }
        public GroupContainer build() {
            final var _resultValue = new GroupContainer();
            _resultValue.commands = commands;
            _resultValue.cpu = cpu;
            _resultValue.cpuLimit = cpuLimit;
            _resultValue.environmentVariables = environmentVariables;
            _resultValue.gpu = gpu;
            _resultValue.gpuLimit = gpuLimit;
            _resultValue.image = image;
            _resultValue.livenessProbe = livenessProbe;
            _resultValue.memory = memory;
            _resultValue.memoryLimit = memoryLimit;
            _resultValue.name = name;
            _resultValue.ports = ports;
            _resultValue.readinessProbe = readinessProbe;
            _resultValue.secureEnvironmentVariables = secureEnvironmentVariables;
            _resultValue.securities = securities;
            _resultValue.volumes = volumes;
            return _resultValue;
        }
    }
}
