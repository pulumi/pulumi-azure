// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.media.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TransformOutputFaceDetectorPresetArgs extends com.pulumi.resources.ResourceArgs {

    public static final TransformOutputFaceDetectorPresetArgs Empty = new TransformOutputFaceDetectorPresetArgs();

    /**
     * Possibles value are `SourceResolution` or `StandardDefinition`. Specifies the maximum resolution at which your video is analyzed. The default behavior is `SourceResolution` which will keep the input video at its original resolution when analyzed. Using `StandardDefinition` will resize input videos to standard definition while preserving the appropriate aspect ratio. It will only resize if the video is of higher resolution. For example, a 1920x1080 input would be scaled to 640x360 before processing. Switching to `StandardDefinition` will reduce the time it takes to process high resolution video. It may also reduce the cost of using this component (see https://azure.microsoft.com/en-us/pricing/details/media-services/#analytics for details). However, faces that end up being too small in the resized video may not be detected.
     * 
     */
    @Import(name="analysisResolution")
    private @Nullable Output<String> analysisResolution;

    /**
     * @return Possibles value are `SourceResolution` or `StandardDefinition`. Specifies the maximum resolution at which your video is analyzed. The default behavior is `SourceResolution` which will keep the input video at its original resolution when analyzed. Using `StandardDefinition` will resize input videos to standard definition while preserving the appropriate aspect ratio. It will only resize if the video is of higher resolution. For example, a 1920x1080 input would be scaled to 640x360 before processing. Switching to `StandardDefinition` will reduce the time it takes to process high resolution video. It may also reduce the cost of using this component (see https://azure.microsoft.com/en-us/pricing/details/media-services/#analytics for details). However, faces that end up being too small in the resized video may not be detected.
     * 
     */
    public Optional<Output<String>> analysisResolution() {
        return Optional.ofNullable(this.analysisResolution);
    }

    private TransformOutputFaceDetectorPresetArgs() {}

    private TransformOutputFaceDetectorPresetArgs(TransformOutputFaceDetectorPresetArgs $) {
        this.analysisResolution = $.analysisResolution;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TransformOutputFaceDetectorPresetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TransformOutputFaceDetectorPresetArgs $;

        public Builder() {
            $ = new TransformOutputFaceDetectorPresetArgs();
        }

        public Builder(TransformOutputFaceDetectorPresetArgs defaults) {
            $ = new TransformOutputFaceDetectorPresetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param analysisResolution Possibles value are `SourceResolution` or `StandardDefinition`. Specifies the maximum resolution at which your video is analyzed. The default behavior is `SourceResolution` which will keep the input video at its original resolution when analyzed. Using `StandardDefinition` will resize input videos to standard definition while preserving the appropriate aspect ratio. It will only resize if the video is of higher resolution. For example, a 1920x1080 input would be scaled to 640x360 before processing. Switching to `StandardDefinition` will reduce the time it takes to process high resolution video. It may also reduce the cost of using this component (see https://azure.microsoft.com/en-us/pricing/details/media-services/#analytics for details). However, faces that end up being too small in the resized video may not be detected.
         * 
         * @return builder
         * 
         */
        public Builder analysisResolution(@Nullable Output<String> analysisResolution) {
            $.analysisResolution = analysisResolution;
            return this;
        }

        /**
         * @param analysisResolution Possibles value are `SourceResolution` or `StandardDefinition`. Specifies the maximum resolution at which your video is analyzed. The default behavior is `SourceResolution` which will keep the input video at its original resolution when analyzed. Using `StandardDefinition` will resize input videos to standard definition while preserving the appropriate aspect ratio. It will only resize if the video is of higher resolution. For example, a 1920x1080 input would be scaled to 640x360 before processing. Switching to `StandardDefinition` will reduce the time it takes to process high resolution video. It may also reduce the cost of using this component (see https://azure.microsoft.com/en-us/pricing/details/media-services/#analytics for details). However, faces that end up being too small in the resized video may not be detected.
         * 
         * @return builder
         * 
         */
        public Builder analysisResolution(String analysisResolution) {
            return analysisResolution(Output.of(analysisResolution));
        }

        public TransformOutputFaceDetectorPresetArgs build() {
            return $;
        }
    }

}
