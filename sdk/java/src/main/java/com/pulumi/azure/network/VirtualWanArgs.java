// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VirtualWanArgs extends com.pulumi.resources.ResourceArgs {

    public static final VirtualWanArgs Empty = new VirtualWanArgs();

    /**
     * Boolean flag to specify whether branch to branch traffic is allowed. Defaults to `true`.
     * 
     */
    @Import(name="allowBranchToBranchTraffic")
    private @Nullable Output<Boolean> allowBranchToBranchTraffic;

    /**
     * @return Boolean flag to specify whether branch to branch traffic is allowed. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> allowBranchToBranchTraffic() {
        return Optional.ofNullable(this.allowBranchToBranchTraffic);
    }

    /**
     * Boolean flag to specify whether VPN encryption is disabled. Defaults to `false`.
     * 
     */
    @Import(name="disableVpnEncryption")
    private @Nullable Output<Boolean> disableVpnEncryption;

    /**
     * @return Boolean flag to specify whether VPN encryption is disabled. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> disableVpnEncryption() {
        return Optional.ofNullable(this.disableVpnEncryption);
    }

    /**
     * Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Specifies the name of the Virtual WAN. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the name of the Virtual WAN. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Specifies the Office365 local breakout category. Possible values include: `Optimize`, `OptimizeAndAllow`, `All`, `None`. Defaults to `None`.
     * 
     */
    @Import(name="office365LocalBreakoutCategory")
    private @Nullable Output<String> office365LocalBreakoutCategory;

    /**
     * @return Specifies the Office365 local breakout category. Possible values include: `Optimize`, `OptimizeAndAllow`, `All`, `None`. Defaults to `None`.
     * 
     */
    public Optional<Output<String>> office365LocalBreakoutCategory() {
        return Optional.ofNullable(this.office365LocalBreakoutCategory);
    }

    /**
     * The name of the resource group in which to create the Virtual WAN. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group in which to create the Virtual WAN. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * A mapping of tags to assign to the Virtual WAN.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the Virtual WAN.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Specifies the Virtual WAN type. Possible Values include: `Basic` and `Standard`. Defaults to `Standard`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Specifies the Virtual WAN type. Possible Values include: `Basic` and `Standard`. Defaults to `Standard`.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private VirtualWanArgs() {}

    private VirtualWanArgs(VirtualWanArgs $) {
        this.allowBranchToBranchTraffic = $.allowBranchToBranchTraffic;
        this.disableVpnEncryption = $.disableVpnEncryption;
        this.location = $.location;
        this.name = $.name;
        this.office365LocalBreakoutCategory = $.office365LocalBreakoutCategory;
        this.resourceGroupName = $.resourceGroupName;
        this.tags = $.tags;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualWanArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualWanArgs $;

        public Builder() {
            $ = new VirtualWanArgs();
        }

        public Builder(VirtualWanArgs defaults) {
            $ = new VirtualWanArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowBranchToBranchTraffic Boolean flag to specify whether branch to branch traffic is allowed. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder allowBranchToBranchTraffic(@Nullable Output<Boolean> allowBranchToBranchTraffic) {
            $.allowBranchToBranchTraffic = allowBranchToBranchTraffic;
            return this;
        }

        /**
         * @param allowBranchToBranchTraffic Boolean flag to specify whether branch to branch traffic is allowed. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder allowBranchToBranchTraffic(Boolean allowBranchToBranchTraffic) {
            return allowBranchToBranchTraffic(Output.of(allowBranchToBranchTraffic));
        }

        /**
         * @param disableVpnEncryption Boolean flag to specify whether VPN encryption is disabled. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder disableVpnEncryption(@Nullable Output<Boolean> disableVpnEncryption) {
            $.disableVpnEncryption = disableVpnEncryption;
            return this;
        }

        /**
         * @param disableVpnEncryption Boolean flag to specify whether VPN encryption is disabled. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder disableVpnEncryption(Boolean disableVpnEncryption) {
            return disableVpnEncryption(Output.of(disableVpnEncryption));
        }

        /**
         * @param location Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name Specifies the name of the Virtual WAN. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of the Virtual WAN. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param office365LocalBreakoutCategory Specifies the Office365 local breakout category. Possible values include: `Optimize`, `OptimizeAndAllow`, `All`, `None`. Defaults to `None`.
         * 
         * @return builder
         * 
         */
        public Builder office365LocalBreakoutCategory(@Nullable Output<String> office365LocalBreakoutCategory) {
            $.office365LocalBreakoutCategory = office365LocalBreakoutCategory;
            return this;
        }

        /**
         * @param office365LocalBreakoutCategory Specifies the Office365 local breakout category. Possible values include: `Optimize`, `OptimizeAndAllow`, `All`, `None`. Defaults to `None`.
         * 
         * @return builder
         * 
         */
        public Builder office365LocalBreakoutCategory(String office365LocalBreakoutCategory) {
            return office365LocalBreakoutCategory(Output.of(office365LocalBreakoutCategory));
        }

        /**
         * @param resourceGroupName The name of the resource group in which to create the Virtual WAN. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group in which to create the Virtual WAN. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param tags A mapping of tags to assign to the Virtual WAN.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags to assign to the Virtual WAN.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param type Specifies the Virtual WAN type. Possible Values include: `Basic` and `Standard`. Defaults to `Standard`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Specifies the Virtual WAN type. Possible Values include: `Basic` and `Standard`. Defaults to `Standard`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public VirtualWanArgs build() {
            if ($.resourceGroupName == null) {
                throw new MissingRequiredPropertyException("VirtualWanArgs", "resourceGroupName");
            }
            return $;
        }
    }

}
