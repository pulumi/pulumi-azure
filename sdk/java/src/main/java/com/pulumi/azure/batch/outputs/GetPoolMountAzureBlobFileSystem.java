// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.batch.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetPoolMountAzureBlobFileSystem {
    /**
     * @return The Azure Storage Account key.
     * 
     */
    private String accountKey;
    /**
     * @return The Azure Storage Account name.
     * 
     */
    private String accountName;
    /**
     * @return Additional command line options to pass to the mount command. These are &#39;net use&#39; options in Windows and &#39;mount&#39; options in Linux.
     * 
     */
    private String blobfuseOptions;
    /**
     * @return The Azure Blob Storage Container name.
     * 
     */
    private String containerName;
    /**
     * @return The ARM resource id of the user assigned identity. This property is mutually exclusive with both `account_key` and `sas_key`; exactly one must be specified.
     * 
     */
    private String identityId;
    /**
     * @return The relative path on compute node where the file system will be mounted All file systems are mounted relative to the Batch mounts directory, accessible via the `AZ_BATCH_NODE_MOUNTS_DIR` environment variable.
     * 
     */
    private String relativeMountPath;
    /**
     * @return The Azure Storage SAS token. This property is mutually exclusive with both `account_key` and `identity_id`; exactly one must be specified.
     * 
     */
    private String sasKey;

    private GetPoolMountAzureBlobFileSystem() {}
    /**
     * @return The Azure Storage Account key.
     * 
     */
    public String accountKey() {
        return this.accountKey;
    }
    /**
     * @return The Azure Storage Account name.
     * 
     */
    public String accountName() {
        return this.accountName;
    }
    /**
     * @return Additional command line options to pass to the mount command. These are &#39;net use&#39; options in Windows and &#39;mount&#39; options in Linux.
     * 
     */
    public String blobfuseOptions() {
        return this.blobfuseOptions;
    }
    /**
     * @return The Azure Blob Storage Container name.
     * 
     */
    public String containerName() {
        return this.containerName;
    }
    /**
     * @return The ARM resource id of the user assigned identity. This property is mutually exclusive with both `account_key` and `sas_key`; exactly one must be specified.
     * 
     */
    public String identityId() {
        return this.identityId;
    }
    /**
     * @return The relative path on compute node where the file system will be mounted All file systems are mounted relative to the Batch mounts directory, accessible via the `AZ_BATCH_NODE_MOUNTS_DIR` environment variable.
     * 
     */
    public String relativeMountPath() {
        return this.relativeMountPath;
    }
    /**
     * @return The Azure Storage SAS token. This property is mutually exclusive with both `account_key` and `identity_id`; exactly one must be specified.
     * 
     */
    public String sasKey() {
        return this.sasKey;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPoolMountAzureBlobFileSystem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountKey;
        private String accountName;
        private String blobfuseOptions;
        private String containerName;
        private String identityId;
        private String relativeMountPath;
        private String sasKey;
        public Builder() {}
        public Builder(GetPoolMountAzureBlobFileSystem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountKey = defaults.accountKey;
    	      this.accountName = defaults.accountName;
    	      this.blobfuseOptions = defaults.blobfuseOptions;
    	      this.containerName = defaults.containerName;
    	      this.identityId = defaults.identityId;
    	      this.relativeMountPath = defaults.relativeMountPath;
    	      this.sasKey = defaults.sasKey;
        }

        @CustomType.Setter
        public Builder accountKey(String accountKey) {
            if (accountKey == null) {
              throw new MissingRequiredPropertyException("GetPoolMountAzureBlobFileSystem", "accountKey");
            }
            this.accountKey = accountKey;
            return this;
        }
        @CustomType.Setter
        public Builder accountName(String accountName) {
            if (accountName == null) {
              throw new MissingRequiredPropertyException("GetPoolMountAzureBlobFileSystem", "accountName");
            }
            this.accountName = accountName;
            return this;
        }
        @CustomType.Setter
        public Builder blobfuseOptions(String blobfuseOptions) {
            if (blobfuseOptions == null) {
              throw new MissingRequiredPropertyException("GetPoolMountAzureBlobFileSystem", "blobfuseOptions");
            }
            this.blobfuseOptions = blobfuseOptions;
            return this;
        }
        @CustomType.Setter
        public Builder containerName(String containerName) {
            if (containerName == null) {
              throw new MissingRequiredPropertyException("GetPoolMountAzureBlobFileSystem", "containerName");
            }
            this.containerName = containerName;
            return this;
        }
        @CustomType.Setter
        public Builder identityId(String identityId) {
            if (identityId == null) {
              throw new MissingRequiredPropertyException("GetPoolMountAzureBlobFileSystem", "identityId");
            }
            this.identityId = identityId;
            return this;
        }
        @CustomType.Setter
        public Builder relativeMountPath(String relativeMountPath) {
            if (relativeMountPath == null) {
              throw new MissingRequiredPropertyException("GetPoolMountAzureBlobFileSystem", "relativeMountPath");
            }
            this.relativeMountPath = relativeMountPath;
            return this;
        }
        @CustomType.Setter
        public Builder sasKey(String sasKey) {
            if (sasKey == null) {
              throw new MissingRequiredPropertyException("GetPoolMountAzureBlobFileSystem", "sasKey");
            }
            this.sasKey = sasKey;
            return this;
        }
        public GetPoolMountAzureBlobFileSystem build() {
            final var _resultValue = new GetPoolMountAzureBlobFileSystem();
            _resultValue.accountKey = accountKey;
            _resultValue.accountName = accountName;
            _resultValue.blobfuseOptions = blobfuseOptions;
            _resultValue.containerName = containerName;
            _resultValue.identityId = identityId;
            _resultValue.relativeMountPath = relativeMountPath;
            _resultValue.sasKey = sasKey;
            return _resultValue;
        }
    }
}
