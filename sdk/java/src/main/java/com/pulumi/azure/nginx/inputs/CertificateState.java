// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.nginx.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CertificateState extends com.pulumi.resources.ResourceArgs {

    public static final CertificateState Empty = new CertificateState();

    /**
     * Specify the path to the certificate file of this certificate.
     * 
     */
    @Import(name="certificateVirtualPath")
    private @Nullable Output<String> certificateVirtualPath;

    /**
     * @return Specify the path to the certificate file of this certificate.
     * 
     */
    public Optional<Output<String>> certificateVirtualPath() {
        return Optional.ofNullable(this.certificateVirtualPath);
    }

    /**
     * Specify the ID of the Key Vault Secret for this certificate.
     * 
     */
    @Import(name="keyVaultSecretId")
    private @Nullable Output<String> keyVaultSecretId;

    /**
     * @return Specify the ID of the Key Vault Secret for this certificate.
     * 
     */
    public Optional<Output<String>> keyVaultSecretId() {
        return Optional.ofNullable(this.keyVaultSecretId);
    }

    /**
     * Specify the path to the key file of this certificate.
     * 
     */
    @Import(name="keyVirtualPath")
    private @Nullable Output<String> keyVirtualPath;

    /**
     * @return Specify the path to the key file of this certificate.
     * 
     */
    public Optional<Output<String>> keyVirtualPath() {
        return Optional.ofNullable(this.keyVirtualPath);
    }

    /**
     * The name which should be used for this Nginx Certificate. Changing this forces a new Nginx Certificate to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name which should be used for this Nginx Certificate. Changing this forces a new Nginx Certificate to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the Nginx Deployment that this Certificate should be associated with. Changing this forces a new Nginx Certificate to be created.
     * 
     */
    @Import(name="nginxDeploymentId")
    private @Nullable Output<String> nginxDeploymentId;

    /**
     * @return The ID of the Nginx Deployment that this Certificate should be associated with. Changing this forces a new Nginx Certificate to be created.
     * 
     */
    public Optional<Output<String>> nginxDeploymentId() {
        return Optional.ofNullable(this.nginxDeploymentId);
    }

    private CertificateState() {}

    private CertificateState(CertificateState $) {
        this.certificateVirtualPath = $.certificateVirtualPath;
        this.keyVaultSecretId = $.keyVaultSecretId;
        this.keyVirtualPath = $.keyVirtualPath;
        this.name = $.name;
        this.nginxDeploymentId = $.nginxDeploymentId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertificateState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertificateState $;

        public Builder() {
            $ = new CertificateState();
        }

        public Builder(CertificateState defaults) {
            $ = new CertificateState(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateVirtualPath Specify the path to the certificate file of this certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificateVirtualPath(@Nullable Output<String> certificateVirtualPath) {
            $.certificateVirtualPath = certificateVirtualPath;
            return this;
        }

        /**
         * @param certificateVirtualPath Specify the path to the certificate file of this certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificateVirtualPath(String certificateVirtualPath) {
            return certificateVirtualPath(Output.of(certificateVirtualPath));
        }

        /**
         * @param keyVaultSecretId Specify the ID of the Key Vault Secret for this certificate.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultSecretId(@Nullable Output<String> keyVaultSecretId) {
            $.keyVaultSecretId = keyVaultSecretId;
            return this;
        }

        /**
         * @param keyVaultSecretId Specify the ID of the Key Vault Secret for this certificate.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultSecretId(String keyVaultSecretId) {
            return keyVaultSecretId(Output.of(keyVaultSecretId));
        }

        /**
         * @param keyVirtualPath Specify the path to the key file of this certificate.
         * 
         * @return builder
         * 
         */
        public Builder keyVirtualPath(@Nullable Output<String> keyVirtualPath) {
            $.keyVirtualPath = keyVirtualPath;
            return this;
        }

        /**
         * @param keyVirtualPath Specify the path to the key file of this certificate.
         * 
         * @return builder
         * 
         */
        public Builder keyVirtualPath(String keyVirtualPath) {
            return keyVirtualPath(Output.of(keyVirtualPath));
        }

        /**
         * @param name The name which should be used for this Nginx Certificate. Changing this forces a new Nginx Certificate to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this Nginx Certificate. Changing this forces a new Nginx Certificate to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nginxDeploymentId The ID of the Nginx Deployment that this Certificate should be associated with. Changing this forces a new Nginx Certificate to be created.
         * 
         * @return builder
         * 
         */
        public Builder nginxDeploymentId(@Nullable Output<String> nginxDeploymentId) {
            $.nginxDeploymentId = nginxDeploymentId;
            return this;
        }

        /**
         * @param nginxDeploymentId The ID of the Nginx Deployment that this Certificate should be associated with. Changing this forces a new Nginx Certificate to be created.
         * 
         * @return builder
         * 
         */
        public Builder nginxDeploymentId(String nginxDeploymentId) {
            return nginxDeploymentId(Output.of(nginxDeploymentId));
        }

        public CertificateState build() {
            return $;
        }
    }

}
