// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.dashboard.outputs;

import com.pulumi.azure.dashboard.outputs.GetGrafanaAzureMonitorWorkspaceIntegration;
import com.pulumi.azure.dashboard.outputs.GetGrafanaIdentity;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetGrafanaResult {
    /**
     * @return Whether the api key setting of the Grafana instance is enabled.
     * 
     */
    private Boolean apiKeyEnabled;
    /**
     * @return Scope for dns deterministic name hash calculation.
     * 
     */
    private String autoGeneratedDomainNameLabelScope;
    /**
     * @return Integrations for Azure Monitor Workspace.
     * 
     */
    private List<GetGrafanaAzureMonitorWorkspaceIntegration> azureMonitorWorkspaceIntegrations;
    /**
     * @return Whether the Grafana instance uses deterministic outbound IPs.
     * 
     */
    private Boolean deterministicOutboundIpEnabled;
    /**
     * @return The endpoint of the Grafana instance.
     * 
     */
    private String endpoint;
    /**
     * @return Major version of Grafana instance.
     * 
     */
    private String grafanaMajorVersion;
    /**
     * @return The full Grafana software semantic version deployed.
     * 
     */
    private String grafanaVersion;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The managed identity of the grafana resource.
     * 
     */
    private @Nullable GetGrafanaIdentity identity;
    /**
     * @return Azure location where the resource exists.
     * 
     */
    private String location;
    private String name;
    private List<String> outboundIps;
    /**
     * @return Whether or not public endpoint access is allowed for this server.
     * 
     */
    private Boolean publicNetworkAccessEnabled;
    private String resourceGroupName;
    /**
     * @return The name of the SKU used for the Grafana instance.
     * 
     */
    private String sku;
    /**
     * @return A mapping of tags to assigned to the resource.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return The zone redundancy setting of the Grafana instance.
     * 
     */
    private Boolean zoneRedundancyEnabled;

    private GetGrafanaResult() {}
    /**
     * @return Whether the api key setting of the Grafana instance is enabled.
     * 
     */
    public Boolean apiKeyEnabled() {
        return this.apiKeyEnabled;
    }
    /**
     * @return Scope for dns deterministic name hash calculation.
     * 
     */
    public String autoGeneratedDomainNameLabelScope() {
        return this.autoGeneratedDomainNameLabelScope;
    }
    /**
     * @return Integrations for Azure Monitor Workspace.
     * 
     */
    public List<GetGrafanaAzureMonitorWorkspaceIntegration> azureMonitorWorkspaceIntegrations() {
        return this.azureMonitorWorkspaceIntegrations;
    }
    /**
     * @return Whether the Grafana instance uses deterministic outbound IPs.
     * 
     */
    public Boolean deterministicOutboundIpEnabled() {
        return this.deterministicOutboundIpEnabled;
    }
    /**
     * @return The endpoint of the Grafana instance.
     * 
     */
    public String endpoint() {
        return this.endpoint;
    }
    /**
     * @return Major version of Grafana instance.
     * 
     */
    public String grafanaMajorVersion() {
        return this.grafanaMajorVersion;
    }
    /**
     * @return The full Grafana software semantic version deployed.
     * 
     */
    public String grafanaVersion() {
        return this.grafanaVersion;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The managed identity of the grafana resource.
     * 
     */
    public Optional<GetGrafanaIdentity> identity() {
        return Optional.ofNullable(this.identity);
    }
    /**
     * @return Azure location where the resource exists.
     * 
     */
    public String location() {
        return this.location;
    }
    public String name() {
        return this.name;
    }
    public List<String> outboundIps() {
        return this.outboundIps;
    }
    /**
     * @return Whether or not public endpoint access is allowed for this server.
     * 
     */
    public Boolean publicNetworkAccessEnabled() {
        return this.publicNetworkAccessEnabled;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return The name of the SKU used for the Grafana instance.
     * 
     */
    public String sku() {
        return this.sku;
    }
    /**
     * @return A mapping of tags to assigned to the resource.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return The zone redundancy setting of the Grafana instance.
     * 
     */
    public Boolean zoneRedundancyEnabled() {
        return this.zoneRedundancyEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGrafanaResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean apiKeyEnabled;
        private String autoGeneratedDomainNameLabelScope;
        private List<GetGrafanaAzureMonitorWorkspaceIntegration> azureMonitorWorkspaceIntegrations;
        private Boolean deterministicOutboundIpEnabled;
        private String endpoint;
        private String grafanaMajorVersion;
        private String grafanaVersion;
        private String id;
        private @Nullable GetGrafanaIdentity identity;
        private String location;
        private String name;
        private List<String> outboundIps;
        private Boolean publicNetworkAccessEnabled;
        private String resourceGroupName;
        private String sku;
        private Map<String,String> tags;
        private Boolean zoneRedundancyEnabled;
        public Builder() {}
        public Builder(GetGrafanaResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apiKeyEnabled = defaults.apiKeyEnabled;
    	      this.autoGeneratedDomainNameLabelScope = defaults.autoGeneratedDomainNameLabelScope;
    	      this.azureMonitorWorkspaceIntegrations = defaults.azureMonitorWorkspaceIntegrations;
    	      this.deterministicOutboundIpEnabled = defaults.deterministicOutboundIpEnabled;
    	      this.endpoint = defaults.endpoint;
    	      this.grafanaMajorVersion = defaults.grafanaMajorVersion;
    	      this.grafanaVersion = defaults.grafanaVersion;
    	      this.id = defaults.id;
    	      this.identity = defaults.identity;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.outboundIps = defaults.outboundIps;
    	      this.publicNetworkAccessEnabled = defaults.publicNetworkAccessEnabled;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.sku = defaults.sku;
    	      this.tags = defaults.tags;
    	      this.zoneRedundancyEnabled = defaults.zoneRedundancyEnabled;
        }

        @CustomType.Setter
        public Builder apiKeyEnabled(Boolean apiKeyEnabled) {
            if (apiKeyEnabled == null) {
              throw new MissingRequiredPropertyException("GetGrafanaResult", "apiKeyEnabled");
            }
            this.apiKeyEnabled = apiKeyEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder autoGeneratedDomainNameLabelScope(String autoGeneratedDomainNameLabelScope) {
            if (autoGeneratedDomainNameLabelScope == null) {
              throw new MissingRequiredPropertyException("GetGrafanaResult", "autoGeneratedDomainNameLabelScope");
            }
            this.autoGeneratedDomainNameLabelScope = autoGeneratedDomainNameLabelScope;
            return this;
        }
        @CustomType.Setter
        public Builder azureMonitorWorkspaceIntegrations(List<GetGrafanaAzureMonitorWorkspaceIntegration> azureMonitorWorkspaceIntegrations) {
            if (azureMonitorWorkspaceIntegrations == null) {
              throw new MissingRequiredPropertyException("GetGrafanaResult", "azureMonitorWorkspaceIntegrations");
            }
            this.azureMonitorWorkspaceIntegrations = azureMonitorWorkspaceIntegrations;
            return this;
        }
        public Builder azureMonitorWorkspaceIntegrations(GetGrafanaAzureMonitorWorkspaceIntegration... azureMonitorWorkspaceIntegrations) {
            return azureMonitorWorkspaceIntegrations(List.of(azureMonitorWorkspaceIntegrations));
        }
        @CustomType.Setter
        public Builder deterministicOutboundIpEnabled(Boolean deterministicOutboundIpEnabled) {
            if (deterministicOutboundIpEnabled == null) {
              throw new MissingRequiredPropertyException("GetGrafanaResult", "deterministicOutboundIpEnabled");
            }
            this.deterministicOutboundIpEnabled = deterministicOutboundIpEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder endpoint(String endpoint) {
            if (endpoint == null) {
              throw new MissingRequiredPropertyException("GetGrafanaResult", "endpoint");
            }
            this.endpoint = endpoint;
            return this;
        }
        @CustomType.Setter
        public Builder grafanaMajorVersion(String grafanaMajorVersion) {
            if (grafanaMajorVersion == null) {
              throw new MissingRequiredPropertyException("GetGrafanaResult", "grafanaMajorVersion");
            }
            this.grafanaMajorVersion = grafanaMajorVersion;
            return this;
        }
        @CustomType.Setter
        public Builder grafanaVersion(String grafanaVersion) {
            if (grafanaVersion == null) {
              throw new MissingRequiredPropertyException("GetGrafanaResult", "grafanaVersion");
            }
            this.grafanaVersion = grafanaVersion;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetGrafanaResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder identity(@Nullable GetGrafanaIdentity identity) {

            this.identity = identity;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetGrafanaResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetGrafanaResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder outboundIps(List<String> outboundIps) {
            if (outboundIps == null) {
              throw new MissingRequiredPropertyException("GetGrafanaResult", "outboundIps");
            }
            this.outboundIps = outboundIps;
            return this;
        }
        public Builder outboundIps(String... outboundIps) {
            return outboundIps(List.of(outboundIps));
        }
        @CustomType.Setter
        public Builder publicNetworkAccessEnabled(Boolean publicNetworkAccessEnabled) {
            if (publicNetworkAccessEnabled == null) {
              throw new MissingRequiredPropertyException("GetGrafanaResult", "publicNetworkAccessEnabled");
            }
            this.publicNetworkAccessEnabled = publicNetworkAccessEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            if (resourceGroupName == null) {
              throw new MissingRequiredPropertyException("GetGrafanaResult", "resourceGroupName");
            }
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder sku(String sku) {
            if (sku == null) {
              throw new MissingRequiredPropertyException("GetGrafanaResult", "sku");
            }
            this.sku = sku;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetGrafanaResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder zoneRedundancyEnabled(Boolean zoneRedundancyEnabled) {
            if (zoneRedundancyEnabled == null) {
              throw new MissingRequiredPropertyException("GetGrafanaResult", "zoneRedundancyEnabled");
            }
            this.zoneRedundancyEnabled = zoneRedundancyEnabled;
            return this;
        }
        public GetGrafanaResult build() {
            final var _resultValue = new GetGrafanaResult();
            _resultValue.apiKeyEnabled = apiKeyEnabled;
            _resultValue.autoGeneratedDomainNameLabelScope = autoGeneratedDomainNameLabelScope;
            _resultValue.azureMonitorWorkspaceIntegrations = azureMonitorWorkspaceIntegrations;
            _resultValue.deterministicOutboundIpEnabled = deterministicOutboundIpEnabled;
            _resultValue.endpoint = endpoint;
            _resultValue.grafanaMajorVersion = grafanaMajorVersion;
            _resultValue.grafanaVersion = grafanaVersion;
            _resultValue.id = id;
            _resultValue.identity = identity;
            _resultValue.location = location;
            _resultValue.name = name;
            _resultValue.outboundIps = outboundIps;
            _resultValue.publicNetworkAccessEnabled = publicNetworkAccessEnabled;
            _resultValue.resourceGroupName = resourceGroupName;
            _resultValue.sku = sku;
            _resultValue.tags = tags;
            _resultValue.zoneRedundancyEnabled = zoneRedundancyEnabled;
            return _resultValue;
        }
    }
}
