// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.dynatrace.inputs;

import com.pulumi.azure.dynatrace.inputs.TagRulesMetricRuleFilteringTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TagRulesMetricRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final TagRulesMetricRuleArgs Empty = new TagRulesMetricRuleArgs();

    /**
     * Filtering tag for the metric rule. A `filtering_tag` block as defined below.
     * 
     */
    @Import(name="filteringTags", required=true)
    private Output<List<TagRulesMetricRuleFilteringTagArgs>> filteringTags;

    /**
     * @return Filtering tag for the metric rule. A `filtering_tag` block as defined below.
     * 
     */
    public Output<List<TagRulesMetricRuleFilteringTagArgs>> filteringTags() {
        return this.filteringTags;
    }

    /**
     * If sending metrics is enabled. The default value is `false`.
     * 
     */
    @Import(name="sendingMetricsEnabled")
    private @Nullable Output<Boolean> sendingMetricsEnabled;

    /**
     * @return If sending metrics is enabled. The default value is `false`.
     * 
     */
    public Optional<Output<Boolean>> sendingMetricsEnabled() {
        return Optional.ofNullable(this.sendingMetricsEnabled);
    }

    private TagRulesMetricRuleArgs() {}

    private TagRulesMetricRuleArgs(TagRulesMetricRuleArgs $) {
        this.filteringTags = $.filteringTags;
        this.sendingMetricsEnabled = $.sendingMetricsEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TagRulesMetricRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TagRulesMetricRuleArgs $;

        public Builder() {
            $ = new TagRulesMetricRuleArgs();
        }

        public Builder(TagRulesMetricRuleArgs defaults) {
            $ = new TagRulesMetricRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param filteringTags Filtering tag for the metric rule. A `filtering_tag` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder filteringTags(Output<List<TagRulesMetricRuleFilteringTagArgs>> filteringTags) {
            $.filteringTags = filteringTags;
            return this;
        }

        /**
         * @param filteringTags Filtering tag for the metric rule. A `filtering_tag` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder filteringTags(List<TagRulesMetricRuleFilteringTagArgs> filteringTags) {
            return filteringTags(Output.of(filteringTags));
        }

        /**
         * @param filteringTags Filtering tag for the metric rule. A `filtering_tag` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder filteringTags(TagRulesMetricRuleFilteringTagArgs... filteringTags) {
            return filteringTags(List.of(filteringTags));
        }

        /**
         * @param sendingMetricsEnabled If sending metrics is enabled. The default value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder sendingMetricsEnabled(@Nullable Output<Boolean> sendingMetricsEnabled) {
            $.sendingMetricsEnabled = sendingMetricsEnabled;
            return this;
        }

        /**
         * @param sendingMetricsEnabled If sending metrics is enabled. The default value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder sendingMetricsEnabled(Boolean sendingMetricsEnabled) {
            return sendingMetricsEnabled(Output.of(sendingMetricsEnabled));
        }

        public TagRulesMetricRuleArgs build() {
            if ($.filteringTags == null) {
                throw new MissingRequiredPropertyException("TagRulesMetricRuleArgs", "filteringTags");
            }
            return $;
        }
    }

}
