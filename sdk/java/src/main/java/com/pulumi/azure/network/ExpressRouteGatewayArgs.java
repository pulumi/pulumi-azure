// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ExpressRouteGatewayArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExpressRouteGatewayArgs Empty = new ExpressRouteGatewayArgs();

    /**
     * Specified whether this gateway accept traffic from non-Virtual WAN networks. Defaults to `false`.
     * 
     */
    @Import(name="allowNonVirtualWanTraffic")
    private @Nullable Output<Boolean> allowNonVirtualWanTraffic;

    /**
     * @return Specified whether this gateway accept traffic from non-Virtual WAN networks. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> allowNonVirtualWanTraffic() {
        return Optional.ofNullable(this.allowNonVirtualWanTraffic);
    }

    /**
     * Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the ExpressRoute gateway. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the ExpressRoute gateway. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The name of the resource group in which to create the ExpressRoute gateway. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group in which to create the ExpressRoute gateway. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The number of scale units with which to provision the ExpressRoute gateway. Each scale unit is equal to 2Gbps, with support for up to 10 scale units (20Gbps).
     * 
     */
    @Import(name="scaleUnits", required=true)
    private Output<Integer> scaleUnits;

    /**
     * @return The number of scale units with which to provision the ExpressRoute gateway. Each scale unit is equal to 2Gbps, with support for up to 10 scale units (20Gbps).
     * 
     */
    public Output<Integer> scaleUnits() {
        return this.scaleUnits;
    }

    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The ID of a Virtual HUB within which the ExpressRoute gateway should be created. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="virtualHubId", required=true)
    private Output<String> virtualHubId;

    /**
     * @return The ID of a Virtual HUB within which the ExpressRoute gateway should be created. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> virtualHubId() {
        return this.virtualHubId;
    }

    private ExpressRouteGatewayArgs() {}

    private ExpressRouteGatewayArgs(ExpressRouteGatewayArgs $) {
        this.allowNonVirtualWanTraffic = $.allowNonVirtualWanTraffic;
        this.location = $.location;
        this.name = $.name;
        this.resourceGroupName = $.resourceGroupName;
        this.scaleUnits = $.scaleUnits;
        this.tags = $.tags;
        this.virtualHubId = $.virtualHubId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExpressRouteGatewayArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExpressRouteGatewayArgs $;

        public Builder() {
            $ = new ExpressRouteGatewayArgs();
        }

        public Builder(ExpressRouteGatewayArgs defaults) {
            $ = new ExpressRouteGatewayArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowNonVirtualWanTraffic Specified whether this gateway accept traffic from non-Virtual WAN networks. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder allowNonVirtualWanTraffic(@Nullable Output<Boolean> allowNonVirtualWanTraffic) {
            $.allowNonVirtualWanTraffic = allowNonVirtualWanTraffic;
            return this;
        }

        /**
         * @param allowNonVirtualWanTraffic Specified whether this gateway accept traffic from non-Virtual WAN networks. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder allowNonVirtualWanTraffic(Boolean allowNonVirtualWanTraffic) {
            return allowNonVirtualWanTraffic(Output.of(allowNonVirtualWanTraffic));
        }

        /**
         * @param location Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The name of the ExpressRoute gateway. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the ExpressRoute gateway. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param resourceGroupName The name of the resource group in which to create the ExpressRoute gateway. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group in which to create the ExpressRoute gateway. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param scaleUnits The number of scale units with which to provision the ExpressRoute gateway. Each scale unit is equal to 2Gbps, with support for up to 10 scale units (20Gbps).
         * 
         * @return builder
         * 
         */
        public Builder scaleUnits(Output<Integer> scaleUnits) {
            $.scaleUnits = scaleUnits;
            return this;
        }

        /**
         * @param scaleUnits The number of scale units with which to provision the ExpressRoute gateway. Each scale unit is equal to 2Gbps, with support for up to 10 scale units (20Gbps).
         * 
         * @return builder
         * 
         */
        public Builder scaleUnits(Integer scaleUnits) {
            return scaleUnits(Output.of(scaleUnits));
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param virtualHubId The ID of a Virtual HUB within which the ExpressRoute gateway should be created. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder virtualHubId(Output<String> virtualHubId) {
            $.virtualHubId = virtualHubId;
            return this;
        }

        /**
         * @param virtualHubId The ID of a Virtual HUB within which the ExpressRoute gateway should be created. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder virtualHubId(String virtualHubId) {
            return virtualHubId(Output.of(virtualHubId));
        }

        public ExpressRouteGatewayArgs build() {
            if ($.resourceGroupName == null) {
                throw new MissingRequiredPropertyException("ExpressRouteGatewayArgs", "resourceGroupName");
            }
            if ($.scaleUnits == null) {
                throw new MissingRequiredPropertyException("ExpressRouteGatewayArgs", "scaleUnits");
            }
            if ($.virtualHubId == null) {
                throw new MissingRequiredPropertyException("ExpressRouteGatewayArgs", "virtualHubId");
            }
            return $;
        }
    }

}
