// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.maintenance.inputs;

import com.pulumi.azure.maintenance.inputs.AssignmentDynamicScopeFilterTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AssignmentDynamicScopeFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final AssignmentDynamicScopeFilterArgs Empty = new AssignmentDynamicScopeFilterArgs();

    /**
     * Specifies a list of locations to scope the query to.
     * 
     */
    @Import(name="locations")
    private @Nullable Output<List<String>> locations;

    /**
     * @return Specifies a list of locations to scope the query to.
     * 
     */
    public Optional<Output<List<String>>> locations() {
        return Optional.ofNullable(this.locations);
    }

    /**
     * Specifies a list of allowed operating systems.
     * 
     */
    @Import(name="osTypes")
    private @Nullable Output<List<String>> osTypes;

    /**
     * @return Specifies a list of allowed operating systems.
     * 
     */
    public Optional<Output<List<String>>> osTypes() {
        return Optional.ofNullable(this.osTypes);
    }

    /**
     * Specifies a list of allowed resource groups.
     * 
     */
    @Import(name="resourceGroups")
    private @Nullable Output<List<String>> resourceGroups;

    /**
     * @return Specifies a list of allowed resource groups.
     * 
     */
    public Optional<Output<List<String>>> resourceGroups() {
        return Optional.ofNullable(this.resourceGroups);
    }

    /**
     * Specifies a list of allowed resources.
     * 
     */
    @Import(name="resourceTypes")
    private @Nullable Output<List<String>> resourceTypes;

    /**
     * @return Specifies a list of allowed resources.
     * 
     */
    public Optional<Output<List<String>>> resourceTypes() {
        return Optional.ofNullable(this.resourceTypes);
    }

    /**
     * Filter VMs by `Any` or `All` specified tags. Defaults to `Any`.
     * 
     */
    @Import(name="tagFilter")
    private @Nullable Output<String> tagFilter;

    /**
     * @return Filter VMs by `Any` or `All` specified tags. Defaults to `Any`.
     * 
     */
    public Optional<Output<String>> tagFilter() {
        return Optional.ofNullable(this.tagFilter);
    }

    /**
     * A mapping of tags for the VM
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<AssignmentDynamicScopeFilterTagArgs>> tags;

    /**
     * @return A mapping of tags for the VM
     * 
     */
    public Optional<Output<List<AssignmentDynamicScopeFilterTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private AssignmentDynamicScopeFilterArgs() {}

    private AssignmentDynamicScopeFilterArgs(AssignmentDynamicScopeFilterArgs $) {
        this.locations = $.locations;
        this.osTypes = $.osTypes;
        this.resourceGroups = $.resourceGroups;
        this.resourceTypes = $.resourceTypes;
        this.tagFilter = $.tagFilter;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AssignmentDynamicScopeFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AssignmentDynamicScopeFilterArgs $;

        public Builder() {
            $ = new AssignmentDynamicScopeFilterArgs();
        }

        public Builder(AssignmentDynamicScopeFilterArgs defaults) {
            $ = new AssignmentDynamicScopeFilterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param locations Specifies a list of locations to scope the query to.
         * 
         * @return builder
         * 
         */
        public Builder locations(@Nullable Output<List<String>> locations) {
            $.locations = locations;
            return this;
        }

        /**
         * @param locations Specifies a list of locations to scope the query to.
         * 
         * @return builder
         * 
         */
        public Builder locations(List<String> locations) {
            return locations(Output.of(locations));
        }

        /**
         * @param locations Specifies a list of locations to scope the query to.
         * 
         * @return builder
         * 
         */
        public Builder locations(String... locations) {
            return locations(List.of(locations));
        }

        /**
         * @param osTypes Specifies a list of allowed operating systems.
         * 
         * @return builder
         * 
         */
        public Builder osTypes(@Nullable Output<List<String>> osTypes) {
            $.osTypes = osTypes;
            return this;
        }

        /**
         * @param osTypes Specifies a list of allowed operating systems.
         * 
         * @return builder
         * 
         */
        public Builder osTypes(List<String> osTypes) {
            return osTypes(Output.of(osTypes));
        }

        /**
         * @param osTypes Specifies a list of allowed operating systems.
         * 
         * @return builder
         * 
         */
        public Builder osTypes(String... osTypes) {
            return osTypes(List.of(osTypes));
        }

        /**
         * @param resourceGroups Specifies a list of allowed resource groups.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroups(@Nullable Output<List<String>> resourceGroups) {
            $.resourceGroups = resourceGroups;
            return this;
        }

        /**
         * @param resourceGroups Specifies a list of allowed resource groups.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroups(List<String> resourceGroups) {
            return resourceGroups(Output.of(resourceGroups));
        }

        /**
         * @param resourceGroups Specifies a list of allowed resource groups.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroups(String... resourceGroups) {
            return resourceGroups(List.of(resourceGroups));
        }

        /**
         * @param resourceTypes Specifies a list of allowed resources.
         * 
         * @return builder
         * 
         */
        public Builder resourceTypes(@Nullable Output<List<String>> resourceTypes) {
            $.resourceTypes = resourceTypes;
            return this;
        }

        /**
         * @param resourceTypes Specifies a list of allowed resources.
         * 
         * @return builder
         * 
         */
        public Builder resourceTypes(List<String> resourceTypes) {
            return resourceTypes(Output.of(resourceTypes));
        }

        /**
         * @param resourceTypes Specifies a list of allowed resources.
         * 
         * @return builder
         * 
         */
        public Builder resourceTypes(String... resourceTypes) {
            return resourceTypes(List.of(resourceTypes));
        }

        /**
         * @param tagFilter Filter VMs by `Any` or `All` specified tags. Defaults to `Any`.
         * 
         * @return builder
         * 
         */
        public Builder tagFilter(@Nullable Output<String> tagFilter) {
            $.tagFilter = tagFilter;
            return this;
        }

        /**
         * @param tagFilter Filter VMs by `Any` or `All` specified tags. Defaults to `Any`.
         * 
         * @return builder
         * 
         */
        public Builder tagFilter(String tagFilter) {
            return tagFilter(Output.of(tagFilter));
        }

        /**
         * @param tags A mapping of tags for the VM
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<AssignmentDynamicScopeFilterTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags for the VM
         * 
         * @return builder
         * 
         */
        public Builder tags(List<AssignmentDynamicScopeFilterTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A mapping of tags for the VM
         * 
         * @return builder
         * 
         */
        public Builder tags(AssignmentDynamicScopeFilterTagArgs... tags) {
            return tags(List.of(tags));
        }

        public AssignmentDynamicScopeFilterArgs build() {
            return $;
        }
    }

}
