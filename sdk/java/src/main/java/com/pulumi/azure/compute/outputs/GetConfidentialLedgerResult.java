// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.compute.outputs;

import com.pulumi.azure.compute.outputs.GetConfidentialLedgerAzureadBasedServicePrincipal;
import com.pulumi.azure.compute.outputs.GetConfidentialLedgerCertificateBasedSecurityPrincipal;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetConfidentialLedgerResult {
    private List<GetConfidentialLedgerAzureadBasedServicePrincipal> azureadBasedServicePrincipals;
    private List<GetConfidentialLedgerCertificateBasedSecurityPrincipal> certificateBasedSecurityPrincipals;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The Identity Service Endpoint for this Confidential Ledger.
     * 
     */
    private String identityServiceEndpoint;
    /**
     * @return The Endpoint for this Confidential Ledger.
     * 
     */
    private String ledgerEndpoint;
    /**
     * @return The type of Confidential Ledger.
     * 
     */
    private String ledgerType;
    /**
     * @return The supported Azure location where the Confidential Ledger exists.
     * 
     */
    private String location;
    private String name;
    private String resourceGroupName;
    /**
     * @return A mapping of tags to assign to the Confidential Ledger.
     * 
     */
    private Map<String,String> tags;

    private GetConfidentialLedgerResult() {}
    public List<GetConfidentialLedgerAzureadBasedServicePrincipal> azureadBasedServicePrincipals() {
        return this.azureadBasedServicePrincipals;
    }
    public List<GetConfidentialLedgerCertificateBasedSecurityPrincipal> certificateBasedSecurityPrincipals() {
        return this.certificateBasedSecurityPrincipals;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The Identity Service Endpoint for this Confidential Ledger.
     * 
     */
    public String identityServiceEndpoint() {
        return this.identityServiceEndpoint;
    }
    /**
     * @return The Endpoint for this Confidential Ledger.
     * 
     */
    public String ledgerEndpoint() {
        return this.ledgerEndpoint;
    }
    /**
     * @return The type of Confidential Ledger.
     * 
     */
    public String ledgerType() {
        return this.ledgerType;
    }
    /**
     * @return The supported Azure location where the Confidential Ledger exists.
     * 
     */
    public String location() {
        return this.location;
    }
    public String name() {
        return this.name;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return A mapping of tags to assign to the Confidential Ledger.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConfidentialLedgerResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetConfidentialLedgerAzureadBasedServicePrincipal> azureadBasedServicePrincipals;
        private List<GetConfidentialLedgerCertificateBasedSecurityPrincipal> certificateBasedSecurityPrincipals;
        private String id;
        private String identityServiceEndpoint;
        private String ledgerEndpoint;
        private String ledgerType;
        private String location;
        private String name;
        private String resourceGroupName;
        private Map<String,String> tags;
        public Builder() {}
        public Builder(GetConfidentialLedgerResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.azureadBasedServicePrincipals = defaults.azureadBasedServicePrincipals;
    	      this.certificateBasedSecurityPrincipals = defaults.certificateBasedSecurityPrincipals;
    	      this.id = defaults.id;
    	      this.identityServiceEndpoint = defaults.identityServiceEndpoint;
    	      this.ledgerEndpoint = defaults.ledgerEndpoint;
    	      this.ledgerType = defaults.ledgerType;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder azureadBasedServicePrincipals(List<GetConfidentialLedgerAzureadBasedServicePrincipal> azureadBasedServicePrincipals) {
            if (azureadBasedServicePrincipals == null) {
              throw new MissingRequiredPropertyException("GetConfidentialLedgerResult", "azureadBasedServicePrincipals");
            }
            this.azureadBasedServicePrincipals = azureadBasedServicePrincipals;
            return this;
        }
        public Builder azureadBasedServicePrincipals(GetConfidentialLedgerAzureadBasedServicePrincipal... azureadBasedServicePrincipals) {
            return azureadBasedServicePrincipals(List.of(azureadBasedServicePrincipals));
        }
        @CustomType.Setter
        public Builder certificateBasedSecurityPrincipals(List<GetConfidentialLedgerCertificateBasedSecurityPrincipal> certificateBasedSecurityPrincipals) {
            if (certificateBasedSecurityPrincipals == null) {
              throw new MissingRequiredPropertyException("GetConfidentialLedgerResult", "certificateBasedSecurityPrincipals");
            }
            this.certificateBasedSecurityPrincipals = certificateBasedSecurityPrincipals;
            return this;
        }
        public Builder certificateBasedSecurityPrincipals(GetConfidentialLedgerCertificateBasedSecurityPrincipal... certificateBasedSecurityPrincipals) {
            return certificateBasedSecurityPrincipals(List.of(certificateBasedSecurityPrincipals));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetConfidentialLedgerResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder identityServiceEndpoint(String identityServiceEndpoint) {
            if (identityServiceEndpoint == null) {
              throw new MissingRequiredPropertyException("GetConfidentialLedgerResult", "identityServiceEndpoint");
            }
            this.identityServiceEndpoint = identityServiceEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder ledgerEndpoint(String ledgerEndpoint) {
            if (ledgerEndpoint == null) {
              throw new MissingRequiredPropertyException("GetConfidentialLedgerResult", "ledgerEndpoint");
            }
            this.ledgerEndpoint = ledgerEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder ledgerType(String ledgerType) {
            if (ledgerType == null) {
              throw new MissingRequiredPropertyException("GetConfidentialLedgerResult", "ledgerType");
            }
            this.ledgerType = ledgerType;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetConfidentialLedgerResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetConfidentialLedgerResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            if (resourceGroupName == null) {
              throw new MissingRequiredPropertyException("GetConfidentialLedgerResult", "resourceGroupName");
            }
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetConfidentialLedgerResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public GetConfidentialLedgerResult build() {
            final var _resultValue = new GetConfidentialLedgerResult();
            _resultValue.azureadBasedServicePrincipals = azureadBasedServicePrincipals;
            _resultValue.certificateBasedSecurityPrincipals = certificateBasedSecurityPrincipals;
            _resultValue.id = id;
            _resultValue.identityServiceEndpoint = identityServiceEndpoint;
            _resultValue.ledgerEndpoint = ledgerEndpoint;
            _resultValue.ledgerType = ledgerType;
            _resultValue.location = location;
            _resultValue.name = name;
            _resultValue.resourceGroupName = resourceGroupName;
            _resultValue.tags = tags;
            return _resultValue;
        }
    }
}
