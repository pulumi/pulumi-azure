// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.keyvault.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetCertificateDataResult {
    /**
     * @return Amount of certificates in the chain in case Key Vault Certificate is a bundle (e.g. has an intermediate certificate).
     * 
     */
    private Integer certificatesCount;
    /**
     * @return Expiry date of certificate in RFC3339 format.
     * 
     */
    private String expires;
    /**
     * @return The raw Key Vault Certificate data represented as a hexadecimal string.
     * 
     */
    private String hex;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The Key Vault Certificate Key.
     * 
     */
    private String key;
    private String keyVaultId;
    private String name;
    /**
     * @return Not Before date of certificate in RFC3339 format.
     * 
     */
    private String notBefore;
    /**
     * @return The Key Vault Certificate in PEM format.
     * 
     */
    private String pem;
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    private Map<String,String> tags;
    private String version;

    private GetCertificateDataResult() {}
    /**
     * @return Amount of certificates in the chain in case Key Vault Certificate is a bundle (e.g. has an intermediate certificate).
     * 
     */
    public Integer certificatesCount() {
        return this.certificatesCount;
    }
    /**
     * @return Expiry date of certificate in RFC3339 format.
     * 
     */
    public String expires() {
        return this.expires;
    }
    /**
     * @return The raw Key Vault Certificate data represented as a hexadecimal string.
     * 
     */
    public String hex() {
        return this.hex;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The Key Vault Certificate Key.
     * 
     */
    public String key() {
        return this.key;
    }
    public String keyVaultId() {
        return this.keyVaultId;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return Not Before date of certificate in RFC3339 format.
     * 
     */
    public String notBefore() {
        return this.notBefore;
    }
    /**
     * @return The Key Vault Certificate in PEM format.
     * 
     */
    public String pem() {
        return this.pem;
    }
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    public String version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCertificateDataResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer certificatesCount;
        private String expires;
        private String hex;
        private String id;
        private String key;
        private String keyVaultId;
        private String name;
        private String notBefore;
        private String pem;
        private Map<String,String> tags;
        private String version;
        public Builder() {}
        public Builder(GetCertificateDataResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificatesCount = defaults.certificatesCount;
    	      this.expires = defaults.expires;
    	      this.hex = defaults.hex;
    	      this.id = defaults.id;
    	      this.key = defaults.key;
    	      this.keyVaultId = defaults.keyVaultId;
    	      this.name = defaults.name;
    	      this.notBefore = defaults.notBefore;
    	      this.pem = defaults.pem;
    	      this.tags = defaults.tags;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder certificatesCount(Integer certificatesCount) {
            if (certificatesCount == null) {
              throw new MissingRequiredPropertyException("GetCertificateDataResult", "certificatesCount");
            }
            this.certificatesCount = certificatesCount;
            return this;
        }
        @CustomType.Setter
        public Builder expires(String expires) {
            if (expires == null) {
              throw new MissingRequiredPropertyException("GetCertificateDataResult", "expires");
            }
            this.expires = expires;
            return this;
        }
        @CustomType.Setter
        public Builder hex(String hex) {
            if (hex == null) {
              throw new MissingRequiredPropertyException("GetCertificateDataResult", "hex");
            }
            this.hex = hex;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetCertificateDataResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder key(String key) {
            if (key == null) {
              throw new MissingRequiredPropertyException("GetCertificateDataResult", "key");
            }
            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder keyVaultId(String keyVaultId) {
            if (keyVaultId == null) {
              throw new MissingRequiredPropertyException("GetCertificateDataResult", "keyVaultId");
            }
            this.keyVaultId = keyVaultId;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetCertificateDataResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder notBefore(String notBefore) {
            if (notBefore == null) {
              throw new MissingRequiredPropertyException("GetCertificateDataResult", "notBefore");
            }
            this.notBefore = notBefore;
            return this;
        }
        @CustomType.Setter
        public Builder pem(String pem) {
            if (pem == null) {
              throw new MissingRequiredPropertyException("GetCertificateDataResult", "pem");
            }
            this.pem = pem;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetCertificateDataResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder version(String version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetCertificateDataResult", "version");
            }
            this.version = version;
            return this;
        }
        public GetCertificateDataResult build() {
            final var _resultValue = new GetCertificateDataResult();
            _resultValue.certificatesCount = certificatesCount;
            _resultValue.expires = expires;
            _resultValue.hex = hex;
            _resultValue.id = id;
            _resultValue.key = key;
            _resultValue.keyVaultId = keyVaultId;
            _resultValue.name = name;
            _resultValue.notBefore = notBefore;
            _resultValue.pem = pem;
            _resultValue.tags = tags;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
