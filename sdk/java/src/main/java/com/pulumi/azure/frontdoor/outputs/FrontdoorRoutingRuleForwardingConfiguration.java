// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.frontdoor.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FrontdoorRoutingRuleForwardingConfiguration {
    /**
     * @return Specifies the name of the Backend Pool to forward the incoming traffic to.
     * 
     */
    private final String backendPoolName;
    /**
     * @return Specify the caching duration (in ISO8601 notation e.g. `P1DT2H` for 1 day and 2 hours). Needs to be greater than 0 and smaller than 365 days. `cache_duration` works only in combination with `cache_enabled` set to `true`.
     * 
     */
    private final @Nullable String cacheDuration;
    /**
     * @return Specifies whether to Enable caching or not. Valid options are `true` or `false`. Defaults to `false`.
     * 
     */
    private final @Nullable Boolean cacheEnabled;
    /**
     * @return Defines cache behaviour in relation to query string parameters. Valid options are `StripAll`, `StripAllExcept`, `StripOnly` or `StripNone`. Defaults to `StripAll`.
     * 
     */
    private final @Nullable String cacheQueryParameterStripDirective;
    /**
     * @return Specify query parameters (array). Works only in combination with `cache_query_parameter_strip_directive` set to `StripAllExcept` or `StripOnly`.
     * 
     */
    private final @Nullable List<String> cacheQueryParameters;
    /**
     * @return Whether to use dynamic compression when caching. Valid options are `true` or `false`. Defaults to `false`.
     * 
     */
    private final @Nullable Boolean cacheUseDynamicCompression;
    /**
     * @return Path to use when constructing the request to forward to the backend. This functions as a URL Rewrite. Default behaviour preserves the URL path.
     * 
     */
    private final @Nullable String customForwardingPath;
    /**
     * @return Protocol to use when redirecting. Valid options are `HttpOnly`, `HttpsOnly`, or `MatchRequest`. Defaults to `HttpsOnly`.
     * 
     */
    private final @Nullable String forwardingProtocol;

    @CustomType.Constructor
    private FrontdoorRoutingRuleForwardingConfiguration(
        @CustomType.Parameter("backendPoolName") String backendPoolName,
        @CustomType.Parameter("cacheDuration") @Nullable String cacheDuration,
        @CustomType.Parameter("cacheEnabled") @Nullable Boolean cacheEnabled,
        @CustomType.Parameter("cacheQueryParameterStripDirective") @Nullable String cacheQueryParameterStripDirective,
        @CustomType.Parameter("cacheQueryParameters") @Nullable List<String> cacheQueryParameters,
        @CustomType.Parameter("cacheUseDynamicCompression") @Nullable Boolean cacheUseDynamicCompression,
        @CustomType.Parameter("customForwardingPath") @Nullable String customForwardingPath,
        @CustomType.Parameter("forwardingProtocol") @Nullable String forwardingProtocol) {
        this.backendPoolName = backendPoolName;
        this.cacheDuration = cacheDuration;
        this.cacheEnabled = cacheEnabled;
        this.cacheQueryParameterStripDirective = cacheQueryParameterStripDirective;
        this.cacheQueryParameters = cacheQueryParameters;
        this.cacheUseDynamicCompression = cacheUseDynamicCompression;
        this.customForwardingPath = customForwardingPath;
        this.forwardingProtocol = forwardingProtocol;
    }

    /**
     * @return Specifies the name of the Backend Pool to forward the incoming traffic to.
     * 
     */
    public String backendPoolName() {
        return this.backendPoolName;
    }
    /**
     * @return Specify the caching duration (in ISO8601 notation e.g. `P1DT2H` for 1 day and 2 hours). Needs to be greater than 0 and smaller than 365 days. `cache_duration` works only in combination with `cache_enabled` set to `true`.
     * 
     */
    public Optional<String> cacheDuration() {
        return Optional.ofNullable(this.cacheDuration);
    }
    /**
     * @return Specifies whether to Enable caching or not. Valid options are `true` or `false`. Defaults to `false`.
     * 
     */
    public Optional<Boolean> cacheEnabled() {
        return Optional.ofNullable(this.cacheEnabled);
    }
    /**
     * @return Defines cache behaviour in relation to query string parameters. Valid options are `StripAll`, `StripAllExcept`, `StripOnly` or `StripNone`. Defaults to `StripAll`.
     * 
     */
    public Optional<String> cacheQueryParameterStripDirective() {
        return Optional.ofNullable(this.cacheQueryParameterStripDirective);
    }
    /**
     * @return Specify query parameters (array). Works only in combination with `cache_query_parameter_strip_directive` set to `StripAllExcept` or `StripOnly`.
     * 
     */
    public List<String> cacheQueryParameters() {
        return this.cacheQueryParameters == null ? List.of() : this.cacheQueryParameters;
    }
    /**
     * @return Whether to use dynamic compression when caching. Valid options are `true` or `false`. Defaults to `false`.
     * 
     */
    public Optional<Boolean> cacheUseDynamicCompression() {
        return Optional.ofNullable(this.cacheUseDynamicCompression);
    }
    /**
     * @return Path to use when constructing the request to forward to the backend. This functions as a URL Rewrite. Default behaviour preserves the URL path.
     * 
     */
    public Optional<String> customForwardingPath() {
        return Optional.ofNullable(this.customForwardingPath);
    }
    /**
     * @return Protocol to use when redirecting. Valid options are `HttpOnly`, `HttpsOnly`, or `MatchRequest`. Defaults to `HttpsOnly`.
     * 
     */
    public Optional<String> forwardingProtocol() {
        return Optional.ofNullable(this.forwardingProtocol);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FrontdoorRoutingRuleForwardingConfiguration defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String backendPoolName;
        private @Nullable String cacheDuration;
        private @Nullable Boolean cacheEnabled;
        private @Nullable String cacheQueryParameterStripDirective;
        private @Nullable List<String> cacheQueryParameters;
        private @Nullable Boolean cacheUseDynamicCompression;
        private @Nullable String customForwardingPath;
        private @Nullable String forwardingProtocol;

        public Builder() {
    	      // Empty
        }

        public Builder(FrontdoorRoutingRuleForwardingConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backendPoolName = defaults.backendPoolName;
    	      this.cacheDuration = defaults.cacheDuration;
    	      this.cacheEnabled = defaults.cacheEnabled;
    	      this.cacheQueryParameterStripDirective = defaults.cacheQueryParameterStripDirective;
    	      this.cacheQueryParameters = defaults.cacheQueryParameters;
    	      this.cacheUseDynamicCompression = defaults.cacheUseDynamicCompression;
    	      this.customForwardingPath = defaults.customForwardingPath;
    	      this.forwardingProtocol = defaults.forwardingProtocol;
        }

        public Builder backendPoolName(String backendPoolName) {
            this.backendPoolName = Objects.requireNonNull(backendPoolName);
            return this;
        }
        public Builder cacheDuration(@Nullable String cacheDuration) {
            this.cacheDuration = cacheDuration;
            return this;
        }
        public Builder cacheEnabled(@Nullable Boolean cacheEnabled) {
            this.cacheEnabled = cacheEnabled;
            return this;
        }
        public Builder cacheQueryParameterStripDirective(@Nullable String cacheQueryParameterStripDirective) {
            this.cacheQueryParameterStripDirective = cacheQueryParameterStripDirective;
            return this;
        }
        public Builder cacheQueryParameters(@Nullable List<String> cacheQueryParameters) {
            this.cacheQueryParameters = cacheQueryParameters;
            return this;
        }
        public Builder cacheQueryParameters(String... cacheQueryParameters) {
            return cacheQueryParameters(List.of(cacheQueryParameters));
        }
        public Builder cacheUseDynamicCompression(@Nullable Boolean cacheUseDynamicCompression) {
            this.cacheUseDynamicCompression = cacheUseDynamicCompression;
            return this;
        }
        public Builder customForwardingPath(@Nullable String customForwardingPath) {
            this.customForwardingPath = customForwardingPath;
            return this;
        }
        public Builder forwardingProtocol(@Nullable String forwardingProtocol) {
            this.forwardingProtocol = forwardingProtocol;
            return this;
        }        public FrontdoorRoutingRuleForwardingConfiguration build() {
            return new FrontdoorRoutingRuleForwardingConfiguration(backendPoolName, cacheDuration, cacheEnabled, cacheQueryParameterStripDirective, cacheQueryParameters, cacheUseDynamicCompression, customForwardingPath, forwardingProtocol);
        }
    }
}
