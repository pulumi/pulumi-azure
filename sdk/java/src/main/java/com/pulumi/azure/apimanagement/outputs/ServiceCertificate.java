// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.apimanagement.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ServiceCertificate {
    /**
     * @return The password for the certificate.
     * 
     */
    private final @Nullable String certificatePassword;
    /**
     * @return The Base64 Encoded PFX or Base64 Encoded X.509 Certificate.
     * 
     */
    private final String encodedCertificate;
    /**
     * @return The expiration date of the certificate in RFC3339 format: `2000-01-02T03:04:05Z`.
     * 
     */
    private final @Nullable String expiry;
    /**
     * @return The name of the Certificate Store where this certificate should be stored. Possible values are `CertificateAuthority` and `Root`.
     * 
     */
    private final String storeName;
    /**
     * @return The subject of the certificate.
     * 
     */
    private final @Nullable String subject;
    /**
     * @return The thumbprint of the certificate.
     * 
     */
    private final @Nullable String thumbprint;

    @CustomType.Constructor
    private ServiceCertificate(
        @CustomType.Parameter("certificatePassword") @Nullable String certificatePassword,
        @CustomType.Parameter("encodedCertificate") String encodedCertificate,
        @CustomType.Parameter("expiry") @Nullable String expiry,
        @CustomType.Parameter("storeName") String storeName,
        @CustomType.Parameter("subject") @Nullable String subject,
        @CustomType.Parameter("thumbprint") @Nullable String thumbprint) {
        this.certificatePassword = certificatePassword;
        this.encodedCertificate = encodedCertificate;
        this.expiry = expiry;
        this.storeName = storeName;
        this.subject = subject;
        this.thumbprint = thumbprint;
    }

    /**
     * @return The password for the certificate.
     * 
     */
    public Optional<String> certificatePassword() {
        return Optional.ofNullable(this.certificatePassword);
    }
    /**
     * @return The Base64 Encoded PFX or Base64 Encoded X.509 Certificate.
     * 
     */
    public String encodedCertificate() {
        return this.encodedCertificate;
    }
    /**
     * @return The expiration date of the certificate in RFC3339 format: `2000-01-02T03:04:05Z`.
     * 
     */
    public Optional<String> expiry() {
        return Optional.ofNullable(this.expiry);
    }
    /**
     * @return The name of the Certificate Store where this certificate should be stored. Possible values are `CertificateAuthority` and `Root`.
     * 
     */
    public String storeName() {
        return this.storeName;
    }
    /**
     * @return The subject of the certificate.
     * 
     */
    public Optional<String> subject() {
        return Optional.ofNullable(this.subject);
    }
    /**
     * @return The thumbprint of the certificate.
     * 
     */
    public Optional<String> thumbprint() {
        return Optional.ofNullable(this.thumbprint);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceCertificate defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String certificatePassword;
        private String encodedCertificate;
        private @Nullable String expiry;
        private String storeName;
        private @Nullable String subject;
        private @Nullable String thumbprint;

        public Builder() {
    	      // Empty
        }

        public Builder(ServiceCertificate defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificatePassword = defaults.certificatePassword;
    	      this.encodedCertificate = defaults.encodedCertificate;
    	      this.expiry = defaults.expiry;
    	      this.storeName = defaults.storeName;
    	      this.subject = defaults.subject;
    	      this.thumbprint = defaults.thumbprint;
        }

        public Builder certificatePassword(@Nullable String certificatePassword) {
            this.certificatePassword = certificatePassword;
            return this;
        }
        public Builder encodedCertificate(String encodedCertificate) {
            this.encodedCertificate = Objects.requireNonNull(encodedCertificate);
            return this;
        }
        public Builder expiry(@Nullable String expiry) {
            this.expiry = expiry;
            return this;
        }
        public Builder storeName(String storeName) {
            this.storeName = Objects.requireNonNull(storeName);
            return this;
        }
        public Builder subject(@Nullable String subject) {
            this.subject = subject;
            return this;
        }
        public Builder thumbprint(@Nullable String thumbprint) {
            this.thumbprint = thumbprint;
            return this;
        }        public ServiceCertificate build() {
            return new ServiceCertificate(certificatePassword, encodedCertificate, expiry, storeName, subject, thumbprint);
        }
    }
}
