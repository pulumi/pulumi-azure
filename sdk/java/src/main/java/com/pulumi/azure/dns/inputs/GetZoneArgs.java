// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.dns.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetZoneArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetZoneArgs Empty = new GetZoneArgs();

    /**
     * The name of the DNS Zone.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the DNS Zone.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The Name of the Resource Group where the DNS Zone exists.
     * If the Name of the Resource Group is not provided, the first DNS Zone from the list of DNS Zones
     * in your subscription that matches `name` will be returned.
     * 
     */
    @Import(name="resourceGroupName")
    private @Nullable Output<String> resourceGroupName;

    /**
     * @return The Name of the Resource Group where the DNS Zone exists.
     * If the Name of the Resource Group is not provided, the first DNS Zone from the list of DNS Zones
     * in your subscription that matches `name` will be returned.
     * 
     */
    public Optional<Output<String>> resourceGroupName() {
        return Optional.ofNullable(this.resourceGroupName);
    }

    private GetZoneArgs() {}

    private GetZoneArgs(GetZoneArgs $) {
        this.name = $.name;
        this.resourceGroupName = $.resourceGroupName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetZoneArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetZoneArgs $;

        public Builder() {
            $ = new GetZoneArgs();
        }

        public Builder(GetZoneArgs defaults) {
            $ = new GetZoneArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name The name of the DNS Zone.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the DNS Zone.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param resourceGroupName The Name of the Resource Group where the DNS Zone exists.
         * If the Name of the Resource Group is not provided, the first DNS Zone from the list of DNS Zones
         * in your subscription that matches `name` will be returned.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(@Nullable Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The Name of the Resource Group where the DNS Zone exists.
         * If the Name of the Resource Group is not provided, the first DNS Zone from the list of DNS Zones
         * in your subscription that matches `name` will be returned.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public GetZoneArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetZoneArgs", "name");
            }
            return $;
        }
    }

}
