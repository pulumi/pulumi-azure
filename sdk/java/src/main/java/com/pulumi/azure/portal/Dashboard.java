// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.portal;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.portal.DashboardArgs;
import com.pulumi.azure.portal.inputs.DashboardState;
import com.pulumi.core.Alias;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a shared dashboard in the Azure Portal.
 * 
 * !&gt; **Note:** The `azure.portal.Dashboard` resource is deprecated in version 3.0 of the AzureRM provider and will be removed in version 4.0. Please use the `azure.portal.PortalDashboard` resource instead.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.CoreFunctions;
 * import com.pulumi.azure.core.inputs.GetSubscriptionArgs;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.portal.Dashboard;
 * import com.pulumi.azure.portal.DashboardArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var config = ctx.config();
 *         final var mdContent = config.get("mdContent").orElse("# Hello all :)");
 *         final var videoLink = config.get("videoLink").orElse("https://www.youtube.com/watch?v=......");
 *         final var current = CoreFunctions.getSubscription();
 * 
 *         var example = new ResourceGroup("example", ResourceGroupArgs.builder()
 *             .name("mygroup")
 *             .location("West Europe")
 *             .build());
 * 
 *         var my_board = new Dashboard("my-board", DashboardArgs.builder()
 *             .name("my-cool-dashboard")
 *             .resourceGroupName(example.name())
 *             .location(example.location())
 *             .tags(Map.of("source", "managed"))
 *             .dashboardProperties("""
 * {
 *    "lenses": {
 *         "0": {
 *             "order": 0,
 *             "parts": {
 *                 "0": {
 *                     "position": {
 *                         "x": 0,
 *                         "y": 0,
 *                         "rowSpan": 2,
 *                         "colSpan": 3
 *                     },
 *                     "metadata": {
 *                         "inputs": [],
 *                         "type": "Extension/HubsExtension/PartType/MarkdownPart",
 *                         "settings": {
 *                             "content": {
 *                                 "settings": {
 *                                     "content": "%s",
 *                                     "subtitle": "",
 *                                     "title": ""
 *                                 }
 *                             }
 *                         }
 *                     }
 *                 },
 *                 "1": {
 *                     "position": {
 *                         "x": 5,
 *                         "y": 0,
 *                         "rowSpan": 4,
 *                         "colSpan": 6
 *                     },
 *                     "metadata": {
 *                         "inputs": [],
 *                         "type": "Extension/HubsExtension/PartType/VideoPart",
 *                         "settings": {
 *                             "content": {
 *                                 "settings": {
 *                                     "title": "Important Information",
 *                                     "subtitle": "",
 *                                     "src": "%s",
 *                                     "autoplay": true
 *                                 }
 *                             }
 *                         }
 *                     }
 *                 },
 *                 "2": {
 *                     "position": {
 *                         "x": 0,
 *                         "y": 4,
 *                         "rowSpan": 4,
 *                         "colSpan": 6
 *                     },
 *                     "metadata": {
 *                         "inputs": [
 *                             {
 *                                 "name": "ComponentId",
 *                                 "value": "/subscriptions/%s/resourceGroups/myRG/providers/microsoft.insights/components/myWebApp"
 *                             }
 *                         ],
 *                         "type": "Extension/AppInsightsExtension/PartType/AppMapGalPt",
 *                         "settings": {},
 *                         "asset": {
 *                             "idInputName": "ComponentId",
 *                             "type": "ApplicationInsights"
 *                         }
 *                     }
 *                 }
 *             }
 *         }
 *     },
 *     "metadata": {
 *         "model": {
 *             "timeRange": {
 *                 "value": {
 *                     "relative": {
 *                         "duration": 24,
 *                         "timeUnit": 1
 *                     }
 *                 },
 *                 "type": "MsPortalFx.Composition.Configuration.ValueTypes.TimeRange"
 *             },
 *             "filterLocale": {
 *                 "value": "en-us"
 *             },
 *             "filters": {
 *                 "value": {
 *                     "MsPortalFx_TimeRange": {
 *                         "model": {
 *                             "format": "utc",
 *                             "granularity": "auto",
 *                             "relative": "24h"
 *                         },
 *                         "displayCache": {
 *                             "name": "UTC Time",
 *                             "value": "Past 24 hours"
 *                         },
 *                         "filteredPartIds": [
 *                             "StartboardPart-UnboundPart-ae44fef5-76b8-46b0-86f0-2b3f47bad1c7"
 *                         ]
 *                     }
 *                 }
 *             }
 *         }
 *     }
 * }
 * ", mdContent,videoLink,current.applyValue(getSubscriptionResult -> getSubscriptionResult.subscriptionId())))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * It is recommended to follow the steps outlined
 * [here](https://docs.microsoft.com/azure/azure-portal/azure-portal-dashboards-create-programmatically#fetch-the-json-representation-of-the-dashboard) to create a Dashboard in the Portal and extract the relevant JSON to use in this resource. From the extracted JSON, the contents of the `properties: {}` object can used. Variables can be injected as needed - see above example.
 * 
 * ### Using a `template_file` data source or the `templatefile` function
 * 
 * Since the contents of the dashboard JSON can be quite lengthy, use a template file to improve readability:
 * 
 * `dash.tpl`:
 * 
 * `main.tf`
 * 
 * ## Import
 * 
 * Dashboards can be imported using the `resource id`, e.g.
 * 
 * ```sh
 * $ pulumi import azure:portal/dashboard:Dashboard my-board /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Portal/dashboards/00000000-0000-0000-0000-000000000000
 * ```
 * 
 * Note the URI in the above sample can be found using the Resource Explorer tool in the Azure Portal.
 * 
 */
@ResourceType(type="azure:portal/dashboard:Dashboard")
public class Dashboard extends com.pulumi.resources.CustomResource {
    /**
     * JSON data representing dashboard body. See above for details on how to obtain this from the Portal.
     * 
     */
    @Export(name="dashboardProperties", refs={String.class}, tree="[0]")
    private Output<String> dashboardProperties;

    /**
     * @return JSON data representing dashboard body. See above for details on how to obtain this from the Portal.
     * 
     */
    public Output<String> dashboardProperties() {
        return this.dashboardProperties;
    }
    /**
     * Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * Specifies the name of the Shared Dashboard. Changing this forces a new resource to be created.
     * 
     * &gt; **Note**: You can specify a tag with the key `hidden-title` to set a more user-friendly title for this Dashboard.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Specifies the name of the Shared Dashboard. Changing this forces a new resource to be created.
     * 
     * &gt; **Note**: You can specify a tag with the key `hidden-title` to set a more user-friendly title for this Dashboard.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The name of the resource group in which to create the dashboard. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="resourceGroupName", refs={String.class}, tree="[0]")
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group in which to create the dashboard. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Export(name="tags", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> tags() {
        return Codegen.optional(this.tags);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Dashboard(java.lang.String name) {
        this(name, DashboardArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Dashboard(java.lang.String name, DashboardArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Dashboard(java.lang.String name, DashboardArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:portal/dashboard:Dashboard", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Dashboard(java.lang.String name, Output<java.lang.String> id, @Nullable DashboardState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:portal/dashboard:Dashboard", name, state, makeResourceOptions(options, id), false);
    }

    private static DashboardArgs makeArgs(DashboardArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? DashboardArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .aliases(List.of(
                Output.of(Alias.builder().type("azure:dashboard/dashboard:Dashboard").build())
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Dashboard get(java.lang.String name, Output<java.lang.String> id, @Nullable DashboardState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Dashboard(name, id, state, options);
    }
}
