// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.storage;

import com.pulumi.azure.storage.inputs.BlobInventoryPolicyRuleArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class BlobInventoryPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final BlobInventoryPolicyArgs Empty = new BlobInventoryPolicyArgs();

    /**
     * One or more `rules` blocks as defined below.
     * 
     */
    @Import(name="rules", required=true)
    private Output<List<BlobInventoryPolicyRuleArgs>> rules;

    /**
     * @return One or more `rules` blocks as defined below.
     * 
     */
    public Output<List<BlobInventoryPolicyRuleArgs>> rules() {
        return this.rules;
    }

    /**
     * The ID of the storage account to apply this Blob Inventory Policy to. Changing this forces a new Storage Blob Inventory Policy to be created.
     * 
     */
    @Import(name="storageAccountId", required=true)
    private Output<String> storageAccountId;

    /**
     * @return The ID of the storage account to apply this Blob Inventory Policy to. Changing this forces a new Storage Blob Inventory Policy to be created.
     * 
     */
    public Output<String> storageAccountId() {
        return this.storageAccountId;
    }

    private BlobInventoryPolicyArgs() {}

    private BlobInventoryPolicyArgs(BlobInventoryPolicyArgs $) {
        this.rules = $.rules;
        this.storageAccountId = $.storageAccountId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BlobInventoryPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BlobInventoryPolicyArgs $;

        public Builder() {
            $ = new BlobInventoryPolicyArgs();
        }

        public Builder(BlobInventoryPolicyArgs defaults) {
            $ = new BlobInventoryPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param rules One or more `rules` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder rules(Output<List<BlobInventoryPolicyRuleArgs>> rules) {
            $.rules = rules;
            return this;
        }

        /**
         * @param rules One or more `rules` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder rules(List<BlobInventoryPolicyRuleArgs> rules) {
            return rules(Output.of(rules));
        }

        /**
         * @param rules One or more `rules` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder rules(BlobInventoryPolicyRuleArgs... rules) {
            return rules(List.of(rules));
        }

        /**
         * @param storageAccountId The ID of the storage account to apply this Blob Inventory Policy to. Changing this forces a new Storage Blob Inventory Policy to be created.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountId(Output<String> storageAccountId) {
            $.storageAccountId = storageAccountId;
            return this;
        }

        /**
         * @param storageAccountId The ID of the storage account to apply this Blob Inventory Policy to. Changing this forces a new Storage Blob Inventory Policy to be created.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountId(String storageAccountId) {
            return storageAccountId(Output.of(storageAccountId));
        }

        public BlobInventoryPolicyArgs build() {
            if ($.rules == null) {
                throw new MissingRequiredPropertyException("BlobInventoryPolicyArgs", "rules");
            }
            if ($.storageAccountId == null) {
                throw new MissingRequiredPropertyException("BlobInventoryPolicyArgs", "storageAccountId");
            }
            return $;
        }
    }

}
