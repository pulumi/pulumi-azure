// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.mssql.inputs;

import com.pulumi.azure.mssql.inputs.VirtualMachineStorageConfigurationDataSettingsArgs;
import com.pulumi.azure.mssql.inputs.VirtualMachineStorageConfigurationLogSettingsArgs;
import com.pulumi.azure.mssql.inputs.VirtualMachineStorageConfigurationTempDbSettingsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VirtualMachineStorageConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final VirtualMachineStorageConfigurationArgs Empty = new VirtualMachineStorageConfigurationArgs();

    /**
     * A `storage_settings` block as defined below.
     * 
     */
    @Import(name="dataSettings")
    private @Nullable Output<VirtualMachineStorageConfigurationDataSettingsArgs> dataSettings;

    /**
     * @return A `storage_settings` block as defined below.
     * 
     */
    public Optional<Output<VirtualMachineStorageConfigurationDataSettingsArgs>> dataSettings() {
        return Optional.ofNullable(this.dataSettings);
    }

    /**
     * The type of disk configuration to apply to the SQL Server. Valid values include `NEW`, `EXTEND`, or `ADD`.
     * 
     */
    @Import(name="diskType", required=true)
    private Output<String> diskType;

    /**
     * @return The type of disk configuration to apply to the SQL Server. Valid values include `NEW`, `EXTEND`, or `ADD`.
     * 
     */
    public Output<String> diskType() {
        return this.diskType;
    }

    /**
     * A `storage_settings` block as defined below.
     * 
     */
    @Import(name="logSettings")
    private @Nullable Output<VirtualMachineStorageConfigurationLogSettingsArgs> logSettings;

    /**
     * @return A `storage_settings` block as defined below.
     * 
     */
    public Optional<Output<VirtualMachineStorageConfigurationLogSettingsArgs>> logSettings() {
        return Optional.ofNullable(this.logSettings);
    }

    /**
     * The type of storage workload. Valid values include `GENERAL`, `OLTP`, or `DW`.
     * 
     */
    @Import(name="storageWorkloadType", required=true)
    private Output<String> storageWorkloadType;

    /**
     * @return The type of storage workload. Valid values include `GENERAL`, `OLTP`, or `DW`.
     * 
     */
    public Output<String> storageWorkloadType() {
        return this.storageWorkloadType;
    }

    /**
     * Specifies whether to set system databases (except tempDb) location to newly created data storage. Possible values are `true` and `false`. Defaults to `false`.
     * 
     */
    @Import(name="systemDbOnDataDiskEnabled")
    private @Nullable Output<Boolean> systemDbOnDataDiskEnabled;

    /**
     * @return Specifies whether to set system databases (except tempDb) location to newly created data storage. Possible values are `true` and `false`. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> systemDbOnDataDiskEnabled() {
        return Optional.ofNullable(this.systemDbOnDataDiskEnabled);
    }

    /**
     * An `temp_db_settings` block as defined below.
     * 
     */
    @Import(name="tempDbSettings")
    private @Nullable Output<VirtualMachineStorageConfigurationTempDbSettingsArgs> tempDbSettings;

    /**
     * @return An `temp_db_settings` block as defined below.
     * 
     */
    public Optional<Output<VirtualMachineStorageConfigurationTempDbSettingsArgs>> tempDbSettings() {
        return Optional.ofNullable(this.tempDbSettings);
    }

    private VirtualMachineStorageConfigurationArgs() {}

    private VirtualMachineStorageConfigurationArgs(VirtualMachineStorageConfigurationArgs $) {
        this.dataSettings = $.dataSettings;
        this.diskType = $.diskType;
        this.logSettings = $.logSettings;
        this.storageWorkloadType = $.storageWorkloadType;
        this.systemDbOnDataDiskEnabled = $.systemDbOnDataDiskEnabled;
        this.tempDbSettings = $.tempDbSettings;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualMachineStorageConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualMachineStorageConfigurationArgs $;

        public Builder() {
            $ = new VirtualMachineStorageConfigurationArgs();
        }

        public Builder(VirtualMachineStorageConfigurationArgs defaults) {
            $ = new VirtualMachineStorageConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataSettings A `storage_settings` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder dataSettings(@Nullable Output<VirtualMachineStorageConfigurationDataSettingsArgs> dataSettings) {
            $.dataSettings = dataSettings;
            return this;
        }

        /**
         * @param dataSettings A `storage_settings` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder dataSettings(VirtualMachineStorageConfigurationDataSettingsArgs dataSettings) {
            return dataSettings(Output.of(dataSettings));
        }

        /**
         * @param diskType The type of disk configuration to apply to the SQL Server. Valid values include `NEW`, `EXTEND`, or `ADD`.
         * 
         * @return builder
         * 
         */
        public Builder diskType(Output<String> diskType) {
            $.diskType = diskType;
            return this;
        }

        /**
         * @param diskType The type of disk configuration to apply to the SQL Server. Valid values include `NEW`, `EXTEND`, or `ADD`.
         * 
         * @return builder
         * 
         */
        public Builder diskType(String diskType) {
            return diskType(Output.of(diskType));
        }

        /**
         * @param logSettings A `storage_settings` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder logSettings(@Nullable Output<VirtualMachineStorageConfigurationLogSettingsArgs> logSettings) {
            $.logSettings = logSettings;
            return this;
        }

        /**
         * @param logSettings A `storage_settings` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder logSettings(VirtualMachineStorageConfigurationLogSettingsArgs logSettings) {
            return logSettings(Output.of(logSettings));
        }

        /**
         * @param storageWorkloadType The type of storage workload. Valid values include `GENERAL`, `OLTP`, or `DW`.
         * 
         * @return builder
         * 
         */
        public Builder storageWorkloadType(Output<String> storageWorkloadType) {
            $.storageWorkloadType = storageWorkloadType;
            return this;
        }

        /**
         * @param storageWorkloadType The type of storage workload. Valid values include `GENERAL`, `OLTP`, or `DW`.
         * 
         * @return builder
         * 
         */
        public Builder storageWorkloadType(String storageWorkloadType) {
            return storageWorkloadType(Output.of(storageWorkloadType));
        }

        /**
         * @param systemDbOnDataDiskEnabled Specifies whether to set system databases (except tempDb) location to newly created data storage. Possible values are `true` and `false`. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder systemDbOnDataDiskEnabled(@Nullable Output<Boolean> systemDbOnDataDiskEnabled) {
            $.systemDbOnDataDiskEnabled = systemDbOnDataDiskEnabled;
            return this;
        }

        /**
         * @param systemDbOnDataDiskEnabled Specifies whether to set system databases (except tempDb) location to newly created data storage. Possible values are `true` and `false`. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder systemDbOnDataDiskEnabled(Boolean systemDbOnDataDiskEnabled) {
            return systemDbOnDataDiskEnabled(Output.of(systemDbOnDataDiskEnabled));
        }

        /**
         * @param tempDbSettings An `temp_db_settings` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder tempDbSettings(@Nullable Output<VirtualMachineStorageConfigurationTempDbSettingsArgs> tempDbSettings) {
            $.tempDbSettings = tempDbSettings;
            return this;
        }

        /**
         * @param tempDbSettings An `temp_db_settings` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder tempDbSettings(VirtualMachineStorageConfigurationTempDbSettingsArgs tempDbSettings) {
            return tempDbSettings(Output.of(tempDbSettings));
        }

        public VirtualMachineStorageConfigurationArgs build() {
            if ($.diskType == null) {
                throw new MissingRequiredPropertyException("VirtualMachineStorageConfigurationArgs", "diskType");
            }
            if ($.storageWorkloadType == null) {
                throw new MissingRequiredPropertyException("VirtualMachineStorageConfigurationArgs", "storageWorkloadType");
            }
            return $;
        }
    }

}
