// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.hpc.inputs;

import com.pulumi.azure.hpc.inputs.CacheDirectoryLdapBindArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CacheDirectoryLdapArgs extends com.pulumi.resources.ResourceArgs {

    public static final CacheDirectoryLdapArgs Empty = new CacheDirectoryLdapArgs();

    /**
     * The base distinguished name (DN) for the LDAP domain.
     * 
     */
    @Import(name="baseDn", required=true)
    private Output<String> baseDn;

    /**
     * @return The base distinguished name (DN) for the LDAP domain.
     * 
     */
    public Output<String> baseDn() {
        return this.baseDn;
    }

    /**
     * A `bind` block as defined above.
     * 
     */
    @Import(name="bind")
    private @Nullable Output<CacheDirectoryLdapBindArgs> bind;

    /**
     * @return A `bind` block as defined above.
     * 
     */
    public Optional<Output<CacheDirectoryLdapBindArgs>> bind() {
        return Optional.ofNullable(this.bind);
    }

    /**
     * The URI of the CA certificate to validate the LDAP secure connection.
     * 
     */
    @Import(name="certificateValidationUri")
    private @Nullable Output<String> certificateValidationUri;

    /**
     * @return The URI of the CA certificate to validate the LDAP secure connection.
     * 
     */
    public Optional<Output<String>> certificateValidationUri() {
        return Optional.ofNullable(this.certificateValidationUri);
    }

    /**
     * Whether the certificate should be automatically downloaded. This can be set to `true` only when `certificate_validation_uri` is provided.
     * 
     */
    @Import(name="downloadCertificateAutomatically")
    private @Nullable Output<Boolean> downloadCertificateAutomatically;

    /**
     * @return Whether the certificate should be automatically downloaded. This can be set to `true` only when `certificate_validation_uri` is provided.
     * 
     */
    public Optional<Output<Boolean>> downloadCertificateAutomatically() {
        return Optional.ofNullable(this.downloadCertificateAutomatically);
    }

    /**
     * Whether the LDAP connection should be encrypted?
     * 
     */
    @Import(name="encrypted")
    private @Nullable Output<Boolean> encrypted;

    /**
     * @return Whether the LDAP connection should be encrypted?
     * 
     */
    public Optional<Output<Boolean>> encrypted() {
        return Optional.ofNullable(this.encrypted);
    }

    /**
     * The FQDN or IP address of the LDAP server.
     * 
     */
    @Import(name="server", required=true)
    private Output<String> server;

    /**
     * @return The FQDN or IP address of the LDAP server.
     * 
     */
    public Output<String> server() {
        return this.server;
    }

    private CacheDirectoryLdapArgs() {}

    private CacheDirectoryLdapArgs(CacheDirectoryLdapArgs $) {
        this.baseDn = $.baseDn;
        this.bind = $.bind;
        this.certificateValidationUri = $.certificateValidationUri;
        this.downloadCertificateAutomatically = $.downloadCertificateAutomatically;
        this.encrypted = $.encrypted;
        this.server = $.server;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CacheDirectoryLdapArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CacheDirectoryLdapArgs $;

        public Builder() {
            $ = new CacheDirectoryLdapArgs();
        }

        public Builder(CacheDirectoryLdapArgs defaults) {
            $ = new CacheDirectoryLdapArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param baseDn The base distinguished name (DN) for the LDAP domain.
         * 
         * @return builder
         * 
         */
        public Builder baseDn(Output<String> baseDn) {
            $.baseDn = baseDn;
            return this;
        }

        /**
         * @param baseDn The base distinguished name (DN) for the LDAP domain.
         * 
         * @return builder
         * 
         */
        public Builder baseDn(String baseDn) {
            return baseDn(Output.of(baseDn));
        }

        /**
         * @param bind A `bind` block as defined above.
         * 
         * @return builder
         * 
         */
        public Builder bind(@Nullable Output<CacheDirectoryLdapBindArgs> bind) {
            $.bind = bind;
            return this;
        }

        /**
         * @param bind A `bind` block as defined above.
         * 
         * @return builder
         * 
         */
        public Builder bind(CacheDirectoryLdapBindArgs bind) {
            return bind(Output.of(bind));
        }

        /**
         * @param certificateValidationUri The URI of the CA certificate to validate the LDAP secure connection.
         * 
         * @return builder
         * 
         */
        public Builder certificateValidationUri(@Nullable Output<String> certificateValidationUri) {
            $.certificateValidationUri = certificateValidationUri;
            return this;
        }

        /**
         * @param certificateValidationUri The URI of the CA certificate to validate the LDAP secure connection.
         * 
         * @return builder
         * 
         */
        public Builder certificateValidationUri(String certificateValidationUri) {
            return certificateValidationUri(Output.of(certificateValidationUri));
        }

        /**
         * @param downloadCertificateAutomatically Whether the certificate should be automatically downloaded. This can be set to `true` only when `certificate_validation_uri` is provided.
         * 
         * @return builder
         * 
         */
        public Builder downloadCertificateAutomatically(@Nullable Output<Boolean> downloadCertificateAutomatically) {
            $.downloadCertificateAutomatically = downloadCertificateAutomatically;
            return this;
        }

        /**
         * @param downloadCertificateAutomatically Whether the certificate should be automatically downloaded. This can be set to `true` only when `certificate_validation_uri` is provided.
         * 
         * @return builder
         * 
         */
        public Builder downloadCertificateAutomatically(Boolean downloadCertificateAutomatically) {
            return downloadCertificateAutomatically(Output.of(downloadCertificateAutomatically));
        }

        /**
         * @param encrypted Whether the LDAP connection should be encrypted?
         * 
         * @return builder
         * 
         */
        public Builder encrypted(@Nullable Output<Boolean> encrypted) {
            $.encrypted = encrypted;
            return this;
        }

        /**
         * @param encrypted Whether the LDAP connection should be encrypted?
         * 
         * @return builder
         * 
         */
        public Builder encrypted(Boolean encrypted) {
            return encrypted(Output.of(encrypted));
        }

        /**
         * @param server The FQDN or IP address of the LDAP server.
         * 
         * @return builder
         * 
         */
        public Builder server(Output<String> server) {
            $.server = server;
            return this;
        }

        /**
         * @param server The FQDN or IP address of the LDAP server.
         * 
         * @return builder
         * 
         */
        public Builder server(String server) {
            return server(Output.of(server));
        }

        public CacheDirectoryLdapArgs build() {
            if ($.baseDn == null) {
                throw new MissingRequiredPropertyException("CacheDirectoryLdapArgs", "baseDn");
            }
            if ($.server == null) {
                throw new MissingRequiredPropertyException("CacheDirectoryLdapArgs", "server");
            }
            return $;
        }
    }

}
