// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.avs;

import com.pulumi.azure.avs.inputs.PrivateCloudManagementClusterArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PrivateCloudArgs extends com.pulumi.resources.ResourceArgs {

    public static final PrivateCloudArgs Empty = new PrivateCloudArgs();

    /**
     * Is the Private Cluster connected to the internet? This field can not updated with `management_cluster.0.size` together.
     * &gt; **NOTE :** `internet_connection_enabled` and `management_cluster.0.size` cannot be updated at the same time.
     * 
     */
    @Import(name="internetConnectionEnabled")
    private @Nullable Output<Boolean> internetConnectionEnabled;

    /**
     * @return Is the Private Cluster connected to the internet? This field can not updated with `management_cluster.0.size` together.
     * &gt; **NOTE :** `internet_connection_enabled` and `management_cluster.0.size` cannot be updated at the same time.
     * 
     */
    public Optional<Output<Boolean>> internetConnectionEnabled() {
        return Optional.ofNullable(this.internetConnectionEnabled);
    }

    /**
     * The Azure Region where the VMware Private Cloud should exist. Changing this forces a new VMware Private Cloud to be created.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The Azure Region where the VMware Private Cloud should exist. Changing this forces a new VMware Private Cloud to be created.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * A `management_cluster` block as defined below.
     * &gt; **NOTE :** `internet_connection_enabled` and `management_cluster.0.size` cannot be updated at the same time.
     * 
     */
    @Import(name="managementCluster", required=true)
    private Output<PrivateCloudManagementClusterArgs> managementCluster;

    /**
     * @return A `management_cluster` block as defined below.
     * &gt; **NOTE :** `internet_connection_enabled` and `management_cluster.0.size` cannot be updated at the same time.
     * 
     */
    public Output<PrivateCloudManagementClusterArgs> managementCluster() {
        return this.managementCluster;
    }

    /**
     * The name which should be used for this VMware Private Cloud. Changing this forces a new VMware Private Cloud to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name which should be used for this VMware Private Cloud. Changing this forces a new VMware Private Cloud to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The subnet which should be unique across virtual network in your subscription as well as on-premise. Changing this forces a new VMware Private Cloud to be created.
     * 
     */
    @Import(name="networkSubnetCidr", required=true)
    private Output<String> networkSubnetCidr;

    /**
     * @return The subnet which should be unique across virtual network in your subscription as well as on-premise. Changing this forces a new VMware Private Cloud to be created.
     * 
     */
    public Output<String> networkSubnetCidr() {
        return this.networkSubnetCidr;
    }

    /**
     * The password of the NSX-T Manager. Changing this forces a new VMware Private Cloud to be created.
     * 
     */
    @Import(name="nsxtPassword")
    private @Nullable Output<String> nsxtPassword;

    /**
     * @return The password of the NSX-T Manager. Changing this forces a new VMware Private Cloud to be created.
     * 
     */
    public Optional<Output<String>> nsxtPassword() {
        return Optional.ofNullable(this.nsxtPassword);
    }

    /**
     * The name of the Resource Group where the VMware Private Cloud should exist. Changing this forces a new VMware Private Cloud to be created.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the Resource Group where the VMware Private Cloud should exist. Changing this forces a new VMware Private Cloud to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The Name of the SKU used for this Private Cloud. Possible values are `av20`, `av36`, `av36t`, `av36p`, `av36pt`, `av52`, `av52t`, and `av64`. Changing this forces a new VMware Private Cloud to be created.
     * 
     */
    @Import(name="skuName", required=true)
    private Output<String> skuName;

    /**
     * @return The Name of the SKU used for this Private Cloud. Possible values are `av20`, `av36`, `av36t`, `av36p`, `av36pt`, `av52`, `av52t`, and `av64`. Changing this forces a new VMware Private Cloud to be created.
     * 
     */
    public Output<String> skuName() {
        return this.skuName;
    }

    /**
     * A mapping of tags which should be assigned to the VMware Private Cloud.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags which should be assigned to the VMware Private Cloud.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The password of the vCenter admin. Changing this forces a new VMware Private Cloud to be created.
     * 
     */
    @Import(name="vcenterPassword")
    private @Nullable Output<String> vcenterPassword;

    /**
     * @return The password of the vCenter admin. Changing this forces a new VMware Private Cloud to be created.
     * 
     */
    public Optional<Output<String>> vcenterPassword() {
        return Optional.ofNullable(this.vcenterPassword);
    }

    private PrivateCloudArgs() {}

    private PrivateCloudArgs(PrivateCloudArgs $) {
        this.internetConnectionEnabled = $.internetConnectionEnabled;
        this.location = $.location;
        this.managementCluster = $.managementCluster;
        this.name = $.name;
        this.networkSubnetCidr = $.networkSubnetCidr;
        this.nsxtPassword = $.nsxtPassword;
        this.resourceGroupName = $.resourceGroupName;
        this.skuName = $.skuName;
        this.tags = $.tags;
        this.vcenterPassword = $.vcenterPassword;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PrivateCloudArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PrivateCloudArgs $;

        public Builder() {
            $ = new PrivateCloudArgs();
        }

        public Builder(PrivateCloudArgs defaults) {
            $ = new PrivateCloudArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param internetConnectionEnabled Is the Private Cluster connected to the internet? This field can not updated with `management_cluster.0.size` together.
         * &gt; **NOTE :** `internet_connection_enabled` and `management_cluster.0.size` cannot be updated at the same time.
         * 
         * @return builder
         * 
         */
        public Builder internetConnectionEnabled(@Nullable Output<Boolean> internetConnectionEnabled) {
            $.internetConnectionEnabled = internetConnectionEnabled;
            return this;
        }

        /**
         * @param internetConnectionEnabled Is the Private Cluster connected to the internet? This field can not updated with `management_cluster.0.size` together.
         * &gt; **NOTE :** `internet_connection_enabled` and `management_cluster.0.size` cannot be updated at the same time.
         * 
         * @return builder
         * 
         */
        public Builder internetConnectionEnabled(Boolean internetConnectionEnabled) {
            return internetConnectionEnabled(Output.of(internetConnectionEnabled));
        }

        /**
         * @param location The Azure Region where the VMware Private Cloud should exist. Changing this forces a new VMware Private Cloud to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The Azure Region where the VMware Private Cloud should exist. Changing this forces a new VMware Private Cloud to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param managementCluster A `management_cluster` block as defined below.
         * &gt; **NOTE :** `internet_connection_enabled` and `management_cluster.0.size` cannot be updated at the same time.
         * 
         * @return builder
         * 
         */
        public Builder managementCluster(Output<PrivateCloudManagementClusterArgs> managementCluster) {
            $.managementCluster = managementCluster;
            return this;
        }

        /**
         * @param managementCluster A `management_cluster` block as defined below.
         * &gt; **NOTE :** `internet_connection_enabled` and `management_cluster.0.size` cannot be updated at the same time.
         * 
         * @return builder
         * 
         */
        public Builder managementCluster(PrivateCloudManagementClusterArgs managementCluster) {
            return managementCluster(Output.of(managementCluster));
        }

        /**
         * @param name The name which should be used for this VMware Private Cloud. Changing this forces a new VMware Private Cloud to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this VMware Private Cloud. Changing this forces a new VMware Private Cloud to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkSubnetCidr The subnet which should be unique across virtual network in your subscription as well as on-premise. Changing this forces a new VMware Private Cloud to be created.
         * 
         * @return builder
         * 
         */
        public Builder networkSubnetCidr(Output<String> networkSubnetCidr) {
            $.networkSubnetCidr = networkSubnetCidr;
            return this;
        }

        /**
         * @param networkSubnetCidr The subnet which should be unique across virtual network in your subscription as well as on-premise. Changing this forces a new VMware Private Cloud to be created.
         * 
         * @return builder
         * 
         */
        public Builder networkSubnetCidr(String networkSubnetCidr) {
            return networkSubnetCidr(Output.of(networkSubnetCidr));
        }

        /**
         * @param nsxtPassword The password of the NSX-T Manager. Changing this forces a new VMware Private Cloud to be created.
         * 
         * @return builder
         * 
         */
        public Builder nsxtPassword(@Nullable Output<String> nsxtPassword) {
            $.nsxtPassword = nsxtPassword;
            return this;
        }

        /**
         * @param nsxtPassword The password of the NSX-T Manager. Changing this forces a new VMware Private Cloud to be created.
         * 
         * @return builder
         * 
         */
        public Builder nsxtPassword(String nsxtPassword) {
            return nsxtPassword(Output.of(nsxtPassword));
        }

        /**
         * @param resourceGroupName The name of the Resource Group where the VMware Private Cloud should exist. Changing this forces a new VMware Private Cloud to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the Resource Group where the VMware Private Cloud should exist. Changing this forces a new VMware Private Cloud to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param skuName The Name of the SKU used for this Private Cloud. Possible values are `av20`, `av36`, `av36t`, `av36p`, `av36pt`, `av52`, `av52t`, and `av64`. Changing this forces a new VMware Private Cloud to be created.
         * 
         * @return builder
         * 
         */
        public Builder skuName(Output<String> skuName) {
            $.skuName = skuName;
            return this;
        }

        /**
         * @param skuName The Name of the SKU used for this Private Cloud. Possible values are `av20`, `av36`, `av36t`, `av36p`, `av36pt`, `av52`, `av52t`, and `av64`. Changing this forces a new VMware Private Cloud to be created.
         * 
         * @return builder
         * 
         */
        public Builder skuName(String skuName) {
            return skuName(Output.of(skuName));
        }

        /**
         * @param tags A mapping of tags which should be assigned to the VMware Private Cloud.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags which should be assigned to the VMware Private Cloud.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param vcenterPassword The password of the vCenter admin. Changing this forces a new VMware Private Cloud to be created.
         * 
         * @return builder
         * 
         */
        public Builder vcenterPassword(@Nullable Output<String> vcenterPassword) {
            $.vcenterPassword = vcenterPassword;
            return this;
        }

        /**
         * @param vcenterPassword The password of the vCenter admin. Changing this forces a new VMware Private Cloud to be created.
         * 
         * @return builder
         * 
         */
        public Builder vcenterPassword(String vcenterPassword) {
            return vcenterPassword(Output.of(vcenterPassword));
        }

        public PrivateCloudArgs build() {
            if ($.managementCluster == null) {
                throw new MissingRequiredPropertyException("PrivateCloudArgs", "managementCluster");
            }
            if ($.networkSubnetCidr == null) {
                throw new MissingRequiredPropertyException("PrivateCloudArgs", "networkSubnetCidr");
            }
            if ($.resourceGroupName == null) {
                throw new MissingRequiredPropertyException("PrivateCloudArgs", "resourceGroupName");
            }
            if ($.skuName == null) {
                throw new MissingRequiredPropertyException("PrivateCloudArgs", "skuName");
            }
            return $;
        }
    }

}
