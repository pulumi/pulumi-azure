// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.machinelearning.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class ComputeClusterScaleSettings {
    /**
     * @return Maximum node count.
     * 
     */
    private Integer maxNodeCount;
    /**
     * @return Minimal node count.
     * 
     */
    private Integer minNodeCount;
    /**
     * @return Node Idle Time Before Scale Down: defines the time until the compute is shutdown when it has gone into Idle state. Is defined according to W3C XML schema standard for duration.
     * 
     */
    private String scaleDownNodesAfterIdleDuration;

    private ComputeClusterScaleSettings() {}
    /**
     * @return Maximum node count.
     * 
     */
    public Integer maxNodeCount() {
        return this.maxNodeCount;
    }
    /**
     * @return Minimal node count.
     * 
     */
    public Integer minNodeCount() {
        return this.minNodeCount;
    }
    /**
     * @return Node Idle Time Before Scale Down: defines the time until the compute is shutdown when it has gone into Idle state. Is defined according to W3C XML schema standard for duration.
     * 
     */
    public String scaleDownNodesAfterIdleDuration() {
        return this.scaleDownNodesAfterIdleDuration;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ComputeClusterScaleSettings defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer maxNodeCount;
        private Integer minNodeCount;
        private String scaleDownNodesAfterIdleDuration;
        public Builder() {}
        public Builder(ComputeClusterScaleSettings defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.maxNodeCount = defaults.maxNodeCount;
    	      this.minNodeCount = defaults.minNodeCount;
    	      this.scaleDownNodesAfterIdleDuration = defaults.scaleDownNodesAfterIdleDuration;
        }

        @CustomType.Setter
        public Builder maxNodeCount(Integer maxNodeCount) {
            if (maxNodeCount == null) {
              throw new MissingRequiredPropertyException("ComputeClusterScaleSettings", "maxNodeCount");
            }
            this.maxNodeCount = maxNodeCount;
            return this;
        }
        @CustomType.Setter
        public Builder minNodeCount(Integer minNodeCount) {
            if (minNodeCount == null) {
              throw new MissingRequiredPropertyException("ComputeClusterScaleSettings", "minNodeCount");
            }
            this.minNodeCount = minNodeCount;
            return this;
        }
        @CustomType.Setter
        public Builder scaleDownNodesAfterIdleDuration(String scaleDownNodesAfterIdleDuration) {
            if (scaleDownNodesAfterIdleDuration == null) {
              throw new MissingRequiredPropertyException("ComputeClusterScaleSettings", "scaleDownNodesAfterIdleDuration");
            }
            this.scaleDownNodesAfterIdleDuration = scaleDownNodesAfterIdleDuration;
            return this;
        }
        public ComputeClusterScaleSettings build() {
            final var _resultValue = new ComputeClusterScaleSettings();
            _resultValue.maxNodeCount = maxNodeCount;
            _resultValue.minNodeCount = minNodeCount;
            _resultValue.scaleDownNodesAfterIdleDuration = scaleDownNodesAfterIdleDuration;
            return _resultValue;
        }
    }
}
