// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appservice.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AppServiceBackupScheduleArgs extends com.pulumi.resources.ResourceArgs {

    public static final AppServiceBackupScheduleArgs Empty = new AppServiceBackupScheduleArgs();

    /**
     * Sets how often the backup should be executed.
     * 
     */
    @Import(name="frequencyInterval", required=true)
    private Output<Integer> frequencyInterval;

    /**
     * @return Sets how often the backup should be executed.
     * 
     */
    public Output<Integer> frequencyInterval() {
        return this.frequencyInterval;
    }

    /**
     * Sets the unit of time for how often the backup should be executed. Possible values are `Day` or `Hour`.
     * 
     */
    @Import(name="frequencyUnit", required=true)
    private Output<String> frequencyUnit;

    /**
     * @return Sets the unit of time for how often the backup should be executed. Possible values are `Day` or `Hour`.
     * 
     */
    public Output<String> frequencyUnit() {
        return this.frequencyUnit;
    }

    /**
     * Should at least one backup always be kept in the Storage Account by the Retention Policy, regardless of how old it is?
     * 
     */
    @Import(name="keepAtLeastOneBackup")
    private @Nullable Output<Boolean> keepAtLeastOneBackup;

    /**
     * @return Should at least one backup always be kept in the Storage Account by the Retention Policy, regardless of how old it is?
     * 
     */
    public Optional<Output<Boolean>> keepAtLeastOneBackup() {
        return Optional.ofNullable(this.keepAtLeastOneBackup);
    }

    /**
     * Specifies the number of days after which Backups should be deleted. Defaults to `30`.
     * 
     */
    @Import(name="retentionPeriodInDays")
    private @Nullable Output<Integer> retentionPeriodInDays;

    /**
     * @return Specifies the number of days after which Backups should be deleted. Defaults to `30`.
     * 
     */
    public Optional<Output<Integer>> retentionPeriodInDays() {
        return Optional.ofNullable(this.retentionPeriodInDays);
    }

    /**
     * Sets when the schedule should start working.
     * 
     */
    @Import(name="startTime")
    private @Nullable Output<String> startTime;

    /**
     * @return Sets when the schedule should start working.
     * 
     */
    public Optional<Output<String>> startTime() {
        return Optional.ofNullable(this.startTime);
    }

    private AppServiceBackupScheduleArgs() {}

    private AppServiceBackupScheduleArgs(AppServiceBackupScheduleArgs $) {
        this.frequencyInterval = $.frequencyInterval;
        this.frequencyUnit = $.frequencyUnit;
        this.keepAtLeastOneBackup = $.keepAtLeastOneBackup;
        this.retentionPeriodInDays = $.retentionPeriodInDays;
        this.startTime = $.startTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppServiceBackupScheduleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppServiceBackupScheduleArgs $;

        public Builder() {
            $ = new AppServiceBackupScheduleArgs();
        }

        public Builder(AppServiceBackupScheduleArgs defaults) {
            $ = new AppServiceBackupScheduleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param frequencyInterval Sets how often the backup should be executed.
         * 
         * @return builder
         * 
         */
        public Builder frequencyInterval(Output<Integer> frequencyInterval) {
            $.frequencyInterval = frequencyInterval;
            return this;
        }

        /**
         * @param frequencyInterval Sets how often the backup should be executed.
         * 
         * @return builder
         * 
         */
        public Builder frequencyInterval(Integer frequencyInterval) {
            return frequencyInterval(Output.of(frequencyInterval));
        }

        /**
         * @param frequencyUnit Sets the unit of time for how often the backup should be executed. Possible values are `Day` or `Hour`.
         * 
         * @return builder
         * 
         */
        public Builder frequencyUnit(Output<String> frequencyUnit) {
            $.frequencyUnit = frequencyUnit;
            return this;
        }

        /**
         * @param frequencyUnit Sets the unit of time for how often the backup should be executed. Possible values are `Day` or `Hour`.
         * 
         * @return builder
         * 
         */
        public Builder frequencyUnit(String frequencyUnit) {
            return frequencyUnit(Output.of(frequencyUnit));
        }

        /**
         * @param keepAtLeastOneBackup Should at least one backup always be kept in the Storage Account by the Retention Policy, regardless of how old it is?
         * 
         * @return builder
         * 
         */
        public Builder keepAtLeastOneBackup(@Nullable Output<Boolean> keepAtLeastOneBackup) {
            $.keepAtLeastOneBackup = keepAtLeastOneBackup;
            return this;
        }

        /**
         * @param keepAtLeastOneBackup Should at least one backup always be kept in the Storage Account by the Retention Policy, regardless of how old it is?
         * 
         * @return builder
         * 
         */
        public Builder keepAtLeastOneBackup(Boolean keepAtLeastOneBackup) {
            return keepAtLeastOneBackup(Output.of(keepAtLeastOneBackup));
        }

        /**
         * @param retentionPeriodInDays Specifies the number of days after which Backups should be deleted. Defaults to `30`.
         * 
         * @return builder
         * 
         */
        public Builder retentionPeriodInDays(@Nullable Output<Integer> retentionPeriodInDays) {
            $.retentionPeriodInDays = retentionPeriodInDays;
            return this;
        }

        /**
         * @param retentionPeriodInDays Specifies the number of days after which Backups should be deleted. Defaults to `30`.
         * 
         * @return builder
         * 
         */
        public Builder retentionPeriodInDays(Integer retentionPeriodInDays) {
            return retentionPeriodInDays(Output.of(retentionPeriodInDays));
        }

        /**
         * @param startTime Sets when the schedule should start working.
         * 
         * @return builder
         * 
         */
        public Builder startTime(@Nullable Output<String> startTime) {
            $.startTime = startTime;
            return this;
        }

        /**
         * @param startTime Sets when the schedule should start working.
         * 
         * @return builder
         * 
         */
        public Builder startTime(String startTime) {
            return startTime(Output.of(startTime));
        }

        public AppServiceBackupScheduleArgs build() {
            if ($.frequencyInterval == null) {
                throw new MissingRequiredPropertyException("AppServiceBackupScheduleArgs", "frequencyInterval");
            }
            if ($.frequencyUnit == null) {
                throw new MissingRequiredPropertyException("AppServiceBackupScheduleArgs", "frequencyUnit");
            }
            return $;
        }
    }

}
