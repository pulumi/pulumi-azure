// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.chaosstudio.inputs;

import com.pulumi.azure.chaosstudio.inputs.ExperimentStepBranchArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class ExperimentStepArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExperimentStepArgs Empty = new ExperimentStepArgs();

    /**
     * One or more `branch` blocks as defined above.
     * 
     */
    @Import(name="branches", required=true)
    private Output<List<ExperimentStepBranchArgs>> branches;

    /**
     * @return One or more `branch` blocks as defined above.
     * 
     */
    public Output<List<ExperimentStepBranchArgs>> branches() {
        return this.branches;
    }

    /**
     * The name of the Step.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the Step.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    private ExperimentStepArgs() {}

    private ExperimentStepArgs(ExperimentStepArgs $) {
        this.branches = $.branches;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExperimentStepArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExperimentStepArgs $;

        public Builder() {
            $ = new ExperimentStepArgs();
        }

        public Builder(ExperimentStepArgs defaults) {
            $ = new ExperimentStepArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param branches One or more `branch` blocks as defined above.
         * 
         * @return builder
         * 
         */
        public Builder branches(Output<List<ExperimentStepBranchArgs>> branches) {
            $.branches = branches;
            return this;
        }

        /**
         * @param branches One or more `branch` blocks as defined above.
         * 
         * @return builder
         * 
         */
        public Builder branches(List<ExperimentStepBranchArgs> branches) {
            return branches(Output.of(branches));
        }

        /**
         * @param branches One or more `branch` blocks as defined above.
         * 
         * @return builder
         * 
         */
        public Builder branches(ExperimentStepBranchArgs... branches) {
            return branches(List.of(branches));
        }

        /**
         * @param name The name of the Step.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Step.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public ExperimentStepArgs build() {
            if ($.branches == null) {
                throw new MissingRequiredPropertyException("ExperimentStepArgs", "branches");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ExperimentStepArgs", "name");
            }
            return $;
        }
    }

}
