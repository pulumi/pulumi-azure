// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.monitoring.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataCollectionRuleDataSourcesExtensionArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataCollectionRuleDataSourcesExtensionArgs Empty = new DataCollectionRuleDataSourcesExtensionArgs();

    /**
     * A JSON String which specifies the extension setting.
     * 
     */
    @Import(name="extensionJson")
    private @Nullable Output<String> extensionJson;

    /**
     * @return A JSON String which specifies the extension setting.
     * 
     */
    public Optional<Output<String>> extensionJson() {
        return Optional.ofNullable(this.extensionJson);
    }

    /**
     * The name of the VM extension.
     * 
     */
    @Import(name="extensionName", required=true)
    private Output<String> extensionName;

    /**
     * @return The name of the VM extension.
     * 
     */
    public Output<String> extensionName() {
        return this.extensionName;
    }

    /**
     * Specifies a list of data sources this extension needs data from. An item should be a name of a supported data source which produces only one stream. Supported data sources type: `performance_counter`, `windows_event_log`,and `syslog`.
     * 
     */
    @Import(name="inputDataSources")
    private @Nullable Output<List<String>> inputDataSources;

    /**
     * @return Specifies a list of data sources this extension needs data from. An item should be a name of a supported data source which produces only one stream. Supported data sources type: `performance_counter`, `windows_event_log`,and `syslog`.
     * 
     */
    public Optional<Output<List<String>>> inputDataSources() {
        return Optional.ofNullable(this.inputDataSources);
    }

    /**
     * The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible values include but not limited to `Microsoft-Event`, `Microsoft-InsightsMetrics`, `Microsoft-Perf`, `Microsoft-Syslog`, `Microsoft-WindowsEvent`.
     * 
     */
    @Import(name="streams", required=true)
    private Output<List<String>> streams;

    /**
     * @return Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible values include but not limited to `Microsoft-Event`, `Microsoft-InsightsMetrics`, `Microsoft-Perf`, `Microsoft-Syslog`, `Microsoft-WindowsEvent`.
     * 
     */
    public Output<List<String>> streams() {
        return this.streams;
    }

    private DataCollectionRuleDataSourcesExtensionArgs() {}

    private DataCollectionRuleDataSourcesExtensionArgs(DataCollectionRuleDataSourcesExtensionArgs $) {
        this.extensionJson = $.extensionJson;
        this.extensionName = $.extensionName;
        this.inputDataSources = $.inputDataSources;
        this.name = $.name;
        this.streams = $.streams;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataCollectionRuleDataSourcesExtensionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataCollectionRuleDataSourcesExtensionArgs $;

        public Builder() {
            $ = new DataCollectionRuleDataSourcesExtensionArgs();
        }

        public Builder(DataCollectionRuleDataSourcesExtensionArgs defaults) {
            $ = new DataCollectionRuleDataSourcesExtensionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param extensionJson A JSON String which specifies the extension setting.
         * 
         * @return builder
         * 
         */
        public Builder extensionJson(@Nullable Output<String> extensionJson) {
            $.extensionJson = extensionJson;
            return this;
        }

        /**
         * @param extensionJson A JSON String which specifies the extension setting.
         * 
         * @return builder
         * 
         */
        public Builder extensionJson(String extensionJson) {
            return extensionJson(Output.of(extensionJson));
        }

        /**
         * @param extensionName The name of the VM extension.
         * 
         * @return builder
         * 
         */
        public Builder extensionName(Output<String> extensionName) {
            $.extensionName = extensionName;
            return this;
        }

        /**
         * @param extensionName The name of the VM extension.
         * 
         * @return builder
         * 
         */
        public Builder extensionName(String extensionName) {
            return extensionName(Output.of(extensionName));
        }

        /**
         * @param inputDataSources Specifies a list of data sources this extension needs data from. An item should be a name of a supported data source which produces only one stream. Supported data sources type: `performance_counter`, `windows_event_log`,and `syslog`.
         * 
         * @return builder
         * 
         */
        public Builder inputDataSources(@Nullable Output<List<String>> inputDataSources) {
            $.inputDataSources = inputDataSources;
            return this;
        }

        /**
         * @param inputDataSources Specifies a list of data sources this extension needs data from. An item should be a name of a supported data source which produces only one stream. Supported data sources type: `performance_counter`, `windows_event_log`,and `syslog`.
         * 
         * @return builder
         * 
         */
        public Builder inputDataSources(List<String> inputDataSources) {
            return inputDataSources(Output.of(inputDataSources));
        }

        /**
         * @param inputDataSources Specifies a list of data sources this extension needs data from. An item should be a name of a supported data source which produces only one stream. Supported data sources type: `performance_counter`, `windows_event_log`,and `syslog`.
         * 
         * @return builder
         * 
         */
        public Builder inputDataSources(String... inputDataSources) {
            return inputDataSources(List.of(inputDataSources));
        }

        /**
         * @param name The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param streams Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible values include but not limited to `Microsoft-Event`, `Microsoft-InsightsMetrics`, `Microsoft-Perf`, `Microsoft-Syslog`, `Microsoft-WindowsEvent`.
         * 
         * @return builder
         * 
         */
        public Builder streams(Output<List<String>> streams) {
            $.streams = streams;
            return this;
        }

        /**
         * @param streams Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible values include but not limited to `Microsoft-Event`, `Microsoft-InsightsMetrics`, `Microsoft-Perf`, `Microsoft-Syslog`, `Microsoft-WindowsEvent`.
         * 
         * @return builder
         * 
         */
        public Builder streams(List<String> streams) {
            return streams(Output.of(streams));
        }

        /**
         * @param streams Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible values include but not limited to `Microsoft-Event`, `Microsoft-InsightsMetrics`, `Microsoft-Perf`, `Microsoft-Syslog`, `Microsoft-WindowsEvent`.
         * 
         * @return builder
         * 
         */
        public Builder streams(String... streams) {
            return streams(List.of(streams));
        }

        public DataCollectionRuleDataSourcesExtensionArgs build() {
            if ($.extensionName == null) {
                throw new MissingRequiredPropertyException("DataCollectionRuleDataSourcesExtensionArgs", "extensionName");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("DataCollectionRuleDataSourcesExtensionArgs", "name");
            }
            if ($.streams == null) {
                throw new MissingRequiredPropertyException("DataCollectionRuleDataSourcesExtensionArgs", "streams");
            }
            return $;
        }
    }

}
