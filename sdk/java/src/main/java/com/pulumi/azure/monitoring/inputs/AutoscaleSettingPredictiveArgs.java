// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.monitoring.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AutoscaleSettingPredictiveArgs extends com.pulumi.resources.ResourceArgs {

    public static final AutoscaleSettingPredictiveArgs Empty = new AutoscaleSettingPredictiveArgs();

    /**
     * Specifies the amount of time by which instances are launched in advance. It must be between `PT1M` and `PT1H` in ISO 8601 format.
     * 
     */
    @Import(name="lookAheadTime")
    private @Nullable Output<String> lookAheadTime;

    /**
     * @return Specifies the amount of time by which instances are launched in advance. It must be between `PT1M` and `PT1H` in ISO 8601 format.
     * 
     */
    public Optional<Output<String>> lookAheadTime() {
        return Optional.ofNullable(this.lookAheadTime);
    }

    /**
     * Specifies the predictive scale mode. Possible values are `Enabled` or `ForecastOnly`.
     * 
     */
    @Import(name="scaleMode", required=true)
    private Output<String> scaleMode;

    /**
     * @return Specifies the predictive scale mode. Possible values are `Enabled` or `ForecastOnly`.
     * 
     */
    public Output<String> scaleMode() {
        return this.scaleMode;
    }

    private AutoscaleSettingPredictiveArgs() {}

    private AutoscaleSettingPredictiveArgs(AutoscaleSettingPredictiveArgs $) {
        this.lookAheadTime = $.lookAheadTime;
        this.scaleMode = $.scaleMode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AutoscaleSettingPredictiveArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AutoscaleSettingPredictiveArgs $;

        public Builder() {
            $ = new AutoscaleSettingPredictiveArgs();
        }

        public Builder(AutoscaleSettingPredictiveArgs defaults) {
            $ = new AutoscaleSettingPredictiveArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param lookAheadTime Specifies the amount of time by which instances are launched in advance. It must be between `PT1M` and `PT1H` in ISO 8601 format.
         * 
         * @return builder
         * 
         */
        public Builder lookAheadTime(@Nullable Output<String> lookAheadTime) {
            $.lookAheadTime = lookAheadTime;
            return this;
        }

        /**
         * @param lookAheadTime Specifies the amount of time by which instances are launched in advance. It must be between `PT1M` and `PT1H` in ISO 8601 format.
         * 
         * @return builder
         * 
         */
        public Builder lookAheadTime(String lookAheadTime) {
            return lookAheadTime(Output.of(lookAheadTime));
        }

        /**
         * @param scaleMode Specifies the predictive scale mode. Possible values are `Enabled` or `ForecastOnly`.
         * 
         * @return builder
         * 
         */
        public Builder scaleMode(Output<String> scaleMode) {
            $.scaleMode = scaleMode;
            return this;
        }

        /**
         * @param scaleMode Specifies the predictive scale mode. Possible values are `Enabled` or `ForecastOnly`.
         * 
         * @return builder
         * 
         */
        public Builder scaleMode(String scaleMode) {
            return scaleMode(Output.of(scaleMode));
        }

        public AutoscaleSettingPredictiveArgs build() {
            if ($.scaleMode == null) {
                throw new MissingRequiredPropertyException("AutoscaleSettingPredictiveArgs", "scaleMode");
            }
            return $;
        }
    }

}
