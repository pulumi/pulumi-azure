// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.nginx.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class DeploymentFrontendPrivateArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeploymentFrontendPrivateArgs Empty = new DeploymentFrontendPrivateArgs();

    /**
     * Specify the methos of allocating the private IP. Possible values are `Static` and `Dynamic`.
     * 
     */
    @Import(name="allocationMethod", required=true)
    private Output<String> allocationMethod;

    /**
     * @return Specify the methos of allocating the private IP. Possible values are `Static` and `Dynamic`.
     * 
     */
    public Output<String> allocationMethod() {
        return this.allocationMethod;
    }

    /**
     * Specify the IP Address of this private IP.
     * 
     */
    @Import(name="ipAddress", required=true)
    private Output<String> ipAddress;

    /**
     * @return Specify the IP Address of this private IP.
     * 
     */
    public Output<String> ipAddress() {
        return this.ipAddress;
    }

    /**
     * Specify the SubNet Resource ID to this Nginx Deployment.
     * 
     */
    @Import(name="subnetId", required=true)
    private Output<String> subnetId;

    /**
     * @return Specify the SubNet Resource ID to this Nginx Deployment.
     * 
     */
    public Output<String> subnetId() {
        return this.subnetId;
    }

    private DeploymentFrontendPrivateArgs() {}

    private DeploymentFrontendPrivateArgs(DeploymentFrontendPrivateArgs $) {
        this.allocationMethod = $.allocationMethod;
        this.ipAddress = $.ipAddress;
        this.subnetId = $.subnetId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeploymentFrontendPrivateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeploymentFrontendPrivateArgs $;

        public Builder() {
            $ = new DeploymentFrontendPrivateArgs();
        }

        public Builder(DeploymentFrontendPrivateArgs defaults) {
            $ = new DeploymentFrontendPrivateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allocationMethod Specify the methos of allocating the private IP. Possible values are `Static` and `Dynamic`.
         * 
         * @return builder
         * 
         */
        public Builder allocationMethod(Output<String> allocationMethod) {
            $.allocationMethod = allocationMethod;
            return this;
        }

        /**
         * @param allocationMethod Specify the methos of allocating the private IP. Possible values are `Static` and `Dynamic`.
         * 
         * @return builder
         * 
         */
        public Builder allocationMethod(String allocationMethod) {
            return allocationMethod(Output.of(allocationMethod));
        }

        /**
         * @param ipAddress Specify the IP Address of this private IP.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(Output<String> ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        /**
         * @param ipAddress Specify the IP Address of this private IP.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(String ipAddress) {
            return ipAddress(Output.of(ipAddress));
        }

        /**
         * @param subnetId Specify the SubNet Resource ID to this Nginx Deployment.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        /**
         * @param subnetId Specify the SubNet Resource ID to this Nginx Deployment.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        public DeploymentFrontendPrivateArgs build() {
            if ($.allocationMethod == null) {
                throw new MissingRequiredPropertyException("DeploymentFrontendPrivateArgs", "allocationMethod");
            }
            if ($.ipAddress == null) {
                throw new MissingRequiredPropertyException("DeploymentFrontendPrivateArgs", "ipAddress");
            }
            if ($.subnetId == null) {
                throw new MissingRequiredPropertyException("DeploymentFrontendPrivateArgs", "subnetId");
            }
            return $;
        }
    }

}
