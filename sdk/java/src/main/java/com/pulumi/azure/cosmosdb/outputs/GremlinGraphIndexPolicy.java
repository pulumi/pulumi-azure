// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.cosmosdb.outputs;

import com.pulumi.azure.cosmosdb.outputs.GremlinGraphIndexPolicyCompositeIndex;
import com.pulumi.azure.cosmosdb.outputs.GremlinGraphIndexPolicySpatialIndex;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GremlinGraphIndexPolicy {
    /**
     * @return Indicates if the indexing policy is automatic. Defaults to `true`.
     * 
     */
    private @Nullable Boolean automatic;
    /**
     * @return One or more `composite_index` blocks as defined below.
     * 
     */
    private @Nullable List<GremlinGraphIndexPolicyCompositeIndex> compositeIndices;
    /**
     * @return List of paths to exclude from indexing. Required if `indexing_mode` is `Consistent` or `Lazy`.
     * 
     */
    private @Nullable List<String> excludedPaths;
    /**
     * @return List of paths to include in the indexing. Required if `indexing_mode` is `Consistent` or `Lazy`.
     * 
     */
    private @Nullable List<String> includedPaths;
    /**
     * @return Indicates the indexing mode. Possible values include: `Consistent`, `Lazy`, `None`.
     * 
     */
    private String indexingMode;
    /**
     * @return One or more `spatial_index` blocks as defined below.
     * 
     */
    private @Nullable List<GremlinGraphIndexPolicySpatialIndex> spatialIndices;

    private GremlinGraphIndexPolicy() {}
    /**
     * @return Indicates if the indexing policy is automatic. Defaults to `true`.
     * 
     */
    public Optional<Boolean> automatic() {
        return Optional.ofNullable(this.automatic);
    }
    /**
     * @return One or more `composite_index` blocks as defined below.
     * 
     */
    public List<GremlinGraphIndexPolicyCompositeIndex> compositeIndices() {
        return this.compositeIndices == null ? List.of() : this.compositeIndices;
    }
    /**
     * @return List of paths to exclude from indexing. Required if `indexing_mode` is `Consistent` or `Lazy`.
     * 
     */
    public List<String> excludedPaths() {
        return this.excludedPaths == null ? List.of() : this.excludedPaths;
    }
    /**
     * @return List of paths to include in the indexing. Required if `indexing_mode` is `Consistent` or `Lazy`.
     * 
     */
    public List<String> includedPaths() {
        return this.includedPaths == null ? List.of() : this.includedPaths;
    }
    /**
     * @return Indicates the indexing mode. Possible values include: `Consistent`, `Lazy`, `None`.
     * 
     */
    public String indexingMode() {
        return this.indexingMode;
    }
    /**
     * @return One or more `spatial_index` blocks as defined below.
     * 
     */
    public List<GremlinGraphIndexPolicySpatialIndex> spatialIndices() {
        return this.spatialIndices == null ? List.of() : this.spatialIndices;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GremlinGraphIndexPolicy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean automatic;
        private @Nullable List<GremlinGraphIndexPolicyCompositeIndex> compositeIndices;
        private @Nullable List<String> excludedPaths;
        private @Nullable List<String> includedPaths;
        private String indexingMode;
        private @Nullable List<GremlinGraphIndexPolicySpatialIndex> spatialIndices;
        public Builder() {}
        public Builder(GremlinGraphIndexPolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.automatic = defaults.automatic;
    	      this.compositeIndices = defaults.compositeIndices;
    	      this.excludedPaths = defaults.excludedPaths;
    	      this.includedPaths = defaults.includedPaths;
    	      this.indexingMode = defaults.indexingMode;
    	      this.spatialIndices = defaults.spatialIndices;
        }

        @CustomType.Setter
        public Builder automatic(@Nullable Boolean automatic) {

            this.automatic = automatic;
            return this;
        }
        @CustomType.Setter
        public Builder compositeIndices(@Nullable List<GremlinGraphIndexPolicyCompositeIndex> compositeIndices) {

            this.compositeIndices = compositeIndices;
            return this;
        }
        public Builder compositeIndices(GremlinGraphIndexPolicyCompositeIndex... compositeIndices) {
            return compositeIndices(List.of(compositeIndices));
        }
        @CustomType.Setter
        public Builder excludedPaths(@Nullable List<String> excludedPaths) {

            this.excludedPaths = excludedPaths;
            return this;
        }
        public Builder excludedPaths(String... excludedPaths) {
            return excludedPaths(List.of(excludedPaths));
        }
        @CustomType.Setter
        public Builder includedPaths(@Nullable List<String> includedPaths) {

            this.includedPaths = includedPaths;
            return this;
        }
        public Builder includedPaths(String... includedPaths) {
            return includedPaths(List.of(includedPaths));
        }
        @CustomType.Setter
        public Builder indexingMode(String indexingMode) {
            if (indexingMode == null) {
              throw new MissingRequiredPropertyException("GremlinGraphIndexPolicy", "indexingMode");
            }
            this.indexingMode = indexingMode;
            return this;
        }
        @CustomType.Setter
        public Builder spatialIndices(@Nullable List<GremlinGraphIndexPolicySpatialIndex> spatialIndices) {

            this.spatialIndices = spatialIndices;
            return this;
        }
        public Builder spatialIndices(GremlinGraphIndexPolicySpatialIndex... spatialIndices) {
            return spatialIndices(List.of(spatialIndices));
        }
        public GremlinGraphIndexPolicy build() {
            final var _resultValue = new GremlinGraphIndexPolicy();
            _resultValue.automatic = automatic;
            _resultValue.compositeIndices = compositeIndices;
            _resultValue.excludedPaths = excludedPaths;
            _resultValue.includedPaths = includedPaths;
            _resultValue.indexingMode = indexingMode;
            _resultValue.spatialIndices = spatialIndices;
            return _resultValue;
        }
    }
}
