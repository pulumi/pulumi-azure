// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.mobile.outputs;

import com.pulumi.azure.mobile.outputs.GetNetworkAttachedDataNetworkNetworkAddressPortTranslationPortRange;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetNetworkAttachedDataNetworkNetworkAddressPortTranslation {
    private Integer icmpPinholeTimeoutInSeconds;
    private @Nullable Integer pinholeMaximumNumber;
    /**
     * @return A `port_range` block as defined below.
     * 
     */
    private List<GetNetworkAttachedDataNetworkNetworkAddressPortTranslationPortRange> portRanges;
    private Integer tcpPinholeTimeoutInSeconds;
    /**
     * @return Minimum time in seconds that will pass before a TCP port that was used by a closed pinhole can be reused.
     * 
     */
    private Integer tcpPortReuseMinimumHoldTimeInSeconds;
    private Integer udpPinholeTimeoutInSeconds;
    /**
     * @return Minimum time in seconds that will pass before a UDP port that was used by a closed pinhole can be reused.
     * 
     */
    private Integer udpPortReuseMinimumHoldTimeInSeconds;

    private GetNetworkAttachedDataNetworkNetworkAddressPortTranslation() {}
    public Integer icmpPinholeTimeoutInSeconds() {
        return this.icmpPinholeTimeoutInSeconds;
    }
    public Optional<Integer> pinholeMaximumNumber() {
        return Optional.ofNullable(this.pinholeMaximumNumber);
    }
    /**
     * @return A `port_range` block as defined below.
     * 
     */
    public List<GetNetworkAttachedDataNetworkNetworkAddressPortTranslationPortRange> portRanges() {
        return this.portRanges;
    }
    public Integer tcpPinholeTimeoutInSeconds() {
        return this.tcpPinholeTimeoutInSeconds;
    }
    /**
     * @return Minimum time in seconds that will pass before a TCP port that was used by a closed pinhole can be reused.
     * 
     */
    public Integer tcpPortReuseMinimumHoldTimeInSeconds() {
        return this.tcpPortReuseMinimumHoldTimeInSeconds;
    }
    public Integer udpPinholeTimeoutInSeconds() {
        return this.udpPinholeTimeoutInSeconds;
    }
    /**
     * @return Minimum time in seconds that will pass before a UDP port that was used by a closed pinhole can be reused.
     * 
     */
    public Integer udpPortReuseMinimumHoldTimeInSeconds() {
        return this.udpPortReuseMinimumHoldTimeInSeconds;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNetworkAttachedDataNetworkNetworkAddressPortTranslation defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer icmpPinholeTimeoutInSeconds;
        private @Nullable Integer pinholeMaximumNumber;
        private List<GetNetworkAttachedDataNetworkNetworkAddressPortTranslationPortRange> portRanges;
        private Integer tcpPinholeTimeoutInSeconds;
        private Integer tcpPortReuseMinimumHoldTimeInSeconds;
        private Integer udpPinholeTimeoutInSeconds;
        private Integer udpPortReuseMinimumHoldTimeInSeconds;
        public Builder() {}
        public Builder(GetNetworkAttachedDataNetworkNetworkAddressPortTranslation defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.icmpPinholeTimeoutInSeconds = defaults.icmpPinholeTimeoutInSeconds;
    	      this.pinholeMaximumNumber = defaults.pinholeMaximumNumber;
    	      this.portRanges = defaults.portRanges;
    	      this.tcpPinholeTimeoutInSeconds = defaults.tcpPinholeTimeoutInSeconds;
    	      this.tcpPortReuseMinimumHoldTimeInSeconds = defaults.tcpPortReuseMinimumHoldTimeInSeconds;
    	      this.udpPinholeTimeoutInSeconds = defaults.udpPinholeTimeoutInSeconds;
    	      this.udpPortReuseMinimumHoldTimeInSeconds = defaults.udpPortReuseMinimumHoldTimeInSeconds;
        }

        @CustomType.Setter
        public Builder icmpPinholeTimeoutInSeconds(Integer icmpPinholeTimeoutInSeconds) {
            if (icmpPinholeTimeoutInSeconds == null) {
              throw new MissingRequiredPropertyException("GetNetworkAttachedDataNetworkNetworkAddressPortTranslation", "icmpPinholeTimeoutInSeconds");
            }
            this.icmpPinholeTimeoutInSeconds = icmpPinholeTimeoutInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder pinholeMaximumNumber(@Nullable Integer pinholeMaximumNumber) {

            this.pinholeMaximumNumber = pinholeMaximumNumber;
            return this;
        }
        @CustomType.Setter
        public Builder portRanges(List<GetNetworkAttachedDataNetworkNetworkAddressPortTranslationPortRange> portRanges) {
            if (portRanges == null) {
              throw new MissingRequiredPropertyException("GetNetworkAttachedDataNetworkNetworkAddressPortTranslation", "portRanges");
            }
            this.portRanges = portRanges;
            return this;
        }
        public Builder portRanges(GetNetworkAttachedDataNetworkNetworkAddressPortTranslationPortRange... portRanges) {
            return portRanges(List.of(portRanges));
        }
        @CustomType.Setter
        public Builder tcpPinholeTimeoutInSeconds(Integer tcpPinholeTimeoutInSeconds) {
            if (tcpPinholeTimeoutInSeconds == null) {
              throw new MissingRequiredPropertyException("GetNetworkAttachedDataNetworkNetworkAddressPortTranslation", "tcpPinholeTimeoutInSeconds");
            }
            this.tcpPinholeTimeoutInSeconds = tcpPinholeTimeoutInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder tcpPortReuseMinimumHoldTimeInSeconds(Integer tcpPortReuseMinimumHoldTimeInSeconds) {
            if (tcpPortReuseMinimumHoldTimeInSeconds == null) {
              throw new MissingRequiredPropertyException("GetNetworkAttachedDataNetworkNetworkAddressPortTranslation", "tcpPortReuseMinimumHoldTimeInSeconds");
            }
            this.tcpPortReuseMinimumHoldTimeInSeconds = tcpPortReuseMinimumHoldTimeInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder udpPinholeTimeoutInSeconds(Integer udpPinholeTimeoutInSeconds) {
            if (udpPinholeTimeoutInSeconds == null) {
              throw new MissingRequiredPropertyException("GetNetworkAttachedDataNetworkNetworkAddressPortTranslation", "udpPinholeTimeoutInSeconds");
            }
            this.udpPinholeTimeoutInSeconds = udpPinholeTimeoutInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder udpPortReuseMinimumHoldTimeInSeconds(Integer udpPortReuseMinimumHoldTimeInSeconds) {
            if (udpPortReuseMinimumHoldTimeInSeconds == null) {
              throw new MissingRequiredPropertyException("GetNetworkAttachedDataNetworkNetworkAddressPortTranslation", "udpPortReuseMinimumHoldTimeInSeconds");
            }
            this.udpPortReuseMinimumHoldTimeInSeconds = udpPortReuseMinimumHoldTimeInSeconds;
            return this;
        }
        public GetNetworkAttachedDataNetworkNetworkAddressPortTranslation build() {
            final var _resultValue = new GetNetworkAttachedDataNetworkNetworkAddressPortTranslation();
            _resultValue.icmpPinholeTimeoutInSeconds = icmpPinholeTimeoutInSeconds;
            _resultValue.pinholeMaximumNumber = pinholeMaximumNumber;
            _resultValue.portRanges = portRanges;
            _resultValue.tcpPinholeTimeoutInSeconds = tcpPinholeTimeoutInSeconds;
            _resultValue.tcpPortReuseMinimumHoldTimeInSeconds = tcpPortReuseMinimumHoldTimeInSeconds;
            _resultValue.udpPinholeTimeoutInSeconds = udpPinholeTimeoutInSeconds;
            _resultValue.udpPortReuseMinimumHoldTimeInSeconds = udpPortReuseMinimumHoldTimeInSeconds;
            return _resultValue;
        }
    }
}
