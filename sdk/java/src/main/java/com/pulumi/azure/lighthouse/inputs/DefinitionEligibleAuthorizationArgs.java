// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.lighthouse.inputs;

import com.pulumi.azure.lighthouse.inputs.DefinitionEligibleAuthorizationJustInTimeAccessPolicyArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DefinitionEligibleAuthorizationArgs extends com.pulumi.resources.ResourceArgs {

    public static final DefinitionEligibleAuthorizationArgs Empty = new DefinitionEligibleAuthorizationArgs();

    /**
     * A `just_in_time_access_policy` block as defined below.
     * 
     */
    @Import(name="justInTimeAccessPolicy")
    private @Nullable Output<DefinitionEligibleAuthorizationJustInTimeAccessPolicyArgs> justInTimeAccessPolicy;

    /**
     * @return A `just_in_time_access_policy` block as defined below.
     * 
     */
    public Optional<Output<DefinitionEligibleAuthorizationJustInTimeAccessPolicyArgs>> justInTimeAccessPolicy() {
        return Optional.ofNullable(this.justInTimeAccessPolicy);
    }

    /**
     * The display name of the Azure Active Directory Principal.
     * 
     */
    @Import(name="principalDisplayName")
    private @Nullable Output<String> principalDisplayName;

    /**
     * @return The display name of the Azure Active Directory Principal.
     * 
     */
    public Optional<Output<String>> principalDisplayName() {
        return Optional.ofNullable(this.principalDisplayName);
    }

    /**
     * Principal ID of the security group/service principal/user that would be assigned permissions to the projected subscription.
     * 
     */
    @Import(name="principalId", required=true)
    private Output<String> principalId;

    /**
     * @return Principal ID of the security group/service principal/user that would be assigned permissions to the projected subscription.
     * 
     */
    public Output<String> principalId() {
        return this.principalId;
    }

    /**
     * The Principal ID of the Azure built-in role that defines the permissions that the Azure Active Directory will have on the projected scope.
     * 
     */
    @Import(name="roleDefinitionId", required=true)
    private Output<String> roleDefinitionId;

    /**
     * @return The Principal ID of the Azure built-in role that defines the permissions that the Azure Active Directory will have on the projected scope.
     * 
     */
    public Output<String> roleDefinitionId() {
        return this.roleDefinitionId;
    }

    private DefinitionEligibleAuthorizationArgs() {}

    private DefinitionEligibleAuthorizationArgs(DefinitionEligibleAuthorizationArgs $) {
        this.justInTimeAccessPolicy = $.justInTimeAccessPolicy;
        this.principalDisplayName = $.principalDisplayName;
        this.principalId = $.principalId;
        this.roleDefinitionId = $.roleDefinitionId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DefinitionEligibleAuthorizationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DefinitionEligibleAuthorizationArgs $;

        public Builder() {
            $ = new DefinitionEligibleAuthorizationArgs();
        }

        public Builder(DefinitionEligibleAuthorizationArgs defaults) {
            $ = new DefinitionEligibleAuthorizationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param justInTimeAccessPolicy A `just_in_time_access_policy` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder justInTimeAccessPolicy(@Nullable Output<DefinitionEligibleAuthorizationJustInTimeAccessPolicyArgs> justInTimeAccessPolicy) {
            $.justInTimeAccessPolicy = justInTimeAccessPolicy;
            return this;
        }

        /**
         * @param justInTimeAccessPolicy A `just_in_time_access_policy` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder justInTimeAccessPolicy(DefinitionEligibleAuthorizationJustInTimeAccessPolicyArgs justInTimeAccessPolicy) {
            return justInTimeAccessPolicy(Output.of(justInTimeAccessPolicy));
        }

        /**
         * @param principalDisplayName The display name of the Azure Active Directory Principal.
         * 
         * @return builder
         * 
         */
        public Builder principalDisplayName(@Nullable Output<String> principalDisplayName) {
            $.principalDisplayName = principalDisplayName;
            return this;
        }

        /**
         * @param principalDisplayName The display name of the Azure Active Directory Principal.
         * 
         * @return builder
         * 
         */
        public Builder principalDisplayName(String principalDisplayName) {
            return principalDisplayName(Output.of(principalDisplayName));
        }

        /**
         * @param principalId Principal ID of the security group/service principal/user that would be assigned permissions to the projected subscription.
         * 
         * @return builder
         * 
         */
        public Builder principalId(Output<String> principalId) {
            $.principalId = principalId;
            return this;
        }

        /**
         * @param principalId Principal ID of the security group/service principal/user that would be assigned permissions to the projected subscription.
         * 
         * @return builder
         * 
         */
        public Builder principalId(String principalId) {
            return principalId(Output.of(principalId));
        }

        /**
         * @param roleDefinitionId The Principal ID of the Azure built-in role that defines the permissions that the Azure Active Directory will have on the projected scope.
         * 
         * @return builder
         * 
         */
        public Builder roleDefinitionId(Output<String> roleDefinitionId) {
            $.roleDefinitionId = roleDefinitionId;
            return this;
        }

        /**
         * @param roleDefinitionId The Principal ID of the Azure built-in role that defines the permissions that the Azure Active Directory will have on the projected scope.
         * 
         * @return builder
         * 
         */
        public Builder roleDefinitionId(String roleDefinitionId) {
            return roleDefinitionId(Output.of(roleDefinitionId));
        }

        public DefinitionEligibleAuthorizationArgs build() {
            if ($.principalId == null) {
                throw new MissingRequiredPropertyException("DefinitionEligibleAuthorizationArgs", "principalId");
            }
            if ($.roleDefinitionId == null) {
                throw new MissingRequiredPropertyException("DefinitionEligibleAuthorizationArgs", "roleDefinitionId");
            }
            return $;
        }
    }

}
