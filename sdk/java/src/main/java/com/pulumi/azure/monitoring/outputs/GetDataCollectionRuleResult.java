// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.monitoring.outputs;

import com.pulumi.azure.monitoring.outputs.GetDataCollectionRuleDataFlow;
import com.pulumi.azure.monitoring.outputs.GetDataCollectionRuleDataSource;
import com.pulumi.azure.monitoring.outputs.GetDataCollectionRuleDestination;
import com.pulumi.azure.monitoring.outputs.GetDataCollectionRuleIdentity;
import com.pulumi.azure.monitoring.outputs.GetDataCollectionRuleStreamDeclaration;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetDataCollectionRuleResult {
    /**
     * @return The resource ID of the Data Collection Endpoint that this rule can be used with.
     * 
     */
    private String dataCollectionEndpointId;
    /**
     * @return One or more `data_flow` blocks as defined below.
     * 
     */
    private List<GetDataCollectionRuleDataFlow> dataFlows;
    /**
     * @return A `data_sources` block as defined below. This property is optional and can be omitted if the rule is meant to be used via direct calls to the provisioned endpoint.
     * 
     */
    private List<GetDataCollectionRuleDataSource> dataSources;
    /**
     * @return The description of the Data Collection Rule.
     * 
     */
    private String description;
    /**
     * @return Specifies a list of destination names. A `azure_monitor_metrics` data source only allows for stream of kind `Microsoft-InsightsMetrics`.
     * 
     */
    private List<GetDataCollectionRuleDestination> destinations;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return An `identity` block as defined below.
     * 
     */
    private List<GetDataCollectionRuleIdentity> identities;
    private String immutableId;
    /**
     * @return The kind of the Data Collection Rule. Possible values are `Linux`, `Windows`,and `AgentDirectToStore`. A rule of kind `Linux` does not allow for `windows_event_log` data sources. And a rule of kind `Windows` does not allow for `syslog` data sources. If kind is not specified, all kinds of data sources are allowed.
     * 
     */
    private String kind;
    /**
     * @return The Azure Region where the Data Collection Rule should exist. Changing this forces a new Data Collection Rule to be created.
     * 
     */
    private String location;
    /**
     * @return The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
     * 
     */
    private String name;
    private String resourceGroupName;
    /**
     * @return A `stream_declaration` block as defined below.
     * 
     */
    private List<GetDataCollectionRuleStreamDeclaration> streamDeclarations;
    /**
     * @return A mapping of tags which should be assigned to the Data Collection Rule.
     * 
     */
    private Map<String,String> tags;

    private GetDataCollectionRuleResult() {}
    /**
     * @return The resource ID of the Data Collection Endpoint that this rule can be used with.
     * 
     */
    public String dataCollectionEndpointId() {
        return this.dataCollectionEndpointId;
    }
    /**
     * @return One or more `data_flow` blocks as defined below.
     * 
     */
    public List<GetDataCollectionRuleDataFlow> dataFlows() {
        return this.dataFlows;
    }
    /**
     * @return A `data_sources` block as defined below. This property is optional and can be omitted if the rule is meant to be used via direct calls to the provisioned endpoint.
     * 
     */
    public List<GetDataCollectionRuleDataSource> dataSources() {
        return this.dataSources;
    }
    /**
     * @return The description of the Data Collection Rule.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Specifies a list of destination names. A `azure_monitor_metrics` data source only allows for stream of kind `Microsoft-InsightsMetrics`.
     * 
     */
    public List<GetDataCollectionRuleDestination> destinations() {
        return this.destinations;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return An `identity` block as defined below.
     * 
     */
    public List<GetDataCollectionRuleIdentity> identities() {
        return this.identities;
    }
    public String immutableId() {
        return this.immutableId;
    }
    /**
     * @return The kind of the Data Collection Rule. Possible values are `Linux`, `Windows`,and `AgentDirectToStore`. A rule of kind `Linux` does not allow for `windows_event_log` data sources. And a rule of kind `Windows` does not allow for `syslog` data sources. If kind is not specified, all kinds of data sources are allowed.
     * 
     */
    public String kind() {
        return this.kind;
    }
    /**
     * @return The Azure Region where the Data Collection Rule should exist. Changing this forces a new Data Collection Rule to be created.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
     * 
     */
    public String name() {
        return this.name;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return A `stream_declaration` block as defined below.
     * 
     */
    public List<GetDataCollectionRuleStreamDeclaration> streamDeclarations() {
        return this.streamDeclarations;
    }
    /**
     * @return A mapping of tags which should be assigned to the Data Collection Rule.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDataCollectionRuleResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String dataCollectionEndpointId;
        private List<GetDataCollectionRuleDataFlow> dataFlows;
        private List<GetDataCollectionRuleDataSource> dataSources;
        private String description;
        private List<GetDataCollectionRuleDestination> destinations;
        private String id;
        private List<GetDataCollectionRuleIdentity> identities;
        private String immutableId;
        private String kind;
        private String location;
        private String name;
        private String resourceGroupName;
        private List<GetDataCollectionRuleStreamDeclaration> streamDeclarations;
        private Map<String,String> tags;
        public Builder() {}
        public Builder(GetDataCollectionRuleResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataCollectionEndpointId = defaults.dataCollectionEndpointId;
    	      this.dataFlows = defaults.dataFlows;
    	      this.dataSources = defaults.dataSources;
    	      this.description = defaults.description;
    	      this.destinations = defaults.destinations;
    	      this.id = defaults.id;
    	      this.identities = defaults.identities;
    	      this.immutableId = defaults.immutableId;
    	      this.kind = defaults.kind;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.streamDeclarations = defaults.streamDeclarations;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder dataCollectionEndpointId(String dataCollectionEndpointId) {
            if (dataCollectionEndpointId == null) {
              throw new MissingRequiredPropertyException("GetDataCollectionRuleResult", "dataCollectionEndpointId");
            }
            this.dataCollectionEndpointId = dataCollectionEndpointId;
            return this;
        }
        @CustomType.Setter
        public Builder dataFlows(List<GetDataCollectionRuleDataFlow> dataFlows) {
            if (dataFlows == null) {
              throw new MissingRequiredPropertyException("GetDataCollectionRuleResult", "dataFlows");
            }
            this.dataFlows = dataFlows;
            return this;
        }
        public Builder dataFlows(GetDataCollectionRuleDataFlow... dataFlows) {
            return dataFlows(List.of(dataFlows));
        }
        @CustomType.Setter
        public Builder dataSources(List<GetDataCollectionRuleDataSource> dataSources) {
            if (dataSources == null) {
              throw new MissingRequiredPropertyException("GetDataCollectionRuleResult", "dataSources");
            }
            this.dataSources = dataSources;
            return this;
        }
        public Builder dataSources(GetDataCollectionRuleDataSource... dataSources) {
            return dataSources(List.of(dataSources));
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetDataCollectionRuleResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder destinations(List<GetDataCollectionRuleDestination> destinations) {
            if (destinations == null) {
              throw new MissingRequiredPropertyException("GetDataCollectionRuleResult", "destinations");
            }
            this.destinations = destinations;
            return this;
        }
        public Builder destinations(GetDataCollectionRuleDestination... destinations) {
            return destinations(List.of(destinations));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDataCollectionRuleResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder identities(List<GetDataCollectionRuleIdentity> identities) {
            if (identities == null) {
              throw new MissingRequiredPropertyException("GetDataCollectionRuleResult", "identities");
            }
            this.identities = identities;
            return this;
        }
        public Builder identities(GetDataCollectionRuleIdentity... identities) {
            return identities(List.of(identities));
        }
        @CustomType.Setter
        public Builder immutableId(String immutableId) {
            if (immutableId == null) {
              throw new MissingRequiredPropertyException("GetDataCollectionRuleResult", "immutableId");
            }
            this.immutableId = immutableId;
            return this;
        }
        @CustomType.Setter
        public Builder kind(String kind) {
            if (kind == null) {
              throw new MissingRequiredPropertyException("GetDataCollectionRuleResult", "kind");
            }
            this.kind = kind;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetDataCollectionRuleResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetDataCollectionRuleResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            if (resourceGroupName == null) {
              throw new MissingRequiredPropertyException("GetDataCollectionRuleResult", "resourceGroupName");
            }
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder streamDeclarations(List<GetDataCollectionRuleStreamDeclaration> streamDeclarations) {
            if (streamDeclarations == null) {
              throw new MissingRequiredPropertyException("GetDataCollectionRuleResult", "streamDeclarations");
            }
            this.streamDeclarations = streamDeclarations;
            return this;
        }
        public Builder streamDeclarations(GetDataCollectionRuleStreamDeclaration... streamDeclarations) {
            return streamDeclarations(List.of(streamDeclarations));
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetDataCollectionRuleResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public GetDataCollectionRuleResult build() {
            final var _resultValue = new GetDataCollectionRuleResult();
            _resultValue.dataCollectionEndpointId = dataCollectionEndpointId;
            _resultValue.dataFlows = dataFlows;
            _resultValue.dataSources = dataSources;
            _resultValue.description = description;
            _resultValue.destinations = destinations;
            _resultValue.id = id;
            _resultValue.identities = identities;
            _resultValue.immutableId = immutableId;
            _resultValue.kind = kind;
            _resultValue.location = location;
            _resultValue.name = name;
            _resultValue.resourceGroupName = resourceGroupName;
            _resultValue.streamDeclarations = streamDeclarations;
            _resultValue.tags = tags;
            return _resultValue;
        }
    }
}
