// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.compute;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.compute.RunCommandArgs;
import com.pulumi.azure.compute.inputs.RunCommandState;
import com.pulumi.azure.compute.outputs.RunCommandErrorBlobManagedIdentity;
import com.pulumi.azure.compute.outputs.RunCommandInstanceView;
import com.pulumi.azure.compute.outputs.RunCommandOutputBlobManagedIdentity;
import com.pulumi.azure.compute.outputs.RunCommandParameter;
import com.pulumi.azure.compute.outputs.RunCommandProtectedParameter;
import com.pulumi.azure.compute.outputs.RunCommandSource;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a Virtual Machine Run Command.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.network.VirtualNetwork;
 * import com.pulumi.azure.network.VirtualNetworkArgs;
 * import com.pulumi.azure.network.Subnet;
 * import com.pulumi.azure.network.SubnetArgs;
 * import com.pulumi.azure.network.NetworkInterface;
 * import com.pulumi.azure.network.NetworkInterfaceArgs;
 * import com.pulumi.azure.network.inputs.NetworkInterfaceIpConfigurationArgs;
 * import com.pulumi.azure.authorization.UserAssignedIdentity;
 * import com.pulumi.azure.authorization.UserAssignedIdentityArgs;
 * import com.pulumi.azure.compute.LinuxVirtualMachine;
 * import com.pulumi.azure.compute.LinuxVirtualMachineArgs;
 * import com.pulumi.azure.compute.inputs.LinuxVirtualMachineOsDiskArgs;
 * import com.pulumi.azure.compute.inputs.LinuxVirtualMachineSourceImageReferenceArgs;
 * import com.pulumi.azure.compute.inputs.LinuxVirtualMachineIdentityArgs;
 * import com.pulumi.azure.storage.Account;
 * import com.pulumi.azure.storage.AccountArgs;
 * import com.pulumi.azure.authorization.Assignment;
 * import com.pulumi.azure.authorization.AssignmentArgs;
 * import com.pulumi.azure.storage.Container;
 * import com.pulumi.azure.storage.ContainerArgs;
 * import com.pulumi.azure.storage.Blob;
 * import com.pulumi.azure.storage.BlobArgs;
 * import com.pulumi.azure.storage.StorageFunctions;
 * import com.pulumi.azure.storage.inputs.GetAccountSASArgs;
 * import com.pulumi.azure.storage.inputs.GetAccountSASResourceTypesArgs;
 * import com.pulumi.azure.storage.inputs.GetAccountSASServicesArgs;
 * import com.pulumi.azure.storage.inputs.GetAccountSASPermissionsArgs;
 * import com.pulumi.azure.compute.RunCommand;
 * import com.pulumi.azure.compute.RunCommandArgs;
 * import com.pulumi.azure.compute.inputs.RunCommandSourceArgs;
 * import com.pulumi.azure.compute.inputs.RunCommandSourceScriptUriManagedIdentityArgs;
 * import com.pulumi.azure.compute.inputs.RunCommandErrorBlobManagedIdentityArgs;
 * import com.pulumi.azure.compute.inputs.RunCommandOutputBlobManagedIdentityArgs;
 * import com.pulumi.azure.compute.inputs.RunCommandParameterArgs;
 * import com.pulumi.azure.compute.inputs.RunCommandProtectedParameterArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var exampleResourceGroup = new ResourceGroup("exampleResourceGroup", ResourceGroupArgs.builder()
 *             .name("example-resources")
 *             .location("West Europe")
 *             .build());
 * 
 *         var exampleVirtualNetwork = new VirtualNetwork("exampleVirtualNetwork", VirtualNetworkArgs.builder()
 *             .name("example-vnet")
 *             .addressSpaces("10.0.0.0/16")
 *             .location(exampleResourceGroup.location())
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .build());
 * 
 *         var exampleSubnet = new Subnet("exampleSubnet", SubnetArgs.builder()
 *             .name("internal")
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .virtualNetworkName(exampleVirtualNetwork.name())
 *             .addressPrefixes("10.0.2.0/24")
 *             .build());
 * 
 *         var exampleNetworkInterface = new NetworkInterface("exampleNetworkInterface", NetworkInterfaceArgs.builder()
 *             .name("example-nic")
 *             .location(exampleResourceGroup.location())
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .ipConfigurations(NetworkInterfaceIpConfigurationArgs.builder()
 *                 .name("internal")
 *                 .subnetId(exampleSubnet.id())
 *                 .privateIpAddressAllocation("Dynamic")
 *                 .build())
 *             .build());
 * 
 *         var exampleUserAssignedIdentity = new UserAssignedIdentity("exampleUserAssignedIdentity", UserAssignedIdentityArgs.builder()
 *             .name("example-uai")
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .location(exampleResourceGroup.location())
 *             .build());
 * 
 *         var exampleLinuxVirtualMachine = new LinuxVirtualMachine("exampleLinuxVirtualMachine", LinuxVirtualMachineArgs.builder()
 *             .name("example-VM")
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .location(exampleResourceGroup.location())
 *             .size("Standard_B2s")
 *             .adminUsername("adminuser")
 *             .adminPassword("P}{@literal @}{@code $$w0rd1234!")
 *             .disablePasswordAuthentication(false)
 *             .networkInterfaceIds(exampleNetworkInterface.id())
 *             .osDisk(LinuxVirtualMachineOsDiskArgs.builder()
 *                 .caching("ReadWrite")
 *                 .storageAccountType("Premium_LRS")
 *                 .build())
 *             .sourceImageReference(LinuxVirtualMachineSourceImageReferenceArgs.builder()
 *                 .publisher("Canonical")
 *                 .offer("0001-com-ubuntu-server-jammy")
 *                 .sku("22_04-lts")
 *                 .version("latest")
 *                 .build())
 *             .identity(LinuxVirtualMachineIdentityArgs.builder()
 *                 .type("SystemAssigned, UserAssigned")
 *                 .identityIds(exampleUserAssignedIdentity.id())
 *                 .build())
 *             .build());
 * 
 *         var exampleAccount = new Account("exampleAccount", AccountArgs.builder()
 *             .name("exampleaccount")
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .location(exampleResourceGroup.location())
 *             .accountTier("Standard")
 *             .accountReplicationType("LRS")
 *             .build());
 * 
 *         var exampleAssignment = new Assignment("exampleAssignment", AssignmentArgs.builder()
 *             .scope(exampleAccount.id())
 *             .roleDefinitionName("Storage Blob Data Contributor")
 *             .principalId(exampleUserAssignedIdentity.principalId())
 *             .build());
 * 
 *         var exampleContainer = new Container("exampleContainer", ContainerArgs.builder()
 *             .name("example-sc")
 *             .storageAccountName(exampleAccount.name())
 *             .containerAccessType("blob")
 *             .build());
 * 
 *         var example1 = new Blob("example1", BlobArgs.builder()
 *             .name("script1")
 *             .storageAccountName(exampleAccount.name())
 *             .storageContainerName(exampleContainer.name())
 *             .type("Block")
 *             .sourceContent("echo 'hello world'")
 *             .build());
 * 
 *         var example2 = new Blob("example2", BlobArgs.builder()
 *             .name("output")
 *             .storageAccountName(exampleAccount.name())
 *             .storageContainerName(exampleContainer.name())
 *             .type("Append")
 *             .build());
 * 
 *         var example3 = new Blob("example3", BlobArgs.builder()
 *             .name("error")
 *             .storageAccountName(exampleAccount.name())
 *             .storageContainerName(exampleContainer.name())
 *             .type("Append")
 *             .build());
 * 
 *         final var example = StorageFunctions.getAccountSAS(GetAccountSASArgs.builder()
 *             .connectionString(exampleAccount.primaryConnectionString())
 *             .httpsOnly(true)
 *             .signedVersion("2019-10-10")
 *             .start("2023-04-01T00:00:00Z")
 *             .expiry("2024-04-01T00:00:00Z")
 *             .resourceTypes(GetAccountSASResourceTypesArgs.builder()
 *                 .service(false)
 *                 .container(false)
 *                 .object(true)
 *                 .build())
 *             .services(GetAccountSASServicesArgs.builder()
 *                 .blob(true)
 *                 .queue(false)
 *                 .table(false)
 *                 .file(false)
 *                 .build())
 *             .permissions(GetAccountSASPermissionsArgs.builder()
 *                 .read(true)
 *                 .write(true)
 *                 .delete(false)
 *                 .list(false)
 *                 .add(true)
 *                 .create(true)
 *                 .update(false)
 *                 .process(false)
 *                 .tag(false)
 *                 .filter(false)
 *                 .build())
 *             .build());
 * 
 *         // basic example
 *         var exampleRunCommand = new RunCommand("exampleRunCommand", RunCommandArgs.builder()
 *             .name("example-vmrc")
 *             .location(exampleResourceGroup.location())
 *             .virtualMachineId(exampleLinuxVirtualMachine.id())
 *             .source(RunCommandSourceArgs.builder()
 *                 .script("echo 'hello world'")
 *                 .build())
 *             .build());
 * 
 *         // authorize to storage blob using user assigned identity
 *         var example2RunCommand = new RunCommand("example2RunCommand", RunCommandArgs.builder()
 *             .location(exampleResourceGroup.location())
 *             .name("example2-vmrc")
 *             .virtualMachineId(exampleLinuxVirtualMachine.id())
 *             .outputBlobUri(example2.id())
 *             .errorBlobUri(example3.id())
 *             .runAsPassword("P}{@literal @}{@code $$w0rd1234!")
 *             .runAsUser("adminuser")
 *             .source(RunCommandSourceArgs.builder()
 *                 .scriptUri(example1.id())
 *                 .scriptUriManagedIdentity(RunCommandSourceScriptUriManagedIdentityArgs.builder()
 *                     .clientId(exampleUserAssignedIdentity.clientId())
 *                     .build())
 *                 .build())
 *             .errorBlobManagedIdentity(RunCommandErrorBlobManagedIdentityArgs.builder()
 *                 .clientId(exampleUserAssignedIdentity.clientId())
 *                 .build())
 *             .outputBlobManagedIdentity(RunCommandOutputBlobManagedIdentityArgs.builder()
 *                 .clientId(exampleUserAssignedIdentity.clientId())
 *                 .build())
 *             .parameters(RunCommandParameterArgs.builder()
 *                 .name("examplev1")
 *                 .value("val1")
 *                 .build())
 *             .protectedParameters(RunCommandProtectedParameterArgs.builder()
 *                 .name("examplev2")
 *                 .value("val2")
 *                 .build())
 *             .tags(Map.ofEntries(
 *                 Map.entry("environment", "terraform-examples"),
 *                 Map.entry("some_key", "some-value")
 *             ))
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(exampleAssignment)
 *                 .build());
 * 
 *         // authorize to storage blob using SAS token
 *         var example3RunCommand = new RunCommand("example3RunCommand", RunCommandArgs.builder()
 *             .location(exampleResourceGroup.location())
 *             .name("example3-vmrc")
 *             .virtualMachineId(exampleLinuxVirtualMachine.id())
 *             .runAsPassword("P}{@literal @}{@code $$w0rd1234!")
 *             .runAsUser("adminuser")
 *             .errorBlobUri(Output.tuple(example3.id(), example.applyValue(getAccountSASResult -> getAccountSASResult)).applyValue(values -> }{{@code
 *                 var id = values.t1;
 *                 var example = values.t2;
 *                 return String.format("%s%s", id,example.applyValue(getAccountSASResult -> getAccountSASResult.sas()));
 *             }}{@code ))
 *             .outputBlobUri(Output.tuple(example2.id(), example.applyValue(getAccountSASResult -> getAccountSASResult)).applyValue(values -> }{{@code
 *                 var id = values.t1;
 *                 var example = values.t2;
 *                 return String.format("%s%s", id,example.applyValue(getAccountSASResult -> getAccountSASResult.sas()));
 *             }}{@code ))
 *             .source(RunCommandSourceArgs.builder()
 *                 .scriptUri(Output.tuple(example1.id(), example.applyValue(getAccountSASResult -> getAccountSASResult)).applyValue(values -> }{{@code
 *                     var id = values.t1;
 *                     var example = values.t2;
 *                     return String.format("%s%s", id,example.applyValue(getAccountSASResult -> getAccountSASResult.sas()));
 *                 }}{@code ))
 *                 .build())
 *             .parameters(RunCommandParameterArgs.builder()
 *                 .name("example-vm1")
 *                 .value("val1")
 *                 .build())
 *             .tags(Map.ofEntries(
 *                 Map.entry("environment", "terraform-example-s"),
 *                 Map.entry("some_key", "some-value")
 *             ))
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * An existing Virtual Machine Run Command can be imported into Terraform using the `resource id`, e.g.
 * 
 * ```sh
 * $ pulumi import azure:compute/runCommand:RunCommand example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Compute/virtualMachines/vm1/runCommands/rc1
 * ```
 * 
 */
@ResourceType(type="azure:compute/runCommand:RunCommand")
public class RunCommand extends com.pulumi.resources.CustomResource {
    /**
     * An `error_blob_managed_identity` block as defined below. User-assigned managed Identity that has access to errorBlobUri storage blob.
     * 
     */
    @Export(name="errorBlobManagedIdentity", refs={RunCommandErrorBlobManagedIdentity.class}, tree="[0]")
    private Output</* @Nullable */ RunCommandErrorBlobManagedIdentity> errorBlobManagedIdentity;

    /**
     * @return An `error_blob_managed_identity` block as defined below. User-assigned managed Identity that has access to errorBlobUri storage blob.
     * 
     */
    public Output<Optional<RunCommandErrorBlobManagedIdentity>> errorBlobManagedIdentity() {
        return Codegen.optional(this.errorBlobManagedIdentity);
    }
    /**
     * Specifies the Azure storage blob where script error stream will be uploaded.
     * 
     */
    @Export(name="errorBlobUri", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> errorBlobUri;

    /**
     * @return Specifies the Azure storage blob where script error stream will be uploaded.
     * 
     */
    public Output<Optional<String>> errorBlobUri() {
        return Codegen.optional(this.errorBlobUri);
    }
    @Export(name="instanceViews", refs={List.class,RunCommandInstanceView.class}, tree="[0,1]")
    private Output<List<RunCommandInstanceView>> instanceViews;

    public Output<List<RunCommandInstanceView>> instanceViews() {
        return this.instanceViews;
    }
    /**
     * The Azure Region where the Virtual Machine Run Command should exist. Changing this forces a new Virtual Machine Run Command to be created.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return The Azure Region where the Virtual Machine Run Command should exist. Changing this forces a new Virtual Machine Run Command to be created.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * Specifies the name of this Virtual Machine Run Command. Changing this forces a new Virtual Machine Run Command to be created.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Specifies the name of this Virtual Machine Run Command. Changing this forces a new Virtual Machine Run Command to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * An `output_blob_managed_identity` block as defined below. User-assigned managed Identity that has access to outputBlobUri storage blob.
     * 
     */
    @Export(name="outputBlobManagedIdentity", refs={RunCommandOutputBlobManagedIdentity.class}, tree="[0]")
    private Output</* @Nullable */ RunCommandOutputBlobManagedIdentity> outputBlobManagedIdentity;

    /**
     * @return An `output_blob_managed_identity` block as defined below. User-assigned managed Identity that has access to outputBlobUri storage blob.
     * 
     */
    public Output<Optional<RunCommandOutputBlobManagedIdentity>> outputBlobManagedIdentity() {
        return Codegen.optional(this.outputBlobManagedIdentity);
    }
    /**
     * Specifies the Azure storage blob where script output stream will be uploaded. It can be basic blob URI with SAS token.
     * 
     */
    @Export(name="outputBlobUri", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> outputBlobUri;

    /**
     * @return Specifies the Azure storage blob where script output stream will be uploaded. It can be basic blob URI with SAS token.
     * 
     */
    public Output<Optional<String>> outputBlobUri() {
        return Codegen.optional(this.outputBlobUri);
    }
    /**
     * A list of `parameter` blocks as defined below. The parameters used by the script.
     * 
     */
    @Export(name="parameters", refs={List.class,RunCommandParameter.class}, tree="[0,1]")
    private Output</* @Nullable */ List<RunCommandParameter>> parameters;

    /**
     * @return A list of `parameter` blocks as defined below. The parameters used by the script.
     * 
     */
    public Output<Optional<List<RunCommandParameter>>> parameters() {
        return Codegen.optional(this.parameters);
    }
    /**
     * A list of `protected_parameter` blocks as defined below. The protected parameters used by the script.
     * 
     */
    @Export(name="protectedParameters", refs={List.class,RunCommandProtectedParameter.class}, tree="[0,1]")
    private Output</* @Nullable */ List<RunCommandProtectedParameter>> protectedParameters;

    /**
     * @return A list of `protected_parameter` blocks as defined below. The protected parameters used by the script.
     * 
     */
    public Output<Optional<List<RunCommandProtectedParameter>>> protectedParameters() {
        return Codegen.optional(this.protectedParameters);
    }
    /**
     * Specifies the user account password on the VM when executing the Virtual Machine Run Command.
     * 
     */
    @Export(name="runAsPassword", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> runAsPassword;

    /**
     * @return Specifies the user account password on the VM when executing the Virtual Machine Run Command.
     * 
     */
    public Output<Optional<String>> runAsPassword() {
        return Codegen.optional(this.runAsPassword);
    }
    /**
     * Specifies the user account on the VM when executing the Virtual Machine Run Command.
     * 
     */
    @Export(name="runAsUser", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> runAsUser;

    /**
     * @return Specifies the user account on the VM when executing the Virtual Machine Run Command.
     * 
     */
    public Output<Optional<String>> runAsUser() {
        return Codegen.optional(this.runAsUser);
    }
    /**
     * A `source` block as defined below. The source of the run command script.
     * 
     */
    @Export(name="source", refs={RunCommandSource.class}, tree="[0]")
    private Output<RunCommandSource> source;

    /**
     * @return A `source` block as defined below. The source of the run command script.
     * 
     */
    public Output<RunCommandSource> source() {
        return this.source;
    }
    /**
     * A mapping of tags which should be assigned to the Virtual Machine Run Command.
     * 
     */
    @Export(name="tags", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return A mapping of tags which should be assigned to the Virtual Machine Run Command.
     * 
     */
    public Output<Optional<Map<String,String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * Specifies the Virtual Machine ID within which this Virtual Machine Run Command should exist. Changing this forces a new Virtual Machine Run Command to be created.
     * 
     */
    @Export(name="virtualMachineId", refs={String.class}, tree="[0]")
    private Output<String> virtualMachineId;

    /**
     * @return Specifies the Virtual Machine ID within which this Virtual Machine Run Command should exist. Changing this forces a new Virtual Machine Run Command to be created.
     * 
     */
    public Output<String> virtualMachineId() {
        return this.virtualMachineId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public RunCommand(java.lang.String name) {
        this(name, RunCommandArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public RunCommand(java.lang.String name, RunCommandArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public RunCommand(java.lang.String name, RunCommandArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:compute/runCommand:RunCommand", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private RunCommand(java.lang.String name, Output<java.lang.String> id, @Nullable RunCommandState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:compute/runCommand:RunCommand", name, state, makeResourceOptions(options, id), false);
    }

    private static RunCommandArgs makeArgs(RunCommandArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? RunCommandArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "errorBlobManagedIdentity",
                "outputBlobManagedIdentity",
                "protectedParameters",
                "runAsPassword"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static RunCommand get(java.lang.String name, Output<java.lang.String> id, @Nullable RunCommandState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new RunCommand(name, id, state, options);
    }
}
