// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.keyvault;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.keyvault.KeyVaultArgs;
import com.pulumi.azure.keyvault.inputs.KeyVaultState;
import com.pulumi.azure.keyvault.outputs.KeyVaultAccessPolicy;
import com.pulumi.azure.keyvault.outputs.KeyVaultContact;
import com.pulumi.azure.keyvault.outputs.KeyVaultNetworkAcls;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a Key Vault.
 * 
 * ## Disclaimers
 * 
 * &gt; **Note:** It&#39;s possible to define Key Vault Access Policies both within the `azure.keyvault.KeyVault` resource via the `access_policy` block and by using the `azure.keyvault.AccessPolicy` resource. However it&#39;s not possible to use both methods to manage Access Policies within a KeyVault, since there&#39;ll be conflicts.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var current = Output.of(CoreFunctions.getClientConfig());
 * 
 *         var exampleResourceGroup = new ResourceGroup(&#34;exampleResourceGroup&#34;, ResourceGroupArgs.builder()        
 *             .location(&#34;West Europe&#34;)
 *             .build());
 * 
 *         var exampleKeyVault = new KeyVault(&#34;exampleKeyVault&#34;, KeyVaultArgs.builder()        
 *             .location(exampleResourceGroup.location())
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .enabledForDiskEncryption(true)
 *             .tenantId(current.apply(getClientConfigResult -&gt; getClientConfigResult.tenantId()))
 *             .softDeleteRetentionDays(7)
 *             .purgeProtectionEnabled(false)
 *             .skuName(&#34;standard&#34;)
 *             .accessPolicies(KeyVaultAccessPolicyArgs.builder()
 *                 .tenantId(current.apply(getClientConfigResult -&gt; getClientConfigResult.tenantId()))
 *                 .objectId(current.apply(getClientConfigResult -&gt; getClientConfigResult.objectId()))
 *                 .keyPermissions(&#34;Get&#34;)
 *                 .secretPermissions(&#34;Get&#34;)
 *                 .storagePermissions(&#34;Get&#34;)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Key Vault&#39;s can be imported using the `resource id`, e.g.
 * 
 * ```sh
 *  $ pulumi import azure:keyvault/keyVault:KeyVault example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.KeyVault/vaults/vault1
 * ```
 * 
 */
@ResourceType(type="azure:keyvault/keyVault:KeyVault")
public class KeyVault extends com.pulumi.resources.CustomResource {
    /**
     * A list of up to 16 objects describing access policies, as described below.
     * 
     */
    @Export(name="accessPolicies", type=List.class, parameters={KeyVaultAccessPolicy.class})
    private Output<List<KeyVaultAccessPolicy>> accessPolicies;

    /**
     * @return A list of up to 16 objects describing access policies, as described below.
     * 
     */
    public Output<List<KeyVaultAccessPolicy>> accessPolicies() {
        return this.accessPolicies;
    }
    /**
     * One or more `contact` block as defined below.
     * 
     */
    @Export(name="contacts", type=List.class, parameters={KeyVaultContact.class})
    private Output</* @Nullable */ List<KeyVaultContact>> contacts;

    /**
     * @return One or more `contact` block as defined below.
     * 
     */
    public Output<Optional<List<KeyVaultContact>>> contacts() {
        return Codegen.optional(this.contacts);
    }
    /**
     * Boolean flag to specify whether Azure Key Vault uses Role Based Access Control (RBAC) for authorization of data actions. Defaults to `false`.
     * 
     */
    @Export(name="enableRbacAuthorization", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> enableRbacAuthorization;

    /**
     * @return Boolean flag to specify whether Azure Key Vault uses Role Based Access Control (RBAC) for authorization of data actions. Defaults to `false`.
     * 
     */
    public Output<Optional<Boolean>> enableRbacAuthorization() {
        return Codegen.optional(this.enableRbacAuthorization);
    }
    /**
     * Boolean flag to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault. Defaults to `false`.
     * 
     */
    @Export(name="enabledForDeployment", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> enabledForDeployment;

    /**
     * @return Boolean flag to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault. Defaults to `false`.
     * 
     */
    public Output<Optional<Boolean>> enabledForDeployment() {
        return Codegen.optional(this.enabledForDeployment);
    }
    /**
     * Boolean flag to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys. Defaults to `false`.
     * 
     */
    @Export(name="enabledForDiskEncryption", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> enabledForDiskEncryption;

    /**
     * @return Boolean flag to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys. Defaults to `false`.
     * 
     */
    public Output<Optional<Boolean>> enabledForDiskEncryption() {
        return Codegen.optional(this.enabledForDiskEncryption);
    }
    /**
     * Boolean flag to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault. Defaults to `false`.
     * 
     */
    @Export(name="enabledForTemplateDeployment", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> enabledForTemplateDeployment;

    /**
     * @return Boolean flag to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault. Defaults to `false`.
     * 
     */
    public Output<Optional<Boolean>> enabledForTemplateDeployment() {
        return Codegen.optional(this.enabledForTemplateDeployment);
    }
    /**
     * Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="location", type=String.class, parameters={})
    private Output<String> location;

    /**
     * @return Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * Specifies the name of the Key Vault. Changing this forces a new resource to be created. The name must be globally unique. If the vault is in a recoverable state then the vault will need to be purged before reusing the name.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Specifies the name of the Key Vault. Changing this forces a new resource to be created. The name must be globally unique. If the vault is in a recoverable state then the vault will need to be purged before reusing the name.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * A `network_acls` block as defined below.
     * 
     */
    @Export(name="networkAcls", type=KeyVaultNetworkAcls.class, parameters={})
    private Output<KeyVaultNetworkAcls> networkAcls;

    /**
     * @return A `network_acls` block as defined below.
     * 
     */
    public Output<KeyVaultNetworkAcls> networkAcls() {
        return this.networkAcls;
    }
    /**
     * Is Purge Protection enabled for this Key Vault? Defaults to `false`.
     * 
     */
    @Export(name="purgeProtectionEnabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> purgeProtectionEnabled;

    /**
     * @return Is Purge Protection enabled for this Key Vault? Defaults to `false`.
     * 
     */
    public Output<Optional<Boolean>> purgeProtectionEnabled() {
        return Codegen.optional(this.purgeProtectionEnabled);
    }
    /**
     * The name of the resource group in which to create the Key Vault. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="resourceGroupName", type=String.class, parameters={})
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group in which to create the Key Vault. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * The Name of the SKU used for this Key Vault. Possible values are `standard` and `premium`.
     * 
     */
    @Export(name="skuName", type=String.class, parameters={})
    private Output<String> skuName;

    /**
     * @return The Name of the SKU used for this Key Vault. Possible values are `standard` and `premium`.
     * 
     */
    public Output<String> skuName() {
        return this.skuName;
    }
    /**
     * The number of days that items should be retained for once soft-deleted. This value can be between `7` and `90` (the default) days.
     * 
     */
    @Export(name="softDeleteRetentionDays", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> softDeleteRetentionDays;

    /**
     * @return The number of days that items should be retained for once soft-deleted. This value can be between `7` and `90` (the default) days.
     * 
     */
    public Output<Optional<Integer>> softDeleteRetentionDays() {
        return Codegen.optional(this.softDeleteRetentionDays);
    }
    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Export(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
     * 
     */
    @Export(name="tenantId", type=String.class, parameters={})
    private Output<String> tenantId;

    /**
     * @return The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
     * 
     */
    public Output<String> tenantId() {
        return this.tenantId;
    }
    /**
     * The URI of the Key Vault, used for performing operations on keys and secrets.
     * 
     */
    @Export(name="vaultUri", type=String.class, parameters={})
    private Output<String> vaultUri;

    /**
     * @return The URI of the Key Vault, used for performing operations on keys and secrets.
     * 
     */
    public Output<String> vaultUri() {
        return this.vaultUri;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public KeyVault(String name) {
        this(name, KeyVaultArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public KeyVault(String name, KeyVaultArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public KeyVault(String name, KeyVaultArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:keyvault/keyVault:KeyVault", name, args == null ? KeyVaultArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private KeyVault(String name, Output<String> id, @Nullable KeyVaultState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:keyvault/keyVault:KeyVault", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static KeyVault get(String name, Output<String> id, @Nullable KeyVaultState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new KeyVault(name, id, state, options);
    }
}
