// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerservice;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegistryScopeMapArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegistryScopeMapArgs Empty = new RegistryScopeMapArgs();

    /**
     * A list of actions to attach to the scope map (e.g. `repo/content/read`, `repo2/content/delete`).
     * 
     */
    @Import(name="actions", required=true)
    private Output<List<String>> actions;

    /**
     * @return A list of actions to attach to the scope map (e.g. `repo/content/read`, `repo2/content/delete`).
     * 
     */
    public Output<List<String>> actions() {
        return this.actions;
    }

    /**
     * The name of the Container Registry. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="containerRegistryName", required=true)
    private Output<String> containerRegistryName;

    /**
     * @return The name of the Container Registry. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> containerRegistryName() {
        return this.containerRegistryName;
    }

    /**
     * The description of the Container Registry.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the Container Registry.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Specifies the name of the scope map. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the name of the scope map. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The name of the resource group in which to create the Container Registry token. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group in which to create the Container Registry token. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    private RegistryScopeMapArgs() {}

    private RegistryScopeMapArgs(RegistryScopeMapArgs $) {
        this.actions = $.actions;
        this.containerRegistryName = $.containerRegistryName;
        this.description = $.description;
        this.name = $.name;
        this.resourceGroupName = $.resourceGroupName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegistryScopeMapArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegistryScopeMapArgs $;

        public Builder() {
            $ = new RegistryScopeMapArgs();
        }

        public Builder(RegistryScopeMapArgs defaults) {
            $ = new RegistryScopeMapArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param actions A list of actions to attach to the scope map (e.g. `repo/content/read`, `repo2/content/delete`).
         * 
         * @return builder
         * 
         */
        public Builder actions(Output<List<String>> actions) {
            $.actions = actions;
            return this;
        }

        /**
         * @param actions A list of actions to attach to the scope map (e.g. `repo/content/read`, `repo2/content/delete`).
         * 
         * @return builder
         * 
         */
        public Builder actions(List<String> actions) {
            return actions(Output.of(actions));
        }

        /**
         * @param actions A list of actions to attach to the scope map (e.g. `repo/content/read`, `repo2/content/delete`).
         * 
         * @return builder
         * 
         */
        public Builder actions(String... actions) {
            return actions(List.of(actions));
        }

        /**
         * @param containerRegistryName The name of the Container Registry. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder containerRegistryName(Output<String> containerRegistryName) {
            $.containerRegistryName = containerRegistryName;
            return this;
        }

        /**
         * @param containerRegistryName The name of the Container Registry. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder containerRegistryName(String containerRegistryName) {
            return containerRegistryName(Output.of(containerRegistryName));
        }

        /**
         * @param description The description of the Container Registry.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the Container Registry.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name Specifies the name of the scope map. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of the scope map. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param resourceGroupName The name of the resource group in which to create the Container Registry token. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group in which to create the Container Registry token. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public RegistryScopeMapArgs build() {
            if ($.actions == null) {
                throw new MissingRequiredPropertyException("RegistryScopeMapArgs", "actions");
            }
            if ($.containerRegistryName == null) {
                throw new MissingRequiredPropertyException("RegistryScopeMapArgs", "containerRegistryName");
            }
            if ($.resourceGroupName == null) {
                throw new MissingRequiredPropertyException("RegistryScopeMapArgs", "resourceGroupName");
            }
            return $;
        }
    }

}
