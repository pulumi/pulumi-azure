// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.hdinsight.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SparkClusterRolesZookeeperNode {
    /**
     * @return The Password associated with the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
     * 
     */
    private @Nullable String password;
    /**
     * @return A list of SSH Keys which should be used for the local administrator on the Zookeeper Nodes. Changing this forces a new resource to be created.
     * 
     */
    private @Nullable List<String> sshKeys;
    /**
     * @return The ID of the Subnet within the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
     * 
     */
    private @Nullable String subnetId;
    /**
     * @return The Username of the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
     * 
     */
    private String username;
    /**
     * @return The ID of the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
     * 
     */
    private @Nullable String virtualNetworkId;
    /**
     * @return The Size of the Virtual Machine which should be used as the Zookeeper Nodes. Changing this forces a new resource to be created.
     * 
     */
    private String vmSize;

    private SparkClusterRolesZookeeperNode() {}
    /**
     * @return The Password associated with the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
     * 
     */
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }
    /**
     * @return A list of SSH Keys which should be used for the local administrator on the Zookeeper Nodes. Changing this forces a new resource to be created.
     * 
     */
    public List<String> sshKeys() {
        return this.sshKeys == null ? List.of() : this.sshKeys;
    }
    /**
     * @return The ID of the Subnet within the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
     * 
     */
    public Optional<String> subnetId() {
        return Optional.ofNullable(this.subnetId);
    }
    /**
     * @return The Username of the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
     * 
     */
    public String username() {
        return this.username;
    }
    /**
     * @return The ID of the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
     * 
     */
    public Optional<String> virtualNetworkId() {
        return Optional.ofNullable(this.virtualNetworkId);
    }
    /**
     * @return The Size of the Virtual Machine which should be used as the Zookeeper Nodes. Changing this forces a new resource to be created.
     * 
     */
    public String vmSize() {
        return this.vmSize;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SparkClusterRolesZookeeperNode defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String password;
        private @Nullable List<String> sshKeys;
        private @Nullable String subnetId;
        private String username;
        private @Nullable String virtualNetworkId;
        private String vmSize;
        public Builder() {}
        public Builder(SparkClusterRolesZookeeperNode defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.password = defaults.password;
    	      this.sshKeys = defaults.sshKeys;
    	      this.subnetId = defaults.subnetId;
    	      this.username = defaults.username;
    	      this.virtualNetworkId = defaults.virtualNetworkId;
    	      this.vmSize = defaults.vmSize;
        }

        @CustomType.Setter
        public Builder password(@Nullable String password) {
            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder sshKeys(@Nullable List<String> sshKeys) {
            this.sshKeys = sshKeys;
            return this;
        }
        public Builder sshKeys(String... sshKeys) {
            return sshKeys(List.of(sshKeys));
        }
        @CustomType.Setter
        public Builder subnetId(@Nullable String subnetId) {
            this.subnetId = subnetId;
            return this;
        }
        @CustomType.Setter
        public Builder username(String username) {
            this.username = Objects.requireNonNull(username);
            return this;
        }
        @CustomType.Setter
        public Builder virtualNetworkId(@Nullable String virtualNetworkId) {
            this.virtualNetworkId = virtualNetworkId;
            return this;
        }
        @CustomType.Setter
        public Builder vmSize(String vmSize) {
            this.vmSize = Objects.requireNonNull(vmSize);
            return this;
        }
        public SparkClusterRolesZookeeperNode build() {
            final var o = new SparkClusterRolesZookeeperNode();
            o.password = password;
            o.sshKeys = sshKeys;
            o.subnetId = subnetId;
            o.username = username;
            o.virtualNetworkId = virtualNetworkId;
            o.vmSize = vmSize;
            return o;
        }
    }
}
