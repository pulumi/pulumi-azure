// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.dataprotection.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BackupInstancePostgresqlState extends com.pulumi.resources.ResourceArgs {

    public static final BackupInstancePostgresqlState Empty = new BackupInstancePostgresqlState();

    /**
     * The ID of the Backup Policy.
     * 
     */
    @Import(name="backupPolicyId")
    private @Nullable Output<String> backupPolicyId;

    /**
     * @return The ID of the Backup Policy.
     * 
     */
    public Optional<Output<String>> backupPolicyId() {
        return Optional.ofNullable(this.backupPolicyId);
    }

    /**
     * The ID or versionless ID of the key vault secret which stores the connection string of the database.
     * 
     */
    @Import(name="databaseCredentialKeyVaultSecretId")
    private @Nullable Output<String> databaseCredentialKeyVaultSecretId;

    /**
     * @return The ID or versionless ID of the key vault secret which stores the connection string of the database.
     * 
     */
    public Optional<Output<String>> databaseCredentialKeyVaultSecretId() {
        return Optional.ofNullable(this.databaseCredentialKeyVaultSecretId);
    }

    /**
     * The ID of the source database. Changing this forces a new Backup Instance PostgreSQL to be created.
     * 
     */
    @Import(name="databaseId")
    private @Nullable Output<String> databaseId;

    /**
     * @return The ID of the source database. Changing this forces a new Backup Instance PostgreSQL to be created.
     * 
     */
    public Optional<Output<String>> databaseId() {
        return Optional.ofNullable(this.databaseId);
    }

    /**
     * The location of the source database. Changing this forces a new Backup Instance PostgreSQL to be created.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The location of the source database. Changing this forces a new Backup Instance PostgreSQL to be created.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name which should be used for this Backup Instance PostgreSQL. Changing this forces a new Backup Instance PostgreSQL to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name which should be used for this Backup Instance PostgreSQL. Changing this forces a new Backup Instance PostgreSQL to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the Backup Vault within which the PostgreSQL Backup Instance should exist. Changing this forces a new Backup Instance PostgreSQL to be created.
     * 
     */
    @Import(name="vaultId")
    private @Nullable Output<String> vaultId;

    /**
     * @return The ID of the Backup Vault within which the PostgreSQL Backup Instance should exist. Changing this forces a new Backup Instance PostgreSQL to be created.
     * 
     */
    public Optional<Output<String>> vaultId() {
        return Optional.ofNullable(this.vaultId);
    }

    private BackupInstancePostgresqlState() {}

    private BackupInstancePostgresqlState(BackupInstancePostgresqlState $) {
        this.backupPolicyId = $.backupPolicyId;
        this.databaseCredentialKeyVaultSecretId = $.databaseCredentialKeyVaultSecretId;
        this.databaseId = $.databaseId;
        this.location = $.location;
        this.name = $.name;
        this.vaultId = $.vaultId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackupInstancePostgresqlState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackupInstancePostgresqlState $;

        public Builder() {
            $ = new BackupInstancePostgresqlState();
        }

        public Builder(BackupInstancePostgresqlState defaults) {
            $ = new BackupInstancePostgresqlState(Objects.requireNonNull(defaults));
        }

        /**
         * @param backupPolicyId The ID of the Backup Policy.
         * 
         * @return builder
         * 
         */
        public Builder backupPolicyId(@Nullable Output<String> backupPolicyId) {
            $.backupPolicyId = backupPolicyId;
            return this;
        }

        /**
         * @param backupPolicyId The ID of the Backup Policy.
         * 
         * @return builder
         * 
         */
        public Builder backupPolicyId(String backupPolicyId) {
            return backupPolicyId(Output.of(backupPolicyId));
        }

        /**
         * @param databaseCredentialKeyVaultSecretId The ID or versionless ID of the key vault secret which stores the connection string of the database.
         * 
         * @return builder
         * 
         */
        public Builder databaseCredentialKeyVaultSecretId(@Nullable Output<String> databaseCredentialKeyVaultSecretId) {
            $.databaseCredentialKeyVaultSecretId = databaseCredentialKeyVaultSecretId;
            return this;
        }

        /**
         * @param databaseCredentialKeyVaultSecretId The ID or versionless ID of the key vault secret which stores the connection string of the database.
         * 
         * @return builder
         * 
         */
        public Builder databaseCredentialKeyVaultSecretId(String databaseCredentialKeyVaultSecretId) {
            return databaseCredentialKeyVaultSecretId(Output.of(databaseCredentialKeyVaultSecretId));
        }

        /**
         * @param databaseId The ID of the source database. Changing this forces a new Backup Instance PostgreSQL to be created.
         * 
         * @return builder
         * 
         */
        public Builder databaseId(@Nullable Output<String> databaseId) {
            $.databaseId = databaseId;
            return this;
        }

        /**
         * @param databaseId The ID of the source database. Changing this forces a new Backup Instance PostgreSQL to be created.
         * 
         * @return builder
         * 
         */
        public Builder databaseId(String databaseId) {
            return databaseId(Output.of(databaseId));
        }

        /**
         * @param location The location of the source database. Changing this forces a new Backup Instance PostgreSQL to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location of the source database. Changing this forces a new Backup Instance PostgreSQL to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The name which should be used for this Backup Instance PostgreSQL. Changing this forces a new Backup Instance PostgreSQL to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this Backup Instance PostgreSQL. Changing this forces a new Backup Instance PostgreSQL to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param vaultId The ID of the Backup Vault within which the PostgreSQL Backup Instance should exist. Changing this forces a new Backup Instance PostgreSQL to be created.
         * 
         * @return builder
         * 
         */
        public Builder vaultId(@Nullable Output<String> vaultId) {
            $.vaultId = vaultId;
            return this;
        }

        /**
         * @param vaultId The ID of the Backup Vault within which the PostgreSQL Backup Instance should exist. Changing this forces a new Backup Instance PostgreSQL to be created.
         * 
         * @return builder
         * 
         */
        public Builder vaultId(String vaultId) {
            return vaultId(Output.of(vaultId));
        }

        public BackupInstancePostgresqlState build() {
            return $;
        }
    }

}
