// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.blueprint;

import com.pulumi.azure.blueprint.inputs.AssignmentIdentityArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AssignmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final AssignmentArgs Empty = new AssignmentArgs();

    /**
     * An `identity` block as defined below.
     * 
     */
    @Import(name="identity", required=true)
    private Output<AssignmentIdentityArgs> identity;

    /**
     * @return An `identity` block as defined below.
     * 
     */
    public Output<AssignmentIdentityArgs> identity() {
        return this.identity;
    }

    /**
     * The Azure location of the Assignment. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The Azure location of the Assignment. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * a list of up to 200 actions that are permitted to bypass the locks applied by the Blueprint.
     * 
     */
    @Import(name="lockExcludeActions")
    private @Nullable Output<List<String>> lockExcludeActions;

    /**
     * @return a list of up to 200 actions that are permitted to bypass the locks applied by the Blueprint.
     * 
     */
    public Optional<Output<List<String>>> lockExcludeActions() {
        return Optional.ofNullable(this.lockExcludeActions);
    }

    /**
     * a list of up to 5 Principal IDs that are permitted to bypass the locks applied by the Blueprint.
     * 
     */
    @Import(name="lockExcludePrincipals")
    private @Nullable Output<List<String>> lockExcludePrincipals;

    /**
     * @return a list of up to 5 Principal IDs that are permitted to bypass the locks applied by the Blueprint.
     * 
     */
    public Optional<Output<List<String>>> lockExcludePrincipals() {
        return Optional.ofNullable(this.lockExcludePrincipals);
    }

    /**
     * The locking mode of the Blueprint Assignment. One of `None` (Default), `AllResourcesReadOnly`, or `AllResourcesDoNotDelete`. Defaults to `None`.
     * 
     */
    @Import(name="lockMode")
    private @Nullable Output<String> lockMode;

    /**
     * @return The locking mode of the Blueprint Assignment. One of `None` (Default), `AllResourcesReadOnly`, or `AllResourcesDoNotDelete`. Defaults to `None`.
     * 
     */
    public Optional<Output<String>> lockMode() {
        return Optional.ofNullable(this.lockMode);
    }

    /**
     * The name of the Blueprint Assignment. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the Blueprint Assignment. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * a JSON string to supply Blueprint Assignment parameter values.
     * 
     * &gt; **NOTE:** Improperly formatted JSON, or missing values required by a Blueprint will cause the assignment to fail.
     * 
     */
    @Import(name="parameterValues")
    private @Nullable Output<String> parameterValues;

    /**
     * @return a JSON string to supply Blueprint Assignment parameter values.
     * 
     * &gt; **NOTE:** Improperly formatted JSON, or missing values required by a Blueprint will cause the assignment to fail.
     * 
     */
    public Optional<Output<String>> parameterValues() {
        return Optional.ofNullable(this.parameterValues);
    }

    /**
     * a JSON string to supply the Blueprint Resource Group information.
     * 
     * &gt; **NOTE:** Improperly formatted JSON, or missing values required by a Blueprint will cause the assignment to fail.
     * 
     */
    @Import(name="resourceGroups")
    private @Nullable Output<String> resourceGroups;

    /**
     * @return a JSON string to supply the Blueprint Resource Group information.
     * 
     * &gt; **NOTE:** Improperly formatted JSON, or missing values required by a Blueprint will cause the assignment to fail.
     * 
     */
    public Optional<Output<String>> resourceGroups() {
        return Optional.ofNullable(this.resourceGroups);
    }

    /**
     * The Subscription ID the Blueprint Published Version is to be applied to. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="targetSubscriptionId", required=true)
    private Output<String> targetSubscriptionId;

    /**
     * @return The Subscription ID the Blueprint Published Version is to be applied to. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> targetSubscriptionId() {
        return this.targetSubscriptionId;
    }

    /**
     * The ID of the Published Version of the blueprint to be assigned.
     * 
     */
    @Import(name="versionId", required=true)
    private Output<String> versionId;

    /**
     * @return The ID of the Published Version of the blueprint to be assigned.
     * 
     */
    public Output<String> versionId() {
        return this.versionId;
    }

    private AssignmentArgs() {}

    private AssignmentArgs(AssignmentArgs $) {
        this.identity = $.identity;
        this.location = $.location;
        this.lockExcludeActions = $.lockExcludeActions;
        this.lockExcludePrincipals = $.lockExcludePrincipals;
        this.lockMode = $.lockMode;
        this.name = $.name;
        this.parameterValues = $.parameterValues;
        this.resourceGroups = $.resourceGroups;
        this.targetSubscriptionId = $.targetSubscriptionId;
        this.versionId = $.versionId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AssignmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AssignmentArgs $;

        public Builder() {
            $ = new AssignmentArgs();
        }

        public Builder(AssignmentArgs defaults) {
            $ = new AssignmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param identity An `identity` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder identity(Output<AssignmentIdentityArgs> identity) {
            $.identity = identity;
            return this;
        }

        /**
         * @param identity An `identity` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder identity(AssignmentIdentityArgs identity) {
            return identity(Output.of(identity));
        }

        /**
         * @param location The Azure location of the Assignment. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The Azure location of the Assignment. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param lockExcludeActions a list of up to 200 actions that are permitted to bypass the locks applied by the Blueprint.
         * 
         * @return builder
         * 
         */
        public Builder lockExcludeActions(@Nullable Output<List<String>> lockExcludeActions) {
            $.lockExcludeActions = lockExcludeActions;
            return this;
        }

        /**
         * @param lockExcludeActions a list of up to 200 actions that are permitted to bypass the locks applied by the Blueprint.
         * 
         * @return builder
         * 
         */
        public Builder lockExcludeActions(List<String> lockExcludeActions) {
            return lockExcludeActions(Output.of(lockExcludeActions));
        }

        /**
         * @param lockExcludeActions a list of up to 200 actions that are permitted to bypass the locks applied by the Blueprint.
         * 
         * @return builder
         * 
         */
        public Builder lockExcludeActions(String... lockExcludeActions) {
            return lockExcludeActions(List.of(lockExcludeActions));
        }

        /**
         * @param lockExcludePrincipals a list of up to 5 Principal IDs that are permitted to bypass the locks applied by the Blueprint.
         * 
         * @return builder
         * 
         */
        public Builder lockExcludePrincipals(@Nullable Output<List<String>> lockExcludePrincipals) {
            $.lockExcludePrincipals = lockExcludePrincipals;
            return this;
        }

        /**
         * @param lockExcludePrincipals a list of up to 5 Principal IDs that are permitted to bypass the locks applied by the Blueprint.
         * 
         * @return builder
         * 
         */
        public Builder lockExcludePrincipals(List<String> lockExcludePrincipals) {
            return lockExcludePrincipals(Output.of(lockExcludePrincipals));
        }

        /**
         * @param lockExcludePrincipals a list of up to 5 Principal IDs that are permitted to bypass the locks applied by the Blueprint.
         * 
         * @return builder
         * 
         */
        public Builder lockExcludePrincipals(String... lockExcludePrincipals) {
            return lockExcludePrincipals(List.of(lockExcludePrincipals));
        }

        /**
         * @param lockMode The locking mode of the Blueprint Assignment. One of `None` (Default), `AllResourcesReadOnly`, or `AllResourcesDoNotDelete`. Defaults to `None`.
         * 
         * @return builder
         * 
         */
        public Builder lockMode(@Nullable Output<String> lockMode) {
            $.lockMode = lockMode;
            return this;
        }

        /**
         * @param lockMode The locking mode of the Blueprint Assignment. One of `None` (Default), `AllResourcesReadOnly`, or `AllResourcesDoNotDelete`. Defaults to `None`.
         * 
         * @return builder
         * 
         */
        public Builder lockMode(String lockMode) {
            return lockMode(Output.of(lockMode));
        }

        /**
         * @param name The name of the Blueprint Assignment. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Blueprint Assignment. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param parameterValues a JSON string to supply Blueprint Assignment parameter values.
         * 
         * &gt; **NOTE:** Improperly formatted JSON, or missing values required by a Blueprint will cause the assignment to fail.
         * 
         * @return builder
         * 
         */
        public Builder parameterValues(@Nullable Output<String> parameterValues) {
            $.parameterValues = parameterValues;
            return this;
        }

        /**
         * @param parameterValues a JSON string to supply Blueprint Assignment parameter values.
         * 
         * &gt; **NOTE:** Improperly formatted JSON, or missing values required by a Blueprint will cause the assignment to fail.
         * 
         * @return builder
         * 
         */
        public Builder parameterValues(String parameterValues) {
            return parameterValues(Output.of(parameterValues));
        }

        /**
         * @param resourceGroups a JSON string to supply the Blueprint Resource Group information.
         * 
         * &gt; **NOTE:** Improperly formatted JSON, or missing values required by a Blueprint will cause the assignment to fail.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroups(@Nullable Output<String> resourceGroups) {
            $.resourceGroups = resourceGroups;
            return this;
        }

        /**
         * @param resourceGroups a JSON string to supply the Blueprint Resource Group information.
         * 
         * &gt; **NOTE:** Improperly formatted JSON, or missing values required by a Blueprint will cause the assignment to fail.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroups(String resourceGroups) {
            return resourceGroups(Output.of(resourceGroups));
        }

        /**
         * @param targetSubscriptionId The Subscription ID the Blueprint Published Version is to be applied to. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder targetSubscriptionId(Output<String> targetSubscriptionId) {
            $.targetSubscriptionId = targetSubscriptionId;
            return this;
        }

        /**
         * @param targetSubscriptionId The Subscription ID the Blueprint Published Version is to be applied to. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder targetSubscriptionId(String targetSubscriptionId) {
            return targetSubscriptionId(Output.of(targetSubscriptionId));
        }

        /**
         * @param versionId The ID of the Published Version of the blueprint to be assigned.
         * 
         * @return builder
         * 
         */
        public Builder versionId(Output<String> versionId) {
            $.versionId = versionId;
            return this;
        }

        /**
         * @param versionId The ID of the Published Version of the blueprint to be assigned.
         * 
         * @return builder
         * 
         */
        public Builder versionId(String versionId) {
            return versionId(Output.of(versionId));
        }

        public AssignmentArgs build() {
            if ($.identity == null) {
                throw new MissingRequiredPropertyException("AssignmentArgs", "identity");
            }
            if ($.targetSubscriptionId == null) {
                throw new MissingRequiredPropertyException("AssignmentArgs", "targetSubscriptionId");
            }
            if ($.versionId == null) {
                throw new MissingRequiredPropertyException("AssignmentArgs", "versionId");
            }
            return $;
        }
    }

}
