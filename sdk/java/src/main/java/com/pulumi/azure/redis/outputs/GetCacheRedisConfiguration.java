// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.redis.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetCacheRedisConfiguration {
    private Boolean aofBackupEnabled;
    private String aofStorageConnectionString0;
    private String aofStorageConnectionString1;
    /**
     * @return Specifies if authentication is enabled
     * 
     */
    private Boolean enableAuthentication;
    private Integer maxclients;
    /**
     * @return Value in megabytes reserved to accommodate for memory fragmentation.
     * 
     */
    private Integer maxfragmentationmemoryReserved;
    /**
     * @return The max-memory delta for this Redis instance.
     * 
     */
    private Integer maxmemoryDelta;
    /**
     * @return How Redis will select what to remove when `maxmemory` is reached.
     * 
     */
    private String maxmemoryPolicy;
    /**
     * @return The value in megabytes reserved for non-cache usage e.g. failover
     * 
     */
    private Integer maxmemoryReserved;
    private String notifyKeyspaceEvents;
    /**
     * @return Is Backup Enabled? Only supported on Premium SKUs.
     * 
     */
    private Boolean rdbBackupEnabled;
    /**
     * @return The Backup Frequency in Minutes. Only supported on Premium SKUs.
     * 
     */
    private Integer rdbBackupFrequency;
    /**
     * @return The maximum number of snapshots that can be created as a backup.
     * 
     */
    private Integer rdbBackupMaxSnapshotCount;
    /**
     * @return The Connection String to the Storage Account. Only supported for Premium SKUs.
     * 
     */
    private String rdbStorageConnectionString;
    /**
     * @return The ID of the Subscription containing the Storage Account.
     * 
     */
    private String storageAccountSubscriptionId;

    private GetCacheRedisConfiguration() {}
    public Boolean aofBackupEnabled() {
        return this.aofBackupEnabled;
    }
    public String aofStorageConnectionString0() {
        return this.aofStorageConnectionString0;
    }
    public String aofStorageConnectionString1() {
        return this.aofStorageConnectionString1;
    }
    /**
     * @return Specifies if authentication is enabled
     * 
     */
    public Boolean enableAuthentication() {
        return this.enableAuthentication;
    }
    public Integer maxclients() {
        return this.maxclients;
    }
    /**
     * @return Value in megabytes reserved to accommodate for memory fragmentation.
     * 
     */
    public Integer maxfragmentationmemoryReserved() {
        return this.maxfragmentationmemoryReserved;
    }
    /**
     * @return The max-memory delta for this Redis instance.
     * 
     */
    public Integer maxmemoryDelta() {
        return this.maxmemoryDelta;
    }
    /**
     * @return How Redis will select what to remove when `maxmemory` is reached.
     * 
     */
    public String maxmemoryPolicy() {
        return this.maxmemoryPolicy;
    }
    /**
     * @return The value in megabytes reserved for non-cache usage e.g. failover
     * 
     */
    public Integer maxmemoryReserved() {
        return this.maxmemoryReserved;
    }
    public String notifyKeyspaceEvents() {
        return this.notifyKeyspaceEvents;
    }
    /**
     * @return Is Backup Enabled? Only supported on Premium SKUs.
     * 
     */
    public Boolean rdbBackupEnabled() {
        return this.rdbBackupEnabled;
    }
    /**
     * @return The Backup Frequency in Minutes. Only supported on Premium SKUs.
     * 
     */
    public Integer rdbBackupFrequency() {
        return this.rdbBackupFrequency;
    }
    /**
     * @return The maximum number of snapshots that can be created as a backup.
     * 
     */
    public Integer rdbBackupMaxSnapshotCount() {
        return this.rdbBackupMaxSnapshotCount;
    }
    /**
     * @return The Connection String to the Storage Account. Only supported for Premium SKUs.
     * 
     */
    public String rdbStorageConnectionString() {
        return this.rdbStorageConnectionString;
    }
    /**
     * @return The ID of the Subscription containing the Storage Account.
     * 
     */
    public String storageAccountSubscriptionId() {
        return this.storageAccountSubscriptionId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCacheRedisConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean aofBackupEnabled;
        private String aofStorageConnectionString0;
        private String aofStorageConnectionString1;
        private Boolean enableAuthentication;
        private Integer maxclients;
        private Integer maxfragmentationmemoryReserved;
        private Integer maxmemoryDelta;
        private String maxmemoryPolicy;
        private Integer maxmemoryReserved;
        private String notifyKeyspaceEvents;
        private Boolean rdbBackupEnabled;
        private Integer rdbBackupFrequency;
        private Integer rdbBackupMaxSnapshotCount;
        private String rdbStorageConnectionString;
        private String storageAccountSubscriptionId;
        public Builder() {}
        public Builder(GetCacheRedisConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aofBackupEnabled = defaults.aofBackupEnabled;
    	      this.aofStorageConnectionString0 = defaults.aofStorageConnectionString0;
    	      this.aofStorageConnectionString1 = defaults.aofStorageConnectionString1;
    	      this.enableAuthentication = defaults.enableAuthentication;
    	      this.maxclients = defaults.maxclients;
    	      this.maxfragmentationmemoryReserved = defaults.maxfragmentationmemoryReserved;
    	      this.maxmemoryDelta = defaults.maxmemoryDelta;
    	      this.maxmemoryPolicy = defaults.maxmemoryPolicy;
    	      this.maxmemoryReserved = defaults.maxmemoryReserved;
    	      this.notifyKeyspaceEvents = defaults.notifyKeyspaceEvents;
    	      this.rdbBackupEnabled = defaults.rdbBackupEnabled;
    	      this.rdbBackupFrequency = defaults.rdbBackupFrequency;
    	      this.rdbBackupMaxSnapshotCount = defaults.rdbBackupMaxSnapshotCount;
    	      this.rdbStorageConnectionString = defaults.rdbStorageConnectionString;
    	      this.storageAccountSubscriptionId = defaults.storageAccountSubscriptionId;
        }

        @CustomType.Setter
        public Builder aofBackupEnabled(Boolean aofBackupEnabled) {
            if (aofBackupEnabled == null) {
              throw new MissingRequiredPropertyException("GetCacheRedisConfiguration", "aofBackupEnabled");
            }
            this.aofBackupEnabled = aofBackupEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder aofStorageConnectionString0(String aofStorageConnectionString0) {
            if (aofStorageConnectionString0 == null) {
              throw new MissingRequiredPropertyException("GetCacheRedisConfiguration", "aofStorageConnectionString0");
            }
            this.aofStorageConnectionString0 = aofStorageConnectionString0;
            return this;
        }
        @CustomType.Setter
        public Builder aofStorageConnectionString1(String aofStorageConnectionString1) {
            if (aofStorageConnectionString1 == null) {
              throw new MissingRequiredPropertyException("GetCacheRedisConfiguration", "aofStorageConnectionString1");
            }
            this.aofStorageConnectionString1 = aofStorageConnectionString1;
            return this;
        }
        @CustomType.Setter
        public Builder enableAuthentication(Boolean enableAuthentication) {
            if (enableAuthentication == null) {
              throw new MissingRequiredPropertyException("GetCacheRedisConfiguration", "enableAuthentication");
            }
            this.enableAuthentication = enableAuthentication;
            return this;
        }
        @CustomType.Setter
        public Builder maxclients(Integer maxclients) {
            if (maxclients == null) {
              throw new MissingRequiredPropertyException("GetCacheRedisConfiguration", "maxclients");
            }
            this.maxclients = maxclients;
            return this;
        }
        @CustomType.Setter
        public Builder maxfragmentationmemoryReserved(Integer maxfragmentationmemoryReserved) {
            if (maxfragmentationmemoryReserved == null) {
              throw new MissingRequiredPropertyException("GetCacheRedisConfiguration", "maxfragmentationmemoryReserved");
            }
            this.maxfragmentationmemoryReserved = maxfragmentationmemoryReserved;
            return this;
        }
        @CustomType.Setter
        public Builder maxmemoryDelta(Integer maxmemoryDelta) {
            if (maxmemoryDelta == null) {
              throw new MissingRequiredPropertyException("GetCacheRedisConfiguration", "maxmemoryDelta");
            }
            this.maxmemoryDelta = maxmemoryDelta;
            return this;
        }
        @CustomType.Setter
        public Builder maxmemoryPolicy(String maxmemoryPolicy) {
            if (maxmemoryPolicy == null) {
              throw new MissingRequiredPropertyException("GetCacheRedisConfiguration", "maxmemoryPolicy");
            }
            this.maxmemoryPolicy = maxmemoryPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder maxmemoryReserved(Integer maxmemoryReserved) {
            if (maxmemoryReserved == null) {
              throw new MissingRequiredPropertyException("GetCacheRedisConfiguration", "maxmemoryReserved");
            }
            this.maxmemoryReserved = maxmemoryReserved;
            return this;
        }
        @CustomType.Setter
        public Builder notifyKeyspaceEvents(String notifyKeyspaceEvents) {
            if (notifyKeyspaceEvents == null) {
              throw new MissingRequiredPropertyException("GetCacheRedisConfiguration", "notifyKeyspaceEvents");
            }
            this.notifyKeyspaceEvents = notifyKeyspaceEvents;
            return this;
        }
        @CustomType.Setter
        public Builder rdbBackupEnabled(Boolean rdbBackupEnabled) {
            if (rdbBackupEnabled == null) {
              throw new MissingRequiredPropertyException("GetCacheRedisConfiguration", "rdbBackupEnabled");
            }
            this.rdbBackupEnabled = rdbBackupEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder rdbBackupFrequency(Integer rdbBackupFrequency) {
            if (rdbBackupFrequency == null) {
              throw new MissingRequiredPropertyException("GetCacheRedisConfiguration", "rdbBackupFrequency");
            }
            this.rdbBackupFrequency = rdbBackupFrequency;
            return this;
        }
        @CustomType.Setter
        public Builder rdbBackupMaxSnapshotCount(Integer rdbBackupMaxSnapshotCount) {
            if (rdbBackupMaxSnapshotCount == null) {
              throw new MissingRequiredPropertyException("GetCacheRedisConfiguration", "rdbBackupMaxSnapshotCount");
            }
            this.rdbBackupMaxSnapshotCount = rdbBackupMaxSnapshotCount;
            return this;
        }
        @CustomType.Setter
        public Builder rdbStorageConnectionString(String rdbStorageConnectionString) {
            if (rdbStorageConnectionString == null) {
              throw new MissingRequiredPropertyException("GetCacheRedisConfiguration", "rdbStorageConnectionString");
            }
            this.rdbStorageConnectionString = rdbStorageConnectionString;
            return this;
        }
        @CustomType.Setter
        public Builder storageAccountSubscriptionId(String storageAccountSubscriptionId) {
            if (storageAccountSubscriptionId == null) {
              throw new MissingRequiredPropertyException("GetCacheRedisConfiguration", "storageAccountSubscriptionId");
            }
            this.storageAccountSubscriptionId = storageAccountSubscriptionId;
            return this;
        }
        public GetCacheRedisConfiguration build() {
            final var _resultValue = new GetCacheRedisConfiguration();
            _resultValue.aofBackupEnabled = aofBackupEnabled;
            _resultValue.aofStorageConnectionString0 = aofStorageConnectionString0;
            _resultValue.aofStorageConnectionString1 = aofStorageConnectionString1;
            _resultValue.enableAuthentication = enableAuthentication;
            _resultValue.maxclients = maxclients;
            _resultValue.maxfragmentationmemoryReserved = maxfragmentationmemoryReserved;
            _resultValue.maxmemoryDelta = maxmemoryDelta;
            _resultValue.maxmemoryPolicy = maxmemoryPolicy;
            _resultValue.maxmemoryReserved = maxmemoryReserved;
            _resultValue.notifyKeyspaceEvents = notifyKeyspaceEvents;
            _resultValue.rdbBackupEnabled = rdbBackupEnabled;
            _resultValue.rdbBackupFrequency = rdbBackupFrequency;
            _resultValue.rdbBackupMaxSnapshotCount = rdbBackupMaxSnapshotCount;
            _resultValue.rdbStorageConnectionString = rdbStorageConnectionString;
            _resultValue.storageAccountSubscriptionId = storageAccountSubscriptionId;
            return _resultValue;
        }
    }
}
