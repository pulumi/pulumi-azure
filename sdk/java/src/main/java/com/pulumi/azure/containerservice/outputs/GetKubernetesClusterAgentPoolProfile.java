// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerservice.outputs;

import com.pulumi.azure.containerservice.outputs.GetKubernetesClusterAgentPoolProfileUpgradeSetting;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetKubernetesClusterAgentPoolProfile {
    /**
     * @return The number of Agents (VMs) in the Pool.
     * 
     */
    private Integer count;
    /**
     * @return If the auto-scaler is enabled.
     * 
     */
    private Boolean enableAutoScaling;
    /**
     * @return If the Public IPs for the nodes in this Agent Pool are enabled.
     * 
     */
    private Boolean enableNodePublicIp;
    /**
     * @return Maximum number of nodes for auto-scaling
     * 
     */
    private Integer maxCount;
    /**
     * @return The maximum number of pods that can run on each agent.
     * 
     */
    private Integer maxPods;
    /**
     * @return Minimum number of nodes for auto-scaling
     * 
     */
    private Integer minCount;
    /**
     * @return The name of the managed Kubernetes Cluster.
     * 
     */
    private String name;
    private Map<String,String> nodeLabels;
    /**
     * @return Resource ID for the Public IP Addresses Prefix for the nodes in this Agent Pool.
     * 
     */
    private String nodePublicIpPrefixId;
    private List<String> nodeTaints;
    /**
     * @return Kubernetes version used for the Agents.
     * 
     */
    private String orchestratorVersion;
    /**
     * @return The size of the Agent VM&#39;s Operating System Disk in GB.
     * 
     */
    private Integer osDiskSizeGb;
    /**
     * @return The Operating System used for the Agents.
     * 
     */
    private String osType;
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return The type of Managed Service Identity that is configured on this Kubernetes Cluster.
     * 
     */
    private String type;
    /**
     * @return A `upgrade_settings` block as documented below.
     * 
     */
    private List<GetKubernetesClusterAgentPoolProfileUpgradeSetting> upgradeSettings;
    /**
     * @return The size of each VM in the Agent Pool (e.g. `Standard_F1`).
     * 
     */
    private String vmSize;
    /**
     * @return The ID of the Subnet where the Agents in the Pool are provisioned.
     * 
     */
    private String vnetSubnetId;
    /**
     * @return A list of Availability Zones in which this Kubernetes Cluster is located.
     * 
     */
    private List<String> zones;

    private GetKubernetesClusterAgentPoolProfile() {}
    /**
     * @return The number of Agents (VMs) in the Pool.
     * 
     */
    public Integer count() {
        return this.count;
    }
    /**
     * @return If the auto-scaler is enabled.
     * 
     */
    public Boolean enableAutoScaling() {
        return this.enableAutoScaling;
    }
    /**
     * @return If the Public IPs for the nodes in this Agent Pool are enabled.
     * 
     */
    public Boolean enableNodePublicIp() {
        return this.enableNodePublicIp;
    }
    /**
     * @return Maximum number of nodes for auto-scaling
     * 
     */
    public Integer maxCount() {
        return this.maxCount;
    }
    /**
     * @return The maximum number of pods that can run on each agent.
     * 
     */
    public Integer maxPods() {
        return this.maxPods;
    }
    /**
     * @return Minimum number of nodes for auto-scaling
     * 
     */
    public Integer minCount() {
        return this.minCount;
    }
    /**
     * @return The name of the managed Kubernetes Cluster.
     * 
     */
    public String name() {
        return this.name;
    }
    public Map<String,String> nodeLabels() {
        return this.nodeLabels;
    }
    /**
     * @return Resource ID for the Public IP Addresses Prefix for the nodes in this Agent Pool.
     * 
     */
    public String nodePublicIpPrefixId() {
        return this.nodePublicIpPrefixId;
    }
    public List<String> nodeTaints() {
        return this.nodeTaints;
    }
    /**
     * @return Kubernetes version used for the Agents.
     * 
     */
    public String orchestratorVersion() {
        return this.orchestratorVersion;
    }
    /**
     * @return The size of the Agent VM&#39;s Operating System Disk in GB.
     * 
     */
    public Integer osDiskSizeGb() {
        return this.osDiskSizeGb;
    }
    /**
     * @return The Operating System used for the Agents.
     * 
     */
    public String osType() {
        return this.osType;
    }
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return The type of Managed Service Identity that is configured on this Kubernetes Cluster.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return A `upgrade_settings` block as documented below.
     * 
     */
    public List<GetKubernetesClusterAgentPoolProfileUpgradeSetting> upgradeSettings() {
        return this.upgradeSettings;
    }
    /**
     * @return The size of each VM in the Agent Pool (e.g. `Standard_F1`).
     * 
     */
    public String vmSize() {
        return this.vmSize;
    }
    /**
     * @return The ID of the Subnet where the Agents in the Pool are provisioned.
     * 
     */
    public String vnetSubnetId() {
        return this.vnetSubnetId;
    }
    /**
     * @return A list of Availability Zones in which this Kubernetes Cluster is located.
     * 
     */
    public List<String> zones() {
        return this.zones;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetKubernetesClusterAgentPoolProfile defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer count;
        private Boolean enableAutoScaling;
        private Boolean enableNodePublicIp;
        private Integer maxCount;
        private Integer maxPods;
        private Integer minCount;
        private String name;
        private Map<String,String> nodeLabels;
        private String nodePublicIpPrefixId;
        private List<String> nodeTaints;
        private String orchestratorVersion;
        private Integer osDiskSizeGb;
        private String osType;
        private Map<String,String> tags;
        private String type;
        private List<GetKubernetesClusterAgentPoolProfileUpgradeSetting> upgradeSettings;
        private String vmSize;
        private String vnetSubnetId;
        private List<String> zones;
        public Builder() {}
        public Builder(GetKubernetesClusterAgentPoolProfile defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.count = defaults.count;
    	      this.enableAutoScaling = defaults.enableAutoScaling;
    	      this.enableNodePublicIp = defaults.enableNodePublicIp;
    	      this.maxCount = defaults.maxCount;
    	      this.maxPods = defaults.maxPods;
    	      this.minCount = defaults.minCount;
    	      this.name = defaults.name;
    	      this.nodeLabels = defaults.nodeLabels;
    	      this.nodePublicIpPrefixId = defaults.nodePublicIpPrefixId;
    	      this.nodeTaints = defaults.nodeTaints;
    	      this.orchestratorVersion = defaults.orchestratorVersion;
    	      this.osDiskSizeGb = defaults.osDiskSizeGb;
    	      this.osType = defaults.osType;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.upgradeSettings = defaults.upgradeSettings;
    	      this.vmSize = defaults.vmSize;
    	      this.vnetSubnetId = defaults.vnetSubnetId;
    	      this.zones = defaults.zones;
        }

        @CustomType.Setter
        public Builder count(Integer count) {
            if (count == null) {
              throw new MissingRequiredPropertyException("GetKubernetesClusterAgentPoolProfile", "count");
            }
            this.count = count;
            return this;
        }
        @CustomType.Setter
        public Builder enableAutoScaling(Boolean enableAutoScaling) {
            if (enableAutoScaling == null) {
              throw new MissingRequiredPropertyException("GetKubernetesClusterAgentPoolProfile", "enableAutoScaling");
            }
            this.enableAutoScaling = enableAutoScaling;
            return this;
        }
        @CustomType.Setter
        public Builder enableNodePublicIp(Boolean enableNodePublicIp) {
            if (enableNodePublicIp == null) {
              throw new MissingRequiredPropertyException("GetKubernetesClusterAgentPoolProfile", "enableNodePublicIp");
            }
            this.enableNodePublicIp = enableNodePublicIp;
            return this;
        }
        @CustomType.Setter
        public Builder maxCount(Integer maxCount) {
            if (maxCount == null) {
              throw new MissingRequiredPropertyException("GetKubernetesClusterAgentPoolProfile", "maxCount");
            }
            this.maxCount = maxCount;
            return this;
        }
        @CustomType.Setter
        public Builder maxPods(Integer maxPods) {
            if (maxPods == null) {
              throw new MissingRequiredPropertyException("GetKubernetesClusterAgentPoolProfile", "maxPods");
            }
            this.maxPods = maxPods;
            return this;
        }
        @CustomType.Setter
        public Builder minCount(Integer minCount) {
            if (minCount == null) {
              throw new MissingRequiredPropertyException("GetKubernetesClusterAgentPoolProfile", "minCount");
            }
            this.minCount = minCount;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetKubernetesClusterAgentPoolProfile", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nodeLabels(Map<String,String> nodeLabels) {
            if (nodeLabels == null) {
              throw new MissingRequiredPropertyException("GetKubernetesClusterAgentPoolProfile", "nodeLabels");
            }
            this.nodeLabels = nodeLabels;
            return this;
        }
        @CustomType.Setter
        public Builder nodePublicIpPrefixId(String nodePublicIpPrefixId) {
            if (nodePublicIpPrefixId == null) {
              throw new MissingRequiredPropertyException("GetKubernetesClusterAgentPoolProfile", "nodePublicIpPrefixId");
            }
            this.nodePublicIpPrefixId = nodePublicIpPrefixId;
            return this;
        }
        @CustomType.Setter
        public Builder nodeTaints(List<String> nodeTaints) {
            if (nodeTaints == null) {
              throw new MissingRequiredPropertyException("GetKubernetesClusterAgentPoolProfile", "nodeTaints");
            }
            this.nodeTaints = nodeTaints;
            return this;
        }
        public Builder nodeTaints(String... nodeTaints) {
            return nodeTaints(List.of(nodeTaints));
        }
        @CustomType.Setter
        public Builder orchestratorVersion(String orchestratorVersion) {
            if (orchestratorVersion == null) {
              throw new MissingRequiredPropertyException("GetKubernetesClusterAgentPoolProfile", "orchestratorVersion");
            }
            this.orchestratorVersion = orchestratorVersion;
            return this;
        }
        @CustomType.Setter
        public Builder osDiskSizeGb(Integer osDiskSizeGb) {
            if (osDiskSizeGb == null) {
              throw new MissingRequiredPropertyException("GetKubernetesClusterAgentPoolProfile", "osDiskSizeGb");
            }
            this.osDiskSizeGb = osDiskSizeGb;
            return this;
        }
        @CustomType.Setter
        public Builder osType(String osType) {
            if (osType == null) {
              throw new MissingRequiredPropertyException("GetKubernetesClusterAgentPoolProfile", "osType");
            }
            this.osType = osType;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetKubernetesClusterAgentPoolProfile", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetKubernetesClusterAgentPoolProfile", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder upgradeSettings(List<GetKubernetesClusterAgentPoolProfileUpgradeSetting> upgradeSettings) {
            if (upgradeSettings == null) {
              throw new MissingRequiredPropertyException("GetKubernetesClusterAgentPoolProfile", "upgradeSettings");
            }
            this.upgradeSettings = upgradeSettings;
            return this;
        }
        public Builder upgradeSettings(GetKubernetesClusterAgentPoolProfileUpgradeSetting... upgradeSettings) {
            return upgradeSettings(List.of(upgradeSettings));
        }
        @CustomType.Setter
        public Builder vmSize(String vmSize) {
            if (vmSize == null) {
              throw new MissingRequiredPropertyException("GetKubernetesClusterAgentPoolProfile", "vmSize");
            }
            this.vmSize = vmSize;
            return this;
        }
        @CustomType.Setter
        public Builder vnetSubnetId(String vnetSubnetId) {
            if (vnetSubnetId == null) {
              throw new MissingRequiredPropertyException("GetKubernetesClusterAgentPoolProfile", "vnetSubnetId");
            }
            this.vnetSubnetId = vnetSubnetId;
            return this;
        }
        @CustomType.Setter
        public Builder zones(List<String> zones) {
            if (zones == null) {
              throw new MissingRequiredPropertyException("GetKubernetesClusterAgentPoolProfile", "zones");
            }
            this.zones = zones;
            return this;
        }
        public Builder zones(String... zones) {
            return zones(List.of(zones));
        }
        public GetKubernetesClusterAgentPoolProfile build() {
            final var _resultValue = new GetKubernetesClusterAgentPoolProfile();
            _resultValue.count = count;
            _resultValue.enableAutoScaling = enableAutoScaling;
            _resultValue.enableNodePublicIp = enableNodePublicIp;
            _resultValue.maxCount = maxCount;
            _resultValue.maxPods = maxPods;
            _resultValue.minCount = minCount;
            _resultValue.name = name;
            _resultValue.nodeLabels = nodeLabels;
            _resultValue.nodePublicIpPrefixId = nodePublicIpPrefixId;
            _resultValue.nodeTaints = nodeTaints;
            _resultValue.orchestratorVersion = orchestratorVersion;
            _resultValue.osDiskSizeGb = osDiskSizeGb;
            _resultValue.osType = osType;
            _resultValue.tags = tags;
            _resultValue.type = type;
            _resultValue.upgradeSettings = upgradeSettings;
            _resultValue.vmSize = vmSize;
            _resultValue.vnetSubnetId = vnetSubnetId;
            _resultValue.zones = zones;
            return _resultValue;
        }
    }
}
