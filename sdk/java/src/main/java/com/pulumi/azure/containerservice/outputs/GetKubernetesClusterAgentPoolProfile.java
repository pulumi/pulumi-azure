// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerservice.outputs;

import com.pulumi.azure.containerservice.outputs.GetKubernetesClusterAgentPoolProfileUpgradeSetting;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetKubernetesClusterAgentPoolProfile {
    /**
     * @return The number of Agents (VM&#39;s) in the Pool.
     * 
     */
    private final Integer count;
    /**
     * @return If the auto-scaler is enabled.
     * 
     */
    private final Boolean enableAutoScaling;
    /**
     * @return If the Public IPs for the nodes in this Agent Pool are enabled.
     * 
     */
    private final Boolean enableNodePublicIp;
    /**
     * @return Maximum number of nodes for auto-scaling
     * 
     */
    private final Integer maxCount;
    /**
     * @return The maximum number of pods that can run on each agent.
     * 
     */
    private final Integer maxPods;
    /**
     * @return Minimum number of nodes for auto-scaling
     * 
     */
    private final Integer minCount;
    /**
     * @return The name of the managed Kubernetes Cluster.
     * 
     */
    private final String name;
    private final Map<String,String> nodeLabels;
    /**
     * @return Resource ID for the Public IP Addresses Prefix for the nodes in this Agent Pool.
     * 
     */
    private final String nodePublicIpPrefixId;
    private final List<String> nodeTaints;
    /**
     * @return Kubernetes version used for the Agents.
     * 
     */
    private final String orchestratorVersion;
    /**
     * @return The size of the Agent VM&#39;s Operating System Disk in GB.
     * 
     */
    private final Integer osDiskSizeGb;
    /**
     * @return The Operating System used for the Agents.
     * 
     */
    private final String osType;
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    private final Map<String,String> tags;
    /**
     * @return The type of Managed Service Identity that is configured on this Kubernetes Cluster.
     * 
     */
    private final String type;
    /**
     * @return A `upgrade_settings` block as documented below.
     * 
     */
    private final List<GetKubernetesClusterAgentPoolProfileUpgradeSetting> upgradeSettings;
    /**
     * @return The size of each VM in the Agent Pool (e.g. `Standard_F1`).
     * 
     */
    private final String vmSize;
    /**
     * @return The ID of the Subnet where the Agents in the Pool are provisioned.
     * 
     */
    private final String vnetSubnetId;
    /**
     * @return A list of Availability Zones in which this Kubernetes Cluster is located.
     * 
     */
    private final List<String> zones;

    @CustomType.Constructor
    private GetKubernetesClusterAgentPoolProfile(
        @CustomType.Parameter("count") Integer count,
        @CustomType.Parameter("enableAutoScaling") Boolean enableAutoScaling,
        @CustomType.Parameter("enableNodePublicIp") Boolean enableNodePublicIp,
        @CustomType.Parameter("maxCount") Integer maxCount,
        @CustomType.Parameter("maxPods") Integer maxPods,
        @CustomType.Parameter("minCount") Integer minCount,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("nodeLabels") Map<String,String> nodeLabels,
        @CustomType.Parameter("nodePublicIpPrefixId") String nodePublicIpPrefixId,
        @CustomType.Parameter("nodeTaints") List<String> nodeTaints,
        @CustomType.Parameter("orchestratorVersion") String orchestratorVersion,
        @CustomType.Parameter("osDiskSizeGb") Integer osDiskSizeGb,
        @CustomType.Parameter("osType") String osType,
        @CustomType.Parameter("tags") Map<String,String> tags,
        @CustomType.Parameter("type") String type,
        @CustomType.Parameter("upgradeSettings") List<GetKubernetesClusterAgentPoolProfileUpgradeSetting> upgradeSettings,
        @CustomType.Parameter("vmSize") String vmSize,
        @CustomType.Parameter("vnetSubnetId") String vnetSubnetId,
        @CustomType.Parameter("zones") List<String> zones) {
        this.count = count;
        this.enableAutoScaling = enableAutoScaling;
        this.enableNodePublicIp = enableNodePublicIp;
        this.maxCount = maxCount;
        this.maxPods = maxPods;
        this.minCount = minCount;
        this.name = name;
        this.nodeLabels = nodeLabels;
        this.nodePublicIpPrefixId = nodePublicIpPrefixId;
        this.nodeTaints = nodeTaints;
        this.orchestratorVersion = orchestratorVersion;
        this.osDiskSizeGb = osDiskSizeGb;
        this.osType = osType;
        this.tags = tags;
        this.type = type;
        this.upgradeSettings = upgradeSettings;
        this.vmSize = vmSize;
        this.vnetSubnetId = vnetSubnetId;
        this.zones = zones;
    }

    /**
     * @return The number of Agents (VM&#39;s) in the Pool.
     * 
     */
    public Integer count() {
        return this.count;
    }
    /**
     * @return If the auto-scaler is enabled.
     * 
     */
    public Boolean enableAutoScaling() {
        return this.enableAutoScaling;
    }
    /**
     * @return If the Public IPs for the nodes in this Agent Pool are enabled.
     * 
     */
    public Boolean enableNodePublicIp() {
        return this.enableNodePublicIp;
    }
    /**
     * @return Maximum number of nodes for auto-scaling
     * 
     */
    public Integer maxCount() {
        return this.maxCount;
    }
    /**
     * @return The maximum number of pods that can run on each agent.
     * 
     */
    public Integer maxPods() {
        return this.maxPods;
    }
    /**
     * @return Minimum number of nodes for auto-scaling
     * 
     */
    public Integer minCount() {
        return this.minCount;
    }
    /**
     * @return The name of the managed Kubernetes Cluster.
     * 
     */
    public String name() {
        return this.name;
    }
    public Map<String,String> nodeLabels() {
        return this.nodeLabels;
    }
    /**
     * @return Resource ID for the Public IP Addresses Prefix for the nodes in this Agent Pool.
     * 
     */
    public String nodePublicIpPrefixId() {
        return this.nodePublicIpPrefixId;
    }
    public List<String> nodeTaints() {
        return this.nodeTaints;
    }
    /**
     * @return Kubernetes version used for the Agents.
     * 
     */
    public String orchestratorVersion() {
        return this.orchestratorVersion;
    }
    /**
     * @return The size of the Agent VM&#39;s Operating System Disk in GB.
     * 
     */
    public Integer osDiskSizeGb() {
        return this.osDiskSizeGb;
    }
    /**
     * @return The Operating System used for the Agents.
     * 
     */
    public String osType() {
        return this.osType;
    }
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return The type of Managed Service Identity that is configured on this Kubernetes Cluster.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return A `upgrade_settings` block as documented below.
     * 
     */
    public List<GetKubernetesClusterAgentPoolProfileUpgradeSetting> upgradeSettings() {
        return this.upgradeSettings;
    }
    /**
     * @return The size of each VM in the Agent Pool (e.g. `Standard_F1`).
     * 
     */
    public String vmSize() {
        return this.vmSize;
    }
    /**
     * @return The ID of the Subnet where the Agents in the Pool are provisioned.
     * 
     */
    public String vnetSubnetId() {
        return this.vnetSubnetId;
    }
    /**
     * @return A list of Availability Zones in which this Kubernetes Cluster is located.
     * 
     */
    public List<String> zones() {
        return this.zones;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetKubernetesClusterAgentPoolProfile defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer count;
        private Boolean enableAutoScaling;
        private Boolean enableNodePublicIp;
        private Integer maxCount;
        private Integer maxPods;
        private Integer minCount;
        private String name;
        private Map<String,String> nodeLabels;
        private String nodePublicIpPrefixId;
        private List<String> nodeTaints;
        private String orchestratorVersion;
        private Integer osDiskSizeGb;
        private String osType;
        private Map<String,String> tags;
        private String type;
        private List<GetKubernetesClusterAgentPoolProfileUpgradeSetting> upgradeSettings;
        private String vmSize;
        private String vnetSubnetId;
        private List<String> zones;

        public Builder() {
    	      // Empty
        }

        public Builder(GetKubernetesClusterAgentPoolProfile defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.count = defaults.count;
    	      this.enableAutoScaling = defaults.enableAutoScaling;
    	      this.enableNodePublicIp = defaults.enableNodePublicIp;
    	      this.maxCount = defaults.maxCount;
    	      this.maxPods = defaults.maxPods;
    	      this.minCount = defaults.minCount;
    	      this.name = defaults.name;
    	      this.nodeLabels = defaults.nodeLabels;
    	      this.nodePublicIpPrefixId = defaults.nodePublicIpPrefixId;
    	      this.nodeTaints = defaults.nodeTaints;
    	      this.orchestratorVersion = defaults.orchestratorVersion;
    	      this.osDiskSizeGb = defaults.osDiskSizeGb;
    	      this.osType = defaults.osType;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.upgradeSettings = defaults.upgradeSettings;
    	      this.vmSize = defaults.vmSize;
    	      this.vnetSubnetId = defaults.vnetSubnetId;
    	      this.zones = defaults.zones;
        }

        public Builder count(Integer count) {
            this.count = Objects.requireNonNull(count);
            return this;
        }
        public Builder enableAutoScaling(Boolean enableAutoScaling) {
            this.enableAutoScaling = Objects.requireNonNull(enableAutoScaling);
            return this;
        }
        public Builder enableNodePublicIp(Boolean enableNodePublicIp) {
            this.enableNodePublicIp = Objects.requireNonNull(enableNodePublicIp);
            return this;
        }
        public Builder maxCount(Integer maxCount) {
            this.maxCount = Objects.requireNonNull(maxCount);
            return this;
        }
        public Builder maxPods(Integer maxPods) {
            this.maxPods = Objects.requireNonNull(maxPods);
            return this;
        }
        public Builder minCount(Integer minCount) {
            this.minCount = Objects.requireNonNull(minCount);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder nodeLabels(Map<String,String> nodeLabels) {
            this.nodeLabels = Objects.requireNonNull(nodeLabels);
            return this;
        }
        public Builder nodePublicIpPrefixId(String nodePublicIpPrefixId) {
            this.nodePublicIpPrefixId = Objects.requireNonNull(nodePublicIpPrefixId);
            return this;
        }
        public Builder nodeTaints(List<String> nodeTaints) {
            this.nodeTaints = Objects.requireNonNull(nodeTaints);
            return this;
        }
        public Builder nodeTaints(String... nodeTaints) {
            return nodeTaints(List.of(nodeTaints));
        }
        public Builder orchestratorVersion(String orchestratorVersion) {
            this.orchestratorVersion = Objects.requireNonNull(orchestratorVersion);
            return this;
        }
        public Builder osDiskSizeGb(Integer osDiskSizeGb) {
            this.osDiskSizeGb = Objects.requireNonNull(osDiskSizeGb);
            return this;
        }
        public Builder osType(String osType) {
            this.osType = Objects.requireNonNull(osType);
            return this;
        }
        public Builder tags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder upgradeSettings(List<GetKubernetesClusterAgentPoolProfileUpgradeSetting> upgradeSettings) {
            this.upgradeSettings = Objects.requireNonNull(upgradeSettings);
            return this;
        }
        public Builder upgradeSettings(GetKubernetesClusterAgentPoolProfileUpgradeSetting... upgradeSettings) {
            return upgradeSettings(List.of(upgradeSettings));
        }
        public Builder vmSize(String vmSize) {
            this.vmSize = Objects.requireNonNull(vmSize);
            return this;
        }
        public Builder vnetSubnetId(String vnetSubnetId) {
            this.vnetSubnetId = Objects.requireNonNull(vnetSubnetId);
            return this;
        }
        public Builder zones(List<String> zones) {
            this.zones = Objects.requireNonNull(zones);
            return this;
        }
        public Builder zones(String... zones) {
            return zones(List.of(zones));
        }        public GetKubernetesClusterAgentPoolProfile build() {
            return new GetKubernetesClusterAgentPoolProfile(count, enableAutoScaling, enableNodePublicIp, maxCount, maxPods, minCount, name, nodeLabels, nodePublicIpPrefixId, nodeTaints, orchestratorVersion, osDiskSizeGb, osType, tags, type, upgradeSettings, vmSize, vnetSubnetId, zones);
        }
    }
}
