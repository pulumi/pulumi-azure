// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.healthcare.outputs;

import com.pulumi.azure.healthcare.outputs.GetServiceAuthenticationConfiguration;
import com.pulumi.azure.healthcare.outputs.GetServiceCorsConfiguration;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetServiceResult {
    private List<String> accessPolicyObjectIds;
    /**
     * @return An `authentication_configuration` block as defined below.
     * 
     */
    private List<GetServiceAuthenticationConfiguration> authenticationConfigurations;
    /**
     * @return A `cors_configuration` block as defined below.
     * 
     */
    private List<GetServiceCorsConfiguration> corsConfigurations;
    /**
     * @return The versionless Key Vault Key ID for CMK encryption of the backing database.
     * 
     */
    private String cosmosdbKeyVaultKeyVersionlessId;
    /**
     * @return The provisioned throughput for the backing database.
     * 
     */
    private Integer cosmosdbThroughput;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The type of the service.
     * 
     */
    private String kind;
    /**
     * @return The Azure Region where the Service is located.
     * 
     */
    private String location;
    private String name;
    private String resourceGroupName;
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    private Map<String,String> tags;

    private GetServiceResult() {}
    public List<String> accessPolicyObjectIds() {
        return this.accessPolicyObjectIds;
    }
    /**
     * @return An `authentication_configuration` block as defined below.
     * 
     */
    public List<GetServiceAuthenticationConfiguration> authenticationConfigurations() {
        return this.authenticationConfigurations;
    }
    /**
     * @return A `cors_configuration` block as defined below.
     * 
     */
    public List<GetServiceCorsConfiguration> corsConfigurations() {
        return this.corsConfigurations;
    }
    /**
     * @return The versionless Key Vault Key ID for CMK encryption of the backing database.
     * 
     */
    public String cosmosdbKeyVaultKeyVersionlessId() {
        return this.cosmosdbKeyVaultKeyVersionlessId;
    }
    /**
     * @return The provisioned throughput for the backing database.
     * 
     */
    public Integer cosmosdbThroughput() {
        return this.cosmosdbThroughput;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The type of the service.
     * 
     */
    public String kind() {
        return this.kind;
    }
    /**
     * @return The Azure Region where the Service is located.
     * 
     */
    public String location() {
        return this.location;
    }
    public String name() {
        return this.name;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> accessPolicyObjectIds;
        private List<GetServiceAuthenticationConfiguration> authenticationConfigurations;
        private List<GetServiceCorsConfiguration> corsConfigurations;
        private String cosmosdbKeyVaultKeyVersionlessId;
        private Integer cosmosdbThroughput;
        private String id;
        private String kind;
        private String location;
        private String name;
        private String resourceGroupName;
        private Map<String,String> tags;
        public Builder() {}
        public Builder(GetServiceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessPolicyObjectIds = defaults.accessPolicyObjectIds;
    	      this.authenticationConfigurations = defaults.authenticationConfigurations;
    	      this.corsConfigurations = defaults.corsConfigurations;
    	      this.cosmosdbKeyVaultKeyVersionlessId = defaults.cosmosdbKeyVaultKeyVersionlessId;
    	      this.cosmosdbThroughput = defaults.cosmosdbThroughput;
    	      this.id = defaults.id;
    	      this.kind = defaults.kind;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder accessPolicyObjectIds(List<String> accessPolicyObjectIds) {
            if (accessPolicyObjectIds == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "accessPolicyObjectIds");
            }
            this.accessPolicyObjectIds = accessPolicyObjectIds;
            return this;
        }
        public Builder accessPolicyObjectIds(String... accessPolicyObjectIds) {
            return accessPolicyObjectIds(List.of(accessPolicyObjectIds));
        }
        @CustomType.Setter
        public Builder authenticationConfigurations(List<GetServiceAuthenticationConfiguration> authenticationConfigurations) {
            if (authenticationConfigurations == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "authenticationConfigurations");
            }
            this.authenticationConfigurations = authenticationConfigurations;
            return this;
        }
        public Builder authenticationConfigurations(GetServiceAuthenticationConfiguration... authenticationConfigurations) {
            return authenticationConfigurations(List.of(authenticationConfigurations));
        }
        @CustomType.Setter
        public Builder corsConfigurations(List<GetServiceCorsConfiguration> corsConfigurations) {
            if (corsConfigurations == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "corsConfigurations");
            }
            this.corsConfigurations = corsConfigurations;
            return this;
        }
        public Builder corsConfigurations(GetServiceCorsConfiguration... corsConfigurations) {
            return corsConfigurations(List.of(corsConfigurations));
        }
        @CustomType.Setter
        public Builder cosmosdbKeyVaultKeyVersionlessId(String cosmosdbKeyVaultKeyVersionlessId) {
            if (cosmosdbKeyVaultKeyVersionlessId == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "cosmosdbKeyVaultKeyVersionlessId");
            }
            this.cosmosdbKeyVaultKeyVersionlessId = cosmosdbKeyVaultKeyVersionlessId;
            return this;
        }
        @CustomType.Setter
        public Builder cosmosdbThroughput(Integer cosmosdbThroughput) {
            if (cosmosdbThroughput == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "cosmosdbThroughput");
            }
            this.cosmosdbThroughput = cosmosdbThroughput;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder kind(String kind) {
            if (kind == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "kind");
            }
            this.kind = kind;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            if (resourceGroupName == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "resourceGroupName");
            }
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public GetServiceResult build() {
            final var _resultValue = new GetServiceResult();
            _resultValue.accessPolicyObjectIds = accessPolicyObjectIds;
            _resultValue.authenticationConfigurations = authenticationConfigurations;
            _resultValue.corsConfigurations = corsConfigurations;
            _resultValue.cosmosdbKeyVaultKeyVersionlessId = cosmosdbKeyVaultKeyVersionlessId;
            _resultValue.cosmosdbThroughput = cosmosdbThroughput;
            _resultValue.id = id;
            _resultValue.kind = kind;
            _resultValue.location = location;
            _resultValue.name = name;
            _resultValue.resourceGroupName = resourceGroupName;
            _resultValue.tags = tags;
            return _resultValue;
        }
    }
}
