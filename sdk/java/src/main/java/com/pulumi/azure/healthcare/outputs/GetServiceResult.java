// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.healthcare.outputs;

import com.pulumi.azure.healthcare.outputs.GetServiceAuthenticationConfiguration;
import com.pulumi.azure.healthcare.outputs.GetServiceCorsConfiguration;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetServiceResult {
    private final List<String> accessPolicyObjectIds;
    /**
     * @return An `authentication_configuration` block as defined below.
     * 
     */
    private final List<GetServiceAuthenticationConfiguration> authenticationConfigurations;
    /**
     * @return A `cors_configuration` block as defined below.
     * 
     */
    private final List<GetServiceCorsConfiguration> corsConfigurations;
    /**
     * @return The versionless Key Vault Key ID for CMK encryption of the backing database.
     * 
     */
    private final String cosmosdbKeyVaultKeyVersionlessId;
    /**
     * @return The provisioned throughput for the backing database.
     * 
     */
    private final Integer cosmosdbThroughput;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * @return The type of the service.
     * 
     */
    private final String kind;
    /**
     * @return The Azure Region where the Service is located.
     * 
     */
    private final String location;
    private final String name;
    private final String resourceGroupName;
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    private final Map<String,String> tags;

    @CustomType.Constructor
    private GetServiceResult(
        @CustomType.Parameter("accessPolicyObjectIds") List<String> accessPolicyObjectIds,
        @CustomType.Parameter("authenticationConfigurations") List<GetServiceAuthenticationConfiguration> authenticationConfigurations,
        @CustomType.Parameter("corsConfigurations") List<GetServiceCorsConfiguration> corsConfigurations,
        @CustomType.Parameter("cosmosdbKeyVaultKeyVersionlessId") String cosmosdbKeyVaultKeyVersionlessId,
        @CustomType.Parameter("cosmosdbThroughput") Integer cosmosdbThroughput,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("kind") String kind,
        @CustomType.Parameter("location") String location,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("resourceGroupName") String resourceGroupName,
        @CustomType.Parameter("tags") Map<String,String> tags) {
        this.accessPolicyObjectIds = accessPolicyObjectIds;
        this.authenticationConfigurations = authenticationConfigurations;
        this.corsConfigurations = corsConfigurations;
        this.cosmosdbKeyVaultKeyVersionlessId = cosmosdbKeyVaultKeyVersionlessId;
        this.cosmosdbThroughput = cosmosdbThroughput;
        this.id = id;
        this.kind = kind;
        this.location = location;
        this.name = name;
        this.resourceGroupName = resourceGroupName;
        this.tags = tags;
    }

    public List<String> accessPolicyObjectIds() {
        return this.accessPolicyObjectIds;
    }
    /**
     * @return An `authentication_configuration` block as defined below.
     * 
     */
    public List<GetServiceAuthenticationConfiguration> authenticationConfigurations() {
        return this.authenticationConfigurations;
    }
    /**
     * @return A `cors_configuration` block as defined below.
     * 
     */
    public List<GetServiceCorsConfiguration> corsConfigurations() {
        return this.corsConfigurations;
    }
    /**
     * @return The versionless Key Vault Key ID for CMK encryption of the backing database.
     * 
     */
    public String cosmosdbKeyVaultKeyVersionlessId() {
        return this.cosmosdbKeyVaultKeyVersionlessId;
    }
    /**
     * @return The provisioned throughput for the backing database.
     * 
     */
    public Integer cosmosdbThroughput() {
        return this.cosmosdbThroughput;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The type of the service.
     * 
     */
    public String kind() {
        return this.kind;
    }
    /**
     * @return The Azure Region where the Service is located.
     * 
     */
    public String location() {
        return this.location;
    }
    public String name() {
        return this.name;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<String> accessPolicyObjectIds;
        private List<GetServiceAuthenticationConfiguration> authenticationConfigurations;
        private List<GetServiceCorsConfiguration> corsConfigurations;
        private String cosmosdbKeyVaultKeyVersionlessId;
        private Integer cosmosdbThroughput;
        private String id;
        private String kind;
        private String location;
        private String name;
        private String resourceGroupName;
        private Map<String,String> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(GetServiceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessPolicyObjectIds = defaults.accessPolicyObjectIds;
    	      this.authenticationConfigurations = defaults.authenticationConfigurations;
    	      this.corsConfigurations = defaults.corsConfigurations;
    	      this.cosmosdbKeyVaultKeyVersionlessId = defaults.cosmosdbKeyVaultKeyVersionlessId;
    	      this.cosmosdbThroughput = defaults.cosmosdbThroughput;
    	      this.id = defaults.id;
    	      this.kind = defaults.kind;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.tags = defaults.tags;
        }

        public Builder accessPolicyObjectIds(List<String> accessPolicyObjectIds) {
            this.accessPolicyObjectIds = Objects.requireNonNull(accessPolicyObjectIds);
            return this;
        }
        public Builder accessPolicyObjectIds(String... accessPolicyObjectIds) {
            return accessPolicyObjectIds(List.of(accessPolicyObjectIds));
        }
        public Builder authenticationConfigurations(List<GetServiceAuthenticationConfiguration> authenticationConfigurations) {
            this.authenticationConfigurations = Objects.requireNonNull(authenticationConfigurations);
            return this;
        }
        public Builder authenticationConfigurations(GetServiceAuthenticationConfiguration... authenticationConfigurations) {
            return authenticationConfigurations(List.of(authenticationConfigurations));
        }
        public Builder corsConfigurations(List<GetServiceCorsConfiguration> corsConfigurations) {
            this.corsConfigurations = Objects.requireNonNull(corsConfigurations);
            return this;
        }
        public Builder corsConfigurations(GetServiceCorsConfiguration... corsConfigurations) {
            return corsConfigurations(List.of(corsConfigurations));
        }
        public Builder cosmosdbKeyVaultKeyVersionlessId(String cosmosdbKeyVaultKeyVersionlessId) {
            this.cosmosdbKeyVaultKeyVersionlessId = Objects.requireNonNull(cosmosdbKeyVaultKeyVersionlessId);
            return this;
        }
        public Builder cosmosdbThroughput(Integer cosmosdbThroughput) {
            this.cosmosdbThroughput = Objects.requireNonNull(cosmosdbThroughput);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder kind(String kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder tags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }        public GetServiceResult build() {
            return new GetServiceResult(accessPolicyObjectIds, authenticationConfigurations, corsConfigurations, cosmosdbKeyVaultKeyVersionlessId, cosmosdbThroughput, id, kind, location, name, resourceGroupName, tags);
        }
    }
}
