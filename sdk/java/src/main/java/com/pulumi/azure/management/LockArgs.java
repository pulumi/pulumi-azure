// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.management;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LockArgs extends com.pulumi.resources.ResourceArgs {

    public static final LockArgs Empty = new LockArgs();

    /**
     * Specifies the Level to be used for this Lock. Possible values are `CanNotDelete` and `ReadOnly`. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="lockLevel", required=true)
    private Output<String> lockLevel;

    /**
     * @return Specifies the Level to be used for this Lock. Possible values are `CanNotDelete` and `ReadOnly`. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> lockLevel() {
        return this.lockLevel;
    }

    /**
     * Specifies the name of the Management Lock. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the name of the Management Lock. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Specifies some notes about the lock. Maximum of 512 characters. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="notes")
    private @Nullable Output<String> notes;

    /**
     * @return Specifies some notes about the lock. Maximum of 512 characters. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> notes() {
        return Optional.ofNullable(this.notes);
    }

    /**
     * Specifies the scope at which the Management Lock should be created. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="scope", required=true)
    private Output<String> scope;

    /**
     * @return Specifies the scope at which the Management Lock should be created. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> scope() {
        return this.scope;
    }

    private LockArgs() {}

    private LockArgs(LockArgs $) {
        this.lockLevel = $.lockLevel;
        this.name = $.name;
        this.notes = $.notes;
        this.scope = $.scope;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LockArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LockArgs $;

        public Builder() {
            $ = new LockArgs();
        }

        public Builder(LockArgs defaults) {
            $ = new LockArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param lockLevel Specifies the Level to be used for this Lock. Possible values are `CanNotDelete` and `ReadOnly`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder lockLevel(Output<String> lockLevel) {
            $.lockLevel = lockLevel;
            return this;
        }

        /**
         * @param lockLevel Specifies the Level to be used for this Lock. Possible values are `CanNotDelete` and `ReadOnly`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder lockLevel(String lockLevel) {
            return lockLevel(Output.of(lockLevel));
        }

        /**
         * @param name Specifies the name of the Management Lock. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of the Management Lock. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param notes Specifies some notes about the lock. Maximum of 512 characters. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder notes(@Nullable Output<String> notes) {
            $.notes = notes;
            return this;
        }

        /**
         * @param notes Specifies some notes about the lock. Maximum of 512 characters. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder notes(String notes) {
            return notes(Output.of(notes));
        }

        /**
         * @param scope Specifies the scope at which the Management Lock should be created. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder scope(Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope Specifies the scope at which the Management Lock should be created. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        public LockArgs build() {
            $.lockLevel = Objects.requireNonNull($.lockLevel, "expected parameter 'lockLevel' to be non-null");
            $.scope = Objects.requireNonNull($.scope, "expected parameter 'scope' to be non-null");
            return $;
        }
    }

}
