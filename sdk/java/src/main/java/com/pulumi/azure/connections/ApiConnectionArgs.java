// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.connections;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApiConnectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApiConnectionArgs Empty = new ApiConnectionArgs();

    /**
     * A display name for this API Connection. Changing this forces a new API Connection to be created.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return A display name for this API Connection. Changing this forces a new API Connection to be created.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The ID of the Managed API which this API Connection is linked to. Changing this forces a new API Connection to be created.
     * 
     */
    @Import(name="managedApiId", required=true)
    private Output<String> managedApiId;

    /**
     * @return The ID of the Managed API which this API Connection is linked to. Changing this forces a new API Connection to be created.
     * 
     */
    public Output<String> managedApiId() {
        return this.managedApiId;
    }

    /**
     * The Name which should be used for this API Connection. Changing this forces a new API Connection to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The Name which should be used for this API Connection. Changing this forces a new API Connection to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="parameterValues")
    private @Nullable Output<Map<String,String>> parameterValues;

    public Optional<Output<Map<String,String>>> parameterValues() {
        return Optional.ofNullable(this.parameterValues);
    }

    /**
     * The name of the Resource Group where this API Connection should exist. Changing this forces a new API Connection to be created.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the Resource Group where this API Connection should exist. Changing this forces a new API Connection to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * A mapping of tags which should be assigned to the API Connection.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags which should be assigned to the API Connection.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private ApiConnectionArgs() {}

    private ApiConnectionArgs(ApiConnectionArgs $) {
        this.displayName = $.displayName;
        this.managedApiId = $.managedApiId;
        this.name = $.name;
        this.parameterValues = $.parameterValues;
        this.resourceGroupName = $.resourceGroupName;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApiConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApiConnectionArgs $;

        public Builder() {
            $ = new ApiConnectionArgs();
        }

        public Builder(ApiConnectionArgs defaults) {
            $ = new ApiConnectionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param displayName A display name for this API Connection. Changing this forces a new API Connection to be created.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName A display name for this API Connection. Changing this forces a new API Connection to be created.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param managedApiId The ID of the Managed API which this API Connection is linked to. Changing this forces a new API Connection to be created.
         * 
         * @return builder
         * 
         */
        public Builder managedApiId(Output<String> managedApiId) {
            $.managedApiId = managedApiId;
            return this;
        }

        /**
         * @param managedApiId The ID of the Managed API which this API Connection is linked to. Changing this forces a new API Connection to be created.
         * 
         * @return builder
         * 
         */
        public Builder managedApiId(String managedApiId) {
            return managedApiId(Output.of(managedApiId));
        }

        /**
         * @param name The Name which should be used for this API Connection. Changing this forces a new API Connection to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The Name which should be used for this API Connection. Changing this forces a new API Connection to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder parameterValues(@Nullable Output<Map<String,String>> parameterValues) {
            $.parameterValues = parameterValues;
            return this;
        }

        public Builder parameterValues(Map<String,String> parameterValues) {
            return parameterValues(Output.of(parameterValues));
        }

        /**
         * @param resourceGroupName The name of the Resource Group where this API Connection should exist. Changing this forces a new API Connection to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the Resource Group where this API Connection should exist. Changing this forces a new API Connection to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param tags A mapping of tags which should be assigned to the API Connection.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags which should be assigned to the API Connection.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public ApiConnectionArgs build() {
            if ($.managedApiId == null) {
                throw new MissingRequiredPropertyException("ApiConnectionArgs", "managedApiId");
            }
            if ($.resourceGroupName == null) {
                throw new MissingRequiredPropertyException("ApiConnectionArgs", "resourceGroupName");
            }
            return $;
        }
    }

}
