// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.devtest.outputs;

import com.pulumi.azure.devtest.outputs.VirtualNetworkSubnetSharedPublicIpAddressAllowedPort;
import com.pulumi.core.annotations.CustomType;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class VirtualNetworkSubnetSharedPublicIpAddress {
    /**
     * @return A list of `allowedPorts` blocks as defined below.
     * 
     */
    private @Nullable List<VirtualNetworkSubnetSharedPublicIpAddressAllowedPort> allowedPorts;

    private VirtualNetworkSubnetSharedPublicIpAddress() {}
    /**
     * @return A list of `allowedPorts` blocks as defined below.
     * 
     */
    public List<VirtualNetworkSubnetSharedPublicIpAddressAllowedPort> allowedPorts() {
        return this.allowedPorts == null ? List.of() : this.allowedPorts;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VirtualNetworkSubnetSharedPublicIpAddress defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<VirtualNetworkSubnetSharedPublicIpAddressAllowedPort> allowedPorts;
        public Builder() {}
        public Builder(VirtualNetworkSubnetSharedPublicIpAddress defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedPorts = defaults.allowedPorts;
        }

        @CustomType.Setter
        public Builder allowedPorts(@Nullable List<VirtualNetworkSubnetSharedPublicIpAddressAllowedPort> allowedPorts) {

            this.allowedPorts = allowedPorts;
            return this;
        }
        public Builder allowedPorts(VirtualNetworkSubnetSharedPublicIpAddressAllowedPort... allowedPorts) {
            return allowedPorts(List.of(allowedPorts));
        }
        public VirtualNetworkSubnetSharedPublicIpAddress build() {
            final var _resultValue = new VirtualNetworkSubnetSharedPublicIpAddress();
            _resultValue.allowedPorts = allowedPorts;
            return _resultValue;
        }
    }
}
