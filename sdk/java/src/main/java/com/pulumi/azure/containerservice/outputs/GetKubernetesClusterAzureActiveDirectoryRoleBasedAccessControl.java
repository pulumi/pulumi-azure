// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerservice.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetKubernetesClusterAzureActiveDirectoryRoleBasedAccessControl {
    /**
     * @return A list of Object IDs of Azure Active Directory Groups which should have Admin Role on the Cluster.
     * 
     */
    private final List<String> adminGroupObjectIds;
    /**
     * @return Is Role Based Access Control based on Azure AD enabled?
     * 
     */
    private final Boolean azureRbacEnabled;
    /**
     * @return The Client ID of an Azure Active Directory Application.
     * 
     */
    private final String clientAppId;
    /**
     * @return Is the Azure Active Directory integration Managed, meaning that Azure will create/manage the Service Principal used for integration.
     * 
     */
    private final Boolean managed;
    /**
     * @return The Server ID of an Azure Active Directory Application.
     * 
     */
    private final String serverAppId;
    /**
     * @return The Tenant ID of the System Assigned Managed Service Identity that is configured on this Kubernetes Cluster.
     * 
     */
    private final String tenantId;

    @CustomType.Constructor
    private GetKubernetesClusterAzureActiveDirectoryRoleBasedAccessControl(
        @CustomType.Parameter("adminGroupObjectIds") List<String> adminGroupObjectIds,
        @CustomType.Parameter("azureRbacEnabled") Boolean azureRbacEnabled,
        @CustomType.Parameter("clientAppId") String clientAppId,
        @CustomType.Parameter("managed") Boolean managed,
        @CustomType.Parameter("serverAppId") String serverAppId,
        @CustomType.Parameter("tenantId") String tenantId) {
        this.adminGroupObjectIds = adminGroupObjectIds;
        this.azureRbacEnabled = azureRbacEnabled;
        this.clientAppId = clientAppId;
        this.managed = managed;
        this.serverAppId = serverAppId;
        this.tenantId = tenantId;
    }

    /**
     * @return A list of Object IDs of Azure Active Directory Groups which should have Admin Role on the Cluster.
     * 
     */
    public List<String> adminGroupObjectIds() {
        return this.adminGroupObjectIds;
    }
    /**
     * @return Is Role Based Access Control based on Azure AD enabled?
     * 
     */
    public Boolean azureRbacEnabled() {
        return this.azureRbacEnabled;
    }
    /**
     * @return The Client ID of an Azure Active Directory Application.
     * 
     */
    public String clientAppId() {
        return this.clientAppId;
    }
    /**
     * @return Is the Azure Active Directory integration Managed, meaning that Azure will create/manage the Service Principal used for integration.
     * 
     */
    public Boolean managed() {
        return this.managed;
    }
    /**
     * @return The Server ID of an Azure Active Directory Application.
     * 
     */
    public String serverAppId() {
        return this.serverAppId;
    }
    /**
     * @return The Tenant ID of the System Assigned Managed Service Identity that is configured on this Kubernetes Cluster.
     * 
     */
    public String tenantId() {
        return this.tenantId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetKubernetesClusterAzureActiveDirectoryRoleBasedAccessControl defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<String> adminGroupObjectIds;
        private Boolean azureRbacEnabled;
        private String clientAppId;
        private Boolean managed;
        private String serverAppId;
        private String tenantId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetKubernetesClusterAzureActiveDirectoryRoleBasedAccessControl defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adminGroupObjectIds = defaults.adminGroupObjectIds;
    	      this.azureRbacEnabled = defaults.azureRbacEnabled;
    	      this.clientAppId = defaults.clientAppId;
    	      this.managed = defaults.managed;
    	      this.serverAppId = defaults.serverAppId;
    	      this.tenantId = defaults.tenantId;
        }

        public Builder adminGroupObjectIds(List<String> adminGroupObjectIds) {
            this.adminGroupObjectIds = Objects.requireNonNull(adminGroupObjectIds);
            return this;
        }
        public Builder adminGroupObjectIds(String... adminGroupObjectIds) {
            return adminGroupObjectIds(List.of(adminGroupObjectIds));
        }
        public Builder azureRbacEnabled(Boolean azureRbacEnabled) {
            this.azureRbacEnabled = Objects.requireNonNull(azureRbacEnabled);
            return this;
        }
        public Builder clientAppId(String clientAppId) {
            this.clientAppId = Objects.requireNonNull(clientAppId);
            return this;
        }
        public Builder managed(Boolean managed) {
            this.managed = Objects.requireNonNull(managed);
            return this;
        }
        public Builder serverAppId(String serverAppId) {
            this.serverAppId = Objects.requireNonNull(serverAppId);
            return this;
        }
        public Builder tenantId(String tenantId) {
            this.tenantId = Objects.requireNonNull(tenantId);
            return this;
        }        public GetKubernetesClusterAzureActiveDirectoryRoleBasedAccessControl build() {
            return new GetKubernetesClusterAzureActiveDirectoryRoleBasedAccessControl(adminGroupObjectIds, azureRbacEnabled, clientAppId, managed, serverAppId, tenantId);
        }
    }
}
