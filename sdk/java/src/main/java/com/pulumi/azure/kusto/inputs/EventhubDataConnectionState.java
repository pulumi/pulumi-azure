// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.kusto.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EventhubDataConnectionState extends com.pulumi.resources.ResourceArgs {

    public static final EventhubDataConnectionState Empty = new EventhubDataConnectionState();

    /**
     * Specifies the name of the Kusto Cluster this data connection will be added to. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="clusterName")
    private @Nullable Output<String> clusterName;

    /**
     * @return Specifies the name of the Kusto Cluster this data connection will be added to. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> clusterName() {
        return Optional.ofNullable(this.clusterName);
    }

    /**
     * Specifies compression type for the connection. Allowed values: `GZip` and `None`. Defaults to `None`. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="compression")
    private @Nullable Output<String> compression;

    /**
     * @return Specifies compression type for the connection. Allowed values: `GZip` and `None`. Defaults to `None`. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> compression() {
        return Optional.ofNullable(this.compression);
    }

    /**
     * Specifies the EventHub consumer group this data connection will use for ingestion. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="consumerGroup")
    private @Nullable Output<String> consumerGroup;

    /**
     * @return Specifies the EventHub consumer group this data connection will use for ingestion. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> consumerGroup() {
        return Optional.ofNullable(this.consumerGroup);
    }

    /**
     * Specifies the data format of the EventHub messages. Allowed values: `APACHEAVRO`, `AVRO`, `CSV`, `JSON`, `MULTIJSON`, `ORC`, `PARQUET`, `PSV`, `RAW`, `SCSV`, `SINGLEJSON`, `SOHSV`, `TSVE`, `TSV`, `TXT`, and `W3CLOGFILE`.
     * 
     */
    @Import(name="dataFormat")
    private @Nullable Output<String> dataFormat;

    /**
     * @return Specifies the data format of the EventHub messages. Allowed values: `APACHEAVRO`, `AVRO`, `CSV`, `JSON`, `MULTIJSON`, `ORC`, `PARQUET`, `PSV`, `RAW`, `SCSV`, `SINGLEJSON`, `SOHSV`, `TSVE`, `TSV`, `TXT`, and `W3CLOGFILE`.
     * 
     */
    public Optional<Output<String>> dataFormat() {
        return Optional.ofNullable(this.dataFormat);
    }

    /**
     * Specifies the name of the Kusto Database this data connection will be added to. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="databaseName")
    private @Nullable Output<String> databaseName;

    /**
     * @return Specifies the name of the Kusto Database this data connection will be added to. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> databaseName() {
        return Optional.ofNullable(this.databaseName);
    }

    /**
     * Indication for database routing information from the data connection, by default only database routing information is allowed. Allowed values: `Single`, `Multi`. Changing this forces a new resource to be created. Defaults to `Single`.
     * 
     */
    @Import(name="databaseRoutingType")
    private @Nullable Output<String> databaseRoutingType;

    /**
     * @return Indication for database routing information from the data connection, by default only database routing information is allowed. Allowed values: `Single`, `Multi`. Changing this forces a new resource to be created. Defaults to `Single`.
     * 
     */
    public Optional<Output<String>> databaseRoutingType() {
        return Optional.ofNullable(this.databaseRoutingType);
    }

    /**
     * Specifies a list of system properties for the Event Hub.
     * 
     */
    @Import(name="eventSystemProperties")
    private @Nullable Output<List<String>> eventSystemProperties;

    /**
     * @return Specifies a list of system properties for the Event Hub.
     * 
     */
    public Optional<Output<List<String>>> eventSystemProperties() {
        return Optional.ofNullable(this.eventSystemProperties);
    }

    /**
     * Specifies the resource id of the EventHub this data connection will use for ingestion. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="eventhubId")
    private @Nullable Output<String> eventhubId;

    /**
     * @return Specifies the resource id of the EventHub this data connection will use for ingestion. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> eventhubId() {
        return Optional.ofNullable(this.eventhubId);
    }

    /**
     * The resource ID of a managed identity (system or user assigned) to be used to authenticate with event hub.
     * 
     */
    @Import(name="identityId")
    private @Nullable Output<String> identityId;

    /**
     * @return The resource ID of a managed identity (system or user assigned) to be used to authenticate with event hub.
     * 
     */
    public Optional<Output<String>> identityId() {
        return Optional.ofNullable(this.identityId);
    }

    /**
     * The location where the Kusto Database should be created. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The location where the Kusto Database should be created. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Specifies the mapping rule used for the message ingestion. Mapping rule must exist before resource is created.
     * 
     */
    @Import(name="mappingRuleName")
    private @Nullable Output<String> mappingRuleName;

    /**
     * @return Specifies the mapping rule used for the message ingestion. Mapping rule must exist before resource is created.
     * 
     */
    public Optional<Output<String>> mappingRuleName() {
        return Optional.ofNullable(this.mappingRuleName);
    }

    /**
     * The name of the Kusto EventHub Data Connection to create. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the Kusto EventHub Data Connection to create. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Specifies the Resource Group where the Kusto Database should exist. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="resourceGroupName")
    private @Nullable Output<String> resourceGroupName;

    /**
     * @return Specifies the Resource Group where the Kusto Database should exist. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> resourceGroupName() {
        return Optional.ofNullable(this.resourceGroupName);
    }

    /**
     * Specifies the target table name used for the message ingestion. Table must exist before resource is created.
     * 
     */
    @Import(name="tableName")
    private @Nullable Output<String> tableName;

    /**
     * @return Specifies the target table name used for the message ingestion. Table must exist before resource is created.
     * 
     */
    public Optional<Output<String>> tableName() {
        return Optional.ofNullable(this.tableName);
    }

    private EventhubDataConnectionState() {}

    private EventhubDataConnectionState(EventhubDataConnectionState $) {
        this.clusterName = $.clusterName;
        this.compression = $.compression;
        this.consumerGroup = $.consumerGroup;
        this.dataFormat = $.dataFormat;
        this.databaseName = $.databaseName;
        this.databaseRoutingType = $.databaseRoutingType;
        this.eventSystemProperties = $.eventSystemProperties;
        this.eventhubId = $.eventhubId;
        this.identityId = $.identityId;
        this.location = $.location;
        this.mappingRuleName = $.mappingRuleName;
        this.name = $.name;
        this.resourceGroupName = $.resourceGroupName;
        this.tableName = $.tableName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EventhubDataConnectionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EventhubDataConnectionState $;

        public Builder() {
            $ = new EventhubDataConnectionState();
        }

        public Builder(EventhubDataConnectionState defaults) {
            $ = new EventhubDataConnectionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterName Specifies the name of the Kusto Cluster this data connection will be added to. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder clusterName(@Nullable Output<String> clusterName) {
            $.clusterName = clusterName;
            return this;
        }

        /**
         * @param clusterName Specifies the name of the Kusto Cluster this data connection will be added to. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder clusterName(String clusterName) {
            return clusterName(Output.of(clusterName));
        }

        /**
         * @param compression Specifies compression type for the connection. Allowed values: `GZip` and `None`. Defaults to `None`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder compression(@Nullable Output<String> compression) {
            $.compression = compression;
            return this;
        }

        /**
         * @param compression Specifies compression type for the connection. Allowed values: `GZip` and `None`. Defaults to `None`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder compression(String compression) {
            return compression(Output.of(compression));
        }

        /**
         * @param consumerGroup Specifies the EventHub consumer group this data connection will use for ingestion. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder consumerGroup(@Nullable Output<String> consumerGroup) {
            $.consumerGroup = consumerGroup;
            return this;
        }

        /**
         * @param consumerGroup Specifies the EventHub consumer group this data connection will use for ingestion. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder consumerGroup(String consumerGroup) {
            return consumerGroup(Output.of(consumerGroup));
        }

        /**
         * @param dataFormat Specifies the data format of the EventHub messages. Allowed values: `APACHEAVRO`, `AVRO`, `CSV`, `JSON`, `MULTIJSON`, `ORC`, `PARQUET`, `PSV`, `RAW`, `SCSV`, `SINGLEJSON`, `SOHSV`, `TSVE`, `TSV`, `TXT`, and `W3CLOGFILE`.
         * 
         * @return builder
         * 
         */
        public Builder dataFormat(@Nullable Output<String> dataFormat) {
            $.dataFormat = dataFormat;
            return this;
        }

        /**
         * @param dataFormat Specifies the data format of the EventHub messages. Allowed values: `APACHEAVRO`, `AVRO`, `CSV`, `JSON`, `MULTIJSON`, `ORC`, `PARQUET`, `PSV`, `RAW`, `SCSV`, `SINGLEJSON`, `SOHSV`, `TSVE`, `TSV`, `TXT`, and `W3CLOGFILE`.
         * 
         * @return builder
         * 
         */
        public Builder dataFormat(String dataFormat) {
            return dataFormat(Output.of(dataFormat));
        }

        /**
         * @param databaseName Specifies the name of the Kusto Database this data connection will be added to. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(@Nullable Output<String> databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        /**
         * @param databaseName Specifies the name of the Kusto Database this data connection will be added to. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(String databaseName) {
            return databaseName(Output.of(databaseName));
        }

        /**
         * @param databaseRoutingType Indication for database routing information from the data connection, by default only database routing information is allowed. Allowed values: `Single`, `Multi`. Changing this forces a new resource to be created. Defaults to `Single`.
         * 
         * @return builder
         * 
         */
        public Builder databaseRoutingType(@Nullable Output<String> databaseRoutingType) {
            $.databaseRoutingType = databaseRoutingType;
            return this;
        }

        /**
         * @param databaseRoutingType Indication for database routing information from the data connection, by default only database routing information is allowed. Allowed values: `Single`, `Multi`. Changing this forces a new resource to be created. Defaults to `Single`.
         * 
         * @return builder
         * 
         */
        public Builder databaseRoutingType(String databaseRoutingType) {
            return databaseRoutingType(Output.of(databaseRoutingType));
        }

        /**
         * @param eventSystemProperties Specifies a list of system properties for the Event Hub.
         * 
         * @return builder
         * 
         */
        public Builder eventSystemProperties(@Nullable Output<List<String>> eventSystemProperties) {
            $.eventSystemProperties = eventSystemProperties;
            return this;
        }

        /**
         * @param eventSystemProperties Specifies a list of system properties for the Event Hub.
         * 
         * @return builder
         * 
         */
        public Builder eventSystemProperties(List<String> eventSystemProperties) {
            return eventSystemProperties(Output.of(eventSystemProperties));
        }

        /**
         * @param eventSystemProperties Specifies a list of system properties for the Event Hub.
         * 
         * @return builder
         * 
         */
        public Builder eventSystemProperties(String... eventSystemProperties) {
            return eventSystemProperties(List.of(eventSystemProperties));
        }

        /**
         * @param eventhubId Specifies the resource id of the EventHub this data connection will use for ingestion. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder eventhubId(@Nullable Output<String> eventhubId) {
            $.eventhubId = eventhubId;
            return this;
        }

        /**
         * @param eventhubId Specifies the resource id of the EventHub this data connection will use for ingestion. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder eventhubId(String eventhubId) {
            return eventhubId(Output.of(eventhubId));
        }

        /**
         * @param identityId The resource ID of a managed identity (system or user assigned) to be used to authenticate with event hub.
         * 
         * @return builder
         * 
         */
        public Builder identityId(@Nullable Output<String> identityId) {
            $.identityId = identityId;
            return this;
        }

        /**
         * @param identityId The resource ID of a managed identity (system or user assigned) to be used to authenticate with event hub.
         * 
         * @return builder
         * 
         */
        public Builder identityId(String identityId) {
            return identityId(Output.of(identityId));
        }

        /**
         * @param location The location where the Kusto Database should be created. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location where the Kusto Database should be created. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param mappingRuleName Specifies the mapping rule used for the message ingestion. Mapping rule must exist before resource is created.
         * 
         * @return builder
         * 
         */
        public Builder mappingRuleName(@Nullable Output<String> mappingRuleName) {
            $.mappingRuleName = mappingRuleName;
            return this;
        }

        /**
         * @param mappingRuleName Specifies the mapping rule used for the message ingestion. Mapping rule must exist before resource is created.
         * 
         * @return builder
         * 
         */
        public Builder mappingRuleName(String mappingRuleName) {
            return mappingRuleName(Output.of(mappingRuleName));
        }

        /**
         * @param name The name of the Kusto EventHub Data Connection to create. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Kusto EventHub Data Connection to create. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param resourceGroupName Specifies the Resource Group where the Kusto Database should exist. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(@Nullable Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName Specifies the Resource Group where the Kusto Database should exist. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param tableName Specifies the target table name used for the message ingestion. Table must exist before resource is created.
         * 
         * @return builder
         * 
         */
        public Builder tableName(@Nullable Output<String> tableName) {
            $.tableName = tableName;
            return this;
        }

        /**
         * @param tableName Specifies the target table name used for the message ingestion. Table must exist before resource is created.
         * 
         * @return builder
         * 
         */
        public Builder tableName(String tableName) {
            return tableName(Output.of(tableName));
        }

        public EventhubDataConnectionState build() {
            return $;
        }
    }

}
