// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ScaleSetRollingUpgradePolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final ScaleSetRollingUpgradePolicyArgs Empty = new ScaleSetRollingUpgradePolicyArgs();

    /**
     * The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances in a batch to decrease to ensure higher reliability. Defaults to `20`.
     * 
     */
    @Import(name="maxBatchInstancePercent")
    private @Nullable Output<Integer> maxBatchInstancePercent;

    /**
     * @return The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances in a batch to decrease to ensure higher reliability. Defaults to `20`.
     * 
     */
    public Optional<Output<Integer>> maxBatchInstancePercent() {
        return Optional.ofNullable(this.maxBatchInstancePercent);
    }

    /**
     * The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the rolling upgrade aborts. This constraint will be checked prior to starting any batch. Defaults to `20`.
     * 
     */
    @Import(name="maxUnhealthyInstancePercent")
    private @Nullable Output<Integer> maxUnhealthyInstancePercent;

    /**
     * @return The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the rolling upgrade aborts. This constraint will be checked prior to starting any batch. Defaults to `20`.
     * 
     */
    public Optional<Output<Integer>> maxUnhealthyInstancePercent() {
        return Optional.ofNullable(this.maxUnhealthyInstancePercent);
    }

    /**
     * The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts. Defaults to `20`.
     * 
     */
    @Import(name="maxUnhealthyUpgradedInstancePercent")
    private @Nullable Output<Integer> maxUnhealthyUpgradedInstancePercent;

    /**
     * @return The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts. Defaults to `20`.
     * 
     */
    public Optional<Output<Integer>> maxUnhealthyUpgradedInstancePercent() {
        return Optional.ofNullable(this.maxUnhealthyUpgradedInstancePercent);
    }

    /**
     * The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time duration should be specified in ISO 8601 format for duration (&lt;https://en.wikipedia.org/wiki/ISO_8601#Durations&gt;). Defaults to `PT0S` seconds represented as `PT0S`.
     * 
     */
    @Import(name="pauseTimeBetweenBatches")
    private @Nullable Output<String> pauseTimeBetweenBatches;

    /**
     * @return The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time duration should be specified in ISO 8601 format for duration (&lt;https://en.wikipedia.org/wiki/ISO_8601#Durations&gt;). Defaults to `PT0S` seconds represented as `PT0S`.
     * 
     */
    public Optional<Output<String>> pauseTimeBetweenBatches() {
        return Optional.ofNullable(this.pauseTimeBetweenBatches);
    }

    private ScaleSetRollingUpgradePolicyArgs() {}

    private ScaleSetRollingUpgradePolicyArgs(ScaleSetRollingUpgradePolicyArgs $) {
        this.maxBatchInstancePercent = $.maxBatchInstancePercent;
        this.maxUnhealthyInstancePercent = $.maxUnhealthyInstancePercent;
        this.maxUnhealthyUpgradedInstancePercent = $.maxUnhealthyUpgradedInstancePercent;
        this.pauseTimeBetweenBatches = $.pauseTimeBetweenBatches;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScaleSetRollingUpgradePolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScaleSetRollingUpgradePolicyArgs $;

        public Builder() {
            $ = new ScaleSetRollingUpgradePolicyArgs();
        }

        public Builder(ScaleSetRollingUpgradePolicyArgs defaults) {
            $ = new ScaleSetRollingUpgradePolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param maxBatchInstancePercent The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances in a batch to decrease to ensure higher reliability. Defaults to `20`.
         * 
         * @return builder
         * 
         */
        public Builder maxBatchInstancePercent(@Nullable Output<Integer> maxBatchInstancePercent) {
            $.maxBatchInstancePercent = maxBatchInstancePercent;
            return this;
        }

        /**
         * @param maxBatchInstancePercent The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances in a batch to decrease to ensure higher reliability. Defaults to `20`.
         * 
         * @return builder
         * 
         */
        public Builder maxBatchInstancePercent(Integer maxBatchInstancePercent) {
            return maxBatchInstancePercent(Output.of(maxBatchInstancePercent));
        }

        /**
         * @param maxUnhealthyInstancePercent The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the rolling upgrade aborts. This constraint will be checked prior to starting any batch. Defaults to `20`.
         * 
         * @return builder
         * 
         */
        public Builder maxUnhealthyInstancePercent(@Nullable Output<Integer> maxUnhealthyInstancePercent) {
            $.maxUnhealthyInstancePercent = maxUnhealthyInstancePercent;
            return this;
        }

        /**
         * @param maxUnhealthyInstancePercent The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the rolling upgrade aborts. This constraint will be checked prior to starting any batch. Defaults to `20`.
         * 
         * @return builder
         * 
         */
        public Builder maxUnhealthyInstancePercent(Integer maxUnhealthyInstancePercent) {
            return maxUnhealthyInstancePercent(Output.of(maxUnhealthyInstancePercent));
        }

        /**
         * @param maxUnhealthyUpgradedInstancePercent The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts. Defaults to `20`.
         * 
         * @return builder
         * 
         */
        public Builder maxUnhealthyUpgradedInstancePercent(@Nullable Output<Integer> maxUnhealthyUpgradedInstancePercent) {
            $.maxUnhealthyUpgradedInstancePercent = maxUnhealthyUpgradedInstancePercent;
            return this;
        }

        /**
         * @param maxUnhealthyUpgradedInstancePercent The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts. Defaults to `20`.
         * 
         * @return builder
         * 
         */
        public Builder maxUnhealthyUpgradedInstancePercent(Integer maxUnhealthyUpgradedInstancePercent) {
            return maxUnhealthyUpgradedInstancePercent(Output.of(maxUnhealthyUpgradedInstancePercent));
        }

        /**
         * @param pauseTimeBetweenBatches The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time duration should be specified in ISO 8601 format for duration (&lt;https://en.wikipedia.org/wiki/ISO_8601#Durations&gt;). Defaults to `PT0S` seconds represented as `PT0S`.
         * 
         * @return builder
         * 
         */
        public Builder pauseTimeBetweenBatches(@Nullable Output<String> pauseTimeBetweenBatches) {
            $.pauseTimeBetweenBatches = pauseTimeBetweenBatches;
            return this;
        }

        /**
         * @param pauseTimeBetweenBatches The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time duration should be specified in ISO 8601 format for duration (&lt;https://en.wikipedia.org/wiki/ISO_8601#Durations&gt;). Defaults to `PT0S` seconds represented as `PT0S`.
         * 
         * @return builder
         * 
         */
        public Builder pauseTimeBetweenBatches(String pauseTimeBetweenBatches) {
            return pauseTimeBetweenBatches(Output.of(pauseTimeBetweenBatches));
        }

        public ScaleSetRollingUpgradePolicyArgs build() {
            return $;
        }
    }

}
