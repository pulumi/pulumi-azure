// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.databricks;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.databricks.VirtualNetworkPeeringArgs;
import com.pulumi.azure.databricks.inputs.VirtualNetworkPeeringState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a Databricks Virtual Network Peering
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.network.VirtualNetwork;
 * import com.pulumi.azure.network.VirtualNetworkArgs;
 * import com.pulumi.azure.databricks.Workspace;
 * import com.pulumi.azure.databricks.WorkspaceArgs;
 * import com.pulumi.azure.databricks.VirtualNetworkPeering;
 * import com.pulumi.azure.databricks.VirtualNetworkPeeringArgs;
 * import com.pulumi.azure.network.VirtualNetworkPeering;
 * import com.pulumi.azure.network.VirtualNetworkPeeringArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampleResourceGroup = new ResourceGroup(&#34;exampleResourceGroup&#34;, ResourceGroupArgs.builder()        
 *             .location(&#34;West Europe&#34;)
 *             .build());
 * 
 *         var remoteVirtualNetwork = new VirtualNetwork(&#34;remoteVirtualNetwork&#34;, VirtualNetworkArgs.builder()        
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .addressSpaces(&#34;10.0.1.0/24&#34;)
 *             .location(exampleResourceGroup.location())
 *             .build());
 * 
 *         var exampleWorkspace = new Workspace(&#34;exampleWorkspace&#34;, WorkspaceArgs.builder()        
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .location(exampleResourceGroup.location())
 *             .sku(&#34;standard&#34;)
 *             .build());
 * 
 *         var exampleVirtualNetworkPeering = new VirtualNetworkPeering(&#34;exampleVirtualNetworkPeering&#34;, VirtualNetworkPeeringArgs.builder()        
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .workspaceId(exampleWorkspace.id())
 *             .remoteAddressSpacePrefixes(remoteVirtualNetwork.addressSpaces())
 *             .remoteVirtualNetworkId(remoteVirtualNetwork.id())
 *             .allowVirtualNetworkAccess(true)
 *             .build());
 * 
 *         var remoteVirtualNetworkPeering = new VirtualNetworkPeering(&#34;remoteVirtualNetworkPeering&#34;, VirtualNetworkPeeringArgs.builder()        
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .virtualNetworkName(remoteVirtualNetwork.name())
 *             .remoteVirtualNetworkId(exampleVirtualNetworkPeering.virtualNetworkId())
 *             .allowVirtualNetworkAccess(true)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Databrick Virtual Network Peerings can be imported using the `resource id`, e.g.
 * 
 * ```sh
 *  $ pulumi import azure:databricks/virtualNetworkPeering:VirtualNetworkPeering example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Databricks/workspaces/workspace1/virtualNetworkPeerings/peering1
 * ```
 * 
 */
@ResourceType(type="azure:databricks/virtualNetworkPeering:VirtualNetworkPeering")
public class VirtualNetworkPeering extends com.pulumi.resources.CustomResource {
    /**
     * A list of address blocks reserved for this virtual network in CIDR notation.
     * 
     */
    @Export(name="addressSpacePrefixes", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> addressSpacePrefixes;

    /**
     * @return A list of address blocks reserved for this virtual network in CIDR notation.
     * 
     */
    public Output<List<String>> addressSpacePrefixes() {
        return this.addressSpacePrefixes;
    }
    /**
     * Can the forwarded traffic from the VMs in the local virtual network be forwarded to the remote virtual network? Defaults to `false`.
     * 
     */
    @Export(name="allowForwardedTraffic", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> allowForwardedTraffic;

    /**
     * @return Can the forwarded traffic from the VMs in the local virtual network be forwarded to the remote virtual network? Defaults to `false`.
     * 
     */
    public Output<Optional<Boolean>> allowForwardedTraffic() {
        return Codegen.optional(this.allowForwardedTraffic);
    }
    /**
     * Can the gateway links be used in the remote virtual network to link to the Databricks virtual network? Defaults to `false`.
     * 
     */
    @Export(name="allowGatewayTransit", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> allowGatewayTransit;

    /**
     * @return Can the gateway links be used in the remote virtual network to link to the Databricks virtual network? Defaults to `false`.
     * 
     */
    public Output<Optional<Boolean>> allowGatewayTransit() {
        return Codegen.optional(this.allowGatewayTransit);
    }
    /**
     * Can the VMs in the local virtual network space access the VMs in the remote virtual network space? Defaults to `true`.
     * 
     */
    @Export(name="allowVirtualNetworkAccess", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> allowVirtualNetworkAccess;

    /**
     * @return Can the VMs in the local virtual network space access the VMs in the remote virtual network space? Defaults to `true`.
     * 
     */
    public Output<Optional<Boolean>> allowVirtualNetworkAccess() {
        return Codegen.optional(this.allowVirtualNetworkAccess);
    }
    /**
     * Specifies the name of the Databricks Virtual Network Peering resource. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Specifies the name of the Databricks Virtual Network Peering resource. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * A list of address blocks reserved for the remote virtual network in CIDR notation. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="remoteAddressSpacePrefixes", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> remoteAddressSpacePrefixes;

    /**
     * @return A list of address blocks reserved for the remote virtual network in CIDR notation. Changing this forces a new resource to be created.
     * 
     */
    public Output<List<String>> remoteAddressSpacePrefixes() {
        return this.remoteAddressSpacePrefixes;
    }
    /**
     * The ID of the remote virtual network. Changing this forces a new resource to be created.
     * 
     * &gt; **NOTE:** The remote virtual network should be in the same region as the databricks workspace. Please see the [product documentation](https://learn.microsoft.com/azure/databricks/administration-guide/cloud-configurations/azure/vnet-peering) for more information.
     * 
     */
    @Export(name="remoteVirtualNetworkId", refs={String.class}, tree="[0]")
    private Output<String> remoteVirtualNetworkId;

    /**
     * @return The ID of the remote virtual network. Changing this forces a new resource to be created.
     * 
     * &gt; **NOTE:** The remote virtual network should be in the same region as the databricks workspace. Please see the [product documentation](https://learn.microsoft.com/azure/databricks/administration-guide/cloud-configurations/azure/vnet-peering) for more information.
     * 
     */
    public Output<String> remoteVirtualNetworkId() {
        return this.remoteVirtualNetworkId;
    }
    /**
     * The name of the Resource Group in which the Databricks Virtual Network Peering should exist. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="resourceGroupName", refs={String.class}, tree="[0]")
    private Output<String> resourceGroupName;

    /**
     * @return The name of the Resource Group in which the Databricks Virtual Network Peering should exist. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * Can remote gateways be used on the Databricks virtual network? Defaults to `false`.
     * 
     * &gt; **NOTE:** If the `use_remote_gateways` is set to `true`, and `allow_gateway_transit` on the remote peering is also `true`, the virtual network will use the gateways of the remote virtual network for transit. Only one peering can have this flag set to `true`. `use_remote_gateways` cannot be set if the virtual network already has a gateway.
     * 
     */
    @Export(name="useRemoteGateways", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> useRemoteGateways;

    /**
     * @return Can remote gateways be used on the Databricks virtual network? Defaults to `false`.
     * 
     * &gt; **NOTE:** If the `use_remote_gateways` is set to `true`, and `allow_gateway_transit` on the remote peering is also `true`, the virtual network will use the gateways of the remote virtual network for transit. Only one peering can have this flag set to `true`. `use_remote_gateways` cannot be set if the virtual network already has a gateway.
     * 
     */
    public Output<Optional<Boolean>> useRemoteGateways() {
        return Codegen.optional(this.useRemoteGateways);
    }
    /**
     * The ID of the internal Virtual Network used by the DataBricks Workspace.
     * 
     * &gt; **NOTE:** The `virtual_network_id` field is the value you must supply to the `azure.network.VirtualNetworkPeering` resources `remote_virtual_network_id` field to successfully peer the Databricks Virtual Network with the remote virtual network.
     * 
     */
    @Export(name="virtualNetworkId", refs={String.class}, tree="[0]")
    private Output<String> virtualNetworkId;

    /**
     * @return The ID of the internal Virtual Network used by the DataBricks Workspace.
     * 
     * &gt; **NOTE:** The `virtual_network_id` field is the value you must supply to the `azure.network.VirtualNetworkPeering` resources `remote_virtual_network_id` field to successfully peer the Databricks Virtual Network with the remote virtual network.
     * 
     */
    public Output<String> virtualNetworkId() {
        return this.virtualNetworkId;
    }
    /**
     * The ID of the Databricks Workspace that this Databricks Virtual Network Peering is bound. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="workspaceId", refs={String.class}, tree="[0]")
    private Output<String> workspaceId;

    /**
     * @return The ID of the Databricks Workspace that this Databricks Virtual Network Peering is bound. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> workspaceId() {
        return this.workspaceId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public VirtualNetworkPeering(String name) {
        this(name, VirtualNetworkPeeringArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public VirtualNetworkPeering(String name, VirtualNetworkPeeringArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public VirtualNetworkPeering(String name, VirtualNetworkPeeringArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:databricks/virtualNetworkPeering:VirtualNetworkPeering", name, args == null ? VirtualNetworkPeeringArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private VirtualNetworkPeering(String name, Output<String> id, @Nullable VirtualNetworkPeeringState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:databricks/virtualNetworkPeering:VirtualNetworkPeering", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static VirtualNetworkPeering get(String name, Output<String> id, @Nullable VirtualNetworkPeeringState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new VirtualNetworkPeering(name, id, state, options);
    }
}
