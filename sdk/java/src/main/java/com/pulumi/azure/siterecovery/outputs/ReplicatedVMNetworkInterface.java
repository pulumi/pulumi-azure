// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.siterecovery.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ReplicatedVMNetworkInterface {
    /**
     * @return Id of the public IP object to use when a failover is done.
     * 
     */
    private final @Nullable String recoveryPublicIpAddressId;
    /**
     * @return Id source network interface.
     * 
     */
    private final @Nullable String sourceNetworkInterfaceId;
    /**
     * @return Static IP to assign when a failover is done.
     * 
     */
    private final @Nullable String targetStaticIp;
    /**
     * @return Name of the subnet to to use when a failover is done.
     * 
     */
    private final @Nullable String targetSubnetName;

    @CustomType.Constructor
    private ReplicatedVMNetworkInterface(
        @CustomType.Parameter("recoveryPublicIpAddressId") @Nullable String recoveryPublicIpAddressId,
        @CustomType.Parameter("sourceNetworkInterfaceId") @Nullable String sourceNetworkInterfaceId,
        @CustomType.Parameter("targetStaticIp") @Nullable String targetStaticIp,
        @CustomType.Parameter("targetSubnetName") @Nullable String targetSubnetName) {
        this.recoveryPublicIpAddressId = recoveryPublicIpAddressId;
        this.sourceNetworkInterfaceId = sourceNetworkInterfaceId;
        this.targetStaticIp = targetStaticIp;
        this.targetSubnetName = targetSubnetName;
    }

    /**
     * @return Id of the public IP object to use when a failover is done.
     * 
     */
    public Optional<String> recoveryPublicIpAddressId() {
        return Optional.ofNullable(this.recoveryPublicIpAddressId);
    }
    /**
     * @return Id source network interface.
     * 
     */
    public Optional<String> sourceNetworkInterfaceId() {
        return Optional.ofNullable(this.sourceNetworkInterfaceId);
    }
    /**
     * @return Static IP to assign when a failover is done.
     * 
     */
    public Optional<String> targetStaticIp() {
        return Optional.ofNullable(this.targetStaticIp);
    }
    /**
     * @return Name of the subnet to to use when a failover is done.
     * 
     */
    public Optional<String> targetSubnetName() {
        return Optional.ofNullable(this.targetSubnetName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ReplicatedVMNetworkInterface defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String recoveryPublicIpAddressId;
        private @Nullable String sourceNetworkInterfaceId;
        private @Nullable String targetStaticIp;
        private @Nullable String targetSubnetName;

        public Builder() {
    	      // Empty
        }

        public Builder(ReplicatedVMNetworkInterface defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.recoveryPublicIpAddressId = defaults.recoveryPublicIpAddressId;
    	      this.sourceNetworkInterfaceId = defaults.sourceNetworkInterfaceId;
    	      this.targetStaticIp = defaults.targetStaticIp;
    	      this.targetSubnetName = defaults.targetSubnetName;
        }

        public Builder recoveryPublicIpAddressId(@Nullable String recoveryPublicIpAddressId) {
            this.recoveryPublicIpAddressId = recoveryPublicIpAddressId;
            return this;
        }
        public Builder sourceNetworkInterfaceId(@Nullable String sourceNetworkInterfaceId) {
            this.sourceNetworkInterfaceId = sourceNetworkInterfaceId;
            return this;
        }
        public Builder targetStaticIp(@Nullable String targetStaticIp) {
            this.targetStaticIp = targetStaticIp;
            return this;
        }
        public Builder targetSubnetName(@Nullable String targetSubnetName) {
            this.targetSubnetName = targetSubnetName;
            return this;
        }        public ReplicatedVMNetworkInterface build() {
            return new ReplicatedVMNetworkInterface(recoveryPublicIpAddressId, sourceNetworkInterfaceId, targetStaticIp, targetSubnetName);
        }
    }
}
