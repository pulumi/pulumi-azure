// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.privatedns.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LinkServiceNatIpConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final LinkServiceNatIpConfigurationArgs Empty = new LinkServiceNatIpConfigurationArgs();

    /**
     * Specifies the name which should be used for the NAT IP Configuration. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Specifies the name which should be used for the NAT IP Configuration. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Is this is the Primary IP Configuration? Changing this forces a new resource to be created.
     * 
     */
    @Import(name="primary", required=true)
    private Output<Boolean> primary;

    /**
     * @return Is this is the Primary IP Configuration? Changing this forces a new resource to be created.
     * 
     */
    public Output<Boolean> primary() {
        return this.primary;
    }

    /**
     * Specifies a Private Static IP Address for this IP Configuration.
     * 
     */
    @Import(name="privateIpAddress")
    private @Nullable Output<String> privateIpAddress;

    /**
     * @return Specifies a Private Static IP Address for this IP Configuration.
     * 
     */
    public Optional<Output<String>> privateIpAddress() {
        return Optional.ofNullable(this.privateIpAddress);
    }

    /**
     * The version of the IP Protocol which should be used. At this time the only supported value is `IPv4`. Defaults to `IPv4`.
     * 
     */
    @Import(name="privateIpAddressVersion")
    private @Nullable Output<String> privateIpAddressVersion;

    /**
     * @return The version of the IP Protocol which should be used. At this time the only supported value is `IPv4`. Defaults to `IPv4`.
     * 
     */
    public Optional<Output<String>> privateIpAddressVersion() {
        return Optional.ofNullable(this.privateIpAddressVersion);
    }

    /**
     * Specifies the ID of the Subnet which should be used for the Private Link Service.
     * 
     * &gt; **NOTE:** Verify that the Subnet&#39;s `enforce_private_link_service_network_policies` attribute is set to `true`.
     * 
     */
    @Import(name="subnetId", required=true)
    private Output<String> subnetId;

    /**
     * @return Specifies the ID of the Subnet which should be used for the Private Link Service.
     * 
     * &gt; **NOTE:** Verify that the Subnet&#39;s `enforce_private_link_service_network_policies` attribute is set to `true`.
     * 
     */
    public Output<String> subnetId() {
        return this.subnetId;
    }

    private LinkServiceNatIpConfigurationArgs() {}

    private LinkServiceNatIpConfigurationArgs(LinkServiceNatIpConfigurationArgs $) {
        this.name = $.name;
        this.primary = $.primary;
        this.privateIpAddress = $.privateIpAddress;
        this.privateIpAddressVersion = $.privateIpAddressVersion;
        this.subnetId = $.subnetId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LinkServiceNatIpConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LinkServiceNatIpConfigurationArgs $;

        public Builder() {
            $ = new LinkServiceNatIpConfigurationArgs();
        }

        public Builder(LinkServiceNatIpConfigurationArgs defaults) {
            $ = new LinkServiceNatIpConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name Specifies the name which should be used for the NAT IP Configuration. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name which should be used for the NAT IP Configuration. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param primary Is this is the Primary IP Configuration? Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder primary(Output<Boolean> primary) {
            $.primary = primary;
            return this;
        }

        /**
         * @param primary Is this is the Primary IP Configuration? Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder primary(Boolean primary) {
            return primary(Output.of(primary));
        }

        /**
         * @param privateIpAddress Specifies a Private Static IP Address for this IP Configuration.
         * 
         * @return builder
         * 
         */
        public Builder privateIpAddress(@Nullable Output<String> privateIpAddress) {
            $.privateIpAddress = privateIpAddress;
            return this;
        }

        /**
         * @param privateIpAddress Specifies a Private Static IP Address for this IP Configuration.
         * 
         * @return builder
         * 
         */
        public Builder privateIpAddress(String privateIpAddress) {
            return privateIpAddress(Output.of(privateIpAddress));
        }

        /**
         * @param privateIpAddressVersion The version of the IP Protocol which should be used. At this time the only supported value is `IPv4`. Defaults to `IPv4`.
         * 
         * @return builder
         * 
         */
        public Builder privateIpAddressVersion(@Nullable Output<String> privateIpAddressVersion) {
            $.privateIpAddressVersion = privateIpAddressVersion;
            return this;
        }

        /**
         * @param privateIpAddressVersion The version of the IP Protocol which should be used. At this time the only supported value is `IPv4`. Defaults to `IPv4`.
         * 
         * @return builder
         * 
         */
        public Builder privateIpAddressVersion(String privateIpAddressVersion) {
            return privateIpAddressVersion(Output.of(privateIpAddressVersion));
        }

        /**
         * @param subnetId Specifies the ID of the Subnet which should be used for the Private Link Service.
         * 
         * &gt; **NOTE:** Verify that the Subnet&#39;s `enforce_private_link_service_network_policies` attribute is set to `true`.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        /**
         * @param subnetId Specifies the ID of the Subnet which should be used for the Private Link Service.
         * 
         * &gt; **NOTE:** Verify that the Subnet&#39;s `enforce_private_link_service_network_policies` attribute is set to `true`.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        public LinkServiceNatIpConfigurationArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("LinkServiceNatIpConfigurationArgs", "name");
            }
            if ($.primary == null) {
                throw new MissingRequiredPropertyException("LinkServiceNatIpConfigurationArgs", "primary");
            }
            if ($.subnetId == null) {
                throw new MissingRequiredPropertyException("LinkServiceNatIpConfigurationArgs", "subnetId");
            }
            return $;
        }
    }

}
