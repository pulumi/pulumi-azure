// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.maintenance.outputs;

import com.pulumi.azure.maintenance.outputs.ConfigurationInstallPatchesLinux;
import com.pulumi.azure.maintenance.outputs.ConfigurationInstallPatchesWindow;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ConfigurationInstallPatches {
    /**
     * @return A `linux` block as defined above. This property only applies when `scope` is set to `InGuestPatch`
     * 
     */
    private @Nullable List<ConfigurationInstallPatchesLinux> linuxes;
    /**
     * @return Possible reboot preference as defined by the user based on which it would be decided to reboot the machine or not after the patch operation is completed. Possible values are `Always`, `IfRequired` and `Never`. This property only applies when `scope` is set to `InGuestPatch`.
     * 
     */
    private @Nullable String reboot;
    /**
     * @return A `windows` block as defined above. This property only applies when `scope` is set to `InGuestPatch`
     * 
     */
    private @Nullable List<ConfigurationInstallPatchesWindow> windows;

    private ConfigurationInstallPatches() {}
    /**
     * @return A `linux` block as defined above. This property only applies when `scope` is set to `InGuestPatch`
     * 
     */
    public List<ConfigurationInstallPatchesLinux> linuxes() {
        return this.linuxes == null ? List.of() : this.linuxes;
    }
    /**
     * @return Possible reboot preference as defined by the user based on which it would be decided to reboot the machine or not after the patch operation is completed. Possible values are `Always`, `IfRequired` and `Never`. This property only applies when `scope` is set to `InGuestPatch`.
     * 
     */
    public Optional<String> reboot() {
        return Optional.ofNullable(this.reboot);
    }
    /**
     * @return A `windows` block as defined above. This property only applies when `scope` is set to `InGuestPatch`
     * 
     */
    public List<ConfigurationInstallPatchesWindow> windows() {
        return this.windows == null ? List.of() : this.windows;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConfigurationInstallPatches defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<ConfigurationInstallPatchesLinux> linuxes;
        private @Nullable String reboot;
        private @Nullable List<ConfigurationInstallPatchesWindow> windows;
        public Builder() {}
        public Builder(ConfigurationInstallPatches defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.linuxes = defaults.linuxes;
    	      this.reboot = defaults.reboot;
    	      this.windows = defaults.windows;
        }

        @CustomType.Setter
        public Builder linuxes(@Nullable List<ConfigurationInstallPatchesLinux> linuxes) {

            this.linuxes = linuxes;
            return this;
        }
        public Builder linuxes(ConfigurationInstallPatchesLinux... linuxes) {
            return linuxes(List.of(linuxes));
        }
        @CustomType.Setter
        public Builder reboot(@Nullable String reboot) {

            this.reboot = reboot;
            return this;
        }
        @CustomType.Setter
        public Builder windows(@Nullable List<ConfigurationInstallPatchesWindow> windows) {

            this.windows = windows;
            return this;
        }
        public Builder windows(ConfigurationInstallPatchesWindow... windows) {
            return windows(List.of(windows));
        }
        public ConfigurationInstallPatches build() {
            final var _resultValue = new ConfigurationInstallPatches();
            _resultValue.linuxes = linuxes;
            _resultValue.reboot = reboot;
            _resultValue.windows = windows;
            return _resultValue;
        }
    }
}
