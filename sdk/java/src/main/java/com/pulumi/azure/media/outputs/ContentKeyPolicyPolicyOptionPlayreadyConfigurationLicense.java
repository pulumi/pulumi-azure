// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.media.outputs;

import com.pulumi.azure.media.outputs.ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense {
    /**
     * @return A flag indicating whether test devices can use the license.
     * 
     */
    private @Nullable Boolean allowTestDevices;
    /**
     * @return The begin date of license.
     * 
     */
    private @Nullable String beginDate;
    /**
     * @return Specifies that the content key ID is in the PlayReady header.
     * 
     */
    private @Nullable Boolean contentKeyLocationFromHeaderEnabled;
    /**
     * @return The content key ID. Specifies that the content key ID is specified in the PlayReady configuration.
     * 
     * &gt; **NOTE:** You can only specify one content key location. For example if you specify `content_key_location_from_header_enabled` in true, you shouldn&#39;t specify `content_key_location_from_key_id` and vice versa.
     * 
     */
    private @Nullable String contentKeyLocationFromKeyId;
    /**
     * @return The PlayReady content type. Supported values are `UltraVioletDownload`, `UltraVioletStreaming` or `Unspecified`.
     * 
     */
    private @Nullable String contentType;
    /**
     * @return The expiration date of license.
     * 
     */
    private @Nullable String expirationDate;
    /**
     * @return The grace period of license.
     * 
     */
    private @Nullable String gracePeriod;
    /**
     * @return The license type. Supported values are `NonPersistent` or `Persistent`.
     * 
     */
    private @Nullable String licenseType;
    /**
     * @return A `play_right` block as defined above.
     * 
     */
    private @Nullable ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight playRight;
    /**
     * @return The relative begin date of license.
     * 
     */
    private @Nullable String relativeBeginDate;
    /**
     * @return The relative expiration date of license.
     * 
     */
    private @Nullable String relativeExpirationDate;
    /**
     * @return The security level of the PlayReady license. Possible values are `SL150`, `SL2000` and `SL3000`. Please see [this document](https://learn.microsoft.com/en-us/rest/api/media/content-key-policies/create-or-update?tabs=HTTP#securitylevel) for more information about security level. See [this document](https://learn.microsoft.com/en-us/azure/media-services/latest/drm-playready-license-template-concept#playready-sl3000-support) for more information about `SL3000` support.
     * 
     */
    private @Nullable String securityLevel;

    private ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense() {}
    /**
     * @return A flag indicating whether test devices can use the license.
     * 
     */
    public Optional<Boolean> allowTestDevices() {
        return Optional.ofNullable(this.allowTestDevices);
    }
    /**
     * @return The begin date of license.
     * 
     */
    public Optional<String> beginDate() {
        return Optional.ofNullable(this.beginDate);
    }
    /**
     * @return Specifies that the content key ID is in the PlayReady header.
     * 
     */
    public Optional<Boolean> contentKeyLocationFromHeaderEnabled() {
        return Optional.ofNullable(this.contentKeyLocationFromHeaderEnabled);
    }
    /**
     * @return The content key ID. Specifies that the content key ID is specified in the PlayReady configuration.
     * 
     * &gt; **NOTE:** You can only specify one content key location. For example if you specify `content_key_location_from_header_enabled` in true, you shouldn&#39;t specify `content_key_location_from_key_id` and vice versa.
     * 
     */
    public Optional<String> contentKeyLocationFromKeyId() {
        return Optional.ofNullable(this.contentKeyLocationFromKeyId);
    }
    /**
     * @return The PlayReady content type. Supported values are `UltraVioletDownload`, `UltraVioletStreaming` or `Unspecified`.
     * 
     */
    public Optional<String> contentType() {
        return Optional.ofNullable(this.contentType);
    }
    /**
     * @return The expiration date of license.
     * 
     */
    public Optional<String> expirationDate() {
        return Optional.ofNullable(this.expirationDate);
    }
    /**
     * @return The grace period of license.
     * 
     */
    public Optional<String> gracePeriod() {
        return Optional.ofNullable(this.gracePeriod);
    }
    /**
     * @return The license type. Supported values are `NonPersistent` or `Persistent`.
     * 
     */
    public Optional<String> licenseType() {
        return Optional.ofNullable(this.licenseType);
    }
    /**
     * @return A `play_right` block as defined above.
     * 
     */
    public Optional<ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight> playRight() {
        return Optional.ofNullable(this.playRight);
    }
    /**
     * @return The relative begin date of license.
     * 
     */
    public Optional<String> relativeBeginDate() {
        return Optional.ofNullable(this.relativeBeginDate);
    }
    /**
     * @return The relative expiration date of license.
     * 
     */
    public Optional<String> relativeExpirationDate() {
        return Optional.ofNullable(this.relativeExpirationDate);
    }
    /**
     * @return The security level of the PlayReady license. Possible values are `SL150`, `SL2000` and `SL3000`. Please see [this document](https://learn.microsoft.com/en-us/rest/api/media/content-key-policies/create-or-update?tabs=HTTP#securitylevel) for more information about security level. See [this document](https://learn.microsoft.com/en-us/azure/media-services/latest/drm-playready-license-template-concept#playready-sl3000-support) for more information about `SL3000` support.
     * 
     */
    public Optional<String> securityLevel() {
        return Optional.ofNullable(this.securityLevel);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean allowTestDevices;
        private @Nullable String beginDate;
        private @Nullable Boolean contentKeyLocationFromHeaderEnabled;
        private @Nullable String contentKeyLocationFromKeyId;
        private @Nullable String contentType;
        private @Nullable String expirationDate;
        private @Nullable String gracePeriod;
        private @Nullable String licenseType;
        private @Nullable ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight playRight;
        private @Nullable String relativeBeginDate;
        private @Nullable String relativeExpirationDate;
        private @Nullable String securityLevel;
        public Builder() {}
        public Builder(ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowTestDevices = defaults.allowTestDevices;
    	      this.beginDate = defaults.beginDate;
    	      this.contentKeyLocationFromHeaderEnabled = defaults.contentKeyLocationFromHeaderEnabled;
    	      this.contentKeyLocationFromKeyId = defaults.contentKeyLocationFromKeyId;
    	      this.contentType = defaults.contentType;
    	      this.expirationDate = defaults.expirationDate;
    	      this.gracePeriod = defaults.gracePeriod;
    	      this.licenseType = defaults.licenseType;
    	      this.playRight = defaults.playRight;
    	      this.relativeBeginDate = defaults.relativeBeginDate;
    	      this.relativeExpirationDate = defaults.relativeExpirationDate;
    	      this.securityLevel = defaults.securityLevel;
        }

        @CustomType.Setter
        public Builder allowTestDevices(@Nullable Boolean allowTestDevices) {

            this.allowTestDevices = allowTestDevices;
            return this;
        }
        @CustomType.Setter
        public Builder beginDate(@Nullable String beginDate) {

            this.beginDate = beginDate;
            return this;
        }
        @CustomType.Setter
        public Builder contentKeyLocationFromHeaderEnabled(@Nullable Boolean contentKeyLocationFromHeaderEnabled) {

            this.contentKeyLocationFromHeaderEnabled = contentKeyLocationFromHeaderEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder contentKeyLocationFromKeyId(@Nullable String contentKeyLocationFromKeyId) {

            this.contentKeyLocationFromKeyId = contentKeyLocationFromKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder contentType(@Nullable String contentType) {

            this.contentType = contentType;
            return this;
        }
        @CustomType.Setter
        public Builder expirationDate(@Nullable String expirationDate) {

            this.expirationDate = expirationDate;
            return this;
        }
        @CustomType.Setter
        public Builder gracePeriod(@Nullable String gracePeriod) {

            this.gracePeriod = gracePeriod;
            return this;
        }
        @CustomType.Setter
        public Builder licenseType(@Nullable String licenseType) {

            this.licenseType = licenseType;
            return this;
        }
        @CustomType.Setter
        public Builder playRight(@Nullable ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight playRight) {

            this.playRight = playRight;
            return this;
        }
        @CustomType.Setter
        public Builder relativeBeginDate(@Nullable String relativeBeginDate) {

            this.relativeBeginDate = relativeBeginDate;
            return this;
        }
        @CustomType.Setter
        public Builder relativeExpirationDate(@Nullable String relativeExpirationDate) {

            this.relativeExpirationDate = relativeExpirationDate;
            return this;
        }
        @CustomType.Setter
        public Builder securityLevel(@Nullable String securityLevel) {

            this.securityLevel = securityLevel;
            return this;
        }
        public ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense build() {
            final var _resultValue = new ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense();
            _resultValue.allowTestDevices = allowTestDevices;
            _resultValue.beginDate = beginDate;
            _resultValue.contentKeyLocationFromHeaderEnabled = contentKeyLocationFromHeaderEnabled;
            _resultValue.contentKeyLocationFromKeyId = contentKeyLocationFromKeyId;
            _resultValue.contentType = contentType;
            _resultValue.expirationDate = expirationDate;
            _resultValue.gracePeriod = gracePeriod;
            _resultValue.licenseType = licenseType;
            _resultValue.playRight = playRight;
            _resultValue.relativeBeginDate = relativeBeginDate;
            _resultValue.relativeExpirationDate = relativeExpirationDate;
            _resultValue.securityLevel = securityLevel;
            return _resultValue;
        }
    }
}
