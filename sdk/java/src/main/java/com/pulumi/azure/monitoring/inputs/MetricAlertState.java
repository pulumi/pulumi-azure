// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.monitoring.inputs;

import com.pulumi.azure.monitoring.inputs.MetricAlertActionArgs;
import com.pulumi.azure.monitoring.inputs.MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaArgs;
import com.pulumi.azure.monitoring.inputs.MetricAlertCriteriaArgs;
import com.pulumi.azure.monitoring.inputs.MetricAlertDynamicCriteriaArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MetricAlertState extends com.pulumi.resources.ResourceArgs {

    public static final MetricAlertState Empty = new MetricAlertState();

    /**
     * One or more `action` blocks as defined below.
     * 
     */
    @Import(name="actions")
    private @Nullable Output<List<MetricAlertActionArgs>> actions;

    /**
     * @return One or more `action` blocks as defined below.
     * 
     */
    public Optional<Output<List<MetricAlertActionArgs>>> actions() {
        return Optional.ofNullable(this.actions);
    }

    /**
     * A `application_insights_web_test_location_availability_criteria` block as defined below.
     * 
     */
    @Import(name="applicationInsightsWebTestLocationAvailabilityCriteria")
    private @Nullable Output<MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaArgs> applicationInsightsWebTestLocationAvailabilityCriteria;

    /**
     * @return A `application_insights_web_test_location_availability_criteria` block as defined below.
     * 
     */
    public Optional<Output<MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaArgs>> applicationInsightsWebTestLocationAvailabilityCriteria() {
        return Optional.ofNullable(this.applicationInsightsWebTestLocationAvailabilityCriteria);
    }

    /**
     * Should the alerts in this Metric Alert be auto resolved? Defaults to `true`.
     * 
     */
    @Import(name="autoMitigate")
    private @Nullable Output<Boolean> autoMitigate;

    /**
     * @return Should the alerts in this Metric Alert be auto resolved? Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> autoMitigate() {
        return Optional.ofNullable(this.autoMitigate);
    }

    /**
     * One or more (static) `criteria` blocks as defined below.
     * 
     */
    @Import(name="criterias")
    private @Nullable Output<List<MetricAlertCriteriaArgs>> criterias;

    /**
     * @return One or more (static) `criteria` blocks as defined below.
     * 
     */
    public Optional<Output<List<MetricAlertCriteriaArgs>>> criterias() {
        return Optional.ofNullable(this.criterias);
    }

    /**
     * The description of this Metric Alert.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of this Metric Alert.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * A `dynamic_criteria` block as defined below.
     * 
     */
    @Import(name="dynamicCriteria")
    private @Nullable Output<MetricAlertDynamicCriteriaArgs> dynamicCriteria;

    /**
     * @return A `dynamic_criteria` block as defined below.
     * 
     */
    public Optional<Output<MetricAlertDynamicCriteriaArgs>> dynamicCriteria() {
        return Optional.ofNullable(this.dynamicCriteria);
    }

    /**
     * Should this Metric Alert be enabled? Defaults to `true`.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Should this Metric Alert be enabled? Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The evaluation frequency of this Metric Alert, represented in ISO 8601 duration format. Possible values are `PT1M`, `PT5M`, `PT15M`, `PT30M` and `PT1H`. Defaults to `PT1M`.
     * 
     */
    @Import(name="frequency")
    private @Nullable Output<String> frequency;

    /**
     * @return The evaluation frequency of this Metric Alert, represented in ISO 8601 duration format. Possible values are `PT1M`, `PT5M`, `PT15M`, `PT30M` and `PT1H`. Defaults to `PT1M`.
     * 
     */
    public Optional<Output<String>> frequency() {
        return Optional.ofNullable(this.frequency);
    }

    /**
     * The name of the Metric Alert. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the Metric Alert. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The name of the resource group in which to create the Metric Alert instance.
     * 
     */
    @Import(name="resourceGroupName")
    private @Nullable Output<String> resourceGroupName;

    /**
     * @return The name of the resource group in which to create the Metric Alert instance.
     * 
     */
    public Optional<Output<String>> resourceGroupName() {
        return Optional.ofNullable(this.resourceGroupName);
    }

    /**
     * A set of strings of resource IDs at which the metric criteria should be applied.
     * 
     */
    @Import(name="scopes")
    private @Nullable Output<List<String>> scopes;

    /**
     * @return A set of strings of resource IDs at which the metric criteria should be applied.
     * 
     */
    public Optional<Output<List<String>>> scopes() {
        return Optional.ofNullable(this.scopes);
    }

    /**
     * The severity of this Metric Alert. Possible values are `0`, `1`, `2`, `3` and `4`. Defaults to `3`.
     * 
     */
    @Import(name="severity")
    private @Nullable Output<Integer> severity;

    /**
     * @return The severity of this Metric Alert. Possible values are `0`, `1`, `2`, `3` and `4`. Defaults to `3`.
     * 
     */
    public Optional<Output<Integer>> severity() {
        return Optional.ofNullable(this.severity);
    }

    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The location of the target resource.
     * 
     */
    @Import(name="targetResourceLocation")
    private @Nullable Output<String> targetResourceLocation;

    /**
     * @return The location of the target resource.
     * 
     */
    public Optional<Output<String>> targetResourceLocation() {
        return Optional.ofNullable(this.targetResourceLocation);
    }

    /**
     * The resource type (e.g. `Microsoft.Compute/virtualMachines`) of the target resource.
     * 
     */
    @Import(name="targetResourceType")
    private @Nullable Output<String> targetResourceType;

    /**
     * @return The resource type (e.g. `Microsoft.Compute/virtualMachines`) of the target resource.
     * 
     */
    public Optional<Output<String>> targetResourceType() {
        return Optional.ofNullable(this.targetResourceType);
    }

    /**
     * The period of time that is used to monitor alert activity, represented in ISO 8601 duration format. This value must be greater than `frequency`. Possible values are `PT1M`, `PT5M`, `PT15M`, `PT30M`, `PT1H`, `PT6H`, `PT12H` and `P1D`. Defaults to `PT5M`.
     * 
     */
    @Import(name="windowSize")
    private @Nullable Output<String> windowSize;

    /**
     * @return The period of time that is used to monitor alert activity, represented in ISO 8601 duration format. This value must be greater than `frequency`. Possible values are `PT1M`, `PT5M`, `PT15M`, `PT30M`, `PT1H`, `PT6H`, `PT12H` and `P1D`. Defaults to `PT5M`.
     * 
     */
    public Optional<Output<String>> windowSize() {
        return Optional.ofNullable(this.windowSize);
    }

    private MetricAlertState() {}

    private MetricAlertState(MetricAlertState $) {
        this.actions = $.actions;
        this.applicationInsightsWebTestLocationAvailabilityCriteria = $.applicationInsightsWebTestLocationAvailabilityCriteria;
        this.autoMitigate = $.autoMitigate;
        this.criterias = $.criterias;
        this.description = $.description;
        this.dynamicCriteria = $.dynamicCriteria;
        this.enabled = $.enabled;
        this.frequency = $.frequency;
        this.name = $.name;
        this.resourceGroupName = $.resourceGroupName;
        this.scopes = $.scopes;
        this.severity = $.severity;
        this.tags = $.tags;
        this.targetResourceLocation = $.targetResourceLocation;
        this.targetResourceType = $.targetResourceType;
        this.windowSize = $.windowSize;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MetricAlertState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MetricAlertState $;

        public Builder() {
            $ = new MetricAlertState();
        }

        public Builder(MetricAlertState defaults) {
            $ = new MetricAlertState(Objects.requireNonNull(defaults));
        }

        /**
         * @param actions One or more `action` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder actions(@Nullable Output<List<MetricAlertActionArgs>> actions) {
            $.actions = actions;
            return this;
        }

        /**
         * @param actions One or more `action` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder actions(List<MetricAlertActionArgs> actions) {
            return actions(Output.of(actions));
        }

        /**
         * @param actions One or more `action` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder actions(MetricAlertActionArgs... actions) {
            return actions(List.of(actions));
        }

        /**
         * @param applicationInsightsWebTestLocationAvailabilityCriteria A `application_insights_web_test_location_availability_criteria` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder applicationInsightsWebTestLocationAvailabilityCriteria(@Nullable Output<MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaArgs> applicationInsightsWebTestLocationAvailabilityCriteria) {
            $.applicationInsightsWebTestLocationAvailabilityCriteria = applicationInsightsWebTestLocationAvailabilityCriteria;
            return this;
        }

        /**
         * @param applicationInsightsWebTestLocationAvailabilityCriteria A `application_insights_web_test_location_availability_criteria` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder applicationInsightsWebTestLocationAvailabilityCriteria(MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaArgs applicationInsightsWebTestLocationAvailabilityCriteria) {
            return applicationInsightsWebTestLocationAvailabilityCriteria(Output.of(applicationInsightsWebTestLocationAvailabilityCriteria));
        }

        /**
         * @param autoMitigate Should the alerts in this Metric Alert be auto resolved? Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder autoMitigate(@Nullable Output<Boolean> autoMitigate) {
            $.autoMitigate = autoMitigate;
            return this;
        }

        /**
         * @param autoMitigate Should the alerts in this Metric Alert be auto resolved? Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder autoMitigate(Boolean autoMitigate) {
            return autoMitigate(Output.of(autoMitigate));
        }

        /**
         * @param criterias One or more (static) `criteria` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder criterias(@Nullable Output<List<MetricAlertCriteriaArgs>> criterias) {
            $.criterias = criterias;
            return this;
        }

        /**
         * @param criterias One or more (static) `criteria` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder criterias(List<MetricAlertCriteriaArgs> criterias) {
            return criterias(Output.of(criterias));
        }

        /**
         * @param criterias One or more (static) `criteria` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder criterias(MetricAlertCriteriaArgs... criterias) {
            return criterias(List.of(criterias));
        }

        /**
         * @param description The description of this Metric Alert.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of this Metric Alert.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param dynamicCriteria A `dynamic_criteria` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder dynamicCriteria(@Nullable Output<MetricAlertDynamicCriteriaArgs> dynamicCriteria) {
            $.dynamicCriteria = dynamicCriteria;
            return this;
        }

        /**
         * @param dynamicCriteria A `dynamic_criteria` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder dynamicCriteria(MetricAlertDynamicCriteriaArgs dynamicCriteria) {
            return dynamicCriteria(Output.of(dynamicCriteria));
        }

        /**
         * @param enabled Should this Metric Alert be enabled? Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Should this Metric Alert be enabled? Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param frequency The evaluation frequency of this Metric Alert, represented in ISO 8601 duration format. Possible values are `PT1M`, `PT5M`, `PT15M`, `PT30M` and `PT1H`. Defaults to `PT1M`.
         * 
         * @return builder
         * 
         */
        public Builder frequency(@Nullable Output<String> frequency) {
            $.frequency = frequency;
            return this;
        }

        /**
         * @param frequency The evaluation frequency of this Metric Alert, represented in ISO 8601 duration format. Possible values are `PT1M`, `PT5M`, `PT15M`, `PT30M` and `PT1H`. Defaults to `PT1M`.
         * 
         * @return builder
         * 
         */
        public Builder frequency(String frequency) {
            return frequency(Output.of(frequency));
        }

        /**
         * @param name The name of the Metric Alert. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Metric Alert. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param resourceGroupName The name of the resource group in which to create the Metric Alert instance.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(@Nullable Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group in which to create the Metric Alert instance.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param scopes A set of strings of resource IDs at which the metric criteria should be applied.
         * 
         * @return builder
         * 
         */
        public Builder scopes(@Nullable Output<List<String>> scopes) {
            $.scopes = scopes;
            return this;
        }

        /**
         * @param scopes A set of strings of resource IDs at which the metric criteria should be applied.
         * 
         * @return builder
         * 
         */
        public Builder scopes(List<String> scopes) {
            return scopes(Output.of(scopes));
        }

        /**
         * @param scopes A set of strings of resource IDs at which the metric criteria should be applied.
         * 
         * @return builder
         * 
         */
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }

        /**
         * @param severity The severity of this Metric Alert. Possible values are `0`, `1`, `2`, `3` and `4`. Defaults to `3`.
         * 
         * @return builder
         * 
         */
        public Builder severity(@Nullable Output<Integer> severity) {
            $.severity = severity;
            return this;
        }

        /**
         * @param severity The severity of this Metric Alert. Possible values are `0`, `1`, `2`, `3` and `4`. Defaults to `3`.
         * 
         * @return builder
         * 
         */
        public Builder severity(Integer severity) {
            return severity(Output.of(severity));
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param targetResourceLocation The location of the target resource.
         * 
         * @return builder
         * 
         */
        public Builder targetResourceLocation(@Nullable Output<String> targetResourceLocation) {
            $.targetResourceLocation = targetResourceLocation;
            return this;
        }

        /**
         * @param targetResourceLocation The location of the target resource.
         * 
         * @return builder
         * 
         */
        public Builder targetResourceLocation(String targetResourceLocation) {
            return targetResourceLocation(Output.of(targetResourceLocation));
        }

        /**
         * @param targetResourceType The resource type (e.g. `Microsoft.Compute/virtualMachines`) of the target resource.
         * 
         * @return builder
         * 
         */
        public Builder targetResourceType(@Nullable Output<String> targetResourceType) {
            $.targetResourceType = targetResourceType;
            return this;
        }

        /**
         * @param targetResourceType The resource type (e.g. `Microsoft.Compute/virtualMachines`) of the target resource.
         * 
         * @return builder
         * 
         */
        public Builder targetResourceType(String targetResourceType) {
            return targetResourceType(Output.of(targetResourceType));
        }

        /**
         * @param windowSize The period of time that is used to monitor alert activity, represented in ISO 8601 duration format. This value must be greater than `frequency`. Possible values are `PT1M`, `PT5M`, `PT15M`, `PT30M`, `PT1H`, `PT6H`, `PT12H` and `P1D`. Defaults to `PT5M`.
         * 
         * @return builder
         * 
         */
        public Builder windowSize(@Nullable Output<String> windowSize) {
            $.windowSize = windowSize;
            return this;
        }

        /**
         * @param windowSize The period of time that is used to monitor alert activity, represented in ISO 8601 duration format. This value must be greater than `frequency`. Possible values are `PT1M`, `PT5M`, `PT15M`, `PT30M`, `PT1H`, `PT6H`, `PT12H` and `P1D`. Defaults to `PT5M`.
         * 
         * @return builder
         * 
         */
        public Builder windowSize(String windowSize) {
            return windowSize(Output.of(windowSize));
        }

        public MetricAlertState build() {
            return $;
        }
    }

}
