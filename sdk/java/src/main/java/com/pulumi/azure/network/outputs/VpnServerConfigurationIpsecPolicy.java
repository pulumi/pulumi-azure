// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class VpnServerConfigurationIpsecPolicy {
    /**
     * @return The DH Group, used in IKE Phase 1. Possible values include `DHGroup1`, `DHGroup2`, `DHGroup14`, `DHGroup24`, `DHGroup2048`, `ECP256`, `ECP384` and `None`.
     * 
     */
    private String dhGroup;
    /**
     * @return The IKE encryption algorithm, used for IKE Phase 2. Possible values include `AES128`, `AES192`, `AES256`, `DES`, `DES3`, `GCMAES128` and `GCMAES256`.
     * 
     */
    private String ikeEncryption;
    /**
     * @return The IKE encryption integrity algorithm, used for IKE Phase 2. Possible values include `GCMAES128`, `GCMAES256`, `MD5`, `SHA1`, `SHA256` and `SHA384`.
     * 
     */
    private String ikeIntegrity;
    /**
     * @return The IPSec encryption algorithm, used for IKE phase 1. Possible values include `AES128`, `AES192`, `AES256`, `DES`, `DES3`, `GCMAES128`, `GCMAES192`, `GCMAES256` and `None`.
     * 
     */
    private String ipsecEncryption;
    /**
     * @return The IPSec integrity algorithm, used for IKE phase 1. Possible values include `GCMAES128`, `GCMAES192`, `GCMAES256`, `MD5`, `SHA1` and `SHA256`.
     * 
     */
    private String ipsecIntegrity;
    /**
     * @return The Pfs Group, used in IKE Phase 2. Possible values include `ECP256`, `ECP384`, `PFS1`, `PFS2`, `PFS14`, `PFS24`, `PFS2048`, `PFSMM` and `None`.
     * 
     */
    private String pfsGroup;
    /**
     * @return The IPSec Security Association payload size in KB for a Site-to-Site VPN tunnel.
     * 
     */
    private Integer saDataSizeKilobytes;
    /**
     * @return The IPSec Security Association lifetime in seconds for a Site-to-Site VPN tunnel.
     * 
     */
    private Integer saLifetimeSeconds;

    private VpnServerConfigurationIpsecPolicy() {}
    /**
     * @return The DH Group, used in IKE Phase 1. Possible values include `DHGroup1`, `DHGroup2`, `DHGroup14`, `DHGroup24`, `DHGroup2048`, `ECP256`, `ECP384` and `None`.
     * 
     */
    public String dhGroup() {
        return this.dhGroup;
    }
    /**
     * @return The IKE encryption algorithm, used for IKE Phase 2. Possible values include `AES128`, `AES192`, `AES256`, `DES`, `DES3`, `GCMAES128` and `GCMAES256`.
     * 
     */
    public String ikeEncryption() {
        return this.ikeEncryption;
    }
    /**
     * @return The IKE encryption integrity algorithm, used for IKE Phase 2. Possible values include `GCMAES128`, `GCMAES256`, `MD5`, `SHA1`, `SHA256` and `SHA384`.
     * 
     */
    public String ikeIntegrity() {
        return this.ikeIntegrity;
    }
    /**
     * @return The IPSec encryption algorithm, used for IKE phase 1. Possible values include `AES128`, `AES192`, `AES256`, `DES`, `DES3`, `GCMAES128`, `GCMAES192`, `GCMAES256` and `None`.
     * 
     */
    public String ipsecEncryption() {
        return this.ipsecEncryption;
    }
    /**
     * @return The IPSec integrity algorithm, used for IKE phase 1. Possible values include `GCMAES128`, `GCMAES192`, `GCMAES256`, `MD5`, `SHA1` and `SHA256`.
     * 
     */
    public String ipsecIntegrity() {
        return this.ipsecIntegrity;
    }
    /**
     * @return The Pfs Group, used in IKE Phase 2. Possible values include `ECP256`, `ECP384`, `PFS1`, `PFS2`, `PFS14`, `PFS24`, `PFS2048`, `PFSMM` and `None`.
     * 
     */
    public String pfsGroup() {
        return this.pfsGroup;
    }
    /**
     * @return The IPSec Security Association payload size in KB for a Site-to-Site VPN tunnel.
     * 
     */
    public Integer saDataSizeKilobytes() {
        return this.saDataSizeKilobytes;
    }
    /**
     * @return The IPSec Security Association lifetime in seconds for a Site-to-Site VPN tunnel.
     * 
     */
    public Integer saLifetimeSeconds() {
        return this.saLifetimeSeconds;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VpnServerConfigurationIpsecPolicy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String dhGroup;
        private String ikeEncryption;
        private String ikeIntegrity;
        private String ipsecEncryption;
        private String ipsecIntegrity;
        private String pfsGroup;
        private Integer saDataSizeKilobytes;
        private Integer saLifetimeSeconds;
        public Builder() {}
        public Builder(VpnServerConfigurationIpsecPolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dhGroup = defaults.dhGroup;
    	      this.ikeEncryption = defaults.ikeEncryption;
    	      this.ikeIntegrity = defaults.ikeIntegrity;
    	      this.ipsecEncryption = defaults.ipsecEncryption;
    	      this.ipsecIntegrity = defaults.ipsecIntegrity;
    	      this.pfsGroup = defaults.pfsGroup;
    	      this.saDataSizeKilobytes = defaults.saDataSizeKilobytes;
    	      this.saLifetimeSeconds = defaults.saLifetimeSeconds;
        }

        @CustomType.Setter
        public Builder dhGroup(String dhGroup) {
            this.dhGroup = Objects.requireNonNull(dhGroup);
            return this;
        }
        @CustomType.Setter
        public Builder ikeEncryption(String ikeEncryption) {
            this.ikeEncryption = Objects.requireNonNull(ikeEncryption);
            return this;
        }
        @CustomType.Setter
        public Builder ikeIntegrity(String ikeIntegrity) {
            this.ikeIntegrity = Objects.requireNonNull(ikeIntegrity);
            return this;
        }
        @CustomType.Setter
        public Builder ipsecEncryption(String ipsecEncryption) {
            this.ipsecEncryption = Objects.requireNonNull(ipsecEncryption);
            return this;
        }
        @CustomType.Setter
        public Builder ipsecIntegrity(String ipsecIntegrity) {
            this.ipsecIntegrity = Objects.requireNonNull(ipsecIntegrity);
            return this;
        }
        @CustomType.Setter
        public Builder pfsGroup(String pfsGroup) {
            this.pfsGroup = Objects.requireNonNull(pfsGroup);
            return this;
        }
        @CustomType.Setter
        public Builder saDataSizeKilobytes(Integer saDataSizeKilobytes) {
            this.saDataSizeKilobytes = Objects.requireNonNull(saDataSizeKilobytes);
            return this;
        }
        @CustomType.Setter
        public Builder saLifetimeSeconds(Integer saLifetimeSeconds) {
            this.saLifetimeSeconds = Objects.requireNonNull(saLifetimeSeconds);
            return this;
        }
        public VpnServerConfigurationIpsecPolicy build() {
            final var o = new VpnServerConfigurationIpsecPolicy();
            o.dhGroup = dhGroup;
            o.ikeEncryption = ikeEncryption;
            o.ikeIntegrity = ikeIntegrity;
            o.ipsecEncryption = ipsecEncryption;
            o.ipsecIntegrity = ipsecIntegrity;
            o.pfsGroup = pfsGroup;
            o.saDataSizeKilobytes = saDataSizeKilobytes;
            o.saLifetimeSeconds = saLifetimeSeconds;
            return o;
        }
    }
}
