// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appservice.outputs;

import com.pulumi.azure.appservice.outputs.GetFunctionAppConnectionString;
import com.pulumi.azure.appservice.outputs.GetFunctionAppIdentity;
import com.pulumi.azure.appservice.outputs.GetFunctionAppSiteConfig;
import com.pulumi.azure.appservice.outputs.GetFunctionAppSiteCredential;
import com.pulumi.azure.appservice.outputs.GetFunctionAppSourceControl;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetFunctionAppResult {
    /**
     * @return The ID of the App Service Plan within which to create this Function App.
     * 
     */
    private String appServicePlanId;
    /**
     * @return A key-value pair of App Settings.
     * 
     */
    private Map<String,String> appSettings;
    /**
     * @return The mode of the Function App&#39;s client certificates requirement for incoming requests.
     * 
     */
    private String clientCertMode;
    /**
     * @return An `connection_string` block as defined below.
     * 
     */
    private List<GetFunctionAppConnectionString> connectionStrings;
    /**
     * @return An identifier used by App Service to perform domain ownership verification via DNS TXT record.
     * 
     */
    private String customDomainVerificationId;
    /**
     * @return The default hostname associated with the Function App.
     * 
     */
    private String defaultHostname;
    /**
     * @return Is the Function App enabled?
     * 
     */
    private Boolean enabled;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return A `identity` block as defined below.
     * 
     */
    private List<GetFunctionAppIdentity> identities;
    private String location;
    /**
     * @return The name for this IP Restriction.
     * 
     */
    private String name;
    /**
     * @return A string indicating the Operating System type for this function app.
     * 
     */
    private String osType;
    /**
     * @return A comma separated list of outbound IP addresses.
     * 
     */
    private String outboundIpAddresses;
    /**
     * @return A comma separated list of outbound IP addresses, not all of which are necessarily in use. Superset of `outbound_ip_addresses`.
     * 
     */
    private String possibleOutboundIpAddresses;
    private String resourceGroupName;
    private List<GetFunctionAppSiteConfig> siteConfigs;
    /**
     * @return A `site_credential` block as defined below, which contains the site-level credentials used to publish to this App Service.
     * 
     */
    private List<GetFunctionAppSiteCredential> siteCredentials;
    /**
     * @return A `source_control` block as defined below.
     * 
     */
    private List<GetFunctionAppSourceControl> sourceControls;
    private @Nullable Map<String,String> tags;

    private GetFunctionAppResult() {}
    /**
     * @return The ID of the App Service Plan within which to create this Function App.
     * 
     */
    public String appServicePlanId() {
        return this.appServicePlanId;
    }
    /**
     * @return A key-value pair of App Settings.
     * 
     */
    public Map<String,String> appSettings() {
        return this.appSettings;
    }
    /**
     * @return The mode of the Function App&#39;s client certificates requirement for incoming requests.
     * 
     */
    public String clientCertMode() {
        return this.clientCertMode;
    }
    /**
     * @return An `connection_string` block as defined below.
     * 
     */
    public List<GetFunctionAppConnectionString> connectionStrings() {
        return this.connectionStrings;
    }
    /**
     * @return An identifier used by App Service to perform domain ownership verification via DNS TXT record.
     * 
     */
    public String customDomainVerificationId() {
        return this.customDomainVerificationId;
    }
    /**
     * @return The default hostname associated with the Function App.
     * 
     */
    public String defaultHostname() {
        return this.defaultHostname;
    }
    /**
     * @return Is the Function App enabled?
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A `identity` block as defined below.
     * 
     */
    public List<GetFunctionAppIdentity> identities() {
        return this.identities;
    }
    public String location() {
        return this.location;
    }
    /**
     * @return The name for this IP Restriction.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return A string indicating the Operating System type for this function app.
     * 
     */
    public String osType() {
        return this.osType;
    }
    /**
     * @return A comma separated list of outbound IP addresses.
     * 
     */
    public String outboundIpAddresses() {
        return this.outboundIpAddresses;
    }
    /**
     * @return A comma separated list of outbound IP addresses, not all of which are necessarily in use. Superset of `outbound_ip_addresses`.
     * 
     */
    public String possibleOutboundIpAddresses() {
        return this.possibleOutboundIpAddresses;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    public List<GetFunctionAppSiteConfig> siteConfigs() {
        return this.siteConfigs;
    }
    /**
     * @return A `site_credential` block as defined below, which contains the site-level credentials used to publish to this App Service.
     * 
     */
    public List<GetFunctionAppSiteCredential> siteCredentials() {
        return this.siteCredentials;
    }
    /**
     * @return A `source_control` block as defined below.
     * 
     */
    public List<GetFunctionAppSourceControl> sourceControls() {
        return this.sourceControls;
    }
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFunctionAppResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String appServicePlanId;
        private Map<String,String> appSettings;
        private String clientCertMode;
        private List<GetFunctionAppConnectionString> connectionStrings;
        private String customDomainVerificationId;
        private String defaultHostname;
        private Boolean enabled;
        private String id;
        private List<GetFunctionAppIdentity> identities;
        private String location;
        private String name;
        private String osType;
        private String outboundIpAddresses;
        private String possibleOutboundIpAddresses;
        private String resourceGroupName;
        private List<GetFunctionAppSiteConfig> siteConfigs;
        private List<GetFunctionAppSiteCredential> siteCredentials;
        private List<GetFunctionAppSourceControl> sourceControls;
        private @Nullable Map<String,String> tags;
        public Builder() {}
        public Builder(GetFunctionAppResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appServicePlanId = defaults.appServicePlanId;
    	      this.appSettings = defaults.appSettings;
    	      this.clientCertMode = defaults.clientCertMode;
    	      this.connectionStrings = defaults.connectionStrings;
    	      this.customDomainVerificationId = defaults.customDomainVerificationId;
    	      this.defaultHostname = defaults.defaultHostname;
    	      this.enabled = defaults.enabled;
    	      this.id = defaults.id;
    	      this.identities = defaults.identities;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.osType = defaults.osType;
    	      this.outboundIpAddresses = defaults.outboundIpAddresses;
    	      this.possibleOutboundIpAddresses = defaults.possibleOutboundIpAddresses;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.siteConfigs = defaults.siteConfigs;
    	      this.siteCredentials = defaults.siteCredentials;
    	      this.sourceControls = defaults.sourceControls;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder appServicePlanId(String appServicePlanId) {
            this.appServicePlanId = Objects.requireNonNull(appServicePlanId);
            return this;
        }
        @CustomType.Setter
        public Builder appSettings(Map<String,String> appSettings) {
            this.appSettings = Objects.requireNonNull(appSettings);
            return this;
        }
        @CustomType.Setter
        public Builder clientCertMode(String clientCertMode) {
            this.clientCertMode = Objects.requireNonNull(clientCertMode);
            return this;
        }
        @CustomType.Setter
        public Builder connectionStrings(List<GetFunctionAppConnectionString> connectionStrings) {
            this.connectionStrings = Objects.requireNonNull(connectionStrings);
            return this;
        }
        public Builder connectionStrings(GetFunctionAppConnectionString... connectionStrings) {
            return connectionStrings(List.of(connectionStrings));
        }
        @CustomType.Setter
        public Builder customDomainVerificationId(String customDomainVerificationId) {
            this.customDomainVerificationId = Objects.requireNonNull(customDomainVerificationId);
            return this;
        }
        @CustomType.Setter
        public Builder defaultHostname(String defaultHostname) {
            this.defaultHostname = Objects.requireNonNull(defaultHostname);
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            this.enabled = Objects.requireNonNull(enabled);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder identities(List<GetFunctionAppIdentity> identities) {
            this.identities = Objects.requireNonNull(identities);
            return this;
        }
        public Builder identities(GetFunctionAppIdentity... identities) {
            return identities(List.of(identities));
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder osType(String osType) {
            this.osType = Objects.requireNonNull(osType);
            return this;
        }
        @CustomType.Setter
        public Builder outboundIpAddresses(String outboundIpAddresses) {
            this.outboundIpAddresses = Objects.requireNonNull(outboundIpAddresses);
            return this;
        }
        @CustomType.Setter
        public Builder possibleOutboundIpAddresses(String possibleOutboundIpAddresses) {
            this.possibleOutboundIpAddresses = Objects.requireNonNull(possibleOutboundIpAddresses);
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        @CustomType.Setter
        public Builder siteConfigs(List<GetFunctionAppSiteConfig> siteConfigs) {
            this.siteConfigs = Objects.requireNonNull(siteConfigs);
            return this;
        }
        public Builder siteConfigs(GetFunctionAppSiteConfig... siteConfigs) {
            return siteConfigs(List.of(siteConfigs));
        }
        @CustomType.Setter
        public Builder siteCredentials(List<GetFunctionAppSiteCredential> siteCredentials) {
            this.siteCredentials = Objects.requireNonNull(siteCredentials);
            return this;
        }
        public Builder siteCredentials(GetFunctionAppSiteCredential... siteCredentials) {
            return siteCredentials(List.of(siteCredentials));
        }
        @CustomType.Setter
        public Builder sourceControls(List<GetFunctionAppSourceControl> sourceControls) {
            this.sourceControls = Objects.requireNonNull(sourceControls);
            return this;
        }
        public Builder sourceControls(GetFunctionAppSourceControl... sourceControls) {
            return sourceControls(List.of(sourceControls));
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        public GetFunctionAppResult build() {
            final var o = new GetFunctionAppResult();
            o.appServicePlanId = appServicePlanId;
            o.appSettings = appSettings;
            o.clientCertMode = clientCertMode;
            o.connectionStrings = connectionStrings;
            o.customDomainVerificationId = customDomainVerificationId;
            o.defaultHostname = defaultHostname;
            o.enabled = enabled;
            o.id = id;
            o.identities = identities;
            o.location = location;
            o.name = name;
            o.osType = osType;
            o.outboundIpAddresses = outboundIpAddresses;
            o.possibleOutboundIpAddresses = possibleOutboundIpAddresses;
            o.resourceGroupName = resourceGroupName;
            o.siteConfigs = siteConfigs;
            o.siteCredentials = siteCredentials;
            o.sourceControls = sourceControls;
            o.tags = tags;
            return o;
        }
    }
}
