// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.monitoring.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.util.Objects;


public final class ScheduledQueryRulesAlertV2CriteriaFailingPeriodsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ScheduledQueryRulesAlertV2CriteriaFailingPeriodsArgs Empty = new ScheduledQueryRulesAlertV2CriteriaFailingPeriodsArgs();

    /**
     * Specifies the number of violations to trigger an alert. Should be smaller or equal to `number_of_evaluation_periods`. Possible value is integer between 1 and 6.
     * 
     */
    @Import(name="minimumFailingPeriodsToTriggerAlert", required=true)
    private Output<Integer> minimumFailingPeriodsToTriggerAlert;

    /**
     * @return Specifies the number of violations to trigger an alert. Should be smaller or equal to `number_of_evaluation_periods`. Possible value is integer between 1 and 6.
     * 
     */
    public Output<Integer> minimumFailingPeriodsToTriggerAlert() {
        return this.minimumFailingPeriodsToTriggerAlert;
    }

    /**
     * Specifies the number of aggregated look-back points. The look-back time window is calculated based on the aggregation granularity `window_duration` and the selected number of aggregated points. Possible value is integer between 1 and 6.
     * 
     * &gt; **Note** The query look back which is `window_duration`*`number_of_evaluation_periods` cannot exceed 48 hours.
     * 
     * &gt; **Note** `number_of_evaluation_periods` must be `1` for queries that do not project timestamp column
     * 
     */
    @Import(name="numberOfEvaluationPeriods", required=true)
    private Output<Integer> numberOfEvaluationPeriods;

    /**
     * @return Specifies the number of aggregated look-back points. The look-back time window is calculated based on the aggregation granularity `window_duration` and the selected number of aggregated points. Possible value is integer between 1 and 6.
     * 
     * &gt; **Note** The query look back which is `window_duration`*`number_of_evaluation_periods` cannot exceed 48 hours.
     * 
     * &gt; **Note** `number_of_evaluation_periods` must be `1` for queries that do not project timestamp column
     * 
     */
    public Output<Integer> numberOfEvaluationPeriods() {
        return this.numberOfEvaluationPeriods;
    }

    private ScheduledQueryRulesAlertV2CriteriaFailingPeriodsArgs() {}

    private ScheduledQueryRulesAlertV2CriteriaFailingPeriodsArgs(ScheduledQueryRulesAlertV2CriteriaFailingPeriodsArgs $) {
        this.minimumFailingPeriodsToTriggerAlert = $.minimumFailingPeriodsToTriggerAlert;
        this.numberOfEvaluationPeriods = $.numberOfEvaluationPeriods;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScheduledQueryRulesAlertV2CriteriaFailingPeriodsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScheduledQueryRulesAlertV2CriteriaFailingPeriodsArgs $;

        public Builder() {
            $ = new ScheduledQueryRulesAlertV2CriteriaFailingPeriodsArgs();
        }

        public Builder(ScheduledQueryRulesAlertV2CriteriaFailingPeriodsArgs defaults) {
            $ = new ScheduledQueryRulesAlertV2CriteriaFailingPeriodsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param minimumFailingPeriodsToTriggerAlert Specifies the number of violations to trigger an alert. Should be smaller or equal to `number_of_evaluation_periods`. Possible value is integer between 1 and 6.
         * 
         * @return builder
         * 
         */
        public Builder minimumFailingPeriodsToTriggerAlert(Output<Integer> minimumFailingPeriodsToTriggerAlert) {
            $.minimumFailingPeriodsToTriggerAlert = minimumFailingPeriodsToTriggerAlert;
            return this;
        }

        /**
         * @param minimumFailingPeriodsToTriggerAlert Specifies the number of violations to trigger an alert. Should be smaller or equal to `number_of_evaluation_periods`. Possible value is integer between 1 and 6.
         * 
         * @return builder
         * 
         */
        public Builder minimumFailingPeriodsToTriggerAlert(Integer minimumFailingPeriodsToTriggerAlert) {
            return minimumFailingPeriodsToTriggerAlert(Output.of(minimumFailingPeriodsToTriggerAlert));
        }

        /**
         * @param numberOfEvaluationPeriods Specifies the number of aggregated look-back points. The look-back time window is calculated based on the aggregation granularity `window_duration` and the selected number of aggregated points. Possible value is integer between 1 and 6.
         * 
         * &gt; **Note** The query look back which is `window_duration`*`number_of_evaluation_periods` cannot exceed 48 hours.
         * 
         * &gt; **Note** `number_of_evaluation_periods` must be `1` for queries that do not project timestamp column
         * 
         * @return builder
         * 
         */
        public Builder numberOfEvaluationPeriods(Output<Integer> numberOfEvaluationPeriods) {
            $.numberOfEvaluationPeriods = numberOfEvaluationPeriods;
            return this;
        }

        /**
         * @param numberOfEvaluationPeriods Specifies the number of aggregated look-back points. The look-back time window is calculated based on the aggregation granularity `window_duration` and the selected number of aggregated points. Possible value is integer between 1 and 6.
         * 
         * &gt; **Note** The query look back which is `window_duration`*`number_of_evaluation_periods` cannot exceed 48 hours.
         * 
         * &gt; **Note** `number_of_evaluation_periods` must be `1` for queries that do not project timestamp column
         * 
         * @return builder
         * 
         */
        public Builder numberOfEvaluationPeriods(Integer numberOfEvaluationPeriods) {
            return numberOfEvaluationPeriods(Output.of(numberOfEvaluationPeriods));
        }

        public ScheduledQueryRulesAlertV2CriteriaFailingPeriodsArgs build() {
            if ($.minimumFailingPeriodsToTriggerAlert == null) {
                throw new MissingRequiredPropertyException("ScheduledQueryRulesAlertV2CriteriaFailingPeriodsArgs", "minimumFailingPeriodsToTriggerAlert");
            }
            if ($.numberOfEvaluationPeriods == null) {
                throw new MissingRequiredPropertyException("ScheduledQueryRulesAlertV2CriteriaFailingPeriodsArgs", "numberOfEvaluationPeriods");
            }
            return $;
        }
    }

}
