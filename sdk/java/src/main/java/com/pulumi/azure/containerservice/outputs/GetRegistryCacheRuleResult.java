// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerservice.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetRegistryCacheRuleResult {
    private String containerRegistryId;
    /**
     * @return The ARM resource ID of the credential store which is associated with the cache rule.
     * 
     */
    private String credentialSetId;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String name;
    /**
     * @return The name of the source repository path.
     * 
     */
    private String sourceRepo;
    /**
     * @return The name of the new repository path to store artifacts.
     * 
     */
    private String targetRepo;

    private GetRegistryCacheRuleResult() {}
    public String containerRegistryId() {
        return this.containerRegistryId;
    }
    /**
     * @return The ARM resource ID of the credential store which is associated with the cache rule.
     * 
     */
    public String credentialSetId() {
        return this.credentialSetId;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return The name of the source repository path.
     * 
     */
    public String sourceRepo() {
        return this.sourceRepo;
    }
    /**
     * @return The name of the new repository path to store artifacts.
     * 
     */
    public String targetRepo() {
        return this.targetRepo;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRegistryCacheRuleResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String containerRegistryId;
        private String credentialSetId;
        private String id;
        private String name;
        private String sourceRepo;
        private String targetRepo;
        public Builder() {}
        public Builder(GetRegistryCacheRuleResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.containerRegistryId = defaults.containerRegistryId;
    	      this.credentialSetId = defaults.credentialSetId;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.sourceRepo = defaults.sourceRepo;
    	      this.targetRepo = defaults.targetRepo;
        }

        @CustomType.Setter
        public Builder containerRegistryId(String containerRegistryId) {
            if (containerRegistryId == null) {
              throw new MissingRequiredPropertyException("GetRegistryCacheRuleResult", "containerRegistryId");
            }
            this.containerRegistryId = containerRegistryId;
            return this;
        }
        @CustomType.Setter
        public Builder credentialSetId(String credentialSetId) {
            if (credentialSetId == null) {
              throw new MissingRequiredPropertyException("GetRegistryCacheRuleResult", "credentialSetId");
            }
            this.credentialSetId = credentialSetId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetRegistryCacheRuleResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetRegistryCacheRuleResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder sourceRepo(String sourceRepo) {
            if (sourceRepo == null) {
              throw new MissingRequiredPropertyException("GetRegistryCacheRuleResult", "sourceRepo");
            }
            this.sourceRepo = sourceRepo;
            return this;
        }
        @CustomType.Setter
        public Builder targetRepo(String targetRepo) {
            if (targetRepo == null) {
              throw new MissingRequiredPropertyException("GetRegistryCacheRuleResult", "targetRepo");
            }
            this.targetRepo = targetRepo;
            return this;
        }
        public GetRegistryCacheRuleResult build() {
            final var _resultValue = new GetRegistryCacheRuleResult();
            _resultValue.containerRegistryId = containerRegistryId;
            _resultValue.credentialSetId = credentialSetId;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.sourceRepo = sourceRepo;
            _resultValue.targetRepo = targetRepo;
            return _resultValue;
        }
    }
}
