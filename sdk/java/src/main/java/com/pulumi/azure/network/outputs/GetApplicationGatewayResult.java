// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network.outputs;

import com.pulumi.azure.network.outputs.GetApplicationGatewayAuthenticationCertificate;
import com.pulumi.azure.network.outputs.GetApplicationGatewayAutoscaleConfiguration;
import com.pulumi.azure.network.outputs.GetApplicationGatewayBackendAddressPool;
import com.pulumi.azure.network.outputs.GetApplicationGatewayBackendHttpSetting;
import com.pulumi.azure.network.outputs.GetApplicationGatewayCustomErrorConfiguration;
import com.pulumi.azure.network.outputs.GetApplicationGatewayFrontendIpConfiguration;
import com.pulumi.azure.network.outputs.GetApplicationGatewayFrontendPort;
import com.pulumi.azure.network.outputs.GetApplicationGatewayGatewayIpConfiguration;
import com.pulumi.azure.network.outputs.GetApplicationGatewayGlobal;
import com.pulumi.azure.network.outputs.GetApplicationGatewayHttpListener;
import com.pulumi.azure.network.outputs.GetApplicationGatewayIdentity;
import com.pulumi.azure.network.outputs.GetApplicationGatewayPrivateEndpointConnection;
import com.pulumi.azure.network.outputs.GetApplicationGatewayPrivateLinkConfiguration;
import com.pulumi.azure.network.outputs.GetApplicationGatewayProbe;
import com.pulumi.azure.network.outputs.GetApplicationGatewayRedirectConfiguration;
import com.pulumi.azure.network.outputs.GetApplicationGatewayRequestRoutingRule;
import com.pulumi.azure.network.outputs.GetApplicationGatewayRewriteRuleSet;
import com.pulumi.azure.network.outputs.GetApplicationGatewaySkus;
import com.pulumi.azure.network.outputs.GetApplicationGatewaySslCertificate;
import com.pulumi.azure.network.outputs.GetApplicationGatewaySslPolicy;
import com.pulumi.azure.network.outputs.GetApplicationGatewaySslProfile;
import com.pulumi.azure.network.outputs.GetApplicationGatewayTrustedClientCertificate;
import com.pulumi.azure.network.outputs.GetApplicationGatewayTrustedRootCertificate;
import com.pulumi.azure.network.outputs.GetApplicationGatewayUrlPathMap;
import com.pulumi.azure.network.outputs.GetApplicationGatewayWafConfiguration;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetApplicationGatewayResult {
    /**
     * @return One or more `authentication_certificate` blocks as defined below.
     * 
     */
    private List<GetApplicationGatewayAuthenticationCertificate> authenticationCertificates;
    /**
     * @return An `autoscale_configuration` block as defined below.
     * 
     */
    private List<GetApplicationGatewayAutoscaleConfiguration> autoscaleConfigurations;
    /**
     * @return One or more `backend_address_pool` blocks as defined below.
     * 
     */
    private List<GetApplicationGatewayBackendAddressPool> backendAddressPools;
    /**
     * @return One or more `backend_http_settings` blocks as defined below.
     * 
     */
    private List<GetApplicationGatewayBackendHttpSetting> backendHttpSettings;
    /**
     * @return One or more `custom_error_configuration` blocks as defined below.
     * 
     */
    private List<GetApplicationGatewayCustomErrorConfiguration> customErrorConfigurations;
    /**
     * @return Is FIPS enabled on the Application Gateway?
     * 
     */
    private Boolean fipsEnabled;
    /**
     * @return The ID of the Web Application Firewall Policy which is used as an HTTP Listener for this Path Rule.
     * 
     */
    private String firewallPolicyId;
    /**
     * @return Is the Firewall Policy associated with the Application Gateway?
     * 
     */
    private Boolean forceFirewallPolicyAssociation;
    /**
     * @return One or more `frontend_ip_configuration` blocks as defined below.
     * 
     */
    private List<GetApplicationGatewayFrontendIpConfiguration> frontendIpConfigurations;
    /**
     * @return One or more `frontend_port` blocks as defined below.
     * 
     */
    private List<GetApplicationGatewayFrontendPort> frontendPorts;
    /**
     * @return One or more `gateway_ip_configuration` blocks as defined below.
     * 
     */
    private List<GetApplicationGatewayGatewayIpConfiguration> gatewayIpConfigurations;
    /**
     * @return A `global` block as defined below.
     * 
     */
    private List<GetApplicationGatewayGlobal> globals;
    /**
     * @return Is HTTP2 enabled on the application gateway resource?
     * 
     */
    private Boolean http2Enabled;
    /**
     * @return One or more `http_listener` blocks as defined below.
     * 
     */
    private List<GetApplicationGatewayHttpListener> httpListeners;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return An `identity` block as defined below.
     * 
     */
    private List<GetApplicationGatewayIdentity> identities;
    /**
     * @return The Azure region where the Application Gateway exists.
     * 
     */
    private String location;
    /**
     * @return Unique name of the Rewrite Rule
     * 
     */
    private String name;
    private List<GetApplicationGatewayPrivateEndpointConnection> privateEndpointConnections;
    /**
     * @return One or more `private_link_configuration` blocks as defined below.
     * 
     */
    private List<GetApplicationGatewayPrivateLinkConfiguration> privateLinkConfigurations;
    /**
     * @return One or more `probe` blocks as defined below.
     * 
     */
    private List<GetApplicationGatewayProbe> probes;
    /**
     * @return One or more `redirect_configuration` blocks as defined below.
     * 
     */
    private List<GetApplicationGatewayRedirectConfiguration> redirectConfigurations;
    /**
     * @return One or more `request_routing_rule` blocks as defined below.
     * 
     */
    private List<GetApplicationGatewayRequestRoutingRule> requestRoutingRules;
    private String resourceGroupName;
    /**
     * @return One or more `rewrite_rule_set` blocks as defined below.
     * 
     */
    private List<GetApplicationGatewayRewriteRuleSet> rewriteRuleSets;
    /**
     * @return A `sku` block as defined below.
     * 
     */
    private List<GetApplicationGatewaySkus> skus;
    /**
     * @return One or more `ssl_certificate` blocks as defined below.
     * 
     */
    private List<GetApplicationGatewaySslCertificate> sslCertificates;
    /**
     * @return a `ssl_policy` block as defined below.
     * 
     */
    private List<GetApplicationGatewaySslPolicy> sslPolicies;
    /**
     * @return One or more `ssl_profile` blocks as defined below.
     * 
     */
    private List<GetApplicationGatewaySslProfile> sslProfiles;
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return One or more `trusted_client_certificate` blocks as defined below.
     * 
     */
    private List<GetApplicationGatewayTrustedClientCertificate> trustedClientCertificates;
    /**
     * @return One or more `trusted_root_certificate` blocks as defined below.
     * 
     */
    private List<GetApplicationGatewayTrustedRootCertificate> trustedRootCertificates;
    /**
     * @return One or more `url_path_map` blocks as defined below.
     * 
     */
    private List<GetApplicationGatewayUrlPathMap> urlPathMaps;
    /**
     * @return A `waf_configuration` block as defined below.
     * 
     */
    private List<GetApplicationGatewayWafConfiguration> wafConfigurations;
    /**
     * @return The list of Availability Zones in which this Application Gateway can use.
     * 
     */
    private List<String> zones;

    private GetApplicationGatewayResult() {}
    /**
     * @return One or more `authentication_certificate` blocks as defined below.
     * 
     */
    public List<GetApplicationGatewayAuthenticationCertificate> authenticationCertificates() {
        return this.authenticationCertificates;
    }
    /**
     * @return An `autoscale_configuration` block as defined below.
     * 
     */
    public List<GetApplicationGatewayAutoscaleConfiguration> autoscaleConfigurations() {
        return this.autoscaleConfigurations;
    }
    /**
     * @return One or more `backend_address_pool` blocks as defined below.
     * 
     */
    public List<GetApplicationGatewayBackendAddressPool> backendAddressPools() {
        return this.backendAddressPools;
    }
    /**
     * @return One or more `backend_http_settings` blocks as defined below.
     * 
     */
    public List<GetApplicationGatewayBackendHttpSetting> backendHttpSettings() {
        return this.backendHttpSettings;
    }
    /**
     * @return One or more `custom_error_configuration` blocks as defined below.
     * 
     */
    public List<GetApplicationGatewayCustomErrorConfiguration> customErrorConfigurations() {
        return this.customErrorConfigurations;
    }
    /**
     * @return Is FIPS enabled on the Application Gateway?
     * 
     */
    public Boolean fipsEnabled() {
        return this.fipsEnabled;
    }
    /**
     * @return The ID of the Web Application Firewall Policy which is used as an HTTP Listener for this Path Rule.
     * 
     */
    public String firewallPolicyId() {
        return this.firewallPolicyId;
    }
    /**
     * @return Is the Firewall Policy associated with the Application Gateway?
     * 
     */
    public Boolean forceFirewallPolicyAssociation() {
        return this.forceFirewallPolicyAssociation;
    }
    /**
     * @return One or more `frontend_ip_configuration` blocks as defined below.
     * 
     */
    public List<GetApplicationGatewayFrontendIpConfiguration> frontendIpConfigurations() {
        return this.frontendIpConfigurations;
    }
    /**
     * @return One or more `frontend_port` blocks as defined below.
     * 
     */
    public List<GetApplicationGatewayFrontendPort> frontendPorts() {
        return this.frontendPorts;
    }
    /**
     * @return One or more `gateway_ip_configuration` blocks as defined below.
     * 
     */
    public List<GetApplicationGatewayGatewayIpConfiguration> gatewayIpConfigurations() {
        return this.gatewayIpConfigurations;
    }
    /**
     * @return A `global` block as defined below.
     * 
     */
    public List<GetApplicationGatewayGlobal> globals() {
        return this.globals;
    }
    /**
     * @return Is HTTP2 enabled on the application gateway resource?
     * 
     */
    public Boolean http2Enabled() {
        return this.http2Enabled;
    }
    /**
     * @return One or more `http_listener` blocks as defined below.
     * 
     */
    public List<GetApplicationGatewayHttpListener> httpListeners() {
        return this.httpListeners;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return An `identity` block as defined below.
     * 
     */
    public List<GetApplicationGatewayIdentity> identities() {
        return this.identities;
    }
    /**
     * @return The Azure region where the Application Gateway exists.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return Unique name of the Rewrite Rule
     * 
     */
    public String name() {
        return this.name;
    }
    public List<GetApplicationGatewayPrivateEndpointConnection> privateEndpointConnections() {
        return this.privateEndpointConnections;
    }
    /**
     * @return One or more `private_link_configuration` blocks as defined below.
     * 
     */
    public List<GetApplicationGatewayPrivateLinkConfiguration> privateLinkConfigurations() {
        return this.privateLinkConfigurations;
    }
    /**
     * @return One or more `probe` blocks as defined below.
     * 
     */
    public List<GetApplicationGatewayProbe> probes() {
        return this.probes;
    }
    /**
     * @return One or more `redirect_configuration` blocks as defined below.
     * 
     */
    public List<GetApplicationGatewayRedirectConfiguration> redirectConfigurations() {
        return this.redirectConfigurations;
    }
    /**
     * @return One or more `request_routing_rule` blocks as defined below.
     * 
     */
    public List<GetApplicationGatewayRequestRoutingRule> requestRoutingRules() {
        return this.requestRoutingRules;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return One or more `rewrite_rule_set` blocks as defined below.
     * 
     */
    public List<GetApplicationGatewayRewriteRuleSet> rewriteRuleSets() {
        return this.rewriteRuleSets;
    }
    /**
     * @return A `sku` block as defined below.
     * 
     */
    public List<GetApplicationGatewaySkus> skus() {
        return this.skus;
    }
    /**
     * @return One or more `ssl_certificate` blocks as defined below.
     * 
     */
    public List<GetApplicationGatewaySslCertificate> sslCertificates() {
        return this.sslCertificates;
    }
    /**
     * @return a `ssl_policy` block as defined below.
     * 
     */
    public List<GetApplicationGatewaySslPolicy> sslPolicies() {
        return this.sslPolicies;
    }
    /**
     * @return One or more `ssl_profile` blocks as defined below.
     * 
     */
    public List<GetApplicationGatewaySslProfile> sslProfiles() {
        return this.sslProfiles;
    }
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return One or more `trusted_client_certificate` blocks as defined below.
     * 
     */
    public List<GetApplicationGatewayTrustedClientCertificate> trustedClientCertificates() {
        return this.trustedClientCertificates;
    }
    /**
     * @return One or more `trusted_root_certificate` blocks as defined below.
     * 
     */
    public List<GetApplicationGatewayTrustedRootCertificate> trustedRootCertificates() {
        return this.trustedRootCertificates;
    }
    /**
     * @return One or more `url_path_map` blocks as defined below.
     * 
     */
    public List<GetApplicationGatewayUrlPathMap> urlPathMaps() {
        return this.urlPathMaps;
    }
    /**
     * @return A `waf_configuration` block as defined below.
     * 
     */
    public List<GetApplicationGatewayWafConfiguration> wafConfigurations() {
        return this.wafConfigurations;
    }
    /**
     * @return The list of Availability Zones in which this Application Gateway can use.
     * 
     */
    public List<String> zones() {
        return this.zones;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetApplicationGatewayResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetApplicationGatewayAuthenticationCertificate> authenticationCertificates;
        private List<GetApplicationGatewayAutoscaleConfiguration> autoscaleConfigurations;
        private List<GetApplicationGatewayBackendAddressPool> backendAddressPools;
        private List<GetApplicationGatewayBackendHttpSetting> backendHttpSettings;
        private List<GetApplicationGatewayCustomErrorConfiguration> customErrorConfigurations;
        private Boolean fipsEnabled;
        private String firewallPolicyId;
        private Boolean forceFirewallPolicyAssociation;
        private List<GetApplicationGatewayFrontendIpConfiguration> frontendIpConfigurations;
        private List<GetApplicationGatewayFrontendPort> frontendPorts;
        private List<GetApplicationGatewayGatewayIpConfiguration> gatewayIpConfigurations;
        private List<GetApplicationGatewayGlobal> globals;
        private Boolean http2Enabled;
        private List<GetApplicationGatewayHttpListener> httpListeners;
        private String id;
        private List<GetApplicationGatewayIdentity> identities;
        private String location;
        private String name;
        private List<GetApplicationGatewayPrivateEndpointConnection> privateEndpointConnections;
        private List<GetApplicationGatewayPrivateLinkConfiguration> privateLinkConfigurations;
        private List<GetApplicationGatewayProbe> probes;
        private List<GetApplicationGatewayRedirectConfiguration> redirectConfigurations;
        private List<GetApplicationGatewayRequestRoutingRule> requestRoutingRules;
        private String resourceGroupName;
        private List<GetApplicationGatewayRewriteRuleSet> rewriteRuleSets;
        private List<GetApplicationGatewaySkus> skus;
        private List<GetApplicationGatewaySslCertificate> sslCertificates;
        private List<GetApplicationGatewaySslPolicy> sslPolicies;
        private List<GetApplicationGatewaySslProfile> sslProfiles;
        private Map<String,String> tags;
        private List<GetApplicationGatewayTrustedClientCertificate> trustedClientCertificates;
        private List<GetApplicationGatewayTrustedRootCertificate> trustedRootCertificates;
        private List<GetApplicationGatewayUrlPathMap> urlPathMaps;
        private List<GetApplicationGatewayWafConfiguration> wafConfigurations;
        private List<String> zones;
        public Builder() {}
        public Builder(GetApplicationGatewayResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authenticationCertificates = defaults.authenticationCertificates;
    	      this.autoscaleConfigurations = defaults.autoscaleConfigurations;
    	      this.backendAddressPools = defaults.backendAddressPools;
    	      this.backendHttpSettings = defaults.backendHttpSettings;
    	      this.customErrorConfigurations = defaults.customErrorConfigurations;
    	      this.fipsEnabled = defaults.fipsEnabled;
    	      this.firewallPolicyId = defaults.firewallPolicyId;
    	      this.forceFirewallPolicyAssociation = defaults.forceFirewallPolicyAssociation;
    	      this.frontendIpConfigurations = defaults.frontendIpConfigurations;
    	      this.frontendPorts = defaults.frontendPorts;
    	      this.gatewayIpConfigurations = defaults.gatewayIpConfigurations;
    	      this.globals = defaults.globals;
    	      this.http2Enabled = defaults.http2Enabled;
    	      this.httpListeners = defaults.httpListeners;
    	      this.id = defaults.id;
    	      this.identities = defaults.identities;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.privateEndpointConnections = defaults.privateEndpointConnections;
    	      this.privateLinkConfigurations = defaults.privateLinkConfigurations;
    	      this.probes = defaults.probes;
    	      this.redirectConfigurations = defaults.redirectConfigurations;
    	      this.requestRoutingRules = defaults.requestRoutingRules;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.rewriteRuleSets = defaults.rewriteRuleSets;
    	      this.skus = defaults.skus;
    	      this.sslCertificates = defaults.sslCertificates;
    	      this.sslPolicies = defaults.sslPolicies;
    	      this.sslProfiles = defaults.sslProfiles;
    	      this.tags = defaults.tags;
    	      this.trustedClientCertificates = defaults.trustedClientCertificates;
    	      this.trustedRootCertificates = defaults.trustedRootCertificates;
    	      this.urlPathMaps = defaults.urlPathMaps;
    	      this.wafConfigurations = defaults.wafConfigurations;
    	      this.zones = defaults.zones;
        }

        @CustomType.Setter
        public Builder authenticationCertificates(List<GetApplicationGatewayAuthenticationCertificate> authenticationCertificates) {
            if (authenticationCertificates == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayResult", "authenticationCertificates");
            }
            this.authenticationCertificates = authenticationCertificates;
            return this;
        }
        public Builder authenticationCertificates(GetApplicationGatewayAuthenticationCertificate... authenticationCertificates) {
            return authenticationCertificates(List.of(authenticationCertificates));
        }
        @CustomType.Setter
        public Builder autoscaleConfigurations(List<GetApplicationGatewayAutoscaleConfiguration> autoscaleConfigurations) {
            if (autoscaleConfigurations == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayResult", "autoscaleConfigurations");
            }
            this.autoscaleConfigurations = autoscaleConfigurations;
            return this;
        }
        public Builder autoscaleConfigurations(GetApplicationGatewayAutoscaleConfiguration... autoscaleConfigurations) {
            return autoscaleConfigurations(List.of(autoscaleConfigurations));
        }
        @CustomType.Setter
        public Builder backendAddressPools(List<GetApplicationGatewayBackendAddressPool> backendAddressPools) {
            if (backendAddressPools == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayResult", "backendAddressPools");
            }
            this.backendAddressPools = backendAddressPools;
            return this;
        }
        public Builder backendAddressPools(GetApplicationGatewayBackendAddressPool... backendAddressPools) {
            return backendAddressPools(List.of(backendAddressPools));
        }
        @CustomType.Setter
        public Builder backendHttpSettings(List<GetApplicationGatewayBackendHttpSetting> backendHttpSettings) {
            if (backendHttpSettings == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayResult", "backendHttpSettings");
            }
            this.backendHttpSettings = backendHttpSettings;
            return this;
        }
        public Builder backendHttpSettings(GetApplicationGatewayBackendHttpSetting... backendHttpSettings) {
            return backendHttpSettings(List.of(backendHttpSettings));
        }
        @CustomType.Setter
        public Builder customErrorConfigurations(List<GetApplicationGatewayCustomErrorConfiguration> customErrorConfigurations) {
            if (customErrorConfigurations == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayResult", "customErrorConfigurations");
            }
            this.customErrorConfigurations = customErrorConfigurations;
            return this;
        }
        public Builder customErrorConfigurations(GetApplicationGatewayCustomErrorConfiguration... customErrorConfigurations) {
            return customErrorConfigurations(List.of(customErrorConfigurations));
        }
        @CustomType.Setter
        public Builder fipsEnabled(Boolean fipsEnabled) {
            if (fipsEnabled == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayResult", "fipsEnabled");
            }
            this.fipsEnabled = fipsEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder firewallPolicyId(String firewallPolicyId) {
            if (firewallPolicyId == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayResult", "firewallPolicyId");
            }
            this.firewallPolicyId = firewallPolicyId;
            return this;
        }
        @CustomType.Setter
        public Builder forceFirewallPolicyAssociation(Boolean forceFirewallPolicyAssociation) {
            if (forceFirewallPolicyAssociation == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayResult", "forceFirewallPolicyAssociation");
            }
            this.forceFirewallPolicyAssociation = forceFirewallPolicyAssociation;
            return this;
        }
        @CustomType.Setter
        public Builder frontendIpConfigurations(List<GetApplicationGatewayFrontendIpConfiguration> frontendIpConfigurations) {
            if (frontendIpConfigurations == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayResult", "frontendIpConfigurations");
            }
            this.frontendIpConfigurations = frontendIpConfigurations;
            return this;
        }
        public Builder frontendIpConfigurations(GetApplicationGatewayFrontendIpConfiguration... frontendIpConfigurations) {
            return frontendIpConfigurations(List.of(frontendIpConfigurations));
        }
        @CustomType.Setter
        public Builder frontendPorts(List<GetApplicationGatewayFrontendPort> frontendPorts) {
            if (frontendPorts == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayResult", "frontendPorts");
            }
            this.frontendPorts = frontendPorts;
            return this;
        }
        public Builder frontendPorts(GetApplicationGatewayFrontendPort... frontendPorts) {
            return frontendPorts(List.of(frontendPorts));
        }
        @CustomType.Setter
        public Builder gatewayIpConfigurations(List<GetApplicationGatewayGatewayIpConfiguration> gatewayIpConfigurations) {
            if (gatewayIpConfigurations == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayResult", "gatewayIpConfigurations");
            }
            this.gatewayIpConfigurations = gatewayIpConfigurations;
            return this;
        }
        public Builder gatewayIpConfigurations(GetApplicationGatewayGatewayIpConfiguration... gatewayIpConfigurations) {
            return gatewayIpConfigurations(List.of(gatewayIpConfigurations));
        }
        @CustomType.Setter
        public Builder globals(List<GetApplicationGatewayGlobal> globals) {
            if (globals == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayResult", "globals");
            }
            this.globals = globals;
            return this;
        }
        public Builder globals(GetApplicationGatewayGlobal... globals) {
            return globals(List.of(globals));
        }
        @CustomType.Setter
        public Builder http2Enabled(Boolean http2Enabled) {
            if (http2Enabled == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayResult", "http2Enabled");
            }
            this.http2Enabled = http2Enabled;
            return this;
        }
        @CustomType.Setter
        public Builder httpListeners(List<GetApplicationGatewayHttpListener> httpListeners) {
            if (httpListeners == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayResult", "httpListeners");
            }
            this.httpListeners = httpListeners;
            return this;
        }
        public Builder httpListeners(GetApplicationGatewayHttpListener... httpListeners) {
            return httpListeners(List.of(httpListeners));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder identities(List<GetApplicationGatewayIdentity> identities) {
            if (identities == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayResult", "identities");
            }
            this.identities = identities;
            return this;
        }
        public Builder identities(GetApplicationGatewayIdentity... identities) {
            return identities(List.of(identities));
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder privateEndpointConnections(List<GetApplicationGatewayPrivateEndpointConnection> privateEndpointConnections) {
            if (privateEndpointConnections == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayResult", "privateEndpointConnections");
            }
            this.privateEndpointConnections = privateEndpointConnections;
            return this;
        }
        public Builder privateEndpointConnections(GetApplicationGatewayPrivateEndpointConnection... privateEndpointConnections) {
            return privateEndpointConnections(List.of(privateEndpointConnections));
        }
        @CustomType.Setter
        public Builder privateLinkConfigurations(List<GetApplicationGatewayPrivateLinkConfiguration> privateLinkConfigurations) {
            if (privateLinkConfigurations == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayResult", "privateLinkConfigurations");
            }
            this.privateLinkConfigurations = privateLinkConfigurations;
            return this;
        }
        public Builder privateLinkConfigurations(GetApplicationGatewayPrivateLinkConfiguration... privateLinkConfigurations) {
            return privateLinkConfigurations(List.of(privateLinkConfigurations));
        }
        @CustomType.Setter
        public Builder probes(List<GetApplicationGatewayProbe> probes) {
            if (probes == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayResult", "probes");
            }
            this.probes = probes;
            return this;
        }
        public Builder probes(GetApplicationGatewayProbe... probes) {
            return probes(List.of(probes));
        }
        @CustomType.Setter
        public Builder redirectConfigurations(List<GetApplicationGatewayRedirectConfiguration> redirectConfigurations) {
            if (redirectConfigurations == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayResult", "redirectConfigurations");
            }
            this.redirectConfigurations = redirectConfigurations;
            return this;
        }
        public Builder redirectConfigurations(GetApplicationGatewayRedirectConfiguration... redirectConfigurations) {
            return redirectConfigurations(List.of(redirectConfigurations));
        }
        @CustomType.Setter
        public Builder requestRoutingRules(List<GetApplicationGatewayRequestRoutingRule> requestRoutingRules) {
            if (requestRoutingRules == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayResult", "requestRoutingRules");
            }
            this.requestRoutingRules = requestRoutingRules;
            return this;
        }
        public Builder requestRoutingRules(GetApplicationGatewayRequestRoutingRule... requestRoutingRules) {
            return requestRoutingRules(List.of(requestRoutingRules));
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            if (resourceGroupName == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayResult", "resourceGroupName");
            }
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder rewriteRuleSets(List<GetApplicationGatewayRewriteRuleSet> rewriteRuleSets) {
            if (rewriteRuleSets == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayResult", "rewriteRuleSets");
            }
            this.rewriteRuleSets = rewriteRuleSets;
            return this;
        }
        public Builder rewriteRuleSets(GetApplicationGatewayRewriteRuleSet... rewriteRuleSets) {
            return rewriteRuleSets(List.of(rewriteRuleSets));
        }
        @CustomType.Setter
        public Builder skus(List<GetApplicationGatewaySkus> skus) {
            if (skus == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayResult", "skus");
            }
            this.skus = skus;
            return this;
        }
        public Builder skus(GetApplicationGatewaySkus... skus) {
            return skus(List.of(skus));
        }
        @CustomType.Setter
        public Builder sslCertificates(List<GetApplicationGatewaySslCertificate> sslCertificates) {
            if (sslCertificates == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayResult", "sslCertificates");
            }
            this.sslCertificates = sslCertificates;
            return this;
        }
        public Builder sslCertificates(GetApplicationGatewaySslCertificate... sslCertificates) {
            return sslCertificates(List.of(sslCertificates));
        }
        @CustomType.Setter
        public Builder sslPolicies(List<GetApplicationGatewaySslPolicy> sslPolicies) {
            if (sslPolicies == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayResult", "sslPolicies");
            }
            this.sslPolicies = sslPolicies;
            return this;
        }
        public Builder sslPolicies(GetApplicationGatewaySslPolicy... sslPolicies) {
            return sslPolicies(List.of(sslPolicies));
        }
        @CustomType.Setter
        public Builder sslProfiles(List<GetApplicationGatewaySslProfile> sslProfiles) {
            if (sslProfiles == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayResult", "sslProfiles");
            }
            this.sslProfiles = sslProfiles;
            return this;
        }
        public Builder sslProfiles(GetApplicationGatewaySslProfile... sslProfiles) {
            return sslProfiles(List.of(sslProfiles));
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder trustedClientCertificates(List<GetApplicationGatewayTrustedClientCertificate> trustedClientCertificates) {
            if (trustedClientCertificates == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayResult", "trustedClientCertificates");
            }
            this.trustedClientCertificates = trustedClientCertificates;
            return this;
        }
        public Builder trustedClientCertificates(GetApplicationGatewayTrustedClientCertificate... trustedClientCertificates) {
            return trustedClientCertificates(List.of(trustedClientCertificates));
        }
        @CustomType.Setter
        public Builder trustedRootCertificates(List<GetApplicationGatewayTrustedRootCertificate> trustedRootCertificates) {
            if (trustedRootCertificates == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayResult", "trustedRootCertificates");
            }
            this.trustedRootCertificates = trustedRootCertificates;
            return this;
        }
        public Builder trustedRootCertificates(GetApplicationGatewayTrustedRootCertificate... trustedRootCertificates) {
            return trustedRootCertificates(List.of(trustedRootCertificates));
        }
        @CustomType.Setter
        public Builder urlPathMaps(List<GetApplicationGatewayUrlPathMap> urlPathMaps) {
            if (urlPathMaps == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayResult", "urlPathMaps");
            }
            this.urlPathMaps = urlPathMaps;
            return this;
        }
        public Builder urlPathMaps(GetApplicationGatewayUrlPathMap... urlPathMaps) {
            return urlPathMaps(List.of(urlPathMaps));
        }
        @CustomType.Setter
        public Builder wafConfigurations(List<GetApplicationGatewayWafConfiguration> wafConfigurations) {
            if (wafConfigurations == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayResult", "wafConfigurations");
            }
            this.wafConfigurations = wafConfigurations;
            return this;
        }
        public Builder wafConfigurations(GetApplicationGatewayWafConfiguration... wafConfigurations) {
            return wafConfigurations(List.of(wafConfigurations));
        }
        @CustomType.Setter
        public Builder zones(List<String> zones) {
            if (zones == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayResult", "zones");
            }
            this.zones = zones;
            return this;
        }
        public Builder zones(String... zones) {
            return zones(List.of(zones));
        }
        public GetApplicationGatewayResult build() {
            final var _resultValue = new GetApplicationGatewayResult();
            _resultValue.authenticationCertificates = authenticationCertificates;
            _resultValue.autoscaleConfigurations = autoscaleConfigurations;
            _resultValue.backendAddressPools = backendAddressPools;
            _resultValue.backendHttpSettings = backendHttpSettings;
            _resultValue.customErrorConfigurations = customErrorConfigurations;
            _resultValue.fipsEnabled = fipsEnabled;
            _resultValue.firewallPolicyId = firewallPolicyId;
            _resultValue.forceFirewallPolicyAssociation = forceFirewallPolicyAssociation;
            _resultValue.frontendIpConfigurations = frontendIpConfigurations;
            _resultValue.frontendPorts = frontendPorts;
            _resultValue.gatewayIpConfigurations = gatewayIpConfigurations;
            _resultValue.globals = globals;
            _resultValue.http2Enabled = http2Enabled;
            _resultValue.httpListeners = httpListeners;
            _resultValue.id = id;
            _resultValue.identities = identities;
            _resultValue.location = location;
            _resultValue.name = name;
            _resultValue.privateEndpointConnections = privateEndpointConnections;
            _resultValue.privateLinkConfigurations = privateLinkConfigurations;
            _resultValue.probes = probes;
            _resultValue.redirectConfigurations = redirectConfigurations;
            _resultValue.requestRoutingRules = requestRoutingRules;
            _resultValue.resourceGroupName = resourceGroupName;
            _resultValue.rewriteRuleSets = rewriteRuleSets;
            _resultValue.skus = skus;
            _resultValue.sslCertificates = sslCertificates;
            _resultValue.sslPolicies = sslPolicies;
            _resultValue.sslProfiles = sslProfiles;
            _resultValue.tags = tags;
            _resultValue.trustedClientCertificates = trustedClientCertificates;
            _resultValue.trustedRootCertificates = trustedRootCertificates;
            _resultValue.urlPathMaps = urlPathMaps;
            _resultValue.wafConfigurations = wafConfigurations;
            _resultValue.zones = zones;
            return _resultValue;
        }
    }
}
