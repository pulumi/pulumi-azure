// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network.outputs;

import com.pulumi.azure.network.outputs.VirtualNetworkSubnetDelegation;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class VirtualNetworkSubnet {
    /**
     * @return The address prefixes to use for the subnet.
     * 
     */
    private List<String> addressPrefixes;
    /**
     * @return Enable default outbound access to the internet for the subnet. Defaults to `true`.
     * 
     */
    private @Nullable Boolean defaultOutboundAccessEnabled;
    /**
     * @return One or more `delegation` blocks as defined below.
     * 
     */
    private @Nullable VirtualNetworkSubnetDelegation delegation;
    /**
     * @return The ID of this subnet.
     * 
     */
    private @Nullable String id;
    /**
     * @return The name of the subnet.
     * 
     */
    private String name;
    /**
     * @return Enable or Disable network policies for the private endpoint on the subnet. Possible values are `Disabled`, `Enabled`, `NetworkSecurityGroupEnabled` and `RouteTableEnabled`. Defaults to `Disabled`.
     * 
     * &gt; **Note:** If you don&#39;t want to use network policies like user-defined Routes and Network Security Groups, you need to set `privateEndpointNetworkPolicies` in the subnet to `Disabled`. This setting only applies to Private Endpoints in the Subnet and affects all Private Endpoints in the Subnet.
     * 
     * &gt; **Note:** If you want to use network policies like user-defined Routes and Network Security Groups, you need to set the `privateEndpointNetworkPolicies` in the Subnet to `Enabled`/`NetworkSecurityGroupEnabled`/`RouteTableEnabled`. This setting only applies to Private Endpoints in the Subnet and affects all Private Endpoints in the Subnet.
     * 
     * &gt; **Note:** See more details from [Manage network policies for Private Endpoints](https://learn.microsoft.com/en-gb/azure/private-link/disable-private-endpoint-network-policy?tabs=network-policy-portal).
     * 
     */
    private @Nullable String privateEndpointNetworkPolicies;
    /**
     * @return Enable or Disable network policies for the private link service on the subnet. Defaults to `true`.
     * 
     * &gt; **Note:** When configuring Azure Private Link service, the explicit setting `privateLinkServiceNetworkPoliciesEnabled` must be set to `false` in the subnet since Private Link Service does not support network policies like user-defined Routes and Network Security Groups. This setting only affects the Private Link service. For other resources in the subnet, access is controlled based on the Network Security Group which can be configured using the `azure.network.SubnetNetworkSecurityGroupAssociation` resource. See more details from [Manage network policies for Private Link Services](https://learn.microsoft.com/en-gb/azure/private-link/disable-private-link-service-network-policy?tabs=private-link-network-policy-powershell).
     * 
     */
    private @Nullable Boolean privateLinkServiceNetworkPoliciesEnabled;
    /**
     * @return The ID of the Route Table that should be associated with this subnet.
     * 
     */
    private @Nullable String routeTableId;
    /**
     * @return The Network Security Group to associate with the subnet. (Referenced by `id`, ie. `azurerm_network_security_group.example.id`)
     * 
     */
    private @Nullable String securityGroup;
    /**
     * @return The list of IDs of Service Endpoint Policies to associate with the subnet.
     * 
     */
    private @Nullable List<String> serviceEndpointPolicyIds;
    /**
     * @return The list of Service endpoints to associate with the subnet. Possible values include: `Microsoft.AzureActiveDirectory`, `Microsoft.AzureCosmosDB`, `Microsoft.ContainerRegistry`, `Microsoft.EventHub`, `Microsoft.KeyVault`, `Microsoft.ServiceBus`, `Microsoft.Sql`, `Microsoft.Storage`, `Microsoft.Storage.Global` and `Microsoft.Web`.
     * 
     */
    private @Nullable List<String> serviceEndpoints;

    private VirtualNetworkSubnet() {}
    /**
     * @return The address prefixes to use for the subnet.
     * 
     */
    public List<String> addressPrefixes() {
        return this.addressPrefixes;
    }
    /**
     * @return Enable default outbound access to the internet for the subnet. Defaults to `true`.
     * 
     */
    public Optional<Boolean> defaultOutboundAccessEnabled() {
        return Optional.ofNullable(this.defaultOutboundAccessEnabled);
    }
    /**
     * @return One or more `delegation` blocks as defined below.
     * 
     */
    public Optional<VirtualNetworkSubnetDelegation> delegation() {
        return Optional.ofNullable(this.delegation);
    }
    /**
     * @return The ID of this subnet.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The name of the subnet.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Enable or Disable network policies for the private endpoint on the subnet. Possible values are `Disabled`, `Enabled`, `NetworkSecurityGroupEnabled` and `RouteTableEnabled`. Defaults to `Disabled`.
     * 
     * &gt; **Note:** If you don&#39;t want to use network policies like user-defined Routes and Network Security Groups, you need to set `privateEndpointNetworkPolicies` in the subnet to `Disabled`. This setting only applies to Private Endpoints in the Subnet and affects all Private Endpoints in the Subnet.
     * 
     * &gt; **Note:** If you want to use network policies like user-defined Routes and Network Security Groups, you need to set the `privateEndpointNetworkPolicies` in the Subnet to `Enabled`/`NetworkSecurityGroupEnabled`/`RouteTableEnabled`. This setting only applies to Private Endpoints in the Subnet and affects all Private Endpoints in the Subnet.
     * 
     * &gt; **Note:** See more details from [Manage network policies for Private Endpoints](https://learn.microsoft.com/en-gb/azure/private-link/disable-private-endpoint-network-policy?tabs=network-policy-portal).
     * 
     */
    public Optional<String> privateEndpointNetworkPolicies() {
        return Optional.ofNullable(this.privateEndpointNetworkPolicies);
    }
    /**
     * @return Enable or Disable network policies for the private link service on the subnet. Defaults to `true`.
     * 
     * &gt; **Note:** When configuring Azure Private Link service, the explicit setting `privateLinkServiceNetworkPoliciesEnabled` must be set to `false` in the subnet since Private Link Service does not support network policies like user-defined Routes and Network Security Groups. This setting only affects the Private Link service. For other resources in the subnet, access is controlled based on the Network Security Group which can be configured using the `azure.network.SubnetNetworkSecurityGroupAssociation` resource. See more details from [Manage network policies for Private Link Services](https://learn.microsoft.com/en-gb/azure/private-link/disable-private-link-service-network-policy?tabs=private-link-network-policy-powershell).
     * 
     */
    public Optional<Boolean> privateLinkServiceNetworkPoliciesEnabled() {
        return Optional.ofNullable(this.privateLinkServiceNetworkPoliciesEnabled);
    }
    /**
     * @return The ID of the Route Table that should be associated with this subnet.
     * 
     */
    public Optional<String> routeTableId() {
        return Optional.ofNullable(this.routeTableId);
    }
    /**
     * @return The Network Security Group to associate with the subnet. (Referenced by `id`, ie. `azurerm_network_security_group.example.id`)
     * 
     */
    public Optional<String> securityGroup() {
        return Optional.ofNullable(this.securityGroup);
    }
    /**
     * @return The list of IDs of Service Endpoint Policies to associate with the subnet.
     * 
     */
    public List<String> serviceEndpointPolicyIds() {
        return this.serviceEndpointPolicyIds == null ? List.of() : this.serviceEndpointPolicyIds;
    }
    /**
     * @return The list of Service endpoints to associate with the subnet. Possible values include: `Microsoft.AzureActiveDirectory`, `Microsoft.AzureCosmosDB`, `Microsoft.ContainerRegistry`, `Microsoft.EventHub`, `Microsoft.KeyVault`, `Microsoft.ServiceBus`, `Microsoft.Sql`, `Microsoft.Storage`, `Microsoft.Storage.Global` and `Microsoft.Web`.
     * 
     */
    public List<String> serviceEndpoints() {
        return this.serviceEndpoints == null ? List.of() : this.serviceEndpoints;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VirtualNetworkSubnet defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> addressPrefixes;
        private @Nullable Boolean defaultOutboundAccessEnabled;
        private @Nullable VirtualNetworkSubnetDelegation delegation;
        private @Nullable String id;
        private String name;
        private @Nullable String privateEndpointNetworkPolicies;
        private @Nullable Boolean privateLinkServiceNetworkPoliciesEnabled;
        private @Nullable String routeTableId;
        private @Nullable String securityGroup;
        private @Nullable List<String> serviceEndpointPolicyIds;
        private @Nullable List<String> serviceEndpoints;
        public Builder() {}
        public Builder(VirtualNetworkSubnet defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.addressPrefixes = defaults.addressPrefixes;
    	      this.defaultOutboundAccessEnabled = defaults.defaultOutboundAccessEnabled;
    	      this.delegation = defaults.delegation;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.privateEndpointNetworkPolicies = defaults.privateEndpointNetworkPolicies;
    	      this.privateLinkServiceNetworkPoliciesEnabled = defaults.privateLinkServiceNetworkPoliciesEnabled;
    	      this.routeTableId = defaults.routeTableId;
    	      this.securityGroup = defaults.securityGroup;
    	      this.serviceEndpointPolicyIds = defaults.serviceEndpointPolicyIds;
    	      this.serviceEndpoints = defaults.serviceEndpoints;
        }

        @CustomType.Setter
        public Builder addressPrefixes(List<String> addressPrefixes) {
            if (addressPrefixes == null) {
              throw new MissingRequiredPropertyException("VirtualNetworkSubnet", "addressPrefixes");
            }
            this.addressPrefixes = addressPrefixes;
            return this;
        }
        public Builder addressPrefixes(String... addressPrefixes) {
            return addressPrefixes(List.of(addressPrefixes));
        }
        @CustomType.Setter
        public Builder defaultOutboundAccessEnabled(@Nullable Boolean defaultOutboundAccessEnabled) {

            this.defaultOutboundAccessEnabled = defaultOutboundAccessEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder delegation(@Nullable VirtualNetworkSubnetDelegation delegation) {

            this.delegation = delegation;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("VirtualNetworkSubnet", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder privateEndpointNetworkPolicies(@Nullable String privateEndpointNetworkPolicies) {

            this.privateEndpointNetworkPolicies = privateEndpointNetworkPolicies;
            return this;
        }
        @CustomType.Setter
        public Builder privateLinkServiceNetworkPoliciesEnabled(@Nullable Boolean privateLinkServiceNetworkPoliciesEnabled) {

            this.privateLinkServiceNetworkPoliciesEnabled = privateLinkServiceNetworkPoliciesEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder routeTableId(@Nullable String routeTableId) {

            this.routeTableId = routeTableId;
            return this;
        }
        @CustomType.Setter
        public Builder securityGroup(@Nullable String securityGroup) {

            this.securityGroup = securityGroup;
            return this;
        }
        @CustomType.Setter
        public Builder serviceEndpointPolicyIds(@Nullable List<String> serviceEndpointPolicyIds) {

            this.serviceEndpointPolicyIds = serviceEndpointPolicyIds;
            return this;
        }
        public Builder serviceEndpointPolicyIds(String... serviceEndpointPolicyIds) {
            return serviceEndpointPolicyIds(List.of(serviceEndpointPolicyIds));
        }
        @CustomType.Setter
        public Builder serviceEndpoints(@Nullable List<String> serviceEndpoints) {

            this.serviceEndpoints = serviceEndpoints;
            return this;
        }
        public Builder serviceEndpoints(String... serviceEndpoints) {
            return serviceEndpoints(List.of(serviceEndpoints));
        }
        public VirtualNetworkSubnet build() {
            final var _resultValue = new VirtualNetworkSubnet();
            _resultValue.addressPrefixes = addressPrefixes;
            _resultValue.defaultOutboundAccessEnabled = defaultOutboundAccessEnabled;
            _resultValue.delegation = delegation;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.privateEndpointNetworkPolicies = privateEndpointNetworkPolicies;
            _resultValue.privateLinkServiceNetworkPoliciesEnabled = privateLinkServiceNetworkPoliciesEnabled;
            _resultValue.routeTableId = routeTableId;
            _resultValue.securityGroup = securityGroup;
            _resultValue.serviceEndpointPolicyIds = serviceEndpointPolicyIds;
            _resultValue.serviceEndpoints = serviceEndpoints;
            return _resultValue;
        }
    }
}
