// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appservice.outputs;

import com.pulumi.azure.appservice.outputs.GetLinuxWebAppAuthSettingActiveDirectory;
import com.pulumi.azure.appservice.outputs.GetLinuxWebAppAuthSettingFacebook;
import com.pulumi.azure.appservice.outputs.GetLinuxWebAppAuthSettingGithub;
import com.pulumi.azure.appservice.outputs.GetLinuxWebAppAuthSettingGoogle;
import com.pulumi.azure.appservice.outputs.GetLinuxWebAppAuthSettingMicrosoft;
import com.pulumi.azure.appservice.outputs.GetLinuxWebAppAuthSettingTwitter;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetLinuxWebAppAuthSetting {
    /**
     * @return A `active_directory` block as defined above.
     * 
     */
    private List<GetLinuxWebAppAuthSettingActiveDirectory> activeDirectories;
    /**
     * @return A `additional_login_parameters` block as defined above.
     * 
     */
    private Map<String,String> additionalLoginParameters;
    /**
     * @return External URLs that can be redirected to as part of logging in or logging out of the app.
     * 
     */
    private List<String> allowedExternalRedirectUrls;
    /**
     * @return The Default Authentication Provider used when more than one Authentication Provider is configured and the `unauthenticated_action` is set to `RedirectToLoginPage`.
     * 
     */
    private String defaultProvider;
    /**
     * @return Is the Backup enabled?
     * 
     */
    private Boolean enabled;
    /**
     * @return A `facebook` block as defined below.
     * 
     */
    private List<GetLinuxWebAppAuthSettingFacebook> facebooks;
    /**
     * @return A `github` block as defined below.
     * 
     */
    private List<GetLinuxWebAppAuthSettingGithub> githubs;
    /**
     * @return A `google` block as defined below.
     * 
     */
    private List<GetLinuxWebAppAuthSettingGoogle> googles;
    /**
     * @return The OpenID Connect Issuer URI that represents the entity which issues access tokens for this Linux Web App.
     * 
     */
    private String issuer;
    /**
     * @return A `microsoft` block as defined below.
     * 
     */
    private List<GetLinuxWebAppAuthSettingMicrosoft> microsofts;
    /**
     * @return The Runtime Version of the Authentication and Authorisation feature of this App.
     * 
     */
    private String runtimeVersion;
    /**
     * @return The number of hours after session token expiration that a session token can be used to call the token refresh API.
     * 
     */
    private Double tokenRefreshExtensionHours;
    /**
     * @return Is the Token Store configuration Enabled.
     * 
     */
    private Boolean tokenStoreEnabled;
    /**
     * @return A `twitter` block as defined below.
     * 
     */
    private List<GetLinuxWebAppAuthSettingTwitter> twitters;
    /**
     * @return The action to take when an unauthenticated client attempts to access the app.
     * 
     */
    private String unauthenticatedClientAction;

    private GetLinuxWebAppAuthSetting() {}
    /**
     * @return A `active_directory` block as defined above.
     * 
     */
    public List<GetLinuxWebAppAuthSettingActiveDirectory> activeDirectories() {
        return this.activeDirectories;
    }
    /**
     * @return A `additional_login_parameters` block as defined above.
     * 
     */
    public Map<String,String> additionalLoginParameters() {
        return this.additionalLoginParameters;
    }
    /**
     * @return External URLs that can be redirected to as part of logging in or logging out of the app.
     * 
     */
    public List<String> allowedExternalRedirectUrls() {
        return this.allowedExternalRedirectUrls;
    }
    /**
     * @return The Default Authentication Provider used when more than one Authentication Provider is configured and the `unauthenticated_action` is set to `RedirectToLoginPage`.
     * 
     */
    public String defaultProvider() {
        return this.defaultProvider;
    }
    /**
     * @return Is the Backup enabled?
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return A `facebook` block as defined below.
     * 
     */
    public List<GetLinuxWebAppAuthSettingFacebook> facebooks() {
        return this.facebooks;
    }
    /**
     * @return A `github` block as defined below.
     * 
     */
    public List<GetLinuxWebAppAuthSettingGithub> githubs() {
        return this.githubs;
    }
    /**
     * @return A `google` block as defined below.
     * 
     */
    public List<GetLinuxWebAppAuthSettingGoogle> googles() {
        return this.googles;
    }
    /**
     * @return The OpenID Connect Issuer URI that represents the entity which issues access tokens for this Linux Web App.
     * 
     */
    public String issuer() {
        return this.issuer;
    }
    /**
     * @return A `microsoft` block as defined below.
     * 
     */
    public List<GetLinuxWebAppAuthSettingMicrosoft> microsofts() {
        return this.microsofts;
    }
    /**
     * @return The Runtime Version of the Authentication and Authorisation feature of this App.
     * 
     */
    public String runtimeVersion() {
        return this.runtimeVersion;
    }
    /**
     * @return The number of hours after session token expiration that a session token can be used to call the token refresh API.
     * 
     */
    public Double tokenRefreshExtensionHours() {
        return this.tokenRefreshExtensionHours;
    }
    /**
     * @return Is the Token Store configuration Enabled.
     * 
     */
    public Boolean tokenStoreEnabled() {
        return this.tokenStoreEnabled;
    }
    /**
     * @return A `twitter` block as defined below.
     * 
     */
    public List<GetLinuxWebAppAuthSettingTwitter> twitters() {
        return this.twitters;
    }
    /**
     * @return The action to take when an unauthenticated client attempts to access the app.
     * 
     */
    public String unauthenticatedClientAction() {
        return this.unauthenticatedClientAction;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLinuxWebAppAuthSetting defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetLinuxWebAppAuthSettingActiveDirectory> activeDirectories;
        private Map<String,String> additionalLoginParameters;
        private List<String> allowedExternalRedirectUrls;
        private String defaultProvider;
        private Boolean enabled;
        private List<GetLinuxWebAppAuthSettingFacebook> facebooks;
        private List<GetLinuxWebAppAuthSettingGithub> githubs;
        private List<GetLinuxWebAppAuthSettingGoogle> googles;
        private String issuer;
        private List<GetLinuxWebAppAuthSettingMicrosoft> microsofts;
        private String runtimeVersion;
        private Double tokenRefreshExtensionHours;
        private Boolean tokenStoreEnabled;
        private List<GetLinuxWebAppAuthSettingTwitter> twitters;
        private String unauthenticatedClientAction;
        public Builder() {}
        public Builder(GetLinuxWebAppAuthSetting defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activeDirectories = defaults.activeDirectories;
    	      this.additionalLoginParameters = defaults.additionalLoginParameters;
    	      this.allowedExternalRedirectUrls = defaults.allowedExternalRedirectUrls;
    	      this.defaultProvider = defaults.defaultProvider;
    	      this.enabled = defaults.enabled;
    	      this.facebooks = defaults.facebooks;
    	      this.githubs = defaults.githubs;
    	      this.googles = defaults.googles;
    	      this.issuer = defaults.issuer;
    	      this.microsofts = defaults.microsofts;
    	      this.runtimeVersion = defaults.runtimeVersion;
    	      this.tokenRefreshExtensionHours = defaults.tokenRefreshExtensionHours;
    	      this.tokenStoreEnabled = defaults.tokenStoreEnabled;
    	      this.twitters = defaults.twitters;
    	      this.unauthenticatedClientAction = defaults.unauthenticatedClientAction;
        }

        @CustomType.Setter
        public Builder activeDirectories(List<GetLinuxWebAppAuthSettingActiveDirectory> activeDirectories) {
            if (activeDirectories == null) {
              throw new MissingRequiredPropertyException("GetLinuxWebAppAuthSetting", "activeDirectories");
            }
            this.activeDirectories = activeDirectories;
            return this;
        }
        public Builder activeDirectories(GetLinuxWebAppAuthSettingActiveDirectory... activeDirectories) {
            return activeDirectories(List.of(activeDirectories));
        }
        @CustomType.Setter
        public Builder additionalLoginParameters(Map<String,String> additionalLoginParameters) {
            if (additionalLoginParameters == null) {
              throw new MissingRequiredPropertyException("GetLinuxWebAppAuthSetting", "additionalLoginParameters");
            }
            this.additionalLoginParameters = additionalLoginParameters;
            return this;
        }
        @CustomType.Setter
        public Builder allowedExternalRedirectUrls(List<String> allowedExternalRedirectUrls) {
            if (allowedExternalRedirectUrls == null) {
              throw new MissingRequiredPropertyException("GetLinuxWebAppAuthSetting", "allowedExternalRedirectUrls");
            }
            this.allowedExternalRedirectUrls = allowedExternalRedirectUrls;
            return this;
        }
        public Builder allowedExternalRedirectUrls(String... allowedExternalRedirectUrls) {
            return allowedExternalRedirectUrls(List.of(allowedExternalRedirectUrls));
        }
        @CustomType.Setter
        public Builder defaultProvider(String defaultProvider) {
            if (defaultProvider == null) {
              throw new MissingRequiredPropertyException("GetLinuxWebAppAuthSetting", "defaultProvider");
            }
            this.defaultProvider = defaultProvider;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetLinuxWebAppAuthSetting", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder facebooks(List<GetLinuxWebAppAuthSettingFacebook> facebooks) {
            if (facebooks == null) {
              throw new MissingRequiredPropertyException("GetLinuxWebAppAuthSetting", "facebooks");
            }
            this.facebooks = facebooks;
            return this;
        }
        public Builder facebooks(GetLinuxWebAppAuthSettingFacebook... facebooks) {
            return facebooks(List.of(facebooks));
        }
        @CustomType.Setter
        public Builder githubs(List<GetLinuxWebAppAuthSettingGithub> githubs) {
            if (githubs == null) {
              throw new MissingRequiredPropertyException("GetLinuxWebAppAuthSetting", "githubs");
            }
            this.githubs = githubs;
            return this;
        }
        public Builder githubs(GetLinuxWebAppAuthSettingGithub... githubs) {
            return githubs(List.of(githubs));
        }
        @CustomType.Setter
        public Builder googles(List<GetLinuxWebAppAuthSettingGoogle> googles) {
            if (googles == null) {
              throw new MissingRequiredPropertyException("GetLinuxWebAppAuthSetting", "googles");
            }
            this.googles = googles;
            return this;
        }
        public Builder googles(GetLinuxWebAppAuthSettingGoogle... googles) {
            return googles(List.of(googles));
        }
        @CustomType.Setter
        public Builder issuer(String issuer) {
            if (issuer == null) {
              throw new MissingRequiredPropertyException("GetLinuxWebAppAuthSetting", "issuer");
            }
            this.issuer = issuer;
            return this;
        }
        @CustomType.Setter
        public Builder microsofts(List<GetLinuxWebAppAuthSettingMicrosoft> microsofts) {
            if (microsofts == null) {
              throw new MissingRequiredPropertyException("GetLinuxWebAppAuthSetting", "microsofts");
            }
            this.microsofts = microsofts;
            return this;
        }
        public Builder microsofts(GetLinuxWebAppAuthSettingMicrosoft... microsofts) {
            return microsofts(List.of(microsofts));
        }
        @CustomType.Setter
        public Builder runtimeVersion(String runtimeVersion) {
            if (runtimeVersion == null) {
              throw new MissingRequiredPropertyException("GetLinuxWebAppAuthSetting", "runtimeVersion");
            }
            this.runtimeVersion = runtimeVersion;
            return this;
        }
        @CustomType.Setter
        public Builder tokenRefreshExtensionHours(Double tokenRefreshExtensionHours) {
            if (tokenRefreshExtensionHours == null) {
              throw new MissingRequiredPropertyException("GetLinuxWebAppAuthSetting", "tokenRefreshExtensionHours");
            }
            this.tokenRefreshExtensionHours = tokenRefreshExtensionHours;
            return this;
        }
        @CustomType.Setter
        public Builder tokenStoreEnabled(Boolean tokenStoreEnabled) {
            if (tokenStoreEnabled == null) {
              throw new MissingRequiredPropertyException("GetLinuxWebAppAuthSetting", "tokenStoreEnabled");
            }
            this.tokenStoreEnabled = tokenStoreEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder twitters(List<GetLinuxWebAppAuthSettingTwitter> twitters) {
            if (twitters == null) {
              throw new MissingRequiredPropertyException("GetLinuxWebAppAuthSetting", "twitters");
            }
            this.twitters = twitters;
            return this;
        }
        public Builder twitters(GetLinuxWebAppAuthSettingTwitter... twitters) {
            return twitters(List.of(twitters));
        }
        @CustomType.Setter
        public Builder unauthenticatedClientAction(String unauthenticatedClientAction) {
            if (unauthenticatedClientAction == null) {
              throw new MissingRequiredPropertyException("GetLinuxWebAppAuthSetting", "unauthenticatedClientAction");
            }
            this.unauthenticatedClientAction = unauthenticatedClientAction;
            return this;
        }
        public GetLinuxWebAppAuthSetting build() {
            final var _resultValue = new GetLinuxWebAppAuthSetting();
            _resultValue.activeDirectories = activeDirectories;
            _resultValue.additionalLoginParameters = additionalLoginParameters;
            _resultValue.allowedExternalRedirectUrls = allowedExternalRedirectUrls;
            _resultValue.defaultProvider = defaultProvider;
            _resultValue.enabled = enabled;
            _resultValue.facebooks = facebooks;
            _resultValue.githubs = githubs;
            _resultValue.googles = googles;
            _resultValue.issuer = issuer;
            _resultValue.microsofts = microsofts;
            _resultValue.runtimeVersion = runtimeVersion;
            _resultValue.tokenRefreshExtensionHours = tokenRefreshExtensionHours;
            _resultValue.tokenStoreEnabled = tokenStoreEnabled;
            _resultValue.twitters = twitters;
            _resultValue.unauthenticatedClientAction = unauthenticatedClientAction;
            return _resultValue;
        }
    }
}
