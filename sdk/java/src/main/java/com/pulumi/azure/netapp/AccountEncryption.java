// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.netapp;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.netapp.AccountEncryptionArgs;
import com.pulumi.azure.netapp.inputs.AccountEncryptionState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a NetApp Account Encryption Resource.
 * 
 * For more information about Azure NetApp Files Customer-Managed Keys feature, please refer to [Configure customer-managed keys for Azure NetApp Files volume encryption](https://learn.microsoft.com/en-us/azure/azure-netapp-files/configure-customer-managed-keys)
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.core.CoreFunctions;
 * import com.pulumi.azure.authorization.UserAssignedIdentity;
 * import com.pulumi.azure.authorization.UserAssignedIdentityArgs;
 * import com.pulumi.azure.keyvault.KeyVault;
 * import com.pulumi.azure.keyvault.KeyVaultArgs;
 * import com.pulumi.azure.keyvault.inputs.KeyVaultAccessPolicyArgs;
 * import com.pulumi.azure.keyvault.Key;
 * import com.pulumi.azure.keyvault.KeyArgs;
 * import com.pulumi.azure.netapp.Account;
 * import com.pulumi.azure.netapp.AccountArgs;
 * import com.pulumi.azure.netapp.inputs.AccountIdentityArgs;
 * import com.pulumi.azure.netapp.AccountEncryption;
 * import com.pulumi.azure.netapp.AccountEncryptionArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new ResourceGroup("example", ResourceGroupArgs.builder()
 *             .name("example-resources")
 *             .location("West Europe")
 *             .build());
 * 
 *         final var current = CoreFunctions.getClientConfig(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
 * 
 *         var exampleUserAssignedIdentity = new UserAssignedIdentity("exampleUserAssignedIdentity", UserAssignedIdentityArgs.builder()
 *             .name("anf-user-assigned-identity")
 *             .location(example.location())
 *             .resourceGroupName(example.name())
 *             .build());
 * 
 *         var exampleKeyVault = new KeyVault("exampleKeyVault", KeyVaultArgs.builder()
 *             .name("anfcmkakv")
 *             .location(example.location())
 *             .resourceGroupName(example.name())
 *             .enabledForDiskEncryption(true)
 *             .enabledForDeployment(true)
 *             .enabledForTemplateDeployment(true)
 *             .purgeProtectionEnabled(true)
 *             .tenantId("00000000-0000-0000-0000-000000000000")
 *             .skuName("standard")
 *             .accessPolicies(            
 *                 KeyVaultAccessPolicyArgs.builder()
 *                     .tenantId("00000000-0000-0000-0000-000000000000")
 *                     .objectId(current.objectId())
 *                     .keyPermissions(                    
 *                         "Get",
 *                         "Create",
 *                         "Delete",
 *                         "WrapKey",
 *                         "UnwrapKey",
 *                         "GetRotationPolicy",
 *                         "SetRotationPolicy")
 *                     .build(),
 *                 KeyVaultAccessPolicyArgs.builder()
 *                     .tenantId("00000000-0000-0000-0000-000000000000")
 *                     .objectId(exampleUserAssignedIdentity.principalId())
 *                     .keyPermissions(                    
 *                         "Get",
 *                         "Encrypt",
 *                         "Decrypt")
 *                     .build())
 *             .build());
 * 
 *         var exampleKey = new Key("exampleKey", KeyArgs.builder()
 *             .name("anfencryptionkey")
 *             .keyVaultId(exampleKeyVault.id())
 *             .keyType("RSA")
 *             .keySize(2048)
 *             .keyOpts(            
 *                 "decrypt",
 *                 "encrypt",
 *                 "sign",
 *                 "unwrapKey",
 *                 "verify",
 *                 "wrapKey")
 *             .build());
 * 
 *         var exampleAccount = new Account("exampleAccount", AccountArgs.builder()
 *             .name("netappaccount")
 *             .location(example.location())
 *             .resourceGroupName(example.name())
 *             .identity(AccountIdentityArgs.builder()
 *                 .type("UserAssigned")
 *                 .identityIds(exampleUserAssignedIdentity.id())
 *                 .build())
 *             .build());
 * 
 *         var exampleAccountEncryption = new AccountEncryption("exampleAccountEncryption", AccountEncryptionArgs.builder()
 *             .netappAccountId(exampleAccount.id())
 *             .userAssignedIdentityId(exampleUserAssignedIdentity.id())
 *             .encryptionKey(exampleKey.versionlessId())
 *             .federatedClientId(exampleUserAssignedIdentity.clientId())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Cross-Tenant Usage
 * 
 * For scenarios where the key vault is in a different Entra ID tenant:
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.netapp.AccountEncryption;
 * import com.pulumi.azure.netapp.AccountEncryptionArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var crossTenant = new AccountEncryption("crossTenant", AccountEncryptionArgs.builder()
 *             .netappAccountId(example.id())
 *             .userAssignedIdentityId(exampleAzurermUserAssignedIdentity.id())
 *             .encryptionKey("https://keyvault-in-other-tenant.vault.azure.net/keys/encryption-key")
 *             .federatedClientId("12345678-1234-1234-1234-123456789012")
 *             .crossTenantKeyVaultResourceId("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/remote-rg/providers/Microsoft.KeyVault/vaults/keyvault-in-other-tenant")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## API Providers
 * 
 * &lt;!-- This section is generated, changes will be overwritten --&gt;
 * This resource uses the following Azure API Providers:
 * 
 * * `Microsoft.NetApp` - 2025-06-01
 * 
 * ## Import
 * 
 * Account Encryption Resources can be imported using the `resource id`, e.g.
 * 
 * ```sh
 * $ pulumi import azure:netapp/accountEncryption:AccountEncryption example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.NetApp/netAppAccounts/account1
 * ```
 * 
 */
@ResourceType(type="azure:netapp/accountEncryption:AccountEncryption")
public class AccountEncryption extends com.pulumi.resources.CustomResource {
    /**
     * The full resource ID of the cross-tenant key vault. This is recommended when using `federated_client_id` for cross-tenant scenarios to ensure proper validation by Azure APIs.
     * 
     */
    @Export(name="crossTenantKeyVaultResourceId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> crossTenantKeyVaultResourceId;

    /**
     * @return The full resource ID of the cross-tenant key vault. This is recommended when using `federated_client_id` for cross-tenant scenarios to ensure proper validation by Azure APIs.
     * 
     */
    public Output<Optional<String>> crossTenantKeyVaultResourceId() {
        return Codegen.optional(this.crossTenantKeyVaultResourceId);
    }
    /**
     * Specify the versionless ID of the encryption key.
     * 
     */
    @Export(name="encryptionKey", refs={String.class}, tree="[0]")
    private Output<String> encryptionKey;

    /**
     * @return Specify the versionless ID of the encryption key.
     * 
     */
    public Output<String> encryptionKey() {
        return this.encryptionKey;
    }
    /**
     * The Client ID of the multi-tenant Entra ID application used to access cross-tenant key vaults. This is only required when accessing a key vault in a different tenant than the NetApp account.
     * 
     */
    @Export(name="federatedClientId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> federatedClientId;

    /**
     * @return The Client ID of the multi-tenant Entra ID application used to access cross-tenant key vaults. This is only required when accessing a key vault in a different tenant than the NetApp account.
     * 
     */
    public Output<Optional<String>> federatedClientId() {
        return Codegen.optional(this.federatedClientId);
    }
    /**
     * The ID of the NetApp account where volume under it will have customer managed keys-based encryption enabled.
     * 
     */
    @Export(name="netappAccountId", refs={String.class}, tree="[0]")
    private Output<String> netappAccountId;

    /**
     * @return The ID of the NetApp account where volume under it will have customer managed keys-based encryption enabled.
     * 
     */
    public Output<String> netappAccountId() {
        return this.netappAccountId;
    }
    /**
     * The ID of the System Assigned Manged Identity. Conflicts with `user_assigned_identity_id`.
     * 
     */
    @Export(name="systemAssignedIdentityPrincipalId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> systemAssignedIdentityPrincipalId;

    /**
     * @return The ID of the System Assigned Manged Identity. Conflicts with `user_assigned_identity_id`.
     * 
     */
    public Output<Optional<String>> systemAssignedIdentityPrincipalId() {
        return Codegen.optional(this.systemAssignedIdentityPrincipalId);
    }
    /**
     * The ID of the User Assigned Managed Identity. Conflicts with `system_assigned_identity_principal_id`.
     * 
     */
    @Export(name="userAssignedIdentityId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> userAssignedIdentityId;

    /**
     * @return The ID of the User Assigned Managed Identity. Conflicts with `system_assigned_identity_principal_id`.
     * 
     */
    public Output<Optional<String>> userAssignedIdentityId() {
        return Codegen.optional(this.userAssignedIdentityId);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public AccountEncryption(java.lang.String name) {
        this(name, AccountEncryptionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public AccountEncryption(java.lang.String name, AccountEncryptionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public AccountEncryption(java.lang.String name, AccountEncryptionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:netapp/accountEncryption:AccountEncryption", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private AccountEncryption(java.lang.String name, Output<java.lang.String> id, @Nullable AccountEncryptionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:netapp/accountEncryption:AccountEncryption", name, state, makeResourceOptions(options, id), false);
    }

    private static AccountEncryptionArgs makeArgs(AccountEncryptionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? AccountEncryptionArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static AccountEncryption get(java.lang.String name, Output<java.lang.String> id, @Nullable AccountEncryptionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new AccountEncryption(name, id, state, options);
    }
}
