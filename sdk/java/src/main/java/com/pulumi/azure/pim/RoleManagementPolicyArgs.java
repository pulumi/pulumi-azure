// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.pim;

import com.pulumi.azure.pim.inputs.RoleManagementPolicyActivationRulesArgs;
import com.pulumi.azure.pim.inputs.RoleManagementPolicyActiveAssignmentRulesArgs;
import com.pulumi.azure.pim.inputs.RoleManagementPolicyEligibleAssignmentRulesArgs;
import com.pulumi.azure.pim.inputs.RoleManagementPolicyNotificationRulesArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RoleManagementPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final RoleManagementPolicyArgs Empty = new RoleManagementPolicyArgs();

    /**
     * An `activationRules` block as defined below.
     * 
     */
    @Import(name="activationRules")
    private @Nullable Output<RoleManagementPolicyActivationRulesArgs> activationRules;

    /**
     * @return An `activationRules` block as defined below.
     * 
     */
    public Optional<Output<RoleManagementPolicyActivationRulesArgs>> activationRules() {
        return Optional.ofNullable(this.activationRules);
    }

    /**
     * An `activeAssignmentRules` block as defined below.
     * 
     */
    @Import(name="activeAssignmentRules")
    private @Nullable Output<RoleManagementPolicyActiveAssignmentRulesArgs> activeAssignmentRules;

    /**
     * @return An `activeAssignmentRules` block as defined below.
     * 
     */
    public Optional<Output<RoleManagementPolicyActiveAssignmentRulesArgs>> activeAssignmentRules() {
        return Optional.ofNullable(this.activeAssignmentRules);
    }

    /**
     * An `eligibleAssignmentRules` block as defined below.
     * 
     */
    @Import(name="eligibleAssignmentRules")
    private @Nullable Output<RoleManagementPolicyEligibleAssignmentRulesArgs> eligibleAssignmentRules;

    /**
     * @return An `eligibleAssignmentRules` block as defined below.
     * 
     */
    public Optional<Output<RoleManagementPolicyEligibleAssignmentRulesArgs>> eligibleAssignmentRules() {
        return Optional.ofNullable(this.eligibleAssignmentRules);
    }

    /**
     * A `notificationRules` block as defined below.
     * 
     */
    @Import(name="notificationRules")
    private @Nullable Output<RoleManagementPolicyNotificationRulesArgs> notificationRules;

    /**
     * @return A `notificationRules` block as defined below.
     * 
     */
    public Optional<Output<RoleManagementPolicyNotificationRulesArgs>> notificationRules() {
        return Optional.ofNullable(this.notificationRules);
    }

    /**
     * The scoped Role Definition ID of the role for which this policy will apply. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="roleDefinitionId", required=true)
    private Output<String> roleDefinitionId;

    /**
     * @return The scoped Role Definition ID of the role for which this policy will apply. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> roleDefinitionId() {
        return this.roleDefinitionId;
    }

    /**
     * The scope to which this Role Management Policy will apply. Can refer to a management group, a subscription, a resource group or a resource. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="scope", required=true)
    private Output<String> scope;

    /**
     * @return The scope to which this Role Management Policy will apply. Can refer to a management group, a subscription, a resource group or a resource. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> scope() {
        return this.scope;
    }

    private RoleManagementPolicyArgs() {}

    private RoleManagementPolicyArgs(RoleManagementPolicyArgs $) {
        this.activationRules = $.activationRules;
        this.activeAssignmentRules = $.activeAssignmentRules;
        this.eligibleAssignmentRules = $.eligibleAssignmentRules;
        this.notificationRules = $.notificationRules;
        this.roleDefinitionId = $.roleDefinitionId;
        this.scope = $.scope;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RoleManagementPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RoleManagementPolicyArgs $;

        public Builder() {
            $ = new RoleManagementPolicyArgs();
        }

        public Builder(RoleManagementPolicyArgs defaults) {
            $ = new RoleManagementPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param activationRules An `activationRules` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder activationRules(@Nullable Output<RoleManagementPolicyActivationRulesArgs> activationRules) {
            $.activationRules = activationRules;
            return this;
        }

        /**
         * @param activationRules An `activationRules` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder activationRules(RoleManagementPolicyActivationRulesArgs activationRules) {
            return activationRules(Output.of(activationRules));
        }

        /**
         * @param activeAssignmentRules An `activeAssignmentRules` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder activeAssignmentRules(@Nullable Output<RoleManagementPolicyActiveAssignmentRulesArgs> activeAssignmentRules) {
            $.activeAssignmentRules = activeAssignmentRules;
            return this;
        }

        /**
         * @param activeAssignmentRules An `activeAssignmentRules` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder activeAssignmentRules(RoleManagementPolicyActiveAssignmentRulesArgs activeAssignmentRules) {
            return activeAssignmentRules(Output.of(activeAssignmentRules));
        }

        /**
         * @param eligibleAssignmentRules An `eligibleAssignmentRules` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder eligibleAssignmentRules(@Nullable Output<RoleManagementPolicyEligibleAssignmentRulesArgs> eligibleAssignmentRules) {
            $.eligibleAssignmentRules = eligibleAssignmentRules;
            return this;
        }

        /**
         * @param eligibleAssignmentRules An `eligibleAssignmentRules` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder eligibleAssignmentRules(RoleManagementPolicyEligibleAssignmentRulesArgs eligibleAssignmentRules) {
            return eligibleAssignmentRules(Output.of(eligibleAssignmentRules));
        }

        /**
         * @param notificationRules A `notificationRules` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder notificationRules(@Nullable Output<RoleManagementPolicyNotificationRulesArgs> notificationRules) {
            $.notificationRules = notificationRules;
            return this;
        }

        /**
         * @param notificationRules A `notificationRules` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder notificationRules(RoleManagementPolicyNotificationRulesArgs notificationRules) {
            return notificationRules(Output.of(notificationRules));
        }

        /**
         * @param roleDefinitionId The scoped Role Definition ID of the role for which this policy will apply. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder roleDefinitionId(Output<String> roleDefinitionId) {
            $.roleDefinitionId = roleDefinitionId;
            return this;
        }

        /**
         * @param roleDefinitionId The scoped Role Definition ID of the role for which this policy will apply. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder roleDefinitionId(String roleDefinitionId) {
            return roleDefinitionId(Output.of(roleDefinitionId));
        }

        /**
         * @param scope The scope to which this Role Management Policy will apply. Can refer to a management group, a subscription, a resource group or a resource. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder scope(Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope The scope to which this Role Management Policy will apply. Can refer to a management group, a subscription, a resource group or a resource. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        public RoleManagementPolicyArgs build() {
            if ($.roleDefinitionId == null) {
                throw new MissingRequiredPropertyException("RoleManagementPolicyArgs", "roleDefinitionId");
            }
            if ($.scope == null) {
                throw new MissingRequiredPropertyException("RoleManagementPolicyArgs", "scope");
            }
            return $;
        }
    }

}
