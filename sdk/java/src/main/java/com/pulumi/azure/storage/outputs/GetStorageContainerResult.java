// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.storage.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetStorageContainerResult {
    /**
     * @return The Access Level configured for this Container.
     * 
     */
    private final String containerAccessType;
    /**
     * @return Is there an Immutability Policy configured on this Storage Container?
     * 
     */
    private final Boolean hasImmutabilityPolicy;
    /**
     * @return Is there a Legal Hold configured on this Storage Container?
     * 
     */
    private final Boolean hasLegalHold;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * @return A mapping of MetaData for this Container.
     * 
     */
    private final Map<String,String> metadata;
    private final String name;
    /**
     * @return The Resource Manager ID of this Storage Container.
     * 
     */
    private final String resourceManagerId;
    private final String storageAccountName;

    @CustomType.Constructor
    private GetStorageContainerResult(
        @CustomType.Parameter("containerAccessType") String containerAccessType,
        @CustomType.Parameter("hasImmutabilityPolicy") Boolean hasImmutabilityPolicy,
        @CustomType.Parameter("hasLegalHold") Boolean hasLegalHold,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("metadata") Map<String,String> metadata,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("resourceManagerId") String resourceManagerId,
        @CustomType.Parameter("storageAccountName") String storageAccountName) {
        this.containerAccessType = containerAccessType;
        this.hasImmutabilityPolicy = hasImmutabilityPolicy;
        this.hasLegalHold = hasLegalHold;
        this.id = id;
        this.metadata = metadata;
        this.name = name;
        this.resourceManagerId = resourceManagerId;
        this.storageAccountName = storageAccountName;
    }

    /**
     * @return The Access Level configured for this Container.
     * 
     */
    public String containerAccessType() {
        return this.containerAccessType;
    }
    /**
     * @return Is there an Immutability Policy configured on this Storage Container?
     * 
     */
    public Boolean hasImmutabilityPolicy() {
        return this.hasImmutabilityPolicy;
    }
    /**
     * @return Is there a Legal Hold configured on this Storage Container?
     * 
     */
    public Boolean hasLegalHold() {
        return this.hasLegalHold;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A mapping of MetaData for this Container.
     * 
     */
    public Map<String,String> metadata() {
        return this.metadata;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return The Resource Manager ID of this Storage Container.
     * 
     */
    public String resourceManagerId() {
        return this.resourceManagerId;
    }
    public String storageAccountName() {
        return this.storageAccountName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetStorageContainerResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String containerAccessType;
        private Boolean hasImmutabilityPolicy;
        private Boolean hasLegalHold;
        private String id;
        private Map<String,String> metadata;
        private String name;
        private String resourceManagerId;
        private String storageAccountName;

        public Builder() {
    	      // Empty
        }

        public Builder(GetStorageContainerResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.containerAccessType = defaults.containerAccessType;
    	      this.hasImmutabilityPolicy = defaults.hasImmutabilityPolicy;
    	      this.hasLegalHold = defaults.hasLegalHold;
    	      this.id = defaults.id;
    	      this.metadata = defaults.metadata;
    	      this.name = defaults.name;
    	      this.resourceManagerId = defaults.resourceManagerId;
    	      this.storageAccountName = defaults.storageAccountName;
        }

        public Builder containerAccessType(String containerAccessType) {
            this.containerAccessType = Objects.requireNonNull(containerAccessType);
            return this;
        }
        public Builder hasImmutabilityPolicy(Boolean hasImmutabilityPolicy) {
            this.hasImmutabilityPolicy = Objects.requireNonNull(hasImmutabilityPolicy);
            return this;
        }
        public Builder hasLegalHold(Boolean hasLegalHold) {
            this.hasLegalHold = Objects.requireNonNull(hasLegalHold);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder metadata(Map<String,String> metadata) {
            this.metadata = Objects.requireNonNull(metadata);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder resourceManagerId(String resourceManagerId) {
            this.resourceManagerId = Objects.requireNonNull(resourceManagerId);
            return this;
        }
        public Builder storageAccountName(String storageAccountName) {
            this.storageAccountName = Objects.requireNonNull(storageAccountName);
            return this;
        }        public GetStorageContainerResult build() {
            return new GetStorageContainerResult(containerAccessType, hasImmutabilityPolicy, hasLegalHold, id, metadata, name, resourceManagerId, storageAccountName);
        }
    }
}
