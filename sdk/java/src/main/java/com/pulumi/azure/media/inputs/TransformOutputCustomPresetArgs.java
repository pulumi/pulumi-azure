// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.media.inputs;

import com.pulumi.azure.media.inputs.TransformOutputCustomPresetCodecArgs;
import com.pulumi.azure.media.inputs.TransformOutputCustomPresetFilterArgs;
import com.pulumi.azure.media.inputs.TransformOutputCustomPresetFormatArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TransformOutputCustomPresetArgs extends com.pulumi.resources.ResourceArgs {

    public static final TransformOutputCustomPresetArgs Empty = new TransformOutputCustomPresetArgs();

    /**
     * One or more `codec` blocks as defined above.
     * 
     */
    @Import(name="codecs", required=true)
    private Output<List<TransformOutputCustomPresetCodecArgs>> codecs;

    /**
     * @return One or more `codec` blocks as defined above.
     * 
     */
    public Output<List<TransformOutputCustomPresetCodecArgs>> codecs() {
        return this.codecs;
    }

    /**
     * Dictionary containing key value pairs for parameters not exposed in the preset itself.
     * 
     */
    @Import(name="experimentalOptions")
    private @Nullable Output<Map<String,String>> experimentalOptions;

    /**
     * @return Dictionary containing key value pairs for parameters not exposed in the preset itself.
     * 
     */
    public Optional<Output<Map<String,String>>> experimentalOptions() {
        return Optional.ofNullable(this.experimentalOptions);
    }

    /**
     * A `filter` block as defined below.
     * 
     */
    @Import(name="filter")
    private @Nullable Output<TransformOutputCustomPresetFilterArgs> filter;

    /**
     * @return A `filter` block as defined below.
     * 
     */
    public Optional<Output<TransformOutputCustomPresetFilterArgs>> filter() {
        return Optional.ofNullable(this.filter);
    }

    /**
     * One or more `format` blocks as defined below.
     * 
     */
    @Import(name="formats", required=true)
    private Output<List<TransformOutputCustomPresetFormatArgs>> formats;

    /**
     * @return One or more `format` blocks as defined below.
     * 
     */
    public Output<List<TransformOutputCustomPresetFormatArgs>> formats() {
        return this.formats;
    }

    private TransformOutputCustomPresetArgs() {}

    private TransformOutputCustomPresetArgs(TransformOutputCustomPresetArgs $) {
        this.codecs = $.codecs;
        this.experimentalOptions = $.experimentalOptions;
        this.filter = $.filter;
        this.formats = $.formats;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TransformOutputCustomPresetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TransformOutputCustomPresetArgs $;

        public Builder() {
            $ = new TransformOutputCustomPresetArgs();
        }

        public Builder(TransformOutputCustomPresetArgs defaults) {
            $ = new TransformOutputCustomPresetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param codecs One or more `codec` blocks as defined above.
         * 
         * @return builder
         * 
         */
        public Builder codecs(Output<List<TransformOutputCustomPresetCodecArgs>> codecs) {
            $.codecs = codecs;
            return this;
        }

        /**
         * @param codecs One or more `codec` blocks as defined above.
         * 
         * @return builder
         * 
         */
        public Builder codecs(List<TransformOutputCustomPresetCodecArgs> codecs) {
            return codecs(Output.of(codecs));
        }

        /**
         * @param codecs One or more `codec` blocks as defined above.
         * 
         * @return builder
         * 
         */
        public Builder codecs(TransformOutputCustomPresetCodecArgs... codecs) {
            return codecs(List.of(codecs));
        }

        /**
         * @param experimentalOptions Dictionary containing key value pairs for parameters not exposed in the preset itself.
         * 
         * @return builder
         * 
         */
        public Builder experimentalOptions(@Nullable Output<Map<String,String>> experimentalOptions) {
            $.experimentalOptions = experimentalOptions;
            return this;
        }

        /**
         * @param experimentalOptions Dictionary containing key value pairs for parameters not exposed in the preset itself.
         * 
         * @return builder
         * 
         */
        public Builder experimentalOptions(Map<String,String> experimentalOptions) {
            return experimentalOptions(Output.of(experimentalOptions));
        }

        /**
         * @param filter A `filter` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder filter(@Nullable Output<TransformOutputCustomPresetFilterArgs> filter) {
            $.filter = filter;
            return this;
        }

        /**
         * @param filter A `filter` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder filter(TransformOutputCustomPresetFilterArgs filter) {
            return filter(Output.of(filter));
        }

        /**
         * @param formats One or more `format` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder formats(Output<List<TransformOutputCustomPresetFormatArgs>> formats) {
            $.formats = formats;
            return this;
        }

        /**
         * @param formats One or more `format` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder formats(List<TransformOutputCustomPresetFormatArgs> formats) {
            return formats(Output.of(formats));
        }

        /**
         * @param formats One or more `format` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder formats(TransformOutputCustomPresetFormatArgs... formats) {
            return formats(List.of(formats));
        }

        public TransformOutputCustomPresetArgs build() {
            if ($.codecs == null) {
                throw new MissingRequiredPropertyException("TransformOutputCustomPresetArgs", "codecs");
            }
            if ($.formats == null) {
                throw new MissingRequiredPropertyException("TransformOutputCustomPresetArgs", "formats");
            }
            return $;
        }
    }

}
