// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.cdn;

import com.pulumi.azure.cdn.inputs.EndpointDeliveryRuleArgs;
import com.pulumi.azure.cdn.inputs.EndpointGeoFilterArgs;
import com.pulumi.azure.cdn.inputs.EndpointGlobalDeliveryRuleArgs;
import com.pulumi.azure.cdn.inputs.EndpointOriginArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EndpointArgs extends com.pulumi.resources.ResourceArgs {

    public static final EndpointArgs Empty = new EndpointArgs();

    /**
     * An array of strings that indicates a content types on which compression will be applied. The value for the elements should be MIME types.
     * 
     */
    @Import(name="contentTypesToCompresses")
    private @Nullable Output<List<String>> contentTypesToCompresses;

    /**
     * @return An array of strings that indicates a content types on which compression will be applied. The value for the elements should be MIME types.
     * 
     */
    public Optional<Output<List<String>>> contentTypesToCompresses() {
        return Optional.ofNullable(this.contentTypesToCompresses);
    }

    /**
     * Rules for the rules engine. An endpoint can contain up until 4 of those rules that consist of conditions and actions. A `delivery_rule` blocks as defined below.
     * 
     */
    @Import(name="deliveryRules")
    private @Nullable Output<List<EndpointDeliveryRuleArgs>> deliveryRules;

    /**
     * @return Rules for the rules engine. An endpoint can contain up until 4 of those rules that consist of conditions and actions. A `delivery_rule` blocks as defined below.
     * 
     */
    public Optional<Output<List<EndpointDeliveryRuleArgs>>> deliveryRules() {
        return Optional.ofNullable(this.deliveryRules);
    }

    /**
     * A set of Geo Filters for this CDN Endpoint. Each `geo_filter` block supports fields documented below.
     * 
     */
    @Import(name="geoFilters")
    private @Nullable Output<List<EndpointGeoFilterArgs>> geoFilters;

    /**
     * @return A set of Geo Filters for this CDN Endpoint. Each `geo_filter` block supports fields documented below.
     * 
     */
    public Optional<Output<List<EndpointGeoFilterArgs>>> geoFilters() {
        return Optional.ofNullable(this.geoFilters);
    }

    /**
     * Actions that are valid for all resources regardless of any conditions. A `global_delivery_rule` block as defined below.
     * 
     */
    @Import(name="globalDeliveryRule")
    private @Nullable Output<EndpointGlobalDeliveryRuleArgs> globalDeliveryRule;

    /**
     * @return Actions that are valid for all resources regardless of any conditions. A `global_delivery_rule` block as defined below.
     * 
     */
    public Optional<Output<EndpointGlobalDeliveryRuleArgs>> globalDeliveryRule() {
        return Optional.ofNullable(this.globalDeliveryRule);
    }

    /**
     * Indicates whether compression is to be enabled.
     * 
     */
    @Import(name="isCompressionEnabled")
    private @Nullable Output<Boolean> isCompressionEnabled;

    /**
     * @return Indicates whether compression is to be enabled.
     * 
     */
    public Optional<Output<Boolean>> isCompressionEnabled() {
        return Optional.ofNullable(this.isCompressionEnabled);
    }

    /**
     * Specifies if http allowed. Defaults to `true`.
     * 
     */
    @Import(name="isHttpAllowed")
    private @Nullable Output<Boolean> isHttpAllowed;

    /**
     * @return Specifies if http allowed. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> isHttpAllowed() {
        return Optional.ofNullable(this.isHttpAllowed);
    }

    /**
     * Specifies if https allowed. Defaults to `true`.
     * 
     */
    @Import(name="isHttpsAllowed")
    private @Nullable Output<Boolean> isHttpsAllowed;

    /**
     * @return Specifies if https allowed. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> isHttpsAllowed() {
        return Optional.ofNullable(this.isHttpsAllowed);
    }

    /**
     * Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Specifies the name of the CDN Endpoint. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the name of the CDN Endpoint. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * What types of optimization should this CDN Endpoint optimize for? Possible values include `DynamicSiteAcceleration`, `GeneralMediaStreaming`, `GeneralWebDelivery`, `LargeFileDownload` and `VideoOnDemandMediaStreaming`.
     * 
     */
    @Import(name="optimizationType")
    private @Nullable Output<String> optimizationType;

    /**
     * @return What types of optimization should this CDN Endpoint optimize for? Possible values include `DynamicSiteAcceleration`, `GeneralMediaStreaming`, `GeneralWebDelivery`, `LargeFileDownload` and `VideoOnDemandMediaStreaming`.
     * 
     */
    public Optional<Output<String>> optimizationType() {
        return Optional.ofNullable(this.optimizationType);
    }

    /**
     * The host header CDN provider will send along with content requests to origins.
     * 
     */
    @Import(name="originHostHeader")
    private @Nullable Output<String> originHostHeader;

    /**
     * @return The host header CDN provider will send along with content requests to origins.
     * 
     */
    public Optional<Output<String>> originHostHeader() {
        return Optional.ofNullable(this.originHostHeader);
    }

    /**
     * The path used at for origin requests.
     * 
     */
    @Import(name="originPath")
    private @Nullable Output<String> originPath;

    /**
     * @return The path used at for origin requests.
     * 
     */
    public Optional<Output<String>> originPath() {
        return Optional.ofNullable(this.originPath);
    }

    /**
     * The set of origins of the CDN endpoint. When multiple origins exist, the first origin will be used as primary and rest will be used as failover options. Each `origin` block supports fields documented below. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="origins", required=true)
    private Output<List<EndpointOriginArgs>> origins;

    /**
     * @return The set of origins of the CDN endpoint. When multiple origins exist, the first origin will be used as primary and rest will be used as failover options. Each `origin` block supports fields documented below. Changing this forces a new resource to be created.
     * 
     */
    public Output<List<EndpointOriginArgs>> origins() {
        return this.origins;
    }

    /**
     * the path to a file hosted on the origin which helps accelerate delivery of the dynamic content and calculate the most optimal routes for the CDN. This is relative to the `origin_path`.
     * 
     * &gt; **NOTE:** `global_delivery_rule` and `delivery_rule` are currently only available for `Microsoft_Standard` CDN profiles.
     * 
     */
    @Import(name="probePath")
    private @Nullable Output<String> probePath;

    /**
     * @return the path to a file hosted on the origin which helps accelerate delivery of the dynamic content and calculate the most optimal routes for the CDN. This is relative to the `origin_path`.
     * 
     * &gt; **NOTE:** `global_delivery_rule` and `delivery_rule` are currently only available for `Microsoft_Standard` CDN profiles.
     * 
     */
    public Optional<Output<String>> probePath() {
        return Optional.ofNullable(this.probePath);
    }

    /**
     * The CDN Profile to which to attach the CDN Endpoint. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="profileName", required=true)
    private Output<String> profileName;

    /**
     * @return The CDN Profile to which to attach the CDN Endpoint. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> profileName() {
        return this.profileName;
    }

    /**
     * Sets query string caching behavior. Allowed values are `IgnoreQueryString`, `BypassCaching` and `UseQueryString`. `NotSet` value can be used for `Premium Verizon` CDN profile. Defaults to `IgnoreQueryString`.
     * 
     */
    @Import(name="querystringCachingBehaviour")
    private @Nullable Output<String> querystringCachingBehaviour;

    /**
     * @return Sets query string caching behavior. Allowed values are `IgnoreQueryString`, `BypassCaching` and `UseQueryString`. `NotSet` value can be used for `Premium Verizon` CDN profile. Defaults to `IgnoreQueryString`.
     * 
     */
    public Optional<Output<String>> querystringCachingBehaviour() {
        return Optional.ofNullable(this.querystringCachingBehaviour);
    }

    /**
     * The name of the resource group in which to create the CDN Endpoint. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group in which to create the CDN Endpoint. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private EndpointArgs() {}

    private EndpointArgs(EndpointArgs $) {
        this.contentTypesToCompresses = $.contentTypesToCompresses;
        this.deliveryRules = $.deliveryRules;
        this.geoFilters = $.geoFilters;
        this.globalDeliveryRule = $.globalDeliveryRule;
        this.isCompressionEnabled = $.isCompressionEnabled;
        this.isHttpAllowed = $.isHttpAllowed;
        this.isHttpsAllowed = $.isHttpsAllowed;
        this.location = $.location;
        this.name = $.name;
        this.optimizationType = $.optimizationType;
        this.originHostHeader = $.originHostHeader;
        this.originPath = $.originPath;
        this.origins = $.origins;
        this.probePath = $.probePath;
        this.profileName = $.profileName;
        this.querystringCachingBehaviour = $.querystringCachingBehaviour;
        this.resourceGroupName = $.resourceGroupName;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EndpointArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EndpointArgs $;

        public Builder() {
            $ = new EndpointArgs();
        }

        public Builder(EndpointArgs defaults) {
            $ = new EndpointArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param contentTypesToCompresses An array of strings that indicates a content types on which compression will be applied. The value for the elements should be MIME types.
         * 
         * @return builder
         * 
         */
        public Builder contentTypesToCompresses(@Nullable Output<List<String>> contentTypesToCompresses) {
            $.contentTypesToCompresses = contentTypesToCompresses;
            return this;
        }

        /**
         * @param contentTypesToCompresses An array of strings that indicates a content types on which compression will be applied. The value for the elements should be MIME types.
         * 
         * @return builder
         * 
         */
        public Builder contentTypesToCompresses(List<String> contentTypesToCompresses) {
            return contentTypesToCompresses(Output.of(contentTypesToCompresses));
        }

        /**
         * @param contentTypesToCompresses An array of strings that indicates a content types on which compression will be applied. The value for the elements should be MIME types.
         * 
         * @return builder
         * 
         */
        public Builder contentTypesToCompresses(String... contentTypesToCompresses) {
            return contentTypesToCompresses(List.of(contentTypesToCompresses));
        }

        /**
         * @param deliveryRules Rules for the rules engine. An endpoint can contain up until 4 of those rules that consist of conditions and actions. A `delivery_rule` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder deliveryRules(@Nullable Output<List<EndpointDeliveryRuleArgs>> deliveryRules) {
            $.deliveryRules = deliveryRules;
            return this;
        }

        /**
         * @param deliveryRules Rules for the rules engine. An endpoint can contain up until 4 of those rules that consist of conditions and actions. A `delivery_rule` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder deliveryRules(List<EndpointDeliveryRuleArgs> deliveryRules) {
            return deliveryRules(Output.of(deliveryRules));
        }

        /**
         * @param deliveryRules Rules for the rules engine. An endpoint can contain up until 4 of those rules that consist of conditions and actions. A `delivery_rule` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder deliveryRules(EndpointDeliveryRuleArgs... deliveryRules) {
            return deliveryRules(List.of(deliveryRules));
        }

        /**
         * @param geoFilters A set of Geo Filters for this CDN Endpoint. Each `geo_filter` block supports fields documented below.
         * 
         * @return builder
         * 
         */
        public Builder geoFilters(@Nullable Output<List<EndpointGeoFilterArgs>> geoFilters) {
            $.geoFilters = geoFilters;
            return this;
        }

        /**
         * @param geoFilters A set of Geo Filters for this CDN Endpoint. Each `geo_filter` block supports fields documented below.
         * 
         * @return builder
         * 
         */
        public Builder geoFilters(List<EndpointGeoFilterArgs> geoFilters) {
            return geoFilters(Output.of(geoFilters));
        }

        /**
         * @param geoFilters A set of Geo Filters for this CDN Endpoint. Each `geo_filter` block supports fields documented below.
         * 
         * @return builder
         * 
         */
        public Builder geoFilters(EndpointGeoFilterArgs... geoFilters) {
            return geoFilters(List.of(geoFilters));
        }

        /**
         * @param globalDeliveryRule Actions that are valid for all resources regardless of any conditions. A `global_delivery_rule` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder globalDeliveryRule(@Nullable Output<EndpointGlobalDeliveryRuleArgs> globalDeliveryRule) {
            $.globalDeliveryRule = globalDeliveryRule;
            return this;
        }

        /**
         * @param globalDeliveryRule Actions that are valid for all resources regardless of any conditions. A `global_delivery_rule` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder globalDeliveryRule(EndpointGlobalDeliveryRuleArgs globalDeliveryRule) {
            return globalDeliveryRule(Output.of(globalDeliveryRule));
        }

        /**
         * @param isCompressionEnabled Indicates whether compression is to be enabled.
         * 
         * @return builder
         * 
         */
        public Builder isCompressionEnabled(@Nullable Output<Boolean> isCompressionEnabled) {
            $.isCompressionEnabled = isCompressionEnabled;
            return this;
        }

        /**
         * @param isCompressionEnabled Indicates whether compression is to be enabled.
         * 
         * @return builder
         * 
         */
        public Builder isCompressionEnabled(Boolean isCompressionEnabled) {
            return isCompressionEnabled(Output.of(isCompressionEnabled));
        }

        /**
         * @param isHttpAllowed Specifies if http allowed. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder isHttpAllowed(@Nullable Output<Boolean> isHttpAllowed) {
            $.isHttpAllowed = isHttpAllowed;
            return this;
        }

        /**
         * @param isHttpAllowed Specifies if http allowed. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder isHttpAllowed(Boolean isHttpAllowed) {
            return isHttpAllowed(Output.of(isHttpAllowed));
        }

        /**
         * @param isHttpsAllowed Specifies if https allowed. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder isHttpsAllowed(@Nullable Output<Boolean> isHttpsAllowed) {
            $.isHttpsAllowed = isHttpsAllowed;
            return this;
        }

        /**
         * @param isHttpsAllowed Specifies if https allowed. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder isHttpsAllowed(Boolean isHttpsAllowed) {
            return isHttpsAllowed(Output.of(isHttpsAllowed));
        }

        /**
         * @param location Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name Specifies the name of the CDN Endpoint. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of the CDN Endpoint. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param optimizationType What types of optimization should this CDN Endpoint optimize for? Possible values include `DynamicSiteAcceleration`, `GeneralMediaStreaming`, `GeneralWebDelivery`, `LargeFileDownload` and `VideoOnDemandMediaStreaming`.
         * 
         * @return builder
         * 
         */
        public Builder optimizationType(@Nullable Output<String> optimizationType) {
            $.optimizationType = optimizationType;
            return this;
        }

        /**
         * @param optimizationType What types of optimization should this CDN Endpoint optimize for? Possible values include `DynamicSiteAcceleration`, `GeneralMediaStreaming`, `GeneralWebDelivery`, `LargeFileDownload` and `VideoOnDemandMediaStreaming`.
         * 
         * @return builder
         * 
         */
        public Builder optimizationType(String optimizationType) {
            return optimizationType(Output.of(optimizationType));
        }

        /**
         * @param originHostHeader The host header CDN provider will send along with content requests to origins.
         * 
         * @return builder
         * 
         */
        public Builder originHostHeader(@Nullable Output<String> originHostHeader) {
            $.originHostHeader = originHostHeader;
            return this;
        }

        /**
         * @param originHostHeader The host header CDN provider will send along with content requests to origins.
         * 
         * @return builder
         * 
         */
        public Builder originHostHeader(String originHostHeader) {
            return originHostHeader(Output.of(originHostHeader));
        }

        /**
         * @param originPath The path used at for origin requests.
         * 
         * @return builder
         * 
         */
        public Builder originPath(@Nullable Output<String> originPath) {
            $.originPath = originPath;
            return this;
        }

        /**
         * @param originPath The path used at for origin requests.
         * 
         * @return builder
         * 
         */
        public Builder originPath(String originPath) {
            return originPath(Output.of(originPath));
        }

        /**
         * @param origins The set of origins of the CDN endpoint. When multiple origins exist, the first origin will be used as primary and rest will be used as failover options. Each `origin` block supports fields documented below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder origins(Output<List<EndpointOriginArgs>> origins) {
            $.origins = origins;
            return this;
        }

        /**
         * @param origins The set of origins of the CDN endpoint. When multiple origins exist, the first origin will be used as primary and rest will be used as failover options. Each `origin` block supports fields documented below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder origins(List<EndpointOriginArgs> origins) {
            return origins(Output.of(origins));
        }

        /**
         * @param origins The set of origins of the CDN endpoint. When multiple origins exist, the first origin will be used as primary and rest will be used as failover options. Each `origin` block supports fields documented below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder origins(EndpointOriginArgs... origins) {
            return origins(List.of(origins));
        }

        /**
         * @param probePath the path to a file hosted on the origin which helps accelerate delivery of the dynamic content and calculate the most optimal routes for the CDN. This is relative to the `origin_path`.
         * 
         * &gt; **NOTE:** `global_delivery_rule` and `delivery_rule` are currently only available for `Microsoft_Standard` CDN profiles.
         * 
         * @return builder
         * 
         */
        public Builder probePath(@Nullable Output<String> probePath) {
            $.probePath = probePath;
            return this;
        }

        /**
         * @param probePath the path to a file hosted on the origin which helps accelerate delivery of the dynamic content and calculate the most optimal routes for the CDN. This is relative to the `origin_path`.
         * 
         * &gt; **NOTE:** `global_delivery_rule` and `delivery_rule` are currently only available for `Microsoft_Standard` CDN profiles.
         * 
         * @return builder
         * 
         */
        public Builder probePath(String probePath) {
            return probePath(Output.of(probePath));
        }

        /**
         * @param profileName The CDN Profile to which to attach the CDN Endpoint. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder profileName(Output<String> profileName) {
            $.profileName = profileName;
            return this;
        }

        /**
         * @param profileName The CDN Profile to which to attach the CDN Endpoint. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder profileName(String profileName) {
            return profileName(Output.of(profileName));
        }

        /**
         * @param querystringCachingBehaviour Sets query string caching behavior. Allowed values are `IgnoreQueryString`, `BypassCaching` and `UseQueryString`. `NotSet` value can be used for `Premium Verizon` CDN profile. Defaults to `IgnoreQueryString`.
         * 
         * @return builder
         * 
         */
        public Builder querystringCachingBehaviour(@Nullable Output<String> querystringCachingBehaviour) {
            $.querystringCachingBehaviour = querystringCachingBehaviour;
            return this;
        }

        /**
         * @param querystringCachingBehaviour Sets query string caching behavior. Allowed values are `IgnoreQueryString`, `BypassCaching` and `UseQueryString`. `NotSet` value can be used for `Premium Verizon` CDN profile. Defaults to `IgnoreQueryString`.
         * 
         * @return builder
         * 
         */
        public Builder querystringCachingBehaviour(String querystringCachingBehaviour) {
            return querystringCachingBehaviour(Output.of(querystringCachingBehaviour));
        }

        /**
         * @param resourceGroupName The name of the resource group in which to create the CDN Endpoint. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group in which to create the CDN Endpoint. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public EndpointArgs build() {
            if ($.origins == null) {
                throw new MissingRequiredPropertyException("EndpointArgs", "origins");
            }
            if ($.profileName == null) {
                throw new MissingRequiredPropertyException("EndpointArgs", "profileName");
            }
            if ($.resourceGroupName == null) {
                throw new MissingRequiredPropertyException("EndpointArgs", "resourceGroupName");
            }
            return $;
        }
    }

}
