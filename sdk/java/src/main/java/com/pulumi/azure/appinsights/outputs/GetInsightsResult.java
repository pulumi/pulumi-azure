// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appinsights.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetInsightsResult {
    /**
     * @return The App ID associated with this Application Insights component.
     * 
     */
    private final String appId;
    /**
     * @return The type of the component.
     * 
     */
    private final String applicationType;
    /**
     * @return The connection string of the Application Insights component. (Sensitive)
     * 
     */
    private final String connectionString;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * @return The instrumentation key of the Application Insights component.
     * 
     */
    private final String instrumentationKey;
    /**
     * @return The Azure location where the component exists.
     * 
     */
    private final String location;
    private final String name;
    private final String resourceGroupName;
    /**
     * @return The retention period in days.
     * 
     */
    private final Integer retentionInDays;
    /**
     * @return Tags applied to the component.
     * 
     */
    private final Map<String,String> tags;
    /**
     * @return The id of the associated Log Analytics workspace
     * 
     */
    private final String workspaceId;

    @CustomType.Constructor
    private GetInsightsResult(
        @CustomType.Parameter("appId") String appId,
        @CustomType.Parameter("applicationType") String applicationType,
        @CustomType.Parameter("connectionString") String connectionString,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("instrumentationKey") String instrumentationKey,
        @CustomType.Parameter("location") String location,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("resourceGroupName") String resourceGroupName,
        @CustomType.Parameter("retentionInDays") Integer retentionInDays,
        @CustomType.Parameter("tags") Map<String,String> tags,
        @CustomType.Parameter("workspaceId") String workspaceId) {
        this.appId = appId;
        this.applicationType = applicationType;
        this.connectionString = connectionString;
        this.id = id;
        this.instrumentationKey = instrumentationKey;
        this.location = location;
        this.name = name;
        this.resourceGroupName = resourceGroupName;
        this.retentionInDays = retentionInDays;
        this.tags = tags;
        this.workspaceId = workspaceId;
    }

    /**
     * @return The App ID associated with this Application Insights component.
     * 
     */
    public String appId() {
        return this.appId;
    }
    /**
     * @return The type of the component.
     * 
     */
    public String applicationType() {
        return this.applicationType;
    }
    /**
     * @return The connection string of the Application Insights component. (Sensitive)
     * 
     */
    public String connectionString() {
        return this.connectionString;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The instrumentation key of the Application Insights component.
     * 
     */
    public String instrumentationKey() {
        return this.instrumentationKey;
    }
    /**
     * @return The Azure location where the component exists.
     * 
     */
    public String location() {
        return this.location;
    }
    public String name() {
        return this.name;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return The retention period in days.
     * 
     */
    public Integer retentionInDays() {
        return this.retentionInDays;
    }
    /**
     * @return Tags applied to the component.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return The id of the associated Log Analytics workspace
     * 
     */
    public String workspaceId() {
        return this.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInsightsResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String appId;
        private String applicationType;
        private String connectionString;
        private String id;
        private String instrumentationKey;
        private String location;
        private String name;
        private String resourceGroupName;
        private Integer retentionInDays;
        private Map<String,String> tags;
        private String workspaceId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetInsightsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appId = defaults.appId;
    	      this.applicationType = defaults.applicationType;
    	      this.connectionString = defaults.connectionString;
    	      this.id = defaults.id;
    	      this.instrumentationKey = defaults.instrumentationKey;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.retentionInDays = defaults.retentionInDays;
    	      this.tags = defaults.tags;
    	      this.workspaceId = defaults.workspaceId;
        }

        public Builder appId(String appId) {
            this.appId = Objects.requireNonNull(appId);
            return this;
        }
        public Builder applicationType(String applicationType) {
            this.applicationType = Objects.requireNonNull(applicationType);
            return this;
        }
        public Builder connectionString(String connectionString) {
            this.connectionString = Objects.requireNonNull(connectionString);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder instrumentationKey(String instrumentationKey) {
            this.instrumentationKey = Objects.requireNonNull(instrumentationKey);
            return this;
        }
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder retentionInDays(Integer retentionInDays) {
            this.retentionInDays = Objects.requireNonNull(retentionInDays);
            return this;
        }
        public Builder tags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder workspaceId(String workspaceId) {
            this.workspaceId = Objects.requireNonNull(workspaceId);
            return this;
        }        public GetInsightsResult build() {
            return new GetInsightsResult(appId, applicationType, connectionString, id, instrumentationKey, location, name, resourceGroupName, retentionInDays, tags, workspaceId);
        }
    }
}
