// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.storage.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetTableEntitiesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetTableEntitiesArgs Empty = new GetTableEntitiesArgs();

    /**
     * The filter used to retrieve the entities.
     * 
     */
    @Import(name="filter", required=true)
    private Output<String> filter;

    /**
     * @return The filter used to retrieve the entities.
     * 
     */
    public Output<String> filter() {
        return this.filter;
    }

    /**
     * A list of properties to select from the returned Storage Table Entities.
     * 
     */
    @Import(name="selects")
    private @Nullable Output<List<String>> selects;

    /**
     * @return A list of properties to select from the returned Storage Table Entities.
     * 
     */
    public Optional<Output<List<String>>> selects() {
        return Optional.ofNullable(this.selects);
    }

    /**
     * The name of the Storage Account where the Table exists.
     * 
     */
    @Import(name="storageAccountName", required=true)
    private Output<String> storageAccountName;

    /**
     * @return The name of the Storage Account where the Table exists.
     * 
     */
    public Output<String> storageAccountName() {
        return this.storageAccountName;
    }

    /**
     * The name of the Table.
     * 
     */
    @Import(name="tableName", required=true)
    private Output<String> tableName;

    /**
     * @return The name of the Table.
     * 
     */
    public Output<String> tableName() {
        return this.tableName;
    }

    private GetTableEntitiesArgs() {}

    private GetTableEntitiesArgs(GetTableEntitiesArgs $) {
        this.filter = $.filter;
        this.selects = $.selects;
        this.storageAccountName = $.storageAccountName;
        this.tableName = $.tableName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetTableEntitiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetTableEntitiesArgs $;

        public Builder() {
            $ = new GetTableEntitiesArgs();
        }

        public Builder(GetTableEntitiesArgs defaults) {
            $ = new GetTableEntitiesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param filter The filter used to retrieve the entities.
         * 
         * @return builder
         * 
         */
        public Builder filter(Output<String> filter) {
            $.filter = filter;
            return this;
        }

        /**
         * @param filter The filter used to retrieve the entities.
         * 
         * @return builder
         * 
         */
        public Builder filter(String filter) {
            return filter(Output.of(filter));
        }

        /**
         * @param selects A list of properties to select from the returned Storage Table Entities.
         * 
         * @return builder
         * 
         */
        public Builder selects(@Nullable Output<List<String>> selects) {
            $.selects = selects;
            return this;
        }

        /**
         * @param selects A list of properties to select from the returned Storage Table Entities.
         * 
         * @return builder
         * 
         */
        public Builder selects(List<String> selects) {
            return selects(Output.of(selects));
        }

        /**
         * @param selects A list of properties to select from the returned Storage Table Entities.
         * 
         * @return builder
         * 
         */
        public Builder selects(String... selects) {
            return selects(List.of(selects));
        }

        /**
         * @param storageAccountName The name of the Storage Account where the Table exists.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountName(Output<String> storageAccountName) {
            $.storageAccountName = storageAccountName;
            return this;
        }

        /**
         * @param storageAccountName The name of the Storage Account where the Table exists.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountName(String storageAccountName) {
            return storageAccountName(Output.of(storageAccountName));
        }

        /**
         * @param tableName The name of the Table.
         * 
         * @return builder
         * 
         */
        public Builder tableName(Output<String> tableName) {
            $.tableName = tableName;
            return this;
        }

        /**
         * @param tableName The name of the Table.
         * 
         * @return builder
         * 
         */
        public Builder tableName(String tableName) {
            return tableName(Output.of(tableName));
        }

        public GetTableEntitiesArgs build() {
            if ($.filter == null) {
                throw new MissingRequiredPropertyException("GetTableEntitiesArgs", "filter");
            }
            if ($.storageAccountName == null) {
                throw new MissingRequiredPropertyException("GetTableEntitiesArgs", "storageAccountName");
            }
            if ($.tableName == null) {
                throw new MissingRequiredPropertyException("GetTableEntitiesArgs", "tableName");
            }
            return $;
        }
    }

}
