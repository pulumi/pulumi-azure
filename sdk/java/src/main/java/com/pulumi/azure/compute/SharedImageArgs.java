// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.compute;

import com.pulumi.azure.compute.inputs.SharedImageIdentifierArgs;
import com.pulumi.azure.compute.inputs.SharedImagePurchasePlanArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SharedImageArgs extends com.pulumi.resources.ResourceArgs {

    public static final SharedImageArgs Empty = new SharedImageArgs();

    /**
     * Specifies if the Shared Image supports Accelerated Network. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="acceleratedNetworkSupportEnabled")
    private @Nullable Output<Boolean> acceleratedNetworkSupportEnabled;

    /**
     * @return Specifies if the Shared Image supports Accelerated Network. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<Boolean>> acceleratedNetworkSupportEnabled() {
        return Optional.ofNullable(this.acceleratedNetworkSupportEnabled);
    }

    /**
     * CPU architecture supported by an OS. Possible values are `x64` and `Arm64`. Defaults to `x64`. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="architecture")
    private @Nullable Output<String> architecture;

    /**
     * @return CPU architecture supported by an OS. Possible values are `x64` and `Arm64`. Defaults to `x64`. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> architecture() {
        return Optional.ofNullable(this.architecture);
    }

    /**
     * Specifies if Confidential Virtual Machines enabled. It will enable all the features of trusted, with higher confidentiality features for isolate machines or encrypted data. Available for Gen2 machines. Changing this forces a new resource to be created.
     * 
     * &gt; **Note:**: Only one of `trusted_launch_supported`, `trusted_launch_enabled`, `confidential_vm_supported` and `confidential_vm_enabled` can be specified.
     * 
     */
    @Import(name="confidentialVmEnabled")
    private @Nullable Output<Boolean> confidentialVmEnabled;

    /**
     * @return Specifies if Confidential Virtual Machines enabled. It will enable all the features of trusted, with higher confidentiality features for isolate machines or encrypted data. Available for Gen2 machines. Changing this forces a new resource to be created.
     * 
     * &gt; **Note:**: Only one of `trusted_launch_supported`, `trusted_launch_enabled`, `confidential_vm_supported` and `confidential_vm_enabled` can be specified.
     * 
     */
    public Optional<Output<Boolean>> confidentialVmEnabled() {
        return Optional.ofNullable(this.confidentialVmEnabled);
    }

    /**
     * Specifies if supports creation of both Confidential virtual machines and Gen2 virtual machines with standard security from a compatible Gen2 OS disk VHD or Gen2 Managed image. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="confidentialVmSupported")
    private @Nullable Output<Boolean> confidentialVmSupported;

    /**
     * @return Specifies if supports creation of both Confidential virtual machines and Gen2 virtual machines with standard security from a compatible Gen2 OS disk VHD or Gen2 Managed image. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<Boolean>> confidentialVmSupported() {
        return Optional.ofNullable(this.confidentialVmSupported);
    }

    /**
     * A description of this Shared Image.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of this Shared Image.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * One or more Disk Types not allowed for the Image. Possible values include `Standard_LRS` and `Premium_LRS`.
     * 
     */
    @Import(name="diskTypesNotAlloweds")
    private @Nullable Output<List<String>> diskTypesNotAlloweds;

    /**
     * @return One or more Disk Types not allowed for the Image. Possible values include `Standard_LRS` and `Premium_LRS`.
     * 
     */
    public Optional<Output<List<String>>> diskTypesNotAlloweds() {
        return Optional.ofNullable(this.diskTypesNotAlloweds);
    }

    /**
     * The end of life date in RFC3339 format of the Image.
     * 
     */
    @Import(name="endOfLifeDate")
    private @Nullable Output<String> endOfLifeDate;

    /**
     * @return The end of life date in RFC3339 format of the Image.
     * 
     */
    public Optional<Output<String>> endOfLifeDate() {
        return Optional.ofNullable(this.endOfLifeDate);
    }

    /**
     * The End User Licence Agreement for the Shared Image. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="eula")
    private @Nullable Output<String> eula;

    /**
     * @return The End User Licence Agreement for the Shared Image. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> eula() {
        return Optional.ofNullable(this.eula);
    }

    /**
     * Specifies the name of the Shared Image Gallery in which this Shared Image should exist. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="galleryName", required=true)
    private Output<String> galleryName;

    /**
     * @return Specifies the name of the Shared Image Gallery in which this Shared Image should exist. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> galleryName() {
        return this.galleryName;
    }

    /**
     * The generation of HyperV that the Virtual Machine used to create the Shared Image is based on. Possible values are `V1` and `V2`. Defaults to `V1`. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="hyperVGeneration")
    private @Nullable Output<String> hyperVGeneration;

    /**
     * @return The generation of HyperV that the Virtual Machine used to create the Shared Image is based on. Possible values are `V1` and `V2`. Defaults to `V1`. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> hyperVGeneration() {
        return Optional.ofNullable(this.hyperVGeneration);
    }

    /**
     * An `identifier` block as defined below.
     * 
     */
    @Import(name="identifier", required=true)
    private Output<SharedImageIdentifierArgs> identifier;

    /**
     * @return An `identifier` block as defined below.
     * 
     */
    public Output<SharedImageIdentifierArgs> identifier() {
        return this.identifier;
    }

    /**
     * Specifies the supported Azure location where the Shared Image Gallery exists. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Specifies the supported Azure location where the Shared Image Gallery exists. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Maximum memory in GB recommended for the Image.
     * 
     */
    @Import(name="maxRecommendedMemoryInGb")
    private @Nullable Output<Integer> maxRecommendedMemoryInGb;

    /**
     * @return Maximum memory in GB recommended for the Image.
     * 
     */
    public Optional<Output<Integer>> maxRecommendedMemoryInGb() {
        return Optional.ofNullable(this.maxRecommendedMemoryInGb);
    }

    /**
     * Maximum count of vCPUs recommended for the Image.
     * 
     */
    @Import(name="maxRecommendedVcpuCount")
    private @Nullable Output<Integer> maxRecommendedVcpuCount;

    /**
     * @return Maximum count of vCPUs recommended for the Image.
     * 
     */
    public Optional<Output<Integer>> maxRecommendedVcpuCount() {
        return Optional.ofNullable(this.maxRecommendedVcpuCount);
    }

    /**
     * Minimum memory in GB recommended for the Image.
     * 
     */
    @Import(name="minRecommendedMemoryInGb")
    private @Nullable Output<Integer> minRecommendedMemoryInGb;

    /**
     * @return Minimum memory in GB recommended for the Image.
     * 
     */
    public Optional<Output<Integer>> minRecommendedMemoryInGb() {
        return Optional.ofNullable(this.minRecommendedMemoryInGb);
    }

    /**
     * Minimum count of vCPUs recommended for the Image.
     * 
     */
    @Import(name="minRecommendedVcpuCount")
    private @Nullable Output<Integer> minRecommendedVcpuCount;

    /**
     * @return Minimum count of vCPUs recommended for the Image.
     * 
     */
    public Optional<Output<Integer>> minRecommendedVcpuCount() {
        return Optional.ofNullable(this.minRecommendedVcpuCount);
    }

    /**
     * Specifies the name of the Shared Image. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the name of the Shared Image. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The type of Operating System present in this Shared Image. Possible values are `Linux` and `Windows`. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="osType", required=true)
    private Output<String> osType;

    /**
     * @return The type of Operating System present in this Shared Image. Possible values are `Linux` and `Windows`. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> osType() {
        return this.osType;
    }

    /**
     * The URI containing the Privacy Statement associated with this Shared Image. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="privacyStatementUri")
    private @Nullable Output<String> privacyStatementUri;

    /**
     * @return The URI containing the Privacy Statement associated with this Shared Image. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> privacyStatementUri() {
        return Optional.ofNullable(this.privacyStatementUri);
    }

    /**
     * A `purchase_plan` block as defined below.
     * 
     */
    @Import(name="purchasePlan")
    private @Nullable Output<SharedImagePurchasePlanArgs> purchasePlan;

    /**
     * @return A `purchase_plan` block as defined below.
     * 
     */
    public Optional<Output<SharedImagePurchasePlanArgs>> purchasePlan() {
        return Optional.ofNullable(this.purchasePlan);
    }

    /**
     * The URI containing the Release Notes associated with this Shared Image.
     * 
     */
    @Import(name="releaseNoteUri")
    private @Nullable Output<String> releaseNoteUri;

    /**
     * @return The URI containing the Release Notes associated with this Shared Image.
     * 
     */
    public Optional<Output<String>> releaseNoteUri() {
        return Optional.ofNullable(this.releaseNoteUri);
    }

    /**
     * The name of the resource group in which the Shared Image Gallery exists. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group in which the Shared Image Gallery exists. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Specifies that the Operating System used inside this Image has not been Generalized (for example, `sysprep` on Windows has not been run). Changing this forces a new resource to be created.
     * 
     * !&gt; **Note:** It&#39;s recommended to Generalize images where possible - Specialized Images reuse the same UUID internally within each Virtual Machine, which can have unintended side-effects.
     * 
     */
    @Import(name="specialized")
    private @Nullable Output<Boolean> specialized;

    /**
     * @return Specifies that the Operating System used inside this Image has not been Generalized (for example, `sysprep` on Windows has not been run). Changing this forces a new resource to be created.
     * 
     * !&gt; **Note:** It&#39;s recommended to Generalize images where possible - Specialized Images reuse the same UUID internally within each Virtual Machine, which can have unintended side-effects.
     * 
     */
    public Optional<Output<Boolean>> specialized() {
        return Optional.ofNullable(this.specialized);
    }

    /**
     * A mapping of tags to assign to the Shared Image.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the Shared Image.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Specifies if Trusted Launch has to be enabled for the Virtual Machine created from the Shared Image. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="trustedLaunchEnabled")
    private @Nullable Output<Boolean> trustedLaunchEnabled;

    /**
     * @return Specifies if Trusted Launch has to be enabled for the Virtual Machine created from the Shared Image. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<Boolean>> trustedLaunchEnabled() {
        return Optional.ofNullable(this.trustedLaunchEnabled);
    }

    /**
     * Specifies if supports creation of both Trusted Launch virtual machines and Gen2 virtual machines with standard security created from the Shared Image. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="trustedLaunchSupported")
    private @Nullable Output<Boolean> trustedLaunchSupported;

    /**
     * @return Specifies if supports creation of both Trusted Launch virtual machines and Gen2 virtual machines with standard security created from the Shared Image. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<Boolean>> trustedLaunchSupported() {
        return Optional.ofNullable(this.trustedLaunchSupported);
    }

    private SharedImageArgs() {}

    private SharedImageArgs(SharedImageArgs $) {
        this.acceleratedNetworkSupportEnabled = $.acceleratedNetworkSupportEnabled;
        this.architecture = $.architecture;
        this.confidentialVmEnabled = $.confidentialVmEnabled;
        this.confidentialVmSupported = $.confidentialVmSupported;
        this.description = $.description;
        this.diskTypesNotAlloweds = $.diskTypesNotAlloweds;
        this.endOfLifeDate = $.endOfLifeDate;
        this.eula = $.eula;
        this.galleryName = $.galleryName;
        this.hyperVGeneration = $.hyperVGeneration;
        this.identifier = $.identifier;
        this.location = $.location;
        this.maxRecommendedMemoryInGb = $.maxRecommendedMemoryInGb;
        this.maxRecommendedVcpuCount = $.maxRecommendedVcpuCount;
        this.minRecommendedMemoryInGb = $.minRecommendedMemoryInGb;
        this.minRecommendedVcpuCount = $.minRecommendedVcpuCount;
        this.name = $.name;
        this.osType = $.osType;
        this.privacyStatementUri = $.privacyStatementUri;
        this.purchasePlan = $.purchasePlan;
        this.releaseNoteUri = $.releaseNoteUri;
        this.resourceGroupName = $.resourceGroupName;
        this.specialized = $.specialized;
        this.tags = $.tags;
        this.trustedLaunchEnabled = $.trustedLaunchEnabled;
        this.trustedLaunchSupported = $.trustedLaunchSupported;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SharedImageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SharedImageArgs $;

        public Builder() {
            $ = new SharedImageArgs();
        }

        public Builder(SharedImageArgs defaults) {
            $ = new SharedImageArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param acceleratedNetworkSupportEnabled Specifies if the Shared Image supports Accelerated Network. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder acceleratedNetworkSupportEnabled(@Nullable Output<Boolean> acceleratedNetworkSupportEnabled) {
            $.acceleratedNetworkSupportEnabled = acceleratedNetworkSupportEnabled;
            return this;
        }

        /**
         * @param acceleratedNetworkSupportEnabled Specifies if the Shared Image supports Accelerated Network. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder acceleratedNetworkSupportEnabled(Boolean acceleratedNetworkSupportEnabled) {
            return acceleratedNetworkSupportEnabled(Output.of(acceleratedNetworkSupportEnabled));
        }

        /**
         * @param architecture CPU architecture supported by an OS. Possible values are `x64` and `Arm64`. Defaults to `x64`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder architecture(@Nullable Output<String> architecture) {
            $.architecture = architecture;
            return this;
        }

        /**
         * @param architecture CPU architecture supported by an OS. Possible values are `x64` and `Arm64`. Defaults to `x64`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder architecture(String architecture) {
            return architecture(Output.of(architecture));
        }

        /**
         * @param confidentialVmEnabled Specifies if Confidential Virtual Machines enabled. It will enable all the features of trusted, with higher confidentiality features for isolate machines or encrypted data. Available for Gen2 machines. Changing this forces a new resource to be created.
         * 
         * &gt; **Note:**: Only one of `trusted_launch_supported`, `trusted_launch_enabled`, `confidential_vm_supported` and `confidential_vm_enabled` can be specified.
         * 
         * @return builder
         * 
         */
        public Builder confidentialVmEnabled(@Nullable Output<Boolean> confidentialVmEnabled) {
            $.confidentialVmEnabled = confidentialVmEnabled;
            return this;
        }

        /**
         * @param confidentialVmEnabled Specifies if Confidential Virtual Machines enabled. It will enable all the features of trusted, with higher confidentiality features for isolate machines or encrypted data. Available for Gen2 machines. Changing this forces a new resource to be created.
         * 
         * &gt; **Note:**: Only one of `trusted_launch_supported`, `trusted_launch_enabled`, `confidential_vm_supported` and `confidential_vm_enabled` can be specified.
         * 
         * @return builder
         * 
         */
        public Builder confidentialVmEnabled(Boolean confidentialVmEnabled) {
            return confidentialVmEnabled(Output.of(confidentialVmEnabled));
        }

        /**
         * @param confidentialVmSupported Specifies if supports creation of both Confidential virtual machines and Gen2 virtual machines with standard security from a compatible Gen2 OS disk VHD or Gen2 Managed image. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder confidentialVmSupported(@Nullable Output<Boolean> confidentialVmSupported) {
            $.confidentialVmSupported = confidentialVmSupported;
            return this;
        }

        /**
         * @param confidentialVmSupported Specifies if supports creation of both Confidential virtual machines and Gen2 virtual machines with standard security from a compatible Gen2 OS disk VHD or Gen2 Managed image. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder confidentialVmSupported(Boolean confidentialVmSupported) {
            return confidentialVmSupported(Output.of(confidentialVmSupported));
        }

        /**
         * @param description A description of this Shared Image.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of this Shared Image.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param diskTypesNotAlloweds One or more Disk Types not allowed for the Image. Possible values include `Standard_LRS` and `Premium_LRS`.
         * 
         * @return builder
         * 
         */
        public Builder diskTypesNotAlloweds(@Nullable Output<List<String>> diskTypesNotAlloweds) {
            $.diskTypesNotAlloweds = diskTypesNotAlloweds;
            return this;
        }

        /**
         * @param diskTypesNotAlloweds One or more Disk Types not allowed for the Image. Possible values include `Standard_LRS` and `Premium_LRS`.
         * 
         * @return builder
         * 
         */
        public Builder diskTypesNotAlloweds(List<String> diskTypesNotAlloweds) {
            return diskTypesNotAlloweds(Output.of(diskTypesNotAlloweds));
        }

        /**
         * @param diskTypesNotAlloweds One or more Disk Types not allowed for the Image. Possible values include `Standard_LRS` and `Premium_LRS`.
         * 
         * @return builder
         * 
         */
        public Builder diskTypesNotAlloweds(String... diskTypesNotAlloweds) {
            return diskTypesNotAlloweds(List.of(diskTypesNotAlloweds));
        }

        /**
         * @param endOfLifeDate The end of life date in RFC3339 format of the Image.
         * 
         * @return builder
         * 
         */
        public Builder endOfLifeDate(@Nullable Output<String> endOfLifeDate) {
            $.endOfLifeDate = endOfLifeDate;
            return this;
        }

        /**
         * @param endOfLifeDate The end of life date in RFC3339 format of the Image.
         * 
         * @return builder
         * 
         */
        public Builder endOfLifeDate(String endOfLifeDate) {
            return endOfLifeDate(Output.of(endOfLifeDate));
        }

        /**
         * @param eula The End User Licence Agreement for the Shared Image. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder eula(@Nullable Output<String> eula) {
            $.eula = eula;
            return this;
        }

        /**
         * @param eula The End User Licence Agreement for the Shared Image. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder eula(String eula) {
            return eula(Output.of(eula));
        }

        /**
         * @param galleryName Specifies the name of the Shared Image Gallery in which this Shared Image should exist. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder galleryName(Output<String> galleryName) {
            $.galleryName = galleryName;
            return this;
        }

        /**
         * @param galleryName Specifies the name of the Shared Image Gallery in which this Shared Image should exist. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder galleryName(String galleryName) {
            return galleryName(Output.of(galleryName));
        }

        /**
         * @param hyperVGeneration The generation of HyperV that the Virtual Machine used to create the Shared Image is based on. Possible values are `V1` and `V2`. Defaults to `V1`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder hyperVGeneration(@Nullable Output<String> hyperVGeneration) {
            $.hyperVGeneration = hyperVGeneration;
            return this;
        }

        /**
         * @param hyperVGeneration The generation of HyperV that the Virtual Machine used to create the Shared Image is based on. Possible values are `V1` and `V2`. Defaults to `V1`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder hyperVGeneration(String hyperVGeneration) {
            return hyperVGeneration(Output.of(hyperVGeneration));
        }

        /**
         * @param identifier An `identifier` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder identifier(Output<SharedImageIdentifierArgs> identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param identifier An `identifier` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder identifier(SharedImageIdentifierArgs identifier) {
            return identifier(Output.of(identifier));
        }

        /**
         * @param location Specifies the supported Azure location where the Shared Image Gallery exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Specifies the supported Azure location where the Shared Image Gallery exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param maxRecommendedMemoryInGb Maximum memory in GB recommended for the Image.
         * 
         * @return builder
         * 
         */
        public Builder maxRecommendedMemoryInGb(@Nullable Output<Integer> maxRecommendedMemoryInGb) {
            $.maxRecommendedMemoryInGb = maxRecommendedMemoryInGb;
            return this;
        }

        /**
         * @param maxRecommendedMemoryInGb Maximum memory in GB recommended for the Image.
         * 
         * @return builder
         * 
         */
        public Builder maxRecommendedMemoryInGb(Integer maxRecommendedMemoryInGb) {
            return maxRecommendedMemoryInGb(Output.of(maxRecommendedMemoryInGb));
        }

        /**
         * @param maxRecommendedVcpuCount Maximum count of vCPUs recommended for the Image.
         * 
         * @return builder
         * 
         */
        public Builder maxRecommendedVcpuCount(@Nullable Output<Integer> maxRecommendedVcpuCount) {
            $.maxRecommendedVcpuCount = maxRecommendedVcpuCount;
            return this;
        }

        /**
         * @param maxRecommendedVcpuCount Maximum count of vCPUs recommended for the Image.
         * 
         * @return builder
         * 
         */
        public Builder maxRecommendedVcpuCount(Integer maxRecommendedVcpuCount) {
            return maxRecommendedVcpuCount(Output.of(maxRecommendedVcpuCount));
        }

        /**
         * @param minRecommendedMemoryInGb Minimum memory in GB recommended for the Image.
         * 
         * @return builder
         * 
         */
        public Builder minRecommendedMemoryInGb(@Nullable Output<Integer> minRecommendedMemoryInGb) {
            $.minRecommendedMemoryInGb = minRecommendedMemoryInGb;
            return this;
        }

        /**
         * @param minRecommendedMemoryInGb Minimum memory in GB recommended for the Image.
         * 
         * @return builder
         * 
         */
        public Builder minRecommendedMemoryInGb(Integer minRecommendedMemoryInGb) {
            return minRecommendedMemoryInGb(Output.of(minRecommendedMemoryInGb));
        }

        /**
         * @param minRecommendedVcpuCount Minimum count of vCPUs recommended for the Image.
         * 
         * @return builder
         * 
         */
        public Builder minRecommendedVcpuCount(@Nullable Output<Integer> minRecommendedVcpuCount) {
            $.minRecommendedVcpuCount = minRecommendedVcpuCount;
            return this;
        }

        /**
         * @param minRecommendedVcpuCount Minimum count of vCPUs recommended for the Image.
         * 
         * @return builder
         * 
         */
        public Builder minRecommendedVcpuCount(Integer minRecommendedVcpuCount) {
            return minRecommendedVcpuCount(Output.of(minRecommendedVcpuCount));
        }

        /**
         * @param name Specifies the name of the Shared Image. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of the Shared Image. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param osType The type of Operating System present in this Shared Image. Possible values are `Linux` and `Windows`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder osType(Output<String> osType) {
            $.osType = osType;
            return this;
        }

        /**
         * @param osType The type of Operating System present in this Shared Image. Possible values are `Linux` and `Windows`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder osType(String osType) {
            return osType(Output.of(osType));
        }

        /**
         * @param privacyStatementUri The URI containing the Privacy Statement associated with this Shared Image. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder privacyStatementUri(@Nullable Output<String> privacyStatementUri) {
            $.privacyStatementUri = privacyStatementUri;
            return this;
        }

        /**
         * @param privacyStatementUri The URI containing the Privacy Statement associated with this Shared Image. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder privacyStatementUri(String privacyStatementUri) {
            return privacyStatementUri(Output.of(privacyStatementUri));
        }

        /**
         * @param purchasePlan A `purchase_plan` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder purchasePlan(@Nullable Output<SharedImagePurchasePlanArgs> purchasePlan) {
            $.purchasePlan = purchasePlan;
            return this;
        }

        /**
         * @param purchasePlan A `purchase_plan` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder purchasePlan(SharedImagePurchasePlanArgs purchasePlan) {
            return purchasePlan(Output.of(purchasePlan));
        }

        /**
         * @param releaseNoteUri The URI containing the Release Notes associated with this Shared Image.
         * 
         * @return builder
         * 
         */
        public Builder releaseNoteUri(@Nullable Output<String> releaseNoteUri) {
            $.releaseNoteUri = releaseNoteUri;
            return this;
        }

        /**
         * @param releaseNoteUri The URI containing the Release Notes associated with this Shared Image.
         * 
         * @return builder
         * 
         */
        public Builder releaseNoteUri(String releaseNoteUri) {
            return releaseNoteUri(Output.of(releaseNoteUri));
        }

        /**
         * @param resourceGroupName The name of the resource group in which the Shared Image Gallery exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group in which the Shared Image Gallery exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param specialized Specifies that the Operating System used inside this Image has not been Generalized (for example, `sysprep` on Windows has not been run). Changing this forces a new resource to be created.
         * 
         * !&gt; **Note:** It&#39;s recommended to Generalize images where possible - Specialized Images reuse the same UUID internally within each Virtual Machine, which can have unintended side-effects.
         * 
         * @return builder
         * 
         */
        public Builder specialized(@Nullable Output<Boolean> specialized) {
            $.specialized = specialized;
            return this;
        }

        /**
         * @param specialized Specifies that the Operating System used inside this Image has not been Generalized (for example, `sysprep` on Windows has not been run). Changing this forces a new resource to be created.
         * 
         * !&gt; **Note:** It&#39;s recommended to Generalize images where possible - Specialized Images reuse the same UUID internally within each Virtual Machine, which can have unintended side-effects.
         * 
         * @return builder
         * 
         */
        public Builder specialized(Boolean specialized) {
            return specialized(Output.of(specialized));
        }

        /**
         * @param tags A mapping of tags to assign to the Shared Image.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags to assign to the Shared Image.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param trustedLaunchEnabled Specifies if Trusted Launch has to be enabled for the Virtual Machine created from the Shared Image. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder trustedLaunchEnabled(@Nullable Output<Boolean> trustedLaunchEnabled) {
            $.trustedLaunchEnabled = trustedLaunchEnabled;
            return this;
        }

        /**
         * @param trustedLaunchEnabled Specifies if Trusted Launch has to be enabled for the Virtual Machine created from the Shared Image. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder trustedLaunchEnabled(Boolean trustedLaunchEnabled) {
            return trustedLaunchEnabled(Output.of(trustedLaunchEnabled));
        }

        /**
         * @param trustedLaunchSupported Specifies if supports creation of both Trusted Launch virtual machines and Gen2 virtual machines with standard security created from the Shared Image. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder trustedLaunchSupported(@Nullable Output<Boolean> trustedLaunchSupported) {
            $.trustedLaunchSupported = trustedLaunchSupported;
            return this;
        }

        /**
         * @param trustedLaunchSupported Specifies if supports creation of both Trusted Launch virtual machines and Gen2 virtual machines with standard security created from the Shared Image. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder trustedLaunchSupported(Boolean trustedLaunchSupported) {
            return trustedLaunchSupported(Output.of(trustedLaunchSupported));
        }

        public SharedImageArgs build() {
            $.galleryName = Objects.requireNonNull($.galleryName, "expected parameter 'galleryName' to be non-null");
            $.identifier = Objects.requireNonNull($.identifier, "expected parameter 'identifier' to be non-null");
            $.osType = Objects.requireNonNull($.osType, "expected parameter 'osType' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
