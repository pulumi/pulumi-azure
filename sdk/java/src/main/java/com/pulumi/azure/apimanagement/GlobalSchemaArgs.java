// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.apimanagement;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GlobalSchemaArgs extends com.pulumi.resources.ResourceArgs {

    public static final GlobalSchemaArgs Empty = new GlobalSchemaArgs();

    /**
     * The Name of the API Management Service where the API exists. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="apiManagementName", required=true)
    private Output<String> apiManagementName;

    /**
     * @return The Name of the API Management Service where the API exists. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> apiManagementName() {
        return this.apiManagementName;
    }

    /**
     * The description of the schema.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the schema.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The Name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The Name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * A unique identifier for this Schema. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="schemaId", required=true)
    private Output<String> schemaId;

    /**
     * @return A unique identifier for this Schema. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> schemaId() {
        return this.schemaId;
    }

    /**
     * The content type of the Schema. Possible values are `xml` and `json`.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The content type of the Schema. Possible values are `xml` and `json`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * The string defining the document representing the Schema.
     * 
     */
    @Import(name="value", required=true)
    private Output<String> value;

    /**
     * @return The string defining the document representing the Schema.
     * 
     */
    public Output<String> value() {
        return this.value;
    }

    private GlobalSchemaArgs() {}

    private GlobalSchemaArgs(GlobalSchemaArgs $) {
        this.apiManagementName = $.apiManagementName;
        this.description = $.description;
        this.resourceGroupName = $.resourceGroupName;
        this.schemaId = $.schemaId;
        this.type = $.type;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GlobalSchemaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GlobalSchemaArgs $;

        public Builder() {
            $ = new GlobalSchemaArgs();
        }

        public Builder(GlobalSchemaArgs defaults) {
            $ = new GlobalSchemaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiManagementName The Name of the API Management Service where the API exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder apiManagementName(Output<String> apiManagementName) {
            $.apiManagementName = apiManagementName;
            return this;
        }

        /**
         * @param apiManagementName The Name of the API Management Service where the API exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder apiManagementName(String apiManagementName) {
            return apiManagementName(Output.of(apiManagementName));
        }

        /**
         * @param description The description of the schema.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the schema.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param resourceGroupName The Name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The Name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param schemaId A unique identifier for this Schema. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder schemaId(Output<String> schemaId) {
            $.schemaId = schemaId;
            return this;
        }

        /**
         * @param schemaId A unique identifier for this Schema. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder schemaId(String schemaId) {
            return schemaId(Output.of(schemaId));
        }

        /**
         * @param type The content type of the Schema. Possible values are `xml` and `json`.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The content type of the Schema. Possible values are `xml` and `json`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param value The string defining the document representing the Schema.
         * 
         * @return builder
         * 
         */
        public Builder value(Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value The string defining the document representing the Schema.
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        public GlobalSchemaArgs build() {
            if ($.apiManagementName == null) {
                throw new MissingRequiredPropertyException("GlobalSchemaArgs", "apiManagementName");
            }
            if ($.resourceGroupName == null) {
                throw new MissingRequiredPropertyException("GlobalSchemaArgs", "resourceGroupName");
            }
            if ($.schemaId == null) {
                throw new MissingRequiredPropertyException("GlobalSchemaArgs", "schemaId");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("GlobalSchemaArgs", "type");
            }
            if ($.value == null) {
                throw new MissingRequiredPropertyException("GlobalSchemaArgs", "value");
            }
            return $;
        }
    }

}
