// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.cdn.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FrontdoorFirewallPolicyLogScrubbingScrubbingRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final FrontdoorFirewallPolicyLogScrubbingScrubbingRuleArgs Empty = new FrontdoorFirewallPolicyLogScrubbingScrubbingRuleArgs();

    /**
     * Is this `scrubbingRule` enabled? Defaults to `true`.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Is this `scrubbingRule` enabled? Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The variable to be scrubbed from the logs. Possible values include `QueryStringArgNames`, `RequestBodyJsonArgNames`, `RequestBodyPostArgNames`, `RequestCookieNames`, `RequestHeaderNames`, `RequestIPAddress`, or `RequestUri`.
     * 
     * &gt; **Note:** `RequestIPAddress` and `RequestUri` must use the `EqualsAny` `operator`.
     * 
     */
    @Import(name="matchVariable", required=true)
    private Output<String> matchVariable;

    /**
     * @return The variable to be scrubbed from the logs. Possible values include `QueryStringArgNames`, `RequestBodyJsonArgNames`, `RequestBodyPostArgNames`, `RequestCookieNames`, `RequestHeaderNames`, `RequestIPAddress`, or `RequestUri`.
     * 
     * &gt; **Note:** `RequestIPAddress` and `RequestUri` must use the `EqualsAny` `operator`.
     * 
     */
    public Output<String> matchVariable() {
        return this.matchVariable;
    }

    /**
     * When the `matchVariable` is a collection, operate on the `selector` to specify which elements in the collection this `scrubbingRule` applies to. Possible values are `Equals` or `EqualsAny`. Defaults to `Equals`.
     * 
     */
    @Import(name="operator")
    private @Nullable Output<String> operator;

    /**
     * @return When the `matchVariable` is a collection, operate on the `selector` to specify which elements in the collection this `scrubbingRule` applies to. Possible values are `Equals` or `EqualsAny`. Defaults to `Equals`.
     * 
     */
    public Optional<Output<String>> operator() {
        return Optional.ofNullable(this.operator);
    }

    /**
     * When the `matchVariable` is a collection, the `operator` is used to specify which elements in the collection this `scrubbingRule` applies to.
     * 
     * &gt; **Note:** The `selector` field cannot be set if the `operator` is set to `EqualsAny`.
     * 
     */
    @Import(name="selector")
    private @Nullable Output<String> selector;

    /**
     * @return When the `matchVariable` is a collection, the `operator` is used to specify which elements in the collection this `scrubbingRule` applies to.
     * 
     * &gt; **Note:** The `selector` field cannot be set if the `operator` is set to `EqualsAny`.
     * 
     */
    public Optional<Output<String>> selector() {
        return Optional.ofNullable(this.selector);
    }

    private FrontdoorFirewallPolicyLogScrubbingScrubbingRuleArgs() {}

    private FrontdoorFirewallPolicyLogScrubbingScrubbingRuleArgs(FrontdoorFirewallPolicyLogScrubbingScrubbingRuleArgs $) {
        this.enabled = $.enabled;
        this.matchVariable = $.matchVariable;
        this.operator = $.operator;
        this.selector = $.selector;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FrontdoorFirewallPolicyLogScrubbingScrubbingRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FrontdoorFirewallPolicyLogScrubbingScrubbingRuleArgs $;

        public Builder() {
            $ = new FrontdoorFirewallPolicyLogScrubbingScrubbingRuleArgs();
        }

        public Builder(FrontdoorFirewallPolicyLogScrubbingScrubbingRuleArgs defaults) {
            $ = new FrontdoorFirewallPolicyLogScrubbingScrubbingRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled Is this `scrubbingRule` enabled? Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Is this `scrubbingRule` enabled? Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param matchVariable The variable to be scrubbed from the logs. Possible values include `QueryStringArgNames`, `RequestBodyJsonArgNames`, `RequestBodyPostArgNames`, `RequestCookieNames`, `RequestHeaderNames`, `RequestIPAddress`, or `RequestUri`.
         * 
         * &gt; **Note:** `RequestIPAddress` and `RequestUri` must use the `EqualsAny` `operator`.
         * 
         * @return builder
         * 
         */
        public Builder matchVariable(Output<String> matchVariable) {
            $.matchVariable = matchVariable;
            return this;
        }

        /**
         * @param matchVariable The variable to be scrubbed from the logs. Possible values include `QueryStringArgNames`, `RequestBodyJsonArgNames`, `RequestBodyPostArgNames`, `RequestCookieNames`, `RequestHeaderNames`, `RequestIPAddress`, or `RequestUri`.
         * 
         * &gt; **Note:** `RequestIPAddress` and `RequestUri` must use the `EqualsAny` `operator`.
         * 
         * @return builder
         * 
         */
        public Builder matchVariable(String matchVariable) {
            return matchVariable(Output.of(matchVariable));
        }

        /**
         * @param operator When the `matchVariable` is a collection, operate on the `selector` to specify which elements in the collection this `scrubbingRule` applies to. Possible values are `Equals` or `EqualsAny`. Defaults to `Equals`.
         * 
         * @return builder
         * 
         */
        public Builder operator(@Nullable Output<String> operator) {
            $.operator = operator;
            return this;
        }

        /**
         * @param operator When the `matchVariable` is a collection, operate on the `selector` to specify which elements in the collection this `scrubbingRule` applies to. Possible values are `Equals` or `EqualsAny`. Defaults to `Equals`.
         * 
         * @return builder
         * 
         */
        public Builder operator(String operator) {
            return operator(Output.of(operator));
        }

        /**
         * @param selector When the `matchVariable` is a collection, the `operator` is used to specify which elements in the collection this `scrubbingRule` applies to.
         * 
         * &gt; **Note:** The `selector` field cannot be set if the `operator` is set to `EqualsAny`.
         * 
         * @return builder
         * 
         */
        public Builder selector(@Nullable Output<String> selector) {
            $.selector = selector;
            return this;
        }

        /**
         * @param selector When the `matchVariable` is a collection, the `operator` is used to specify which elements in the collection this `scrubbingRule` applies to.
         * 
         * &gt; **Note:** The `selector` field cannot be set if the `operator` is set to `EqualsAny`.
         * 
         * @return builder
         * 
         */
        public Builder selector(String selector) {
            return selector(Output.of(selector));
        }

        public FrontdoorFirewallPolicyLogScrubbingScrubbingRuleArgs build() {
            if ($.matchVariable == null) {
                throw new MissingRequiredPropertyException("FrontdoorFirewallPolicyLogScrubbingScrubbingRuleArgs", "matchVariable");
            }
            return $;
        }
    }

}
