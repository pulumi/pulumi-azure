// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.elasticsan.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class VolumeCreateSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final VolumeCreateSourceArgs Empty = new VolumeCreateSourceArgs();

    /**
     * Specifies the ID of the source to create the Elastic SAN Volume from. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="sourceId", required=true)
    private Output<String> sourceId;

    /**
     * @return Specifies the ID of the source to create the Elastic SAN Volume from. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> sourceId() {
        return this.sourceId;
    }

    /**
     * Specifies the type of the source to create the Elastic SAN Volume from. Possible values are `Disk`, `DiskRestorePoint`, `DiskSnapshot` and `VolumeSnapshot`. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="sourceType", required=true)
    private Output<String> sourceType;

    /**
     * @return Specifies the type of the source to create the Elastic SAN Volume from. Possible values are `Disk`, `DiskRestorePoint`, `DiskSnapshot` and `VolumeSnapshot`. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> sourceType() {
        return this.sourceType;
    }

    private VolumeCreateSourceArgs() {}

    private VolumeCreateSourceArgs(VolumeCreateSourceArgs $) {
        this.sourceId = $.sourceId;
        this.sourceType = $.sourceType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VolumeCreateSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VolumeCreateSourceArgs $;

        public Builder() {
            $ = new VolumeCreateSourceArgs();
        }

        public Builder(VolumeCreateSourceArgs defaults) {
            $ = new VolumeCreateSourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param sourceId Specifies the ID of the source to create the Elastic SAN Volume from. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder sourceId(Output<String> sourceId) {
            $.sourceId = sourceId;
            return this;
        }

        /**
         * @param sourceId Specifies the ID of the source to create the Elastic SAN Volume from. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder sourceId(String sourceId) {
            return sourceId(Output.of(sourceId));
        }

        /**
         * @param sourceType Specifies the type of the source to create the Elastic SAN Volume from. Possible values are `Disk`, `DiskRestorePoint`, `DiskSnapshot` and `VolumeSnapshot`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder sourceType(Output<String> sourceType) {
            $.sourceType = sourceType;
            return this;
        }

        /**
         * @param sourceType Specifies the type of the source to create the Elastic SAN Volume from. Possible values are `Disk`, `DiskRestorePoint`, `DiskSnapshot` and `VolumeSnapshot`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder sourceType(String sourceType) {
            return sourceType(Output.of(sourceType));
        }

        public VolumeCreateSourceArgs build() {
            if ($.sourceId == null) {
                throw new MissingRequiredPropertyException("VolumeCreateSourceArgs", "sourceId");
            }
            if ($.sourceType == null) {
                throw new MissingRequiredPropertyException("VolumeCreateSourceArgs", "sourceType");
            }
            return $;
        }
    }

}
