// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.monitoring.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;


public final class ScheduledQueryRulesAlertTriggerMetricTriggerArgs extends com.pulumi.resources.ResourceArgs {

    public static final ScheduledQueryRulesAlertTriggerMetricTriggerArgs Empty = new ScheduledQueryRulesAlertTriggerMetricTriggerArgs();

    /**
     * Evaluation of metric on a particular column.
     * 
     */
    @Import(name="metricColumn", required=true)
    private Output<String> metricColumn;

    /**
     * @return Evaluation of metric on a particular column.
     * 
     */
    public Output<String> metricColumn() {
        return this.metricColumn;
    }

    /**
     * Metric Trigger Type - &#39;Consecutive&#39; or &#39;Total&#39;.
     * 
     */
    @Import(name="metricTriggerType", required=true)
    private Output<String> metricTriggerType;

    /**
     * @return Metric Trigger Type - &#39;Consecutive&#39; or &#39;Total&#39;.
     * 
     */
    public Output<String> metricTriggerType() {
        return this.metricTriggerType;
    }

    /**
     * Evaluation operation for rule - &#39;Equal&#39;, &#39;GreaterThan&#39;, GreaterThanOrEqual&#39;, &#39;LessThan&#39;, or &#39;LessThanOrEqual&#39;.
     * 
     */
    @Import(name="operator", required=true)
    private Output<String> operator;

    /**
     * @return Evaluation operation for rule - &#39;Equal&#39;, &#39;GreaterThan&#39;, GreaterThanOrEqual&#39;, &#39;LessThan&#39;, or &#39;LessThanOrEqual&#39;.
     * 
     */
    public Output<String> operator() {
        return this.operator;
    }

    /**
     * The threshold of the metric trigger.    Values must be between 0 and 10000 inclusive.
     * 
     */
    @Import(name="threshold", required=true)
    private Output<Double> threshold;

    /**
     * @return The threshold of the metric trigger.    Values must be between 0 and 10000 inclusive.
     * 
     */
    public Output<Double> threshold() {
        return this.threshold;
    }

    private ScheduledQueryRulesAlertTriggerMetricTriggerArgs() {}

    private ScheduledQueryRulesAlertTriggerMetricTriggerArgs(ScheduledQueryRulesAlertTriggerMetricTriggerArgs $) {
        this.metricColumn = $.metricColumn;
        this.metricTriggerType = $.metricTriggerType;
        this.operator = $.operator;
        this.threshold = $.threshold;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScheduledQueryRulesAlertTriggerMetricTriggerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScheduledQueryRulesAlertTriggerMetricTriggerArgs $;

        public Builder() {
            $ = new ScheduledQueryRulesAlertTriggerMetricTriggerArgs();
        }

        public Builder(ScheduledQueryRulesAlertTriggerMetricTriggerArgs defaults) {
            $ = new ScheduledQueryRulesAlertTriggerMetricTriggerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param metricColumn Evaluation of metric on a particular column.
         * 
         * @return builder
         * 
         */
        public Builder metricColumn(Output<String> metricColumn) {
            $.metricColumn = metricColumn;
            return this;
        }

        /**
         * @param metricColumn Evaluation of metric on a particular column.
         * 
         * @return builder
         * 
         */
        public Builder metricColumn(String metricColumn) {
            return metricColumn(Output.of(metricColumn));
        }

        /**
         * @param metricTriggerType Metric Trigger Type - &#39;Consecutive&#39; or &#39;Total&#39;.
         * 
         * @return builder
         * 
         */
        public Builder metricTriggerType(Output<String> metricTriggerType) {
            $.metricTriggerType = metricTriggerType;
            return this;
        }

        /**
         * @param metricTriggerType Metric Trigger Type - &#39;Consecutive&#39; or &#39;Total&#39;.
         * 
         * @return builder
         * 
         */
        public Builder metricTriggerType(String metricTriggerType) {
            return metricTriggerType(Output.of(metricTriggerType));
        }

        /**
         * @param operator Evaluation operation for rule - &#39;Equal&#39;, &#39;GreaterThan&#39;, GreaterThanOrEqual&#39;, &#39;LessThan&#39;, or &#39;LessThanOrEqual&#39;.
         * 
         * @return builder
         * 
         */
        public Builder operator(Output<String> operator) {
            $.operator = operator;
            return this;
        }

        /**
         * @param operator Evaluation operation for rule - &#39;Equal&#39;, &#39;GreaterThan&#39;, GreaterThanOrEqual&#39;, &#39;LessThan&#39;, or &#39;LessThanOrEqual&#39;.
         * 
         * @return builder
         * 
         */
        public Builder operator(String operator) {
            return operator(Output.of(operator));
        }

        /**
         * @param threshold The threshold of the metric trigger.    Values must be between 0 and 10000 inclusive.
         * 
         * @return builder
         * 
         */
        public Builder threshold(Output<Double> threshold) {
            $.threshold = threshold;
            return this;
        }

        /**
         * @param threshold The threshold of the metric trigger.    Values must be between 0 and 10000 inclusive.
         * 
         * @return builder
         * 
         */
        public Builder threshold(Double threshold) {
            return threshold(Output.of(threshold));
        }

        public ScheduledQueryRulesAlertTriggerMetricTriggerArgs build() {
            $.metricColumn = Objects.requireNonNull($.metricColumn, "expected parameter 'metricColumn' to be non-null");
            $.metricTriggerType = Objects.requireNonNull($.metricTriggerType, "expected parameter 'metricTriggerType' to be non-null");
            $.operator = Objects.requireNonNull($.operator, "expected parameter 'operator' to be non-null");
            $.threshold = Objects.requireNonNull($.threshold, "expected parameter 'threshold' to be non-null");
            return $;
        }
    }

}
