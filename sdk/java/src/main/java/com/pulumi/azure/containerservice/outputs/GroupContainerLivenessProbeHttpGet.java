// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerservice.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GroupContainerLivenessProbeHttpGet {
    /**
     * @return A map of HTTP headers used to access on the container. Changing this forces a new resource to be created.
     * 
     */
    private final @Nullable Map<String,String> httpHeaders;
    /**
     * @return Path to access on the HTTP server. Changing this forces a new resource to be created.
     * 
     */
    private final @Nullable String path;
    /**
     * @return The port number the container will expose. Changing this forces a new resource to be created.
     * 
     */
    private final @Nullable Integer port;
    /**
     * @return Scheme to use for connecting to the host. Possible values are `Http` and `Https`. Changing this forces a new resource to be created.
     * 
     */
    private final @Nullable String scheme;

    @CustomType.Constructor
    private GroupContainerLivenessProbeHttpGet(
        @CustomType.Parameter("httpHeaders") @Nullable Map<String,String> httpHeaders,
        @CustomType.Parameter("path") @Nullable String path,
        @CustomType.Parameter("port") @Nullable Integer port,
        @CustomType.Parameter("scheme") @Nullable String scheme) {
        this.httpHeaders = httpHeaders;
        this.path = path;
        this.port = port;
        this.scheme = scheme;
    }

    /**
     * @return A map of HTTP headers used to access on the container. Changing this forces a new resource to be created.
     * 
     */
    public Map<String,String> httpHeaders() {
        return this.httpHeaders == null ? Map.of() : this.httpHeaders;
    }
    /**
     * @return Path to access on the HTTP server. Changing this forces a new resource to be created.
     * 
     */
    public Optional<String> path() {
        return Optional.ofNullable(this.path);
    }
    /**
     * @return The port number the container will expose. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Integer> port() {
        return Optional.ofNullable(this.port);
    }
    /**
     * @return Scheme to use for connecting to the host. Possible values are `Http` and `Https`. Changing this forces a new resource to be created.
     * 
     */
    public Optional<String> scheme() {
        return Optional.ofNullable(this.scheme);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GroupContainerLivenessProbeHttpGet defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Map<String,String> httpHeaders;
        private @Nullable String path;
        private @Nullable Integer port;
        private @Nullable String scheme;

        public Builder() {
    	      // Empty
        }

        public Builder(GroupContainerLivenessProbeHttpGet defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.httpHeaders = defaults.httpHeaders;
    	      this.path = defaults.path;
    	      this.port = defaults.port;
    	      this.scheme = defaults.scheme;
        }

        public Builder httpHeaders(@Nullable Map<String,String> httpHeaders) {
            this.httpHeaders = httpHeaders;
            return this;
        }
        public Builder path(@Nullable String path) {
            this.path = path;
            return this;
        }
        public Builder port(@Nullable Integer port) {
            this.port = port;
            return this;
        }
        public Builder scheme(@Nullable String scheme) {
            this.scheme = scheme;
            return this;
        }        public GroupContainerLivenessProbeHttpGet build() {
            return new GroupContainerLivenessProbeHttpGet(httpHeaders, path, port, scheme);
        }
    }
}
