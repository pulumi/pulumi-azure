// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.eventgrid;

import com.pulumi.azure.eventgrid.inputs.PartnerNamespaceInboundIpRuleArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PartnerNamespaceArgs extends com.pulumi.resources.ResourceArgs {

    public static final PartnerNamespaceArgs Empty = new PartnerNamespaceArgs();

    /**
     * One or more `inbound_ip_rule` blocks as defined below.
     * 
     */
    @Import(name="inboundIpRules")
    private @Nullable Output<List<PartnerNamespaceInboundIpRuleArgs>> inboundIpRules;

    /**
     * @return One or more `inbound_ip_rule` blocks as defined below.
     * 
     */
    public Optional<Output<List<PartnerNamespaceInboundIpRuleArgs>>> inboundIpRules() {
        return Optional.ofNullable(this.inboundIpRules);
    }

    /**
     * Whether local authentication methods are enabled for the Event Grid Partner Namespace. Defaults to `true`.
     * 
     */
    @Import(name="localAuthenticationEnabled")
    private @Nullable Output<Boolean> localAuthenticationEnabled;

    /**
     * @return Whether local authentication methods are enabled for the Event Grid Partner Namespace. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> localAuthenticationEnabled() {
        return Optional.ofNullable(this.localAuthenticationEnabled);
    }

    /**
     * Specifies the Azure Region where the Event Grid Partner Namespace exists. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Specifies the Azure Region where the Event Grid Partner Namespace exists. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name which should be used for this Event Grid Partner Namespace. Changing this forces a new Event Grid Partner Namespace to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name which should be used for this Event Grid Partner Namespace. Changing this forces a new Event Grid Partner Namespace to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The resource Id of the Event Grid Partner Registration that this namespace is associated with. Changing this forces a new Event Grid Partner Namespace to be created.
     * 
     */
    @Import(name="partnerRegistrationId", required=true)
    private Output<String> partnerRegistrationId;

    /**
     * @return The resource Id of the Event Grid Partner Registration that this namespace is associated with. Changing this forces a new Event Grid Partner Namespace to be created.
     * 
     */
    public Output<String> partnerRegistrationId() {
        return this.partnerRegistrationId;
    }

    /**
     * The partner topic routing mode. Possible values are `ChannelNameHeader` and `SourceEventAttribute`. Defaults to `ChannelNameHeader`. Changing this forces a new Event Grid Partner Namespace to be created.
     * 
     */
    @Import(name="partnerTopicRoutingMode")
    private @Nullable Output<String> partnerTopicRoutingMode;

    /**
     * @return The partner topic routing mode. Possible values are `ChannelNameHeader` and `SourceEventAttribute`. Defaults to `ChannelNameHeader`. Changing this forces a new Event Grid Partner Namespace to be created.
     * 
     */
    public Optional<Output<String>> partnerTopicRoutingMode() {
        return Optional.ofNullable(this.partnerTopicRoutingMode);
    }

    /**
     * Whether or not public network access is allowed for this server. Possible values are `Enabled` and `Disabled`. Defaults to `Enabled`.
     * 
     */
    @Import(name="publicNetworkAccess")
    private @Nullable Output<String> publicNetworkAccess;

    /**
     * @return Whether or not public network access is allowed for this server. Possible values are `Enabled` and `Disabled`. Defaults to `Enabled`.
     * 
     */
    public Optional<Output<String>> publicNetworkAccess() {
        return Optional.ofNullable(this.publicNetworkAccess);
    }

    /**
     * The name of the Resource Group where the Event Grid Partner Namespace should exist. Changing this forces a new Event Grid Partner Namespace to be created.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the Resource Group where the Event Grid Partner Namespace should exist. Changing this forces a new Event Grid Partner Namespace to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * A mapping of tags which should be assigned to the Event Grid Partner Namespace.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags which should be assigned to the Event Grid Partner Namespace.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private PartnerNamespaceArgs() {}

    private PartnerNamespaceArgs(PartnerNamespaceArgs $) {
        this.inboundIpRules = $.inboundIpRules;
        this.localAuthenticationEnabled = $.localAuthenticationEnabled;
        this.location = $.location;
        this.name = $.name;
        this.partnerRegistrationId = $.partnerRegistrationId;
        this.partnerTopicRoutingMode = $.partnerTopicRoutingMode;
        this.publicNetworkAccess = $.publicNetworkAccess;
        this.resourceGroupName = $.resourceGroupName;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PartnerNamespaceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PartnerNamespaceArgs $;

        public Builder() {
            $ = new PartnerNamespaceArgs();
        }

        public Builder(PartnerNamespaceArgs defaults) {
            $ = new PartnerNamespaceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param inboundIpRules One or more `inbound_ip_rule` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder inboundIpRules(@Nullable Output<List<PartnerNamespaceInboundIpRuleArgs>> inboundIpRules) {
            $.inboundIpRules = inboundIpRules;
            return this;
        }

        /**
         * @param inboundIpRules One or more `inbound_ip_rule` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder inboundIpRules(List<PartnerNamespaceInboundIpRuleArgs> inboundIpRules) {
            return inboundIpRules(Output.of(inboundIpRules));
        }

        /**
         * @param inboundIpRules One or more `inbound_ip_rule` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder inboundIpRules(PartnerNamespaceInboundIpRuleArgs... inboundIpRules) {
            return inboundIpRules(List.of(inboundIpRules));
        }

        /**
         * @param localAuthenticationEnabled Whether local authentication methods are enabled for the Event Grid Partner Namespace. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder localAuthenticationEnabled(@Nullable Output<Boolean> localAuthenticationEnabled) {
            $.localAuthenticationEnabled = localAuthenticationEnabled;
            return this;
        }

        /**
         * @param localAuthenticationEnabled Whether local authentication methods are enabled for the Event Grid Partner Namespace. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder localAuthenticationEnabled(Boolean localAuthenticationEnabled) {
            return localAuthenticationEnabled(Output.of(localAuthenticationEnabled));
        }

        /**
         * @param location Specifies the Azure Region where the Event Grid Partner Namespace exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Specifies the Azure Region where the Event Grid Partner Namespace exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The name which should be used for this Event Grid Partner Namespace. Changing this forces a new Event Grid Partner Namespace to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this Event Grid Partner Namespace. Changing this forces a new Event Grid Partner Namespace to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param partnerRegistrationId The resource Id of the Event Grid Partner Registration that this namespace is associated with. Changing this forces a new Event Grid Partner Namespace to be created.
         * 
         * @return builder
         * 
         */
        public Builder partnerRegistrationId(Output<String> partnerRegistrationId) {
            $.partnerRegistrationId = partnerRegistrationId;
            return this;
        }

        /**
         * @param partnerRegistrationId The resource Id of the Event Grid Partner Registration that this namespace is associated with. Changing this forces a new Event Grid Partner Namespace to be created.
         * 
         * @return builder
         * 
         */
        public Builder partnerRegistrationId(String partnerRegistrationId) {
            return partnerRegistrationId(Output.of(partnerRegistrationId));
        }

        /**
         * @param partnerTopicRoutingMode The partner topic routing mode. Possible values are `ChannelNameHeader` and `SourceEventAttribute`. Defaults to `ChannelNameHeader`. Changing this forces a new Event Grid Partner Namespace to be created.
         * 
         * @return builder
         * 
         */
        public Builder partnerTopicRoutingMode(@Nullable Output<String> partnerTopicRoutingMode) {
            $.partnerTopicRoutingMode = partnerTopicRoutingMode;
            return this;
        }

        /**
         * @param partnerTopicRoutingMode The partner topic routing mode. Possible values are `ChannelNameHeader` and `SourceEventAttribute`. Defaults to `ChannelNameHeader`. Changing this forces a new Event Grid Partner Namespace to be created.
         * 
         * @return builder
         * 
         */
        public Builder partnerTopicRoutingMode(String partnerTopicRoutingMode) {
            return partnerTopicRoutingMode(Output.of(partnerTopicRoutingMode));
        }

        /**
         * @param publicNetworkAccess Whether or not public network access is allowed for this server. Possible values are `Enabled` and `Disabled`. Defaults to `Enabled`.
         * 
         * @return builder
         * 
         */
        public Builder publicNetworkAccess(@Nullable Output<String> publicNetworkAccess) {
            $.publicNetworkAccess = publicNetworkAccess;
            return this;
        }

        /**
         * @param publicNetworkAccess Whether or not public network access is allowed for this server. Possible values are `Enabled` and `Disabled`. Defaults to `Enabled`.
         * 
         * @return builder
         * 
         */
        public Builder publicNetworkAccess(String publicNetworkAccess) {
            return publicNetworkAccess(Output.of(publicNetworkAccess));
        }

        /**
         * @param resourceGroupName The name of the Resource Group where the Event Grid Partner Namespace should exist. Changing this forces a new Event Grid Partner Namespace to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the Resource Group where the Event Grid Partner Namespace should exist. Changing this forces a new Event Grid Partner Namespace to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param tags A mapping of tags which should be assigned to the Event Grid Partner Namespace.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags which should be assigned to the Event Grid Partner Namespace.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public PartnerNamespaceArgs build() {
            if ($.partnerRegistrationId == null) {
                throw new MissingRequiredPropertyException("PartnerNamespaceArgs", "partnerRegistrationId");
            }
            if ($.resourceGroupName == null) {
                throw new MissingRequiredPropertyException("PartnerNamespaceArgs", "resourceGroupName");
            }
            return $;
        }
    }

}
