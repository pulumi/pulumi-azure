// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.media;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.media.StreamingPolicyArgs;
import com.pulumi.azure.media.inputs.StreamingPolicyState;
import com.pulumi.azure.media.outputs.StreamingPolicyCommonEncryptionCbcs;
import com.pulumi.azure.media.outputs.StreamingPolicyCommonEncryptionCenc;
import com.pulumi.azure.media.outputs.StreamingPolicyNoEncryptionEnabledProtocols;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a Streaming Policy.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.storage.Account;
 * import com.pulumi.azure.storage.AccountArgs;
 * import com.pulumi.azure.media.ServiceAccount;
 * import com.pulumi.azure.media.ServiceAccountArgs;
 * import com.pulumi.azure.media.inputs.ServiceAccountStorageAccountArgs;
 * import com.pulumi.azure.media.StreamingPolicy;
 * import com.pulumi.azure.media.StreamingPolicyArgs;
 * import com.pulumi.azure.media.inputs.StreamingPolicyCommonEncryptionCencArgs;
 * import com.pulumi.azure.media.inputs.StreamingPolicyCommonEncryptionCencEnabledProtocolsArgs;
 * import com.pulumi.azure.media.inputs.StreamingPolicyCommonEncryptionCencDrmPlayreadyArgs;
 * import com.pulumi.azure.media.inputs.StreamingPolicyCommonEncryptionCbcsArgs;
 * import com.pulumi.azure.media.inputs.StreamingPolicyCommonEncryptionCbcsEnabledProtocolsArgs;
 * import com.pulumi.azure.media.inputs.StreamingPolicyCommonEncryptionCbcsDrmFairplayArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampleResourceGroup = new ResourceGroup(&#34;exampleResourceGroup&#34;, ResourceGroupArgs.builder()        
 *             .location(&#34;West Europe&#34;)
 *             .build());
 * 
 *         var exampleAccount = new Account(&#34;exampleAccount&#34;, AccountArgs.builder()        
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .location(exampleResourceGroup.location())
 *             .accountTier(&#34;Standard&#34;)
 *             .accountReplicationType(&#34;GRS&#34;)
 *             .build());
 * 
 *         var exampleServiceAccount = new ServiceAccount(&#34;exampleServiceAccount&#34;, ServiceAccountArgs.builder()        
 *             .location(exampleResourceGroup.location())
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .storageAccounts(ServiceAccountStorageAccountArgs.builder()
 *                 .id(exampleAccount.id())
 *                 .isPrimary(true)
 *                 .build())
 *             .build());
 * 
 *         var exampleStreamingPolicy = new StreamingPolicy(&#34;exampleStreamingPolicy&#34;, StreamingPolicyArgs.builder()        
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .mediaServicesAccountName(exampleServiceAccount.name())
 *             .commonEncryptionCenc(StreamingPolicyCommonEncryptionCencArgs.builder()
 *                 .enabledProtocols(StreamingPolicyCommonEncryptionCencEnabledProtocolsArgs.builder()
 *                     .download(false)
 *                     .dash(true)
 *                     .hls(false)
 *                     .smoothStreaming(false)
 *                     .build())
 *                 .drmPlayready(StreamingPolicyCommonEncryptionCencDrmPlayreadyArgs.builder()
 *                     .customLicenseAcquisitionUrlTemplate(&#34;https://contoso.com/{AssetAlternativeId}/playready/{ContentKeyId}&#34;)
 *                     .customAttributes(&#34;PlayReady CustomAttributes&#34;)
 *                     .build())
 *                 .drmWidevineCustomLicenseAcquisitionUrlTemplate(&#34;https://contoso.com/{AssetAlternativeId}/widevine/{ContentKeyId}&#34;)
 *                 .build())
 *             .commonEncryptionCbcs(StreamingPolicyCommonEncryptionCbcsArgs.builder()
 *                 .enabledProtocols(StreamingPolicyCommonEncryptionCbcsEnabledProtocolsArgs.builder()
 *                     .download(false)
 *                     .dash(true)
 *                     .hls(false)
 *                     .smoothStreaming(false)
 *                     .build())
 *                 .drmFairplay(StreamingPolicyCommonEncryptionCbcsDrmFairplayArgs.builder()
 *                     .customLicenseAcquisitionUrlTemplate(&#34;https://contoso.com/{AssetAlternativeId}/fairplay/{ContentKeyId}&#34;)
 *                     .allowPersistentLicense(true)
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Streaming Policies can be imported using the `resource id`, e.g.
 * 
 * ```sh
 *  $ pulumi import azure:media/streamingPolicy:StreamingPolicy example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Media/mediaServices/account1/streamingPolicies/policy1
 * ```
 * 
 */
@ResourceType(type="azure:media/streamingPolicy:StreamingPolicy")
public class StreamingPolicy extends com.pulumi.resources.CustomResource {
    /**
     * A `common_encryption_cbcs` block as defined below. Changing this forces a new Streaming Policy to be created.
     * 
     */
    @Export(name="commonEncryptionCbcs", type=StreamingPolicyCommonEncryptionCbcs.class, parameters={})
    private Output</* @Nullable */ StreamingPolicyCommonEncryptionCbcs> commonEncryptionCbcs;

    /**
     * @return A `common_encryption_cbcs` block as defined below. Changing this forces a new Streaming Policy to be created.
     * 
     */
    public Output<Optional<StreamingPolicyCommonEncryptionCbcs>> commonEncryptionCbcs() {
        return Codegen.optional(this.commonEncryptionCbcs);
    }
    /**
     * A `common_encryption_cenc` block as defined below. Changing this forces a new Streaming Policy to be created.
     * 
     */
    @Export(name="commonEncryptionCenc", type=StreamingPolicyCommonEncryptionCenc.class, parameters={})
    private Output</* @Nullable */ StreamingPolicyCommonEncryptionCenc> commonEncryptionCenc;

    /**
     * @return A `common_encryption_cenc` block as defined below. Changing this forces a new Streaming Policy to be created.
     * 
     */
    public Output<Optional<StreamingPolicyCommonEncryptionCenc>> commonEncryptionCenc() {
        return Codegen.optional(this.commonEncryptionCenc);
    }
    /**
     * Default Content Key used by current Streaming Policy. Changing this forces a new Streaming Policy to be created.
     * 
     */
    @Export(name="defaultContentKeyPolicyName", type=String.class, parameters={})
    private Output</* @Nullable */ String> defaultContentKeyPolicyName;

    /**
     * @return Default Content Key used by current Streaming Policy. Changing this forces a new Streaming Policy to be created.
     * 
     */
    public Output<Optional<String>> defaultContentKeyPolicyName() {
        return Codegen.optional(this.defaultContentKeyPolicyName);
    }
    /**
     * The Media Services account name. Changing this forces a new Streaming Policy to be created.
     * 
     */
    @Export(name="mediaServicesAccountName", type=String.class, parameters={})
    private Output<String> mediaServicesAccountName;

    /**
     * @return The Media Services account name. Changing this forces a new Streaming Policy to be created.
     * 
     */
    public Output<String> mediaServicesAccountName() {
        return this.mediaServicesAccountName;
    }
    /**
     * The name which should be used for this Streaming Policy. Changing this forces a new Streaming Policy to be created.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name which should be used for this Streaming Policy. Changing this forces a new Streaming Policy to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * A `no_encryption_enabled_protocols` block as defined below. Changing this forces a new Streaming Policy to be created.
     * 
     */
    @Export(name="noEncryptionEnabledProtocols", type=StreamingPolicyNoEncryptionEnabledProtocols.class, parameters={})
    private Output</* @Nullable */ StreamingPolicyNoEncryptionEnabledProtocols> noEncryptionEnabledProtocols;

    /**
     * @return A `no_encryption_enabled_protocols` block as defined below. Changing this forces a new Streaming Policy to be created.
     * 
     */
    public Output<Optional<StreamingPolicyNoEncryptionEnabledProtocols>> noEncryptionEnabledProtocols() {
        return Codegen.optional(this.noEncryptionEnabledProtocols);
    }
    /**
     * The name of the Resource Group where the Streaming Policy should exist. Changing this forces a new Streaming Policy to be created.
     * 
     */
    @Export(name="resourceGroupName", type=String.class, parameters={})
    private Output<String> resourceGroupName;

    /**
     * @return The name of the Resource Group where the Streaming Policy should exist. Changing this forces a new Streaming Policy to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public StreamingPolicy(String name) {
        this(name, StreamingPolicyArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public StreamingPolicy(String name, StreamingPolicyArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public StreamingPolicy(String name, StreamingPolicyArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:media/streamingPolicy:StreamingPolicy", name, args == null ? StreamingPolicyArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private StreamingPolicy(String name, Output<String> id, @Nullable StreamingPolicyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:media/streamingPolicy:StreamingPolicy", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static StreamingPolicy get(String name, Output<String> id, @Nullable StreamingPolicyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new StreamingPolicy(name, id, state, options);
    }
}
