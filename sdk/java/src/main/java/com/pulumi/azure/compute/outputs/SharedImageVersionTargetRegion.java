// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SharedImageVersionTargetRegion {
    /**
     * @return The ID of the Disk Encryption Set to encrypt the Image Version in the target region. Changing this forces a new resource to be created.
     * 
     */
    private @Nullable String diskEncryptionSetId;
    /**
     * @return Specifies whether this Shared Image Version should be excluded when querying for the `latest` version. Defaults to `false`.
     * 
     */
    private @Nullable Boolean excludeFromLatestEnabled;
    /**
     * @return The Azure Region in which this Image Version should exist.
     * 
     */
    private String name;
    /**
     * @return The number of replicas of the Image Version to be created per region.
     * 
     */
    private Integer regionalReplicaCount;
    /**
     * @return The storage account type for the image version. Possible values are `Standard_LRS`, `Premium_LRS` and `Standard_ZRS`. Defaults to `Standard_LRS`. You can store all of your image version replicas in Zone Redundant Storage by specifying `Standard_ZRS`.
     * 
     */
    private @Nullable String storageAccountType;

    private SharedImageVersionTargetRegion() {}
    /**
     * @return The ID of the Disk Encryption Set to encrypt the Image Version in the target region. Changing this forces a new resource to be created.
     * 
     */
    public Optional<String> diskEncryptionSetId() {
        return Optional.ofNullable(this.diskEncryptionSetId);
    }
    /**
     * @return Specifies whether this Shared Image Version should be excluded when querying for the `latest` version. Defaults to `false`.
     * 
     */
    public Optional<Boolean> excludeFromLatestEnabled() {
        return Optional.ofNullable(this.excludeFromLatestEnabled);
    }
    /**
     * @return The Azure Region in which this Image Version should exist.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The number of replicas of the Image Version to be created per region.
     * 
     */
    public Integer regionalReplicaCount() {
        return this.regionalReplicaCount;
    }
    /**
     * @return The storage account type for the image version. Possible values are `Standard_LRS`, `Premium_LRS` and `Standard_ZRS`. Defaults to `Standard_LRS`. You can store all of your image version replicas in Zone Redundant Storage by specifying `Standard_ZRS`.
     * 
     */
    public Optional<String> storageAccountType() {
        return Optional.ofNullable(this.storageAccountType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SharedImageVersionTargetRegion defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String diskEncryptionSetId;
        private @Nullable Boolean excludeFromLatestEnabled;
        private String name;
        private Integer regionalReplicaCount;
        private @Nullable String storageAccountType;
        public Builder() {}
        public Builder(SharedImageVersionTargetRegion defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.diskEncryptionSetId = defaults.diskEncryptionSetId;
    	      this.excludeFromLatestEnabled = defaults.excludeFromLatestEnabled;
    	      this.name = defaults.name;
    	      this.regionalReplicaCount = defaults.regionalReplicaCount;
    	      this.storageAccountType = defaults.storageAccountType;
        }

        @CustomType.Setter
        public Builder diskEncryptionSetId(@Nullable String diskEncryptionSetId) {

            this.diskEncryptionSetId = diskEncryptionSetId;
            return this;
        }
        @CustomType.Setter
        public Builder excludeFromLatestEnabled(@Nullable Boolean excludeFromLatestEnabled) {

            this.excludeFromLatestEnabled = excludeFromLatestEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("SharedImageVersionTargetRegion", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder regionalReplicaCount(Integer regionalReplicaCount) {
            if (regionalReplicaCount == null) {
              throw new MissingRequiredPropertyException("SharedImageVersionTargetRegion", "regionalReplicaCount");
            }
            this.regionalReplicaCount = regionalReplicaCount;
            return this;
        }
        @CustomType.Setter
        public Builder storageAccountType(@Nullable String storageAccountType) {

            this.storageAccountType = storageAccountType;
            return this;
        }
        public SharedImageVersionTargetRegion build() {
            final var _resultValue = new SharedImageVersionTargetRegion();
            _resultValue.diskEncryptionSetId = diskEncryptionSetId;
            _resultValue.excludeFromLatestEnabled = excludeFromLatestEnabled;
            _resultValue.name = name;
            _resultValue.regionalReplicaCount = regionalReplicaCount;
            _resultValue.storageAccountType = storageAccountType;
            return _resultValue;
        }
    }
}
