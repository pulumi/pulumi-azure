// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.mobile.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetNetworkSimStaticIpConfiguration {
    /**
     * @return The ID of attached data network on which the static.
     * 
     */
    private String attachedDataNetworkId;
    private String sliceId;
    /**
     * @return The IPv4 address assigned to the SIM at this network scope.
     * 
     */
    private String staticIpv4Address;

    private GetNetworkSimStaticIpConfiguration() {}
    /**
     * @return The ID of attached data network on which the static.
     * 
     */
    public String attachedDataNetworkId() {
        return this.attachedDataNetworkId;
    }
    public String sliceId() {
        return this.sliceId;
    }
    /**
     * @return The IPv4 address assigned to the SIM at this network scope.
     * 
     */
    public String staticIpv4Address() {
        return this.staticIpv4Address;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNetworkSimStaticIpConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String attachedDataNetworkId;
        private String sliceId;
        private String staticIpv4Address;
        public Builder() {}
        public Builder(GetNetworkSimStaticIpConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.attachedDataNetworkId = defaults.attachedDataNetworkId;
    	      this.sliceId = defaults.sliceId;
    	      this.staticIpv4Address = defaults.staticIpv4Address;
        }

        @CustomType.Setter
        public Builder attachedDataNetworkId(String attachedDataNetworkId) {
            if (attachedDataNetworkId == null) {
              throw new MissingRequiredPropertyException("GetNetworkSimStaticIpConfiguration", "attachedDataNetworkId");
            }
            this.attachedDataNetworkId = attachedDataNetworkId;
            return this;
        }
        @CustomType.Setter
        public Builder sliceId(String sliceId) {
            if (sliceId == null) {
              throw new MissingRequiredPropertyException("GetNetworkSimStaticIpConfiguration", "sliceId");
            }
            this.sliceId = sliceId;
            return this;
        }
        @CustomType.Setter
        public Builder staticIpv4Address(String staticIpv4Address) {
            if (staticIpv4Address == null) {
              throw new MissingRequiredPropertyException("GetNetworkSimStaticIpConfiguration", "staticIpv4Address");
            }
            this.staticIpv4Address = staticIpv4Address;
            return this;
        }
        public GetNetworkSimStaticIpConfiguration build() {
            final var _resultValue = new GetNetworkSimStaticIpConfiguration();
            _resultValue.attachedDataNetworkId = attachedDataNetworkId;
            _resultValue.sliceId = sliceId;
            _resultValue.staticIpv4Address = staticIpv4Address;
            return _resultValue;
        }
    }
}
