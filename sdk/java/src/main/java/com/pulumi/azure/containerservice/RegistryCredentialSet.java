// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerservice;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.containerservice.RegistryCredentialSetArgs;
import com.pulumi.azure.containerservice.inputs.RegistryCredentialSetState;
import com.pulumi.azure.containerservice.outputs.RegistryCredentialSetAuthenticationCredentials;
import com.pulumi.azure.containerservice.outputs.RegistryCredentialSetIdentity;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Manages a Container Registry Credential Set.
 * 
 * ## Example Usage
 * 
 * ### Minimal)
 * 
 * &gt; **Note:** Be aware that you will need to permit the Identity that is created for the Container Registry to have `get` on secrets to the Key Vault, e.g. using the `azure.keyvault.AccessPolicy` resource.
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.containerservice.Registry;
 * import com.pulumi.azure.containerservice.RegistryArgs;
 * import com.pulumi.azure.containerservice.RegistryCredentialSet;
 * import com.pulumi.azure.containerservice.RegistryCredentialSetArgs;
 * import com.pulumi.azure.containerservice.inputs.RegistryCredentialSetIdentityArgs;
 * import com.pulumi.azure.containerservice.inputs.RegistryCredentialSetAuthenticationCredentialsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new ResourceGroup("example", ResourceGroupArgs.builder()
 *             .name("example-resources")
 *             .location("West Europe")
 *             .build());
 * 
 *         var exampleRegistry = new Registry("exampleRegistry", RegistryArgs.builder()
 *             .name("exampleContainerRegistry")
 *             .resourceGroupName(example.name())
 *             .location(example.location())
 *             .sku("Basic")
 *             .build());
 * 
 *         var exampleRegistryCredentialSet = new RegistryCredentialSet("exampleRegistryCredentialSet", RegistryCredentialSetArgs.builder()
 *             .name("exampleCredentialSet")
 *             .containerRegistryId(exampleRegistry.id())
 *             .loginServer("docker.io")
 *             .identity(RegistryCredentialSetIdentityArgs.builder()
 *                 .type("SystemAssigned")
 *                 .build())
 *             .authenticationCredentials(RegistryCredentialSetAuthenticationCredentialsArgs.builder()
 *                 .usernameSecretId("https://example-keyvault.vault.azure.net/secrets/example-user-name")
 *                 .passwordSecretId("https://example-keyvault.vault.azure.net/secrets/example-user-password")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ### Full)
 * 
 * This example provisions a key vault with two secrets, a container registry, a container registry credential set, and an access policy to allow the container registry to read the secrets from the key vault.
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.core.CoreFunctions;
 * import com.pulumi.azure.keyvault.KeyVault;
 * import com.pulumi.azure.keyvault.KeyVaultArgs;
 * import com.pulumi.azure.keyvault.inputs.KeyVaultAccessPolicyArgs;
 * import com.pulumi.azure.keyvault.Secret;
 * import com.pulumi.azure.keyvault.SecretArgs;
 * import com.pulumi.azure.containerservice.Registry;
 * import com.pulumi.azure.containerservice.RegistryArgs;
 * import com.pulumi.azure.containerservice.RegistryCredentialSet;
 * import com.pulumi.azure.containerservice.RegistryCredentialSetArgs;
 * import com.pulumi.azure.containerservice.inputs.RegistryCredentialSetIdentityArgs;
 * import com.pulumi.azure.containerservice.inputs.RegistryCredentialSetAuthenticationCredentialsArgs;
 * import com.pulumi.azure.keyvault.AccessPolicy;
 * import com.pulumi.azure.keyvault.AccessPolicyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new ResourceGroup("example", ResourceGroupArgs.builder()
 *             .name("example-resources")
 *             .location("West Europe")
 *             .build());
 * 
 *         final var current = CoreFunctions.getClientConfig(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
 * 
 *         var exampleKeyVault = new KeyVault("exampleKeyVault", KeyVaultArgs.builder()
 *             .name("examplekeyvault")
 *             .location(example.location())
 *             .resourceGroupName(example.name())
 *             .tenantId(current.tenantId())
 *             .skuName("standard")
 *             .softDeleteRetentionDays(7)
 *             .accessPolicies(KeyVaultAccessPolicyArgs.builder()
 *                 .tenantId(current.tenantId())
 *                 .objectId(current.objectId())
 *                 .certificatePermissions()
 *                 .keyPermissions()
 *                 .secretPermissions(                
 *                     "Get",
 *                     "Set",
 *                     "Delete",
 *                     "Purge")
 *                 .build())
 *             .build());
 * 
 *         var exampleUser = new Secret("exampleUser", SecretArgs.builder()
 *             .keyVaultId(exampleKeyVault.id())
 *             .name("example-user-name")
 *             .value("name")
 *             .build());
 * 
 *         var examplePassword = new Secret("examplePassword", SecretArgs.builder()
 *             .keyVaultId(exampleKeyVault.id())
 *             .name("example-user-password")
 *             .value("password")
 *             .build());
 * 
 *         var exampleRegistry = new Registry("exampleRegistry", RegistryArgs.builder()
 *             .name("exampleContainerRegistry")
 *             .resourceGroupName(example.name())
 *             .location(example.location())
 *             .sku("Basic")
 *             .build());
 * 
 *         var exampleRegistryCredentialSet = new RegistryCredentialSet("exampleRegistryCredentialSet", RegistryCredentialSetArgs.builder()
 *             .name("exampleCredentialSet")
 *             .containerRegistryId(exampleRegistry.id())
 *             .loginServer("docker.io")
 *             .identity(RegistryCredentialSetIdentityArgs.builder()
 *                 .type("SystemAssigned")
 *                 .build())
 *             .authenticationCredentials(RegistryCredentialSetAuthenticationCredentialsArgs.builder()
 *                 .usernameSecretId(exampleUser.versionlessId())
 *                 .passwordSecretId(examplePassword.versionlessId())
 *                 .build())
 *             .build());
 * 
 *         var readSecrets = new AccessPolicy("readSecrets", AccessPolicyArgs.builder()
 *             .keyVaultId(exampleKeyVault.id())
 *             .tenantId(exampleRegistryCredentialSet.identity().applyValue(_identity -> _identity.tenantId()))
 *             .objectId(exampleRegistryCredentialSet.identity().applyValue(_identity -> _identity.principalId()))
 *             .secretPermissions("Get")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## API Providers
 * 
 * &lt;!-- This section is generated, changes will be overwritten --&gt;
 * This resource uses the following Azure API Providers:
 * 
 * * `Microsoft.ContainerRegistry` - 2023-07-01
 * 
 * ## Import
 * 
 * Container Registry Credential Sets can be imported using the `resource id`, e.g.
 * 
 * ```sh
 * $ pulumi import azure:containerservice/registryCredentialSet:RegistryCredentialSet example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.ContainerRegistry/registries/registry1/credentialSets/credentialSet1
 * ```
 * 
 */
@ResourceType(type="azure:containerservice/registryCredentialSet:RegistryCredentialSet")
public class RegistryCredentialSet extends com.pulumi.resources.CustomResource {
    /**
     * A `authenticationCredentials` block as defined below.
     * 
     */
    @Export(name="authenticationCredentials", refs={RegistryCredentialSetAuthenticationCredentials.class}, tree="[0]")
    private Output<RegistryCredentialSetAuthenticationCredentials> authenticationCredentials;

    /**
     * @return A `authenticationCredentials` block as defined below.
     * 
     */
    public Output<RegistryCredentialSetAuthenticationCredentials> authenticationCredentials() {
        return this.authenticationCredentials;
    }
    /**
     * The ID of the Container Registry. Changing this forces a new Container Registry Credential Set to be created.
     * 
     */
    @Export(name="containerRegistryId", refs={String.class}, tree="[0]")
    private Output<String> containerRegistryId;

    /**
     * @return The ID of the Container Registry. Changing this forces a new Container Registry Credential Set to be created.
     * 
     */
    public Output<String> containerRegistryId() {
        return this.containerRegistryId;
    }
    /**
     * An `identity` block as defined below.
     * 
     */
    @Export(name="identity", refs={RegistryCredentialSetIdentity.class}, tree="[0]")
    private Output<RegistryCredentialSetIdentity> identity;

    /**
     * @return An `identity` block as defined below.
     * 
     */
    public Output<RegistryCredentialSetIdentity> identity() {
        return this.identity;
    }
    /**
     * The login server for the Credential Set. Changing this forces a new Container Registry Credential Set to be created.
     * 
     */
    @Export(name="loginServer", refs={String.class}, tree="[0]")
    private Output<String> loginServer;

    /**
     * @return The login server for the Credential Set. Changing this forces a new Container Registry Credential Set to be created.
     * 
     */
    public Output<String> loginServer() {
        return this.loginServer;
    }
    /**
     * The name which should be used for this Container Registry Credential Set. Changing this forces a new Container Registry Credential Set to be created.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name which should be used for this Container Registry Credential Set. Changing this forces a new Container Registry Credential Set to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public RegistryCredentialSet(java.lang.String name) {
        this(name, RegistryCredentialSetArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public RegistryCredentialSet(java.lang.String name, RegistryCredentialSetArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public RegistryCredentialSet(java.lang.String name, RegistryCredentialSetArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:containerservice/registryCredentialSet:RegistryCredentialSet", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private RegistryCredentialSet(java.lang.String name, Output<java.lang.String> id, @Nullable RegistryCredentialSetState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:containerservice/registryCredentialSet:RegistryCredentialSet", name, state, makeResourceOptions(options, id), false);
    }

    private static RegistryCredentialSetArgs makeArgs(RegistryCredentialSetArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? RegistryCredentialSetArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static RegistryCredentialSet get(java.lang.String name, Output<java.lang.String> id, @Nullable RegistryCredentialSetState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new RegistryCredentialSet(name, id, state, options);
    }
}
