// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.core.inputs;

import com.pulumi.azure.core.inputs.SubscriptionCostManagementExportExportDataOptionsArgs;
import com.pulumi.azure.core.inputs.SubscriptionCostManagementExportExportDataStorageLocationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SubscriptionCostManagementExportState extends com.pulumi.resources.ResourceArgs {

    public static final SubscriptionCostManagementExportState Empty = new SubscriptionCostManagementExportState();

    /**
     * Is the cost management export active? Default is `true`.
     * 
     */
    @Import(name="active")
    private @Nullable Output<Boolean> active;

    /**
     * @return Is the cost management export active? Default is `true`.
     * 
     */
    public Optional<Output<Boolean>> active() {
        return Optional.ofNullable(this.active);
    }

    /**
     * A `export_data_options` block as defined below.
     * 
     */
    @Import(name="exportDataOptions")
    private @Nullable Output<SubscriptionCostManagementExportExportDataOptionsArgs> exportDataOptions;

    /**
     * @return A `export_data_options` block as defined below.
     * 
     */
    public Optional<Output<SubscriptionCostManagementExportExportDataOptionsArgs>> exportDataOptions() {
        return Optional.ofNullable(this.exportDataOptions);
    }

    /**
     * A `export_data_storage_location` block as defined below.
     * 
     */
    @Import(name="exportDataStorageLocation")
    private @Nullable Output<SubscriptionCostManagementExportExportDataStorageLocationArgs> exportDataStorageLocation;

    /**
     * @return A `export_data_storage_location` block as defined below.
     * 
     */
    public Optional<Output<SubscriptionCostManagementExportExportDataStorageLocationArgs>> exportDataStorageLocation() {
        return Optional.ofNullable(this.exportDataStorageLocation);
    }

    /**
     * Specifies the name of the Cost Management Export. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the name of the Cost Management Export. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="recurrencePeriodEndDate")
    private @Nullable Output<String> recurrencePeriodEndDate;

    public Optional<Output<String>> recurrencePeriodEndDate() {
        return Optional.ofNullable(this.recurrencePeriodEndDate);
    }

    /**
     * The date the export will start capturing information.
     * 
     */
    @Import(name="recurrencePeriodStartDate")
    private @Nullable Output<String> recurrencePeriodStartDate;

    /**
     * @return The date the export will start capturing information.
     * 
     */
    public Optional<Output<String>> recurrencePeriodStartDate() {
        return Optional.ofNullable(this.recurrencePeriodStartDate);
    }

    /**
     * How often the requested information will be exported. Valid values include `Annually`, `Daily`, `Monthly`, `Weekly`.
     * 
     */
    @Import(name="recurrenceType")
    private @Nullable Output<String> recurrenceType;

    /**
     * @return How often the requested information will be exported. Valid values include `Annually`, `Daily`, `Monthly`, `Weekly`.
     * 
     */
    public Optional<Output<String>> recurrenceType() {
        return Optional.ofNullable(this.recurrenceType);
    }

    /**
     * The id of the subscription on which to create an export.
     * 
     */
    @Import(name="subscriptionId")
    private @Nullable Output<String> subscriptionId;

    /**
     * @return The id of the subscription on which to create an export.
     * 
     */
    public Optional<Output<String>> subscriptionId() {
        return Optional.ofNullable(this.subscriptionId);
    }

    private SubscriptionCostManagementExportState() {}

    private SubscriptionCostManagementExportState(SubscriptionCostManagementExportState $) {
        this.active = $.active;
        this.exportDataOptions = $.exportDataOptions;
        this.exportDataStorageLocation = $.exportDataStorageLocation;
        this.name = $.name;
        this.recurrencePeriodEndDate = $.recurrencePeriodEndDate;
        this.recurrencePeriodStartDate = $.recurrencePeriodStartDate;
        this.recurrenceType = $.recurrenceType;
        this.subscriptionId = $.subscriptionId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SubscriptionCostManagementExportState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SubscriptionCostManagementExportState $;

        public Builder() {
            $ = new SubscriptionCostManagementExportState();
        }

        public Builder(SubscriptionCostManagementExportState defaults) {
            $ = new SubscriptionCostManagementExportState(Objects.requireNonNull(defaults));
        }

        /**
         * @param active Is the cost management export active? Default is `true`.
         * 
         * @return builder
         * 
         */
        public Builder active(@Nullable Output<Boolean> active) {
            $.active = active;
            return this;
        }

        /**
         * @param active Is the cost management export active? Default is `true`.
         * 
         * @return builder
         * 
         */
        public Builder active(Boolean active) {
            return active(Output.of(active));
        }

        /**
         * @param exportDataOptions A `export_data_options` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder exportDataOptions(@Nullable Output<SubscriptionCostManagementExportExportDataOptionsArgs> exportDataOptions) {
            $.exportDataOptions = exportDataOptions;
            return this;
        }

        /**
         * @param exportDataOptions A `export_data_options` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder exportDataOptions(SubscriptionCostManagementExportExportDataOptionsArgs exportDataOptions) {
            return exportDataOptions(Output.of(exportDataOptions));
        }

        /**
         * @param exportDataStorageLocation A `export_data_storage_location` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder exportDataStorageLocation(@Nullable Output<SubscriptionCostManagementExportExportDataStorageLocationArgs> exportDataStorageLocation) {
            $.exportDataStorageLocation = exportDataStorageLocation;
            return this;
        }

        /**
         * @param exportDataStorageLocation A `export_data_storage_location` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder exportDataStorageLocation(SubscriptionCostManagementExportExportDataStorageLocationArgs exportDataStorageLocation) {
            return exportDataStorageLocation(Output.of(exportDataStorageLocation));
        }

        /**
         * @param name Specifies the name of the Cost Management Export. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of the Cost Management Export. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder recurrencePeriodEndDate(@Nullable Output<String> recurrencePeriodEndDate) {
            $.recurrencePeriodEndDate = recurrencePeriodEndDate;
            return this;
        }

        public Builder recurrencePeriodEndDate(String recurrencePeriodEndDate) {
            return recurrencePeriodEndDate(Output.of(recurrencePeriodEndDate));
        }

        /**
         * @param recurrencePeriodStartDate The date the export will start capturing information.
         * 
         * @return builder
         * 
         */
        public Builder recurrencePeriodStartDate(@Nullable Output<String> recurrencePeriodStartDate) {
            $.recurrencePeriodStartDate = recurrencePeriodStartDate;
            return this;
        }

        /**
         * @param recurrencePeriodStartDate The date the export will start capturing information.
         * 
         * @return builder
         * 
         */
        public Builder recurrencePeriodStartDate(String recurrencePeriodStartDate) {
            return recurrencePeriodStartDate(Output.of(recurrencePeriodStartDate));
        }

        /**
         * @param recurrenceType How often the requested information will be exported. Valid values include `Annually`, `Daily`, `Monthly`, `Weekly`.
         * 
         * @return builder
         * 
         */
        public Builder recurrenceType(@Nullable Output<String> recurrenceType) {
            $.recurrenceType = recurrenceType;
            return this;
        }

        /**
         * @param recurrenceType How often the requested information will be exported. Valid values include `Annually`, `Daily`, `Monthly`, `Weekly`.
         * 
         * @return builder
         * 
         */
        public Builder recurrenceType(String recurrenceType) {
            return recurrenceType(Output.of(recurrenceType));
        }

        /**
         * @param subscriptionId The id of the subscription on which to create an export.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionId(@Nullable Output<String> subscriptionId) {
            $.subscriptionId = subscriptionId;
            return this;
        }

        /**
         * @param subscriptionId The id of the subscription on which to create an export.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionId(String subscriptionId) {
            return subscriptionId(Output.of(subscriptionId));
        }

        public SubscriptionCostManagementExportState build() {
            return $;
        }
    }

}
