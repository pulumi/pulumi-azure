// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.communication.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceEmailDomainAssociationState extends com.pulumi.resources.ResourceArgs {

    public static final ServiceEmailDomainAssociationState Empty = new ServiceEmailDomainAssociationState();

    /**
     * The ID of the Communication Service. Changing this forces a new communication service email domain association to be created.
     * 
     */
    @Import(name="communicationServiceId")
    private @Nullable Output<String> communicationServiceId;

    /**
     * @return The ID of the Communication Service. Changing this forces a new communication service email domain association to be created.
     * 
     */
    public Optional<Output<String>> communicationServiceId() {
        return Optional.ofNullable(this.communicationServiceId);
    }

    /**
     * The ID of the EMail Service Domain. Changing this forces a new communication service email domain association to be created.
     * 
     */
    @Import(name="emailServiceDomainId")
    private @Nullable Output<String> emailServiceDomainId;

    /**
     * @return The ID of the EMail Service Domain. Changing this forces a new communication service email domain association to be created.
     * 
     */
    public Optional<Output<String>> emailServiceDomainId() {
        return Optional.ofNullable(this.emailServiceDomainId);
    }

    private ServiceEmailDomainAssociationState() {}

    private ServiceEmailDomainAssociationState(ServiceEmailDomainAssociationState $) {
        this.communicationServiceId = $.communicationServiceId;
        this.emailServiceDomainId = $.emailServiceDomainId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceEmailDomainAssociationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceEmailDomainAssociationState $;

        public Builder() {
            $ = new ServiceEmailDomainAssociationState();
        }

        public Builder(ServiceEmailDomainAssociationState defaults) {
            $ = new ServiceEmailDomainAssociationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param communicationServiceId The ID of the Communication Service. Changing this forces a new communication service email domain association to be created.
         * 
         * @return builder
         * 
         */
        public Builder communicationServiceId(@Nullable Output<String> communicationServiceId) {
            $.communicationServiceId = communicationServiceId;
            return this;
        }

        /**
         * @param communicationServiceId The ID of the Communication Service. Changing this forces a new communication service email domain association to be created.
         * 
         * @return builder
         * 
         */
        public Builder communicationServiceId(String communicationServiceId) {
            return communicationServiceId(Output.of(communicationServiceId));
        }

        /**
         * @param emailServiceDomainId The ID of the EMail Service Domain. Changing this forces a new communication service email domain association to be created.
         * 
         * @return builder
         * 
         */
        public Builder emailServiceDomainId(@Nullable Output<String> emailServiceDomainId) {
            $.emailServiceDomainId = emailServiceDomainId;
            return this;
        }

        /**
         * @param emailServiceDomainId The ID of the EMail Service Domain. Changing this forces a new communication service email domain association to be created.
         * 
         * @return builder
         * 
         */
        public Builder emailServiceDomainId(String emailServiceDomainId) {
            return emailServiceDomainId(Output.of(emailServiceDomainId));
        }

        public ServiceEmailDomainAssociationState build() {
            return $;
        }
    }

}
