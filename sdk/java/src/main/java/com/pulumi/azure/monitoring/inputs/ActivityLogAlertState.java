// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.monitoring.inputs;

import com.pulumi.azure.monitoring.inputs.ActivityLogAlertActionArgs;
import com.pulumi.azure.monitoring.inputs.ActivityLogAlertCriteriaArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ActivityLogAlertState extends com.pulumi.resources.ResourceArgs {

    public static final ActivityLogAlertState Empty = new ActivityLogAlertState();

    /**
     * One or more `action` blocks as defined below.
     * 
     */
    @Import(name="actions")
    private @Nullable Output<List<ActivityLogAlertActionArgs>> actions;

    /**
     * @return One or more `action` blocks as defined below.
     * 
     */
    public Optional<Output<List<ActivityLogAlertActionArgs>>> actions() {
        return Optional.ofNullable(this.actions);
    }

    /**
     * A `criteria` block as defined below.
     * 
     */
    @Import(name="criteria")
    private @Nullable Output<ActivityLogAlertCriteriaArgs> criteria;

    /**
     * @return A `criteria` block as defined below.
     * 
     */
    public Optional<Output<ActivityLogAlertCriteriaArgs>> criteria() {
        return Optional.ofNullable(this.criteria);
    }

    /**
     * The description of this activity log alert.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of this activity log alert.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Should this Activity Log Alert be enabled? Defaults to `true`.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Should this Activity Log Alert be enabled? Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The name of the activity log alert. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the activity log alert. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The name of the resource group in which to create the activity log alert instance.
     * 
     */
    @Import(name="resourceGroupName")
    private @Nullable Output<String> resourceGroupName;

    /**
     * @return The name of the resource group in which to create the activity log alert instance.
     * 
     */
    public Optional<Output<String>> resourceGroupName() {
        return Optional.ofNullable(this.resourceGroupName);
    }

    /**
     * The Scope at which the Activity Log should be applied, for example a the Resource ID of a Subscription or a Resource (such as a Storage Account).
     * 
     */
    @Import(name="scopes")
    private @Nullable Output<List<String>> scopes;

    /**
     * @return The Scope at which the Activity Log should be applied, for example a the Resource ID of a Subscription or a Resource (such as a Storage Account).
     * 
     */
    public Optional<Output<List<String>>> scopes() {
        return Optional.ofNullable(this.scopes);
    }

    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private ActivityLogAlertState() {}

    private ActivityLogAlertState(ActivityLogAlertState $) {
        this.actions = $.actions;
        this.criteria = $.criteria;
        this.description = $.description;
        this.enabled = $.enabled;
        this.name = $.name;
        this.resourceGroupName = $.resourceGroupName;
        this.scopes = $.scopes;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ActivityLogAlertState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ActivityLogAlertState $;

        public Builder() {
            $ = new ActivityLogAlertState();
        }

        public Builder(ActivityLogAlertState defaults) {
            $ = new ActivityLogAlertState(Objects.requireNonNull(defaults));
        }

        /**
         * @param actions One or more `action` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder actions(@Nullable Output<List<ActivityLogAlertActionArgs>> actions) {
            $.actions = actions;
            return this;
        }

        /**
         * @param actions One or more `action` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder actions(List<ActivityLogAlertActionArgs> actions) {
            return actions(Output.of(actions));
        }

        /**
         * @param actions One or more `action` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder actions(ActivityLogAlertActionArgs... actions) {
            return actions(List.of(actions));
        }

        /**
         * @param criteria A `criteria` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder criteria(@Nullable Output<ActivityLogAlertCriteriaArgs> criteria) {
            $.criteria = criteria;
            return this;
        }

        /**
         * @param criteria A `criteria` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder criteria(ActivityLogAlertCriteriaArgs criteria) {
            return criteria(Output.of(criteria));
        }

        /**
         * @param description The description of this activity log alert.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of this activity log alert.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param enabled Should this Activity Log Alert be enabled? Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Should this Activity Log Alert be enabled? Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param name The name of the activity log alert. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the activity log alert. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param resourceGroupName The name of the resource group in which to create the activity log alert instance.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(@Nullable Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group in which to create the activity log alert instance.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param scopes The Scope at which the Activity Log should be applied, for example a the Resource ID of a Subscription or a Resource (such as a Storage Account).
         * 
         * @return builder
         * 
         */
        public Builder scopes(@Nullable Output<List<String>> scopes) {
            $.scopes = scopes;
            return this;
        }

        /**
         * @param scopes The Scope at which the Activity Log should be applied, for example a the Resource ID of a Subscription or a Resource (such as a Storage Account).
         * 
         * @return builder
         * 
         */
        public Builder scopes(List<String> scopes) {
            return scopes(Output.of(scopes));
        }

        /**
         * @param scopes The Scope at which the Activity Log should be applied, for example a the Resource ID of a Subscription or a Resource (such as a Storage Account).
         * 
         * @return builder
         * 
         */
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public ActivityLogAlertState build() {
            return $;
        }
    }

}
