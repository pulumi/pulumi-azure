// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.cdn.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FrontdoorRuleActionsResponseHeaderActionArgs extends com.pulumi.resources.ResourceArgs {

    public static final FrontdoorRuleActionsResponseHeaderActionArgs Empty = new FrontdoorRuleActionsResponseHeaderActionArgs();

    /**
     * The action to be taken on the specified `header_name`. Possible values include `Append`, `Overwrite` or `Delete`.
     * 
     */
    @Import(name="headerAction", required=true)
    private Output<String> headerAction;

    /**
     * @return The action to be taken on the specified `header_name`. Possible values include `Append`, `Overwrite` or `Delete`.
     * 
     */
    public Output<String> headerAction() {
        return this.headerAction;
    }

    /**
     * The name of the header to modify.
     * 
     */
    @Import(name="headerName", required=true)
    private Output<String> headerName;

    /**
     * @return The name of the header to modify.
     * 
     */
    public Output<String> headerName() {
        return this.headerName;
    }

    /**
     * The value to append or overwrite.
     * 
     */
    @Import(name="value")
    private @Nullable Output<String> value;

    /**
     * @return The value to append or overwrite.
     * 
     */
    public Optional<Output<String>> value() {
        return Optional.ofNullable(this.value);
    }

    private FrontdoorRuleActionsResponseHeaderActionArgs() {}

    private FrontdoorRuleActionsResponseHeaderActionArgs(FrontdoorRuleActionsResponseHeaderActionArgs $) {
        this.headerAction = $.headerAction;
        this.headerName = $.headerName;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FrontdoorRuleActionsResponseHeaderActionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FrontdoorRuleActionsResponseHeaderActionArgs $;

        public Builder() {
            $ = new FrontdoorRuleActionsResponseHeaderActionArgs();
        }

        public Builder(FrontdoorRuleActionsResponseHeaderActionArgs defaults) {
            $ = new FrontdoorRuleActionsResponseHeaderActionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param headerAction The action to be taken on the specified `header_name`. Possible values include `Append`, `Overwrite` or `Delete`.
         * 
         * @return builder
         * 
         */
        public Builder headerAction(Output<String> headerAction) {
            $.headerAction = headerAction;
            return this;
        }

        /**
         * @param headerAction The action to be taken on the specified `header_name`. Possible values include `Append`, `Overwrite` or `Delete`.
         * 
         * @return builder
         * 
         */
        public Builder headerAction(String headerAction) {
            return headerAction(Output.of(headerAction));
        }

        /**
         * @param headerName The name of the header to modify.
         * 
         * @return builder
         * 
         */
        public Builder headerName(Output<String> headerName) {
            $.headerName = headerName;
            return this;
        }

        /**
         * @param headerName The name of the header to modify.
         * 
         * @return builder
         * 
         */
        public Builder headerName(String headerName) {
            return headerName(Output.of(headerName));
        }

        /**
         * @param value The value to append or overwrite.
         * 
         * @return builder
         * 
         */
        public Builder value(@Nullable Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value The value to append or overwrite.
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        public FrontdoorRuleActionsResponseHeaderActionArgs build() {
            $.headerAction = Objects.requireNonNull($.headerAction, "expected parameter 'headerAction' to be non-null");
            $.headerName = Objects.requireNonNull($.headerName, "expected parameter 'headerName' to be non-null");
            return $;
        }
    }

}
