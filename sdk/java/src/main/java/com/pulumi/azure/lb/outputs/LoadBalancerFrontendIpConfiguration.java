// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.lb.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class LoadBalancerFrontendIpConfiguration {
    /**
     * @return The Frontend IP Configuration ID of a Gateway SKU Load Balancer.
     * 
     */
    private final @Nullable String gatewayLoadBalancerFrontendIpConfigurationId;
    /**
     * @return The id of the Frontend IP Configuration.
     * 
     */
    private final @Nullable String id;
    /**
     * @return The list of IDs of inbound rules that use this frontend IP.
     * 
     */
    private final @Nullable List<String> inboundNatRules;
    /**
     * @return The list of IDs of load balancing rules that use this frontend IP.
     * 
     */
    private final @Nullable List<String> loadBalancerRules;
    /**
     * @return Specifies the name of the frontend IP configuration.
     * 
     */
    private final String name;
    /**
     * @return The list of IDs outbound rules that use this frontend IP.
     * 
     */
    private final @Nullable List<String> outboundRules;
    /**
     * @return Private IP Address to assign to the Load Balancer. The last one and first four IPs in any range are reserved and cannot be manually assigned.
     * 
     */
    private final @Nullable String privateIpAddress;
    /**
     * @return The allocation method for the Private IP Address used by this Load Balancer. Possible values as `Dynamic` and `Static`.
     * 
     */
    private final @Nullable String privateIpAddressAllocation;
    /**
     * @return The version of IP that the Private IP Address is. Possible values are `IPv4` or `IPv6`.
     * 
     */
    private final @Nullable String privateIpAddressVersion;
    /**
     * @return The ID of a Public IP Address which should be associated with the Load Balancer.
     * 
     */
    private final @Nullable String publicIpAddressId;
    /**
     * @return The ID of a Public IP Prefix which should be associated with the Load Balancer. Public IP Prefix can only be used with outbound rules.
     * 
     */
    private final @Nullable String publicIpPrefixId;
    /**
     * @return The ID of the Subnet which should be associated with the IP Configuration.
     * 
     */
    private final @Nullable String subnetId;
    /**
     * @return Specifies a list of Availability Zones in which the IP Address for this Load Balancer should be located. Changing this forces a new Load Balancer to be created.
     * 
     */
    private final @Nullable List<String> zones;

    @CustomType.Constructor
    private LoadBalancerFrontendIpConfiguration(
        @CustomType.Parameter("gatewayLoadBalancerFrontendIpConfigurationId") @Nullable String gatewayLoadBalancerFrontendIpConfigurationId,
        @CustomType.Parameter("id") @Nullable String id,
        @CustomType.Parameter("inboundNatRules") @Nullable List<String> inboundNatRules,
        @CustomType.Parameter("loadBalancerRules") @Nullable List<String> loadBalancerRules,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("outboundRules") @Nullable List<String> outboundRules,
        @CustomType.Parameter("privateIpAddress") @Nullable String privateIpAddress,
        @CustomType.Parameter("privateIpAddressAllocation") @Nullable String privateIpAddressAllocation,
        @CustomType.Parameter("privateIpAddressVersion") @Nullable String privateIpAddressVersion,
        @CustomType.Parameter("publicIpAddressId") @Nullable String publicIpAddressId,
        @CustomType.Parameter("publicIpPrefixId") @Nullable String publicIpPrefixId,
        @CustomType.Parameter("subnetId") @Nullable String subnetId,
        @CustomType.Parameter("zones") @Nullable List<String> zones) {
        this.gatewayLoadBalancerFrontendIpConfigurationId = gatewayLoadBalancerFrontendIpConfigurationId;
        this.id = id;
        this.inboundNatRules = inboundNatRules;
        this.loadBalancerRules = loadBalancerRules;
        this.name = name;
        this.outboundRules = outboundRules;
        this.privateIpAddress = privateIpAddress;
        this.privateIpAddressAllocation = privateIpAddressAllocation;
        this.privateIpAddressVersion = privateIpAddressVersion;
        this.publicIpAddressId = publicIpAddressId;
        this.publicIpPrefixId = publicIpPrefixId;
        this.subnetId = subnetId;
        this.zones = zones;
    }

    /**
     * @return The Frontend IP Configuration ID of a Gateway SKU Load Balancer.
     * 
     */
    public Optional<String> gatewayLoadBalancerFrontendIpConfigurationId() {
        return Optional.ofNullable(this.gatewayLoadBalancerFrontendIpConfigurationId);
    }
    /**
     * @return The id of the Frontend IP Configuration.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The list of IDs of inbound rules that use this frontend IP.
     * 
     */
    public List<String> inboundNatRules() {
        return this.inboundNatRules == null ? List.of() : this.inboundNatRules;
    }
    /**
     * @return The list of IDs of load balancing rules that use this frontend IP.
     * 
     */
    public List<String> loadBalancerRules() {
        return this.loadBalancerRules == null ? List.of() : this.loadBalancerRules;
    }
    /**
     * @return Specifies the name of the frontend IP configuration.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The list of IDs outbound rules that use this frontend IP.
     * 
     */
    public List<String> outboundRules() {
        return this.outboundRules == null ? List.of() : this.outboundRules;
    }
    /**
     * @return Private IP Address to assign to the Load Balancer. The last one and first four IPs in any range are reserved and cannot be manually assigned.
     * 
     */
    public Optional<String> privateIpAddress() {
        return Optional.ofNullable(this.privateIpAddress);
    }
    /**
     * @return The allocation method for the Private IP Address used by this Load Balancer. Possible values as `Dynamic` and `Static`.
     * 
     */
    public Optional<String> privateIpAddressAllocation() {
        return Optional.ofNullable(this.privateIpAddressAllocation);
    }
    /**
     * @return The version of IP that the Private IP Address is. Possible values are `IPv4` or `IPv6`.
     * 
     */
    public Optional<String> privateIpAddressVersion() {
        return Optional.ofNullable(this.privateIpAddressVersion);
    }
    /**
     * @return The ID of a Public IP Address which should be associated with the Load Balancer.
     * 
     */
    public Optional<String> publicIpAddressId() {
        return Optional.ofNullable(this.publicIpAddressId);
    }
    /**
     * @return The ID of a Public IP Prefix which should be associated with the Load Balancer. Public IP Prefix can only be used with outbound rules.
     * 
     */
    public Optional<String> publicIpPrefixId() {
        return Optional.ofNullable(this.publicIpPrefixId);
    }
    /**
     * @return The ID of the Subnet which should be associated with the IP Configuration.
     * 
     */
    public Optional<String> subnetId() {
        return Optional.ofNullable(this.subnetId);
    }
    /**
     * @return Specifies a list of Availability Zones in which the IP Address for this Load Balancer should be located. Changing this forces a new Load Balancer to be created.
     * 
     */
    public List<String> zones() {
        return this.zones == null ? List.of() : this.zones;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LoadBalancerFrontendIpConfiguration defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String gatewayLoadBalancerFrontendIpConfigurationId;
        private @Nullable String id;
        private @Nullable List<String> inboundNatRules;
        private @Nullable List<String> loadBalancerRules;
        private String name;
        private @Nullable List<String> outboundRules;
        private @Nullable String privateIpAddress;
        private @Nullable String privateIpAddressAllocation;
        private @Nullable String privateIpAddressVersion;
        private @Nullable String publicIpAddressId;
        private @Nullable String publicIpPrefixId;
        private @Nullable String subnetId;
        private @Nullable List<String> zones;

        public Builder() {
    	      // Empty
        }

        public Builder(LoadBalancerFrontendIpConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.gatewayLoadBalancerFrontendIpConfigurationId = defaults.gatewayLoadBalancerFrontendIpConfigurationId;
    	      this.id = defaults.id;
    	      this.inboundNatRules = defaults.inboundNatRules;
    	      this.loadBalancerRules = defaults.loadBalancerRules;
    	      this.name = defaults.name;
    	      this.outboundRules = defaults.outboundRules;
    	      this.privateIpAddress = defaults.privateIpAddress;
    	      this.privateIpAddressAllocation = defaults.privateIpAddressAllocation;
    	      this.privateIpAddressVersion = defaults.privateIpAddressVersion;
    	      this.publicIpAddressId = defaults.publicIpAddressId;
    	      this.publicIpPrefixId = defaults.publicIpPrefixId;
    	      this.subnetId = defaults.subnetId;
    	      this.zones = defaults.zones;
        }

        public Builder gatewayLoadBalancerFrontendIpConfigurationId(@Nullable String gatewayLoadBalancerFrontendIpConfigurationId) {
            this.gatewayLoadBalancerFrontendIpConfigurationId = gatewayLoadBalancerFrontendIpConfigurationId;
            return this;
        }
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        public Builder inboundNatRules(@Nullable List<String> inboundNatRules) {
            this.inboundNatRules = inboundNatRules;
            return this;
        }
        public Builder inboundNatRules(String... inboundNatRules) {
            return inboundNatRules(List.of(inboundNatRules));
        }
        public Builder loadBalancerRules(@Nullable List<String> loadBalancerRules) {
            this.loadBalancerRules = loadBalancerRules;
            return this;
        }
        public Builder loadBalancerRules(String... loadBalancerRules) {
            return loadBalancerRules(List.of(loadBalancerRules));
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder outboundRules(@Nullable List<String> outboundRules) {
            this.outboundRules = outboundRules;
            return this;
        }
        public Builder outboundRules(String... outboundRules) {
            return outboundRules(List.of(outboundRules));
        }
        public Builder privateIpAddress(@Nullable String privateIpAddress) {
            this.privateIpAddress = privateIpAddress;
            return this;
        }
        public Builder privateIpAddressAllocation(@Nullable String privateIpAddressAllocation) {
            this.privateIpAddressAllocation = privateIpAddressAllocation;
            return this;
        }
        public Builder privateIpAddressVersion(@Nullable String privateIpAddressVersion) {
            this.privateIpAddressVersion = privateIpAddressVersion;
            return this;
        }
        public Builder publicIpAddressId(@Nullable String publicIpAddressId) {
            this.publicIpAddressId = publicIpAddressId;
            return this;
        }
        public Builder publicIpPrefixId(@Nullable String publicIpPrefixId) {
            this.publicIpPrefixId = publicIpPrefixId;
            return this;
        }
        public Builder subnetId(@Nullable String subnetId) {
            this.subnetId = subnetId;
            return this;
        }
        public Builder zones(@Nullable List<String> zones) {
            this.zones = zones;
            return this;
        }
        public Builder zones(String... zones) {
            return zones(List.of(zones));
        }        public LoadBalancerFrontendIpConfiguration build() {
            return new LoadBalancerFrontendIpConfiguration(gatewayLoadBalancerFrontendIpConfigurationId, id, inboundNatRules, loadBalancerRules, name, outboundRules, privateIpAddress, privateIpAddressAllocation, privateIpAddressVersion, publicIpAddressId, publicIpPrefixId, subnetId, zones);
        }
    }
}
