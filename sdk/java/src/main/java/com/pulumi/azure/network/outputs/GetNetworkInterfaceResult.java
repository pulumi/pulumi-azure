// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network.outputs;

import com.pulumi.azure.network.outputs.GetNetworkInterfaceIpConfiguration;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetNetworkInterfaceResult {
    /**
     * @return List of DNS servers applied to the specified Network Interface.
     * 
     */
    private final List<String> appliedDnsServers;
    /**
     * @return The list of DNS servers used by the specified Network Interface.
     * 
     */
    private final List<String> dnsServers;
    /**
     * @return Indicates if accelerated networking is set on the specified Network Interface.
     * 
     */
    private final Boolean enableAcceleratedNetworking;
    /**
     * @return Indicate if IP forwarding is set on the specified Network Interface.
     * 
     */
    private final Boolean enableIpForwarding;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * @return The internal DNS name label of the specified Network Interface.
     * 
     */
    private final String internalDnsNameLabel;
    /**
     * @return One or more `ip_configuration` blocks as defined below.
     * 
     */
    private final List<GetNetworkInterfaceIpConfiguration> ipConfigurations;
    /**
     * @return The location of the specified Network Interface.
     * 
     */
    private final String location;
    /**
     * @return The MAC address used by the specified Network Interface.
     * 
     */
    private final String macAddress;
    /**
     * @return The name of the IP Configuration.
     * 
     */
    private final String name;
    /**
     * @return The ID of the network security group associated to the specified Network Interface.
     * 
     */
    private final String networkSecurityGroupId;
    /**
     * @return The Private IP Address assigned to this Network Interface.
     * 
     */
    private final String privateIpAddress;
    /**
     * @return The list of private IP addresses associates to the specified Network Interface.
     * 
     */
    private final List<String> privateIpAddresses;
    private final String resourceGroupName;
    /**
     * @return List the tags associated to the specified Network Interface.
     * 
     */
    private final Map<String,String> tags;
    /**
     * @return The ID of the virtual machine that the specified Network Interface is attached to.
     * 
     */
    private final String virtualMachineId;

    @CustomType.Constructor
    private GetNetworkInterfaceResult(
        @CustomType.Parameter("appliedDnsServers") List<String> appliedDnsServers,
        @CustomType.Parameter("dnsServers") List<String> dnsServers,
        @CustomType.Parameter("enableAcceleratedNetworking") Boolean enableAcceleratedNetworking,
        @CustomType.Parameter("enableIpForwarding") Boolean enableIpForwarding,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("internalDnsNameLabel") String internalDnsNameLabel,
        @CustomType.Parameter("ipConfigurations") List<GetNetworkInterfaceIpConfiguration> ipConfigurations,
        @CustomType.Parameter("location") String location,
        @CustomType.Parameter("macAddress") String macAddress,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("networkSecurityGroupId") String networkSecurityGroupId,
        @CustomType.Parameter("privateIpAddress") String privateIpAddress,
        @CustomType.Parameter("privateIpAddresses") List<String> privateIpAddresses,
        @CustomType.Parameter("resourceGroupName") String resourceGroupName,
        @CustomType.Parameter("tags") Map<String,String> tags,
        @CustomType.Parameter("virtualMachineId") String virtualMachineId) {
        this.appliedDnsServers = appliedDnsServers;
        this.dnsServers = dnsServers;
        this.enableAcceleratedNetworking = enableAcceleratedNetworking;
        this.enableIpForwarding = enableIpForwarding;
        this.id = id;
        this.internalDnsNameLabel = internalDnsNameLabel;
        this.ipConfigurations = ipConfigurations;
        this.location = location;
        this.macAddress = macAddress;
        this.name = name;
        this.networkSecurityGroupId = networkSecurityGroupId;
        this.privateIpAddress = privateIpAddress;
        this.privateIpAddresses = privateIpAddresses;
        this.resourceGroupName = resourceGroupName;
        this.tags = tags;
        this.virtualMachineId = virtualMachineId;
    }

    /**
     * @return List of DNS servers applied to the specified Network Interface.
     * 
     */
    public List<String> appliedDnsServers() {
        return this.appliedDnsServers;
    }
    /**
     * @return The list of DNS servers used by the specified Network Interface.
     * 
     */
    public List<String> dnsServers() {
        return this.dnsServers;
    }
    /**
     * @return Indicates if accelerated networking is set on the specified Network Interface.
     * 
     */
    public Boolean enableAcceleratedNetworking() {
        return this.enableAcceleratedNetworking;
    }
    /**
     * @return Indicate if IP forwarding is set on the specified Network Interface.
     * 
     */
    public Boolean enableIpForwarding() {
        return this.enableIpForwarding;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The internal DNS name label of the specified Network Interface.
     * 
     */
    public String internalDnsNameLabel() {
        return this.internalDnsNameLabel;
    }
    /**
     * @return One or more `ip_configuration` blocks as defined below.
     * 
     */
    public List<GetNetworkInterfaceIpConfiguration> ipConfigurations() {
        return this.ipConfigurations;
    }
    /**
     * @return The location of the specified Network Interface.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return The MAC address used by the specified Network Interface.
     * 
     */
    public String macAddress() {
        return this.macAddress;
    }
    /**
     * @return The name of the IP Configuration.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The ID of the network security group associated to the specified Network Interface.
     * 
     */
    public String networkSecurityGroupId() {
        return this.networkSecurityGroupId;
    }
    /**
     * @return The Private IP Address assigned to this Network Interface.
     * 
     */
    public String privateIpAddress() {
        return this.privateIpAddress;
    }
    /**
     * @return The list of private IP addresses associates to the specified Network Interface.
     * 
     */
    public List<String> privateIpAddresses() {
        return this.privateIpAddresses;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return List the tags associated to the specified Network Interface.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return The ID of the virtual machine that the specified Network Interface is attached to.
     * 
     */
    public String virtualMachineId() {
        return this.virtualMachineId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNetworkInterfaceResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<String> appliedDnsServers;
        private List<String> dnsServers;
        private Boolean enableAcceleratedNetworking;
        private Boolean enableIpForwarding;
        private String id;
        private String internalDnsNameLabel;
        private List<GetNetworkInterfaceIpConfiguration> ipConfigurations;
        private String location;
        private String macAddress;
        private String name;
        private String networkSecurityGroupId;
        private String privateIpAddress;
        private List<String> privateIpAddresses;
        private String resourceGroupName;
        private Map<String,String> tags;
        private String virtualMachineId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetNetworkInterfaceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appliedDnsServers = defaults.appliedDnsServers;
    	      this.dnsServers = defaults.dnsServers;
    	      this.enableAcceleratedNetworking = defaults.enableAcceleratedNetworking;
    	      this.enableIpForwarding = defaults.enableIpForwarding;
    	      this.id = defaults.id;
    	      this.internalDnsNameLabel = defaults.internalDnsNameLabel;
    	      this.ipConfigurations = defaults.ipConfigurations;
    	      this.location = defaults.location;
    	      this.macAddress = defaults.macAddress;
    	      this.name = defaults.name;
    	      this.networkSecurityGroupId = defaults.networkSecurityGroupId;
    	      this.privateIpAddress = defaults.privateIpAddress;
    	      this.privateIpAddresses = defaults.privateIpAddresses;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.tags = defaults.tags;
    	      this.virtualMachineId = defaults.virtualMachineId;
        }

        public Builder appliedDnsServers(List<String> appliedDnsServers) {
            this.appliedDnsServers = Objects.requireNonNull(appliedDnsServers);
            return this;
        }
        public Builder appliedDnsServers(String... appliedDnsServers) {
            return appliedDnsServers(List.of(appliedDnsServers));
        }
        public Builder dnsServers(List<String> dnsServers) {
            this.dnsServers = Objects.requireNonNull(dnsServers);
            return this;
        }
        public Builder dnsServers(String... dnsServers) {
            return dnsServers(List.of(dnsServers));
        }
        public Builder enableAcceleratedNetworking(Boolean enableAcceleratedNetworking) {
            this.enableAcceleratedNetworking = Objects.requireNonNull(enableAcceleratedNetworking);
            return this;
        }
        public Builder enableIpForwarding(Boolean enableIpForwarding) {
            this.enableIpForwarding = Objects.requireNonNull(enableIpForwarding);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder internalDnsNameLabel(String internalDnsNameLabel) {
            this.internalDnsNameLabel = Objects.requireNonNull(internalDnsNameLabel);
            return this;
        }
        public Builder ipConfigurations(List<GetNetworkInterfaceIpConfiguration> ipConfigurations) {
            this.ipConfigurations = Objects.requireNonNull(ipConfigurations);
            return this;
        }
        public Builder ipConfigurations(GetNetworkInterfaceIpConfiguration... ipConfigurations) {
            return ipConfigurations(List.of(ipConfigurations));
        }
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        public Builder macAddress(String macAddress) {
            this.macAddress = Objects.requireNonNull(macAddress);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder networkSecurityGroupId(String networkSecurityGroupId) {
            this.networkSecurityGroupId = Objects.requireNonNull(networkSecurityGroupId);
            return this;
        }
        public Builder privateIpAddress(String privateIpAddress) {
            this.privateIpAddress = Objects.requireNonNull(privateIpAddress);
            return this;
        }
        public Builder privateIpAddresses(List<String> privateIpAddresses) {
            this.privateIpAddresses = Objects.requireNonNull(privateIpAddresses);
            return this;
        }
        public Builder privateIpAddresses(String... privateIpAddresses) {
            return privateIpAddresses(List.of(privateIpAddresses));
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder tags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder virtualMachineId(String virtualMachineId) {
            this.virtualMachineId = Objects.requireNonNull(virtualMachineId);
            return this;
        }        public GetNetworkInterfaceResult build() {
            return new GetNetworkInterfaceResult(appliedDnsServers, dnsServers, enableAcceleratedNetworking, enableIpForwarding, id, internalDnsNameLabel, ipConfigurations, location, macAddress, name, networkSecurityGroupId, privateIpAddress, privateIpAddresses, resourceGroupName, tags, virtualMachineId);
        }
    }
}
