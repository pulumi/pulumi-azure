// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSharedImageVersionArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSharedImageVersionArgs Empty = new GetSharedImageVersionArgs();

    /**
     * The name of the Shared Image Gallery in which the Shared Image exists.
     * 
     */
    @Import(name="galleryName", required=true)
    private Output<String> galleryName;

    /**
     * @return The name of the Shared Image Gallery in which the Shared Image exists.
     * 
     */
    public Output<String> galleryName() {
        return this.galleryName;
    }

    /**
     * The name of the Shared Image in which this Version exists.
     * 
     */
    @Import(name="imageName", required=true)
    private Output<String> imageName;

    /**
     * @return The name of the Shared Image in which this Version exists.
     * 
     */
    public Output<String> imageName() {
        return this.imageName;
    }

    /**
     * The name of the Image Version.
     * 
     * &gt; **Note:** You may specify `latest` to obtain the latest version or `recent` to obtain the most recently updated version.
     * 
     * &gt; **Note:** In 3.0, `latest` may return an image version with `exclude_from_latest` set to `true`. Starting from 4.0 onwards `latest` will not return image versions with `exlude_from_latest` set to `true`.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the Image Version.
     * 
     * &gt; **Note:** You may specify `latest` to obtain the latest version or `recent` to obtain the most recently updated version.
     * 
     * &gt; **Note:** In 3.0, `latest` may return an image version with `exclude_from_latest` set to `true`. Starting from 4.0 onwards `latest` will not return image versions with `exlude_from_latest` set to `true`.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The name of the Resource Group in which the Shared Image Gallery exists.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the Resource Group in which the Shared Image Gallery exists.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Sort available versions taking SemVer versioning scheme into account. Defaults to `false`.
     * 
     */
    @Import(name="sortVersionsBySemver")
    private @Nullable Output<Boolean> sortVersionsBySemver;

    /**
     * @return Sort available versions taking SemVer versioning scheme into account. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> sortVersionsBySemver() {
        return Optional.ofNullable(this.sortVersionsBySemver);
    }

    private GetSharedImageVersionArgs() {}

    private GetSharedImageVersionArgs(GetSharedImageVersionArgs $) {
        this.galleryName = $.galleryName;
        this.imageName = $.imageName;
        this.name = $.name;
        this.resourceGroupName = $.resourceGroupName;
        this.sortVersionsBySemver = $.sortVersionsBySemver;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSharedImageVersionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSharedImageVersionArgs $;

        public Builder() {
            $ = new GetSharedImageVersionArgs();
        }

        public Builder(GetSharedImageVersionArgs defaults) {
            $ = new GetSharedImageVersionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param galleryName The name of the Shared Image Gallery in which the Shared Image exists.
         * 
         * @return builder
         * 
         */
        public Builder galleryName(Output<String> galleryName) {
            $.galleryName = galleryName;
            return this;
        }

        /**
         * @param galleryName The name of the Shared Image Gallery in which the Shared Image exists.
         * 
         * @return builder
         * 
         */
        public Builder galleryName(String galleryName) {
            return galleryName(Output.of(galleryName));
        }

        /**
         * @param imageName The name of the Shared Image in which this Version exists.
         * 
         * @return builder
         * 
         */
        public Builder imageName(Output<String> imageName) {
            $.imageName = imageName;
            return this;
        }

        /**
         * @param imageName The name of the Shared Image in which this Version exists.
         * 
         * @return builder
         * 
         */
        public Builder imageName(String imageName) {
            return imageName(Output.of(imageName));
        }

        /**
         * @param name The name of the Image Version.
         * 
         * &gt; **Note:** You may specify `latest` to obtain the latest version or `recent` to obtain the most recently updated version.
         * 
         * &gt; **Note:** In 3.0, `latest` may return an image version with `exclude_from_latest` set to `true`. Starting from 4.0 onwards `latest` will not return image versions with `exlude_from_latest` set to `true`.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Image Version.
         * 
         * &gt; **Note:** You may specify `latest` to obtain the latest version or `recent` to obtain the most recently updated version.
         * 
         * &gt; **Note:** In 3.0, `latest` may return an image version with `exclude_from_latest` set to `true`. Starting from 4.0 onwards `latest` will not return image versions with `exlude_from_latest` set to `true`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param resourceGroupName The name of the Resource Group in which the Shared Image Gallery exists.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the Resource Group in which the Shared Image Gallery exists.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param sortVersionsBySemver Sort available versions taking SemVer versioning scheme into account. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder sortVersionsBySemver(@Nullable Output<Boolean> sortVersionsBySemver) {
            $.sortVersionsBySemver = sortVersionsBySemver;
            return this;
        }

        /**
         * @param sortVersionsBySemver Sort available versions taking SemVer versioning scheme into account. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder sortVersionsBySemver(Boolean sortVersionsBySemver) {
            return sortVersionsBySemver(Output.of(sortVersionsBySemver));
        }

        public GetSharedImageVersionArgs build() {
            if ($.galleryName == null) {
                throw new MissingRequiredPropertyException("GetSharedImageVersionArgs", "galleryName");
            }
            if ($.imageName == null) {
                throw new MissingRequiredPropertyException("GetSharedImageVersionArgs", "imageName");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetSharedImageVersionArgs", "name");
            }
            if ($.resourceGroupName == null) {
                throw new MissingRequiredPropertyException("GetSharedImageVersionArgs", "resourceGroupName");
            }
            return $;
        }
    }

}
