// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerapp;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class EnvironmentCustomDomainArgs extends com.pulumi.resources.ResourceArgs {

    public static final EnvironmentCustomDomainArgs Empty = new EnvironmentCustomDomainArgs();

    /**
     * The bundle of Private Key and Certificate for the Custom DNS Suffix as a base64 encoded PFX or PEM.
     * 
     */
    @Import(name="certificateBlobBase64", required=true)
    private Output<String> certificateBlobBase64;

    /**
     * @return The bundle of Private Key and Certificate for the Custom DNS Suffix as a base64 encoded PFX or PEM.
     * 
     */
    public Output<String> certificateBlobBase64() {
        return this.certificateBlobBase64;
    }

    /**
     * The password for the Certificate bundle.
     * 
     */
    @Import(name="certificatePassword", required=true)
    private Output<String> certificatePassword;

    /**
     * @return The password for the Certificate bundle.
     * 
     */
    public Output<String> certificatePassword() {
        return this.certificatePassword;
    }

    /**
     * The ID of the Container Apps Managed Environment. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="containerAppEnvironmentId", required=true)
    private Output<String> containerAppEnvironmentId;

    /**
     * @return The ID of the Container Apps Managed Environment. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> containerAppEnvironmentId() {
        return this.containerAppEnvironmentId;
    }

    /**
     * Custom DNS Suffix for the Container App Environment.
     * 
     */
    @Import(name="dnsSuffix", required=true)
    private Output<String> dnsSuffix;

    /**
     * @return Custom DNS Suffix for the Container App Environment.
     * 
     */
    public Output<String> dnsSuffix() {
        return this.dnsSuffix;
    }

    private EnvironmentCustomDomainArgs() {}

    private EnvironmentCustomDomainArgs(EnvironmentCustomDomainArgs $) {
        this.certificateBlobBase64 = $.certificateBlobBase64;
        this.certificatePassword = $.certificatePassword;
        this.containerAppEnvironmentId = $.containerAppEnvironmentId;
        this.dnsSuffix = $.dnsSuffix;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EnvironmentCustomDomainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EnvironmentCustomDomainArgs $;

        public Builder() {
            $ = new EnvironmentCustomDomainArgs();
        }

        public Builder(EnvironmentCustomDomainArgs defaults) {
            $ = new EnvironmentCustomDomainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateBlobBase64 The bundle of Private Key and Certificate for the Custom DNS Suffix as a base64 encoded PFX or PEM.
         * 
         * @return builder
         * 
         */
        public Builder certificateBlobBase64(Output<String> certificateBlobBase64) {
            $.certificateBlobBase64 = certificateBlobBase64;
            return this;
        }

        /**
         * @param certificateBlobBase64 The bundle of Private Key and Certificate for the Custom DNS Suffix as a base64 encoded PFX or PEM.
         * 
         * @return builder
         * 
         */
        public Builder certificateBlobBase64(String certificateBlobBase64) {
            return certificateBlobBase64(Output.of(certificateBlobBase64));
        }

        /**
         * @param certificatePassword The password for the Certificate bundle.
         * 
         * @return builder
         * 
         */
        public Builder certificatePassword(Output<String> certificatePassword) {
            $.certificatePassword = certificatePassword;
            return this;
        }

        /**
         * @param certificatePassword The password for the Certificate bundle.
         * 
         * @return builder
         * 
         */
        public Builder certificatePassword(String certificatePassword) {
            return certificatePassword(Output.of(certificatePassword));
        }

        /**
         * @param containerAppEnvironmentId The ID of the Container Apps Managed Environment. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder containerAppEnvironmentId(Output<String> containerAppEnvironmentId) {
            $.containerAppEnvironmentId = containerAppEnvironmentId;
            return this;
        }

        /**
         * @param containerAppEnvironmentId The ID of the Container Apps Managed Environment. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder containerAppEnvironmentId(String containerAppEnvironmentId) {
            return containerAppEnvironmentId(Output.of(containerAppEnvironmentId));
        }

        /**
         * @param dnsSuffix Custom DNS Suffix for the Container App Environment.
         * 
         * @return builder
         * 
         */
        public Builder dnsSuffix(Output<String> dnsSuffix) {
            $.dnsSuffix = dnsSuffix;
            return this;
        }

        /**
         * @param dnsSuffix Custom DNS Suffix for the Container App Environment.
         * 
         * @return builder
         * 
         */
        public Builder dnsSuffix(String dnsSuffix) {
            return dnsSuffix(Output.of(dnsSuffix));
        }

        public EnvironmentCustomDomainArgs build() {
            if ($.certificateBlobBase64 == null) {
                throw new MissingRequiredPropertyException("EnvironmentCustomDomainArgs", "certificateBlobBase64");
            }
            if ($.certificatePassword == null) {
                throw new MissingRequiredPropertyException("EnvironmentCustomDomainArgs", "certificatePassword");
            }
            if ($.containerAppEnvironmentId == null) {
                throw new MissingRequiredPropertyException("EnvironmentCustomDomainArgs", "containerAppEnvironmentId");
            }
            if ($.dnsSuffix == null) {
                throw new MissingRequiredPropertyException("EnvironmentCustomDomainArgs", "dnsSuffix");
            }
            return $;
        }
    }

}
