// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.batch.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetPoolStartTaskContainerRegistry {
    /**
     * @return The password for the user account.
     * 
     */
    private String password;
    /**
     * @return The container registry URL. The default is &#34;docker.io&#34;.
     * 
     */
    private String registryServer;
    /**
     * @return The reference to the user assigned identity to use to access an Azure Container Registry instead of username and password.
     * 
     */
    private String userAssignedIdentityId;
    /**
     * @return The user to use for authentication against the CIFS file system.
     * 
     */
    private String userName;

    private GetPoolStartTaskContainerRegistry() {}
    /**
     * @return The password for the user account.
     * 
     */
    public String password() {
        return this.password;
    }
    /**
     * @return The container registry URL. The default is &#34;docker.io&#34;.
     * 
     */
    public String registryServer() {
        return this.registryServer;
    }
    /**
     * @return The reference to the user assigned identity to use to access an Azure Container Registry instead of username and password.
     * 
     */
    public String userAssignedIdentityId() {
        return this.userAssignedIdentityId;
    }
    /**
     * @return The user to use for authentication against the CIFS file system.
     * 
     */
    public String userName() {
        return this.userName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPoolStartTaskContainerRegistry defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String password;
        private String registryServer;
        private String userAssignedIdentityId;
        private String userName;
        public Builder() {}
        public Builder(GetPoolStartTaskContainerRegistry defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.password = defaults.password;
    	      this.registryServer = defaults.registryServer;
    	      this.userAssignedIdentityId = defaults.userAssignedIdentityId;
    	      this.userName = defaults.userName;
        }

        @CustomType.Setter
        public Builder password(String password) {
            if (password == null) {
              throw new MissingRequiredPropertyException("GetPoolStartTaskContainerRegistry", "password");
            }
            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder registryServer(String registryServer) {
            if (registryServer == null) {
              throw new MissingRequiredPropertyException("GetPoolStartTaskContainerRegistry", "registryServer");
            }
            this.registryServer = registryServer;
            return this;
        }
        @CustomType.Setter
        public Builder userAssignedIdentityId(String userAssignedIdentityId) {
            if (userAssignedIdentityId == null) {
              throw new MissingRequiredPropertyException("GetPoolStartTaskContainerRegistry", "userAssignedIdentityId");
            }
            this.userAssignedIdentityId = userAssignedIdentityId;
            return this;
        }
        @CustomType.Setter
        public Builder userName(String userName) {
            if (userName == null) {
              throw new MissingRequiredPropertyException("GetPoolStartTaskContainerRegistry", "userName");
            }
            this.userName = userName;
            return this;
        }
        public GetPoolStartTaskContainerRegistry build() {
            final var _resultValue = new GetPoolStartTaskContainerRegistry();
            _resultValue.password = password;
            _resultValue.registryServer = registryServer;
            _resultValue.userAssignedIdentityId = userAssignedIdentityId;
            _resultValue.userName = userName;
            return _resultValue;
        }
    }
}
