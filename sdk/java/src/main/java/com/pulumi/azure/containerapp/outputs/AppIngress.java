// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerapp.outputs;

import com.pulumi.azure.containerapp.outputs.AppIngressCustomDomain;
import com.pulumi.azure.containerapp.outputs.AppIngressTrafficWeight;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AppIngress {
    /**
     * @return Should this ingress allow insecure connections?
     * 
     */
    private @Nullable Boolean allowInsecureConnections;
    /**
     * @return One or more `custom_domain` block as detailed below.
     * 
     */
    private @Nullable AppIngressCustomDomain customDomain;
    /**
     * @return The exposed port on the container for the Ingress traffic.
     * 
     * &gt; **Note:** `exposed_port` can only be specified when `transport` is set to `tcp`.
     * 
     */
    private @Nullable Integer exposedPort;
    /**
     * @return Are connections to this Ingress from outside the Container App Environment enabled? Defaults to `false`.
     * 
     */
    private @Nullable Boolean externalEnabled;
    /**
     * @return The FQDN of the ingress.
     * 
     */
    private @Nullable String fqdn;
    /**
     * @return The target port on the container for the Ingress traffic.
     * 
     */
    private Integer targetPort;
    /**
     * @return A `traffic_weight` block as detailed below.
     * 
     * &gt; **Note:** `traffic_weight` can only be specified when `revision_mode` is set to `Multiple`.
     * 
     */
    private List<AppIngressTrafficWeight> trafficWeights;
    /**
     * @return The transport method for the Ingress. Possible values are `auto`, `http`, `http2` and `tcp`. Defaults to `auto`.
     * 
     */
    private @Nullable String transport;

    private AppIngress() {}
    /**
     * @return Should this ingress allow insecure connections?
     * 
     */
    public Optional<Boolean> allowInsecureConnections() {
        return Optional.ofNullable(this.allowInsecureConnections);
    }
    /**
     * @return One or more `custom_domain` block as detailed below.
     * 
     */
    public Optional<AppIngressCustomDomain> customDomain() {
        return Optional.ofNullable(this.customDomain);
    }
    /**
     * @return The exposed port on the container for the Ingress traffic.
     * 
     * &gt; **Note:** `exposed_port` can only be specified when `transport` is set to `tcp`.
     * 
     */
    public Optional<Integer> exposedPort() {
        return Optional.ofNullable(this.exposedPort);
    }
    /**
     * @return Are connections to this Ingress from outside the Container App Environment enabled? Defaults to `false`.
     * 
     */
    public Optional<Boolean> externalEnabled() {
        return Optional.ofNullable(this.externalEnabled);
    }
    /**
     * @return The FQDN of the ingress.
     * 
     */
    public Optional<String> fqdn() {
        return Optional.ofNullable(this.fqdn);
    }
    /**
     * @return The target port on the container for the Ingress traffic.
     * 
     */
    public Integer targetPort() {
        return this.targetPort;
    }
    /**
     * @return A `traffic_weight` block as detailed below.
     * 
     * &gt; **Note:** `traffic_weight` can only be specified when `revision_mode` is set to `Multiple`.
     * 
     */
    public List<AppIngressTrafficWeight> trafficWeights() {
        return this.trafficWeights;
    }
    /**
     * @return The transport method for the Ingress. Possible values are `auto`, `http`, `http2` and `tcp`. Defaults to `auto`.
     * 
     */
    public Optional<String> transport() {
        return Optional.ofNullable(this.transport);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AppIngress defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean allowInsecureConnections;
        private @Nullable AppIngressCustomDomain customDomain;
        private @Nullable Integer exposedPort;
        private @Nullable Boolean externalEnabled;
        private @Nullable String fqdn;
        private Integer targetPort;
        private List<AppIngressTrafficWeight> trafficWeights;
        private @Nullable String transport;
        public Builder() {}
        public Builder(AppIngress defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowInsecureConnections = defaults.allowInsecureConnections;
    	      this.customDomain = defaults.customDomain;
    	      this.exposedPort = defaults.exposedPort;
    	      this.externalEnabled = defaults.externalEnabled;
    	      this.fqdn = defaults.fqdn;
    	      this.targetPort = defaults.targetPort;
    	      this.trafficWeights = defaults.trafficWeights;
    	      this.transport = defaults.transport;
        }

        @CustomType.Setter
        public Builder allowInsecureConnections(@Nullable Boolean allowInsecureConnections) {
            this.allowInsecureConnections = allowInsecureConnections;
            return this;
        }
        @CustomType.Setter
        public Builder customDomain(@Nullable AppIngressCustomDomain customDomain) {
            this.customDomain = customDomain;
            return this;
        }
        @CustomType.Setter
        public Builder exposedPort(@Nullable Integer exposedPort) {
            this.exposedPort = exposedPort;
            return this;
        }
        @CustomType.Setter
        public Builder externalEnabled(@Nullable Boolean externalEnabled) {
            this.externalEnabled = externalEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder fqdn(@Nullable String fqdn) {
            this.fqdn = fqdn;
            return this;
        }
        @CustomType.Setter
        public Builder targetPort(Integer targetPort) {
            this.targetPort = Objects.requireNonNull(targetPort);
            return this;
        }
        @CustomType.Setter
        public Builder trafficWeights(List<AppIngressTrafficWeight> trafficWeights) {
            this.trafficWeights = Objects.requireNonNull(trafficWeights);
            return this;
        }
        public Builder trafficWeights(AppIngressTrafficWeight... trafficWeights) {
            return trafficWeights(List.of(trafficWeights));
        }
        @CustomType.Setter
        public Builder transport(@Nullable String transport) {
            this.transport = transport;
            return this;
        }
        public AppIngress build() {
            final var _resultValue = new AppIngress();
            _resultValue.allowInsecureConnections = allowInsecureConnections;
            _resultValue.customDomain = customDomain;
            _resultValue.exposedPort = exposedPort;
            _resultValue.externalEnabled = externalEnabled;
            _resultValue.fqdn = fqdn;
            _resultValue.targetPort = targetPort;
            _resultValue.trafficWeights = trafficWeights;
            _resultValue.transport = transport;
            return _resultValue;
        }
    }
}
