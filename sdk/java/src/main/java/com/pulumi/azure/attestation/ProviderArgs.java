// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.attestation;

import com.pulumi.azure.attestation.inputs.ProviderPolicyArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProviderArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProviderArgs Empty = new ProviderArgs();

    /**
     * The Azure Region where the Attestation Provider should exist. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The Azure Region where the Attestation Provider should exist. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name which should be used for this Attestation Provider. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name which should be used for this Attestation Provider. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Specifies the base64 URI Encoded RFC 7519 JWT that should be used for the Attestation Policy.
     * 
     */
    @Import(name="openEnclavePolicyBase64")
    private @Nullable Output<String> openEnclavePolicyBase64;

    /**
     * @return Specifies the base64 URI Encoded RFC 7519 JWT that should be used for the Attestation Policy.
     * 
     */
    public Optional<Output<String>> openEnclavePolicyBase64() {
        return Optional.ofNullable(this.openEnclavePolicyBase64);
    }

    /**
     * @deprecated
     * This field is no longer used and will be removed in v4.0 of the Azure Provider - use `open_enclave_policy_base64`, `sgx_enclave_policy_base64`, `tpm_policy_base64` and `sev_snp_policy_base64` instead.
     * 
     */
    @Deprecated /* This field is no longer used and will be removed in v4.0 of the Azure Provider - use `open_enclave_policy_base64`, `sgx_enclave_policy_base64`, `tpm_policy_base64` and `sev_snp_policy_base64` instead. */
    @Import(name="policies")
    private @Nullable Output<List<ProviderPolicyArgs>> policies;

    /**
     * @deprecated
     * This field is no longer used and will be removed in v4.0 of the Azure Provider - use `open_enclave_policy_base64`, `sgx_enclave_policy_base64`, `tpm_policy_base64` and `sev_snp_policy_base64` instead.
     * 
     */
    @Deprecated /* This field is no longer used and will be removed in v4.0 of the Azure Provider - use `open_enclave_policy_base64`, `sgx_enclave_policy_base64`, `tpm_policy_base64` and `sev_snp_policy_base64` instead. */
    public Optional<Output<List<ProviderPolicyArgs>>> policies() {
        return Optional.ofNullable(this.policies);
    }

    /**
     * A valid X.509 certificate (Section 4 of [RFC4648](https://tools.ietf.org/html/rfc4648)). Changing this forces a new resource to be created.
     * 
     * &gt; **NOTE:** If the `policy_signing_certificate_data` argument contains more than one valid X.509 certificate only the first certificate will be used.
     * 
     */
    @Import(name="policySigningCertificateData")
    private @Nullable Output<String> policySigningCertificateData;

    /**
     * @return A valid X.509 certificate (Section 4 of [RFC4648](https://tools.ietf.org/html/rfc4648)). Changing this forces a new resource to be created.
     * 
     * &gt; **NOTE:** If the `policy_signing_certificate_data` argument contains more than one valid X.509 certificate only the first certificate will be used.
     * 
     */
    public Optional<Output<String>> policySigningCertificateData() {
        return Optional.ofNullable(this.policySigningCertificateData);
    }

    /**
     * The name of the Resource Group where the attestation provider should exist. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the Resource Group where the attestation provider should exist. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Specifies the base64 URI Encoded RFC 7519 JWT that should be used for the Attestation Policy.
     * 
     * &gt; [More information on the JWT Policies can be found in this article on `learn.microsoft.com`](https://learn.microsoft.com/azure/attestation/author-sign-policy).
     * 
     */
    @Import(name="sevSnpPolicyBase64")
    private @Nullable Output<String> sevSnpPolicyBase64;

    /**
     * @return Specifies the base64 URI Encoded RFC 7519 JWT that should be used for the Attestation Policy.
     * 
     * &gt; [More information on the JWT Policies can be found in this article on `learn.microsoft.com`](https://learn.microsoft.com/azure/attestation/author-sign-policy).
     * 
     */
    public Optional<Output<String>> sevSnpPolicyBase64() {
        return Optional.ofNullable(this.sevSnpPolicyBase64);
    }

    /**
     * Specifies the base64 URI Encoded RFC 7519 JWT that should be used for the Attestation Policy.
     * 
     */
    @Import(name="sgxEnclavePolicyBase64")
    private @Nullable Output<String> sgxEnclavePolicyBase64;

    /**
     * @return Specifies the base64 URI Encoded RFC 7519 JWT that should be used for the Attestation Policy.
     * 
     */
    public Optional<Output<String>> sgxEnclavePolicyBase64() {
        return Optional.ofNullable(this.sgxEnclavePolicyBase64);
    }

    /**
     * A mapping of tags which should be assigned to the Attestation Provider.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags which should be assigned to the Attestation Provider.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Specifies the base64 URI Encoded RFC 7519 JWT that should be used for the Attestation Policy.
     * 
     */
    @Import(name="tpmPolicyBase64")
    private @Nullable Output<String> tpmPolicyBase64;

    /**
     * @return Specifies the base64 URI Encoded RFC 7519 JWT that should be used for the Attestation Policy.
     * 
     */
    public Optional<Output<String>> tpmPolicyBase64() {
        return Optional.ofNullable(this.tpmPolicyBase64);
    }

    private ProviderArgs() {}

    private ProviderArgs(ProviderArgs $) {
        this.location = $.location;
        this.name = $.name;
        this.openEnclavePolicyBase64 = $.openEnclavePolicyBase64;
        this.policies = $.policies;
        this.policySigningCertificateData = $.policySigningCertificateData;
        this.resourceGroupName = $.resourceGroupName;
        this.sevSnpPolicyBase64 = $.sevSnpPolicyBase64;
        this.sgxEnclavePolicyBase64 = $.sgxEnclavePolicyBase64;
        this.tags = $.tags;
        this.tpmPolicyBase64 = $.tpmPolicyBase64;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProviderArgs $;

        public Builder() {
            $ = new ProviderArgs();
        }

        public Builder(ProviderArgs defaults) {
            $ = new ProviderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param location The Azure Region where the Attestation Provider should exist. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The Azure Region where the Attestation Provider should exist. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The name which should be used for this Attestation Provider. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this Attestation Provider. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param openEnclavePolicyBase64 Specifies the base64 URI Encoded RFC 7519 JWT that should be used for the Attestation Policy.
         * 
         * @return builder
         * 
         */
        public Builder openEnclavePolicyBase64(@Nullable Output<String> openEnclavePolicyBase64) {
            $.openEnclavePolicyBase64 = openEnclavePolicyBase64;
            return this;
        }

        /**
         * @param openEnclavePolicyBase64 Specifies the base64 URI Encoded RFC 7519 JWT that should be used for the Attestation Policy.
         * 
         * @return builder
         * 
         */
        public Builder openEnclavePolicyBase64(String openEnclavePolicyBase64) {
            return openEnclavePolicyBase64(Output.of(openEnclavePolicyBase64));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * This field is no longer used and will be removed in v4.0 of the Azure Provider - use `open_enclave_policy_base64`, `sgx_enclave_policy_base64`, `tpm_policy_base64` and `sev_snp_policy_base64` instead.
         * 
         */
        @Deprecated /* This field is no longer used and will be removed in v4.0 of the Azure Provider - use `open_enclave_policy_base64`, `sgx_enclave_policy_base64`, `tpm_policy_base64` and `sev_snp_policy_base64` instead. */
        public Builder policies(@Nullable Output<List<ProviderPolicyArgs>> policies) {
            $.policies = policies;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * This field is no longer used and will be removed in v4.0 of the Azure Provider - use `open_enclave_policy_base64`, `sgx_enclave_policy_base64`, `tpm_policy_base64` and `sev_snp_policy_base64` instead.
         * 
         */
        @Deprecated /* This field is no longer used and will be removed in v4.0 of the Azure Provider - use `open_enclave_policy_base64`, `sgx_enclave_policy_base64`, `tpm_policy_base64` and `sev_snp_policy_base64` instead. */
        public Builder policies(List<ProviderPolicyArgs> policies) {
            return policies(Output.of(policies));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * This field is no longer used and will be removed in v4.0 of the Azure Provider - use `open_enclave_policy_base64`, `sgx_enclave_policy_base64`, `tpm_policy_base64` and `sev_snp_policy_base64` instead.
         * 
         */
        @Deprecated /* This field is no longer used and will be removed in v4.0 of the Azure Provider - use `open_enclave_policy_base64`, `sgx_enclave_policy_base64`, `tpm_policy_base64` and `sev_snp_policy_base64` instead. */
        public Builder policies(ProviderPolicyArgs... policies) {
            return policies(List.of(policies));
        }

        /**
         * @param policySigningCertificateData A valid X.509 certificate (Section 4 of [RFC4648](https://tools.ietf.org/html/rfc4648)). Changing this forces a new resource to be created.
         * 
         * &gt; **NOTE:** If the `policy_signing_certificate_data` argument contains more than one valid X.509 certificate only the first certificate will be used.
         * 
         * @return builder
         * 
         */
        public Builder policySigningCertificateData(@Nullable Output<String> policySigningCertificateData) {
            $.policySigningCertificateData = policySigningCertificateData;
            return this;
        }

        /**
         * @param policySigningCertificateData A valid X.509 certificate (Section 4 of [RFC4648](https://tools.ietf.org/html/rfc4648)). Changing this forces a new resource to be created.
         * 
         * &gt; **NOTE:** If the `policy_signing_certificate_data` argument contains more than one valid X.509 certificate only the first certificate will be used.
         * 
         * @return builder
         * 
         */
        public Builder policySigningCertificateData(String policySigningCertificateData) {
            return policySigningCertificateData(Output.of(policySigningCertificateData));
        }

        /**
         * @param resourceGroupName The name of the Resource Group where the attestation provider should exist. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the Resource Group where the attestation provider should exist. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param sevSnpPolicyBase64 Specifies the base64 URI Encoded RFC 7519 JWT that should be used for the Attestation Policy.
         * 
         * &gt; [More information on the JWT Policies can be found in this article on `learn.microsoft.com`](https://learn.microsoft.com/azure/attestation/author-sign-policy).
         * 
         * @return builder
         * 
         */
        public Builder sevSnpPolicyBase64(@Nullable Output<String> sevSnpPolicyBase64) {
            $.sevSnpPolicyBase64 = sevSnpPolicyBase64;
            return this;
        }

        /**
         * @param sevSnpPolicyBase64 Specifies the base64 URI Encoded RFC 7519 JWT that should be used for the Attestation Policy.
         * 
         * &gt; [More information on the JWT Policies can be found in this article on `learn.microsoft.com`](https://learn.microsoft.com/azure/attestation/author-sign-policy).
         * 
         * @return builder
         * 
         */
        public Builder sevSnpPolicyBase64(String sevSnpPolicyBase64) {
            return sevSnpPolicyBase64(Output.of(sevSnpPolicyBase64));
        }

        /**
         * @param sgxEnclavePolicyBase64 Specifies the base64 URI Encoded RFC 7519 JWT that should be used for the Attestation Policy.
         * 
         * @return builder
         * 
         */
        public Builder sgxEnclavePolicyBase64(@Nullable Output<String> sgxEnclavePolicyBase64) {
            $.sgxEnclavePolicyBase64 = sgxEnclavePolicyBase64;
            return this;
        }

        /**
         * @param sgxEnclavePolicyBase64 Specifies the base64 URI Encoded RFC 7519 JWT that should be used for the Attestation Policy.
         * 
         * @return builder
         * 
         */
        public Builder sgxEnclavePolicyBase64(String sgxEnclavePolicyBase64) {
            return sgxEnclavePolicyBase64(Output.of(sgxEnclavePolicyBase64));
        }

        /**
         * @param tags A mapping of tags which should be assigned to the Attestation Provider.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags which should be assigned to the Attestation Provider.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tpmPolicyBase64 Specifies the base64 URI Encoded RFC 7519 JWT that should be used for the Attestation Policy.
         * 
         * @return builder
         * 
         */
        public Builder tpmPolicyBase64(@Nullable Output<String> tpmPolicyBase64) {
            $.tpmPolicyBase64 = tpmPolicyBase64;
            return this;
        }

        /**
         * @param tpmPolicyBase64 Specifies the base64 URI Encoded RFC 7519 JWT that should be used for the Attestation Policy.
         * 
         * @return builder
         * 
         */
        public Builder tpmPolicyBase64(String tpmPolicyBase64) {
            return tpmPolicyBase64(Output.of(tpmPolicyBase64));
        }

        public ProviderArgs build() {
            if ($.resourceGroupName == null) {
                throw new MissingRequiredPropertyException("ProviderArgs", "resourceGroupName");
            }
            return $;
        }
    }

}
