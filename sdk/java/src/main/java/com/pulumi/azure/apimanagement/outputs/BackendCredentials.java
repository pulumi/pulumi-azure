// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.apimanagement.outputs;

import com.pulumi.azure.apimanagement.outputs.BackendCredentialsAuthorization;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BackendCredentials {
    /**
     * @return An `authorization` block as defined below.
     * 
     */
    private final @Nullable BackendCredentialsAuthorization authorization;
    /**
     * @return A list of client certificate thumbprints to present to the backend host. The certificates must exist within the API Management Service.
     * 
     */
    private final @Nullable List<String> certificates;
    /**
     * @return A mapping of header parameters to pass to the backend host. The keys are the header names and the values are a comma separated string of header values. This is converted to a list before being passed to the API.
     * 
     */
    private final @Nullable Map<String,String> header;
    /**
     * @return A mapping of query parameters to pass to the backend host. The keys are the query names and the values are a comma separated string of query values. This is converted to a list before being passed to the API.
     * 
     */
    private final @Nullable Map<String,String> query;

    @CustomType.Constructor
    private BackendCredentials(
        @CustomType.Parameter("authorization") @Nullable BackendCredentialsAuthorization authorization,
        @CustomType.Parameter("certificates") @Nullable List<String> certificates,
        @CustomType.Parameter("header") @Nullable Map<String,String> header,
        @CustomType.Parameter("query") @Nullable Map<String,String> query) {
        this.authorization = authorization;
        this.certificates = certificates;
        this.header = header;
        this.query = query;
    }

    /**
     * @return An `authorization` block as defined below.
     * 
     */
    public Optional<BackendCredentialsAuthorization> authorization() {
        return Optional.ofNullable(this.authorization);
    }
    /**
     * @return A list of client certificate thumbprints to present to the backend host. The certificates must exist within the API Management Service.
     * 
     */
    public List<String> certificates() {
        return this.certificates == null ? List.of() : this.certificates;
    }
    /**
     * @return A mapping of header parameters to pass to the backend host. The keys are the header names and the values are a comma separated string of header values. This is converted to a list before being passed to the API.
     * 
     */
    public Map<String,String> header() {
        return this.header == null ? Map.of() : this.header;
    }
    /**
     * @return A mapping of query parameters to pass to the backend host. The keys are the query names and the values are a comma separated string of query values. This is converted to a list before being passed to the API.
     * 
     */
    public Map<String,String> query() {
        return this.query == null ? Map.of() : this.query;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BackendCredentials defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable BackendCredentialsAuthorization authorization;
        private @Nullable List<String> certificates;
        private @Nullable Map<String,String> header;
        private @Nullable Map<String,String> query;

        public Builder() {
    	      // Empty
        }

        public Builder(BackendCredentials defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authorization = defaults.authorization;
    	      this.certificates = defaults.certificates;
    	      this.header = defaults.header;
    	      this.query = defaults.query;
        }

        public Builder authorization(@Nullable BackendCredentialsAuthorization authorization) {
            this.authorization = authorization;
            return this;
        }
        public Builder certificates(@Nullable List<String> certificates) {
            this.certificates = certificates;
            return this;
        }
        public Builder certificates(String... certificates) {
            return certificates(List.of(certificates));
        }
        public Builder header(@Nullable Map<String,String> header) {
            this.header = header;
            return this;
        }
        public Builder query(@Nullable Map<String,String> query) {
            this.query = query;
            return this;
        }        public BackendCredentials build() {
            return new BackendCredentials(authorization, certificates, header, query);
        }
    }
}
