// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ApplicationGatewayRewriteRuleSetRewriteRuleCondition {
    /**
     * @return Perform a case in-sensitive comparison. Defaults to `false`
     * 
     */
    private @Nullable Boolean ignoreCase;
    /**
     * @return Negate the result of the condition evaluation. Defaults to `false`
     * 
     */
    private @Nullable Boolean negate;
    /**
     * @return The pattern, either fixed string or regular expression, that evaluates the truthfulness of the condition.
     * 
     */
    private String pattern;
    /**
     * @return The [variable](https://docs.microsoft.com/azure/application-gateway/rewrite-http-headers#server-variables) of the condition.
     * 
     */
    private String variable;

    private ApplicationGatewayRewriteRuleSetRewriteRuleCondition() {}
    /**
     * @return Perform a case in-sensitive comparison. Defaults to `false`
     * 
     */
    public Optional<Boolean> ignoreCase() {
        return Optional.ofNullable(this.ignoreCase);
    }
    /**
     * @return Negate the result of the condition evaluation. Defaults to `false`
     * 
     */
    public Optional<Boolean> negate() {
        return Optional.ofNullable(this.negate);
    }
    /**
     * @return The pattern, either fixed string or regular expression, that evaluates the truthfulness of the condition.
     * 
     */
    public String pattern() {
        return this.pattern;
    }
    /**
     * @return The [variable](https://docs.microsoft.com/azure/application-gateway/rewrite-http-headers#server-variables) of the condition.
     * 
     */
    public String variable() {
        return this.variable;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplicationGatewayRewriteRuleSetRewriteRuleCondition defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean ignoreCase;
        private @Nullable Boolean negate;
        private String pattern;
        private String variable;
        public Builder() {}
        public Builder(ApplicationGatewayRewriteRuleSetRewriteRuleCondition defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ignoreCase = defaults.ignoreCase;
    	      this.negate = defaults.negate;
    	      this.pattern = defaults.pattern;
    	      this.variable = defaults.variable;
        }

        @CustomType.Setter
        public Builder ignoreCase(@Nullable Boolean ignoreCase) {

            this.ignoreCase = ignoreCase;
            return this;
        }
        @CustomType.Setter
        public Builder negate(@Nullable Boolean negate) {

            this.negate = negate;
            return this;
        }
        @CustomType.Setter
        public Builder pattern(String pattern) {
            if (pattern == null) {
              throw new MissingRequiredPropertyException("ApplicationGatewayRewriteRuleSetRewriteRuleCondition", "pattern");
            }
            this.pattern = pattern;
            return this;
        }
        @CustomType.Setter
        public Builder variable(String variable) {
            if (variable == null) {
              throw new MissingRequiredPropertyException("ApplicationGatewayRewriteRuleSetRewriteRuleCondition", "variable");
            }
            this.variable = variable;
            return this;
        }
        public ApplicationGatewayRewriteRuleSetRewriteRuleCondition build() {
            final var _resultValue = new ApplicationGatewayRewriteRuleSetRewriteRuleCondition();
            _resultValue.ignoreCase = ignoreCase;
            _resultValue.negate = negate;
            _resultValue.pattern = pattern;
            _resultValue.variable = variable;
            return _resultValue;
        }
    }
}
