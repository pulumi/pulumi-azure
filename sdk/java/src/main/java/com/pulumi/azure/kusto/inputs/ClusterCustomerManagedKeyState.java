// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.kusto.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterCustomerManagedKeyState extends com.pulumi.resources.ResourceArgs {

    public static final ClusterCustomerManagedKeyState Empty = new ClusterCustomerManagedKeyState();

    /**
     * The ID of the Kusto Cluster. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="clusterId")
    private @Nullable Output<String> clusterId;

    /**
     * @return The ID of the Kusto Cluster. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> clusterId() {
        return Optional.ofNullable(this.clusterId);
    }

    /**
     * The name of Key Vault Key.
     * 
     */
    @Import(name="keyName")
    private @Nullable Output<String> keyName;

    /**
     * @return The name of Key Vault Key.
     * 
     */
    public Optional<Output<String>> keyName() {
        return Optional.ofNullable(this.keyName);
    }

    /**
     * The ID of the Key Vault. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="keyVaultId")
    private @Nullable Output<String> keyVaultId;

    /**
     * @return The ID of the Key Vault. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> keyVaultId() {
        return Optional.ofNullable(this.keyVaultId);
    }

    /**
     * The version of Key Vault Key.
     * 
     */
    @Import(name="keyVersion")
    private @Nullable Output<String> keyVersion;

    /**
     * @return The version of Key Vault Key.
     * 
     */
    public Optional<Output<String>> keyVersion() {
        return Optional.ofNullable(this.keyVersion);
    }

    /**
     * The user assigned identity that has access to the Key Vault Key. If not specified, system assigned identity will be used.
     * 
     */
    @Import(name="userIdentity")
    private @Nullable Output<String> userIdentity;

    /**
     * @return The user assigned identity that has access to the Key Vault Key. If not specified, system assigned identity will be used.
     * 
     */
    public Optional<Output<String>> userIdentity() {
        return Optional.ofNullable(this.userIdentity);
    }

    private ClusterCustomerManagedKeyState() {}

    private ClusterCustomerManagedKeyState(ClusterCustomerManagedKeyState $) {
        this.clusterId = $.clusterId;
        this.keyName = $.keyName;
        this.keyVaultId = $.keyVaultId;
        this.keyVersion = $.keyVersion;
        this.userIdentity = $.userIdentity;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterCustomerManagedKeyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterCustomerManagedKeyState $;

        public Builder() {
            $ = new ClusterCustomerManagedKeyState();
        }

        public Builder(ClusterCustomerManagedKeyState defaults) {
            $ = new ClusterCustomerManagedKeyState(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterId The ID of the Kusto Cluster. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(@Nullable Output<String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterId The ID of the Kusto Cluster. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        /**
         * @param keyName The name of Key Vault Key.
         * 
         * @return builder
         * 
         */
        public Builder keyName(@Nullable Output<String> keyName) {
            $.keyName = keyName;
            return this;
        }

        /**
         * @param keyName The name of Key Vault Key.
         * 
         * @return builder
         * 
         */
        public Builder keyName(String keyName) {
            return keyName(Output.of(keyName));
        }

        /**
         * @param keyVaultId The ID of the Key Vault. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultId(@Nullable Output<String> keyVaultId) {
            $.keyVaultId = keyVaultId;
            return this;
        }

        /**
         * @param keyVaultId The ID of the Key Vault. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultId(String keyVaultId) {
            return keyVaultId(Output.of(keyVaultId));
        }

        /**
         * @param keyVersion The version of Key Vault Key.
         * 
         * @return builder
         * 
         */
        public Builder keyVersion(@Nullable Output<String> keyVersion) {
            $.keyVersion = keyVersion;
            return this;
        }

        /**
         * @param keyVersion The version of Key Vault Key.
         * 
         * @return builder
         * 
         */
        public Builder keyVersion(String keyVersion) {
            return keyVersion(Output.of(keyVersion));
        }

        /**
         * @param userIdentity The user assigned identity that has access to the Key Vault Key. If not specified, system assigned identity will be used.
         * 
         * @return builder
         * 
         */
        public Builder userIdentity(@Nullable Output<String> userIdentity) {
            $.userIdentity = userIdentity;
            return this;
        }

        /**
         * @param userIdentity The user assigned identity that has access to the Key Vault Key. If not specified, system assigned identity will be used.
         * 
         * @return builder
         * 
         */
        public Builder userIdentity(String userIdentity) {
            return userIdentity(Output.of(userIdentity));
        }

        public ClusterCustomerManagedKeyState build() {
            return $;
        }
    }

}
