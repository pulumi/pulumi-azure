// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.batch.outputs;

import com.pulumi.azure.batch.outputs.GetPoolNetworkConfigurationEndpointConfiguration;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetPoolNetworkConfiguration {
    private Boolean acceleratedNetworkingEnabled;
    /**
     * @return The scope of dynamic vnet assignment.
     * 
     */
    private String dynamicVnetAssignmentScope;
    /**
     * @return The inbound NAT pools that are used to address specific ports on the individual compute node externally.
     * 
     */
    private List<GetPoolNetworkConfigurationEndpointConfiguration> endpointConfigurations;
    /**
     * @return Type of public IP address provisioning.
     * 
     */
    private String publicAddressProvisioningType;
    /**
     * @return A list of public IP ids that will be allocated to nodes.
     * 
     */
    private List<String> publicIps;
    /**
     * @return The ARM resource identifier of the virtual network subnet which the compute nodes of the pool are joined too.
     * 
     */
    private String subnetId;

    private GetPoolNetworkConfiguration() {}
    public Boolean acceleratedNetworkingEnabled() {
        return this.acceleratedNetworkingEnabled;
    }
    /**
     * @return The scope of dynamic vnet assignment.
     * 
     */
    public String dynamicVnetAssignmentScope() {
        return this.dynamicVnetAssignmentScope;
    }
    /**
     * @return The inbound NAT pools that are used to address specific ports on the individual compute node externally.
     * 
     */
    public List<GetPoolNetworkConfigurationEndpointConfiguration> endpointConfigurations() {
        return this.endpointConfigurations;
    }
    /**
     * @return Type of public IP address provisioning.
     * 
     */
    public String publicAddressProvisioningType() {
        return this.publicAddressProvisioningType;
    }
    /**
     * @return A list of public IP ids that will be allocated to nodes.
     * 
     */
    public List<String> publicIps() {
        return this.publicIps;
    }
    /**
     * @return The ARM resource identifier of the virtual network subnet which the compute nodes of the pool are joined too.
     * 
     */
    public String subnetId() {
        return this.subnetId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPoolNetworkConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean acceleratedNetworkingEnabled;
        private String dynamicVnetAssignmentScope;
        private List<GetPoolNetworkConfigurationEndpointConfiguration> endpointConfigurations;
        private String publicAddressProvisioningType;
        private List<String> publicIps;
        private String subnetId;
        public Builder() {}
        public Builder(GetPoolNetworkConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acceleratedNetworkingEnabled = defaults.acceleratedNetworkingEnabled;
    	      this.dynamicVnetAssignmentScope = defaults.dynamicVnetAssignmentScope;
    	      this.endpointConfigurations = defaults.endpointConfigurations;
    	      this.publicAddressProvisioningType = defaults.publicAddressProvisioningType;
    	      this.publicIps = defaults.publicIps;
    	      this.subnetId = defaults.subnetId;
        }

        @CustomType.Setter
        public Builder acceleratedNetworkingEnabled(Boolean acceleratedNetworkingEnabled) {
            if (acceleratedNetworkingEnabled == null) {
              throw new MissingRequiredPropertyException("GetPoolNetworkConfiguration", "acceleratedNetworkingEnabled");
            }
            this.acceleratedNetworkingEnabled = acceleratedNetworkingEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder dynamicVnetAssignmentScope(String dynamicVnetAssignmentScope) {
            if (dynamicVnetAssignmentScope == null) {
              throw new MissingRequiredPropertyException("GetPoolNetworkConfiguration", "dynamicVnetAssignmentScope");
            }
            this.dynamicVnetAssignmentScope = dynamicVnetAssignmentScope;
            return this;
        }
        @CustomType.Setter
        public Builder endpointConfigurations(List<GetPoolNetworkConfigurationEndpointConfiguration> endpointConfigurations) {
            if (endpointConfigurations == null) {
              throw new MissingRequiredPropertyException("GetPoolNetworkConfiguration", "endpointConfigurations");
            }
            this.endpointConfigurations = endpointConfigurations;
            return this;
        }
        public Builder endpointConfigurations(GetPoolNetworkConfigurationEndpointConfiguration... endpointConfigurations) {
            return endpointConfigurations(List.of(endpointConfigurations));
        }
        @CustomType.Setter
        public Builder publicAddressProvisioningType(String publicAddressProvisioningType) {
            if (publicAddressProvisioningType == null) {
              throw new MissingRequiredPropertyException("GetPoolNetworkConfiguration", "publicAddressProvisioningType");
            }
            this.publicAddressProvisioningType = publicAddressProvisioningType;
            return this;
        }
        @CustomType.Setter
        public Builder publicIps(List<String> publicIps) {
            if (publicIps == null) {
              throw new MissingRequiredPropertyException("GetPoolNetworkConfiguration", "publicIps");
            }
            this.publicIps = publicIps;
            return this;
        }
        public Builder publicIps(String... publicIps) {
            return publicIps(List.of(publicIps));
        }
        @CustomType.Setter
        public Builder subnetId(String subnetId) {
            if (subnetId == null) {
              throw new MissingRequiredPropertyException("GetPoolNetworkConfiguration", "subnetId");
            }
            this.subnetId = subnetId;
            return this;
        }
        public GetPoolNetworkConfiguration build() {
            final var _resultValue = new GetPoolNetworkConfiguration();
            _resultValue.acceleratedNetworkingEnabled = acceleratedNetworkingEnabled;
            _resultValue.dynamicVnetAssignmentScope = dynamicVnetAssignmentScope;
            _resultValue.endpointConfigurations = endpointConfigurations;
            _resultValue.publicAddressProvisioningType = publicAddressProvisioningType;
            _resultValue.publicIps = publicIps;
            _resultValue.subnetId = subnetId;
            return _resultValue;
        }
    }
}
