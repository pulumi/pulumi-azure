// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ScaleSetPacketCaptureFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final ScaleSetPacketCaptureFilterArgs Empty = new ScaleSetPacketCaptureFilterArgs();

    /**
     * The local IP Address to be filtered on. Specify `127.0.0.1` for a single address entry, `127.0.0.1-127.0.0.255` for a range and `127.0.0.1;127.0.0.5` for multiple entries. Multiple ranges and mixing ranges with multiple entries are currently not supported. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="localIpAddress")
    private @Nullable Output<String> localIpAddress;

    /**
     * @return The local IP Address to be filtered on. Specify `127.0.0.1` for a single address entry, `127.0.0.1-127.0.0.255` for a range and `127.0.0.1;127.0.0.5` for multiple entries. Multiple ranges and mixing ranges with multiple entries are currently not supported. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> localIpAddress() {
        return Optional.ofNullable(this.localIpAddress);
    }

    /**
     * The local port to be filtered on. Specify `80` for single port entry, `80-85` for a range and `80;443;` for multiple entries. Multiple ranges and mixing ranges with multiple entries are currently not supported. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="localPort")
    private @Nullable Output<String> localPort;

    /**
     * @return The local port to be filtered on. Specify `80` for single port entry, `80-85` for a range and `80;443;` for multiple entries. Multiple ranges and mixing ranges with multiple entries are currently not supported. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> localPort() {
        return Optional.ofNullable(this.localPort);
    }

    /**
     * The Protocol to be filtered on. Possible values include `Any`, `TCP` and `UDP`. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="protocol", required=true)
    private Output<String> protocol;

    /**
     * @return The Protocol to be filtered on. Possible values include `Any`, `TCP` and `UDP`. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> protocol() {
        return this.protocol;
    }

    /**
     * The remote IP Address to be filtered on. Specify `127.0.0.1` for a single address entry, `127.0.0.1-127.0.0.255` for a range and `127.0.0.1;127.0.0.5` for multiple entries. Multiple ranges and mixing ranges with multiple entries are currently not supported. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="remoteIpAddress")
    private @Nullable Output<String> remoteIpAddress;

    /**
     * @return The remote IP Address to be filtered on. Specify `127.0.0.1` for a single address entry, `127.0.0.1-127.0.0.255` for a range and `127.0.0.1;127.0.0.5` for multiple entries. Multiple ranges and mixing ranges with multiple entries are currently not supported. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> remoteIpAddress() {
        return Optional.ofNullable(this.remoteIpAddress);
    }

    /**
     * The remote port to be filtered on. Specify `80` for single port entry, `80-85` for a range and `80;443;` for multiple entries. Multiple ranges and mixing ranges with multiple entries are currently not supported. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="remotePort")
    private @Nullable Output<String> remotePort;

    /**
     * @return The remote port to be filtered on. Specify `80` for single port entry, `80-85` for a range and `80;443;` for multiple entries. Multiple ranges and mixing ranges with multiple entries are currently not supported. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> remotePort() {
        return Optional.ofNullable(this.remotePort);
    }

    private ScaleSetPacketCaptureFilterArgs() {}

    private ScaleSetPacketCaptureFilterArgs(ScaleSetPacketCaptureFilterArgs $) {
        this.localIpAddress = $.localIpAddress;
        this.localPort = $.localPort;
        this.protocol = $.protocol;
        this.remoteIpAddress = $.remoteIpAddress;
        this.remotePort = $.remotePort;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScaleSetPacketCaptureFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScaleSetPacketCaptureFilterArgs $;

        public Builder() {
            $ = new ScaleSetPacketCaptureFilterArgs();
        }

        public Builder(ScaleSetPacketCaptureFilterArgs defaults) {
            $ = new ScaleSetPacketCaptureFilterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param localIpAddress The local IP Address to be filtered on. Specify `127.0.0.1` for a single address entry, `127.0.0.1-127.0.0.255` for a range and `127.0.0.1;127.0.0.5` for multiple entries. Multiple ranges and mixing ranges with multiple entries are currently not supported. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder localIpAddress(@Nullable Output<String> localIpAddress) {
            $.localIpAddress = localIpAddress;
            return this;
        }

        /**
         * @param localIpAddress The local IP Address to be filtered on. Specify `127.0.0.1` for a single address entry, `127.0.0.1-127.0.0.255` for a range and `127.0.0.1;127.0.0.5` for multiple entries. Multiple ranges and mixing ranges with multiple entries are currently not supported. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder localIpAddress(String localIpAddress) {
            return localIpAddress(Output.of(localIpAddress));
        }

        /**
         * @param localPort The local port to be filtered on. Specify `80` for single port entry, `80-85` for a range and `80;443;` for multiple entries. Multiple ranges and mixing ranges with multiple entries are currently not supported. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder localPort(@Nullable Output<String> localPort) {
            $.localPort = localPort;
            return this;
        }

        /**
         * @param localPort The local port to be filtered on. Specify `80` for single port entry, `80-85` for a range and `80;443;` for multiple entries. Multiple ranges and mixing ranges with multiple entries are currently not supported. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder localPort(String localPort) {
            return localPort(Output.of(localPort));
        }

        /**
         * @param protocol The Protocol to be filtered on. Possible values include `Any`, `TCP` and `UDP`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder protocol(Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol The Protocol to be filtered on. Possible values include `Any`, `TCP` and `UDP`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param remoteIpAddress The remote IP Address to be filtered on. Specify `127.0.0.1` for a single address entry, `127.0.0.1-127.0.0.255` for a range and `127.0.0.1;127.0.0.5` for multiple entries. Multiple ranges and mixing ranges with multiple entries are currently not supported. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder remoteIpAddress(@Nullable Output<String> remoteIpAddress) {
            $.remoteIpAddress = remoteIpAddress;
            return this;
        }

        /**
         * @param remoteIpAddress The remote IP Address to be filtered on. Specify `127.0.0.1` for a single address entry, `127.0.0.1-127.0.0.255` for a range and `127.0.0.1;127.0.0.5` for multiple entries. Multiple ranges and mixing ranges with multiple entries are currently not supported. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder remoteIpAddress(String remoteIpAddress) {
            return remoteIpAddress(Output.of(remoteIpAddress));
        }

        /**
         * @param remotePort The remote port to be filtered on. Specify `80` for single port entry, `80-85` for a range and `80;443;` for multiple entries. Multiple ranges and mixing ranges with multiple entries are currently not supported. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder remotePort(@Nullable Output<String> remotePort) {
            $.remotePort = remotePort;
            return this;
        }

        /**
         * @param remotePort The remote port to be filtered on. Specify `80` for single port entry, `80-85` for a range and `80;443;` for multiple entries. Multiple ranges and mixing ranges with multiple entries are currently not supported. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder remotePort(String remotePort) {
            return remotePort(Output.of(remotePort));
        }

        public ScaleSetPacketCaptureFilterArgs build() {
            if ($.protocol == null) {
                throw new MissingRequiredPropertyException("ScaleSetPacketCaptureFilterArgs", "protocol");
            }
            return $;
        }
    }

}
