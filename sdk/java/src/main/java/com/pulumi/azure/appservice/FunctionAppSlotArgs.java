// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appservice;

import com.pulumi.azure.appservice.inputs.FunctionAppSlotAuthSettingsArgs;
import com.pulumi.azure.appservice.inputs.FunctionAppSlotConnectionStringArgs;
import com.pulumi.azure.appservice.inputs.FunctionAppSlotIdentityArgs;
import com.pulumi.azure.appservice.inputs.FunctionAppSlotSiteConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FunctionAppSlotArgs extends com.pulumi.resources.ResourceArgs {

    public static final FunctionAppSlotArgs Empty = new FunctionAppSlotArgs();

    /**
     * The ID of the App Service Plan within which to create this Function App Slot. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="appServicePlanId", required=true)
    private Output<String> appServicePlanId;

    /**
     * @return The ID of the App Service Plan within which to create this Function App Slot. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> appServicePlanId() {
        return this.appServicePlanId;
    }

    /**
     * A key-value pair of App Settings.
     * 
     * &gt; **Note:** When integrating a `CI/CD pipeline` and expecting to run from a deployed package in `Azure` you must seed your `app settings` as part of the application code for function app to be successfully deployed. `Important Default key pairs`: (`&#34;WEBSITE_RUN_FROM_PACKAGE&#34; = &#34;&#34;`, `&#34;FUNCTIONS_WORKER_RUNTIME&#34; = &#34;node&#34;` (or python, etc), `&#34;WEBSITE_NODE_DEFAULT_VERSION&#34; = &#34;10.14.1&#34;`, `&#34;APPINSIGHTS_INSTRUMENTATIONKEY&#34; = &#34;&#34;`).
     * 
     * &gt; **NOTE:** The values for `AzureWebJobsStorage` and `FUNCTIONS_EXTENSION_VERSION` will be filled by other input arguments and shouldn&#39;t be configured separately. `AzureWebJobsStorage` is filled based on `storage_account_name` and `storage_account_access_key`. `FUNCTIONS_EXTENSION_VERSION` is filled based on `version`.
     * 
     * &gt; **Note:**  When using an App Service Plan in the `Free` or `Shared` Tiers `use_32_bit_worker_process` must be set to `true`.
     * 
     */
    @Import(name="appSettings")
    private @Nullable Output<Map<String,String>> appSettings;

    /**
     * @return A key-value pair of App Settings.
     * 
     * &gt; **Note:** When integrating a `CI/CD pipeline` and expecting to run from a deployed package in `Azure` you must seed your `app settings` as part of the application code for function app to be successfully deployed. `Important Default key pairs`: (`&#34;WEBSITE_RUN_FROM_PACKAGE&#34; = &#34;&#34;`, `&#34;FUNCTIONS_WORKER_RUNTIME&#34; = &#34;node&#34;` (or python, etc), `&#34;WEBSITE_NODE_DEFAULT_VERSION&#34; = &#34;10.14.1&#34;`, `&#34;APPINSIGHTS_INSTRUMENTATIONKEY&#34; = &#34;&#34;`).
     * 
     * &gt; **NOTE:** The values for `AzureWebJobsStorage` and `FUNCTIONS_EXTENSION_VERSION` will be filled by other input arguments and shouldn&#39;t be configured separately. `AzureWebJobsStorage` is filled based on `storage_account_name` and `storage_account_access_key`. `FUNCTIONS_EXTENSION_VERSION` is filled based on `version`.
     * 
     * &gt; **Note:**  When using an App Service Plan in the `Free` or `Shared` Tiers `use_32_bit_worker_process` must be set to `true`.
     * 
     */
    public Optional<Output<Map<String,String>>> appSettings() {
        return Optional.ofNullable(this.appSettings);
    }

    /**
     * An `auth_settings` block as defined below.
     * 
     */
    @Import(name="authSettings")
    private @Nullable Output<FunctionAppSlotAuthSettingsArgs> authSettings;

    /**
     * @return An `auth_settings` block as defined below.
     * 
     */
    public Optional<Output<FunctionAppSlotAuthSettingsArgs>> authSettings() {
        return Optional.ofNullable(this.authSettings);
    }

    /**
     * A `connection_string` block as defined below.
     * 
     */
    @Import(name="connectionStrings")
    private @Nullable Output<List<FunctionAppSlotConnectionStringArgs>> connectionStrings;

    /**
     * @return A `connection_string` block as defined below.
     * 
     */
    public Optional<Output<List<FunctionAppSlotConnectionStringArgs>>> connectionStrings() {
        return Optional.ofNullable(this.connectionStrings);
    }

    /**
     * The amount of memory in gigabyte-seconds that your application is allowed to consume per day. Setting this value only affects function apps under the consumption plan.
     * 
     */
    @Import(name="dailyMemoryTimeQuota")
    private @Nullable Output<Integer> dailyMemoryTimeQuota;

    /**
     * @return The amount of memory in gigabyte-seconds that your application is allowed to consume per day. Setting this value only affects function apps under the consumption plan.
     * 
     */
    public Optional<Output<Integer>> dailyMemoryTimeQuota() {
        return Optional.ofNullable(this.dailyMemoryTimeQuota);
    }

    /**
     * Should the built-in logging of the Function App be enabled? Defaults to `true`.
     * 
     */
    @Import(name="enableBuiltinLogging")
    private @Nullable Output<Boolean> enableBuiltinLogging;

    /**
     * @return Should the built-in logging of the Function App be enabled? Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> enableBuiltinLogging() {
        return Optional.ofNullable(this.enableBuiltinLogging);
    }

    /**
     * Is the Function App enabled? Defaults to `true`.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Is the Function App enabled? Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The name of the Function App within which to create the Function App Slot. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="functionAppName", required=true)
    private Output<String> functionAppName;

    /**
     * @return The name of the Function App within which to create the Function App Slot. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> functionAppName() {
        return this.functionAppName;
    }

    /**
     * Can the Function App only be accessed via HTTPS? Defaults to `false`.
     * 
     */
    @Import(name="httpsOnly")
    private @Nullable Output<Boolean> httpsOnly;

    /**
     * @return Can the Function App only be accessed via HTTPS? Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> httpsOnly() {
        return Optional.ofNullable(this.httpsOnly);
    }

    /**
     * An `identity` block as defined below.
     * 
     */
    @Import(name="identity")
    private @Nullable Output<FunctionAppSlotIdentityArgs> identity;

    /**
     * @return An `identity` block as defined below.
     * 
     */
    public Optional<Output<FunctionAppSlotIdentityArgs>> identity() {
        return Optional.ofNullable(this.identity);
    }

    /**
     * Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Specifies the name of the Function App. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the name of the Function App. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A string indicating the Operating System type for this function app. The only possible value is `linux`. Changing this forces a new resource to be created.
     * 
     * &gt; **NOTE:** This value will be `linux` for Linux Derivatives or an empty string for Windows (default).
     * 
     */
    @Import(name="osType")
    private @Nullable Output<String> osType;

    /**
     * @return A string indicating the Operating System type for this function app. The only possible value is `linux`. Changing this forces a new resource to be created.
     * 
     * &gt; **NOTE:** This value will be `linux` for Linux Derivatives or an empty string for Windows (default).
     * 
     */
    public Optional<Output<String>> osType() {
        return Optional.ofNullable(this.osType);
    }

    /**
     * The name of the resource group in which to create the Function App Slot. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group in which to create the Function App Slot. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * A `site_config` object as defined below.
     * 
     */
    @Import(name="siteConfig")
    private @Nullable Output<FunctionAppSlotSiteConfigArgs> siteConfig;

    /**
     * @return A `site_config` object as defined below.
     * 
     */
    public Optional<Output<FunctionAppSlotSiteConfigArgs>> siteConfig() {
        return Optional.ofNullable(this.siteConfig);
    }

    /**
     * The access key which will be used to access the backend storage account for the Function App.
     * 
     */
    @Import(name="storageAccountAccessKey", required=true)
    private Output<String> storageAccountAccessKey;

    /**
     * @return The access key which will be used to access the backend storage account for the Function App.
     * 
     */
    public Output<String> storageAccountAccessKey() {
        return this.storageAccountAccessKey;
    }

    /**
     * The backend storage account name which will be used by the Function App (such as the dashboard, logs). Changing this forces a new resource to be created.
     * 
     */
    @Import(name="storageAccountName", required=true)
    private Output<String> storageAccountName;

    /**
     * @return The backend storage account name which will be used by the Function App (such as the dashboard, logs). Changing this forces a new resource to be created.
     * 
     */
    public Output<String> storageAccountName() {
        return this.storageAccountName;
    }

    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The runtime version associated with the Function App. Defaults to `~1`.
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return The runtime version associated with the Function App. Defaults to `~1`.
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private FunctionAppSlotArgs() {}

    private FunctionAppSlotArgs(FunctionAppSlotArgs $) {
        this.appServicePlanId = $.appServicePlanId;
        this.appSettings = $.appSettings;
        this.authSettings = $.authSettings;
        this.connectionStrings = $.connectionStrings;
        this.dailyMemoryTimeQuota = $.dailyMemoryTimeQuota;
        this.enableBuiltinLogging = $.enableBuiltinLogging;
        this.enabled = $.enabled;
        this.functionAppName = $.functionAppName;
        this.httpsOnly = $.httpsOnly;
        this.identity = $.identity;
        this.location = $.location;
        this.name = $.name;
        this.osType = $.osType;
        this.resourceGroupName = $.resourceGroupName;
        this.siteConfig = $.siteConfig;
        this.storageAccountAccessKey = $.storageAccountAccessKey;
        this.storageAccountName = $.storageAccountName;
        this.tags = $.tags;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FunctionAppSlotArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FunctionAppSlotArgs $;

        public Builder() {
            $ = new FunctionAppSlotArgs();
        }

        public Builder(FunctionAppSlotArgs defaults) {
            $ = new FunctionAppSlotArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param appServicePlanId The ID of the App Service Plan within which to create this Function App Slot. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder appServicePlanId(Output<String> appServicePlanId) {
            $.appServicePlanId = appServicePlanId;
            return this;
        }

        /**
         * @param appServicePlanId The ID of the App Service Plan within which to create this Function App Slot. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder appServicePlanId(String appServicePlanId) {
            return appServicePlanId(Output.of(appServicePlanId));
        }

        /**
         * @param appSettings A key-value pair of App Settings.
         * 
         * &gt; **Note:** When integrating a `CI/CD pipeline` and expecting to run from a deployed package in `Azure` you must seed your `app settings` as part of the application code for function app to be successfully deployed. `Important Default key pairs`: (`&#34;WEBSITE_RUN_FROM_PACKAGE&#34; = &#34;&#34;`, `&#34;FUNCTIONS_WORKER_RUNTIME&#34; = &#34;node&#34;` (or python, etc), `&#34;WEBSITE_NODE_DEFAULT_VERSION&#34; = &#34;10.14.1&#34;`, `&#34;APPINSIGHTS_INSTRUMENTATIONKEY&#34; = &#34;&#34;`).
         * 
         * &gt; **NOTE:** The values for `AzureWebJobsStorage` and `FUNCTIONS_EXTENSION_VERSION` will be filled by other input arguments and shouldn&#39;t be configured separately. `AzureWebJobsStorage` is filled based on `storage_account_name` and `storage_account_access_key`. `FUNCTIONS_EXTENSION_VERSION` is filled based on `version`.
         * 
         * &gt; **Note:**  When using an App Service Plan in the `Free` or `Shared` Tiers `use_32_bit_worker_process` must be set to `true`.
         * 
         * @return builder
         * 
         */
        public Builder appSettings(@Nullable Output<Map<String,String>> appSettings) {
            $.appSettings = appSettings;
            return this;
        }

        /**
         * @param appSettings A key-value pair of App Settings.
         * 
         * &gt; **Note:** When integrating a `CI/CD pipeline` and expecting to run from a deployed package in `Azure` you must seed your `app settings` as part of the application code for function app to be successfully deployed. `Important Default key pairs`: (`&#34;WEBSITE_RUN_FROM_PACKAGE&#34; = &#34;&#34;`, `&#34;FUNCTIONS_WORKER_RUNTIME&#34; = &#34;node&#34;` (or python, etc), `&#34;WEBSITE_NODE_DEFAULT_VERSION&#34; = &#34;10.14.1&#34;`, `&#34;APPINSIGHTS_INSTRUMENTATIONKEY&#34; = &#34;&#34;`).
         * 
         * &gt; **NOTE:** The values for `AzureWebJobsStorage` and `FUNCTIONS_EXTENSION_VERSION` will be filled by other input arguments and shouldn&#39;t be configured separately. `AzureWebJobsStorage` is filled based on `storage_account_name` and `storage_account_access_key`. `FUNCTIONS_EXTENSION_VERSION` is filled based on `version`.
         * 
         * &gt; **Note:**  When using an App Service Plan in the `Free` or `Shared` Tiers `use_32_bit_worker_process` must be set to `true`.
         * 
         * @return builder
         * 
         */
        public Builder appSettings(Map<String,String> appSettings) {
            return appSettings(Output.of(appSettings));
        }

        /**
         * @param authSettings An `auth_settings` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder authSettings(@Nullable Output<FunctionAppSlotAuthSettingsArgs> authSettings) {
            $.authSettings = authSettings;
            return this;
        }

        /**
         * @param authSettings An `auth_settings` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder authSettings(FunctionAppSlotAuthSettingsArgs authSettings) {
            return authSettings(Output.of(authSettings));
        }

        /**
         * @param connectionStrings A `connection_string` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder connectionStrings(@Nullable Output<List<FunctionAppSlotConnectionStringArgs>> connectionStrings) {
            $.connectionStrings = connectionStrings;
            return this;
        }

        /**
         * @param connectionStrings A `connection_string` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder connectionStrings(List<FunctionAppSlotConnectionStringArgs> connectionStrings) {
            return connectionStrings(Output.of(connectionStrings));
        }

        /**
         * @param connectionStrings A `connection_string` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder connectionStrings(FunctionAppSlotConnectionStringArgs... connectionStrings) {
            return connectionStrings(List.of(connectionStrings));
        }

        /**
         * @param dailyMemoryTimeQuota The amount of memory in gigabyte-seconds that your application is allowed to consume per day. Setting this value only affects function apps under the consumption plan.
         * 
         * @return builder
         * 
         */
        public Builder dailyMemoryTimeQuota(@Nullable Output<Integer> dailyMemoryTimeQuota) {
            $.dailyMemoryTimeQuota = dailyMemoryTimeQuota;
            return this;
        }

        /**
         * @param dailyMemoryTimeQuota The amount of memory in gigabyte-seconds that your application is allowed to consume per day. Setting this value only affects function apps under the consumption plan.
         * 
         * @return builder
         * 
         */
        public Builder dailyMemoryTimeQuota(Integer dailyMemoryTimeQuota) {
            return dailyMemoryTimeQuota(Output.of(dailyMemoryTimeQuota));
        }

        /**
         * @param enableBuiltinLogging Should the built-in logging of the Function App be enabled? Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enableBuiltinLogging(@Nullable Output<Boolean> enableBuiltinLogging) {
            $.enableBuiltinLogging = enableBuiltinLogging;
            return this;
        }

        /**
         * @param enableBuiltinLogging Should the built-in logging of the Function App be enabled? Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enableBuiltinLogging(Boolean enableBuiltinLogging) {
            return enableBuiltinLogging(Output.of(enableBuiltinLogging));
        }

        /**
         * @param enabled Is the Function App enabled? Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Is the Function App enabled? Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param functionAppName The name of the Function App within which to create the Function App Slot. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder functionAppName(Output<String> functionAppName) {
            $.functionAppName = functionAppName;
            return this;
        }

        /**
         * @param functionAppName The name of the Function App within which to create the Function App Slot. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder functionAppName(String functionAppName) {
            return functionAppName(Output.of(functionAppName));
        }

        /**
         * @param httpsOnly Can the Function App only be accessed via HTTPS? Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder httpsOnly(@Nullable Output<Boolean> httpsOnly) {
            $.httpsOnly = httpsOnly;
            return this;
        }

        /**
         * @param httpsOnly Can the Function App only be accessed via HTTPS? Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder httpsOnly(Boolean httpsOnly) {
            return httpsOnly(Output.of(httpsOnly));
        }

        /**
         * @param identity An `identity` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder identity(@Nullable Output<FunctionAppSlotIdentityArgs> identity) {
            $.identity = identity;
            return this;
        }

        /**
         * @param identity An `identity` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder identity(FunctionAppSlotIdentityArgs identity) {
            return identity(Output.of(identity));
        }

        /**
         * @param location Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name Specifies the name of the Function App. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of the Function App. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param osType A string indicating the Operating System type for this function app. The only possible value is `linux`. Changing this forces a new resource to be created.
         * 
         * &gt; **NOTE:** This value will be `linux` for Linux Derivatives or an empty string for Windows (default).
         * 
         * @return builder
         * 
         */
        public Builder osType(@Nullable Output<String> osType) {
            $.osType = osType;
            return this;
        }

        /**
         * @param osType A string indicating the Operating System type for this function app. The only possible value is `linux`. Changing this forces a new resource to be created.
         * 
         * &gt; **NOTE:** This value will be `linux` for Linux Derivatives or an empty string for Windows (default).
         * 
         * @return builder
         * 
         */
        public Builder osType(String osType) {
            return osType(Output.of(osType));
        }

        /**
         * @param resourceGroupName The name of the resource group in which to create the Function App Slot. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group in which to create the Function App Slot. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param siteConfig A `site_config` object as defined below.
         * 
         * @return builder
         * 
         */
        public Builder siteConfig(@Nullable Output<FunctionAppSlotSiteConfigArgs> siteConfig) {
            $.siteConfig = siteConfig;
            return this;
        }

        /**
         * @param siteConfig A `site_config` object as defined below.
         * 
         * @return builder
         * 
         */
        public Builder siteConfig(FunctionAppSlotSiteConfigArgs siteConfig) {
            return siteConfig(Output.of(siteConfig));
        }

        /**
         * @param storageAccountAccessKey The access key which will be used to access the backend storage account for the Function App.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountAccessKey(Output<String> storageAccountAccessKey) {
            $.storageAccountAccessKey = storageAccountAccessKey;
            return this;
        }

        /**
         * @param storageAccountAccessKey The access key which will be used to access the backend storage account for the Function App.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountAccessKey(String storageAccountAccessKey) {
            return storageAccountAccessKey(Output.of(storageAccountAccessKey));
        }

        /**
         * @param storageAccountName The backend storage account name which will be used by the Function App (such as the dashboard, logs). Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountName(Output<String> storageAccountName) {
            $.storageAccountName = storageAccountName;
            return this;
        }

        /**
         * @param storageAccountName The backend storage account name which will be used by the Function App (such as the dashboard, logs). Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountName(String storageAccountName) {
            return storageAccountName(Output.of(storageAccountName));
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param version The runtime version associated with the Function App. Defaults to `~1`.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version The runtime version associated with the Function App. Defaults to `~1`.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public FunctionAppSlotArgs build() {
            if ($.appServicePlanId == null) {
                throw new MissingRequiredPropertyException("FunctionAppSlotArgs", "appServicePlanId");
            }
            if ($.functionAppName == null) {
                throw new MissingRequiredPropertyException("FunctionAppSlotArgs", "functionAppName");
            }
            if ($.resourceGroupName == null) {
                throw new MissingRequiredPropertyException("FunctionAppSlotArgs", "resourceGroupName");
            }
            if ($.storageAccountAccessKey == null) {
                throw new MissingRequiredPropertyException("FunctionAppSlotArgs", "storageAccountAccessKey");
            }
            if ($.storageAccountName == null) {
                throw new MissingRequiredPropertyException("FunctionAppSlotArgs", "storageAccountName");
            }
            return $;
        }
    }

}
