// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.monitoring.outputs;

import com.pulumi.azure.monitoring.outputs.GetScheduledQueryRulesAlertAction;
import com.pulumi.azure.monitoring.outputs.GetScheduledQueryRulesAlertTrigger;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetScheduledQueryRulesAlertResult {
    /**
     * @return An `action` block as defined below.
     * 
     */
    private final List<GetScheduledQueryRulesAlertAction> actions;
    /**
     * @return The list of Resource IDs referred into query.
     * 
     */
    private final List<String> authorizedResourceIds;
    /**
     * @return The resource URI over which log search query is to be run.
     * 
     */
    private final String dataSourceId;
    /**
     * @return The description of the scheduled query rule.
     * 
     */
    private final String description;
    /**
     * @return Whether this scheduled query rule is enabled.
     * 
     */
    private final Boolean enabled;
    /**
     * @return Frequency at which rule condition should be evaluated.
     * 
     */
    private final Integer frequency;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    private final String location;
    private final String name;
    /**
     * @return Log search query.
     * 
     */
    private final String query;
    private final String queryType;
    private final String resourceGroupName;
    /**
     * @return Severity of the alert.
     * 
     */
    private final Integer severity;
    private final Map<String,String> tags;
    /**
     * @return Time for which alerts should be throttled or suppressed.
     * 
     */
    private final Integer throttling;
    /**
     * @return Time window for which data needs to be fetched for query.
     * 
     */
    private final Integer timeWindow;
    /**
     * @return A `trigger` block as defined below.
     * 
     */
    private final List<GetScheduledQueryRulesAlertTrigger> triggers;

    @CustomType.Constructor
    private GetScheduledQueryRulesAlertResult(
        @CustomType.Parameter("actions") List<GetScheduledQueryRulesAlertAction> actions,
        @CustomType.Parameter("authorizedResourceIds") List<String> authorizedResourceIds,
        @CustomType.Parameter("dataSourceId") String dataSourceId,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("enabled") Boolean enabled,
        @CustomType.Parameter("frequency") Integer frequency,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("location") String location,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("query") String query,
        @CustomType.Parameter("queryType") String queryType,
        @CustomType.Parameter("resourceGroupName") String resourceGroupName,
        @CustomType.Parameter("severity") Integer severity,
        @CustomType.Parameter("tags") Map<String,String> tags,
        @CustomType.Parameter("throttling") Integer throttling,
        @CustomType.Parameter("timeWindow") Integer timeWindow,
        @CustomType.Parameter("triggers") List<GetScheduledQueryRulesAlertTrigger> triggers) {
        this.actions = actions;
        this.authorizedResourceIds = authorizedResourceIds;
        this.dataSourceId = dataSourceId;
        this.description = description;
        this.enabled = enabled;
        this.frequency = frequency;
        this.id = id;
        this.location = location;
        this.name = name;
        this.query = query;
        this.queryType = queryType;
        this.resourceGroupName = resourceGroupName;
        this.severity = severity;
        this.tags = tags;
        this.throttling = throttling;
        this.timeWindow = timeWindow;
        this.triggers = triggers;
    }

    /**
     * @return An `action` block as defined below.
     * 
     */
    public List<GetScheduledQueryRulesAlertAction> actions() {
        return this.actions;
    }
    /**
     * @return The list of Resource IDs referred into query.
     * 
     */
    public List<String> authorizedResourceIds() {
        return this.authorizedResourceIds;
    }
    /**
     * @return The resource URI over which log search query is to be run.
     * 
     */
    public String dataSourceId() {
        return this.dataSourceId;
    }
    /**
     * @return The description of the scheduled query rule.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Whether this scheduled query rule is enabled.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return Frequency at which rule condition should be evaluated.
     * 
     */
    public Integer frequency() {
        return this.frequency;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String location() {
        return this.location;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return Log search query.
     * 
     */
    public String query() {
        return this.query;
    }
    public String queryType() {
        return this.queryType;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return Severity of the alert.
     * 
     */
    public Integer severity() {
        return this.severity;
    }
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return Time for which alerts should be throttled or suppressed.
     * 
     */
    public Integer throttling() {
        return this.throttling;
    }
    /**
     * @return Time window for which data needs to be fetched for query.
     * 
     */
    public Integer timeWindow() {
        return this.timeWindow;
    }
    /**
     * @return A `trigger` block as defined below.
     * 
     */
    public List<GetScheduledQueryRulesAlertTrigger> triggers() {
        return this.triggers;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetScheduledQueryRulesAlertResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<GetScheduledQueryRulesAlertAction> actions;
        private List<String> authorizedResourceIds;
        private String dataSourceId;
        private String description;
        private Boolean enabled;
        private Integer frequency;
        private String id;
        private String location;
        private String name;
        private String query;
        private String queryType;
        private String resourceGroupName;
        private Integer severity;
        private Map<String,String> tags;
        private Integer throttling;
        private Integer timeWindow;
        private List<GetScheduledQueryRulesAlertTrigger> triggers;

        public Builder() {
    	      // Empty
        }

        public Builder(GetScheduledQueryRulesAlertResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.actions = defaults.actions;
    	      this.authorizedResourceIds = defaults.authorizedResourceIds;
    	      this.dataSourceId = defaults.dataSourceId;
    	      this.description = defaults.description;
    	      this.enabled = defaults.enabled;
    	      this.frequency = defaults.frequency;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.query = defaults.query;
    	      this.queryType = defaults.queryType;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.severity = defaults.severity;
    	      this.tags = defaults.tags;
    	      this.throttling = defaults.throttling;
    	      this.timeWindow = defaults.timeWindow;
    	      this.triggers = defaults.triggers;
        }

        public Builder actions(List<GetScheduledQueryRulesAlertAction> actions) {
            this.actions = Objects.requireNonNull(actions);
            return this;
        }
        public Builder actions(GetScheduledQueryRulesAlertAction... actions) {
            return actions(List.of(actions));
        }
        public Builder authorizedResourceIds(List<String> authorizedResourceIds) {
            this.authorizedResourceIds = Objects.requireNonNull(authorizedResourceIds);
            return this;
        }
        public Builder authorizedResourceIds(String... authorizedResourceIds) {
            return authorizedResourceIds(List.of(authorizedResourceIds));
        }
        public Builder dataSourceId(String dataSourceId) {
            this.dataSourceId = Objects.requireNonNull(dataSourceId);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder enabled(Boolean enabled) {
            this.enabled = Objects.requireNonNull(enabled);
            return this;
        }
        public Builder frequency(Integer frequency) {
            this.frequency = Objects.requireNonNull(frequency);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder query(String query) {
            this.query = Objects.requireNonNull(query);
            return this;
        }
        public Builder queryType(String queryType) {
            this.queryType = Objects.requireNonNull(queryType);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder severity(Integer severity) {
            this.severity = Objects.requireNonNull(severity);
            return this;
        }
        public Builder tags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder throttling(Integer throttling) {
            this.throttling = Objects.requireNonNull(throttling);
            return this;
        }
        public Builder timeWindow(Integer timeWindow) {
            this.timeWindow = Objects.requireNonNull(timeWindow);
            return this;
        }
        public Builder triggers(List<GetScheduledQueryRulesAlertTrigger> triggers) {
            this.triggers = Objects.requireNonNull(triggers);
            return this;
        }
        public Builder triggers(GetScheduledQueryRulesAlertTrigger... triggers) {
            return triggers(List.of(triggers));
        }        public GetScheduledQueryRulesAlertResult build() {
            return new GetScheduledQueryRulesAlertResult(actions, authorizedResourceIds, dataSourceId, description, enabled, frequency, id, location, name, query, queryType, resourceGroupName, severity, tags, throttling, timeWindow, triggers);
        }
    }
}
