// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.datafactory.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IntegrationRuntimeSsisVnetIntegrationArgs extends com.pulumi.resources.ResourceArgs {

    public static final IntegrationRuntimeSsisVnetIntegrationArgs Empty = new IntegrationRuntimeSsisVnetIntegrationArgs();

    /**
     * Static public IP addresses for the Azure-SSIS Integration Runtime. The size must be 2.
     * 
     */
    @Import(name="publicIps")
    private @Nullable Output<List<String>> publicIps;

    /**
     * @return Static public IP addresses for the Azure-SSIS Integration Runtime. The size must be 2.
     * 
     */
    public Optional<Output<List<String>>> publicIps() {
        return Optional.ofNullable(this.publicIps);
    }

    /**
     * id of the subnet to which the nodes of the Azure-SSIS Integration Runtime will be added.
     * 
     */
    @Import(name="subnetId")
    private @Nullable Output<String> subnetId;

    /**
     * @return id of the subnet to which the nodes of the Azure-SSIS Integration Runtime will be added.
     * 
     */
    public Optional<Output<String>> subnetId() {
        return Optional.ofNullable(this.subnetId);
    }

    /**
     * Name of the subnet to which the nodes of the Azure-SSIS Integration Runtime will be added.
     * 
     */
    @Import(name="subnetName")
    private @Nullable Output<String> subnetName;

    /**
     * @return Name of the subnet to which the nodes of the Azure-SSIS Integration Runtime will be added.
     * 
     */
    public Optional<Output<String>> subnetName() {
        return Optional.ofNullable(this.subnetName);
    }

    /**
     * ID of the virtual network to which the nodes of the Azure-SSIS Integration Runtime will be added.
     * 
     */
    @Import(name="vnetId")
    private @Nullable Output<String> vnetId;

    /**
     * @return ID of the virtual network to which the nodes of the Azure-SSIS Integration Runtime will be added.
     * 
     */
    public Optional<Output<String>> vnetId() {
        return Optional.ofNullable(this.vnetId);
    }

    private IntegrationRuntimeSsisVnetIntegrationArgs() {}

    private IntegrationRuntimeSsisVnetIntegrationArgs(IntegrationRuntimeSsisVnetIntegrationArgs $) {
        this.publicIps = $.publicIps;
        this.subnetId = $.subnetId;
        this.subnetName = $.subnetName;
        this.vnetId = $.vnetId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IntegrationRuntimeSsisVnetIntegrationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IntegrationRuntimeSsisVnetIntegrationArgs $;

        public Builder() {
            $ = new IntegrationRuntimeSsisVnetIntegrationArgs();
        }

        public Builder(IntegrationRuntimeSsisVnetIntegrationArgs defaults) {
            $ = new IntegrationRuntimeSsisVnetIntegrationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param publicIps Static public IP addresses for the Azure-SSIS Integration Runtime. The size must be 2.
         * 
         * @return builder
         * 
         */
        public Builder publicIps(@Nullable Output<List<String>> publicIps) {
            $.publicIps = publicIps;
            return this;
        }

        /**
         * @param publicIps Static public IP addresses for the Azure-SSIS Integration Runtime. The size must be 2.
         * 
         * @return builder
         * 
         */
        public Builder publicIps(List<String> publicIps) {
            return publicIps(Output.of(publicIps));
        }

        /**
         * @param publicIps Static public IP addresses for the Azure-SSIS Integration Runtime. The size must be 2.
         * 
         * @return builder
         * 
         */
        public Builder publicIps(String... publicIps) {
            return publicIps(List.of(publicIps));
        }

        /**
         * @param subnetId id of the subnet to which the nodes of the Azure-SSIS Integration Runtime will be added.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(@Nullable Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        /**
         * @param subnetId id of the subnet to which the nodes of the Azure-SSIS Integration Runtime will be added.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        /**
         * @param subnetName Name of the subnet to which the nodes of the Azure-SSIS Integration Runtime will be added.
         * 
         * @return builder
         * 
         */
        public Builder subnetName(@Nullable Output<String> subnetName) {
            $.subnetName = subnetName;
            return this;
        }

        /**
         * @param subnetName Name of the subnet to which the nodes of the Azure-SSIS Integration Runtime will be added.
         * 
         * @return builder
         * 
         */
        public Builder subnetName(String subnetName) {
            return subnetName(Output.of(subnetName));
        }

        /**
         * @param vnetId ID of the virtual network to which the nodes of the Azure-SSIS Integration Runtime will be added.
         * 
         * @return builder
         * 
         */
        public Builder vnetId(@Nullable Output<String> vnetId) {
            $.vnetId = vnetId;
            return this;
        }

        /**
         * @param vnetId ID of the virtual network to which the nodes of the Azure-SSIS Integration Runtime will be added.
         * 
         * @return builder
         * 
         */
        public Builder vnetId(String vnetId) {
            return vnetId(Output.of(vnetId));
        }

        public IntegrationRuntimeSsisVnetIntegrationArgs build() {
            return $;
        }
    }

}
