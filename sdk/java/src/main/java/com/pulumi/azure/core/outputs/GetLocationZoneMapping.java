// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.core.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetLocationZoneMapping {
    /**
     * @return The logical zone id for the availability zone
     * 
     */
    private String logicalZone;
    /**
     * @return The fully qualified physical zone id of availability zone to which logical zone id is mapped to
     * 
     */
    private String physicalZone;

    private GetLocationZoneMapping() {}
    /**
     * @return The logical zone id for the availability zone
     * 
     */
    public String logicalZone() {
        return this.logicalZone;
    }
    /**
     * @return The fully qualified physical zone id of availability zone to which logical zone id is mapped to
     * 
     */
    public String physicalZone() {
        return this.physicalZone;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLocationZoneMapping defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String logicalZone;
        private String physicalZone;
        public Builder() {}
        public Builder(GetLocationZoneMapping defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.logicalZone = defaults.logicalZone;
    	      this.physicalZone = defaults.physicalZone;
        }

        @CustomType.Setter
        public Builder logicalZone(String logicalZone) {
            this.logicalZone = Objects.requireNonNull(logicalZone);
            return this;
        }
        @CustomType.Setter
        public Builder physicalZone(String physicalZone) {
            this.physicalZone = Objects.requireNonNull(physicalZone);
            return this;
        }
        public GetLocationZoneMapping build() {
            final var _resultValue = new GetLocationZoneMapping();
            _resultValue.logicalZone = logicalZone;
            _resultValue.physicalZone = physicalZone;
            return _resultValue;
        }
    }
}
