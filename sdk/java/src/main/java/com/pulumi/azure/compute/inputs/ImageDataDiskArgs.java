// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ImageDataDiskArgs extends com.pulumi.resources.ResourceArgs {

    public static final ImageDataDiskArgs Empty = new ImageDataDiskArgs();

    /**
     * Specifies the URI in Azure storage of the blob that you want to use to create the image.
     * 
     */
    @Import(name="blobUri")
    private @Nullable Output<String> blobUri;

    /**
     * @return Specifies the URI in Azure storage of the blob that you want to use to create the image.
     * 
     */
    public Optional<Output<String>> blobUri() {
        return Optional.ofNullable(this.blobUri);
    }

    /**
     * Specifies the caching mode as `ReadWrite`, `ReadOnly`, or `None`. Defaults to `None`.
     * 
     */
    @Import(name="caching")
    private @Nullable Output<String> caching;

    /**
     * @return Specifies the caching mode as `ReadWrite`, `ReadOnly`, or `None`. Defaults to `None`.
     * 
     */
    public Optional<Output<String>> caching() {
        return Optional.ofNullable(this.caching);
    }

    /**
     * The ID of the Disk Encryption Set which should be used to encrypt this disk. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="diskEncryptionSetId")
    private @Nullable Output<String> diskEncryptionSetId;

    /**
     * @return The ID of the Disk Encryption Set which should be used to encrypt this disk. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> diskEncryptionSetId() {
        return Optional.ofNullable(this.diskEncryptionSetId);
    }

    /**
     * Specifies the logical unit number of the data disk.
     * 
     */
    @Import(name="lun")
    private @Nullable Output<Integer> lun;

    /**
     * @return Specifies the logical unit number of the data disk.
     * 
     */
    public Optional<Output<Integer>> lun() {
        return Optional.ofNullable(this.lun);
    }

    /**
     * Specifies the ID of the managed disk resource that you want to use to create the image. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="managedDiskId")
    private @Nullable Output<String> managedDiskId;

    /**
     * @return Specifies the ID of the managed disk resource that you want to use to create the image. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> managedDiskId() {
        return Optional.ofNullable(this.managedDiskId);
    }

    /**
     * Specifies the size of the image to be created. The target size can&#39;t be smaller than the source size.
     * 
     */
    @Import(name="sizeGb")
    private @Nullable Output<Integer> sizeGb;

    /**
     * @return Specifies the size of the image to be created. The target size can&#39;t be smaller than the source size.
     * 
     */
    public Optional<Output<Integer>> sizeGb() {
        return Optional.ofNullable(this.sizeGb);
    }

    /**
     * The type of Storage Disk to use. Possible values are `Premium_LRS`, `PremiumV2_LRS`, `Premium_ZRS`, `Standard_LRS`, `StandardSSD_LRS`, `StandardSSD_ZRS` and `UltraSSD_LRS`. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="storageType", required=true)
    private Output<String> storageType;

    /**
     * @return The type of Storage Disk to use. Possible values are `Premium_LRS`, `PremiumV2_LRS`, `Premium_ZRS`, `Standard_LRS`, `StandardSSD_LRS`, `StandardSSD_ZRS` and `UltraSSD_LRS`. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> storageType() {
        return this.storageType;
    }

    private ImageDataDiskArgs() {}

    private ImageDataDiskArgs(ImageDataDiskArgs $) {
        this.blobUri = $.blobUri;
        this.caching = $.caching;
        this.diskEncryptionSetId = $.diskEncryptionSetId;
        this.lun = $.lun;
        this.managedDiskId = $.managedDiskId;
        this.sizeGb = $.sizeGb;
        this.storageType = $.storageType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ImageDataDiskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ImageDataDiskArgs $;

        public Builder() {
            $ = new ImageDataDiskArgs();
        }

        public Builder(ImageDataDiskArgs defaults) {
            $ = new ImageDataDiskArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param blobUri Specifies the URI in Azure storage of the blob that you want to use to create the image.
         * 
         * @return builder
         * 
         */
        public Builder blobUri(@Nullable Output<String> blobUri) {
            $.blobUri = blobUri;
            return this;
        }

        /**
         * @param blobUri Specifies the URI in Azure storage of the blob that you want to use to create the image.
         * 
         * @return builder
         * 
         */
        public Builder blobUri(String blobUri) {
            return blobUri(Output.of(blobUri));
        }

        /**
         * @param caching Specifies the caching mode as `ReadWrite`, `ReadOnly`, or `None`. Defaults to `None`.
         * 
         * @return builder
         * 
         */
        public Builder caching(@Nullable Output<String> caching) {
            $.caching = caching;
            return this;
        }

        /**
         * @param caching Specifies the caching mode as `ReadWrite`, `ReadOnly`, or `None`. Defaults to `None`.
         * 
         * @return builder
         * 
         */
        public Builder caching(String caching) {
            return caching(Output.of(caching));
        }

        /**
         * @param diskEncryptionSetId The ID of the Disk Encryption Set which should be used to encrypt this disk. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder diskEncryptionSetId(@Nullable Output<String> diskEncryptionSetId) {
            $.diskEncryptionSetId = diskEncryptionSetId;
            return this;
        }

        /**
         * @param diskEncryptionSetId The ID of the Disk Encryption Set which should be used to encrypt this disk. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder diskEncryptionSetId(String diskEncryptionSetId) {
            return diskEncryptionSetId(Output.of(diskEncryptionSetId));
        }

        /**
         * @param lun Specifies the logical unit number of the data disk.
         * 
         * @return builder
         * 
         */
        public Builder lun(@Nullable Output<Integer> lun) {
            $.lun = lun;
            return this;
        }

        /**
         * @param lun Specifies the logical unit number of the data disk.
         * 
         * @return builder
         * 
         */
        public Builder lun(Integer lun) {
            return lun(Output.of(lun));
        }

        /**
         * @param managedDiskId Specifies the ID of the managed disk resource that you want to use to create the image. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder managedDiskId(@Nullable Output<String> managedDiskId) {
            $.managedDiskId = managedDiskId;
            return this;
        }

        /**
         * @param managedDiskId Specifies the ID of the managed disk resource that you want to use to create the image. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder managedDiskId(String managedDiskId) {
            return managedDiskId(Output.of(managedDiskId));
        }

        /**
         * @param sizeGb Specifies the size of the image to be created. The target size can&#39;t be smaller than the source size.
         * 
         * @return builder
         * 
         */
        public Builder sizeGb(@Nullable Output<Integer> sizeGb) {
            $.sizeGb = sizeGb;
            return this;
        }

        /**
         * @param sizeGb Specifies the size of the image to be created. The target size can&#39;t be smaller than the source size.
         * 
         * @return builder
         * 
         */
        public Builder sizeGb(Integer sizeGb) {
            return sizeGb(Output.of(sizeGb));
        }

        /**
         * @param storageType The type of Storage Disk to use. Possible values are `Premium_LRS`, `PremiumV2_LRS`, `Premium_ZRS`, `Standard_LRS`, `StandardSSD_LRS`, `StandardSSD_ZRS` and `UltraSSD_LRS`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder storageType(Output<String> storageType) {
            $.storageType = storageType;
            return this;
        }

        /**
         * @param storageType The type of Storage Disk to use. Possible values are `Premium_LRS`, `PremiumV2_LRS`, `Premium_ZRS`, `Standard_LRS`, `StandardSSD_LRS`, `StandardSSD_ZRS` and `UltraSSD_LRS`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder storageType(String storageType) {
            return storageType(Output.of(storageType));
        }

        public ImageDataDiskArgs build() {
            if ($.storageType == null) {
                throw new MissingRequiredPropertyException("ImageDataDiskArgs", "storageType");
            }
            return $;
        }
    }

}
