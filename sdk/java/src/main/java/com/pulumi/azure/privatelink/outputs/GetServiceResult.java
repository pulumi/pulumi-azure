// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.privatelink.outputs;

import com.pulumi.azure.privatelink.outputs.GetServiceNatIpConfiguration;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetServiceResult {
    /**
     * @return The alias is a globally unique name for your private link service which Azure generates for you. Your can use this alias to request a connection to your private link service.
     * 
     */
    private final String alias;
    /**
     * @return The list of subscription(s) globally unique identifiers that will be auto approved to use the private link service.
     * 
     */
    private final List<String> autoApprovalSubscriptionIds;
    /**
     * @return Does the Private Link Service support the Proxy Protocol?
     * 
     */
    private final Boolean enableProxyProtocol;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * @return The list of Standard Load Balancer(SLB) resource IDs. The Private Link service is tied to the frontend IP address of a SLB. All traffic destined for the private link service will reach the frontend of the SLB. You can configure SLB rules to direct this traffic to appropriate backend pools where your applications are running.
     * 
     */
    private final List<String> loadBalancerFrontendIpConfigurationIds;
    /**
     * @return The supported Azure location where the resource exists.
     * 
     */
    private final String location;
    /**
     * @return The name of private link service NAT IP configuration.
     * 
     */
    private final String name;
    /**
     * @return The `nat_ip_configuration` block as defined below.
     * 
     */
    private final List<GetServiceNatIpConfiguration> natIpConfigurations;
    private final String resourceGroupName;
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    private final Map<String,String> tags;
    /**
     * @return The list of subscription(s) globally unique identifiers(GUID) that will be able to see the private link service.
     * 
     */
    private final List<String> visibilitySubscriptionIds;

    @CustomType.Constructor
    private GetServiceResult(
        @CustomType.Parameter("alias") String alias,
        @CustomType.Parameter("autoApprovalSubscriptionIds") List<String> autoApprovalSubscriptionIds,
        @CustomType.Parameter("enableProxyProtocol") Boolean enableProxyProtocol,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("loadBalancerFrontendIpConfigurationIds") List<String> loadBalancerFrontendIpConfigurationIds,
        @CustomType.Parameter("location") String location,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("natIpConfigurations") List<GetServiceNatIpConfiguration> natIpConfigurations,
        @CustomType.Parameter("resourceGroupName") String resourceGroupName,
        @CustomType.Parameter("tags") Map<String,String> tags,
        @CustomType.Parameter("visibilitySubscriptionIds") List<String> visibilitySubscriptionIds) {
        this.alias = alias;
        this.autoApprovalSubscriptionIds = autoApprovalSubscriptionIds;
        this.enableProxyProtocol = enableProxyProtocol;
        this.id = id;
        this.loadBalancerFrontendIpConfigurationIds = loadBalancerFrontendIpConfigurationIds;
        this.location = location;
        this.name = name;
        this.natIpConfigurations = natIpConfigurations;
        this.resourceGroupName = resourceGroupName;
        this.tags = tags;
        this.visibilitySubscriptionIds = visibilitySubscriptionIds;
    }

    /**
     * @return The alias is a globally unique name for your private link service which Azure generates for you. Your can use this alias to request a connection to your private link service.
     * 
     */
    public String alias() {
        return this.alias;
    }
    /**
     * @return The list of subscription(s) globally unique identifiers that will be auto approved to use the private link service.
     * 
     */
    public List<String> autoApprovalSubscriptionIds() {
        return this.autoApprovalSubscriptionIds;
    }
    /**
     * @return Does the Private Link Service support the Proxy Protocol?
     * 
     */
    public Boolean enableProxyProtocol() {
        return this.enableProxyProtocol;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The list of Standard Load Balancer(SLB) resource IDs. The Private Link service is tied to the frontend IP address of a SLB. All traffic destined for the private link service will reach the frontend of the SLB. You can configure SLB rules to direct this traffic to appropriate backend pools where your applications are running.
     * 
     */
    public List<String> loadBalancerFrontendIpConfigurationIds() {
        return this.loadBalancerFrontendIpConfigurationIds;
    }
    /**
     * @return The supported Azure location where the resource exists.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return The name of private link service NAT IP configuration.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The `nat_ip_configuration` block as defined below.
     * 
     */
    public List<GetServiceNatIpConfiguration> natIpConfigurations() {
        return this.natIpConfigurations;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return The list of subscription(s) globally unique identifiers(GUID) that will be able to see the private link service.
     * 
     */
    public List<String> visibilitySubscriptionIds() {
        return this.visibilitySubscriptionIds;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String alias;
        private List<String> autoApprovalSubscriptionIds;
        private Boolean enableProxyProtocol;
        private String id;
        private List<String> loadBalancerFrontendIpConfigurationIds;
        private String location;
        private String name;
        private List<GetServiceNatIpConfiguration> natIpConfigurations;
        private String resourceGroupName;
        private Map<String,String> tags;
        private List<String> visibilitySubscriptionIds;

        public Builder() {
    	      // Empty
        }

        public Builder(GetServiceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alias = defaults.alias;
    	      this.autoApprovalSubscriptionIds = defaults.autoApprovalSubscriptionIds;
    	      this.enableProxyProtocol = defaults.enableProxyProtocol;
    	      this.id = defaults.id;
    	      this.loadBalancerFrontendIpConfigurationIds = defaults.loadBalancerFrontendIpConfigurationIds;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.natIpConfigurations = defaults.natIpConfigurations;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.tags = defaults.tags;
    	      this.visibilitySubscriptionIds = defaults.visibilitySubscriptionIds;
        }

        public Builder alias(String alias) {
            this.alias = Objects.requireNonNull(alias);
            return this;
        }
        public Builder autoApprovalSubscriptionIds(List<String> autoApprovalSubscriptionIds) {
            this.autoApprovalSubscriptionIds = Objects.requireNonNull(autoApprovalSubscriptionIds);
            return this;
        }
        public Builder autoApprovalSubscriptionIds(String... autoApprovalSubscriptionIds) {
            return autoApprovalSubscriptionIds(List.of(autoApprovalSubscriptionIds));
        }
        public Builder enableProxyProtocol(Boolean enableProxyProtocol) {
            this.enableProxyProtocol = Objects.requireNonNull(enableProxyProtocol);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder loadBalancerFrontendIpConfigurationIds(List<String> loadBalancerFrontendIpConfigurationIds) {
            this.loadBalancerFrontendIpConfigurationIds = Objects.requireNonNull(loadBalancerFrontendIpConfigurationIds);
            return this;
        }
        public Builder loadBalancerFrontendIpConfigurationIds(String... loadBalancerFrontendIpConfigurationIds) {
            return loadBalancerFrontendIpConfigurationIds(List.of(loadBalancerFrontendIpConfigurationIds));
        }
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder natIpConfigurations(List<GetServiceNatIpConfiguration> natIpConfigurations) {
            this.natIpConfigurations = Objects.requireNonNull(natIpConfigurations);
            return this;
        }
        public Builder natIpConfigurations(GetServiceNatIpConfiguration... natIpConfigurations) {
            return natIpConfigurations(List.of(natIpConfigurations));
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder tags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder visibilitySubscriptionIds(List<String> visibilitySubscriptionIds) {
            this.visibilitySubscriptionIds = Objects.requireNonNull(visibilitySubscriptionIds);
            return this;
        }
        public Builder visibilitySubscriptionIds(String... visibilitySubscriptionIds) {
            return visibilitySubscriptionIds(List.of(visibilitySubscriptionIds));
        }        public GetServiceResult build() {
            return new GetServiceResult(alias, autoApprovalSubscriptionIds, enableProxyProtocol, id, loadBalancerFrontendIpConfigurationIds, location, name, natIpConfigurations, resourceGroupName, tags, visibilitySubscriptionIds);
        }
    }
}
