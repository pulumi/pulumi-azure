// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.privatelink.outputs;

import com.pulumi.azure.privatelink.outputs.GetServiceNatIpConfiguration;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetServiceResult {
    /**
     * @return The alias is a globally unique name for your private link service which Azure generates for you. Your can use this alias to request a connection to your private link service.
     * 
     */
    private String alias;
    /**
     * @return The list of subscription(s) globally unique identifiers that will be auto approved to use the private link service.
     * 
     */
    private List<String> autoApprovalSubscriptionIds;
    /**
     * @return Does the Private Link Service support the Proxy Protocol?
     * 
     */
    private Boolean enableProxyProtocol;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The list of Standard Load Balancer(SLB) resource IDs. The Private Link service is tied to the frontend IP address of a SLB. All traffic destined for the private link service will reach the frontend of the SLB. You can configure SLB rules to direct this traffic to appropriate backend pools where your applications are running.
     * 
     */
    private List<String> loadBalancerFrontendIpConfigurationIds;
    /**
     * @return The supported Azure location where the resource exists.
     * 
     */
    private String location;
    /**
     * @return The name of private link service NAT IP configuration.
     * 
     */
    private String name;
    /**
     * @return The `nat_ip_configuration` block as defined below.
     * 
     */
    private List<GetServiceNatIpConfiguration> natIpConfigurations;
    private String resourceGroupName;
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return The list of subscription(s) globally unique identifiers(GUID) that will be able to see the private link service.
     * 
     */
    private List<String> visibilitySubscriptionIds;

    private GetServiceResult() {}
    /**
     * @return The alias is a globally unique name for your private link service which Azure generates for you. Your can use this alias to request a connection to your private link service.
     * 
     */
    public String alias() {
        return this.alias;
    }
    /**
     * @return The list of subscription(s) globally unique identifiers that will be auto approved to use the private link service.
     * 
     */
    public List<String> autoApprovalSubscriptionIds() {
        return this.autoApprovalSubscriptionIds;
    }
    /**
     * @return Does the Private Link Service support the Proxy Protocol?
     * 
     */
    public Boolean enableProxyProtocol() {
        return this.enableProxyProtocol;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The list of Standard Load Balancer(SLB) resource IDs. The Private Link service is tied to the frontend IP address of a SLB. All traffic destined for the private link service will reach the frontend of the SLB. You can configure SLB rules to direct this traffic to appropriate backend pools where your applications are running.
     * 
     */
    public List<String> loadBalancerFrontendIpConfigurationIds() {
        return this.loadBalancerFrontendIpConfigurationIds;
    }
    /**
     * @return The supported Azure location where the resource exists.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return The name of private link service NAT IP configuration.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The `nat_ip_configuration` block as defined below.
     * 
     */
    public List<GetServiceNatIpConfiguration> natIpConfigurations() {
        return this.natIpConfigurations;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return The list of subscription(s) globally unique identifiers(GUID) that will be able to see the private link service.
     * 
     */
    public List<String> visibilitySubscriptionIds() {
        return this.visibilitySubscriptionIds;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String alias;
        private List<String> autoApprovalSubscriptionIds;
        private Boolean enableProxyProtocol;
        private String id;
        private List<String> loadBalancerFrontendIpConfigurationIds;
        private String location;
        private String name;
        private List<GetServiceNatIpConfiguration> natIpConfigurations;
        private String resourceGroupName;
        private Map<String,String> tags;
        private List<String> visibilitySubscriptionIds;
        public Builder() {}
        public Builder(GetServiceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alias = defaults.alias;
    	      this.autoApprovalSubscriptionIds = defaults.autoApprovalSubscriptionIds;
    	      this.enableProxyProtocol = defaults.enableProxyProtocol;
    	      this.id = defaults.id;
    	      this.loadBalancerFrontendIpConfigurationIds = defaults.loadBalancerFrontendIpConfigurationIds;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.natIpConfigurations = defaults.natIpConfigurations;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.tags = defaults.tags;
    	      this.visibilitySubscriptionIds = defaults.visibilitySubscriptionIds;
        }

        @CustomType.Setter
        public Builder alias(String alias) {
            if (alias == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "alias");
            }
            this.alias = alias;
            return this;
        }
        @CustomType.Setter
        public Builder autoApprovalSubscriptionIds(List<String> autoApprovalSubscriptionIds) {
            if (autoApprovalSubscriptionIds == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "autoApprovalSubscriptionIds");
            }
            this.autoApprovalSubscriptionIds = autoApprovalSubscriptionIds;
            return this;
        }
        public Builder autoApprovalSubscriptionIds(String... autoApprovalSubscriptionIds) {
            return autoApprovalSubscriptionIds(List.of(autoApprovalSubscriptionIds));
        }
        @CustomType.Setter
        public Builder enableProxyProtocol(Boolean enableProxyProtocol) {
            if (enableProxyProtocol == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "enableProxyProtocol");
            }
            this.enableProxyProtocol = enableProxyProtocol;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder loadBalancerFrontendIpConfigurationIds(List<String> loadBalancerFrontendIpConfigurationIds) {
            if (loadBalancerFrontendIpConfigurationIds == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "loadBalancerFrontendIpConfigurationIds");
            }
            this.loadBalancerFrontendIpConfigurationIds = loadBalancerFrontendIpConfigurationIds;
            return this;
        }
        public Builder loadBalancerFrontendIpConfigurationIds(String... loadBalancerFrontendIpConfigurationIds) {
            return loadBalancerFrontendIpConfigurationIds(List.of(loadBalancerFrontendIpConfigurationIds));
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder natIpConfigurations(List<GetServiceNatIpConfiguration> natIpConfigurations) {
            if (natIpConfigurations == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "natIpConfigurations");
            }
            this.natIpConfigurations = natIpConfigurations;
            return this;
        }
        public Builder natIpConfigurations(GetServiceNatIpConfiguration... natIpConfigurations) {
            return natIpConfigurations(List.of(natIpConfigurations));
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            if (resourceGroupName == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "resourceGroupName");
            }
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder visibilitySubscriptionIds(List<String> visibilitySubscriptionIds) {
            if (visibilitySubscriptionIds == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "visibilitySubscriptionIds");
            }
            this.visibilitySubscriptionIds = visibilitySubscriptionIds;
            return this;
        }
        public Builder visibilitySubscriptionIds(String... visibilitySubscriptionIds) {
            return visibilitySubscriptionIds(List.of(visibilitySubscriptionIds));
        }
        public GetServiceResult build() {
            final var _resultValue = new GetServiceResult();
            _resultValue.alias = alias;
            _resultValue.autoApprovalSubscriptionIds = autoApprovalSubscriptionIds;
            _resultValue.enableProxyProtocol = enableProxyProtocol;
            _resultValue.id = id;
            _resultValue.loadBalancerFrontendIpConfigurationIds = loadBalancerFrontendIpConfigurationIds;
            _resultValue.location = location;
            _resultValue.name = name;
            _resultValue.natIpConfigurations = natIpConfigurations;
            _resultValue.resourceGroupName = resourceGroupName;
            _resultValue.tags = tags;
            _resultValue.visibilitySubscriptionIds = visibilitySubscriptionIds;
            return _resultValue;
        }
    }
}
