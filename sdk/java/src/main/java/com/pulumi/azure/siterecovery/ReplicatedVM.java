// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.siterecovery;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.siterecovery.ReplicatedVMArgs;
import com.pulumi.azure.siterecovery.inputs.ReplicatedVMState;
import com.pulumi.azure.siterecovery.outputs.ReplicatedVMManagedDisk;
import com.pulumi.azure.siterecovery.outputs.ReplicatedVMNetworkInterface;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a VM replicated using Azure Site Recovery (Azure to Azure only). A replicated VM keeps a copiously updated image of the VM in another region in order to be able to start the VM in that region in case of a disaster.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.network.VirtualNetwork;
 * import com.pulumi.azure.network.VirtualNetworkArgs;
 * import com.pulumi.azure.network.Subnet;
 * import com.pulumi.azure.network.SubnetArgs;
 * import com.pulumi.azure.network.PublicIp;
 * import com.pulumi.azure.network.PublicIpArgs;
 * import com.pulumi.azure.network.NetworkInterface;
 * import com.pulumi.azure.network.NetworkInterfaceArgs;
 * import com.pulumi.azure.network.inputs.NetworkInterfaceIpConfigurationArgs;
 * import com.pulumi.azure.compute.VirtualMachine;
 * import com.pulumi.azure.compute.VirtualMachineArgs;
 * import com.pulumi.azure.compute.inputs.VirtualMachineStorageImageReferenceArgs;
 * import com.pulumi.azure.compute.inputs.VirtualMachineStorageOsDiskArgs;
 * import com.pulumi.azure.compute.inputs.VirtualMachineOsProfileArgs;
 * import com.pulumi.azure.compute.inputs.VirtualMachineOsProfileLinuxConfigArgs;
 * import com.pulumi.azure.recoveryservices.Vault;
 * import com.pulumi.azure.recoveryservices.VaultArgs;
 * import com.pulumi.azure.siterecovery.Fabric;
 * import com.pulumi.azure.siterecovery.FabricArgs;
 * import com.pulumi.azure.siterecovery.ProtectionContainer;
 * import com.pulumi.azure.siterecovery.ProtectionContainerArgs;
 * import com.pulumi.azure.siterecovery.ReplicationPolicy;
 * import com.pulumi.azure.siterecovery.ReplicationPolicyArgs;
 * import com.pulumi.azure.siterecovery.ProtectionContainerMapping;
 * import com.pulumi.azure.siterecovery.ProtectionContainerMappingArgs;
 * import com.pulumi.azure.siterecovery.NetworkMapping;
 * import com.pulumi.azure.siterecovery.NetworkMappingArgs;
 * import com.pulumi.azure.storage.Account;
 * import com.pulumi.azure.storage.AccountArgs;
 * import com.pulumi.azure.siterecovery.ReplicatedVM;
 * import com.pulumi.azure.siterecovery.ReplicatedVMArgs;
 * import com.pulumi.azure.siterecovery.inputs.ReplicatedVMManagedDiskArgs;
 * import com.pulumi.azure.siterecovery.inputs.ReplicatedVMNetworkInterfaceArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var primaryResourceGroup = new ResourceGroup(&#34;primaryResourceGroup&#34;, ResourceGroupArgs.builder()        
 *             .location(&#34;West US&#34;)
 *             .build());
 * 
 *         var secondaryResourceGroup = new ResourceGroup(&#34;secondaryResourceGroup&#34;, ResourceGroupArgs.builder()        
 *             .location(&#34;East US&#34;)
 *             .build());
 * 
 *         var primaryVirtualNetwork = new VirtualNetwork(&#34;primaryVirtualNetwork&#34;, VirtualNetworkArgs.builder()        
 *             .resourceGroupName(primaryResourceGroup.name())
 *             .addressSpaces(&#34;192.168.1.0/24&#34;)
 *             .location(primaryResourceGroup.location())
 *             .build());
 * 
 *         var primarySubnet = new Subnet(&#34;primarySubnet&#34;, SubnetArgs.builder()        
 *             .resourceGroupName(primaryResourceGroup.name())
 *             .virtualNetworkName(primaryVirtualNetwork.name())
 *             .addressPrefixes(&#34;192.168.1.0/24&#34;)
 *             .build());
 * 
 *         var primaryPublicIp = new PublicIp(&#34;primaryPublicIp&#34;, PublicIpArgs.builder()        
 *             .allocationMethod(&#34;Static&#34;)
 *             .location(primaryResourceGroup.location())
 *             .resourceGroupName(primaryResourceGroup.name())
 *             .sku(&#34;Basic&#34;)
 *             .build());
 * 
 *         var vmNetworkInterface = new NetworkInterface(&#34;vmNetworkInterface&#34;, NetworkInterfaceArgs.builder()        
 *             .location(primaryResourceGroup.location())
 *             .resourceGroupName(primaryResourceGroup.name())
 *             .ipConfigurations(NetworkInterfaceIpConfigurationArgs.builder()
 *                 .name(&#34;vm&#34;)
 *                 .subnetId(primarySubnet.id())
 *                 .privateIpAddressAllocation(&#34;Dynamic&#34;)
 *                 .publicIpAddressId(primaryPublicIp.id())
 *                 .build())
 *             .build());
 * 
 *         var vmVirtualMachine = new VirtualMachine(&#34;vmVirtualMachine&#34;, VirtualMachineArgs.builder()        
 *             .location(primaryResourceGroup.location())
 *             .resourceGroupName(primaryResourceGroup.name())
 *             .vmSize(&#34;Standard_B1s&#34;)
 *             .networkInterfaceIds(vmNetworkInterface.id())
 *             .storageImageReference(VirtualMachineStorageImageReferenceArgs.builder()
 *                 .publisher(&#34;OpenLogic&#34;)
 *                 .offer(&#34;CentOS&#34;)
 *                 .sku(&#34;7.5&#34;)
 *                 .version(&#34;latest&#34;)
 *                 .build())
 *             .storageOsDisk(VirtualMachineStorageOsDiskArgs.builder()
 *                 .name(&#34;vm-os-disk&#34;)
 *                 .osType(&#34;Linux&#34;)
 *                 .caching(&#34;ReadWrite&#34;)
 *                 .createOption(&#34;FromImage&#34;)
 *                 .managedDiskType(&#34;Premium_LRS&#34;)
 *                 .build())
 *             .osProfile(VirtualMachineOsProfileArgs.builder()
 *                 .adminUsername(&#34;test-admin-123&#34;)
 *                 .adminPassword(&#34;test-pwd-123&#34;)
 *                 .computerName(&#34;vm&#34;)
 *                 .build())
 *             .osProfileLinuxConfig(VirtualMachineOsProfileLinuxConfigArgs.builder()
 *                 .disablePasswordAuthentication(false)
 *                 .build())
 *             .build());
 * 
 *         var vault = new Vault(&#34;vault&#34;, VaultArgs.builder()        
 *             .location(secondaryResourceGroup.location())
 *             .resourceGroupName(secondaryResourceGroup.name())
 *             .sku(&#34;Standard&#34;)
 *             .build());
 * 
 *         var primaryFabric = new Fabric(&#34;primaryFabric&#34;, FabricArgs.builder()        
 *             .resourceGroupName(secondaryResourceGroup.name())
 *             .recoveryVaultName(vault.name())
 *             .location(primaryResourceGroup.location())
 *             .build());
 * 
 *         var secondaryFabric = new Fabric(&#34;secondaryFabric&#34;, FabricArgs.builder()        
 *             .resourceGroupName(secondaryResourceGroup.name())
 *             .recoveryVaultName(vault.name())
 *             .location(secondaryResourceGroup.location())
 *             .build());
 * 
 *         var primaryProtectionContainer = new ProtectionContainer(&#34;primaryProtectionContainer&#34;, ProtectionContainerArgs.builder()        
 *             .resourceGroupName(secondaryResourceGroup.name())
 *             .recoveryVaultName(vault.name())
 *             .recoveryFabricName(primaryFabric.name())
 *             .build());
 * 
 *         var secondaryProtectionContainer = new ProtectionContainer(&#34;secondaryProtectionContainer&#34;, ProtectionContainerArgs.builder()        
 *             .resourceGroupName(secondaryResourceGroup.name())
 *             .recoveryVaultName(vault.name())
 *             .recoveryFabricName(secondaryFabric.name())
 *             .build());
 * 
 *         var policy = new ReplicationPolicy(&#34;policy&#34;, ReplicationPolicyArgs.builder()        
 *             .resourceGroupName(secondaryResourceGroup.name())
 *             .recoveryVaultName(vault.name())
 *             .recoveryPointRetentionInMinutes(24 * 60)
 *             .applicationConsistentSnapshotFrequencyInMinutes(4 * 60)
 *             .build());
 * 
 *         var container_mapping = new ProtectionContainerMapping(&#34;container-mapping&#34;, ProtectionContainerMappingArgs.builder()        
 *             .resourceGroupName(secondaryResourceGroup.name())
 *             .recoveryVaultName(vault.name())
 *             .recoveryFabricName(primaryFabric.name())
 *             .recoverySourceProtectionContainerName(primaryProtectionContainer.name())
 *             .recoveryTargetProtectionContainerId(secondaryProtectionContainer.id())
 *             .recoveryReplicationPolicyId(policy.id())
 *             .build());
 * 
 *         var secondaryVirtualNetwork = new VirtualNetwork(&#34;secondaryVirtualNetwork&#34;, VirtualNetworkArgs.builder()        
 *             .resourceGroupName(secondaryResourceGroup.name())
 *             .addressSpaces(&#34;192.168.2.0/24&#34;)
 *             .location(secondaryResourceGroup.location())
 *             .build());
 * 
 *         var network_mapping = new NetworkMapping(&#34;network-mapping&#34;, NetworkMappingArgs.builder()        
 *             .resourceGroupName(secondaryResourceGroup.name())
 *             .recoveryVaultName(vault.name())
 *             .sourceRecoveryFabricName(primaryFabric.name())
 *             .targetRecoveryFabricName(secondaryFabric.name())
 *             .sourceNetworkId(primaryVirtualNetwork.id())
 *             .targetNetworkId(secondaryVirtualNetwork.id())
 *             .build());
 * 
 *         var primaryAccount = new Account(&#34;primaryAccount&#34;, AccountArgs.builder()        
 *             .location(primaryResourceGroup.location())
 *             .resourceGroupName(primaryResourceGroup.name())
 *             .accountTier(&#34;Standard&#34;)
 *             .accountReplicationType(&#34;LRS&#34;)
 *             .build());
 * 
 *         var secondarySubnet = new Subnet(&#34;secondarySubnet&#34;, SubnetArgs.builder()        
 *             .resourceGroupName(secondaryResourceGroup.name())
 *             .virtualNetworkName(secondaryVirtualNetwork.name())
 *             .addressPrefixes(&#34;192.168.2.0/24&#34;)
 *             .build());
 * 
 *         var secondaryPublicIp = new PublicIp(&#34;secondaryPublicIp&#34;, PublicIpArgs.builder()        
 *             .allocationMethod(&#34;Static&#34;)
 *             .location(secondaryResourceGroup.location())
 *             .resourceGroupName(secondaryResourceGroup.name())
 *             .sku(&#34;Basic&#34;)
 *             .build());
 * 
 *         var vm_replication = new ReplicatedVM(&#34;vm-replication&#34;, ReplicatedVMArgs.builder()        
 *             .resourceGroupName(secondaryResourceGroup.name())
 *             .recoveryVaultName(vault.name())
 *             .sourceRecoveryFabricName(primaryFabric.name())
 *             .sourceVmId(vmVirtualMachine.id())
 *             .recoveryReplicationPolicyId(policy.id())
 *             .sourceRecoveryProtectionContainerName(primaryProtectionContainer.name())
 *             .targetResourceGroupId(secondaryResourceGroup.id())
 *             .targetRecoveryFabricId(secondaryFabric.id())
 *             .targetRecoveryProtectionContainerId(secondaryProtectionContainer.id())
 *             .managedDisks(ReplicatedVMManagedDiskArgs.builder()
 *                 .diskId(vmVirtualMachine.storageOsDisk().applyValue(storageOsDisk -&gt; storageOsDisk.managedDiskId()))
 *                 .stagingStorageAccountId(primaryAccount.id())
 *                 .targetResourceGroupId(secondaryResourceGroup.id())
 *                 .targetDiskType(&#34;Premium_LRS&#34;)
 *                 .targetReplicaDiskType(&#34;Premium_LRS&#34;)
 *                 .build())
 *             .networkInterfaces(ReplicatedVMNetworkInterfaceArgs.builder()
 *                 .sourceNetworkInterfaceId(vmNetworkInterface.id())
 *                 .targetSubnetName(secondarySubnet.name())
 *                 .recoveryPublicIpAddressId(secondaryPublicIp.id())
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(                
 *                     container_mapping,
 *                     network_mapping)
 *                 .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Site Recovery Replicated VM&#39;s can be imported using the `resource id`, e.g.
 * 
 * ```sh
 *  $ pulumi import azure:siterecovery/replicatedVM:ReplicatedVM vmreplication /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resource-group-name/providers/Microsoft.RecoveryServices/vaults/recovery-vault-name/replicationFabrics/fabric-name/replicationProtectionContainers/protection-container-name/replicationProtectedItems/vm-replication-name
 * ```
 * 
 */
@ResourceType(type="azure:siterecovery/replicatedVM:ReplicatedVM")
public class ReplicatedVM extends com.pulumi.resources.CustomResource {
    /**
     * One or more `managed_disk` block.
     * 
     */
    @Export(name="managedDisks", type=List.class, parameters={ReplicatedVMManagedDisk.class})
    private Output</* @Nullable */ List<ReplicatedVMManagedDisk>> managedDisks;

    /**
     * @return One or more `managed_disk` block.
     * 
     */
    public Output<Optional<List<ReplicatedVMManagedDisk>>> managedDisks() {
        return Codegen.optional(this.managedDisks);
    }
    /**
     * The name of the replication for the replicated VM.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the replication for the replicated VM.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * One or more `network_interface` block.
     * 
     */
    @Export(name="networkInterfaces", type=List.class, parameters={ReplicatedVMNetworkInterface.class})
    private Output<List<ReplicatedVMNetworkInterface>> networkInterfaces;

    /**
     * @return One or more `network_interface` block.
     * 
     */
    public Output<List<ReplicatedVMNetworkInterface>> networkInterfaces() {
        return this.networkInterfaces;
    }
    @Export(name="recoveryReplicationPolicyId", type=String.class, parameters={})
    private Output<String> recoveryReplicationPolicyId;

    public Output<String> recoveryReplicationPolicyId() {
        return this.recoveryReplicationPolicyId;
    }
    /**
     * The name of the vault that should be updated.
     * 
     */
    @Export(name="recoveryVaultName", type=String.class, parameters={})
    private Output<String> recoveryVaultName;

    /**
     * @return The name of the vault that should be updated.
     * 
     */
    public Output<String> recoveryVaultName() {
        return this.recoveryVaultName;
    }
    /**
     * Name of the resource group where the vault that should be updated is located.
     * 
     */
    @Export(name="resourceGroupName", type=String.class, parameters={})
    private Output<String> resourceGroupName;

    /**
     * @return Name of the resource group where the vault that should be updated is located.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * Name of fabric that should contains this replication.
     * 
     */
    @Export(name="sourceRecoveryFabricName", type=String.class, parameters={})
    private Output<String> sourceRecoveryFabricName;

    /**
     * @return Name of fabric that should contains this replication.
     * 
     */
    public Output<String> sourceRecoveryFabricName() {
        return this.sourceRecoveryFabricName;
    }
    /**
     * Name of the protection container to use.
     * 
     */
    @Export(name="sourceRecoveryProtectionContainerName", type=String.class, parameters={})
    private Output<String> sourceRecoveryProtectionContainerName;

    /**
     * @return Name of the protection container to use.
     * 
     */
    public Output<String> sourceRecoveryProtectionContainerName() {
        return this.sourceRecoveryProtectionContainerName;
    }
    /**
     * Id of the VM to replicate
     * 
     */
    @Export(name="sourceVmId", type=String.class, parameters={})
    private Output<String> sourceVmId;

    /**
     * @return Id of the VM to replicate
     * 
     */
    public Output<String> sourceVmId() {
        return this.sourceVmId;
    }
    /**
     * Id of availability set that the new VM should belong to when a failover is done.
     * 
     */
    @Export(name="targetAvailabilitySetId", type=String.class, parameters={})
    private Output</* @Nullable */ String> targetAvailabilitySetId;

    /**
     * @return Id of availability set that the new VM should belong to when a failover is done.
     * 
     */
    public Output<Optional<String>> targetAvailabilitySetId() {
        return Codegen.optional(this.targetAvailabilitySetId);
    }
    /**
     * Network to use when a failover is done (recommended to set if any network_interface is configured for failover).
     * 
     */
    @Export(name="targetNetworkId", type=String.class, parameters={})
    private Output<String> targetNetworkId;

    /**
     * @return Network to use when a failover is done (recommended to set if any network_interface is configured for failover).
     * 
     */
    public Output<String> targetNetworkId() {
        return this.targetNetworkId;
    }
    /**
     * Id of fabric where the VM replication should be handled when a failover is done.
     * 
     */
    @Export(name="targetRecoveryFabricId", type=String.class, parameters={})
    private Output<String> targetRecoveryFabricId;

    /**
     * @return Id of fabric where the VM replication should be handled when a failover is done.
     * 
     */
    public Output<String> targetRecoveryFabricId() {
        return this.targetRecoveryFabricId;
    }
    /**
     * Id of protection container where the VM replication should be created when a failover is done.
     * 
     */
    @Export(name="targetRecoveryProtectionContainerId", type=String.class, parameters={})
    private Output<String> targetRecoveryProtectionContainerId;

    /**
     * @return Id of protection container where the VM replication should be created when a failover is done.
     * 
     */
    public Output<String> targetRecoveryProtectionContainerId() {
        return this.targetRecoveryProtectionContainerId;
    }
    /**
     * Id of resource group where the VM should be created when a failover is done.
     * 
     */
    @Export(name="targetResourceGroupId", type=String.class, parameters={})
    private Output<String> targetResourceGroupId;

    /**
     * @return Id of resource group where the VM should be created when a failover is done.
     * 
     */
    public Output<String> targetResourceGroupId() {
        return this.targetResourceGroupId;
    }
    /**
     * Specifies the Availability Zone where the Failover VM should exist.
     * 
     */
    @Export(name="targetZone", type=String.class, parameters={})
    private Output</* @Nullable */ String> targetZone;

    /**
     * @return Specifies the Availability Zone where the Failover VM should exist.
     * 
     */
    public Output<Optional<String>> targetZone() {
        return Codegen.optional(this.targetZone);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ReplicatedVM(String name) {
        this(name, ReplicatedVMArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ReplicatedVM(String name, ReplicatedVMArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ReplicatedVM(String name, ReplicatedVMArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:siterecovery/replicatedVM:ReplicatedVM", name, args == null ? ReplicatedVMArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private ReplicatedVM(String name, Output<String> id, @Nullable ReplicatedVMState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:siterecovery/replicatedVM:ReplicatedVM", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ReplicatedVM get(String name, Output<String> id, @Nullable ReplicatedVMState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ReplicatedVM(name, id, state, options);
    }
}
