// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.siterecovery;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.siterecovery.ReplicatedVMArgs;
import com.pulumi.azure.siterecovery.inputs.ReplicatedVMState;
import com.pulumi.azure.siterecovery.outputs.ReplicatedVMManagedDisk;
import com.pulumi.azure.siterecovery.outputs.ReplicatedVMNetworkInterface;
import com.pulumi.azure.siterecovery.outputs.ReplicatedVMUnmanagedDisk;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a VM replicated using Azure Site Recovery (Azure to Azure only). A replicated VM keeps a copiously updated image of the VM in another region in order to be able to start the VM in that region in case of a disaster.
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.network.VirtualNetwork;
 * import com.pulumi.azure.network.VirtualNetworkArgs;
 * import com.pulumi.azure.network.Subnet;
 * import com.pulumi.azure.network.SubnetArgs;
 * import com.pulumi.azure.network.PublicIp;
 * import com.pulumi.azure.network.PublicIpArgs;
 * import com.pulumi.azure.network.NetworkInterface;
 * import com.pulumi.azure.network.NetworkInterfaceArgs;
 * import com.pulumi.azure.network.inputs.NetworkInterfaceIpConfigurationArgs;
 * import com.pulumi.azure.compute.VirtualMachine;
 * import com.pulumi.azure.compute.VirtualMachineArgs;
 * import com.pulumi.azure.compute.inputs.VirtualMachineStorageImageReferenceArgs;
 * import com.pulumi.azure.compute.inputs.VirtualMachineStorageOsDiskArgs;
 * import com.pulumi.azure.compute.inputs.VirtualMachineOsProfileArgs;
 * import com.pulumi.azure.compute.inputs.VirtualMachineOsProfileLinuxConfigArgs;
 * import com.pulumi.azure.recoveryservices.Vault;
 * import com.pulumi.azure.recoveryservices.VaultArgs;
 * import com.pulumi.azure.siterecovery.Fabric;
 * import com.pulumi.azure.siterecovery.FabricArgs;
 * import com.pulumi.azure.siterecovery.ProtectionContainer;
 * import com.pulumi.azure.siterecovery.ProtectionContainerArgs;
 * import com.pulumi.azure.siterecovery.ReplicationPolicy;
 * import com.pulumi.azure.siterecovery.ReplicationPolicyArgs;
 * import com.pulumi.azure.siterecovery.ProtectionContainerMapping;
 * import com.pulumi.azure.siterecovery.ProtectionContainerMappingArgs;
 * import com.pulumi.azure.siterecovery.NetworkMapping;
 * import com.pulumi.azure.siterecovery.NetworkMappingArgs;
 * import com.pulumi.azure.storage.Account;
 * import com.pulumi.azure.storage.AccountArgs;
 * import com.pulumi.azure.siterecovery.ReplicatedVM;
 * import com.pulumi.azure.siterecovery.ReplicatedVMArgs;
 * import com.pulumi.azure.siterecovery.inputs.ReplicatedVMManagedDiskArgs;
 * import com.pulumi.azure.siterecovery.inputs.ReplicatedVMNetworkInterfaceArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var primary = new ResourceGroup("primary", ResourceGroupArgs.builder()
 *             .name("tfex-replicated-vm-primary")
 *             .location("West US")
 *             .build());
 * 
 *         var secondary = new ResourceGroup("secondary", ResourceGroupArgs.builder()
 *             .name("tfex-replicated-vm-secondary")
 *             .location("East US")
 *             .build());
 * 
 *         var primaryVirtualNetwork = new VirtualNetwork("primaryVirtualNetwork", VirtualNetworkArgs.builder()
 *             .name("network1")
 *             .resourceGroupName(primary.name())
 *             .addressSpaces("192.168.1.0/24")
 *             .location(primary.location())
 *             .build());
 * 
 *         var primarySubnet = new Subnet("primarySubnet", SubnetArgs.builder()
 *             .name("network1-subnet")
 *             .resourceGroupName(primary.name())
 *             .virtualNetworkName(primaryVirtualNetwork.name())
 *             .addressPrefixes("192.168.1.0/24")
 *             .build());
 * 
 *         var primaryPublicIp = new PublicIp("primaryPublicIp", PublicIpArgs.builder()
 *             .name("vm-public-ip-primary")
 *             .allocationMethod("Static")
 *             .location(primary.location())
 *             .resourceGroupName(primary.name())
 *             .sku("Basic")
 *             .build());
 * 
 *         var vmNetworkInterface = new NetworkInterface("vmNetworkInterface", NetworkInterfaceArgs.builder()
 *             .name("vm-nic")
 *             .location(primary.location())
 *             .resourceGroupName(primary.name())
 *             .ipConfigurations(NetworkInterfaceIpConfigurationArgs.builder()
 *                 .name("vm")
 *                 .subnetId(primarySubnet.id())
 *                 .privateIpAddressAllocation("Dynamic")
 *                 .publicIpAddressId(primaryPublicIp.id())
 *                 .build())
 *             .build());
 * 
 *         var vm = new VirtualMachine("vm", VirtualMachineArgs.builder()
 *             .name("vm")
 *             .location(primary.location())
 *             .resourceGroupName(primary.name())
 *             .vmSize("Standard_B1s")
 *             .networkInterfaceIds(vmNetworkInterface.id())
 *             .storageImageReference(VirtualMachineStorageImageReferenceArgs.builder()
 *                 .publisher("Canonical")
 *                 .offer("0001-com-ubuntu-server-jammy")
 *                 .sku("22_04-lts")
 *                 .version("latest")
 *                 .build())
 *             .storageOsDisk(VirtualMachineStorageOsDiskArgs.builder()
 *                 .name("vm-os-disk")
 *                 .osType("Linux")
 *                 .caching("ReadWrite")
 *                 .createOption("FromImage")
 *                 .managedDiskType("Premium_LRS")
 *                 .build())
 *             .osProfile(VirtualMachineOsProfileArgs.builder()
 *                 .adminUsername("test-admin-123")
 *                 .adminPassword("test-pwd-123")
 *                 .computerName("vm")
 *                 .build())
 *             .osProfileLinuxConfig(VirtualMachineOsProfileLinuxConfigArgs.builder()
 *                 .disablePasswordAuthentication(false)
 *                 .build())
 *             .build());
 * 
 *         var vault = new Vault("vault", VaultArgs.builder()
 *             .name("example-recovery-vault")
 *             .location(secondary.location())
 *             .resourceGroupName(secondary.name())
 *             .sku("Standard")
 *             .build());
 * 
 *         var primaryFabric = new Fabric("primaryFabric", FabricArgs.builder()
 *             .name("primary-fabric")
 *             .resourceGroupName(secondary.name())
 *             .recoveryVaultName(vault.name())
 *             .location(primary.location())
 *             .build());
 * 
 *         var secondaryFabric = new Fabric("secondaryFabric", FabricArgs.builder()
 *             .name("secondary-fabric")
 *             .resourceGroupName(secondary.name())
 *             .recoveryVaultName(vault.name())
 *             .location(secondary.location())
 *             .build());
 * 
 *         var primaryProtectionContainer = new ProtectionContainer("primaryProtectionContainer", ProtectionContainerArgs.builder()
 *             .name("primary-protection-container")
 *             .resourceGroupName(secondary.name())
 *             .recoveryVaultName(vault.name())
 *             .recoveryFabricName(primaryFabric.name())
 *             .build());
 * 
 *         var secondaryProtectionContainer = new ProtectionContainer("secondaryProtectionContainer", ProtectionContainerArgs.builder()
 *             .name("secondary-protection-container")
 *             .resourceGroupName(secondary.name())
 *             .recoveryVaultName(vault.name())
 *             .recoveryFabricName(secondaryFabric.name())
 *             .build());
 * 
 *         var policy = new ReplicationPolicy("policy", ReplicationPolicyArgs.builder()
 *             .name("policy")
 *             .resourceGroupName(secondary.name())
 *             .recoveryVaultName(vault.name())
 *             .recoveryPointRetentionInMinutes(24 * 60)
 *             .applicationConsistentSnapshotFrequencyInMinutes(4 * 60)
 *             .build());
 * 
 *         var container_mapping = new ProtectionContainerMapping("container-mapping", ProtectionContainerMappingArgs.builder()
 *             .name("container-mapping")
 *             .resourceGroupName(secondary.name())
 *             .recoveryVaultName(vault.name())
 *             .recoveryFabricName(primaryFabric.name())
 *             .recoverySourceProtectionContainerName(primaryProtectionContainer.name())
 *             .recoveryTargetProtectionContainerId(secondaryProtectionContainer.id())
 *             .recoveryReplicationPolicyId(policy.id())
 *             .build());
 * 
 *         var secondaryVirtualNetwork = new VirtualNetwork("secondaryVirtualNetwork", VirtualNetworkArgs.builder()
 *             .name("network2")
 *             .resourceGroupName(secondary.name())
 *             .addressSpaces("192.168.2.0/24")
 *             .location(secondary.location())
 *             .build());
 * 
 *         var network_mapping = new NetworkMapping("network-mapping", NetworkMappingArgs.builder()
 *             .name("network-mapping")
 *             .resourceGroupName(secondary.name())
 *             .recoveryVaultName(vault.name())
 *             .sourceRecoveryFabricName(primaryFabric.name())
 *             .targetRecoveryFabricName(secondaryFabric.name())
 *             .sourceNetworkId(primaryVirtualNetwork.id())
 *             .targetNetworkId(secondaryVirtualNetwork.id())
 *             .build());
 * 
 *         var primaryAccount = new Account("primaryAccount", AccountArgs.builder()
 *             .name("primaryrecoverycache")
 *             .location(primary.location())
 *             .resourceGroupName(primary.name())
 *             .accountTier("Standard")
 *             .accountReplicationType("LRS")
 *             .build());
 * 
 *         var secondarySubnet = new Subnet("secondarySubnet", SubnetArgs.builder()
 *             .name("network2-subnet")
 *             .resourceGroupName(secondary.name())
 *             .virtualNetworkName(secondaryVirtualNetwork.name())
 *             .addressPrefixes("192.168.2.0/24")
 *             .build());
 * 
 *         var secondaryPublicIp = new PublicIp("secondaryPublicIp", PublicIpArgs.builder()
 *             .name("vm-public-ip-secondary")
 *             .allocationMethod("Static")
 *             .location(secondary.location())
 *             .resourceGroupName(secondary.name())
 *             .sku("Basic")
 *             .build());
 * 
 *         var vm_replication = new ReplicatedVM("vm-replication", ReplicatedVMArgs.builder()
 *             .name("vm-replication")
 *             .resourceGroupName(secondary.name())
 *             .recoveryVaultName(vault.name())
 *             .sourceRecoveryFabricName(primaryFabric.name())
 *             .sourceVmId(vm.id())
 *             .recoveryReplicationPolicyId(policy.id())
 *             .sourceRecoveryProtectionContainerName(primaryProtectionContainer.name())
 *             .targetResourceGroupId(secondary.id())
 *             .targetRecoveryFabricId(secondaryFabric.id())
 *             .targetRecoveryProtectionContainerId(secondaryProtectionContainer.id())
 *             .managedDisks(ReplicatedVMManagedDiskArgs.builder()
 *                 .diskId(vm.storageOsDisk().applyValue(_storageOsDisk -> _storageOsDisk.managedDiskId()))
 *                 .stagingStorageAccountId(primaryAccount.id())
 *                 .targetResourceGroupId(secondary.id())
 *                 .targetDiskType("Premium_LRS")
 *                 .targetReplicaDiskType("Premium_LRS")
 *                 .build())
 *             .networkInterfaces(ReplicatedVMNetworkInterfaceArgs.builder()
 *                 .sourceNetworkInterfaceId(vmNetworkInterface.id())
 *                 .targetSubnetName(secondarySubnet.name())
 *                 .recoveryPublicIpAddressId(secondaryPublicIp.id())
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(                
 *                     container_mapping,
 *                     network_mapping)
 *                 .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## API Providers
 * 
 * &lt;!-- This section is generated, changes will be overwritten --&gt;
 * This resource uses the following Azure API Providers:
 * 
 * * `Microsoft.RecoveryServices` - 2024-04-01
 * 
 * ## Import
 * 
 * Site Recovery Replicated VM&#39;s can be imported using the `resource id`, e.g.
 * 
 * ```sh
 * $ pulumi import azure:siterecovery/replicatedVM:ReplicatedVM vmreplication /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resource-group-name/providers/Microsoft.RecoveryServices/vaults/recovery-vault-name/replicationFabrics/fabric-name/replicationProtectionContainers/protection-container-name/replicationProtectedItems/vm-replication-name
 * ```
 * 
 */
@ResourceType(type="azure:siterecovery/replicatedVM:ReplicatedVM")
public class ReplicatedVM extends com.pulumi.resources.CustomResource {
    /**
     * One or more `managed_disk` block as defined below. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="managedDisks", refs={List.class,ReplicatedVMManagedDisk.class}, tree="[0,1]")
    private Output<List<ReplicatedVMManagedDisk>> managedDisks;

    /**
     * @return One or more `managed_disk` block as defined below. Changing this forces a new resource to be created.
     * 
     */
    public Output<List<ReplicatedVMManagedDisk>> managedDisks() {
        return this.managedDisks;
    }
    /**
     * Name of group in which all machines will replicate together and have shared crash consistent and app-consistent recovery points when failed over.
     * 
     */
    @Export(name="multiVmGroupName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> multiVmGroupName;

    /**
     * @return Name of group in which all machines will replicate together and have shared crash consistent and app-consistent recovery points when failed over.
     * 
     */
    public Output<Optional<String>> multiVmGroupName() {
        return Codegen.optional(this.multiVmGroupName);
    }
    /**
     * The name of the replication for the replicated VM. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the replication for the replicated VM. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * One or more `network_interface` block as defined below.
     * 
     */
    @Export(name="networkInterfaces", refs={List.class,ReplicatedVMNetworkInterface.class}, tree="[0,1]")
    private Output<List<ReplicatedVMNetworkInterface>> networkInterfaces;

    /**
     * @return One or more `network_interface` block as defined below.
     * 
     */
    public Output<List<ReplicatedVMNetworkInterface>> networkInterfaces() {
        return this.networkInterfaces;
    }
    /**
     * Id of the policy to use for this replicated vm. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="recoveryReplicationPolicyId", refs={String.class}, tree="[0]")
    private Output<String> recoveryReplicationPolicyId;

    /**
     * @return Id of the policy to use for this replicated vm. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> recoveryReplicationPolicyId() {
        return this.recoveryReplicationPolicyId;
    }
    /**
     * The name of the vault that should be updated. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="recoveryVaultName", refs={String.class}, tree="[0]")
    private Output<String> recoveryVaultName;

    /**
     * @return The name of the vault that should be updated. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> recoveryVaultName() {
        return this.recoveryVaultName;
    }
    /**
     * Name of the resource group where the vault that should be updated is located. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="resourceGroupName", refs={String.class}, tree="[0]")
    private Output<String> resourceGroupName;

    /**
     * @return Name of the resource group where the vault that should be updated is located. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * Name of fabric that should contain this replication. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="sourceRecoveryFabricName", refs={String.class}, tree="[0]")
    private Output<String> sourceRecoveryFabricName;

    /**
     * @return Name of fabric that should contain this replication. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> sourceRecoveryFabricName() {
        return this.sourceRecoveryFabricName;
    }
    /**
     * Name of the protection container to use. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="sourceRecoveryProtectionContainerName", refs={String.class}, tree="[0]")
    private Output<String> sourceRecoveryProtectionContainerName;

    /**
     * @return Name of the protection container to use. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> sourceRecoveryProtectionContainerName() {
        return this.sourceRecoveryProtectionContainerName;
    }
    /**
     * Id of the VM to replicate Changing this forces a new resource to be created.
     * 
     */
    @Export(name="sourceVmId", refs={String.class}, tree="[0]")
    private Output<String> sourceVmId;

    /**
     * @return Id of the VM to replicate Changing this forces a new resource to be created.
     * 
     */
    public Output<String> sourceVmId() {
        return this.sourceVmId;
    }
    /**
     * Id of availability set that the new VM should belong to when a failover is done.
     * 
     */
    @Export(name="targetAvailabilitySetId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> targetAvailabilitySetId;

    /**
     * @return Id of availability set that the new VM should belong to when a failover is done.
     * 
     */
    public Output<Optional<String>> targetAvailabilitySetId() {
        return Codegen.optional(this.targetAvailabilitySetId);
    }
    /**
     * Id of the storage account which the new VM should used for boot diagnostic when a failover is done.
     * 
     */
    @Export(name="targetBootDiagnosticStorageAccountId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> targetBootDiagnosticStorageAccountId;

    /**
     * @return Id of the storage account which the new VM should used for boot diagnostic when a failover is done.
     * 
     */
    public Output<Optional<String>> targetBootDiagnosticStorageAccountId() {
        return Codegen.optional(this.targetBootDiagnosticStorageAccountId);
    }
    /**
     * Id of the Capacity reservation group where the new VM should belong to when a failover is done.
     * 
     */
    @Export(name="targetCapacityReservationGroupId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> targetCapacityReservationGroupId;

    /**
     * @return Id of the Capacity reservation group where the new VM should belong to when a failover is done.
     * 
     */
    public Output<Optional<String>> targetCapacityReservationGroupId() {
        return Codegen.optional(this.targetCapacityReservationGroupId);
    }
    /**
     * Specifies the Edge Zone within the Azure Region where this Managed Kubernetes Cluster should exist. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="targetEdgeZone", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> targetEdgeZone;

    /**
     * @return Specifies the Edge Zone within the Azure Region where this Managed Kubernetes Cluster should exist. Changing this forces a new resource to be created.
     * 
     */
    public Output<Optional<String>> targetEdgeZone() {
        return Codegen.optional(this.targetEdgeZone);
    }
    /**
     * Network to use when a failover is done (recommended to set if any network_interface is configured for failover).
     * 
     */
    @Export(name="targetNetworkId", refs={String.class}, tree="[0]")
    private Output<String> targetNetworkId;

    /**
     * @return Network to use when a failover is done (recommended to set if any network_interface is configured for failover).
     * 
     */
    public Output<String> targetNetworkId() {
        return this.targetNetworkId;
    }
    /**
     * Id of Proximity Placement Group the new VM should belong to when a failover is done.
     * 
     */
    @Export(name="targetProximityPlacementGroupId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> targetProximityPlacementGroupId;

    /**
     * @return Id of Proximity Placement Group the new VM should belong to when a failover is done.
     * 
     */
    public Output<Optional<String>> targetProximityPlacementGroupId() {
        return Codegen.optional(this.targetProximityPlacementGroupId);
    }
    /**
     * Id of fabric where the VM replication should be handled when a failover is done. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="targetRecoveryFabricId", refs={String.class}, tree="[0]")
    private Output<String> targetRecoveryFabricId;

    /**
     * @return Id of fabric where the VM replication should be handled when a failover is done. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> targetRecoveryFabricId() {
        return this.targetRecoveryFabricId;
    }
    /**
     * Id of protection container where the VM replication should be created when a failover is done. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="targetRecoveryProtectionContainerId", refs={String.class}, tree="[0]")
    private Output<String> targetRecoveryProtectionContainerId;

    /**
     * @return Id of protection container where the VM replication should be created when a failover is done. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> targetRecoveryProtectionContainerId() {
        return this.targetRecoveryProtectionContainerId;
    }
    /**
     * Id of resource group where the VM should be created when a failover is done. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="targetResourceGroupId", refs={String.class}, tree="[0]")
    private Output<String> targetResourceGroupId;

    /**
     * @return Id of resource group where the VM should be created when a failover is done. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> targetResourceGroupId() {
        return this.targetResourceGroupId;
    }
    /**
     * Id of the Virtual Machine Scale Set which the new Vm should belong to when a failover is done.
     * 
     */
    @Export(name="targetVirtualMachineScaleSetId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> targetVirtualMachineScaleSetId;

    /**
     * @return Id of the Virtual Machine Scale Set which the new Vm should belong to when a failover is done.
     * 
     */
    public Output<Optional<String>> targetVirtualMachineScaleSetId() {
        return Codegen.optional(this.targetVirtualMachineScaleSetId);
    }
    /**
     * Specifies the size the Virtual Machine should have.
     * 
     */
    @Export(name="targetVirtualMachineSize", refs={String.class}, tree="[0]")
    private Output<String> targetVirtualMachineSize;

    /**
     * @return Specifies the size the Virtual Machine should have.
     * 
     */
    public Output<String> targetVirtualMachineSize() {
        return this.targetVirtualMachineSize;
    }
    /**
     * Specifies the Availability Zone where the Failover VM should exist. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="targetZone", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> targetZone;

    /**
     * @return Specifies the Availability Zone where the Failover VM should exist. Changing this forces a new resource to be created.
     * 
     */
    public Output<Optional<String>> targetZone() {
        return Codegen.optional(this.targetZone);
    }
    /**
     * Network to use when a test failover is done.
     * 
     */
    @Export(name="testNetworkId", refs={String.class}, tree="[0]")
    private Output<String> testNetworkId;

    /**
     * @return Network to use when a test failover is done.
     * 
     */
    public Output<String> testNetworkId() {
        return this.testNetworkId;
    }
    /**
     * One or more `unmanaged_disk` block as defined below. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="unmanagedDisks", refs={List.class,ReplicatedVMUnmanagedDisk.class}, tree="[0,1]")
    private Output<List<ReplicatedVMUnmanagedDisk>> unmanagedDisks;

    /**
     * @return One or more `unmanaged_disk` block as defined below. Changing this forces a new resource to be created.
     * 
     */
    public Output<List<ReplicatedVMUnmanagedDisk>> unmanagedDisks() {
        return this.unmanagedDisks;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ReplicatedVM(java.lang.String name) {
        this(name, ReplicatedVMArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ReplicatedVM(java.lang.String name, ReplicatedVMArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ReplicatedVM(java.lang.String name, ReplicatedVMArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:siterecovery/replicatedVM:ReplicatedVM", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private ReplicatedVM(java.lang.String name, Output<java.lang.String> id, @Nullable ReplicatedVMState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:siterecovery/replicatedVM:ReplicatedVM", name, state, makeResourceOptions(options, id), false);
    }

    private static ReplicatedVMArgs makeArgs(ReplicatedVMArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ReplicatedVMArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ReplicatedVM get(java.lang.String name, Output<java.lang.String> id, @Nullable ReplicatedVMState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ReplicatedVM(name, id, state, options);
    }
}
