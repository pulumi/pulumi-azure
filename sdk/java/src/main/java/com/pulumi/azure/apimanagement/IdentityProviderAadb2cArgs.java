// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.apimanagement;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IdentityProviderAadb2cArgs extends com.pulumi.resources.ResourceArgs {

    public static final IdentityProviderAadb2cArgs Empty = new IdentityProviderAadb2cArgs();

    /**
     * The allowed AAD tenant, usually your B2C tenant domain.
     * 
     */
    @Import(name="allowedTenant", required=true)
    private Output<String> allowedTenant;

    /**
     * @return The allowed AAD tenant, usually your B2C tenant domain.
     * 
     */
    public Output<String> allowedTenant() {
        return this.allowedTenant;
    }

    /**
     * The Name of the API Management Service where this AAD Identity Provider should be created. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="apiManagementName", required=true)
    private Output<String> apiManagementName;

    /**
     * @return The Name of the API Management Service where this AAD Identity Provider should be created. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> apiManagementName() {
        return this.apiManagementName;
    }

    /**
     * OpenID Connect discovery endpoint hostname, usually your b2clogin.com domain.
     * 
     */
    @Import(name="authority", required=true)
    private Output<String> authority;

    /**
     * @return OpenID Connect discovery endpoint hostname, usually your b2clogin.com domain.
     * 
     */
    public Output<String> authority() {
        return this.authority;
    }

    /**
     * Client ID of the Application in your B2C tenant.
     * 
     */
    @Import(name="clientId", required=true)
    private Output<String> clientId;

    /**
     * @return Client ID of the Application in your B2C tenant.
     * 
     */
    public Output<String> clientId() {
        return this.clientId;
    }

    /**
     * Client secret of the Application in your B2C tenant.
     * 
     */
    @Import(name="clientSecret", required=true)
    private Output<String> clientSecret;

    /**
     * @return Client secret of the Application in your B2C tenant.
     * 
     */
    public Output<String> clientSecret() {
        return this.clientSecret;
    }

    /**
     * Password reset Policy Name.
     * 
     */
    @Import(name="passwordResetPolicy")
    private @Nullable Output<String> passwordResetPolicy;

    /**
     * @return Password reset Policy Name.
     * 
     */
    public Optional<Output<String>> passwordResetPolicy() {
        return Optional.ofNullable(this.passwordResetPolicy);
    }

    /**
     * Profile editing Policy Name.
     * 
     */
    @Import(name="profileEditingPolicy")
    private @Nullable Output<String> profileEditingPolicy;

    /**
     * @return Profile editing Policy Name.
     * 
     */
    public Optional<Output<String>> profileEditingPolicy() {
        return Optional.ofNullable(this.profileEditingPolicy);
    }

    /**
     * The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Signin Policy Name.
     * 
     */
    @Import(name="signinPolicy", required=true)
    private Output<String> signinPolicy;

    /**
     * @return Signin Policy Name.
     * 
     */
    public Output<String> signinPolicy() {
        return this.signinPolicy;
    }

    /**
     * The tenant to use instead of Common when logging into Active Directory, usually your B2C tenant domain.
     * 
     */
    @Import(name="signinTenant", required=true)
    private Output<String> signinTenant;

    /**
     * @return The tenant to use instead of Common when logging into Active Directory, usually your B2C tenant domain.
     * 
     */
    public Output<String> signinTenant() {
        return this.signinTenant;
    }

    /**
     * Signup Policy Name.
     * 
     */
    @Import(name="signupPolicy", required=true)
    private Output<String> signupPolicy;

    /**
     * @return Signup Policy Name.
     * 
     */
    public Output<String> signupPolicy() {
        return this.signupPolicy;
    }

    private IdentityProviderAadb2cArgs() {}

    private IdentityProviderAadb2cArgs(IdentityProviderAadb2cArgs $) {
        this.allowedTenant = $.allowedTenant;
        this.apiManagementName = $.apiManagementName;
        this.authority = $.authority;
        this.clientId = $.clientId;
        this.clientSecret = $.clientSecret;
        this.passwordResetPolicy = $.passwordResetPolicy;
        this.profileEditingPolicy = $.profileEditingPolicy;
        this.resourceGroupName = $.resourceGroupName;
        this.signinPolicy = $.signinPolicy;
        this.signinTenant = $.signinTenant;
        this.signupPolicy = $.signupPolicy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IdentityProviderAadb2cArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IdentityProviderAadb2cArgs $;

        public Builder() {
            $ = new IdentityProviderAadb2cArgs();
        }

        public Builder(IdentityProviderAadb2cArgs defaults) {
            $ = new IdentityProviderAadb2cArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedTenant The allowed AAD tenant, usually your B2C tenant domain.
         * 
         * @return builder
         * 
         */
        public Builder allowedTenant(Output<String> allowedTenant) {
            $.allowedTenant = allowedTenant;
            return this;
        }

        /**
         * @param allowedTenant The allowed AAD tenant, usually your B2C tenant domain.
         * 
         * @return builder
         * 
         */
        public Builder allowedTenant(String allowedTenant) {
            return allowedTenant(Output.of(allowedTenant));
        }

        /**
         * @param apiManagementName The Name of the API Management Service where this AAD Identity Provider should be created. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder apiManagementName(Output<String> apiManagementName) {
            $.apiManagementName = apiManagementName;
            return this;
        }

        /**
         * @param apiManagementName The Name of the API Management Service where this AAD Identity Provider should be created. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder apiManagementName(String apiManagementName) {
            return apiManagementName(Output.of(apiManagementName));
        }

        /**
         * @param authority OpenID Connect discovery endpoint hostname, usually your b2clogin.com domain.
         * 
         * @return builder
         * 
         */
        public Builder authority(Output<String> authority) {
            $.authority = authority;
            return this;
        }

        /**
         * @param authority OpenID Connect discovery endpoint hostname, usually your b2clogin.com domain.
         * 
         * @return builder
         * 
         */
        public Builder authority(String authority) {
            return authority(Output.of(authority));
        }

        /**
         * @param clientId Client ID of the Application in your B2C tenant.
         * 
         * @return builder
         * 
         */
        public Builder clientId(Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId Client ID of the Application in your B2C tenant.
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param clientSecret Client secret of the Application in your B2C tenant.
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(Output<String> clientSecret) {
            $.clientSecret = clientSecret;
            return this;
        }

        /**
         * @param clientSecret Client secret of the Application in your B2C tenant.
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(String clientSecret) {
            return clientSecret(Output.of(clientSecret));
        }

        /**
         * @param passwordResetPolicy Password reset Policy Name.
         * 
         * @return builder
         * 
         */
        public Builder passwordResetPolicy(@Nullable Output<String> passwordResetPolicy) {
            $.passwordResetPolicy = passwordResetPolicy;
            return this;
        }

        /**
         * @param passwordResetPolicy Password reset Policy Name.
         * 
         * @return builder
         * 
         */
        public Builder passwordResetPolicy(String passwordResetPolicy) {
            return passwordResetPolicy(Output.of(passwordResetPolicy));
        }

        /**
         * @param profileEditingPolicy Profile editing Policy Name.
         * 
         * @return builder
         * 
         */
        public Builder profileEditingPolicy(@Nullable Output<String> profileEditingPolicy) {
            $.profileEditingPolicy = profileEditingPolicy;
            return this;
        }

        /**
         * @param profileEditingPolicy Profile editing Policy Name.
         * 
         * @return builder
         * 
         */
        public Builder profileEditingPolicy(String profileEditingPolicy) {
            return profileEditingPolicy(Output.of(profileEditingPolicy));
        }

        /**
         * @param resourceGroupName The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param signinPolicy Signin Policy Name.
         * 
         * @return builder
         * 
         */
        public Builder signinPolicy(Output<String> signinPolicy) {
            $.signinPolicy = signinPolicy;
            return this;
        }

        /**
         * @param signinPolicy Signin Policy Name.
         * 
         * @return builder
         * 
         */
        public Builder signinPolicy(String signinPolicy) {
            return signinPolicy(Output.of(signinPolicy));
        }

        /**
         * @param signinTenant The tenant to use instead of Common when logging into Active Directory, usually your B2C tenant domain.
         * 
         * @return builder
         * 
         */
        public Builder signinTenant(Output<String> signinTenant) {
            $.signinTenant = signinTenant;
            return this;
        }

        /**
         * @param signinTenant The tenant to use instead of Common when logging into Active Directory, usually your B2C tenant domain.
         * 
         * @return builder
         * 
         */
        public Builder signinTenant(String signinTenant) {
            return signinTenant(Output.of(signinTenant));
        }

        /**
         * @param signupPolicy Signup Policy Name.
         * 
         * @return builder
         * 
         */
        public Builder signupPolicy(Output<String> signupPolicy) {
            $.signupPolicy = signupPolicy;
            return this;
        }

        /**
         * @param signupPolicy Signup Policy Name.
         * 
         * @return builder
         * 
         */
        public Builder signupPolicy(String signupPolicy) {
            return signupPolicy(Output.of(signupPolicy));
        }

        public IdentityProviderAadb2cArgs build() {
            if ($.allowedTenant == null) {
                throw new MissingRequiredPropertyException("IdentityProviderAadb2cArgs", "allowedTenant");
            }
            if ($.apiManagementName == null) {
                throw new MissingRequiredPropertyException("IdentityProviderAadb2cArgs", "apiManagementName");
            }
            if ($.authority == null) {
                throw new MissingRequiredPropertyException("IdentityProviderAadb2cArgs", "authority");
            }
            if ($.clientId == null) {
                throw new MissingRequiredPropertyException("IdentityProviderAadb2cArgs", "clientId");
            }
            if ($.clientSecret == null) {
                throw new MissingRequiredPropertyException("IdentityProviderAadb2cArgs", "clientSecret");
            }
            if ($.resourceGroupName == null) {
                throw new MissingRequiredPropertyException("IdentityProviderAadb2cArgs", "resourceGroupName");
            }
            if ($.signinPolicy == null) {
                throw new MissingRequiredPropertyException("IdentityProviderAadb2cArgs", "signinPolicy");
            }
            if ($.signinTenant == null) {
                throw new MissingRequiredPropertyException("IdentityProviderAadb2cArgs", "signinTenant");
            }
            if ($.signupPolicy == null) {
                throw new MissingRequiredPropertyException("IdentityProviderAadb2cArgs", "signupPolicy");
            }
            return $;
        }
    }

}
