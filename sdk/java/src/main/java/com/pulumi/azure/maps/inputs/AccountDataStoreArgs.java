// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.maps.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AccountDataStoreArgs extends com.pulumi.resources.ResourceArgs {

    public static final AccountDataStoreArgs Empty = new AccountDataStoreArgs();

    /**
     * The ID of the Storage Account that should be linked to this Azure Maps Account.
     * 
     */
    @Import(name="storageAccountId")
    private @Nullable Output<String> storageAccountId;

    /**
     * @return The ID of the Storage Account that should be linked to this Azure Maps Account.
     * 
     */
    public Optional<Output<String>> storageAccountId() {
        return Optional.ofNullable(this.storageAccountId);
    }

    /**
     * The name given to the linked Storage Account.
     * 
     */
    @Import(name="uniqueName", required=true)
    private Output<String> uniqueName;

    /**
     * @return The name given to the linked Storage Account.
     * 
     */
    public Output<String> uniqueName() {
        return this.uniqueName;
    }

    private AccountDataStoreArgs() {}

    private AccountDataStoreArgs(AccountDataStoreArgs $) {
        this.storageAccountId = $.storageAccountId;
        this.uniqueName = $.uniqueName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccountDataStoreArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccountDataStoreArgs $;

        public Builder() {
            $ = new AccountDataStoreArgs();
        }

        public Builder(AccountDataStoreArgs defaults) {
            $ = new AccountDataStoreArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param storageAccountId The ID of the Storage Account that should be linked to this Azure Maps Account.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountId(@Nullable Output<String> storageAccountId) {
            $.storageAccountId = storageAccountId;
            return this;
        }

        /**
         * @param storageAccountId The ID of the Storage Account that should be linked to this Azure Maps Account.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountId(String storageAccountId) {
            return storageAccountId(Output.of(storageAccountId));
        }

        /**
         * @param uniqueName The name given to the linked Storage Account.
         * 
         * @return builder
         * 
         */
        public Builder uniqueName(Output<String> uniqueName) {
            $.uniqueName = uniqueName;
            return this;
        }

        /**
         * @param uniqueName The name given to the linked Storage Account.
         * 
         * @return builder
         * 
         */
        public Builder uniqueName(String uniqueName) {
            return uniqueName(Output.of(uniqueName));
        }

        public AccountDataStoreArgs build() {
            if ($.uniqueName == null) {
                throw new MissingRequiredPropertyException("AccountDataStoreArgs", "uniqueName");
            }
            return $;
        }
    }

}
