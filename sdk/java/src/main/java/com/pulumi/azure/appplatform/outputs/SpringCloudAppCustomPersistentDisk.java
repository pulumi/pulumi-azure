// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appplatform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SpringCloudAppCustomPersistentDisk {
    /**
     * @return These are the mount options for a persistent disk.
     * 
     */
    private @Nullable List<String> mountOptions;
    /**
     * @return The mount path of the persistent disk.
     * 
     */
    private String mountPath;
    /**
     * @return Indicates whether the persistent disk is a readOnly one.
     * 
     */
    private @Nullable Boolean readOnlyEnabled;
    /**
     * @return The share name of the Azure File share.
     * 
     */
    private String shareName;
    /**
     * @return The name of the Spring Cloud Storage.
     * 
     */
    private String storageName;

    private SpringCloudAppCustomPersistentDisk() {}
    /**
     * @return These are the mount options for a persistent disk.
     * 
     */
    public List<String> mountOptions() {
        return this.mountOptions == null ? List.of() : this.mountOptions;
    }
    /**
     * @return The mount path of the persistent disk.
     * 
     */
    public String mountPath() {
        return this.mountPath;
    }
    /**
     * @return Indicates whether the persistent disk is a readOnly one.
     * 
     */
    public Optional<Boolean> readOnlyEnabled() {
        return Optional.ofNullable(this.readOnlyEnabled);
    }
    /**
     * @return The share name of the Azure File share.
     * 
     */
    public String shareName() {
        return this.shareName;
    }
    /**
     * @return The name of the Spring Cloud Storage.
     * 
     */
    public String storageName() {
        return this.storageName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SpringCloudAppCustomPersistentDisk defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> mountOptions;
        private String mountPath;
        private @Nullable Boolean readOnlyEnabled;
        private String shareName;
        private String storageName;
        public Builder() {}
        public Builder(SpringCloudAppCustomPersistentDisk defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.mountOptions = defaults.mountOptions;
    	      this.mountPath = defaults.mountPath;
    	      this.readOnlyEnabled = defaults.readOnlyEnabled;
    	      this.shareName = defaults.shareName;
    	      this.storageName = defaults.storageName;
        }

        @CustomType.Setter
        public Builder mountOptions(@Nullable List<String> mountOptions) {

            this.mountOptions = mountOptions;
            return this;
        }
        public Builder mountOptions(String... mountOptions) {
            return mountOptions(List.of(mountOptions));
        }
        @CustomType.Setter
        public Builder mountPath(String mountPath) {
            if (mountPath == null) {
              throw new MissingRequiredPropertyException("SpringCloudAppCustomPersistentDisk", "mountPath");
            }
            this.mountPath = mountPath;
            return this;
        }
        @CustomType.Setter
        public Builder readOnlyEnabled(@Nullable Boolean readOnlyEnabled) {

            this.readOnlyEnabled = readOnlyEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder shareName(String shareName) {
            if (shareName == null) {
              throw new MissingRequiredPropertyException("SpringCloudAppCustomPersistentDisk", "shareName");
            }
            this.shareName = shareName;
            return this;
        }
        @CustomType.Setter
        public Builder storageName(String storageName) {
            if (storageName == null) {
              throw new MissingRequiredPropertyException("SpringCloudAppCustomPersistentDisk", "storageName");
            }
            this.storageName = storageName;
            return this;
        }
        public SpringCloudAppCustomPersistentDisk build() {
            final var _resultValue = new SpringCloudAppCustomPersistentDisk();
            _resultValue.mountOptions = mountOptions;
            _resultValue.mountPath = mountPath;
            _resultValue.readOnlyEnabled = readOnlyEnabled;
            _resultValue.shareName = shareName;
            _resultValue.storageName = storageName;
            return _resultValue;
        }
    }
}
