// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.lighthouse.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DefinitionAuthorizationArgs extends com.pulumi.resources.ResourceArgs {

    public static final DefinitionAuthorizationArgs Empty = new DefinitionAuthorizationArgs();

    /**
     * The set of role definition ids which define all the permissions that the principal id can assign.
     * 
     */
    @Import(name="delegatedRoleDefinitionIds")
    private @Nullable Output<List<String>> delegatedRoleDefinitionIds;

    /**
     * @return The set of role definition ids which define all the permissions that the principal id can assign.
     * 
     */
    public Optional<Output<List<String>>> delegatedRoleDefinitionIds() {
        return Optional.ofNullable(this.delegatedRoleDefinitionIds);
    }

    /**
     * The display name of the security group/service principal/user that would be assigned permissions to the projected subscription.
     * 
     */
    @Import(name="principalDisplayName")
    private @Nullable Output<String> principalDisplayName;

    /**
     * @return The display name of the security group/service principal/user that would be assigned permissions to the projected subscription.
     * 
     */
    public Optional<Output<String>> principalDisplayName() {
        return Optional.ofNullable(this.principalDisplayName);
    }

    /**
     * Principal ID of the security group/service principal/user that would be assigned permissions to the projected subscription.
     * 
     */
    @Import(name="principalId", required=true)
    private Output<String> principalId;

    /**
     * @return Principal ID of the security group/service principal/user that would be assigned permissions to the projected subscription.
     * 
     */
    public Output<String> principalId() {
        return this.principalId;
    }

    /**
     * The role definition identifier. This role will define the permissions that are granted to the principal. This cannot be an `Owner` role.
     * 
     */
    @Import(name="roleDefinitionId", required=true)
    private Output<String> roleDefinitionId;

    /**
     * @return The role definition identifier. This role will define the permissions that are granted to the principal. This cannot be an `Owner` role.
     * 
     */
    public Output<String> roleDefinitionId() {
        return this.roleDefinitionId;
    }

    private DefinitionAuthorizationArgs() {}

    private DefinitionAuthorizationArgs(DefinitionAuthorizationArgs $) {
        this.delegatedRoleDefinitionIds = $.delegatedRoleDefinitionIds;
        this.principalDisplayName = $.principalDisplayName;
        this.principalId = $.principalId;
        this.roleDefinitionId = $.roleDefinitionId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DefinitionAuthorizationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DefinitionAuthorizationArgs $;

        public Builder() {
            $ = new DefinitionAuthorizationArgs();
        }

        public Builder(DefinitionAuthorizationArgs defaults) {
            $ = new DefinitionAuthorizationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param delegatedRoleDefinitionIds The set of role definition ids which define all the permissions that the principal id can assign.
         * 
         * @return builder
         * 
         */
        public Builder delegatedRoleDefinitionIds(@Nullable Output<List<String>> delegatedRoleDefinitionIds) {
            $.delegatedRoleDefinitionIds = delegatedRoleDefinitionIds;
            return this;
        }

        /**
         * @param delegatedRoleDefinitionIds The set of role definition ids which define all the permissions that the principal id can assign.
         * 
         * @return builder
         * 
         */
        public Builder delegatedRoleDefinitionIds(List<String> delegatedRoleDefinitionIds) {
            return delegatedRoleDefinitionIds(Output.of(delegatedRoleDefinitionIds));
        }

        /**
         * @param delegatedRoleDefinitionIds The set of role definition ids which define all the permissions that the principal id can assign.
         * 
         * @return builder
         * 
         */
        public Builder delegatedRoleDefinitionIds(String... delegatedRoleDefinitionIds) {
            return delegatedRoleDefinitionIds(List.of(delegatedRoleDefinitionIds));
        }

        /**
         * @param principalDisplayName The display name of the security group/service principal/user that would be assigned permissions to the projected subscription.
         * 
         * @return builder
         * 
         */
        public Builder principalDisplayName(@Nullable Output<String> principalDisplayName) {
            $.principalDisplayName = principalDisplayName;
            return this;
        }

        /**
         * @param principalDisplayName The display name of the security group/service principal/user that would be assigned permissions to the projected subscription.
         * 
         * @return builder
         * 
         */
        public Builder principalDisplayName(String principalDisplayName) {
            return principalDisplayName(Output.of(principalDisplayName));
        }

        /**
         * @param principalId Principal ID of the security group/service principal/user that would be assigned permissions to the projected subscription.
         * 
         * @return builder
         * 
         */
        public Builder principalId(Output<String> principalId) {
            $.principalId = principalId;
            return this;
        }

        /**
         * @param principalId Principal ID of the security group/service principal/user that would be assigned permissions to the projected subscription.
         * 
         * @return builder
         * 
         */
        public Builder principalId(String principalId) {
            return principalId(Output.of(principalId));
        }

        /**
         * @param roleDefinitionId The role definition identifier. This role will define the permissions that are granted to the principal. This cannot be an `Owner` role.
         * 
         * @return builder
         * 
         */
        public Builder roleDefinitionId(Output<String> roleDefinitionId) {
            $.roleDefinitionId = roleDefinitionId;
            return this;
        }

        /**
         * @param roleDefinitionId The role definition identifier. This role will define the permissions that are granted to the principal. This cannot be an `Owner` role.
         * 
         * @return builder
         * 
         */
        public Builder roleDefinitionId(String roleDefinitionId) {
            return roleDefinitionId(Output.of(roleDefinitionId));
        }

        public DefinitionAuthorizationArgs build() {
            if ($.principalId == null) {
                throw new MissingRequiredPropertyException("DefinitionAuthorizationArgs", "principalId");
            }
            if ($.roleDefinitionId == null) {
                throw new MissingRequiredPropertyException("DefinitionAuthorizationArgs", "roleDefinitionId");
            }
            return $;
        }
    }

}
