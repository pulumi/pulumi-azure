// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetSharedImageGalleryResult {
    /**
     * @return A description for the Shared Image Gallery.
     * 
     */
    private String description;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return A list of Shared Image names within this Shared Image Gallery.
     * 
     */
    private List<String> imageNames;
    private String location;
    private String name;
    private String resourceGroupName;
    /**
     * @return A mapping of tags which are assigned to the Shared Image Gallery.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return The unique name assigned to the Shared Image Gallery.
     * 
     */
    private String uniqueName;

    private GetSharedImageGalleryResult() {}
    /**
     * @return A description for the Shared Image Gallery.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A list of Shared Image names within this Shared Image Gallery.
     * 
     */
    public List<String> imageNames() {
        return this.imageNames;
    }
    public String location() {
        return this.location;
    }
    public String name() {
        return this.name;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return A mapping of tags which are assigned to the Shared Image Gallery.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return The unique name assigned to the Shared Image Gallery.
     * 
     */
    public String uniqueName() {
        return this.uniqueName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSharedImageGalleryResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String description;
        private String id;
        private List<String> imageNames;
        private String location;
        private String name;
        private String resourceGroupName;
        private Map<String,String> tags;
        private String uniqueName;
        public Builder() {}
        public Builder(GetSharedImageGalleryResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.imageNames = defaults.imageNames;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.tags = defaults.tags;
    	      this.uniqueName = defaults.uniqueName;
        }

        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetSharedImageGalleryResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSharedImageGalleryResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder imageNames(List<String> imageNames) {
            if (imageNames == null) {
              throw new MissingRequiredPropertyException("GetSharedImageGalleryResult", "imageNames");
            }
            this.imageNames = imageNames;
            return this;
        }
        public Builder imageNames(String... imageNames) {
            return imageNames(List.of(imageNames));
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetSharedImageGalleryResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetSharedImageGalleryResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            if (resourceGroupName == null) {
              throw new MissingRequiredPropertyException("GetSharedImageGalleryResult", "resourceGroupName");
            }
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetSharedImageGalleryResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder uniqueName(String uniqueName) {
            if (uniqueName == null) {
              throw new MissingRequiredPropertyException("GetSharedImageGalleryResult", "uniqueName");
            }
            this.uniqueName = uniqueName;
            return this;
        }
        public GetSharedImageGalleryResult build() {
            final var _resultValue = new GetSharedImageGalleryResult();
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.imageNames = imageNames;
            _resultValue.location = location;
            _resultValue.name = name;
            _resultValue.resourceGroupName = resourceGroupName;
            _resultValue.tags = tags;
            _resultValue.uniqueName = uniqueName;
            return _resultValue;
        }
    }
}
