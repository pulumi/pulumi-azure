// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerservice.inputs;

import com.pulumi.azure.containerservice.inputs.KubernetesClusterMaintenanceWindowNodeOsNotAllowedArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KubernetesClusterMaintenanceWindowNodeOsArgs extends com.pulumi.resources.ResourceArgs {

    public static final KubernetesClusterMaintenanceWindowNodeOsArgs Empty = new KubernetesClusterMaintenanceWindowNodeOsArgs();

    /**
     * The day of the month for the maintenance run. Required in combination with RelativeMonthly frequency. Value between 0 and 31 (inclusive).
     * 
     */
    @Import(name="dayOfMonth")
    private @Nullable Output<Integer> dayOfMonth;

    /**
     * @return The day of the month for the maintenance run. Required in combination with RelativeMonthly frequency. Value between 0 and 31 (inclusive).
     * 
     */
    public Optional<Output<Integer>> dayOfMonth() {
        return Optional.ofNullable(this.dayOfMonth);
    }

    /**
     * The day of the week for the maintenance run. Required in combination with weekly frequency. Possible values are `Friday`, `Monday`, `Saturday`, `Sunday`, `Thursday`, `Tuesday` and `Wednesday`.
     * 
     */
    @Import(name="dayOfWeek")
    private @Nullable Output<String> dayOfWeek;

    /**
     * @return The day of the week for the maintenance run. Required in combination with weekly frequency. Possible values are `Friday`, `Monday`, `Saturday`, `Sunday`, `Thursday`, `Tuesday` and `Wednesday`.
     * 
     */
    public Optional<Output<String>> dayOfWeek() {
        return Optional.ofNullable(this.dayOfWeek);
    }

    /**
     * The duration of the window for maintenance to run in hours.
     * 
     */
    @Import(name="duration", required=true)
    private Output<Integer> duration;

    /**
     * @return The duration of the window for maintenance to run in hours.
     * 
     */
    public Output<Integer> duration() {
        return this.duration;
    }

    /**
     * Frequency of maintenance. Possible options are `Daily`, `Weekly`, `AbsoluteMonthly` and `RelativeMonthly`.
     * 
     */
    @Import(name="frequency", required=true)
    private Output<String> frequency;

    /**
     * @return Frequency of maintenance. Possible options are `Daily`, `Weekly`, `AbsoluteMonthly` and `RelativeMonthly`.
     * 
     */
    public Output<String> frequency() {
        return this.frequency;
    }

    /**
     * The interval for maintenance runs. Depending on the frequency this interval is week or month based.
     * 
     */
    @Import(name="interval", required=true)
    private Output<Integer> interval;

    /**
     * @return The interval for maintenance runs. Depending on the frequency this interval is week or month based.
     * 
     */
    public Output<Integer> interval() {
        return this.interval;
    }

    /**
     * One or more `not_allowed` block as defined below.
     * 
     */
    @Import(name="notAlloweds")
    private @Nullable Output<List<KubernetesClusterMaintenanceWindowNodeOsNotAllowedArgs>> notAlloweds;

    /**
     * @return One or more `not_allowed` block as defined below.
     * 
     */
    public Optional<Output<List<KubernetesClusterMaintenanceWindowNodeOsNotAllowedArgs>>> notAlloweds() {
        return Optional.ofNullable(this.notAlloweds);
    }

    /**
     * The date on which the maintenance window begins to take effect.
     * 
     */
    @Import(name="startDate")
    private @Nullable Output<String> startDate;

    /**
     * @return The date on which the maintenance window begins to take effect.
     * 
     */
    public Optional<Output<String>> startDate() {
        return Optional.ofNullable(this.startDate);
    }

    /**
     * The time for maintenance to begin, based on the timezone determined by `utc_offset`. Format is `HH:mm`.
     * 
     */
    @Import(name="startTime")
    private @Nullable Output<String> startTime;

    /**
     * @return The time for maintenance to begin, based on the timezone determined by `utc_offset`. Format is `HH:mm`.
     * 
     */
    public Optional<Output<String>> startTime() {
        return Optional.ofNullable(this.startTime);
    }

    /**
     * Used to determine the timezone for cluster maintenance.
     * 
     */
    @Import(name="utcOffset")
    private @Nullable Output<String> utcOffset;

    /**
     * @return Used to determine the timezone for cluster maintenance.
     * 
     */
    public Optional<Output<String>> utcOffset() {
        return Optional.ofNullable(this.utcOffset);
    }

    /**
     * The week in the month used for the maintenance run. Options are `First`, `Second`, `Third`, `Fourth`, and `Last`.
     * 
     */
    @Import(name="weekIndex")
    private @Nullable Output<String> weekIndex;

    /**
     * @return The week in the month used for the maintenance run. Options are `First`, `Second`, `Third`, `Fourth`, and `Last`.
     * 
     */
    public Optional<Output<String>> weekIndex() {
        return Optional.ofNullable(this.weekIndex);
    }

    private KubernetesClusterMaintenanceWindowNodeOsArgs() {}

    private KubernetesClusterMaintenanceWindowNodeOsArgs(KubernetesClusterMaintenanceWindowNodeOsArgs $) {
        this.dayOfMonth = $.dayOfMonth;
        this.dayOfWeek = $.dayOfWeek;
        this.duration = $.duration;
        this.frequency = $.frequency;
        this.interval = $.interval;
        this.notAlloweds = $.notAlloweds;
        this.startDate = $.startDate;
        this.startTime = $.startTime;
        this.utcOffset = $.utcOffset;
        this.weekIndex = $.weekIndex;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KubernetesClusterMaintenanceWindowNodeOsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KubernetesClusterMaintenanceWindowNodeOsArgs $;

        public Builder() {
            $ = new KubernetesClusterMaintenanceWindowNodeOsArgs();
        }

        public Builder(KubernetesClusterMaintenanceWindowNodeOsArgs defaults) {
            $ = new KubernetesClusterMaintenanceWindowNodeOsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dayOfMonth The day of the month for the maintenance run. Required in combination with RelativeMonthly frequency. Value between 0 and 31 (inclusive).
         * 
         * @return builder
         * 
         */
        public Builder dayOfMonth(@Nullable Output<Integer> dayOfMonth) {
            $.dayOfMonth = dayOfMonth;
            return this;
        }

        /**
         * @param dayOfMonth The day of the month for the maintenance run. Required in combination with RelativeMonthly frequency. Value between 0 and 31 (inclusive).
         * 
         * @return builder
         * 
         */
        public Builder dayOfMonth(Integer dayOfMonth) {
            return dayOfMonth(Output.of(dayOfMonth));
        }

        /**
         * @param dayOfWeek The day of the week for the maintenance run. Required in combination with weekly frequency. Possible values are `Friday`, `Monday`, `Saturday`, `Sunday`, `Thursday`, `Tuesday` and `Wednesday`.
         * 
         * @return builder
         * 
         */
        public Builder dayOfWeek(@Nullable Output<String> dayOfWeek) {
            $.dayOfWeek = dayOfWeek;
            return this;
        }

        /**
         * @param dayOfWeek The day of the week for the maintenance run. Required in combination with weekly frequency. Possible values are `Friday`, `Monday`, `Saturday`, `Sunday`, `Thursday`, `Tuesday` and `Wednesday`.
         * 
         * @return builder
         * 
         */
        public Builder dayOfWeek(String dayOfWeek) {
            return dayOfWeek(Output.of(dayOfWeek));
        }

        /**
         * @param duration The duration of the window for maintenance to run in hours.
         * 
         * @return builder
         * 
         */
        public Builder duration(Output<Integer> duration) {
            $.duration = duration;
            return this;
        }

        /**
         * @param duration The duration of the window for maintenance to run in hours.
         * 
         * @return builder
         * 
         */
        public Builder duration(Integer duration) {
            return duration(Output.of(duration));
        }

        /**
         * @param frequency Frequency of maintenance. Possible options are `Daily`, `Weekly`, `AbsoluteMonthly` and `RelativeMonthly`.
         * 
         * @return builder
         * 
         */
        public Builder frequency(Output<String> frequency) {
            $.frequency = frequency;
            return this;
        }

        /**
         * @param frequency Frequency of maintenance. Possible options are `Daily`, `Weekly`, `AbsoluteMonthly` and `RelativeMonthly`.
         * 
         * @return builder
         * 
         */
        public Builder frequency(String frequency) {
            return frequency(Output.of(frequency));
        }

        /**
         * @param interval The interval for maintenance runs. Depending on the frequency this interval is week or month based.
         * 
         * @return builder
         * 
         */
        public Builder interval(Output<Integer> interval) {
            $.interval = interval;
            return this;
        }

        /**
         * @param interval The interval for maintenance runs. Depending on the frequency this interval is week or month based.
         * 
         * @return builder
         * 
         */
        public Builder interval(Integer interval) {
            return interval(Output.of(interval));
        }

        /**
         * @param notAlloweds One or more `not_allowed` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder notAlloweds(@Nullable Output<List<KubernetesClusterMaintenanceWindowNodeOsNotAllowedArgs>> notAlloweds) {
            $.notAlloweds = notAlloweds;
            return this;
        }

        /**
         * @param notAlloweds One or more `not_allowed` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder notAlloweds(List<KubernetesClusterMaintenanceWindowNodeOsNotAllowedArgs> notAlloweds) {
            return notAlloweds(Output.of(notAlloweds));
        }

        /**
         * @param notAlloweds One or more `not_allowed` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder notAlloweds(KubernetesClusterMaintenanceWindowNodeOsNotAllowedArgs... notAlloweds) {
            return notAlloweds(List.of(notAlloweds));
        }

        /**
         * @param startDate The date on which the maintenance window begins to take effect.
         * 
         * @return builder
         * 
         */
        public Builder startDate(@Nullable Output<String> startDate) {
            $.startDate = startDate;
            return this;
        }

        /**
         * @param startDate The date on which the maintenance window begins to take effect.
         * 
         * @return builder
         * 
         */
        public Builder startDate(String startDate) {
            return startDate(Output.of(startDate));
        }

        /**
         * @param startTime The time for maintenance to begin, based on the timezone determined by `utc_offset`. Format is `HH:mm`.
         * 
         * @return builder
         * 
         */
        public Builder startTime(@Nullable Output<String> startTime) {
            $.startTime = startTime;
            return this;
        }

        /**
         * @param startTime The time for maintenance to begin, based on the timezone determined by `utc_offset`. Format is `HH:mm`.
         * 
         * @return builder
         * 
         */
        public Builder startTime(String startTime) {
            return startTime(Output.of(startTime));
        }

        /**
         * @param utcOffset Used to determine the timezone for cluster maintenance.
         * 
         * @return builder
         * 
         */
        public Builder utcOffset(@Nullable Output<String> utcOffset) {
            $.utcOffset = utcOffset;
            return this;
        }

        /**
         * @param utcOffset Used to determine the timezone for cluster maintenance.
         * 
         * @return builder
         * 
         */
        public Builder utcOffset(String utcOffset) {
            return utcOffset(Output.of(utcOffset));
        }

        /**
         * @param weekIndex The week in the month used for the maintenance run. Options are `First`, `Second`, `Third`, `Fourth`, and `Last`.
         * 
         * @return builder
         * 
         */
        public Builder weekIndex(@Nullable Output<String> weekIndex) {
            $.weekIndex = weekIndex;
            return this;
        }

        /**
         * @param weekIndex The week in the month used for the maintenance run. Options are `First`, `Second`, `Third`, `Fourth`, and `Last`.
         * 
         * @return builder
         * 
         */
        public Builder weekIndex(String weekIndex) {
            return weekIndex(Output.of(weekIndex));
        }

        public KubernetesClusterMaintenanceWindowNodeOsArgs build() {
            $.duration = Objects.requireNonNull($.duration, "expected parameter 'duration' to be non-null");
            $.frequency = Objects.requireNonNull($.frequency, "expected parameter 'frequency' to be non-null");
            $.interval = Objects.requireNonNull($.interval, "expected parameter 'interval' to be non-null");
            return $;
        }
    }

}
