// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appservice.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetServicePlanResult {
    /**
     * @return The ID of the App Service Environment this Service Plan is part of.
     * 
     */
    private String appServiceEnvironmentId;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return A string representing the Kind of Service Plan.
     * 
     */
    private String kind;
    /**
     * @return The Azure Region where the Service Plan exists.
     * 
     */
    private String location;
    /**
     * @return The maximum number of workers in use in an Elastic SKU Plan.
     * 
     */
    private Integer maximumElasticWorkerCount;
    private String name;
    /**
     * @return The O/S type for the App Services hosted in this plan.
     * 
     */
    private String osType;
    /**
     * @return Is Per Site Scaling be enabled?
     * 
     */
    private Boolean perSiteScalingEnabled;
    /**
     * @return Whether this is a reserved Service Plan Type. `true` if `os_type` is `Linux`, otherwise `false`.
     * 
     */
    private Boolean reserved;
    private String resourceGroupName;
    /**
     * @return The SKU for the Service Plan.
     * 
     */
    private String skuName;
    /**
     * @return A mapping of tags assigned to the Service Plan.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return The number of Workers (instances) allocated.
     * 
     */
    private Integer workerCount;
    /**
     * @return Is the Service Plan balance across Availability Zones in the region?
     * 
     */
    private Boolean zoneBalancingEnabled;

    private GetServicePlanResult() {}
    /**
     * @return The ID of the App Service Environment this Service Plan is part of.
     * 
     */
    public String appServiceEnvironmentId() {
        return this.appServiceEnvironmentId;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A string representing the Kind of Service Plan.
     * 
     */
    public String kind() {
        return this.kind;
    }
    /**
     * @return The Azure Region where the Service Plan exists.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return The maximum number of workers in use in an Elastic SKU Plan.
     * 
     */
    public Integer maximumElasticWorkerCount() {
        return this.maximumElasticWorkerCount;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return The O/S type for the App Services hosted in this plan.
     * 
     */
    public String osType() {
        return this.osType;
    }
    /**
     * @return Is Per Site Scaling be enabled?
     * 
     */
    public Boolean perSiteScalingEnabled() {
        return this.perSiteScalingEnabled;
    }
    /**
     * @return Whether this is a reserved Service Plan Type. `true` if `os_type` is `Linux`, otherwise `false`.
     * 
     */
    public Boolean reserved() {
        return this.reserved;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return The SKU for the Service Plan.
     * 
     */
    public String skuName() {
        return this.skuName;
    }
    /**
     * @return A mapping of tags assigned to the Service Plan.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return The number of Workers (instances) allocated.
     * 
     */
    public Integer workerCount() {
        return this.workerCount;
    }
    /**
     * @return Is the Service Plan balance across Availability Zones in the region?
     * 
     */
    public Boolean zoneBalancingEnabled() {
        return this.zoneBalancingEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServicePlanResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String appServiceEnvironmentId;
        private String id;
        private String kind;
        private String location;
        private Integer maximumElasticWorkerCount;
        private String name;
        private String osType;
        private Boolean perSiteScalingEnabled;
        private Boolean reserved;
        private String resourceGroupName;
        private String skuName;
        private Map<String,String> tags;
        private Integer workerCount;
        private Boolean zoneBalancingEnabled;
        public Builder() {}
        public Builder(GetServicePlanResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appServiceEnvironmentId = defaults.appServiceEnvironmentId;
    	      this.id = defaults.id;
    	      this.kind = defaults.kind;
    	      this.location = defaults.location;
    	      this.maximumElasticWorkerCount = defaults.maximumElasticWorkerCount;
    	      this.name = defaults.name;
    	      this.osType = defaults.osType;
    	      this.perSiteScalingEnabled = defaults.perSiteScalingEnabled;
    	      this.reserved = defaults.reserved;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.skuName = defaults.skuName;
    	      this.tags = defaults.tags;
    	      this.workerCount = defaults.workerCount;
    	      this.zoneBalancingEnabled = defaults.zoneBalancingEnabled;
        }

        @CustomType.Setter
        public Builder appServiceEnvironmentId(String appServiceEnvironmentId) {
            if (appServiceEnvironmentId == null) {
              throw new MissingRequiredPropertyException("GetServicePlanResult", "appServiceEnvironmentId");
            }
            this.appServiceEnvironmentId = appServiceEnvironmentId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetServicePlanResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder kind(String kind) {
            if (kind == null) {
              throw new MissingRequiredPropertyException("GetServicePlanResult", "kind");
            }
            this.kind = kind;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetServicePlanResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder maximumElasticWorkerCount(Integer maximumElasticWorkerCount) {
            if (maximumElasticWorkerCount == null) {
              throw new MissingRequiredPropertyException("GetServicePlanResult", "maximumElasticWorkerCount");
            }
            this.maximumElasticWorkerCount = maximumElasticWorkerCount;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetServicePlanResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder osType(String osType) {
            if (osType == null) {
              throw new MissingRequiredPropertyException("GetServicePlanResult", "osType");
            }
            this.osType = osType;
            return this;
        }
        @CustomType.Setter
        public Builder perSiteScalingEnabled(Boolean perSiteScalingEnabled) {
            if (perSiteScalingEnabled == null) {
              throw new MissingRequiredPropertyException("GetServicePlanResult", "perSiteScalingEnabled");
            }
            this.perSiteScalingEnabled = perSiteScalingEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder reserved(Boolean reserved) {
            if (reserved == null) {
              throw new MissingRequiredPropertyException("GetServicePlanResult", "reserved");
            }
            this.reserved = reserved;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            if (resourceGroupName == null) {
              throw new MissingRequiredPropertyException("GetServicePlanResult", "resourceGroupName");
            }
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder skuName(String skuName) {
            if (skuName == null) {
              throw new MissingRequiredPropertyException("GetServicePlanResult", "skuName");
            }
            this.skuName = skuName;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetServicePlanResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder workerCount(Integer workerCount) {
            if (workerCount == null) {
              throw new MissingRequiredPropertyException("GetServicePlanResult", "workerCount");
            }
            this.workerCount = workerCount;
            return this;
        }
        @CustomType.Setter
        public Builder zoneBalancingEnabled(Boolean zoneBalancingEnabled) {
            if (zoneBalancingEnabled == null) {
              throw new MissingRequiredPropertyException("GetServicePlanResult", "zoneBalancingEnabled");
            }
            this.zoneBalancingEnabled = zoneBalancingEnabled;
            return this;
        }
        public GetServicePlanResult build() {
            final var _resultValue = new GetServicePlanResult();
            _resultValue.appServiceEnvironmentId = appServiceEnvironmentId;
            _resultValue.id = id;
            _resultValue.kind = kind;
            _resultValue.location = location;
            _resultValue.maximumElasticWorkerCount = maximumElasticWorkerCount;
            _resultValue.name = name;
            _resultValue.osType = osType;
            _resultValue.perSiteScalingEnabled = perSiteScalingEnabled;
            _resultValue.reserved = reserved;
            _resultValue.resourceGroupName = resourceGroupName;
            _resultValue.skuName = skuName;
            _resultValue.tags = tags;
            _resultValue.workerCount = workerCount;
            _resultValue.zoneBalancingEnabled = zoneBalancingEnabled;
            return _resultValue;
        }
    }
}
