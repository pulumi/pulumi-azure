// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.media.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamingPolicyCommonEncryptionCbcsDrmFairplayArgs extends com.pulumi.resources.ResourceArgs {

    public static final StreamingPolicyCommonEncryptionCbcsDrmFairplayArgs Empty = new StreamingPolicyCommonEncryptionCbcsDrmFairplayArgs();

    /**
     * All license to be persistent or not. Changing this forces a new Streaming Policy to be created.
     * 
     */
    @Import(name="allowPersistentLicense")
    private @Nullable Output<Boolean> allowPersistentLicense;

    /**
     * @return All license to be persistent or not. Changing this forces a new Streaming Policy to be created.
     * 
     */
    public Optional<Output<Boolean>> allowPersistentLicense() {
        return Optional.ofNullable(this.allowPersistentLicense);
    }

    /**
     * Template for the URL of the custom service delivering licenses to end user players. Not required when using Azure Media Services for issuing licenses. The template supports replaceable tokens that the service will update at runtime with the value specific to the request. The currently supported token values are `{AlternativeMediaId}`, which is replaced with the value of `StreamingLocatorId.AlternativeMediaId`, and `{ContentKeyId}`, which is replaced with the value of identifier of the key being requested. Changing this forces a new Streaming Policy to be created.
     * 
     */
    @Import(name="customLicenseAcquisitionUrlTemplate")
    private @Nullable Output<String> customLicenseAcquisitionUrlTemplate;

    /**
     * @return Template for the URL of the custom service delivering licenses to end user players. Not required when using Azure Media Services for issuing licenses. The template supports replaceable tokens that the service will update at runtime with the value specific to the request. The currently supported token values are `{AlternativeMediaId}`, which is replaced with the value of `StreamingLocatorId.AlternativeMediaId`, and `{ContentKeyId}`, which is replaced with the value of identifier of the key being requested. Changing this forces a new Streaming Policy to be created.
     * 
     */
    public Optional<Output<String>> customLicenseAcquisitionUrlTemplate() {
        return Optional.ofNullable(this.customLicenseAcquisitionUrlTemplate);
    }

    private StreamingPolicyCommonEncryptionCbcsDrmFairplayArgs() {}

    private StreamingPolicyCommonEncryptionCbcsDrmFairplayArgs(StreamingPolicyCommonEncryptionCbcsDrmFairplayArgs $) {
        this.allowPersistentLicense = $.allowPersistentLicense;
        this.customLicenseAcquisitionUrlTemplate = $.customLicenseAcquisitionUrlTemplate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamingPolicyCommonEncryptionCbcsDrmFairplayArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamingPolicyCommonEncryptionCbcsDrmFairplayArgs $;

        public Builder() {
            $ = new StreamingPolicyCommonEncryptionCbcsDrmFairplayArgs();
        }

        public Builder(StreamingPolicyCommonEncryptionCbcsDrmFairplayArgs defaults) {
            $ = new StreamingPolicyCommonEncryptionCbcsDrmFairplayArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowPersistentLicense All license to be persistent or not. Changing this forces a new Streaming Policy to be created.
         * 
         * @return builder
         * 
         */
        public Builder allowPersistentLicense(@Nullable Output<Boolean> allowPersistentLicense) {
            $.allowPersistentLicense = allowPersistentLicense;
            return this;
        }

        /**
         * @param allowPersistentLicense All license to be persistent or not. Changing this forces a new Streaming Policy to be created.
         * 
         * @return builder
         * 
         */
        public Builder allowPersistentLicense(Boolean allowPersistentLicense) {
            return allowPersistentLicense(Output.of(allowPersistentLicense));
        }

        /**
         * @param customLicenseAcquisitionUrlTemplate Template for the URL of the custom service delivering licenses to end user players. Not required when using Azure Media Services for issuing licenses. The template supports replaceable tokens that the service will update at runtime with the value specific to the request. The currently supported token values are `{AlternativeMediaId}`, which is replaced with the value of `StreamingLocatorId.AlternativeMediaId`, and `{ContentKeyId}`, which is replaced with the value of identifier of the key being requested. Changing this forces a new Streaming Policy to be created.
         * 
         * @return builder
         * 
         */
        public Builder customLicenseAcquisitionUrlTemplate(@Nullable Output<String> customLicenseAcquisitionUrlTemplate) {
            $.customLicenseAcquisitionUrlTemplate = customLicenseAcquisitionUrlTemplate;
            return this;
        }

        /**
         * @param customLicenseAcquisitionUrlTemplate Template for the URL of the custom service delivering licenses to end user players. Not required when using Azure Media Services for issuing licenses. The template supports replaceable tokens that the service will update at runtime with the value specific to the request. The currently supported token values are `{AlternativeMediaId}`, which is replaced with the value of `StreamingLocatorId.AlternativeMediaId`, and `{ContentKeyId}`, which is replaced with the value of identifier of the key being requested. Changing this forces a new Streaming Policy to be created.
         * 
         * @return builder
         * 
         */
        public Builder customLicenseAcquisitionUrlTemplate(String customLicenseAcquisitionUrlTemplate) {
            return customLicenseAcquisitionUrlTemplate(Output.of(customLicenseAcquisitionUrlTemplate));
        }

        public StreamingPolicyCommonEncryptionCbcsDrmFairplayArgs build() {
            return $;
        }
    }

}
