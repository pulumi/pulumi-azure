// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.monitoring.inputs;

import com.pulumi.azure.monitoring.inputs.LogzMonitorPlanArgs;
import com.pulumi.azure.monitoring.inputs.LogzMonitorUserArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LogzMonitorState extends com.pulumi.resources.ResourceArgs {

    public static final LogzMonitorState Empty = new LogzMonitorState();

    /**
     * Name of the Logz organization. Changing this forces a new logz Monitor to be created.
     * 
     */
    @Import(name="companyName")
    private @Nullable Output<String> companyName;

    /**
     * @return Name of the Logz organization. Changing this forces a new logz Monitor to be created.
     * 
     */
    public Optional<Output<String>> companyName() {
        return Optional.ofNullable(this.companyName);
    }

    /**
     * Whether the resource monitoring is enabled?
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether the resource monitoring is enabled?
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The ID of the Enterprise App. Changing this forces a new logz Monitor to be created.
     * 
     */
    @Import(name="enterpriseAppId")
    private @Nullable Output<String> enterpriseAppId;

    /**
     * @return The ID of the Enterprise App. Changing this forces a new logz Monitor to be created.
     * 
     */
    public Optional<Output<String>> enterpriseAppId() {
        return Optional.ofNullable(this.enterpriseAppId);
    }

    /**
     * The Azure Region where the logz Monitor should exist. Changing this forces a new logz Monitor to be created.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The Azure Region where the logz Monitor should exist. Changing this forces a new logz Monitor to be created.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The ID associated with the logz organization of this logz Monitor.
     * 
     */
    @Import(name="logzOrganizationId")
    private @Nullable Output<String> logzOrganizationId;

    /**
     * @return The ID associated with the logz organization of this logz Monitor.
     * 
     */
    public Optional<Output<String>> logzOrganizationId() {
        return Optional.ofNullable(this.logzOrganizationId);
    }

    /**
     * The name which should be used for this logz Monitor. Changing this forces a new logz Monitor to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name which should be used for this logz Monitor. Changing this forces a new logz Monitor to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A `plan` block as defined below.
     * 
     */
    @Import(name="plan")
    private @Nullable Output<LogzMonitorPlanArgs> plan;

    /**
     * @return A `plan` block as defined below.
     * 
     */
    public Optional<Output<LogzMonitorPlanArgs>> plan() {
        return Optional.ofNullable(this.plan);
    }

    /**
     * The name of the Resource Group where the logz Monitor should exist. Changing this forces a new logz Monitor to be created.
     * 
     */
    @Import(name="resourceGroupName")
    private @Nullable Output<String> resourceGroupName;

    /**
     * @return The name of the Resource Group where the logz Monitor should exist. Changing this forces a new logz Monitor to be created.
     * 
     */
    public Optional<Output<String>> resourceGroupName() {
        return Optional.ofNullable(this.resourceGroupName);
    }

    /**
     * The single sign on url associated with the logz organization of this logz Monitor.
     * 
     */
    @Import(name="singleSignOnUrl")
    private @Nullable Output<String> singleSignOnUrl;

    /**
     * @return The single sign on url associated with the logz organization of this logz Monitor.
     * 
     */
    public Optional<Output<String>> singleSignOnUrl() {
        return Optional.ofNullable(this.singleSignOnUrl);
    }

    /**
     * A mapping of tags which should be assigned to the logz Monitor.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags which should be assigned to the logz Monitor.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A `user` block as defined below.
     * 
     */
    @Import(name="user")
    private @Nullable Output<LogzMonitorUserArgs> user;

    /**
     * @return A `user` block as defined below.
     * 
     */
    public Optional<Output<LogzMonitorUserArgs>> user() {
        return Optional.ofNullable(this.user);
    }

    private LogzMonitorState() {}

    private LogzMonitorState(LogzMonitorState $) {
        this.companyName = $.companyName;
        this.enabled = $.enabled;
        this.enterpriseAppId = $.enterpriseAppId;
        this.location = $.location;
        this.logzOrganizationId = $.logzOrganizationId;
        this.name = $.name;
        this.plan = $.plan;
        this.resourceGroupName = $.resourceGroupName;
        this.singleSignOnUrl = $.singleSignOnUrl;
        this.tags = $.tags;
        this.user = $.user;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LogzMonitorState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LogzMonitorState $;

        public Builder() {
            $ = new LogzMonitorState();
        }

        public Builder(LogzMonitorState defaults) {
            $ = new LogzMonitorState(Objects.requireNonNull(defaults));
        }

        /**
         * @param companyName Name of the Logz organization. Changing this forces a new logz Monitor to be created.
         * 
         * @return builder
         * 
         */
        public Builder companyName(@Nullable Output<String> companyName) {
            $.companyName = companyName;
            return this;
        }

        /**
         * @param companyName Name of the Logz organization. Changing this forces a new logz Monitor to be created.
         * 
         * @return builder
         * 
         */
        public Builder companyName(String companyName) {
            return companyName(Output.of(companyName));
        }

        /**
         * @param enabled Whether the resource monitoring is enabled?
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether the resource monitoring is enabled?
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param enterpriseAppId The ID of the Enterprise App. Changing this forces a new logz Monitor to be created.
         * 
         * @return builder
         * 
         */
        public Builder enterpriseAppId(@Nullable Output<String> enterpriseAppId) {
            $.enterpriseAppId = enterpriseAppId;
            return this;
        }

        /**
         * @param enterpriseAppId The ID of the Enterprise App. Changing this forces a new logz Monitor to be created.
         * 
         * @return builder
         * 
         */
        public Builder enterpriseAppId(String enterpriseAppId) {
            return enterpriseAppId(Output.of(enterpriseAppId));
        }

        /**
         * @param location The Azure Region where the logz Monitor should exist. Changing this forces a new logz Monitor to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The Azure Region where the logz Monitor should exist. Changing this forces a new logz Monitor to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param logzOrganizationId The ID associated with the logz organization of this logz Monitor.
         * 
         * @return builder
         * 
         */
        public Builder logzOrganizationId(@Nullable Output<String> logzOrganizationId) {
            $.logzOrganizationId = logzOrganizationId;
            return this;
        }

        /**
         * @param logzOrganizationId The ID associated with the logz organization of this logz Monitor.
         * 
         * @return builder
         * 
         */
        public Builder logzOrganizationId(String logzOrganizationId) {
            return logzOrganizationId(Output.of(logzOrganizationId));
        }

        /**
         * @param name The name which should be used for this logz Monitor. Changing this forces a new logz Monitor to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this logz Monitor. Changing this forces a new logz Monitor to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param plan A `plan` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder plan(@Nullable Output<LogzMonitorPlanArgs> plan) {
            $.plan = plan;
            return this;
        }

        /**
         * @param plan A `plan` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder plan(LogzMonitorPlanArgs plan) {
            return plan(Output.of(plan));
        }

        /**
         * @param resourceGroupName The name of the Resource Group where the logz Monitor should exist. Changing this forces a new logz Monitor to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(@Nullable Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the Resource Group where the logz Monitor should exist. Changing this forces a new logz Monitor to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param singleSignOnUrl The single sign on url associated with the logz organization of this logz Monitor.
         * 
         * @return builder
         * 
         */
        public Builder singleSignOnUrl(@Nullable Output<String> singleSignOnUrl) {
            $.singleSignOnUrl = singleSignOnUrl;
            return this;
        }

        /**
         * @param singleSignOnUrl The single sign on url associated with the logz organization of this logz Monitor.
         * 
         * @return builder
         * 
         */
        public Builder singleSignOnUrl(String singleSignOnUrl) {
            return singleSignOnUrl(Output.of(singleSignOnUrl));
        }

        /**
         * @param tags A mapping of tags which should be assigned to the logz Monitor.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags which should be assigned to the logz Monitor.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param user A `user` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder user(@Nullable Output<LogzMonitorUserArgs> user) {
            $.user = user;
            return this;
        }

        /**
         * @param user A `user` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder user(LogzMonitorUserArgs user) {
            return user(Output.of(user));
        }

        public LogzMonitorState build() {
            return $;
        }
    }

}
