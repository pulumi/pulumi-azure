// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.maps.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AccountDataStore {
    /**
     * @return The ID of the Storage Account that should be linked to this Azure Maps Account.
     * 
     */
    private @Nullable String storageAccountId;
    /**
     * @return The name given to the linked Storage Account.
     * 
     */
    private String uniqueName;

    private AccountDataStore() {}
    /**
     * @return The ID of the Storage Account that should be linked to this Azure Maps Account.
     * 
     */
    public Optional<String> storageAccountId() {
        return Optional.ofNullable(this.storageAccountId);
    }
    /**
     * @return The name given to the linked Storage Account.
     * 
     */
    public String uniqueName() {
        return this.uniqueName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AccountDataStore defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String storageAccountId;
        private String uniqueName;
        public Builder() {}
        public Builder(AccountDataStore defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.storageAccountId = defaults.storageAccountId;
    	      this.uniqueName = defaults.uniqueName;
        }

        @CustomType.Setter
        public Builder storageAccountId(@Nullable String storageAccountId) {

            this.storageAccountId = storageAccountId;
            return this;
        }
        @CustomType.Setter
        public Builder uniqueName(String uniqueName) {
            if (uniqueName == null) {
              throw new MissingRequiredPropertyException("AccountDataStore", "uniqueName");
            }
            this.uniqueName = uniqueName;
            return this;
        }
        public AccountDataStore build() {
            final var _resultValue = new AccountDataStore();
            _resultValue.storageAccountId = storageAccountId;
            _resultValue.uniqueName = uniqueName;
            return _resultValue;
        }
    }
}
