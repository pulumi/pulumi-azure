// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.media.inputs;

import com.pulumi.azure.media.inputs.TransformOutputCustomPresetCodecH265VideoLayerArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TransformOutputCustomPresetCodecH265VideoArgs extends com.pulumi.resources.ResourceArgs {

    public static final TransformOutputCustomPresetCodecH265VideoArgs Empty = new TransformOutputCustomPresetCodecH265VideoArgs();

    /**
     * The complexity of the encoding. Possible values are `Balanced`, `Speed` or `Quality`. Default to `Balanced`.
     * 
     */
    @Import(name="complexity")
    private @Nullable Output<String> complexity;

    /**
     * @return The complexity of the encoding. Possible values are `Balanced`, `Speed` or `Quality`. Default to `Balanced`.
     * 
     */
    public Optional<Output<String>> complexity() {
        return Optional.ofNullable(this.complexity);
    }

    /**
     * The distance between two key frames. The value should be non-zero in the range `0.5` to `20` seconds, specified in ISO 8601 format. Note that this setting is ignored if `sync_mode` is set to `Passthrough`, where the KeyFrameInterval value will follow the input source setting. Defaults to `PT2S`.
     * 
     */
    @Import(name="keyFrameInterval")
    private @Nullable Output<String> keyFrameInterval;

    /**
     * @return The distance between two key frames. The value should be non-zero in the range `0.5` to `20` seconds, specified in ISO 8601 format. Note that this setting is ignored if `sync_mode` is set to `Passthrough`, where the KeyFrameInterval value will follow the input source setting. Defaults to `PT2S`.
     * 
     */
    public Optional<Output<String>> keyFrameInterval() {
        return Optional.ofNullable(this.keyFrameInterval);
    }

    /**
     * Specifies the label for the codec. The label can be used to control muxing behavior.
     * 
     */
    @Import(name="label")
    private @Nullable Output<String> label;

    /**
     * @return Specifies the label for the codec. The label can be used to control muxing behavior.
     * 
     */
    public Optional<Output<String>> label() {
        return Optional.ofNullable(this.label);
    }

    /**
     * One or more `layer` blocks as defined below.
     * 
     */
    @Import(name="layers")
    private @Nullable Output<List<TransformOutputCustomPresetCodecH265VideoLayerArgs>> layers;

    /**
     * @return One or more `layer` blocks as defined below.
     * 
     */
    public Optional<Output<List<TransformOutputCustomPresetCodecH265VideoLayerArgs>>> layers() {
        return Optional.ofNullable(this.layers);
    }

    /**
     * Whether the encoder should insert key frames at scene changes. This flag should be set to true only when the encoder is being configured to produce a single output video. Default to `false`.
     * 
     */
    @Import(name="sceneChangeDetectionEnabled")
    private @Nullable Output<Boolean> sceneChangeDetectionEnabled;

    /**
     * @return Whether the encoder should insert key frames at scene changes. This flag should be set to true only when the encoder is being configured to produce a single output video. Default to `false`.
     * 
     */
    public Optional<Output<Boolean>> sceneChangeDetectionEnabled() {
        return Optional.ofNullable(this.sceneChangeDetectionEnabled);
    }

    /**
     * Specifies the resizing mode - how the input video will be resized to fit the desired output resolution(s). Possible values are `AutoFit`, `AutoSize` or `None`. Default to `AutoSize`.
     * 
     */
    @Import(name="stretchMode")
    private @Nullable Output<String> stretchMode;

    /**
     * @return Specifies the resizing mode - how the input video will be resized to fit the desired output resolution(s). Possible values are `AutoFit`, `AutoSize` or `None`. Default to `AutoSize`.
     * 
     */
    public Optional<Output<String>> stretchMode() {
        return Optional.ofNullable(this.stretchMode);
    }

    /**
     * Specifies the synchronization mode for the video. Possible values are `Auto`, `Cfr`, `Passthrough` or `Vfr`. Default to `Auto`.
     * 
     */
    @Import(name="syncMode")
    private @Nullable Output<String> syncMode;

    /**
     * @return Specifies the synchronization mode for the video. Possible values are `Auto`, `Cfr`, `Passthrough` or `Vfr`. Default to `Auto`.
     * 
     */
    public Optional<Output<String>> syncMode() {
        return Optional.ofNullable(this.syncMode);
    }

    private TransformOutputCustomPresetCodecH265VideoArgs() {}

    private TransformOutputCustomPresetCodecH265VideoArgs(TransformOutputCustomPresetCodecH265VideoArgs $) {
        this.complexity = $.complexity;
        this.keyFrameInterval = $.keyFrameInterval;
        this.label = $.label;
        this.layers = $.layers;
        this.sceneChangeDetectionEnabled = $.sceneChangeDetectionEnabled;
        this.stretchMode = $.stretchMode;
        this.syncMode = $.syncMode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TransformOutputCustomPresetCodecH265VideoArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TransformOutputCustomPresetCodecH265VideoArgs $;

        public Builder() {
            $ = new TransformOutputCustomPresetCodecH265VideoArgs();
        }

        public Builder(TransformOutputCustomPresetCodecH265VideoArgs defaults) {
            $ = new TransformOutputCustomPresetCodecH265VideoArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param complexity The complexity of the encoding. Possible values are `Balanced`, `Speed` or `Quality`. Default to `Balanced`.
         * 
         * @return builder
         * 
         */
        public Builder complexity(@Nullable Output<String> complexity) {
            $.complexity = complexity;
            return this;
        }

        /**
         * @param complexity The complexity of the encoding. Possible values are `Balanced`, `Speed` or `Quality`. Default to `Balanced`.
         * 
         * @return builder
         * 
         */
        public Builder complexity(String complexity) {
            return complexity(Output.of(complexity));
        }

        /**
         * @param keyFrameInterval The distance between two key frames. The value should be non-zero in the range `0.5` to `20` seconds, specified in ISO 8601 format. Note that this setting is ignored if `sync_mode` is set to `Passthrough`, where the KeyFrameInterval value will follow the input source setting. Defaults to `PT2S`.
         * 
         * @return builder
         * 
         */
        public Builder keyFrameInterval(@Nullable Output<String> keyFrameInterval) {
            $.keyFrameInterval = keyFrameInterval;
            return this;
        }

        /**
         * @param keyFrameInterval The distance between two key frames. The value should be non-zero in the range `0.5` to `20` seconds, specified in ISO 8601 format. Note that this setting is ignored if `sync_mode` is set to `Passthrough`, where the KeyFrameInterval value will follow the input source setting. Defaults to `PT2S`.
         * 
         * @return builder
         * 
         */
        public Builder keyFrameInterval(String keyFrameInterval) {
            return keyFrameInterval(Output.of(keyFrameInterval));
        }

        /**
         * @param label Specifies the label for the codec. The label can be used to control muxing behavior.
         * 
         * @return builder
         * 
         */
        public Builder label(@Nullable Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label Specifies the label for the codec. The label can be used to control muxing behavior.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param layers One or more `layer` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder layers(@Nullable Output<List<TransformOutputCustomPresetCodecH265VideoLayerArgs>> layers) {
            $.layers = layers;
            return this;
        }

        /**
         * @param layers One or more `layer` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder layers(List<TransformOutputCustomPresetCodecH265VideoLayerArgs> layers) {
            return layers(Output.of(layers));
        }

        /**
         * @param layers One or more `layer` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder layers(TransformOutputCustomPresetCodecH265VideoLayerArgs... layers) {
            return layers(List.of(layers));
        }

        /**
         * @param sceneChangeDetectionEnabled Whether the encoder should insert key frames at scene changes. This flag should be set to true only when the encoder is being configured to produce a single output video. Default to `false`.
         * 
         * @return builder
         * 
         */
        public Builder sceneChangeDetectionEnabled(@Nullable Output<Boolean> sceneChangeDetectionEnabled) {
            $.sceneChangeDetectionEnabled = sceneChangeDetectionEnabled;
            return this;
        }

        /**
         * @param sceneChangeDetectionEnabled Whether the encoder should insert key frames at scene changes. This flag should be set to true only when the encoder is being configured to produce a single output video. Default to `false`.
         * 
         * @return builder
         * 
         */
        public Builder sceneChangeDetectionEnabled(Boolean sceneChangeDetectionEnabled) {
            return sceneChangeDetectionEnabled(Output.of(sceneChangeDetectionEnabled));
        }

        /**
         * @param stretchMode Specifies the resizing mode - how the input video will be resized to fit the desired output resolution(s). Possible values are `AutoFit`, `AutoSize` or `None`. Default to `AutoSize`.
         * 
         * @return builder
         * 
         */
        public Builder stretchMode(@Nullable Output<String> stretchMode) {
            $.stretchMode = stretchMode;
            return this;
        }

        /**
         * @param stretchMode Specifies the resizing mode - how the input video will be resized to fit the desired output resolution(s). Possible values are `AutoFit`, `AutoSize` or `None`. Default to `AutoSize`.
         * 
         * @return builder
         * 
         */
        public Builder stretchMode(String stretchMode) {
            return stretchMode(Output.of(stretchMode));
        }

        /**
         * @param syncMode Specifies the synchronization mode for the video. Possible values are `Auto`, `Cfr`, `Passthrough` or `Vfr`. Default to `Auto`.
         * 
         * @return builder
         * 
         */
        public Builder syncMode(@Nullable Output<String> syncMode) {
            $.syncMode = syncMode;
            return this;
        }

        /**
         * @param syncMode Specifies the synchronization mode for the video. Possible values are `Auto`, `Cfr`, `Passthrough` or `Vfr`. Default to `Auto`.
         * 
         * @return builder
         * 
         */
        public Builder syncMode(String syncMode) {
            return syncMode(Output.of(syncMode));
        }

        public TransformOutputCustomPresetCodecH265VideoArgs build() {
            return $;
        }
    }

}
