// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.sql;

import com.pulumi.azure.sql.inputs.SqlServerIdentityArgs;
import com.pulumi.azure.sql.inputs.SqlServerThreatDetectionPolicyArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SqlServerArgs extends com.pulumi.resources.ResourceArgs {

    public static final SqlServerArgs Empty = new SqlServerArgs();

    /**
     * The administrator login name for the new server. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="administratorLogin", required=true)
    private Output<String> administratorLogin;

    /**
     * @return The administrator login name for the new server. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> administratorLogin() {
        return this.administratorLogin;
    }

    /**
     * The password associated with the `administrator_login` user. Needs to comply with Azure&#39;s [Password Policy](https://msdn.microsoft.com/library/ms161959.aspx)
     * 
     */
    @Import(name="administratorLoginPassword", required=true)
    private Output<String> administratorLoginPassword;

    /**
     * @return The password associated with the `administrator_login` user. Needs to comply with Azure&#39;s [Password Policy](https://msdn.microsoft.com/library/ms161959.aspx)
     * 
     */
    public Output<String> administratorLoginPassword() {
        return this.administratorLoginPassword;
    }

    /**
     * The connection policy the server will use. Possible values are `Default`, `Proxy`, and `Redirect`. Defaults to `Default`.
     * 
     */
    @Import(name="connectionPolicy")
    private @Nullable Output<String> connectionPolicy;

    /**
     * @return The connection policy the server will use. Possible values are `Default`, `Proxy`, and `Redirect`. Defaults to `Default`.
     * 
     */
    public Optional<Output<String>> connectionPolicy() {
        return Optional.ofNullable(this.connectionPolicy);
    }

    /**
     * An `identity` block as defined below.
     * 
     */
    @Import(name="identity")
    private @Nullable Output<SqlServerIdentityArgs> identity;

    /**
     * @return An `identity` block as defined below.
     * 
     */
    public Optional<Output<SqlServerIdentityArgs>> identity() {
        return Optional.ofNullable(this.identity);
    }

    /**
     * Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the Microsoft SQL Server. This needs to be globally unique within Azure. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the Microsoft SQL Server. This needs to be globally unique within Azure. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The name of the resource group in which to create the Microsoft SQL Server. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group in which to create the Microsoft SQL Server. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Threat detection policy configuration. The `threat_detection_policy` block supports fields documented below.
     * 
     */
    @Import(name="threatDetectionPolicy")
    private @Nullable Output<SqlServerThreatDetectionPolicyArgs> threatDetectionPolicy;

    /**
     * @return Threat detection policy configuration. The `threat_detection_policy` block supports fields documented below.
     * 
     */
    public Optional<Output<SqlServerThreatDetectionPolicyArgs>> threatDetectionPolicy() {
        return Optional.ofNullable(this.threatDetectionPolicy);
    }

    /**
     * The version for the new server. Valid values are: 2.0 (for v11 server) and 12.0 (for v12 server). Changing this forces a new resource to be created.
     * 
     */
    @Import(name="version", required=true)
    private Output<String> version;

    /**
     * @return The version for the new server. Valid values are: 2.0 (for v11 server) and 12.0 (for v12 server). Changing this forces a new resource to be created.
     * 
     */
    public Output<String> version() {
        return this.version;
    }

    private SqlServerArgs() {}

    private SqlServerArgs(SqlServerArgs $) {
        this.administratorLogin = $.administratorLogin;
        this.administratorLoginPassword = $.administratorLoginPassword;
        this.connectionPolicy = $.connectionPolicy;
        this.identity = $.identity;
        this.location = $.location;
        this.name = $.name;
        this.resourceGroupName = $.resourceGroupName;
        this.tags = $.tags;
        this.threatDetectionPolicy = $.threatDetectionPolicy;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SqlServerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SqlServerArgs $;

        public Builder() {
            $ = new SqlServerArgs();
        }

        public Builder(SqlServerArgs defaults) {
            $ = new SqlServerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param administratorLogin The administrator login name for the new server. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder administratorLogin(Output<String> administratorLogin) {
            $.administratorLogin = administratorLogin;
            return this;
        }

        /**
         * @param administratorLogin The administrator login name for the new server. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder administratorLogin(String administratorLogin) {
            return administratorLogin(Output.of(administratorLogin));
        }

        /**
         * @param administratorLoginPassword The password associated with the `administrator_login` user. Needs to comply with Azure&#39;s [Password Policy](https://msdn.microsoft.com/library/ms161959.aspx)
         * 
         * @return builder
         * 
         */
        public Builder administratorLoginPassword(Output<String> administratorLoginPassword) {
            $.administratorLoginPassword = administratorLoginPassword;
            return this;
        }

        /**
         * @param administratorLoginPassword The password associated with the `administrator_login` user. Needs to comply with Azure&#39;s [Password Policy](https://msdn.microsoft.com/library/ms161959.aspx)
         * 
         * @return builder
         * 
         */
        public Builder administratorLoginPassword(String administratorLoginPassword) {
            return administratorLoginPassword(Output.of(administratorLoginPassword));
        }

        /**
         * @param connectionPolicy The connection policy the server will use. Possible values are `Default`, `Proxy`, and `Redirect`. Defaults to `Default`.
         * 
         * @return builder
         * 
         */
        public Builder connectionPolicy(@Nullable Output<String> connectionPolicy) {
            $.connectionPolicy = connectionPolicy;
            return this;
        }

        /**
         * @param connectionPolicy The connection policy the server will use. Possible values are `Default`, `Proxy`, and `Redirect`. Defaults to `Default`.
         * 
         * @return builder
         * 
         */
        public Builder connectionPolicy(String connectionPolicy) {
            return connectionPolicy(Output.of(connectionPolicy));
        }

        /**
         * @param identity An `identity` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder identity(@Nullable Output<SqlServerIdentityArgs> identity) {
            $.identity = identity;
            return this;
        }

        /**
         * @param identity An `identity` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder identity(SqlServerIdentityArgs identity) {
            return identity(Output.of(identity));
        }

        /**
         * @param location Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The name of the Microsoft SQL Server. This needs to be globally unique within Azure. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Microsoft SQL Server. This needs to be globally unique within Azure. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param resourceGroupName The name of the resource group in which to create the Microsoft SQL Server. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group in which to create the Microsoft SQL Server. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param threatDetectionPolicy Threat detection policy configuration. The `threat_detection_policy` block supports fields documented below.
         * 
         * @return builder
         * 
         */
        public Builder threatDetectionPolicy(@Nullable Output<SqlServerThreatDetectionPolicyArgs> threatDetectionPolicy) {
            $.threatDetectionPolicy = threatDetectionPolicy;
            return this;
        }

        /**
         * @param threatDetectionPolicy Threat detection policy configuration. The `threat_detection_policy` block supports fields documented below.
         * 
         * @return builder
         * 
         */
        public Builder threatDetectionPolicy(SqlServerThreatDetectionPolicyArgs threatDetectionPolicy) {
            return threatDetectionPolicy(Output.of(threatDetectionPolicy));
        }

        /**
         * @param version The version for the new server. Valid values are: 2.0 (for v11 server) and 12.0 (for v12 server). Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder version(Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version The version for the new server. Valid values are: 2.0 (for v11 server) and 12.0 (for v12 server). Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public SqlServerArgs build() {
            if ($.administratorLogin == null) {
                throw new MissingRequiredPropertyException("SqlServerArgs", "administratorLogin");
            }
            if ($.administratorLoginPassword == null) {
                throw new MissingRequiredPropertyException("SqlServerArgs", "administratorLoginPassword");
            }
            if ($.resourceGroupName == null) {
                throw new MissingRequiredPropertyException("SqlServerArgs", "resourceGroupName");
            }
            if ($.version == null) {
                throw new MissingRequiredPropertyException("SqlServerArgs", "version");
            }
            return $;
        }
    }

}
