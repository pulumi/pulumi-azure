// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.media.inputs;

import com.pulumi.azure.media.inputs.TransformOutputCustomPresetFormatMp4OutputFileArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TransformOutputCustomPresetFormatMp4Args extends com.pulumi.resources.ResourceArgs {

    public static final TransformOutputCustomPresetFormatMp4Args Empty = new TransformOutputCustomPresetFormatMp4Args();

    /**
     * The file naming pattern used for the creation of output files. The following macros are supported in the file name: `{Basename}` - An expansion macro that will use the name of the input video file. If the base name(the file suffix is not included) of the input video file is less than 32 characters long, the base name of input video files will be used. If the length of base name of the input video file exceeds 32 characters, the base name is truncated to the first 32 characters in total length. `{Extension}` - The appropriate extension for this format. `{Label}` - The label assigned to the codec/layer. `{Index}` - A unique index for thumbnails. Only applicable to thumbnails. `{AudioStream}` - string &#34;Audio&#34; plus audio stream number(start from 1). `{Bitrate}` - The audio/video bitrate in kbps. Not applicable to thumbnails. `{Codec}` - The type of the audio/video codec. `{Resolution}` - The video resolution. Any unsubstituted macros will be collapsed and removed from the filename.
     * 
     */
    @Import(name="filenamePattern", required=true)
    private Output<String> filenamePattern;

    /**
     * @return The file naming pattern used for the creation of output files. The following macros are supported in the file name: `{Basename}` - An expansion macro that will use the name of the input video file. If the base name(the file suffix is not included) of the input video file is less than 32 characters long, the base name of input video files will be used. If the length of base name of the input video file exceeds 32 characters, the base name is truncated to the first 32 characters in total length. `{Extension}` - The appropriate extension for this format. `{Label}` - The label assigned to the codec/layer. `{Index}` - A unique index for thumbnails. Only applicable to thumbnails. `{AudioStream}` - string &#34;Audio&#34; plus audio stream number(start from 1). `{Bitrate}` - The audio/video bitrate in kbps. Not applicable to thumbnails. `{Codec}` - The type of the audio/video codec. `{Resolution}` - The video resolution. Any unsubstituted macros will be collapsed and removed from the filename.
     * 
     */
    public Output<String> filenamePattern() {
        return this.filenamePattern;
    }

    /**
     * One or more `output_file` blocks as defined below.
     * 
     */
    @Import(name="outputFiles")
    private @Nullable Output<List<TransformOutputCustomPresetFormatMp4OutputFileArgs>> outputFiles;

    /**
     * @return One or more `output_file` blocks as defined below.
     * 
     */
    public Optional<Output<List<TransformOutputCustomPresetFormatMp4OutputFileArgs>>> outputFiles() {
        return Optional.ofNullable(this.outputFiles);
    }

    private TransformOutputCustomPresetFormatMp4Args() {}

    private TransformOutputCustomPresetFormatMp4Args(TransformOutputCustomPresetFormatMp4Args $) {
        this.filenamePattern = $.filenamePattern;
        this.outputFiles = $.outputFiles;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TransformOutputCustomPresetFormatMp4Args defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TransformOutputCustomPresetFormatMp4Args $;

        public Builder() {
            $ = new TransformOutputCustomPresetFormatMp4Args();
        }

        public Builder(TransformOutputCustomPresetFormatMp4Args defaults) {
            $ = new TransformOutputCustomPresetFormatMp4Args(Objects.requireNonNull(defaults));
        }

        /**
         * @param filenamePattern The file naming pattern used for the creation of output files. The following macros are supported in the file name: `{Basename}` - An expansion macro that will use the name of the input video file. If the base name(the file suffix is not included) of the input video file is less than 32 characters long, the base name of input video files will be used. If the length of base name of the input video file exceeds 32 characters, the base name is truncated to the first 32 characters in total length. `{Extension}` - The appropriate extension for this format. `{Label}` - The label assigned to the codec/layer. `{Index}` - A unique index for thumbnails. Only applicable to thumbnails. `{AudioStream}` - string &#34;Audio&#34; plus audio stream number(start from 1). `{Bitrate}` - The audio/video bitrate in kbps. Not applicable to thumbnails. `{Codec}` - The type of the audio/video codec. `{Resolution}` - The video resolution. Any unsubstituted macros will be collapsed and removed from the filename.
         * 
         * @return builder
         * 
         */
        public Builder filenamePattern(Output<String> filenamePattern) {
            $.filenamePattern = filenamePattern;
            return this;
        }

        /**
         * @param filenamePattern The file naming pattern used for the creation of output files. The following macros are supported in the file name: `{Basename}` - An expansion macro that will use the name of the input video file. If the base name(the file suffix is not included) of the input video file is less than 32 characters long, the base name of input video files will be used. If the length of base name of the input video file exceeds 32 characters, the base name is truncated to the first 32 characters in total length. `{Extension}` - The appropriate extension for this format. `{Label}` - The label assigned to the codec/layer. `{Index}` - A unique index for thumbnails. Only applicable to thumbnails. `{AudioStream}` - string &#34;Audio&#34; plus audio stream number(start from 1). `{Bitrate}` - The audio/video bitrate in kbps. Not applicable to thumbnails. `{Codec}` - The type of the audio/video codec. `{Resolution}` - The video resolution. Any unsubstituted macros will be collapsed and removed from the filename.
         * 
         * @return builder
         * 
         */
        public Builder filenamePattern(String filenamePattern) {
            return filenamePattern(Output.of(filenamePattern));
        }

        /**
         * @param outputFiles One or more `output_file` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder outputFiles(@Nullable Output<List<TransformOutputCustomPresetFormatMp4OutputFileArgs>> outputFiles) {
            $.outputFiles = outputFiles;
            return this;
        }

        /**
         * @param outputFiles One or more `output_file` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder outputFiles(List<TransformOutputCustomPresetFormatMp4OutputFileArgs> outputFiles) {
            return outputFiles(Output.of(outputFiles));
        }

        /**
         * @param outputFiles One or more `output_file` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder outputFiles(TransformOutputCustomPresetFormatMp4OutputFileArgs... outputFiles) {
            return outputFiles(List.of(outputFiles));
        }

        public TransformOutputCustomPresetFormatMp4Args build() {
            if ($.filenamePattern == null) {
                throw new MissingRequiredPropertyException("TransformOutputCustomPresetFormatMp4Args", "filenamePattern");
            }
            return $;
        }
    }

}
