// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.network.NetworkConnectionMonitorArgs;
import com.pulumi.azure.network.inputs.NetworkConnectionMonitorState;
import com.pulumi.azure.network.outputs.NetworkConnectionMonitorEndpoint;
import com.pulumi.azure.network.outputs.NetworkConnectionMonitorTestConfiguration;
import com.pulumi.azure.network.outputs.NetworkConnectionMonitorTestGroup;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a Network Connection Monitor.
 * 
 * &gt; **NOTE:** Any Network Connection Monitor resource created with API versions 2019-06-01 or earlier (v1) are now incompatible with this provider, which now only supports v2.
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.network.NetworkWatcher;
 * import com.pulumi.azure.network.NetworkWatcherArgs;
 * import com.pulumi.azure.network.VirtualNetwork;
 * import com.pulumi.azure.network.VirtualNetworkArgs;
 * import com.pulumi.azure.network.Subnet;
 * import com.pulumi.azure.network.SubnetArgs;
 * import com.pulumi.azure.network.NetworkInterface;
 * import com.pulumi.azure.network.NetworkInterfaceArgs;
 * import com.pulumi.azure.network.inputs.NetworkInterfaceIpConfigurationArgs;
 * import com.pulumi.azure.compute.VirtualMachine;
 * import com.pulumi.azure.compute.VirtualMachineArgs;
 * import com.pulumi.azure.compute.inputs.VirtualMachineStorageImageReferenceArgs;
 * import com.pulumi.azure.compute.inputs.VirtualMachineStorageOsDiskArgs;
 * import com.pulumi.azure.compute.inputs.VirtualMachineOsProfileArgs;
 * import com.pulumi.azure.compute.inputs.VirtualMachineOsProfileLinuxConfigArgs;
 * import com.pulumi.azure.compute.Extension;
 * import com.pulumi.azure.compute.ExtensionArgs;
 * import com.pulumi.azure.operationalinsights.AnalyticsWorkspace;
 * import com.pulumi.azure.operationalinsights.AnalyticsWorkspaceArgs;
 * import com.pulumi.azure.network.NetworkConnectionMonitor;
 * import com.pulumi.azure.network.NetworkConnectionMonitorArgs;
 * import com.pulumi.azure.network.inputs.NetworkConnectionMonitorEndpointArgs;
 * import com.pulumi.azure.network.inputs.NetworkConnectionMonitorEndpointFilterArgs;
 * import com.pulumi.azure.network.inputs.NetworkConnectionMonitorTestConfigurationArgs;
 * import com.pulumi.azure.network.inputs.NetworkConnectionMonitorTestConfigurationTcpConfigurationArgs;
 * import com.pulumi.azure.network.inputs.NetworkConnectionMonitorTestGroupArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new ResourceGroup("example", ResourceGroupArgs.builder()
 *             .name("example-Watcher-resources")
 *             .location("West Europe")
 *             .build());
 * 
 *         var exampleNetworkWatcher = new NetworkWatcher("exampleNetworkWatcher", NetworkWatcherArgs.builder()
 *             .name("example-Watcher")
 *             .location(example.location())
 *             .resourceGroupName(example.name())
 *             .build());
 * 
 *         var exampleVirtualNetwork = new VirtualNetwork("exampleVirtualNetwork", VirtualNetworkArgs.builder()
 *             .name("example-Vnet")
 *             .addressSpaces("10.0.0.0/16")
 *             .location(example.location())
 *             .resourceGroupName(example.name())
 *             .build());
 * 
 *         var exampleSubnet = new Subnet("exampleSubnet", SubnetArgs.builder()
 *             .name("example-Subnet")
 *             .resourceGroupName(example.name())
 *             .virtualNetworkName(exampleVirtualNetwork.name())
 *             .addressPrefixes("10.0.2.0/24")
 *             .build());
 * 
 *         var exampleNetworkInterface = new NetworkInterface("exampleNetworkInterface", NetworkInterfaceArgs.builder()
 *             .name("example-Nic")
 *             .location(example.location())
 *             .resourceGroupName(example.name())
 *             .ipConfigurations(NetworkInterfaceIpConfigurationArgs.builder()
 *                 .name("testconfiguration1")
 *                 .subnetId(exampleSubnet.id())
 *                 .privateIpAddressAllocation("Dynamic")
 *                 .build())
 *             .build());
 * 
 *         var exampleVirtualMachine = new VirtualMachine("exampleVirtualMachine", VirtualMachineArgs.builder()
 *             .name("example-VM")
 *             .location(example.location())
 *             .resourceGroupName(example.name())
 *             .networkInterfaceIds(exampleNetworkInterface.id())
 *             .vmSize("Standard_D2s_v3")
 *             .storageImageReference(VirtualMachineStorageImageReferenceArgs.builder()
 *                 .publisher("Canonical")
 *                 .offer("0001-com-ubuntu-server-jammy")
 *                 .sku("22_04-lts")
 *                 .version("latest")
 *                 .build())
 *             .storageOsDisk(VirtualMachineStorageOsDiskArgs.builder()
 *                 .name("osdisk-example01")
 *                 .caching("ReadWrite")
 *                 .createOption("FromImage")
 *                 .managedDiskType("Standard_LRS")
 *                 .build())
 *             .osProfile(VirtualMachineOsProfileArgs.builder()
 *                 .computerName("hostnametest01")
 *                 .adminUsername("testadmin")
 *                 .adminPassword("Password1234!")
 *                 .build())
 *             .osProfileLinuxConfig(VirtualMachineOsProfileLinuxConfigArgs.builder()
 *                 .disablePasswordAuthentication(false)
 *                 .build())
 *             .build());
 * 
 *         var exampleExtension = new Extension("exampleExtension", ExtensionArgs.builder()
 *             .name("example-VMExtension")
 *             .virtualMachineId(exampleVirtualMachine.id())
 *             .publisher("Microsoft.Azure.NetworkWatcher")
 *             .type("NetworkWatcherAgentLinux")
 *             .typeHandlerVersion("1.4")
 *             .autoUpgradeMinorVersion(true)
 *             .build());
 * 
 *         var exampleAnalyticsWorkspace = new AnalyticsWorkspace("exampleAnalyticsWorkspace", AnalyticsWorkspaceArgs.builder()
 *             .name("example-Workspace")
 *             .location(example.location())
 *             .resourceGroupName(example.name())
 *             .sku("PerGB2018")
 *             .build());
 * 
 *         var exampleNetworkConnectionMonitor = new NetworkConnectionMonitor("exampleNetworkConnectionMonitor", NetworkConnectionMonitorArgs.builder()
 *             .name("example-Monitor")
 *             .networkWatcherId(exampleNetworkWatcher.id())
 *             .location(exampleNetworkWatcher.location())
 *             .endpoints(            
 *                 NetworkConnectionMonitorEndpointArgs.builder()
 *                     .name("source")
 *                     .targetResourceId(exampleVirtualMachine.id())
 *                     .filter(NetworkConnectionMonitorEndpointFilterArgs.builder()
 *                         .items(NetworkConnectionMonitorEndpointFilterItemArgs.builder()
 *                             .address(exampleVirtualMachine.id())
 *                             .type("AgentAddress")
 *                             .build())
 *                         .type("Include")
 *                         .build())
 *                     .build(),
 *                 NetworkConnectionMonitorEndpointArgs.builder()
 *                     .name("destination")
 *                     .address("mycompany.io")
 *                     .build())
 *             .testConfigurations(NetworkConnectionMonitorTestConfigurationArgs.builder()
 *                 .name("tcpName")
 *                 .protocol("Tcp")
 *                 .testFrequencyInSeconds(60)
 *                 .tcpConfiguration(NetworkConnectionMonitorTestConfigurationTcpConfigurationArgs.builder()
 *                     .port(80)
 *                     .build())
 *                 .build())
 *             .testGroups(NetworkConnectionMonitorTestGroupArgs.builder()
 *                 .name("exampletg")
 *                 .destinationEndpoints("destination")
 *                 .sourceEndpoints("source")
 *                 .testConfigurationNames("tcpName")
 *                 .build())
 *             .notes("examplenote")
 *             .outputWorkspaceResourceIds(exampleAnalyticsWorkspace.id())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(exampleExtension)
 *                 .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## API Providers
 * 
 * &lt;!-- This section is generated, changes will be overwritten --&gt;
 * This resource uses the following Azure API Providers:
 * 
 * * `Microsoft.Network` - 2024-05-01
 * 
 * ## Import
 * 
 * Network Connection Monitors can be imported using the `resource id`, e.g.
 * 
 * ```sh
 * $ pulumi import azure:network/networkConnectionMonitor:NetworkConnectionMonitor example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Network/networkWatchers/watcher1/connectionMonitors/connectionMonitor1
 * ```
 * 
 */
@ResourceType(type="azure:network/networkConnectionMonitor:NetworkConnectionMonitor")
public class NetworkConnectionMonitor extends com.pulumi.resources.CustomResource {
    /**
     * A `endpoint` block as defined below.
     * 
     */
    @Export(name="endpoints", refs={List.class,NetworkConnectionMonitorEndpoint.class}, tree="[0,1]")
    private Output<List<NetworkConnectionMonitorEndpoint>> endpoints;

    /**
     * @return A `endpoint` block as defined below.
     * 
     */
    public Output<List<NetworkConnectionMonitorEndpoint>> endpoints() {
        return this.endpoints;
    }
    /**
     * The Azure Region where the Network Connection Monitor should exist. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return The Azure Region where the Network Connection Monitor should exist. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * The name which should be used for this Network Connection Monitor. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name which should be used for this Network Connection Monitor. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the Network Watcher. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="networkWatcherId", refs={String.class}, tree="[0]")
    private Output<String> networkWatcherId;

    /**
     * @return The ID of the Network Watcher. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> networkWatcherId() {
        return this.networkWatcherId;
    }
    /**
     * The description of the Network Connection Monitor.
     * 
     */
    @Export(name="notes", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> notes;

    /**
     * @return The description of the Network Connection Monitor.
     * 
     */
    public Output<Optional<String>> notes() {
        return Codegen.optional(this.notes);
    }
    /**
     * A list of IDs of the Log Analytics Workspace which will accept the output from the Network Connection Monitor.
     * 
     */
    @Export(name="outputWorkspaceResourceIds", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> outputWorkspaceResourceIds;

    /**
     * @return A list of IDs of the Log Analytics Workspace which will accept the output from the Network Connection Monitor.
     * 
     */
    public Output<Optional<List<String>>> outputWorkspaceResourceIds() {
        return Codegen.optional(this.outputWorkspaceResourceIds);
    }
    /**
     * A mapping of tags which should be assigned to the Network Connection Monitor.
     * 
     */
    @Export(name="tags", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return A mapping of tags which should be assigned to the Network Connection Monitor.
     * 
     */
    public Output<Optional<Map<String,String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * A `test_configuration` block as defined below.
     * 
     */
    @Export(name="testConfigurations", refs={List.class,NetworkConnectionMonitorTestConfiguration.class}, tree="[0,1]")
    private Output<List<NetworkConnectionMonitorTestConfiguration>> testConfigurations;

    /**
     * @return A `test_configuration` block as defined below.
     * 
     */
    public Output<List<NetworkConnectionMonitorTestConfiguration>> testConfigurations() {
        return this.testConfigurations;
    }
    /**
     * A `test_group` block as defined below.
     * 
     */
    @Export(name="testGroups", refs={List.class,NetworkConnectionMonitorTestGroup.class}, tree="[0,1]")
    private Output<List<NetworkConnectionMonitorTestGroup>> testGroups;

    /**
     * @return A `test_group` block as defined below.
     * 
     */
    public Output<List<NetworkConnectionMonitorTestGroup>> testGroups() {
        return this.testGroups;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public NetworkConnectionMonitor(java.lang.String name) {
        this(name, NetworkConnectionMonitorArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public NetworkConnectionMonitor(java.lang.String name, NetworkConnectionMonitorArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public NetworkConnectionMonitor(java.lang.String name, NetworkConnectionMonitorArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:network/networkConnectionMonitor:NetworkConnectionMonitor", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private NetworkConnectionMonitor(java.lang.String name, Output<java.lang.String> id, @Nullable NetworkConnectionMonitorState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:network/networkConnectionMonitor:NetworkConnectionMonitor", name, state, makeResourceOptions(options, id), false);
    }

    private static NetworkConnectionMonitorArgs makeArgs(NetworkConnectionMonitorArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? NetworkConnectionMonitorArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static NetworkConnectionMonitor get(java.lang.String name, Output<java.lang.String> id, @Nullable NetworkConnectionMonitorState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new NetworkConnectionMonitor(name, id, state, options);
    }
}
