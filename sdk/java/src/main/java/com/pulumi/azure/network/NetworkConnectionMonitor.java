// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.network.NetworkConnectionMonitorArgs;
import com.pulumi.azure.network.inputs.NetworkConnectionMonitorState;
import com.pulumi.azure.network.outputs.NetworkConnectionMonitorEndpoint;
import com.pulumi.azure.network.outputs.NetworkConnectionMonitorTestConfiguration;
import com.pulumi.azure.network.outputs.NetworkConnectionMonitorTestGroup;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a Network Connection Monitor.
 * 
 * &gt; **NOTE:** Any Network Connection Monitor resource created with API versions 2019-06-01 or earlier (v1) are now incompatible with this provider, which now only supports v2.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.network.NetworkWatcher;
 * import com.pulumi.azure.network.NetworkWatcherArgs;
 * import com.pulumi.azure.network.VirtualNetwork;
 * import com.pulumi.azure.network.VirtualNetworkArgs;
 * import com.pulumi.azure.network.Subnet;
 * import com.pulumi.azure.network.SubnetArgs;
 * import com.pulumi.azure.network.NetworkInterface;
 * import com.pulumi.azure.network.NetworkInterfaceArgs;
 * import com.pulumi.azure.network.inputs.NetworkInterfaceIpConfigurationArgs;
 * import com.pulumi.azure.compute.VirtualMachine;
 * import com.pulumi.azure.compute.VirtualMachineArgs;
 * import com.pulumi.azure.compute.inputs.VirtualMachineStorageImageReferenceArgs;
 * import com.pulumi.azure.compute.inputs.VirtualMachineStorageOsDiskArgs;
 * import com.pulumi.azure.compute.inputs.VirtualMachineOsProfileArgs;
 * import com.pulumi.azure.compute.inputs.VirtualMachineOsProfileLinuxConfigArgs;
 * import com.pulumi.azure.compute.Extension;
 * import com.pulumi.azure.compute.ExtensionArgs;
 * import com.pulumi.azure.operationalinsights.AnalyticsWorkspace;
 * import com.pulumi.azure.operationalinsights.AnalyticsWorkspaceArgs;
 * import com.pulumi.azure.network.NetworkConnectionMonitor;
 * import com.pulumi.azure.network.NetworkConnectionMonitorArgs;
 * import com.pulumi.azure.network.inputs.NetworkConnectionMonitorEndpointArgs;
 * import com.pulumi.azure.network.inputs.NetworkConnectionMonitorEndpointFilterArgs;
 * import com.pulumi.azure.network.inputs.NetworkConnectionMonitorTestConfigurationArgs;
 * import com.pulumi.azure.network.inputs.NetworkConnectionMonitorTestConfigurationTcpConfigurationArgs;
 * import com.pulumi.azure.network.inputs.NetworkConnectionMonitorTestGroupArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampleResourceGroup = new ResourceGroup(&#34;exampleResourceGroup&#34;, ResourceGroupArgs.builder()        
 *             .location(&#34;West Europe&#34;)
 *             .build());
 * 
 *         var exampleNetworkWatcher = new NetworkWatcher(&#34;exampleNetworkWatcher&#34;, NetworkWatcherArgs.builder()        
 *             .location(exampleResourceGroup.location())
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .build());
 * 
 *         var exampleVirtualNetwork = new VirtualNetwork(&#34;exampleVirtualNetwork&#34;, VirtualNetworkArgs.builder()        
 *             .addressSpaces(&#34;10.0.0.0/16&#34;)
 *             .location(exampleResourceGroup.location())
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .build());
 * 
 *         var exampleSubnet = new Subnet(&#34;exampleSubnet&#34;, SubnetArgs.builder()        
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .virtualNetworkName(exampleVirtualNetwork.name())
 *             .addressPrefixes(&#34;10.0.2.0/24&#34;)
 *             .build());
 * 
 *         var exampleNetworkInterface = new NetworkInterface(&#34;exampleNetworkInterface&#34;, NetworkInterfaceArgs.builder()        
 *             .location(exampleResourceGroup.location())
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .ipConfigurations(NetworkInterfaceIpConfigurationArgs.builder()
 *                 .name(&#34;testconfiguration1&#34;)
 *                 .subnetId(exampleSubnet.id())
 *                 .privateIpAddressAllocation(&#34;Dynamic&#34;)
 *                 .build())
 *             .build());
 * 
 *         var exampleVirtualMachine = new VirtualMachine(&#34;exampleVirtualMachine&#34;, VirtualMachineArgs.builder()        
 *             .location(exampleResourceGroup.location())
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .networkInterfaceIds(exampleNetworkInterface.id())
 *             .vmSize(&#34;Standard_D2s_v3&#34;)
 *             .storageImageReference(VirtualMachineStorageImageReferenceArgs.builder()
 *                 .publisher(&#34;Canonical&#34;)
 *                 .offer(&#34;0001-com-ubuntu-server-focal&#34;)
 *                 .sku(&#34;20_04-lts&#34;)
 *                 .version(&#34;latest&#34;)
 *                 .build())
 *             .storageOsDisk(VirtualMachineStorageOsDiskArgs.builder()
 *                 .name(&#34;osdisk-example01&#34;)
 *                 .caching(&#34;ReadWrite&#34;)
 *                 .createOption(&#34;FromImage&#34;)
 *                 .managedDiskType(&#34;Standard_LRS&#34;)
 *                 .build())
 *             .osProfile(VirtualMachineOsProfileArgs.builder()
 *                 .computerName(&#34;hostnametest01&#34;)
 *                 .adminUsername(&#34;testadmin&#34;)
 *                 .adminPassword(&#34;Password1234!&#34;)
 *                 .build())
 *             .osProfileLinuxConfig(VirtualMachineOsProfileLinuxConfigArgs.builder()
 *                 .disablePasswordAuthentication(false)
 *                 .build())
 *             .build());
 * 
 *         var exampleExtension = new Extension(&#34;exampleExtension&#34;, ExtensionArgs.builder()        
 *             .virtualMachineId(exampleVirtualMachine.id())
 *             .publisher(&#34;Microsoft.Azure.NetworkWatcher&#34;)
 *             .type(&#34;NetworkWatcherAgentLinux&#34;)
 *             .typeHandlerVersion(&#34;1.4&#34;)
 *             .autoUpgradeMinorVersion(true)
 *             .build());
 * 
 *         var exampleAnalyticsWorkspace = new AnalyticsWorkspace(&#34;exampleAnalyticsWorkspace&#34;, AnalyticsWorkspaceArgs.builder()        
 *             .location(exampleResourceGroup.location())
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .sku(&#34;PerGB2018&#34;)
 *             .build());
 * 
 *         var exampleNetworkConnectionMonitor = new NetworkConnectionMonitor(&#34;exampleNetworkConnectionMonitor&#34;, NetworkConnectionMonitorArgs.builder()        
 *             .networkWatcherId(exampleNetworkWatcher.id())
 *             .location(exampleNetworkWatcher.location())
 *             .endpoints(            
 *                 NetworkConnectionMonitorEndpointArgs.builder()
 *                     .name(&#34;source&#34;)
 *                     .targetResourceId(exampleVirtualMachine.id())
 *                     .filter(NetworkConnectionMonitorEndpointFilterArgs.builder()
 *                         .items(NetworkConnectionMonitorEndpointFilterItemArgs.builder()
 *                             .address(exampleVirtualMachine.id())
 *                             .type(&#34;AgentAddress&#34;)
 *                             .build())
 *                         .type(&#34;Include&#34;)
 *                         .build())
 *                     .build(),
 *                 NetworkConnectionMonitorEndpointArgs.builder()
 *                     .name(&#34;destination&#34;)
 *                     .address(&#34;mycompany.io&#34;)
 *                     .build())
 *             .testConfigurations(NetworkConnectionMonitorTestConfigurationArgs.builder()
 *                 .name(&#34;tcpName&#34;)
 *                 .protocol(&#34;Tcp&#34;)
 *                 .testFrequencyInSeconds(60)
 *                 .tcpConfiguration(NetworkConnectionMonitorTestConfigurationTcpConfigurationArgs.builder()
 *                     .port(80)
 *                     .build())
 *                 .build())
 *             .testGroups(NetworkConnectionMonitorTestGroupArgs.builder()
 *                 .name(&#34;exampletg&#34;)
 *                 .destinationEndpoints(&#34;destination&#34;)
 *                 .sourceEndpoints(&#34;source&#34;)
 *                 .testConfigurationNames(&#34;tcpName&#34;)
 *                 .build())
 *             .notes(&#34;examplenote&#34;)
 *             .outputWorkspaceResourceIds(exampleAnalyticsWorkspace.id())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(exampleExtension)
 *                 .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Network Connection Monitors can be imported using the `resource id`, e.g.
 * 
 * ```sh
 *  $ pulumi import azure:network/networkConnectionMonitor:NetworkConnectionMonitor example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Network/networkWatchers/watcher1/connectionMonitors/connectionMonitor1
 * ```
 * 
 */
@ResourceType(type="azure:network/networkConnectionMonitor:NetworkConnectionMonitor")
public class NetworkConnectionMonitor extends com.pulumi.resources.CustomResource {
    /**
     * A `endpoint` block as defined below.
     * 
     */
    @Export(name="endpoints", refs={List.class,NetworkConnectionMonitorEndpoint.class}, tree="[0,1]")
    private Output<List<NetworkConnectionMonitorEndpoint>> endpoints;

    /**
     * @return A `endpoint` block as defined below.
     * 
     */
    public Output<List<NetworkConnectionMonitorEndpoint>> endpoints() {
        return this.endpoints;
    }
    /**
     * The Azure Region where the Network Connection Monitor should exist. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return The Azure Region where the Network Connection Monitor should exist. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * The name which should be used for this Network Connection Monitor. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name which should be used for this Network Connection Monitor. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the Network Watcher. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="networkWatcherId", refs={String.class}, tree="[0]")
    private Output<String> networkWatcherId;

    /**
     * @return The ID of the Network Watcher. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> networkWatcherId() {
        return this.networkWatcherId;
    }
    /**
     * The description of the Network Connection Monitor.
     * 
     */
    @Export(name="notes", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> notes;

    /**
     * @return The description of the Network Connection Monitor.
     * 
     */
    public Output<Optional<String>> notes() {
        return Codegen.optional(this.notes);
    }
    /**
     * A list of IDs of the Log Analytics Workspace which will accept the output from the Network Connection Monitor.
     * 
     */
    @Export(name="outputWorkspaceResourceIds", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> outputWorkspaceResourceIds;

    /**
     * @return A list of IDs of the Log Analytics Workspace which will accept the output from the Network Connection Monitor.
     * 
     */
    public Output<List<String>> outputWorkspaceResourceIds() {
        return this.outputWorkspaceResourceIds;
    }
    /**
     * A mapping of tags which should be assigned to the Network Connection Monitor.
     * 
     */
    @Export(name="tags", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return A mapping of tags which should be assigned to the Network Connection Monitor.
     * 
     */
    public Output<Optional<Map<String,String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * A `test_configuration` block as defined below.
     * 
     */
    @Export(name="testConfigurations", refs={List.class,NetworkConnectionMonitorTestConfiguration.class}, tree="[0,1]")
    private Output<List<NetworkConnectionMonitorTestConfiguration>> testConfigurations;

    /**
     * @return A `test_configuration` block as defined below.
     * 
     */
    public Output<List<NetworkConnectionMonitorTestConfiguration>> testConfigurations() {
        return this.testConfigurations;
    }
    /**
     * A `test_group` block as defined below.
     * 
     */
    @Export(name="testGroups", refs={List.class,NetworkConnectionMonitorTestGroup.class}, tree="[0,1]")
    private Output<List<NetworkConnectionMonitorTestGroup>> testGroups;

    /**
     * @return A `test_group` block as defined below.
     * 
     */
    public Output<List<NetworkConnectionMonitorTestGroup>> testGroups() {
        return this.testGroups;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public NetworkConnectionMonitor(String name) {
        this(name, NetworkConnectionMonitorArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public NetworkConnectionMonitor(String name, NetworkConnectionMonitorArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public NetworkConnectionMonitor(String name, NetworkConnectionMonitorArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:network/networkConnectionMonitor:NetworkConnectionMonitor", name, args == null ? NetworkConnectionMonitorArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private NetworkConnectionMonitor(String name, Output<String> id, @Nullable NetworkConnectionMonitorState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:network/networkConnectionMonitor:NetworkConnectionMonitor", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static NetworkConnectionMonitor get(String name, Output<String> id, @Nullable NetworkConnectionMonitorState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new NetworkConnectionMonitor(name, id, state, options);
    }
}
