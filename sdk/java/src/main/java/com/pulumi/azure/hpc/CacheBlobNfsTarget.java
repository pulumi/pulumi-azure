// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.hpc;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.hpc.CacheBlobNfsTargetArgs;
import com.pulumi.azure.hpc.inputs.CacheBlobNfsTargetState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a Blob NFSv3 Target within a HPC Cache.
 * 
 * &gt; **NOTE:**: By request of the service team the provider no longer automatically registering the `Microsoft.StorageCache` Resource Provider for this resource. To register it you can run `az provider register --namespace &#39;Microsoft.StorageCache&#39;`.
 * 
 * &gt; **NOTE:**: This resource depends on the NFSv3 enabled Storage Account, which has some prerequisites need to meet. Please checkout: &lt;https://docs.microsoft.com/azure/storage/blobs/network-file-system-protocol-support-how-to?tabs=azure-powershell&gt;.
 * 
 * ## Import
 * 
 * HPC Cache Blob NFS Targets can be imported using the `resource id`, e.g.
 * 
 * ```sh
 *  $ pulumi import azure:hpc/cacheBlobNfsTarget:CacheBlobNfsTarget example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.StorageCache/caches/cache1/storageTargets/target1
 * ```
 * 
 */
@ResourceType(type="azure:hpc/cacheBlobNfsTarget:CacheBlobNfsTarget")
public class CacheBlobNfsTarget extends com.pulumi.resources.CustomResource {
    /**
     * The name of the access policy applied to this target. Defaults to `default`.
     * 
     */
    @Export(name="accessPolicyName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> accessPolicyName;

    /**
     * @return The name of the access policy applied to this target. Defaults to `default`.
     * 
     */
    public Output<Optional<String>> accessPolicyName() {
        return Codegen.optional(this.accessPolicyName);
    }
    /**
     * The name of the HPC Cache, which the HPC Cache Blob NFS Target will be added to. Changing this forces a new HPC Cache Blob NFS Target to be created.
     * 
     */
    @Export(name="cacheName", refs={String.class}, tree="[0]")
    private Output<String> cacheName;

    /**
     * @return The name of the HPC Cache, which the HPC Cache Blob NFS Target will be added to. Changing this forces a new HPC Cache Blob NFS Target to be created.
     * 
     */
    public Output<String> cacheName() {
        return this.cacheName;
    }
    /**
     * The name which should be used for this HPC Cache Blob NFS Target. Changing this forces a new HPC Cache Blob NFS Target to be created.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name which should be used for this HPC Cache Blob NFS Target. Changing this forces a new HPC Cache Blob NFS Target to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The client-facing file path of the HPC Cache Blob NFS Target.
     * 
     */
    @Export(name="namespacePath", refs={String.class}, tree="[0]")
    private Output<String> namespacePath;

    /**
     * @return The client-facing file path of the HPC Cache Blob NFS Target.
     * 
     */
    public Output<String> namespacePath() {
        return this.namespacePath;
    }
    /**
     * The name of the Resource Group where the HPC Cache Blob NFS Target should exist. Changing this forces a new HPC Cache Blob NFS Target to be created.
     * 
     */
    @Export(name="resourceGroupName", refs={String.class}, tree="[0]")
    private Output<String> resourceGroupName;

    /**
     * @return The name of the Resource Group where the HPC Cache Blob NFS Target should exist. Changing this forces a new HPC Cache Blob NFS Target to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * The Resource Manager ID of the Storage Container used as the HPC Cache Blob NFS Target. Changing this forces a new resource to be created.
     * 
     * &gt; **Note:** This is the Resource Manager ID of the Storage Container, rather than the regular ID - and can be accessed on the `azure.storage.Container` Data Source/Resource as `resource_manager_id`.
     * 
     */
    @Export(name="storageContainerId", refs={String.class}, tree="[0]")
    private Output<String> storageContainerId;

    /**
     * @return The Resource Manager ID of the Storage Container used as the HPC Cache Blob NFS Target. Changing this forces a new resource to be created.
     * 
     * &gt; **Note:** This is the Resource Manager ID of the Storage Container, rather than the regular ID - and can be accessed on the `azure.storage.Container` Data Source/Resource as `resource_manager_id`.
     * 
     */
    public Output<String> storageContainerId() {
        return this.storageContainerId;
    }
    /**
     * The type of usage of the HPC Cache Blob NFS Target. Possible values are: `READ_HEAVY_INFREQ`, `READ_HEAVY_CHECK_180`, `READ_ONLY`, `READ_WRITE`, `WRITE_WORKLOAD_15`, `WRITE_AROUND`, `WRITE_WORKLOAD_CHECK_30`, `WRITE_WORKLOAD_CHECK_60` and `WRITE_WORKLOAD_CLOUDWS`.
     * 
     */
    @Export(name="usageModel", refs={String.class}, tree="[0]")
    private Output<String> usageModel;

    /**
     * @return The type of usage of the HPC Cache Blob NFS Target. Possible values are: `READ_HEAVY_INFREQ`, `READ_HEAVY_CHECK_180`, `READ_ONLY`, `READ_WRITE`, `WRITE_WORKLOAD_15`, `WRITE_AROUND`, `WRITE_WORKLOAD_CHECK_30`, `WRITE_WORKLOAD_CHECK_60` and `WRITE_WORKLOAD_CLOUDWS`.
     * 
     */
    public Output<String> usageModel() {
        return this.usageModel;
    }
    /**
     * The amount of time the cache waits before it checks the back-end storage for file updates. Possible values are between `1` and `31536000`.
     * 
     */
    @Export(name="verificationTimerInSeconds", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> verificationTimerInSeconds;

    /**
     * @return The amount of time the cache waits before it checks the back-end storage for file updates. Possible values are between `1` and `31536000`.
     * 
     */
    public Output<Optional<Integer>> verificationTimerInSeconds() {
        return Codegen.optional(this.verificationTimerInSeconds);
    }
    /**
     * The amount of time the cache waits after the last file change before it copies the changed file to back-end storage. Possible values are between `1` and `31536000`.
     * 
     */
    @Export(name="writeBackTimerInSeconds", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> writeBackTimerInSeconds;

    /**
     * @return The amount of time the cache waits after the last file change before it copies the changed file to back-end storage. Possible values are between `1` and `31536000`.
     * 
     */
    public Output<Optional<Integer>> writeBackTimerInSeconds() {
        return Codegen.optional(this.writeBackTimerInSeconds);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public CacheBlobNfsTarget(String name) {
        this(name, CacheBlobNfsTargetArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public CacheBlobNfsTarget(String name, CacheBlobNfsTargetArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public CacheBlobNfsTarget(String name, CacheBlobNfsTargetArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:hpc/cacheBlobNfsTarget:CacheBlobNfsTarget", name, args == null ? CacheBlobNfsTargetArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private CacheBlobNfsTarget(String name, Output<String> id, @Nullable CacheBlobNfsTargetState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:hpc/cacheBlobNfsTarget:CacheBlobNfsTarget", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static CacheBlobNfsTarget get(String name, Output<String> id, @Nullable CacheBlobNfsTargetState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new CacheBlobNfsTarget(name, id, state, options);
    }
}
