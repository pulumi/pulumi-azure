// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.cosmosdb.inputs;

import com.pulumi.azure.cosmosdb.inputs.CassandraTableSchemaClusterKeyArgs;
import com.pulumi.azure.cosmosdb.inputs.CassandraTableSchemaColumnArgs;
import com.pulumi.azure.cosmosdb.inputs.CassandraTableSchemaPartitionKeyArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CassandraTableSchemaArgs extends com.pulumi.resources.ResourceArgs {

    public static final CassandraTableSchemaArgs Empty = new CassandraTableSchemaArgs();

    /**
     * One or more `cluster_key` blocks as defined below.
     * 
     */
    @Import(name="clusterKeys")
    private @Nullable Output<List<CassandraTableSchemaClusterKeyArgs>> clusterKeys;

    /**
     * @return One or more `cluster_key` blocks as defined below.
     * 
     */
    public Optional<Output<List<CassandraTableSchemaClusterKeyArgs>>> clusterKeys() {
        return Optional.ofNullable(this.clusterKeys);
    }

    /**
     * One or more `column` blocks as defined below.
     * 
     */
    @Import(name="columns", required=true)
    private Output<List<CassandraTableSchemaColumnArgs>> columns;

    /**
     * @return One or more `column` blocks as defined below.
     * 
     */
    public Output<List<CassandraTableSchemaColumnArgs>> columns() {
        return this.columns;
    }

    /**
     * One or more `partition_key` blocks as defined below.
     * 
     */
    @Import(name="partitionKeys", required=true)
    private Output<List<CassandraTableSchemaPartitionKeyArgs>> partitionKeys;

    /**
     * @return One or more `partition_key` blocks as defined below.
     * 
     */
    public Output<List<CassandraTableSchemaPartitionKeyArgs>> partitionKeys() {
        return this.partitionKeys;
    }

    private CassandraTableSchemaArgs() {}

    private CassandraTableSchemaArgs(CassandraTableSchemaArgs $) {
        this.clusterKeys = $.clusterKeys;
        this.columns = $.columns;
        this.partitionKeys = $.partitionKeys;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CassandraTableSchemaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CassandraTableSchemaArgs $;

        public Builder() {
            $ = new CassandraTableSchemaArgs();
        }

        public Builder(CassandraTableSchemaArgs defaults) {
            $ = new CassandraTableSchemaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterKeys One or more `cluster_key` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder clusterKeys(@Nullable Output<List<CassandraTableSchemaClusterKeyArgs>> clusterKeys) {
            $.clusterKeys = clusterKeys;
            return this;
        }

        /**
         * @param clusterKeys One or more `cluster_key` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder clusterKeys(List<CassandraTableSchemaClusterKeyArgs> clusterKeys) {
            return clusterKeys(Output.of(clusterKeys));
        }

        /**
         * @param clusterKeys One or more `cluster_key` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder clusterKeys(CassandraTableSchemaClusterKeyArgs... clusterKeys) {
            return clusterKeys(List.of(clusterKeys));
        }

        /**
         * @param columns One or more `column` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder columns(Output<List<CassandraTableSchemaColumnArgs>> columns) {
            $.columns = columns;
            return this;
        }

        /**
         * @param columns One or more `column` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder columns(List<CassandraTableSchemaColumnArgs> columns) {
            return columns(Output.of(columns));
        }

        /**
         * @param columns One or more `column` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder columns(CassandraTableSchemaColumnArgs... columns) {
            return columns(List.of(columns));
        }

        /**
         * @param partitionKeys One or more `partition_key` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder partitionKeys(Output<List<CassandraTableSchemaPartitionKeyArgs>> partitionKeys) {
            $.partitionKeys = partitionKeys;
            return this;
        }

        /**
         * @param partitionKeys One or more `partition_key` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder partitionKeys(List<CassandraTableSchemaPartitionKeyArgs> partitionKeys) {
            return partitionKeys(Output.of(partitionKeys));
        }

        /**
         * @param partitionKeys One or more `partition_key` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder partitionKeys(CassandraTableSchemaPartitionKeyArgs... partitionKeys) {
            return partitionKeys(List.of(partitionKeys));
        }

        public CassandraTableSchemaArgs build() {
            if ($.columns == null) {
                throw new MissingRequiredPropertyException("CassandraTableSchemaArgs", "columns");
            }
            if ($.partitionKeys == null) {
                throw new MissingRequiredPropertyException("CassandraTableSchemaArgs", "partitionKeys");
            }
            return $;
        }
    }

}
