// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.lb;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BackendAddressPoolAddressArgs extends com.pulumi.resources.ResourceArgs {

    public static final BackendAddressPoolAddressArgs Empty = new BackendAddressPoolAddressArgs();

    /**
     * The ip config ID of the regional load balancer that&#39;s added to the global load balancer&#39;s backend address pool.
     * 
     * &gt; **Note:** For cross-region load balancer, please append the name of the load balancers, virtual machines, and other resources in each region with a -R1 and -R2.
     * 
     */
    @Import(name="backendAddressIpConfigurationId")
    private @Nullable Output<String> backendAddressIpConfigurationId;

    /**
     * @return The ip config ID of the regional load balancer that&#39;s added to the global load balancer&#39;s backend address pool.
     * 
     * &gt; **Note:** For cross-region load balancer, please append the name of the load balancers, virtual machines, and other resources in each region with a -R1 and -R2.
     * 
     */
    public Optional<Output<String>> backendAddressIpConfigurationId() {
        return Optional.ofNullable(this.backendAddressIpConfigurationId);
    }

    /**
     * The ID of the Backend Address Pool. Changing this forces a new Backend Address Pool Address to be created.
     * 
     */
    @Import(name="backendAddressPoolId", required=true)
    private Output<String> backendAddressPoolId;

    /**
     * @return The ID of the Backend Address Pool. Changing this forces a new Backend Address Pool Address to be created.
     * 
     */
    public Output<String> backendAddressPoolId() {
        return this.backendAddressPoolId;
    }

    /**
     * The Static IP Address which should be allocated to this Backend Address Pool.
     * 
     */
    @Import(name="ipAddress")
    private @Nullable Output<String> ipAddress;

    /**
     * @return The Static IP Address which should be allocated to this Backend Address Pool.
     * 
     */
    public Optional<Output<String>> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }

    /**
     * The name which should be used for this Backend Address Pool Address. Changing this forces a new Backend Address Pool Address to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name which should be used for this Backend Address Pool Address. Changing this forces a new Backend Address Pool Address to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the Virtual Network within which the Backend Address Pool should exist.
     * 
     */
    @Import(name="virtualNetworkId")
    private @Nullable Output<String> virtualNetworkId;

    /**
     * @return The ID of the Virtual Network within which the Backend Address Pool should exist.
     * 
     */
    public Optional<Output<String>> virtualNetworkId() {
        return Optional.ofNullable(this.virtualNetworkId);
    }

    private BackendAddressPoolAddressArgs() {}

    private BackendAddressPoolAddressArgs(BackendAddressPoolAddressArgs $) {
        this.backendAddressIpConfigurationId = $.backendAddressIpConfigurationId;
        this.backendAddressPoolId = $.backendAddressPoolId;
        this.ipAddress = $.ipAddress;
        this.name = $.name;
        this.virtualNetworkId = $.virtualNetworkId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackendAddressPoolAddressArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackendAddressPoolAddressArgs $;

        public Builder() {
            $ = new BackendAddressPoolAddressArgs();
        }

        public Builder(BackendAddressPoolAddressArgs defaults) {
            $ = new BackendAddressPoolAddressArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backendAddressIpConfigurationId The ip config ID of the regional load balancer that&#39;s added to the global load balancer&#39;s backend address pool.
         * 
         * &gt; **Note:** For cross-region load balancer, please append the name of the load balancers, virtual machines, and other resources in each region with a -R1 and -R2.
         * 
         * @return builder
         * 
         */
        public Builder backendAddressIpConfigurationId(@Nullable Output<String> backendAddressIpConfigurationId) {
            $.backendAddressIpConfigurationId = backendAddressIpConfigurationId;
            return this;
        }

        /**
         * @param backendAddressIpConfigurationId The ip config ID of the regional load balancer that&#39;s added to the global load balancer&#39;s backend address pool.
         * 
         * &gt; **Note:** For cross-region load balancer, please append the name of the load balancers, virtual machines, and other resources in each region with a -R1 and -R2.
         * 
         * @return builder
         * 
         */
        public Builder backendAddressIpConfigurationId(String backendAddressIpConfigurationId) {
            return backendAddressIpConfigurationId(Output.of(backendAddressIpConfigurationId));
        }

        /**
         * @param backendAddressPoolId The ID of the Backend Address Pool. Changing this forces a new Backend Address Pool Address to be created.
         * 
         * @return builder
         * 
         */
        public Builder backendAddressPoolId(Output<String> backendAddressPoolId) {
            $.backendAddressPoolId = backendAddressPoolId;
            return this;
        }

        /**
         * @param backendAddressPoolId The ID of the Backend Address Pool. Changing this forces a new Backend Address Pool Address to be created.
         * 
         * @return builder
         * 
         */
        public Builder backendAddressPoolId(String backendAddressPoolId) {
            return backendAddressPoolId(Output.of(backendAddressPoolId));
        }

        /**
         * @param ipAddress The Static IP Address which should be allocated to this Backend Address Pool.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(@Nullable Output<String> ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        /**
         * @param ipAddress The Static IP Address which should be allocated to this Backend Address Pool.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(String ipAddress) {
            return ipAddress(Output.of(ipAddress));
        }

        /**
         * @param name The name which should be used for this Backend Address Pool Address. Changing this forces a new Backend Address Pool Address to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this Backend Address Pool Address. Changing this forces a new Backend Address Pool Address to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param virtualNetworkId The ID of the Virtual Network within which the Backend Address Pool should exist.
         * 
         * @return builder
         * 
         */
        public Builder virtualNetworkId(@Nullable Output<String> virtualNetworkId) {
            $.virtualNetworkId = virtualNetworkId;
            return this;
        }

        /**
         * @param virtualNetworkId The ID of the Virtual Network within which the Backend Address Pool should exist.
         * 
         * @return builder
         * 
         */
        public Builder virtualNetworkId(String virtualNetworkId) {
            return virtualNetworkId(Output.of(virtualNetworkId));
        }

        public BackendAddressPoolAddressArgs build() {
            if ($.backendAddressPoolId == null) {
                throw new MissingRequiredPropertyException("BackendAddressPoolAddressArgs", "backendAddressPoolId");
            }
            return $;
        }
    }

}
