// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.media.inputs;

import com.pulumi.azure.media.inputs.TransformOutputAudioAnalyzerPresetArgs;
import com.pulumi.azure.media.inputs.TransformOutputBuiltinPresetArgs;
import com.pulumi.azure.media.inputs.TransformOutputCustomPresetArgs;
import com.pulumi.azure.media.inputs.TransformOutputFaceDetectorPresetArgs;
import com.pulumi.azure.media.inputs.TransformOutputVideoAnalyzerPresetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TransformOutputArgs extends com.pulumi.resources.ResourceArgs {

    public static final TransformOutputArgs Empty = new TransformOutputArgs();

    /**
     * An `audio_analyzer_preset` block as defined above.
     * 
     */
    @Import(name="audioAnalyzerPreset")
    private @Nullable Output<TransformOutputAudioAnalyzerPresetArgs> audioAnalyzerPreset;

    /**
     * @return An `audio_analyzer_preset` block as defined above.
     * 
     */
    public Optional<Output<TransformOutputAudioAnalyzerPresetArgs>> audioAnalyzerPreset() {
        return Optional.ofNullable(this.audioAnalyzerPreset);
    }

    /**
     * A `builtin_preset` block as defined above.
     * 
     */
    @Import(name="builtinPreset")
    private @Nullable Output<TransformOutputBuiltinPresetArgs> builtinPreset;

    /**
     * @return A `builtin_preset` block as defined above.
     * 
     */
    public Optional<Output<TransformOutputBuiltinPresetArgs>> builtinPreset() {
        return Optional.ofNullable(this.builtinPreset);
    }

    /**
     * A `custom_preset` block as defined above.
     * 
     */
    @Import(name="customPreset")
    private @Nullable Output<TransformOutputCustomPresetArgs> customPreset;

    /**
     * @return A `custom_preset` block as defined above.
     * 
     */
    public Optional<Output<TransformOutputCustomPresetArgs>> customPreset() {
        return Optional.ofNullable(this.customPreset);
    }

    /**
     * A `face_detector_preset` block as defined above.
     * 
     */
    @Import(name="faceDetectorPreset")
    private @Nullable Output<TransformOutputFaceDetectorPresetArgs> faceDetectorPreset;

    /**
     * @return A `face_detector_preset` block as defined above.
     * 
     */
    public Optional<Output<TransformOutputFaceDetectorPresetArgs>> faceDetectorPreset() {
        return Optional.ofNullable(this.faceDetectorPreset);
    }

    /**
     * A Transform can define more than one outputs. This property defines what the service should do when one output fails - either continue to produce other outputs, or, stop the other outputs. The overall Job state will not reflect failures of outputs that are specified with `ContinueJob`. Possible values are `StopProcessingJob` or `ContinueJob`. Defaults to `StopProcessingJob`.
     * 
     */
    @Import(name="onErrorAction")
    private @Nullable Output<String> onErrorAction;

    /**
     * @return A Transform can define more than one outputs. This property defines what the service should do when one output fails - either continue to produce other outputs, or, stop the other outputs. The overall Job state will not reflect failures of outputs that are specified with `ContinueJob`. Possible values are `StopProcessingJob` or `ContinueJob`. Defaults to `StopProcessingJob`.
     * 
     */
    public Optional<Output<String>> onErrorAction() {
        return Optional.ofNullable(this.onErrorAction);
    }

    /**
     * Sets the relative priority of the TransformOutputs within a Transform. This sets the priority that the service uses for processing Transform Outputs. Possible values are `High`, `Normal` or `Low`. Defaults to `Normal`.
     * 
     */
    @Import(name="relativePriority")
    private @Nullable Output<String> relativePriority;

    /**
     * @return Sets the relative priority of the TransformOutputs within a Transform. This sets the priority that the service uses for processing Transform Outputs. Possible values are `High`, `Normal` or `Low`. Defaults to `Normal`.
     * 
     */
    public Optional<Output<String>> relativePriority() {
        return Optional.ofNullable(this.relativePriority);
    }

    /**
     * A `video_analyzer_preset` block as defined below.
     * 
     * &gt; **NOTE:** Each output can only have one type of preset: `builtin_preset`, `audio_analyzer_preset`, `custom_preset`, `face_detector_preset` or `video_analyzer_preset`. If you need to apply different presets you must create one output for each one.
     * 
     */
    @Import(name="videoAnalyzerPreset")
    private @Nullable Output<TransformOutputVideoAnalyzerPresetArgs> videoAnalyzerPreset;

    /**
     * @return A `video_analyzer_preset` block as defined below.
     * 
     * &gt; **NOTE:** Each output can only have one type of preset: `builtin_preset`, `audio_analyzer_preset`, `custom_preset`, `face_detector_preset` or `video_analyzer_preset`. If you need to apply different presets you must create one output for each one.
     * 
     */
    public Optional<Output<TransformOutputVideoAnalyzerPresetArgs>> videoAnalyzerPreset() {
        return Optional.ofNullable(this.videoAnalyzerPreset);
    }

    private TransformOutputArgs() {}

    private TransformOutputArgs(TransformOutputArgs $) {
        this.audioAnalyzerPreset = $.audioAnalyzerPreset;
        this.builtinPreset = $.builtinPreset;
        this.customPreset = $.customPreset;
        this.faceDetectorPreset = $.faceDetectorPreset;
        this.onErrorAction = $.onErrorAction;
        this.relativePriority = $.relativePriority;
        this.videoAnalyzerPreset = $.videoAnalyzerPreset;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TransformOutputArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TransformOutputArgs $;

        public Builder() {
            $ = new TransformOutputArgs();
        }

        public Builder(TransformOutputArgs defaults) {
            $ = new TransformOutputArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param audioAnalyzerPreset An `audio_analyzer_preset` block as defined above.
         * 
         * @return builder
         * 
         */
        public Builder audioAnalyzerPreset(@Nullable Output<TransformOutputAudioAnalyzerPresetArgs> audioAnalyzerPreset) {
            $.audioAnalyzerPreset = audioAnalyzerPreset;
            return this;
        }

        /**
         * @param audioAnalyzerPreset An `audio_analyzer_preset` block as defined above.
         * 
         * @return builder
         * 
         */
        public Builder audioAnalyzerPreset(TransformOutputAudioAnalyzerPresetArgs audioAnalyzerPreset) {
            return audioAnalyzerPreset(Output.of(audioAnalyzerPreset));
        }

        /**
         * @param builtinPreset A `builtin_preset` block as defined above.
         * 
         * @return builder
         * 
         */
        public Builder builtinPreset(@Nullable Output<TransformOutputBuiltinPresetArgs> builtinPreset) {
            $.builtinPreset = builtinPreset;
            return this;
        }

        /**
         * @param builtinPreset A `builtin_preset` block as defined above.
         * 
         * @return builder
         * 
         */
        public Builder builtinPreset(TransformOutputBuiltinPresetArgs builtinPreset) {
            return builtinPreset(Output.of(builtinPreset));
        }

        /**
         * @param customPreset A `custom_preset` block as defined above.
         * 
         * @return builder
         * 
         */
        public Builder customPreset(@Nullable Output<TransformOutputCustomPresetArgs> customPreset) {
            $.customPreset = customPreset;
            return this;
        }

        /**
         * @param customPreset A `custom_preset` block as defined above.
         * 
         * @return builder
         * 
         */
        public Builder customPreset(TransformOutputCustomPresetArgs customPreset) {
            return customPreset(Output.of(customPreset));
        }

        /**
         * @param faceDetectorPreset A `face_detector_preset` block as defined above.
         * 
         * @return builder
         * 
         */
        public Builder faceDetectorPreset(@Nullable Output<TransformOutputFaceDetectorPresetArgs> faceDetectorPreset) {
            $.faceDetectorPreset = faceDetectorPreset;
            return this;
        }

        /**
         * @param faceDetectorPreset A `face_detector_preset` block as defined above.
         * 
         * @return builder
         * 
         */
        public Builder faceDetectorPreset(TransformOutputFaceDetectorPresetArgs faceDetectorPreset) {
            return faceDetectorPreset(Output.of(faceDetectorPreset));
        }

        /**
         * @param onErrorAction A Transform can define more than one outputs. This property defines what the service should do when one output fails - either continue to produce other outputs, or, stop the other outputs. The overall Job state will not reflect failures of outputs that are specified with `ContinueJob`. Possible values are `StopProcessingJob` or `ContinueJob`. Defaults to `StopProcessingJob`.
         * 
         * @return builder
         * 
         */
        public Builder onErrorAction(@Nullable Output<String> onErrorAction) {
            $.onErrorAction = onErrorAction;
            return this;
        }

        /**
         * @param onErrorAction A Transform can define more than one outputs. This property defines what the service should do when one output fails - either continue to produce other outputs, or, stop the other outputs. The overall Job state will not reflect failures of outputs that are specified with `ContinueJob`. Possible values are `StopProcessingJob` or `ContinueJob`. Defaults to `StopProcessingJob`.
         * 
         * @return builder
         * 
         */
        public Builder onErrorAction(String onErrorAction) {
            return onErrorAction(Output.of(onErrorAction));
        }

        /**
         * @param relativePriority Sets the relative priority of the TransformOutputs within a Transform. This sets the priority that the service uses for processing Transform Outputs. Possible values are `High`, `Normal` or `Low`. Defaults to `Normal`.
         * 
         * @return builder
         * 
         */
        public Builder relativePriority(@Nullable Output<String> relativePriority) {
            $.relativePriority = relativePriority;
            return this;
        }

        /**
         * @param relativePriority Sets the relative priority of the TransformOutputs within a Transform. This sets the priority that the service uses for processing Transform Outputs. Possible values are `High`, `Normal` or `Low`. Defaults to `Normal`.
         * 
         * @return builder
         * 
         */
        public Builder relativePriority(String relativePriority) {
            return relativePriority(Output.of(relativePriority));
        }

        /**
         * @param videoAnalyzerPreset A `video_analyzer_preset` block as defined below.
         * 
         * &gt; **NOTE:** Each output can only have one type of preset: `builtin_preset`, `audio_analyzer_preset`, `custom_preset`, `face_detector_preset` or `video_analyzer_preset`. If you need to apply different presets you must create one output for each one.
         * 
         * @return builder
         * 
         */
        public Builder videoAnalyzerPreset(@Nullable Output<TransformOutputVideoAnalyzerPresetArgs> videoAnalyzerPreset) {
            $.videoAnalyzerPreset = videoAnalyzerPreset;
            return this;
        }

        /**
         * @param videoAnalyzerPreset A `video_analyzer_preset` block as defined below.
         * 
         * &gt; **NOTE:** Each output can only have one type of preset: `builtin_preset`, `audio_analyzer_preset`, `custom_preset`, `face_detector_preset` or `video_analyzer_preset`. If you need to apply different presets you must create one output for each one.
         * 
         * @return builder
         * 
         */
        public Builder videoAnalyzerPreset(TransformOutputVideoAnalyzerPresetArgs videoAnalyzerPreset) {
            return videoAnalyzerPreset(Output.of(videoAnalyzerPreset));
        }

        public TransformOutputArgs build() {
            return $;
        }
    }

}
