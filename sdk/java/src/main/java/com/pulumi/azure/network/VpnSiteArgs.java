// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network;

import com.pulumi.azure.network.inputs.VpnSiteLinkArgs;
import com.pulumi.azure.network.inputs.VpnSiteO365PolicyArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VpnSiteArgs extends com.pulumi.resources.ResourceArgs {

    public static final VpnSiteArgs Empty = new VpnSiteArgs();

    /**
     * Specifies a list of IP address CIDRs that are located on your on-premises site. Traffic destined for these address spaces is routed to your local site.
     * 
     * &gt; **NOTE:** The `address_cidrs` has to be set when the `link.bgp` isn&#39;t specified.
     * 
     */
    @Import(name="addressCidrs")
    private @Nullable Output<List<String>> addressCidrs;

    /**
     * @return Specifies a list of IP address CIDRs that are located on your on-premises site. Traffic destined for these address spaces is routed to your local site.
     * 
     * &gt; **NOTE:** The `address_cidrs` has to be set when the `link.bgp` isn&#39;t specified.
     * 
     */
    public Optional<Output<List<String>>> addressCidrs() {
        return Optional.ofNullable(this.addressCidrs);
    }

    /**
     * The model of the VPN device.
     * 
     */
    @Import(name="deviceModel")
    private @Nullable Output<String> deviceModel;

    /**
     * @return The model of the VPN device.
     * 
     */
    public Optional<Output<String>> deviceModel() {
        return Optional.ofNullable(this.deviceModel);
    }

    /**
     * The name of the VPN device vendor.
     * 
     */
    @Import(name="deviceVendor")
    private @Nullable Output<String> deviceVendor;

    /**
     * @return The name of the VPN device vendor.
     * 
     */
    public Optional<Output<String>> deviceVendor() {
        return Optional.ofNullable(this.deviceVendor);
    }

    /**
     * One or more `link` blocks as defined below.
     * 
     */
    @Import(name="links")
    private @Nullable Output<List<VpnSiteLinkArgs>> links;

    /**
     * @return One or more `link` blocks as defined below.
     * 
     */
    public Optional<Output<List<VpnSiteLinkArgs>>> links() {
        return Optional.ofNullable(this.links);
    }

    /**
     * The Azure Region where the VPN Site should exist. Changing this forces a new VPN Site to be created.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The Azure Region where the VPN Site should exist. Changing this forces a new VPN Site to be created.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name which should be used for this VPN Site. Changing this forces a new VPN Site to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name which should be used for this VPN Site. Changing this forces a new VPN Site to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * An `o365_policy` block as defined below.
     * 
     */
    @Import(name="o365Policy")
    private @Nullable Output<VpnSiteO365PolicyArgs> o365Policy;

    /**
     * @return An `o365_policy` block as defined below.
     * 
     */
    public Optional<Output<VpnSiteO365PolicyArgs>> o365Policy() {
        return Optional.ofNullable(this.o365Policy);
    }

    /**
     * The name of the Resource Group where the VPN Site should exist. Changing this forces a new VPN Site to be created.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the Resource Group where the VPN Site should exist. Changing this forces a new VPN Site to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * A mapping of tags which should be assigned to the VPN Site.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags which should be assigned to the VPN Site.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The ID of the Virtual Wan where this VPN site resides in. Changing this forces a new VPN Site to be created.
     * 
     */
    @Import(name="virtualWanId", required=true)
    private Output<String> virtualWanId;

    /**
     * @return The ID of the Virtual Wan where this VPN site resides in. Changing this forces a new VPN Site to be created.
     * 
     */
    public Output<String> virtualWanId() {
        return this.virtualWanId;
    }

    private VpnSiteArgs() {}

    private VpnSiteArgs(VpnSiteArgs $) {
        this.addressCidrs = $.addressCidrs;
        this.deviceModel = $.deviceModel;
        this.deviceVendor = $.deviceVendor;
        this.links = $.links;
        this.location = $.location;
        this.name = $.name;
        this.o365Policy = $.o365Policy;
        this.resourceGroupName = $.resourceGroupName;
        this.tags = $.tags;
        this.virtualWanId = $.virtualWanId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VpnSiteArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VpnSiteArgs $;

        public Builder() {
            $ = new VpnSiteArgs();
        }

        public Builder(VpnSiteArgs defaults) {
            $ = new VpnSiteArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param addressCidrs Specifies a list of IP address CIDRs that are located on your on-premises site. Traffic destined for these address spaces is routed to your local site.
         * 
         * &gt; **NOTE:** The `address_cidrs` has to be set when the `link.bgp` isn&#39;t specified.
         * 
         * @return builder
         * 
         */
        public Builder addressCidrs(@Nullable Output<List<String>> addressCidrs) {
            $.addressCidrs = addressCidrs;
            return this;
        }

        /**
         * @param addressCidrs Specifies a list of IP address CIDRs that are located on your on-premises site. Traffic destined for these address spaces is routed to your local site.
         * 
         * &gt; **NOTE:** The `address_cidrs` has to be set when the `link.bgp` isn&#39;t specified.
         * 
         * @return builder
         * 
         */
        public Builder addressCidrs(List<String> addressCidrs) {
            return addressCidrs(Output.of(addressCidrs));
        }

        /**
         * @param addressCidrs Specifies a list of IP address CIDRs that are located on your on-premises site. Traffic destined for these address spaces is routed to your local site.
         * 
         * &gt; **NOTE:** The `address_cidrs` has to be set when the `link.bgp` isn&#39;t specified.
         * 
         * @return builder
         * 
         */
        public Builder addressCidrs(String... addressCidrs) {
            return addressCidrs(List.of(addressCidrs));
        }

        /**
         * @param deviceModel The model of the VPN device.
         * 
         * @return builder
         * 
         */
        public Builder deviceModel(@Nullable Output<String> deviceModel) {
            $.deviceModel = deviceModel;
            return this;
        }

        /**
         * @param deviceModel The model of the VPN device.
         * 
         * @return builder
         * 
         */
        public Builder deviceModel(String deviceModel) {
            return deviceModel(Output.of(deviceModel));
        }

        /**
         * @param deviceVendor The name of the VPN device vendor.
         * 
         * @return builder
         * 
         */
        public Builder deviceVendor(@Nullable Output<String> deviceVendor) {
            $.deviceVendor = deviceVendor;
            return this;
        }

        /**
         * @param deviceVendor The name of the VPN device vendor.
         * 
         * @return builder
         * 
         */
        public Builder deviceVendor(String deviceVendor) {
            return deviceVendor(Output.of(deviceVendor));
        }

        /**
         * @param links One or more `link` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder links(@Nullable Output<List<VpnSiteLinkArgs>> links) {
            $.links = links;
            return this;
        }

        /**
         * @param links One or more `link` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder links(List<VpnSiteLinkArgs> links) {
            return links(Output.of(links));
        }

        /**
         * @param links One or more `link` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder links(VpnSiteLinkArgs... links) {
            return links(List.of(links));
        }

        /**
         * @param location The Azure Region where the VPN Site should exist. Changing this forces a new VPN Site to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The Azure Region where the VPN Site should exist. Changing this forces a new VPN Site to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The name which should be used for this VPN Site. Changing this forces a new VPN Site to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this VPN Site. Changing this forces a new VPN Site to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param o365Policy An `o365_policy` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder o365Policy(@Nullable Output<VpnSiteO365PolicyArgs> o365Policy) {
            $.o365Policy = o365Policy;
            return this;
        }

        /**
         * @param o365Policy An `o365_policy` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder o365Policy(VpnSiteO365PolicyArgs o365Policy) {
            return o365Policy(Output.of(o365Policy));
        }

        /**
         * @param resourceGroupName The name of the Resource Group where the VPN Site should exist. Changing this forces a new VPN Site to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the Resource Group where the VPN Site should exist. Changing this forces a new VPN Site to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param tags A mapping of tags which should be assigned to the VPN Site.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags which should be assigned to the VPN Site.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param virtualWanId The ID of the Virtual Wan where this VPN site resides in. Changing this forces a new VPN Site to be created.
         * 
         * @return builder
         * 
         */
        public Builder virtualWanId(Output<String> virtualWanId) {
            $.virtualWanId = virtualWanId;
            return this;
        }

        /**
         * @param virtualWanId The ID of the Virtual Wan where this VPN site resides in. Changing this forces a new VPN Site to be created.
         * 
         * @return builder
         * 
         */
        public Builder virtualWanId(String virtualWanId) {
            return virtualWanId(Output.of(virtualWanId));
        }

        public VpnSiteArgs build() {
            if ($.resourceGroupName == null) {
                throw new MissingRequiredPropertyException("VpnSiteArgs", "resourceGroupName");
            }
            if ($.virtualWanId == null) {
                throw new MissingRequiredPropertyException("VpnSiteArgs", "virtualWanId");
            }
            return $;
        }
    }

}
