// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.policy.outputs;

import com.pulumi.azure.policy.outputs.GetPolicyAssignmentIdentity;
import com.pulumi.azure.policy.outputs.GetPolicyAssignmentNonComplianceMessage;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetPolicyAssignmentResult {
    /**
     * @return The description of this Policy Assignment.
     * 
     */
    private String description;
    /**
     * @return The display name of this Policy Assignment.
     * 
     */
    private String displayName;
    /**
     * @return Whether this Policy is enforced or not?
     * 
     */
    private Boolean enforce;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return A `identity` block as defined below.
     * 
     */
    private List<GetPolicyAssignmentIdentity> identities;
    /**
     * @return The Azure Region where the Policy Assignment exists.
     * 
     */
    private String location;
    /**
     * @return A JSON mapping of any Metadata for this Policy.
     * 
     */
    private String metadata;
    private String name;
    /**
     * @return A `non_compliance_message` block as defined below.
     * 
     */
    private List<GetPolicyAssignmentNonComplianceMessage> nonComplianceMessages;
    /**
     * @return A `not_scopes` block as defined below.
     * 
     */
    private List<String> notScopes;
    /**
     * @return A JSON mapping of any Parameters for this Policy.
     * 
     */
    private String parameters;
    /**
     * @return The ID of the assigned Policy Definition.
     * 
     */
    private String policyDefinitionId;
    private String scopeId;

    private GetPolicyAssignmentResult() {}
    /**
     * @return The description of this Policy Assignment.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The display name of this Policy Assignment.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Whether this Policy is enforced or not?
     * 
     */
    public Boolean enforce() {
        return this.enforce;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A `identity` block as defined below.
     * 
     */
    public List<GetPolicyAssignmentIdentity> identities() {
        return this.identities;
    }
    /**
     * @return The Azure Region where the Policy Assignment exists.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return A JSON mapping of any Metadata for this Policy.
     * 
     */
    public String metadata() {
        return this.metadata;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return A `non_compliance_message` block as defined below.
     * 
     */
    public List<GetPolicyAssignmentNonComplianceMessage> nonComplianceMessages() {
        return this.nonComplianceMessages;
    }
    /**
     * @return A `not_scopes` block as defined below.
     * 
     */
    public List<String> notScopes() {
        return this.notScopes;
    }
    /**
     * @return A JSON mapping of any Parameters for this Policy.
     * 
     */
    public String parameters() {
        return this.parameters;
    }
    /**
     * @return The ID of the assigned Policy Definition.
     * 
     */
    public String policyDefinitionId() {
        return this.policyDefinitionId;
    }
    public String scopeId() {
        return this.scopeId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPolicyAssignmentResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String description;
        private String displayName;
        private Boolean enforce;
        private String id;
        private List<GetPolicyAssignmentIdentity> identities;
        private String location;
        private String metadata;
        private String name;
        private List<GetPolicyAssignmentNonComplianceMessage> nonComplianceMessages;
        private List<String> notScopes;
        private String parameters;
        private String policyDefinitionId;
        private String scopeId;
        public Builder() {}
        public Builder(GetPolicyAssignmentResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.enforce = defaults.enforce;
    	      this.id = defaults.id;
    	      this.identities = defaults.identities;
    	      this.location = defaults.location;
    	      this.metadata = defaults.metadata;
    	      this.name = defaults.name;
    	      this.nonComplianceMessages = defaults.nonComplianceMessages;
    	      this.notScopes = defaults.notScopes;
    	      this.parameters = defaults.parameters;
    	      this.policyDefinitionId = defaults.policyDefinitionId;
    	      this.scopeId = defaults.scopeId;
        }

        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        @CustomType.Setter
        public Builder enforce(Boolean enforce) {
            this.enforce = Objects.requireNonNull(enforce);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder identities(List<GetPolicyAssignmentIdentity> identities) {
            this.identities = Objects.requireNonNull(identities);
            return this;
        }
        public Builder identities(GetPolicyAssignmentIdentity... identities) {
            return identities(List.of(identities));
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder metadata(String metadata) {
            this.metadata = Objects.requireNonNull(metadata);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder nonComplianceMessages(List<GetPolicyAssignmentNonComplianceMessage> nonComplianceMessages) {
            this.nonComplianceMessages = Objects.requireNonNull(nonComplianceMessages);
            return this;
        }
        public Builder nonComplianceMessages(GetPolicyAssignmentNonComplianceMessage... nonComplianceMessages) {
            return nonComplianceMessages(List.of(nonComplianceMessages));
        }
        @CustomType.Setter
        public Builder notScopes(List<String> notScopes) {
            this.notScopes = Objects.requireNonNull(notScopes);
            return this;
        }
        public Builder notScopes(String... notScopes) {
            return notScopes(List.of(notScopes));
        }
        @CustomType.Setter
        public Builder parameters(String parameters) {
            this.parameters = Objects.requireNonNull(parameters);
            return this;
        }
        @CustomType.Setter
        public Builder policyDefinitionId(String policyDefinitionId) {
            this.policyDefinitionId = Objects.requireNonNull(policyDefinitionId);
            return this;
        }
        @CustomType.Setter
        public Builder scopeId(String scopeId) {
            this.scopeId = Objects.requireNonNull(scopeId);
            return this;
        }
        public GetPolicyAssignmentResult build() {
            final var o = new GetPolicyAssignmentResult();
            o.description = description;
            o.displayName = displayName;
            o.enforce = enforce;
            o.id = id;
            o.identities = identities;
            o.location = location;
            o.metadata = metadata;
            o.name = name;
            o.nonComplianceMessages = nonComplianceMessages;
            o.notScopes = notScopes;
            o.parameters = parameters;
            o.policyDefinitionId = policyDefinitionId;
            o.scopeId = scopeId;
            return o;
        }
    }
}
