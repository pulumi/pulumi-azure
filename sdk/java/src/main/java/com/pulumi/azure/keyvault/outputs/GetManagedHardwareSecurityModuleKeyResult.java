// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.keyvault.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetManagedHardwareSecurityModuleKeyResult {
    /**
     * @return The EC Curve name of this Managed Hardware Security Module Key.
     * 
     */
    private String curve;
    private String expirationDate;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return A list of JSON web key operations assigned to this Managed Hardware Security Module Key
     * 
     */
    private List<String> keyOpts;
    /**
     * @return Specifies the Size of this Managed Hardware Security Module Key.
     * 
     */
    private Integer keySize;
    /**
     * @return Specifies the Key Type of this Managed Hardware Security Module Key
     * 
     */
    private String keyType;
    private String managedHsmId;
    private String name;
    private String notBeforeDate;
    /**
     * @return A mapping of tags assigned to this Managed Hardware Security Module Key.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return The current version of the Managed Hardware Security Module Key.
     * 
     */
    private String version;
    /**
     * @return The versioned ID of the Managed Hardware Security Module Key.
     * 
     */
    private String versionedId;

    private GetManagedHardwareSecurityModuleKeyResult() {}
    /**
     * @return The EC Curve name of this Managed Hardware Security Module Key.
     * 
     */
    public String curve() {
        return this.curve;
    }
    public String expirationDate() {
        return this.expirationDate;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A list of JSON web key operations assigned to this Managed Hardware Security Module Key
     * 
     */
    public List<String> keyOpts() {
        return this.keyOpts;
    }
    /**
     * @return Specifies the Size of this Managed Hardware Security Module Key.
     * 
     */
    public Integer keySize() {
        return this.keySize;
    }
    /**
     * @return Specifies the Key Type of this Managed Hardware Security Module Key
     * 
     */
    public String keyType() {
        return this.keyType;
    }
    public String managedHsmId() {
        return this.managedHsmId;
    }
    public String name() {
        return this.name;
    }
    public String notBeforeDate() {
        return this.notBeforeDate;
    }
    /**
     * @return A mapping of tags assigned to this Managed Hardware Security Module Key.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return The current version of the Managed Hardware Security Module Key.
     * 
     */
    public String version() {
        return this.version;
    }
    /**
     * @return The versioned ID of the Managed Hardware Security Module Key.
     * 
     */
    public String versionedId() {
        return this.versionedId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedHardwareSecurityModuleKeyResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String curve;
        private String expirationDate;
        private String id;
        private List<String> keyOpts;
        private Integer keySize;
        private String keyType;
        private String managedHsmId;
        private String name;
        private String notBeforeDate;
        private Map<String,String> tags;
        private String version;
        private String versionedId;
        public Builder() {}
        public Builder(GetManagedHardwareSecurityModuleKeyResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.curve = defaults.curve;
    	      this.expirationDate = defaults.expirationDate;
    	      this.id = defaults.id;
    	      this.keyOpts = defaults.keyOpts;
    	      this.keySize = defaults.keySize;
    	      this.keyType = defaults.keyType;
    	      this.managedHsmId = defaults.managedHsmId;
    	      this.name = defaults.name;
    	      this.notBeforeDate = defaults.notBeforeDate;
    	      this.tags = defaults.tags;
    	      this.version = defaults.version;
    	      this.versionedId = defaults.versionedId;
        }

        @CustomType.Setter
        public Builder curve(String curve) {
            if (curve == null) {
              throw new MissingRequiredPropertyException("GetManagedHardwareSecurityModuleKeyResult", "curve");
            }
            this.curve = curve;
            return this;
        }
        @CustomType.Setter
        public Builder expirationDate(String expirationDate) {
            if (expirationDate == null) {
              throw new MissingRequiredPropertyException("GetManagedHardwareSecurityModuleKeyResult", "expirationDate");
            }
            this.expirationDate = expirationDate;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetManagedHardwareSecurityModuleKeyResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder keyOpts(List<String> keyOpts) {
            if (keyOpts == null) {
              throw new MissingRequiredPropertyException("GetManagedHardwareSecurityModuleKeyResult", "keyOpts");
            }
            this.keyOpts = keyOpts;
            return this;
        }
        public Builder keyOpts(String... keyOpts) {
            return keyOpts(List.of(keyOpts));
        }
        @CustomType.Setter
        public Builder keySize(Integer keySize) {
            if (keySize == null) {
              throw new MissingRequiredPropertyException("GetManagedHardwareSecurityModuleKeyResult", "keySize");
            }
            this.keySize = keySize;
            return this;
        }
        @CustomType.Setter
        public Builder keyType(String keyType) {
            if (keyType == null) {
              throw new MissingRequiredPropertyException("GetManagedHardwareSecurityModuleKeyResult", "keyType");
            }
            this.keyType = keyType;
            return this;
        }
        @CustomType.Setter
        public Builder managedHsmId(String managedHsmId) {
            if (managedHsmId == null) {
              throw new MissingRequiredPropertyException("GetManagedHardwareSecurityModuleKeyResult", "managedHsmId");
            }
            this.managedHsmId = managedHsmId;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetManagedHardwareSecurityModuleKeyResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder notBeforeDate(String notBeforeDate) {
            if (notBeforeDate == null) {
              throw new MissingRequiredPropertyException("GetManagedHardwareSecurityModuleKeyResult", "notBeforeDate");
            }
            this.notBeforeDate = notBeforeDate;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetManagedHardwareSecurityModuleKeyResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder version(String version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetManagedHardwareSecurityModuleKeyResult", "version");
            }
            this.version = version;
            return this;
        }
        @CustomType.Setter
        public Builder versionedId(String versionedId) {
            if (versionedId == null) {
              throw new MissingRequiredPropertyException("GetManagedHardwareSecurityModuleKeyResult", "versionedId");
            }
            this.versionedId = versionedId;
            return this;
        }
        public GetManagedHardwareSecurityModuleKeyResult build() {
            final var _resultValue = new GetManagedHardwareSecurityModuleKeyResult();
            _resultValue.curve = curve;
            _resultValue.expirationDate = expirationDate;
            _resultValue.id = id;
            _resultValue.keyOpts = keyOpts;
            _resultValue.keySize = keySize;
            _resultValue.keyType = keyType;
            _resultValue.managedHsmId = managedHsmId;
            _resultValue.name = name;
            _resultValue.notBeforeDate = notBeforeDate;
            _resultValue.tags = tags;
            _resultValue.version = version;
            _resultValue.versionedId = versionedId;
            return _resultValue;
        }
    }
}
