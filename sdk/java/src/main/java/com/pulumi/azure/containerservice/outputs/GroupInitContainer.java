// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerservice.outputs;

import com.pulumi.azure.containerservice.outputs.GroupInitContainerSecurity;
import com.pulumi.azure.containerservice.outputs.GroupInitContainerVolume;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GroupInitContainer {
    /**
     * @return A list of commands which should be run on the container. Changing this forces a new resource to be created.
     * 
     */
    private @Nullable List<String> commands;
    /**
     * @return A list of environment variables to be set on the container. Specified as a map of name/value pairs. Changing this forces a new resource to be created.
     * 
     */
    private @Nullable Map<String,String> environmentVariables;
    /**
     * @return The container image name. Changing this forces a new resource to be created.
     * 
     */
    private String image;
    /**
     * @return Specifies the name of the Container. Changing this forces a new resource to be created.
     * 
     */
    private String name;
    /**
     * @return A list of sensitive environment variables to be set on the container. Specified as a map of name/value pairs. Changing this forces a new resource to be created.
     * 
     */
    private @Nullable Map<String,String> secureEnvironmentVariables;
    /**
     * @return The definition of the security context for this container as documented in the `security` block below. Changing this forces a new resource to be created.
     * 
     */
    private @Nullable List<GroupInitContainerSecurity> securities;
    /**
     * @return The definition of a volume mount for this container as documented in the `volume` block below. Changing this forces a new resource to be created.
     * 
     */
    private @Nullable List<GroupInitContainerVolume> volumes;

    private GroupInitContainer() {}
    /**
     * @return A list of commands which should be run on the container. Changing this forces a new resource to be created.
     * 
     */
    public List<String> commands() {
        return this.commands == null ? List.of() : this.commands;
    }
    /**
     * @return A list of environment variables to be set on the container. Specified as a map of name/value pairs. Changing this forces a new resource to be created.
     * 
     */
    public Map<String,String> environmentVariables() {
        return this.environmentVariables == null ? Map.of() : this.environmentVariables;
    }
    /**
     * @return The container image name. Changing this forces a new resource to be created.
     * 
     */
    public String image() {
        return this.image;
    }
    /**
     * @return Specifies the name of the Container. Changing this forces a new resource to be created.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return A list of sensitive environment variables to be set on the container. Specified as a map of name/value pairs. Changing this forces a new resource to be created.
     * 
     */
    public Map<String,String> secureEnvironmentVariables() {
        return this.secureEnvironmentVariables == null ? Map.of() : this.secureEnvironmentVariables;
    }
    /**
     * @return The definition of the security context for this container as documented in the `security` block below. Changing this forces a new resource to be created.
     * 
     */
    public List<GroupInitContainerSecurity> securities() {
        return this.securities == null ? List.of() : this.securities;
    }
    /**
     * @return The definition of a volume mount for this container as documented in the `volume` block below. Changing this forces a new resource to be created.
     * 
     */
    public List<GroupInitContainerVolume> volumes() {
        return this.volumes == null ? List.of() : this.volumes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GroupInitContainer defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> commands;
        private @Nullable Map<String,String> environmentVariables;
        private String image;
        private String name;
        private @Nullable Map<String,String> secureEnvironmentVariables;
        private @Nullable List<GroupInitContainerSecurity> securities;
        private @Nullable List<GroupInitContainerVolume> volumes;
        public Builder() {}
        public Builder(GroupInitContainer defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.commands = defaults.commands;
    	      this.environmentVariables = defaults.environmentVariables;
    	      this.image = defaults.image;
    	      this.name = defaults.name;
    	      this.secureEnvironmentVariables = defaults.secureEnvironmentVariables;
    	      this.securities = defaults.securities;
    	      this.volumes = defaults.volumes;
        }

        @CustomType.Setter
        public Builder commands(@Nullable List<String> commands) {

            this.commands = commands;
            return this;
        }
        public Builder commands(String... commands) {
            return commands(List.of(commands));
        }
        @CustomType.Setter
        public Builder environmentVariables(@Nullable Map<String,String> environmentVariables) {

            this.environmentVariables = environmentVariables;
            return this;
        }
        @CustomType.Setter
        public Builder image(String image) {
            if (image == null) {
              throw new MissingRequiredPropertyException("GroupInitContainer", "image");
            }
            this.image = image;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GroupInitContainer", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder secureEnvironmentVariables(@Nullable Map<String,String> secureEnvironmentVariables) {

            this.secureEnvironmentVariables = secureEnvironmentVariables;
            return this;
        }
        @CustomType.Setter
        public Builder securities(@Nullable List<GroupInitContainerSecurity> securities) {

            this.securities = securities;
            return this;
        }
        public Builder securities(GroupInitContainerSecurity... securities) {
            return securities(List.of(securities));
        }
        @CustomType.Setter
        public Builder volumes(@Nullable List<GroupInitContainerVolume> volumes) {

            this.volumes = volumes;
            return this;
        }
        public Builder volumes(GroupInitContainerVolume... volumes) {
            return volumes(List.of(volumes));
        }
        public GroupInitContainer build() {
            final var _resultValue = new GroupInitContainer();
            _resultValue.commands = commands;
            _resultValue.environmentVariables = environmentVariables;
            _resultValue.image = image;
            _resultValue.name = name;
            _resultValue.secureEnvironmentVariables = secureEnvironmentVariables;
            _resultValue.securities = securities;
            _resultValue.volumes = volumes;
            return _resultValue;
        }
    }
}
