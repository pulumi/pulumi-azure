// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.monitoring.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class LogzSubAccountUser {
    /**
     * @return Email of the user used by Logz for contacting them if needed. A valid email address consists of an email prefix and an email domain. The prefix and domain may contain only letters, numbers, underscores, periods and dashes. Changing this forces a new logz Sub Account to be created.
     * 
     */
    private final String email;
    /**
     * @return First Name of the user. Possible values must be between 1 and 50 characters in length. Changing this forces a new logz Sub Account to be created.
     * 
     */
    private final String firstName;
    /**
     * @return Last Name of the user. Possible values must be between 1 and 50 characters in length. Changing this forces a new logz Sub Account to be created.
     * 
     */
    private final String lastName;
    /**
     * @return Phone number of the user used by Logz for contacting them if needed. Possible values must be between 1 and 40 characters in length. Changing this forces a new logz Sub Account to be created.
     * 
     */
    private final String phoneNumber;

    @CustomType.Constructor
    private LogzSubAccountUser(
        @CustomType.Parameter("email") String email,
        @CustomType.Parameter("firstName") String firstName,
        @CustomType.Parameter("lastName") String lastName,
        @CustomType.Parameter("phoneNumber") String phoneNumber) {
        this.email = email;
        this.firstName = firstName;
        this.lastName = lastName;
        this.phoneNumber = phoneNumber;
    }

    /**
     * @return Email of the user used by Logz for contacting them if needed. A valid email address consists of an email prefix and an email domain. The prefix and domain may contain only letters, numbers, underscores, periods and dashes. Changing this forces a new logz Sub Account to be created.
     * 
     */
    public String email() {
        return this.email;
    }
    /**
     * @return First Name of the user. Possible values must be between 1 and 50 characters in length. Changing this forces a new logz Sub Account to be created.
     * 
     */
    public String firstName() {
        return this.firstName;
    }
    /**
     * @return Last Name of the user. Possible values must be between 1 and 50 characters in length. Changing this forces a new logz Sub Account to be created.
     * 
     */
    public String lastName() {
        return this.lastName;
    }
    /**
     * @return Phone number of the user used by Logz for contacting them if needed. Possible values must be between 1 and 40 characters in length. Changing this forces a new logz Sub Account to be created.
     * 
     */
    public String phoneNumber() {
        return this.phoneNumber;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LogzSubAccountUser defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String email;
        private String firstName;
        private String lastName;
        private String phoneNumber;

        public Builder() {
    	      // Empty
        }

        public Builder(LogzSubAccountUser defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.email = defaults.email;
    	      this.firstName = defaults.firstName;
    	      this.lastName = defaults.lastName;
    	      this.phoneNumber = defaults.phoneNumber;
        }

        public Builder email(String email) {
            this.email = Objects.requireNonNull(email);
            return this;
        }
        public Builder firstName(String firstName) {
            this.firstName = Objects.requireNonNull(firstName);
            return this;
        }
        public Builder lastName(String lastName) {
            this.lastName = Objects.requireNonNull(lastName);
            return this;
        }
        public Builder phoneNumber(String phoneNumber) {
            this.phoneNumber = Objects.requireNonNull(phoneNumber);
            return this;
        }        public LogzSubAccountUser build() {
            return new LogzSubAccountUser(email, firstName, lastName, phoneNumber);
        }
    }
}
