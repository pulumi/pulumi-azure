// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.monitoring.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class DataCollectionRuleDataSourcesIisLog {
    /**
     * @return Specifies a list of absolute paths where the log files are located.
     * 
     */
    private @Nullable List<String> logDirectories;
    /**
     * @return The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
     * 
     */
    private String name;
    /**
     * @return Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible value is `Microsoft-W3CIISLog`.
     * 
     */
    private List<String> streams;

    private DataCollectionRuleDataSourcesIisLog() {}
    /**
     * @return Specifies a list of absolute paths where the log files are located.
     * 
     */
    public List<String> logDirectories() {
        return this.logDirectories == null ? List.of() : this.logDirectories;
    }
    /**
     * @return The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible value is `Microsoft-W3CIISLog`.
     * 
     */
    public List<String> streams() {
        return this.streams;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataCollectionRuleDataSourcesIisLog defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> logDirectories;
        private String name;
        private List<String> streams;
        public Builder() {}
        public Builder(DataCollectionRuleDataSourcesIisLog defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.logDirectories = defaults.logDirectories;
    	      this.name = defaults.name;
    	      this.streams = defaults.streams;
        }

        @CustomType.Setter
        public Builder logDirectories(@Nullable List<String> logDirectories) {

            this.logDirectories = logDirectories;
            return this;
        }
        public Builder logDirectories(String... logDirectories) {
            return logDirectories(List.of(logDirectories));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("DataCollectionRuleDataSourcesIisLog", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder streams(List<String> streams) {
            if (streams == null) {
              throw new MissingRequiredPropertyException("DataCollectionRuleDataSourcesIisLog", "streams");
            }
            this.streams = streams;
            return this;
        }
        public Builder streams(String... streams) {
            return streams(List.of(streams));
        }
        public DataCollectionRuleDataSourcesIisLog build() {
            final var _resultValue = new DataCollectionRuleDataSourcesIisLog();
            _resultValue.logDirectories = logDirectories;
            _resultValue.name = name;
            _resultValue.streams = streams;
            return _resultValue;
        }
    }
}
