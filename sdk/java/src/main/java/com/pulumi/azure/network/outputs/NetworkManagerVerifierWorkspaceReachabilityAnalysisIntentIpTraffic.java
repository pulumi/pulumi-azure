// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentIpTraffic {
    /**
     * @return Specifies a list of IPv4 or IPv6 addresses or ranges using CIDR notation of the source you want to verify. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
     * 
     */
    private List<String> destinationIps;
    /**
     * @return Specifies a list of ports or ranges of the destination you want to verify. To specify any port, use `[&#34;*&#34;]`. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
     * 
     */
    private List<String> destinationPorts;
    /**
     * @return Specifies a list of network protocols. Possible values are `Any`, `TCP`, `UDP` and `ICMP`. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
     * 
     */
    private List<String> protocols;
    /**
     * @return Specifies a list of IPv4 or IPv6 addresses or ranges using CIDR notation of the source you want to verify. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
     * 
     */
    private List<String> sourceIps;
    /**
     * @return Specifies a list of ports or ranges of the source you want to verify. To specify any port, use `[&#34;*&#34;]`. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
     * 
     */
    private List<String> sourcePorts;

    private NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentIpTraffic() {}
    /**
     * @return Specifies a list of IPv4 or IPv6 addresses or ranges using CIDR notation of the source you want to verify. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
     * 
     */
    public List<String> destinationIps() {
        return this.destinationIps;
    }
    /**
     * @return Specifies a list of ports or ranges of the destination you want to verify. To specify any port, use `[&#34;*&#34;]`. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
     * 
     */
    public List<String> destinationPorts() {
        return this.destinationPorts;
    }
    /**
     * @return Specifies a list of network protocols. Possible values are `Any`, `TCP`, `UDP` and `ICMP`. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
     * 
     */
    public List<String> protocols() {
        return this.protocols;
    }
    /**
     * @return Specifies a list of IPv4 or IPv6 addresses or ranges using CIDR notation of the source you want to verify. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
     * 
     */
    public List<String> sourceIps() {
        return this.sourceIps;
    }
    /**
     * @return Specifies a list of ports or ranges of the source you want to verify. To specify any port, use `[&#34;*&#34;]`. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
     * 
     */
    public List<String> sourcePorts() {
        return this.sourcePorts;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentIpTraffic defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> destinationIps;
        private List<String> destinationPorts;
        private List<String> protocols;
        private List<String> sourceIps;
        private List<String> sourcePorts;
        public Builder() {}
        public Builder(NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentIpTraffic defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.destinationIps = defaults.destinationIps;
    	      this.destinationPorts = defaults.destinationPorts;
    	      this.protocols = defaults.protocols;
    	      this.sourceIps = defaults.sourceIps;
    	      this.sourcePorts = defaults.sourcePorts;
        }

        @CustomType.Setter
        public Builder destinationIps(List<String> destinationIps) {
            if (destinationIps == null) {
              throw new MissingRequiredPropertyException("NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentIpTraffic", "destinationIps");
            }
            this.destinationIps = destinationIps;
            return this;
        }
        public Builder destinationIps(String... destinationIps) {
            return destinationIps(List.of(destinationIps));
        }
        @CustomType.Setter
        public Builder destinationPorts(List<String> destinationPorts) {
            if (destinationPorts == null) {
              throw new MissingRequiredPropertyException("NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentIpTraffic", "destinationPorts");
            }
            this.destinationPorts = destinationPorts;
            return this;
        }
        public Builder destinationPorts(String... destinationPorts) {
            return destinationPorts(List.of(destinationPorts));
        }
        @CustomType.Setter
        public Builder protocols(List<String> protocols) {
            if (protocols == null) {
              throw new MissingRequiredPropertyException("NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentIpTraffic", "protocols");
            }
            this.protocols = protocols;
            return this;
        }
        public Builder protocols(String... protocols) {
            return protocols(List.of(protocols));
        }
        @CustomType.Setter
        public Builder sourceIps(List<String> sourceIps) {
            if (sourceIps == null) {
              throw new MissingRequiredPropertyException("NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentIpTraffic", "sourceIps");
            }
            this.sourceIps = sourceIps;
            return this;
        }
        public Builder sourceIps(String... sourceIps) {
            return sourceIps(List.of(sourceIps));
        }
        @CustomType.Setter
        public Builder sourcePorts(List<String> sourcePorts) {
            if (sourcePorts == null) {
              throw new MissingRequiredPropertyException("NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentIpTraffic", "sourcePorts");
            }
            this.sourcePorts = sourcePorts;
            return this;
        }
        public Builder sourcePorts(String... sourcePorts) {
            return sourcePorts(List.of(sourcePorts));
        }
        public NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentIpTraffic build() {
            final var _resultValue = new NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentIpTraffic();
            _resultValue.destinationIps = destinationIps;
            _resultValue.destinationPorts = destinationPorts;
            _resultValue.protocols = protocols;
            _resultValue.sourceIps = sourceIps;
            _resultValue.sourcePorts = sourcePorts;
            return _resultValue;
        }
    }
}
