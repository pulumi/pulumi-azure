// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerservice;

import com.pulumi.azure.containerservice.inputs.ConnectedRegistryNotificationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectedRegistryArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectedRegistryArgs Empty = new ConnectedRegistryArgs();

    /**
     * Should the log auditing be enabled?
     * 
     */
    @Import(name="auditLogEnabled")
    private @Nullable Output<Boolean> auditLogEnabled;

    /**
     * @return Should the log auditing be enabled?
     * 
     */
    public Optional<Output<Boolean>> auditLogEnabled() {
        return Optional.ofNullable(this.auditLogEnabled);
    }

    /**
     * Specifies a list of IDs of Container Registry Tokens, which are meant to be used by the clients to connect to the Connected Registry.
     * 
     */
    @Import(name="clientTokenIds")
    private @Nullable Output<List<String>> clientTokenIds;

    /**
     * @return Specifies a list of IDs of Container Registry Tokens, which are meant to be used by the clients to connect to the Connected Registry.
     * 
     */
    public Optional<Output<List<String>>> clientTokenIds() {
        return Optional.ofNullable(this.clientTokenIds);
    }

    /**
     * The ID of the Container Registry that this Connected Registry will reside in. Changing this forces a new Container Connected Registry to be created.
     * 
     * &gt; If `parent_registry_id` is not specified, the Connected Registry will be connected to the Container Registry identified by `container_registry_id`.
     * 
     */
    @Import(name="containerRegistryId", required=true)
    private Output<String> containerRegistryId;

    /**
     * @return The ID of the Container Registry that this Connected Registry will reside in. Changing this forces a new Container Connected Registry to be created.
     * 
     * &gt; If `parent_registry_id` is not specified, the Connected Registry will be connected to the Container Registry identified by `container_registry_id`.
     * 
     */
    public Output<String> containerRegistryId() {
        return this.containerRegistryId;
    }

    /**
     * The verbosity of the logs. Possible values are `None`, `Debug`, `Information`, `Warning` and `Error`. Defaults to `None`.
     * 
     */
    @Import(name="logLevel")
    private @Nullable Output<String> logLevel;

    /**
     * @return The verbosity of the logs. Possible values are `None`, `Debug`, `Information`, `Warning` and `Error`. Defaults to `None`.
     * 
     */
    public Optional<Output<String>> logLevel() {
        return Optional.ofNullable(this.logLevel);
    }

    /**
     * The mode of the Connected Registry. Possible values are `Mirror`, `ReadOnly`, `ReadWrite` and `Registry`. Changing this forces a new Container Connected Registry to be created. Defaults to `ReadWrite`.
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return The mode of the Connected Registry. Possible values are `Mirror`, `ReadOnly`, `ReadWrite` and `Registry`. Changing this forces a new Container Connected Registry to be created. Defaults to `ReadWrite`.
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * The name which should be used for this Container Connected Registry. Changing this forces a new Container Connected Registry to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name which should be used for this Container Connected Registry. Changing this forces a new Container Connected Registry to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * One or more `notification` blocks as defined below.
     * 
     */
    @Import(name="notifications")
    private @Nullable Output<List<ConnectedRegistryNotificationArgs>> notifications;

    /**
     * @return One or more `notification` blocks as defined below.
     * 
     */
    public Optional<Output<List<ConnectedRegistryNotificationArgs>>> notifications() {
        return Optional.ofNullable(this.notifications);
    }

    /**
     * The ID of the parent registry. This can be either a Container Registry ID or a Connected Registry ID. Changing this forces a new Container Connected Registry to be created.
     * 
     */
    @Import(name="parentRegistryId")
    private @Nullable Output<String> parentRegistryId;

    /**
     * @return The ID of the parent registry. This can be either a Container Registry ID or a Connected Registry ID. Changing this forces a new Container Connected Registry to be created.
     * 
     */
    public Optional<Output<String>> parentRegistryId() {
        return Optional.ofNullable(this.parentRegistryId);
    }

    /**
     * The period of time (in form of ISO8601) for which a message is available to sync before it is expired. Allowed range is from `P1D` to `P90D`. Defaults to `P1D`.
     * 
     */
    @Import(name="syncMessageTtl")
    private @Nullable Output<String> syncMessageTtl;

    /**
     * @return The period of time (in form of ISO8601) for which a message is available to sync before it is expired. Allowed range is from `P1D` to `P90D`. Defaults to `P1D`.
     * 
     */
    public Optional<Output<String>> syncMessageTtl() {
        return Optional.ofNullable(this.syncMessageTtl);
    }

    /**
     * The cron expression indicating the schedule that the Connected Registry will sync with its parent. Defaults to `* * * * *`.
     * 
     */
    @Import(name="syncSchedule")
    private @Nullable Output<String> syncSchedule;

    /**
     * @return The cron expression indicating the schedule that the Connected Registry will sync with its parent. Defaults to `* * * * *`.
     * 
     */
    public Optional<Output<String>> syncSchedule() {
        return Optional.ofNullable(this.syncSchedule);
    }

    /**
     * The ID of the Container Registry Token which is used for synchronizing the Connected Registry. Changing this forces a new Container Connected Registry to be created.
     * 
     */
    @Import(name="syncTokenId", required=true)
    private Output<String> syncTokenId;

    /**
     * @return The ID of the Container Registry Token which is used for synchronizing the Connected Registry. Changing this forces a new Container Connected Registry to be created.
     * 
     */
    public Output<String> syncTokenId() {
        return this.syncTokenId;
    }

    /**
     * The time window (in form of ISO8601) during which sync is enabled for each schedule occurrence. Allowed range is from `PT3H` to `P7D`.
     * 
     */
    @Import(name="syncWindow")
    private @Nullable Output<String> syncWindow;

    /**
     * @return The time window (in form of ISO8601) during which sync is enabled for each schedule occurrence. Allowed range is from `PT3H` to `P7D`.
     * 
     */
    public Optional<Output<String>> syncWindow() {
        return Optional.ofNullable(this.syncWindow);
    }

    private ConnectedRegistryArgs() {}

    private ConnectedRegistryArgs(ConnectedRegistryArgs $) {
        this.auditLogEnabled = $.auditLogEnabled;
        this.clientTokenIds = $.clientTokenIds;
        this.containerRegistryId = $.containerRegistryId;
        this.logLevel = $.logLevel;
        this.mode = $.mode;
        this.name = $.name;
        this.notifications = $.notifications;
        this.parentRegistryId = $.parentRegistryId;
        this.syncMessageTtl = $.syncMessageTtl;
        this.syncSchedule = $.syncSchedule;
        this.syncTokenId = $.syncTokenId;
        this.syncWindow = $.syncWindow;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectedRegistryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectedRegistryArgs $;

        public Builder() {
            $ = new ConnectedRegistryArgs();
        }

        public Builder(ConnectedRegistryArgs defaults) {
            $ = new ConnectedRegistryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param auditLogEnabled Should the log auditing be enabled?
         * 
         * @return builder
         * 
         */
        public Builder auditLogEnabled(@Nullable Output<Boolean> auditLogEnabled) {
            $.auditLogEnabled = auditLogEnabled;
            return this;
        }

        /**
         * @param auditLogEnabled Should the log auditing be enabled?
         * 
         * @return builder
         * 
         */
        public Builder auditLogEnabled(Boolean auditLogEnabled) {
            return auditLogEnabled(Output.of(auditLogEnabled));
        }

        /**
         * @param clientTokenIds Specifies a list of IDs of Container Registry Tokens, which are meant to be used by the clients to connect to the Connected Registry.
         * 
         * @return builder
         * 
         */
        public Builder clientTokenIds(@Nullable Output<List<String>> clientTokenIds) {
            $.clientTokenIds = clientTokenIds;
            return this;
        }

        /**
         * @param clientTokenIds Specifies a list of IDs of Container Registry Tokens, which are meant to be used by the clients to connect to the Connected Registry.
         * 
         * @return builder
         * 
         */
        public Builder clientTokenIds(List<String> clientTokenIds) {
            return clientTokenIds(Output.of(clientTokenIds));
        }

        /**
         * @param clientTokenIds Specifies a list of IDs of Container Registry Tokens, which are meant to be used by the clients to connect to the Connected Registry.
         * 
         * @return builder
         * 
         */
        public Builder clientTokenIds(String... clientTokenIds) {
            return clientTokenIds(List.of(clientTokenIds));
        }

        /**
         * @param containerRegistryId The ID of the Container Registry that this Connected Registry will reside in. Changing this forces a new Container Connected Registry to be created.
         * 
         * &gt; If `parent_registry_id` is not specified, the Connected Registry will be connected to the Container Registry identified by `container_registry_id`.
         * 
         * @return builder
         * 
         */
        public Builder containerRegistryId(Output<String> containerRegistryId) {
            $.containerRegistryId = containerRegistryId;
            return this;
        }

        /**
         * @param containerRegistryId The ID of the Container Registry that this Connected Registry will reside in. Changing this forces a new Container Connected Registry to be created.
         * 
         * &gt; If `parent_registry_id` is not specified, the Connected Registry will be connected to the Container Registry identified by `container_registry_id`.
         * 
         * @return builder
         * 
         */
        public Builder containerRegistryId(String containerRegistryId) {
            return containerRegistryId(Output.of(containerRegistryId));
        }

        /**
         * @param logLevel The verbosity of the logs. Possible values are `None`, `Debug`, `Information`, `Warning` and `Error`. Defaults to `None`.
         * 
         * @return builder
         * 
         */
        public Builder logLevel(@Nullable Output<String> logLevel) {
            $.logLevel = logLevel;
            return this;
        }

        /**
         * @param logLevel The verbosity of the logs. Possible values are `None`, `Debug`, `Information`, `Warning` and `Error`. Defaults to `None`.
         * 
         * @return builder
         * 
         */
        public Builder logLevel(String logLevel) {
            return logLevel(Output.of(logLevel));
        }

        /**
         * @param mode The mode of the Connected Registry. Possible values are `Mirror`, `ReadOnly`, `ReadWrite` and `Registry`. Changing this forces a new Container Connected Registry to be created. Defaults to `ReadWrite`.
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode The mode of the Connected Registry. Possible values are `Mirror`, `ReadOnly`, `ReadWrite` and `Registry`. Changing this forces a new Container Connected Registry to be created. Defaults to `ReadWrite`.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param name The name which should be used for this Container Connected Registry. Changing this forces a new Container Connected Registry to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this Container Connected Registry. Changing this forces a new Container Connected Registry to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param notifications One or more `notification` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder notifications(@Nullable Output<List<ConnectedRegistryNotificationArgs>> notifications) {
            $.notifications = notifications;
            return this;
        }

        /**
         * @param notifications One or more `notification` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder notifications(List<ConnectedRegistryNotificationArgs> notifications) {
            return notifications(Output.of(notifications));
        }

        /**
         * @param notifications One or more `notification` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder notifications(ConnectedRegistryNotificationArgs... notifications) {
            return notifications(List.of(notifications));
        }

        /**
         * @param parentRegistryId The ID of the parent registry. This can be either a Container Registry ID or a Connected Registry ID. Changing this forces a new Container Connected Registry to be created.
         * 
         * @return builder
         * 
         */
        public Builder parentRegistryId(@Nullable Output<String> parentRegistryId) {
            $.parentRegistryId = parentRegistryId;
            return this;
        }

        /**
         * @param parentRegistryId The ID of the parent registry. This can be either a Container Registry ID or a Connected Registry ID. Changing this forces a new Container Connected Registry to be created.
         * 
         * @return builder
         * 
         */
        public Builder parentRegistryId(String parentRegistryId) {
            return parentRegistryId(Output.of(parentRegistryId));
        }

        /**
         * @param syncMessageTtl The period of time (in form of ISO8601) for which a message is available to sync before it is expired. Allowed range is from `P1D` to `P90D`. Defaults to `P1D`.
         * 
         * @return builder
         * 
         */
        public Builder syncMessageTtl(@Nullable Output<String> syncMessageTtl) {
            $.syncMessageTtl = syncMessageTtl;
            return this;
        }

        /**
         * @param syncMessageTtl The period of time (in form of ISO8601) for which a message is available to sync before it is expired. Allowed range is from `P1D` to `P90D`. Defaults to `P1D`.
         * 
         * @return builder
         * 
         */
        public Builder syncMessageTtl(String syncMessageTtl) {
            return syncMessageTtl(Output.of(syncMessageTtl));
        }

        /**
         * @param syncSchedule The cron expression indicating the schedule that the Connected Registry will sync with its parent. Defaults to `* * * * *`.
         * 
         * @return builder
         * 
         */
        public Builder syncSchedule(@Nullable Output<String> syncSchedule) {
            $.syncSchedule = syncSchedule;
            return this;
        }

        /**
         * @param syncSchedule The cron expression indicating the schedule that the Connected Registry will sync with its parent. Defaults to `* * * * *`.
         * 
         * @return builder
         * 
         */
        public Builder syncSchedule(String syncSchedule) {
            return syncSchedule(Output.of(syncSchedule));
        }

        /**
         * @param syncTokenId The ID of the Container Registry Token which is used for synchronizing the Connected Registry. Changing this forces a new Container Connected Registry to be created.
         * 
         * @return builder
         * 
         */
        public Builder syncTokenId(Output<String> syncTokenId) {
            $.syncTokenId = syncTokenId;
            return this;
        }

        /**
         * @param syncTokenId The ID of the Container Registry Token which is used for synchronizing the Connected Registry. Changing this forces a new Container Connected Registry to be created.
         * 
         * @return builder
         * 
         */
        public Builder syncTokenId(String syncTokenId) {
            return syncTokenId(Output.of(syncTokenId));
        }

        /**
         * @param syncWindow The time window (in form of ISO8601) during which sync is enabled for each schedule occurrence. Allowed range is from `PT3H` to `P7D`.
         * 
         * @return builder
         * 
         */
        public Builder syncWindow(@Nullable Output<String> syncWindow) {
            $.syncWindow = syncWindow;
            return this;
        }

        /**
         * @param syncWindow The time window (in form of ISO8601) during which sync is enabled for each schedule occurrence. Allowed range is from `PT3H` to `P7D`.
         * 
         * @return builder
         * 
         */
        public Builder syncWindow(String syncWindow) {
            return syncWindow(Output.of(syncWindow));
        }

        public ConnectedRegistryArgs build() {
            if ($.containerRegistryId == null) {
                throw new MissingRequiredPropertyException("ConnectedRegistryArgs", "containerRegistryId");
            }
            if ($.syncTokenId == null) {
                throw new MissingRequiredPropertyException("ConnectedRegistryArgs", "syncTokenId");
            }
            return $;
        }
    }

}
