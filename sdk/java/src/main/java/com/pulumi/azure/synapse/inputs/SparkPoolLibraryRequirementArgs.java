// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.synapse.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class SparkPoolLibraryRequirementArgs extends com.pulumi.resources.ResourceArgs {

    public static final SparkPoolLibraryRequirementArgs Empty = new SparkPoolLibraryRequirementArgs();

    /**
     * The content of library requirements.
     * 
     */
    @Import(name="content", required=true)
    private Output<String> content;

    /**
     * @return The content of library requirements.
     * 
     */
    public Output<String> content() {
        return this.content;
    }

    /**
     * The name of the library requirements file.
     * 
     */
    @Import(name="filename", required=true)
    private Output<String> filename;

    /**
     * @return The name of the library requirements file.
     * 
     */
    public Output<String> filename() {
        return this.filename;
    }

    private SparkPoolLibraryRequirementArgs() {}

    private SparkPoolLibraryRequirementArgs(SparkPoolLibraryRequirementArgs $) {
        this.content = $.content;
        this.filename = $.filename;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SparkPoolLibraryRequirementArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SparkPoolLibraryRequirementArgs $;

        public Builder() {
            $ = new SparkPoolLibraryRequirementArgs();
        }

        public Builder(SparkPoolLibraryRequirementArgs defaults) {
            $ = new SparkPoolLibraryRequirementArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param content The content of library requirements.
         * 
         * @return builder
         * 
         */
        public Builder content(Output<String> content) {
            $.content = content;
            return this;
        }

        /**
         * @param content The content of library requirements.
         * 
         * @return builder
         * 
         */
        public Builder content(String content) {
            return content(Output.of(content));
        }

        /**
         * @param filename The name of the library requirements file.
         * 
         * @return builder
         * 
         */
        public Builder filename(Output<String> filename) {
            $.filename = filename;
            return this;
        }

        /**
         * @param filename The name of the library requirements file.
         * 
         * @return builder
         * 
         */
        public Builder filename(String filename) {
            return filename(Output.of(filename));
        }

        public SparkPoolLibraryRequirementArgs build() {
            if ($.content == null) {
                throw new MissingRequiredPropertyException("SparkPoolLibraryRequirementArgs", "content");
            }
            if ($.filename == null) {
                throw new MissingRequiredPropertyException("SparkPoolLibraryRequirementArgs", "filename");
            }
            return $;
        }
    }

}
