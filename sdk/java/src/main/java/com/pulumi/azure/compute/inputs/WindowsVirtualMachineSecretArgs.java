// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.compute.inputs;

import com.pulumi.azure.compute.inputs.WindowsVirtualMachineSecretCertificateArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class WindowsVirtualMachineSecretArgs extends com.pulumi.resources.ResourceArgs {

    public static final WindowsVirtualMachineSecretArgs Empty = new WindowsVirtualMachineSecretArgs();

    /**
     * One or more `certificate` blocks as defined above.
     * 
     */
    @Import(name="certificates", required=true)
    private Output<List<WindowsVirtualMachineSecretCertificateArgs>> certificates;

    /**
     * @return One or more `certificate` blocks as defined above.
     * 
     */
    public Output<List<WindowsVirtualMachineSecretCertificateArgs>> certificates() {
        return this.certificates;
    }

    /**
     * The ID of the Key Vault from which all Secrets should be sourced.
     * 
     */
    @Import(name="keyVaultId", required=true)
    private Output<String> keyVaultId;

    /**
     * @return The ID of the Key Vault from which all Secrets should be sourced.
     * 
     */
    public Output<String> keyVaultId() {
        return this.keyVaultId;
    }

    private WindowsVirtualMachineSecretArgs() {}

    private WindowsVirtualMachineSecretArgs(WindowsVirtualMachineSecretArgs $) {
        this.certificates = $.certificates;
        this.keyVaultId = $.keyVaultId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WindowsVirtualMachineSecretArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WindowsVirtualMachineSecretArgs $;

        public Builder() {
            $ = new WindowsVirtualMachineSecretArgs();
        }

        public Builder(WindowsVirtualMachineSecretArgs defaults) {
            $ = new WindowsVirtualMachineSecretArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificates One or more `certificate` blocks as defined above.
         * 
         * @return builder
         * 
         */
        public Builder certificates(Output<List<WindowsVirtualMachineSecretCertificateArgs>> certificates) {
            $.certificates = certificates;
            return this;
        }

        /**
         * @param certificates One or more `certificate` blocks as defined above.
         * 
         * @return builder
         * 
         */
        public Builder certificates(List<WindowsVirtualMachineSecretCertificateArgs> certificates) {
            return certificates(Output.of(certificates));
        }

        /**
         * @param certificates One or more `certificate` blocks as defined above.
         * 
         * @return builder
         * 
         */
        public Builder certificates(WindowsVirtualMachineSecretCertificateArgs... certificates) {
            return certificates(List.of(certificates));
        }

        /**
         * @param keyVaultId The ID of the Key Vault from which all Secrets should be sourced.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultId(Output<String> keyVaultId) {
            $.keyVaultId = keyVaultId;
            return this;
        }

        /**
         * @param keyVaultId The ID of the Key Vault from which all Secrets should be sourced.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultId(String keyVaultId) {
            return keyVaultId(Output.of(keyVaultId));
        }

        public WindowsVirtualMachineSecretArgs build() {
            if ($.certificates == null) {
                throw new MissingRequiredPropertyException("WindowsVirtualMachineSecretArgs", "certificates");
            }
            if ($.keyVaultId == null) {
                throw new MissingRequiredPropertyException("WindowsVirtualMachineSecretArgs", "keyVaultId");
            }
            return $;
        }
    }

}
