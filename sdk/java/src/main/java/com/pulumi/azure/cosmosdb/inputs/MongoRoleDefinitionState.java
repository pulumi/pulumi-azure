// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.cosmosdb.inputs;

import com.pulumi.azure.cosmosdb.inputs.MongoRoleDefinitionPrivilegeArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MongoRoleDefinitionState extends com.pulumi.resources.ResourceArgs {

    public static final MongoRoleDefinitionState Empty = new MongoRoleDefinitionState();

    /**
     * The resource ID of the Mongo DB. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="cosmosMongoDatabaseId")
    private @Nullable Output<String> cosmosMongoDatabaseId;

    /**
     * @return The resource ID of the Mongo DB. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> cosmosMongoDatabaseId() {
        return Optional.ofNullable(this.cosmosMongoDatabaseId);
    }

    /**
     * A list of Mongo Roles which are inherited to the Mongo Role Definition.
     * 
     * &gt; **Note:** The role that needs to be inherited should exist in the Mongo DB of `cosmos_mongo_database_id`.
     * 
     */
    @Import(name="inheritedRoleNames")
    private @Nullable Output<List<String>> inheritedRoleNames;

    /**
     * @return A list of Mongo Roles which are inherited to the Mongo Role Definition.
     * 
     * &gt; **Note:** The role that needs to be inherited should exist in the Mongo DB of `cosmos_mongo_database_id`.
     * 
     */
    public Optional<Output<List<String>>> inheritedRoleNames() {
        return Optional.ofNullable(this.inheritedRoleNames);
    }

    /**
     * A `privilege` block as defined below.
     * 
     */
    @Import(name="privileges")
    private @Nullable Output<List<MongoRoleDefinitionPrivilegeArgs>> privileges;

    /**
     * @return A `privilege` block as defined below.
     * 
     */
    public Optional<Output<List<MongoRoleDefinitionPrivilegeArgs>>> privileges() {
        return Optional.ofNullable(this.privileges);
    }

    /**
     * The user-friendly name for the Mongo Role Definition. It must be unique for the database account. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="roleName")
    private @Nullable Output<String> roleName;

    /**
     * @return The user-friendly name for the Mongo Role Definition. It must be unique for the database account. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> roleName() {
        return Optional.ofNullable(this.roleName);
    }

    private MongoRoleDefinitionState() {}

    private MongoRoleDefinitionState(MongoRoleDefinitionState $) {
        this.cosmosMongoDatabaseId = $.cosmosMongoDatabaseId;
        this.inheritedRoleNames = $.inheritedRoleNames;
        this.privileges = $.privileges;
        this.roleName = $.roleName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MongoRoleDefinitionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MongoRoleDefinitionState $;

        public Builder() {
            $ = new MongoRoleDefinitionState();
        }

        public Builder(MongoRoleDefinitionState defaults) {
            $ = new MongoRoleDefinitionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param cosmosMongoDatabaseId The resource ID of the Mongo DB. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder cosmosMongoDatabaseId(@Nullable Output<String> cosmosMongoDatabaseId) {
            $.cosmosMongoDatabaseId = cosmosMongoDatabaseId;
            return this;
        }

        /**
         * @param cosmosMongoDatabaseId The resource ID of the Mongo DB. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder cosmosMongoDatabaseId(String cosmosMongoDatabaseId) {
            return cosmosMongoDatabaseId(Output.of(cosmosMongoDatabaseId));
        }

        /**
         * @param inheritedRoleNames A list of Mongo Roles which are inherited to the Mongo Role Definition.
         * 
         * &gt; **Note:** The role that needs to be inherited should exist in the Mongo DB of `cosmos_mongo_database_id`.
         * 
         * @return builder
         * 
         */
        public Builder inheritedRoleNames(@Nullable Output<List<String>> inheritedRoleNames) {
            $.inheritedRoleNames = inheritedRoleNames;
            return this;
        }

        /**
         * @param inheritedRoleNames A list of Mongo Roles which are inherited to the Mongo Role Definition.
         * 
         * &gt; **Note:** The role that needs to be inherited should exist in the Mongo DB of `cosmos_mongo_database_id`.
         * 
         * @return builder
         * 
         */
        public Builder inheritedRoleNames(List<String> inheritedRoleNames) {
            return inheritedRoleNames(Output.of(inheritedRoleNames));
        }

        /**
         * @param inheritedRoleNames A list of Mongo Roles which are inherited to the Mongo Role Definition.
         * 
         * &gt; **Note:** The role that needs to be inherited should exist in the Mongo DB of `cosmos_mongo_database_id`.
         * 
         * @return builder
         * 
         */
        public Builder inheritedRoleNames(String... inheritedRoleNames) {
            return inheritedRoleNames(List.of(inheritedRoleNames));
        }

        /**
         * @param privileges A `privilege` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder privileges(@Nullable Output<List<MongoRoleDefinitionPrivilegeArgs>> privileges) {
            $.privileges = privileges;
            return this;
        }

        /**
         * @param privileges A `privilege` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder privileges(List<MongoRoleDefinitionPrivilegeArgs> privileges) {
            return privileges(Output.of(privileges));
        }

        /**
         * @param privileges A `privilege` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder privileges(MongoRoleDefinitionPrivilegeArgs... privileges) {
            return privileges(List.of(privileges));
        }

        /**
         * @param roleName The user-friendly name for the Mongo Role Definition. It must be unique for the database account. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder roleName(@Nullable Output<String> roleName) {
            $.roleName = roleName;
            return this;
        }

        /**
         * @param roleName The user-friendly name for the Mongo Role Definition. It must be unique for the database account. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder roleName(String roleName) {
            return roleName(Output.of(roleName));
        }

        public MongoRoleDefinitionState build() {
            return $;
        }
    }

}
