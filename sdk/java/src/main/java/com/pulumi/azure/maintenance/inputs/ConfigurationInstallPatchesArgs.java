// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.maintenance.inputs;

import com.pulumi.azure.maintenance.inputs.ConfigurationInstallPatchesLinuxArgs;
import com.pulumi.azure.maintenance.inputs.ConfigurationInstallPatchesWindowArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConfigurationInstallPatchesArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConfigurationInstallPatchesArgs Empty = new ConfigurationInstallPatchesArgs();

    /**
     * A `linux` block as defined above. This property only applies when `scope` is set to `InGuestPatch`
     * 
     */
    @Import(name="linuxes")
    private @Nullable Output<List<ConfigurationInstallPatchesLinuxArgs>> linuxes;

    /**
     * @return A `linux` block as defined above. This property only applies when `scope` is set to `InGuestPatch`
     * 
     */
    public Optional<Output<List<ConfigurationInstallPatchesLinuxArgs>>> linuxes() {
        return Optional.ofNullable(this.linuxes);
    }

    /**
     * Possible reboot preference as defined by the user based on which it would be decided to reboot the machine or not after the patch operation is completed. Possible values are `Always`, `IfRequired` and `Never`. This property only applies when `scope` is set to `InGuestPatch`.
     * 
     */
    @Import(name="reboot")
    private @Nullable Output<String> reboot;

    /**
     * @return Possible reboot preference as defined by the user based on which it would be decided to reboot the machine or not after the patch operation is completed. Possible values are `Always`, `IfRequired` and `Never`. This property only applies when `scope` is set to `InGuestPatch`.
     * 
     */
    public Optional<Output<String>> reboot() {
        return Optional.ofNullable(this.reboot);
    }

    /**
     * A `windows` block as defined above. This property only applies when `scope` is set to `InGuestPatch`
     * 
     */
    @Import(name="windows")
    private @Nullable Output<List<ConfigurationInstallPatchesWindowArgs>> windows;

    /**
     * @return A `windows` block as defined above. This property only applies when `scope` is set to `InGuestPatch`
     * 
     */
    public Optional<Output<List<ConfigurationInstallPatchesWindowArgs>>> windows() {
        return Optional.ofNullable(this.windows);
    }

    private ConfigurationInstallPatchesArgs() {}

    private ConfigurationInstallPatchesArgs(ConfigurationInstallPatchesArgs $) {
        this.linuxes = $.linuxes;
        this.reboot = $.reboot;
        this.windows = $.windows;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConfigurationInstallPatchesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfigurationInstallPatchesArgs $;

        public Builder() {
            $ = new ConfigurationInstallPatchesArgs();
        }

        public Builder(ConfigurationInstallPatchesArgs defaults) {
            $ = new ConfigurationInstallPatchesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param linuxes A `linux` block as defined above. This property only applies when `scope` is set to `InGuestPatch`
         * 
         * @return builder
         * 
         */
        public Builder linuxes(@Nullable Output<List<ConfigurationInstallPatchesLinuxArgs>> linuxes) {
            $.linuxes = linuxes;
            return this;
        }

        /**
         * @param linuxes A `linux` block as defined above. This property only applies when `scope` is set to `InGuestPatch`
         * 
         * @return builder
         * 
         */
        public Builder linuxes(List<ConfigurationInstallPatchesLinuxArgs> linuxes) {
            return linuxes(Output.of(linuxes));
        }

        /**
         * @param linuxes A `linux` block as defined above. This property only applies when `scope` is set to `InGuestPatch`
         * 
         * @return builder
         * 
         */
        public Builder linuxes(ConfigurationInstallPatchesLinuxArgs... linuxes) {
            return linuxes(List.of(linuxes));
        }

        /**
         * @param reboot Possible reboot preference as defined by the user based on which it would be decided to reboot the machine or not after the patch operation is completed. Possible values are `Always`, `IfRequired` and `Never`. This property only applies when `scope` is set to `InGuestPatch`.
         * 
         * @return builder
         * 
         */
        public Builder reboot(@Nullable Output<String> reboot) {
            $.reboot = reboot;
            return this;
        }

        /**
         * @param reboot Possible reboot preference as defined by the user based on which it would be decided to reboot the machine or not after the patch operation is completed. Possible values are `Always`, `IfRequired` and `Never`. This property only applies when `scope` is set to `InGuestPatch`.
         * 
         * @return builder
         * 
         */
        public Builder reboot(String reboot) {
            return reboot(Output.of(reboot));
        }

        /**
         * @param windows A `windows` block as defined above. This property only applies when `scope` is set to `InGuestPatch`
         * 
         * @return builder
         * 
         */
        public Builder windows(@Nullable Output<List<ConfigurationInstallPatchesWindowArgs>> windows) {
            $.windows = windows;
            return this;
        }

        /**
         * @param windows A `windows` block as defined above. This property only applies when `scope` is set to `InGuestPatch`
         * 
         * @return builder
         * 
         */
        public Builder windows(List<ConfigurationInstallPatchesWindowArgs> windows) {
            return windows(Output.of(windows));
        }

        /**
         * @param windows A `windows` block as defined above. This property only applies when `scope` is set to `InGuestPatch`
         * 
         * @return builder
         * 
         */
        public Builder windows(ConfigurationInstallPatchesWindowArgs... windows) {
            return windows(List.of(windows));
        }

        public ConfigurationInstallPatchesArgs build() {
            return $;
        }
    }

}
