// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.logicapps.inputs;

import com.pulumi.azure.logicapps.inputs.GetStandardSiteConfigScmIpRestrictionHeaders;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetStandardSiteConfigScmIpRestriction extends com.pulumi.resources.InvokeArgs {

    public static final GetStandardSiteConfigScmIpRestriction Empty = new GetStandardSiteConfigScmIpRestriction();

    /**
     * Does this restriction `Allow` or `Deny` access for this IP range.
     * 
     */
    @Import(name="action")
    private @Nullable String action;

    /**
     * @return Does this restriction `Allow` or `Deny` access for this IP range.
     * 
     */
    public Optional<String> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * The `headers` block for this specific `ip_restriction` as defined below.
     * 
     */
    @Import(name="headers", required=true)
    private GetStandardSiteConfigScmIpRestrictionHeaders headers;

    /**
     * @return The `headers` block for this specific `ip_restriction` as defined below.
     * 
     */
    public GetStandardSiteConfigScmIpRestrictionHeaders headers() {
        return this.headers;
    }

    /**
     * The IP Address used for this IP Restriction in CIDR notation.
     * 
     */
    @Import(name="ipAddress")
    private @Nullable String ipAddress;

    /**
     * @return The IP Address used for this IP Restriction in CIDR notation.
     * 
     */
    public Optional<String> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }

    /**
     * The name of the Logic App.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return The name of the Logic App.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * The priority for this IP Restriction. Restrictions are enforced in priority order.
     * 
     */
    @Import(name="priority")
    private @Nullable Integer priority;

    /**
     * @return The priority for this IP Restriction. Restrictions are enforced in priority order.
     * 
     */
    public Optional<Integer> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * The Service Tag used for this IP Restriction.
     * 
     */
    @Import(name="serviceTag")
    private @Nullable String serviceTag;

    /**
     * @return The Service Tag used for this IP Restriction.
     * 
     */
    public Optional<String> serviceTag() {
        return Optional.ofNullable(this.serviceTag);
    }

    /**
     * The Virtual Network Subnet ID used for this IP Restriction.
     * 
     */
    @Import(name="virtualNetworkSubnetId")
    private @Nullable String virtualNetworkSubnetId;

    /**
     * @return The Virtual Network Subnet ID used for this IP Restriction.
     * 
     */
    public Optional<String> virtualNetworkSubnetId() {
        return Optional.ofNullable(this.virtualNetworkSubnetId);
    }

    private GetStandardSiteConfigScmIpRestriction() {}

    private GetStandardSiteConfigScmIpRestriction(GetStandardSiteConfigScmIpRestriction $) {
        this.action = $.action;
        this.headers = $.headers;
        this.ipAddress = $.ipAddress;
        this.name = $.name;
        this.priority = $.priority;
        this.serviceTag = $.serviceTag;
        this.virtualNetworkSubnetId = $.virtualNetworkSubnetId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetStandardSiteConfigScmIpRestriction defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetStandardSiteConfigScmIpRestriction $;

        public Builder() {
            $ = new GetStandardSiteConfigScmIpRestriction();
        }

        public Builder(GetStandardSiteConfigScmIpRestriction defaults) {
            $ = new GetStandardSiteConfigScmIpRestriction(Objects.requireNonNull(defaults));
        }

        /**
         * @param action Does this restriction `Allow` or `Deny` access for this IP range.
         * 
         * @return builder
         * 
         */
        public Builder action(@Nullable String action) {
            $.action = action;
            return this;
        }

        /**
         * @param headers The `headers` block for this specific `ip_restriction` as defined below.
         * 
         * @return builder
         * 
         */
        public Builder headers(GetStandardSiteConfigScmIpRestrictionHeaders headers) {
            $.headers = headers;
            return this;
        }

        /**
         * @param ipAddress The IP Address used for this IP Restriction in CIDR notation.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(@Nullable String ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        /**
         * @param name The name of the Logic App.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param priority The priority for this IP Restriction. Restrictions are enforced in priority order.
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Integer priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param serviceTag The Service Tag used for this IP Restriction.
         * 
         * @return builder
         * 
         */
        public Builder serviceTag(@Nullable String serviceTag) {
            $.serviceTag = serviceTag;
            return this;
        }

        /**
         * @param virtualNetworkSubnetId The Virtual Network Subnet ID used for this IP Restriction.
         * 
         * @return builder
         * 
         */
        public Builder virtualNetworkSubnetId(@Nullable String virtualNetworkSubnetId) {
            $.virtualNetworkSubnetId = virtualNetworkSubnetId;
            return this;
        }

        public GetStandardSiteConfigScmIpRestriction build() {
            if ($.headers == null) {
                throw new MissingRequiredPropertyException("GetStandardSiteConfigScmIpRestriction", "headers");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetStandardSiteConfigScmIpRestriction", "name");
            }
            return $;
        }
    }

}
