// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerapp.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AppRegistryArgs extends com.pulumi.resources.ResourceArgs {

    public static final AppRegistryArgs Empty = new AppRegistryArgs();

    /**
     * Resource ID for the User Assigned Managed identity to use when pulling from the Container Registry.
     * 
     */
    @Import(name="identity")
    private @Nullable Output<String> identity;

    /**
     * @return Resource ID for the User Assigned Managed identity to use when pulling from the Container Registry.
     * 
     */
    public Optional<Output<String>> identity() {
        return Optional.ofNullable(this.identity);
    }

    /**
     * The name of the Secret Reference containing the password value for this user on the Container Registry, `username` must also be supplied.
     * 
     */
    @Import(name="passwordSecretName")
    private @Nullable Output<String> passwordSecretName;

    /**
     * @return The name of the Secret Reference containing the password value for this user on the Container Registry, `username` must also be supplied.
     * 
     */
    public Optional<Output<String>> passwordSecretName() {
        return Optional.ofNullable(this.passwordSecretName);
    }

    /**
     * The hostname for the Container Registry.
     * 
     * The authentication details must also be supplied, `identity` and `username`/`password_secret_name` are mutually exclusive.
     * 
     */
    @Import(name="server", required=true)
    private Output<String> server;

    /**
     * @return The hostname for the Container Registry.
     * 
     * The authentication details must also be supplied, `identity` and `username`/`password_secret_name` are mutually exclusive.
     * 
     */
    public Output<String> server() {
        return this.server;
    }

    /**
     * The username to use for this Container Registry, `password_secret_name` must also be supplied..
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return The username to use for this Container Registry, `password_secret_name` must also be supplied..
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private AppRegistryArgs() {}

    private AppRegistryArgs(AppRegistryArgs $) {
        this.identity = $.identity;
        this.passwordSecretName = $.passwordSecretName;
        this.server = $.server;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppRegistryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppRegistryArgs $;

        public Builder() {
            $ = new AppRegistryArgs();
        }

        public Builder(AppRegistryArgs defaults) {
            $ = new AppRegistryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param identity Resource ID for the User Assigned Managed identity to use when pulling from the Container Registry.
         * 
         * @return builder
         * 
         */
        public Builder identity(@Nullable Output<String> identity) {
            $.identity = identity;
            return this;
        }

        /**
         * @param identity Resource ID for the User Assigned Managed identity to use when pulling from the Container Registry.
         * 
         * @return builder
         * 
         */
        public Builder identity(String identity) {
            return identity(Output.of(identity));
        }

        /**
         * @param passwordSecretName The name of the Secret Reference containing the password value for this user on the Container Registry, `username` must also be supplied.
         * 
         * @return builder
         * 
         */
        public Builder passwordSecretName(@Nullable Output<String> passwordSecretName) {
            $.passwordSecretName = passwordSecretName;
            return this;
        }

        /**
         * @param passwordSecretName The name of the Secret Reference containing the password value for this user on the Container Registry, `username` must also be supplied.
         * 
         * @return builder
         * 
         */
        public Builder passwordSecretName(String passwordSecretName) {
            return passwordSecretName(Output.of(passwordSecretName));
        }

        /**
         * @param server The hostname for the Container Registry.
         * 
         * The authentication details must also be supplied, `identity` and `username`/`password_secret_name` are mutually exclusive.
         * 
         * @return builder
         * 
         */
        public Builder server(Output<String> server) {
            $.server = server;
            return this;
        }

        /**
         * @param server The hostname for the Container Registry.
         * 
         * The authentication details must also be supplied, `identity` and `username`/`password_secret_name` are mutually exclusive.
         * 
         * @return builder
         * 
         */
        public Builder server(String server) {
            return server(Output.of(server));
        }

        /**
         * @param username The username to use for this Container Registry, `password_secret_name` must also be supplied..
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The username to use for this Container Registry, `password_secret_name` must also be supplied..
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public AppRegistryArgs build() {
            if ($.server == null) {
                throw new MissingRequiredPropertyException("AppRegistryArgs", "server");
            }
            return $;
        }
    }

}
