// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerapp.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class AppRegistryArgs extends com.pulumi.resources.ResourceArgs {

    public static final AppRegistryArgs Empty = new AppRegistryArgs();

    /**
     * The name of the Secret Reference containing the password value for this user on the Container Registry.
     * 
     */
    @Import(name="passwordSecretName", required=true)
    private Output<String> passwordSecretName;

    /**
     * @return The name of the Secret Reference containing the password value for this user on the Container Registry.
     * 
     */
    public Output<String> passwordSecretName() {
        return this.passwordSecretName;
    }

    /**
     * The hostname for the Container Registry.
     * 
     */
    @Import(name="server", required=true)
    private Output<String> server;

    /**
     * @return The hostname for the Container Registry.
     * 
     */
    public Output<String> server() {
        return this.server;
    }

    /**
     * The username to use for this Container Registry.
     * 
     */
    @Import(name="username", required=true)
    private Output<String> username;

    /**
     * @return The username to use for this Container Registry.
     * 
     */
    public Output<String> username() {
        return this.username;
    }

    private AppRegistryArgs() {}

    private AppRegistryArgs(AppRegistryArgs $) {
        this.passwordSecretName = $.passwordSecretName;
        this.server = $.server;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppRegistryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppRegistryArgs $;

        public Builder() {
            $ = new AppRegistryArgs();
        }

        public Builder(AppRegistryArgs defaults) {
            $ = new AppRegistryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param passwordSecretName The name of the Secret Reference containing the password value for this user on the Container Registry.
         * 
         * @return builder
         * 
         */
        public Builder passwordSecretName(Output<String> passwordSecretName) {
            $.passwordSecretName = passwordSecretName;
            return this;
        }

        /**
         * @param passwordSecretName The name of the Secret Reference containing the password value for this user on the Container Registry.
         * 
         * @return builder
         * 
         */
        public Builder passwordSecretName(String passwordSecretName) {
            return passwordSecretName(Output.of(passwordSecretName));
        }

        /**
         * @param server The hostname for the Container Registry.
         * 
         * @return builder
         * 
         */
        public Builder server(Output<String> server) {
            $.server = server;
            return this;
        }

        /**
         * @param server The hostname for the Container Registry.
         * 
         * @return builder
         * 
         */
        public Builder server(String server) {
            return server(Output.of(server));
        }

        /**
         * @param username The username to use for this Container Registry.
         * 
         * @return builder
         * 
         */
        public Builder username(Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The username to use for this Container Registry.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public AppRegistryArgs build() {
            $.passwordSecretName = Objects.requireNonNull($.passwordSecretName, "expected parameter 'passwordSecretName' to be non-null");
            $.server = Objects.requireNonNull($.server, "expected parameter 'server' to be non-null");
            $.username = Objects.requireNonNull($.username, "expected parameter 'username' to be non-null");
            return $;
        }
    }

}
