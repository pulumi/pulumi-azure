// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.waf.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PolicyManagedRulesExclusionExcludedRuleSetRuleGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final PolicyManagedRulesExclusionExcludedRuleSetRuleGroupArgs Empty = new PolicyManagedRulesExclusionExcludedRuleSetRuleGroupArgs();

    /**
     * One or more Rule IDs for exclusion.
     * 
     */
    @Import(name="excludedRules")
    private @Nullable Output<List<String>> excludedRules;

    /**
     * @return One or more Rule IDs for exclusion.
     * 
     */
    public Optional<Output<List<String>>> excludedRules() {
        return Optional.ofNullable(this.excludedRules);
    }

    /**
     * The name of rule group for exclusion.
     * 
     */
    @Import(name="ruleGroupName", required=true)
    private Output<String> ruleGroupName;

    /**
     * @return The name of rule group for exclusion.
     * 
     */
    public Output<String> ruleGroupName() {
        return this.ruleGroupName;
    }

    private PolicyManagedRulesExclusionExcludedRuleSetRuleGroupArgs() {}

    private PolicyManagedRulesExclusionExcludedRuleSetRuleGroupArgs(PolicyManagedRulesExclusionExcludedRuleSetRuleGroupArgs $) {
        this.excludedRules = $.excludedRules;
        this.ruleGroupName = $.ruleGroupName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PolicyManagedRulesExclusionExcludedRuleSetRuleGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PolicyManagedRulesExclusionExcludedRuleSetRuleGroupArgs $;

        public Builder() {
            $ = new PolicyManagedRulesExclusionExcludedRuleSetRuleGroupArgs();
        }

        public Builder(PolicyManagedRulesExclusionExcludedRuleSetRuleGroupArgs defaults) {
            $ = new PolicyManagedRulesExclusionExcludedRuleSetRuleGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param excludedRules One or more Rule IDs for exclusion.
         * 
         * @return builder
         * 
         */
        public Builder excludedRules(@Nullable Output<List<String>> excludedRules) {
            $.excludedRules = excludedRules;
            return this;
        }

        /**
         * @param excludedRules One or more Rule IDs for exclusion.
         * 
         * @return builder
         * 
         */
        public Builder excludedRules(List<String> excludedRules) {
            return excludedRules(Output.of(excludedRules));
        }

        /**
         * @param excludedRules One or more Rule IDs for exclusion.
         * 
         * @return builder
         * 
         */
        public Builder excludedRules(String... excludedRules) {
            return excludedRules(List.of(excludedRules));
        }

        /**
         * @param ruleGroupName The name of rule group for exclusion.
         * 
         * @return builder
         * 
         */
        public Builder ruleGroupName(Output<String> ruleGroupName) {
            $.ruleGroupName = ruleGroupName;
            return this;
        }

        /**
         * @param ruleGroupName The name of rule group for exclusion.
         * 
         * @return builder
         * 
         */
        public Builder ruleGroupName(String ruleGroupName) {
            return ruleGroupName(Output.of(ruleGroupName));
        }

        public PolicyManagedRulesExclusionExcludedRuleSetRuleGroupArgs build() {
            $.ruleGroupName = Objects.requireNonNull($.ruleGroupName, "expected parameter 'ruleGroupName' to be non-null");
            return $;
        }
    }

}
