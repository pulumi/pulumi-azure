// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.healthcare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class DicomServiceStorageArgs extends com.pulumi.resources.ResourceArgs {

    public static final DicomServiceStorageArgs Empty = new DicomServiceStorageArgs();

    /**
     * The filesystem name of connected storage account. Changing this forces a new Healthcare DICOM Service to be created.
     * 
     */
    @Import(name="fileSystemName", required=true)
    private Output<String> fileSystemName;

    /**
     * @return The filesystem name of connected storage account. Changing this forces a new Healthcare DICOM Service to be created.
     * 
     */
    public Output<String> fileSystemName() {
        return this.fileSystemName;
    }

    /**
     * The resource ID of connected storage account. Changing this forces a new Healthcare DICOM Service to be created.
     * 
     * &gt; **Note:** The `isHnsEnabled` needs to be set to `true` for the storage account to be used with the Healthcare DICOM Service.
     * 
     */
    @Import(name="storageAccountId", required=true)
    private Output<String> storageAccountId;

    /**
     * @return The resource ID of connected storage account. Changing this forces a new Healthcare DICOM Service to be created.
     * 
     * &gt; **Note:** The `isHnsEnabled` needs to be set to `true` for the storage account to be used with the Healthcare DICOM Service.
     * 
     */
    public Output<String> storageAccountId() {
        return this.storageAccountId;
    }

    private DicomServiceStorageArgs() {}

    private DicomServiceStorageArgs(DicomServiceStorageArgs $) {
        this.fileSystemName = $.fileSystemName;
        this.storageAccountId = $.storageAccountId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DicomServiceStorageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DicomServiceStorageArgs $;

        public Builder() {
            $ = new DicomServiceStorageArgs();
        }

        public Builder(DicomServiceStorageArgs defaults) {
            $ = new DicomServiceStorageArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param fileSystemName The filesystem name of connected storage account. Changing this forces a new Healthcare DICOM Service to be created.
         * 
         * @return builder
         * 
         */
        public Builder fileSystemName(Output<String> fileSystemName) {
            $.fileSystemName = fileSystemName;
            return this;
        }

        /**
         * @param fileSystemName The filesystem name of connected storage account. Changing this forces a new Healthcare DICOM Service to be created.
         * 
         * @return builder
         * 
         */
        public Builder fileSystemName(String fileSystemName) {
            return fileSystemName(Output.of(fileSystemName));
        }

        /**
         * @param storageAccountId The resource ID of connected storage account. Changing this forces a new Healthcare DICOM Service to be created.
         * 
         * &gt; **Note:** The `isHnsEnabled` needs to be set to `true` for the storage account to be used with the Healthcare DICOM Service.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountId(Output<String> storageAccountId) {
            $.storageAccountId = storageAccountId;
            return this;
        }

        /**
         * @param storageAccountId The resource ID of connected storage account. Changing this forces a new Healthcare DICOM Service to be created.
         * 
         * &gt; **Note:** The `isHnsEnabled` needs to be set to `true` for the storage account to be used with the Healthcare DICOM Service.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountId(String storageAccountId) {
            return storageAccountId(Output.of(storageAccountId));
        }

        public DicomServiceStorageArgs build() {
            if ($.fileSystemName == null) {
                throw new MissingRequiredPropertyException("DicomServiceStorageArgs", "fileSystemName");
            }
            if ($.storageAccountId == null) {
                throw new MissingRequiredPropertyException("DicomServiceStorageArgs", "storageAccountId");
            }
            return $;
        }
    }

}
