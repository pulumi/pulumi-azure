// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.batch.outputs;

import com.pulumi.azure.batch.outputs.GetPoolAutoScale;
import com.pulumi.azure.batch.outputs.GetPoolCertificate;
import com.pulumi.azure.batch.outputs.GetPoolContainerConfiguration;
import com.pulumi.azure.batch.outputs.GetPoolDataDisk;
import com.pulumi.azure.batch.outputs.GetPoolDiskEncryption;
import com.pulumi.azure.batch.outputs.GetPoolExtension;
import com.pulumi.azure.batch.outputs.GetPoolFixedScale;
import com.pulumi.azure.batch.outputs.GetPoolMount;
import com.pulumi.azure.batch.outputs.GetPoolNetworkConfiguration;
import com.pulumi.azure.batch.outputs.GetPoolNodePlacement;
import com.pulumi.azure.batch.outputs.GetPoolStartTask;
import com.pulumi.azure.batch.outputs.GetPoolStorageImageReference;
import com.pulumi.azure.batch.outputs.GetPoolTaskSchedulingPolicy;
import com.pulumi.azure.batch.outputs.GetPoolUserAccount;
import com.pulumi.azure.batch.outputs.GetPoolWindow;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetPoolResult {
    /**
     * @return The Azure Storage Account name.
     * 
     */
    private String accountName;
    /**
     * @return A `auto_scale` block that describes the scale settings when using auto scale.
     * 
     */
    private List<GetPoolAutoScale> autoScales;
    /**
     * @return One or more `certificate` blocks that describe the certificates installed on each compute node in the pool.
     * 
     */
    private List<GetPoolCertificate> certificates;
    /**
     * @return The container configuration used in the pool&#39;s VMs.
     * 
     */
    private List<GetPoolContainerConfiguration> containerConfigurations;
    /**
     * @return A `data_disks` block describes the data disk settings.
     * 
     */
    private List<GetPoolDataDisk> dataDisks;
    /**
     * @return A `disk_encryption` block describes the disk encryption configuration applied on compute nodes in the pool.
     * 
     */
    private List<GetPoolDiskEncryption> diskEncryptions;
    private String displayName;
    /**
     * @return An `extensions` block describes the extension settings
     * 
     */
    private List<GetPoolExtension> extensions;
    /**
     * @return A `fixed_scale` block that describes the scale settings when using fixed scale.
     * 
     */
    private List<GetPoolFixedScale> fixedScales;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Whether the pool permits direct communication between nodes. This imposes restrictions on which nodes can be assigned to the pool. Enabling this value can reduce the chance of the requested number of nodes to be allocated in the pool.
     * 
     */
    private String interNodeCommunication;
    /**
     * @return The type of on-premises license to be used when deploying the operating system.
     * 
     */
    private String licenseType;
    /**
     * @return The maximum number of tasks that can run concurrently on a single compute node in the pool.
     * 
     */
    private Integer maxTasksPerNode;
    private Map<String,String> metadata;
    /**
     * @return A `mount` block that describes mount configuration.
     * 
     */
    private List<GetPoolMount> mounts;
    /**
     * @return The name of the user account.
     * 
     */
    private String name;
    private List<GetPoolNetworkConfiguration> networkConfigurations;
    /**
     * @return The SKU of the node agents in the Batch pool.
     * 
     */
    private String nodeAgentSkuId;
    /**
     * @return A `node_placement` block that describes the placement policy for allocating nodes in the pool.
     * 
     */
    private List<GetPoolNodePlacement> nodePlacements;
    /**
     * @return Specifies the ephemeral disk placement for operating system disk for all VMs in the pool.
     * 
     */
    private String osDiskPlacement;
    private String resourceGroupName;
    /**
     * @return A `start_task` block that describes the start task settings for the Batch pool.
     * 
     */
    private List<GetPoolStartTask> startTasks;
    /**
     * @return The reference of the storage image used by the nodes in the Batch pool.
     * 
     */
    private List<GetPoolStorageImageReference> storageImageReferences;
    /**
     * @return A `task_scheduling_policy` block that describes how tasks are distributed across compute nodes in a pool.
     * 
     */
    private List<GetPoolTaskSchedulingPolicy> taskSchedulingPolicies;
    /**
     * @return A `user_accounts` block that describes the list of user accounts to be created on each node in the pool.
     * 
     */
    private List<GetPoolUserAccount> userAccounts;
    /**
     * @return The size of the VM created in the Batch pool.
     * 
     */
    private String vmSize;
    /**
     * @return A `windows` block that describes the Windows configuration in the pool.
     * 
     */
    private List<GetPoolWindow> windows;

    private GetPoolResult() {}
    /**
     * @return The Azure Storage Account name.
     * 
     */
    public String accountName() {
        return this.accountName;
    }
    /**
     * @return A `auto_scale` block that describes the scale settings when using auto scale.
     * 
     */
    public List<GetPoolAutoScale> autoScales() {
        return this.autoScales;
    }
    /**
     * @return One or more `certificate` blocks that describe the certificates installed on each compute node in the pool.
     * 
     */
    public List<GetPoolCertificate> certificates() {
        return this.certificates;
    }
    /**
     * @return The container configuration used in the pool&#39;s VMs.
     * 
     */
    public List<GetPoolContainerConfiguration> containerConfigurations() {
        return this.containerConfigurations;
    }
    /**
     * @return A `data_disks` block describes the data disk settings.
     * 
     */
    public List<GetPoolDataDisk> dataDisks() {
        return this.dataDisks;
    }
    /**
     * @return A `disk_encryption` block describes the disk encryption configuration applied on compute nodes in the pool.
     * 
     */
    public List<GetPoolDiskEncryption> diskEncryptions() {
        return this.diskEncryptions;
    }
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return An `extensions` block describes the extension settings
     * 
     */
    public List<GetPoolExtension> extensions() {
        return this.extensions;
    }
    /**
     * @return A `fixed_scale` block that describes the scale settings when using fixed scale.
     * 
     */
    public List<GetPoolFixedScale> fixedScales() {
        return this.fixedScales;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Whether the pool permits direct communication between nodes. This imposes restrictions on which nodes can be assigned to the pool. Enabling this value can reduce the chance of the requested number of nodes to be allocated in the pool.
     * 
     */
    public String interNodeCommunication() {
        return this.interNodeCommunication;
    }
    /**
     * @return The type of on-premises license to be used when deploying the operating system.
     * 
     */
    public String licenseType() {
        return this.licenseType;
    }
    /**
     * @return The maximum number of tasks that can run concurrently on a single compute node in the pool.
     * 
     */
    public Integer maxTasksPerNode() {
        return this.maxTasksPerNode;
    }
    public Map<String,String> metadata() {
        return this.metadata;
    }
    /**
     * @return A `mount` block that describes mount configuration.
     * 
     */
    public List<GetPoolMount> mounts() {
        return this.mounts;
    }
    /**
     * @return The name of the user account.
     * 
     */
    public String name() {
        return this.name;
    }
    public List<GetPoolNetworkConfiguration> networkConfigurations() {
        return this.networkConfigurations;
    }
    /**
     * @return The SKU of the node agents in the Batch pool.
     * 
     */
    public String nodeAgentSkuId() {
        return this.nodeAgentSkuId;
    }
    /**
     * @return A `node_placement` block that describes the placement policy for allocating nodes in the pool.
     * 
     */
    public List<GetPoolNodePlacement> nodePlacements() {
        return this.nodePlacements;
    }
    /**
     * @return Specifies the ephemeral disk placement for operating system disk for all VMs in the pool.
     * 
     */
    public String osDiskPlacement() {
        return this.osDiskPlacement;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return A `start_task` block that describes the start task settings for the Batch pool.
     * 
     */
    public List<GetPoolStartTask> startTasks() {
        return this.startTasks;
    }
    /**
     * @return The reference of the storage image used by the nodes in the Batch pool.
     * 
     */
    public List<GetPoolStorageImageReference> storageImageReferences() {
        return this.storageImageReferences;
    }
    /**
     * @return A `task_scheduling_policy` block that describes how tasks are distributed across compute nodes in a pool.
     * 
     */
    public List<GetPoolTaskSchedulingPolicy> taskSchedulingPolicies() {
        return this.taskSchedulingPolicies;
    }
    /**
     * @return A `user_accounts` block that describes the list of user accounts to be created on each node in the pool.
     * 
     */
    public List<GetPoolUserAccount> userAccounts() {
        return this.userAccounts;
    }
    /**
     * @return The size of the VM created in the Batch pool.
     * 
     */
    public String vmSize() {
        return this.vmSize;
    }
    /**
     * @return A `windows` block that describes the Windows configuration in the pool.
     * 
     */
    public List<GetPoolWindow> windows() {
        return this.windows;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPoolResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountName;
        private List<GetPoolAutoScale> autoScales;
        private List<GetPoolCertificate> certificates;
        private List<GetPoolContainerConfiguration> containerConfigurations;
        private List<GetPoolDataDisk> dataDisks;
        private List<GetPoolDiskEncryption> diskEncryptions;
        private String displayName;
        private List<GetPoolExtension> extensions;
        private List<GetPoolFixedScale> fixedScales;
        private String id;
        private String interNodeCommunication;
        private String licenseType;
        private Integer maxTasksPerNode;
        private Map<String,String> metadata;
        private List<GetPoolMount> mounts;
        private String name;
        private List<GetPoolNetworkConfiguration> networkConfigurations;
        private String nodeAgentSkuId;
        private List<GetPoolNodePlacement> nodePlacements;
        private String osDiskPlacement;
        private String resourceGroupName;
        private List<GetPoolStartTask> startTasks;
        private List<GetPoolStorageImageReference> storageImageReferences;
        private List<GetPoolTaskSchedulingPolicy> taskSchedulingPolicies;
        private List<GetPoolUserAccount> userAccounts;
        private String vmSize;
        private List<GetPoolWindow> windows;
        public Builder() {}
        public Builder(GetPoolResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountName = defaults.accountName;
    	      this.autoScales = defaults.autoScales;
    	      this.certificates = defaults.certificates;
    	      this.containerConfigurations = defaults.containerConfigurations;
    	      this.dataDisks = defaults.dataDisks;
    	      this.diskEncryptions = defaults.diskEncryptions;
    	      this.displayName = defaults.displayName;
    	      this.extensions = defaults.extensions;
    	      this.fixedScales = defaults.fixedScales;
    	      this.id = defaults.id;
    	      this.interNodeCommunication = defaults.interNodeCommunication;
    	      this.licenseType = defaults.licenseType;
    	      this.maxTasksPerNode = defaults.maxTasksPerNode;
    	      this.metadata = defaults.metadata;
    	      this.mounts = defaults.mounts;
    	      this.name = defaults.name;
    	      this.networkConfigurations = defaults.networkConfigurations;
    	      this.nodeAgentSkuId = defaults.nodeAgentSkuId;
    	      this.nodePlacements = defaults.nodePlacements;
    	      this.osDiskPlacement = defaults.osDiskPlacement;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.startTasks = defaults.startTasks;
    	      this.storageImageReferences = defaults.storageImageReferences;
    	      this.taskSchedulingPolicies = defaults.taskSchedulingPolicies;
    	      this.userAccounts = defaults.userAccounts;
    	      this.vmSize = defaults.vmSize;
    	      this.windows = defaults.windows;
        }

        @CustomType.Setter
        public Builder accountName(String accountName) {
            if (accountName == null) {
              throw new MissingRequiredPropertyException("GetPoolResult", "accountName");
            }
            this.accountName = accountName;
            return this;
        }
        @CustomType.Setter
        public Builder autoScales(List<GetPoolAutoScale> autoScales) {
            if (autoScales == null) {
              throw new MissingRequiredPropertyException("GetPoolResult", "autoScales");
            }
            this.autoScales = autoScales;
            return this;
        }
        public Builder autoScales(GetPoolAutoScale... autoScales) {
            return autoScales(List.of(autoScales));
        }
        @CustomType.Setter
        public Builder certificates(List<GetPoolCertificate> certificates) {
            if (certificates == null) {
              throw new MissingRequiredPropertyException("GetPoolResult", "certificates");
            }
            this.certificates = certificates;
            return this;
        }
        public Builder certificates(GetPoolCertificate... certificates) {
            return certificates(List.of(certificates));
        }
        @CustomType.Setter
        public Builder containerConfigurations(List<GetPoolContainerConfiguration> containerConfigurations) {
            if (containerConfigurations == null) {
              throw new MissingRequiredPropertyException("GetPoolResult", "containerConfigurations");
            }
            this.containerConfigurations = containerConfigurations;
            return this;
        }
        public Builder containerConfigurations(GetPoolContainerConfiguration... containerConfigurations) {
            return containerConfigurations(List.of(containerConfigurations));
        }
        @CustomType.Setter
        public Builder dataDisks(List<GetPoolDataDisk> dataDisks) {
            if (dataDisks == null) {
              throw new MissingRequiredPropertyException("GetPoolResult", "dataDisks");
            }
            this.dataDisks = dataDisks;
            return this;
        }
        public Builder dataDisks(GetPoolDataDisk... dataDisks) {
            return dataDisks(List.of(dataDisks));
        }
        @CustomType.Setter
        public Builder diskEncryptions(List<GetPoolDiskEncryption> diskEncryptions) {
            if (diskEncryptions == null) {
              throw new MissingRequiredPropertyException("GetPoolResult", "diskEncryptions");
            }
            this.diskEncryptions = diskEncryptions;
            return this;
        }
        public Builder diskEncryptions(GetPoolDiskEncryption... diskEncryptions) {
            return diskEncryptions(List.of(diskEncryptions));
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetPoolResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder extensions(List<GetPoolExtension> extensions) {
            if (extensions == null) {
              throw new MissingRequiredPropertyException("GetPoolResult", "extensions");
            }
            this.extensions = extensions;
            return this;
        }
        public Builder extensions(GetPoolExtension... extensions) {
            return extensions(List.of(extensions));
        }
        @CustomType.Setter
        public Builder fixedScales(List<GetPoolFixedScale> fixedScales) {
            if (fixedScales == null) {
              throw new MissingRequiredPropertyException("GetPoolResult", "fixedScales");
            }
            this.fixedScales = fixedScales;
            return this;
        }
        public Builder fixedScales(GetPoolFixedScale... fixedScales) {
            return fixedScales(List.of(fixedScales));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetPoolResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder interNodeCommunication(String interNodeCommunication) {
            if (interNodeCommunication == null) {
              throw new MissingRequiredPropertyException("GetPoolResult", "interNodeCommunication");
            }
            this.interNodeCommunication = interNodeCommunication;
            return this;
        }
        @CustomType.Setter
        public Builder licenseType(String licenseType) {
            if (licenseType == null) {
              throw new MissingRequiredPropertyException("GetPoolResult", "licenseType");
            }
            this.licenseType = licenseType;
            return this;
        }
        @CustomType.Setter
        public Builder maxTasksPerNode(Integer maxTasksPerNode) {
            if (maxTasksPerNode == null) {
              throw new MissingRequiredPropertyException("GetPoolResult", "maxTasksPerNode");
            }
            this.maxTasksPerNode = maxTasksPerNode;
            return this;
        }
        @CustomType.Setter
        public Builder metadata(Map<String,String> metadata) {
            if (metadata == null) {
              throw new MissingRequiredPropertyException("GetPoolResult", "metadata");
            }
            this.metadata = metadata;
            return this;
        }
        @CustomType.Setter
        public Builder mounts(List<GetPoolMount> mounts) {
            if (mounts == null) {
              throw new MissingRequiredPropertyException("GetPoolResult", "mounts");
            }
            this.mounts = mounts;
            return this;
        }
        public Builder mounts(GetPoolMount... mounts) {
            return mounts(List.of(mounts));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetPoolResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder networkConfigurations(List<GetPoolNetworkConfiguration> networkConfigurations) {
            if (networkConfigurations == null) {
              throw new MissingRequiredPropertyException("GetPoolResult", "networkConfigurations");
            }
            this.networkConfigurations = networkConfigurations;
            return this;
        }
        public Builder networkConfigurations(GetPoolNetworkConfiguration... networkConfigurations) {
            return networkConfigurations(List.of(networkConfigurations));
        }
        @CustomType.Setter
        public Builder nodeAgentSkuId(String nodeAgentSkuId) {
            if (nodeAgentSkuId == null) {
              throw new MissingRequiredPropertyException("GetPoolResult", "nodeAgentSkuId");
            }
            this.nodeAgentSkuId = nodeAgentSkuId;
            return this;
        }
        @CustomType.Setter
        public Builder nodePlacements(List<GetPoolNodePlacement> nodePlacements) {
            if (nodePlacements == null) {
              throw new MissingRequiredPropertyException("GetPoolResult", "nodePlacements");
            }
            this.nodePlacements = nodePlacements;
            return this;
        }
        public Builder nodePlacements(GetPoolNodePlacement... nodePlacements) {
            return nodePlacements(List.of(nodePlacements));
        }
        @CustomType.Setter
        public Builder osDiskPlacement(String osDiskPlacement) {
            if (osDiskPlacement == null) {
              throw new MissingRequiredPropertyException("GetPoolResult", "osDiskPlacement");
            }
            this.osDiskPlacement = osDiskPlacement;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            if (resourceGroupName == null) {
              throw new MissingRequiredPropertyException("GetPoolResult", "resourceGroupName");
            }
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder startTasks(List<GetPoolStartTask> startTasks) {
            if (startTasks == null) {
              throw new MissingRequiredPropertyException("GetPoolResult", "startTasks");
            }
            this.startTasks = startTasks;
            return this;
        }
        public Builder startTasks(GetPoolStartTask... startTasks) {
            return startTasks(List.of(startTasks));
        }
        @CustomType.Setter
        public Builder storageImageReferences(List<GetPoolStorageImageReference> storageImageReferences) {
            if (storageImageReferences == null) {
              throw new MissingRequiredPropertyException("GetPoolResult", "storageImageReferences");
            }
            this.storageImageReferences = storageImageReferences;
            return this;
        }
        public Builder storageImageReferences(GetPoolStorageImageReference... storageImageReferences) {
            return storageImageReferences(List.of(storageImageReferences));
        }
        @CustomType.Setter
        public Builder taskSchedulingPolicies(List<GetPoolTaskSchedulingPolicy> taskSchedulingPolicies) {
            if (taskSchedulingPolicies == null) {
              throw new MissingRequiredPropertyException("GetPoolResult", "taskSchedulingPolicies");
            }
            this.taskSchedulingPolicies = taskSchedulingPolicies;
            return this;
        }
        public Builder taskSchedulingPolicies(GetPoolTaskSchedulingPolicy... taskSchedulingPolicies) {
            return taskSchedulingPolicies(List.of(taskSchedulingPolicies));
        }
        @CustomType.Setter
        public Builder userAccounts(List<GetPoolUserAccount> userAccounts) {
            if (userAccounts == null) {
              throw new MissingRequiredPropertyException("GetPoolResult", "userAccounts");
            }
            this.userAccounts = userAccounts;
            return this;
        }
        public Builder userAccounts(GetPoolUserAccount... userAccounts) {
            return userAccounts(List.of(userAccounts));
        }
        @CustomType.Setter
        public Builder vmSize(String vmSize) {
            if (vmSize == null) {
              throw new MissingRequiredPropertyException("GetPoolResult", "vmSize");
            }
            this.vmSize = vmSize;
            return this;
        }
        @CustomType.Setter
        public Builder windows(List<GetPoolWindow> windows) {
            if (windows == null) {
              throw new MissingRequiredPropertyException("GetPoolResult", "windows");
            }
            this.windows = windows;
            return this;
        }
        public Builder windows(GetPoolWindow... windows) {
            return windows(List.of(windows));
        }
        public GetPoolResult build() {
            final var _resultValue = new GetPoolResult();
            _resultValue.accountName = accountName;
            _resultValue.autoScales = autoScales;
            _resultValue.certificates = certificates;
            _resultValue.containerConfigurations = containerConfigurations;
            _resultValue.dataDisks = dataDisks;
            _resultValue.diskEncryptions = diskEncryptions;
            _resultValue.displayName = displayName;
            _resultValue.extensions = extensions;
            _resultValue.fixedScales = fixedScales;
            _resultValue.id = id;
            _resultValue.interNodeCommunication = interNodeCommunication;
            _resultValue.licenseType = licenseType;
            _resultValue.maxTasksPerNode = maxTasksPerNode;
            _resultValue.metadata = metadata;
            _resultValue.mounts = mounts;
            _resultValue.name = name;
            _resultValue.networkConfigurations = networkConfigurations;
            _resultValue.nodeAgentSkuId = nodeAgentSkuId;
            _resultValue.nodePlacements = nodePlacements;
            _resultValue.osDiskPlacement = osDiskPlacement;
            _resultValue.resourceGroupName = resourceGroupName;
            _resultValue.startTasks = startTasks;
            _resultValue.storageImageReferences = storageImageReferences;
            _resultValue.taskSchedulingPolicies = taskSchedulingPolicies;
            _resultValue.userAccounts = userAccounts;
            _resultValue.vmSize = vmSize;
            _resultValue.windows = windows;
            return _resultValue;
        }
    }
}
