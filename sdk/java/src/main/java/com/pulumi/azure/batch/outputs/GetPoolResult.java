// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.batch.outputs;

import com.pulumi.azure.batch.outputs.GetPoolAutoScale;
import com.pulumi.azure.batch.outputs.GetPoolCertificate;
import com.pulumi.azure.batch.outputs.GetPoolContainerConfiguration;
import com.pulumi.azure.batch.outputs.GetPoolFixedScale;
import com.pulumi.azure.batch.outputs.GetPoolNetworkConfiguration;
import com.pulumi.azure.batch.outputs.GetPoolStartTask;
import com.pulumi.azure.batch.outputs.GetPoolStorageImageReference;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetPoolResult {
    /**
     * @return The name of the Batch account.
     * 
     */
    private String accountName;
    /**
     * @return A `auto_scale` block that describes the scale settings when using auto scale.
     * 
     */
    private List<GetPoolAutoScale> autoScales;
    /**
     * @return One or more `certificate` blocks that describe the certificates installed on each compute node in the pool.
     * 
     */
    private List<GetPoolCertificate> certificates;
    /**
     * @return The container configuration used in the pool&#39;s VMs.
     * 
     */
    private List<GetPoolContainerConfiguration> containerConfigurations;
    private String displayName;
    /**
     * @return A `fixed_scale` block that describes the scale settings when using fixed scale.
     * 
     */
    private List<GetPoolFixedScale> fixedScales;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The maximum number of tasks that can run concurrently on a single compute node in the pool.
     * 
     */
    private Integer maxTasksPerNode;
    private Map<String,String> metadata;
    /**
     * @return The name of the endpoint.
     * 
     */
    private String name;
    private List<GetPoolNetworkConfiguration> networkConfigurations;
    /**
     * @return The SKU of the node agents in the Batch pool.
     * 
     */
    private String nodeAgentSkuId;
    private String resourceGroupName;
    /**
     * @return A `start_task` block that describes the start task settings for the Batch pool.
     * 
     */
    private List<GetPoolStartTask> startTasks;
    /**
     * @return The reference of the storage image used by the nodes in the Batch pool.
     * 
     */
    private List<GetPoolStorageImageReference> storageImageReferences;
    /**
     * @return The size of the VM created in the Batch pool.
     * 
     */
    private String vmSize;

    private GetPoolResult() {}
    /**
     * @return The name of the Batch account.
     * 
     */
    public String accountName() {
        return this.accountName;
    }
    /**
     * @return A `auto_scale` block that describes the scale settings when using auto scale.
     * 
     */
    public List<GetPoolAutoScale> autoScales() {
        return this.autoScales;
    }
    /**
     * @return One or more `certificate` blocks that describe the certificates installed on each compute node in the pool.
     * 
     */
    public List<GetPoolCertificate> certificates() {
        return this.certificates;
    }
    /**
     * @return The container configuration used in the pool&#39;s VMs.
     * 
     */
    public List<GetPoolContainerConfiguration> containerConfigurations() {
        return this.containerConfigurations;
    }
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return A `fixed_scale` block that describes the scale settings when using fixed scale.
     * 
     */
    public List<GetPoolFixedScale> fixedScales() {
        return this.fixedScales;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The maximum number of tasks that can run concurrently on a single compute node in the pool.
     * 
     */
    public Integer maxTasksPerNode() {
        return this.maxTasksPerNode;
    }
    public Map<String,String> metadata() {
        return this.metadata;
    }
    /**
     * @return The name of the endpoint.
     * 
     */
    public String name() {
        return this.name;
    }
    public List<GetPoolNetworkConfiguration> networkConfigurations() {
        return this.networkConfigurations;
    }
    /**
     * @return The SKU of the node agents in the Batch pool.
     * 
     */
    public String nodeAgentSkuId() {
        return this.nodeAgentSkuId;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return A `start_task` block that describes the start task settings for the Batch pool.
     * 
     */
    public List<GetPoolStartTask> startTasks() {
        return this.startTasks;
    }
    /**
     * @return The reference of the storage image used by the nodes in the Batch pool.
     * 
     */
    public List<GetPoolStorageImageReference> storageImageReferences() {
        return this.storageImageReferences;
    }
    /**
     * @return The size of the VM created in the Batch pool.
     * 
     */
    public String vmSize() {
        return this.vmSize;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPoolResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountName;
        private List<GetPoolAutoScale> autoScales;
        private List<GetPoolCertificate> certificates;
        private List<GetPoolContainerConfiguration> containerConfigurations;
        private String displayName;
        private List<GetPoolFixedScale> fixedScales;
        private String id;
        private Integer maxTasksPerNode;
        private Map<String,String> metadata;
        private String name;
        private List<GetPoolNetworkConfiguration> networkConfigurations;
        private String nodeAgentSkuId;
        private String resourceGroupName;
        private List<GetPoolStartTask> startTasks;
        private List<GetPoolStorageImageReference> storageImageReferences;
        private String vmSize;
        public Builder() {}
        public Builder(GetPoolResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountName = defaults.accountName;
    	      this.autoScales = defaults.autoScales;
    	      this.certificates = defaults.certificates;
    	      this.containerConfigurations = defaults.containerConfigurations;
    	      this.displayName = defaults.displayName;
    	      this.fixedScales = defaults.fixedScales;
    	      this.id = defaults.id;
    	      this.maxTasksPerNode = defaults.maxTasksPerNode;
    	      this.metadata = defaults.metadata;
    	      this.name = defaults.name;
    	      this.networkConfigurations = defaults.networkConfigurations;
    	      this.nodeAgentSkuId = defaults.nodeAgentSkuId;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.startTasks = defaults.startTasks;
    	      this.storageImageReferences = defaults.storageImageReferences;
    	      this.vmSize = defaults.vmSize;
        }

        @CustomType.Setter
        public Builder accountName(String accountName) {
            this.accountName = Objects.requireNonNull(accountName);
            return this;
        }
        @CustomType.Setter
        public Builder autoScales(List<GetPoolAutoScale> autoScales) {
            this.autoScales = Objects.requireNonNull(autoScales);
            return this;
        }
        public Builder autoScales(GetPoolAutoScale... autoScales) {
            return autoScales(List.of(autoScales));
        }
        @CustomType.Setter
        public Builder certificates(List<GetPoolCertificate> certificates) {
            this.certificates = Objects.requireNonNull(certificates);
            return this;
        }
        public Builder certificates(GetPoolCertificate... certificates) {
            return certificates(List.of(certificates));
        }
        @CustomType.Setter
        public Builder containerConfigurations(List<GetPoolContainerConfiguration> containerConfigurations) {
            this.containerConfigurations = Objects.requireNonNull(containerConfigurations);
            return this;
        }
        public Builder containerConfigurations(GetPoolContainerConfiguration... containerConfigurations) {
            return containerConfigurations(List.of(containerConfigurations));
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        @CustomType.Setter
        public Builder fixedScales(List<GetPoolFixedScale> fixedScales) {
            this.fixedScales = Objects.requireNonNull(fixedScales);
            return this;
        }
        public Builder fixedScales(GetPoolFixedScale... fixedScales) {
            return fixedScales(List.of(fixedScales));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder maxTasksPerNode(Integer maxTasksPerNode) {
            this.maxTasksPerNode = Objects.requireNonNull(maxTasksPerNode);
            return this;
        }
        @CustomType.Setter
        public Builder metadata(Map<String,String> metadata) {
            this.metadata = Objects.requireNonNull(metadata);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder networkConfigurations(List<GetPoolNetworkConfiguration> networkConfigurations) {
            this.networkConfigurations = Objects.requireNonNull(networkConfigurations);
            return this;
        }
        public Builder networkConfigurations(GetPoolNetworkConfiguration... networkConfigurations) {
            return networkConfigurations(List.of(networkConfigurations));
        }
        @CustomType.Setter
        public Builder nodeAgentSkuId(String nodeAgentSkuId) {
            this.nodeAgentSkuId = Objects.requireNonNull(nodeAgentSkuId);
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        @CustomType.Setter
        public Builder startTasks(List<GetPoolStartTask> startTasks) {
            this.startTasks = Objects.requireNonNull(startTasks);
            return this;
        }
        public Builder startTasks(GetPoolStartTask... startTasks) {
            return startTasks(List.of(startTasks));
        }
        @CustomType.Setter
        public Builder storageImageReferences(List<GetPoolStorageImageReference> storageImageReferences) {
            this.storageImageReferences = Objects.requireNonNull(storageImageReferences);
            return this;
        }
        public Builder storageImageReferences(GetPoolStorageImageReference... storageImageReferences) {
            return storageImageReferences(List.of(storageImageReferences));
        }
        @CustomType.Setter
        public Builder vmSize(String vmSize) {
            this.vmSize = Objects.requireNonNull(vmSize);
            return this;
        }
        public GetPoolResult build() {
            final var o = new GetPoolResult();
            o.accountName = accountName;
            o.autoScales = autoScales;
            o.certificates = certificates;
            o.containerConfigurations = containerConfigurations;
            o.displayName = displayName;
            o.fixedScales = fixedScales;
            o.id = id;
            o.maxTasksPerNode = maxTasksPerNode;
            o.metadata = metadata;
            o.name = name;
            o.networkConfigurations = networkConfigurations;
            o.nodeAgentSkuId = nodeAgentSkuId;
            o.resourceGroupName = resourceGroupName;
            o.startTasks = startTasks;
            o.storageImageReferences = storageImageReferences;
            o.vmSize = vmSize;
            return o;
        }
    }
}
