// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.managedapplication.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class DefinitionAuthorizationArgs extends com.pulumi.resources.ResourceArgs {

    public static final DefinitionAuthorizationArgs Empty = new DefinitionAuthorizationArgs();

    /**
     * Specifies a role definition identifier for the provider. This role will define all the permissions that the provider must have on the managed application&#39;s container resource group. This role definition cannot have permission to delete the resource group.
     * 
     */
    @Import(name="roleDefinitionId", required=true)
    private Output<String> roleDefinitionId;

    /**
     * @return Specifies a role definition identifier for the provider. This role will define all the permissions that the provider must have on the managed application&#39;s container resource group. This role definition cannot have permission to delete the resource group.
     * 
     */
    public Output<String> roleDefinitionId() {
        return this.roleDefinitionId;
    }

    /**
     * Specifies a service principal identifier for the provider. This is the identity that the provider will use to call ARM to manage the managed application resources.
     * 
     */
    @Import(name="servicePrincipalId", required=true)
    private Output<String> servicePrincipalId;

    /**
     * @return Specifies a service principal identifier for the provider. This is the identity that the provider will use to call ARM to manage the managed application resources.
     * 
     */
    public Output<String> servicePrincipalId() {
        return this.servicePrincipalId;
    }

    private DefinitionAuthorizationArgs() {}

    private DefinitionAuthorizationArgs(DefinitionAuthorizationArgs $) {
        this.roleDefinitionId = $.roleDefinitionId;
        this.servicePrincipalId = $.servicePrincipalId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DefinitionAuthorizationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DefinitionAuthorizationArgs $;

        public Builder() {
            $ = new DefinitionAuthorizationArgs();
        }

        public Builder(DefinitionAuthorizationArgs defaults) {
            $ = new DefinitionAuthorizationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param roleDefinitionId Specifies a role definition identifier for the provider. This role will define all the permissions that the provider must have on the managed application&#39;s container resource group. This role definition cannot have permission to delete the resource group.
         * 
         * @return builder
         * 
         */
        public Builder roleDefinitionId(Output<String> roleDefinitionId) {
            $.roleDefinitionId = roleDefinitionId;
            return this;
        }

        /**
         * @param roleDefinitionId Specifies a role definition identifier for the provider. This role will define all the permissions that the provider must have on the managed application&#39;s container resource group. This role definition cannot have permission to delete the resource group.
         * 
         * @return builder
         * 
         */
        public Builder roleDefinitionId(String roleDefinitionId) {
            return roleDefinitionId(Output.of(roleDefinitionId));
        }

        /**
         * @param servicePrincipalId Specifies a service principal identifier for the provider. This is the identity that the provider will use to call ARM to manage the managed application resources.
         * 
         * @return builder
         * 
         */
        public Builder servicePrincipalId(Output<String> servicePrincipalId) {
            $.servicePrincipalId = servicePrincipalId;
            return this;
        }

        /**
         * @param servicePrincipalId Specifies a service principal identifier for the provider. This is the identity that the provider will use to call ARM to manage the managed application resources.
         * 
         * @return builder
         * 
         */
        public Builder servicePrincipalId(String servicePrincipalId) {
            return servicePrincipalId(Output.of(servicePrincipalId));
        }

        public DefinitionAuthorizationArgs build() {
            if ($.roleDefinitionId == null) {
                throw new MissingRequiredPropertyException("DefinitionAuthorizationArgs", "roleDefinitionId");
            }
            if ($.servicePrincipalId == null) {
                throw new MissingRequiredPropertyException("DefinitionAuthorizationArgs", "servicePrincipalId");
            }
            return $;
        }
    }

}
