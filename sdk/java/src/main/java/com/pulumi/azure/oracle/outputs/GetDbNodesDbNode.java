// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.oracle.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetDbNodesDbNode {
    /**
     * @return Additional information about the planned maintenance.
     * 
     */
    private String additionalDetails;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the backup IP address associated with the database node. Use this OCID with either the [GetPrivateIp](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/20160918/PrivateIp/GetPrivateIp) or the [GetPublicIpByPrivateIpId](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/20160918/PublicIp/GetPublicIpByPrivateIpId) API to get the IP address needed to make a database connection.
     * 
     */
    private String backupIpId;
    private String backupVnic2Id;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the backup VNIC.
     * 
     */
    private String backupVnicId;
    /**
     * @return The number of CPU cores enabled on the DB node.
     * 
     */
    private Integer cpuCoreCount;
    /**
     * @return The allocated local node storage in GBs on the DB node.
     * 
     */
    private Integer dbNodeStorageSizeInGbs;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the ExaCC DB server associated with the database node.
     * 
     */
    private String dbServerId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DB system.
     * 
     */
    private String dbSystemId;
    /**
     * @return The name of the Fault Domain the instance is contained in.
     * 
     */
    private String faultDomain;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the host IP address associated with the database node. Use this OCID with either the [GetPrivateIp](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/20160918/PrivateIp/GetPrivateIp) or the [GetPublicIpByPrivateIpId](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/20160918/PublicIp/GetPublicIpByPrivateIpId) API to get the IP address needed to make a database connection.
     * 
     */
    private String hostIpId;
    private String hostname;
    /**
     * @return Information about the current lifecycle details.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return Information about the current lifecycle state.
     * 
     */
    private String lifecycleState;
    /**
     * @return The type of database node maintenance.
     * 
     */
    private String maintenanceType;
    /**
     * @return The allocated memory in GBs on the DB Node.
     * 
     */
    private Integer memorySizeInGbs;
    /**
     * @return The [OCID](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm) of the DB node.
     * 
     */
    private String ocid;
    /**
     * @return The size (in GB) of the block storage volume allocation for the DB system. This attribute applies only for virtual machine DB systems.
     * 
     */
    private Integer softwareStorageSizeInGb;
    /**
     * @return The date and time that the DB node was created.
     * 
     */
    private String timeCreated;
    /**
     * @return End date and time of maintenance window.
     * 
     */
    private String timeMaintenanceWindowEnd;
    /**
     * @return Start date and time of maintenance window.
     * 
     */
    private String timeMaintenanceWindowStart;
    private String vnic2Id;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VNIC.
     * 
     */
    private String vnicId;

    private GetDbNodesDbNode() {}
    /**
     * @return Additional information about the planned maintenance.
     * 
     */
    public String additionalDetails() {
        return this.additionalDetails;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the backup IP address associated with the database node. Use this OCID with either the [GetPrivateIp](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/20160918/PrivateIp/GetPrivateIp) or the [GetPublicIpByPrivateIpId](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/20160918/PublicIp/GetPublicIpByPrivateIpId) API to get the IP address needed to make a database connection.
     * 
     */
    public String backupIpId() {
        return this.backupIpId;
    }
    public String backupVnic2Id() {
        return this.backupVnic2Id;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the backup VNIC.
     * 
     */
    public String backupVnicId() {
        return this.backupVnicId;
    }
    /**
     * @return The number of CPU cores enabled on the DB node.
     * 
     */
    public Integer cpuCoreCount() {
        return this.cpuCoreCount;
    }
    /**
     * @return The allocated local node storage in GBs on the DB node.
     * 
     */
    public Integer dbNodeStorageSizeInGbs() {
        return this.dbNodeStorageSizeInGbs;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the ExaCC DB server associated with the database node.
     * 
     */
    public String dbServerId() {
        return this.dbServerId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DB system.
     * 
     */
    public String dbSystemId() {
        return this.dbSystemId;
    }
    /**
     * @return The name of the Fault Domain the instance is contained in.
     * 
     */
    public String faultDomain() {
        return this.faultDomain;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the host IP address associated with the database node. Use this OCID with either the [GetPrivateIp](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/20160918/PrivateIp/GetPrivateIp) or the [GetPublicIpByPrivateIpId](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/20160918/PublicIp/GetPublicIpByPrivateIpId) API to get the IP address needed to make a database connection.
     * 
     */
    public String hostIpId() {
        return this.hostIpId;
    }
    public String hostname() {
        return this.hostname;
    }
    /**
     * @return Information about the current lifecycle details.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return Information about the current lifecycle state.
     * 
     */
    public String lifecycleState() {
        return this.lifecycleState;
    }
    /**
     * @return The type of database node maintenance.
     * 
     */
    public String maintenanceType() {
        return this.maintenanceType;
    }
    /**
     * @return The allocated memory in GBs on the DB Node.
     * 
     */
    public Integer memorySizeInGbs() {
        return this.memorySizeInGbs;
    }
    /**
     * @return The [OCID](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm) of the DB node.
     * 
     */
    public String ocid() {
        return this.ocid;
    }
    /**
     * @return The size (in GB) of the block storage volume allocation for the DB system. This attribute applies only for virtual machine DB systems.
     * 
     */
    public Integer softwareStorageSizeInGb() {
        return this.softwareStorageSizeInGb;
    }
    /**
     * @return The date and time that the DB node was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return End date and time of maintenance window.
     * 
     */
    public String timeMaintenanceWindowEnd() {
        return this.timeMaintenanceWindowEnd;
    }
    /**
     * @return Start date and time of maintenance window.
     * 
     */
    public String timeMaintenanceWindowStart() {
        return this.timeMaintenanceWindowStart;
    }
    public String vnic2Id() {
        return this.vnic2Id;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VNIC.
     * 
     */
    public String vnicId() {
        return this.vnicId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDbNodesDbNode defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String additionalDetails;
        private String backupIpId;
        private String backupVnic2Id;
        private String backupVnicId;
        private Integer cpuCoreCount;
        private Integer dbNodeStorageSizeInGbs;
        private String dbServerId;
        private String dbSystemId;
        private String faultDomain;
        private String hostIpId;
        private String hostname;
        private String lifecycleDetails;
        private String lifecycleState;
        private String maintenanceType;
        private Integer memorySizeInGbs;
        private String ocid;
        private Integer softwareStorageSizeInGb;
        private String timeCreated;
        private String timeMaintenanceWindowEnd;
        private String timeMaintenanceWindowStart;
        private String vnic2Id;
        private String vnicId;
        public Builder() {}
        public Builder(GetDbNodesDbNode defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalDetails = defaults.additionalDetails;
    	      this.backupIpId = defaults.backupIpId;
    	      this.backupVnic2Id = defaults.backupVnic2Id;
    	      this.backupVnicId = defaults.backupVnicId;
    	      this.cpuCoreCount = defaults.cpuCoreCount;
    	      this.dbNodeStorageSizeInGbs = defaults.dbNodeStorageSizeInGbs;
    	      this.dbServerId = defaults.dbServerId;
    	      this.dbSystemId = defaults.dbSystemId;
    	      this.faultDomain = defaults.faultDomain;
    	      this.hostIpId = defaults.hostIpId;
    	      this.hostname = defaults.hostname;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.lifecycleState = defaults.lifecycleState;
    	      this.maintenanceType = defaults.maintenanceType;
    	      this.memorySizeInGbs = defaults.memorySizeInGbs;
    	      this.ocid = defaults.ocid;
    	      this.softwareStorageSizeInGb = defaults.softwareStorageSizeInGb;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeMaintenanceWindowEnd = defaults.timeMaintenanceWindowEnd;
    	      this.timeMaintenanceWindowStart = defaults.timeMaintenanceWindowStart;
    	      this.vnic2Id = defaults.vnic2Id;
    	      this.vnicId = defaults.vnicId;
        }

        @CustomType.Setter
        public Builder additionalDetails(String additionalDetails) {
            if (additionalDetails == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNode", "additionalDetails");
            }
            this.additionalDetails = additionalDetails;
            return this;
        }
        @CustomType.Setter
        public Builder backupIpId(String backupIpId) {
            if (backupIpId == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNode", "backupIpId");
            }
            this.backupIpId = backupIpId;
            return this;
        }
        @CustomType.Setter
        public Builder backupVnic2Id(String backupVnic2Id) {
            if (backupVnic2Id == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNode", "backupVnic2Id");
            }
            this.backupVnic2Id = backupVnic2Id;
            return this;
        }
        @CustomType.Setter
        public Builder backupVnicId(String backupVnicId) {
            if (backupVnicId == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNode", "backupVnicId");
            }
            this.backupVnicId = backupVnicId;
            return this;
        }
        @CustomType.Setter
        public Builder cpuCoreCount(Integer cpuCoreCount) {
            if (cpuCoreCount == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNode", "cpuCoreCount");
            }
            this.cpuCoreCount = cpuCoreCount;
            return this;
        }
        @CustomType.Setter
        public Builder dbNodeStorageSizeInGbs(Integer dbNodeStorageSizeInGbs) {
            if (dbNodeStorageSizeInGbs == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNode", "dbNodeStorageSizeInGbs");
            }
            this.dbNodeStorageSizeInGbs = dbNodeStorageSizeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder dbServerId(String dbServerId) {
            if (dbServerId == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNode", "dbServerId");
            }
            this.dbServerId = dbServerId;
            return this;
        }
        @CustomType.Setter
        public Builder dbSystemId(String dbSystemId) {
            if (dbSystemId == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNode", "dbSystemId");
            }
            this.dbSystemId = dbSystemId;
            return this;
        }
        @CustomType.Setter
        public Builder faultDomain(String faultDomain) {
            if (faultDomain == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNode", "faultDomain");
            }
            this.faultDomain = faultDomain;
            return this;
        }
        @CustomType.Setter
        public Builder hostIpId(String hostIpId) {
            if (hostIpId == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNode", "hostIpId");
            }
            this.hostIpId = hostIpId;
            return this;
        }
        @CustomType.Setter
        public Builder hostname(String hostname) {
            if (hostname == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNode", "hostname");
            }
            this.hostname = hostname;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNode", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleState(String lifecycleState) {
            if (lifecycleState == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNode", "lifecycleState");
            }
            this.lifecycleState = lifecycleState;
            return this;
        }
        @CustomType.Setter
        public Builder maintenanceType(String maintenanceType) {
            if (maintenanceType == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNode", "maintenanceType");
            }
            this.maintenanceType = maintenanceType;
            return this;
        }
        @CustomType.Setter
        public Builder memorySizeInGbs(Integer memorySizeInGbs) {
            if (memorySizeInGbs == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNode", "memorySizeInGbs");
            }
            this.memorySizeInGbs = memorySizeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder ocid(String ocid) {
            if (ocid == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNode", "ocid");
            }
            this.ocid = ocid;
            return this;
        }
        @CustomType.Setter
        public Builder softwareStorageSizeInGb(Integer softwareStorageSizeInGb) {
            if (softwareStorageSizeInGb == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNode", "softwareStorageSizeInGb");
            }
            this.softwareStorageSizeInGb = softwareStorageSizeInGb;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNode", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeMaintenanceWindowEnd(String timeMaintenanceWindowEnd) {
            if (timeMaintenanceWindowEnd == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNode", "timeMaintenanceWindowEnd");
            }
            this.timeMaintenanceWindowEnd = timeMaintenanceWindowEnd;
            return this;
        }
        @CustomType.Setter
        public Builder timeMaintenanceWindowStart(String timeMaintenanceWindowStart) {
            if (timeMaintenanceWindowStart == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNode", "timeMaintenanceWindowStart");
            }
            this.timeMaintenanceWindowStart = timeMaintenanceWindowStart;
            return this;
        }
        @CustomType.Setter
        public Builder vnic2Id(String vnic2Id) {
            if (vnic2Id == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNode", "vnic2Id");
            }
            this.vnic2Id = vnic2Id;
            return this;
        }
        @CustomType.Setter
        public Builder vnicId(String vnicId) {
            if (vnicId == null) {
              throw new MissingRequiredPropertyException("GetDbNodesDbNode", "vnicId");
            }
            this.vnicId = vnicId;
            return this;
        }
        public GetDbNodesDbNode build() {
            final var _resultValue = new GetDbNodesDbNode();
            _resultValue.additionalDetails = additionalDetails;
            _resultValue.backupIpId = backupIpId;
            _resultValue.backupVnic2Id = backupVnic2Id;
            _resultValue.backupVnicId = backupVnicId;
            _resultValue.cpuCoreCount = cpuCoreCount;
            _resultValue.dbNodeStorageSizeInGbs = dbNodeStorageSizeInGbs;
            _resultValue.dbServerId = dbServerId;
            _resultValue.dbSystemId = dbSystemId;
            _resultValue.faultDomain = faultDomain;
            _resultValue.hostIpId = hostIpId;
            _resultValue.hostname = hostname;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.lifecycleState = lifecycleState;
            _resultValue.maintenanceType = maintenanceType;
            _resultValue.memorySizeInGbs = memorySizeInGbs;
            _resultValue.ocid = ocid;
            _resultValue.softwareStorageSizeInGb = softwareStorageSizeInGb;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeMaintenanceWindowEnd = timeMaintenanceWindowEnd;
            _resultValue.timeMaintenanceWindowStart = timeMaintenanceWindowStart;
            _resultValue.vnic2Id = vnic2Id;
            _resultValue.vnicId = vnicId;
            return _resultValue;
        }
    }
}
