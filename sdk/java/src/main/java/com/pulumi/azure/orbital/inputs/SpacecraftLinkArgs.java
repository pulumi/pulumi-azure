// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.orbital.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;


public final class SpacecraftLinkArgs extends com.pulumi.resources.ResourceArgs {

    public static final SpacecraftLinkArgs Empty = new SpacecraftLinkArgs();

    /**
     * Bandwidth in Mhz.
     * 
     */
    @Import(name="bandwidthMhz", required=true)
    private Output<Double> bandwidthMhz;

    /**
     * @return Bandwidth in Mhz.
     * 
     */
    public Output<Double> bandwidthMhz() {
        return this.bandwidthMhz;
    }

    /**
     * Center frequency in Mhz.
     * 
     */
    @Import(name="centerFrequencyMhz", required=true)
    private Output<Double> centerFrequencyMhz;

    /**
     * @return Center frequency in Mhz.
     * 
     */
    public Output<Double> centerFrequencyMhz() {
        return this.centerFrequencyMhz;
    }

    /**
     * Direction if the communication. Possible values are `Uplink` and `Downlink`.
     * 
     */
    @Import(name="direction", required=true)
    private Output<String> direction;

    /**
     * @return Direction if the communication. Possible values are `Uplink` and `Downlink`.
     * 
     */
    public Output<String> direction() {
        return this.direction;
    }

    /**
     * Name of the link.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name of the link.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Polarization. Possible values are `RHCP`, `LHCP`, `linearVertical` and `linearHorizontal`.
     * 
     */
    @Import(name="polarization", required=true)
    private Output<String> polarization;

    /**
     * @return Polarization. Possible values are `RHCP`, `LHCP`, `linearVertical` and `linearHorizontal`.
     * 
     */
    public Output<String> polarization() {
        return this.polarization;
    }

    private SpacecraftLinkArgs() {}

    private SpacecraftLinkArgs(SpacecraftLinkArgs $) {
        this.bandwidthMhz = $.bandwidthMhz;
        this.centerFrequencyMhz = $.centerFrequencyMhz;
        this.direction = $.direction;
        this.name = $.name;
        this.polarization = $.polarization;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SpacecraftLinkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SpacecraftLinkArgs $;

        public Builder() {
            $ = new SpacecraftLinkArgs();
        }

        public Builder(SpacecraftLinkArgs defaults) {
            $ = new SpacecraftLinkArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bandwidthMhz Bandwidth in Mhz.
         * 
         * @return builder
         * 
         */
        public Builder bandwidthMhz(Output<Double> bandwidthMhz) {
            $.bandwidthMhz = bandwidthMhz;
            return this;
        }

        /**
         * @param bandwidthMhz Bandwidth in Mhz.
         * 
         * @return builder
         * 
         */
        public Builder bandwidthMhz(Double bandwidthMhz) {
            return bandwidthMhz(Output.of(bandwidthMhz));
        }

        /**
         * @param centerFrequencyMhz Center frequency in Mhz.
         * 
         * @return builder
         * 
         */
        public Builder centerFrequencyMhz(Output<Double> centerFrequencyMhz) {
            $.centerFrequencyMhz = centerFrequencyMhz;
            return this;
        }

        /**
         * @param centerFrequencyMhz Center frequency in Mhz.
         * 
         * @return builder
         * 
         */
        public Builder centerFrequencyMhz(Double centerFrequencyMhz) {
            return centerFrequencyMhz(Output.of(centerFrequencyMhz));
        }

        /**
         * @param direction Direction if the communication. Possible values are `Uplink` and `Downlink`.
         * 
         * @return builder
         * 
         */
        public Builder direction(Output<String> direction) {
            $.direction = direction;
            return this;
        }

        /**
         * @param direction Direction if the communication. Possible values are `Uplink` and `Downlink`.
         * 
         * @return builder
         * 
         */
        public Builder direction(String direction) {
            return direction(Output.of(direction));
        }

        /**
         * @param name Name of the link.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the link.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param polarization Polarization. Possible values are `RHCP`, `LHCP`, `linearVertical` and `linearHorizontal`.
         * 
         * @return builder
         * 
         */
        public Builder polarization(Output<String> polarization) {
            $.polarization = polarization;
            return this;
        }

        /**
         * @param polarization Polarization. Possible values are `RHCP`, `LHCP`, `linearVertical` and `linearHorizontal`.
         * 
         * @return builder
         * 
         */
        public Builder polarization(String polarization) {
            return polarization(Output.of(polarization));
        }

        public SpacecraftLinkArgs build() {
            if ($.bandwidthMhz == null) {
                throw new MissingRequiredPropertyException("SpacecraftLinkArgs", "bandwidthMhz");
            }
            if ($.centerFrequencyMhz == null) {
                throw new MissingRequiredPropertyException("SpacecraftLinkArgs", "centerFrequencyMhz");
            }
            if ($.direction == null) {
                throw new MissingRequiredPropertyException("SpacecraftLinkArgs", "direction");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("SpacecraftLinkArgs", "name");
            }
            if ($.polarization == null) {
                throw new MissingRequiredPropertyException("SpacecraftLinkArgs", "polarization");
            }
            return $;
        }
    }

}
