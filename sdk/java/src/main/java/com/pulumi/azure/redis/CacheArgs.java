// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.redis;

import com.pulumi.azure.redis.inputs.CacheIdentityArgs;
import com.pulumi.azure.redis.inputs.CachePatchScheduleArgs;
import com.pulumi.azure.redis.inputs.CacheRedisConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CacheArgs extends com.pulumi.resources.ResourceArgs {

    public static final CacheArgs Empty = new CacheArgs();

    /**
     * The size of the Redis cache to deploy. Valid values for a SKU `family` of C (Basic/Standard) are `0, 1, 2, 3, 4, 5, 6`, and for P (Premium) `family` are `1, 2, 3, 4, 5`.
     * 
     */
    @Import(name="capacity", required=true)
    private Output<Integer> capacity;

    /**
     * @return The size of the Redis cache to deploy. Valid values for a SKU `family` of C (Basic/Standard) are `0, 1, 2, 3, 4, 5, 6`, and for P (Premium) `family` are `1, 2, 3, 4, 5`.
     * 
     */
    public Output<Integer> capacity() {
        return this.capacity;
    }

    /**
     * Enable the non-SSL port (6379) - disabled by default.
     * 
     */
    @Import(name="enableNonSslPort")
    private @Nullable Output<Boolean> enableNonSslPort;

    /**
     * @return Enable the non-SSL port (6379) - disabled by default.
     * 
     */
    public Optional<Output<Boolean>> enableNonSslPort() {
        return Optional.ofNullable(this.enableNonSslPort);
    }

    /**
     * The SKU family/pricing group to use. Valid values are `C` (for Basic/Standard SKU family) and `P` (for `Premium`)
     * 
     */
    @Import(name="family", required=true)
    private Output<String> family;

    /**
     * @return The SKU family/pricing group to use. Valid values are `C` (for Basic/Standard SKU family) and `P` (for `Premium`)
     * 
     */
    public Output<String> family() {
        return this.family;
    }

    /**
     * An `identity` block as defined below.
     * 
     */
    @Import(name="identity")
    private @Nullable Output<CacheIdentityArgs> identity;

    /**
     * @return An `identity` block as defined below.
     * 
     */
    public Optional<Output<CacheIdentityArgs>> identity() {
        return Optional.ofNullable(this.identity);
    }

    /**
     * The location of the resource group. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The location of the resource group. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The minimum TLS version. Possible values are `1.0`, `1.1` and `1.2`. Defaults to `1.0`.
     * 
     */
    @Import(name="minimumTlsVersion")
    private @Nullable Output<String> minimumTlsVersion;

    /**
     * @return The minimum TLS version. Possible values are `1.0`, `1.1` and `1.2`. Defaults to `1.0`.
     * 
     */
    public Optional<Output<String>> minimumTlsVersion() {
        return Optional.ofNullable(this.minimumTlsVersion);
    }

    /**
     * The name of the Redis instance. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the Redis instance. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A list of `patch_schedule` blocks as defined below.
     * 
     */
    @Import(name="patchSchedules")
    private @Nullable Output<List<CachePatchScheduleArgs>> patchSchedules;

    /**
     * @return A list of `patch_schedule` blocks as defined below.
     * 
     */
    public Optional<Output<List<CachePatchScheduleArgs>>> patchSchedules() {
        return Optional.ofNullable(this.patchSchedules);
    }

    /**
     * The Static IP Address to assign to the Redis Cache when hosted inside the Virtual Network. This argument implies the use of `subnet_id`. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="privateStaticIpAddress")
    private @Nullable Output<String> privateStaticIpAddress;

    /**
     * @return The Static IP Address to assign to the Redis Cache when hosted inside the Virtual Network. This argument implies the use of `subnet_id`. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> privateStaticIpAddress() {
        return Optional.ofNullable(this.privateStaticIpAddress);
    }

    /**
     * Whether or not public network access is allowed for this Redis Cache. `true` means this resource could be accessed by both public and private endpoint. `false` means only private endpoint access is allowed. Defaults to `true`.
     * 
     */
    @Import(name="publicNetworkAccessEnabled")
    private @Nullable Output<Boolean> publicNetworkAccessEnabled;

    /**
     * @return Whether or not public network access is allowed for this Redis Cache. `true` means this resource could be accessed by both public and private endpoint. `false` means only private endpoint access is allowed. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> publicNetworkAccessEnabled() {
        return Optional.ofNullable(this.publicNetworkAccessEnabled);
    }

    /**
     * A `redis_configuration` block as defined below - with some limitations by SKU - defaults/details are shown below.
     * 
     */
    @Import(name="redisConfiguration")
    private @Nullable Output<CacheRedisConfigurationArgs> redisConfiguration;

    /**
     * @return A `redis_configuration` block as defined below - with some limitations by SKU - defaults/details are shown below.
     * 
     */
    public Optional<Output<CacheRedisConfigurationArgs>> redisConfiguration() {
        return Optional.ofNullable(this.redisConfiguration);
    }

    /**
     * Redis version. Only major version needed. Valid values: `4`, `6`.
     * 
     */
    @Import(name="redisVersion")
    private @Nullable Output<String> redisVersion;

    /**
     * @return Redis version. Only major version needed. Valid values: `4`, `6`.
     * 
     */
    public Optional<Output<String>> redisVersion() {
        return Optional.ofNullable(this.redisVersion);
    }

    /**
     * Amount of replicas to create per master for this Redis Cache.
     * 
     * &gt; **Note:** Configuring the number of replicas per master is only available when using the Premium SKU and cannot be used in conjunction with shards.
     * 
     */
    @Import(name="replicasPerMaster")
    private @Nullable Output<Integer> replicasPerMaster;

    /**
     * @return Amount of replicas to create per master for this Redis Cache.
     * 
     * &gt; **Note:** Configuring the number of replicas per master is only available when using the Premium SKU and cannot be used in conjunction with shards.
     * 
     */
    public Optional<Output<Integer>> replicasPerMaster() {
        return Optional.ofNullable(this.replicasPerMaster);
    }

    /**
     * Amount of replicas to create per primary for this Redis Cache. If both `replicas_per_primary` and `replicas_per_master` are set, they need to be equal.
     * 
     */
    @Import(name="replicasPerPrimary")
    private @Nullable Output<Integer> replicasPerPrimary;

    /**
     * @return Amount of replicas to create per primary for this Redis Cache. If both `replicas_per_primary` and `replicas_per_master` are set, they need to be equal.
     * 
     */
    public Optional<Output<Integer>> replicasPerPrimary() {
        return Optional.ofNullable(this.replicasPerPrimary);
    }

    /**
     * The name of the resource group in which to create the Redis instance. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group in which to create the Redis instance. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * *Only available when using the Premium SKU* The number of Shards to create on the Redis Cluster.
     * 
     */
    @Import(name="shardCount")
    private @Nullable Output<Integer> shardCount;

    /**
     * @return *Only available when using the Premium SKU* The number of Shards to create on the Redis Cluster.
     * 
     */
    public Optional<Output<Integer>> shardCount() {
        return Optional.ofNullable(this.shardCount);
    }

    /**
     * The SKU of Redis to use. Possible values are `Basic`, `Standard` and `Premium`.
     * 
     * &gt; **Note** Downgrading the SKU will force a new resource to be created.
     * 
     */
    @Import(name="skuName", required=true)
    private Output<String> skuName;

    /**
     * @return The SKU of Redis to use. Possible values are `Basic`, `Standard` and `Premium`.
     * 
     * &gt; **Note** Downgrading the SKU will force a new resource to be created.
     * 
     */
    public Output<String> skuName() {
        return this.skuName;
    }

    /**
     * *Only available when using the Premium SKU* The ID of the Subnet within which the Redis Cache should be deployed. This Subnet must only contain Azure Cache for Redis instances without any other type of resources. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="subnetId")
    private @Nullable Output<String> subnetId;

    /**
     * @return *Only available when using the Premium SKU* The ID of the Subnet within which the Redis Cache should be deployed. This Subnet must only contain Azure Cache for Redis instances without any other type of resources. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> subnetId() {
        return Optional.ofNullable(this.subnetId);
    }

    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A mapping of tenant settings to assign to the resource.
     * 
     */
    @Import(name="tenantSettings")
    private @Nullable Output<Map<String,String>> tenantSettings;

    /**
     * @return A mapping of tenant settings to assign to the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> tenantSettings() {
        return Optional.ofNullable(this.tenantSettings);
    }

    /**
     * Specifies a list of Availability Zones in which this Redis Cache should be located. Changing this forces a new Redis Cache to be created.
     * 
     * &gt; **Please Note**: Availability Zones are [in Preview and only supported in several regions at this time](https://docs.microsoft.com/azure/availability-zones/az-overview) - as such you must be opted into the Preview to use this functionality. You can [opt into the Availability Zones Preview in the Azure Portal](https://aka.ms/azenroll).
     * 
     */
    @Import(name="zones")
    private @Nullable Output<List<String>> zones;

    /**
     * @return Specifies a list of Availability Zones in which this Redis Cache should be located. Changing this forces a new Redis Cache to be created.
     * 
     * &gt; **Please Note**: Availability Zones are [in Preview and only supported in several regions at this time](https://docs.microsoft.com/azure/availability-zones/az-overview) - as such you must be opted into the Preview to use this functionality. You can [opt into the Availability Zones Preview in the Azure Portal](https://aka.ms/azenroll).
     * 
     */
    public Optional<Output<List<String>>> zones() {
        return Optional.ofNullable(this.zones);
    }

    private CacheArgs() {}

    private CacheArgs(CacheArgs $) {
        this.capacity = $.capacity;
        this.enableNonSslPort = $.enableNonSslPort;
        this.family = $.family;
        this.identity = $.identity;
        this.location = $.location;
        this.minimumTlsVersion = $.minimumTlsVersion;
        this.name = $.name;
        this.patchSchedules = $.patchSchedules;
        this.privateStaticIpAddress = $.privateStaticIpAddress;
        this.publicNetworkAccessEnabled = $.publicNetworkAccessEnabled;
        this.redisConfiguration = $.redisConfiguration;
        this.redisVersion = $.redisVersion;
        this.replicasPerMaster = $.replicasPerMaster;
        this.replicasPerPrimary = $.replicasPerPrimary;
        this.resourceGroupName = $.resourceGroupName;
        this.shardCount = $.shardCount;
        this.skuName = $.skuName;
        this.subnetId = $.subnetId;
        this.tags = $.tags;
        this.tenantSettings = $.tenantSettings;
        this.zones = $.zones;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CacheArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CacheArgs $;

        public Builder() {
            $ = new CacheArgs();
        }

        public Builder(CacheArgs defaults) {
            $ = new CacheArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param capacity The size of the Redis cache to deploy. Valid values for a SKU `family` of C (Basic/Standard) are `0, 1, 2, 3, 4, 5, 6`, and for P (Premium) `family` are `1, 2, 3, 4, 5`.
         * 
         * @return builder
         * 
         */
        public Builder capacity(Output<Integer> capacity) {
            $.capacity = capacity;
            return this;
        }

        /**
         * @param capacity The size of the Redis cache to deploy. Valid values for a SKU `family` of C (Basic/Standard) are `0, 1, 2, 3, 4, 5, 6`, and for P (Premium) `family` are `1, 2, 3, 4, 5`.
         * 
         * @return builder
         * 
         */
        public Builder capacity(Integer capacity) {
            return capacity(Output.of(capacity));
        }

        /**
         * @param enableNonSslPort Enable the non-SSL port (6379) - disabled by default.
         * 
         * @return builder
         * 
         */
        public Builder enableNonSslPort(@Nullable Output<Boolean> enableNonSslPort) {
            $.enableNonSslPort = enableNonSslPort;
            return this;
        }

        /**
         * @param enableNonSslPort Enable the non-SSL port (6379) - disabled by default.
         * 
         * @return builder
         * 
         */
        public Builder enableNonSslPort(Boolean enableNonSslPort) {
            return enableNonSslPort(Output.of(enableNonSslPort));
        }

        /**
         * @param family The SKU family/pricing group to use. Valid values are `C` (for Basic/Standard SKU family) and `P` (for `Premium`)
         * 
         * @return builder
         * 
         */
        public Builder family(Output<String> family) {
            $.family = family;
            return this;
        }

        /**
         * @param family The SKU family/pricing group to use. Valid values are `C` (for Basic/Standard SKU family) and `P` (for `Premium`)
         * 
         * @return builder
         * 
         */
        public Builder family(String family) {
            return family(Output.of(family));
        }

        /**
         * @param identity An `identity` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder identity(@Nullable Output<CacheIdentityArgs> identity) {
            $.identity = identity;
            return this;
        }

        /**
         * @param identity An `identity` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder identity(CacheIdentityArgs identity) {
            return identity(Output.of(identity));
        }

        /**
         * @param location The location of the resource group. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location of the resource group. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param minimumTlsVersion The minimum TLS version. Possible values are `1.0`, `1.1` and `1.2`. Defaults to `1.0`.
         * 
         * @return builder
         * 
         */
        public Builder minimumTlsVersion(@Nullable Output<String> minimumTlsVersion) {
            $.minimumTlsVersion = minimumTlsVersion;
            return this;
        }

        /**
         * @param minimumTlsVersion The minimum TLS version. Possible values are `1.0`, `1.1` and `1.2`. Defaults to `1.0`.
         * 
         * @return builder
         * 
         */
        public Builder minimumTlsVersion(String minimumTlsVersion) {
            return minimumTlsVersion(Output.of(minimumTlsVersion));
        }

        /**
         * @param name The name of the Redis instance. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Redis instance. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param patchSchedules A list of `patch_schedule` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder patchSchedules(@Nullable Output<List<CachePatchScheduleArgs>> patchSchedules) {
            $.patchSchedules = patchSchedules;
            return this;
        }

        /**
         * @param patchSchedules A list of `patch_schedule` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder patchSchedules(List<CachePatchScheduleArgs> patchSchedules) {
            return patchSchedules(Output.of(patchSchedules));
        }

        /**
         * @param patchSchedules A list of `patch_schedule` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder patchSchedules(CachePatchScheduleArgs... patchSchedules) {
            return patchSchedules(List.of(patchSchedules));
        }

        /**
         * @param privateStaticIpAddress The Static IP Address to assign to the Redis Cache when hosted inside the Virtual Network. This argument implies the use of `subnet_id`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder privateStaticIpAddress(@Nullable Output<String> privateStaticIpAddress) {
            $.privateStaticIpAddress = privateStaticIpAddress;
            return this;
        }

        /**
         * @param privateStaticIpAddress The Static IP Address to assign to the Redis Cache when hosted inside the Virtual Network. This argument implies the use of `subnet_id`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder privateStaticIpAddress(String privateStaticIpAddress) {
            return privateStaticIpAddress(Output.of(privateStaticIpAddress));
        }

        /**
         * @param publicNetworkAccessEnabled Whether or not public network access is allowed for this Redis Cache. `true` means this resource could be accessed by both public and private endpoint. `false` means only private endpoint access is allowed. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder publicNetworkAccessEnabled(@Nullable Output<Boolean> publicNetworkAccessEnabled) {
            $.publicNetworkAccessEnabled = publicNetworkAccessEnabled;
            return this;
        }

        /**
         * @param publicNetworkAccessEnabled Whether or not public network access is allowed for this Redis Cache. `true` means this resource could be accessed by both public and private endpoint. `false` means only private endpoint access is allowed. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder publicNetworkAccessEnabled(Boolean publicNetworkAccessEnabled) {
            return publicNetworkAccessEnabled(Output.of(publicNetworkAccessEnabled));
        }

        /**
         * @param redisConfiguration A `redis_configuration` block as defined below - with some limitations by SKU - defaults/details are shown below.
         * 
         * @return builder
         * 
         */
        public Builder redisConfiguration(@Nullable Output<CacheRedisConfigurationArgs> redisConfiguration) {
            $.redisConfiguration = redisConfiguration;
            return this;
        }

        /**
         * @param redisConfiguration A `redis_configuration` block as defined below - with some limitations by SKU - defaults/details are shown below.
         * 
         * @return builder
         * 
         */
        public Builder redisConfiguration(CacheRedisConfigurationArgs redisConfiguration) {
            return redisConfiguration(Output.of(redisConfiguration));
        }

        /**
         * @param redisVersion Redis version. Only major version needed. Valid values: `4`, `6`.
         * 
         * @return builder
         * 
         */
        public Builder redisVersion(@Nullable Output<String> redisVersion) {
            $.redisVersion = redisVersion;
            return this;
        }

        /**
         * @param redisVersion Redis version. Only major version needed. Valid values: `4`, `6`.
         * 
         * @return builder
         * 
         */
        public Builder redisVersion(String redisVersion) {
            return redisVersion(Output.of(redisVersion));
        }

        /**
         * @param replicasPerMaster Amount of replicas to create per master for this Redis Cache.
         * 
         * &gt; **Note:** Configuring the number of replicas per master is only available when using the Premium SKU and cannot be used in conjunction with shards.
         * 
         * @return builder
         * 
         */
        public Builder replicasPerMaster(@Nullable Output<Integer> replicasPerMaster) {
            $.replicasPerMaster = replicasPerMaster;
            return this;
        }

        /**
         * @param replicasPerMaster Amount of replicas to create per master for this Redis Cache.
         * 
         * &gt; **Note:** Configuring the number of replicas per master is only available when using the Premium SKU and cannot be used in conjunction with shards.
         * 
         * @return builder
         * 
         */
        public Builder replicasPerMaster(Integer replicasPerMaster) {
            return replicasPerMaster(Output.of(replicasPerMaster));
        }

        /**
         * @param replicasPerPrimary Amount of replicas to create per primary for this Redis Cache. If both `replicas_per_primary` and `replicas_per_master` are set, they need to be equal.
         * 
         * @return builder
         * 
         */
        public Builder replicasPerPrimary(@Nullable Output<Integer> replicasPerPrimary) {
            $.replicasPerPrimary = replicasPerPrimary;
            return this;
        }

        /**
         * @param replicasPerPrimary Amount of replicas to create per primary for this Redis Cache. If both `replicas_per_primary` and `replicas_per_master` are set, they need to be equal.
         * 
         * @return builder
         * 
         */
        public Builder replicasPerPrimary(Integer replicasPerPrimary) {
            return replicasPerPrimary(Output.of(replicasPerPrimary));
        }

        /**
         * @param resourceGroupName The name of the resource group in which to create the Redis instance. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group in which to create the Redis instance. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param shardCount *Only available when using the Premium SKU* The number of Shards to create on the Redis Cluster.
         * 
         * @return builder
         * 
         */
        public Builder shardCount(@Nullable Output<Integer> shardCount) {
            $.shardCount = shardCount;
            return this;
        }

        /**
         * @param shardCount *Only available when using the Premium SKU* The number of Shards to create on the Redis Cluster.
         * 
         * @return builder
         * 
         */
        public Builder shardCount(Integer shardCount) {
            return shardCount(Output.of(shardCount));
        }

        /**
         * @param skuName The SKU of Redis to use. Possible values are `Basic`, `Standard` and `Premium`.
         * 
         * &gt; **Note** Downgrading the SKU will force a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder skuName(Output<String> skuName) {
            $.skuName = skuName;
            return this;
        }

        /**
         * @param skuName The SKU of Redis to use. Possible values are `Basic`, `Standard` and `Premium`.
         * 
         * &gt; **Note** Downgrading the SKU will force a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder skuName(String skuName) {
            return skuName(Output.of(skuName));
        }

        /**
         * @param subnetId *Only available when using the Premium SKU* The ID of the Subnet within which the Redis Cache should be deployed. This Subnet must only contain Azure Cache for Redis instances without any other type of resources. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(@Nullable Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        /**
         * @param subnetId *Only available when using the Premium SKU* The ID of the Subnet within which the Redis Cache should be deployed. This Subnet must only contain Azure Cache for Redis instances without any other type of resources. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tenantSettings A mapping of tenant settings to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tenantSettings(@Nullable Output<Map<String,String>> tenantSettings) {
            $.tenantSettings = tenantSettings;
            return this;
        }

        /**
         * @param tenantSettings A mapping of tenant settings to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tenantSettings(Map<String,String> tenantSettings) {
            return tenantSettings(Output.of(tenantSettings));
        }

        /**
         * @param zones Specifies a list of Availability Zones in which this Redis Cache should be located. Changing this forces a new Redis Cache to be created.
         * 
         * &gt; **Please Note**: Availability Zones are [in Preview and only supported in several regions at this time](https://docs.microsoft.com/azure/availability-zones/az-overview) - as such you must be opted into the Preview to use this functionality. You can [opt into the Availability Zones Preview in the Azure Portal](https://aka.ms/azenroll).
         * 
         * @return builder
         * 
         */
        public Builder zones(@Nullable Output<List<String>> zones) {
            $.zones = zones;
            return this;
        }

        /**
         * @param zones Specifies a list of Availability Zones in which this Redis Cache should be located. Changing this forces a new Redis Cache to be created.
         * 
         * &gt; **Please Note**: Availability Zones are [in Preview and only supported in several regions at this time](https://docs.microsoft.com/azure/availability-zones/az-overview) - as such you must be opted into the Preview to use this functionality. You can [opt into the Availability Zones Preview in the Azure Portal](https://aka.ms/azenroll).
         * 
         * @return builder
         * 
         */
        public Builder zones(List<String> zones) {
            return zones(Output.of(zones));
        }

        /**
         * @param zones Specifies a list of Availability Zones in which this Redis Cache should be located. Changing this forces a new Redis Cache to be created.
         * 
         * &gt; **Please Note**: Availability Zones are [in Preview and only supported in several regions at this time](https://docs.microsoft.com/azure/availability-zones/az-overview) - as such you must be opted into the Preview to use this functionality. You can [opt into the Availability Zones Preview in the Azure Portal](https://aka.ms/azenroll).
         * 
         * @return builder
         * 
         */
        public Builder zones(String... zones) {
            return zones(List.of(zones));
        }

        public CacheArgs build() {
            if ($.capacity == null) {
                throw new MissingRequiredPropertyException("CacheArgs", "capacity");
            }
            if ($.family == null) {
                throw new MissingRequiredPropertyException("CacheArgs", "family");
            }
            if ($.resourceGroupName == null) {
                throw new MissingRequiredPropertyException("CacheArgs", "resourceGroupName");
            }
            if ($.skuName == null) {
                throw new MissingRequiredPropertyException("CacheArgs", "skuName");
            }
            return $;
        }
    }

}
