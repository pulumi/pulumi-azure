// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.chaosstudio;

import com.pulumi.azure.chaosstudio.inputs.ExperimentIdentityArgs;
import com.pulumi.azure.chaosstudio.inputs.ExperimentSelectorArgs;
import com.pulumi.azure.chaosstudio.inputs.ExperimentStepArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ExperimentArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExperimentArgs Empty = new ExperimentArgs();

    /**
     * A `identity` block as defined below.
     * 
     */
    @Import(name="identity")
    private @Nullable Output<ExperimentIdentityArgs> identity;

    /**
     * @return A `identity` block as defined below.
     * 
     */
    public Optional<Output<ExperimentIdentityArgs>> identity() {
        return Optional.ofNullable(this.identity);
    }

    /**
     * The Azure Region where the Chaos Studio Experiment should exist. Changing this forces a new Chaos Studio Experiment to be created.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The Azure Region where the Chaos Studio Experiment should exist. Changing this forces a new Chaos Studio Experiment to be created.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name which should be used for this Chaos Studio Experiment. Changing this forces a new Chaos Studio Experiment to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name which should be used for this Chaos Studio Experiment. Changing this forces a new Chaos Studio Experiment to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The name of the Resource Group where the Chaos Studio Experiment should exist. Changing this forces a new Chaos Studio Experiment to be created.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the Resource Group where the Chaos Studio Experiment should exist. Changing this forces a new Chaos Studio Experiment to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * One or more `selectors` blocks as defined below.
     * 
     */
    @Import(name="selectors", required=true)
    private Output<List<ExperimentSelectorArgs>> selectors;

    /**
     * @return One or more `selectors` blocks as defined below.
     * 
     */
    public Output<List<ExperimentSelectorArgs>> selectors() {
        return this.selectors;
    }

    /**
     * One or more `steps` blocks as defined below.
     * 
     */
    @Import(name="steps", required=true)
    private Output<List<ExperimentStepArgs>> steps;

    /**
     * @return One or more `steps` blocks as defined below.
     * 
     */
    public Output<List<ExperimentStepArgs>> steps() {
        return this.steps;
    }

    private ExperimentArgs() {}

    private ExperimentArgs(ExperimentArgs $) {
        this.identity = $.identity;
        this.location = $.location;
        this.name = $.name;
        this.resourceGroupName = $.resourceGroupName;
        this.selectors = $.selectors;
        this.steps = $.steps;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExperimentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExperimentArgs $;

        public Builder() {
            $ = new ExperimentArgs();
        }

        public Builder(ExperimentArgs defaults) {
            $ = new ExperimentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param identity A `identity` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder identity(@Nullable Output<ExperimentIdentityArgs> identity) {
            $.identity = identity;
            return this;
        }

        /**
         * @param identity A `identity` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder identity(ExperimentIdentityArgs identity) {
            return identity(Output.of(identity));
        }

        /**
         * @param location The Azure Region where the Chaos Studio Experiment should exist. Changing this forces a new Chaos Studio Experiment to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The Azure Region where the Chaos Studio Experiment should exist. Changing this forces a new Chaos Studio Experiment to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The name which should be used for this Chaos Studio Experiment. Changing this forces a new Chaos Studio Experiment to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this Chaos Studio Experiment. Changing this forces a new Chaos Studio Experiment to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param resourceGroupName The name of the Resource Group where the Chaos Studio Experiment should exist. Changing this forces a new Chaos Studio Experiment to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the Resource Group where the Chaos Studio Experiment should exist. Changing this forces a new Chaos Studio Experiment to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param selectors One or more `selectors` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder selectors(Output<List<ExperimentSelectorArgs>> selectors) {
            $.selectors = selectors;
            return this;
        }

        /**
         * @param selectors One or more `selectors` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder selectors(List<ExperimentSelectorArgs> selectors) {
            return selectors(Output.of(selectors));
        }

        /**
         * @param selectors One or more `selectors` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder selectors(ExperimentSelectorArgs... selectors) {
            return selectors(List.of(selectors));
        }

        /**
         * @param steps One or more `steps` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder steps(Output<List<ExperimentStepArgs>> steps) {
            $.steps = steps;
            return this;
        }

        /**
         * @param steps One or more `steps` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder steps(List<ExperimentStepArgs> steps) {
            return steps(Output.of(steps));
        }

        /**
         * @param steps One or more `steps` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder steps(ExperimentStepArgs... steps) {
            return steps(List.of(steps));
        }

        public ExperimentArgs build() {
            if ($.resourceGroupName == null) {
                throw new MissingRequiredPropertyException("ExperimentArgs", "resourceGroupName");
            }
            if ($.selectors == null) {
                throw new MissingRequiredPropertyException("ExperimentArgs", "selectors");
            }
            if ($.steps == null) {
                throw new MissingRequiredPropertyException("ExperimentArgs", "steps");
            }
            return $;
        }
    }

}
