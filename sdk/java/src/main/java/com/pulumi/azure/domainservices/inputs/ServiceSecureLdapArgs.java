// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.domainservices.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceSecureLdapArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceSecureLdapArgs Empty = new ServiceSecureLdapArgs();

    /**
     * The expiry time of the certificate.
     * 
     */
    @Import(name="certificateExpiry")
    private @Nullable Output<String> certificateExpiry;

    /**
     * @return The expiry time of the certificate.
     * 
     */
    public Optional<Output<String>> certificateExpiry() {
        return Optional.ofNullable(this.certificateExpiry);
    }

    /**
     * The thumbprint of the certificate.
     * 
     */
    @Import(name="certificateThumbprint")
    private @Nullable Output<String> certificateThumbprint;

    /**
     * @return The thumbprint of the certificate.
     * 
     */
    public Optional<Output<String>> certificateThumbprint() {
        return Optional.ofNullable(this.certificateThumbprint);
    }

    /**
     * Whether to enable secure LDAP for the managed domain. For more information, please see [official documentation on enabling LDAPS](https://docs.microsoft.com/azure/active-directory-domain-services/tutorial-configure-ldaps), paying particular attention to the section on network security to avoid unnecessarily exposing your service to Internet-borne bruteforce attacks.
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return Whether to enable secure LDAP for the managed domain. For more information, please see [official documentation on enabling LDAPS](https://docs.microsoft.com/azure/active-directory-domain-services/tutorial-configure-ldaps), paying particular attention to the section on network security to avoid unnecessarily exposing your service to Internet-borne bruteforce attacks.
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * Whether to enable external access to LDAPS over the Internet. Defaults to `false`.
     * 
     */
    @Import(name="externalAccessEnabled")
    private @Nullable Output<Boolean> externalAccessEnabled;

    /**
     * @return Whether to enable external access to LDAPS over the Internet. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> externalAccessEnabled() {
        return Optional.ofNullable(this.externalAccessEnabled);
    }

    /**
     * The certificate/private key to use for LDAPS, as a base64-encoded TripleDES-SHA1 encrypted PKCS#12 bundle (PFX file).
     * 
     */
    @Import(name="pfxCertificate", required=true)
    private Output<String> pfxCertificate;

    /**
     * @return The certificate/private key to use for LDAPS, as a base64-encoded TripleDES-SHA1 encrypted PKCS#12 bundle (PFX file).
     * 
     */
    public Output<String> pfxCertificate() {
        return this.pfxCertificate;
    }

    /**
     * The password to use for decrypting the PKCS#12 bundle (PFX file).
     * 
     */
    @Import(name="pfxCertificatePassword", required=true)
    private Output<String> pfxCertificatePassword;

    /**
     * @return The password to use for decrypting the PKCS#12 bundle (PFX file).
     * 
     */
    public Output<String> pfxCertificatePassword() {
        return this.pfxCertificatePassword;
    }

    /**
     * The public certificate.
     * 
     */
    @Import(name="publicCertificate")
    private @Nullable Output<String> publicCertificate;

    /**
     * @return The public certificate.
     * 
     */
    public Optional<Output<String>> publicCertificate() {
        return Optional.ofNullable(this.publicCertificate);
    }

    private ServiceSecureLdapArgs() {}

    private ServiceSecureLdapArgs(ServiceSecureLdapArgs $) {
        this.certificateExpiry = $.certificateExpiry;
        this.certificateThumbprint = $.certificateThumbprint;
        this.enabled = $.enabled;
        this.externalAccessEnabled = $.externalAccessEnabled;
        this.pfxCertificate = $.pfxCertificate;
        this.pfxCertificatePassword = $.pfxCertificatePassword;
        this.publicCertificate = $.publicCertificate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceSecureLdapArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceSecureLdapArgs $;

        public Builder() {
            $ = new ServiceSecureLdapArgs();
        }

        public Builder(ServiceSecureLdapArgs defaults) {
            $ = new ServiceSecureLdapArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateExpiry The expiry time of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificateExpiry(@Nullable Output<String> certificateExpiry) {
            $.certificateExpiry = certificateExpiry;
            return this;
        }

        /**
         * @param certificateExpiry The expiry time of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificateExpiry(String certificateExpiry) {
            return certificateExpiry(Output.of(certificateExpiry));
        }

        /**
         * @param certificateThumbprint The thumbprint of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificateThumbprint(@Nullable Output<String> certificateThumbprint) {
            $.certificateThumbprint = certificateThumbprint;
            return this;
        }

        /**
         * @param certificateThumbprint The thumbprint of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificateThumbprint(String certificateThumbprint) {
            return certificateThumbprint(Output.of(certificateThumbprint));
        }

        /**
         * @param enabled Whether to enable secure LDAP for the managed domain. For more information, please see [official documentation on enabling LDAPS](https://docs.microsoft.com/azure/active-directory-domain-services/tutorial-configure-ldaps), paying particular attention to the section on network security to avoid unnecessarily exposing your service to Internet-borne bruteforce attacks.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether to enable secure LDAP for the managed domain. For more information, please see [official documentation on enabling LDAPS](https://docs.microsoft.com/azure/active-directory-domain-services/tutorial-configure-ldaps), paying particular attention to the section on network security to avoid unnecessarily exposing your service to Internet-borne bruteforce attacks.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param externalAccessEnabled Whether to enable external access to LDAPS over the Internet. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder externalAccessEnabled(@Nullable Output<Boolean> externalAccessEnabled) {
            $.externalAccessEnabled = externalAccessEnabled;
            return this;
        }

        /**
         * @param externalAccessEnabled Whether to enable external access to LDAPS over the Internet. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder externalAccessEnabled(Boolean externalAccessEnabled) {
            return externalAccessEnabled(Output.of(externalAccessEnabled));
        }

        /**
         * @param pfxCertificate The certificate/private key to use for LDAPS, as a base64-encoded TripleDES-SHA1 encrypted PKCS#12 bundle (PFX file).
         * 
         * @return builder
         * 
         */
        public Builder pfxCertificate(Output<String> pfxCertificate) {
            $.pfxCertificate = pfxCertificate;
            return this;
        }

        /**
         * @param pfxCertificate The certificate/private key to use for LDAPS, as a base64-encoded TripleDES-SHA1 encrypted PKCS#12 bundle (PFX file).
         * 
         * @return builder
         * 
         */
        public Builder pfxCertificate(String pfxCertificate) {
            return pfxCertificate(Output.of(pfxCertificate));
        }

        /**
         * @param pfxCertificatePassword The password to use for decrypting the PKCS#12 bundle (PFX file).
         * 
         * @return builder
         * 
         */
        public Builder pfxCertificatePassword(Output<String> pfxCertificatePassword) {
            $.pfxCertificatePassword = pfxCertificatePassword;
            return this;
        }

        /**
         * @param pfxCertificatePassword The password to use for decrypting the PKCS#12 bundle (PFX file).
         * 
         * @return builder
         * 
         */
        public Builder pfxCertificatePassword(String pfxCertificatePassword) {
            return pfxCertificatePassword(Output.of(pfxCertificatePassword));
        }

        /**
         * @param publicCertificate The public certificate.
         * 
         * @return builder
         * 
         */
        public Builder publicCertificate(@Nullable Output<String> publicCertificate) {
            $.publicCertificate = publicCertificate;
            return this;
        }

        /**
         * @param publicCertificate The public certificate.
         * 
         * @return builder
         * 
         */
        public Builder publicCertificate(String publicCertificate) {
            return publicCertificate(Output.of(publicCertificate));
        }

        public ServiceSecureLdapArgs build() {
            if ($.enabled == null) {
                throw new MissingRequiredPropertyException("ServiceSecureLdapArgs", "enabled");
            }
            if ($.pfxCertificate == null) {
                throw new MissingRequiredPropertyException("ServiceSecureLdapArgs", "pfxCertificate");
            }
            if ($.pfxCertificatePassword == null) {
                throw new MissingRequiredPropertyException("ServiceSecureLdapArgs", "pfxCertificatePassword");
            }
            return $;
        }
    }

}
