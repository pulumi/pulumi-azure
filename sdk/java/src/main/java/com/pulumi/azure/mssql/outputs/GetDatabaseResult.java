// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.mssql.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetDatabaseResult {
    /**
     * @return The collation of the database.
     * 
     */
    private String collation;
    /**
     * @return The id of the elastic pool containing this database.
     * 
     */
    private String elasticPoolId;
    /**
     * @return The type of enclave being used by the database.
     * 
     */
    private String enclaveType;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The license type to apply for this database.
     * 
     */
    private String licenseType;
    /**
     * @return The max size of the database in gigabytes.
     * 
     */
    private Integer maxSizeGb;
    private String name;
    /**
     * @return The number of readonly secondary replicas associated with the database to which readonly application intent connections may be routed.
     * 
     */
    private Integer readReplicaCount;
    /**
     * @return If enabled, connections that have application intent set to readonly in their connection string may be routed to a readonly secondary replica.
     * 
     */
    private Boolean readScale;
    private String serverId;
    /**
     * @return The name of the SKU of the database.
     * 
     */
    private String skuName;
    /**
     * @return The storage account type used to store backups for this database.
     * 
     */
    private String storageAccountType;
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return Whether or not this database is zone redundant, which means the replicas of this database will be spread across multiple availability zones.
     * 
     */
    private Boolean zoneRedundant;

    private GetDatabaseResult() {}
    /**
     * @return The collation of the database.
     * 
     */
    public String collation() {
        return this.collation;
    }
    /**
     * @return The id of the elastic pool containing this database.
     * 
     */
    public String elasticPoolId() {
        return this.elasticPoolId;
    }
    /**
     * @return The type of enclave being used by the database.
     * 
     */
    public String enclaveType() {
        return this.enclaveType;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The license type to apply for this database.
     * 
     */
    public String licenseType() {
        return this.licenseType;
    }
    /**
     * @return The max size of the database in gigabytes.
     * 
     */
    public Integer maxSizeGb() {
        return this.maxSizeGb;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return The number of readonly secondary replicas associated with the database to which readonly application intent connections may be routed.
     * 
     */
    public Integer readReplicaCount() {
        return this.readReplicaCount;
    }
    /**
     * @return If enabled, connections that have application intent set to readonly in their connection string may be routed to a readonly secondary replica.
     * 
     */
    public Boolean readScale() {
        return this.readScale;
    }
    public String serverId() {
        return this.serverId;
    }
    /**
     * @return The name of the SKU of the database.
     * 
     */
    public String skuName() {
        return this.skuName;
    }
    /**
     * @return The storage account type used to store backups for this database.
     * 
     */
    public String storageAccountType() {
        return this.storageAccountType;
    }
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return Whether or not this database is zone redundant, which means the replicas of this database will be spread across multiple availability zones.
     * 
     */
    public Boolean zoneRedundant() {
        return this.zoneRedundant;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabaseResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String collation;
        private String elasticPoolId;
        private String enclaveType;
        private String id;
        private String licenseType;
        private Integer maxSizeGb;
        private String name;
        private Integer readReplicaCount;
        private Boolean readScale;
        private String serverId;
        private String skuName;
        private String storageAccountType;
        private Map<String,String> tags;
        private Boolean zoneRedundant;
        public Builder() {}
        public Builder(GetDatabaseResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.collation = defaults.collation;
    	      this.elasticPoolId = defaults.elasticPoolId;
    	      this.enclaveType = defaults.enclaveType;
    	      this.id = defaults.id;
    	      this.licenseType = defaults.licenseType;
    	      this.maxSizeGb = defaults.maxSizeGb;
    	      this.name = defaults.name;
    	      this.readReplicaCount = defaults.readReplicaCount;
    	      this.readScale = defaults.readScale;
    	      this.serverId = defaults.serverId;
    	      this.skuName = defaults.skuName;
    	      this.storageAccountType = defaults.storageAccountType;
    	      this.tags = defaults.tags;
    	      this.zoneRedundant = defaults.zoneRedundant;
        }

        @CustomType.Setter
        public Builder collation(String collation) {
            this.collation = Objects.requireNonNull(collation);
            return this;
        }
        @CustomType.Setter
        public Builder elasticPoolId(String elasticPoolId) {
            this.elasticPoolId = Objects.requireNonNull(elasticPoolId);
            return this;
        }
        @CustomType.Setter
        public Builder enclaveType(String enclaveType) {
            this.enclaveType = Objects.requireNonNull(enclaveType);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder licenseType(String licenseType) {
            this.licenseType = Objects.requireNonNull(licenseType);
            return this;
        }
        @CustomType.Setter
        public Builder maxSizeGb(Integer maxSizeGb) {
            this.maxSizeGb = Objects.requireNonNull(maxSizeGb);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder readReplicaCount(Integer readReplicaCount) {
            this.readReplicaCount = Objects.requireNonNull(readReplicaCount);
            return this;
        }
        @CustomType.Setter
        public Builder readScale(Boolean readScale) {
            this.readScale = Objects.requireNonNull(readScale);
            return this;
        }
        @CustomType.Setter
        public Builder serverId(String serverId) {
            this.serverId = Objects.requireNonNull(serverId);
            return this;
        }
        @CustomType.Setter
        public Builder skuName(String skuName) {
            this.skuName = Objects.requireNonNull(skuName);
            return this;
        }
        @CustomType.Setter
        public Builder storageAccountType(String storageAccountType) {
            this.storageAccountType = Objects.requireNonNull(storageAccountType);
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        @CustomType.Setter
        public Builder zoneRedundant(Boolean zoneRedundant) {
            this.zoneRedundant = Objects.requireNonNull(zoneRedundant);
            return this;
        }
        public GetDatabaseResult build() {
            final var _resultValue = new GetDatabaseResult();
            _resultValue.collation = collation;
            _resultValue.elasticPoolId = elasticPoolId;
            _resultValue.enclaveType = enclaveType;
            _resultValue.id = id;
            _resultValue.licenseType = licenseType;
            _resultValue.maxSizeGb = maxSizeGb;
            _resultValue.name = name;
            _resultValue.readReplicaCount = readReplicaCount;
            _resultValue.readScale = readScale;
            _resultValue.serverId = serverId;
            _resultValue.skuName = skuName;
            _resultValue.storageAccountType = storageAccountType;
            _resultValue.tags = tags;
            _resultValue.zoneRedundant = zoneRedundant;
            return _resultValue;
        }
    }
}
