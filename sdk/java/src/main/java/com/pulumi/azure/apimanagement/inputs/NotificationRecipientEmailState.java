// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.apimanagement.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NotificationRecipientEmailState extends com.pulumi.resources.ResourceArgs {

    public static final NotificationRecipientEmailState Empty = new NotificationRecipientEmailState();

    /**
     * The ID of the API Management Service from which to create this Notification Recipient Email. Changing this forces a new API Management Notification Recipient Email to be created.
     * 
     */
    @Import(name="apiManagementId")
    private @Nullable Output<String> apiManagementId;

    /**
     * @return The ID of the API Management Service from which to create this Notification Recipient Email. Changing this forces a new API Management Notification Recipient Email to be created.
     * 
     */
    public Optional<Output<String>> apiManagementId() {
        return Optional.ofNullable(this.apiManagementId);
    }

    /**
     * The recipient email address. Changing this forces a new API Management Notification Recipient Email to be created.
     * 
     */
    @Import(name="email")
    private @Nullable Output<String> email;

    /**
     * @return The recipient email address. Changing this forces a new API Management Notification Recipient Email to be created.
     * 
     */
    public Optional<Output<String>> email() {
        return Optional.ofNullable(this.email);
    }

    /**
     * The Notification Name to be received. Changing this forces a new API Management Notification Recipient Email to be created. Possible values are `AccountClosedPublisher`, `BCC`, `NewApplicationNotificationMessage`, `NewIssuePublisherNotificationMessage`, `PurchasePublisherNotificationMessage`, `QuotaLimitApproachingPublisherNotificationMessage`, and `RequestPublisherNotificationMessage`.
     * 
     */
    @Import(name="notificationType")
    private @Nullable Output<String> notificationType;

    /**
     * @return The Notification Name to be received. Changing this forces a new API Management Notification Recipient Email to be created. Possible values are `AccountClosedPublisher`, `BCC`, `NewApplicationNotificationMessage`, `NewIssuePublisherNotificationMessage`, `PurchasePublisherNotificationMessage`, `QuotaLimitApproachingPublisherNotificationMessage`, and `RequestPublisherNotificationMessage`.
     * 
     */
    public Optional<Output<String>> notificationType() {
        return Optional.ofNullable(this.notificationType);
    }

    private NotificationRecipientEmailState() {}

    private NotificationRecipientEmailState(NotificationRecipientEmailState $) {
        this.apiManagementId = $.apiManagementId;
        this.email = $.email;
        this.notificationType = $.notificationType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NotificationRecipientEmailState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NotificationRecipientEmailState $;

        public Builder() {
            $ = new NotificationRecipientEmailState();
        }

        public Builder(NotificationRecipientEmailState defaults) {
            $ = new NotificationRecipientEmailState(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiManagementId The ID of the API Management Service from which to create this Notification Recipient Email. Changing this forces a new API Management Notification Recipient Email to be created.
         * 
         * @return builder
         * 
         */
        public Builder apiManagementId(@Nullable Output<String> apiManagementId) {
            $.apiManagementId = apiManagementId;
            return this;
        }

        /**
         * @param apiManagementId The ID of the API Management Service from which to create this Notification Recipient Email. Changing this forces a new API Management Notification Recipient Email to be created.
         * 
         * @return builder
         * 
         */
        public Builder apiManagementId(String apiManagementId) {
            return apiManagementId(Output.of(apiManagementId));
        }

        /**
         * @param email The recipient email address. Changing this forces a new API Management Notification Recipient Email to be created.
         * 
         * @return builder
         * 
         */
        public Builder email(@Nullable Output<String> email) {
            $.email = email;
            return this;
        }

        /**
         * @param email The recipient email address. Changing this forces a new API Management Notification Recipient Email to be created.
         * 
         * @return builder
         * 
         */
        public Builder email(String email) {
            return email(Output.of(email));
        }

        /**
         * @param notificationType The Notification Name to be received. Changing this forces a new API Management Notification Recipient Email to be created. Possible values are `AccountClosedPublisher`, `BCC`, `NewApplicationNotificationMessage`, `NewIssuePublisherNotificationMessage`, `PurchasePublisherNotificationMessage`, `QuotaLimitApproachingPublisherNotificationMessage`, and `RequestPublisherNotificationMessage`.
         * 
         * @return builder
         * 
         */
        public Builder notificationType(@Nullable Output<String> notificationType) {
            $.notificationType = notificationType;
            return this;
        }

        /**
         * @param notificationType The Notification Name to be received. Changing this forces a new API Management Notification Recipient Email to be created. Possible values are `AccountClosedPublisher`, `BCC`, `NewApplicationNotificationMessage`, `NewIssuePublisherNotificationMessage`, `PurchasePublisherNotificationMessage`, `QuotaLimitApproachingPublisherNotificationMessage`, and `RequestPublisherNotificationMessage`.
         * 
         * @return builder
         * 
         */
        public Builder notificationType(String notificationType) {
            return notificationType(Output.of(notificationType));
        }

        public NotificationRecipientEmailState build() {
            return $;
        }
    }

}
