// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.frontdoor.outputs;

import com.pulumi.azure.frontdoor.outputs.FirewallPolicyManagedRuleOverrideExclusion;
import com.pulumi.azure.frontdoor.outputs.FirewallPolicyManagedRuleOverrideRule;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class FirewallPolicyManagedRuleOverride {
    /**
     * @return One or more `exclusion` blocks as defined below.
     * 
     */
    private final @Nullable List<FirewallPolicyManagedRuleOverrideExclusion> exclusions;
    /**
     * @return The managed rule group to override.
     * 
     */
    private final String ruleGroupName;
    /**
     * @return One or more `rule` blocks as defined below. If none are specified, all of the rules in the group will be disabled.
     * 
     */
    private final @Nullable List<FirewallPolicyManagedRuleOverrideRule> rules;

    @CustomType.Constructor
    private FirewallPolicyManagedRuleOverride(
        @CustomType.Parameter("exclusions") @Nullable List<FirewallPolicyManagedRuleOverrideExclusion> exclusions,
        @CustomType.Parameter("ruleGroupName") String ruleGroupName,
        @CustomType.Parameter("rules") @Nullable List<FirewallPolicyManagedRuleOverrideRule> rules) {
        this.exclusions = exclusions;
        this.ruleGroupName = ruleGroupName;
        this.rules = rules;
    }

    /**
     * @return One or more `exclusion` blocks as defined below.
     * 
     */
    public List<FirewallPolicyManagedRuleOverrideExclusion> exclusions() {
        return this.exclusions == null ? List.of() : this.exclusions;
    }
    /**
     * @return The managed rule group to override.
     * 
     */
    public String ruleGroupName() {
        return this.ruleGroupName;
    }
    /**
     * @return One or more `rule` blocks as defined below. If none are specified, all of the rules in the group will be disabled.
     * 
     */
    public List<FirewallPolicyManagedRuleOverrideRule> rules() {
        return this.rules == null ? List.of() : this.rules;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FirewallPolicyManagedRuleOverride defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<FirewallPolicyManagedRuleOverrideExclusion> exclusions;
        private String ruleGroupName;
        private @Nullable List<FirewallPolicyManagedRuleOverrideRule> rules;

        public Builder() {
    	      // Empty
        }

        public Builder(FirewallPolicyManagedRuleOverride defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.exclusions = defaults.exclusions;
    	      this.ruleGroupName = defaults.ruleGroupName;
    	      this.rules = defaults.rules;
        }

        public Builder exclusions(@Nullable List<FirewallPolicyManagedRuleOverrideExclusion> exclusions) {
            this.exclusions = exclusions;
            return this;
        }
        public Builder exclusions(FirewallPolicyManagedRuleOverrideExclusion... exclusions) {
            return exclusions(List.of(exclusions));
        }
        public Builder ruleGroupName(String ruleGroupName) {
            this.ruleGroupName = Objects.requireNonNull(ruleGroupName);
            return this;
        }
        public Builder rules(@Nullable List<FirewallPolicyManagedRuleOverrideRule> rules) {
            this.rules = rules;
            return this;
        }
        public Builder rules(FirewallPolicyManagedRuleOverrideRule... rules) {
            return rules(List.of(rules));
        }        public FirewallPolicyManagedRuleOverride build() {
            return new FirewallPolicyManagedRuleOverride(exclusions, ruleGroupName, rules);
        }
    }
}
