// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerservice;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegistryTokenArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegistryTokenArgs Empty = new RegistryTokenArgs();

    /**
     * The name of the Container Registry. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="containerRegistryName", required=true)
    private Output<String> containerRegistryName;

    /**
     * @return The name of the Container Registry. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> containerRegistryName() {
        return this.containerRegistryName;
    }

    /**
     * Should the Container Registry token be enabled? Defaults to `true`.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Should the Container Registry token be enabled? Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Specifies the name of the token. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the name of the token. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The name of the resource group in which to create the Container Registry token. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group in which to create the Container Registry token. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The ID of the Container Registry Scope Map associated with the token.
     * 
     */
    @Import(name="scopeMapId", required=true)
    private Output<String> scopeMapId;

    /**
     * @return The ID of the Container Registry Scope Map associated with the token.
     * 
     */
    public Output<String> scopeMapId() {
        return this.scopeMapId;
    }

    private RegistryTokenArgs() {}

    private RegistryTokenArgs(RegistryTokenArgs $) {
        this.containerRegistryName = $.containerRegistryName;
        this.enabled = $.enabled;
        this.name = $.name;
        this.resourceGroupName = $.resourceGroupName;
        this.scopeMapId = $.scopeMapId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegistryTokenArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegistryTokenArgs $;

        public Builder() {
            $ = new RegistryTokenArgs();
        }

        public Builder(RegistryTokenArgs defaults) {
            $ = new RegistryTokenArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param containerRegistryName The name of the Container Registry. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder containerRegistryName(Output<String> containerRegistryName) {
            $.containerRegistryName = containerRegistryName;
            return this;
        }

        /**
         * @param containerRegistryName The name of the Container Registry. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder containerRegistryName(String containerRegistryName) {
            return containerRegistryName(Output.of(containerRegistryName));
        }

        /**
         * @param enabled Should the Container Registry token be enabled? Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Should the Container Registry token be enabled? Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param name Specifies the name of the token. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of the token. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param resourceGroupName The name of the resource group in which to create the Container Registry token. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group in which to create the Container Registry token. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param scopeMapId The ID of the Container Registry Scope Map associated with the token.
         * 
         * @return builder
         * 
         */
        public Builder scopeMapId(Output<String> scopeMapId) {
            $.scopeMapId = scopeMapId;
            return this;
        }

        /**
         * @param scopeMapId The ID of the Container Registry Scope Map associated with the token.
         * 
         * @return builder
         * 
         */
        public Builder scopeMapId(String scopeMapId) {
            return scopeMapId(Output.of(scopeMapId));
        }

        public RegistryTokenArgs build() {
            if ($.containerRegistryName == null) {
                throw new MissingRequiredPropertyException("RegistryTokenArgs", "containerRegistryName");
            }
            if ($.resourceGroupName == null) {
                throw new MissingRequiredPropertyException("RegistryTokenArgs", "resourceGroupName");
            }
            if ($.scopeMapId == null) {
                throw new MissingRequiredPropertyException("RegistryTokenArgs", "scopeMapId");
            }
            return $;
        }
    }

}
