// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network.outputs;

import com.pulumi.azure.network.outputs.GetGatewayConnectionIpsecPolicy;
import com.pulumi.azure.network.outputs.GetGatewayConnectionTrafficSelectorPolicy;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetGatewayConnectionResult {
    /**
     * @return The authorization key associated with the
     * Express Route Circuit. This field is present only if the type is an
     * ExpressRoute connection.
     * 
     */
    private String authorizationKey;
    private String connectionProtocol;
    /**
     * @return The dead peer detection timeout of this connection in seconds.
     * 
     */
    private Integer dpdTimeoutSeconds;
    private Integer egressBytesTransferred;
    /**
     * @return If `true`, BGP (Border Gateway Protocol) is enabled
     * for this connection.
     * 
     */
    private Boolean enableBgp;
    /**
     * @return The ID of the Express Route Circuit
     * (i.e. when `type` is `ExpressRoute`).
     * 
     */
    private String expressRouteCircuitId;
    /**
     * @return If `true`, data packets will bypass ExpressRoute Gateway for data forwarding. This is only valid for ExpressRoute connections.
     * 
     */
    private Boolean expressRouteGatewayBypass;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private Integer ingressBytesTransferred;
    /**
     * @return (Optional) A `ipsec_policy` block which is documented below.
     * Only a single policy can be defined for a connection. For details on
     * custom policies refer to [the relevant section in the Azure documentation](https://docs.microsoft.com/azure/vpn-gateway/vpn-gateway-ipsecikepolicy-rm-powershell).
     * 
     */
    private List<GetGatewayConnectionIpsecPolicy> ipsecPolicies;
    /**
     * @return Use private local Azure IP for the connection.
     * 
     */
    private Boolean localAzureIpAddressEnabled;
    /**
     * @return The ID of the local network gateway
     * when a Site-to-Site connection (i.e. when `type` is `IPsec`).
     * 
     */
    private String localNetworkGatewayId;
    /**
     * @return The location/region where the connection is
     * located.
     * 
     */
    private String location;
    private String name;
    /**
     * @return The ID of the peer virtual
     * network gateway when a VNet-to-VNet connection (i.e. when `type`
     * is `Vnet2Vnet`).
     * 
     */
    private String peerVirtualNetworkGatewayId;
    private String resourceGroupName;
    private String resourceGuid;
    /**
     * @return The routing weight.
     * 
     */
    private Integer routingWeight;
    /**
     * @return The shared IPSec key.
     * 
     */
    private String sharedKey;
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return One or more `traffic_selector_policy` blocks which are documented below.
     * A `traffic_selector_policy` allows to specify a traffic selector policy proposal to be used in a virtual network gateway connection.
     * For details about traffic selectors refer to [the relevant section in the Azure documentation](https://docs.microsoft.com/azure/vpn-gateway/vpn-gateway-connect-multiple-policybased-rm-ps).
     * 
     */
    private List<GetGatewayConnectionTrafficSelectorPolicy> trafficSelectorPolicies;
    /**
     * @return The type of connection. Valid options are `IPsec`
     * (Site-to-Site), `ExpressRoute` (ExpressRoute), and `Vnet2Vnet` (VNet-to-VNet).
     * 
     */
    private String type;
    /**
     * @return If `true`, policy-based traffic
     * selectors are enabled for this connection. Enabling policy-based traffic
     * selectors requires an `ipsec_policy` block.
     * 
     */
    private Boolean usePolicyBasedTrafficSelectors;
    /**
     * @return The ID of the Virtual Network Gateway
     * in which the connection is created.
     * 
     */
    private String virtualNetworkGatewayId;

    private GetGatewayConnectionResult() {}
    /**
     * @return The authorization key associated with the
     * Express Route Circuit. This field is present only if the type is an
     * ExpressRoute connection.
     * 
     */
    public String authorizationKey() {
        return this.authorizationKey;
    }
    public String connectionProtocol() {
        return this.connectionProtocol;
    }
    /**
     * @return The dead peer detection timeout of this connection in seconds.
     * 
     */
    public Integer dpdTimeoutSeconds() {
        return this.dpdTimeoutSeconds;
    }
    public Integer egressBytesTransferred() {
        return this.egressBytesTransferred;
    }
    /**
     * @return If `true`, BGP (Border Gateway Protocol) is enabled
     * for this connection.
     * 
     */
    public Boolean enableBgp() {
        return this.enableBgp;
    }
    /**
     * @return The ID of the Express Route Circuit
     * (i.e. when `type` is `ExpressRoute`).
     * 
     */
    public String expressRouteCircuitId() {
        return this.expressRouteCircuitId;
    }
    /**
     * @return If `true`, data packets will bypass ExpressRoute Gateway for data forwarding. This is only valid for ExpressRoute connections.
     * 
     */
    public Boolean expressRouteGatewayBypass() {
        return this.expressRouteGatewayBypass;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Integer ingressBytesTransferred() {
        return this.ingressBytesTransferred;
    }
    /**
     * @return (Optional) A `ipsec_policy` block which is documented below.
     * Only a single policy can be defined for a connection. For details on
     * custom policies refer to [the relevant section in the Azure documentation](https://docs.microsoft.com/azure/vpn-gateway/vpn-gateway-ipsecikepolicy-rm-powershell).
     * 
     */
    public List<GetGatewayConnectionIpsecPolicy> ipsecPolicies() {
        return this.ipsecPolicies;
    }
    /**
     * @return Use private local Azure IP for the connection.
     * 
     */
    public Boolean localAzureIpAddressEnabled() {
        return this.localAzureIpAddressEnabled;
    }
    /**
     * @return The ID of the local network gateway
     * when a Site-to-Site connection (i.e. when `type` is `IPsec`).
     * 
     */
    public String localNetworkGatewayId() {
        return this.localNetworkGatewayId;
    }
    /**
     * @return The location/region where the connection is
     * located.
     * 
     */
    public String location() {
        return this.location;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return The ID of the peer virtual
     * network gateway when a VNet-to-VNet connection (i.e. when `type`
     * is `Vnet2Vnet`).
     * 
     */
    public String peerVirtualNetworkGatewayId() {
        return this.peerVirtualNetworkGatewayId;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    public String resourceGuid() {
        return this.resourceGuid;
    }
    /**
     * @return The routing weight.
     * 
     */
    public Integer routingWeight() {
        return this.routingWeight;
    }
    /**
     * @return The shared IPSec key.
     * 
     */
    public String sharedKey() {
        return this.sharedKey;
    }
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return One or more `traffic_selector_policy` blocks which are documented below.
     * A `traffic_selector_policy` allows to specify a traffic selector policy proposal to be used in a virtual network gateway connection.
     * For details about traffic selectors refer to [the relevant section in the Azure documentation](https://docs.microsoft.com/azure/vpn-gateway/vpn-gateway-connect-multiple-policybased-rm-ps).
     * 
     */
    public List<GetGatewayConnectionTrafficSelectorPolicy> trafficSelectorPolicies() {
        return this.trafficSelectorPolicies;
    }
    /**
     * @return The type of connection. Valid options are `IPsec`
     * (Site-to-Site), `ExpressRoute` (ExpressRoute), and `Vnet2Vnet` (VNet-to-VNet).
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return If `true`, policy-based traffic
     * selectors are enabled for this connection. Enabling policy-based traffic
     * selectors requires an `ipsec_policy` block.
     * 
     */
    public Boolean usePolicyBasedTrafficSelectors() {
        return this.usePolicyBasedTrafficSelectors;
    }
    /**
     * @return The ID of the Virtual Network Gateway
     * in which the connection is created.
     * 
     */
    public String virtualNetworkGatewayId() {
        return this.virtualNetworkGatewayId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGatewayConnectionResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String authorizationKey;
        private String connectionProtocol;
        private Integer dpdTimeoutSeconds;
        private Integer egressBytesTransferred;
        private Boolean enableBgp;
        private String expressRouteCircuitId;
        private Boolean expressRouteGatewayBypass;
        private String id;
        private Integer ingressBytesTransferred;
        private List<GetGatewayConnectionIpsecPolicy> ipsecPolicies;
        private Boolean localAzureIpAddressEnabled;
        private String localNetworkGatewayId;
        private String location;
        private String name;
        private String peerVirtualNetworkGatewayId;
        private String resourceGroupName;
        private String resourceGuid;
        private Integer routingWeight;
        private String sharedKey;
        private Map<String,String> tags;
        private List<GetGatewayConnectionTrafficSelectorPolicy> trafficSelectorPolicies;
        private String type;
        private Boolean usePolicyBasedTrafficSelectors;
        private String virtualNetworkGatewayId;
        public Builder() {}
        public Builder(GetGatewayConnectionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authorizationKey = defaults.authorizationKey;
    	      this.connectionProtocol = defaults.connectionProtocol;
    	      this.dpdTimeoutSeconds = defaults.dpdTimeoutSeconds;
    	      this.egressBytesTransferred = defaults.egressBytesTransferred;
    	      this.enableBgp = defaults.enableBgp;
    	      this.expressRouteCircuitId = defaults.expressRouteCircuitId;
    	      this.expressRouteGatewayBypass = defaults.expressRouteGatewayBypass;
    	      this.id = defaults.id;
    	      this.ingressBytesTransferred = defaults.ingressBytesTransferred;
    	      this.ipsecPolicies = defaults.ipsecPolicies;
    	      this.localAzureIpAddressEnabled = defaults.localAzureIpAddressEnabled;
    	      this.localNetworkGatewayId = defaults.localNetworkGatewayId;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.peerVirtualNetworkGatewayId = defaults.peerVirtualNetworkGatewayId;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.resourceGuid = defaults.resourceGuid;
    	      this.routingWeight = defaults.routingWeight;
    	      this.sharedKey = defaults.sharedKey;
    	      this.tags = defaults.tags;
    	      this.trafficSelectorPolicies = defaults.trafficSelectorPolicies;
    	      this.type = defaults.type;
    	      this.usePolicyBasedTrafficSelectors = defaults.usePolicyBasedTrafficSelectors;
    	      this.virtualNetworkGatewayId = defaults.virtualNetworkGatewayId;
        }

        @CustomType.Setter
        public Builder authorizationKey(String authorizationKey) {
            this.authorizationKey = Objects.requireNonNull(authorizationKey);
            return this;
        }
        @CustomType.Setter
        public Builder connectionProtocol(String connectionProtocol) {
            this.connectionProtocol = Objects.requireNonNull(connectionProtocol);
            return this;
        }
        @CustomType.Setter
        public Builder dpdTimeoutSeconds(Integer dpdTimeoutSeconds) {
            this.dpdTimeoutSeconds = Objects.requireNonNull(dpdTimeoutSeconds);
            return this;
        }
        @CustomType.Setter
        public Builder egressBytesTransferred(Integer egressBytesTransferred) {
            this.egressBytesTransferred = Objects.requireNonNull(egressBytesTransferred);
            return this;
        }
        @CustomType.Setter
        public Builder enableBgp(Boolean enableBgp) {
            this.enableBgp = Objects.requireNonNull(enableBgp);
            return this;
        }
        @CustomType.Setter
        public Builder expressRouteCircuitId(String expressRouteCircuitId) {
            this.expressRouteCircuitId = Objects.requireNonNull(expressRouteCircuitId);
            return this;
        }
        @CustomType.Setter
        public Builder expressRouteGatewayBypass(Boolean expressRouteGatewayBypass) {
            this.expressRouteGatewayBypass = Objects.requireNonNull(expressRouteGatewayBypass);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder ingressBytesTransferred(Integer ingressBytesTransferred) {
            this.ingressBytesTransferred = Objects.requireNonNull(ingressBytesTransferred);
            return this;
        }
        @CustomType.Setter
        public Builder ipsecPolicies(List<GetGatewayConnectionIpsecPolicy> ipsecPolicies) {
            this.ipsecPolicies = Objects.requireNonNull(ipsecPolicies);
            return this;
        }
        public Builder ipsecPolicies(GetGatewayConnectionIpsecPolicy... ipsecPolicies) {
            return ipsecPolicies(List.of(ipsecPolicies));
        }
        @CustomType.Setter
        public Builder localAzureIpAddressEnabled(Boolean localAzureIpAddressEnabled) {
            this.localAzureIpAddressEnabled = Objects.requireNonNull(localAzureIpAddressEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder localNetworkGatewayId(String localNetworkGatewayId) {
            this.localNetworkGatewayId = Objects.requireNonNull(localNetworkGatewayId);
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder peerVirtualNetworkGatewayId(String peerVirtualNetworkGatewayId) {
            this.peerVirtualNetworkGatewayId = Objects.requireNonNull(peerVirtualNetworkGatewayId);
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        @CustomType.Setter
        public Builder resourceGuid(String resourceGuid) {
            this.resourceGuid = Objects.requireNonNull(resourceGuid);
            return this;
        }
        @CustomType.Setter
        public Builder routingWeight(Integer routingWeight) {
            this.routingWeight = Objects.requireNonNull(routingWeight);
            return this;
        }
        @CustomType.Setter
        public Builder sharedKey(String sharedKey) {
            this.sharedKey = Objects.requireNonNull(sharedKey);
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        @CustomType.Setter
        public Builder trafficSelectorPolicies(List<GetGatewayConnectionTrafficSelectorPolicy> trafficSelectorPolicies) {
            this.trafficSelectorPolicies = Objects.requireNonNull(trafficSelectorPolicies);
            return this;
        }
        public Builder trafficSelectorPolicies(GetGatewayConnectionTrafficSelectorPolicy... trafficSelectorPolicies) {
            return trafficSelectorPolicies(List.of(trafficSelectorPolicies));
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder usePolicyBasedTrafficSelectors(Boolean usePolicyBasedTrafficSelectors) {
            this.usePolicyBasedTrafficSelectors = Objects.requireNonNull(usePolicyBasedTrafficSelectors);
            return this;
        }
        @CustomType.Setter
        public Builder virtualNetworkGatewayId(String virtualNetworkGatewayId) {
            this.virtualNetworkGatewayId = Objects.requireNonNull(virtualNetworkGatewayId);
            return this;
        }
        public GetGatewayConnectionResult build() {
            final var o = new GetGatewayConnectionResult();
            o.authorizationKey = authorizationKey;
            o.connectionProtocol = connectionProtocol;
            o.dpdTimeoutSeconds = dpdTimeoutSeconds;
            o.egressBytesTransferred = egressBytesTransferred;
            o.enableBgp = enableBgp;
            o.expressRouteCircuitId = expressRouteCircuitId;
            o.expressRouteGatewayBypass = expressRouteGatewayBypass;
            o.id = id;
            o.ingressBytesTransferred = ingressBytesTransferred;
            o.ipsecPolicies = ipsecPolicies;
            o.localAzureIpAddressEnabled = localAzureIpAddressEnabled;
            o.localNetworkGatewayId = localNetworkGatewayId;
            o.location = location;
            o.name = name;
            o.peerVirtualNetworkGatewayId = peerVirtualNetworkGatewayId;
            o.resourceGroupName = resourceGroupName;
            o.resourceGuid = resourceGuid;
            o.routingWeight = routingWeight;
            o.sharedKey = sharedKey;
            o.tags = tags;
            o.trafficSelectorPolicies = trafficSelectorPolicies;
            o.type = type;
            o.usePolicyBasedTrafficSelectors = usePolicyBasedTrafficSelectors;
            o.virtualNetworkGatewayId = virtualNetworkGatewayId;
            return o;
        }
    }
}
