// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.sql.inputs;

import com.pulumi.azure.sql.inputs.ManagedInstanceFailoverGroupPartnerRegionArgs;
import com.pulumi.azure.sql.inputs.ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagedInstanceFailoverGroupState extends com.pulumi.resources.ResourceArgs {

    public static final ManagedInstanceFailoverGroupState Empty = new ManagedInstanceFailoverGroupState();

    /**
     * The Azure Region where the SQL Instance Failover Group exists.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The Azure Region where the SQL Instance Failover Group exists.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the SQL Managed Instance which will be replicated using a SQL Instance Failover Group. Changing this forces a new SQL Instance Failover Group to be created.
     * 
     */
    @Import(name="managedInstanceName")
    private @Nullable Output<String> managedInstanceName;

    /**
     * @return The name of the SQL Managed Instance which will be replicated using a SQL Instance Failover Group. Changing this forces a new SQL Instance Failover Group to be created.
     * 
     */
    public Optional<Output<String>> managedInstanceName() {
        return Optional.ofNullable(this.managedInstanceName);
    }

    /**
     * The name which should be used for this SQL Instance Failover Group. Changing this forces a new SQL Instance Failover Group to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name which should be used for this SQL Instance Failover Group. Changing this forces a new SQL Instance Failover Group to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * ID of the SQL Managed Instance which will be replicated to.
     * 
     */
    @Import(name="partnerManagedInstanceId")
    private @Nullable Output<String> partnerManagedInstanceId;

    /**
     * @return ID of the SQL Managed Instance which will be replicated to.
     * 
     */
    public Optional<Output<String>> partnerManagedInstanceId() {
        return Optional.ofNullable(this.partnerManagedInstanceId);
    }

    /**
     * A `partner_region` block as defined below.
     * 
     */
    @Import(name="partnerRegions")
    private @Nullable Output<List<ManagedInstanceFailoverGroupPartnerRegionArgs>> partnerRegions;

    /**
     * @return A `partner_region` block as defined below.
     * 
     */
    public Optional<Output<List<ManagedInstanceFailoverGroupPartnerRegionArgs>>> partnerRegions() {
        return Optional.ofNullable(this.partnerRegions);
    }

    /**
     * A `read_write_endpoint_failover_policy` block as defined below.
     * 
     */
    @Import(name="readWriteEndpointFailoverPolicy")
    private @Nullable Output<ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyArgs> readWriteEndpointFailoverPolicy;

    /**
     * @return A `read_write_endpoint_failover_policy` block as defined below.
     * 
     */
    public Optional<Output<ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyArgs>> readWriteEndpointFailoverPolicy() {
        return Optional.ofNullable(this.readWriteEndpointFailoverPolicy);
    }

    /**
     * Failover policy for the read-only endpoint. Defaults to `false`.
     * 
     */
    @Import(name="readonlyEndpointFailoverPolicyEnabled")
    private @Nullable Output<Boolean> readonlyEndpointFailoverPolicyEnabled;

    /**
     * @return Failover policy for the read-only endpoint. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> readonlyEndpointFailoverPolicyEnabled() {
        return Optional.ofNullable(this.readonlyEndpointFailoverPolicyEnabled);
    }

    /**
     * The name of the Resource Group where the SQL Instance Failover Group should exist. Changing this forces a new SQL Instance Failover Group to be created.
     * 
     */
    @Import(name="resourceGroupName")
    private @Nullable Output<String> resourceGroupName;

    /**
     * @return The name of the Resource Group where the SQL Instance Failover Group should exist. Changing this forces a new SQL Instance Failover Group to be created.
     * 
     */
    public Optional<Output<String>> resourceGroupName() {
        return Optional.ofNullable(this.resourceGroupName);
    }

    /**
     * The partner replication role of the SQL Instance Failover Group.
     * 
     */
    @Import(name="role")
    private @Nullable Output<String> role;

    /**
     * @return The partner replication role of the SQL Instance Failover Group.
     * 
     */
    public Optional<Output<String>> role() {
        return Optional.ofNullable(this.role);
    }

    private ManagedInstanceFailoverGroupState() {}

    private ManagedInstanceFailoverGroupState(ManagedInstanceFailoverGroupState $) {
        this.location = $.location;
        this.managedInstanceName = $.managedInstanceName;
        this.name = $.name;
        this.partnerManagedInstanceId = $.partnerManagedInstanceId;
        this.partnerRegions = $.partnerRegions;
        this.readWriteEndpointFailoverPolicy = $.readWriteEndpointFailoverPolicy;
        this.readonlyEndpointFailoverPolicyEnabled = $.readonlyEndpointFailoverPolicyEnabled;
        this.resourceGroupName = $.resourceGroupName;
        this.role = $.role;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedInstanceFailoverGroupState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedInstanceFailoverGroupState $;

        public Builder() {
            $ = new ManagedInstanceFailoverGroupState();
        }

        public Builder(ManagedInstanceFailoverGroupState defaults) {
            $ = new ManagedInstanceFailoverGroupState(Objects.requireNonNull(defaults));
        }

        /**
         * @param location The Azure Region where the SQL Instance Failover Group exists.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The Azure Region where the SQL Instance Failover Group exists.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param managedInstanceName The name of the SQL Managed Instance which will be replicated using a SQL Instance Failover Group. Changing this forces a new SQL Instance Failover Group to be created.
         * 
         * @return builder
         * 
         */
        public Builder managedInstanceName(@Nullable Output<String> managedInstanceName) {
            $.managedInstanceName = managedInstanceName;
            return this;
        }

        /**
         * @param managedInstanceName The name of the SQL Managed Instance which will be replicated using a SQL Instance Failover Group. Changing this forces a new SQL Instance Failover Group to be created.
         * 
         * @return builder
         * 
         */
        public Builder managedInstanceName(String managedInstanceName) {
            return managedInstanceName(Output.of(managedInstanceName));
        }

        /**
         * @param name The name which should be used for this SQL Instance Failover Group. Changing this forces a new SQL Instance Failover Group to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this SQL Instance Failover Group. Changing this forces a new SQL Instance Failover Group to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param partnerManagedInstanceId ID of the SQL Managed Instance which will be replicated to.
         * 
         * @return builder
         * 
         */
        public Builder partnerManagedInstanceId(@Nullable Output<String> partnerManagedInstanceId) {
            $.partnerManagedInstanceId = partnerManagedInstanceId;
            return this;
        }

        /**
         * @param partnerManagedInstanceId ID of the SQL Managed Instance which will be replicated to.
         * 
         * @return builder
         * 
         */
        public Builder partnerManagedInstanceId(String partnerManagedInstanceId) {
            return partnerManagedInstanceId(Output.of(partnerManagedInstanceId));
        }

        /**
         * @param partnerRegions A `partner_region` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder partnerRegions(@Nullable Output<List<ManagedInstanceFailoverGroupPartnerRegionArgs>> partnerRegions) {
            $.partnerRegions = partnerRegions;
            return this;
        }

        /**
         * @param partnerRegions A `partner_region` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder partnerRegions(List<ManagedInstanceFailoverGroupPartnerRegionArgs> partnerRegions) {
            return partnerRegions(Output.of(partnerRegions));
        }

        /**
         * @param partnerRegions A `partner_region` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder partnerRegions(ManagedInstanceFailoverGroupPartnerRegionArgs... partnerRegions) {
            return partnerRegions(List.of(partnerRegions));
        }

        /**
         * @param readWriteEndpointFailoverPolicy A `read_write_endpoint_failover_policy` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder readWriteEndpointFailoverPolicy(@Nullable Output<ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyArgs> readWriteEndpointFailoverPolicy) {
            $.readWriteEndpointFailoverPolicy = readWriteEndpointFailoverPolicy;
            return this;
        }

        /**
         * @param readWriteEndpointFailoverPolicy A `read_write_endpoint_failover_policy` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder readWriteEndpointFailoverPolicy(ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyArgs readWriteEndpointFailoverPolicy) {
            return readWriteEndpointFailoverPolicy(Output.of(readWriteEndpointFailoverPolicy));
        }

        /**
         * @param readonlyEndpointFailoverPolicyEnabled Failover policy for the read-only endpoint. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder readonlyEndpointFailoverPolicyEnabled(@Nullable Output<Boolean> readonlyEndpointFailoverPolicyEnabled) {
            $.readonlyEndpointFailoverPolicyEnabled = readonlyEndpointFailoverPolicyEnabled;
            return this;
        }

        /**
         * @param readonlyEndpointFailoverPolicyEnabled Failover policy for the read-only endpoint. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder readonlyEndpointFailoverPolicyEnabled(Boolean readonlyEndpointFailoverPolicyEnabled) {
            return readonlyEndpointFailoverPolicyEnabled(Output.of(readonlyEndpointFailoverPolicyEnabled));
        }

        /**
         * @param resourceGroupName The name of the Resource Group where the SQL Instance Failover Group should exist. Changing this forces a new SQL Instance Failover Group to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(@Nullable Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the Resource Group where the SQL Instance Failover Group should exist. Changing this forces a new SQL Instance Failover Group to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param role The partner replication role of the SQL Instance Failover Group.
         * 
         * @return builder
         * 
         */
        public Builder role(@Nullable Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role The partner replication role of the SQL Instance Failover Group.
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        public ManagedInstanceFailoverGroupState build() {
            return $;
        }
    }

}
