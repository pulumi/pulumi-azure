// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.logicapps.outputs;

import com.pulumi.azure.logicapps.outputs.GetStandardSiteConfigCors;
import com.pulumi.azure.logicapps.outputs.GetStandardSiteConfigIpRestriction;
import com.pulumi.azure.logicapps.outputs.GetStandardSiteConfigScmIpRestriction;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetStandardSiteConfig {
    /**
     * @return Should the Logic App be loaded at all times?
     * 
     */
    private Boolean alwaysOn;
    /**
     * @return The number of workers this Logic App can scale out to. Only applicable to apps on the Consumption and Premium plan.
     * 
     */
    private Integer appScaleLimit;
    /**
     * @return The Auto-swap slot name.
     * 
     */
    private String autoSwapSlotName;
    /**
     * @return A `cors` block as defined below.
     * 
     */
    private GetStandardSiteConfigCors cors;
    /**
     * @return The version of the .NET framework&#39;s CLR used in this Logic App.
     * 
     */
    private @Nullable String dotnetFrameworkVersion;
    /**
     * @return The number of minimum instances for this Logic App Only affects apps on the Premium plan.
     * 
     */
    private Integer elasticInstanceMinimum;
    /**
     * @return The state of FTP / FTPS service for this Logic App.
     * 
     */
    private String ftpsState;
    /**
     * @return Path which will be checked for this Logic App health.
     * 
     */
    private @Nullable String healthCheckPath;
    /**
     * @return Specifies whether the HTTP2 protocol should be enabled.
     * 
     */
    private Boolean http2Enabled;
    /**
     * @return A list of `ip_restriction` objects representing IP restrictions as defined below.
     * 
     */
    private List<GetStandardSiteConfigIpRestriction> ipRestrictions;
    /**
     * @return Linux App Framework and version for the Logic App.
     * 
     */
    private String linuxFxVersion;
    /**
     * @return The minimum supported TLS version for the Logic App.
     * 
     */
    private String minTlsVersion;
    /**
     * @return The number of pre-warmed instances for this Logic App Only affects apps on the Premium plan.
     * 
     */
    private Integer preWarmedInstanceCount;
    /**
     * @deprecated
     * the `site_config.public_network_access_enabled` property has been superseded by the `public_network_access` property and will be removed in v5.0 of the AzureRM Provider.
     * 
     */
    @Deprecated /* the `site_config.public_network_access_enabled` property has been superseded by the `public_network_access` property and will be removed in v5.0 of the AzureRM Provider. */
    private Boolean publicNetworkAccessEnabled;
    /**
     * @return Should Runtime Scale Monitoring be enabled?. Only applicable to apps on the Premium plan.
     * 
     */
    private @Nullable Boolean runtimeScaleMonitoringEnabled;
    /**
     * @return A list of `scm_ip_restriction` objects representing SCM IP restrictions as defined below.
     * 
     */
    private List<GetStandardSiteConfigScmIpRestriction> scmIpRestrictions;
    /**
     * @return The minimum version of TLS required for SSL requests to the SCM site.
     * 
     */
    private String scmMinTlsVersion;
    /**
     * @return The type of Source Control used by the Logic App in use by the Windows Function App.
     * 
     */
    private String scmType;
    /**
     * @return Should the Logic App `ip_restriction` configuration be used for the SCM too.
     * 
     */
    private @Nullable Boolean scmUseMainIpRestriction;
    /**
     * @return Should the Logic App run in 32 bit mode, rather than 64 bit mode?
     * 
     */
    private @Nullable Boolean use32BitWorkerProcess;
    /**
     * @return Should all outbound traffic to have Virtual Network Security Groups and User Defined Routes applied.
     * 
     */
    private Boolean vnetRouteAllEnabled;
    /**
     * @return Should WebSockets be enabled?
     * 
     */
    private @Nullable Boolean websocketsEnabled;

    private GetStandardSiteConfig() {}
    /**
     * @return Should the Logic App be loaded at all times?
     * 
     */
    public Boolean alwaysOn() {
        return this.alwaysOn;
    }
    /**
     * @return The number of workers this Logic App can scale out to. Only applicable to apps on the Consumption and Premium plan.
     * 
     */
    public Integer appScaleLimit() {
        return this.appScaleLimit;
    }
    /**
     * @return The Auto-swap slot name.
     * 
     */
    public String autoSwapSlotName() {
        return this.autoSwapSlotName;
    }
    /**
     * @return A `cors` block as defined below.
     * 
     */
    public GetStandardSiteConfigCors cors() {
        return this.cors;
    }
    /**
     * @return The version of the .NET framework&#39;s CLR used in this Logic App.
     * 
     */
    public Optional<String> dotnetFrameworkVersion() {
        return Optional.ofNullable(this.dotnetFrameworkVersion);
    }
    /**
     * @return The number of minimum instances for this Logic App Only affects apps on the Premium plan.
     * 
     */
    public Integer elasticInstanceMinimum() {
        return this.elasticInstanceMinimum;
    }
    /**
     * @return The state of FTP / FTPS service for this Logic App.
     * 
     */
    public String ftpsState() {
        return this.ftpsState;
    }
    /**
     * @return Path which will be checked for this Logic App health.
     * 
     */
    public Optional<String> healthCheckPath() {
        return Optional.ofNullable(this.healthCheckPath);
    }
    /**
     * @return Specifies whether the HTTP2 protocol should be enabled.
     * 
     */
    public Boolean http2Enabled() {
        return this.http2Enabled;
    }
    /**
     * @return A list of `ip_restriction` objects representing IP restrictions as defined below.
     * 
     */
    public List<GetStandardSiteConfigIpRestriction> ipRestrictions() {
        return this.ipRestrictions;
    }
    /**
     * @return Linux App Framework and version for the Logic App.
     * 
     */
    public String linuxFxVersion() {
        return this.linuxFxVersion;
    }
    /**
     * @return The minimum supported TLS version for the Logic App.
     * 
     */
    public String minTlsVersion() {
        return this.minTlsVersion;
    }
    /**
     * @return The number of pre-warmed instances for this Logic App Only affects apps on the Premium plan.
     * 
     */
    public Integer preWarmedInstanceCount() {
        return this.preWarmedInstanceCount;
    }
    /**
     * @deprecated
     * the `site_config.public_network_access_enabled` property has been superseded by the `public_network_access` property and will be removed in v5.0 of the AzureRM Provider.
     * 
     */
    @Deprecated /* the `site_config.public_network_access_enabled` property has been superseded by the `public_network_access` property and will be removed in v5.0 of the AzureRM Provider. */
    public Boolean publicNetworkAccessEnabled() {
        return this.publicNetworkAccessEnabled;
    }
    /**
     * @return Should Runtime Scale Monitoring be enabled?. Only applicable to apps on the Premium plan.
     * 
     */
    public Optional<Boolean> runtimeScaleMonitoringEnabled() {
        return Optional.ofNullable(this.runtimeScaleMonitoringEnabled);
    }
    /**
     * @return A list of `scm_ip_restriction` objects representing SCM IP restrictions as defined below.
     * 
     */
    public List<GetStandardSiteConfigScmIpRestriction> scmIpRestrictions() {
        return this.scmIpRestrictions;
    }
    /**
     * @return The minimum version of TLS required for SSL requests to the SCM site.
     * 
     */
    public String scmMinTlsVersion() {
        return this.scmMinTlsVersion;
    }
    /**
     * @return The type of Source Control used by the Logic App in use by the Windows Function App.
     * 
     */
    public String scmType() {
        return this.scmType;
    }
    /**
     * @return Should the Logic App `ip_restriction` configuration be used for the SCM too.
     * 
     */
    public Optional<Boolean> scmUseMainIpRestriction() {
        return Optional.ofNullable(this.scmUseMainIpRestriction);
    }
    /**
     * @return Should the Logic App run in 32 bit mode, rather than 64 bit mode?
     * 
     */
    public Optional<Boolean> use32BitWorkerProcess() {
        return Optional.ofNullable(this.use32BitWorkerProcess);
    }
    /**
     * @return Should all outbound traffic to have Virtual Network Security Groups and User Defined Routes applied.
     * 
     */
    public Boolean vnetRouteAllEnabled() {
        return this.vnetRouteAllEnabled;
    }
    /**
     * @return Should WebSockets be enabled?
     * 
     */
    public Optional<Boolean> websocketsEnabled() {
        return Optional.ofNullable(this.websocketsEnabled);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetStandardSiteConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean alwaysOn;
        private Integer appScaleLimit;
        private String autoSwapSlotName;
        private GetStandardSiteConfigCors cors;
        private @Nullable String dotnetFrameworkVersion;
        private Integer elasticInstanceMinimum;
        private String ftpsState;
        private @Nullable String healthCheckPath;
        private Boolean http2Enabled;
        private List<GetStandardSiteConfigIpRestriction> ipRestrictions;
        private String linuxFxVersion;
        private String minTlsVersion;
        private Integer preWarmedInstanceCount;
        private Boolean publicNetworkAccessEnabled;
        private @Nullable Boolean runtimeScaleMonitoringEnabled;
        private List<GetStandardSiteConfigScmIpRestriction> scmIpRestrictions;
        private String scmMinTlsVersion;
        private String scmType;
        private @Nullable Boolean scmUseMainIpRestriction;
        private @Nullable Boolean use32BitWorkerProcess;
        private Boolean vnetRouteAllEnabled;
        private @Nullable Boolean websocketsEnabled;
        public Builder() {}
        public Builder(GetStandardSiteConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alwaysOn = defaults.alwaysOn;
    	      this.appScaleLimit = defaults.appScaleLimit;
    	      this.autoSwapSlotName = defaults.autoSwapSlotName;
    	      this.cors = defaults.cors;
    	      this.dotnetFrameworkVersion = defaults.dotnetFrameworkVersion;
    	      this.elasticInstanceMinimum = defaults.elasticInstanceMinimum;
    	      this.ftpsState = defaults.ftpsState;
    	      this.healthCheckPath = defaults.healthCheckPath;
    	      this.http2Enabled = defaults.http2Enabled;
    	      this.ipRestrictions = defaults.ipRestrictions;
    	      this.linuxFxVersion = defaults.linuxFxVersion;
    	      this.minTlsVersion = defaults.minTlsVersion;
    	      this.preWarmedInstanceCount = defaults.preWarmedInstanceCount;
    	      this.publicNetworkAccessEnabled = defaults.publicNetworkAccessEnabled;
    	      this.runtimeScaleMonitoringEnabled = defaults.runtimeScaleMonitoringEnabled;
    	      this.scmIpRestrictions = defaults.scmIpRestrictions;
    	      this.scmMinTlsVersion = defaults.scmMinTlsVersion;
    	      this.scmType = defaults.scmType;
    	      this.scmUseMainIpRestriction = defaults.scmUseMainIpRestriction;
    	      this.use32BitWorkerProcess = defaults.use32BitWorkerProcess;
    	      this.vnetRouteAllEnabled = defaults.vnetRouteAllEnabled;
    	      this.websocketsEnabled = defaults.websocketsEnabled;
        }

        @CustomType.Setter
        public Builder alwaysOn(Boolean alwaysOn) {
            if (alwaysOn == null) {
              throw new MissingRequiredPropertyException("GetStandardSiteConfig", "alwaysOn");
            }
            this.alwaysOn = alwaysOn;
            return this;
        }
        @CustomType.Setter
        public Builder appScaleLimit(Integer appScaleLimit) {
            if (appScaleLimit == null) {
              throw new MissingRequiredPropertyException("GetStandardSiteConfig", "appScaleLimit");
            }
            this.appScaleLimit = appScaleLimit;
            return this;
        }
        @CustomType.Setter
        public Builder autoSwapSlotName(String autoSwapSlotName) {
            if (autoSwapSlotName == null) {
              throw new MissingRequiredPropertyException("GetStandardSiteConfig", "autoSwapSlotName");
            }
            this.autoSwapSlotName = autoSwapSlotName;
            return this;
        }
        @CustomType.Setter
        public Builder cors(GetStandardSiteConfigCors cors) {
            if (cors == null) {
              throw new MissingRequiredPropertyException("GetStandardSiteConfig", "cors");
            }
            this.cors = cors;
            return this;
        }
        @CustomType.Setter
        public Builder dotnetFrameworkVersion(@Nullable String dotnetFrameworkVersion) {

            this.dotnetFrameworkVersion = dotnetFrameworkVersion;
            return this;
        }
        @CustomType.Setter
        public Builder elasticInstanceMinimum(Integer elasticInstanceMinimum) {
            if (elasticInstanceMinimum == null) {
              throw new MissingRequiredPropertyException("GetStandardSiteConfig", "elasticInstanceMinimum");
            }
            this.elasticInstanceMinimum = elasticInstanceMinimum;
            return this;
        }
        @CustomType.Setter
        public Builder ftpsState(String ftpsState) {
            if (ftpsState == null) {
              throw new MissingRequiredPropertyException("GetStandardSiteConfig", "ftpsState");
            }
            this.ftpsState = ftpsState;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckPath(@Nullable String healthCheckPath) {

            this.healthCheckPath = healthCheckPath;
            return this;
        }
        @CustomType.Setter
        public Builder http2Enabled(Boolean http2Enabled) {
            if (http2Enabled == null) {
              throw new MissingRequiredPropertyException("GetStandardSiteConfig", "http2Enabled");
            }
            this.http2Enabled = http2Enabled;
            return this;
        }
        @CustomType.Setter
        public Builder ipRestrictions(List<GetStandardSiteConfigIpRestriction> ipRestrictions) {
            if (ipRestrictions == null) {
              throw new MissingRequiredPropertyException("GetStandardSiteConfig", "ipRestrictions");
            }
            this.ipRestrictions = ipRestrictions;
            return this;
        }
        public Builder ipRestrictions(GetStandardSiteConfigIpRestriction... ipRestrictions) {
            return ipRestrictions(List.of(ipRestrictions));
        }
        @CustomType.Setter
        public Builder linuxFxVersion(String linuxFxVersion) {
            if (linuxFxVersion == null) {
              throw new MissingRequiredPropertyException("GetStandardSiteConfig", "linuxFxVersion");
            }
            this.linuxFxVersion = linuxFxVersion;
            return this;
        }
        @CustomType.Setter
        public Builder minTlsVersion(String minTlsVersion) {
            if (minTlsVersion == null) {
              throw new MissingRequiredPropertyException("GetStandardSiteConfig", "minTlsVersion");
            }
            this.minTlsVersion = minTlsVersion;
            return this;
        }
        @CustomType.Setter
        public Builder preWarmedInstanceCount(Integer preWarmedInstanceCount) {
            if (preWarmedInstanceCount == null) {
              throw new MissingRequiredPropertyException("GetStandardSiteConfig", "preWarmedInstanceCount");
            }
            this.preWarmedInstanceCount = preWarmedInstanceCount;
            return this;
        }
        @CustomType.Setter
        public Builder publicNetworkAccessEnabled(Boolean publicNetworkAccessEnabled) {
            if (publicNetworkAccessEnabled == null) {
              throw new MissingRequiredPropertyException("GetStandardSiteConfig", "publicNetworkAccessEnabled");
            }
            this.publicNetworkAccessEnabled = publicNetworkAccessEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder runtimeScaleMonitoringEnabled(@Nullable Boolean runtimeScaleMonitoringEnabled) {

            this.runtimeScaleMonitoringEnabled = runtimeScaleMonitoringEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder scmIpRestrictions(List<GetStandardSiteConfigScmIpRestriction> scmIpRestrictions) {
            if (scmIpRestrictions == null) {
              throw new MissingRequiredPropertyException("GetStandardSiteConfig", "scmIpRestrictions");
            }
            this.scmIpRestrictions = scmIpRestrictions;
            return this;
        }
        public Builder scmIpRestrictions(GetStandardSiteConfigScmIpRestriction... scmIpRestrictions) {
            return scmIpRestrictions(List.of(scmIpRestrictions));
        }
        @CustomType.Setter
        public Builder scmMinTlsVersion(String scmMinTlsVersion) {
            if (scmMinTlsVersion == null) {
              throw new MissingRequiredPropertyException("GetStandardSiteConfig", "scmMinTlsVersion");
            }
            this.scmMinTlsVersion = scmMinTlsVersion;
            return this;
        }
        @CustomType.Setter
        public Builder scmType(String scmType) {
            if (scmType == null) {
              throw new MissingRequiredPropertyException("GetStandardSiteConfig", "scmType");
            }
            this.scmType = scmType;
            return this;
        }
        @CustomType.Setter
        public Builder scmUseMainIpRestriction(@Nullable Boolean scmUseMainIpRestriction) {

            this.scmUseMainIpRestriction = scmUseMainIpRestriction;
            return this;
        }
        @CustomType.Setter
        public Builder use32BitWorkerProcess(@Nullable Boolean use32BitWorkerProcess) {

            this.use32BitWorkerProcess = use32BitWorkerProcess;
            return this;
        }
        @CustomType.Setter
        public Builder vnetRouteAllEnabled(Boolean vnetRouteAllEnabled) {
            if (vnetRouteAllEnabled == null) {
              throw new MissingRequiredPropertyException("GetStandardSiteConfig", "vnetRouteAllEnabled");
            }
            this.vnetRouteAllEnabled = vnetRouteAllEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder websocketsEnabled(@Nullable Boolean websocketsEnabled) {

            this.websocketsEnabled = websocketsEnabled;
            return this;
        }
        public GetStandardSiteConfig build() {
            final var _resultValue = new GetStandardSiteConfig();
            _resultValue.alwaysOn = alwaysOn;
            _resultValue.appScaleLimit = appScaleLimit;
            _resultValue.autoSwapSlotName = autoSwapSlotName;
            _resultValue.cors = cors;
            _resultValue.dotnetFrameworkVersion = dotnetFrameworkVersion;
            _resultValue.elasticInstanceMinimum = elasticInstanceMinimum;
            _resultValue.ftpsState = ftpsState;
            _resultValue.healthCheckPath = healthCheckPath;
            _resultValue.http2Enabled = http2Enabled;
            _resultValue.ipRestrictions = ipRestrictions;
            _resultValue.linuxFxVersion = linuxFxVersion;
            _resultValue.minTlsVersion = minTlsVersion;
            _resultValue.preWarmedInstanceCount = preWarmedInstanceCount;
            _resultValue.publicNetworkAccessEnabled = publicNetworkAccessEnabled;
            _resultValue.runtimeScaleMonitoringEnabled = runtimeScaleMonitoringEnabled;
            _resultValue.scmIpRestrictions = scmIpRestrictions;
            _resultValue.scmMinTlsVersion = scmMinTlsVersion;
            _resultValue.scmType = scmType;
            _resultValue.scmUseMainIpRestriction = scmUseMainIpRestriction;
            _resultValue.use32BitWorkerProcess = use32BitWorkerProcess;
            _resultValue.vnetRouteAllEnabled = vnetRouteAllEnabled;
            _resultValue.websocketsEnabled = websocketsEnabled;
            return _resultValue;
        }
    }
}
