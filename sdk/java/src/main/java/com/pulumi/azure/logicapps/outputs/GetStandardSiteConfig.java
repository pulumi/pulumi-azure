// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.logicapps.outputs;

import com.pulumi.azure.logicapps.outputs.GetStandardSiteConfigCors;
import com.pulumi.azure.logicapps.outputs.GetStandardSiteConfigIpRestriction;
import com.pulumi.azure.logicapps.outputs.GetStandardSiteConfigScmIpRestriction;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetStandardSiteConfig {
    private @Nullable Boolean alwaysOn;
    private Integer appScaleLimit;
    private String autoSwapSlotName;
    private GetStandardSiteConfigCors cors;
    private @Nullable String dotnetFrameworkVersion;
    private Integer elasticInstanceMinimum;
    private String ftpsState;
    private @Nullable String healthCheckPath;
    private @Nullable Boolean http2Enabled;
    private List<GetStandardSiteConfigIpRestriction> ipRestrictions;
    private String linuxFxVersion;
    private String minTlsVersion;
    private Integer preWarmedInstanceCount;
    private @Nullable Boolean runtimeScaleMonitoringEnabled;
    private List<GetStandardSiteConfigScmIpRestriction> scmIpRestrictions;
    private String scmMinTlsVersion;
    private String scmType;
    private @Nullable Boolean scmUseMainIpRestriction;
    private @Nullable Boolean use32BitWorkerProcess;
    private Boolean vnetRouteAllEnabled;
    private @Nullable Boolean websocketsEnabled;

    private GetStandardSiteConfig() {}
    public Optional<Boolean> alwaysOn() {
        return Optional.ofNullable(this.alwaysOn);
    }
    public Integer appScaleLimit() {
        return this.appScaleLimit;
    }
    public String autoSwapSlotName() {
        return this.autoSwapSlotName;
    }
    public GetStandardSiteConfigCors cors() {
        return this.cors;
    }
    public Optional<String> dotnetFrameworkVersion() {
        return Optional.ofNullable(this.dotnetFrameworkVersion);
    }
    public Integer elasticInstanceMinimum() {
        return this.elasticInstanceMinimum;
    }
    public String ftpsState() {
        return this.ftpsState;
    }
    public Optional<String> healthCheckPath() {
        return Optional.ofNullable(this.healthCheckPath);
    }
    public Optional<Boolean> http2Enabled() {
        return Optional.ofNullable(this.http2Enabled);
    }
    public List<GetStandardSiteConfigIpRestriction> ipRestrictions() {
        return this.ipRestrictions;
    }
    public String linuxFxVersion() {
        return this.linuxFxVersion;
    }
    public String minTlsVersion() {
        return this.minTlsVersion;
    }
    public Integer preWarmedInstanceCount() {
        return this.preWarmedInstanceCount;
    }
    public Optional<Boolean> runtimeScaleMonitoringEnabled() {
        return Optional.ofNullable(this.runtimeScaleMonitoringEnabled);
    }
    public List<GetStandardSiteConfigScmIpRestriction> scmIpRestrictions() {
        return this.scmIpRestrictions;
    }
    public String scmMinTlsVersion() {
        return this.scmMinTlsVersion;
    }
    public String scmType() {
        return this.scmType;
    }
    public Optional<Boolean> scmUseMainIpRestriction() {
        return Optional.ofNullable(this.scmUseMainIpRestriction);
    }
    public Optional<Boolean> use32BitWorkerProcess() {
        return Optional.ofNullable(this.use32BitWorkerProcess);
    }
    public Boolean vnetRouteAllEnabled() {
        return this.vnetRouteAllEnabled;
    }
    public Optional<Boolean> websocketsEnabled() {
        return Optional.ofNullable(this.websocketsEnabled);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetStandardSiteConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean alwaysOn;
        private Integer appScaleLimit;
        private String autoSwapSlotName;
        private GetStandardSiteConfigCors cors;
        private @Nullable String dotnetFrameworkVersion;
        private Integer elasticInstanceMinimum;
        private String ftpsState;
        private @Nullable String healthCheckPath;
        private @Nullable Boolean http2Enabled;
        private List<GetStandardSiteConfigIpRestriction> ipRestrictions;
        private String linuxFxVersion;
        private String minTlsVersion;
        private Integer preWarmedInstanceCount;
        private @Nullable Boolean runtimeScaleMonitoringEnabled;
        private List<GetStandardSiteConfigScmIpRestriction> scmIpRestrictions;
        private String scmMinTlsVersion;
        private String scmType;
        private @Nullable Boolean scmUseMainIpRestriction;
        private @Nullable Boolean use32BitWorkerProcess;
        private Boolean vnetRouteAllEnabled;
        private @Nullable Boolean websocketsEnabled;
        public Builder() {}
        public Builder(GetStandardSiteConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alwaysOn = defaults.alwaysOn;
    	      this.appScaleLimit = defaults.appScaleLimit;
    	      this.autoSwapSlotName = defaults.autoSwapSlotName;
    	      this.cors = defaults.cors;
    	      this.dotnetFrameworkVersion = defaults.dotnetFrameworkVersion;
    	      this.elasticInstanceMinimum = defaults.elasticInstanceMinimum;
    	      this.ftpsState = defaults.ftpsState;
    	      this.healthCheckPath = defaults.healthCheckPath;
    	      this.http2Enabled = defaults.http2Enabled;
    	      this.ipRestrictions = defaults.ipRestrictions;
    	      this.linuxFxVersion = defaults.linuxFxVersion;
    	      this.minTlsVersion = defaults.minTlsVersion;
    	      this.preWarmedInstanceCount = defaults.preWarmedInstanceCount;
    	      this.runtimeScaleMonitoringEnabled = defaults.runtimeScaleMonitoringEnabled;
    	      this.scmIpRestrictions = defaults.scmIpRestrictions;
    	      this.scmMinTlsVersion = defaults.scmMinTlsVersion;
    	      this.scmType = defaults.scmType;
    	      this.scmUseMainIpRestriction = defaults.scmUseMainIpRestriction;
    	      this.use32BitWorkerProcess = defaults.use32BitWorkerProcess;
    	      this.vnetRouteAllEnabled = defaults.vnetRouteAllEnabled;
    	      this.websocketsEnabled = defaults.websocketsEnabled;
        }

        @CustomType.Setter
        public Builder alwaysOn(@Nullable Boolean alwaysOn) {
            this.alwaysOn = alwaysOn;
            return this;
        }
        @CustomType.Setter
        public Builder appScaleLimit(Integer appScaleLimit) {
            this.appScaleLimit = Objects.requireNonNull(appScaleLimit);
            return this;
        }
        @CustomType.Setter
        public Builder autoSwapSlotName(String autoSwapSlotName) {
            this.autoSwapSlotName = Objects.requireNonNull(autoSwapSlotName);
            return this;
        }
        @CustomType.Setter
        public Builder cors(GetStandardSiteConfigCors cors) {
            this.cors = Objects.requireNonNull(cors);
            return this;
        }
        @CustomType.Setter
        public Builder dotnetFrameworkVersion(@Nullable String dotnetFrameworkVersion) {
            this.dotnetFrameworkVersion = dotnetFrameworkVersion;
            return this;
        }
        @CustomType.Setter
        public Builder elasticInstanceMinimum(Integer elasticInstanceMinimum) {
            this.elasticInstanceMinimum = Objects.requireNonNull(elasticInstanceMinimum);
            return this;
        }
        @CustomType.Setter
        public Builder ftpsState(String ftpsState) {
            this.ftpsState = Objects.requireNonNull(ftpsState);
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckPath(@Nullable String healthCheckPath) {
            this.healthCheckPath = healthCheckPath;
            return this;
        }
        @CustomType.Setter
        public Builder http2Enabled(@Nullable Boolean http2Enabled) {
            this.http2Enabled = http2Enabled;
            return this;
        }
        @CustomType.Setter
        public Builder ipRestrictions(List<GetStandardSiteConfigIpRestriction> ipRestrictions) {
            this.ipRestrictions = Objects.requireNonNull(ipRestrictions);
            return this;
        }
        public Builder ipRestrictions(GetStandardSiteConfigIpRestriction... ipRestrictions) {
            return ipRestrictions(List.of(ipRestrictions));
        }
        @CustomType.Setter
        public Builder linuxFxVersion(String linuxFxVersion) {
            this.linuxFxVersion = Objects.requireNonNull(linuxFxVersion);
            return this;
        }
        @CustomType.Setter
        public Builder minTlsVersion(String minTlsVersion) {
            this.minTlsVersion = Objects.requireNonNull(minTlsVersion);
            return this;
        }
        @CustomType.Setter
        public Builder preWarmedInstanceCount(Integer preWarmedInstanceCount) {
            this.preWarmedInstanceCount = Objects.requireNonNull(preWarmedInstanceCount);
            return this;
        }
        @CustomType.Setter
        public Builder runtimeScaleMonitoringEnabled(@Nullable Boolean runtimeScaleMonitoringEnabled) {
            this.runtimeScaleMonitoringEnabled = runtimeScaleMonitoringEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder scmIpRestrictions(List<GetStandardSiteConfigScmIpRestriction> scmIpRestrictions) {
            this.scmIpRestrictions = Objects.requireNonNull(scmIpRestrictions);
            return this;
        }
        public Builder scmIpRestrictions(GetStandardSiteConfigScmIpRestriction... scmIpRestrictions) {
            return scmIpRestrictions(List.of(scmIpRestrictions));
        }
        @CustomType.Setter
        public Builder scmMinTlsVersion(String scmMinTlsVersion) {
            this.scmMinTlsVersion = Objects.requireNonNull(scmMinTlsVersion);
            return this;
        }
        @CustomType.Setter
        public Builder scmType(String scmType) {
            this.scmType = Objects.requireNonNull(scmType);
            return this;
        }
        @CustomType.Setter
        public Builder scmUseMainIpRestriction(@Nullable Boolean scmUseMainIpRestriction) {
            this.scmUseMainIpRestriction = scmUseMainIpRestriction;
            return this;
        }
        @CustomType.Setter
        public Builder use32BitWorkerProcess(@Nullable Boolean use32BitWorkerProcess) {
            this.use32BitWorkerProcess = use32BitWorkerProcess;
            return this;
        }
        @CustomType.Setter
        public Builder vnetRouteAllEnabled(Boolean vnetRouteAllEnabled) {
            this.vnetRouteAllEnabled = Objects.requireNonNull(vnetRouteAllEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder websocketsEnabled(@Nullable Boolean websocketsEnabled) {
            this.websocketsEnabled = websocketsEnabled;
            return this;
        }
        public GetStandardSiteConfig build() {
            final var _resultValue = new GetStandardSiteConfig();
            _resultValue.alwaysOn = alwaysOn;
            _resultValue.appScaleLimit = appScaleLimit;
            _resultValue.autoSwapSlotName = autoSwapSlotName;
            _resultValue.cors = cors;
            _resultValue.dotnetFrameworkVersion = dotnetFrameworkVersion;
            _resultValue.elasticInstanceMinimum = elasticInstanceMinimum;
            _resultValue.ftpsState = ftpsState;
            _resultValue.healthCheckPath = healthCheckPath;
            _resultValue.http2Enabled = http2Enabled;
            _resultValue.ipRestrictions = ipRestrictions;
            _resultValue.linuxFxVersion = linuxFxVersion;
            _resultValue.minTlsVersion = minTlsVersion;
            _resultValue.preWarmedInstanceCount = preWarmedInstanceCount;
            _resultValue.runtimeScaleMonitoringEnabled = runtimeScaleMonitoringEnabled;
            _resultValue.scmIpRestrictions = scmIpRestrictions;
            _resultValue.scmMinTlsVersion = scmMinTlsVersion;
            _resultValue.scmType = scmType;
            _resultValue.scmUseMainIpRestriction = scmUseMainIpRestriction;
            _resultValue.use32BitWorkerProcess = use32BitWorkerProcess;
            _resultValue.vnetRouteAllEnabled = vnetRouteAllEnabled;
            _resultValue.websocketsEnabled = websocketsEnabled;
            return _resultValue;
        }
    }
}
