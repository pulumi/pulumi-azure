// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.eventhub.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EventHubRetentionDescriptionArgs extends com.pulumi.resources.ResourceArgs {

    public static final EventHubRetentionDescriptionArgs Empty = new EventHubRetentionDescriptionArgs();

    /**
     * Specifies the Cleanup Policy for the EventHub. Possible values are `Delete` and `Compact`.
     * 
     */
    @Import(name="cleanupPolicy", required=true)
    private Output<String> cleanupPolicy;

    /**
     * @return Specifies the Cleanup Policy for the EventHub. Possible values are `Delete` and `Compact`.
     * 
     */
    public Output<String> cleanupPolicy() {
        return this.cleanupPolicy;
    }

    /**
     * Specifies the number of hours to retain the events for this Event Hub. The value is only used when `cleanup_policy` is `Delete`.
     * 
     */
    @Import(name="retentionTimeInHours")
    private @Nullable Output<Integer> retentionTimeInHours;

    /**
     * @return Specifies the number of hours to retain the events for this Event Hub. The value is only used when `cleanup_policy` is `Delete`.
     * 
     */
    public Optional<Output<Integer>> retentionTimeInHours() {
        return Optional.ofNullable(this.retentionTimeInHours);
    }

    /**
     * Specifies the number of hours to retain the tombstones markers of a compacted Event Hub. The value is only used when `cleanup_policy` is `Compact`.
     * 
     */
    @Import(name="tombstoneRetentionTimeInHours")
    private @Nullable Output<Integer> tombstoneRetentionTimeInHours;

    /**
     * @return Specifies the number of hours to retain the tombstones markers of a compacted Event Hub. The value is only used when `cleanup_policy` is `Compact`.
     * 
     */
    public Optional<Output<Integer>> tombstoneRetentionTimeInHours() {
        return Optional.ofNullable(this.tombstoneRetentionTimeInHours);
    }

    private EventHubRetentionDescriptionArgs() {}

    private EventHubRetentionDescriptionArgs(EventHubRetentionDescriptionArgs $) {
        this.cleanupPolicy = $.cleanupPolicy;
        this.retentionTimeInHours = $.retentionTimeInHours;
        this.tombstoneRetentionTimeInHours = $.tombstoneRetentionTimeInHours;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EventHubRetentionDescriptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EventHubRetentionDescriptionArgs $;

        public Builder() {
            $ = new EventHubRetentionDescriptionArgs();
        }

        public Builder(EventHubRetentionDescriptionArgs defaults) {
            $ = new EventHubRetentionDescriptionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cleanupPolicy Specifies the Cleanup Policy for the EventHub. Possible values are `Delete` and `Compact`.
         * 
         * @return builder
         * 
         */
        public Builder cleanupPolicy(Output<String> cleanupPolicy) {
            $.cleanupPolicy = cleanupPolicy;
            return this;
        }

        /**
         * @param cleanupPolicy Specifies the Cleanup Policy for the EventHub. Possible values are `Delete` and `Compact`.
         * 
         * @return builder
         * 
         */
        public Builder cleanupPolicy(String cleanupPolicy) {
            return cleanupPolicy(Output.of(cleanupPolicy));
        }

        /**
         * @param retentionTimeInHours Specifies the number of hours to retain the events for this Event Hub. The value is only used when `cleanup_policy` is `Delete`.
         * 
         * @return builder
         * 
         */
        public Builder retentionTimeInHours(@Nullable Output<Integer> retentionTimeInHours) {
            $.retentionTimeInHours = retentionTimeInHours;
            return this;
        }

        /**
         * @param retentionTimeInHours Specifies the number of hours to retain the events for this Event Hub. The value is only used when `cleanup_policy` is `Delete`.
         * 
         * @return builder
         * 
         */
        public Builder retentionTimeInHours(Integer retentionTimeInHours) {
            return retentionTimeInHours(Output.of(retentionTimeInHours));
        }

        /**
         * @param tombstoneRetentionTimeInHours Specifies the number of hours to retain the tombstones markers of a compacted Event Hub. The value is only used when `cleanup_policy` is `Compact`.
         * 
         * @return builder
         * 
         */
        public Builder tombstoneRetentionTimeInHours(@Nullable Output<Integer> tombstoneRetentionTimeInHours) {
            $.tombstoneRetentionTimeInHours = tombstoneRetentionTimeInHours;
            return this;
        }

        /**
         * @param tombstoneRetentionTimeInHours Specifies the number of hours to retain the tombstones markers of a compacted Event Hub. The value is only used when `cleanup_policy` is `Compact`.
         * 
         * @return builder
         * 
         */
        public Builder tombstoneRetentionTimeInHours(Integer tombstoneRetentionTimeInHours) {
            return tombstoneRetentionTimeInHours(Output.of(tombstoneRetentionTimeInHours));
        }

        public EventHubRetentionDescriptionArgs build() {
            if ($.cleanupPolicy == null) {
                throw new MissingRequiredPropertyException("EventHubRetentionDescriptionArgs", "cleanupPolicy");
            }
            return $;
        }
    }

}
