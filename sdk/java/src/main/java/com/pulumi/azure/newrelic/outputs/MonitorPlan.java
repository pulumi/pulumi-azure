// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.newrelic.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class MonitorPlan {
    /**
     * @return Specifies the billing cycles. Possible values are `MONTHLY`, `WEEKLY` and `YEARLY`. Defaults to `MONTHLY`. Changing this forces a new Azure Native New Relic Monitor to be created.
     * 
     */
    private @Nullable String billingCycle;
    /**
     * @return Specifies the date when plan was applied. Changing this forces a new Azure Native New Relic Monitor to be created.
     * 
     */
    private String effectiveDate;
    /**
     * @return Specifies the plan id published by NewRelic. The only possible value is `newrelic-pay-as-you-go-free-live`. Defaults to `newrelic-pay-as-you-go-free-live`. Changing this forces a new Azure Native New Relic Monitor to be created.
     * 
     */
    private @Nullable String planId;
    /**
     * @return Specifies the usage type. Possible values are `COMMITTED` and `PAYG`. Defaults to `PAYG`. Changing this forces a new Azure Native New Relic Monitor to be created.
     * 
     */
    private @Nullable String usageType;

    private MonitorPlan() {}
    /**
     * @return Specifies the billing cycles. Possible values are `MONTHLY`, `WEEKLY` and `YEARLY`. Defaults to `MONTHLY`. Changing this forces a new Azure Native New Relic Monitor to be created.
     * 
     */
    public Optional<String> billingCycle() {
        return Optional.ofNullable(this.billingCycle);
    }
    /**
     * @return Specifies the date when plan was applied. Changing this forces a new Azure Native New Relic Monitor to be created.
     * 
     */
    public String effectiveDate() {
        return this.effectiveDate;
    }
    /**
     * @return Specifies the plan id published by NewRelic. The only possible value is `newrelic-pay-as-you-go-free-live`. Defaults to `newrelic-pay-as-you-go-free-live`. Changing this forces a new Azure Native New Relic Monitor to be created.
     * 
     */
    public Optional<String> planId() {
        return Optional.ofNullable(this.planId);
    }
    /**
     * @return Specifies the usage type. Possible values are `COMMITTED` and `PAYG`. Defaults to `PAYG`. Changing this forces a new Azure Native New Relic Monitor to be created.
     * 
     */
    public Optional<String> usageType() {
        return Optional.ofNullable(this.usageType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MonitorPlan defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String billingCycle;
        private String effectiveDate;
        private @Nullable String planId;
        private @Nullable String usageType;
        public Builder() {}
        public Builder(MonitorPlan defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.billingCycle = defaults.billingCycle;
    	      this.effectiveDate = defaults.effectiveDate;
    	      this.planId = defaults.planId;
    	      this.usageType = defaults.usageType;
        }

        @CustomType.Setter
        public Builder billingCycle(@Nullable String billingCycle) {

            this.billingCycle = billingCycle;
            return this;
        }
        @CustomType.Setter
        public Builder effectiveDate(String effectiveDate) {
            if (effectiveDate == null) {
              throw new MissingRequiredPropertyException("MonitorPlan", "effectiveDate");
            }
            this.effectiveDate = effectiveDate;
            return this;
        }
        @CustomType.Setter
        public Builder planId(@Nullable String planId) {

            this.planId = planId;
            return this;
        }
        @CustomType.Setter
        public Builder usageType(@Nullable String usageType) {

            this.usageType = usageType;
            return this;
        }
        public MonitorPlan build() {
            final var _resultValue = new MonitorPlan();
            _resultValue.billingCycle = billingCycle;
            _resultValue.effectiveDate = effectiveDate;
            _resultValue.planId = planId;
            _resultValue.usageType = usageType;
            return _resultValue;
        }
    }
}
