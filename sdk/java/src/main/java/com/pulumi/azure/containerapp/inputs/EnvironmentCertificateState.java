// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerapp.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EnvironmentCertificateState extends com.pulumi.resources.ResourceArgs {

    public static final EnvironmentCertificateState Empty = new EnvironmentCertificateState();

    /**
     * The Certificate Private Key as a base64 encoded PFX or PEM. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="certificateBlobBase64")
    private @Nullable Output<String> certificateBlobBase64;

    /**
     * @return The Certificate Private Key as a base64 encoded PFX or PEM. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> certificateBlobBase64() {
        return Optional.ofNullable(this.certificateBlobBase64);
    }

    /**
     * The password for the Certificate. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="certificatePassword")
    private @Nullable Output<String> certificatePassword;

    /**
     * @return The password for the Certificate. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> certificatePassword() {
        return Optional.ofNullable(this.certificatePassword);
    }

    /**
     * The Container App Managed Environment ID to configure this Certificate on. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="containerAppEnvironmentId")
    private @Nullable Output<String> containerAppEnvironmentId;

    /**
     * @return The Container App Managed Environment ID to configure this Certificate on. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> containerAppEnvironmentId() {
        return Optional.ofNullable(this.containerAppEnvironmentId);
    }

    /**
     * The expiration date for the Certificate.
     * 
     */
    @Import(name="expirationDate")
    private @Nullable Output<String> expirationDate;

    /**
     * @return The expiration date for the Certificate.
     * 
     */
    public Optional<Output<String>> expirationDate() {
        return Optional.ofNullable(this.expirationDate);
    }

    /**
     * The date of issue for the Certificate.
     * 
     */
    @Import(name="issueDate")
    private @Nullable Output<String> issueDate;

    /**
     * @return The date of issue for the Certificate.
     * 
     */
    public Optional<Output<String>> issueDate() {
        return Optional.ofNullable(this.issueDate);
    }

    /**
     * The Certificate Issuer.
     * 
     */
    @Import(name="issuer")
    private @Nullable Output<String> issuer;

    /**
     * @return The Certificate Issuer.
     * 
     */
    public Optional<Output<String>> issuer() {
        return Optional.ofNullable(this.issuer);
    }

    /**
     * The name of the Container Apps Environment Certificate. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the Container Apps Environment Certificate. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The Subject Name for the Certificate.
     * 
     */
    @Import(name="subjectName")
    private @Nullable Output<String> subjectName;

    /**
     * @return The Subject Name for the Certificate.
     * 
     */
    public Optional<Output<String>> subjectName() {
        return Optional.ofNullable(this.subjectName);
    }

    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The Thumbprint of the Certificate.
     * 
     */
    @Import(name="thumbprint")
    private @Nullable Output<String> thumbprint;

    /**
     * @return The Thumbprint of the Certificate.
     * 
     */
    public Optional<Output<String>> thumbprint() {
        return Optional.ofNullable(this.thumbprint);
    }

    private EnvironmentCertificateState() {}

    private EnvironmentCertificateState(EnvironmentCertificateState $) {
        this.certificateBlobBase64 = $.certificateBlobBase64;
        this.certificatePassword = $.certificatePassword;
        this.containerAppEnvironmentId = $.containerAppEnvironmentId;
        this.expirationDate = $.expirationDate;
        this.issueDate = $.issueDate;
        this.issuer = $.issuer;
        this.name = $.name;
        this.subjectName = $.subjectName;
        this.tags = $.tags;
        this.thumbprint = $.thumbprint;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EnvironmentCertificateState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EnvironmentCertificateState $;

        public Builder() {
            $ = new EnvironmentCertificateState();
        }

        public Builder(EnvironmentCertificateState defaults) {
            $ = new EnvironmentCertificateState(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateBlobBase64 The Certificate Private Key as a base64 encoded PFX or PEM. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder certificateBlobBase64(@Nullable Output<String> certificateBlobBase64) {
            $.certificateBlobBase64 = certificateBlobBase64;
            return this;
        }

        /**
         * @param certificateBlobBase64 The Certificate Private Key as a base64 encoded PFX or PEM. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder certificateBlobBase64(String certificateBlobBase64) {
            return certificateBlobBase64(Output.of(certificateBlobBase64));
        }

        /**
         * @param certificatePassword The password for the Certificate. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder certificatePassword(@Nullable Output<String> certificatePassword) {
            $.certificatePassword = certificatePassword;
            return this;
        }

        /**
         * @param certificatePassword The password for the Certificate. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder certificatePassword(String certificatePassword) {
            return certificatePassword(Output.of(certificatePassword));
        }

        /**
         * @param containerAppEnvironmentId The Container App Managed Environment ID to configure this Certificate on. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder containerAppEnvironmentId(@Nullable Output<String> containerAppEnvironmentId) {
            $.containerAppEnvironmentId = containerAppEnvironmentId;
            return this;
        }

        /**
         * @param containerAppEnvironmentId The Container App Managed Environment ID to configure this Certificate on. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder containerAppEnvironmentId(String containerAppEnvironmentId) {
            return containerAppEnvironmentId(Output.of(containerAppEnvironmentId));
        }

        /**
         * @param expirationDate The expiration date for the Certificate.
         * 
         * @return builder
         * 
         */
        public Builder expirationDate(@Nullable Output<String> expirationDate) {
            $.expirationDate = expirationDate;
            return this;
        }

        /**
         * @param expirationDate The expiration date for the Certificate.
         * 
         * @return builder
         * 
         */
        public Builder expirationDate(String expirationDate) {
            return expirationDate(Output.of(expirationDate));
        }

        /**
         * @param issueDate The date of issue for the Certificate.
         * 
         * @return builder
         * 
         */
        public Builder issueDate(@Nullable Output<String> issueDate) {
            $.issueDate = issueDate;
            return this;
        }

        /**
         * @param issueDate The date of issue for the Certificate.
         * 
         * @return builder
         * 
         */
        public Builder issueDate(String issueDate) {
            return issueDate(Output.of(issueDate));
        }

        /**
         * @param issuer The Certificate Issuer.
         * 
         * @return builder
         * 
         */
        public Builder issuer(@Nullable Output<String> issuer) {
            $.issuer = issuer;
            return this;
        }

        /**
         * @param issuer The Certificate Issuer.
         * 
         * @return builder
         * 
         */
        public Builder issuer(String issuer) {
            return issuer(Output.of(issuer));
        }

        /**
         * @param name The name of the Container Apps Environment Certificate. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Container Apps Environment Certificate. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param subjectName The Subject Name for the Certificate.
         * 
         * @return builder
         * 
         */
        public Builder subjectName(@Nullable Output<String> subjectName) {
            $.subjectName = subjectName;
            return this;
        }

        /**
         * @param subjectName The Subject Name for the Certificate.
         * 
         * @return builder
         * 
         */
        public Builder subjectName(String subjectName) {
            return subjectName(Output.of(subjectName));
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param thumbprint The Thumbprint of the Certificate.
         * 
         * @return builder
         * 
         */
        public Builder thumbprint(@Nullable Output<String> thumbprint) {
            $.thumbprint = thumbprint;
            return this;
        }

        /**
         * @param thumbprint The Thumbprint of the Certificate.
         * 
         * @return builder
         * 
         */
        public Builder thumbprint(String thumbprint) {
            return thumbprint(Output.of(thumbprint));
        }

        public EnvironmentCertificateState build() {
            return $;
        }
    }

}
