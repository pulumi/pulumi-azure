// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.keyvault.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KeyState extends com.pulumi.resources.ResourceArgs {

    public static final KeyState Empty = new KeyState();

    /**
     * Specifies the curve to use when creating an `EC` key. Possible values are `P-256`, `P-256K`, `P-384`, and `P-521`. This field will be required in a future release if `key_type` is `EC` or `EC-HSM`. The API will default to `P-256` if nothing is specified. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="curve")
    private @Nullable Output<String> curve;

    /**
     * @return Specifies the curve to use when creating an `EC` key. Possible values are `P-256`, `P-256K`, `P-384`, and `P-521`. This field will be required in a future release if `key_type` is `EC` or `EC-HSM`. The API will default to `P-256` if nothing is specified. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> curve() {
        return Optional.ofNullable(this.curve);
    }

    /**
     * The RSA public exponent of this Key Vault Key.
     * 
     */
    @Import(name="e")
    private @Nullable Output<String> e;

    /**
     * @return The RSA public exponent of this Key Vault Key.
     * 
     */
    public Optional<Output<String>> e() {
        return Optional.ofNullable(this.e);
    }

    /**
     * Expiration UTC datetime (Y-m-d&#39;T&#39;H:M:S&#39;Z&#39;).
     * 
     */
    @Import(name="expirationDate")
    private @Nullable Output<String> expirationDate;

    /**
     * @return Expiration UTC datetime (Y-m-d&#39;T&#39;H:M:S&#39;Z&#39;).
     * 
     */
    public Optional<Output<String>> expirationDate() {
        return Optional.ofNullable(this.expirationDate);
    }

    /**
     * A list of JSON web key operations. Possible values include: `decrypt`, `encrypt`, `sign`, `unwrapKey`, `verify` and `wrapKey`. Please note these values are case sensitive.
     * 
     */
    @Import(name="keyOpts")
    private @Nullable Output<List<String>> keyOpts;

    /**
     * @return A list of JSON web key operations. Possible values include: `decrypt`, `encrypt`, `sign`, `unwrapKey`, `verify` and `wrapKey`. Please note these values are case sensitive.
     * 
     */
    public Optional<Output<List<String>>> keyOpts() {
        return Optional.ofNullable(this.keyOpts);
    }

    /**
     * Specifies the Size of the RSA key to create in bytes. For example, 1024 or 2048. *Note*: This field is required if `key_type` is `RSA` or `RSA-HSM`. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="keySize")
    private @Nullable Output<Integer> keySize;

    /**
     * @return Specifies the Size of the RSA key to create in bytes. For example, 1024 or 2048. *Note*: This field is required if `key_type` is `RSA` or `RSA-HSM`. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<Integer>> keySize() {
        return Optional.ofNullable(this.keySize);
    }

    /**
     * Specifies the Key Type to use for this Key Vault Key. Possible values are `EC` (Elliptic Curve), `EC-HSM`, `Oct` (Octet), `RSA` and `RSA-HSM`. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="keyType")
    private @Nullable Output<String> keyType;

    /**
     * @return Specifies the Key Type to use for this Key Vault Key. Possible values are `EC` (Elliptic Curve), `EC-HSM`, `Oct` (Octet), `RSA` and `RSA-HSM`. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> keyType() {
        return Optional.ofNullable(this.keyType);
    }

    /**
     * The ID of the Key Vault where the Key should be created. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="keyVaultId")
    private @Nullable Output<String> keyVaultId;

    /**
     * @return The ID of the Key Vault where the Key should be created. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> keyVaultId() {
        return Optional.ofNullable(this.keyVaultId);
    }

    /**
     * The RSA modulus of this Key Vault Key.
     * 
     */
    @Import(name="n")
    private @Nullable Output<String> n;

    /**
     * @return The RSA modulus of this Key Vault Key.
     * 
     */
    public Optional<Output<String>> n() {
        return Optional.ofNullable(this.n);
    }

    /**
     * Specifies the name of the Key Vault Key. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the name of the Key Vault Key. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Key not usable before the provided UTC datetime (Y-m-d&#39;T&#39;H:M:S&#39;Z&#39;).
     * 
     */
    @Import(name="notBeforeDate")
    private @Nullable Output<String> notBeforeDate;

    /**
     * @return Key not usable before the provided UTC datetime (Y-m-d&#39;T&#39;H:M:S&#39;Z&#39;).
     * 
     */
    public Optional<Output<String>> notBeforeDate() {
        return Optional.ofNullable(this.notBeforeDate);
    }

    /**
     * The OpenSSH encoded public key of this Key Vault Key.
     * 
     */
    @Import(name="publicKeyOpenssh")
    private @Nullable Output<String> publicKeyOpenssh;

    /**
     * @return The OpenSSH encoded public key of this Key Vault Key.
     * 
     */
    public Optional<Output<String>> publicKeyOpenssh() {
        return Optional.ofNullable(this.publicKeyOpenssh);
    }

    /**
     * The PEM encoded public key of this Key Vault Key.
     * 
     */
    @Import(name="publicKeyPem")
    private @Nullable Output<String> publicKeyPem;

    /**
     * @return The PEM encoded public key of this Key Vault Key.
     * 
     */
    public Optional<Output<String>> publicKeyPem() {
        return Optional.ofNullable(this.publicKeyPem);
    }

    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The current version of the Key Vault Key.
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return The current version of the Key Vault Key.
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    /**
     * The Base ID of the Key Vault Key.
     * 
     */
    @Import(name="versionlessId")
    private @Nullable Output<String> versionlessId;

    /**
     * @return The Base ID of the Key Vault Key.
     * 
     */
    public Optional<Output<String>> versionlessId() {
        return Optional.ofNullable(this.versionlessId);
    }

    /**
     * The EC X component of this Key Vault Key.
     * 
     */
    @Import(name="x")
    private @Nullable Output<String> x;

    /**
     * @return The EC X component of this Key Vault Key.
     * 
     */
    public Optional<Output<String>> x() {
        return Optional.ofNullable(this.x);
    }

    /**
     * The EC Y component of this Key Vault Key.
     * 
     */
    @Import(name="y")
    private @Nullable Output<String> y;

    /**
     * @return The EC Y component of this Key Vault Key.
     * 
     */
    public Optional<Output<String>> y() {
        return Optional.ofNullable(this.y);
    }

    private KeyState() {}

    private KeyState(KeyState $) {
        this.curve = $.curve;
        this.e = $.e;
        this.expirationDate = $.expirationDate;
        this.keyOpts = $.keyOpts;
        this.keySize = $.keySize;
        this.keyType = $.keyType;
        this.keyVaultId = $.keyVaultId;
        this.n = $.n;
        this.name = $.name;
        this.notBeforeDate = $.notBeforeDate;
        this.publicKeyOpenssh = $.publicKeyOpenssh;
        this.publicKeyPem = $.publicKeyPem;
        this.tags = $.tags;
        this.version = $.version;
        this.versionlessId = $.versionlessId;
        this.x = $.x;
        this.y = $.y;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KeyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KeyState $;

        public Builder() {
            $ = new KeyState();
        }

        public Builder(KeyState defaults) {
            $ = new KeyState(Objects.requireNonNull(defaults));
        }

        /**
         * @param curve Specifies the curve to use when creating an `EC` key. Possible values are `P-256`, `P-256K`, `P-384`, and `P-521`. This field will be required in a future release if `key_type` is `EC` or `EC-HSM`. The API will default to `P-256` if nothing is specified. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder curve(@Nullable Output<String> curve) {
            $.curve = curve;
            return this;
        }

        /**
         * @param curve Specifies the curve to use when creating an `EC` key. Possible values are `P-256`, `P-256K`, `P-384`, and `P-521`. This field will be required in a future release if `key_type` is `EC` or `EC-HSM`. The API will default to `P-256` if nothing is specified. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder curve(String curve) {
            return curve(Output.of(curve));
        }

        /**
         * @param e The RSA public exponent of this Key Vault Key.
         * 
         * @return builder
         * 
         */
        public Builder e(@Nullable Output<String> e) {
            $.e = e;
            return this;
        }

        /**
         * @param e The RSA public exponent of this Key Vault Key.
         * 
         * @return builder
         * 
         */
        public Builder e(String e) {
            return e(Output.of(e));
        }

        /**
         * @param expirationDate Expiration UTC datetime (Y-m-d&#39;T&#39;H:M:S&#39;Z&#39;).
         * 
         * @return builder
         * 
         */
        public Builder expirationDate(@Nullable Output<String> expirationDate) {
            $.expirationDate = expirationDate;
            return this;
        }

        /**
         * @param expirationDate Expiration UTC datetime (Y-m-d&#39;T&#39;H:M:S&#39;Z&#39;).
         * 
         * @return builder
         * 
         */
        public Builder expirationDate(String expirationDate) {
            return expirationDate(Output.of(expirationDate));
        }

        /**
         * @param keyOpts A list of JSON web key operations. Possible values include: `decrypt`, `encrypt`, `sign`, `unwrapKey`, `verify` and `wrapKey`. Please note these values are case sensitive.
         * 
         * @return builder
         * 
         */
        public Builder keyOpts(@Nullable Output<List<String>> keyOpts) {
            $.keyOpts = keyOpts;
            return this;
        }

        /**
         * @param keyOpts A list of JSON web key operations. Possible values include: `decrypt`, `encrypt`, `sign`, `unwrapKey`, `verify` and `wrapKey`. Please note these values are case sensitive.
         * 
         * @return builder
         * 
         */
        public Builder keyOpts(List<String> keyOpts) {
            return keyOpts(Output.of(keyOpts));
        }

        /**
         * @param keyOpts A list of JSON web key operations. Possible values include: `decrypt`, `encrypt`, `sign`, `unwrapKey`, `verify` and `wrapKey`. Please note these values are case sensitive.
         * 
         * @return builder
         * 
         */
        public Builder keyOpts(String... keyOpts) {
            return keyOpts(List.of(keyOpts));
        }

        /**
         * @param keySize Specifies the Size of the RSA key to create in bytes. For example, 1024 or 2048. *Note*: This field is required if `key_type` is `RSA` or `RSA-HSM`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder keySize(@Nullable Output<Integer> keySize) {
            $.keySize = keySize;
            return this;
        }

        /**
         * @param keySize Specifies the Size of the RSA key to create in bytes. For example, 1024 or 2048. *Note*: This field is required if `key_type` is `RSA` or `RSA-HSM`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder keySize(Integer keySize) {
            return keySize(Output.of(keySize));
        }

        /**
         * @param keyType Specifies the Key Type to use for this Key Vault Key. Possible values are `EC` (Elliptic Curve), `EC-HSM`, `Oct` (Octet), `RSA` and `RSA-HSM`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder keyType(@Nullable Output<String> keyType) {
            $.keyType = keyType;
            return this;
        }

        /**
         * @param keyType Specifies the Key Type to use for this Key Vault Key. Possible values are `EC` (Elliptic Curve), `EC-HSM`, `Oct` (Octet), `RSA` and `RSA-HSM`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder keyType(String keyType) {
            return keyType(Output.of(keyType));
        }

        /**
         * @param keyVaultId The ID of the Key Vault where the Key should be created. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultId(@Nullable Output<String> keyVaultId) {
            $.keyVaultId = keyVaultId;
            return this;
        }

        /**
         * @param keyVaultId The ID of the Key Vault where the Key should be created. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultId(String keyVaultId) {
            return keyVaultId(Output.of(keyVaultId));
        }

        /**
         * @param n The RSA modulus of this Key Vault Key.
         * 
         * @return builder
         * 
         */
        public Builder n(@Nullable Output<String> n) {
            $.n = n;
            return this;
        }

        /**
         * @param n The RSA modulus of this Key Vault Key.
         * 
         * @return builder
         * 
         */
        public Builder n(String n) {
            return n(Output.of(n));
        }

        /**
         * @param name Specifies the name of the Key Vault Key. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of the Key Vault Key. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param notBeforeDate Key not usable before the provided UTC datetime (Y-m-d&#39;T&#39;H:M:S&#39;Z&#39;).
         * 
         * @return builder
         * 
         */
        public Builder notBeforeDate(@Nullable Output<String> notBeforeDate) {
            $.notBeforeDate = notBeforeDate;
            return this;
        }

        /**
         * @param notBeforeDate Key not usable before the provided UTC datetime (Y-m-d&#39;T&#39;H:M:S&#39;Z&#39;).
         * 
         * @return builder
         * 
         */
        public Builder notBeforeDate(String notBeforeDate) {
            return notBeforeDate(Output.of(notBeforeDate));
        }

        /**
         * @param publicKeyOpenssh The OpenSSH encoded public key of this Key Vault Key.
         * 
         * @return builder
         * 
         */
        public Builder publicKeyOpenssh(@Nullable Output<String> publicKeyOpenssh) {
            $.publicKeyOpenssh = publicKeyOpenssh;
            return this;
        }

        /**
         * @param publicKeyOpenssh The OpenSSH encoded public key of this Key Vault Key.
         * 
         * @return builder
         * 
         */
        public Builder publicKeyOpenssh(String publicKeyOpenssh) {
            return publicKeyOpenssh(Output.of(publicKeyOpenssh));
        }

        /**
         * @param publicKeyPem The PEM encoded public key of this Key Vault Key.
         * 
         * @return builder
         * 
         */
        public Builder publicKeyPem(@Nullable Output<String> publicKeyPem) {
            $.publicKeyPem = publicKeyPem;
            return this;
        }

        /**
         * @param publicKeyPem The PEM encoded public key of this Key Vault Key.
         * 
         * @return builder
         * 
         */
        public Builder publicKeyPem(String publicKeyPem) {
            return publicKeyPem(Output.of(publicKeyPem));
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param version The current version of the Key Vault Key.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version The current version of the Key Vault Key.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        /**
         * @param versionlessId The Base ID of the Key Vault Key.
         * 
         * @return builder
         * 
         */
        public Builder versionlessId(@Nullable Output<String> versionlessId) {
            $.versionlessId = versionlessId;
            return this;
        }

        /**
         * @param versionlessId The Base ID of the Key Vault Key.
         * 
         * @return builder
         * 
         */
        public Builder versionlessId(String versionlessId) {
            return versionlessId(Output.of(versionlessId));
        }

        /**
         * @param x The EC X component of this Key Vault Key.
         * 
         * @return builder
         * 
         */
        public Builder x(@Nullable Output<String> x) {
            $.x = x;
            return this;
        }

        /**
         * @param x The EC X component of this Key Vault Key.
         * 
         * @return builder
         * 
         */
        public Builder x(String x) {
            return x(Output.of(x));
        }

        /**
         * @param y The EC Y component of this Key Vault Key.
         * 
         * @return builder
         * 
         */
        public Builder y(@Nullable Output<String> y) {
            $.y = y;
            return this;
        }

        /**
         * @param y The EC Y component of this Key Vault Key.
         * 
         * @return builder
         * 
         */
        public Builder y(String y) {
            return y(Output.of(y));
        }

        public KeyState build() {
            return $;
        }
    }

}
