// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.desktopvirtualization.outputs;

import com.pulumi.azure.desktopvirtualization.outputs.GetHostPoolScheduledAgentUpdate;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetHostPoolResult {
    /**
     * @return The custom RDP properties string for the Virtual Desktop Host Pool.
     * 
     */
    private String customRdpProperties;
    /**
     * @return The description for the Virtual Desktop Host Pool.
     * 
     */
    private String description;
    /**
     * @return The friendly name for the Virtual Desktop Host Pool.
     * 
     */
    private String friendlyName;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The type of load balancing performed by the Host Pool
     * 
     */
    private String loadBalancerType;
    /**
     * @return The location/region where the Virtual Desktop Host Pool is located.
     * 
     */
    private String location;
    /**
     * @return The maximum number of users that can have concurrent sessions on a session host.
     * 
     */
    private Integer maximumSessionsAllowed;
    private String name;
    /**
     * @return The type of personal desktop assignment in use by the Host Pool
     * 
     */
    private String personalDesktopAssignmentType;
    /**
     * @return The preferred Application Group type for the Virtual Desktop Host Pool.
     * 
     */
    private String preferredAppGroupType;
    private String resourceGroupName;
    /**
     * @return A `scheduled_agent_updates` block as defined below.
     * 
     */
    private List<GetHostPoolScheduledAgentUpdate> scheduledAgentUpdates;
    /**
     * @return Returns `true` if the Start VM on Connection Feature is enabled.
     * 
     */
    private Boolean startVmOnConnect;
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return The type of the Virtual Desktop Host Pool.
     * 
     */
    private String type;
    /**
     * @return Returns `true` if the Host Pool is in Validation mode.
     * 
     */
    private Boolean validateEnvironment;

    private GetHostPoolResult() {}
    /**
     * @return The custom RDP properties string for the Virtual Desktop Host Pool.
     * 
     */
    public String customRdpProperties() {
        return this.customRdpProperties;
    }
    /**
     * @return The description for the Virtual Desktop Host Pool.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The friendly name for the Virtual Desktop Host Pool.
     * 
     */
    public String friendlyName() {
        return this.friendlyName;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The type of load balancing performed by the Host Pool
     * 
     */
    public String loadBalancerType() {
        return this.loadBalancerType;
    }
    /**
     * @return The location/region where the Virtual Desktop Host Pool is located.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return The maximum number of users that can have concurrent sessions on a session host.
     * 
     */
    public Integer maximumSessionsAllowed() {
        return this.maximumSessionsAllowed;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return The type of personal desktop assignment in use by the Host Pool
     * 
     */
    public String personalDesktopAssignmentType() {
        return this.personalDesktopAssignmentType;
    }
    /**
     * @return The preferred Application Group type for the Virtual Desktop Host Pool.
     * 
     */
    public String preferredAppGroupType() {
        return this.preferredAppGroupType;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return A `scheduled_agent_updates` block as defined below.
     * 
     */
    public List<GetHostPoolScheduledAgentUpdate> scheduledAgentUpdates() {
        return this.scheduledAgentUpdates;
    }
    /**
     * @return Returns `true` if the Start VM on Connection Feature is enabled.
     * 
     */
    public Boolean startVmOnConnect() {
        return this.startVmOnConnect;
    }
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return The type of the Virtual Desktop Host Pool.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Returns `true` if the Host Pool is in Validation mode.
     * 
     */
    public Boolean validateEnvironment() {
        return this.validateEnvironment;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetHostPoolResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String customRdpProperties;
        private String description;
        private String friendlyName;
        private String id;
        private String loadBalancerType;
        private String location;
        private Integer maximumSessionsAllowed;
        private String name;
        private String personalDesktopAssignmentType;
        private String preferredAppGroupType;
        private String resourceGroupName;
        private List<GetHostPoolScheduledAgentUpdate> scheduledAgentUpdates;
        private Boolean startVmOnConnect;
        private Map<String,String> tags;
        private String type;
        private Boolean validateEnvironment;
        public Builder() {}
        public Builder(GetHostPoolResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.customRdpProperties = defaults.customRdpProperties;
    	      this.description = defaults.description;
    	      this.friendlyName = defaults.friendlyName;
    	      this.id = defaults.id;
    	      this.loadBalancerType = defaults.loadBalancerType;
    	      this.location = defaults.location;
    	      this.maximumSessionsAllowed = defaults.maximumSessionsAllowed;
    	      this.name = defaults.name;
    	      this.personalDesktopAssignmentType = defaults.personalDesktopAssignmentType;
    	      this.preferredAppGroupType = defaults.preferredAppGroupType;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.scheduledAgentUpdates = defaults.scheduledAgentUpdates;
    	      this.startVmOnConnect = defaults.startVmOnConnect;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.validateEnvironment = defaults.validateEnvironment;
        }

        @CustomType.Setter
        public Builder customRdpProperties(String customRdpProperties) {
            if (customRdpProperties == null) {
              throw new MissingRequiredPropertyException("GetHostPoolResult", "customRdpProperties");
            }
            this.customRdpProperties = customRdpProperties;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetHostPoolResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder friendlyName(String friendlyName) {
            if (friendlyName == null) {
              throw new MissingRequiredPropertyException("GetHostPoolResult", "friendlyName");
            }
            this.friendlyName = friendlyName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetHostPoolResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder loadBalancerType(String loadBalancerType) {
            if (loadBalancerType == null) {
              throw new MissingRequiredPropertyException("GetHostPoolResult", "loadBalancerType");
            }
            this.loadBalancerType = loadBalancerType;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetHostPoolResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder maximumSessionsAllowed(Integer maximumSessionsAllowed) {
            if (maximumSessionsAllowed == null) {
              throw new MissingRequiredPropertyException("GetHostPoolResult", "maximumSessionsAllowed");
            }
            this.maximumSessionsAllowed = maximumSessionsAllowed;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetHostPoolResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder personalDesktopAssignmentType(String personalDesktopAssignmentType) {
            if (personalDesktopAssignmentType == null) {
              throw new MissingRequiredPropertyException("GetHostPoolResult", "personalDesktopAssignmentType");
            }
            this.personalDesktopAssignmentType = personalDesktopAssignmentType;
            return this;
        }
        @CustomType.Setter
        public Builder preferredAppGroupType(String preferredAppGroupType) {
            if (preferredAppGroupType == null) {
              throw new MissingRequiredPropertyException("GetHostPoolResult", "preferredAppGroupType");
            }
            this.preferredAppGroupType = preferredAppGroupType;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            if (resourceGroupName == null) {
              throw new MissingRequiredPropertyException("GetHostPoolResult", "resourceGroupName");
            }
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder scheduledAgentUpdates(List<GetHostPoolScheduledAgentUpdate> scheduledAgentUpdates) {
            if (scheduledAgentUpdates == null) {
              throw new MissingRequiredPropertyException("GetHostPoolResult", "scheduledAgentUpdates");
            }
            this.scheduledAgentUpdates = scheduledAgentUpdates;
            return this;
        }
        public Builder scheduledAgentUpdates(GetHostPoolScheduledAgentUpdate... scheduledAgentUpdates) {
            return scheduledAgentUpdates(List.of(scheduledAgentUpdates));
        }
        @CustomType.Setter
        public Builder startVmOnConnect(Boolean startVmOnConnect) {
            if (startVmOnConnect == null) {
              throw new MissingRequiredPropertyException("GetHostPoolResult", "startVmOnConnect");
            }
            this.startVmOnConnect = startVmOnConnect;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetHostPoolResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetHostPoolResult", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder validateEnvironment(Boolean validateEnvironment) {
            if (validateEnvironment == null) {
              throw new MissingRequiredPropertyException("GetHostPoolResult", "validateEnvironment");
            }
            this.validateEnvironment = validateEnvironment;
            return this;
        }
        public GetHostPoolResult build() {
            final var _resultValue = new GetHostPoolResult();
            _resultValue.customRdpProperties = customRdpProperties;
            _resultValue.description = description;
            _resultValue.friendlyName = friendlyName;
            _resultValue.id = id;
            _resultValue.loadBalancerType = loadBalancerType;
            _resultValue.location = location;
            _resultValue.maximumSessionsAllowed = maximumSessionsAllowed;
            _resultValue.name = name;
            _resultValue.personalDesktopAssignmentType = personalDesktopAssignmentType;
            _resultValue.preferredAppGroupType = preferredAppGroupType;
            _resultValue.resourceGroupName = resourceGroupName;
            _resultValue.scheduledAgentUpdates = scheduledAgentUpdates;
            _resultValue.startVmOnConnect = startVmOnConnect;
            _resultValue.tags = tags;
            _resultValue.type = type;
            _resultValue.validateEnvironment = validateEnvironment;
            return _resultValue;
        }
    }
}
