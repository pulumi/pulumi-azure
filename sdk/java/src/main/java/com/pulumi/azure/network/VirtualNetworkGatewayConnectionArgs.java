// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network;

import com.pulumi.azure.network.inputs.VirtualNetworkGatewayConnectionCustomBgpAddressesArgs;
import com.pulumi.azure.network.inputs.VirtualNetworkGatewayConnectionIpsecPolicyArgs;
import com.pulumi.azure.network.inputs.VirtualNetworkGatewayConnectionTrafficSelectorPolicyArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VirtualNetworkGatewayConnectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final VirtualNetworkGatewayConnectionArgs Empty = new VirtualNetworkGatewayConnectionArgs();

    /**
     * The authorization key associated with the Express Route Circuit. This field is required only if the type is an ExpressRoute connection.
     * 
     */
    @Import(name="authorizationKey")
    private @Nullable Output<String> authorizationKey;

    /**
     * @return The authorization key associated with the Express Route Circuit. This field is required only if the type is an ExpressRoute connection.
     * 
     */
    public Optional<Output<String>> authorizationKey() {
        return Optional.ofNullable(this.authorizationKey);
    }

    /**
     * Connection mode to use. Possible values are `Default`, `InitiatorOnly` and `ResponderOnly`. Defaults to `Default`. Changing this value will force a resource to be created.
     * 
     */
    @Import(name="connectionMode")
    private @Nullable Output<String> connectionMode;

    /**
     * @return Connection mode to use. Possible values are `Default`, `InitiatorOnly` and `ResponderOnly`. Defaults to `Default`. Changing this value will force a resource to be created.
     * 
     */
    public Optional<Output<String>> connectionMode() {
        return Optional.ofNullable(this.connectionMode);
    }

    /**
     * The IKE protocol version to use. Possible values are `IKEv1` and `IKEv2`, values are `IKEv1` and `IKEv2`. Defaults to `IKEv2`. Changing this forces a new resource to be created.
     * &gt; **Note:** Only valid for `IPSec` connections on virtual network gateways with SKU `VpnGw1`, `VpnGw2`, `VpnGw3`, `VpnGw1AZ`, `VpnGw2AZ` or `VpnGw3AZ`.
     * 
     */
    @Import(name="connectionProtocol")
    private @Nullable Output<String> connectionProtocol;

    /**
     * @return The IKE protocol version to use. Possible values are `IKEv1` and `IKEv2`, values are `IKEv1` and `IKEv2`. Defaults to `IKEv2`. Changing this forces a new resource to be created.
     * &gt; **Note:** Only valid for `IPSec` connections on virtual network gateways with SKU `VpnGw1`, `VpnGw2`, `VpnGw3`, `VpnGw1AZ`, `VpnGw2AZ` or `VpnGw3AZ`.
     * 
     */
    public Optional<Output<String>> connectionProtocol() {
        return Optional.ofNullable(this.connectionProtocol);
    }

    /**
     * A `custom_bgp_addresses` block which is documented below.
     * The block can only be used on `IPSec` / `activeactive` connections,
     * For details about see [the relevant section in the Azure documentation](https://docs.microsoft.com/en-us/azure/vpn-gateway/vpn-gateway-howto-aws-bgp).
     * 
     */
    @Import(name="customBgpAddresses")
    private @Nullable Output<VirtualNetworkGatewayConnectionCustomBgpAddressesArgs> customBgpAddresses;

    /**
     * @return A `custom_bgp_addresses` block which is documented below.
     * The block can only be used on `IPSec` / `activeactive` connections,
     * For details about see [the relevant section in the Azure documentation](https://docs.microsoft.com/en-us/azure/vpn-gateway/vpn-gateway-howto-aws-bgp).
     * 
     */
    public Optional<Output<VirtualNetworkGatewayConnectionCustomBgpAddressesArgs>> customBgpAddresses() {
        return Optional.ofNullable(this.customBgpAddresses);
    }

    /**
     * The dead peer detection timeout of this connection in seconds. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="dpdTimeoutSeconds")
    private @Nullable Output<Integer> dpdTimeoutSeconds;

    /**
     * @return The dead peer detection timeout of this connection in seconds. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<Integer>> dpdTimeoutSeconds() {
        return Optional.ofNullable(this.dpdTimeoutSeconds);
    }

    /**
     * A list of the egress NAT Rule Ids.
     * 
     */
    @Import(name="egressNatRuleIds")
    private @Nullable Output<List<String>> egressNatRuleIds;

    /**
     * @return A list of the egress NAT Rule Ids.
     * 
     */
    public Optional<Output<List<String>>> egressNatRuleIds() {
        return Optional.ofNullable(this.egressNatRuleIds);
    }

    /**
     * If `true`, BGP (Border Gateway Protocol) is enabled for this connection. Defaults to `false`.
     * 
     */
    @Import(name="enableBgp")
    private @Nullable Output<Boolean> enableBgp;

    /**
     * @return If `true`, BGP (Border Gateway Protocol) is enabled for this connection. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> enableBgp() {
        return Optional.ofNullable(this.enableBgp);
    }

    /**
     * The ID of the Express Route Circuit when creating an ExpressRoute connection (i.e. when `type` is `ExpressRoute`). The Express Route Circuit can be in the same or in a different subscription. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="expressRouteCircuitId")
    private @Nullable Output<String> expressRouteCircuitId;

    /**
     * @return The ID of the Express Route Circuit when creating an ExpressRoute connection (i.e. when `type` is `ExpressRoute`). The Express Route Circuit can be in the same or in a different subscription. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> expressRouteCircuitId() {
        return Optional.ofNullable(this.expressRouteCircuitId);
    }

    /**
     * If `true`, data packets will bypass ExpressRoute Gateway for data forwarding This is only valid for ExpressRoute connections.
     * 
     */
    @Import(name="expressRouteGatewayBypass")
    private @Nullable Output<Boolean> expressRouteGatewayBypass;

    /**
     * @return If `true`, data packets will bypass ExpressRoute Gateway for data forwarding This is only valid for ExpressRoute connections.
     * 
     */
    public Optional<Output<Boolean>> expressRouteGatewayBypass() {
        return Optional.ofNullable(this.expressRouteGatewayBypass);
    }

    /**
     * A list of the ingress NAT Rule Ids.
     * 
     */
    @Import(name="ingressNatRuleIds")
    private @Nullable Output<List<String>> ingressNatRuleIds;

    /**
     * @return A list of the ingress NAT Rule Ids.
     * 
     */
    public Optional<Output<List<String>>> ingressNatRuleIds() {
        return Optional.ofNullable(this.ingressNatRuleIds);
    }

    /**
     * A `ipsec_policy` block which is documented below.
     * Only a single policy can be defined for a connection. For details on
     * custom policies refer to [the relevant section in the Azure documentation](https://docs.microsoft.com/azure/vpn-gateway/vpn-gateway-ipsecikepolicy-rm-powershell).
     * 
     */
    @Import(name="ipsecPolicy")
    private @Nullable Output<VirtualNetworkGatewayConnectionIpsecPolicyArgs> ipsecPolicy;

    /**
     * @return A `ipsec_policy` block which is documented below.
     * Only a single policy can be defined for a connection. For details on
     * custom policies refer to [the relevant section in the Azure documentation](https://docs.microsoft.com/azure/vpn-gateway/vpn-gateway-ipsecikepolicy-rm-powershell).
     * 
     */
    public Optional<Output<VirtualNetworkGatewayConnectionIpsecPolicyArgs>> ipsecPolicy() {
        return Optional.ofNullable(this.ipsecPolicy);
    }

    /**
     * Use private local Azure IP for the connection. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="localAzureIpAddressEnabled")
    private @Nullable Output<Boolean> localAzureIpAddressEnabled;

    /**
     * @return Use private local Azure IP for the connection. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<Boolean>> localAzureIpAddressEnabled() {
        return Optional.ofNullable(this.localAzureIpAddressEnabled);
    }

    /**
     * The ID of the local network gateway when creating Site-to-Site connection (i.e. when `type` is `IPsec`).
     * 
     */
    @Import(name="localNetworkGatewayId")
    private @Nullable Output<String> localNetworkGatewayId;

    /**
     * @return The ID of the local network gateway when creating Site-to-Site connection (i.e. when `type` is `IPsec`).
     * 
     */
    public Optional<Output<String>> localNetworkGatewayId() {
        return Optional.ofNullable(this.localNetworkGatewayId);
    }

    /**
     * The location/region where the connection is located. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The location/region where the connection is located. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the connection. Changing the name forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the connection. Changing the name forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the peer virtual network gateway when creating a VNet-to-VNet connection (i.e. when `type` is `Vnet2Vnet`). The peer Virtual Network Gateway can be in the same or in a different subscription. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="peerVirtualNetworkGatewayId")
    private @Nullable Output<String> peerVirtualNetworkGatewayId;

    /**
     * @return The ID of the peer virtual network gateway when creating a VNet-to-VNet connection (i.e. when `type` is `Vnet2Vnet`). The peer Virtual Network Gateway can be in the same or in a different subscription. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> peerVirtualNetworkGatewayId() {
        return Optional.ofNullable(this.peerVirtualNetworkGatewayId);
    }

    /**
     * The name of the resource group in which to create the connection Changing this forces a new resource to be created.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group in which to create the connection Changing this forces a new resource to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The routing weight. Defaults to `10`.
     * 
     */
    @Import(name="routingWeight")
    private @Nullable Output<Integer> routingWeight;

    /**
     * @return The routing weight. Defaults to `10`.
     * 
     */
    public Optional<Output<Integer>> routingWeight() {
        return Optional.ofNullable(this.routingWeight);
    }

    /**
     * The shared IPSec key. A key could be provided if a Site-to-Site, VNet-to-VNet or ExpressRoute connection is created.
     * 
     */
    @Import(name="sharedKey")
    private @Nullable Output<String> sharedKey;

    /**
     * @return The shared IPSec key. A key could be provided if a Site-to-Site, VNet-to-VNet or ExpressRoute connection is created.
     * 
     */
    public Optional<Output<String>> sharedKey() {
        return Optional.ofNullable(this.sharedKey);
    }

    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * One or more `traffic_selector_policy` blocks which are documented below.
     * A `traffic_selector_policy` allows to specify a traffic selector policy proposal to be used in a virtual network gateway connection.
     * For details about traffic selectors refer to [the relevant section in the Azure documentation](https://docs.microsoft.com/azure/vpn-gateway/vpn-gateway-connect-multiple-policybased-rm-ps).
     * 
     */
    @Import(name="trafficSelectorPolicy")
    private @Nullable Output<VirtualNetworkGatewayConnectionTrafficSelectorPolicyArgs> trafficSelectorPolicy;

    /**
     * @return One or more `traffic_selector_policy` blocks which are documented below.
     * A `traffic_selector_policy` allows to specify a traffic selector policy proposal to be used in a virtual network gateway connection.
     * For details about traffic selectors refer to [the relevant section in the Azure documentation](https://docs.microsoft.com/azure/vpn-gateway/vpn-gateway-connect-multiple-policybased-rm-ps).
     * 
     */
    public Optional<Output<VirtualNetworkGatewayConnectionTrafficSelectorPolicyArgs>> trafficSelectorPolicy() {
        return Optional.ofNullable(this.trafficSelectorPolicy);
    }

    /**
     * The type of connection. Valid options are `IPsec` (Site-to-Site), `ExpressRoute` (ExpressRoute), and `Vnet2Vnet` (VNet-to-VNet). Each connection type requires different mandatory arguments (refer to the examples above). Changing this forces a new resource to be created.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of connection. Valid options are `IPsec` (Site-to-Site), `ExpressRoute` (ExpressRoute), and `Vnet2Vnet` (VNet-to-VNet). Each connection type requires different mandatory arguments (refer to the examples above). Changing this forces a new resource to be created.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * If `true`, policy-based traffic selectors are enabled for this connection. Enabling policy-based traffic selectors requires an `ipsec_policy` block. Defaults to `false`.
     * 
     */
    @Import(name="usePolicyBasedTrafficSelectors")
    private @Nullable Output<Boolean> usePolicyBasedTrafficSelectors;

    /**
     * @return If `true`, policy-based traffic selectors are enabled for this connection. Enabling policy-based traffic selectors requires an `ipsec_policy` block. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> usePolicyBasedTrafficSelectors() {
        return Optional.ofNullable(this.usePolicyBasedTrafficSelectors);
    }

    /**
     * The ID of the Virtual Network Gateway in which the connection will be created. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="virtualNetworkGatewayId", required=true)
    private Output<String> virtualNetworkGatewayId;

    /**
     * @return The ID of the Virtual Network Gateway in which the connection will be created. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> virtualNetworkGatewayId() {
        return this.virtualNetworkGatewayId;
    }

    private VirtualNetworkGatewayConnectionArgs() {}

    private VirtualNetworkGatewayConnectionArgs(VirtualNetworkGatewayConnectionArgs $) {
        this.authorizationKey = $.authorizationKey;
        this.connectionMode = $.connectionMode;
        this.connectionProtocol = $.connectionProtocol;
        this.customBgpAddresses = $.customBgpAddresses;
        this.dpdTimeoutSeconds = $.dpdTimeoutSeconds;
        this.egressNatRuleIds = $.egressNatRuleIds;
        this.enableBgp = $.enableBgp;
        this.expressRouteCircuitId = $.expressRouteCircuitId;
        this.expressRouteGatewayBypass = $.expressRouteGatewayBypass;
        this.ingressNatRuleIds = $.ingressNatRuleIds;
        this.ipsecPolicy = $.ipsecPolicy;
        this.localAzureIpAddressEnabled = $.localAzureIpAddressEnabled;
        this.localNetworkGatewayId = $.localNetworkGatewayId;
        this.location = $.location;
        this.name = $.name;
        this.peerVirtualNetworkGatewayId = $.peerVirtualNetworkGatewayId;
        this.resourceGroupName = $.resourceGroupName;
        this.routingWeight = $.routingWeight;
        this.sharedKey = $.sharedKey;
        this.tags = $.tags;
        this.trafficSelectorPolicy = $.trafficSelectorPolicy;
        this.type = $.type;
        this.usePolicyBasedTrafficSelectors = $.usePolicyBasedTrafficSelectors;
        this.virtualNetworkGatewayId = $.virtualNetworkGatewayId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualNetworkGatewayConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualNetworkGatewayConnectionArgs $;

        public Builder() {
            $ = new VirtualNetworkGatewayConnectionArgs();
        }

        public Builder(VirtualNetworkGatewayConnectionArgs defaults) {
            $ = new VirtualNetworkGatewayConnectionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authorizationKey The authorization key associated with the Express Route Circuit. This field is required only if the type is an ExpressRoute connection.
         * 
         * @return builder
         * 
         */
        public Builder authorizationKey(@Nullable Output<String> authorizationKey) {
            $.authorizationKey = authorizationKey;
            return this;
        }

        /**
         * @param authorizationKey The authorization key associated with the Express Route Circuit. This field is required only if the type is an ExpressRoute connection.
         * 
         * @return builder
         * 
         */
        public Builder authorizationKey(String authorizationKey) {
            return authorizationKey(Output.of(authorizationKey));
        }

        /**
         * @param connectionMode Connection mode to use. Possible values are `Default`, `InitiatorOnly` and `ResponderOnly`. Defaults to `Default`. Changing this value will force a resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder connectionMode(@Nullable Output<String> connectionMode) {
            $.connectionMode = connectionMode;
            return this;
        }

        /**
         * @param connectionMode Connection mode to use. Possible values are `Default`, `InitiatorOnly` and `ResponderOnly`. Defaults to `Default`. Changing this value will force a resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder connectionMode(String connectionMode) {
            return connectionMode(Output.of(connectionMode));
        }

        /**
         * @param connectionProtocol The IKE protocol version to use. Possible values are `IKEv1` and `IKEv2`, values are `IKEv1` and `IKEv2`. Defaults to `IKEv2`. Changing this forces a new resource to be created.
         * &gt; **Note:** Only valid for `IPSec` connections on virtual network gateways with SKU `VpnGw1`, `VpnGw2`, `VpnGw3`, `VpnGw1AZ`, `VpnGw2AZ` or `VpnGw3AZ`.
         * 
         * @return builder
         * 
         */
        public Builder connectionProtocol(@Nullable Output<String> connectionProtocol) {
            $.connectionProtocol = connectionProtocol;
            return this;
        }

        /**
         * @param connectionProtocol The IKE protocol version to use. Possible values are `IKEv1` and `IKEv2`, values are `IKEv1` and `IKEv2`. Defaults to `IKEv2`. Changing this forces a new resource to be created.
         * &gt; **Note:** Only valid for `IPSec` connections on virtual network gateways with SKU `VpnGw1`, `VpnGw2`, `VpnGw3`, `VpnGw1AZ`, `VpnGw2AZ` or `VpnGw3AZ`.
         * 
         * @return builder
         * 
         */
        public Builder connectionProtocol(String connectionProtocol) {
            return connectionProtocol(Output.of(connectionProtocol));
        }

        /**
         * @param customBgpAddresses A `custom_bgp_addresses` block which is documented below.
         * The block can only be used on `IPSec` / `activeactive` connections,
         * For details about see [the relevant section in the Azure documentation](https://docs.microsoft.com/en-us/azure/vpn-gateway/vpn-gateway-howto-aws-bgp).
         * 
         * @return builder
         * 
         */
        public Builder customBgpAddresses(@Nullable Output<VirtualNetworkGatewayConnectionCustomBgpAddressesArgs> customBgpAddresses) {
            $.customBgpAddresses = customBgpAddresses;
            return this;
        }

        /**
         * @param customBgpAddresses A `custom_bgp_addresses` block which is documented below.
         * The block can only be used on `IPSec` / `activeactive` connections,
         * For details about see [the relevant section in the Azure documentation](https://docs.microsoft.com/en-us/azure/vpn-gateway/vpn-gateway-howto-aws-bgp).
         * 
         * @return builder
         * 
         */
        public Builder customBgpAddresses(VirtualNetworkGatewayConnectionCustomBgpAddressesArgs customBgpAddresses) {
            return customBgpAddresses(Output.of(customBgpAddresses));
        }

        /**
         * @param dpdTimeoutSeconds The dead peer detection timeout of this connection in seconds. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder dpdTimeoutSeconds(@Nullable Output<Integer> dpdTimeoutSeconds) {
            $.dpdTimeoutSeconds = dpdTimeoutSeconds;
            return this;
        }

        /**
         * @param dpdTimeoutSeconds The dead peer detection timeout of this connection in seconds. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder dpdTimeoutSeconds(Integer dpdTimeoutSeconds) {
            return dpdTimeoutSeconds(Output.of(dpdTimeoutSeconds));
        }

        /**
         * @param egressNatRuleIds A list of the egress NAT Rule Ids.
         * 
         * @return builder
         * 
         */
        public Builder egressNatRuleIds(@Nullable Output<List<String>> egressNatRuleIds) {
            $.egressNatRuleIds = egressNatRuleIds;
            return this;
        }

        /**
         * @param egressNatRuleIds A list of the egress NAT Rule Ids.
         * 
         * @return builder
         * 
         */
        public Builder egressNatRuleIds(List<String> egressNatRuleIds) {
            return egressNatRuleIds(Output.of(egressNatRuleIds));
        }

        /**
         * @param egressNatRuleIds A list of the egress NAT Rule Ids.
         * 
         * @return builder
         * 
         */
        public Builder egressNatRuleIds(String... egressNatRuleIds) {
            return egressNatRuleIds(List.of(egressNatRuleIds));
        }

        /**
         * @param enableBgp If `true`, BGP (Border Gateway Protocol) is enabled for this connection. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder enableBgp(@Nullable Output<Boolean> enableBgp) {
            $.enableBgp = enableBgp;
            return this;
        }

        /**
         * @param enableBgp If `true`, BGP (Border Gateway Protocol) is enabled for this connection. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder enableBgp(Boolean enableBgp) {
            return enableBgp(Output.of(enableBgp));
        }

        /**
         * @param expressRouteCircuitId The ID of the Express Route Circuit when creating an ExpressRoute connection (i.e. when `type` is `ExpressRoute`). The Express Route Circuit can be in the same or in a different subscription. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder expressRouteCircuitId(@Nullable Output<String> expressRouteCircuitId) {
            $.expressRouteCircuitId = expressRouteCircuitId;
            return this;
        }

        /**
         * @param expressRouteCircuitId The ID of the Express Route Circuit when creating an ExpressRoute connection (i.e. when `type` is `ExpressRoute`). The Express Route Circuit can be in the same or in a different subscription. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder expressRouteCircuitId(String expressRouteCircuitId) {
            return expressRouteCircuitId(Output.of(expressRouteCircuitId));
        }

        /**
         * @param expressRouteGatewayBypass If `true`, data packets will bypass ExpressRoute Gateway for data forwarding This is only valid for ExpressRoute connections.
         * 
         * @return builder
         * 
         */
        public Builder expressRouteGatewayBypass(@Nullable Output<Boolean> expressRouteGatewayBypass) {
            $.expressRouteGatewayBypass = expressRouteGatewayBypass;
            return this;
        }

        /**
         * @param expressRouteGatewayBypass If `true`, data packets will bypass ExpressRoute Gateway for data forwarding This is only valid for ExpressRoute connections.
         * 
         * @return builder
         * 
         */
        public Builder expressRouteGatewayBypass(Boolean expressRouteGatewayBypass) {
            return expressRouteGatewayBypass(Output.of(expressRouteGatewayBypass));
        }

        /**
         * @param ingressNatRuleIds A list of the ingress NAT Rule Ids.
         * 
         * @return builder
         * 
         */
        public Builder ingressNatRuleIds(@Nullable Output<List<String>> ingressNatRuleIds) {
            $.ingressNatRuleIds = ingressNatRuleIds;
            return this;
        }

        /**
         * @param ingressNatRuleIds A list of the ingress NAT Rule Ids.
         * 
         * @return builder
         * 
         */
        public Builder ingressNatRuleIds(List<String> ingressNatRuleIds) {
            return ingressNatRuleIds(Output.of(ingressNatRuleIds));
        }

        /**
         * @param ingressNatRuleIds A list of the ingress NAT Rule Ids.
         * 
         * @return builder
         * 
         */
        public Builder ingressNatRuleIds(String... ingressNatRuleIds) {
            return ingressNatRuleIds(List.of(ingressNatRuleIds));
        }

        /**
         * @param ipsecPolicy A `ipsec_policy` block which is documented below.
         * Only a single policy can be defined for a connection. For details on
         * custom policies refer to [the relevant section in the Azure documentation](https://docs.microsoft.com/azure/vpn-gateway/vpn-gateway-ipsecikepolicy-rm-powershell).
         * 
         * @return builder
         * 
         */
        public Builder ipsecPolicy(@Nullable Output<VirtualNetworkGatewayConnectionIpsecPolicyArgs> ipsecPolicy) {
            $.ipsecPolicy = ipsecPolicy;
            return this;
        }

        /**
         * @param ipsecPolicy A `ipsec_policy` block which is documented below.
         * Only a single policy can be defined for a connection. For details on
         * custom policies refer to [the relevant section in the Azure documentation](https://docs.microsoft.com/azure/vpn-gateway/vpn-gateway-ipsecikepolicy-rm-powershell).
         * 
         * @return builder
         * 
         */
        public Builder ipsecPolicy(VirtualNetworkGatewayConnectionIpsecPolicyArgs ipsecPolicy) {
            return ipsecPolicy(Output.of(ipsecPolicy));
        }

        /**
         * @param localAzureIpAddressEnabled Use private local Azure IP for the connection. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder localAzureIpAddressEnabled(@Nullable Output<Boolean> localAzureIpAddressEnabled) {
            $.localAzureIpAddressEnabled = localAzureIpAddressEnabled;
            return this;
        }

        /**
         * @param localAzureIpAddressEnabled Use private local Azure IP for the connection. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder localAzureIpAddressEnabled(Boolean localAzureIpAddressEnabled) {
            return localAzureIpAddressEnabled(Output.of(localAzureIpAddressEnabled));
        }

        /**
         * @param localNetworkGatewayId The ID of the local network gateway when creating Site-to-Site connection (i.e. when `type` is `IPsec`).
         * 
         * @return builder
         * 
         */
        public Builder localNetworkGatewayId(@Nullable Output<String> localNetworkGatewayId) {
            $.localNetworkGatewayId = localNetworkGatewayId;
            return this;
        }

        /**
         * @param localNetworkGatewayId The ID of the local network gateway when creating Site-to-Site connection (i.e. when `type` is `IPsec`).
         * 
         * @return builder
         * 
         */
        public Builder localNetworkGatewayId(String localNetworkGatewayId) {
            return localNetworkGatewayId(Output.of(localNetworkGatewayId));
        }

        /**
         * @param location The location/region where the connection is located. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location/region where the connection is located. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The name of the connection. Changing the name forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the connection. Changing the name forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param peerVirtualNetworkGatewayId The ID of the peer virtual network gateway when creating a VNet-to-VNet connection (i.e. when `type` is `Vnet2Vnet`). The peer Virtual Network Gateway can be in the same or in a different subscription. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder peerVirtualNetworkGatewayId(@Nullable Output<String> peerVirtualNetworkGatewayId) {
            $.peerVirtualNetworkGatewayId = peerVirtualNetworkGatewayId;
            return this;
        }

        /**
         * @param peerVirtualNetworkGatewayId The ID of the peer virtual network gateway when creating a VNet-to-VNet connection (i.e. when `type` is `Vnet2Vnet`). The peer Virtual Network Gateway can be in the same or in a different subscription. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder peerVirtualNetworkGatewayId(String peerVirtualNetworkGatewayId) {
            return peerVirtualNetworkGatewayId(Output.of(peerVirtualNetworkGatewayId));
        }

        /**
         * @param resourceGroupName The name of the resource group in which to create the connection Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group in which to create the connection Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param routingWeight The routing weight. Defaults to `10`.
         * 
         * @return builder
         * 
         */
        public Builder routingWeight(@Nullable Output<Integer> routingWeight) {
            $.routingWeight = routingWeight;
            return this;
        }

        /**
         * @param routingWeight The routing weight. Defaults to `10`.
         * 
         * @return builder
         * 
         */
        public Builder routingWeight(Integer routingWeight) {
            return routingWeight(Output.of(routingWeight));
        }

        /**
         * @param sharedKey The shared IPSec key. A key could be provided if a Site-to-Site, VNet-to-VNet or ExpressRoute connection is created.
         * 
         * @return builder
         * 
         */
        public Builder sharedKey(@Nullable Output<String> sharedKey) {
            $.sharedKey = sharedKey;
            return this;
        }

        /**
         * @param sharedKey The shared IPSec key. A key could be provided if a Site-to-Site, VNet-to-VNet or ExpressRoute connection is created.
         * 
         * @return builder
         * 
         */
        public Builder sharedKey(String sharedKey) {
            return sharedKey(Output.of(sharedKey));
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param trafficSelectorPolicy One or more `traffic_selector_policy` blocks which are documented below.
         * A `traffic_selector_policy` allows to specify a traffic selector policy proposal to be used in a virtual network gateway connection.
         * For details about traffic selectors refer to [the relevant section in the Azure documentation](https://docs.microsoft.com/azure/vpn-gateway/vpn-gateway-connect-multiple-policybased-rm-ps).
         * 
         * @return builder
         * 
         */
        public Builder trafficSelectorPolicy(@Nullable Output<VirtualNetworkGatewayConnectionTrafficSelectorPolicyArgs> trafficSelectorPolicy) {
            $.trafficSelectorPolicy = trafficSelectorPolicy;
            return this;
        }

        /**
         * @param trafficSelectorPolicy One or more `traffic_selector_policy` blocks which are documented below.
         * A `traffic_selector_policy` allows to specify a traffic selector policy proposal to be used in a virtual network gateway connection.
         * For details about traffic selectors refer to [the relevant section in the Azure documentation](https://docs.microsoft.com/azure/vpn-gateway/vpn-gateway-connect-multiple-policybased-rm-ps).
         * 
         * @return builder
         * 
         */
        public Builder trafficSelectorPolicy(VirtualNetworkGatewayConnectionTrafficSelectorPolicyArgs trafficSelectorPolicy) {
            return trafficSelectorPolicy(Output.of(trafficSelectorPolicy));
        }

        /**
         * @param type The type of connection. Valid options are `IPsec` (Site-to-Site), `ExpressRoute` (ExpressRoute), and `Vnet2Vnet` (VNet-to-VNet). Each connection type requires different mandatory arguments (refer to the examples above). Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of connection. Valid options are `IPsec` (Site-to-Site), `ExpressRoute` (ExpressRoute), and `Vnet2Vnet` (VNet-to-VNet). Each connection type requires different mandatory arguments (refer to the examples above). Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param usePolicyBasedTrafficSelectors If `true`, policy-based traffic selectors are enabled for this connection. Enabling policy-based traffic selectors requires an `ipsec_policy` block. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder usePolicyBasedTrafficSelectors(@Nullable Output<Boolean> usePolicyBasedTrafficSelectors) {
            $.usePolicyBasedTrafficSelectors = usePolicyBasedTrafficSelectors;
            return this;
        }

        /**
         * @param usePolicyBasedTrafficSelectors If `true`, policy-based traffic selectors are enabled for this connection. Enabling policy-based traffic selectors requires an `ipsec_policy` block. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder usePolicyBasedTrafficSelectors(Boolean usePolicyBasedTrafficSelectors) {
            return usePolicyBasedTrafficSelectors(Output.of(usePolicyBasedTrafficSelectors));
        }

        /**
         * @param virtualNetworkGatewayId The ID of the Virtual Network Gateway in which the connection will be created. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder virtualNetworkGatewayId(Output<String> virtualNetworkGatewayId) {
            $.virtualNetworkGatewayId = virtualNetworkGatewayId;
            return this;
        }

        /**
         * @param virtualNetworkGatewayId The ID of the Virtual Network Gateway in which the connection will be created. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder virtualNetworkGatewayId(String virtualNetworkGatewayId) {
            return virtualNetworkGatewayId(Output.of(virtualNetworkGatewayId));
        }

        public VirtualNetworkGatewayConnectionArgs build() {
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            $.virtualNetworkGatewayId = Objects.requireNonNull($.virtualNetworkGatewayId, "expected parameter 'virtualNetworkGatewayId' to be non-null");
            return $;
        }
    }

}
