// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appservice.inputs;

import com.pulumi.azure.appservice.inputs.LinuxFunctionAppSiteConfigAppServiceLogsArgs;
import com.pulumi.azure.appservice.inputs.LinuxFunctionAppSiteConfigApplicationStackArgs;
import com.pulumi.azure.appservice.inputs.LinuxFunctionAppSiteConfigCorsArgs;
import com.pulumi.azure.appservice.inputs.LinuxFunctionAppSiteConfigIpRestrictionArgs;
import com.pulumi.azure.appservice.inputs.LinuxFunctionAppSiteConfigScmIpRestrictionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LinuxFunctionAppSiteConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final LinuxFunctionAppSiteConfigArgs Empty = new LinuxFunctionAppSiteConfigArgs();

    /**
     * If this Linux Web App is Always On enabled. Defaults to `false`.
     * 
     * &gt; **NOTE:** when running in a Consumption or Premium Plan, `always_on` feature should be turned off. Please turn it off before upgrading the service plan from standard to premium.
     * 
     */
    @Import(name="alwaysOn")
    private @Nullable Output<Boolean> alwaysOn;

    /**
     * @return If this Linux Web App is Always On enabled. Defaults to `false`.
     * 
     * &gt; **NOTE:** when running in a Consumption or Premium Plan, `always_on` feature should be turned off. Please turn it off before upgrading the service plan from standard to premium.
     * 
     */
    public Optional<Output<Boolean>> alwaysOn() {
        return Optional.ofNullable(this.alwaysOn);
    }

    /**
     * The URL of the API definition that describes this Linux Function App.
     * 
     */
    @Import(name="apiDefinitionUrl")
    private @Nullable Output<String> apiDefinitionUrl;

    /**
     * @return The URL of the API definition that describes this Linux Function App.
     * 
     */
    public Optional<Output<String>> apiDefinitionUrl() {
        return Optional.ofNullable(this.apiDefinitionUrl);
    }

    /**
     * The ID of the API Management API for this Linux Function App.
     * 
     */
    @Import(name="apiManagementApiId")
    private @Nullable Output<String> apiManagementApiId;

    /**
     * @return The ID of the API Management API for this Linux Function App.
     * 
     */
    public Optional<Output<String>> apiManagementApiId() {
        return Optional.ofNullable(this.apiManagementApiId);
    }

    /**
     * The App command line to launch.
     * 
     */
    @Import(name="appCommandLine")
    private @Nullable Output<String> appCommandLine;

    /**
     * @return The App command line to launch.
     * 
     */
    public Optional<Output<String>> appCommandLine() {
        return Optional.ofNullable(this.appCommandLine);
    }

    /**
     * The number of workers this function app can scale out to. Only applicable to apps on the Consumption and Premium plan.
     * 
     */
    @Import(name="appScaleLimit")
    private @Nullable Output<Integer> appScaleLimit;

    /**
     * @return The number of workers this function app can scale out to. Only applicable to apps on the Consumption and Premium plan.
     * 
     */
    public Optional<Output<Integer>> appScaleLimit() {
        return Optional.ofNullable(this.appScaleLimit);
    }

    /**
     * An `app_service_logs` block as defined above.
     * 
     */
    @Import(name="appServiceLogs")
    private @Nullable Output<LinuxFunctionAppSiteConfigAppServiceLogsArgs> appServiceLogs;

    /**
     * @return An `app_service_logs` block as defined above.
     * 
     */
    public Optional<Output<LinuxFunctionAppSiteConfigAppServiceLogsArgs>> appServiceLogs() {
        return Optional.ofNullable(this.appServiceLogs);
    }

    /**
     * The Connection String for linking the Linux Function App to Application Insights.
     * 
     */
    @Import(name="applicationInsightsConnectionString")
    private @Nullable Output<String> applicationInsightsConnectionString;

    /**
     * @return The Connection String for linking the Linux Function App to Application Insights.
     * 
     */
    public Optional<Output<String>> applicationInsightsConnectionString() {
        return Optional.ofNullable(this.applicationInsightsConnectionString);
    }

    /**
     * The Instrumentation Key for connecting the Linux Function App to Application Insights.
     * 
     */
    @Import(name="applicationInsightsKey")
    private @Nullable Output<String> applicationInsightsKey;

    /**
     * @return The Instrumentation Key for connecting the Linux Function App to Application Insights.
     * 
     */
    public Optional<Output<String>> applicationInsightsKey() {
        return Optional.ofNullable(this.applicationInsightsKey);
    }

    /**
     * An `application_stack` block as defined above.
     * 
     * &gt; **Note:** If this is set, there must not be an application setting `FUNCTIONS_WORKER_RUNTIME`.
     * 
     */
    @Import(name="applicationStack")
    private @Nullable Output<LinuxFunctionAppSiteConfigApplicationStackArgs> applicationStack;

    /**
     * @return An `application_stack` block as defined above.
     * 
     * &gt; **Note:** If this is set, there must not be an application setting `FUNCTIONS_WORKER_RUNTIME`.
     * 
     */
    public Optional<Output<LinuxFunctionAppSiteConfigApplicationStackArgs>> applicationStack() {
        return Optional.ofNullable(this.applicationStack);
    }

    /**
     * The Client ID of the Managed Service Identity to use for connections to the Azure Container Registry.
     * 
     */
    @Import(name="containerRegistryManagedIdentityClientId")
    private @Nullable Output<String> containerRegistryManagedIdentityClientId;

    /**
     * @return The Client ID of the Managed Service Identity to use for connections to the Azure Container Registry.
     * 
     */
    public Optional<Output<String>> containerRegistryManagedIdentityClientId() {
        return Optional.ofNullable(this.containerRegistryManagedIdentityClientId);
    }

    /**
     * Should connections for Azure Container Registry use Managed Identity.
     * 
     */
    @Import(name="containerRegistryUseManagedIdentity")
    private @Nullable Output<Boolean> containerRegistryUseManagedIdentity;

    /**
     * @return Should connections for Azure Container Registry use Managed Identity.
     * 
     */
    public Optional<Output<Boolean>> containerRegistryUseManagedIdentity() {
        return Optional.ofNullable(this.containerRegistryUseManagedIdentity);
    }

    /**
     * A `cors` block as defined above.
     * 
     */
    @Import(name="cors")
    private @Nullable Output<LinuxFunctionAppSiteConfigCorsArgs> cors;

    /**
     * @return A `cors` block as defined above.
     * 
     */
    public Optional<Output<LinuxFunctionAppSiteConfigCorsArgs>> cors() {
        return Optional.ofNullable(this.cors);
    }

    /**
     * Specifies a list of Default Documents for the Linux Web App.
     * 
     */
    @Import(name="defaultDocuments")
    private @Nullable Output<List<String>> defaultDocuments;

    /**
     * @return Specifies a list of Default Documents for the Linux Web App.
     * 
     */
    public Optional<Output<List<String>>> defaultDocuments() {
        return Optional.ofNullable(this.defaultDocuments);
    }

    /**
     * Is detailed error logging enabled
     * 
     */
    @Import(name="detailedErrorLoggingEnabled")
    private @Nullable Output<Boolean> detailedErrorLoggingEnabled;

    /**
     * @return Is detailed error logging enabled
     * 
     */
    public Optional<Output<Boolean>> detailedErrorLoggingEnabled() {
        return Optional.ofNullable(this.detailedErrorLoggingEnabled);
    }

    /**
     * The number of minimum instances for this Linux Function App. Only affects apps on Elastic Premium plans.
     * 
     */
    @Import(name="elasticInstanceMinimum")
    private @Nullable Output<Integer> elasticInstanceMinimum;

    /**
     * @return The number of minimum instances for this Linux Function App. Only affects apps on Elastic Premium plans.
     * 
     */
    public Optional<Output<Integer>> elasticInstanceMinimum() {
        return Optional.ofNullable(this.elasticInstanceMinimum);
    }

    /**
     * State of FTP / FTPS service for this function app. Possible values include: `AllAllowed`, `FtpsOnly` and `Disabled`. Defaults to `Disabled`.
     * 
     */
    @Import(name="ftpsState")
    private @Nullable Output<String> ftpsState;

    /**
     * @return State of FTP / FTPS service for this function app. Possible values include: `AllAllowed`, `FtpsOnly` and `Disabled`. Defaults to `Disabled`.
     * 
     */
    public Optional<Output<String>> ftpsState() {
        return Optional.ofNullable(this.ftpsState);
    }

    /**
     * The amount of time in minutes that a node can be unhealthy before being removed from the load balancer. Possible values are between `2` and `10`. Only valid in conjunction with `health_check_path`.
     * 
     */
    @Import(name="healthCheckEvictionTimeInMin")
    private @Nullable Output<Integer> healthCheckEvictionTimeInMin;

    /**
     * @return The amount of time in minutes that a node can be unhealthy before being removed from the load balancer. Possible values are between `2` and `10`. Only valid in conjunction with `health_check_path`.
     * 
     */
    public Optional<Output<Integer>> healthCheckEvictionTimeInMin() {
        return Optional.ofNullable(this.healthCheckEvictionTimeInMin);
    }

    /**
     * The path to be checked for this function app health.
     * 
     */
    @Import(name="healthCheckPath")
    private @Nullable Output<String> healthCheckPath;

    /**
     * @return The path to be checked for this function app health.
     * 
     */
    public Optional<Output<String>> healthCheckPath() {
        return Optional.ofNullable(this.healthCheckPath);
    }

    /**
     * Specifies if the HTTP2 protocol should be enabled. Defaults to `false`.
     * 
     */
    @Import(name="http2Enabled")
    private @Nullable Output<Boolean> http2Enabled;

    /**
     * @return Specifies if the HTTP2 protocol should be enabled. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> http2Enabled() {
        return Optional.ofNullable(this.http2Enabled);
    }

    /**
     * One or more `ip_restriction` blocks as defined above.
     * 
     */
    @Import(name="ipRestrictions")
    private @Nullable Output<List<LinuxFunctionAppSiteConfigIpRestrictionArgs>> ipRestrictions;

    /**
     * @return One or more `ip_restriction` blocks as defined above.
     * 
     */
    public Optional<Output<List<LinuxFunctionAppSiteConfigIpRestrictionArgs>>> ipRestrictions() {
        return Optional.ofNullable(this.ipRestrictions);
    }

    /**
     * The Linux FX Version
     * 
     */
    @Import(name="linuxFxVersion")
    private @Nullable Output<String> linuxFxVersion;

    /**
     * @return The Linux FX Version
     * 
     */
    public Optional<Output<String>> linuxFxVersion() {
        return Optional.ofNullable(this.linuxFxVersion);
    }

    /**
     * The Site load balancing mode. Possible values include: `WeightedRoundRobin`, `LeastRequests`, `LeastResponseTime`, `WeightedTotalTraffic`, `RequestHash`, `PerSiteRoundRobin`. Defaults to `LeastRequests` if omitted.
     * 
     */
    @Import(name="loadBalancingMode")
    private @Nullable Output<String> loadBalancingMode;

    /**
     * @return The Site load balancing mode. Possible values include: `WeightedRoundRobin`, `LeastRequests`, `LeastResponseTime`, `WeightedTotalTraffic`, `RequestHash`, `PerSiteRoundRobin`. Defaults to `LeastRequests` if omitted.
     * 
     */
    public Optional<Output<String>> loadBalancingMode() {
        return Optional.ofNullable(this.loadBalancingMode);
    }

    /**
     * Managed pipeline mode. Possible values include: `Integrated`, `Classic`. Defaults to `Integrated`.
     * 
     */
    @Import(name="managedPipelineMode")
    private @Nullable Output<String> managedPipelineMode;

    /**
     * @return Managed pipeline mode. Possible values include: `Integrated`, `Classic`. Defaults to `Integrated`.
     * 
     */
    public Optional<Output<String>> managedPipelineMode() {
        return Optional.ofNullable(this.managedPipelineMode);
    }

    /**
     * The configures the minimum version of TLS required for SSL requests. Possible values include: `1.0`, `1.1`, and `1.2`. Defaults to `1.2`.
     * 
     */
    @Import(name="minimumTlsVersion")
    private @Nullable Output<String> minimumTlsVersion;

    /**
     * @return The configures the minimum version of TLS required for SSL requests. Possible values include: `1.0`, `1.1`, and `1.2`. Defaults to `1.2`.
     * 
     */
    public Optional<Output<String>> minimumTlsVersion() {
        return Optional.ofNullable(this.minimumTlsVersion);
    }

    /**
     * The number of pre-warmed instances for this function app. Only affects apps on an Elastic Premium plan.
     * 
     */
    @Import(name="preWarmedInstanceCount")
    private @Nullable Output<Integer> preWarmedInstanceCount;

    /**
     * @return The number of pre-warmed instances for this function app. Only affects apps on an Elastic Premium plan.
     * 
     */
    public Optional<Output<Integer>> preWarmedInstanceCount() {
        return Optional.ofNullable(this.preWarmedInstanceCount);
    }

    /**
     * Should Remote Debugging be enabled. Defaults to `false`.
     * 
     */
    @Import(name="remoteDebuggingEnabled")
    private @Nullable Output<Boolean> remoteDebuggingEnabled;

    /**
     * @return Should Remote Debugging be enabled. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> remoteDebuggingEnabled() {
        return Optional.ofNullable(this.remoteDebuggingEnabled);
    }

    /**
     * The Remote Debugging Version. Possible values include `VS2017`, `VS2019`, and `VS2022`.
     * 
     */
    @Import(name="remoteDebuggingVersion")
    private @Nullable Output<String> remoteDebuggingVersion;

    /**
     * @return The Remote Debugging Version. Possible values include `VS2017`, `VS2019`, and `VS2022`.
     * 
     */
    public Optional<Output<String>> remoteDebuggingVersion() {
        return Optional.ofNullable(this.remoteDebuggingVersion);
    }

    /**
     * Should Scale Monitoring of the Functions Runtime be enabled?
     * 
     * &gt; **NOTE:** Functions runtime scale monitoring can only be enabled for Elastic Premium Function Apps or Workflow Standard Logic Apps and requires a minimum prewarmed instance count of 1.
     * 
     */
    @Import(name="runtimeScaleMonitoringEnabled")
    private @Nullable Output<Boolean> runtimeScaleMonitoringEnabled;

    /**
     * @return Should Scale Monitoring of the Functions Runtime be enabled?
     * 
     * &gt; **NOTE:** Functions runtime scale monitoring can only be enabled for Elastic Premium Function Apps or Workflow Standard Logic Apps and requires a minimum prewarmed instance count of 1.
     * 
     */
    public Optional<Output<Boolean>> runtimeScaleMonitoringEnabled() {
        return Optional.ofNullable(this.runtimeScaleMonitoringEnabled);
    }

    /**
     * One or more `scm_ip_restriction` blocks as defined above.
     * 
     */
    @Import(name="scmIpRestrictions")
    private @Nullable Output<List<LinuxFunctionAppSiteConfigScmIpRestrictionArgs>> scmIpRestrictions;

    /**
     * @return One or more `scm_ip_restriction` blocks as defined above.
     * 
     */
    public Optional<Output<List<LinuxFunctionAppSiteConfigScmIpRestrictionArgs>>> scmIpRestrictions() {
        return Optional.ofNullable(this.scmIpRestrictions);
    }

    /**
     * Configures the minimum version of TLS required for SSL requests to the SCM site Possible values include: `1.0`, `1.1`, and `1.2`. Defaults to `1.2`.
     * 
     */
    @Import(name="scmMinimumTlsVersion")
    private @Nullable Output<String> scmMinimumTlsVersion;

    /**
     * @return Configures the minimum version of TLS required for SSL requests to the SCM site Possible values include: `1.0`, `1.1`, and `1.2`. Defaults to `1.2`.
     * 
     */
    public Optional<Output<String>> scmMinimumTlsVersion() {
        return Optional.ofNullable(this.scmMinimumTlsVersion);
    }

    /**
     * The SCM Type in use by the Linux Function App.
     * 
     */
    @Import(name="scmType")
    private @Nullable Output<String> scmType;

    /**
     * @return The SCM Type in use by the Linux Function App.
     * 
     */
    public Optional<Output<String>> scmType() {
        return Optional.ofNullable(this.scmType);
    }

    /**
     * Should the Linux Function App `ip_restriction` configuration be used for the SCM also.
     * 
     */
    @Import(name="scmUseMainIpRestriction")
    private @Nullable Output<Boolean> scmUseMainIpRestriction;

    /**
     * @return Should the Linux Function App `ip_restriction` configuration be used for the SCM also.
     * 
     */
    public Optional<Output<Boolean>> scmUseMainIpRestriction() {
        return Optional.ofNullable(this.scmUseMainIpRestriction);
    }

    /**
     * Should the Linux Web App use a 32-bit worker process. Defaults to `false`.
     * 
     */
    @Import(name="use32BitWorker")
    private @Nullable Output<Boolean> use32BitWorker;

    /**
     * @return Should the Linux Web App use a 32-bit worker process. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> use32BitWorker() {
        return Optional.ofNullable(this.use32BitWorker);
    }

    /**
     * Should all outbound traffic to have NAT Gateways, Network Security Groups and User Defined Routes applied? Defaults to `false`.
     * 
     */
    @Import(name="vnetRouteAllEnabled")
    private @Nullable Output<Boolean> vnetRouteAllEnabled;

    /**
     * @return Should all outbound traffic to have NAT Gateways, Network Security Groups and User Defined Routes applied? Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> vnetRouteAllEnabled() {
        return Optional.ofNullable(this.vnetRouteAllEnabled);
    }

    /**
     * Should Web Sockets be enabled. Defaults to `false`.
     * 
     */
    @Import(name="websocketsEnabled")
    private @Nullable Output<Boolean> websocketsEnabled;

    /**
     * @return Should Web Sockets be enabled. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> websocketsEnabled() {
        return Optional.ofNullable(this.websocketsEnabled);
    }

    /**
     * The number of Workers for this Linux Function App.
     * 
     */
    @Import(name="workerCount")
    private @Nullable Output<Integer> workerCount;

    /**
     * @return The number of Workers for this Linux Function App.
     * 
     */
    public Optional<Output<Integer>> workerCount() {
        return Optional.ofNullable(this.workerCount);
    }

    private LinuxFunctionAppSiteConfigArgs() {}

    private LinuxFunctionAppSiteConfigArgs(LinuxFunctionAppSiteConfigArgs $) {
        this.alwaysOn = $.alwaysOn;
        this.apiDefinitionUrl = $.apiDefinitionUrl;
        this.apiManagementApiId = $.apiManagementApiId;
        this.appCommandLine = $.appCommandLine;
        this.appScaleLimit = $.appScaleLimit;
        this.appServiceLogs = $.appServiceLogs;
        this.applicationInsightsConnectionString = $.applicationInsightsConnectionString;
        this.applicationInsightsKey = $.applicationInsightsKey;
        this.applicationStack = $.applicationStack;
        this.containerRegistryManagedIdentityClientId = $.containerRegistryManagedIdentityClientId;
        this.containerRegistryUseManagedIdentity = $.containerRegistryUseManagedIdentity;
        this.cors = $.cors;
        this.defaultDocuments = $.defaultDocuments;
        this.detailedErrorLoggingEnabled = $.detailedErrorLoggingEnabled;
        this.elasticInstanceMinimum = $.elasticInstanceMinimum;
        this.ftpsState = $.ftpsState;
        this.healthCheckEvictionTimeInMin = $.healthCheckEvictionTimeInMin;
        this.healthCheckPath = $.healthCheckPath;
        this.http2Enabled = $.http2Enabled;
        this.ipRestrictions = $.ipRestrictions;
        this.linuxFxVersion = $.linuxFxVersion;
        this.loadBalancingMode = $.loadBalancingMode;
        this.managedPipelineMode = $.managedPipelineMode;
        this.minimumTlsVersion = $.minimumTlsVersion;
        this.preWarmedInstanceCount = $.preWarmedInstanceCount;
        this.remoteDebuggingEnabled = $.remoteDebuggingEnabled;
        this.remoteDebuggingVersion = $.remoteDebuggingVersion;
        this.runtimeScaleMonitoringEnabled = $.runtimeScaleMonitoringEnabled;
        this.scmIpRestrictions = $.scmIpRestrictions;
        this.scmMinimumTlsVersion = $.scmMinimumTlsVersion;
        this.scmType = $.scmType;
        this.scmUseMainIpRestriction = $.scmUseMainIpRestriction;
        this.use32BitWorker = $.use32BitWorker;
        this.vnetRouteAllEnabled = $.vnetRouteAllEnabled;
        this.websocketsEnabled = $.websocketsEnabled;
        this.workerCount = $.workerCount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LinuxFunctionAppSiteConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LinuxFunctionAppSiteConfigArgs $;

        public Builder() {
            $ = new LinuxFunctionAppSiteConfigArgs();
        }

        public Builder(LinuxFunctionAppSiteConfigArgs defaults) {
            $ = new LinuxFunctionAppSiteConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param alwaysOn If this Linux Web App is Always On enabled. Defaults to `false`.
         * 
         * &gt; **NOTE:** when running in a Consumption or Premium Plan, `always_on` feature should be turned off. Please turn it off before upgrading the service plan from standard to premium.
         * 
         * @return builder
         * 
         */
        public Builder alwaysOn(@Nullable Output<Boolean> alwaysOn) {
            $.alwaysOn = alwaysOn;
            return this;
        }

        /**
         * @param alwaysOn If this Linux Web App is Always On enabled. Defaults to `false`.
         * 
         * &gt; **NOTE:** when running in a Consumption or Premium Plan, `always_on` feature should be turned off. Please turn it off before upgrading the service plan from standard to premium.
         * 
         * @return builder
         * 
         */
        public Builder alwaysOn(Boolean alwaysOn) {
            return alwaysOn(Output.of(alwaysOn));
        }

        /**
         * @param apiDefinitionUrl The URL of the API definition that describes this Linux Function App.
         * 
         * @return builder
         * 
         */
        public Builder apiDefinitionUrl(@Nullable Output<String> apiDefinitionUrl) {
            $.apiDefinitionUrl = apiDefinitionUrl;
            return this;
        }

        /**
         * @param apiDefinitionUrl The URL of the API definition that describes this Linux Function App.
         * 
         * @return builder
         * 
         */
        public Builder apiDefinitionUrl(String apiDefinitionUrl) {
            return apiDefinitionUrl(Output.of(apiDefinitionUrl));
        }

        /**
         * @param apiManagementApiId The ID of the API Management API for this Linux Function App.
         * 
         * @return builder
         * 
         */
        public Builder apiManagementApiId(@Nullable Output<String> apiManagementApiId) {
            $.apiManagementApiId = apiManagementApiId;
            return this;
        }

        /**
         * @param apiManagementApiId The ID of the API Management API for this Linux Function App.
         * 
         * @return builder
         * 
         */
        public Builder apiManagementApiId(String apiManagementApiId) {
            return apiManagementApiId(Output.of(apiManagementApiId));
        }

        /**
         * @param appCommandLine The App command line to launch.
         * 
         * @return builder
         * 
         */
        public Builder appCommandLine(@Nullable Output<String> appCommandLine) {
            $.appCommandLine = appCommandLine;
            return this;
        }

        /**
         * @param appCommandLine The App command line to launch.
         * 
         * @return builder
         * 
         */
        public Builder appCommandLine(String appCommandLine) {
            return appCommandLine(Output.of(appCommandLine));
        }

        /**
         * @param appScaleLimit The number of workers this function app can scale out to. Only applicable to apps on the Consumption and Premium plan.
         * 
         * @return builder
         * 
         */
        public Builder appScaleLimit(@Nullable Output<Integer> appScaleLimit) {
            $.appScaleLimit = appScaleLimit;
            return this;
        }

        /**
         * @param appScaleLimit The number of workers this function app can scale out to. Only applicable to apps on the Consumption and Premium plan.
         * 
         * @return builder
         * 
         */
        public Builder appScaleLimit(Integer appScaleLimit) {
            return appScaleLimit(Output.of(appScaleLimit));
        }

        /**
         * @param appServiceLogs An `app_service_logs` block as defined above.
         * 
         * @return builder
         * 
         */
        public Builder appServiceLogs(@Nullable Output<LinuxFunctionAppSiteConfigAppServiceLogsArgs> appServiceLogs) {
            $.appServiceLogs = appServiceLogs;
            return this;
        }

        /**
         * @param appServiceLogs An `app_service_logs` block as defined above.
         * 
         * @return builder
         * 
         */
        public Builder appServiceLogs(LinuxFunctionAppSiteConfigAppServiceLogsArgs appServiceLogs) {
            return appServiceLogs(Output.of(appServiceLogs));
        }

        /**
         * @param applicationInsightsConnectionString The Connection String for linking the Linux Function App to Application Insights.
         * 
         * @return builder
         * 
         */
        public Builder applicationInsightsConnectionString(@Nullable Output<String> applicationInsightsConnectionString) {
            $.applicationInsightsConnectionString = applicationInsightsConnectionString;
            return this;
        }

        /**
         * @param applicationInsightsConnectionString The Connection String for linking the Linux Function App to Application Insights.
         * 
         * @return builder
         * 
         */
        public Builder applicationInsightsConnectionString(String applicationInsightsConnectionString) {
            return applicationInsightsConnectionString(Output.of(applicationInsightsConnectionString));
        }

        /**
         * @param applicationInsightsKey The Instrumentation Key for connecting the Linux Function App to Application Insights.
         * 
         * @return builder
         * 
         */
        public Builder applicationInsightsKey(@Nullable Output<String> applicationInsightsKey) {
            $.applicationInsightsKey = applicationInsightsKey;
            return this;
        }

        /**
         * @param applicationInsightsKey The Instrumentation Key for connecting the Linux Function App to Application Insights.
         * 
         * @return builder
         * 
         */
        public Builder applicationInsightsKey(String applicationInsightsKey) {
            return applicationInsightsKey(Output.of(applicationInsightsKey));
        }

        /**
         * @param applicationStack An `application_stack` block as defined above.
         * 
         * &gt; **Note:** If this is set, there must not be an application setting `FUNCTIONS_WORKER_RUNTIME`.
         * 
         * @return builder
         * 
         */
        public Builder applicationStack(@Nullable Output<LinuxFunctionAppSiteConfigApplicationStackArgs> applicationStack) {
            $.applicationStack = applicationStack;
            return this;
        }

        /**
         * @param applicationStack An `application_stack` block as defined above.
         * 
         * &gt; **Note:** If this is set, there must not be an application setting `FUNCTIONS_WORKER_RUNTIME`.
         * 
         * @return builder
         * 
         */
        public Builder applicationStack(LinuxFunctionAppSiteConfigApplicationStackArgs applicationStack) {
            return applicationStack(Output.of(applicationStack));
        }

        /**
         * @param containerRegistryManagedIdentityClientId The Client ID of the Managed Service Identity to use for connections to the Azure Container Registry.
         * 
         * @return builder
         * 
         */
        public Builder containerRegistryManagedIdentityClientId(@Nullable Output<String> containerRegistryManagedIdentityClientId) {
            $.containerRegistryManagedIdentityClientId = containerRegistryManagedIdentityClientId;
            return this;
        }

        /**
         * @param containerRegistryManagedIdentityClientId The Client ID of the Managed Service Identity to use for connections to the Azure Container Registry.
         * 
         * @return builder
         * 
         */
        public Builder containerRegistryManagedIdentityClientId(String containerRegistryManagedIdentityClientId) {
            return containerRegistryManagedIdentityClientId(Output.of(containerRegistryManagedIdentityClientId));
        }

        /**
         * @param containerRegistryUseManagedIdentity Should connections for Azure Container Registry use Managed Identity.
         * 
         * @return builder
         * 
         */
        public Builder containerRegistryUseManagedIdentity(@Nullable Output<Boolean> containerRegistryUseManagedIdentity) {
            $.containerRegistryUseManagedIdentity = containerRegistryUseManagedIdentity;
            return this;
        }

        /**
         * @param containerRegistryUseManagedIdentity Should connections for Azure Container Registry use Managed Identity.
         * 
         * @return builder
         * 
         */
        public Builder containerRegistryUseManagedIdentity(Boolean containerRegistryUseManagedIdentity) {
            return containerRegistryUseManagedIdentity(Output.of(containerRegistryUseManagedIdentity));
        }

        /**
         * @param cors A `cors` block as defined above.
         * 
         * @return builder
         * 
         */
        public Builder cors(@Nullable Output<LinuxFunctionAppSiteConfigCorsArgs> cors) {
            $.cors = cors;
            return this;
        }

        /**
         * @param cors A `cors` block as defined above.
         * 
         * @return builder
         * 
         */
        public Builder cors(LinuxFunctionAppSiteConfigCorsArgs cors) {
            return cors(Output.of(cors));
        }

        /**
         * @param defaultDocuments Specifies a list of Default Documents for the Linux Web App.
         * 
         * @return builder
         * 
         */
        public Builder defaultDocuments(@Nullable Output<List<String>> defaultDocuments) {
            $.defaultDocuments = defaultDocuments;
            return this;
        }

        /**
         * @param defaultDocuments Specifies a list of Default Documents for the Linux Web App.
         * 
         * @return builder
         * 
         */
        public Builder defaultDocuments(List<String> defaultDocuments) {
            return defaultDocuments(Output.of(defaultDocuments));
        }

        /**
         * @param defaultDocuments Specifies a list of Default Documents for the Linux Web App.
         * 
         * @return builder
         * 
         */
        public Builder defaultDocuments(String... defaultDocuments) {
            return defaultDocuments(List.of(defaultDocuments));
        }

        /**
         * @param detailedErrorLoggingEnabled Is detailed error logging enabled
         * 
         * @return builder
         * 
         */
        public Builder detailedErrorLoggingEnabled(@Nullable Output<Boolean> detailedErrorLoggingEnabled) {
            $.detailedErrorLoggingEnabled = detailedErrorLoggingEnabled;
            return this;
        }

        /**
         * @param detailedErrorLoggingEnabled Is detailed error logging enabled
         * 
         * @return builder
         * 
         */
        public Builder detailedErrorLoggingEnabled(Boolean detailedErrorLoggingEnabled) {
            return detailedErrorLoggingEnabled(Output.of(detailedErrorLoggingEnabled));
        }

        /**
         * @param elasticInstanceMinimum The number of minimum instances for this Linux Function App. Only affects apps on Elastic Premium plans.
         * 
         * @return builder
         * 
         */
        public Builder elasticInstanceMinimum(@Nullable Output<Integer> elasticInstanceMinimum) {
            $.elasticInstanceMinimum = elasticInstanceMinimum;
            return this;
        }

        /**
         * @param elasticInstanceMinimum The number of minimum instances for this Linux Function App. Only affects apps on Elastic Premium plans.
         * 
         * @return builder
         * 
         */
        public Builder elasticInstanceMinimum(Integer elasticInstanceMinimum) {
            return elasticInstanceMinimum(Output.of(elasticInstanceMinimum));
        }

        /**
         * @param ftpsState State of FTP / FTPS service for this function app. Possible values include: `AllAllowed`, `FtpsOnly` and `Disabled`. Defaults to `Disabled`.
         * 
         * @return builder
         * 
         */
        public Builder ftpsState(@Nullable Output<String> ftpsState) {
            $.ftpsState = ftpsState;
            return this;
        }

        /**
         * @param ftpsState State of FTP / FTPS service for this function app. Possible values include: `AllAllowed`, `FtpsOnly` and `Disabled`. Defaults to `Disabled`.
         * 
         * @return builder
         * 
         */
        public Builder ftpsState(String ftpsState) {
            return ftpsState(Output.of(ftpsState));
        }

        /**
         * @param healthCheckEvictionTimeInMin The amount of time in minutes that a node can be unhealthy before being removed from the load balancer. Possible values are between `2` and `10`. Only valid in conjunction with `health_check_path`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckEvictionTimeInMin(@Nullable Output<Integer> healthCheckEvictionTimeInMin) {
            $.healthCheckEvictionTimeInMin = healthCheckEvictionTimeInMin;
            return this;
        }

        /**
         * @param healthCheckEvictionTimeInMin The amount of time in minutes that a node can be unhealthy before being removed from the load balancer. Possible values are between `2` and `10`. Only valid in conjunction with `health_check_path`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckEvictionTimeInMin(Integer healthCheckEvictionTimeInMin) {
            return healthCheckEvictionTimeInMin(Output.of(healthCheckEvictionTimeInMin));
        }

        /**
         * @param healthCheckPath The path to be checked for this function app health.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckPath(@Nullable Output<String> healthCheckPath) {
            $.healthCheckPath = healthCheckPath;
            return this;
        }

        /**
         * @param healthCheckPath The path to be checked for this function app health.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckPath(String healthCheckPath) {
            return healthCheckPath(Output.of(healthCheckPath));
        }

        /**
         * @param http2Enabled Specifies if the HTTP2 protocol should be enabled. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder http2Enabled(@Nullable Output<Boolean> http2Enabled) {
            $.http2Enabled = http2Enabled;
            return this;
        }

        /**
         * @param http2Enabled Specifies if the HTTP2 protocol should be enabled. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder http2Enabled(Boolean http2Enabled) {
            return http2Enabled(Output.of(http2Enabled));
        }

        /**
         * @param ipRestrictions One or more `ip_restriction` blocks as defined above.
         * 
         * @return builder
         * 
         */
        public Builder ipRestrictions(@Nullable Output<List<LinuxFunctionAppSiteConfigIpRestrictionArgs>> ipRestrictions) {
            $.ipRestrictions = ipRestrictions;
            return this;
        }

        /**
         * @param ipRestrictions One or more `ip_restriction` blocks as defined above.
         * 
         * @return builder
         * 
         */
        public Builder ipRestrictions(List<LinuxFunctionAppSiteConfigIpRestrictionArgs> ipRestrictions) {
            return ipRestrictions(Output.of(ipRestrictions));
        }

        /**
         * @param ipRestrictions One or more `ip_restriction` blocks as defined above.
         * 
         * @return builder
         * 
         */
        public Builder ipRestrictions(LinuxFunctionAppSiteConfigIpRestrictionArgs... ipRestrictions) {
            return ipRestrictions(List.of(ipRestrictions));
        }

        /**
         * @param linuxFxVersion The Linux FX Version
         * 
         * @return builder
         * 
         */
        public Builder linuxFxVersion(@Nullable Output<String> linuxFxVersion) {
            $.linuxFxVersion = linuxFxVersion;
            return this;
        }

        /**
         * @param linuxFxVersion The Linux FX Version
         * 
         * @return builder
         * 
         */
        public Builder linuxFxVersion(String linuxFxVersion) {
            return linuxFxVersion(Output.of(linuxFxVersion));
        }

        /**
         * @param loadBalancingMode The Site load balancing mode. Possible values include: `WeightedRoundRobin`, `LeastRequests`, `LeastResponseTime`, `WeightedTotalTraffic`, `RequestHash`, `PerSiteRoundRobin`. Defaults to `LeastRequests` if omitted.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancingMode(@Nullable Output<String> loadBalancingMode) {
            $.loadBalancingMode = loadBalancingMode;
            return this;
        }

        /**
         * @param loadBalancingMode The Site load balancing mode. Possible values include: `WeightedRoundRobin`, `LeastRequests`, `LeastResponseTime`, `WeightedTotalTraffic`, `RequestHash`, `PerSiteRoundRobin`. Defaults to `LeastRequests` if omitted.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancingMode(String loadBalancingMode) {
            return loadBalancingMode(Output.of(loadBalancingMode));
        }

        /**
         * @param managedPipelineMode Managed pipeline mode. Possible values include: `Integrated`, `Classic`. Defaults to `Integrated`.
         * 
         * @return builder
         * 
         */
        public Builder managedPipelineMode(@Nullable Output<String> managedPipelineMode) {
            $.managedPipelineMode = managedPipelineMode;
            return this;
        }

        /**
         * @param managedPipelineMode Managed pipeline mode. Possible values include: `Integrated`, `Classic`. Defaults to `Integrated`.
         * 
         * @return builder
         * 
         */
        public Builder managedPipelineMode(String managedPipelineMode) {
            return managedPipelineMode(Output.of(managedPipelineMode));
        }

        /**
         * @param minimumTlsVersion The configures the minimum version of TLS required for SSL requests. Possible values include: `1.0`, `1.1`, and `1.2`. Defaults to `1.2`.
         * 
         * @return builder
         * 
         */
        public Builder minimumTlsVersion(@Nullable Output<String> minimumTlsVersion) {
            $.minimumTlsVersion = minimumTlsVersion;
            return this;
        }

        /**
         * @param minimumTlsVersion The configures the minimum version of TLS required for SSL requests. Possible values include: `1.0`, `1.1`, and `1.2`. Defaults to `1.2`.
         * 
         * @return builder
         * 
         */
        public Builder minimumTlsVersion(String minimumTlsVersion) {
            return minimumTlsVersion(Output.of(minimumTlsVersion));
        }

        /**
         * @param preWarmedInstanceCount The number of pre-warmed instances for this function app. Only affects apps on an Elastic Premium plan.
         * 
         * @return builder
         * 
         */
        public Builder preWarmedInstanceCount(@Nullable Output<Integer> preWarmedInstanceCount) {
            $.preWarmedInstanceCount = preWarmedInstanceCount;
            return this;
        }

        /**
         * @param preWarmedInstanceCount The number of pre-warmed instances for this function app. Only affects apps on an Elastic Premium plan.
         * 
         * @return builder
         * 
         */
        public Builder preWarmedInstanceCount(Integer preWarmedInstanceCount) {
            return preWarmedInstanceCount(Output.of(preWarmedInstanceCount));
        }

        /**
         * @param remoteDebuggingEnabled Should Remote Debugging be enabled. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder remoteDebuggingEnabled(@Nullable Output<Boolean> remoteDebuggingEnabled) {
            $.remoteDebuggingEnabled = remoteDebuggingEnabled;
            return this;
        }

        /**
         * @param remoteDebuggingEnabled Should Remote Debugging be enabled. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder remoteDebuggingEnabled(Boolean remoteDebuggingEnabled) {
            return remoteDebuggingEnabled(Output.of(remoteDebuggingEnabled));
        }

        /**
         * @param remoteDebuggingVersion The Remote Debugging Version. Possible values include `VS2017`, `VS2019`, and `VS2022`.
         * 
         * @return builder
         * 
         */
        public Builder remoteDebuggingVersion(@Nullable Output<String> remoteDebuggingVersion) {
            $.remoteDebuggingVersion = remoteDebuggingVersion;
            return this;
        }

        /**
         * @param remoteDebuggingVersion The Remote Debugging Version. Possible values include `VS2017`, `VS2019`, and `VS2022`.
         * 
         * @return builder
         * 
         */
        public Builder remoteDebuggingVersion(String remoteDebuggingVersion) {
            return remoteDebuggingVersion(Output.of(remoteDebuggingVersion));
        }

        /**
         * @param runtimeScaleMonitoringEnabled Should Scale Monitoring of the Functions Runtime be enabled?
         * 
         * &gt; **NOTE:** Functions runtime scale monitoring can only be enabled for Elastic Premium Function Apps or Workflow Standard Logic Apps and requires a minimum prewarmed instance count of 1.
         * 
         * @return builder
         * 
         */
        public Builder runtimeScaleMonitoringEnabled(@Nullable Output<Boolean> runtimeScaleMonitoringEnabled) {
            $.runtimeScaleMonitoringEnabled = runtimeScaleMonitoringEnabled;
            return this;
        }

        /**
         * @param runtimeScaleMonitoringEnabled Should Scale Monitoring of the Functions Runtime be enabled?
         * 
         * &gt; **NOTE:** Functions runtime scale monitoring can only be enabled for Elastic Premium Function Apps or Workflow Standard Logic Apps and requires a minimum prewarmed instance count of 1.
         * 
         * @return builder
         * 
         */
        public Builder runtimeScaleMonitoringEnabled(Boolean runtimeScaleMonitoringEnabled) {
            return runtimeScaleMonitoringEnabled(Output.of(runtimeScaleMonitoringEnabled));
        }

        /**
         * @param scmIpRestrictions One or more `scm_ip_restriction` blocks as defined above.
         * 
         * @return builder
         * 
         */
        public Builder scmIpRestrictions(@Nullable Output<List<LinuxFunctionAppSiteConfigScmIpRestrictionArgs>> scmIpRestrictions) {
            $.scmIpRestrictions = scmIpRestrictions;
            return this;
        }

        /**
         * @param scmIpRestrictions One or more `scm_ip_restriction` blocks as defined above.
         * 
         * @return builder
         * 
         */
        public Builder scmIpRestrictions(List<LinuxFunctionAppSiteConfigScmIpRestrictionArgs> scmIpRestrictions) {
            return scmIpRestrictions(Output.of(scmIpRestrictions));
        }

        /**
         * @param scmIpRestrictions One or more `scm_ip_restriction` blocks as defined above.
         * 
         * @return builder
         * 
         */
        public Builder scmIpRestrictions(LinuxFunctionAppSiteConfigScmIpRestrictionArgs... scmIpRestrictions) {
            return scmIpRestrictions(List.of(scmIpRestrictions));
        }

        /**
         * @param scmMinimumTlsVersion Configures the minimum version of TLS required for SSL requests to the SCM site Possible values include: `1.0`, `1.1`, and `1.2`. Defaults to `1.2`.
         * 
         * @return builder
         * 
         */
        public Builder scmMinimumTlsVersion(@Nullable Output<String> scmMinimumTlsVersion) {
            $.scmMinimumTlsVersion = scmMinimumTlsVersion;
            return this;
        }

        /**
         * @param scmMinimumTlsVersion Configures the minimum version of TLS required for SSL requests to the SCM site Possible values include: `1.0`, `1.1`, and `1.2`. Defaults to `1.2`.
         * 
         * @return builder
         * 
         */
        public Builder scmMinimumTlsVersion(String scmMinimumTlsVersion) {
            return scmMinimumTlsVersion(Output.of(scmMinimumTlsVersion));
        }

        /**
         * @param scmType The SCM Type in use by the Linux Function App.
         * 
         * @return builder
         * 
         */
        public Builder scmType(@Nullable Output<String> scmType) {
            $.scmType = scmType;
            return this;
        }

        /**
         * @param scmType The SCM Type in use by the Linux Function App.
         * 
         * @return builder
         * 
         */
        public Builder scmType(String scmType) {
            return scmType(Output.of(scmType));
        }

        /**
         * @param scmUseMainIpRestriction Should the Linux Function App `ip_restriction` configuration be used for the SCM also.
         * 
         * @return builder
         * 
         */
        public Builder scmUseMainIpRestriction(@Nullable Output<Boolean> scmUseMainIpRestriction) {
            $.scmUseMainIpRestriction = scmUseMainIpRestriction;
            return this;
        }

        /**
         * @param scmUseMainIpRestriction Should the Linux Function App `ip_restriction` configuration be used for the SCM also.
         * 
         * @return builder
         * 
         */
        public Builder scmUseMainIpRestriction(Boolean scmUseMainIpRestriction) {
            return scmUseMainIpRestriction(Output.of(scmUseMainIpRestriction));
        }

        /**
         * @param use32BitWorker Should the Linux Web App use a 32-bit worker process. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder use32BitWorker(@Nullable Output<Boolean> use32BitWorker) {
            $.use32BitWorker = use32BitWorker;
            return this;
        }

        /**
         * @param use32BitWorker Should the Linux Web App use a 32-bit worker process. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder use32BitWorker(Boolean use32BitWorker) {
            return use32BitWorker(Output.of(use32BitWorker));
        }

        /**
         * @param vnetRouteAllEnabled Should all outbound traffic to have NAT Gateways, Network Security Groups and User Defined Routes applied? Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder vnetRouteAllEnabled(@Nullable Output<Boolean> vnetRouteAllEnabled) {
            $.vnetRouteAllEnabled = vnetRouteAllEnabled;
            return this;
        }

        /**
         * @param vnetRouteAllEnabled Should all outbound traffic to have NAT Gateways, Network Security Groups and User Defined Routes applied? Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder vnetRouteAllEnabled(Boolean vnetRouteAllEnabled) {
            return vnetRouteAllEnabled(Output.of(vnetRouteAllEnabled));
        }

        /**
         * @param websocketsEnabled Should Web Sockets be enabled. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder websocketsEnabled(@Nullable Output<Boolean> websocketsEnabled) {
            $.websocketsEnabled = websocketsEnabled;
            return this;
        }

        /**
         * @param websocketsEnabled Should Web Sockets be enabled. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder websocketsEnabled(Boolean websocketsEnabled) {
            return websocketsEnabled(Output.of(websocketsEnabled));
        }

        /**
         * @param workerCount The number of Workers for this Linux Function App.
         * 
         * @return builder
         * 
         */
        public Builder workerCount(@Nullable Output<Integer> workerCount) {
            $.workerCount = workerCount;
            return this;
        }

        /**
         * @param workerCount The number of Workers for this Linux Function App.
         * 
         * @return builder
         * 
         */
        public Builder workerCount(Integer workerCount) {
            return workerCount(Output.of(workerCount));
        }

        public LinuxFunctionAppSiteConfigArgs build() {
            return $;
        }
    }

}
