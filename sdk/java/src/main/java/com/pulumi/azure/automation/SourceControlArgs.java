// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.automation;

import com.pulumi.azure.automation.inputs.SourceControlSecurityArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SourceControlArgs extends com.pulumi.resources.ResourceArgs {

    public static final SourceControlArgs Empty = new SourceControlArgs();

    /**
     * Whether auto async the Source Control.
     * 
     */
    @Import(name="automaticSync")
    private @Nullable Output<Boolean> automaticSync;

    /**
     * @return Whether auto async the Source Control.
     * 
     */
    public Optional<Output<Boolean>> automaticSync() {
        return Optional.ofNullable(this.automaticSync);
    }

    /**
     * The ID of Automation Account to manage this Source Control. Changing this forces a new Automation Source Control to be created.
     * 
     */
    @Import(name="automationAccountId", required=true)
    private Output<String> automationAccountId;

    /**
     * @return The ID of Automation Account to manage this Source Control. Changing this forces a new Automation Source Control to be created.
     * 
     */
    public Output<String> automationAccountId() {
        return this.automationAccountId;
    }

    /**
     * Specify the repo branch of the Source Control. Empty value is valid only for `VsoTfvc`.
     * 
     */
    @Import(name="branch")
    private @Nullable Output<String> branch;

    /**
     * @return Specify the repo branch of the Source Control. Empty value is valid only for `VsoTfvc`.
     * 
     */
    public Optional<Output<String>> branch() {
        return Optional.ofNullable(this.branch);
    }

    /**
     * A short description of the Source Control.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A short description of the Source Control.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The folder path of the source control. This Path must be relative.
     * 
     */
    @Import(name="folderPath", required=true)
    private Output<String> folderPath;

    /**
     * @return The folder path of the source control. This Path must be relative.
     * 
     */
    public Output<String> folderPath() {
        return this.folderPath;
    }

    /**
     * The name which should be used for this Automation Source Control. Changing this forces a new Automation Source Control to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name which should be used for this Automation Source Control. Changing this forces a new Automation Source Control to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Whether auto publish the Source Control. Defaults to `true`.
     * 
     */
    @Import(name="publishRunbookEnabled")
    private @Nullable Output<Boolean> publishRunbookEnabled;

    /**
     * @return Whether auto publish the Source Control. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> publishRunbookEnabled() {
        return Optional.ofNullable(this.publishRunbookEnabled);
    }

    /**
     * The Repository URL of the source control.
     * 
     */
    @Import(name="repositoryUrl", required=true)
    private Output<String> repositoryUrl;

    /**
     * @return The Repository URL of the source control.
     * 
     */
    public Output<String> repositoryUrl() {
        return this.repositoryUrl;
    }

    /**
     * A `security` block as defined below.
     * 
     */
    @Import(name="security", required=true)
    private Output<SourceControlSecurityArgs> security;

    /**
     * @return A `security` block as defined below.
     * 
     */
    public Output<SourceControlSecurityArgs> security() {
        return this.security;
    }

    /**
     * The source type of Source Control, possible vaules are `VsoGit`, `VsoTfvc` and `GitHub`, and the value is case sensitive.
     * 
     */
    @Import(name="sourceControlType", required=true)
    private Output<String> sourceControlType;

    /**
     * @return The source type of Source Control, possible vaules are `VsoGit`, `VsoTfvc` and `GitHub`, and the value is case sensitive.
     * 
     */
    public Output<String> sourceControlType() {
        return this.sourceControlType;
    }

    private SourceControlArgs() {}

    private SourceControlArgs(SourceControlArgs $) {
        this.automaticSync = $.automaticSync;
        this.automationAccountId = $.automationAccountId;
        this.branch = $.branch;
        this.description = $.description;
        this.folderPath = $.folderPath;
        this.name = $.name;
        this.publishRunbookEnabled = $.publishRunbookEnabled;
        this.repositoryUrl = $.repositoryUrl;
        this.security = $.security;
        this.sourceControlType = $.sourceControlType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SourceControlArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SourceControlArgs $;

        public Builder() {
            $ = new SourceControlArgs();
        }

        public Builder(SourceControlArgs defaults) {
            $ = new SourceControlArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param automaticSync Whether auto async the Source Control.
         * 
         * @return builder
         * 
         */
        public Builder automaticSync(@Nullable Output<Boolean> automaticSync) {
            $.automaticSync = automaticSync;
            return this;
        }

        /**
         * @param automaticSync Whether auto async the Source Control.
         * 
         * @return builder
         * 
         */
        public Builder automaticSync(Boolean automaticSync) {
            return automaticSync(Output.of(automaticSync));
        }

        /**
         * @param automationAccountId The ID of Automation Account to manage this Source Control. Changing this forces a new Automation Source Control to be created.
         * 
         * @return builder
         * 
         */
        public Builder automationAccountId(Output<String> automationAccountId) {
            $.automationAccountId = automationAccountId;
            return this;
        }

        /**
         * @param automationAccountId The ID of Automation Account to manage this Source Control. Changing this forces a new Automation Source Control to be created.
         * 
         * @return builder
         * 
         */
        public Builder automationAccountId(String automationAccountId) {
            return automationAccountId(Output.of(automationAccountId));
        }

        /**
         * @param branch Specify the repo branch of the Source Control. Empty value is valid only for `VsoTfvc`.
         * 
         * @return builder
         * 
         */
        public Builder branch(@Nullable Output<String> branch) {
            $.branch = branch;
            return this;
        }

        /**
         * @param branch Specify the repo branch of the Source Control. Empty value is valid only for `VsoTfvc`.
         * 
         * @return builder
         * 
         */
        public Builder branch(String branch) {
            return branch(Output.of(branch));
        }

        /**
         * @param description A short description of the Source Control.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A short description of the Source Control.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param folderPath The folder path of the source control. This Path must be relative.
         * 
         * @return builder
         * 
         */
        public Builder folderPath(Output<String> folderPath) {
            $.folderPath = folderPath;
            return this;
        }

        /**
         * @param folderPath The folder path of the source control. This Path must be relative.
         * 
         * @return builder
         * 
         */
        public Builder folderPath(String folderPath) {
            return folderPath(Output.of(folderPath));
        }

        /**
         * @param name The name which should be used for this Automation Source Control. Changing this forces a new Automation Source Control to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this Automation Source Control. Changing this forces a new Automation Source Control to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param publishRunbookEnabled Whether auto publish the Source Control. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder publishRunbookEnabled(@Nullable Output<Boolean> publishRunbookEnabled) {
            $.publishRunbookEnabled = publishRunbookEnabled;
            return this;
        }

        /**
         * @param publishRunbookEnabled Whether auto publish the Source Control. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder publishRunbookEnabled(Boolean publishRunbookEnabled) {
            return publishRunbookEnabled(Output.of(publishRunbookEnabled));
        }

        /**
         * @param repositoryUrl The Repository URL of the source control.
         * 
         * @return builder
         * 
         */
        public Builder repositoryUrl(Output<String> repositoryUrl) {
            $.repositoryUrl = repositoryUrl;
            return this;
        }

        /**
         * @param repositoryUrl The Repository URL of the source control.
         * 
         * @return builder
         * 
         */
        public Builder repositoryUrl(String repositoryUrl) {
            return repositoryUrl(Output.of(repositoryUrl));
        }

        /**
         * @param security A `security` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder security(Output<SourceControlSecurityArgs> security) {
            $.security = security;
            return this;
        }

        /**
         * @param security A `security` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder security(SourceControlSecurityArgs security) {
            return security(Output.of(security));
        }

        /**
         * @param sourceControlType The source type of Source Control, possible vaules are `VsoGit`, `VsoTfvc` and `GitHub`, and the value is case sensitive.
         * 
         * @return builder
         * 
         */
        public Builder sourceControlType(Output<String> sourceControlType) {
            $.sourceControlType = sourceControlType;
            return this;
        }

        /**
         * @param sourceControlType The source type of Source Control, possible vaules are `VsoGit`, `VsoTfvc` and `GitHub`, and the value is case sensitive.
         * 
         * @return builder
         * 
         */
        public Builder sourceControlType(String sourceControlType) {
            return sourceControlType(Output.of(sourceControlType));
        }

        public SourceControlArgs build() {
            if ($.automationAccountId == null) {
                throw new MissingRequiredPropertyException("SourceControlArgs", "automationAccountId");
            }
            if ($.folderPath == null) {
                throw new MissingRequiredPropertyException("SourceControlArgs", "folderPath");
            }
            if ($.repositoryUrl == null) {
                throw new MissingRequiredPropertyException("SourceControlArgs", "repositoryUrl");
            }
            if ($.security == null) {
                throw new MissingRequiredPropertyException("SourceControlArgs", "security");
            }
            if ($.sourceControlType == null) {
                throw new MissingRequiredPropertyException("SourceControlArgs", "sourceControlType");
            }
            return $;
        }
    }

}
