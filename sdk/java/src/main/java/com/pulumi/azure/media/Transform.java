// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.media;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.media.TransformArgs;
import com.pulumi.azure.media.inputs.TransformState;
import com.pulumi.azure.media.outputs.TransformOutput;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a Transform.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.storage.Account;
 * import com.pulumi.azure.storage.AccountArgs;
 * import com.pulumi.azure.media.ServiceAccount;
 * import com.pulumi.azure.media.ServiceAccountArgs;
 * import com.pulumi.azure.media.inputs.ServiceAccountStorageAccountArgs;
 * import com.pulumi.azure.media.Transform;
 * import com.pulumi.azure.media.TransformArgs;
 * import com.pulumi.azure.media.inputs.TransformOutputArgs;
 * import com.pulumi.azure.media.inputs.TransformOutputBuiltinPresetArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new ResourceGroup("example", ResourceGroupArgs.builder()
 *             .name("media-resources")
 *             .location("West Europe")
 *             .build());
 * 
 *         var exampleAccount = new Account("exampleAccount", AccountArgs.builder()
 *             .name("examplestoracc")
 *             .resourceGroupName(example.name())
 *             .location(example.location())
 *             .accountTier("Standard")
 *             .accountReplicationType("GRS")
 *             .build());
 * 
 *         var exampleServiceAccount = new ServiceAccount("exampleServiceAccount", ServiceAccountArgs.builder()
 *             .name("examplemediaacc")
 *             .location(example.location())
 *             .resourceGroupName(example.name())
 *             .storageAccounts(ServiceAccountStorageAccountArgs.builder()
 *                 .id(exampleAccount.id())
 *                 .isPrimary(true)
 *                 .build())
 *             .build());
 * 
 *         var exampleTransform = new Transform("exampleTransform", TransformArgs.builder()
 *             .name("transform1")
 *             .resourceGroupName(example.name())
 *             .mediaServicesAccountName(exampleServiceAccount.name())
 *             .description("My transform description")
 *             .outputs(TransformOutputArgs.builder()
 *                 .relativePriority("Normal")
 *                 .onErrorAction("ContinueJob")
 *                 .builtinPreset(TransformOutputBuiltinPresetArgs.builder()
 *                     .presetName("AACGoodQualityAudio")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### With Multiple Outputs
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.storage.Account;
 * import com.pulumi.azure.storage.AccountArgs;
 * import com.pulumi.azure.media.ServiceAccount;
 * import com.pulumi.azure.media.ServiceAccountArgs;
 * import com.pulumi.azure.media.inputs.ServiceAccountStorageAccountArgs;
 * import com.pulumi.azure.media.Transform;
 * import com.pulumi.azure.media.TransformArgs;
 * import com.pulumi.azure.media.inputs.TransformOutputArgs;
 * import com.pulumi.azure.media.inputs.TransformOutputBuiltinPresetArgs;
 * import com.pulumi.azure.media.inputs.TransformOutputBuiltinPresetPresetConfigurationArgs;
 * import com.pulumi.azure.media.inputs.TransformOutputAudioAnalyzerPresetArgs;
 * import com.pulumi.azure.media.inputs.TransformOutputFaceDetectorPresetArgs;
 * import com.pulumi.azure.media.inputs.TransformOutputVideoAnalyzerPresetArgs;
 * import com.pulumi.azure.media.inputs.TransformOutputCustomPresetArgs;
 * import com.pulumi.azure.media.inputs.TransformOutputCustomPresetFilterArgs;
 * import com.pulumi.azure.media.inputs.TransformOutputCustomPresetFilterCropRectangleArgs;
 * import com.pulumi.azure.media.inputs.TransformOutputCustomPresetFilterDeinterlaceArgs;
 * import com.pulumi.azure.media.inputs.TransformOutputCustomPresetFilterFadeInArgs;
 * import com.pulumi.azure.media.inputs.TransformOutputCustomPresetFilterFadeOutArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new ResourceGroup("example", ResourceGroupArgs.builder()
 *             .name("media-resources")
 *             .location("West Europe")
 *             .build());
 * 
 *         var exampleAccount = new Account("exampleAccount", AccountArgs.builder()
 *             .name("examplestoracc")
 *             .resourceGroupName(example.name())
 *             .location(example.location())
 *             .accountTier("Standard")
 *             .accountReplicationType("GRS")
 *             .build());
 * 
 *         var exampleServiceAccount = new ServiceAccount("exampleServiceAccount", ServiceAccountArgs.builder()
 *             .name("examplemediaacc")
 *             .location(example.location())
 *             .resourceGroupName(example.name())
 *             .storageAccounts(ServiceAccountStorageAccountArgs.builder()
 *                 .id(exampleAccount.id())
 *                 .isPrimary(true)
 *                 .build())
 *             .build());
 * 
 *         var exampleTransform = new Transform("exampleTransform", TransformArgs.builder()
 *             .name("transform1")
 *             .resourceGroupName(example.name())
 *             .mediaServicesAccountName(exampleServiceAccount.name())
 *             .description("My transform description")
 *             .outputs(            
 *                 TransformOutputArgs.builder()
 *                     .relativePriority("Normal")
 *                     .onErrorAction("ContinueJob")
 *                     .builtinPreset(TransformOutputBuiltinPresetArgs.builder()
 *                         .presetName("AACGoodQualityAudio")
 *                         .presetConfiguration(TransformOutputBuiltinPresetPresetConfigurationArgs.builder()
 *                             .complexity("Balanced")
 *                             .interleaveOutput("NonInterleavedOutput")
 *                             .keyFrameIntervalInSeconds(123122.5)
 *                             .maxBitrateBps(300000)
 *                             .maxHeight(480)
 *                             .maxLayers(14)
 *                             .minBitrateBps(200000)
 *                             .minHeight(360)
 *                             .build())
 *                         .build())
 *                     .build(),
 *                 TransformOutputArgs.builder()
 *                     .relativePriority("Low")
 *                     .onErrorAction("ContinueJob")
 *                     .audioAnalyzerPreset(TransformOutputAudioAnalyzerPresetArgs.builder()
 *                         .audioLanguage("en-US")
 *                         .audioAnalysisMode("Basic")
 *                         .experimentalOptions(Map.of("env", "test"))
 *                         .build())
 *                     .build(),
 *                 TransformOutputArgs.builder()
 *                     .relativePriority("Low")
 *                     .onErrorAction("StopProcessingJob")
 *                     .faceDetectorPreset(TransformOutputFaceDetectorPresetArgs.builder()
 *                         .analysisResolution("StandardDefinition")
 *                         .blurType("Med")
 *                         .faceRedactorMode("Combined")
 *                         .experimentalOptions(Map.of("env", "test"))
 *                         .build())
 *                     .build(),
 *                 TransformOutputArgs.builder()
 *                     .relativePriority("Normal")
 *                     .onErrorAction("StopProcessingJob")
 *                     .videoAnalyzerPreset(TransformOutputVideoAnalyzerPresetArgs.builder()
 *                         .audioLanguage("en-US")
 *                         .audioAnalysisMode("Basic")
 *                         .insightsType("AllInsights")
 *                         .experimentalOptions(Map.of("env", "test"))
 *                         .build())
 *                     .build(),
 *                 TransformOutputArgs.builder()
 *                     .relativePriority("Low")
 *                     .onErrorAction("ContinueJob")
 *                     .customPreset(TransformOutputCustomPresetArgs.builder()
 *                         .codecs(                        
 *                             TransformOutputCustomPresetCodecArgs.builder()
 *                                 .aacAudio(TransformOutputCustomPresetCodecAacAudioArgs.builder()
 *                                     .bitrate(128000)
 *                                     .channels(2)
 *                                     .samplingRate(48000)
 *                                     .profile("AacLc")
 *                                     .build())
 *                                 .build(),
 *                             TransformOutputCustomPresetCodecArgs.builder()
 *                                 .copyAudio(TransformOutputCustomPresetCodecCopyAudioArgs.builder()
 *                                     .label("test")
 *                                     .build())
 *                                 .build(),
 *                             TransformOutputCustomPresetCodecArgs.builder()
 *                                 .copyVideo(TransformOutputCustomPresetCodecCopyVideoArgs.builder()
 *                                     .label("test")
 *                                     .build())
 *                                 .build(),
 *                             TransformOutputCustomPresetCodecArgs.builder()
 *                                 .h264Video(TransformOutputCustomPresetCodecH264VideoArgs.builder()
 *                                     .keyFrameInterval("PT1S")
 *                                     .stretchMode("AutoSize")
 *                                     .syncMode("Auto")
 *                                     .sceneChangeDetectionEnabled(false)
 *                                     .rateControlMode("ABR")
 *                                     .complexity("Quality")
 *                                     .layers(                                    
 *                                         TransformOutputCustomPresetCodecH264VideoLayerArgs.builder()
 *                                             .width("64")
 *                                             .height("64")
 *                                             .bitrate(1045000)
 *                                             .maxBitrate(1045000)
 *                                             .bFrames(3)
 *                                             .slices(0)
 *                                             .adaptiveBFrameEnabled(true)
 *                                             .profile("Auto")
 *                                             .level("auto")
 *                                             .bufferWindow("PT5S")
 *                                             .referenceFrames(4)
 *                                             .crf(23)
 *                                             .entropyMode("Cabac")
 *                                             .build(),
 *                                         TransformOutputCustomPresetCodecH264VideoLayerArgs.builder()
 *                                             .width("64")
 *                                             .height("64")
 *                                             .bitrate(1000)
 *                                             .maxBitrate(1000)
 *                                             .bFrames(3)
 *                                             .frameRate("32")
 *                                             .slices(1)
 *                                             .adaptiveBFrameEnabled(true)
 *                                             .profile("High444")
 *                                             .level("auto")
 *                                             .bufferWindow("PT5S")
 *                                             .referenceFrames(4)
 *                                             .crf(23)
 *                                             .entropyMode("Cavlc")
 *                                             .build())
 *                                     .build())
 *                                 .build(),
 *                             TransformOutputCustomPresetCodecArgs.builder()
 *                                 .h265Video(TransformOutputCustomPresetCodecH265VideoArgs.builder()
 *                                     .keyFrameInterval("PT2S")
 *                                     .stretchMode("AutoSize")
 *                                     .syncMode("Auto")
 *                                     .sceneChangeDetectionEnabled(false)
 *                                     .complexity("Speed")
 *                                     .layers(TransformOutputCustomPresetCodecH265VideoLayerArgs.builder()
 *                                         .width("64")
 *                                         .height("64")
 *                                         .bitrate(1045000)
 *                                         .maxBitrate(1045000)
 *                                         .bFrames(3)
 *                                         .slices(5)
 *                                         .adaptiveBFrameEnabled(true)
 *                                         .profile("Auto")
 *                                         .label("test")
 *                                         .level("auto")
 *                                         .bufferWindow("PT5S")
 *                                         .frameRate("32")
 *                                         .referenceFrames(4)
 *                                         .crf(23)
 *                                         .build())
 *                                     .build())
 *                                 .build(),
 *                             TransformOutputCustomPresetCodecArgs.builder()
 *                                 .jpgImage(TransformOutputCustomPresetCodecJpgImageArgs.builder()
 *                                     .stretchMode("AutoSize")
 *                                     .syncMode("Auto")
 *                                     .start("10")
 *                                     .range("100%%")
 *                                     .spriteColumn(1)
 *                                     .step("10")
 *                                     .layers(TransformOutputCustomPresetCodecJpgImageLayerArgs.builder()
 *                                         .quality(70)
 *                                         .height("180")
 *                                         .label("test")
 *                                         .width("120")
 *                                         .build())
 *                                     .build())
 *                                 .build(),
 *                             TransformOutputCustomPresetCodecArgs.builder()
 *                                 .pngImage(TransformOutputCustomPresetCodecPngImageArgs.builder()
 *                                     .stretchMode("AutoSize")
 *                                     .syncMode("Auto")
 *                                     .start("{Best}")
 *                                     .range("80")
 *                                     .step("10")
 *                                     .layers(TransformOutputCustomPresetCodecPngImageLayerArgs.builder()
 *                                         .height("180")
 *                                         .label("test")
 *                                         .width("120")
 *                                         .build())
 *                                     .build())
 *                                 .build())
 *                         .formats(                        
 *                             TransformOutputCustomPresetFormatArgs.builder()
 *                                 .jpg(TransformOutputCustomPresetFormatJpgArgs.builder()
 *                                     .filenamePattern("test{Basename}")
 *                                     .build())
 *                                 .build(),
 *                             TransformOutputCustomPresetFormatArgs.builder()
 *                                 .mp4(TransformOutputCustomPresetFormatMp4Args.builder()
 *                                     .filenamePattern("test{Bitrate}")
 *                                     .outputFiles(TransformOutputCustomPresetFormatMp4OutputFileArgs.builder()
 *                                         .labels(                                        
 *                                             "test",
 *                                             "ppe")
 *                                         .build())
 *                                     .build())
 *                                 .build(),
 *                             TransformOutputCustomPresetFormatArgs.builder()
 *                                 .png(TransformOutputCustomPresetFormatPngArgs.builder()
 *                                     .filenamePattern("test{Basename}")
 *                                     .build())
 *                                 .build(),
 *                             TransformOutputCustomPresetFormatArgs.builder()
 *                                 .transportStream(TransformOutputCustomPresetFormatTransportStreamArgs.builder()
 *                                     .filenamePattern("test{Bitrate}")
 *                                     .outputFiles(TransformOutputCustomPresetFormatTransportStreamOutputFileArgs.builder()
 *                                         .labels("prod")
 *                                         .build())
 *                                     .build())
 *                                 .build())
 *                         .filter(TransformOutputCustomPresetFilterArgs.builder()
 *                             .cropRectangle(TransformOutputCustomPresetFilterCropRectangleArgs.builder()
 *                                 .height("240")
 *                                 .left("30")
 *                                 .top("360")
 *                                 .width("70")
 *                                 .build())
 *                             .deinterlace(TransformOutputCustomPresetFilterDeinterlaceArgs.builder()
 *                                 .parity("TopFieldFirst")
 *                                 .mode("AutoPixelAdaptive")
 *                                 .build())
 *                             .fadeIn(TransformOutputCustomPresetFilterFadeInArgs.builder()
 *                                 .duration("PT5S")
 *                                 .fadeColor("0xFF0000")
 *                                 .start("10")
 *                                 .build())
 *                             .fadeOut(TransformOutputCustomPresetFilterFadeOutArgs.builder()
 *                                 .duration("90%%")
 *                                 .fadeColor("#FF0C7B")
 *                                 .start("10%%")
 *                                 .build())
 *                             .rotation("Auto")
 *                             .overlays(                            
 *                                 TransformOutputCustomPresetFilterOverlayArgs.builder()
 *                                     .audio(TransformOutputCustomPresetFilterOverlayAudioArgs.builder()
 *                                         .inputLabel("label.jpg")
 *                                         .start("PT5S")
 *                                         .end("PT30S")
 *                                         .fadeInDuration("PT1S")
 *                                         .fadeOutDuration("PT2S")
 *                                         .audioGainLevel(1)
 *                                         .build())
 *                                     .build(),
 *                                 TransformOutputCustomPresetFilterOverlayArgs.builder()
 *                                     .video(TransformOutputCustomPresetFilterOverlayVideoArgs.builder()
 *                                         .inputLabel("label.jpg")
 *                                         .start("PT5S")
 *                                         .end("PT30S")
 *                                         .fadeInDuration("PT1S")
 *                                         .fadeOutDuration("PT2S")
 *                                         .audioGainLevel(1)
 *                                         .opacity(1)
 *                                         .position(TransformOutputCustomPresetFilterOverlayVideoPositionArgs.builder()
 *                                             .height("180")
 *                                             .left("20")
 *                                             .top("240")
 *                                             .width("140")
 *                                             .build())
 *                                         .cropRectangle(TransformOutputCustomPresetFilterOverlayVideoCropRectangleArgs.builder()
 *                                             .height("240")
 *                                             .left("30")
 *                                             .top("360")
 *                                             .width("70")
 *                                             .build())
 *                                         .build())
 *                                     .build())
 *                             .build())
 *                         .build())
 *                     .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Transforms can be imported using the `resource id`, e.g.
 * 
 * ```sh
 * $ pulumi import azure:media/transform:Transform example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Media/mediaServices/media1/transforms/transform1
 * ```
 * 
 */
@ResourceType(type="azure:media/transform:Transform")
public class Transform extends com.pulumi.resources.CustomResource {
    /**
     * An optional verbose description of the Transform.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return An optional verbose description of the Transform.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * The Media Services account name. Changing this forces a new Transform to be created.
     * 
     */
    @Export(name="mediaServicesAccountName", refs={String.class}, tree="[0]")
    private Output<String> mediaServicesAccountName;

    /**
     * @return The Media Services account name. Changing this forces a new Transform to be created.
     * 
     */
    public Output<String> mediaServicesAccountName() {
        return this.mediaServicesAccountName;
    }
    /**
     * The name which should be used for this Transform. Changing this forces a new Transform to be created.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name which should be used for this Transform. Changing this forces a new Transform to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * One or more `output` blocks as defined below. At least one `output` must be defined.
     * 
     */
    @Export(name="outputs", refs={List.class,TransformOutput.class}, tree="[0,1]")
    private Output</* @Nullable */ List<TransformOutput>> outputs;

    /**
     * @return One or more `output` blocks as defined below. At least one `output` must be defined.
     * 
     */
    public Output<Optional<List<TransformOutput>>> outputs() {
        return Codegen.optional(this.outputs);
    }
    /**
     * The name of the Resource Group where the Transform should exist. Changing this forces a new Transform to be created.
     * 
     */
    @Export(name="resourceGroupName", refs={String.class}, tree="[0]")
    private Output<String> resourceGroupName;

    /**
     * @return The name of the Resource Group where the Transform should exist. Changing this forces a new Transform to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Transform(java.lang.String name) {
        this(name, TransformArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Transform(java.lang.String name, TransformArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Transform(java.lang.String name, TransformArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:media/transform:Transform", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Transform(java.lang.String name, Output<java.lang.String> id, @Nullable TransformState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:media/transform:Transform", name, state, makeResourceOptions(options, id), false);
    }

    private static TransformArgs makeArgs(TransformArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? TransformArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Transform get(java.lang.String name, Output<java.lang.String> id, @Nullable TransformState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Transform(name, id, state, options);
    }
}
