// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.nginx.outputs;

import com.pulumi.azure.nginx.outputs.GetConfigurationConfigFile;
import com.pulumi.azure.nginx.outputs.GetConfigurationProtectedFile;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetConfigurationResult {
    /**
     * @return A `config_file` block as defined below.
     * 
     */
    private List<GetConfigurationConfigFile> configFiles;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String nginxDeploymentId;
    /**
     * @return The package data for this configuration.
     * 
     */
    private String packageData;
    private List<GetConfigurationProtectedFile> protectedFiles;
    /**
     * @return The root file path of this Nginx Configuration.
     * 
     */
    private String rootFile;

    private GetConfigurationResult() {}
    /**
     * @return A `config_file` block as defined below.
     * 
     */
    public List<GetConfigurationConfigFile> configFiles() {
        return this.configFiles;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String nginxDeploymentId() {
        return this.nginxDeploymentId;
    }
    /**
     * @return The package data for this configuration.
     * 
     */
    public String packageData() {
        return this.packageData;
    }
    public List<GetConfigurationProtectedFile> protectedFiles() {
        return this.protectedFiles;
    }
    /**
     * @return The root file path of this Nginx Configuration.
     * 
     */
    public String rootFile() {
        return this.rootFile;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConfigurationResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetConfigurationConfigFile> configFiles;
        private String id;
        private String nginxDeploymentId;
        private String packageData;
        private List<GetConfigurationProtectedFile> protectedFiles;
        private String rootFile;
        public Builder() {}
        public Builder(GetConfigurationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.configFiles = defaults.configFiles;
    	      this.id = defaults.id;
    	      this.nginxDeploymentId = defaults.nginxDeploymentId;
    	      this.packageData = defaults.packageData;
    	      this.protectedFiles = defaults.protectedFiles;
    	      this.rootFile = defaults.rootFile;
        }

        @CustomType.Setter
        public Builder configFiles(List<GetConfigurationConfigFile> configFiles) {
            if (configFiles == null) {
              throw new MissingRequiredPropertyException("GetConfigurationResult", "configFiles");
            }
            this.configFiles = configFiles;
            return this;
        }
        public Builder configFiles(GetConfigurationConfigFile... configFiles) {
            return configFiles(List.of(configFiles));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetConfigurationResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder nginxDeploymentId(String nginxDeploymentId) {
            if (nginxDeploymentId == null) {
              throw new MissingRequiredPropertyException("GetConfigurationResult", "nginxDeploymentId");
            }
            this.nginxDeploymentId = nginxDeploymentId;
            return this;
        }
        @CustomType.Setter
        public Builder packageData(String packageData) {
            if (packageData == null) {
              throw new MissingRequiredPropertyException("GetConfigurationResult", "packageData");
            }
            this.packageData = packageData;
            return this;
        }
        @CustomType.Setter
        public Builder protectedFiles(List<GetConfigurationProtectedFile> protectedFiles) {
            if (protectedFiles == null) {
              throw new MissingRequiredPropertyException("GetConfigurationResult", "protectedFiles");
            }
            this.protectedFiles = protectedFiles;
            return this;
        }
        public Builder protectedFiles(GetConfigurationProtectedFile... protectedFiles) {
            return protectedFiles(List.of(protectedFiles));
        }
        @CustomType.Setter
        public Builder rootFile(String rootFile) {
            if (rootFile == null) {
              throw new MissingRequiredPropertyException("GetConfigurationResult", "rootFile");
            }
            this.rootFile = rootFile;
            return this;
        }
        public GetConfigurationResult build() {
            final var _resultValue = new GetConfigurationResult();
            _resultValue.configFiles = configFiles;
            _resultValue.id = id;
            _resultValue.nginxDeploymentId = nginxDeploymentId;
            _resultValue.packageData = packageData;
            _resultValue.protectedFiles = protectedFiles;
            _resultValue.rootFile = rootFile;
            return _resultValue;
        }
    }
}
