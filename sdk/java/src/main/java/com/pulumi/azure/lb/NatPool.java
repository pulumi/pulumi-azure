// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.lb;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.lb.NatPoolArgs;
import com.pulumi.azure.lb.inputs.NatPoolState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a Load Balancer NAT pool.
 * 
 * &gt; **NOTE:** This resource cannot be used with with virtual machines, instead use the `azure.lb.NatRule` resource.
 * 
 * &gt; **NOTE** When using this resource, the Load Balancer needs to have a FrontEnd IP Configuration Attached
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.network.PublicIp;
 * import com.pulumi.azure.network.PublicIpArgs;
 * import com.pulumi.azure.lb.LoadBalancer;
 * import com.pulumi.azure.lb.LoadBalancerArgs;
 * import com.pulumi.azure.lb.inputs.LoadBalancerFrontendIpConfigurationArgs;
 * import com.pulumi.azure.lb.NatPool;
 * import com.pulumi.azure.lb.NatPoolArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampleResourceGroup = new ResourceGroup(&#34;exampleResourceGroup&#34;, ResourceGroupArgs.builder()        
 *             .location(&#34;West Europe&#34;)
 *             .build());
 * 
 *         var examplePublicIp = new PublicIp(&#34;examplePublicIp&#34;, PublicIpArgs.builder()        
 *             .location(exampleResourceGroup.location())
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .allocationMethod(&#34;Static&#34;)
 *             .build());
 * 
 *         var exampleLoadBalancer = new LoadBalancer(&#34;exampleLoadBalancer&#34;, LoadBalancerArgs.builder()        
 *             .location(exampleResourceGroup.location())
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .frontendIpConfigurations(LoadBalancerFrontendIpConfigurationArgs.builder()
 *                 .name(&#34;PublicIPAddress&#34;)
 *                 .publicIpAddressId(examplePublicIp.id())
 *                 .build())
 *             .build());
 * 
 *         var exampleNatPool = new NatPool(&#34;exampleNatPool&#34;, NatPoolArgs.builder()        
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .loadbalancerId(exampleLoadBalancer.id())
 *             .protocol(&#34;Tcp&#34;)
 *             .frontendPortStart(80)
 *             .frontendPortEnd(81)
 *             .backendPort(8080)
 *             .frontendIpConfigurationName(&#34;PublicIPAddress&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Load Balancer NAT Pools can be imported using the `resource id`, e.g.
 * 
 * ```sh
 *  $ pulumi import azure:lb/natPool:NatPool example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Network/loadBalancers/lb1/inboundNatPools/pool1
 * ```
 * 
 */
@ResourceType(type="azure:lb/natPool:NatPool")
public class NatPool extends com.pulumi.resources.CustomResource {
    /**
     * The port used for the internal endpoint. Possible values range between 1 and 65535, inclusive.
     * 
     */
    @Export(name="backendPort", type=Integer.class, parameters={})
    private Output<Integer> backendPort;

    /**
     * @return The port used for the internal endpoint. Possible values range between 1 and 65535, inclusive.
     * 
     */
    public Output<Integer> backendPort() {
        return this.backendPort;
    }
    /**
     * Are the floating IPs enabled for this Load Balancer Rule? A floating IP is reassigned to a secondary server in case the primary server fails. Required to configure a SQL AlwaysOn Availability Group. Defaults to `false`.
     * 
     */
    @Export(name="floatingIpEnabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> floatingIpEnabled;

    /**
     * @return Are the floating IPs enabled for this Load Balancer Rule? A floating IP is reassigned to a secondary server in case the primary server fails. Required to configure a SQL AlwaysOn Availability Group. Defaults to `false`.
     * 
     */
    public Output<Optional<Boolean>> floatingIpEnabled() {
        return Codegen.optional(this.floatingIpEnabled);
    }
    @Export(name="frontendIpConfigurationId", type=String.class, parameters={})
    private Output<String> frontendIpConfigurationId;

    public Output<String> frontendIpConfigurationId() {
        return this.frontendIpConfigurationId;
    }
    /**
     * The name of the frontend IP configuration exposing this rule.
     * 
     */
    @Export(name="frontendIpConfigurationName", type=String.class, parameters={})
    private Output<String> frontendIpConfigurationName;

    /**
     * @return The name of the frontend IP configuration exposing this rule.
     * 
     */
    public Output<String> frontendIpConfigurationName() {
        return this.frontendIpConfigurationName;
    }
    /**
     * The last port number in the range of external ports that will be used to provide Inbound NAT to NICs associated with this Load Balancer. Possible values range between 1 and 65534, inclusive.
     * 
     */
    @Export(name="frontendPortEnd", type=Integer.class, parameters={})
    private Output<Integer> frontendPortEnd;

    /**
     * @return The last port number in the range of external ports that will be used to provide Inbound NAT to NICs associated with this Load Balancer. Possible values range between 1 and 65534, inclusive.
     * 
     */
    public Output<Integer> frontendPortEnd() {
        return this.frontendPortEnd;
    }
    /**
     * The first port number in the range of external ports that will be used to provide Inbound NAT to NICs associated with this Load Balancer. Possible values range between 1 and 65534, inclusive.
     * 
     */
    @Export(name="frontendPortStart", type=Integer.class, parameters={})
    private Output<Integer> frontendPortStart;

    /**
     * @return The first port number in the range of external ports that will be used to provide Inbound NAT to NICs associated with this Load Balancer. Possible values range between 1 and 65534, inclusive.
     * 
     */
    public Output<Integer> frontendPortStart() {
        return this.frontendPortStart;
    }
    /**
     * Specifies the idle timeout in minutes for TCP connections. Valid values are between `4` and `30`. Defaults to `4`.
     * 
     */
    @Export(name="idleTimeoutInMinutes", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> idleTimeoutInMinutes;

    /**
     * @return Specifies the idle timeout in minutes for TCP connections. Valid values are between `4` and `30`. Defaults to `4`.
     * 
     */
    public Output<Optional<Integer>> idleTimeoutInMinutes() {
        return Codegen.optional(this.idleTimeoutInMinutes);
    }
    /**
     * The ID of the Load Balancer in which to create the NAT pool.
     * 
     */
    @Export(name="loadbalancerId", type=String.class, parameters={})
    private Output<String> loadbalancerId;

    /**
     * @return The ID of the Load Balancer in which to create the NAT pool.
     * 
     */
    public Output<String> loadbalancerId() {
        return this.loadbalancerId;
    }
    /**
     * Specifies the name of the NAT pool.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Specifies the name of the NAT pool.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The transport protocol for the external endpoint. Possible values are `All`, `Tcp` and `Udp`.
     * 
     */
    @Export(name="protocol", type=String.class, parameters={})
    private Output<String> protocol;

    /**
     * @return The transport protocol for the external endpoint. Possible values are `All`, `Tcp` and `Udp`.
     * 
     */
    public Output<String> protocol() {
        return this.protocol;
    }
    /**
     * The name of the resource group in which to create the resource.
     * 
     */
    @Export(name="resourceGroupName", type=String.class, parameters={})
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group in which to create the resource.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * Is TCP Reset enabled for this Load Balancer Rule? Defaults to `false`.
     * 
     */
    @Export(name="tcpResetEnabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> tcpResetEnabled;

    /**
     * @return Is TCP Reset enabled for this Load Balancer Rule? Defaults to `false`.
     * 
     */
    public Output<Optional<Boolean>> tcpResetEnabled() {
        return Codegen.optional(this.tcpResetEnabled);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public NatPool(String name) {
        this(name, NatPoolArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public NatPool(String name, NatPoolArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public NatPool(String name, NatPoolArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:lb/natPool:NatPool", name, args == null ? NatPoolArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private NatPool(String name, Output<String> id, @Nullable NatPoolState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:lb/natPool:NatPool", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static NatPool get(String name, Output<String> id, @Nullable NatPoolState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new NatPool(name, id, state, options);
    }
}
