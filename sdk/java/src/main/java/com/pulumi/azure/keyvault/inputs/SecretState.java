// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.keyvault.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecretState extends com.pulumi.resources.ResourceArgs {

    public static final SecretState Empty = new SecretState();

    /**
     * Specifies the content type for the Key Vault Secret.
     * 
     */
    @Import(name="contentType")
    private @Nullable Output<String> contentType;

    /**
     * @return Specifies the content type for the Key Vault Secret.
     * 
     */
    public Optional<Output<String>> contentType() {
        return Optional.ofNullable(this.contentType);
    }

    /**
     * Expiration UTC datetime (Y-m-d&#39;T&#39;H:M:S&#39;Z&#39;).
     * 
     */
    @Import(name="expirationDate")
    private @Nullable Output<String> expirationDate;

    /**
     * @return Expiration UTC datetime (Y-m-d&#39;T&#39;H:M:S&#39;Z&#39;).
     * 
     */
    public Optional<Output<String>> expirationDate() {
        return Optional.ofNullable(this.expirationDate);
    }

    /**
     * The ID of the Key Vault where the Secret should be created.
     * 
     */
    @Import(name="keyVaultId")
    private @Nullable Output<String> keyVaultId;

    /**
     * @return The ID of the Key Vault where the Secret should be created.
     * 
     */
    public Optional<Output<String>> keyVaultId() {
        return Optional.ofNullable(this.keyVaultId);
    }

    /**
     * Specifies the name of the Key Vault Secret. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the name of the Key Vault Secret. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Key not usable before the provided UTC datetime (Y-m-d&#39;T&#39;H:M:S&#39;Z&#39;).
     * 
     */
    @Import(name="notBeforeDate")
    private @Nullable Output<String> notBeforeDate;

    /**
     * @return Key not usable before the provided UTC datetime (Y-m-d&#39;T&#39;H:M:S&#39;Z&#39;).
     * 
     */
    public Optional<Output<String>> notBeforeDate() {
        return Optional.ofNullable(this.notBeforeDate);
    }

    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Specifies the value of the Key Vault Secret.
     * 
     */
    @Import(name="value")
    private @Nullable Output<String> value;

    /**
     * @return Specifies the value of the Key Vault Secret.
     * 
     */
    public Optional<Output<String>> value() {
        return Optional.ofNullable(this.value);
    }

    /**
     * The current version of the Key Vault Secret.
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return The current version of the Key Vault Secret.
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    /**
     * The Base ID of the Key Vault Secret.
     * 
     */
    @Import(name="versionlessId")
    private @Nullable Output<String> versionlessId;

    /**
     * @return The Base ID of the Key Vault Secret.
     * 
     */
    public Optional<Output<String>> versionlessId() {
        return Optional.ofNullable(this.versionlessId);
    }

    private SecretState() {}

    private SecretState(SecretState $) {
        this.contentType = $.contentType;
        this.expirationDate = $.expirationDate;
        this.keyVaultId = $.keyVaultId;
        this.name = $.name;
        this.notBeforeDate = $.notBeforeDate;
        this.tags = $.tags;
        this.value = $.value;
        this.version = $.version;
        this.versionlessId = $.versionlessId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecretState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecretState $;

        public Builder() {
            $ = new SecretState();
        }

        public Builder(SecretState defaults) {
            $ = new SecretState(Objects.requireNonNull(defaults));
        }

        /**
         * @param contentType Specifies the content type for the Key Vault Secret.
         * 
         * @return builder
         * 
         */
        public Builder contentType(@Nullable Output<String> contentType) {
            $.contentType = contentType;
            return this;
        }

        /**
         * @param contentType Specifies the content type for the Key Vault Secret.
         * 
         * @return builder
         * 
         */
        public Builder contentType(String contentType) {
            return contentType(Output.of(contentType));
        }

        /**
         * @param expirationDate Expiration UTC datetime (Y-m-d&#39;T&#39;H:M:S&#39;Z&#39;).
         * 
         * @return builder
         * 
         */
        public Builder expirationDate(@Nullable Output<String> expirationDate) {
            $.expirationDate = expirationDate;
            return this;
        }

        /**
         * @param expirationDate Expiration UTC datetime (Y-m-d&#39;T&#39;H:M:S&#39;Z&#39;).
         * 
         * @return builder
         * 
         */
        public Builder expirationDate(String expirationDate) {
            return expirationDate(Output.of(expirationDate));
        }

        /**
         * @param keyVaultId The ID of the Key Vault where the Secret should be created.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultId(@Nullable Output<String> keyVaultId) {
            $.keyVaultId = keyVaultId;
            return this;
        }

        /**
         * @param keyVaultId The ID of the Key Vault where the Secret should be created.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultId(String keyVaultId) {
            return keyVaultId(Output.of(keyVaultId));
        }

        /**
         * @param name Specifies the name of the Key Vault Secret. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of the Key Vault Secret. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param notBeforeDate Key not usable before the provided UTC datetime (Y-m-d&#39;T&#39;H:M:S&#39;Z&#39;).
         * 
         * @return builder
         * 
         */
        public Builder notBeforeDate(@Nullable Output<String> notBeforeDate) {
            $.notBeforeDate = notBeforeDate;
            return this;
        }

        /**
         * @param notBeforeDate Key not usable before the provided UTC datetime (Y-m-d&#39;T&#39;H:M:S&#39;Z&#39;).
         * 
         * @return builder
         * 
         */
        public Builder notBeforeDate(String notBeforeDate) {
            return notBeforeDate(Output.of(notBeforeDate));
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param value Specifies the value of the Key Vault Secret.
         * 
         * @return builder
         * 
         */
        public Builder value(@Nullable Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value Specifies the value of the Key Vault Secret.
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        /**
         * @param version The current version of the Key Vault Secret.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version The current version of the Key Vault Secret.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        /**
         * @param versionlessId The Base ID of the Key Vault Secret.
         * 
         * @return builder
         * 
         */
        public Builder versionlessId(@Nullable Output<String> versionlessId) {
            $.versionlessId = versionlessId;
            return this;
        }

        /**
         * @param versionlessId The Base ID of the Key Vault Secret.
         * 
         * @return builder
         * 
         */
        public Builder versionlessId(String versionlessId) {
            return versionlessId(Output.of(versionlessId));
        }

        public SecretState build() {
            return $;
        }
    }

}
