// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.batch.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PoolDataDisk {
    /**
     * @return Values are: &#34;none&#34; - The caching mode for the disk is not enabled. &#34;readOnly&#34; - The caching mode for the disk is read only. &#34;readWrite&#34; - The caching mode for the disk is read and write. For information about the caching options see: &lt;https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/&gt;. Possible values are `None`, `ReadOnly` and `ReadWrite`. Defaults to `ReadOnly`.
     * 
     */
    private @Nullable String caching;
    /**
     * @return The initial disk size in GB when creating new data disk.
     * 
     */
    private Integer diskSizeGb;
    /**
     * @return The lun is used to uniquely identify each data disk. If attaching multiple disks, each should have a distinct lun. The value must be between 0 and 63, inclusive.
     * 
     */
    private Integer lun;
    /**
     * @return The storage account type to be used for the data disk. Values are: Possible values are `Standard_LRS` - The data disk should use standard locally redundant storage. `Premium_LRS` - The data disk should use premium locally redundant storage. Defaults to `Standard_LRS`.
     * 
     */
    private @Nullable String storageAccountType;

    private PoolDataDisk() {}
    /**
     * @return Values are: &#34;none&#34; - The caching mode for the disk is not enabled. &#34;readOnly&#34; - The caching mode for the disk is read only. &#34;readWrite&#34; - The caching mode for the disk is read and write. For information about the caching options see: &lt;https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/&gt;. Possible values are `None`, `ReadOnly` and `ReadWrite`. Defaults to `ReadOnly`.
     * 
     */
    public Optional<String> caching() {
        return Optional.ofNullable(this.caching);
    }
    /**
     * @return The initial disk size in GB when creating new data disk.
     * 
     */
    public Integer diskSizeGb() {
        return this.diskSizeGb;
    }
    /**
     * @return The lun is used to uniquely identify each data disk. If attaching multiple disks, each should have a distinct lun. The value must be between 0 and 63, inclusive.
     * 
     */
    public Integer lun() {
        return this.lun;
    }
    /**
     * @return The storage account type to be used for the data disk. Values are: Possible values are `Standard_LRS` - The data disk should use standard locally redundant storage. `Premium_LRS` - The data disk should use premium locally redundant storage. Defaults to `Standard_LRS`.
     * 
     */
    public Optional<String> storageAccountType() {
        return Optional.ofNullable(this.storageAccountType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PoolDataDisk defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String caching;
        private Integer diskSizeGb;
        private Integer lun;
        private @Nullable String storageAccountType;
        public Builder() {}
        public Builder(PoolDataDisk defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.caching = defaults.caching;
    	      this.diskSizeGb = defaults.diskSizeGb;
    	      this.lun = defaults.lun;
    	      this.storageAccountType = defaults.storageAccountType;
        }

        @CustomType.Setter
        public Builder caching(@Nullable String caching) {
            this.caching = caching;
            return this;
        }
        @CustomType.Setter
        public Builder diskSizeGb(Integer diskSizeGb) {
            this.diskSizeGb = Objects.requireNonNull(diskSizeGb);
            return this;
        }
        @CustomType.Setter
        public Builder lun(Integer lun) {
            this.lun = Objects.requireNonNull(lun);
            return this;
        }
        @CustomType.Setter
        public Builder storageAccountType(@Nullable String storageAccountType) {
            this.storageAccountType = storageAccountType;
            return this;
        }
        public PoolDataDisk build() {
            final var _resultValue = new PoolDataDisk();
            _resultValue.caching = caching;
            _resultValue.diskSizeGb = diskSizeGb;
            _resultValue.lun = lun;
            _resultValue.storageAccountType = storageAccountType;
            return _resultValue;
        }
    }
}
