// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerservice.outputs;

import com.pulumi.azure.containerservice.outputs.KubernetesClusterAciConnectorLinuxConnectorIdentity;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class KubernetesClusterAciConnectorLinux {
    /**
     * @return A `connector_identity` block is exported. The exported attributes are defined below.
     * 
     */
    private @Nullable List<KubernetesClusterAciConnectorLinuxConnectorIdentity> connectorIdentities;
    /**
     * @return The subnet name for the virtual nodes to run.
     * 
     * &gt; **Note:** At this time ACI Connectors are not supported in Azure China.
     * 
     * &gt; **Note:** AKS will add a delegation to the subnet named here. To prevent further runs from failing you should make sure that the subnet you create for virtual nodes has a delegation, like so.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azure.network.Subnet;
     * import com.pulumi.azure.network.SubnetArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var virtual = new Subnet(&#34;virtual&#34;, SubnetArgs.builder()        
     *             .delegations(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    private String subnetName;

    private KubernetesClusterAciConnectorLinux() {}
    /**
     * @return A `connector_identity` block is exported. The exported attributes are defined below.
     * 
     */
    public List<KubernetesClusterAciConnectorLinuxConnectorIdentity> connectorIdentities() {
        return this.connectorIdentities == null ? List.of() : this.connectorIdentities;
    }
    /**
     * @return The subnet name for the virtual nodes to run.
     * 
     * &gt; **Note:** At this time ACI Connectors are not supported in Azure China.
     * 
     * &gt; **Note:** AKS will add a delegation to the subnet named here. To prevent further runs from failing you should make sure that the subnet you create for virtual nodes has a delegation, like so.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azure.network.Subnet;
     * import com.pulumi.azure.network.SubnetArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var virtual = new Subnet(&#34;virtual&#34;, SubnetArgs.builder()        
     *             .delegations(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public String subnetName() {
        return this.subnetName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(KubernetesClusterAciConnectorLinux defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<KubernetesClusterAciConnectorLinuxConnectorIdentity> connectorIdentities;
        private String subnetName;
        public Builder() {}
        public Builder(KubernetesClusterAciConnectorLinux defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectorIdentities = defaults.connectorIdentities;
    	      this.subnetName = defaults.subnetName;
        }

        @CustomType.Setter
        public Builder connectorIdentities(@Nullable List<KubernetesClusterAciConnectorLinuxConnectorIdentity> connectorIdentities) {

            this.connectorIdentities = connectorIdentities;
            return this;
        }
        public Builder connectorIdentities(KubernetesClusterAciConnectorLinuxConnectorIdentity... connectorIdentities) {
            return connectorIdentities(List.of(connectorIdentities));
        }
        @CustomType.Setter
        public Builder subnetName(String subnetName) {
            if (subnetName == null) {
              throw new MissingRequiredPropertyException("KubernetesClusterAciConnectorLinux", "subnetName");
            }
            this.subnetName = subnetName;
            return this;
        }
        public KubernetesClusterAciConnectorLinux build() {
            final var _resultValue = new KubernetesClusterAciConnectorLinux();
            _resultValue.connectorIdentities = connectorIdentities;
            _resultValue.subnetName = subnetName;
            return _resultValue;
        }
    }
}
