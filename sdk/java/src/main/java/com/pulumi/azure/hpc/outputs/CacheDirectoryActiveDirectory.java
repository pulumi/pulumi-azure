// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.hpc.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CacheDirectoryActiveDirectory {
    /**
     * @return The NetBIOS name to assign to the HPC Cache when it joins the Active Directory domain as a server.
     * 
     */
    private String cacheNetbiosName;
    /**
     * @return The primary DNS IP address used to resolve the Active Directory domain controller&#39;s FQDN.
     * 
     */
    private String dnsPrimaryIp;
    /**
     * @return The secondary DNS IP address used to resolve the Active Directory domain controller&#39;s FQDN.
     * 
     */
    private @Nullable String dnsSecondaryIp;
    /**
     * @return The fully qualified domain name of the Active Directory domain controller.
     * 
     */
    private String domainName;
    /**
     * @return The Active Directory domain&#39;s NetBIOS name.
     * 
     */
    private String domainNetbiosName;
    /**
     * @return The password of the Active Directory domain administrator.
     * 
     */
    private String password;
    /**
     * @return The username of the Active Directory domain administrator.
     * 
     */
    private String username;

    private CacheDirectoryActiveDirectory() {}
    /**
     * @return The NetBIOS name to assign to the HPC Cache when it joins the Active Directory domain as a server.
     * 
     */
    public String cacheNetbiosName() {
        return this.cacheNetbiosName;
    }
    /**
     * @return The primary DNS IP address used to resolve the Active Directory domain controller&#39;s FQDN.
     * 
     */
    public String dnsPrimaryIp() {
        return this.dnsPrimaryIp;
    }
    /**
     * @return The secondary DNS IP address used to resolve the Active Directory domain controller&#39;s FQDN.
     * 
     */
    public Optional<String> dnsSecondaryIp() {
        return Optional.ofNullable(this.dnsSecondaryIp);
    }
    /**
     * @return The fully qualified domain name of the Active Directory domain controller.
     * 
     */
    public String domainName() {
        return this.domainName;
    }
    /**
     * @return The Active Directory domain&#39;s NetBIOS name.
     * 
     */
    public String domainNetbiosName() {
        return this.domainNetbiosName;
    }
    /**
     * @return The password of the Active Directory domain administrator.
     * 
     */
    public String password() {
        return this.password;
    }
    /**
     * @return The username of the Active Directory domain administrator.
     * 
     */
    public String username() {
        return this.username;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CacheDirectoryActiveDirectory defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String cacheNetbiosName;
        private String dnsPrimaryIp;
        private @Nullable String dnsSecondaryIp;
        private String domainName;
        private String domainNetbiosName;
        private String password;
        private String username;
        public Builder() {}
        public Builder(CacheDirectoryActiveDirectory defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cacheNetbiosName = defaults.cacheNetbiosName;
    	      this.dnsPrimaryIp = defaults.dnsPrimaryIp;
    	      this.dnsSecondaryIp = defaults.dnsSecondaryIp;
    	      this.domainName = defaults.domainName;
    	      this.domainNetbiosName = defaults.domainNetbiosName;
    	      this.password = defaults.password;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder cacheNetbiosName(String cacheNetbiosName) {
            if (cacheNetbiosName == null) {
              throw new MissingRequiredPropertyException("CacheDirectoryActiveDirectory", "cacheNetbiosName");
            }
            this.cacheNetbiosName = cacheNetbiosName;
            return this;
        }
        @CustomType.Setter
        public Builder dnsPrimaryIp(String dnsPrimaryIp) {
            if (dnsPrimaryIp == null) {
              throw new MissingRequiredPropertyException("CacheDirectoryActiveDirectory", "dnsPrimaryIp");
            }
            this.dnsPrimaryIp = dnsPrimaryIp;
            return this;
        }
        @CustomType.Setter
        public Builder dnsSecondaryIp(@Nullable String dnsSecondaryIp) {

            this.dnsSecondaryIp = dnsSecondaryIp;
            return this;
        }
        @CustomType.Setter
        public Builder domainName(String domainName) {
            if (domainName == null) {
              throw new MissingRequiredPropertyException("CacheDirectoryActiveDirectory", "domainName");
            }
            this.domainName = domainName;
            return this;
        }
        @CustomType.Setter
        public Builder domainNetbiosName(String domainNetbiosName) {
            if (domainNetbiosName == null) {
              throw new MissingRequiredPropertyException("CacheDirectoryActiveDirectory", "domainNetbiosName");
            }
            this.domainNetbiosName = domainNetbiosName;
            return this;
        }
        @CustomType.Setter
        public Builder password(String password) {
            if (password == null) {
              throw new MissingRequiredPropertyException("CacheDirectoryActiveDirectory", "password");
            }
            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder username(String username) {
            if (username == null) {
              throw new MissingRequiredPropertyException("CacheDirectoryActiveDirectory", "username");
            }
            this.username = username;
            return this;
        }
        public CacheDirectoryActiveDirectory build() {
            final var _resultValue = new CacheDirectoryActiveDirectory();
            _resultValue.cacheNetbiosName = cacheNetbiosName;
            _resultValue.dnsPrimaryIp = dnsPrimaryIp;
            _resultValue.dnsSecondaryIp = dnsSecondaryIp;
            _resultValue.domainName = domainName;
            _resultValue.domainNetbiosName = domainNetbiosName;
            _resultValue.password = password;
            _resultValue.username = username;
            return _resultValue;
        }
    }
}
