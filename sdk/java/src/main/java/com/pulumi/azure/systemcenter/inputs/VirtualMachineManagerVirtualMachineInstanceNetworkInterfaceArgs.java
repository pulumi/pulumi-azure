// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.systemcenter.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VirtualMachineManagerVirtualMachineInstanceNetworkInterfaceArgs extends com.pulumi.resources.ResourceArgs {

    public static final VirtualMachineManagerVirtualMachineInstanceNetworkInterfaceArgs Empty = new VirtualMachineManagerVirtualMachineInstanceNetworkInterfaceArgs();

    /**
     * The IPv4 address type. Possible values are `Dynamic` and `Static`.
     * 
     */
    @Import(name="ipv4AddressType")
    private @Nullable Output<String> ipv4AddressType;

    /**
     * @return The IPv4 address type. Possible values are `Dynamic` and `Static`.
     * 
     */
    public Optional<Output<String>> ipv4AddressType() {
        return Optional.ofNullable(this.ipv4AddressType);
    }

    /**
     * The IPv6 address type. Possible values are `Dynamic` and `Static`.
     * 
     */
    @Import(name="ipv6AddressType")
    private @Nullable Output<String> ipv6AddressType;

    /**
     * @return The IPv6 address type. Possible values are `Dynamic` and `Static`.
     * 
     */
    public Optional<Output<String>> ipv6AddressType() {
        return Optional.ofNullable(this.ipv6AddressType);
    }

    /**
     * The MAC address type. Possible values are `Dynamic` and `Static`.
     * 
     */
    @Import(name="macAddressType")
    private @Nullable Output<String> macAddressType;

    /**
     * @return The MAC address type. Possible values are `Dynamic` and `Static`.
     * 
     */
    public Optional<Output<String>> macAddressType() {
        return Optional.ofNullable(this.macAddressType);
    }

    /**
     * The name of the Virtual Network in System Center Virtual Machine Manager Server that the Network Interface is connected to.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the Virtual Network in System Center Virtual Machine Manager Server that the Network Interface is connected to.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The ID of the System Center Virtual Machine Manager Virtual Network to connect the Network Interface.
     * 
     */
    @Import(name="virtualNetworkId")
    private @Nullable Output<String> virtualNetworkId;

    /**
     * @return The ID of the System Center Virtual Machine Manager Virtual Network to connect the Network Interface.
     * 
     */
    public Optional<Output<String>> virtualNetworkId() {
        return Optional.ofNullable(this.virtualNetworkId);
    }

    private VirtualMachineManagerVirtualMachineInstanceNetworkInterfaceArgs() {}

    private VirtualMachineManagerVirtualMachineInstanceNetworkInterfaceArgs(VirtualMachineManagerVirtualMachineInstanceNetworkInterfaceArgs $) {
        this.ipv4AddressType = $.ipv4AddressType;
        this.ipv6AddressType = $.ipv6AddressType;
        this.macAddressType = $.macAddressType;
        this.name = $.name;
        this.virtualNetworkId = $.virtualNetworkId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualMachineManagerVirtualMachineInstanceNetworkInterfaceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualMachineManagerVirtualMachineInstanceNetworkInterfaceArgs $;

        public Builder() {
            $ = new VirtualMachineManagerVirtualMachineInstanceNetworkInterfaceArgs();
        }

        public Builder(VirtualMachineManagerVirtualMachineInstanceNetworkInterfaceArgs defaults) {
            $ = new VirtualMachineManagerVirtualMachineInstanceNetworkInterfaceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ipv4AddressType The IPv4 address type. Possible values are `Dynamic` and `Static`.
         * 
         * @return builder
         * 
         */
        public Builder ipv4AddressType(@Nullable Output<String> ipv4AddressType) {
            $.ipv4AddressType = ipv4AddressType;
            return this;
        }

        /**
         * @param ipv4AddressType The IPv4 address type. Possible values are `Dynamic` and `Static`.
         * 
         * @return builder
         * 
         */
        public Builder ipv4AddressType(String ipv4AddressType) {
            return ipv4AddressType(Output.of(ipv4AddressType));
        }

        /**
         * @param ipv6AddressType The IPv6 address type. Possible values are `Dynamic` and `Static`.
         * 
         * @return builder
         * 
         */
        public Builder ipv6AddressType(@Nullable Output<String> ipv6AddressType) {
            $.ipv6AddressType = ipv6AddressType;
            return this;
        }

        /**
         * @param ipv6AddressType The IPv6 address type. Possible values are `Dynamic` and `Static`.
         * 
         * @return builder
         * 
         */
        public Builder ipv6AddressType(String ipv6AddressType) {
            return ipv6AddressType(Output.of(ipv6AddressType));
        }

        /**
         * @param macAddressType The MAC address type. Possible values are `Dynamic` and `Static`.
         * 
         * @return builder
         * 
         */
        public Builder macAddressType(@Nullable Output<String> macAddressType) {
            $.macAddressType = macAddressType;
            return this;
        }

        /**
         * @param macAddressType The MAC address type. Possible values are `Dynamic` and `Static`.
         * 
         * @return builder
         * 
         */
        public Builder macAddressType(String macAddressType) {
            return macAddressType(Output.of(macAddressType));
        }

        /**
         * @param name The name of the Virtual Network in System Center Virtual Machine Manager Server that the Network Interface is connected to.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Virtual Network in System Center Virtual Machine Manager Server that the Network Interface is connected to.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param virtualNetworkId The ID of the System Center Virtual Machine Manager Virtual Network to connect the Network Interface.
         * 
         * @return builder
         * 
         */
        public Builder virtualNetworkId(@Nullable Output<String> virtualNetworkId) {
            $.virtualNetworkId = virtualNetworkId;
            return this;
        }

        /**
         * @param virtualNetworkId The ID of the System Center Virtual Machine Manager Virtual Network to connect the Network Interface.
         * 
         * @return builder
         * 
         */
        public Builder virtualNetworkId(String virtualNetworkId) {
            return virtualNetworkId(Output.of(virtualNetworkId));
        }

        public VirtualMachineManagerVirtualMachineInstanceNetworkInterfaceArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("VirtualMachineManagerVirtualMachineInstanceNetworkInterfaceArgs", "name");
            }
            return $;
        }
    }

}
