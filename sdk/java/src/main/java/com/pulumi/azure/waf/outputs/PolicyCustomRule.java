// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.waf.outputs;

import com.pulumi.azure.waf.outputs.PolicyCustomRuleMatchCondition;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PolicyCustomRule {
    /**
     * @return Type of action. Possible values are `Allow`, `Block` and `Log`.
     * 
     */
    private String action;
    /**
     * @return Describes if the policy is in enabled state or disabled state. Defaults to `true`.
     * 
     */
    private @Nullable Boolean enabled;
    /**
     * @return Specifies what grouping the rate limit will count requests by. Possible values are `GeoLocation`, `ClientAddr` and `None`.
     * 
     */
    private @Nullable String groupRateLimitBy;
    /**
     * @return One or more `match_conditions` blocks as defined below.
     * 
     */
    private List<PolicyCustomRuleMatchCondition> matchConditions;
    /**
     * @return Gets name of the resource that is unique within a policy. This name can be used to access the resource.
     * 
     */
    private @Nullable String name;
    /**
     * @return Describes priority of the rule. Rules with a lower value will be evaluated before rules with a higher value.
     * 
     */
    private Integer priority;
    /**
     * @return Specifies the duration at which the rate limit policy will be applied. Should be used with `RateLimitRule` rule type. Possible values are `FiveMins` and `OneMin`.
     * 
     */
    private @Nullable String rateLimitDuration;
    /**
     * @return Specifies the threshold value for the rate limit policy. Must be greater than or equal to 1 if provided.
     * 
     */
    private @Nullable Integer rateLimitThreshold;
    /**
     * @return Describes the type of rule. Possible values are `MatchRule`, `RateLimitRule` and `Invalid`.
     * 
     */
    private String ruleType;

    private PolicyCustomRule() {}
    /**
     * @return Type of action. Possible values are `Allow`, `Block` and `Log`.
     * 
     */
    public String action() {
        return this.action;
    }
    /**
     * @return Describes if the policy is in enabled state or disabled state. Defaults to `true`.
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    /**
     * @return Specifies what grouping the rate limit will count requests by. Possible values are `GeoLocation`, `ClientAddr` and `None`.
     * 
     */
    public Optional<String> groupRateLimitBy() {
        return Optional.ofNullable(this.groupRateLimitBy);
    }
    /**
     * @return One or more `match_conditions` blocks as defined below.
     * 
     */
    public List<PolicyCustomRuleMatchCondition> matchConditions() {
        return this.matchConditions;
    }
    /**
     * @return Gets name of the resource that is unique within a policy. This name can be used to access the resource.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Describes priority of the rule. Rules with a lower value will be evaluated before rules with a higher value.
     * 
     */
    public Integer priority() {
        return this.priority;
    }
    /**
     * @return Specifies the duration at which the rate limit policy will be applied. Should be used with `RateLimitRule` rule type. Possible values are `FiveMins` and `OneMin`.
     * 
     */
    public Optional<String> rateLimitDuration() {
        return Optional.ofNullable(this.rateLimitDuration);
    }
    /**
     * @return Specifies the threshold value for the rate limit policy. Must be greater than or equal to 1 if provided.
     * 
     */
    public Optional<Integer> rateLimitThreshold() {
        return Optional.ofNullable(this.rateLimitThreshold);
    }
    /**
     * @return Describes the type of rule. Possible values are `MatchRule`, `RateLimitRule` and `Invalid`.
     * 
     */
    public String ruleType() {
        return this.ruleType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PolicyCustomRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String action;
        private @Nullable Boolean enabled;
        private @Nullable String groupRateLimitBy;
        private List<PolicyCustomRuleMatchCondition> matchConditions;
        private @Nullable String name;
        private Integer priority;
        private @Nullable String rateLimitDuration;
        private @Nullable Integer rateLimitThreshold;
        private String ruleType;
        public Builder() {}
        public Builder(PolicyCustomRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.enabled = defaults.enabled;
    	      this.groupRateLimitBy = defaults.groupRateLimitBy;
    	      this.matchConditions = defaults.matchConditions;
    	      this.name = defaults.name;
    	      this.priority = defaults.priority;
    	      this.rateLimitDuration = defaults.rateLimitDuration;
    	      this.rateLimitThreshold = defaults.rateLimitThreshold;
    	      this.ruleType = defaults.ruleType;
        }

        @CustomType.Setter
        public Builder action(String action) {
            if (action == null) {
              throw new MissingRequiredPropertyException("PolicyCustomRule", "action");
            }
            this.action = action;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(@Nullable Boolean enabled) {

            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder groupRateLimitBy(@Nullable String groupRateLimitBy) {

            this.groupRateLimitBy = groupRateLimitBy;
            return this;
        }
        @CustomType.Setter
        public Builder matchConditions(List<PolicyCustomRuleMatchCondition> matchConditions) {
            if (matchConditions == null) {
              throw new MissingRequiredPropertyException("PolicyCustomRule", "matchConditions");
            }
            this.matchConditions = matchConditions;
            return this;
        }
        public Builder matchConditions(PolicyCustomRuleMatchCondition... matchConditions) {
            return matchConditions(List.of(matchConditions));
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder priority(Integer priority) {
            if (priority == null) {
              throw new MissingRequiredPropertyException("PolicyCustomRule", "priority");
            }
            this.priority = priority;
            return this;
        }
        @CustomType.Setter
        public Builder rateLimitDuration(@Nullable String rateLimitDuration) {

            this.rateLimitDuration = rateLimitDuration;
            return this;
        }
        @CustomType.Setter
        public Builder rateLimitThreshold(@Nullable Integer rateLimitThreshold) {

            this.rateLimitThreshold = rateLimitThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder ruleType(String ruleType) {
            if (ruleType == null) {
              throw new MissingRequiredPropertyException("PolicyCustomRule", "ruleType");
            }
            this.ruleType = ruleType;
            return this;
        }
        public PolicyCustomRule build() {
            final var _resultValue = new PolicyCustomRule();
            _resultValue.action = action;
            _resultValue.enabled = enabled;
            _resultValue.groupRateLimitBy = groupRateLimitBy;
            _resultValue.matchConditions = matchConditions;
            _resultValue.name = name;
            _resultValue.priority = priority;
            _resultValue.rateLimitDuration = rateLimitDuration;
            _resultValue.rateLimitThreshold = rateLimitThreshold;
            _resultValue.ruleType = ruleType;
            return _resultValue;
        }
    }
}
