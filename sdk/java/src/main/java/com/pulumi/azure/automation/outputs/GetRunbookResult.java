// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.automation.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetRunbookResult {
    private String automationAccountName;
    /**
     * @return The content of the Runbook.
     * 
     */
    private String content;
    /**
     * @return The description of the Runbook.
     * 
     */
    private String description;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The Azure Region where the Runbook exists.
     * 
     */
    private String location;
    /**
     * @return The activity-level tracing of the Runbook.
     * 
     */
    private Integer logActivityTraceLevel;
    /**
     * @return The Progress log option of the Runbook.
     * 
     */
    private Boolean logProgress;
    /**
     * @return The Verbose log option of the Runbook.
     * 
     */
    private Boolean logVerbose;
    private String name;
    private String resourceGroupName;
    /**
     * @return The type of Runbook.
     * 
     */
    private String runbookType;
    /**
     * @return A mapping of tags assigned to the Runbook.
     * 
     */
    private Map<String,String> tags;

    private GetRunbookResult() {}
    public String automationAccountName() {
        return this.automationAccountName;
    }
    /**
     * @return The content of the Runbook.
     * 
     */
    public String content() {
        return this.content;
    }
    /**
     * @return The description of the Runbook.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The Azure Region where the Runbook exists.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return The activity-level tracing of the Runbook.
     * 
     */
    public Integer logActivityTraceLevel() {
        return this.logActivityTraceLevel;
    }
    /**
     * @return The Progress log option of the Runbook.
     * 
     */
    public Boolean logProgress() {
        return this.logProgress;
    }
    /**
     * @return The Verbose log option of the Runbook.
     * 
     */
    public Boolean logVerbose() {
        return this.logVerbose;
    }
    public String name() {
        return this.name;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return The type of Runbook.
     * 
     */
    public String runbookType() {
        return this.runbookType;
    }
    /**
     * @return A mapping of tags assigned to the Runbook.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRunbookResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String automationAccountName;
        private String content;
        private String description;
        private String id;
        private String location;
        private Integer logActivityTraceLevel;
        private Boolean logProgress;
        private Boolean logVerbose;
        private String name;
        private String resourceGroupName;
        private String runbookType;
        private Map<String,String> tags;
        public Builder() {}
        public Builder(GetRunbookResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.automationAccountName = defaults.automationAccountName;
    	      this.content = defaults.content;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.logActivityTraceLevel = defaults.logActivityTraceLevel;
    	      this.logProgress = defaults.logProgress;
    	      this.logVerbose = defaults.logVerbose;
    	      this.name = defaults.name;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.runbookType = defaults.runbookType;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder automationAccountName(String automationAccountName) {
            if (automationAccountName == null) {
              throw new MissingRequiredPropertyException("GetRunbookResult", "automationAccountName");
            }
            this.automationAccountName = automationAccountName;
            return this;
        }
        @CustomType.Setter
        public Builder content(String content) {
            if (content == null) {
              throw new MissingRequiredPropertyException("GetRunbookResult", "content");
            }
            this.content = content;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetRunbookResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetRunbookResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetRunbookResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder logActivityTraceLevel(Integer logActivityTraceLevel) {
            if (logActivityTraceLevel == null) {
              throw new MissingRequiredPropertyException("GetRunbookResult", "logActivityTraceLevel");
            }
            this.logActivityTraceLevel = logActivityTraceLevel;
            return this;
        }
        @CustomType.Setter
        public Builder logProgress(Boolean logProgress) {
            if (logProgress == null) {
              throw new MissingRequiredPropertyException("GetRunbookResult", "logProgress");
            }
            this.logProgress = logProgress;
            return this;
        }
        @CustomType.Setter
        public Builder logVerbose(Boolean logVerbose) {
            if (logVerbose == null) {
              throw new MissingRequiredPropertyException("GetRunbookResult", "logVerbose");
            }
            this.logVerbose = logVerbose;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetRunbookResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            if (resourceGroupName == null) {
              throw new MissingRequiredPropertyException("GetRunbookResult", "resourceGroupName");
            }
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder runbookType(String runbookType) {
            if (runbookType == null) {
              throw new MissingRequiredPropertyException("GetRunbookResult", "runbookType");
            }
            this.runbookType = runbookType;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetRunbookResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public GetRunbookResult build() {
            final var _resultValue = new GetRunbookResult();
            _resultValue.automationAccountName = automationAccountName;
            _resultValue.content = content;
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.location = location;
            _resultValue.logActivityTraceLevel = logActivityTraceLevel;
            _resultValue.logProgress = logProgress;
            _resultValue.logVerbose = logVerbose;
            _resultValue.name = name;
            _resultValue.resourceGroupName = resourceGroupName;
            _resultValue.runbookType = runbookType;
            _resultValue.tags = tags;
            return _resultValue;
        }
    }
}
