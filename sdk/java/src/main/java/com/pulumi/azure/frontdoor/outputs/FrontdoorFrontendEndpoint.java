// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.frontdoor.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FrontdoorFrontendEndpoint {
    /**
     * @return Specifies the host name of the `frontend_endpoint`. Must be a domain name. In order to use a name.azurefd.net domain, the name value must match the Front Door name.
     * 
     */
    private String hostName;
    /**
     * @return The ID of the FrontDoor.
     * 
     */
    private @Nullable String id;
    /**
     * @return Specifies the name of the `frontend_endpoint`.
     * 
     */
    private String name;
    /**
     * @return Whether to allow session affinity on this host. Valid options are `true` or `false` Defaults to `false`.
     * 
     */
    private @Nullable Boolean sessionAffinityEnabled;
    /**
     * @return The TTL to use in seconds for session affinity, if applicable. Defaults to `0`.
     * 
     */
    private @Nullable Integer sessionAffinityTtlSeconds;
    /**
     * @return Defines the Web Application Firewall policy `ID` for each host.
     * 
     */
    private @Nullable String webApplicationFirewallPolicyLinkId;

    private FrontdoorFrontendEndpoint() {}
    /**
     * @return Specifies the host name of the `frontend_endpoint`. Must be a domain name. In order to use a name.azurefd.net domain, the name value must match the Front Door name.
     * 
     */
    public String hostName() {
        return this.hostName;
    }
    /**
     * @return The ID of the FrontDoor.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Specifies the name of the `frontend_endpoint`.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Whether to allow session affinity on this host. Valid options are `true` or `false` Defaults to `false`.
     * 
     */
    public Optional<Boolean> sessionAffinityEnabled() {
        return Optional.ofNullable(this.sessionAffinityEnabled);
    }
    /**
     * @return The TTL to use in seconds for session affinity, if applicable. Defaults to `0`.
     * 
     */
    public Optional<Integer> sessionAffinityTtlSeconds() {
        return Optional.ofNullable(this.sessionAffinityTtlSeconds);
    }
    /**
     * @return Defines the Web Application Firewall policy `ID` for each host.
     * 
     */
    public Optional<String> webApplicationFirewallPolicyLinkId() {
        return Optional.ofNullable(this.webApplicationFirewallPolicyLinkId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FrontdoorFrontendEndpoint defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String hostName;
        private @Nullable String id;
        private String name;
        private @Nullable Boolean sessionAffinityEnabled;
        private @Nullable Integer sessionAffinityTtlSeconds;
        private @Nullable String webApplicationFirewallPolicyLinkId;
        public Builder() {}
        public Builder(FrontdoorFrontendEndpoint defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.hostName = defaults.hostName;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.sessionAffinityEnabled = defaults.sessionAffinityEnabled;
    	      this.sessionAffinityTtlSeconds = defaults.sessionAffinityTtlSeconds;
    	      this.webApplicationFirewallPolicyLinkId = defaults.webApplicationFirewallPolicyLinkId;
        }

        @CustomType.Setter
        public Builder hostName(String hostName) {
            if (hostName == null) {
              throw new MissingRequiredPropertyException("FrontdoorFrontendEndpoint", "hostName");
            }
            this.hostName = hostName;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("FrontdoorFrontendEndpoint", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder sessionAffinityEnabled(@Nullable Boolean sessionAffinityEnabled) {

            this.sessionAffinityEnabled = sessionAffinityEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder sessionAffinityTtlSeconds(@Nullable Integer sessionAffinityTtlSeconds) {

            this.sessionAffinityTtlSeconds = sessionAffinityTtlSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder webApplicationFirewallPolicyLinkId(@Nullable String webApplicationFirewallPolicyLinkId) {

            this.webApplicationFirewallPolicyLinkId = webApplicationFirewallPolicyLinkId;
            return this;
        }
        public FrontdoorFrontendEndpoint build() {
            final var _resultValue = new FrontdoorFrontendEndpoint();
            _resultValue.hostName = hostName;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.sessionAffinityEnabled = sessionAffinityEnabled;
            _resultValue.sessionAffinityTtlSeconds = sessionAffinityTtlSeconds;
            _resultValue.webApplicationFirewallPolicyLinkId = webApplicationFirewallPolicyLinkId;
            return _resultValue;
        }
    }
}
