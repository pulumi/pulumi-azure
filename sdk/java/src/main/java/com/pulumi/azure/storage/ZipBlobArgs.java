// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.storage;

import com.pulumi.asset.Archive;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ZipBlobArgs extends com.pulumi.resources.ResourceArgs {

    public static final ZipBlobArgs Empty = new ZipBlobArgs();

    @Import(name="accessTier")
    private @Nullable Output<String> accessTier;

    public Optional<Output<String>> accessTier() {
        return Optional.ofNullable(this.accessTier);
    }

    @Import(name="cacheControl")
    private @Nullable Output<String> cacheControl;

    public Optional<Output<String>> cacheControl() {
        return Optional.ofNullable(this.cacheControl);
    }

    @Import(name="content")
    private @Nullable Output<Archive> content;

    public Optional<Output<Archive>> content() {
        return Optional.ofNullable(this.content);
    }

    @Import(name="contentMd5")
    private @Nullable Output<String> contentMd5;

    public Optional<Output<String>> contentMd5() {
        return Optional.ofNullable(this.contentMd5);
    }

    @Import(name="contentType")
    private @Nullable Output<String> contentType;

    public Optional<Output<String>> contentType() {
        return Optional.ofNullable(this.contentType);
    }

    @Import(name="metadata")
    private @Nullable Output<Map<String,String>> metadata;

    public Optional<Output<Map<String,String>>> metadata() {
        return Optional.ofNullable(this.metadata);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="parallelism")
    private @Nullable Output<Integer> parallelism;

    public Optional<Output<Integer>> parallelism() {
        return Optional.ofNullable(this.parallelism);
    }

    @Import(name="size")
    private @Nullable Output<Integer> size;

    public Optional<Output<Integer>> size() {
        return Optional.ofNullable(this.size);
    }

    @Import(name="sourceContent")
    private @Nullable Output<String> sourceContent;

    public Optional<Output<String>> sourceContent() {
        return Optional.ofNullable(this.sourceContent);
    }

    @Import(name="sourceUri")
    private @Nullable Output<String> sourceUri;

    public Optional<Output<String>> sourceUri() {
        return Optional.ofNullable(this.sourceUri);
    }

    @Import(name="storageAccountName", required=true)
    private Output<String> storageAccountName;

    public Output<String> storageAccountName() {
        return this.storageAccountName;
    }

    @Import(name="storageContainerName", required=true)
    private Output<String> storageContainerName;

    public Output<String> storageContainerName() {
        return this.storageContainerName;
    }

    @Import(name="type", required=true)
    private Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    private ZipBlobArgs() {}

    private ZipBlobArgs(ZipBlobArgs $) {
        this.accessTier = $.accessTier;
        this.cacheControl = $.cacheControl;
        this.content = $.content;
        this.contentMd5 = $.contentMd5;
        this.contentType = $.contentType;
        this.metadata = $.metadata;
        this.name = $.name;
        this.parallelism = $.parallelism;
        this.size = $.size;
        this.sourceContent = $.sourceContent;
        this.sourceUri = $.sourceUri;
        this.storageAccountName = $.storageAccountName;
        this.storageContainerName = $.storageContainerName;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ZipBlobArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ZipBlobArgs $;

        public Builder() {
            $ = new ZipBlobArgs();
        }

        public Builder(ZipBlobArgs defaults) {
            $ = new ZipBlobArgs(Objects.requireNonNull(defaults));
        }

        public Builder accessTier(@Nullable Output<String> accessTier) {
            $.accessTier = accessTier;
            return this;
        }

        public Builder accessTier(String accessTier) {
            return accessTier(Output.of(accessTier));
        }

        public Builder cacheControl(@Nullable Output<String> cacheControl) {
            $.cacheControl = cacheControl;
            return this;
        }

        public Builder cacheControl(String cacheControl) {
            return cacheControl(Output.of(cacheControl));
        }

        public Builder content(@Nullable Output<Archive> content) {
            $.content = content;
            return this;
        }

        public Builder content(Archive content) {
            return content(Output.of(content));
        }

        public Builder contentMd5(@Nullable Output<String> contentMd5) {
            $.contentMd5 = contentMd5;
            return this;
        }

        public Builder contentMd5(String contentMd5) {
            return contentMd5(Output.of(contentMd5));
        }

        public Builder contentType(@Nullable Output<String> contentType) {
            $.contentType = contentType;
            return this;
        }

        public Builder contentType(String contentType) {
            return contentType(Output.of(contentType));
        }

        public Builder metadata(@Nullable Output<Map<String,String>> metadata) {
            $.metadata = metadata;
            return this;
        }

        public Builder metadata(Map<String,String> metadata) {
            return metadata(Output.of(metadata));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder parallelism(@Nullable Output<Integer> parallelism) {
            $.parallelism = parallelism;
            return this;
        }

        public Builder parallelism(Integer parallelism) {
            return parallelism(Output.of(parallelism));
        }

        public Builder size(@Nullable Output<Integer> size) {
            $.size = size;
            return this;
        }

        public Builder size(Integer size) {
            return size(Output.of(size));
        }

        public Builder sourceContent(@Nullable Output<String> sourceContent) {
            $.sourceContent = sourceContent;
            return this;
        }

        public Builder sourceContent(String sourceContent) {
            return sourceContent(Output.of(sourceContent));
        }

        public Builder sourceUri(@Nullable Output<String> sourceUri) {
            $.sourceUri = sourceUri;
            return this;
        }

        public Builder sourceUri(String sourceUri) {
            return sourceUri(Output.of(sourceUri));
        }

        public Builder storageAccountName(Output<String> storageAccountName) {
            $.storageAccountName = storageAccountName;
            return this;
        }

        public Builder storageAccountName(String storageAccountName) {
            return storageAccountName(Output.of(storageAccountName));
        }

        public Builder storageContainerName(Output<String> storageContainerName) {
            $.storageContainerName = storageContainerName;
            return this;
        }

        public Builder storageContainerName(String storageContainerName) {
            return storageContainerName(Output.of(storageContainerName));
        }

        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public ZipBlobArgs build() {
            if ($.storageAccountName == null) {
                throw new MissingRequiredPropertyException("ZipBlobArgs", "storageAccountName");
            }
            if ($.storageContainerName == null) {
                throw new MissingRequiredPropertyException("ZipBlobArgs", "storageContainerName");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("ZipBlobArgs", "type");
            }
            return $;
        }
    }

}
