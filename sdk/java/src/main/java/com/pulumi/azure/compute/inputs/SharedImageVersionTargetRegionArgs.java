// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SharedImageVersionTargetRegionArgs extends com.pulumi.resources.ResourceArgs {

    public static final SharedImageVersionTargetRegionArgs Empty = new SharedImageVersionTargetRegionArgs();

    /**
     * The ID of the Disk Encryption Set to encrypt the Image Version in the target region. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="diskEncryptionSetId")
    private @Nullable Output<String> diskEncryptionSetId;

    /**
     * @return The ID of the Disk Encryption Set to encrypt the Image Version in the target region. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> diskEncryptionSetId() {
        return Optional.ofNullable(this.diskEncryptionSetId);
    }

    /**
     * Specifies whether this Shared Image Version should be excluded when querying for the `latest` version. Defaults to `false`.
     * 
     */
    @Import(name="excludeFromLatestEnabled")
    private @Nullable Output<Boolean> excludeFromLatestEnabled;

    /**
     * @return Specifies whether this Shared Image Version should be excluded when querying for the `latest` version. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> excludeFromLatestEnabled() {
        return Optional.ofNullable(this.excludeFromLatestEnabled);
    }

    /**
     * The Azure Region in which this Image Version should exist.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The Azure Region in which this Image Version should exist.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The number of replicas of the Image Version to be created per region.
     * 
     */
    @Import(name="regionalReplicaCount", required=true)
    private Output<Integer> regionalReplicaCount;

    /**
     * @return The number of replicas of the Image Version to be created per region.
     * 
     */
    public Output<Integer> regionalReplicaCount() {
        return this.regionalReplicaCount;
    }

    /**
     * The storage account type for the image version. Possible values are `Standard_LRS`, `Premium_LRS` and `Standard_ZRS`. Defaults to `Standard_LRS`. You can store all of your image version replicas in Zone Redundant Storage by specifying `Standard_ZRS`.
     * 
     */
    @Import(name="storageAccountType")
    private @Nullable Output<String> storageAccountType;

    /**
     * @return The storage account type for the image version. Possible values are `Standard_LRS`, `Premium_LRS` and `Standard_ZRS`. Defaults to `Standard_LRS`. You can store all of your image version replicas in Zone Redundant Storage by specifying `Standard_ZRS`.
     * 
     */
    public Optional<Output<String>> storageAccountType() {
        return Optional.ofNullable(this.storageAccountType);
    }

    private SharedImageVersionTargetRegionArgs() {}

    private SharedImageVersionTargetRegionArgs(SharedImageVersionTargetRegionArgs $) {
        this.diskEncryptionSetId = $.diskEncryptionSetId;
        this.excludeFromLatestEnabled = $.excludeFromLatestEnabled;
        this.name = $.name;
        this.regionalReplicaCount = $.regionalReplicaCount;
        this.storageAccountType = $.storageAccountType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SharedImageVersionTargetRegionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SharedImageVersionTargetRegionArgs $;

        public Builder() {
            $ = new SharedImageVersionTargetRegionArgs();
        }

        public Builder(SharedImageVersionTargetRegionArgs defaults) {
            $ = new SharedImageVersionTargetRegionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param diskEncryptionSetId The ID of the Disk Encryption Set to encrypt the Image Version in the target region. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder diskEncryptionSetId(@Nullable Output<String> diskEncryptionSetId) {
            $.diskEncryptionSetId = diskEncryptionSetId;
            return this;
        }

        /**
         * @param diskEncryptionSetId The ID of the Disk Encryption Set to encrypt the Image Version in the target region. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder diskEncryptionSetId(String diskEncryptionSetId) {
            return diskEncryptionSetId(Output.of(diskEncryptionSetId));
        }

        /**
         * @param excludeFromLatestEnabled Specifies whether this Shared Image Version should be excluded when querying for the `latest` version. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder excludeFromLatestEnabled(@Nullable Output<Boolean> excludeFromLatestEnabled) {
            $.excludeFromLatestEnabled = excludeFromLatestEnabled;
            return this;
        }

        /**
         * @param excludeFromLatestEnabled Specifies whether this Shared Image Version should be excluded when querying for the `latest` version. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder excludeFromLatestEnabled(Boolean excludeFromLatestEnabled) {
            return excludeFromLatestEnabled(Output.of(excludeFromLatestEnabled));
        }

        /**
         * @param name The Azure Region in which this Image Version should exist.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The Azure Region in which this Image Version should exist.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param regionalReplicaCount The number of replicas of the Image Version to be created per region.
         * 
         * @return builder
         * 
         */
        public Builder regionalReplicaCount(Output<Integer> regionalReplicaCount) {
            $.regionalReplicaCount = regionalReplicaCount;
            return this;
        }

        /**
         * @param regionalReplicaCount The number of replicas of the Image Version to be created per region.
         * 
         * @return builder
         * 
         */
        public Builder regionalReplicaCount(Integer regionalReplicaCount) {
            return regionalReplicaCount(Output.of(regionalReplicaCount));
        }

        /**
         * @param storageAccountType The storage account type for the image version. Possible values are `Standard_LRS`, `Premium_LRS` and `Standard_ZRS`. Defaults to `Standard_LRS`. You can store all of your image version replicas in Zone Redundant Storage by specifying `Standard_ZRS`.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountType(@Nullable Output<String> storageAccountType) {
            $.storageAccountType = storageAccountType;
            return this;
        }

        /**
         * @param storageAccountType The storage account type for the image version. Possible values are `Standard_LRS`, `Premium_LRS` and `Standard_ZRS`. Defaults to `Standard_LRS`. You can store all of your image version replicas in Zone Redundant Storage by specifying `Standard_ZRS`.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountType(String storageAccountType) {
            return storageAccountType(Output.of(storageAccountType));
        }

        public SharedImageVersionTargetRegionArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("SharedImageVersionTargetRegionArgs", "name");
            }
            if ($.regionalReplicaCount == null) {
                throw new MissingRequiredPropertyException("SharedImageVersionTargetRegionArgs", "regionalReplicaCount");
            }
            return $;
        }
    }

}
