// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.devtest.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetLabResult {
    /**
     * @return The ID of the Storage Account used for Artifact Storage.
     * 
     */
    private String artifactsStorageAccountId;
    /**
     * @return The ID of the Default Premium Storage Account for this Dev Test Lab.
     * 
     */
    private String defaultPremiumStorageAccountId;
    /**
     * @return The ID of the Default Storage Account for this Dev Test Lab.
     * 
     */
    private String defaultStorageAccountId;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The ID of the Key used for this Dev Test Lab.
     * 
     */
    private String keyVaultId;
    /**
     * @return The Azure location where the Dev Test Lab exists.
     * 
     */
    private String location;
    private String name;
    /**
     * @return The ID of the Storage Account used for Storage of Premium Data Disk.
     * 
     */
    private String premiumDataDiskStorageAccountId;
    private String resourceGroupName;
    /**
     * @return The type of storage used by the Dev Test Lab.
     * 
     */
    private String storageType;
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return The unique immutable identifier of the Dev Test Lab.
     * 
     */
    private String uniqueIdentifier;

    private GetLabResult() {}
    /**
     * @return The ID of the Storage Account used for Artifact Storage.
     * 
     */
    public String artifactsStorageAccountId() {
        return this.artifactsStorageAccountId;
    }
    /**
     * @return The ID of the Default Premium Storage Account for this Dev Test Lab.
     * 
     */
    public String defaultPremiumStorageAccountId() {
        return this.defaultPremiumStorageAccountId;
    }
    /**
     * @return The ID of the Default Storage Account for this Dev Test Lab.
     * 
     */
    public String defaultStorageAccountId() {
        return this.defaultStorageAccountId;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The ID of the Key used for this Dev Test Lab.
     * 
     */
    public String keyVaultId() {
        return this.keyVaultId;
    }
    /**
     * @return The Azure location where the Dev Test Lab exists.
     * 
     */
    public String location() {
        return this.location;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return The ID of the Storage Account used for Storage of Premium Data Disk.
     * 
     */
    public String premiumDataDiskStorageAccountId() {
        return this.premiumDataDiskStorageAccountId;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return The type of storage used by the Dev Test Lab.
     * 
     */
    public String storageType() {
        return this.storageType;
    }
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return The unique immutable identifier of the Dev Test Lab.
     * 
     */
    public String uniqueIdentifier() {
        return this.uniqueIdentifier;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLabResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String artifactsStorageAccountId;
        private String defaultPremiumStorageAccountId;
        private String defaultStorageAccountId;
        private String id;
        private String keyVaultId;
        private String location;
        private String name;
        private String premiumDataDiskStorageAccountId;
        private String resourceGroupName;
        private String storageType;
        private Map<String,String> tags;
        private String uniqueIdentifier;
        public Builder() {}
        public Builder(GetLabResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.artifactsStorageAccountId = defaults.artifactsStorageAccountId;
    	      this.defaultPremiumStorageAccountId = defaults.defaultPremiumStorageAccountId;
    	      this.defaultStorageAccountId = defaults.defaultStorageAccountId;
    	      this.id = defaults.id;
    	      this.keyVaultId = defaults.keyVaultId;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.premiumDataDiskStorageAccountId = defaults.premiumDataDiskStorageAccountId;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.storageType = defaults.storageType;
    	      this.tags = defaults.tags;
    	      this.uniqueIdentifier = defaults.uniqueIdentifier;
        }

        @CustomType.Setter
        public Builder artifactsStorageAccountId(String artifactsStorageAccountId) {
            this.artifactsStorageAccountId = Objects.requireNonNull(artifactsStorageAccountId);
            return this;
        }
        @CustomType.Setter
        public Builder defaultPremiumStorageAccountId(String defaultPremiumStorageAccountId) {
            this.defaultPremiumStorageAccountId = Objects.requireNonNull(defaultPremiumStorageAccountId);
            return this;
        }
        @CustomType.Setter
        public Builder defaultStorageAccountId(String defaultStorageAccountId) {
            this.defaultStorageAccountId = Objects.requireNonNull(defaultStorageAccountId);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder keyVaultId(String keyVaultId) {
            this.keyVaultId = Objects.requireNonNull(keyVaultId);
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder premiumDataDiskStorageAccountId(String premiumDataDiskStorageAccountId) {
            this.premiumDataDiskStorageAccountId = Objects.requireNonNull(premiumDataDiskStorageAccountId);
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        @CustomType.Setter
        public Builder storageType(String storageType) {
            this.storageType = Objects.requireNonNull(storageType);
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        @CustomType.Setter
        public Builder uniqueIdentifier(String uniqueIdentifier) {
            this.uniqueIdentifier = Objects.requireNonNull(uniqueIdentifier);
            return this;
        }
        public GetLabResult build() {
            final var _resultValue = new GetLabResult();
            _resultValue.artifactsStorageAccountId = artifactsStorageAccountId;
            _resultValue.defaultPremiumStorageAccountId = defaultPremiumStorageAccountId;
            _resultValue.defaultStorageAccountId = defaultStorageAccountId;
            _resultValue.id = id;
            _resultValue.keyVaultId = keyVaultId;
            _resultValue.location = location;
            _resultValue.name = name;
            _resultValue.premiumDataDiskStorageAccountId = premiumDataDiskStorageAccountId;
            _resultValue.resourceGroupName = resourceGroupName;
            _resultValue.storageType = storageType;
            _resultValue.tags = tags;
            _resultValue.uniqueIdentifier = uniqueIdentifier;
            return _resultValue;
        }
    }
}
