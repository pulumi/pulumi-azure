// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.frontdoor.inputs;

import com.pulumi.azure.frontdoor.inputs.RulesEngineRuleActionArgs;
import com.pulumi.azure.frontdoor.inputs.RulesEngineRuleMatchConditionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RulesEngineRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final RulesEngineRuleArgs Empty = new RulesEngineRuleArgs();

    /**
     * An `action` block as defined below.
     * 
     */
    @Import(name="action")
    private @Nullable Output<RulesEngineRuleActionArgs> action;

    /**
     * @return An `action` block as defined below.
     * 
     */
    public Optional<Output<RulesEngineRuleActionArgs>> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * One or more `match_condition` block as defined below.
     * 
     */
    @Import(name="matchConditions")
    private @Nullable Output<List<RulesEngineRuleMatchConditionArgs>> matchConditions;

    /**
     * @return One or more `match_condition` block as defined below.
     * 
     */
    public Optional<Output<List<RulesEngineRuleMatchConditionArgs>>> matchConditions() {
        return Optional.ofNullable(this.matchConditions);
    }

    /**
     * The name of the rule.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the rule.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Priority of the rule, must be unique per rules engine definition.
     * 
     */
    @Import(name="priority", required=true)
    private Output<Integer> priority;

    /**
     * @return Priority of the rule, must be unique per rules engine definition.
     * 
     */
    public Output<Integer> priority() {
        return this.priority;
    }

    private RulesEngineRuleArgs() {}

    private RulesEngineRuleArgs(RulesEngineRuleArgs $) {
        this.action = $.action;
        this.matchConditions = $.matchConditions;
        this.name = $.name;
        this.priority = $.priority;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RulesEngineRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RulesEngineRuleArgs $;

        public Builder() {
            $ = new RulesEngineRuleArgs();
        }

        public Builder(RulesEngineRuleArgs defaults) {
            $ = new RulesEngineRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action An `action` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder action(@Nullable Output<RulesEngineRuleActionArgs> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action An `action` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder action(RulesEngineRuleActionArgs action) {
            return action(Output.of(action));
        }

        /**
         * @param matchConditions One or more `match_condition` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder matchConditions(@Nullable Output<List<RulesEngineRuleMatchConditionArgs>> matchConditions) {
            $.matchConditions = matchConditions;
            return this;
        }

        /**
         * @param matchConditions One or more `match_condition` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder matchConditions(List<RulesEngineRuleMatchConditionArgs> matchConditions) {
            return matchConditions(Output.of(matchConditions));
        }

        /**
         * @param matchConditions One or more `match_condition` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder matchConditions(RulesEngineRuleMatchConditionArgs... matchConditions) {
            return matchConditions(List.of(matchConditions));
        }

        /**
         * @param name The name of the rule.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the rule.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param priority Priority of the rule, must be unique per rules engine definition.
         * 
         * @return builder
         * 
         */
        public Builder priority(Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority Priority of the rule, must be unique per rules engine definition.
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        public RulesEngineRuleArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("RulesEngineRuleArgs", "name");
            }
            if ($.priority == null) {
                throw new MissingRequiredPropertyException("RulesEngineRuleArgs", "priority");
            }
            return $;
        }
    }

}
