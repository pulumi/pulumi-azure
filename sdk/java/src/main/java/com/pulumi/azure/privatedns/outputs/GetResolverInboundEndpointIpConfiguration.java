// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.privatedns.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetResolverInboundEndpointIpConfiguration {
    /**
     * @return The private IP address of the IP configuration.
     * 
     */
    private String privateIpAddress;
    /**
     * @return The private IP address allocation method.
     * 
     */
    private String privateIpAllocationMethod;
    /**
     * @return The subnet ID of the IP configuration.
     * 
     */
    private String subnetId;

    private GetResolverInboundEndpointIpConfiguration() {}
    /**
     * @return The private IP address of the IP configuration.
     * 
     */
    public String privateIpAddress() {
        return this.privateIpAddress;
    }
    /**
     * @return The private IP address allocation method.
     * 
     */
    public String privateIpAllocationMethod() {
        return this.privateIpAllocationMethod;
    }
    /**
     * @return The subnet ID of the IP configuration.
     * 
     */
    public String subnetId() {
        return this.subnetId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetResolverInboundEndpointIpConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String privateIpAddress;
        private String privateIpAllocationMethod;
        private String subnetId;
        public Builder() {}
        public Builder(GetResolverInboundEndpointIpConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.privateIpAddress = defaults.privateIpAddress;
    	      this.privateIpAllocationMethod = defaults.privateIpAllocationMethod;
    	      this.subnetId = defaults.subnetId;
        }

        @CustomType.Setter
        public Builder privateIpAddress(String privateIpAddress) {
            if (privateIpAddress == null) {
              throw new MissingRequiredPropertyException("GetResolverInboundEndpointIpConfiguration", "privateIpAddress");
            }
            this.privateIpAddress = privateIpAddress;
            return this;
        }
        @CustomType.Setter
        public Builder privateIpAllocationMethod(String privateIpAllocationMethod) {
            if (privateIpAllocationMethod == null) {
              throw new MissingRequiredPropertyException("GetResolverInboundEndpointIpConfiguration", "privateIpAllocationMethod");
            }
            this.privateIpAllocationMethod = privateIpAllocationMethod;
            return this;
        }
        @CustomType.Setter
        public Builder subnetId(String subnetId) {
            if (subnetId == null) {
              throw new MissingRequiredPropertyException("GetResolverInboundEndpointIpConfiguration", "subnetId");
            }
            this.subnetId = subnetId;
            return this;
        }
        public GetResolverInboundEndpointIpConfiguration build() {
            final var _resultValue = new GetResolverInboundEndpointIpConfiguration();
            _resultValue.privateIpAddress = privateIpAddress;
            _resultValue.privateIpAllocationMethod = privateIpAllocationMethod;
            _resultValue.subnetId = subnetId;
            return _resultValue;
        }
    }
}
