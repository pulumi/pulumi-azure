// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.eventhub.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.util.Objects;


public final class EventSubscriptionRetryPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final EventSubscriptionRetryPolicyArgs Empty = new EventSubscriptionRetryPolicyArgs();

    /**
     * Specifies the time to live (in minutes) for events. Supported range is `1` to `1440`. See [official documentation](https://docs.microsoft.com/azure/event-grid/manage-event-delivery#set-retry-policy) for more details.
     * 
     */
    @Import(name="eventTimeToLive", required=true)
    private Output<Integer> eventTimeToLive;

    /**
     * @return Specifies the time to live (in minutes) for events. Supported range is `1` to `1440`. See [official documentation](https://docs.microsoft.com/azure/event-grid/manage-event-delivery#set-retry-policy) for more details.
     * 
     */
    public Output<Integer> eventTimeToLive() {
        return this.eventTimeToLive;
    }

    /**
     * Specifies the maximum number of delivery retry attempts for events.
     * 
     */
    @Import(name="maxDeliveryAttempts", required=true)
    private Output<Integer> maxDeliveryAttempts;

    /**
     * @return Specifies the maximum number of delivery retry attempts for events.
     * 
     */
    public Output<Integer> maxDeliveryAttempts() {
        return this.maxDeliveryAttempts;
    }

    private EventSubscriptionRetryPolicyArgs() {}

    private EventSubscriptionRetryPolicyArgs(EventSubscriptionRetryPolicyArgs $) {
        this.eventTimeToLive = $.eventTimeToLive;
        this.maxDeliveryAttempts = $.maxDeliveryAttempts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EventSubscriptionRetryPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EventSubscriptionRetryPolicyArgs $;

        public Builder() {
            $ = new EventSubscriptionRetryPolicyArgs();
        }

        public Builder(EventSubscriptionRetryPolicyArgs defaults) {
            $ = new EventSubscriptionRetryPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param eventTimeToLive Specifies the time to live (in minutes) for events. Supported range is `1` to `1440`. See [official documentation](https://docs.microsoft.com/azure/event-grid/manage-event-delivery#set-retry-policy) for more details.
         * 
         * @return builder
         * 
         */
        public Builder eventTimeToLive(Output<Integer> eventTimeToLive) {
            $.eventTimeToLive = eventTimeToLive;
            return this;
        }

        /**
         * @param eventTimeToLive Specifies the time to live (in minutes) for events. Supported range is `1` to `1440`. See [official documentation](https://docs.microsoft.com/azure/event-grid/manage-event-delivery#set-retry-policy) for more details.
         * 
         * @return builder
         * 
         */
        public Builder eventTimeToLive(Integer eventTimeToLive) {
            return eventTimeToLive(Output.of(eventTimeToLive));
        }

        /**
         * @param maxDeliveryAttempts Specifies the maximum number of delivery retry attempts for events.
         * 
         * @return builder
         * 
         */
        public Builder maxDeliveryAttempts(Output<Integer> maxDeliveryAttempts) {
            $.maxDeliveryAttempts = maxDeliveryAttempts;
            return this;
        }

        /**
         * @param maxDeliveryAttempts Specifies the maximum number of delivery retry attempts for events.
         * 
         * @return builder
         * 
         */
        public Builder maxDeliveryAttempts(Integer maxDeliveryAttempts) {
            return maxDeliveryAttempts(Output.of(maxDeliveryAttempts));
        }

        public EventSubscriptionRetryPolicyArgs build() {
            if ($.eventTimeToLive == null) {
                throw new MissingRequiredPropertyException("EventSubscriptionRetryPolicyArgs", "eventTimeToLive");
            }
            if ($.maxDeliveryAttempts == null) {
                throw new MissingRequiredPropertyException("EventSubscriptionRetryPolicyArgs", "maxDeliveryAttempts");
            }
            return $;
        }
    }

}
