// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerservice.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegistryTaskFileStepArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegistryTaskFileStepArgs Empty = new RegistryTaskFileStepArgs();

    /**
     * The token (Git PAT or SAS token of storage account blob) associated with the context for this step.
     * 
     */
    @Import(name="contextAccessToken")
    private @Nullable Output<String> contextAccessToken;

    /**
     * @return The token (Git PAT or SAS token of storage account blob) associated with the context for this step.
     * 
     */
    public Optional<Output<String>> contextAccessToken() {
        return Optional.ofNullable(this.contextAccessToken);
    }

    /**
     * The URL (absolute or relative) of the source context for this step.
     * 
     */
    @Import(name="contextPath")
    private @Nullable Output<String> contextPath;

    /**
     * @return The URL (absolute or relative) of the source context for this step.
     * 
     */
    public Optional<Output<String>> contextPath() {
        return Optional.ofNullable(this.contextPath);
    }

    /**
     * Specifies a map of secret values that can be passed when running a task.
     * 
     */
    @Import(name="secretValues")
    private @Nullable Output<Map<String,String>> secretValues;

    /**
     * @return Specifies a map of secret values that can be passed when running a task.
     * 
     */
    public Optional<Output<Map<String,String>>> secretValues() {
        return Optional.ofNullable(this.secretValues);
    }

    /**
     * The task template file path relative to the source context.
     * 
     */
    @Import(name="taskFilePath", required=true)
    private Output<String> taskFilePath;

    /**
     * @return The task template file path relative to the source context.
     * 
     */
    public Output<String> taskFilePath() {
        return this.taskFilePath;
    }

    /**
     * The parameters file path relative to the source context.
     * 
     */
    @Import(name="valueFilePath")
    private @Nullable Output<String> valueFilePath;

    /**
     * @return The parameters file path relative to the source context.
     * 
     */
    public Optional<Output<String>> valueFilePath() {
        return Optional.ofNullable(this.valueFilePath);
    }

    /**
     * Specifies a map of values that can be passed when running a task.
     * 
     */
    @Import(name="values")
    private @Nullable Output<Map<String,String>> values;

    /**
     * @return Specifies a map of values that can be passed when running a task.
     * 
     */
    public Optional<Output<Map<String,String>>> values() {
        return Optional.ofNullable(this.values);
    }

    private RegistryTaskFileStepArgs() {}

    private RegistryTaskFileStepArgs(RegistryTaskFileStepArgs $) {
        this.contextAccessToken = $.contextAccessToken;
        this.contextPath = $.contextPath;
        this.secretValues = $.secretValues;
        this.taskFilePath = $.taskFilePath;
        this.valueFilePath = $.valueFilePath;
        this.values = $.values;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegistryTaskFileStepArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegistryTaskFileStepArgs $;

        public Builder() {
            $ = new RegistryTaskFileStepArgs();
        }

        public Builder(RegistryTaskFileStepArgs defaults) {
            $ = new RegistryTaskFileStepArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param contextAccessToken The token (Git PAT or SAS token of storage account blob) associated with the context for this step.
         * 
         * @return builder
         * 
         */
        public Builder contextAccessToken(@Nullable Output<String> contextAccessToken) {
            $.contextAccessToken = contextAccessToken;
            return this;
        }

        /**
         * @param contextAccessToken The token (Git PAT or SAS token of storage account blob) associated with the context for this step.
         * 
         * @return builder
         * 
         */
        public Builder contextAccessToken(String contextAccessToken) {
            return contextAccessToken(Output.of(contextAccessToken));
        }

        /**
         * @param contextPath The URL (absolute or relative) of the source context for this step.
         * 
         * @return builder
         * 
         */
        public Builder contextPath(@Nullable Output<String> contextPath) {
            $.contextPath = contextPath;
            return this;
        }

        /**
         * @param contextPath The URL (absolute or relative) of the source context for this step.
         * 
         * @return builder
         * 
         */
        public Builder contextPath(String contextPath) {
            return contextPath(Output.of(contextPath));
        }

        /**
         * @param secretValues Specifies a map of secret values that can be passed when running a task.
         * 
         * @return builder
         * 
         */
        public Builder secretValues(@Nullable Output<Map<String,String>> secretValues) {
            $.secretValues = secretValues;
            return this;
        }

        /**
         * @param secretValues Specifies a map of secret values that can be passed when running a task.
         * 
         * @return builder
         * 
         */
        public Builder secretValues(Map<String,String> secretValues) {
            return secretValues(Output.of(secretValues));
        }

        /**
         * @param taskFilePath The task template file path relative to the source context.
         * 
         * @return builder
         * 
         */
        public Builder taskFilePath(Output<String> taskFilePath) {
            $.taskFilePath = taskFilePath;
            return this;
        }

        /**
         * @param taskFilePath The task template file path relative to the source context.
         * 
         * @return builder
         * 
         */
        public Builder taskFilePath(String taskFilePath) {
            return taskFilePath(Output.of(taskFilePath));
        }

        /**
         * @param valueFilePath The parameters file path relative to the source context.
         * 
         * @return builder
         * 
         */
        public Builder valueFilePath(@Nullable Output<String> valueFilePath) {
            $.valueFilePath = valueFilePath;
            return this;
        }

        /**
         * @param valueFilePath The parameters file path relative to the source context.
         * 
         * @return builder
         * 
         */
        public Builder valueFilePath(String valueFilePath) {
            return valueFilePath(Output.of(valueFilePath));
        }

        /**
         * @param values Specifies a map of values that can be passed when running a task.
         * 
         * @return builder
         * 
         */
        public Builder values(@Nullable Output<Map<String,String>> values) {
            $.values = values;
            return this;
        }

        /**
         * @param values Specifies a map of values that can be passed when running a task.
         * 
         * @return builder
         * 
         */
        public Builder values(Map<String,String> values) {
            return values(Output.of(values));
        }

        public RegistryTaskFileStepArgs build() {
            if ($.taskFilePath == null) {
                throw new MissingRequiredPropertyException("RegistryTaskFileStepArgs", "taskFilePath");
            }
            return $;
        }
    }

}
