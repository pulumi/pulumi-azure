// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.webpubsub.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class HubEventListener {
    /**
     * @return Specifies the event hub name to receive the events.
     * 
     */
    private String eventhubName;
    /**
     * @return Specifies the event hub namespace name to receive the events.
     * 
     */
    private String eventhubNamespaceName;
    /**
     * @return Specifies the list of system events. Supported values are `connected` and `disconnected`.
     * 
     */
    private @Nullable List<String> systemEventNameFilters;
    /**
     * @return Specifies the list of matching user event names. `[&#34;*&#34;]` can be used to match all events.
     * 
     */
    private @Nullable List<String> userEventNameFilters;

    private HubEventListener() {}
    /**
     * @return Specifies the event hub name to receive the events.
     * 
     */
    public String eventhubName() {
        return this.eventhubName;
    }
    /**
     * @return Specifies the event hub namespace name to receive the events.
     * 
     */
    public String eventhubNamespaceName() {
        return this.eventhubNamespaceName;
    }
    /**
     * @return Specifies the list of system events. Supported values are `connected` and `disconnected`.
     * 
     */
    public List<String> systemEventNameFilters() {
        return this.systemEventNameFilters == null ? List.of() : this.systemEventNameFilters;
    }
    /**
     * @return Specifies the list of matching user event names. `[&#34;*&#34;]` can be used to match all events.
     * 
     */
    public List<String> userEventNameFilters() {
        return this.userEventNameFilters == null ? List.of() : this.userEventNameFilters;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HubEventListener defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String eventhubName;
        private String eventhubNamespaceName;
        private @Nullable List<String> systemEventNameFilters;
        private @Nullable List<String> userEventNameFilters;
        public Builder() {}
        public Builder(HubEventListener defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.eventhubName = defaults.eventhubName;
    	      this.eventhubNamespaceName = defaults.eventhubNamespaceName;
    	      this.systemEventNameFilters = defaults.systemEventNameFilters;
    	      this.userEventNameFilters = defaults.userEventNameFilters;
        }

        @CustomType.Setter
        public Builder eventhubName(String eventhubName) {
            if (eventhubName == null) {
              throw new MissingRequiredPropertyException("HubEventListener", "eventhubName");
            }
            this.eventhubName = eventhubName;
            return this;
        }
        @CustomType.Setter
        public Builder eventhubNamespaceName(String eventhubNamespaceName) {
            if (eventhubNamespaceName == null) {
              throw new MissingRequiredPropertyException("HubEventListener", "eventhubNamespaceName");
            }
            this.eventhubNamespaceName = eventhubNamespaceName;
            return this;
        }
        @CustomType.Setter
        public Builder systemEventNameFilters(@Nullable List<String> systemEventNameFilters) {

            this.systemEventNameFilters = systemEventNameFilters;
            return this;
        }
        public Builder systemEventNameFilters(String... systemEventNameFilters) {
            return systemEventNameFilters(List.of(systemEventNameFilters));
        }
        @CustomType.Setter
        public Builder userEventNameFilters(@Nullable List<String> userEventNameFilters) {

            this.userEventNameFilters = userEventNameFilters;
            return this;
        }
        public Builder userEventNameFilters(String... userEventNameFilters) {
            return userEventNameFilters(List.of(userEventNameFilters));
        }
        public HubEventListener build() {
            final var _resultValue = new HubEventListener();
            _resultValue.eventhubName = eventhubName;
            _resultValue.eventhubNamespaceName = eventhubNamespaceName;
            _resultValue.systemEventNameFilters = systemEventNameFilters;
            _resultValue.userEventNameFilters = userEventNameFilters;
            return _resultValue;
        }
    }
}
