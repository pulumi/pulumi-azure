// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.dynatrace.outputs;

import com.pulumi.azure.dynatrace.outputs.MonitorEnvironmentPropertyEnvironmentInfo;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.util.List;
import java.util.Objects;

@CustomType
public final class MonitorEnvironmentProperty {
    /**
     * @return Information about the Dynatrace environment. An `environmentInfo` block as defined below.
     * 
     */
    private List<MonitorEnvironmentPropertyEnvironmentInfo> environmentInfos;

    private MonitorEnvironmentProperty() {}
    /**
     * @return Information about the Dynatrace environment. An `environmentInfo` block as defined below.
     * 
     */
    public List<MonitorEnvironmentPropertyEnvironmentInfo> environmentInfos() {
        return this.environmentInfos;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MonitorEnvironmentProperty defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<MonitorEnvironmentPropertyEnvironmentInfo> environmentInfos;
        public Builder() {}
        public Builder(MonitorEnvironmentProperty defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.environmentInfos = defaults.environmentInfos;
        }

        @CustomType.Setter
        public Builder environmentInfos(List<MonitorEnvironmentPropertyEnvironmentInfo> environmentInfos) {
            if (environmentInfos == null) {
              throw new MissingRequiredPropertyException("MonitorEnvironmentProperty", "environmentInfos");
            }
            this.environmentInfos = environmentInfos;
            return this;
        }
        public Builder environmentInfos(MonitorEnvironmentPropertyEnvironmentInfo... environmentInfos) {
            return environmentInfos(List.of(environmentInfos));
        }
        public MonitorEnvironmentProperty build() {
            final var _resultValue = new MonitorEnvironmentProperty();
            _resultValue.environmentInfos = environmentInfos;
            return _resultValue;
        }
    }
}
