// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.elasticcloud.outputs;

import com.pulumi.azure.elasticcloud.outputs.GetElasticsearchLog;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetElasticsearchResult {
    /**
     * @return The ID of the Deployment within Elastic Cloud.
     * 
     */
    private String elasticCloudDeploymentId;
    /**
     * @return The Email Address which is associated with this Elasticsearch account.
     * 
     */
    private String elasticCloudEmailAddress;
    /**
     * @return The Default URL used for Single Sign On (SSO) to Elastic Cloud.
     * 
     */
    private String elasticCloudSsoDefaultUrl;
    /**
     * @return The ID of the User Account within Elastic Cloud.
     * 
     */
    private String elasticCloudUserId;
    /**
     * @return The URL to the Elasticsearch Service associated with this Elasticsearch.
     * 
     */
    private String elasticsearchServiceUrl;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The URL to the Kibana Dashboard associated with this Elasticsearch.
     * 
     */
    private String kibanaServiceUrl;
    /**
     * @return The URI used for SSO to the Kibana Dashboard associated with this Elasticsearch.
     * 
     */
    private String kibanaSsoUri;
    /**
     * @return The Azure Region in which this Elasticsearch exists.
     * 
     */
    private String location;
    /**
     * @return A `logs` block as defined below.
     * 
     */
    private List<GetElasticsearchLog> logs;
    /**
     * @return Specifies if monitoring is enabled on this Elasticsearch or not.
     * 
     */
    private Boolean monitoringEnabled;
    /**
     * @return The name (key) of the Tag which should be filtered.
     * 
     */
    private String name;
    private String resourceGroupName;
    /**
     * @return The name of the SKU used for this Elasticsearch.
     * 
     */
    private String skuName;
    /**
     * @return A mapping of tags assigned to the Elasticsearch.
     * 
     */
    private Map<String,String> tags;

    private GetElasticsearchResult() {}
    /**
     * @return The ID of the Deployment within Elastic Cloud.
     * 
     */
    public String elasticCloudDeploymentId() {
        return this.elasticCloudDeploymentId;
    }
    /**
     * @return The Email Address which is associated with this Elasticsearch account.
     * 
     */
    public String elasticCloudEmailAddress() {
        return this.elasticCloudEmailAddress;
    }
    /**
     * @return The Default URL used for Single Sign On (SSO) to Elastic Cloud.
     * 
     */
    public String elasticCloudSsoDefaultUrl() {
        return this.elasticCloudSsoDefaultUrl;
    }
    /**
     * @return The ID of the User Account within Elastic Cloud.
     * 
     */
    public String elasticCloudUserId() {
        return this.elasticCloudUserId;
    }
    /**
     * @return The URL to the Elasticsearch Service associated with this Elasticsearch.
     * 
     */
    public String elasticsearchServiceUrl() {
        return this.elasticsearchServiceUrl;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The URL to the Kibana Dashboard associated with this Elasticsearch.
     * 
     */
    public String kibanaServiceUrl() {
        return this.kibanaServiceUrl;
    }
    /**
     * @return The URI used for SSO to the Kibana Dashboard associated with this Elasticsearch.
     * 
     */
    public String kibanaSsoUri() {
        return this.kibanaSsoUri;
    }
    /**
     * @return The Azure Region in which this Elasticsearch exists.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return A `logs` block as defined below.
     * 
     */
    public List<GetElasticsearchLog> logs() {
        return this.logs;
    }
    /**
     * @return Specifies if monitoring is enabled on this Elasticsearch or not.
     * 
     */
    public Boolean monitoringEnabled() {
        return this.monitoringEnabled;
    }
    /**
     * @return The name (key) of the Tag which should be filtered.
     * 
     */
    public String name() {
        return this.name;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return The name of the SKU used for this Elasticsearch.
     * 
     */
    public String skuName() {
        return this.skuName;
    }
    /**
     * @return A mapping of tags assigned to the Elasticsearch.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetElasticsearchResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String elasticCloudDeploymentId;
        private String elasticCloudEmailAddress;
        private String elasticCloudSsoDefaultUrl;
        private String elasticCloudUserId;
        private String elasticsearchServiceUrl;
        private String id;
        private String kibanaServiceUrl;
        private String kibanaSsoUri;
        private String location;
        private List<GetElasticsearchLog> logs;
        private Boolean monitoringEnabled;
        private String name;
        private String resourceGroupName;
        private String skuName;
        private Map<String,String> tags;
        public Builder() {}
        public Builder(GetElasticsearchResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.elasticCloudDeploymentId = defaults.elasticCloudDeploymentId;
    	      this.elasticCloudEmailAddress = defaults.elasticCloudEmailAddress;
    	      this.elasticCloudSsoDefaultUrl = defaults.elasticCloudSsoDefaultUrl;
    	      this.elasticCloudUserId = defaults.elasticCloudUserId;
    	      this.elasticsearchServiceUrl = defaults.elasticsearchServiceUrl;
    	      this.id = defaults.id;
    	      this.kibanaServiceUrl = defaults.kibanaServiceUrl;
    	      this.kibanaSsoUri = defaults.kibanaSsoUri;
    	      this.location = defaults.location;
    	      this.logs = defaults.logs;
    	      this.monitoringEnabled = defaults.monitoringEnabled;
    	      this.name = defaults.name;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.skuName = defaults.skuName;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder elasticCloudDeploymentId(String elasticCloudDeploymentId) {
            if (elasticCloudDeploymentId == null) {
              throw new MissingRequiredPropertyException("GetElasticsearchResult", "elasticCloudDeploymentId");
            }
            this.elasticCloudDeploymentId = elasticCloudDeploymentId;
            return this;
        }
        @CustomType.Setter
        public Builder elasticCloudEmailAddress(String elasticCloudEmailAddress) {
            if (elasticCloudEmailAddress == null) {
              throw new MissingRequiredPropertyException("GetElasticsearchResult", "elasticCloudEmailAddress");
            }
            this.elasticCloudEmailAddress = elasticCloudEmailAddress;
            return this;
        }
        @CustomType.Setter
        public Builder elasticCloudSsoDefaultUrl(String elasticCloudSsoDefaultUrl) {
            if (elasticCloudSsoDefaultUrl == null) {
              throw new MissingRequiredPropertyException("GetElasticsearchResult", "elasticCloudSsoDefaultUrl");
            }
            this.elasticCloudSsoDefaultUrl = elasticCloudSsoDefaultUrl;
            return this;
        }
        @CustomType.Setter
        public Builder elasticCloudUserId(String elasticCloudUserId) {
            if (elasticCloudUserId == null) {
              throw new MissingRequiredPropertyException("GetElasticsearchResult", "elasticCloudUserId");
            }
            this.elasticCloudUserId = elasticCloudUserId;
            return this;
        }
        @CustomType.Setter
        public Builder elasticsearchServiceUrl(String elasticsearchServiceUrl) {
            if (elasticsearchServiceUrl == null) {
              throw new MissingRequiredPropertyException("GetElasticsearchResult", "elasticsearchServiceUrl");
            }
            this.elasticsearchServiceUrl = elasticsearchServiceUrl;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetElasticsearchResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder kibanaServiceUrl(String kibanaServiceUrl) {
            if (kibanaServiceUrl == null) {
              throw new MissingRequiredPropertyException("GetElasticsearchResult", "kibanaServiceUrl");
            }
            this.kibanaServiceUrl = kibanaServiceUrl;
            return this;
        }
        @CustomType.Setter
        public Builder kibanaSsoUri(String kibanaSsoUri) {
            if (kibanaSsoUri == null) {
              throw new MissingRequiredPropertyException("GetElasticsearchResult", "kibanaSsoUri");
            }
            this.kibanaSsoUri = kibanaSsoUri;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetElasticsearchResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder logs(List<GetElasticsearchLog> logs) {
            if (logs == null) {
              throw new MissingRequiredPropertyException("GetElasticsearchResult", "logs");
            }
            this.logs = logs;
            return this;
        }
        public Builder logs(GetElasticsearchLog... logs) {
            return logs(List.of(logs));
        }
        @CustomType.Setter
        public Builder monitoringEnabled(Boolean monitoringEnabled) {
            if (monitoringEnabled == null) {
              throw new MissingRequiredPropertyException("GetElasticsearchResult", "monitoringEnabled");
            }
            this.monitoringEnabled = monitoringEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetElasticsearchResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            if (resourceGroupName == null) {
              throw new MissingRequiredPropertyException("GetElasticsearchResult", "resourceGroupName");
            }
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder skuName(String skuName) {
            if (skuName == null) {
              throw new MissingRequiredPropertyException("GetElasticsearchResult", "skuName");
            }
            this.skuName = skuName;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetElasticsearchResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public GetElasticsearchResult build() {
            final var _resultValue = new GetElasticsearchResult();
            _resultValue.elasticCloudDeploymentId = elasticCloudDeploymentId;
            _resultValue.elasticCloudEmailAddress = elasticCloudEmailAddress;
            _resultValue.elasticCloudSsoDefaultUrl = elasticCloudSsoDefaultUrl;
            _resultValue.elasticCloudUserId = elasticCloudUserId;
            _resultValue.elasticsearchServiceUrl = elasticsearchServiceUrl;
            _resultValue.id = id;
            _resultValue.kibanaServiceUrl = kibanaServiceUrl;
            _resultValue.kibanaSsoUri = kibanaSsoUri;
            _resultValue.location = location;
            _resultValue.logs = logs;
            _resultValue.monitoringEnabled = monitoringEnabled;
            _resultValue.name = name;
            _resultValue.resourceGroupName = resourceGroupName;
            _resultValue.skuName = skuName;
            _resultValue.tags = tags;
            return _resultValue;
        }
    }
}
