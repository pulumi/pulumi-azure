// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appplatform;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SpringCloudDynatraceApplicationPerformanceMonitoringArgs extends com.pulumi.resources.ResourceArgs {

    public static final SpringCloudDynatraceApplicationPerformanceMonitoringArgs Empty = new SpringCloudDynatraceApplicationPerformanceMonitoringArgs();

    /**
     * Specifies the API token of the Dynatrace environment.
     * 
     */
    @Import(name="apiToken")
    private @Nullable Output<String> apiToken;

    /**
     * @return Specifies the API token of the Dynatrace environment.
     * 
     */
    public Optional<Output<String>> apiToken() {
        return Optional.ofNullable(this.apiToken);
    }

    /**
     * Specifies the API Url of the Dynatrace environment.
     * 
     */
    @Import(name="apiUrl")
    private @Nullable Output<String> apiUrl;

    /**
     * @return Specifies the API Url of the Dynatrace environment.
     * 
     */
    public Optional<Output<String>> apiUrl() {
        return Optional.ofNullable(this.apiUrl);
    }

    /**
     * Specifies the endpoint to connect to the Dynatrace environment.
     * 
     */
    @Import(name="connectionPoint", required=true)
    private Output<String> connectionPoint;

    /**
     * @return Specifies the endpoint to connect to the Dynatrace environment.
     * 
     */
    public Output<String> connectionPoint() {
        return this.connectionPoint;
    }

    /**
     * Specifies the Dynatrace environment ID.
     * 
     */
    @Import(name="environmentId")
    private @Nullable Output<String> environmentId;

    /**
     * @return Specifies the Dynatrace environment ID.
     * 
     */
    public Optional<Output<String>> environmentId() {
        return Optional.ofNullable(this.environmentId);
    }

    /**
     * Specifies whether the Spring Cloud Application Performance Monitoring resource for Application Insights is enabled globally. Defaults to `false`.
     * 
     */
    @Import(name="globallyEnabled")
    private @Nullable Output<Boolean> globallyEnabled;

    /**
     * @return Specifies whether the Spring Cloud Application Performance Monitoring resource for Application Insights is enabled globally. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> globallyEnabled() {
        return Optional.ofNullable(this.globallyEnabled);
    }

    /**
     * The name which should be used for this Spring Cloud Application Performance Monitoring resource for Dynatrace. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name which should be used for this Spring Cloud Application Performance Monitoring resource for Dynatrace. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the Spring Cloud Service. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="springCloudServiceId", required=true)
    private Output<String> springCloudServiceId;

    /**
     * @return The ID of the Spring Cloud Service. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> springCloudServiceId() {
        return this.springCloudServiceId;
    }

    /**
     * Specifies the Dynatrace tenant.
     * 
     */
    @Import(name="tenant", required=true)
    private Output<String> tenant;

    /**
     * @return Specifies the Dynatrace tenant.
     * 
     */
    public Output<String> tenant() {
        return this.tenant;
    }

    /**
     * Specifies the internal token that is used for authentication when OneAgent connects to the Dynatrace cluster to send data.
     * 
     */
    @Import(name="tenantToken", required=true)
    private Output<String> tenantToken;

    /**
     * @return Specifies the internal token that is used for authentication when OneAgent connects to the Dynatrace cluster to send data.
     * 
     */
    public Output<String> tenantToken() {
        return this.tenantToken;
    }

    private SpringCloudDynatraceApplicationPerformanceMonitoringArgs() {}

    private SpringCloudDynatraceApplicationPerformanceMonitoringArgs(SpringCloudDynatraceApplicationPerformanceMonitoringArgs $) {
        this.apiToken = $.apiToken;
        this.apiUrl = $.apiUrl;
        this.connectionPoint = $.connectionPoint;
        this.environmentId = $.environmentId;
        this.globallyEnabled = $.globallyEnabled;
        this.name = $.name;
        this.springCloudServiceId = $.springCloudServiceId;
        this.tenant = $.tenant;
        this.tenantToken = $.tenantToken;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SpringCloudDynatraceApplicationPerformanceMonitoringArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SpringCloudDynatraceApplicationPerformanceMonitoringArgs $;

        public Builder() {
            $ = new SpringCloudDynatraceApplicationPerformanceMonitoringArgs();
        }

        public Builder(SpringCloudDynatraceApplicationPerformanceMonitoringArgs defaults) {
            $ = new SpringCloudDynatraceApplicationPerformanceMonitoringArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiToken Specifies the API token of the Dynatrace environment.
         * 
         * @return builder
         * 
         */
        public Builder apiToken(@Nullable Output<String> apiToken) {
            $.apiToken = apiToken;
            return this;
        }

        /**
         * @param apiToken Specifies the API token of the Dynatrace environment.
         * 
         * @return builder
         * 
         */
        public Builder apiToken(String apiToken) {
            return apiToken(Output.of(apiToken));
        }

        /**
         * @param apiUrl Specifies the API Url of the Dynatrace environment.
         * 
         * @return builder
         * 
         */
        public Builder apiUrl(@Nullable Output<String> apiUrl) {
            $.apiUrl = apiUrl;
            return this;
        }

        /**
         * @param apiUrl Specifies the API Url of the Dynatrace environment.
         * 
         * @return builder
         * 
         */
        public Builder apiUrl(String apiUrl) {
            return apiUrl(Output.of(apiUrl));
        }

        /**
         * @param connectionPoint Specifies the endpoint to connect to the Dynatrace environment.
         * 
         * @return builder
         * 
         */
        public Builder connectionPoint(Output<String> connectionPoint) {
            $.connectionPoint = connectionPoint;
            return this;
        }

        /**
         * @param connectionPoint Specifies the endpoint to connect to the Dynatrace environment.
         * 
         * @return builder
         * 
         */
        public Builder connectionPoint(String connectionPoint) {
            return connectionPoint(Output.of(connectionPoint));
        }

        /**
         * @param environmentId Specifies the Dynatrace environment ID.
         * 
         * @return builder
         * 
         */
        public Builder environmentId(@Nullable Output<String> environmentId) {
            $.environmentId = environmentId;
            return this;
        }

        /**
         * @param environmentId Specifies the Dynatrace environment ID.
         * 
         * @return builder
         * 
         */
        public Builder environmentId(String environmentId) {
            return environmentId(Output.of(environmentId));
        }

        /**
         * @param globallyEnabled Specifies whether the Spring Cloud Application Performance Monitoring resource for Application Insights is enabled globally. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder globallyEnabled(@Nullable Output<Boolean> globallyEnabled) {
            $.globallyEnabled = globallyEnabled;
            return this;
        }

        /**
         * @param globallyEnabled Specifies whether the Spring Cloud Application Performance Monitoring resource for Application Insights is enabled globally. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder globallyEnabled(Boolean globallyEnabled) {
            return globallyEnabled(Output.of(globallyEnabled));
        }

        /**
         * @param name The name which should be used for this Spring Cloud Application Performance Monitoring resource for Dynatrace. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this Spring Cloud Application Performance Monitoring resource for Dynatrace. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param springCloudServiceId The ID of the Spring Cloud Service. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder springCloudServiceId(Output<String> springCloudServiceId) {
            $.springCloudServiceId = springCloudServiceId;
            return this;
        }

        /**
         * @param springCloudServiceId The ID of the Spring Cloud Service. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder springCloudServiceId(String springCloudServiceId) {
            return springCloudServiceId(Output.of(springCloudServiceId));
        }

        /**
         * @param tenant Specifies the Dynatrace tenant.
         * 
         * @return builder
         * 
         */
        public Builder tenant(Output<String> tenant) {
            $.tenant = tenant;
            return this;
        }

        /**
         * @param tenant Specifies the Dynatrace tenant.
         * 
         * @return builder
         * 
         */
        public Builder tenant(String tenant) {
            return tenant(Output.of(tenant));
        }

        /**
         * @param tenantToken Specifies the internal token that is used for authentication when OneAgent connects to the Dynatrace cluster to send data.
         * 
         * @return builder
         * 
         */
        public Builder tenantToken(Output<String> tenantToken) {
            $.tenantToken = tenantToken;
            return this;
        }

        /**
         * @param tenantToken Specifies the internal token that is used for authentication when OneAgent connects to the Dynatrace cluster to send data.
         * 
         * @return builder
         * 
         */
        public Builder tenantToken(String tenantToken) {
            return tenantToken(Output.of(tenantToken));
        }

        public SpringCloudDynatraceApplicationPerformanceMonitoringArgs build() {
            if ($.connectionPoint == null) {
                throw new MissingRequiredPropertyException("SpringCloudDynatraceApplicationPerformanceMonitoringArgs", "connectionPoint");
            }
            if ($.springCloudServiceId == null) {
                throw new MissingRequiredPropertyException("SpringCloudDynatraceApplicationPerformanceMonitoringArgs", "springCloudServiceId");
            }
            if ($.tenant == null) {
                throw new MissingRequiredPropertyException("SpringCloudDynatraceApplicationPerformanceMonitoringArgs", "tenant");
            }
            if ($.tenantToken == null) {
                throw new MissingRequiredPropertyException("SpringCloudDynatraceApplicationPerformanceMonitoringArgs", "tenantToken");
            }
            return $;
        }
    }

}
