// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.kusto.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AttachedDatabaseConfigurationSharingArgs extends com.pulumi.resources.ResourceArgs {

    public static final AttachedDatabaseConfigurationSharingArgs Empty = new AttachedDatabaseConfigurationSharingArgs();

    /**
     * List of external tables exclude from the follower database.
     * 
     */
    @Import(name="externalTablesToExcludes")
    private @Nullable Output<List<String>> externalTablesToExcludes;

    /**
     * @return List of external tables exclude from the follower database.
     * 
     */
    public Optional<Output<List<String>>> externalTablesToExcludes() {
        return Optional.ofNullable(this.externalTablesToExcludes);
    }

    /**
     * List of external tables to include in the follower database.
     * 
     */
    @Import(name="externalTablesToIncludes")
    private @Nullable Output<List<String>> externalTablesToIncludes;

    /**
     * @return List of external tables to include in the follower database.
     * 
     */
    public Optional<Output<List<String>>> externalTablesToIncludes() {
        return Optional.ofNullable(this.externalTablesToIncludes);
    }

    /**
     * List of materialized views exclude from the follower database.
     * 
     */
    @Import(name="materializedViewsToExcludes")
    private @Nullable Output<List<String>> materializedViewsToExcludes;

    /**
     * @return List of materialized views exclude from the follower database.
     * 
     */
    public Optional<Output<List<String>>> materializedViewsToExcludes() {
        return Optional.ofNullable(this.materializedViewsToExcludes);
    }

    /**
     * List of materialized views to include in the follower database.
     * 
     */
    @Import(name="materializedViewsToIncludes")
    private @Nullable Output<List<String>> materializedViewsToIncludes;

    /**
     * @return List of materialized views to include in the follower database.
     * 
     */
    public Optional<Output<List<String>>> materializedViewsToIncludes() {
        return Optional.ofNullable(this.materializedViewsToIncludes);
    }

    /**
     * List of tables to exclude from the follower database.
     * 
     */
    @Import(name="tablesToExcludes")
    private @Nullable Output<List<String>> tablesToExcludes;

    /**
     * @return List of tables to exclude from the follower database.
     * 
     */
    public Optional<Output<List<String>>> tablesToExcludes() {
        return Optional.ofNullable(this.tablesToExcludes);
    }

    /**
     * List of tables to include in the follower database.
     * 
     */
    @Import(name="tablesToIncludes")
    private @Nullable Output<List<String>> tablesToIncludes;

    /**
     * @return List of tables to include in the follower database.
     * 
     */
    public Optional<Output<List<String>>> tablesToIncludes() {
        return Optional.ofNullable(this.tablesToIncludes);
    }

    private AttachedDatabaseConfigurationSharingArgs() {}

    private AttachedDatabaseConfigurationSharingArgs(AttachedDatabaseConfigurationSharingArgs $) {
        this.externalTablesToExcludes = $.externalTablesToExcludes;
        this.externalTablesToIncludes = $.externalTablesToIncludes;
        this.materializedViewsToExcludes = $.materializedViewsToExcludes;
        this.materializedViewsToIncludes = $.materializedViewsToIncludes;
        this.tablesToExcludes = $.tablesToExcludes;
        this.tablesToIncludes = $.tablesToIncludes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AttachedDatabaseConfigurationSharingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AttachedDatabaseConfigurationSharingArgs $;

        public Builder() {
            $ = new AttachedDatabaseConfigurationSharingArgs();
        }

        public Builder(AttachedDatabaseConfigurationSharingArgs defaults) {
            $ = new AttachedDatabaseConfigurationSharingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param externalTablesToExcludes List of external tables exclude from the follower database.
         * 
         * @return builder
         * 
         */
        public Builder externalTablesToExcludes(@Nullable Output<List<String>> externalTablesToExcludes) {
            $.externalTablesToExcludes = externalTablesToExcludes;
            return this;
        }

        /**
         * @param externalTablesToExcludes List of external tables exclude from the follower database.
         * 
         * @return builder
         * 
         */
        public Builder externalTablesToExcludes(List<String> externalTablesToExcludes) {
            return externalTablesToExcludes(Output.of(externalTablesToExcludes));
        }

        /**
         * @param externalTablesToExcludes List of external tables exclude from the follower database.
         * 
         * @return builder
         * 
         */
        public Builder externalTablesToExcludes(String... externalTablesToExcludes) {
            return externalTablesToExcludes(List.of(externalTablesToExcludes));
        }

        /**
         * @param externalTablesToIncludes List of external tables to include in the follower database.
         * 
         * @return builder
         * 
         */
        public Builder externalTablesToIncludes(@Nullable Output<List<String>> externalTablesToIncludes) {
            $.externalTablesToIncludes = externalTablesToIncludes;
            return this;
        }

        /**
         * @param externalTablesToIncludes List of external tables to include in the follower database.
         * 
         * @return builder
         * 
         */
        public Builder externalTablesToIncludes(List<String> externalTablesToIncludes) {
            return externalTablesToIncludes(Output.of(externalTablesToIncludes));
        }

        /**
         * @param externalTablesToIncludes List of external tables to include in the follower database.
         * 
         * @return builder
         * 
         */
        public Builder externalTablesToIncludes(String... externalTablesToIncludes) {
            return externalTablesToIncludes(List.of(externalTablesToIncludes));
        }

        /**
         * @param materializedViewsToExcludes List of materialized views exclude from the follower database.
         * 
         * @return builder
         * 
         */
        public Builder materializedViewsToExcludes(@Nullable Output<List<String>> materializedViewsToExcludes) {
            $.materializedViewsToExcludes = materializedViewsToExcludes;
            return this;
        }

        /**
         * @param materializedViewsToExcludes List of materialized views exclude from the follower database.
         * 
         * @return builder
         * 
         */
        public Builder materializedViewsToExcludes(List<String> materializedViewsToExcludes) {
            return materializedViewsToExcludes(Output.of(materializedViewsToExcludes));
        }

        /**
         * @param materializedViewsToExcludes List of materialized views exclude from the follower database.
         * 
         * @return builder
         * 
         */
        public Builder materializedViewsToExcludes(String... materializedViewsToExcludes) {
            return materializedViewsToExcludes(List.of(materializedViewsToExcludes));
        }

        /**
         * @param materializedViewsToIncludes List of materialized views to include in the follower database.
         * 
         * @return builder
         * 
         */
        public Builder materializedViewsToIncludes(@Nullable Output<List<String>> materializedViewsToIncludes) {
            $.materializedViewsToIncludes = materializedViewsToIncludes;
            return this;
        }

        /**
         * @param materializedViewsToIncludes List of materialized views to include in the follower database.
         * 
         * @return builder
         * 
         */
        public Builder materializedViewsToIncludes(List<String> materializedViewsToIncludes) {
            return materializedViewsToIncludes(Output.of(materializedViewsToIncludes));
        }

        /**
         * @param materializedViewsToIncludes List of materialized views to include in the follower database.
         * 
         * @return builder
         * 
         */
        public Builder materializedViewsToIncludes(String... materializedViewsToIncludes) {
            return materializedViewsToIncludes(List.of(materializedViewsToIncludes));
        }

        /**
         * @param tablesToExcludes List of tables to exclude from the follower database.
         * 
         * @return builder
         * 
         */
        public Builder tablesToExcludes(@Nullable Output<List<String>> tablesToExcludes) {
            $.tablesToExcludes = tablesToExcludes;
            return this;
        }

        /**
         * @param tablesToExcludes List of tables to exclude from the follower database.
         * 
         * @return builder
         * 
         */
        public Builder tablesToExcludes(List<String> tablesToExcludes) {
            return tablesToExcludes(Output.of(tablesToExcludes));
        }

        /**
         * @param tablesToExcludes List of tables to exclude from the follower database.
         * 
         * @return builder
         * 
         */
        public Builder tablesToExcludes(String... tablesToExcludes) {
            return tablesToExcludes(List.of(tablesToExcludes));
        }

        /**
         * @param tablesToIncludes List of tables to include in the follower database.
         * 
         * @return builder
         * 
         */
        public Builder tablesToIncludes(@Nullable Output<List<String>> tablesToIncludes) {
            $.tablesToIncludes = tablesToIncludes;
            return this;
        }

        /**
         * @param tablesToIncludes List of tables to include in the follower database.
         * 
         * @return builder
         * 
         */
        public Builder tablesToIncludes(List<String> tablesToIncludes) {
            return tablesToIncludes(Output.of(tablesToIncludes));
        }

        /**
         * @param tablesToIncludes List of tables to include in the follower database.
         * 
         * @return builder
         * 
         */
        public Builder tablesToIncludes(String... tablesToIncludes) {
            return tablesToIncludes(List.of(tablesToIncludes));
        }

        public AttachedDatabaseConfigurationSharingArgs build() {
            return $;
        }
    }

}
