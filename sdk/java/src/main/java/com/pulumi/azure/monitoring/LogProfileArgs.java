// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.monitoring;

import com.pulumi.azure.monitoring.inputs.LogProfileRetentionPolicyArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LogProfileArgs extends com.pulumi.resources.ResourceArgs {

    public static final LogProfileArgs Empty = new LogProfileArgs();

    /**
     * List of categories of the logs.
     * 
     */
    @Import(name="categories", required=true)
    private Output<List<String>> categories;

    /**
     * @return List of categories of the logs.
     * 
     */
    public Output<List<String>> categories() {
        return this.categories;
    }

    /**
     * List of regions for which Activity Log events are stored or streamed.
     * 
     */
    @Import(name="locations", required=true)
    private Output<List<String>> locations;

    /**
     * @return List of regions for which Activity Log events are stored or streamed.
     * 
     */
    public Output<List<String>> locations() {
        return this.locations;
    }

    /**
     * The name of the Log Profile. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the Log Profile. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A `retention_policy` block as documented below. A retention policy for how long Activity Logs are retained in the storage account.
     * 
     */
    @Import(name="retentionPolicy", required=true)
    private Output<LogProfileRetentionPolicyArgs> retentionPolicy;

    /**
     * @return A `retention_policy` block as documented below. A retention policy for how long Activity Logs are retained in the storage account.
     * 
     */
    public Output<LogProfileRetentionPolicyArgs> retentionPolicy() {
        return this.retentionPolicy;
    }

    /**
     * The service bus (or event hub) rule ID of the service bus (or event hub) namespace in which the Activity Log is streamed to. At least one of `storage_account_id` or `servicebus_rule_id` must be set.
     * 
     */
    @Import(name="servicebusRuleId")
    private @Nullable Output<String> servicebusRuleId;

    /**
     * @return The service bus (or event hub) rule ID of the service bus (or event hub) namespace in which the Activity Log is streamed to. At least one of `storage_account_id` or `servicebus_rule_id` must be set.
     * 
     */
    public Optional<Output<String>> servicebusRuleId() {
        return Optional.ofNullable(this.servicebusRuleId);
    }

    /**
     * The resource ID of the storage account in which the Activity Log is stored. At least one of `storage_account_id` or `servicebus_rule_id` must be set.
     * 
     */
    @Import(name="storageAccountId")
    private @Nullable Output<String> storageAccountId;

    /**
     * @return The resource ID of the storage account in which the Activity Log is stored. At least one of `storage_account_id` or `servicebus_rule_id` must be set.
     * 
     */
    public Optional<Output<String>> storageAccountId() {
        return Optional.ofNullable(this.storageAccountId);
    }

    private LogProfileArgs() {}

    private LogProfileArgs(LogProfileArgs $) {
        this.categories = $.categories;
        this.locations = $.locations;
        this.name = $.name;
        this.retentionPolicy = $.retentionPolicy;
        this.servicebusRuleId = $.servicebusRuleId;
        this.storageAccountId = $.storageAccountId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LogProfileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LogProfileArgs $;

        public Builder() {
            $ = new LogProfileArgs();
        }

        public Builder(LogProfileArgs defaults) {
            $ = new LogProfileArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param categories List of categories of the logs.
         * 
         * @return builder
         * 
         */
        public Builder categories(Output<List<String>> categories) {
            $.categories = categories;
            return this;
        }

        /**
         * @param categories List of categories of the logs.
         * 
         * @return builder
         * 
         */
        public Builder categories(List<String> categories) {
            return categories(Output.of(categories));
        }

        /**
         * @param categories List of categories of the logs.
         * 
         * @return builder
         * 
         */
        public Builder categories(String... categories) {
            return categories(List.of(categories));
        }

        /**
         * @param locations List of regions for which Activity Log events are stored or streamed.
         * 
         * @return builder
         * 
         */
        public Builder locations(Output<List<String>> locations) {
            $.locations = locations;
            return this;
        }

        /**
         * @param locations List of regions for which Activity Log events are stored or streamed.
         * 
         * @return builder
         * 
         */
        public Builder locations(List<String> locations) {
            return locations(Output.of(locations));
        }

        /**
         * @param locations List of regions for which Activity Log events are stored or streamed.
         * 
         * @return builder
         * 
         */
        public Builder locations(String... locations) {
            return locations(List.of(locations));
        }

        /**
         * @param name The name of the Log Profile. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Log Profile. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param retentionPolicy A `retention_policy` block as documented below. A retention policy for how long Activity Logs are retained in the storage account.
         * 
         * @return builder
         * 
         */
        public Builder retentionPolicy(Output<LogProfileRetentionPolicyArgs> retentionPolicy) {
            $.retentionPolicy = retentionPolicy;
            return this;
        }

        /**
         * @param retentionPolicy A `retention_policy` block as documented below. A retention policy for how long Activity Logs are retained in the storage account.
         * 
         * @return builder
         * 
         */
        public Builder retentionPolicy(LogProfileRetentionPolicyArgs retentionPolicy) {
            return retentionPolicy(Output.of(retentionPolicy));
        }

        /**
         * @param servicebusRuleId The service bus (or event hub) rule ID of the service bus (or event hub) namespace in which the Activity Log is streamed to. At least one of `storage_account_id` or `servicebus_rule_id` must be set.
         * 
         * @return builder
         * 
         */
        public Builder servicebusRuleId(@Nullable Output<String> servicebusRuleId) {
            $.servicebusRuleId = servicebusRuleId;
            return this;
        }

        /**
         * @param servicebusRuleId The service bus (or event hub) rule ID of the service bus (or event hub) namespace in which the Activity Log is streamed to. At least one of `storage_account_id` or `servicebus_rule_id` must be set.
         * 
         * @return builder
         * 
         */
        public Builder servicebusRuleId(String servicebusRuleId) {
            return servicebusRuleId(Output.of(servicebusRuleId));
        }

        /**
         * @param storageAccountId The resource ID of the storage account in which the Activity Log is stored. At least one of `storage_account_id` or `servicebus_rule_id` must be set.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountId(@Nullable Output<String> storageAccountId) {
            $.storageAccountId = storageAccountId;
            return this;
        }

        /**
         * @param storageAccountId The resource ID of the storage account in which the Activity Log is stored. At least one of `storage_account_id` or `servicebus_rule_id` must be set.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountId(String storageAccountId) {
            return storageAccountId(Output.of(storageAccountId));
        }

        public LogProfileArgs build() {
            if ($.categories == null) {
                throw new MissingRequiredPropertyException("LogProfileArgs", "categories");
            }
            if ($.locations == null) {
                throw new MissingRequiredPropertyException("LogProfileArgs", "locations");
            }
            if ($.retentionPolicy == null) {
                throw new MissingRequiredPropertyException("LogProfileArgs", "retentionPolicy");
            }
            return $;
        }
    }

}
