// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.management.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GroupPolicySetDefinitionPolicyDefinitionReferenceArgs extends com.pulumi.resources.ResourceArgs {

    public static final GroupPolicySetDefinitionPolicyDefinitionReferenceArgs Empty = new GroupPolicySetDefinitionPolicyDefinitionReferenceArgs();

    /**
     * Parameter values for the references Policy Definition in JSON format.
     * 
     */
    @Import(name="parameterValues")
    private @Nullable Output<String> parameterValues;

    /**
     * @return Parameter values for the references Policy Definition in JSON format.
     * 
     */
    public Optional<Output<String>> parameterValues() {
        return Optional.ofNullable(this.parameterValues);
    }

    /**
     * The ID of the Policy Definition to include in this Policy Set Definition.
     * 
     */
    @Import(name="policyDefinitionId", required=true)
    private Output<String> policyDefinitionId;

    /**
     * @return The ID of the Policy Definition to include in this Policy Set Definition.
     * 
     */
    public Output<String> policyDefinitionId() {
        return this.policyDefinitionId;
    }

    /**
     * Specifies a list of Policy Definition Groups names that this Policy Definition Reference belongs to.
     * 
     */
    @Import(name="policyGroupNames")
    private @Nullable Output<List<String>> policyGroupNames;

    /**
     * @return Specifies a list of Policy Definition Groups names that this Policy Definition Reference belongs to.
     * 
     */
    public Optional<Output<List<String>>> policyGroupNames() {
        return Optional.ofNullable(this.policyGroupNames);
    }

    /**
     * A unique ID within this Policy Set Definition for this Policy Definition Reference.
     * 
     */
    @Import(name="referenceId")
    private @Nullable Output<String> referenceId;

    /**
     * @return A unique ID within this Policy Set Definition for this Policy Definition Reference.
     * 
     */
    public Optional<Output<String>> referenceId() {
        return Optional.ofNullable(this.referenceId);
    }

    /**
     * The version of the Policy Definition to use.
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return The version of the Policy Definition to use.
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private GroupPolicySetDefinitionPolicyDefinitionReferenceArgs() {}

    private GroupPolicySetDefinitionPolicyDefinitionReferenceArgs(GroupPolicySetDefinitionPolicyDefinitionReferenceArgs $) {
        this.parameterValues = $.parameterValues;
        this.policyDefinitionId = $.policyDefinitionId;
        this.policyGroupNames = $.policyGroupNames;
        this.referenceId = $.referenceId;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GroupPolicySetDefinitionPolicyDefinitionReferenceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GroupPolicySetDefinitionPolicyDefinitionReferenceArgs $;

        public Builder() {
            $ = new GroupPolicySetDefinitionPolicyDefinitionReferenceArgs();
        }

        public Builder(GroupPolicySetDefinitionPolicyDefinitionReferenceArgs defaults) {
            $ = new GroupPolicySetDefinitionPolicyDefinitionReferenceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param parameterValues Parameter values for the references Policy Definition in JSON format.
         * 
         * @return builder
         * 
         */
        public Builder parameterValues(@Nullable Output<String> parameterValues) {
            $.parameterValues = parameterValues;
            return this;
        }

        /**
         * @param parameterValues Parameter values for the references Policy Definition in JSON format.
         * 
         * @return builder
         * 
         */
        public Builder parameterValues(String parameterValues) {
            return parameterValues(Output.of(parameterValues));
        }

        /**
         * @param policyDefinitionId The ID of the Policy Definition to include in this Policy Set Definition.
         * 
         * @return builder
         * 
         */
        public Builder policyDefinitionId(Output<String> policyDefinitionId) {
            $.policyDefinitionId = policyDefinitionId;
            return this;
        }

        /**
         * @param policyDefinitionId The ID of the Policy Definition to include in this Policy Set Definition.
         * 
         * @return builder
         * 
         */
        public Builder policyDefinitionId(String policyDefinitionId) {
            return policyDefinitionId(Output.of(policyDefinitionId));
        }

        /**
         * @param policyGroupNames Specifies a list of Policy Definition Groups names that this Policy Definition Reference belongs to.
         * 
         * @return builder
         * 
         */
        public Builder policyGroupNames(@Nullable Output<List<String>> policyGroupNames) {
            $.policyGroupNames = policyGroupNames;
            return this;
        }

        /**
         * @param policyGroupNames Specifies a list of Policy Definition Groups names that this Policy Definition Reference belongs to.
         * 
         * @return builder
         * 
         */
        public Builder policyGroupNames(List<String> policyGroupNames) {
            return policyGroupNames(Output.of(policyGroupNames));
        }

        /**
         * @param policyGroupNames Specifies a list of Policy Definition Groups names that this Policy Definition Reference belongs to.
         * 
         * @return builder
         * 
         */
        public Builder policyGroupNames(String... policyGroupNames) {
            return policyGroupNames(List.of(policyGroupNames));
        }

        /**
         * @param referenceId A unique ID within this Policy Set Definition for this Policy Definition Reference.
         * 
         * @return builder
         * 
         */
        public Builder referenceId(@Nullable Output<String> referenceId) {
            $.referenceId = referenceId;
            return this;
        }

        /**
         * @param referenceId A unique ID within this Policy Set Definition for this Policy Definition Reference.
         * 
         * @return builder
         * 
         */
        public Builder referenceId(String referenceId) {
            return referenceId(Output.of(referenceId));
        }

        /**
         * @param version The version of the Policy Definition to use.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version The version of the Policy Definition to use.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public GroupPolicySetDefinitionPolicyDefinitionReferenceArgs build() {
            if ($.policyDefinitionId == null) {
                throw new MissingRequiredPropertyException("GroupPolicySetDefinitionPolicyDefinitionReferenceArgs", "policyDefinitionId");
            }
            return $;
        }
    }

}
