// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.media.outputs;

import com.pulumi.azure.media.outputs.ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaim;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ContentKeyPolicyPolicyOptionTokenRestriction {
    /**
     * @return The audience for the token.
     * 
     */
    private @Nullable String audience;
    /**
     * @return The token issuer.
     * 
     */
    private @Nullable String issuer;
    /**
     * @return The OpenID connect discovery document.
     * 
     */
    private @Nullable String openIdConnectDiscoveryDocument;
    /**
     * @return The RSA Parameter exponent.
     * 
     */
    private @Nullable String primaryRsaTokenKeyExponent;
    /**
     * @return The RSA Parameter modulus.
     * 
     */
    private @Nullable String primaryRsaTokenKeyModulus;
    /**
     * @return The key value of the key. Specifies a symmetric key for token validation.
     * 
     */
    private @Nullable String primarySymmetricTokenKey;
    /**
     * @return The raw data field of a certificate in PKCS 12 format (X509Certificate2 in .NET). Specifies a certificate for token validation.
     * 
     */
    private @Nullable String primaryX509TokenKeyRaw;
    /**
     * @return One or more `required_claim` blocks as defined above.
     * 
     */
    private @Nullable List<ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaim> requiredClaims;
    /**
     * @return The type of token. Supported values are `Jwt` or `Swt`.
     * 
     */
    private @Nullable String tokenType;

    private ContentKeyPolicyPolicyOptionTokenRestriction() {}
    /**
     * @return The audience for the token.
     * 
     */
    public Optional<String> audience() {
        return Optional.ofNullable(this.audience);
    }
    /**
     * @return The token issuer.
     * 
     */
    public Optional<String> issuer() {
        return Optional.ofNullable(this.issuer);
    }
    /**
     * @return The OpenID connect discovery document.
     * 
     */
    public Optional<String> openIdConnectDiscoveryDocument() {
        return Optional.ofNullable(this.openIdConnectDiscoveryDocument);
    }
    /**
     * @return The RSA Parameter exponent.
     * 
     */
    public Optional<String> primaryRsaTokenKeyExponent() {
        return Optional.ofNullable(this.primaryRsaTokenKeyExponent);
    }
    /**
     * @return The RSA Parameter modulus.
     * 
     */
    public Optional<String> primaryRsaTokenKeyModulus() {
        return Optional.ofNullable(this.primaryRsaTokenKeyModulus);
    }
    /**
     * @return The key value of the key. Specifies a symmetric key for token validation.
     * 
     */
    public Optional<String> primarySymmetricTokenKey() {
        return Optional.ofNullable(this.primarySymmetricTokenKey);
    }
    /**
     * @return The raw data field of a certificate in PKCS 12 format (X509Certificate2 in .NET). Specifies a certificate for token validation.
     * 
     */
    public Optional<String> primaryX509TokenKeyRaw() {
        return Optional.ofNullable(this.primaryX509TokenKeyRaw);
    }
    /**
     * @return One or more `required_claim` blocks as defined above.
     * 
     */
    public List<ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaim> requiredClaims() {
        return this.requiredClaims == null ? List.of() : this.requiredClaims;
    }
    /**
     * @return The type of token. Supported values are `Jwt` or `Swt`.
     * 
     */
    public Optional<String> tokenType() {
        return Optional.ofNullable(this.tokenType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ContentKeyPolicyPolicyOptionTokenRestriction defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String audience;
        private @Nullable String issuer;
        private @Nullable String openIdConnectDiscoveryDocument;
        private @Nullable String primaryRsaTokenKeyExponent;
        private @Nullable String primaryRsaTokenKeyModulus;
        private @Nullable String primarySymmetricTokenKey;
        private @Nullable String primaryX509TokenKeyRaw;
        private @Nullable List<ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaim> requiredClaims;
        private @Nullable String tokenType;
        public Builder() {}
        public Builder(ContentKeyPolicyPolicyOptionTokenRestriction defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.audience = defaults.audience;
    	      this.issuer = defaults.issuer;
    	      this.openIdConnectDiscoveryDocument = defaults.openIdConnectDiscoveryDocument;
    	      this.primaryRsaTokenKeyExponent = defaults.primaryRsaTokenKeyExponent;
    	      this.primaryRsaTokenKeyModulus = defaults.primaryRsaTokenKeyModulus;
    	      this.primarySymmetricTokenKey = defaults.primarySymmetricTokenKey;
    	      this.primaryX509TokenKeyRaw = defaults.primaryX509TokenKeyRaw;
    	      this.requiredClaims = defaults.requiredClaims;
    	      this.tokenType = defaults.tokenType;
        }

        @CustomType.Setter
        public Builder audience(@Nullable String audience) {
            this.audience = audience;
            return this;
        }
        @CustomType.Setter
        public Builder issuer(@Nullable String issuer) {
            this.issuer = issuer;
            return this;
        }
        @CustomType.Setter
        public Builder openIdConnectDiscoveryDocument(@Nullable String openIdConnectDiscoveryDocument) {
            this.openIdConnectDiscoveryDocument = openIdConnectDiscoveryDocument;
            return this;
        }
        @CustomType.Setter
        public Builder primaryRsaTokenKeyExponent(@Nullable String primaryRsaTokenKeyExponent) {
            this.primaryRsaTokenKeyExponent = primaryRsaTokenKeyExponent;
            return this;
        }
        @CustomType.Setter
        public Builder primaryRsaTokenKeyModulus(@Nullable String primaryRsaTokenKeyModulus) {
            this.primaryRsaTokenKeyModulus = primaryRsaTokenKeyModulus;
            return this;
        }
        @CustomType.Setter
        public Builder primarySymmetricTokenKey(@Nullable String primarySymmetricTokenKey) {
            this.primarySymmetricTokenKey = primarySymmetricTokenKey;
            return this;
        }
        @CustomType.Setter
        public Builder primaryX509TokenKeyRaw(@Nullable String primaryX509TokenKeyRaw) {
            this.primaryX509TokenKeyRaw = primaryX509TokenKeyRaw;
            return this;
        }
        @CustomType.Setter
        public Builder requiredClaims(@Nullable List<ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaim> requiredClaims) {
            this.requiredClaims = requiredClaims;
            return this;
        }
        public Builder requiredClaims(ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaim... requiredClaims) {
            return requiredClaims(List.of(requiredClaims));
        }
        @CustomType.Setter
        public Builder tokenType(@Nullable String tokenType) {
            this.tokenType = tokenType;
            return this;
        }
        public ContentKeyPolicyPolicyOptionTokenRestriction build() {
            final var o = new ContentKeyPolicyPolicyOptionTokenRestriction();
            o.audience = audience;
            o.issuer = issuer;
            o.openIdConnectDiscoveryDocument = openIdConnectDiscoveryDocument;
            o.primaryRsaTokenKeyExponent = primaryRsaTokenKeyExponent;
            o.primaryRsaTokenKeyModulus = primaryRsaTokenKeyModulus;
            o.primarySymmetricTokenKey = primarySymmetricTokenKey;
            o.primaryX509TokenKeyRaw = primaryX509TokenKeyRaw;
            o.requiredClaims = requiredClaims;
            o.tokenType = tokenType;
            return o;
        }
    }
}
