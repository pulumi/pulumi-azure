// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.media.inputs;

import com.pulumi.azure.media.inputs.LiveEventPreviewEndpointArgs;
import com.pulumi.azure.media.inputs.LiveEventPreviewIpAccessControlAllowArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LiveEventPreviewArgs extends com.pulumi.resources.ResourceArgs {

    public static final LiveEventPreviewArgs Empty = new LiveEventPreviewArgs();

    /**
     * An alternative media identifier associated with the streaming locator created for the preview. The identifier can be used in the `CustomLicenseAcquisitionUrlTemplate` or the `CustomKeyAcquisitionUrlTemplate` of the Streaming Policy specified in the `streaming_policy_name` field. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="alternativeMediaId")
    private @Nullable Output<String> alternativeMediaId;

    /**
     * @return An alternative media identifier associated with the streaming locator created for the preview. The identifier can be used in the `CustomLicenseAcquisitionUrlTemplate` or the `CustomKeyAcquisitionUrlTemplate` of the Streaming Policy specified in the `streaming_policy_name` field. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> alternativeMediaId() {
        return Optional.ofNullable(this.alternativeMediaId);
    }

    @Import(name="endpoints")
    private @Nullable Output<List<LiveEventPreviewEndpointArgs>> endpoints;

    public Optional<Output<List<LiveEventPreviewEndpointArgs>>> endpoints() {
        return Optional.ofNullable(this.endpoints);
    }

    /**
     * One or more `ip_access_control_allow` blocks as defined above.
     * 
     */
    @Import(name="ipAccessControlAllows")
    private @Nullable Output<List<LiveEventPreviewIpAccessControlAllowArgs>> ipAccessControlAllows;

    /**
     * @return One or more `ip_access_control_allow` blocks as defined above.
     * 
     */
    public Optional<Output<List<LiveEventPreviewIpAccessControlAllowArgs>>> ipAccessControlAllows() {
        return Optional.ofNullable(this.ipAccessControlAllows);
    }

    /**
     * The identifier of the preview locator in GUID format. Specifying this at creation time allows the caller to know the preview locator url before the event is created. If omitted, the service will generate a random identifier. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="previewLocator")
    private @Nullable Output<String> previewLocator;

    /**
     * @return The identifier of the preview locator in GUID format. Specifying this at creation time allows the caller to know the preview locator url before the event is created. If omitted, the service will generate a random identifier. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> previewLocator() {
        return Optional.ofNullable(this.previewLocator);
    }

    /**
     * The name of streaming policy used for the live event preview. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="streamingPolicyName")
    private @Nullable Output<String> streamingPolicyName;

    /**
     * @return The name of streaming policy used for the live event preview. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> streamingPolicyName() {
        return Optional.ofNullable(this.streamingPolicyName);
    }

    private LiveEventPreviewArgs() {}

    private LiveEventPreviewArgs(LiveEventPreviewArgs $) {
        this.alternativeMediaId = $.alternativeMediaId;
        this.endpoints = $.endpoints;
        this.ipAccessControlAllows = $.ipAccessControlAllows;
        this.previewLocator = $.previewLocator;
        this.streamingPolicyName = $.streamingPolicyName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LiveEventPreviewArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LiveEventPreviewArgs $;

        public Builder() {
            $ = new LiveEventPreviewArgs();
        }

        public Builder(LiveEventPreviewArgs defaults) {
            $ = new LiveEventPreviewArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param alternativeMediaId An alternative media identifier associated with the streaming locator created for the preview. The identifier can be used in the `CustomLicenseAcquisitionUrlTemplate` or the `CustomKeyAcquisitionUrlTemplate` of the Streaming Policy specified in the `streaming_policy_name` field. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder alternativeMediaId(@Nullable Output<String> alternativeMediaId) {
            $.alternativeMediaId = alternativeMediaId;
            return this;
        }

        /**
         * @param alternativeMediaId An alternative media identifier associated with the streaming locator created for the preview. The identifier can be used in the `CustomLicenseAcquisitionUrlTemplate` or the `CustomKeyAcquisitionUrlTemplate` of the Streaming Policy specified in the `streaming_policy_name` field. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder alternativeMediaId(String alternativeMediaId) {
            return alternativeMediaId(Output.of(alternativeMediaId));
        }

        public Builder endpoints(@Nullable Output<List<LiveEventPreviewEndpointArgs>> endpoints) {
            $.endpoints = endpoints;
            return this;
        }

        public Builder endpoints(List<LiveEventPreviewEndpointArgs> endpoints) {
            return endpoints(Output.of(endpoints));
        }

        public Builder endpoints(LiveEventPreviewEndpointArgs... endpoints) {
            return endpoints(List.of(endpoints));
        }

        /**
         * @param ipAccessControlAllows One or more `ip_access_control_allow` blocks as defined above.
         * 
         * @return builder
         * 
         */
        public Builder ipAccessControlAllows(@Nullable Output<List<LiveEventPreviewIpAccessControlAllowArgs>> ipAccessControlAllows) {
            $.ipAccessControlAllows = ipAccessControlAllows;
            return this;
        }

        /**
         * @param ipAccessControlAllows One or more `ip_access_control_allow` blocks as defined above.
         * 
         * @return builder
         * 
         */
        public Builder ipAccessControlAllows(List<LiveEventPreviewIpAccessControlAllowArgs> ipAccessControlAllows) {
            return ipAccessControlAllows(Output.of(ipAccessControlAllows));
        }

        /**
         * @param ipAccessControlAllows One or more `ip_access_control_allow` blocks as defined above.
         * 
         * @return builder
         * 
         */
        public Builder ipAccessControlAllows(LiveEventPreviewIpAccessControlAllowArgs... ipAccessControlAllows) {
            return ipAccessControlAllows(List.of(ipAccessControlAllows));
        }

        /**
         * @param previewLocator The identifier of the preview locator in GUID format. Specifying this at creation time allows the caller to know the preview locator url before the event is created. If omitted, the service will generate a random identifier. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder previewLocator(@Nullable Output<String> previewLocator) {
            $.previewLocator = previewLocator;
            return this;
        }

        /**
         * @param previewLocator The identifier of the preview locator in GUID format. Specifying this at creation time allows the caller to know the preview locator url before the event is created. If omitted, the service will generate a random identifier. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder previewLocator(String previewLocator) {
            return previewLocator(Output.of(previewLocator));
        }

        /**
         * @param streamingPolicyName The name of streaming policy used for the live event preview. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder streamingPolicyName(@Nullable Output<String> streamingPolicyName) {
            $.streamingPolicyName = streamingPolicyName;
            return this;
        }

        /**
         * @param streamingPolicyName The name of streaming policy used for the live event preview. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder streamingPolicyName(String streamingPolicyName) {
            return streamingPolicyName(Output.of(streamingPolicyName));
        }

        public LiveEventPreviewArgs build() {
            return $;
        }
    }

}
