// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class FirewallPolicyTlsCertificateArgs extends com.pulumi.resources.ResourceArgs {

    public static final FirewallPolicyTlsCertificateArgs Empty = new FirewallPolicyTlsCertificateArgs();

    /**
     * The ID of the Key Vault, where the secret or certificate is stored.
     * 
     */
    @Import(name="keyVaultSecretId", required=true)
    private Output<String> keyVaultSecretId;

    /**
     * @return The ID of the Key Vault, where the secret or certificate is stored.
     * 
     */
    public Output<String> keyVaultSecretId() {
        return this.keyVaultSecretId;
    }

    /**
     * The name of the certificate.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the certificate.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    private FirewallPolicyTlsCertificateArgs() {}

    private FirewallPolicyTlsCertificateArgs(FirewallPolicyTlsCertificateArgs $) {
        this.keyVaultSecretId = $.keyVaultSecretId;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FirewallPolicyTlsCertificateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FirewallPolicyTlsCertificateArgs $;

        public Builder() {
            $ = new FirewallPolicyTlsCertificateArgs();
        }

        public Builder(FirewallPolicyTlsCertificateArgs defaults) {
            $ = new FirewallPolicyTlsCertificateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param keyVaultSecretId The ID of the Key Vault, where the secret or certificate is stored.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultSecretId(Output<String> keyVaultSecretId) {
            $.keyVaultSecretId = keyVaultSecretId;
            return this;
        }

        /**
         * @param keyVaultSecretId The ID of the Key Vault, where the secret or certificate is stored.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultSecretId(String keyVaultSecretId) {
            return keyVaultSecretId(Output.of(keyVaultSecretId));
        }

        /**
         * @param name The name of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public FirewallPolicyTlsCertificateArgs build() {
            if ($.keyVaultSecretId == null) {
                throw new MissingRequiredPropertyException("FirewallPolicyTlsCertificateArgs", "keyVaultSecretId");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("FirewallPolicyTlsCertificateArgs", "name");
            }
            return $;
        }
    }

}
