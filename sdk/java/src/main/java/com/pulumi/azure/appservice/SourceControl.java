// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appservice;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.appservice.SourceControlArgs;
import com.pulumi.azure.appservice.inputs.SourceControlState;
import com.pulumi.azure.appservice.outputs.SourceControlGithubActionConfiguration;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages an App Service Web App or Function App Source Control Configuration.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.appservice.ServicePlan;
 * import com.pulumi.azure.appservice.ServicePlanArgs;
 * import com.pulumi.azure.appservice.LinuxWebApp;
 * import com.pulumi.azure.appservice.LinuxWebAppArgs;
 * import com.pulumi.azure.appservice.inputs.LinuxWebAppSiteConfigArgs;
 * import com.pulumi.azure.appservice.SourceControl;
 * import com.pulumi.azure.appservice.SourceControlArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampleResourceGroup = new ResourceGroup(&#34;exampleResourceGroup&#34;, ResourceGroupArgs.builder()        
 *             .location(&#34;West Europe&#34;)
 *             .build());
 * 
 *         var exampleServicePlan = new ServicePlan(&#34;exampleServicePlan&#34;, ServicePlanArgs.builder()        
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .location(exampleResourceGroup.location())
 *             .osType(&#34;Linux&#34;)
 *             .skuName(&#34;P1v2&#34;)
 *             .build());
 * 
 *         var exampleLinuxWebApp = new LinuxWebApp(&#34;exampleLinuxWebApp&#34;, LinuxWebAppArgs.builder()        
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .location(exampleServicePlan.location())
 *             .servicePlanId(exampleServicePlan.id())
 *             .siteConfig()
 *             .build());
 * 
 *         var exampleSourceControl = new SourceControl(&#34;exampleSourceControl&#34;, SourceControlArgs.builder()        
 *             .appId(exampleLinuxWebApp.id())
 *             .repoUrl(&#34;https://github.com/Azure-Samples/python-docs-hello-world&#34;)
 *             .branch(&#34;master&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * App Service Source Controls can be imported using the `resource id`, e.g.
 * 
 * ```sh
 *  $ pulumi import azure:appservice/sourceControl:SourceControl example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Web/sites/site1
 * ```
 * 
 */
@ResourceType(type="azure:appservice/sourceControl:SourceControl")
public class SourceControl extends com.pulumi.resources.CustomResource {
    /**
     * The ID of the Windows or Linux Web App. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="appId", type=String.class, parameters={})
    private Output<String> appId;

    /**
     * @return The ID of the Windows or Linux Web App. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> appId() {
        return this.appId;
    }
    /**
     * The branch name to use for deployments. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="branch", type=String.class, parameters={})
    private Output<String> branch;

    /**
     * @return The branch name to use for deployments. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> branch() {
        return this.branch;
    }
    /**
     * A `github_action_configuration` block as defined below.
     * 
     */
    @Export(name="githubActionConfiguration", type=SourceControlGithubActionConfiguration.class, parameters={})
    private Output</* @Nullable */ SourceControlGithubActionConfiguration> githubActionConfiguration;

    /**
     * @return A `github_action_configuration` block as defined below.
     * 
     */
    public Output<Optional<SourceControlGithubActionConfiguration>> githubActionConfiguration() {
        return Codegen.optional(this.githubActionConfiguration);
    }
    /**
     * The URL for the repository. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="repoUrl", type=String.class, parameters={})
    private Output<String> repoUrl;

    /**
     * @return The URL for the repository. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> repoUrl() {
        return this.repoUrl;
    }
    /**
     * Should the Deployment Rollback be enabled? Defaults to `false`. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="rollbackEnabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> rollbackEnabled;

    /**
     * @return Should the Deployment Rollback be enabled? Defaults to `false`. Changing this forces a new resource to be created.
     * 
     */
    public Output<Optional<Boolean>> rollbackEnabled() {
        return Codegen.optional(this.rollbackEnabled);
    }
    /**
     * The SCM Type in use. This value is decoded by the service from the repository information supplied.
     * 
     */
    @Export(name="scmType", type=String.class, parameters={})
    private Output<String> scmType;

    /**
     * @return The SCM Type in use. This value is decoded by the service from the repository information supplied.
     * 
     */
    public Output<String> scmType() {
        return this.scmType;
    }
    /**
     * Should the App use local Git configuration. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="useLocalGit", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> useLocalGit;

    /**
     * @return Should the App use local Git configuration. Changing this forces a new resource to be created.
     * 
     */
    public Output<Optional<Boolean>> useLocalGit() {
        return Codegen.optional(this.useLocalGit);
    }
    /**
     * Should code be deployed manually. Set to `false` to enable continuous integration, such as webhooks into online repos such as GitHub. Defaults to `false`. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="useManualIntegration", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> useManualIntegration;

    /**
     * @return Should code be deployed manually. Set to `false` to enable continuous integration, such as webhooks into online repos such as GitHub. Defaults to `false`. Changing this forces a new resource to be created.
     * 
     */
    public Output<Optional<Boolean>> useManualIntegration() {
        return Codegen.optional(this.useManualIntegration);
    }
    /**
     * The repository specified is Mercurial. Defaults to `false`. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="useMercurial", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> useMercurial;

    /**
     * @return The repository specified is Mercurial. Defaults to `false`. Changing this forces a new resource to be created.
     * 
     */
    public Output<Optional<Boolean>> useMercurial() {
        return Codegen.optional(this.useMercurial);
    }
    /**
     * Indicates if the Slot uses a GitHub action for deployment. This value is decoded by the service from the repository information supplied.
     * 
     */
    @Export(name="usesGithubAction", type=Boolean.class, parameters={})
    private Output<Boolean> usesGithubAction;

    /**
     * @return Indicates if the Slot uses a GitHub action for deployment. This value is decoded by the service from the repository information supplied.
     * 
     */
    public Output<Boolean> usesGithubAction() {
        return this.usesGithubAction;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public SourceControl(String name) {
        this(name, SourceControlArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public SourceControl(String name, SourceControlArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public SourceControl(String name, SourceControlArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:appservice/sourceControl:SourceControl", name, args == null ? SourceControlArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private SourceControl(String name, Output<String> id, @Nullable SourceControlState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:appservice/sourceControl:SourceControl", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static SourceControl get(String name, Output<String> id, @Nullable SourceControlState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new SourceControl(name, id, state, options);
    }
}
