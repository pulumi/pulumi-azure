// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.media.outputs;

import com.pulumi.azure.media.outputs.LiveEventInputEndpoint;
import com.pulumi.azure.media.outputs.LiveEventInputIpAccessControlAllow;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class LiveEventInput {
    /**
     * @return A UUID in string form to uniquely identify the stream. If omitted, the service will generate a unique value. Changing this forces a new value to be created.
     * 
     */
    private @Nullable String accessToken;
    private @Nullable List<LiveEventInputEndpoint> endpoints;
    /**
     * @return One or more `ip_access_control_allow` blocks as defined below.
     * 
     */
    private @Nullable List<LiveEventInputIpAccessControlAllow> ipAccessControlAllows;
    /**
     * @return ISO 8601 time duration of the key frame interval duration of the input. This value sets the `EXT-X-TARGETDURATION` property in the HLS output. For example, use PT2S to indicate 2 seconds. This field cannot be set when `type` is set to `Encoding`.
     * 
     */
    private @Nullable String keyFrameIntervalDuration;
    /**
     * @return The input protocol for the live event. Allowed values are `FragmentedMP4` and `RTMP`. Changing this forces a new resource to be created.
     * 
     */
    private @Nullable String streamingProtocol;

    private LiveEventInput() {}
    /**
     * @return A UUID in string form to uniquely identify the stream. If omitted, the service will generate a unique value. Changing this forces a new value to be created.
     * 
     */
    public Optional<String> accessToken() {
        return Optional.ofNullable(this.accessToken);
    }
    public List<LiveEventInputEndpoint> endpoints() {
        return this.endpoints == null ? List.of() : this.endpoints;
    }
    /**
     * @return One or more `ip_access_control_allow` blocks as defined below.
     * 
     */
    public List<LiveEventInputIpAccessControlAllow> ipAccessControlAllows() {
        return this.ipAccessControlAllows == null ? List.of() : this.ipAccessControlAllows;
    }
    /**
     * @return ISO 8601 time duration of the key frame interval duration of the input. This value sets the `EXT-X-TARGETDURATION` property in the HLS output. For example, use PT2S to indicate 2 seconds. This field cannot be set when `type` is set to `Encoding`.
     * 
     */
    public Optional<String> keyFrameIntervalDuration() {
        return Optional.ofNullable(this.keyFrameIntervalDuration);
    }
    /**
     * @return The input protocol for the live event. Allowed values are `FragmentedMP4` and `RTMP`. Changing this forces a new resource to be created.
     * 
     */
    public Optional<String> streamingProtocol() {
        return Optional.ofNullable(this.streamingProtocol);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LiveEventInput defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accessToken;
        private @Nullable List<LiveEventInputEndpoint> endpoints;
        private @Nullable List<LiveEventInputIpAccessControlAllow> ipAccessControlAllows;
        private @Nullable String keyFrameIntervalDuration;
        private @Nullable String streamingProtocol;
        public Builder() {}
        public Builder(LiveEventInput defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessToken = defaults.accessToken;
    	      this.endpoints = defaults.endpoints;
    	      this.ipAccessControlAllows = defaults.ipAccessControlAllows;
    	      this.keyFrameIntervalDuration = defaults.keyFrameIntervalDuration;
    	      this.streamingProtocol = defaults.streamingProtocol;
        }

        @CustomType.Setter
        public Builder accessToken(@Nullable String accessToken) {

            this.accessToken = accessToken;
            return this;
        }
        @CustomType.Setter
        public Builder endpoints(@Nullable List<LiveEventInputEndpoint> endpoints) {

            this.endpoints = endpoints;
            return this;
        }
        public Builder endpoints(LiveEventInputEndpoint... endpoints) {
            return endpoints(List.of(endpoints));
        }
        @CustomType.Setter
        public Builder ipAccessControlAllows(@Nullable List<LiveEventInputIpAccessControlAllow> ipAccessControlAllows) {

            this.ipAccessControlAllows = ipAccessControlAllows;
            return this;
        }
        public Builder ipAccessControlAllows(LiveEventInputIpAccessControlAllow... ipAccessControlAllows) {
            return ipAccessControlAllows(List.of(ipAccessControlAllows));
        }
        @CustomType.Setter
        public Builder keyFrameIntervalDuration(@Nullable String keyFrameIntervalDuration) {

            this.keyFrameIntervalDuration = keyFrameIntervalDuration;
            return this;
        }
        @CustomType.Setter
        public Builder streamingProtocol(@Nullable String streamingProtocol) {

            this.streamingProtocol = streamingProtocol;
            return this;
        }
        public LiveEventInput build() {
            final var _resultValue = new LiveEventInput();
            _resultValue.accessToken = accessToken;
            _resultValue.endpoints = endpoints;
            _resultValue.ipAccessControlAllows = ipAccessControlAllows;
            _resultValue.keyFrameIntervalDuration = keyFrameIntervalDuration;
            _resultValue.streamingProtocol = streamingProtocol;
            return _resultValue;
        }
    }
}
