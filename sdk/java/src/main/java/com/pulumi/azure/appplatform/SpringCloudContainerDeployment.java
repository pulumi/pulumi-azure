// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appplatform;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.appplatform.SpringCloudContainerDeploymentArgs;
import com.pulumi.azure.appplatform.inputs.SpringCloudContainerDeploymentState;
import com.pulumi.azure.appplatform.outputs.SpringCloudContainerDeploymentQuota;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a Spring Cloud Container Deployment.
 * 
 * !&gt; **Note:** Azure Spring Apps is now deprecated and will be retired on 2028-05-31 - as such the `azure.appplatform.SpringCloudContainerDeployment` resource is deprecated and will be removed in a future major version of the AzureRM Provider. See https://aka.ms/asaretirement for more information.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.appplatform.SpringCloudService;
 * import com.pulumi.azure.appplatform.SpringCloudServiceArgs;
 * import com.pulumi.azure.appplatform.SpringCloudApp;
 * import com.pulumi.azure.appplatform.SpringCloudAppArgs;
 * import com.pulumi.azure.appplatform.SpringCloudContainerDeployment;
 * import com.pulumi.azure.appplatform.SpringCloudContainerDeploymentArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new ResourceGroup("example", ResourceGroupArgs.builder()
 *             .name("example")
 *             .location("West Europe")
 *             .build());
 * 
 *         var exampleSpringCloudService = new SpringCloudService("exampleSpringCloudService", SpringCloudServiceArgs.builder()
 *             .name("example")
 *             .location(example.location())
 *             .resourceGroupName(example.name())
 *             .skuName("E0")
 *             .build());
 * 
 *         var exampleSpringCloudApp = new SpringCloudApp("exampleSpringCloudApp", SpringCloudAppArgs.builder()
 *             .name("example")
 *             .resourceGroupName(exampleSpringCloudService.resourceGroupName())
 *             .serviceName(exampleSpringCloudService.name())
 *             .build());
 * 
 *         var exampleSpringCloudContainerDeployment = new SpringCloudContainerDeployment("exampleSpringCloudContainerDeployment", SpringCloudContainerDeploymentArgs.builder()
 *             .name("example")
 *             .springCloudAppId(exampleSpringCloudApp.id())
 *             .instanceCount(2)
 *             .arguments(            
 *                 "-cp",
 *                 "/app/resources:/app/classes:/app/libs/*",
 *                 "hello.Application")
 *             .commands("java")
 *             .environmentVariables(Map.ofEntries(
 *                 Map.entry("Foo", "Bar"),
 *                 Map.entry("Env", "Staging")
 *             ))
 *             .server("docker.io")
 *             .image("springio/gs-spring-boot-docker")
 *             .languageFramework("springboot")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Spring Cloud Container Deployments can be imported using the `resource id`, e.g.
 * 
 * ```sh
 * $ pulumi import azure:appplatform/springCloudContainerDeployment:SpringCloudContainerDeployment example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.AppPlatform/spring/spring1/apps/app1/deployments/deploy1
 * ```
 * 
 */
@ResourceType(type="azure:appplatform/springCloudContainerDeployment:SpringCloudContainerDeployment")
public class SpringCloudContainerDeployment extends com.pulumi.resources.CustomResource {
    /**
     * A JSON object that contains the addon configurations of the Spring Cloud Container Deployment.
     * 
     */
    @Export(name="addonJson", refs={String.class}, tree="[0]")
    private Output<String> addonJson;

    /**
     * @return A JSON object that contains the addon configurations of the Spring Cloud Container Deployment.
     * 
     */
    public Output<String> addonJson() {
        return this.addonJson;
    }
    /**
     * Specifies a list of Spring Cloud Application Performance Monitoring IDs.
     * 
     */
    @Export(name="applicationPerformanceMonitoringIds", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> applicationPerformanceMonitoringIds;

    /**
     * @return Specifies a list of Spring Cloud Application Performance Monitoring IDs.
     * 
     */
    public Output<Optional<List<String>>> applicationPerformanceMonitoringIds() {
        return Codegen.optional(this.applicationPerformanceMonitoringIds);
    }
    /**
     * Specifies the arguments to the entrypoint. The docker image&#39;s `CMD` is used if not specified.
     * 
     */
    @Export(name="arguments", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> arguments;

    /**
     * @return Specifies the arguments to the entrypoint. The docker image&#39;s `CMD` is used if not specified.
     * 
     */
    public Output<Optional<List<String>>> arguments() {
        return Codegen.optional(this.arguments);
    }
    /**
     * Specifies the entrypoint array. It will not be executed within a shell. The docker image&#39;s `ENTRYPOINT` is used if not specified.
     * 
     */
    @Export(name="commands", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> commands;

    /**
     * @return Specifies the entrypoint array. It will not be executed within a shell. The docker image&#39;s `ENTRYPOINT` is used if not specified.
     * 
     */
    public Output<Optional<List<String>>> commands() {
        return Codegen.optional(this.commands);
    }
    /**
     * Specifies the environment variables of the Spring Cloud Deployment as a map of key-value pairs.
     * 
     */
    @Export(name="environmentVariables", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> environmentVariables;

    /**
     * @return Specifies the environment variables of the Spring Cloud Deployment as a map of key-value pairs.
     * 
     */
    public Output<Optional<Map<String,String>>> environmentVariables() {
        return Codegen.optional(this.environmentVariables);
    }
    /**
     * Container image of the custom container. This should be in the form of `&lt;repository&gt;:&lt;tag&gt;` without the server name of the registry.
     * 
     */
    @Export(name="image", refs={String.class}, tree="[0]")
    private Output<String> image;

    /**
     * @return Container image of the custom container. This should be in the form of `&lt;repository&gt;:&lt;tag&gt;` without the server name of the registry.
     * 
     */
    public Output<String> image() {
        return this.image;
    }
    /**
     * Specifies the required instance count of the Spring Cloud Deployment. Possible Values are between `1` and `500`. Defaults to `1` if not specified.
     * 
     */
    @Export(name="instanceCount", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> instanceCount;

    /**
     * @return Specifies the required instance count of the Spring Cloud Deployment. Possible Values are between `1` and `500`. Defaults to `1` if not specified.
     * 
     */
    public Output<Optional<Integer>> instanceCount() {
        return Codegen.optional(this.instanceCount);
    }
    /**
     * Specifies the language framework of the container image. The only possible value is `springboot`.
     * 
     */
    @Export(name="languageFramework", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> languageFramework;

    /**
     * @return Specifies the language framework of the container image. The only possible value is `springboot`.
     * 
     */
    public Output<Optional<String>> languageFramework() {
        return Codegen.optional(this.languageFramework);
    }
    /**
     * The name which should be used for this Spring Cloud Container Deployment. Changing this forces a new Spring Cloud Container Deployment to be created.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name which should be used for this Spring Cloud Container Deployment. Changing this forces a new Spring Cloud Container Deployment to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * A `quota` block as defined below.
     * 
     */
    @Export(name="quota", refs={SpringCloudContainerDeploymentQuota.class}, tree="[0]")
    private Output<SpringCloudContainerDeploymentQuota> quota;

    /**
     * @return A `quota` block as defined below.
     * 
     */
    public Output<SpringCloudContainerDeploymentQuota> quota() {
        return this.quota;
    }
    /**
     * The name of the registry that contains the container image.
     * 
     */
    @Export(name="server", refs={String.class}, tree="[0]")
    private Output<String> server;

    /**
     * @return The name of the registry that contains the container image.
     * 
     */
    public Output<String> server() {
        return this.server;
    }
    /**
     * The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Container Deployment to be created.
     * 
     */
    @Export(name="springCloudAppId", refs={String.class}, tree="[0]")
    private Output<String> springCloudAppId;

    /**
     * @return The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Container Deployment to be created.
     * 
     */
    public Output<String> springCloudAppId() {
        return this.springCloudAppId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public SpringCloudContainerDeployment(java.lang.String name) {
        this(name, SpringCloudContainerDeploymentArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public SpringCloudContainerDeployment(java.lang.String name, SpringCloudContainerDeploymentArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public SpringCloudContainerDeployment(java.lang.String name, SpringCloudContainerDeploymentArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:appplatform/springCloudContainerDeployment:SpringCloudContainerDeployment", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private SpringCloudContainerDeployment(java.lang.String name, Output<java.lang.String> id, @Nullable SpringCloudContainerDeploymentState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:appplatform/springCloudContainerDeployment:SpringCloudContainerDeployment", name, state, makeResourceOptions(options, id), false);
    }

    private static SpringCloudContainerDeploymentArgs makeArgs(SpringCloudContainerDeploymentArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? SpringCloudContainerDeploymentArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static SpringCloudContainerDeployment get(java.lang.String name, Output<java.lang.String> id, @Nullable SpringCloudContainerDeploymentState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new SpringCloudContainerDeployment(name, id, state, options);
    }
}
