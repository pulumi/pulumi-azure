// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appservice.outputs;

import com.pulumi.azure.appservice.outputs.GetStaticWebAppBasicAuth;
import com.pulumi.azure.appservice.outputs.GetStaticWebAppIdentity;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetStaticWebAppResult {
    private String apiKey;
    private Map<String,String> appSettings;
    private List<GetStaticWebAppBasicAuth> basicAuths;
    private Boolean configurationFileChangesEnabled;
    private String defaultHostName;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private List<GetStaticWebAppIdentity> identities;
    private String location;
    private String name;
    private Boolean previewEnvironmentsEnabled;
    private Boolean publicNetworkAccessEnabled;
    private String repositoryBranch;
    private String repositoryUrl;
    private String resourceGroupName;
    private String skuSize;
    private String skuTier;
    private Map<String,String> tags;

    private GetStaticWebAppResult() {}
    public String apiKey() {
        return this.apiKey;
    }
    public Map<String,String> appSettings() {
        return this.appSettings;
    }
    public List<GetStaticWebAppBasicAuth> basicAuths() {
        return this.basicAuths;
    }
    public Boolean configurationFileChangesEnabled() {
        return this.configurationFileChangesEnabled;
    }
    public String defaultHostName() {
        return this.defaultHostName;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public List<GetStaticWebAppIdentity> identities() {
        return this.identities;
    }
    public String location() {
        return this.location;
    }
    public String name() {
        return this.name;
    }
    public Boolean previewEnvironmentsEnabled() {
        return this.previewEnvironmentsEnabled;
    }
    public Boolean publicNetworkAccessEnabled() {
        return this.publicNetworkAccessEnabled;
    }
    public String repositoryBranch() {
        return this.repositoryBranch;
    }
    public String repositoryUrl() {
        return this.repositoryUrl;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    public String skuSize() {
        return this.skuSize;
    }
    public String skuTier() {
        return this.skuTier;
    }
    public Map<String,String> tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetStaticWebAppResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String apiKey;
        private Map<String,String> appSettings;
        private List<GetStaticWebAppBasicAuth> basicAuths;
        private Boolean configurationFileChangesEnabled;
        private String defaultHostName;
        private String id;
        private List<GetStaticWebAppIdentity> identities;
        private String location;
        private String name;
        private Boolean previewEnvironmentsEnabled;
        private Boolean publicNetworkAccessEnabled;
        private String repositoryBranch;
        private String repositoryUrl;
        private String resourceGroupName;
        private String skuSize;
        private String skuTier;
        private Map<String,String> tags;
        public Builder() {}
        public Builder(GetStaticWebAppResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apiKey = defaults.apiKey;
    	      this.appSettings = defaults.appSettings;
    	      this.basicAuths = defaults.basicAuths;
    	      this.configurationFileChangesEnabled = defaults.configurationFileChangesEnabled;
    	      this.defaultHostName = defaults.defaultHostName;
    	      this.id = defaults.id;
    	      this.identities = defaults.identities;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.previewEnvironmentsEnabled = defaults.previewEnvironmentsEnabled;
    	      this.publicNetworkAccessEnabled = defaults.publicNetworkAccessEnabled;
    	      this.repositoryBranch = defaults.repositoryBranch;
    	      this.repositoryUrl = defaults.repositoryUrl;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.skuSize = defaults.skuSize;
    	      this.skuTier = defaults.skuTier;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder apiKey(String apiKey) {
            if (apiKey == null) {
              throw new MissingRequiredPropertyException("GetStaticWebAppResult", "apiKey");
            }
            this.apiKey = apiKey;
            return this;
        }
        @CustomType.Setter
        public Builder appSettings(Map<String,String> appSettings) {
            if (appSettings == null) {
              throw new MissingRequiredPropertyException("GetStaticWebAppResult", "appSettings");
            }
            this.appSettings = appSettings;
            return this;
        }
        @CustomType.Setter
        public Builder basicAuths(List<GetStaticWebAppBasicAuth> basicAuths) {
            if (basicAuths == null) {
              throw new MissingRequiredPropertyException("GetStaticWebAppResult", "basicAuths");
            }
            this.basicAuths = basicAuths;
            return this;
        }
        public Builder basicAuths(GetStaticWebAppBasicAuth... basicAuths) {
            return basicAuths(List.of(basicAuths));
        }
        @CustomType.Setter
        public Builder configurationFileChangesEnabled(Boolean configurationFileChangesEnabled) {
            if (configurationFileChangesEnabled == null) {
              throw new MissingRequiredPropertyException("GetStaticWebAppResult", "configurationFileChangesEnabled");
            }
            this.configurationFileChangesEnabled = configurationFileChangesEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder defaultHostName(String defaultHostName) {
            if (defaultHostName == null) {
              throw new MissingRequiredPropertyException("GetStaticWebAppResult", "defaultHostName");
            }
            this.defaultHostName = defaultHostName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetStaticWebAppResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder identities(List<GetStaticWebAppIdentity> identities) {
            if (identities == null) {
              throw new MissingRequiredPropertyException("GetStaticWebAppResult", "identities");
            }
            this.identities = identities;
            return this;
        }
        public Builder identities(GetStaticWebAppIdentity... identities) {
            return identities(List.of(identities));
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetStaticWebAppResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetStaticWebAppResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder previewEnvironmentsEnabled(Boolean previewEnvironmentsEnabled) {
            if (previewEnvironmentsEnabled == null) {
              throw new MissingRequiredPropertyException("GetStaticWebAppResult", "previewEnvironmentsEnabled");
            }
            this.previewEnvironmentsEnabled = previewEnvironmentsEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder publicNetworkAccessEnabled(Boolean publicNetworkAccessEnabled) {
            if (publicNetworkAccessEnabled == null) {
              throw new MissingRequiredPropertyException("GetStaticWebAppResult", "publicNetworkAccessEnabled");
            }
            this.publicNetworkAccessEnabled = publicNetworkAccessEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder repositoryBranch(String repositoryBranch) {
            if (repositoryBranch == null) {
              throw new MissingRequiredPropertyException("GetStaticWebAppResult", "repositoryBranch");
            }
            this.repositoryBranch = repositoryBranch;
            return this;
        }
        @CustomType.Setter
        public Builder repositoryUrl(String repositoryUrl) {
            if (repositoryUrl == null) {
              throw new MissingRequiredPropertyException("GetStaticWebAppResult", "repositoryUrl");
            }
            this.repositoryUrl = repositoryUrl;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            if (resourceGroupName == null) {
              throw new MissingRequiredPropertyException("GetStaticWebAppResult", "resourceGroupName");
            }
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder skuSize(String skuSize) {
            if (skuSize == null) {
              throw new MissingRequiredPropertyException("GetStaticWebAppResult", "skuSize");
            }
            this.skuSize = skuSize;
            return this;
        }
        @CustomType.Setter
        public Builder skuTier(String skuTier) {
            if (skuTier == null) {
              throw new MissingRequiredPropertyException("GetStaticWebAppResult", "skuTier");
            }
            this.skuTier = skuTier;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetStaticWebAppResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public GetStaticWebAppResult build() {
            final var _resultValue = new GetStaticWebAppResult();
            _resultValue.apiKey = apiKey;
            _resultValue.appSettings = appSettings;
            _resultValue.basicAuths = basicAuths;
            _resultValue.configurationFileChangesEnabled = configurationFileChangesEnabled;
            _resultValue.defaultHostName = defaultHostName;
            _resultValue.id = id;
            _resultValue.identities = identities;
            _resultValue.location = location;
            _resultValue.name = name;
            _resultValue.previewEnvironmentsEnabled = previewEnvironmentsEnabled;
            _resultValue.publicNetworkAccessEnabled = publicNetworkAccessEnabled;
            _resultValue.repositoryBranch = repositoryBranch;
            _resultValue.repositoryUrl = repositoryUrl;
            _resultValue.resourceGroupName = resourceGroupName;
            _resultValue.skuSize = skuSize;
            _resultValue.skuTier = skuTier;
            _resultValue.tags = tags;
            return _resultValue;
        }
    }
}
