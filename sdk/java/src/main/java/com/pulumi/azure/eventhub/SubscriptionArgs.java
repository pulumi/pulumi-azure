// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.eventhub;

import com.pulumi.azure.eventhub.inputs.SubscriptionClientScopedSubscriptionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SubscriptionArgs extends com.pulumi.resources.ResourceArgs {

    public static final SubscriptionArgs Empty = new SubscriptionArgs();

    /**
     * The idle interval after which the topic is automatically deleted as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). The minimum duration is `5` minutes or `PT5M`.
     * 
     */
    @Import(name="autoDeleteOnIdle")
    private @Nullable Output<String> autoDeleteOnIdle;

    /**
     * @return The idle interval after which the topic is automatically deleted as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). The minimum duration is `5` minutes or `PT5M`.
     * 
     */
    public Optional<Output<String>> autoDeleteOnIdle() {
        return Optional.ofNullable(this.autoDeleteOnIdle);
    }

    /**
     * A `client_scoped_subscription` block as defined below.
     * 
     */
    @Import(name="clientScopedSubscription")
    private @Nullable Output<SubscriptionClientScopedSubscriptionArgs> clientScopedSubscription;

    /**
     * @return A `client_scoped_subscription` block as defined below.
     * 
     */
    public Optional<Output<SubscriptionClientScopedSubscriptionArgs>> clientScopedSubscription() {
        return Optional.ofNullable(this.clientScopedSubscription);
    }

    /**
     * whether the subscription is scoped to a client id. Defaults to `false`.
     * 
     * &gt; **NOTE:** Client Scoped Subscription can only be used for JMS subscription (Java Message Service).
     * 
     */
    @Import(name="clientScopedSubscriptionEnabled")
    private @Nullable Output<Boolean> clientScopedSubscriptionEnabled;

    /**
     * @return whether the subscription is scoped to a client id. Defaults to `false`.
     * 
     * &gt; **NOTE:** Client Scoped Subscription can only be used for JMS subscription (Java Message Service).
     * 
     */
    public Optional<Output<Boolean>> clientScopedSubscriptionEnabled() {
        return Optional.ofNullable(this.clientScopedSubscriptionEnabled);
    }

    /**
     * Boolean flag which controls whether the Subscription has dead letter support on filter evaluation exceptions. Defaults to `true`.
     * 
     */
    @Import(name="deadLetteringOnFilterEvaluationError")
    private @Nullable Output<Boolean> deadLetteringOnFilterEvaluationError;

    /**
     * @return Boolean flag which controls whether the Subscription has dead letter support on filter evaluation exceptions. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> deadLetteringOnFilterEvaluationError() {
        return Optional.ofNullable(this.deadLetteringOnFilterEvaluationError);
    }

    /**
     * Boolean flag which controls whether the Subscription has dead letter support when a message expires.
     * 
     */
    @Import(name="deadLetteringOnMessageExpiration")
    private @Nullable Output<Boolean> deadLetteringOnMessageExpiration;

    /**
     * @return Boolean flag which controls whether the Subscription has dead letter support when a message expires.
     * 
     */
    public Optional<Output<Boolean>> deadLetteringOnMessageExpiration() {
        return Optional.ofNullable(this.deadLetteringOnMessageExpiration);
    }

    /**
     * The Default message timespan to live as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
     * 
     */
    @Import(name="defaultMessageTtl")
    private @Nullable Output<String> defaultMessageTtl;

    /**
     * @return The Default message timespan to live as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
     * 
     */
    public Optional<Output<String>> defaultMessageTtl() {
        return Optional.ofNullable(this.defaultMessageTtl);
    }

    /**
     * Boolean flag which controls whether the Subscription supports batched operations.
     * 
     */
    @Import(name="enableBatchedOperations")
    private @Nullable Output<Boolean> enableBatchedOperations;

    /**
     * @return Boolean flag which controls whether the Subscription supports batched operations.
     * 
     */
    public Optional<Output<Boolean>> enableBatchedOperations() {
        return Optional.ofNullable(this.enableBatchedOperations);
    }

    /**
     * The name of a Queue or Topic to automatically forward Dead Letter messages to.
     * 
     */
    @Import(name="forwardDeadLetteredMessagesTo")
    private @Nullable Output<String> forwardDeadLetteredMessagesTo;

    /**
     * @return The name of a Queue or Topic to automatically forward Dead Letter messages to.
     * 
     */
    public Optional<Output<String>> forwardDeadLetteredMessagesTo() {
        return Optional.ofNullable(this.forwardDeadLetteredMessagesTo);
    }

    /**
     * The name of a Queue or Topic to automatically forward messages to.
     * 
     */
    @Import(name="forwardTo")
    private @Nullable Output<String> forwardTo;

    /**
     * @return The name of a Queue or Topic to automatically forward messages to.
     * 
     */
    public Optional<Output<String>> forwardTo() {
        return Optional.ofNullable(this.forwardTo);
    }

    /**
     * The lock duration for the subscription as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). The default value is `1` minute or `P0DT0H1M0S` . The maximum value is `5` minutes or `P0DT0H5M0S` .
     * 
     */
    @Import(name="lockDuration")
    private @Nullable Output<String> lockDuration;

    /**
     * @return The lock duration for the subscription as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). The default value is `1` minute or `P0DT0H1M0S` . The maximum value is `5` minutes or `P0DT0H5M0S` .
     * 
     */
    public Optional<Output<String>> lockDuration() {
        return Optional.ofNullable(this.lockDuration);
    }

    /**
     * The maximum number of deliveries.
     * 
     */
    @Import(name="maxDeliveryCount", required=true)
    private Output<Integer> maxDeliveryCount;

    /**
     * @return The maximum number of deliveries.
     * 
     */
    public Output<Integer> maxDeliveryCount() {
        return this.maxDeliveryCount;
    }

    /**
     * Specifies the name of the ServiceBus Subscription resource. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the name of the ServiceBus Subscription resource. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Boolean flag which controls whether this Subscription supports the concept of a session. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="requiresSession")
    private @Nullable Output<Boolean> requiresSession;

    /**
     * @return Boolean flag which controls whether this Subscription supports the concept of a session. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<Boolean>> requiresSession() {
        return Optional.ofNullable(this.requiresSession);
    }

    /**
     * The status of the Subscription. Possible values are `Active`,`ReceiveDisabled`, or `Disabled`. Defaults to `Active`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the Subscription. Possible values are `Active`,`ReceiveDisabled`, or `Disabled`. Defaults to `Active`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The ID of the ServiceBus Topic to create this Subscription in. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="topicId", required=true)
    private Output<String> topicId;

    /**
     * @return The ID of the ServiceBus Topic to create this Subscription in. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> topicId() {
        return this.topicId;
    }

    private SubscriptionArgs() {}

    private SubscriptionArgs(SubscriptionArgs $) {
        this.autoDeleteOnIdle = $.autoDeleteOnIdle;
        this.clientScopedSubscription = $.clientScopedSubscription;
        this.clientScopedSubscriptionEnabled = $.clientScopedSubscriptionEnabled;
        this.deadLetteringOnFilterEvaluationError = $.deadLetteringOnFilterEvaluationError;
        this.deadLetteringOnMessageExpiration = $.deadLetteringOnMessageExpiration;
        this.defaultMessageTtl = $.defaultMessageTtl;
        this.enableBatchedOperations = $.enableBatchedOperations;
        this.forwardDeadLetteredMessagesTo = $.forwardDeadLetteredMessagesTo;
        this.forwardTo = $.forwardTo;
        this.lockDuration = $.lockDuration;
        this.maxDeliveryCount = $.maxDeliveryCount;
        this.name = $.name;
        this.requiresSession = $.requiresSession;
        this.status = $.status;
        this.topicId = $.topicId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SubscriptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SubscriptionArgs $;

        public Builder() {
            $ = new SubscriptionArgs();
        }

        public Builder(SubscriptionArgs defaults) {
            $ = new SubscriptionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoDeleteOnIdle The idle interval after which the topic is automatically deleted as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). The minimum duration is `5` minutes or `PT5M`.
         * 
         * @return builder
         * 
         */
        public Builder autoDeleteOnIdle(@Nullable Output<String> autoDeleteOnIdle) {
            $.autoDeleteOnIdle = autoDeleteOnIdle;
            return this;
        }

        /**
         * @param autoDeleteOnIdle The idle interval after which the topic is automatically deleted as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). The minimum duration is `5` minutes or `PT5M`.
         * 
         * @return builder
         * 
         */
        public Builder autoDeleteOnIdle(String autoDeleteOnIdle) {
            return autoDeleteOnIdle(Output.of(autoDeleteOnIdle));
        }

        /**
         * @param clientScopedSubscription A `client_scoped_subscription` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder clientScopedSubscription(@Nullable Output<SubscriptionClientScopedSubscriptionArgs> clientScopedSubscription) {
            $.clientScopedSubscription = clientScopedSubscription;
            return this;
        }

        /**
         * @param clientScopedSubscription A `client_scoped_subscription` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder clientScopedSubscription(SubscriptionClientScopedSubscriptionArgs clientScopedSubscription) {
            return clientScopedSubscription(Output.of(clientScopedSubscription));
        }

        /**
         * @param clientScopedSubscriptionEnabled whether the subscription is scoped to a client id. Defaults to `false`.
         * 
         * &gt; **NOTE:** Client Scoped Subscription can only be used for JMS subscription (Java Message Service).
         * 
         * @return builder
         * 
         */
        public Builder clientScopedSubscriptionEnabled(@Nullable Output<Boolean> clientScopedSubscriptionEnabled) {
            $.clientScopedSubscriptionEnabled = clientScopedSubscriptionEnabled;
            return this;
        }

        /**
         * @param clientScopedSubscriptionEnabled whether the subscription is scoped to a client id. Defaults to `false`.
         * 
         * &gt; **NOTE:** Client Scoped Subscription can only be used for JMS subscription (Java Message Service).
         * 
         * @return builder
         * 
         */
        public Builder clientScopedSubscriptionEnabled(Boolean clientScopedSubscriptionEnabled) {
            return clientScopedSubscriptionEnabled(Output.of(clientScopedSubscriptionEnabled));
        }

        /**
         * @param deadLetteringOnFilterEvaluationError Boolean flag which controls whether the Subscription has dead letter support on filter evaluation exceptions. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder deadLetteringOnFilterEvaluationError(@Nullable Output<Boolean> deadLetteringOnFilterEvaluationError) {
            $.deadLetteringOnFilterEvaluationError = deadLetteringOnFilterEvaluationError;
            return this;
        }

        /**
         * @param deadLetteringOnFilterEvaluationError Boolean flag which controls whether the Subscription has dead letter support on filter evaluation exceptions. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder deadLetteringOnFilterEvaluationError(Boolean deadLetteringOnFilterEvaluationError) {
            return deadLetteringOnFilterEvaluationError(Output.of(deadLetteringOnFilterEvaluationError));
        }

        /**
         * @param deadLetteringOnMessageExpiration Boolean flag which controls whether the Subscription has dead letter support when a message expires.
         * 
         * @return builder
         * 
         */
        public Builder deadLetteringOnMessageExpiration(@Nullable Output<Boolean> deadLetteringOnMessageExpiration) {
            $.deadLetteringOnMessageExpiration = deadLetteringOnMessageExpiration;
            return this;
        }

        /**
         * @param deadLetteringOnMessageExpiration Boolean flag which controls whether the Subscription has dead letter support when a message expires.
         * 
         * @return builder
         * 
         */
        public Builder deadLetteringOnMessageExpiration(Boolean deadLetteringOnMessageExpiration) {
            return deadLetteringOnMessageExpiration(Output.of(deadLetteringOnMessageExpiration));
        }

        /**
         * @param defaultMessageTtl The Default message timespan to live as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
         * 
         * @return builder
         * 
         */
        public Builder defaultMessageTtl(@Nullable Output<String> defaultMessageTtl) {
            $.defaultMessageTtl = defaultMessageTtl;
            return this;
        }

        /**
         * @param defaultMessageTtl The Default message timespan to live as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
         * 
         * @return builder
         * 
         */
        public Builder defaultMessageTtl(String defaultMessageTtl) {
            return defaultMessageTtl(Output.of(defaultMessageTtl));
        }

        /**
         * @param enableBatchedOperations Boolean flag which controls whether the Subscription supports batched operations.
         * 
         * @return builder
         * 
         */
        public Builder enableBatchedOperations(@Nullable Output<Boolean> enableBatchedOperations) {
            $.enableBatchedOperations = enableBatchedOperations;
            return this;
        }

        /**
         * @param enableBatchedOperations Boolean flag which controls whether the Subscription supports batched operations.
         * 
         * @return builder
         * 
         */
        public Builder enableBatchedOperations(Boolean enableBatchedOperations) {
            return enableBatchedOperations(Output.of(enableBatchedOperations));
        }

        /**
         * @param forwardDeadLetteredMessagesTo The name of a Queue or Topic to automatically forward Dead Letter messages to.
         * 
         * @return builder
         * 
         */
        public Builder forwardDeadLetteredMessagesTo(@Nullable Output<String> forwardDeadLetteredMessagesTo) {
            $.forwardDeadLetteredMessagesTo = forwardDeadLetteredMessagesTo;
            return this;
        }

        /**
         * @param forwardDeadLetteredMessagesTo The name of a Queue or Topic to automatically forward Dead Letter messages to.
         * 
         * @return builder
         * 
         */
        public Builder forwardDeadLetteredMessagesTo(String forwardDeadLetteredMessagesTo) {
            return forwardDeadLetteredMessagesTo(Output.of(forwardDeadLetteredMessagesTo));
        }

        /**
         * @param forwardTo The name of a Queue or Topic to automatically forward messages to.
         * 
         * @return builder
         * 
         */
        public Builder forwardTo(@Nullable Output<String> forwardTo) {
            $.forwardTo = forwardTo;
            return this;
        }

        /**
         * @param forwardTo The name of a Queue or Topic to automatically forward messages to.
         * 
         * @return builder
         * 
         */
        public Builder forwardTo(String forwardTo) {
            return forwardTo(Output.of(forwardTo));
        }

        /**
         * @param lockDuration The lock duration for the subscription as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). The default value is `1` minute or `P0DT0H1M0S` . The maximum value is `5` minutes or `P0DT0H5M0S` .
         * 
         * @return builder
         * 
         */
        public Builder lockDuration(@Nullable Output<String> lockDuration) {
            $.lockDuration = lockDuration;
            return this;
        }

        /**
         * @param lockDuration The lock duration for the subscription as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). The default value is `1` minute or `P0DT0H1M0S` . The maximum value is `5` minutes or `P0DT0H5M0S` .
         * 
         * @return builder
         * 
         */
        public Builder lockDuration(String lockDuration) {
            return lockDuration(Output.of(lockDuration));
        }

        /**
         * @param maxDeliveryCount The maximum number of deliveries.
         * 
         * @return builder
         * 
         */
        public Builder maxDeliveryCount(Output<Integer> maxDeliveryCount) {
            $.maxDeliveryCount = maxDeliveryCount;
            return this;
        }

        /**
         * @param maxDeliveryCount The maximum number of deliveries.
         * 
         * @return builder
         * 
         */
        public Builder maxDeliveryCount(Integer maxDeliveryCount) {
            return maxDeliveryCount(Output.of(maxDeliveryCount));
        }

        /**
         * @param name Specifies the name of the ServiceBus Subscription resource. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of the ServiceBus Subscription resource. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param requiresSession Boolean flag which controls whether this Subscription supports the concept of a session. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder requiresSession(@Nullable Output<Boolean> requiresSession) {
            $.requiresSession = requiresSession;
            return this;
        }

        /**
         * @param requiresSession Boolean flag which controls whether this Subscription supports the concept of a session. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder requiresSession(Boolean requiresSession) {
            return requiresSession(Output.of(requiresSession));
        }

        /**
         * @param status The status of the Subscription. Possible values are `Active`,`ReceiveDisabled`, or `Disabled`. Defaults to `Active`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the Subscription. Possible values are `Active`,`ReceiveDisabled`, or `Disabled`. Defaults to `Active`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param topicId The ID of the ServiceBus Topic to create this Subscription in. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder topicId(Output<String> topicId) {
            $.topicId = topicId;
            return this;
        }

        /**
         * @param topicId The ID of the ServiceBus Topic to create this Subscription in. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder topicId(String topicId) {
            return topicId(Output.of(topicId));
        }

        public SubscriptionArgs build() {
            if ($.maxDeliveryCount == null) {
                throw new MissingRequiredPropertyException("SubscriptionArgs", "maxDeliveryCount");
            }
            if ($.topicId == null) {
                throw new MissingRequiredPropertyException("SubscriptionArgs", "topicId");
            }
            return $;
        }
    }

}
