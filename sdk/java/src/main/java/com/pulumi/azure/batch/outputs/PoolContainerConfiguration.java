// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.batch.outputs;

import com.pulumi.azure.batch.outputs.PoolContainerConfigurationContainerRegistry;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PoolContainerConfiguration {
    /**
     * @return A list of container image names to use, as would be specified by `docker pull`.
     * 
     */
    private final @Nullable List<String> containerImageNames;
    /**
     * @return Additional container registries from which container images can be pulled by the pool&#39;s VMs.
     * 
     */
    private final @Nullable List<PoolContainerConfigurationContainerRegistry> containerRegistries;
    /**
     * @return The type of container configuration. Possible value is `DockerCompatible`.
     * 
     */
    private final @Nullable String type;

    @CustomType.Constructor
    private PoolContainerConfiguration(
        @CustomType.Parameter("containerImageNames") @Nullable List<String> containerImageNames,
        @CustomType.Parameter("containerRegistries") @Nullable List<PoolContainerConfigurationContainerRegistry> containerRegistries,
        @CustomType.Parameter("type") @Nullable String type) {
        this.containerImageNames = containerImageNames;
        this.containerRegistries = containerRegistries;
        this.type = type;
    }

    /**
     * @return A list of container image names to use, as would be specified by `docker pull`.
     * 
     */
    public List<String> containerImageNames() {
        return this.containerImageNames == null ? List.of() : this.containerImageNames;
    }
    /**
     * @return Additional container registries from which container images can be pulled by the pool&#39;s VMs.
     * 
     */
    public List<PoolContainerConfigurationContainerRegistry> containerRegistries() {
        return this.containerRegistries == null ? List.of() : this.containerRegistries;
    }
    /**
     * @return The type of container configuration. Possible value is `DockerCompatible`.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PoolContainerConfiguration defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<String> containerImageNames;
        private @Nullable List<PoolContainerConfigurationContainerRegistry> containerRegistries;
        private @Nullable String type;

        public Builder() {
    	      // Empty
        }

        public Builder(PoolContainerConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.containerImageNames = defaults.containerImageNames;
    	      this.containerRegistries = defaults.containerRegistries;
    	      this.type = defaults.type;
        }

        public Builder containerImageNames(@Nullable List<String> containerImageNames) {
            this.containerImageNames = containerImageNames;
            return this;
        }
        public Builder containerImageNames(String... containerImageNames) {
            return containerImageNames(List.of(containerImageNames));
        }
        public Builder containerRegistries(@Nullable List<PoolContainerConfigurationContainerRegistry> containerRegistries) {
            this.containerRegistries = containerRegistries;
            return this;
        }
        public Builder containerRegistries(PoolContainerConfigurationContainerRegistry... containerRegistries) {
            return containerRegistries(List.of(containerRegistries));
        }
        public Builder type(@Nullable String type) {
            this.type = type;
            return this;
        }        public PoolContainerConfiguration build() {
            return new PoolContainerConfiguration(containerImageNames, containerRegistries, type);
        }
    }
}
