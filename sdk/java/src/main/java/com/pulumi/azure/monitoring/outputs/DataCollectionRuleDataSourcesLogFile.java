// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.monitoring.outputs;

import com.pulumi.azure.monitoring.outputs.DataCollectionRuleDataSourcesLogFileSettings;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DataCollectionRuleDataSourcesLogFile {
    /**
     * @return Specifies a list of file patterns where the log files are located. For example, `C:\\JavaLogs\\*.log`.
     * 
     */
    private List<String> filePatterns;
    /**
     * @return The data format of the log files. possible value is `text`.
     * 
     */
    private String format;
    /**
     * @return The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
     * 
     */
    private String name;
    /**
     * @return A `settings` block as defined below.
     * 
     */
    private @Nullable DataCollectionRuleDataSourcesLogFileSettings settings;
    /**
     * @return Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible value should be custom stream names.
     * 
     */
    private List<String> streams;

    private DataCollectionRuleDataSourcesLogFile() {}
    /**
     * @return Specifies a list of file patterns where the log files are located. For example, `C:\\JavaLogs\\*.log`.
     * 
     */
    public List<String> filePatterns() {
        return this.filePatterns;
    }
    /**
     * @return The data format of the log files. possible value is `text`.
     * 
     */
    public String format() {
        return this.format;
    }
    /**
     * @return The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return A `settings` block as defined below.
     * 
     */
    public Optional<DataCollectionRuleDataSourcesLogFileSettings> settings() {
        return Optional.ofNullable(this.settings);
    }
    /**
     * @return Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible value should be custom stream names.
     * 
     */
    public List<String> streams() {
        return this.streams;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataCollectionRuleDataSourcesLogFile defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> filePatterns;
        private String format;
        private String name;
        private @Nullable DataCollectionRuleDataSourcesLogFileSettings settings;
        private List<String> streams;
        public Builder() {}
        public Builder(DataCollectionRuleDataSourcesLogFile defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.filePatterns = defaults.filePatterns;
    	      this.format = defaults.format;
    	      this.name = defaults.name;
    	      this.settings = defaults.settings;
    	      this.streams = defaults.streams;
        }

        @CustomType.Setter
        public Builder filePatterns(List<String> filePatterns) {
            if (filePatterns == null) {
              throw new MissingRequiredPropertyException("DataCollectionRuleDataSourcesLogFile", "filePatterns");
            }
            this.filePatterns = filePatterns;
            return this;
        }
        public Builder filePatterns(String... filePatterns) {
            return filePatterns(List.of(filePatterns));
        }
        @CustomType.Setter
        public Builder format(String format) {
            if (format == null) {
              throw new MissingRequiredPropertyException("DataCollectionRuleDataSourcesLogFile", "format");
            }
            this.format = format;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("DataCollectionRuleDataSourcesLogFile", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder settings(@Nullable DataCollectionRuleDataSourcesLogFileSettings settings) {

            this.settings = settings;
            return this;
        }
        @CustomType.Setter
        public Builder streams(List<String> streams) {
            if (streams == null) {
              throw new MissingRequiredPropertyException("DataCollectionRuleDataSourcesLogFile", "streams");
            }
            this.streams = streams;
            return this;
        }
        public Builder streams(String... streams) {
            return streams(List.of(streams));
        }
        public DataCollectionRuleDataSourcesLogFile build() {
            final var _resultValue = new DataCollectionRuleDataSourcesLogFile();
            _resultValue.filePatterns = filePatterns;
            _resultValue.format = format;
            _resultValue.name = name;
            _resultValue.settings = settings;
            _resultValue.streams = streams;
            return _resultValue;
        }
    }
}
