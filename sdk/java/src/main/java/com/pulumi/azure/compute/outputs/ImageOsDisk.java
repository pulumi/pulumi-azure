// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ImageOsDisk {
    /**
     * @return Specifies the URI in Azure storage of the blob that you want to use to create the image. Changing this forces a new resource to be created.
     * 
     */
    private @Nullable String blobUri;
    /**
     * @return Specifies the caching mode as `ReadWrite`, `ReadOnly`, or `None`. The default is `None`.
     * 
     */
    private @Nullable String caching;
    /**
     * @return The ID of the Disk Encryption Set which should be used to encrypt this image. Changing this forces a new resource to be created.
     * 
     */
    private @Nullable String diskEncryptionSetId;
    /**
     * @return Specifies the ID of the managed disk resource that you want to use to create the image.
     * 
     */
    private @Nullable String managedDiskId;
    /**
     * @return Specifies the state of the operating system contained in the blob. Currently, the only value is Generalized. Possible values are `Generalized` and `Specialized`.
     * 
     */
    private @Nullable String osState;
    /**
     * @return Specifies the type of operating system contained in the virtual machine image. Possible values are: `Windows` or `Linux`.
     * 
     */
    private @Nullable String osType;
    /**
     * @return Specifies the size of the image to be created. Changing this forces a new resource to be created.
     * 
     */
    private @Nullable Integer sizeGb;

    private ImageOsDisk() {}
    /**
     * @return Specifies the URI in Azure storage of the blob that you want to use to create the image. Changing this forces a new resource to be created.
     * 
     */
    public Optional<String> blobUri() {
        return Optional.ofNullable(this.blobUri);
    }
    /**
     * @return Specifies the caching mode as `ReadWrite`, `ReadOnly`, or `None`. The default is `None`.
     * 
     */
    public Optional<String> caching() {
        return Optional.ofNullable(this.caching);
    }
    /**
     * @return The ID of the Disk Encryption Set which should be used to encrypt this image. Changing this forces a new resource to be created.
     * 
     */
    public Optional<String> diskEncryptionSetId() {
        return Optional.ofNullable(this.diskEncryptionSetId);
    }
    /**
     * @return Specifies the ID of the managed disk resource that you want to use to create the image.
     * 
     */
    public Optional<String> managedDiskId() {
        return Optional.ofNullable(this.managedDiskId);
    }
    /**
     * @return Specifies the state of the operating system contained in the blob. Currently, the only value is Generalized. Possible values are `Generalized` and `Specialized`.
     * 
     */
    public Optional<String> osState() {
        return Optional.ofNullable(this.osState);
    }
    /**
     * @return Specifies the type of operating system contained in the virtual machine image. Possible values are: `Windows` or `Linux`.
     * 
     */
    public Optional<String> osType() {
        return Optional.ofNullable(this.osType);
    }
    /**
     * @return Specifies the size of the image to be created. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Integer> sizeGb() {
        return Optional.ofNullable(this.sizeGb);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ImageOsDisk defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String blobUri;
        private @Nullable String caching;
        private @Nullable String diskEncryptionSetId;
        private @Nullable String managedDiskId;
        private @Nullable String osState;
        private @Nullable String osType;
        private @Nullable Integer sizeGb;
        public Builder() {}
        public Builder(ImageOsDisk defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.blobUri = defaults.blobUri;
    	      this.caching = defaults.caching;
    	      this.diskEncryptionSetId = defaults.diskEncryptionSetId;
    	      this.managedDiskId = defaults.managedDiskId;
    	      this.osState = defaults.osState;
    	      this.osType = defaults.osType;
    	      this.sizeGb = defaults.sizeGb;
        }

        @CustomType.Setter
        public Builder blobUri(@Nullable String blobUri) {
            this.blobUri = blobUri;
            return this;
        }
        @CustomType.Setter
        public Builder caching(@Nullable String caching) {
            this.caching = caching;
            return this;
        }
        @CustomType.Setter
        public Builder diskEncryptionSetId(@Nullable String diskEncryptionSetId) {
            this.diskEncryptionSetId = diskEncryptionSetId;
            return this;
        }
        @CustomType.Setter
        public Builder managedDiskId(@Nullable String managedDiskId) {
            this.managedDiskId = managedDiskId;
            return this;
        }
        @CustomType.Setter
        public Builder osState(@Nullable String osState) {
            this.osState = osState;
            return this;
        }
        @CustomType.Setter
        public Builder osType(@Nullable String osType) {
            this.osType = osType;
            return this;
        }
        @CustomType.Setter
        public Builder sizeGb(@Nullable Integer sizeGb) {
            this.sizeGb = sizeGb;
            return this;
        }
        public ImageOsDisk build() {
            final var _resultValue = new ImageOsDisk();
            _resultValue.blobUri = blobUri;
            _resultValue.caching = caching;
            _resultValue.diskEncryptionSetId = diskEncryptionSetId;
            _resultValue.managedDiskId = managedDiskId;
            _resultValue.osState = osState;
            _resultValue.osType = osType;
            _resultValue.sizeGb = sizeGb;
            return _resultValue;
        }
    }
}
