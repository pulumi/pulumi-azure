// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.cosmosdb.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MongoCollectionIndexArgs extends com.pulumi.resources.ResourceArgs {

    public static final MongoCollectionIndexArgs Empty = new MongoCollectionIndexArgs();

    /**
     * Specifies the list of user settable keys for each Cosmos DB Mongo Collection.
     * 
     */
    @Import(name="keys", required=true)
    private Output<List<String>> keys;

    /**
     * @return Specifies the list of user settable keys for each Cosmos DB Mongo Collection.
     * 
     */
    public Output<List<String>> keys() {
        return this.keys;
    }

    /**
     * Is the index unique or not? Defaults to `false`.
     * 
     * &gt; **Note:** An index with an &#34;_id&#34; key must be specified.
     * 
     */
    @Import(name="unique")
    private @Nullable Output<Boolean> unique;

    /**
     * @return Is the index unique or not? Defaults to `false`.
     * 
     * &gt; **Note:** An index with an &#34;_id&#34; key must be specified.
     * 
     */
    public Optional<Output<Boolean>> unique() {
        return Optional.ofNullable(this.unique);
    }

    private MongoCollectionIndexArgs() {}

    private MongoCollectionIndexArgs(MongoCollectionIndexArgs $) {
        this.keys = $.keys;
        this.unique = $.unique;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MongoCollectionIndexArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MongoCollectionIndexArgs $;

        public Builder() {
            $ = new MongoCollectionIndexArgs();
        }

        public Builder(MongoCollectionIndexArgs defaults) {
            $ = new MongoCollectionIndexArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param keys Specifies the list of user settable keys for each Cosmos DB Mongo Collection.
         * 
         * @return builder
         * 
         */
        public Builder keys(Output<List<String>> keys) {
            $.keys = keys;
            return this;
        }

        /**
         * @param keys Specifies the list of user settable keys for each Cosmos DB Mongo Collection.
         * 
         * @return builder
         * 
         */
        public Builder keys(List<String> keys) {
            return keys(Output.of(keys));
        }

        /**
         * @param keys Specifies the list of user settable keys for each Cosmos DB Mongo Collection.
         * 
         * @return builder
         * 
         */
        public Builder keys(String... keys) {
            return keys(List.of(keys));
        }

        /**
         * @param unique Is the index unique or not? Defaults to `false`.
         * 
         * &gt; **Note:** An index with an &#34;_id&#34; key must be specified.
         * 
         * @return builder
         * 
         */
        public Builder unique(@Nullable Output<Boolean> unique) {
            $.unique = unique;
            return this;
        }

        /**
         * @param unique Is the index unique or not? Defaults to `false`.
         * 
         * &gt; **Note:** An index with an &#34;_id&#34; key must be specified.
         * 
         * @return builder
         * 
         */
        public Builder unique(Boolean unique) {
            return unique(Output.of(unique));
        }

        public MongoCollectionIndexArgs build() {
            if ($.keys == null) {
                throw new MissingRequiredPropertyException("MongoCollectionIndexArgs", "keys");
            }
            return $;
        }
    }

}
