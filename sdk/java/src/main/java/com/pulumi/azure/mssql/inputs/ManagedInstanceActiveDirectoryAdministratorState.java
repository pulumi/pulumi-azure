// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.mssql.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagedInstanceActiveDirectoryAdministratorState extends com.pulumi.resources.ResourceArgs {

    public static final ManagedInstanceActiveDirectoryAdministratorState Empty = new ManagedInstanceActiveDirectoryAdministratorState();

    /**
     * When `true`, only permit logins from AAD users and administrators. When `false`, also allow local database users. Defaults to `false`.
     * 
     */
    @Import(name="azureadAuthenticationOnly")
    private @Nullable Output<Boolean> azureadAuthenticationOnly;

    /**
     * @return When `true`, only permit logins from AAD users and administrators. When `false`, also allow local database users. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> azureadAuthenticationOnly() {
        return Optional.ofNullable(this.azureadAuthenticationOnly);
    }

    /**
     * The login name of the principal to set as the Managed Instance Administrator.
     * 
     */
    @Import(name="loginUsername")
    private @Nullable Output<String> loginUsername;

    /**
     * @return The login name of the principal to set as the Managed Instance Administrator.
     * 
     */
    public Optional<Output<String>> loginUsername() {
        return Optional.ofNullable(this.loginUsername);
    }

    /**
     * The ID of the Azure SQL Managed Instance for which to set the administrator. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="managedInstanceId")
    private @Nullable Output<String> managedInstanceId;

    /**
     * @return The ID of the Azure SQL Managed Instance for which to set the administrator. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> managedInstanceId() {
        return Optional.ofNullable(this.managedInstanceId);
    }

    /**
     * The Object ID of the principal to set as the Managed Instance Administrator.
     * 
     */
    @Import(name="objectId")
    private @Nullable Output<String> objectId;

    /**
     * @return The Object ID of the principal to set as the Managed Instance Administrator.
     * 
     */
    public Optional<Output<String>> objectId() {
        return Optional.ofNullable(this.objectId);
    }

    /**
     * The Azure Active Directory Tenant ID.
     * 
     */
    @Import(name="tenantId")
    private @Nullable Output<String> tenantId;

    /**
     * @return The Azure Active Directory Tenant ID.
     * 
     */
    public Optional<Output<String>> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }

    private ManagedInstanceActiveDirectoryAdministratorState() {}

    private ManagedInstanceActiveDirectoryAdministratorState(ManagedInstanceActiveDirectoryAdministratorState $) {
        this.azureadAuthenticationOnly = $.azureadAuthenticationOnly;
        this.loginUsername = $.loginUsername;
        this.managedInstanceId = $.managedInstanceId;
        this.objectId = $.objectId;
        this.tenantId = $.tenantId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedInstanceActiveDirectoryAdministratorState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedInstanceActiveDirectoryAdministratorState $;

        public Builder() {
            $ = new ManagedInstanceActiveDirectoryAdministratorState();
        }

        public Builder(ManagedInstanceActiveDirectoryAdministratorState defaults) {
            $ = new ManagedInstanceActiveDirectoryAdministratorState(Objects.requireNonNull(defaults));
        }

        /**
         * @param azureadAuthenticationOnly When `true`, only permit logins from AAD users and administrators. When `false`, also allow local database users. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder azureadAuthenticationOnly(@Nullable Output<Boolean> azureadAuthenticationOnly) {
            $.azureadAuthenticationOnly = azureadAuthenticationOnly;
            return this;
        }

        /**
         * @param azureadAuthenticationOnly When `true`, only permit logins from AAD users and administrators. When `false`, also allow local database users. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder azureadAuthenticationOnly(Boolean azureadAuthenticationOnly) {
            return azureadAuthenticationOnly(Output.of(azureadAuthenticationOnly));
        }

        /**
         * @param loginUsername The login name of the principal to set as the Managed Instance Administrator.
         * 
         * @return builder
         * 
         */
        public Builder loginUsername(@Nullable Output<String> loginUsername) {
            $.loginUsername = loginUsername;
            return this;
        }

        /**
         * @param loginUsername The login name of the principal to set as the Managed Instance Administrator.
         * 
         * @return builder
         * 
         */
        public Builder loginUsername(String loginUsername) {
            return loginUsername(Output.of(loginUsername));
        }

        /**
         * @param managedInstanceId The ID of the Azure SQL Managed Instance for which to set the administrator. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder managedInstanceId(@Nullable Output<String> managedInstanceId) {
            $.managedInstanceId = managedInstanceId;
            return this;
        }

        /**
         * @param managedInstanceId The ID of the Azure SQL Managed Instance for which to set the administrator. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder managedInstanceId(String managedInstanceId) {
            return managedInstanceId(Output.of(managedInstanceId));
        }

        /**
         * @param objectId The Object ID of the principal to set as the Managed Instance Administrator.
         * 
         * @return builder
         * 
         */
        public Builder objectId(@Nullable Output<String> objectId) {
            $.objectId = objectId;
            return this;
        }

        /**
         * @param objectId The Object ID of the principal to set as the Managed Instance Administrator.
         * 
         * @return builder
         * 
         */
        public Builder objectId(String objectId) {
            return objectId(Output.of(objectId));
        }

        /**
         * @param tenantId The Azure Active Directory Tenant ID.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(@Nullable Output<String> tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        /**
         * @param tenantId The Azure Active Directory Tenant ID.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(String tenantId) {
            return tenantId(Output.of(tenantId));
        }

        public ManagedInstanceActiveDirectoryAdministratorState build() {
            return $;
        }
    }

}
