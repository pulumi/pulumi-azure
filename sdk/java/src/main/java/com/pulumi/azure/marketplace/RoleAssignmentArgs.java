// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.marketplace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RoleAssignmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final RoleAssignmentArgs Empty = new RoleAssignmentArgs();

    @Import(name="condition")
    private @Nullable Output<String> condition;

    public Optional<Output<String>> condition() {
        return Optional.ofNullable(this.condition);
    }

    @Import(name="conditionVersion")
    private @Nullable Output<String> conditionVersion;

    public Optional<Output<String>> conditionVersion() {
        return Optional.ofNullable(this.conditionVersion);
    }

    @Import(name="delegatedManagedIdentityResourceId")
    private @Nullable Output<String> delegatedManagedIdentityResourceId;

    public Optional<Output<String>> delegatedManagedIdentityResourceId() {
        return Optional.ofNullable(this.delegatedManagedIdentityResourceId);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="principalId", required=true)
    private Output<String> principalId;

    public Output<String> principalId() {
        return this.principalId;
    }

    @Import(name="roleDefinitionId")
    private @Nullable Output<String> roleDefinitionId;

    public Optional<Output<String>> roleDefinitionId() {
        return Optional.ofNullable(this.roleDefinitionId);
    }

    @Import(name="roleDefinitionName")
    private @Nullable Output<String> roleDefinitionName;

    public Optional<Output<String>> roleDefinitionName() {
        return Optional.ofNullable(this.roleDefinitionName);
    }

    @Import(name="skipServicePrincipalAadCheck")
    private @Nullable Output<Boolean> skipServicePrincipalAadCheck;

    public Optional<Output<Boolean>> skipServicePrincipalAadCheck() {
        return Optional.ofNullable(this.skipServicePrincipalAadCheck);
    }

    private RoleAssignmentArgs() {}

    private RoleAssignmentArgs(RoleAssignmentArgs $) {
        this.condition = $.condition;
        this.conditionVersion = $.conditionVersion;
        this.delegatedManagedIdentityResourceId = $.delegatedManagedIdentityResourceId;
        this.description = $.description;
        this.name = $.name;
        this.principalId = $.principalId;
        this.roleDefinitionId = $.roleDefinitionId;
        this.roleDefinitionName = $.roleDefinitionName;
        this.skipServicePrincipalAadCheck = $.skipServicePrincipalAadCheck;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RoleAssignmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RoleAssignmentArgs $;

        public Builder() {
            $ = new RoleAssignmentArgs();
        }

        public Builder(RoleAssignmentArgs defaults) {
            $ = new RoleAssignmentArgs(Objects.requireNonNull(defaults));
        }

        public Builder condition(@Nullable Output<String> condition) {
            $.condition = condition;
            return this;
        }

        public Builder condition(String condition) {
            return condition(Output.of(condition));
        }

        public Builder conditionVersion(@Nullable Output<String> conditionVersion) {
            $.conditionVersion = conditionVersion;
            return this;
        }

        public Builder conditionVersion(String conditionVersion) {
            return conditionVersion(Output.of(conditionVersion));
        }

        public Builder delegatedManagedIdentityResourceId(@Nullable Output<String> delegatedManagedIdentityResourceId) {
            $.delegatedManagedIdentityResourceId = delegatedManagedIdentityResourceId;
            return this;
        }

        public Builder delegatedManagedIdentityResourceId(String delegatedManagedIdentityResourceId) {
            return delegatedManagedIdentityResourceId(Output.of(delegatedManagedIdentityResourceId));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder principalId(Output<String> principalId) {
            $.principalId = principalId;
            return this;
        }

        public Builder principalId(String principalId) {
            return principalId(Output.of(principalId));
        }

        public Builder roleDefinitionId(@Nullable Output<String> roleDefinitionId) {
            $.roleDefinitionId = roleDefinitionId;
            return this;
        }

        public Builder roleDefinitionId(String roleDefinitionId) {
            return roleDefinitionId(Output.of(roleDefinitionId));
        }

        public Builder roleDefinitionName(@Nullable Output<String> roleDefinitionName) {
            $.roleDefinitionName = roleDefinitionName;
            return this;
        }

        public Builder roleDefinitionName(String roleDefinitionName) {
            return roleDefinitionName(Output.of(roleDefinitionName));
        }

        public Builder skipServicePrincipalAadCheck(@Nullable Output<Boolean> skipServicePrincipalAadCheck) {
            $.skipServicePrincipalAadCheck = skipServicePrincipalAadCheck;
            return this;
        }

        public Builder skipServicePrincipalAadCheck(Boolean skipServicePrincipalAadCheck) {
            return skipServicePrincipalAadCheck(Output.of(skipServicePrincipalAadCheck));
        }

        public RoleAssignmentArgs build() {
            if ($.principalId == null) {
                throw new MissingRequiredPropertyException("RoleAssignmentArgs", "principalId");
            }
            return $;
        }
    }

}
