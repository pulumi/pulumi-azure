// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerservice.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegistryEncryptionArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegistryEncryptionArgs Empty = new RegistryEncryptionArgs();

    /**
     * Boolean value that indicates whether encryption is enabled.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Boolean value that indicates whether encryption is enabled.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The client ID of the managed identity associated with the encryption key.
     * 
     * &gt; **NOTE** The managed identity used in `encryption` also needs to be part of the `identity` block under `identity_ids`
     * 
     */
    @Import(name="identityClientId", required=true)
    private Output<String> identityClientId;

    /**
     * @return The client ID of the managed identity associated with the encryption key.
     * 
     * &gt; **NOTE** The managed identity used in `encryption` also needs to be part of the `identity` block under `identity_ids`
     * 
     */
    public Output<String> identityClientId() {
        return this.identityClientId;
    }

    /**
     * The ID of the Key Vault Key.
     * 
     */
    @Import(name="keyVaultKeyId", required=true)
    private Output<String> keyVaultKeyId;

    /**
     * @return The ID of the Key Vault Key.
     * 
     */
    public Output<String> keyVaultKeyId() {
        return this.keyVaultKeyId;
    }

    private RegistryEncryptionArgs() {}

    private RegistryEncryptionArgs(RegistryEncryptionArgs $) {
        this.enabled = $.enabled;
        this.identityClientId = $.identityClientId;
        this.keyVaultKeyId = $.keyVaultKeyId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegistryEncryptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegistryEncryptionArgs $;

        public Builder() {
            $ = new RegistryEncryptionArgs();
        }

        public Builder(RegistryEncryptionArgs defaults) {
            $ = new RegistryEncryptionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled Boolean value that indicates whether encryption is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Boolean value that indicates whether encryption is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param identityClientId The client ID of the managed identity associated with the encryption key.
         * 
         * &gt; **NOTE** The managed identity used in `encryption` also needs to be part of the `identity` block under `identity_ids`
         * 
         * @return builder
         * 
         */
        public Builder identityClientId(Output<String> identityClientId) {
            $.identityClientId = identityClientId;
            return this;
        }

        /**
         * @param identityClientId The client ID of the managed identity associated with the encryption key.
         * 
         * &gt; **NOTE** The managed identity used in `encryption` also needs to be part of the `identity` block under `identity_ids`
         * 
         * @return builder
         * 
         */
        public Builder identityClientId(String identityClientId) {
            return identityClientId(Output.of(identityClientId));
        }

        /**
         * @param keyVaultKeyId The ID of the Key Vault Key.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultKeyId(Output<String> keyVaultKeyId) {
            $.keyVaultKeyId = keyVaultKeyId;
            return this;
        }

        /**
         * @param keyVaultKeyId The ID of the Key Vault Key.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultKeyId(String keyVaultKeyId) {
            return keyVaultKeyId(Output.of(keyVaultKeyId));
        }

        public RegistryEncryptionArgs build() {
            if ($.identityClientId == null) {
                throw new MissingRequiredPropertyException("RegistryEncryptionArgs", "identityClientId");
            }
            if ($.keyVaultKeyId == null) {
                throw new MissingRequiredPropertyException("RegistryEncryptionArgs", "keyVaultKeyId");
            }
            return $;
        }
    }

}
