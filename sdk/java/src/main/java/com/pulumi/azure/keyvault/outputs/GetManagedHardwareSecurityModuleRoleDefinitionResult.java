// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.keyvault.outputs;

import com.pulumi.azure.keyvault.outputs.GetManagedHardwareSecurityModuleRoleDefinitionPermission;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetManagedHardwareSecurityModuleRoleDefinitionResult {
    /**
     * @return A list of assignable role scope. Possible values are `/` and `/keys`.
     * 
     */
    private List<String> assignableScopes;
    /**
     * @return A text description of this role definition.
     * 
     */
    private String description;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String name;
    /**
     * @return A `permission` block as defined below.
     * 
     */
    private List<GetManagedHardwareSecurityModuleRoleDefinitionPermission> permissions;
    /**
     * @return The ID of the role definition resource without base url.
     * 
     */
    private String resourceManagerId;
    /**
     * @return The role name of the role definition.
     * 
     */
    private String roleName;
    /**
     * @return The type of the role definition. Possible values are `AKVBuiltInRole` and `CustomRole`.
     * 
     */
    private String roleType;
    private String vaultBaseUrl;

    private GetManagedHardwareSecurityModuleRoleDefinitionResult() {}
    /**
     * @return A list of assignable role scope. Possible values are `/` and `/keys`.
     * 
     */
    public List<String> assignableScopes() {
        return this.assignableScopes;
    }
    /**
     * @return A text description of this role definition.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return A `permission` block as defined below.
     * 
     */
    public List<GetManagedHardwareSecurityModuleRoleDefinitionPermission> permissions() {
        return this.permissions;
    }
    /**
     * @return The ID of the role definition resource without base url.
     * 
     */
    public String resourceManagerId() {
        return this.resourceManagerId;
    }
    /**
     * @return The role name of the role definition.
     * 
     */
    public String roleName() {
        return this.roleName;
    }
    /**
     * @return The type of the role definition. Possible values are `AKVBuiltInRole` and `CustomRole`.
     * 
     */
    public String roleType() {
        return this.roleType;
    }
    public String vaultBaseUrl() {
        return this.vaultBaseUrl;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedHardwareSecurityModuleRoleDefinitionResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> assignableScopes;
        private String description;
        private String id;
        private String name;
        private List<GetManagedHardwareSecurityModuleRoleDefinitionPermission> permissions;
        private String resourceManagerId;
        private String roleName;
        private String roleType;
        private String vaultBaseUrl;
        public Builder() {}
        public Builder(GetManagedHardwareSecurityModuleRoleDefinitionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.assignableScopes = defaults.assignableScopes;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.permissions = defaults.permissions;
    	      this.resourceManagerId = defaults.resourceManagerId;
    	      this.roleName = defaults.roleName;
    	      this.roleType = defaults.roleType;
    	      this.vaultBaseUrl = defaults.vaultBaseUrl;
        }

        @CustomType.Setter
        public Builder assignableScopes(List<String> assignableScopes) {
            if (assignableScopes == null) {
              throw new MissingRequiredPropertyException("GetManagedHardwareSecurityModuleRoleDefinitionResult", "assignableScopes");
            }
            this.assignableScopes = assignableScopes;
            return this;
        }
        public Builder assignableScopes(String... assignableScopes) {
            return assignableScopes(List.of(assignableScopes));
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetManagedHardwareSecurityModuleRoleDefinitionResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetManagedHardwareSecurityModuleRoleDefinitionResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetManagedHardwareSecurityModuleRoleDefinitionResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder permissions(List<GetManagedHardwareSecurityModuleRoleDefinitionPermission> permissions) {
            if (permissions == null) {
              throw new MissingRequiredPropertyException("GetManagedHardwareSecurityModuleRoleDefinitionResult", "permissions");
            }
            this.permissions = permissions;
            return this;
        }
        public Builder permissions(GetManagedHardwareSecurityModuleRoleDefinitionPermission... permissions) {
            return permissions(List.of(permissions));
        }
        @CustomType.Setter
        public Builder resourceManagerId(String resourceManagerId) {
            if (resourceManagerId == null) {
              throw new MissingRequiredPropertyException("GetManagedHardwareSecurityModuleRoleDefinitionResult", "resourceManagerId");
            }
            this.resourceManagerId = resourceManagerId;
            return this;
        }
        @CustomType.Setter
        public Builder roleName(String roleName) {
            if (roleName == null) {
              throw new MissingRequiredPropertyException("GetManagedHardwareSecurityModuleRoleDefinitionResult", "roleName");
            }
            this.roleName = roleName;
            return this;
        }
        @CustomType.Setter
        public Builder roleType(String roleType) {
            if (roleType == null) {
              throw new MissingRequiredPropertyException("GetManagedHardwareSecurityModuleRoleDefinitionResult", "roleType");
            }
            this.roleType = roleType;
            return this;
        }
        @CustomType.Setter
        public Builder vaultBaseUrl(String vaultBaseUrl) {
            if (vaultBaseUrl == null) {
              throw new MissingRequiredPropertyException("GetManagedHardwareSecurityModuleRoleDefinitionResult", "vaultBaseUrl");
            }
            this.vaultBaseUrl = vaultBaseUrl;
            return this;
        }
        public GetManagedHardwareSecurityModuleRoleDefinitionResult build() {
            final var _resultValue = new GetManagedHardwareSecurityModuleRoleDefinitionResult();
            _resultValue.assignableScopes = assignableScopes;
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.permissions = permissions;
            _resultValue.resourceManagerId = resourceManagerId;
            _resultValue.roleName = roleName;
            _resultValue.roleType = roleType;
            _resultValue.vaultBaseUrl = vaultBaseUrl;
            return _resultValue;
        }
    }
}
