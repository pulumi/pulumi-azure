// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.redis.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CacheRedisConfiguration {
    /**
     * @return Enable or disable AOF persistence for this Redis Cache.
     * 
     */
    private final @Nullable Boolean aofBackupEnabled;
    /**
     * @return First Storage Account connection string for AOF persistence.
     * 
     */
    private final @Nullable String aofStorageConnectionString0;
    /**
     * @return Second Storage Account connection string for AOF persistence.
     * 
     */
    private final @Nullable String aofStorageConnectionString1;
    /**
     * @return If set to `false`, the Redis instance will be accessible without authentication. Defaults to `true`.
     * 
     */
    private final @Nullable Boolean enableAuthentication;
    /**
     * @return Returns the max number of connected clients at the same time.
     * 
     */
    private final @Nullable Integer maxclients;
    /**
     * @return Value in megabytes reserved to accommodate for memory fragmentation. Defaults are shown below.
     * 
     */
    private final @Nullable Integer maxfragmentationmemoryReserved;
    /**
     * @return The max-memory delta for this Redis instance. Defaults are shown below.
     * 
     */
    private final @Nullable Integer maxmemoryDelta;
    /**
     * @return How Redis will select what to remove when `maxmemory` is reached. Defaults are shown below.
     * 
     */
    private final @Nullable String maxmemoryPolicy;
    /**
     * @return Value in megabytes reserved for non-cache usage e.g. failover. Defaults are shown below.
     * 
     */
    private final @Nullable Integer maxmemoryReserved;
    /**
     * @return Keyspace notifications allows clients to subscribe to Pub/Sub channels in order to receive events affecting the Redis data set in some way. [Reference](https://redis.io/topics/notifications#configuration)
     * 
     */
    private final @Nullable String notifyKeyspaceEvents;
    /**
     * @return Is Backup Enabled? Only supported on Premium SKUs.
     * 
     */
    private final @Nullable Boolean rdbBackupEnabled;
    /**
     * @return The Backup Frequency in Minutes. Only supported on Premium SKUs. Possible values are: `15`, `30`, `60`, `360`, `720` and `1440`.
     * 
     */
    private final @Nullable Integer rdbBackupFrequency;
    /**
     * @return The maximum number of snapshots to create as a backup. Only supported for Premium SKUs.
     * 
     */
    private final @Nullable Integer rdbBackupMaxSnapshotCount;
    /**
     * @return The Connection String to the Storage Account. Only supported for Premium SKUs. In the format: `DefaultEndpointsProtocol=https;BlobEndpoint=${azurerm_storage_account.example.primary_blob_endpoint};AccountName=${azurerm_storage_account.example.name};AccountKey=${azurerm_storage_account.example.primary_access_key}`.
     * 
     */
    private final @Nullable String rdbStorageConnectionString;

    @CustomType.Constructor
    private CacheRedisConfiguration(
        @CustomType.Parameter("aofBackupEnabled") @Nullable Boolean aofBackupEnabled,
        @CustomType.Parameter("aofStorageConnectionString0") @Nullable String aofStorageConnectionString0,
        @CustomType.Parameter("aofStorageConnectionString1") @Nullable String aofStorageConnectionString1,
        @CustomType.Parameter("enableAuthentication") @Nullable Boolean enableAuthentication,
        @CustomType.Parameter("maxclients") @Nullable Integer maxclients,
        @CustomType.Parameter("maxfragmentationmemoryReserved") @Nullable Integer maxfragmentationmemoryReserved,
        @CustomType.Parameter("maxmemoryDelta") @Nullable Integer maxmemoryDelta,
        @CustomType.Parameter("maxmemoryPolicy") @Nullable String maxmemoryPolicy,
        @CustomType.Parameter("maxmemoryReserved") @Nullable Integer maxmemoryReserved,
        @CustomType.Parameter("notifyKeyspaceEvents") @Nullable String notifyKeyspaceEvents,
        @CustomType.Parameter("rdbBackupEnabled") @Nullable Boolean rdbBackupEnabled,
        @CustomType.Parameter("rdbBackupFrequency") @Nullable Integer rdbBackupFrequency,
        @CustomType.Parameter("rdbBackupMaxSnapshotCount") @Nullable Integer rdbBackupMaxSnapshotCount,
        @CustomType.Parameter("rdbStorageConnectionString") @Nullable String rdbStorageConnectionString) {
        this.aofBackupEnabled = aofBackupEnabled;
        this.aofStorageConnectionString0 = aofStorageConnectionString0;
        this.aofStorageConnectionString1 = aofStorageConnectionString1;
        this.enableAuthentication = enableAuthentication;
        this.maxclients = maxclients;
        this.maxfragmentationmemoryReserved = maxfragmentationmemoryReserved;
        this.maxmemoryDelta = maxmemoryDelta;
        this.maxmemoryPolicy = maxmemoryPolicy;
        this.maxmemoryReserved = maxmemoryReserved;
        this.notifyKeyspaceEvents = notifyKeyspaceEvents;
        this.rdbBackupEnabled = rdbBackupEnabled;
        this.rdbBackupFrequency = rdbBackupFrequency;
        this.rdbBackupMaxSnapshotCount = rdbBackupMaxSnapshotCount;
        this.rdbStorageConnectionString = rdbStorageConnectionString;
    }

    /**
     * @return Enable or disable AOF persistence for this Redis Cache.
     * 
     */
    public Optional<Boolean> aofBackupEnabled() {
        return Optional.ofNullable(this.aofBackupEnabled);
    }
    /**
     * @return First Storage Account connection string for AOF persistence.
     * 
     */
    public Optional<String> aofStorageConnectionString0() {
        return Optional.ofNullable(this.aofStorageConnectionString0);
    }
    /**
     * @return Second Storage Account connection string for AOF persistence.
     * 
     */
    public Optional<String> aofStorageConnectionString1() {
        return Optional.ofNullable(this.aofStorageConnectionString1);
    }
    /**
     * @return If set to `false`, the Redis instance will be accessible without authentication. Defaults to `true`.
     * 
     */
    public Optional<Boolean> enableAuthentication() {
        return Optional.ofNullable(this.enableAuthentication);
    }
    /**
     * @return Returns the max number of connected clients at the same time.
     * 
     */
    public Optional<Integer> maxclients() {
        return Optional.ofNullable(this.maxclients);
    }
    /**
     * @return Value in megabytes reserved to accommodate for memory fragmentation. Defaults are shown below.
     * 
     */
    public Optional<Integer> maxfragmentationmemoryReserved() {
        return Optional.ofNullable(this.maxfragmentationmemoryReserved);
    }
    /**
     * @return The max-memory delta for this Redis instance. Defaults are shown below.
     * 
     */
    public Optional<Integer> maxmemoryDelta() {
        return Optional.ofNullable(this.maxmemoryDelta);
    }
    /**
     * @return How Redis will select what to remove when `maxmemory` is reached. Defaults are shown below.
     * 
     */
    public Optional<String> maxmemoryPolicy() {
        return Optional.ofNullable(this.maxmemoryPolicy);
    }
    /**
     * @return Value in megabytes reserved for non-cache usage e.g. failover. Defaults are shown below.
     * 
     */
    public Optional<Integer> maxmemoryReserved() {
        return Optional.ofNullable(this.maxmemoryReserved);
    }
    /**
     * @return Keyspace notifications allows clients to subscribe to Pub/Sub channels in order to receive events affecting the Redis data set in some way. [Reference](https://redis.io/topics/notifications#configuration)
     * 
     */
    public Optional<String> notifyKeyspaceEvents() {
        return Optional.ofNullable(this.notifyKeyspaceEvents);
    }
    /**
     * @return Is Backup Enabled? Only supported on Premium SKUs.
     * 
     */
    public Optional<Boolean> rdbBackupEnabled() {
        return Optional.ofNullable(this.rdbBackupEnabled);
    }
    /**
     * @return The Backup Frequency in Minutes. Only supported on Premium SKUs. Possible values are: `15`, `30`, `60`, `360`, `720` and `1440`.
     * 
     */
    public Optional<Integer> rdbBackupFrequency() {
        return Optional.ofNullable(this.rdbBackupFrequency);
    }
    /**
     * @return The maximum number of snapshots to create as a backup. Only supported for Premium SKUs.
     * 
     */
    public Optional<Integer> rdbBackupMaxSnapshotCount() {
        return Optional.ofNullable(this.rdbBackupMaxSnapshotCount);
    }
    /**
     * @return The Connection String to the Storage Account. Only supported for Premium SKUs. In the format: `DefaultEndpointsProtocol=https;BlobEndpoint=${azurerm_storage_account.example.primary_blob_endpoint};AccountName=${azurerm_storage_account.example.name};AccountKey=${azurerm_storage_account.example.primary_access_key}`.
     * 
     */
    public Optional<String> rdbStorageConnectionString() {
        return Optional.ofNullable(this.rdbStorageConnectionString);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CacheRedisConfiguration defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Boolean aofBackupEnabled;
        private @Nullable String aofStorageConnectionString0;
        private @Nullable String aofStorageConnectionString1;
        private @Nullable Boolean enableAuthentication;
        private @Nullable Integer maxclients;
        private @Nullable Integer maxfragmentationmemoryReserved;
        private @Nullable Integer maxmemoryDelta;
        private @Nullable String maxmemoryPolicy;
        private @Nullable Integer maxmemoryReserved;
        private @Nullable String notifyKeyspaceEvents;
        private @Nullable Boolean rdbBackupEnabled;
        private @Nullable Integer rdbBackupFrequency;
        private @Nullable Integer rdbBackupMaxSnapshotCount;
        private @Nullable String rdbStorageConnectionString;

        public Builder() {
    	      // Empty
        }

        public Builder(CacheRedisConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aofBackupEnabled = defaults.aofBackupEnabled;
    	      this.aofStorageConnectionString0 = defaults.aofStorageConnectionString0;
    	      this.aofStorageConnectionString1 = defaults.aofStorageConnectionString1;
    	      this.enableAuthentication = defaults.enableAuthentication;
    	      this.maxclients = defaults.maxclients;
    	      this.maxfragmentationmemoryReserved = defaults.maxfragmentationmemoryReserved;
    	      this.maxmemoryDelta = defaults.maxmemoryDelta;
    	      this.maxmemoryPolicy = defaults.maxmemoryPolicy;
    	      this.maxmemoryReserved = defaults.maxmemoryReserved;
    	      this.notifyKeyspaceEvents = defaults.notifyKeyspaceEvents;
    	      this.rdbBackupEnabled = defaults.rdbBackupEnabled;
    	      this.rdbBackupFrequency = defaults.rdbBackupFrequency;
    	      this.rdbBackupMaxSnapshotCount = defaults.rdbBackupMaxSnapshotCount;
    	      this.rdbStorageConnectionString = defaults.rdbStorageConnectionString;
        }

        public Builder aofBackupEnabled(@Nullable Boolean aofBackupEnabled) {
            this.aofBackupEnabled = aofBackupEnabled;
            return this;
        }
        public Builder aofStorageConnectionString0(@Nullable String aofStorageConnectionString0) {
            this.aofStorageConnectionString0 = aofStorageConnectionString0;
            return this;
        }
        public Builder aofStorageConnectionString1(@Nullable String aofStorageConnectionString1) {
            this.aofStorageConnectionString1 = aofStorageConnectionString1;
            return this;
        }
        public Builder enableAuthentication(@Nullable Boolean enableAuthentication) {
            this.enableAuthentication = enableAuthentication;
            return this;
        }
        public Builder maxclients(@Nullable Integer maxclients) {
            this.maxclients = maxclients;
            return this;
        }
        public Builder maxfragmentationmemoryReserved(@Nullable Integer maxfragmentationmemoryReserved) {
            this.maxfragmentationmemoryReserved = maxfragmentationmemoryReserved;
            return this;
        }
        public Builder maxmemoryDelta(@Nullable Integer maxmemoryDelta) {
            this.maxmemoryDelta = maxmemoryDelta;
            return this;
        }
        public Builder maxmemoryPolicy(@Nullable String maxmemoryPolicy) {
            this.maxmemoryPolicy = maxmemoryPolicy;
            return this;
        }
        public Builder maxmemoryReserved(@Nullable Integer maxmemoryReserved) {
            this.maxmemoryReserved = maxmemoryReserved;
            return this;
        }
        public Builder notifyKeyspaceEvents(@Nullable String notifyKeyspaceEvents) {
            this.notifyKeyspaceEvents = notifyKeyspaceEvents;
            return this;
        }
        public Builder rdbBackupEnabled(@Nullable Boolean rdbBackupEnabled) {
            this.rdbBackupEnabled = rdbBackupEnabled;
            return this;
        }
        public Builder rdbBackupFrequency(@Nullable Integer rdbBackupFrequency) {
            this.rdbBackupFrequency = rdbBackupFrequency;
            return this;
        }
        public Builder rdbBackupMaxSnapshotCount(@Nullable Integer rdbBackupMaxSnapshotCount) {
            this.rdbBackupMaxSnapshotCount = rdbBackupMaxSnapshotCount;
            return this;
        }
        public Builder rdbStorageConnectionString(@Nullable String rdbStorageConnectionString) {
            this.rdbStorageConnectionString = rdbStorageConnectionString;
            return this;
        }        public CacheRedisConfiguration build() {
            return new CacheRedisConfiguration(aofBackupEnabled, aofStorageConnectionString0, aofStorageConnectionString1, enableAuthentication, maxclients, maxfragmentationmemoryReserved, maxmemoryDelta, maxmemoryPolicy, maxmemoryReserved, notifyKeyspaceEvents, rdbBackupEnabled, rdbBackupFrequency, rdbBackupMaxSnapshotCount, rdbStorageConnectionString);
        }
    }
}
