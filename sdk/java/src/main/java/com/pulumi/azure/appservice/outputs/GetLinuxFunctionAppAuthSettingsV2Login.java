// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appservice.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetLinuxFunctionAppAuthSettingsV2Login {
    /**
     * @return External URLs that can be redirected to as part of logging in or logging out of the app.
     * 
     */
    private List<String> allowedExternalRedirectUrls;
    /**
     * @return The method by which cookies expire.
     * 
     */
    private String cookieExpirationConvention;
    /**
     * @return The time after the request is made when the session cookie should expire.
     * 
     */
    private String cookieExpirationTime;
    /**
     * @return The endpoint to which logout requests are made.
     * 
     */
    private String logoutEndpoint;
    /**
     * @return The time after the request is made when the nonce should expire.
     * 
     */
    private String nonceExpirationTime;
    /**
     * @return Are the fragments from the request preserved after the login request is made.
     * 
     */
    private Boolean preserveUrlFragmentsForLogins;
    /**
     * @return The number of hours after session token expiration that a session token can be used to call the token refresh API.
     * 
     */
    private Double tokenRefreshExtensionTime;
    /**
     * @return Is the Token Store configuration Enabled.
     * 
     */
    private Boolean tokenStoreEnabled;
    /**
     * @return The directory path in the App Filesystem in which the tokens are stored.
     * 
     */
    private String tokenStorePath;
    /**
     * @return The name of the app setting which contains the SAS URL of the blob storage containing the tokens.
     * 
     */
    private String tokenStoreSasSettingName;
    /**
     * @return Is the nonce validated while completing the login flow.
     * 
     */
    private Boolean validateNonce;

    private GetLinuxFunctionAppAuthSettingsV2Login() {}
    /**
     * @return External URLs that can be redirected to as part of logging in or logging out of the app.
     * 
     */
    public List<String> allowedExternalRedirectUrls() {
        return this.allowedExternalRedirectUrls;
    }
    /**
     * @return The method by which cookies expire.
     * 
     */
    public String cookieExpirationConvention() {
        return this.cookieExpirationConvention;
    }
    /**
     * @return The time after the request is made when the session cookie should expire.
     * 
     */
    public String cookieExpirationTime() {
        return this.cookieExpirationTime;
    }
    /**
     * @return The endpoint to which logout requests are made.
     * 
     */
    public String logoutEndpoint() {
        return this.logoutEndpoint;
    }
    /**
     * @return The time after the request is made when the nonce should expire.
     * 
     */
    public String nonceExpirationTime() {
        return this.nonceExpirationTime;
    }
    /**
     * @return Are the fragments from the request preserved after the login request is made.
     * 
     */
    public Boolean preserveUrlFragmentsForLogins() {
        return this.preserveUrlFragmentsForLogins;
    }
    /**
     * @return The number of hours after session token expiration that a session token can be used to call the token refresh API.
     * 
     */
    public Double tokenRefreshExtensionTime() {
        return this.tokenRefreshExtensionTime;
    }
    /**
     * @return Is the Token Store configuration Enabled.
     * 
     */
    public Boolean tokenStoreEnabled() {
        return this.tokenStoreEnabled;
    }
    /**
     * @return The directory path in the App Filesystem in which the tokens are stored.
     * 
     */
    public String tokenStorePath() {
        return this.tokenStorePath;
    }
    /**
     * @return The name of the app setting which contains the SAS URL of the blob storage containing the tokens.
     * 
     */
    public String tokenStoreSasSettingName() {
        return this.tokenStoreSasSettingName;
    }
    /**
     * @return Is the nonce validated while completing the login flow.
     * 
     */
    public Boolean validateNonce() {
        return this.validateNonce;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLinuxFunctionAppAuthSettingsV2Login defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> allowedExternalRedirectUrls;
        private String cookieExpirationConvention;
        private String cookieExpirationTime;
        private String logoutEndpoint;
        private String nonceExpirationTime;
        private Boolean preserveUrlFragmentsForLogins;
        private Double tokenRefreshExtensionTime;
        private Boolean tokenStoreEnabled;
        private String tokenStorePath;
        private String tokenStoreSasSettingName;
        private Boolean validateNonce;
        public Builder() {}
        public Builder(GetLinuxFunctionAppAuthSettingsV2Login defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedExternalRedirectUrls = defaults.allowedExternalRedirectUrls;
    	      this.cookieExpirationConvention = defaults.cookieExpirationConvention;
    	      this.cookieExpirationTime = defaults.cookieExpirationTime;
    	      this.logoutEndpoint = defaults.logoutEndpoint;
    	      this.nonceExpirationTime = defaults.nonceExpirationTime;
    	      this.preserveUrlFragmentsForLogins = defaults.preserveUrlFragmentsForLogins;
    	      this.tokenRefreshExtensionTime = defaults.tokenRefreshExtensionTime;
    	      this.tokenStoreEnabled = defaults.tokenStoreEnabled;
    	      this.tokenStorePath = defaults.tokenStorePath;
    	      this.tokenStoreSasSettingName = defaults.tokenStoreSasSettingName;
    	      this.validateNonce = defaults.validateNonce;
        }

        @CustomType.Setter
        public Builder allowedExternalRedirectUrls(List<String> allowedExternalRedirectUrls) {
            if (allowedExternalRedirectUrls == null) {
              throw new MissingRequiredPropertyException("GetLinuxFunctionAppAuthSettingsV2Login", "allowedExternalRedirectUrls");
            }
            this.allowedExternalRedirectUrls = allowedExternalRedirectUrls;
            return this;
        }
        public Builder allowedExternalRedirectUrls(String... allowedExternalRedirectUrls) {
            return allowedExternalRedirectUrls(List.of(allowedExternalRedirectUrls));
        }
        @CustomType.Setter
        public Builder cookieExpirationConvention(String cookieExpirationConvention) {
            if (cookieExpirationConvention == null) {
              throw new MissingRequiredPropertyException("GetLinuxFunctionAppAuthSettingsV2Login", "cookieExpirationConvention");
            }
            this.cookieExpirationConvention = cookieExpirationConvention;
            return this;
        }
        @CustomType.Setter
        public Builder cookieExpirationTime(String cookieExpirationTime) {
            if (cookieExpirationTime == null) {
              throw new MissingRequiredPropertyException("GetLinuxFunctionAppAuthSettingsV2Login", "cookieExpirationTime");
            }
            this.cookieExpirationTime = cookieExpirationTime;
            return this;
        }
        @CustomType.Setter
        public Builder logoutEndpoint(String logoutEndpoint) {
            if (logoutEndpoint == null) {
              throw new MissingRequiredPropertyException("GetLinuxFunctionAppAuthSettingsV2Login", "logoutEndpoint");
            }
            this.logoutEndpoint = logoutEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder nonceExpirationTime(String nonceExpirationTime) {
            if (nonceExpirationTime == null) {
              throw new MissingRequiredPropertyException("GetLinuxFunctionAppAuthSettingsV2Login", "nonceExpirationTime");
            }
            this.nonceExpirationTime = nonceExpirationTime;
            return this;
        }
        @CustomType.Setter
        public Builder preserveUrlFragmentsForLogins(Boolean preserveUrlFragmentsForLogins) {
            if (preserveUrlFragmentsForLogins == null) {
              throw new MissingRequiredPropertyException("GetLinuxFunctionAppAuthSettingsV2Login", "preserveUrlFragmentsForLogins");
            }
            this.preserveUrlFragmentsForLogins = preserveUrlFragmentsForLogins;
            return this;
        }
        @CustomType.Setter
        public Builder tokenRefreshExtensionTime(Double tokenRefreshExtensionTime) {
            if (tokenRefreshExtensionTime == null) {
              throw new MissingRequiredPropertyException("GetLinuxFunctionAppAuthSettingsV2Login", "tokenRefreshExtensionTime");
            }
            this.tokenRefreshExtensionTime = tokenRefreshExtensionTime;
            return this;
        }
        @CustomType.Setter
        public Builder tokenStoreEnabled(Boolean tokenStoreEnabled) {
            if (tokenStoreEnabled == null) {
              throw new MissingRequiredPropertyException("GetLinuxFunctionAppAuthSettingsV2Login", "tokenStoreEnabled");
            }
            this.tokenStoreEnabled = tokenStoreEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder tokenStorePath(String tokenStorePath) {
            if (tokenStorePath == null) {
              throw new MissingRequiredPropertyException("GetLinuxFunctionAppAuthSettingsV2Login", "tokenStorePath");
            }
            this.tokenStorePath = tokenStorePath;
            return this;
        }
        @CustomType.Setter
        public Builder tokenStoreSasSettingName(String tokenStoreSasSettingName) {
            if (tokenStoreSasSettingName == null) {
              throw new MissingRequiredPropertyException("GetLinuxFunctionAppAuthSettingsV2Login", "tokenStoreSasSettingName");
            }
            this.tokenStoreSasSettingName = tokenStoreSasSettingName;
            return this;
        }
        @CustomType.Setter
        public Builder validateNonce(Boolean validateNonce) {
            if (validateNonce == null) {
              throw new MissingRequiredPropertyException("GetLinuxFunctionAppAuthSettingsV2Login", "validateNonce");
            }
            this.validateNonce = validateNonce;
            return this;
        }
        public GetLinuxFunctionAppAuthSettingsV2Login build() {
            final var _resultValue = new GetLinuxFunctionAppAuthSettingsV2Login();
            _resultValue.allowedExternalRedirectUrls = allowedExternalRedirectUrls;
            _resultValue.cookieExpirationConvention = cookieExpirationConvention;
            _resultValue.cookieExpirationTime = cookieExpirationTime;
            _resultValue.logoutEndpoint = logoutEndpoint;
            _resultValue.nonceExpirationTime = nonceExpirationTime;
            _resultValue.preserveUrlFragmentsForLogins = preserveUrlFragmentsForLogins;
            _resultValue.tokenRefreshExtensionTime = tokenRefreshExtensionTime;
            _resultValue.tokenStoreEnabled = tokenStoreEnabled;
            _resultValue.tokenStorePath = tokenStorePath;
            _resultValue.tokenStoreSasSettingName = tokenStoreSasSettingName;
            _resultValue.validateNonce = validateNonce;
            return _resultValue;
        }
    }
}
