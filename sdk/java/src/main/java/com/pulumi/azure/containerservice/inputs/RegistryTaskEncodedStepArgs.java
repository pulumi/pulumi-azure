// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerservice.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegistryTaskEncodedStepArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegistryTaskEncodedStepArgs Empty = new RegistryTaskEncodedStepArgs();

    /**
     * The token (Git PAT or SAS token of storage account blob) associated with the context for this step.
     * 
     */
    @Import(name="contextAccessToken")
    private @Nullable Output<String> contextAccessToken;

    /**
     * @return The token (Git PAT or SAS token of storage account blob) associated with the context for this step.
     * 
     */
    public Optional<Output<String>> contextAccessToken() {
        return Optional.ofNullable(this.contextAccessToken);
    }

    /**
     * The URL (absolute or relative) of the source context for this step.
     * 
     */
    @Import(name="contextPath")
    private @Nullable Output<String> contextPath;

    /**
     * @return The URL (absolute or relative) of the source context for this step.
     * 
     */
    public Optional<Output<String>> contextPath() {
        return Optional.ofNullable(this.contextPath);
    }

    /**
     * Specifies a map of secret values that can be passed when running a task.
     * 
     */
    @Import(name="secretValues")
    private @Nullable Output<Map<String,String>> secretValues;

    /**
     * @return Specifies a map of secret values that can be passed when running a task.
     * 
     */
    public Optional<Output<Map<String,String>>> secretValues() {
        return Optional.ofNullable(this.secretValues);
    }

    /**
     * The (optionally base64 encoded) content of the build template.
     * 
     */
    @Import(name="taskContent", required=true)
    private Output<String> taskContent;

    /**
     * @return The (optionally base64 encoded) content of the build template.
     * 
     */
    public Output<String> taskContent() {
        return this.taskContent;
    }

    /**
     * The (optionally base64 encoded) content of the build parameters.
     * 
     */
    @Import(name="valueContent")
    private @Nullable Output<String> valueContent;

    /**
     * @return The (optionally base64 encoded) content of the build parameters.
     * 
     */
    public Optional<Output<String>> valueContent() {
        return Optional.ofNullable(this.valueContent);
    }

    /**
     * Specifies a map of values that can be passed when running a task.
     * 
     */
    @Import(name="values")
    private @Nullable Output<Map<String,String>> values;

    /**
     * @return Specifies a map of values that can be passed when running a task.
     * 
     */
    public Optional<Output<Map<String,String>>> values() {
        return Optional.ofNullable(this.values);
    }

    private RegistryTaskEncodedStepArgs() {}

    private RegistryTaskEncodedStepArgs(RegistryTaskEncodedStepArgs $) {
        this.contextAccessToken = $.contextAccessToken;
        this.contextPath = $.contextPath;
        this.secretValues = $.secretValues;
        this.taskContent = $.taskContent;
        this.valueContent = $.valueContent;
        this.values = $.values;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegistryTaskEncodedStepArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegistryTaskEncodedStepArgs $;

        public Builder() {
            $ = new RegistryTaskEncodedStepArgs();
        }

        public Builder(RegistryTaskEncodedStepArgs defaults) {
            $ = new RegistryTaskEncodedStepArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param contextAccessToken The token (Git PAT or SAS token of storage account blob) associated with the context for this step.
         * 
         * @return builder
         * 
         */
        public Builder contextAccessToken(@Nullable Output<String> contextAccessToken) {
            $.contextAccessToken = contextAccessToken;
            return this;
        }

        /**
         * @param contextAccessToken The token (Git PAT or SAS token of storage account blob) associated with the context for this step.
         * 
         * @return builder
         * 
         */
        public Builder contextAccessToken(String contextAccessToken) {
            return contextAccessToken(Output.of(contextAccessToken));
        }

        /**
         * @param contextPath The URL (absolute or relative) of the source context for this step.
         * 
         * @return builder
         * 
         */
        public Builder contextPath(@Nullable Output<String> contextPath) {
            $.contextPath = contextPath;
            return this;
        }

        /**
         * @param contextPath The URL (absolute or relative) of the source context for this step.
         * 
         * @return builder
         * 
         */
        public Builder contextPath(String contextPath) {
            return contextPath(Output.of(contextPath));
        }

        /**
         * @param secretValues Specifies a map of secret values that can be passed when running a task.
         * 
         * @return builder
         * 
         */
        public Builder secretValues(@Nullable Output<Map<String,String>> secretValues) {
            $.secretValues = secretValues;
            return this;
        }

        /**
         * @param secretValues Specifies a map of secret values that can be passed when running a task.
         * 
         * @return builder
         * 
         */
        public Builder secretValues(Map<String,String> secretValues) {
            return secretValues(Output.of(secretValues));
        }

        /**
         * @param taskContent The (optionally base64 encoded) content of the build template.
         * 
         * @return builder
         * 
         */
        public Builder taskContent(Output<String> taskContent) {
            $.taskContent = taskContent;
            return this;
        }

        /**
         * @param taskContent The (optionally base64 encoded) content of the build template.
         * 
         * @return builder
         * 
         */
        public Builder taskContent(String taskContent) {
            return taskContent(Output.of(taskContent));
        }

        /**
         * @param valueContent The (optionally base64 encoded) content of the build parameters.
         * 
         * @return builder
         * 
         */
        public Builder valueContent(@Nullable Output<String> valueContent) {
            $.valueContent = valueContent;
            return this;
        }

        /**
         * @param valueContent The (optionally base64 encoded) content of the build parameters.
         * 
         * @return builder
         * 
         */
        public Builder valueContent(String valueContent) {
            return valueContent(Output.of(valueContent));
        }

        /**
         * @param values Specifies a map of values that can be passed when running a task.
         * 
         * @return builder
         * 
         */
        public Builder values(@Nullable Output<Map<String,String>> values) {
            $.values = values;
            return this;
        }

        /**
         * @param values Specifies a map of values that can be passed when running a task.
         * 
         * @return builder
         * 
         */
        public Builder values(Map<String,String> values) {
            return values(Output.of(values));
        }

        public RegistryTaskEncodedStepArgs build() {
            if ($.taskContent == null) {
                throw new MissingRequiredPropertyException("RegistryTaskEncodedStepArgs", "taskContent");
            }
            return $;
        }
    }

}
