// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.network.VirtualNetworkPeeringArgs;
import com.pulumi.azure.network.inputs.VirtualNetworkPeeringState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a virtual network peering which allows resources to access other
 * resources in the linked virtual network.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.network.VirtualNetwork;
 * import com.pulumi.azure.network.VirtualNetworkArgs;
 * import com.pulumi.azure.network.VirtualNetworkPeering;
 * import com.pulumi.azure.network.VirtualNetworkPeeringArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new ResourceGroup(&#34;example&#34;, ResourceGroupArgs.builder()        
 *             .location(&#34;West Europe&#34;)
 *             .build());
 * 
 *         var example_1VirtualNetwork = new VirtualNetwork(&#34;example-1VirtualNetwork&#34;, VirtualNetworkArgs.builder()        
 *             .resourceGroupName(example.name())
 *             .addressSpaces(&#34;10.0.1.0/24&#34;)
 *             .location(example.location())
 *             .build());
 * 
 *         var example_2VirtualNetwork = new VirtualNetwork(&#34;example-2VirtualNetwork&#34;, VirtualNetworkArgs.builder()        
 *             .resourceGroupName(example.name())
 *             .addressSpaces(&#34;10.0.2.0/24&#34;)
 *             .location(example.location())
 *             .build());
 * 
 *         var example_1VirtualNetworkPeering = new VirtualNetworkPeering(&#34;example-1VirtualNetworkPeering&#34;, VirtualNetworkPeeringArgs.builder()        
 *             .resourceGroupName(example.name())
 *             .virtualNetworkName(example_1VirtualNetwork.name())
 *             .remoteVirtualNetworkId(example_2VirtualNetwork.id())
 *             .build());
 * 
 *         var example_2VirtualNetworkPeering = new VirtualNetworkPeering(&#34;example-2VirtualNetworkPeering&#34;, VirtualNetworkPeeringArgs.builder()        
 *             .resourceGroupName(example.name())
 *             .virtualNetworkName(example_2VirtualNetwork.name())
 *             .remoteVirtualNetworkId(example_1VirtualNetwork.id())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ## Note
 * 
 * Virtual Network peerings cannot be created, updated or deleted concurrently.
 * 
 * ## Import
 * 
 * Virtual Network Peerings can be imported using the `resource id`, e.g.
 * 
 * ```sh
 *  $ pulumi import azure:network/virtualNetworkPeering:VirtualNetworkPeering examplePeering /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/virtualNetworks/myvnet1/virtualNetworkPeerings/myvnet1peering
 * ```
 * 
 */
@ResourceType(type="azure:network/virtualNetworkPeering:VirtualNetworkPeering")
public class VirtualNetworkPeering extends com.pulumi.resources.CustomResource {
    /**
     * Controls if forwarded traffic from VMs in the remote virtual network is allowed. Defaults to `false`.
     * 
     */
    @Export(name="allowForwardedTraffic", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> allowForwardedTraffic;

    /**
     * @return Controls if forwarded traffic from VMs in the remote virtual network is allowed. Defaults to `false`.
     * 
     */
    public Output<Optional<Boolean>> allowForwardedTraffic() {
        return Codegen.optional(this.allowForwardedTraffic);
    }
    /**
     * Controls gatewayLinks can be used in the remote virtual network’s link to the local virtual network. Defaults to `false`.
     * 
     */
    @Export(name="allowGatewayTransit", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> allowGatewayTransit;

    /**
     * @return Controls gatewayLinks can be used in the remote virtual network’s link to the local virtual network. Defaults to `false`.
     * 
     */
    public Output<Optional<Boolean>> allowGatewayTransit() {
        return Codegen.optional(this.allowGatewayTransit);
    }
    /**
     * Controls if the VMs in the remote virtual network can access VMs in the local virtual network. Defaults to `true`.
     * 
     */
    @Export(name="allowVirtualNetworkAccess", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> allowVirtualNetworkAccess;

    /**
     * @return Controls if the VMs in the remote virtual network can access VMs in the local virtual network. Defaults to `true`.
     * 
     */
    public Output<Optional<Boolean>> allowVirtualNetworkAccess() {
        return Codegen.optional(this.allowVirtualNetworkAccess);
    }
    /**
     * The name of the virtual network peering. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the virtual network peering. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The full Azure resource ID of the remote virtual network. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="remoteVirtualNetworkId", refs={String.class}, tree="[0]")
    private Output<String> remoteVirtualNetworkId;

    /**
     * @return The full Azure resource ID of the remote virtual network. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> remoteVirtualNetworkId() {
        return this.remoteVirtualNetworkId;
    }
    /**
     * The name of the resource group in which to create the virtual network peering. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="resourceGroupName", refs={String.class}, tree="[0]")
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group in which to create the virtual network peering. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * A mapping of key values pairs that can be used to sync network routes from the remote virtual network to the local virtual network. See the trigger example for an example on how to set it up.
     * 
     */
    @Export(name="triggers", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> triggers;

    /**
     * @return A mapping of key values pairs that can be used to sync network routes from the remote virtual network to the local virtual network. See the trigger example for an example on how to set it up.
     * 
     */
    public Output<Optional<Map<String,String>>> triggers() {
        return Codegen.optional(this.triggers);
    }
    /**
     * Controls if remote gateways can be used on the local virtual network. If the flag is set to `true`, and `allow_gateway_transit` on the remote peering is also `true`, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to `true`. This flag cannot be set if virtual network already has a gateway. Defaults to `false`.
     * 
     * &gt; **NOTE:** `use_remote_gateways` must be set to `false` if using Global Virtual Network Peerings.
     * 
     */
    @Export(name="useRemoteGateways", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> useRemoteGateways;

    /**
     * @return Controls if remote gateways can be used on the local virtual network. If the flag is set to `true`, and `allow_gateway_transit` on the remote peering is also `true`, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to `true`. This flag cannot be set if virtual network already has a gateway. Defaults to `false`.
     * 
     * &gt; **NOTE:** `use_remote_gateways` must be set to `false` if using Global Virtual Network Peerings.
     * 
     */
    public Output<Optional<Boolean>> useRemoteGateways() {
        return Codegen.optional(this.useRemoteGateways);
    }
    /**
     * The name of the virtual network. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="virtualNetworkName", refs={String.class}, tree="[0]")
    private Output<String> virtualNetworkName;

    /**
     * @return The name of the virtual network. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> virtualNetworkName() {
        return this.virtualNetworkName;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public VirtualNetworkPeering(String name) {
        this(name, VirtualNetworkPeeringArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public VirtualNetworkPeering(String name, VirtualNetworkPeeringArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public VirtualNetworkPeering(String name, VirtualNetworkPeeringArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:network/virtualNetworkPeering:VirtualNetworkPeering", name, args == null ? VirtualNetworkPeeringArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private VirtualNetworkPeering(String name, Output<String> id, @Nullable VirtualNetworkPeeringState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:network/virtualNetworkPeering:VirtualNetworkPeering", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static VirtualNetworkPeering get(String name, Output<String> id, @Nullable VirtualNetworkPeeringState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new VirtualNetworkPeering(name, id, state, options);
    }
}
