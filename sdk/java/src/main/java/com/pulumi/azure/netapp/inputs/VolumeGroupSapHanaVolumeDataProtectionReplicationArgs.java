// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.netapp.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VolumeGroupSapHanaVolumeDataProtectionReplicationArgs extends com.pulumi.resources.ResourceArgs {

    public static final VolumeGroupSapHanaVolumeDataProtectionReplicationArgs Empty = new VolumeGroupSapHanaVolumeDataProtectionReplicationArgs();

    @Import(name="endpointType")
    private @Nullable Output<String> endpointType;

    public Optional<Output<String>> endpointType() {
        return Optional.ofNullable(this.endpointType);
    }

    @Import(name="remoteVolumeLocation", required=true)
    private Output<String> remoteVolumeLocation;

    public Output<String> remoteVolumeLocation() {
        return this.remoteVolumeLocation;
    }

    @Import(name="remoteVolumeResourceId", required=true)
    private Output<String> remoteVolumeResourceId;

    public Output<String> remoteVolumeResourceId() {
        return this.remoteVolumeResourceId;
    }

    @Import(name="replicationFrequency", required=true)
    private Output<String> replicationFrequency;

    public Output<String> replicationFrequency() {
        return this.replicationFrequency;
    }

    private VolumeGroupSapHanaVolumeDataProtectionReplicationArgs() {}

    private VolumeGroupSapHanaVolumeDataProtectionReplicationArgs(VolumeGroupSapHanaVolumeDataProtectionReplicationArgs $) {
        this.endpointType = $.endpointType;
        this.remoteVolumeLocation = $.remoteVolumeLocation;
        this.remoteVolumeResourceId = $.remoteVolumeResourceId;
        this.replicationFrequency = $.replicationFrequency;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VolumeGroupSapHanaVolumeDataProtectionReplicationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VolumeGroupSapHanaVolumeDataProtectionReplicationArgs $;

        public Builder() {
            $ = new VolumeGroupSapHanaVolumeDataProtectionReplicationArgs();
        }

        public Builder(VolumeGroupSapHanaVolumeDataProtectionReplicationArgs defaults) {
            $ = new VolumeGroupSapHanaVolumeDataProtectionReplicationArgs(Objects.requireNonNull(defaults));
        }

        public Builder endpointType(@Nullable Output<String> endpointType) {
            $.endpointType = endpointType;
            return this;
        }

        public Builder endpointType(String endpointType) {
            return endpointType(Output.of(endpointType));
        }

        public Builder remoteVolumeLocation(Output<String> remoteVolumeLocation) {
            $.remoteVolumeLocation = remoteVolumeLocation;
            return this;
        }

        public Builder remoteVolumeLocation(String remoteVolumeLocation) {
            return remoteVolumeLocation(Output.of(remoteVolumeLocation));
        }

        public Builder remoteVolumeResourceId(Output<String> remoteVolumeResourceId) {
            $.remoteVolumeResourceId = remoteVolumeResourceId;
            return this;
        }

        public Builder remoteVolumeResourceId(String remoteVolumeResourceId) {
            return remoteVolumeResourceId(Output.of(remoteVolumeResourceId));
        }

        public Builder replicationFrequency(Output<String> replicationFrequency) {
            $.replicationFrequency = replicationFrequency;
            return this;
        }

        public Builder replicationFrequency(String replicationFrequency) {
            return replicationFrequency(Output.of(replicationFrequency));
        }

        public VolumeGroupSapHanaVolumeDataProtectionReplicationArgs build() {
            if ($.remoteVolumeLocation == null) {
                throw new MissingRequiredPropertyException("VolumeGroupSapHanaVolumeDataProtectionReplicationArgs", "remoteVolumeLocation");
            }
            if ($.remoteVolumeResourceId == null) {
                throw new MissingRequiredPropertyException("VolumeGroupSapHanaVolumeDataProtectionReplicationArgs", "remoteVolumeResourceId");
            }
            if ($.replicationFrequency == null) {
                throw new MissingRequiredPropertyException("VolumeGroupSapHanaVolumeDataProtectionReplicationArgs", "replicationFrequency");
            }
            return $;
        }
    }

}
