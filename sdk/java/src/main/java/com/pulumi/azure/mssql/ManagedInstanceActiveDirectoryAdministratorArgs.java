// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.mssql;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagedInstanceActiveDirectoryAdministratorArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagedInstanceActiveDirectoryAdministratorArgs Empty = new ManagedInstanceActiveDirectoryAdministratorArgs();

    /**
     * When `true`, only permit logins from AAD users and administrators. When `false`, also allow local database users.
     * 
     */
    @Import(name="azureadAuthenticationOnly")
    private @Nullable Output<Boolean> azureadAuthenticationOnly;

    /**
     * @return When `true`, only permit logins from AAD users and administrators. When `false`, also allow local database users.
     * 
     */
    public Optional<Output<Boolean>> azureadAuthenticationOnly() {
        return Optional.ofNullable(this.azureadAuthenticationOnly);
    }

    /**
     * The login name of the principal to set as the Managed Instance Administrator.
     * 
     */
    @Import(name="loginUsername", required=true)
    private Output<String> loginUsername;

    /**
     * @return The login name of the principal to set as the Managed Instance Administrator.
     * 
     */
    public Output<String> loginUsername() {
        return this.loginUsername;
    }

    /**
     * The ID of the Azure SQL Managed Instance for which to set the administrator. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="managedInstanceId", required=true)
    private Output<String> managedInstanceId;

    /**
     * @return The ID of the Azure SQL Managed Instance for which to set the administrator. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> managedInstanceId() {
        return this.managedInstanceId;
    }

    /**
     * The Object ID of the principal to set as the Managed Instance Administrator.
     * 
     */
    @Import(name="objectId", required=true)
    private Output<String> objectId;

    /**
     * @return The Object ID of the principal to set as the Managed Instance Administrator.
     * 
     */
    public Output<String> objectId() {
        return this.objectId;
    }

    /**
     * The Azure Active Directory Tenant ID.
     * 
     */
    @Import(name="tenantId", required=true)
    private Output<String> tenantId;

    /**
     * @return The Azure Active Directory Tenant ID.
     * 
     */
    public Output<String> tenantId() {
        return this.tenantId;
    }

    private ManagedInstanceActiveDirectoryAdministratorArgs() {}

    private ManagedInstanceActiveDirectoryAdministratorArgs(ManagedInstanceActiveDirectoryAdministratorArgs $) {
        this.azureadAuthenticationOnly = $.azureadAuthenticationOnly;
        this.loginUsername = $.loginUsername;
        this.managedInstanceId = $.managedInstanceId;
        this.objectId = $.objectId;
        this.tenantId = $.tenantId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedInstanceActiveDirectoryAdministratorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedInstanceActiveDirectoryAdministratorArgs $;

        public Builder() {
            $ = new ManagedInstanceActiveDirectoryAdministratorArgs();
        }

        public Builder(ManagedInstanceActiveDirectoryAdministratorArgs defaults) {
            $ = new ManagedInstanceActiveDirectoryAdministratorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param azureadAuthenticationOnly When `true`, only permit logins from AAD users and administrators. When `false`, also allow local database users.
         * 
         * @return builder
         * 
         */
        public Builder azureadAuthenticationOnly(@Nullable Output<Boolean> azureadAuthenticationOnly) {
            $.azureadAuthenticationOnly = azureadAuthenticationOnly;
            return this;
        }

        /**
         * @param azureadAuthenticationOnly When `true`, only permit logins from AAD users and administrators. When `false`, also allow local database users.
         * 
         * @return builder
         * 
         */
        public Builder azureadAuthenticationOnly(Boolean azureadAuthenticationOnly) {
            return azureadAuthenticationOnly(Output.of(azureadAuthenticationOnly));
        }

        /**
         * @param loginUsername The login name of the principal to set as the Managed Instance Administrator.
         * 
         * @return builder
         * 
         */
        public Builder loginUsername(Output<String> loginUsername) {
            $.loginUsername = loginUsername;
            return this;
        }

        /**
         * @param loginUsername The login name of the principal to set as the Managed Instance Administrator.
         * 
         * @return builder
         * 
         */
        public Builder loginUsername(String loginUsername) {
            return loginUsername(Output.of(loginUsername));
        }

        /**
         * @param managedInstanceId The ID of the Azure SQL Managed Instance for which to set the administrator. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder managedInstanceId(Output<String> managedInstanceId) {
            $.managedInstanceId = managedInstanceId;
            return this;
        }

        /**
         * @param managedInstanceId The ID of the Azure SQL Managed Instance for which to set the administrator. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder managedInstanceId(String managedInstanceId) {
            return managedInstanceId(Output.of(managedInstanceId));
        }

        /**
         * @param objectId The Object ID of the principal to set as the Managed Instance Administrator.
         * 
         * @return builder
         * 
         */
        public Builder objectId(Output<String> objectId) {
            $.objectId = objectId;
            return this;
        }

        /**
         * @param objectId The Object ID of the principal to set as the Managed Instance Administrator.
         * 
         * @return builder
         * 
         */
        public Builder objectId(String objectId) {
            return objectId(Output.of(objectId));
        }

        /**
         * @param tenantId The Azure Active Directory Tenant ID.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(Output<String> tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        /**
         * @param tenantId The Azure Active Directory Tenant ID.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(String tenantId) {
            return tenantId(Output.of(tenantId));
        }

        public ManagedInstanceActiveDirectoryAdministratorArgs build() {
            if ($.loginUsername == null) {
                throw new MissingRequiredPropertyException("ManagedInstanceActiveDirectoryAdministratorArgs", "loginUsername");
            }
            if ($.managedInstanceId == null) {
                throw new MissingRequiredPropertyException("ManagedInstanceActiveDirectoryAdministratorArgs", "managedInstanceId");
            }
            if ($.objectId == null) {
                throw new MissingRequiredPropertyException("ManagedInstanceActiveDirectoryAdministratorArgs", "objectId");
            }
            if ($.tenantId == null) {
                throw new MissingRequiredPropertyException("ManagedInstanceActiveDirectoryAdministratorArgs", "tenantId");
            }
            return $;
        }
    }

}
