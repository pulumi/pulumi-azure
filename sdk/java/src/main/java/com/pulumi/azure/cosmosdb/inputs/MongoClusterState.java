// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.cosmosdb.inputs;

import com.pulumi.azure.cosmosdb.inputs.MongoClusterConnectionStringArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MongoClusterState extends com.pulumi.resources.ResourceArgs {

    public static final MongoClusterState Empty = new MongoClusterState();

    /**
     * The Password associated with the `administrator_username` for the MongoDB Cluster.
     * 
     */
    @Import(name="administratorPassword")
    private @Nullable Output<String> administratorPassword;

    /**
     * @return The Password associated with the `administrator_username` for the MongoDB Cluster.
     * 
     */
    public Optional<Output<String>> administratorPassword() {
        return Optional.ofNullable(this.administratorPassword);
    }

    /**
     * The administrator username of the MongoDB Cluster. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="administratorUsername")
    private @Nullable Output<String> administratorUsername;

    /**
     * @return The administrator username of the MongoDB Cluster. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> administratorUsername() {
        return Optional.ofNullable(this.administratorUsername);
    }

    /**
     * The compute tier to assign to the MongoDB Cluster. Possible values are `Free`, `M10`, `M20`, `M25`, `M30`, `M40`, `M50`, `M60`, `M80`, and `M200`.
     * 
     */
    @Import(name="computeTier")
    private @Nullable Output<String> computeTier;

    /**
     * @return The compute tier to assign to the MongoDB Cluster. Possible values are `Free`, `M10`, `M20`, `M25`, `M30`, `M40`, `M50`, `M60`, `M80`, and `M200`.
     * 
     */
    public Optional<Output<String>> computeTier() {
        return Optional.ofNullable(this.computeTier);
    }

    /**
     * The list of `connection_strings` blocks as defined below.
     * 
     */
    @Import(name="connectionStrings")
    private @Nullable Output<List<MongoClusterConnectionStringArgs>> connectionStrings;

    /**
     * @return The list of `connection_strings` blocks as defined below.
     * 
     */
    public Optional<Output<List<MongoClusterConnectionStringArgs>>> connectionStrings() {
        return Optional.ofNullable(this.connectionStrings);
    }

    /**
     * The creation mode for the MongoDB Cluster. Possibles values are `Default` and `GeoReplica`. Defaults to `Default`. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="createMode")
    private @Nullable Output<String> createMode;

    /**
     * @return The creation mode for the MongoDB Cluster. Possibles values are `Default` and `GeoReplica`. Defaults to `Default`. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> createMode() {
        return Optional.ofNullable(this.createMode);
    }

    /**
     * The high availability mode for the MongoDB Cluster. Possibles values are `Disabled` and `ZoneRedundantPreferred`.
     * 
     */
    @Import(name="highAvailabilityMode")
    private @Nullable Output<String> highAvailabilityMode;

    /**
     * @return The high availability mode for the MongoDB Cluster. Possibles values are `Disabled` and `ZoneRedundantPreferred`.
     * 
     */
    public Optional<Output<String>> highAvailabilityMode() {
        return Optional.ofNullable(this.highAvailabilityMode);
    }

    /**
     * The supported Azure location where the MongoDB Cluster exists. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The supported Azure location where the MongoDB Cluster exists. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name which should be used for the MongoDB Cluster. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name which should be used for the MongoDB Cluster. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The preview features that can be enabled on the MongoDB Cluster. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="previewFeatures")
    private @Nullable Output<List<String>> previewFeatures;

    /**
     * @return The preview features that can be enabled on the MongoDB Cluster. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<List<String>>> previewFeatures() {
        return Optional.ofNullable(this.previewFeatures);
    }

    /**
     * The Public Network Access setting for the MongoDB Cluster. Possibles values are `Disabled` and `Enabled`. Defaults to `Enabled`.
     * 
     */
    @Import(name="publicNetworkAccess")
    private @Nullable Output<String> publicNetworkAccess;

    /**
     * @return The Public Network Access setting for the MongoDB Cluster. Possibles values are `Disabled` and `Enabled`. Defaults to `Enabled`.
     * 
     */
    public Optional<Output<String>> publicNetworkAccess() {
        return Optional.ofNullable(this.publicNetworkAccess);
    }

    /**
     * The name of the resource group in which to create the MongoDB Cluster. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="resourceGroupName")
    private @Nullable Output<String> resourceGroupName;

    /**
     * @return The name of the resource group in which to create the MongoDB Cluster. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> resourceGroupName() {
        return Optional.ofNullable(this.resourceGroupName);
    }

    /**
     * The Number of shards to provision on the MongoDB Cluster. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="shardCount")
    private @Nullable Output<Integer> shardCount;

    /**
     * @return The Number of shards to provision on the MongoDB Cluster. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<Integer>> shardCount() {
        return Optional.ofNullable(this.shardCount);
    }

    /**
     * The location of the source MongoDB Cluster. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="sourceLocation")
    private @Nullable Output<String> sourceLocation;

    /**
     * @return The location of the source MongoDB Cluster. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> sourceLocation() {
        return Optional.ofNullable(this.sourceLocation);
    }

    /**
     * The ID of the replication source MongoDB Cluster. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="sourceServerId")
    private @Nullable Output<String> sourceServerId;

    /**
     * @return The ID of the replication source MongoDB Cluster. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> sourceServerId() {
        return Optional.ofNullable(this.sourceServerId);
    }

    /**
     * The size of the data disk space for the MongoDB Cluster.
     * 
     */
    @Import(name="storageSizeInGb")
    private @Nullable Output<Integer> storageSizeInGb;

    /**
     * @return The size of the data disk space for the MongoDB Cluster.
     * 
     */
    public Optional<Output<Integer>> storageSizeInGb() {
        return Optional.ofNullable(this.storageSizeInGb);
    }

    /**
     * A mapping of tags to assign to the MongoDB Cluster.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the MongoDB Cluster.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The version for the MongoDB Cluster. Possibles values are `5.0`, `6.0`, `7.0` and `8.0`.
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return The version for the MongoDB Cluster. Possibles values are `5.0`, `6.0`, `7.0` and `8.0`.
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private MongoClusterState() {}

    private MongoClusterState(MongoClusterState $) {
        this.administratorPassword = $.administratorPassword;
        this.administratorUsername = $.administratorUsername;
        this.computeTier = $.computeTier;
        this.connectionStrings = $.connectionStrings;
        this.createMode = $.createMode;
        this.highAvailabilityMode = $.highAvailabilityMode;
        this.location = $.location;
        this.name = $.name;
        this.previewFeatures = $.previewFeatures;
        this.publicNetworkAccess = $.publicNetworkAccess;
        this.resourceGroupName = $.resourceGroupName;
        this.shardCount = $.shardCount;
        this.sourceLocation = $.sourceLocation;
        this.sourceServerId = $.sourceServerId;
        this.storageSizeInGb = $.storageSizeInGb;
        this.tags = $.tags;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MongoClusterState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MongoClusterState $;

        public Builder() {
            $ = new MongoClusterState();
        }

        public Builder(MongoClusterState defaults) {
            $ = new MongoClusterState(Objects.requireNonNull(defaults));
        }

        /**
         * @param administratorPassword The Password associated with the `administrator_username` for the MongoDB Cluster.
         * 
         * @return builder
         * 
         */
        public Builder administratorPassword(@Nullable Output<String> administratorPassword) {
            $.administratorPassword = administratorPassword;
            return this;
        }

        /**
         * @param administratorPassword The Password associated with the `administrator_username` for the MongoDB Cluster.
         * 
         * @return builder
         * 
         */
        public Builder administratorPassword(String administratorPassword) {
            return administratorPassword(Output.of(administratorPassword));
        }

        /**
         * @param administratorUsername The administrator username of the MongoDB Cluster. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder administratorUsername(@Nullable Output<String> administratorUsername) {
            $.administratorUsername = administratorUsername;
            return this;
        }

        /**
         * @param administratorUsername The administrator username of the MongoDB Cluster. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder administratorUsername(String administratorUsername) {
            return administratorUsername(Output.of(administratorUsername));
        }

        /**
         * @param computeTier The compute tier to assign to the MongoDB Cluster. Possible values are `Free`, `M10`, `M20`, `M25`, `M30`, `M40`, `M50`, `M60`, `M80`, and `M200`.
         * 
         * @return builder
         * 
         */
        public Builder computeTier(@Nullable Output<String> computeTier) {
            $.computeTier = computeTier;
            return this;
        }

        /**
         * @param computeTier The compute tier to assign to the MongoDB Cluster. Possible values are `Free`, `M10`, `M20`, `M25`, `M30`, `M40`, `M50`, `M60`, `M80`, and `M200`.
         * 
         * @return builder
         * 
         */
        public Builder computeTier(String computeTier) {
            return computeTier(Output.of(computeTier));
        }

        /**
         * @param connectionStrings The list of `connection_strings` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder connectionStrings(@Nullable Output<List<MongoClusterConnectionStringArgs>> connectionStrings) {
            $.connectionStrings = connectionStrings;
            return this;
        }

        /**
         * @param connectionStrings The list of `connection_strings` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder connectionStrings(List<MongoClusterConnectionStringArgs> connectionStrings) {
            return connectionStrings(Output.of(connectionStrings));
        }

        /**
         * @param connectionStrings The list of `connection_strings` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder connectionStrings(MongoClusterConnectionStringArgs... connectionStrings) {
            return connectionStrings(List.of(connectionStrings));
        }

        /**
         * @param createMode The creation mode for the MongoDB Cluster. Possibles values are `Default` and `GeoReplica`. Defaults to `Default`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder createMode(@Nullable Output<String> createMode) {
            $.createMode = createMode;
            return this;
        }

        /**
         * @param createMode The creation mode for the MongoDB Cluster. Possibles values are `Default` and `GeoReplica`. Defaults to `Default`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder createMode(String createMode) {
            return createMode(Output.of(createMode));
        }

        /**
         * @param highAvailabilityMode The high availability mode for the MongoDB Cluster. Possibles values are `Disabled` and `ZoneRedundantPreferred`.
         * 
         * @return builder
         * 
         */
        public Builder highAvailabilityMode(@Nullable Output<String> highAvailabilityMode) {
            $.highAvailabilityMode = highAvailabilityMode;
            return this;
        }

        /**
         * @param highAvailabilityMode The high availability mode for the MongoDB Cluster. Possibles values are `Disabled` and `ZoneRedundantPreferred`.
         * 
         * @return builder
         * 
         */
        public Builder highAvailabilityMode(String highAvailabilityMode) {
            return highAvailabilityMode(Output.of(highAvailabilityMode));
        }

        /**
         * @param location The supported Azure location where the MongoDB Cluster exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The supported Azure location where the MongoDB Cluster exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The name which should be used for the MongoDB Cluster. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for the MongoDB Cluster. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param previewFeatures The preview features that can be enabled on the MongoDB Cluster. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder previewFeatures(@Nullable Output<List<String>> previewFeatures) {
            $.previewFeatures = previewFeatures;
            return this;
        }

        /**
         * @param previewFeatures The preview features that can be enabled on the MongoDB Cluster. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder previewFeatures(List<String> previewFeatures) {
            return previewFeatures(Output.of(previewFeatures));
        }

        /**
         * @param previewFeatures The preview features that can be enabled on the MongoDB Cluster. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder previewFeatures(String... previewFeatures) {
            return previewFeatures(List.of(previewFeatures));
        }

        /**
         * @param publicNetworkAccess The Public Network Access setting for the MongoDB Cluster. Possibles values are `Disabled` and `Enabled`. Defaults to `Enabled`.
         * 
         * @return builder
         * 
         */
        public Builder publicNetworkAccess(@Nullable Output<String> publicNetworkAccess) {
            $.publicNetworkAccess = publicNetworkAccess;
            return this;
        }

        /**
         * @param publicNetworkAccess The Public Network Access setting for the MongoDB Cluster. Possibles values are `Disabled` and `Enabled`. Defaults to `Enabled`.
         * 
         * @return builder
         * 
         */
        public Builder publicNetworkAccess(String publicNetworkAccess) {
            return publicNetworkAccess(Output.of(publicNetworkAccess));
        }

        /**
         * @param resourceGroupName The name of the resource group in which to create the MongoDB Cluster. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(@Nullable Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group in which to create the MongoDB Cluster. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param shardCount The Number of shards to provision on the MongoDB Cluster. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder shardCount(@Nullable Output<Integer> shardCount) {
            $.shardCount = shardCount;
            return this;
        }

        /**
         * @param shardCount The Number of shards to provision on the MongoDB Cluster. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder shardCount(Integer shardCount) {
            return shardCount(Output.of(shardCount));
        }

        /**
         * @param sourceLocation The location of the source MongoDB Cluster. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder sourceLocation(@Nullable Output<String> sourceLocation) {
            $.sourceLocation = sourceLocation;
            return this;
        }

        /**
         * @param sourceLocation The location of the source MongoDB Cluster. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder sourceLocation(String sourceLocation) {
            return sourceLocation(Output.of(sourceLocation));
        }

        /**
         * @param sourceServerId The ID of the replication source MongoDB Cluster. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder sourceServerId(@Nullable Output<String> sourceServerId) {
            $.sourceServerId = sourceServerId;
            return this;
        }

        /**
         * @param sourceServerId The ID of the replication source MongoDB Cluster. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder sourceServerId(String sourceServerId) {
            return sourceServerId(Output.of(sourceServerId));
        }

        /**
         * @param storageSizeInGb The size of the data disk space for the MongoDB Cluster.
         * 
         * @return builder
         * 
         */
        public Builder storageSizeInGb(@Nullable Output<Integer> storageSizeInGb) {
            $.storageSizeInGb = storageSizeInGb;
            return this;
        }

        /**
         * @param storageSizeInGb The size of the data disk space for the MongoDB Cluster.
         * 
         * @return builder
         * 
         */
        public Builder storageSizeInGb(Integer storageSizeInGb) {
            return storageSizeInGb(Output.of(storageSizeInGb));
        }

        /**
         * @param tags A mapping of tags to assign to the MongoDB Cluster.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags to assign to the MongoDB Cluster.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param version The version for the MongoDB Cluster. Possibles values are `5.0`, `6.0`, `7.0` and `8.0`.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version The version for the MongoDB Cluster. Possibles values are `5.0`, `6.0`, `7.0` and `8.0`.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public MongoClusterState build() {
            return $;
        }
    }

}
