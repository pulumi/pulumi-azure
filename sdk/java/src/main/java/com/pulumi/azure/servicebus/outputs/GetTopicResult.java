// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.servicebus.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetTopicResult {
    /**
     * @return The ISO 8601 timespan duration of the idle interval after which the Topic is automatically deleted, minimum of 5 minutes.
     * 
     */
    private String autoDeleteOnIdle;
    /**
     * @return The ISO 8601 timespan duration of TTL of messages sent to this topic if no TTL value is set on the message itself.
     * 
     */
    private String defaultMessageTtl;
    /**
     * @return The ISO 8601 timespan duration during which duplicates can be detected.
     * 
     */
    private String duplicateDetectionHistoryTimeWindow;
    /**
     * @return Boolean flag which controls if server-side batched operations are enabled.
     * 
     */
    private Boolean enableBatchedOperations;
    /**
     * @return Boolean flag which controls whether Express Entities are enabled. An express topic holds a message in memory temporarily before writing it to persistent storage.
     * 
     */
    private Boolean enableExpress;
    /**
     * @return Boolean flag which controls whether to enable the topic to be partitioned across multiple message brokers.
     * 
     */
    private Boolean enablePartitioning;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Integer value which controls the size of memory allocated for the topic. For supported values see the &#34;Queue/topic size&#34; section of [this document](https://docs.microsoft.com/azure/service-bus-messaging/service-bus-quotas).
     * 
     */
    private Integer maxSizeInMegabytes;
    private String name;
    private @Nullable String namespaceId;
    private @Nullable String namespaceName;
    /**
     * @return Boolean flag which controls whether the Topic requires duplicate detection.
     * 
     */
    private Boolean requiresDuplicateDetection;
    private @Nullable String resourceGroupName;
    /**
     * @return The Status of the Service Bus Topic. Acceptable values are Active or Disabled.
     * 
     */
    private String status;
    /**
     * @return Boolean flag which controls whether the Topic supports ordering.
     * 
     */
    private Boolean supportOrdering;

    private GetTopicResult() {}
    /**
     * @return The ISO 8601 timespan duration of the idle interval after which the Topic is automatically deleted, minimum of 5 minutes.
     * 
     */
    public String autoDeleteOnIdle() {
        return this.autoDeleteOnIdle;
    }
    /**
     * @return The ISO 8601 timespan duration of TTL of messages sent to this topic if no TTL value is set on the message itself.
     * 
     */
    public String defaultMessageTtl() {
        return this.defaultMessageTtl;
    }
    /**
     * @return The ISO 8601 timespan duration during which duplicates can be detected.
     * 
     */
    public String duplicateDetectionHistoryTimeWindow() {
        return this.duplicateDetectionHistoryTimeWindow;
    }
    /**
     * @return Boolean flag which controls if server-side batched operations are enabled.
     * 
     */
    public Boolean enableBatchedOperations() {
        return this.enableBatchedOperations;
    }
    /**
     * @return Boolean flag which controls whether Express Entities are enabled. An express topic holds a message in memory temporarily before writing it to persistent storage.
     * 
     */
    public Boolean enableExpress() {
        return this.enableExpress;
    }
    /**
     * @return Boolean flag which controls whether to enable the topic to be partitioned across multiple message brokers.
     * 
     */
    public Boolean enablePartitioning() {
        return this.enablePartitioning;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Integer value which controls the size of memory allocated for the topic. For supported values see the &#34;Queue/topic size&#34; section of [this document](https://docs.microsoft.com/azure/service-bus-messaging/service-bus-quotas).
     * 
     */
    public Integer maxSizeInMegabytes() {
        return this.maxSizeInMegabytes;
    }
    public String name() {
        return this.name;
    }
    public Optional<String> namespaceId() {
        return Optional.ofNullable(this.namespaceId);
    }
    public Optional<String> namespaceName() {
        return Optional.ofNullable(this.namespaceName);
    }
    /**
     * @return Boolean flag which controls whether the Topic requires duplicate detection.
     * 
     */
    public Boolean requiresDuplicateDetection() {
        return this.requiresDuplicateDetection;
    }
    public Optional<String> resourceGroupName() {
        return Optional.ofNullable(this.resourceGroupName);
    }
    /**
     * @return The Status of the Service Bus Topic. Acceptable values are Active or Disabled.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Boolean flag which controls whether the Topic supports ordering.
     * 
     */
    public Boolean supportOrdering() {
        return this.supportOrdering;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTopicResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String autoDeleteOnIdle;
        private String defaultMessageTtl;
        private String duplicateDetectionHistoryTimeWindow;
        private Boolean enableBatchedOperations;
        private Boolean enableExpress;
        private Boolean enablePartitioning;
        private String id;
        private Integer maxSizeInMegabytes;
        private String name;
        private @Nullable String namespaceId;
        private @Nullable String namespaceName;
        private Boolean requiresDuplicateDetection;
        private @Nullable String resourceGroupName;
        private String status;
        private Boolean supportOrdering;
        public Builder() {}
        public Builder(GetTopicResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoDeleteOnIdle = defaults.autoDeleteOnIdle;
    	      this.defaultMessageTtl = defaults.defaultMessageTtl;
    	      this.duplicateDetectionHistoryTimeWindow = defaults.duplicateDetectionHistoryTimeWindow;
    	      this.enableBatchedOperations = defaults.enableBatchedOperations;
    	      this.enableExpress = defaults.enableExpress;
    	      this.enablePartitioning = defaults.enablePartitioning;
    	      this.id = defaults.id;
    	      this.maxSizeInMegabytes = defaults.maxSizeInMegabytes;
    	      this.name = defaults.name;
    	      this.namespaceId = defaults.namespaceId;
    	      this.namespaceName = defaults.namespaceName;
    	      this.requiresDuplicateDetection = defaults.requiresDuplicateDetection;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.status = defaults.status;
    	      this.supportOrdering = defaults.supportOrdering;
        }

        @CustomType.Setter
        public Builder autoDeleteOnIdle(String autoDeleteOnIdle) {
            this.autoDeleteOnIdle = Objects.requireNonNull(autoDeleteOnIdle);
            return this;
        }
        @CustomType.Setter
        public Builder defaultMessageTtl(String defaultMessageTtl) {
            this.defaultMessageTtl = Objects.requireNonNull(defaultMessageTtl);
            return this;
        }
        @CustomType.Setter
        public Builder duplicateDetectionHistoryTimeWindow(String duplicateDetectionHistoryTimeWindow) {
            this.duplicateDetectionHistoryTimeWindow = Objects.requireNonNull(duplicateDetectionHistoryTimeWindow);
            return this;
        }
        @CustomType.Setter
        public Builder enableBatchedOperations(Boolean enableBatchedOperations) {
            this.enableBatchedOperations = Objects.requireNonNull(enableBatchedOperations);
            return this;
        }
        @CustomType.Setter
        public Builder enableExpress(Boolean enableExpress) {
            this.enableExpress = Objects.requireNonNull(enableExpress);
            return this;
        }
        @CustomType.Setter
        public Builder enablePartitioning(Boolean enablePartitioning) {
            this.enablePartitioning = Objects.requireNonNull(enablePartitioning);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder maxSizeInMegabytes(Integer maxSizeInMegabytes) {
            this.maxSizeInMegabytes = Objects.requireNonNull(maxSizeInMegabytes);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder namespaceId(@Nullable String namespaceId) {
            this.namespaceId = namespaceId;
            return this;
        }
        @CustomType.Setter
        public Builder namespaceName(@Nullable String namespaceName) {
            this.namespaceName = namespaceName;
            return this;
        }
        @CustomType.Setter
        public Builder requiresDuplicateDetection(Boolean requiresDuplicateDetection) {
            this.requiresDuplicateDetection = Objects.requireNonNull(requiresDuplicateDetection);
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupName(@Nullable String resourceGroupName) {
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder supportOrdering(Boolean supportOrdering) {
            this.supportOrdering = Objects.requireNonNull(supportOrdering);
            return this;
        }
        public GetTopicResult build() {
            final var o = new GetTopicResult();
            o.autoDeleteOnIdle = autoDeleteOnIdle;
            o.defaultMessageTtl = defaultMessageTtl;
            o.duplicateDetectionHistoryTimeWindow = duplicateDetectionHistoryTimeWindow;
            o.enableBatchedOperations = enableBatchedOperations;
            o.enableExpress = enableExpress;
            o.enablePartitioning = enablePartitioning;
            o.id = id;
            o.maxSizeInMegabytes = maxSizeInMegabytes;
            o.name = name;
            o.namespaceId = namespaceId;
            o.namespaceName = namespaceName;
            o.requiresDuplicateDetection = requiresDuplicateDetection;
            o.resourceGroupName = resourceGroupName;
            o.status = status;
            o.supportOrdering = supportOrdering;
            return o;
        }
    }
}
