// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.privatedns.outputs;

import com.pulumi.azure.privatedns.outputs.GetResolverForwardingRuleTargetDnsServer;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetResolverForwardingRuleResult {
    private String dnsForwardingRulesetId;
    /**
     * @return The domain name for the Private DNS Resolver Forwarding Rule.
     * 
     */
    private String domainName;
    /**
     * @return Is the Private DNS Resolver Forwarding Rule enabled?
     * 
     */
    private Boolean enabled;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The metadata attached to the Private DNS Resolver Forwarding Rule.
     * 
     */
    private Map<String,String> metadata;
    private String name;
    /**
     * @return A list of `target_dns_servers` block as defined below.
     * 
     */
    private List<GetResolverForwardingRuleTargetDnsServer> targetDnsServers;

    private GetResolverForwardingRuleResult() {}
    public String dnsForwardingRulesetId() {
        return this.dnsForwardingRulesetId;
    }
    /**
     * @return The domain name for the Private DNS Resolver Forwarding Rule.
     * 
     */
    public String domainName() {
        return this.domainName;
    }
    /**
     * @return Is the Private DNS Resolver Forwarding Rule enabled?
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The metadata attached to the Private DNS Resolver Forwarding Rule.
     * 
     */
    public Map<String,String> metadata() {
        return this.metadata;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return A list of `target_dns_servers` block as defined below.
     * 
     */
    public List<GetResolverForwardingRuleTargetDnsServer> targetDnsServers() {
        return this.targetDnsServers;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetResolverForwardingRuleResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String dnsForwardingRulesetId;
        private String domainName;
        private Boolean enabled;
        private String id;
        private Map<String,String> metadata;
        private String name;
        private List<GetResolverForwardingRuleTargetDnsServer> targetDnsServers;
        public Builder() {}
        public Builder(GetResolverForwardingRuleResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dnsForwardingRulesetId = defaults.dnsForwardingRulesetId;
    	      this.domainName = defaults.domainName;
    	      this.enabled = defaults.enabled;
    	      this.id = defaults.id;
    	      this.metadata = defaults.metadata;
    	      this.name = defaults.name;
    	      this.targetDnsServers = defaults.targetDnsServers;
        }

        @CustomType.Setter
        public Builder dnsForwardingRulesetId(String dnsForwardingRulesetId) {
            if (dnsForwardingRulesetId == null) {
              throw new MissingRequiredPropertyException("GetResolverForwardingRuleResult", "dnsForwardingRulesetId");
            }
            this.dnsForwardingRulesetId = dnsForwardingRulesetId;
            return this;
        }
        @CustomType.Setter
        public Builder domainName(String domainName) {
            if (domainName == null) {
              throw new MissingRequiredPropertyException("GetResolverForwardingRuleResult", "domainName");
            }
            this.domainName = domainName;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetResolverForwardingRuleResult", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetResolverForwardingRuleResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder metadata(Map<String,String> metadata) {
            if (metadata == null) {
              throw new MissingRequiredPropertyException("GetResolverForwardingRuleResult", "metadata");
            }
            this.metadata = metadata;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetResolverForwardingRuleResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder targetDnsServers(List<GetResolverForwardingRuleTargetDnsServer> targetDnsServers) {
            if (targetDnsServers == null) {
              throw new MissingRequiredPropertyException("GetResolverForwardingRuleResult", "targetDnsServers");
            }
            this.targetDnsServers = targetDnsServers;
            return this;
        }
        public Builder targetDnsServers(GetResolverForwardingRuleTargetDnsServer... targetDnsServers) {
            return targetDnsServers(List.of(targetDnsServers));
        }
        public GetResolverForwardingRuleResult build() {
            final var _resultValue = new GetResolverForwardingRuleResult();
            _resultValue.dnsForwardingRulesetId = dnsForwardingRulesetId;
            _resultValue.domainName = domainName;
            _resultValue.enabled = enabled;
            _resultValue.id = id;
            _resultValue.metadata = metadata;
            _resultValue.name = name;
            _resultValue.targetDnsServers = targetDnsServers;
            return _resultValue;
        }
    }
}
