// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.frontdoor.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FrontdoorBackendPoolSettingArgs extends com.pulumi.resources.ResourceArgs {

    public static final FrontdoorBackendPoolSettingArgs Empty = new FrontdoorBackendPoolSettingArgs();

    /**
     * Specifies the send and receive timeout on forwarding request to the backend. When the timeout is reached, the request fails and returns. Possible values are between `0` - `240`. Defaults to `60`.
     * 
     */
    @Import(name="backendPoolsSendReceiveTimeoutSeconds")
    private @Nullable Output<Integer> backendPoolsSendReceiveTimeoutSeconds;

    /**
     * @return Specifies the send and receive timeout on forwarding request to the backend. When the timeout is reached, the request fails and returns. Possible values are between `0` - `240`. Defaults to `60`.
     * 
     */
    public Optional<Output<Integer>> backendPoolsSendReceiveTimeoutSeconds() {
        return Optional.ofNullable(this.backendPoolsSendReceiveTimeoutSeconds);
    }

    /**
     * Enforce certificate name check on `HTTPS` requests to all backend pools, this setting will have no effect on `HTTP` requests. Permitted values are `true` or `false`.
     * 
     */
    @Import(name="enforceBackendPoolsCertificateNameCheck", required=true)
    private Output<Boolean> enforceBackendPoolsCertificateNameCheck;

    /**
     * @return Enforce certificate name check on `HTTPS` requests to all backend pools, this setting will have no effect on `HTTP` requests. Permitted values are `true` or `false`.
     * 
     */
    public Output<Boolean> enforceBackendPoolsCertificateNameCheck() {
        return this.enforceBackendPoolsCertificateNameCheck;
    }

    private FrontdoorBackendPoolSettingArgs() {}

    private FrontdoorBackendPoolSettingArgs(FrontdoorBackendPoolSettingArgs $) {
        this.backendPoolsSendReceiveTimeoutSeconds = $.backendPoolsSendReceiveTimeoutSeconds;
        this.enforceBackendPoolsCertificateNameCheck = $.enforceBackendPoolsCertificateNameCheck;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FrontdoorBackendPoolSettingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FrontdoorBackendPoolSettingArgs $;

        public Builder() {
            $ = new FrontdoorBackendPoolSettingArgs();
        }

        public Builder(FrontdoorBackendPoolSettingArgs defaults) {
            $ = new FrontdoorBackendPoolSettingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backendPoolsSendReceiveTimeoutSeconds Specifies the send and receive timeout on forwarding request to the backend. When the timeout is reached, the request fails and returns. Possible values are between `0` - `240`. Defaults to `60`.
         * 
         * @return builder
         * 
         */
        public Builder backendPoolsSendReceiveTimeoutSeconds(@Nullable Output<Integer> backendPoolsSendReceiveTimeoutSeconds) {
            $.backendPoolsSendReceiveTimeoutSeconds = backendPoolsSendReceiveTimeoutSeconds;
            return this;
        }

        /**
         * @param backendPoolsSendReceiveTimeoutSeconds Specifies the send and receive timeout on forwarding request to the backend. When the timeout is reached, the request fails and returns. Possible values are between `0` - `240`. Defaults to `60`.
         * 
         * @return builder
         * 
         */
        public Builder backendPoolsSendReceiveTimeoutSeconds(Integer backendPoolsSendReceiveTimeoutSeconds) {
            return backendPoolsSendReceiveTimeoutSeconds(Output.of(backendPoolsSendReceiveTimeoutSeconds));
        }

        /**
         * @param enforceBackendPoolsCertificateNameCheck Enforce certificate name check on `HTTPS` requests to all backend pools, this setting will have no effect on `HTTP` requests. Permitted values are `true` or `false`.
         * 
         * @return builder
         * 
         */
        public Builder enforceBackendPoolsCertificateNameCheck(Output<Boolean> enforceBackendPoolsCertificateNameCheck) {
            $.enforceBackendPoolsCertificateNameCheck = enforceBackendPoolsCertificateNameCheck;
            return this;
        }

        /**
         * @param enforceBackendPoolsCertificateNameCheck Enforce certificate name check on `HTTPS` requests to all backend pools, this setting will have no effect on `HTTP` requests. Permitted values are `true` or `false`.
         * 
         * @return builder
         * 
         */
        public Builder enforceBackendPoolsCertificateNameCheck(Boolean enforceBackendPoolsCertificateNameCheck) {
            return enforceBackendPoolsCertificateNameCheck(Output.of(enforceBackendPoolsCertificateNameCheck));
        }

        public FrontdoorBackendPoolSettingArgs build() {
            $.enforceBackendPoolsCertificateNameCheck = Objects.requireNonNull($.enforceBackendPoolsCertificateNameCheck, "expected parameter 'enforceBackendPoolsCertificateNameCheck' to be non-null");
            return $;
        }
    }

}
