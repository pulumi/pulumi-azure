// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.siterecovery.inputs;

import com.pulumi.azure.siterecovery.inputs.ReplicatedVMManagedDiskArgs;
import com.pulumi.azure.siterecovery.inputs.ReplicatedVMNetworkInterfaceArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReplicatedVMState extends com.pulumi.resources.ResourceArgs {

    public static final ReplicatedVMState Empty = new ReplicatedVMState();

    /**
     * One or more `managed_disk` block.
     * 
     */
    @Import(name="managedDisks")
    private @Nullable Output<List<ReplicatedVMManagedDiskArgs>> managedDisks;

    /**
     * @return One or more `managed_disk` block.
     * 
     */
    public Optional<Output<List<ReplicatedVMManagedDiskArgs>>> managedDisks() {
        return Optional.ofNullable(this.managedDisks);
    }

    /**
     * The name of the replication for the replicated VM.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the replication for the replicated VM.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * One or more `network_interface` block.
     * 
     */
    @Import(name="networkInterfaces")
    private @Nullable Output<List<ReplicatedVMNetworkInterfaceArgs>> networkInterfaces;

    /**
     * @return One or more `network_interface` block.
     * 
     */
    public Optional<Output<List<ReplicatedVMNetworkInterfaceArgs>>> networkInterfaces() {
        return Optional.ofNullable(this.networkInterfaces);
    }

    @Import(name="recoveryReplicationPolicyId")
    private @Nullable Output<String> recoveryReplicationPolicyId;

    public Optional<Output<String>> recoveryReplicationPolicyId() {
        return Optional.ofNullable(this.recoveryReplicationPolicyId);
    }

    /**
     * The name of the vault that should be updated.
     * 
     */
    @Import(name="recoveryVaultName")
    private @Nullable Output<String> recoveryVaultName;

    /**
     * @return The name of the vault that should be updated.
     * 
     */
    public Optional<Output<String>> recoveryVaultName() {
        return Optional.ofNullable(this.recoveryVaultName);
    }

    /**
     * Name of the resource group where the vault that should be updated is located.
     * 
     */
    @Import(name="resourceGroupName")
    private @Nullable Output<String> resourceGroupName;

    /**
     * @return Name of the resource group where the vault that should be updated is located.
     * 
     */
    public Optional<Output<String>> resourceGroupName() {
        return Optional.ofNullable(this.resourceGroupName);
    }

    /**
     * Name of fabric that should contains this replication.
     * 
     */
    @Import(name="sourceRecoveryFabricName")
    private @Nullable Output<String> sourceRecoveryFabricName;

    /**
     * @return Name of fabric that should contains this replication.
     * 
     */
    public Optional<Output<String>> sourceRecoveryFabricName() {
        return Optional.ofNullable(this.sourceRecoveryFabricName);
    }

    /**
     * Name of the protection container to use.
     * 
     */
    @Import(name="sourceRecoveryProtectionContainerName")
    private @Nullable Output<String> sourceRecoveryProtectionContainerName;

    /**
     * @return Name of the protection container to use.
     * 
     */
    public Optional<Output<String>> sourceRecoveryProtectionContainerName() {
        return Optional.ofNullable(this.sourceRecoveryProtectionContainerName);
    }

    /**
     * Id of the VM to replicate
     * 
     */
    @Import(name="sourceVmId")
    private @Nullable Output<String> sourceVmId;

    /**
     * @return Id of the VM to replicate
     * 
     */
    public Optional<Output<String>> sourceVmId() {
        return Optional.ofNullable(this.sourceVmId);
    }

    /**
     * Id of availability set that the new VM should belong to when a failover is done.
     * 
     */
    @Import(name="targetAvailabilitySetId")
    private @Nullable Output<String> targetAvailabilitySetId;

    /**
     * @return Id of availability set that the new VM should belong to when a failover is done.
     * 
     */
    public Optional<Output<String>> targetAvailabilitySetId() {
        return Optional.ofNullable(this.targetAvailabilitySetId);
    }

    /**
     * Network to use when a failover is done (recommended to set if any network_interface is configured for failover).
     * 
     */
    @Import(name="targetNetworkId")
    private @Nullable Output<String> targetNetworkId;

    /**
     * @return Network to use when a failover is done (recommended to set if any network_interface is configured for failover).
     * 
     */
    public Optional<Output<String>> targetNetworkId() {
        return Optional.ofNullable(this.targetNetworkId);
    }

    /**
     * Id of fabric where the VM replication should be handled when a failover is done.
     * 
     */
    @Import(name="targetRecoveryFabricId")
    private @Nullable Output<String> targetRecoveryFabricId;

    /**
     * @return Id of fabric where the VM replication should be handled when a failover is done.
     * 
     */
    public Optional<Output<String>> targetRecoveryFabricId() {
        return Optional.ofNullable(this.targetRecoveryFabricId);
    }

    /**
     * Id of protection container where the VM replication should be created when a failover is done.
     * 
     */
    @Import(name="targetRecoveryProtectionContainerId")
    private @Nullable Output<String> targetRecoveryProtectionContainerId;

    /**
     * @return Id of protection container where the VM replication should be created when a failover is done.
     * 
     */
    public Optional<Output<String>> targetRecoveryProtectionContainerId() {
        return Optional.ofNullable(this.targetRecoveryProtectionContainerId);
    }

    /**
     * Id of resource group where the VM should be created when a failover is done.
     * 
     */
    @Import(name="targetResourceGroupId")
    private @Nullable Output<String> targetResourceGroupId;

    /**
     * @return Id of resource group where the VM should be created when a failover is done.
     * 
     */
    public Optional<Output<String>> targetResourceGroupId() {
        return Optional.ofNullable(this.targetResourceGroupId);
    }

    /**
     * Specifies the Availability Zone where the Failover VM should exist.
     * 
     */
    @Import(name="targetZone")
    private @Nullable Output<String> targetZone;

    /**
     * @return Specifies the Availability Zone where the Failover VM should exist.
     * 
     */
    public Optional<Output<String>> targetZone() {
        return Optional.ofNullable(this.targetZone);
    }

    private ReplicatedVMState() {}

    private ReplicatedVMState(ReplicatedVMState $) {
        this.managedDisks = $.managedDisks;
        this.name = $.name;
        this.networkInterfaces = $.networkInterfaces;
        this.recoveryReplicationPolicyId = $.recoveryReplicationPolicyId;
        this.recoveryVaultName = $.recoveryVaultName;
        this.resourceGroupName = $.resourceGroupName;
        this.sourceRecoveryFabricName = $.sourceRecoveryFabricName;
        this.sourceRecoveryProtectionContainerName = $.sourceRecoveryProtectionContainerName;
        this.sourceVmId = $.sourceVmId;
        this.targetAvailabilitySetId = $.targetAvailabilitySetId;
        this.targetNetworkId = $.targetNetworkId;
        this.targetRecoveryFabricId = $.targetRecoveryFabricId;
        this.targetRecoveryProtectionContainerId = $.targetRecoveryProtectionContainerId;
        this.targetResourceGroupId = $.targetResourceGroupId;
        this.targetZone = $.targetZone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReplicatedVMState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReplicatedVMState $;

        public Builder() {
            $ = new ReplicatedVMState();
        }

        public Builder(ReplicatedVMState defaults) {
            $ = new ReplicatedVMState(Objects.requireNonNull(defaults));
        }

        /**
         * @param managedDisks One or more `managed_disk` block.
         * 
         * @return builder
         * 
         */
        public Builder managedDisks(@Nullable Output<List<ReplicatedVMManagedDiskArgs>> managedDisks) {
            $.managedDisks = managedDisks;
            return this;
        }

        /**
         * @param managedDisks One or more `managed_disk` block.
         * 
         * @return builder
         * 
         */
        public Builder managedDisks(List<ReplicatedVMManagedDiskArgs> managedDisks) {
            return managedDisks(Output.of(managedDisks));
        }

        /**
         * @param managedDisks One or more `managed_disk` block.
         * 
         * @return builder
         * 
         */
        public Builder managedDisks(ReplicatedVMManagedDiskArgs... managedDisks) {
            return managedDisks(List.of(managedDisks));
        }

        /**
         * @param name The name of the replication for the replicated VM.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the replication for the replicated VM.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkInterfaces One or more `network_interface` block.
         * 
         * @return builder
         * 
         */
        public Builder networkInterfaces(@Nullable Output<List<ReplicatedVMNetworkInterfaceArgs>> networkInterfaces) {
            $.networkInterfaces = networkInterfaces;
            return this;
        }

        /**
         * @param networkInterfaces One or more `network_interface` block.
         * 
         * @return builder
         * 
         */
        public Builder networkInterfaces(List<ReplicatedVMNetworkInterfaceArgs> networkInterfaces) {
            return networkInterfaces(Output.of(networkInterfaces));
        }

        /**
         * @param networkInterfaces One or more `network_interface` block.
         * 
         * @return builder
         * 
         */
        public Builder networkInterfaces(ReplicatedVMNetworkInterfaceArgs... networkInterfaces) {
            return networkInterfaces(List.of(networkInterfaces));
        }

        public Builder recoveryReplicationPolicyId(@Nullable Output<String> recoveryReplicationPolicyId) {
            $.recoveryReplicationPolicyId = recoveryReplicationPolicyId;
            return this;
        }

        public Builder recoveryReplicationPolicyId(String recoveryReplicationPolicyId) {
            return recoveryReplicationPolicyId(Output.of(recoveryReplicationPolicyId));
        }

        /**
         * @param recoveryVaultName The name of the vault that should be updated.
         * 
         * @return builder
         * 
         */
        public Builder recoveryVaultName(@Nullable Output<String> recoveryVaultName) {
            $.recoveryVaultName = recoveryVaultName;
            return this;
        }

        /**
         * @param recoveryVaultName The name of the vault that should be updated.
         * 
         * @return builder
         * 
         */
        public Builder recoveryVaultName(String recoveryVaultName) {
            return recoveryVaultName(Output.of(recoveryVaultName));
        }

        /**
         * @param resourceGroupName Name of the resource group where the vault that should be updated is located.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(@Nullable Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName Name of the resource group where the vault that should be updated is located.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param sourceRecoveryFabricName Name of fabric that should contains this replication.
         * 
         * @return builder
         * 
         */
        public Builder sourceRecoveryFabricName(@Nullable Output<String> sourceRecoveryFabricName) {
            $.sourceRecoveryFabricName = sourceRecoveryFabricName;
            return this;
        }

        /**
         * @param sourceRecoveryFabricName Name of fabric that should contains this replication.
         * 
         * @return builder
         * 
         */
        public Builder sourceRecoveryFabricName(String sourceRecoveryFabricName) {
            return sourceRecoveryFabricName(Output.of(sourceRecoveryFabricName));
        }

        /**
         * @param sourceRecoveryProtectionContainerName Name of the protection container to use.
         * 
         * @return builder
         * 
         */
        public Builder sourceRecoveryProtectionContainerName(@Nullable Output<String> sourceRecoveryProtectionContainerName) {
            $.sourceRecoveryProtectionContainerName = sourceRecoveryProtectionContainerName;
            return this;
        }

        /**
         * @param sourceRecoveryProtectionContainerName Name of the protection container to use.
         * 
         * @return builder
         * 
         */
        public Builder sourceRecoveryProtectionContainerName(String sourceRecoveryProtectionContainerName) {
            return sourceRecoveryProtectionContainerName(Output.of(sourceRecoveryProtectionContainerName));
        }

        /**
         * @param sourceVmId Id of the VM to replicate
         * 
         * @return builder
         * 
         */
        public Builder sourceVmId(@Nullable Output<String> sourceVmId) {
            $.sourceVmId = sourceVmId;
            return this;
        }

        /**
         * @param sourceVmId Id of the VM to replicate
         * 
         * @return builder
         * 
         */
        public Builder sourceVmId(String sourceVmId) {
            return sourceVmId(Output.of(sourceVmId));
        }

        /**
         * @param targetAvailabilitySetId Id of availability set that the new VM should belong to when a failover is done.
         * 
         * @return builder
         * 
         */
        public Builder targetAvailabilitySetId(@Nullable Output<String> targetAvailabilitySetId) {
            $.targetAvailabilitySetId = targetAvailabilitySetId;
            return this;
        }

        /**
         * @param targetAvailabilitySetId Id of availability set that the new VM should belong to when a failover is done.
         * 
         * @return builder
         * 
         */
        public Builder targetAvailabilitySetId(String targetAvailabilitySetId) {
            return targetAvailabilitySetId(Output.of(targetAvailabilitySetId));
        }

        /**
         * @param targetNetworkId Network to use when a failover is done (recommended to set if any network_interface is configured for failover).
         * 
         * @return builder
         * 
         */
        public Builder targetNetworkId(@Nullable Output<String> targetNetworkId) {
            $.targetNetworkId = targetNetworkId;
            return this;
        }

        /**
         * @param targetNetworkId Network to use when a failover is done (recommended to set if any network_interface is configured for failover).
         * 
         * @return builder
         * 
         */
        public Builder targetNetworkId(String targetNetworkId) {
            return targetNetworkId(Output.of(targetNetworkId));
        }

        /**
         * @param targetRecoveryFabricId Id of fabric where the VM replication should be handled when a failover is done.
         * 
         * @return builder
         * 
         */
        public Builder targetRecoveryFabricId(@Nullable Output<String> targetRecoveryFabricId) {
            $.targetRecoveryFabricId = targetRecoveryFabricId;
            return this;
        }

        /**
         * @param targetRecoveryFabricId Id of fabric where the VM replication should be handled when a failover is done.
         * 
         * @return builder
         * 
         */
        public Builder targetRecoveryFabricId(String targetRecoveryFabricId) {
            return targetRecoveryFabricId(Output.of(targetRecoveryFabricId));
        }

        /**
         * @param targetRecoveryProtectionContainerId Id of protection container where the VM replication should be created when a failover is done.
         * 
         * @return builder
         * 
         */
        public Builder targetRecoveryProtectionContainerId(@Nullable Output<String> targetRecoveryProtectionContainerId) {
            $.targetRecoveryProtectionContainerId = targetRecoveryProtectionContainerId;
            return this;
        }

        /**
         * @param targetRecoveryProtectionContainerId Id of protection container where the VM replication should be created when a failover is done.
         * 
         * @return builder
         * 
         */
        public Builder targetRecoveryProtectionContainerId(String targetRecoveryProtectionContainerId) {
            return targetRecoveryProtectionContainerId(Output.of(targetRecoveryProtectionContainerId));
        }

        /**
         * @param targetResourceGroupId Id of resource group where the VM should be created when a failover is done.
         * 
         * @return builder
         * 
         */
        public Builder targetResourceGroupId(@Nullable Output<String> targetResourceGroupId) {
            $.targetResourceGroupId = targetResourceGroupId;
            return this;
        }

        /**
         * @param targetResourceGroupId Id of resource group where the VM should be created when a failover is done.
         * 
         * @return builder
         * 
         */
        public Builder targetResourceGroupId(String targetResourceGroupId) {
            return targetResourceGroupId(Output.of(targetResourceGroupId));
        }

        /**
         * @param targetZone Specifies the Availability Zone where the Failover VM should exist.
         * 
         * @return builder
         * 
         */
        public Builder targetZone(@Nullable Output<String> targetZone) {
            $.targetZone = targetZone;
            return this;
        }

        /**
         * @param targetZone Specifies the Availability Zone where the Failover VM should exist.
         * 
         * @return builder
         * 
         */
        public Builder targetZone(String targetZone) {
            return targetZone(Output.of(targetZone));
        }

        public ReplicatedVMState build() {
            return $;
        }
    }

}
