// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network.inputs;

import com.pulumi.azure.network.inputs.ApplicationGatewaySslProfileSslPolicyArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplicationGatewaySslProfileArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationGatewaySslProfileArgs Empty = new ApplicationGatewaySslProfileArgs();

    /**
     * The ID of the Rewrite Rule Set
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return The ID of the Rewrite Rule Set
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The name of the SSL Profile that is unique within this Application Gateway.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the SSL Profile that is unique within this Application Gateway.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * a `ssl_policy` block as defined below.
     * 
     */
    @Import(name="sslPolicy")
    private @Nullable Output<ApplicationGatewaySslProfileSslPolicyArgs> sslPolicy;

    /**
     * @return a `ssl_policy` block as defined below.
     * 
     */
    public Optional<Output<ApplicationGatewaySslProfileSslPolicyArgs>> sslPolicy() {
        return Optional.ofNullable(this.sslPolicy);
    }

    /**
     * The name of the Trusted Client Certificate that will be used to authenticate requests from clients.
     * 
     */
    @Import(name="trustedClientCertificateNames")
    private @Nullable Output<List<String>> trustedClientCertificateNames;

    /**
     * @return The name of the Trusted Client Certificate that will be used to authenticate requests from clients.
     * 
     */
    public Optional<Output<List<String>>> trustedClientCertificateNames() {
        return Optional.ofNullable(this.trustedClientCertificateNames);
    }

    /**
     * Should client certificate issuer DN be verified? Defaults to `false`.
     * 
     */
    @Import(name="verifyClientCertIssuerDn")
    private @Nullable Output<Boolean> verifyClientCertIssuerDn;

    /**
     * @return Should client certificate issuer DN be verified? Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> verifyClientCertIssuerDn() {
        return Optional.ofNullable(this.verifyClientCertIssuerDn);
    }

    /**
     * Specify the method to check client certificate revocation status. Possible value is `OCSP`.
     * 
     */
    @Import(name="verifyClientCertificateRevocation")
    private @Nullable Output<String> verifyClientCertificateRevocation;

    /**
     * @return Specify the method to check client certificate revocation status. Possible value is `OCSP`.
     * 
     */
    public Optional<Output<String>> verifyClientCertificateRevocation() {
        return Optional.ofNullable(this.verifyClientCertificateRevocation);
    }

    private ApplicationGatewaySslProfileArgs() {}

    private ApplicationGatewaySslProfileArgs(ApplicationGatewaySslProfileArgs $) {
        this.id = $.id;
        this.name = $.name;
        this.sslPolicy = $.sslPolicy;
        this.trustedClientCertificateNames = $.trustedClientCertificateNames;
        this.verifyClientCertIssuerDn = $.verifyClientCertIssuerDn;
        this.verifyClientCertificateRevocation = $.verifyClientCertificateRevocation;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationGatewaySslProfileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationGatewaySslProfileArgs $;

        public Builder() {
            $ = new ApplicationGatewaySslProfileArgs();
        }

        public Builder(ApplicationGatewaySslProfileArgs defaults) {
            $ = new ApplicationGatewaySslProfileArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param id The ID of the Rewrite Rule Set
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The ID of the Rewrite Rule Set
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param name The name of the SSL Profile that is unique within this Application Gateway.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the SSL Profile that is unique within this Application Gateway.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param sslPolicy a `ssl_policy` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder sslPolicy(@Nullable Output<ApplicationGatewaySslProfileSslPolicyArgs> sslPolicy) {
            $.sslPolicy = sslPolicy;
            return this;
        }

        /**
         * @param sslPolicy a `ssl_policy` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder sslPolicy(ApplicationGatewaySslProfileSslPolicyArgs sslPolicy) {
            return sslPolicy(Output.of(sslPolicy));
        }

        /**
         * @param trustedClientCertificateNames The name of the Trusted Client Certificate that will be used to authenticate requests from clients.
         * 
         * @return builder
         * 
         */
        public Builder trustedClientCertificateNames(@Nullable Output<List<String>> trustedClientCertificateNames) {
            $.trustedClientCertificateNames = trustedClientCertificateNames;
            return this;
        }

        /**
         * @param trustedClientCertificateNames The name of the Trusted Client Certificate that will be used to authenticate requests from clients.
         * 
         * @return builder
         * 
         */
        public Builder trustedClientCertificateNames(List<String> trustedClientCertificateNames) {
            return trustedClientCertificateNames(Output.of(trustedClientCertificateNames));
        }

        /**
         * @param trustedClientCertificateNames The name of the Trusted Client Certificate that will be used to authenticate requests from clients.
         * 
         * @return builder
         * 
         */
        public Builder trustedClientCertificateNames(String... trustedClientCertificateNames) {
            return trustedClientCertificateNames(List.of(trustedClientCertificateNames));
        }

        /**
         * @param verifyClientCertIssuerDn Should client certificate issuer DN be verified? Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder verifyClientCertIssuerDn(@Nullable Output<Boolean> verifyClientCertIssuerDn) {
            $.verifyClientCertIssuerDn = verifyClientCertIssuerDn;
            return this;
        }

        /**
         * @param verifyClientCertIssuerDn Should client certificate issuer DN be verified? Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder verifyClientCertIssuerDn(Boolean verifyClientCertIssuerDn) {
            return verifyClientCertIssuerDn(Output.of(verifyClientCertIssuerDn));
        }

        /**
         * @param verifyClientCertificateRevocation Specify the method to check client certificate revocation status. Possible value is `OCSP`.
         * 
         * @return builder
         * 
         */
        public Builder verifyClientCertificateRevocation(@Nullable Output<String> verifyClientCertificateRevocation) {
            $.verifyClientCertificateRevocation = verifyClientCertificateRevocation;
            return this;
        }

        /**
         * @param verifyClientCertificateRevocation Specify the method to check client certificate revocation status. Possible value is `OCSP`.
         * 
         * @return builder
         * 
         */
        public Builder verifyClientCertificateRevocation(String verifyClientCertificateRevocation) {
            return verifyClientCertificateRevocation(Output.of(verifyClientCertificateRevocation));
        }

        public ApplicationGatewaySslProfileArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ApplicationGatewaySslProfileArgs", "name");
            }
            return $;
        }
    }

}
