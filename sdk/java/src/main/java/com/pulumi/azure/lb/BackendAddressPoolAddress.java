// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.lb;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.lb.BackendAddressPoolAddressArgs;
import com.pulumi.azure.lb.inputs.BackendAddressPoolAddressState;
import com.pulumi.azure.lb.outputs.BackendAddressPoolAddressInboundNatRulePortMapping;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * Manages a Backend Address within a Backend Address Pool.
 * 
 * &gt; **Note:** Backend Addresses can only be added to a `Standard` SKU Load Balancer.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var exampleVirtualNetwork = Output.of(NetworkFunctions.getVirtualNetwork(GetVirtualNetworkArgs.builder()
 *             .name(&#34;example-network&#34;)
 *             .resourceGroupName(&#34;example-resources&#34;)
 *             .build()));
 * 
 *         final var exampleLB = Output.of(LbFunctions.getLB(GetLBArgs.builder()
 *             .name(&#34;example-lb&#34;)
 *             .resourceGroupName(&#34;example-resources&#34;)
 *             .build()));
 * 
 *         final var exampleBackendAddressPool = Output.of(LbFunctions.getBackendAddressPool(GetBackendAddressPoolArgs.builder()
 *             .name(&#34;first&#34;)
 *             .loadbalancerId(exampleLB.apply(getLBResult -&gt; getLBResult.id()))
 *             .build()));
 * 
 *         var exampleBackendAddressPoolAddress = new BackendAddressPoolAddress(&#34;exampleBackendAddressPoolAddress&#34;, BackendAddressPoolAddressArgs.builder()        
 *             .backendAddressPoolId(exampleBackendAddressPool.apply(getBackendAddressPoolResult -&gt; getBackendAddressPoolResult.id()))
 *             .virtualNetworkId(exampleVirtualNetwork.apply(getVirtualNetworkResult -&gt; getVirtualNetworkResult.id()))
 *             .ipAddress(&#34;10.0.0.1&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Backend Address Pool Addresses can be imported using the `resource id`, e.g.
 * 
 * ```sh
 *  $ pulumi import azure:lb/backendAddressPoolAddress:BackendAddressPoolAddress example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Network/loadBalancers/loadBalancer1/backendAddressPools/backendAddressPool1/addresses/address1
 * ```
 * 
 */
@ResourceType(type="azure:lb/backendAddressPoolAddress:BackendAddressPoolAddress")
public class BackendAddressPoolAddress extends com.pulumi.resources.CustomResource {
    /**
     * The ID of the Backend Address Pool. Changing this forces a new Backend Address Pool Address to be created.
     * 
     */
    @Export(name="backendAddressPoolId", type=String.class, parameters={})
    private Output<String> backendAddressPoolId;

    /**
     * @return The ID of the Backend Address Pool. Changing this forces a new Backend Address Pool Address to be created.
     * 
     */
    public Output<String> backendAddressPoolId() {
        return this.backendAddressPoolId;
    }
    /**
     * A list of `inbound_nat_rule_port_mapping` block as defined below.
     * 
     */
    @Export(name="inboundNatRulePortMappings", type=List.class, parameters={BackendAddressPoolAddressInboundNatRulePortMapping.class})
    private Output<List<BackendAddressPoolAddressInboundNatRulePortMapping>> inboundNatRulePortMappings;

    /**
     * @return A list of `inbound_nat_rule_port_mapping` block as defined below.
     * 
     */
    public Output<List<BackendAddressPoolAddressInboundNatRulePortMapping>> inboundNatRulePortMappings() {
        return this.inboundNatRulePortMappings;
    }
    /**
     * The Static IP Address which should be allocated to this Backend Address Pool.
     * 
     */
    @Export(name="ipAddress", type=String.class, parameters={})
    private Output<String> ipAddress;

    /**
     * @return The Static IP Address which should be allocated to this Backend Address Pool.
     * 
     */
    public Output<String> ipAddress() {
        return this.ipAddress;
    }
    /**
     * The name which should be used for this Backend Address Pool Address. Changing this forces a new Backend Address Pool Address to be created.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name which should be used for this Backend Address Pool Address. Changing this forces a new Backend Address Pool Address to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the Virtual Network within which the Backend Address Pool should exist.
     * 
     */
    @Export(name="virtualNetworkId", type=String.class, parameters={})
    private Output<String> virtualNetworkId;

    /**
     * @return The ID of the Virtual Network within which the Backend Address Pool should exist.
     * 
     */
    public Output<String> virtualNetworkId() {
        return this.virtualNetworkId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public BackendAddressPoolAddress(String name) {
        this(name, BackendAddressPoolAddressArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public BackendAddressPoolAddress(String name, BackendAddressPoolAddressArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public BackendAddressPoolAddress(String name, BackendAddressPoolAddressArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:lb/backendAddressPoolAddress:BackendAddressPoolAddress", name, args == null ? BackendAddressPoolAddressArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private BackendAddressPoolAddress(String name, Output<String> id, @Nullable BackendAddressPoolAddressState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:lb/backendAddressPoolAddress:BackendAddressPoolAddress", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static BackendAddressPoolAddress get(String name, Output<String> id, @Nullable BackendAddressPoolAddressState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new BackendAddressPoolAddress(name, id, state, options);
    }
}
