// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetVirtualNetworkPeeringResult {
    /**
     * @return Controls if forwarded traffic from VMs in the remote virtual network is allowed.
     * 
     */
    private Boolean allowForwardedTraffic;
    /**
     * @return Controls gatewayLinks can be used in the remote virtual network’s link to the local virtual network.
     * 
     */
    private Boolean allowGatewayTransit;
    /**
     * @return Controls if the traffic from the local virtual network can reach the remote virtual network.
     * 
     */
    private Boolean allowVirtualNetworkAccess;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String name;
    /**
     * @return Specifies whether only IPv6 address space is peered for Subnet peering.
     * 
     */
    private Boolean onlyIpv6PeeringEnabled;
    /**
     * @return Specifies whether complete Virtual Network address space is peered.
     * 
     */
    private Boolean peerCompleteVirtualNetworksEnabled;
    /**
     * @return The full Azure resource ID of the remote virtual network.
     * 
     */
    private String remoteVirtualNetworkId;
    /**
     * @return Controls if remote gateways can be used on the local virtual network.
     * 
     */
    private Boolean useRemoteGateways;
    private String virtualNetworkId;

    private GetVirtualNetworkPeeringResult() {}
    /**
     * @return Controls if forwarded traffic from VMs in the remote virtual network is allowed.
     * 
     */
    public Boolean allowForwardedTraffic() {
        return this.allowForwardedTraffic;
    }
    /**
     * @return Controls gatewayLinks can be used in the remote virtual network’s link to the local virtual network.
     * 
     */
    public Boolean allowGatewayTransit() {
        return this.allowGatewayTransit;
    }
    /**
     * @return Controls if the traffic from the local virtual network can reach the remote virtual network.
     * 
     */
    public Boolean allowVirtualNetworkAccess() {
        return this.allowVirtualNetworkAccess;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return Specifies whether only IPv6 address space is peered for Subnet peering.
     * 
     */
    public Boolean onlyIpv6PeeringEnabled() {
        return this.onlyIpv6PeeringEnabled;
    }
    /**
     * @return Specifies whether complete Virtual Network address space is peered.
     * 
     */
    public Boolean peerCompleteVirtualNetworksEnabled() {
        return this.peerCompleteVirtualNetworksEnabled;
    }
    /**
     * @return The full Azure resource ID of the remote virtual network.
     * 
     */
    public String remoteVirtualNetworkId() {
        return this.remoteVirtualNetworkId;
    }
    /**
     * @return Controls if remote gateways can be used on the local virtual network.
     * 
     */
    public Boolean useRemoteGateways() {
        return this.useRemoteGateways;
    }
    public String virtualNetworkId() {
        return this.virtualNetworkId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVirtualNetworkPeeringResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean allowForwardedTraffic;
        private Boolean allowGatewayTransit;
        private Boolean allowVirtualNetworkAccess;
        private String id;
        private String name;
        private Boolean onlyIpv6PeeringEnabled;
        private Boolean peerCompleteVirtualNetworksEnabled;
        private String remoteVirtualNetworkId;
        private Boolean useRemoteGateways;
        private String virtualNetworkId;
        public Builder() {}
        public Builder(GetVirtualNetworkPeeringResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowForwardedTraffic = defaults.allowForwardedTraffic;
    	      this.allowGatewayTransit = defaults.allowGatewayTransit;
    	      this.allowVirtualNetworkAccess = defaults.allowVirtualNetworkAccess;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.onlyIpv6PeeringEnabled = defaults.onlyIpv6PeeringEnabled;
    	      this.peerCompleteVirtualNetworksEnabled = defaults.peerCompleteVirtualNetworksEnabled;
    	      this.remoteVirtualNetworkId = defaults.remoteVirtualNetworkId;
    	      this.useRemoteGateways = defaults.useRemoteGateways;
    	      this.virtualNetworkId = defaults.virtualNetworkId;
        }

        @CustomType.Setter
        public Builder allowForwardedTraffic(Boolean allowForwardedTraffic) {
            if (allowForwardedTraffic == null) {
              throw new MissingRequiredPropertyException("GetVirtualNetworkPeeringResult", "allowForwardedTraffic");
            }
            this.allowForwardedTraffic = allowForwardedTraffic;
            return this;
        }
        @CustomType.Setter
        public Builder allowGatewayTransit(Boolean allowGatewayTransit) {
            if (allowGatewayTransit == null) {
              throw new MissingRequiredPropertyException("GetVirtualNetworkPeeringResult", "allowGatewayTransit");
            }
            this.allowGatewayTransit = allowGatewayTransit;
            return this;
        }
        @CustomType.Setter
        public Builder allowVirtualNetworkAccess(Boolean allowVirtualNetworkAccess) {
            if (allowVirtualNetworkAccess == null) {
              throw new MissingRequiredPropertyException("GetVirtualNetworkPeeringResult", "allowVirtualNetworkAccess");
            }
            this.allowVirtualNetworkAccess = allowVirtualNetworkAccess;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetVirtualNetworkPeeringResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetVirtualNetworkPeeringResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder onlyIpv6PeeringEnabled(Boolean onlyIpv6PeeringEnabled) {
            if (onlyIpv6PeeringEnabled == null) {
              throw new MissingRequiredPropertyException("GetVirtualNetworkPeeringResult", "onlyIpv6PeeringEnabled");
            }
            this.onlyIpv6PeeringEnabled = onlyIpv6PeeringEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder peerCompleteVirtualNetworksEnabled(Boolean peerCompleteVirtualNetworksEnabled) {
            if (peerCompleteVirtualNetworksEnabled == null) {
              throw new MissingRequiredPropertyException("GetVirtualNetworkPeeringResult", "peerCompleteVirtualNetworksEnabled");
            }
            this.peerCompleteVirtualNetworksEnabled = peerCompleteVirtualNetworksEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder remoteVirtualNetworkId(String remoteVirtualNetworkId) {
            if (remoteVirtualNetworkId == null) {
              throw new MissingRequiredPropertyException("GetVirtualNetworkPeeringResult", "remoteVirtualNetworkId");
            }
            this.remoteVirtualNetworkId = remoteVirtualNetworkId;
            return this;
        }
        @CustomType.Setter
        public Builder useRemoteGateways(Boolean useRemoteGateways) {
            if (useRemoteGateways == null) {
              throw new MissingRequiredPropertyException("GetVirtualNetworkPeeringResult", "useRemoteGateways");
            }
            this.useRemoteGateways = useRemoteGateways;
            return this;
        }
        @CustomType.Setter
        public Builder virtualNetworkId(String virtualNetworkId) {
            if (virtualNetworkId == null) {
              throw new MissingRequiredPropertyException("GetVirtualNetworkPeeringResult", "virtualNetworkId");
            }
            this.virtualNetworkId = virtualNetworkId;
            return this;
        }
        public GetVirtualNetworkPeeringResult build() {
            final var _resultValue = new GetVirtualNetworkPeeringResult();
            _resultValue.allowForwardedTraffic = allowForwardedTraffic;
            _resultValue.allowGatewayTransit = allowGatewayTransit;
            _resultValue.allowVirtualNetworkAccess = allowVirtualNetworkAccess;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.onlyIpv6PeeringEnabled = onlyIpv6PeeringEnabled;
            _resultValue.peerCompleteVirtualNetworksEnabled = peerCompleteVirtualNetworksEnabled;
            _resultValue.remoteVirtualNetworkId = remoteVirtualNetworkId;
            _resultValue.useRemoteGateways = useRemoteGateways;
            _resultValue.virtualNetworkId = virtualNetworkId;
            return _resultValue;
        }
    }
}
