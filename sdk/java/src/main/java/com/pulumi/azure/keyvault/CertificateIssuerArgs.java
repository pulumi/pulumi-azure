// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.keyvault;

import com.pulumi.azure.keyvault.inputs.CertificateIssuerAdminArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CertificateIssuerArgs extends com.pulumi.resources.ResourceArgs {

    public static final CertificateIssuerArgs Empty = new CertificateIssuerArgs();

    /**
     * The account number with the third-party Certificate Issuer.
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return The account number with the third-party Certificate Issuer.
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * One or more `admin` blocks as defined below.
     * 
     */
    @Import(name="admins")
    private @Nullable Output<List<CertificateIssuerAdminArgs>> admins;

    /**
     * @return One or more `admin` blocks as defined below.
     * 
     */
    public Optional<Output<List<CertificateIssuerAdminArgs>>> admins() {
        return Optional.ofNullable(this.admins);
    }

    /**
     * The ID of the Key Vault in which to create the Certificate Issuer. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="keyVaultId", required=true)
    private Output<String> keyVaultId;

    /**
     * @return The ID of the Key Vault in which to create the Certificate Issuer. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> keyVaultId() {
        return this.keyVaultId;
    }

    /**
     * The name which should be used for this Key Vault Certificate Issuer. Changing this forces a new Key Vault Certificate Issuer to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name which should be used for this Key Vault Certificate Issuer. Changing this forces a new Key Vault Certificate Issuer to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the organization as provided to the issuer.
     * 
     */
    @Import(name="orgId")
    private @Nullable Output<String> orgId;

    /**
     * @return The ID of the organization as provided to the issuer.
     * 
     */
    public Optional<Output<String>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * The password associated with the account and organization ID at the third-party Certificate Issuer. If not specified, will not overwrite any previous value.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return The password associated with the account and organization ID at the third-party Certificate Issuer. If not specified, will not overwrite any previous value.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * The name of the third-party Certificate Issuer. Possible values are: `DigiCert`, `GlobalSign`, `OneCertV2-PrivateCA`, `OneCertV2-PublicCA` and `SslAdminV2`.
     * 
     */
    @Import(name="providerName", required=true)
    private Output<String> providerName;

    /**
     * @return The name of the third-party Certificate Issuer. Possible values are: `DigiCert`, `GlobalSign`, `OneCertV2-PrivateCA`, `OneCertV2-PublicCA` and `SslAdminV2`.
     * 
     */
    public Output<String> providerName() {
        return this.providerName;
    }

    private CertificateIssuerArgs() {}

    private CertificateIssuerArgs(CertificateIssuerArgs $) {
        this.accountId = $.accountId;
        this.admins = $.admins;
        this.keyVaultId = $.keyVaultId;
        this.name = $.name;
        this.orgId = $.orgId;
        this.password = $.password;
        this.providerName = $.providerName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertificateIssuerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertificateIssuerArgs $;

        public Builder() {
            $ = new CertificateIssuerArgs();
        }

        public Builder(CertificateIssuerArgs defaults) {
            $ = new CertificateIssuerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId The account number with the third-party Certificate Issuer.
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId The account number with the third-party Certificate Issuer.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param admins One or more `admin` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder admins(@Nullable Output<List<CertificateIssuerAdminArgs>> admins) {
            $.admins = admins;
            return this;
        }

        /**
         * @param admins One or more `admin` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder admins(List<CertificateIssuerAdminArgs> admins) {
            return admins(Output.of(admins));
        }

        /**
         * @param admins One or more `admin` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder admins(CertificateIssuerAdminArgs... admins) {
            return admins(List.of(admins));
        }

        /**
         * @param keyVaultId The ID of the Key Vault in which to create the Certificate Issuer. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultId(Output<String> keyVaultId) {
            $.keyVaultId = keyVaultId;
            return this;
        }

        /**
         * @param keyVaultId The ID of the Key Vault in which to create the Certificate Issuer. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultId(String keyVaultId) {
            return keyVaultId(Output.of(keyVaultId));
        }

        /**
         * @param name The name which should be used for this Key Vault Certificate Issuer. Changing this forces a new Key Vault Certificate Issuer to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this Key Vault Certificate Issuer. Changing this forces a new Key Vault Certificate Issuer to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param orgId The ID of the organization as provided to the issuer.
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId The ID of the organization as provided to the issuer.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param password The password associated with the account and organization ID at the third-party Certificate Issuer. If not specified, will not overwrite any previous value.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The password associated with the account and organization ID at the third-party Certificate Issuer. If not specified, will not overwrite any previous value.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param providerName The name of the third-party Certificate Issuer. Possible values are: `DigiCert`, `GlobalSign`, `OneCertV2-PrivateCA`, `OneCertV2-PublicCA` and `SslAdminV2`.
         * 
         * @return builder
         * 
         */
        public Builder providerName(Output<String> providerName) {
            $.providerName = providerName;
            return this;
        }

        /**
         * @param providerName The name of the third-party Certificate Issuer. Possible values are: `DigiCert`, `GlobalSign`, `OneCertV2-PrivateCA`, `OneCertV2-PublicCA` and `SslAdminV2`.
         * 
         * @return builder
         * 
         */
        public Builder providerName(String providerName) {
            return providerName(Output.of(providerName));
        }

        public CertificateIssuerArgs build() {
            if ($.keyVaultId == null) {
                throw new MissingRequiredPropertyException("CertificateIssuerArgs", "keyVaultId");
            }
            if ($.providerName == null) {
                throw new MissingRequiredPropertyException("CertificateIssuerArgs", "providerName");
            }
            return $;
        }
    }

}
