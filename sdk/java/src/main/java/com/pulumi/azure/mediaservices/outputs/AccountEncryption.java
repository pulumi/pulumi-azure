// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.mediaservices.outputs;

import com.pulumi.azure.mediaservices.outputs.AccountEncryptionManagedIdentity;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AccountEncryption {
    /**
     * @return The current key used to encrypt the Media Services Account, including the key version.
     * 
     */
    private @Nullable String currentKeyIdentifier;
    /**
     * @return Specifies the URI of the Key Vault Key used to encrypt data. The key may either be versioned (for example https://vault/keys/mykey/version1) or reference a key without a version (for example https://vault/keys/mykey).
     * 
     */
    private @Nullable String keyVaultKeyIdentifier;
    /**
     * @return A `managed_identity` block as defined below.
     * 
     */
    private @Nullable AccountEncryptionManagedIdentity managedIdentity;
    /**
     * @return Specifies the type of key used to encrypt the account data. Possible values are `SystemKey` and `CustomerKey`. Defaults to `SystemKey`.
     * 
     */
    private @Nullable String type;

    private AccountEncryption() {}
    /**
     * @return The current key used to encrypt the Media Services Account, including the key version.
     * 
     */
    public Optional<String> currentKeyIdentifier() {
        return Optional.ofNullable(this.currentKeyIdentifier);
    }
    /**
     * @return Specifies the URI of the Key Vault Key used to encrypt data. The key may either be versioned (for example https://vault/keys/mykey/version1) or reference a key without a version (for example https://vault/keys/mykey).
     * 
     */
    public Optional<String> keyVaultKeyIdentifier() {
        return Optional.ofNullable(this.keyVaultKeyIdentifier);
    }
    /**
     * @return A `managed_identity` block as defined below.
     * 
     */
    public Optional<AccountEncryptionManagedIdentity> managedIdentity() {
        return Optional.ofNullable(this.managedIdentity);
    }
    /**
     * @return Specifies the type of key used to encrypt the account data. Possible values are `SystemKey` and `CustomerKey`. Defaults to `SystemKey`.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AccountEncryption defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String currentKeyIdentifier;
        private @Nullable String keyVaultKeyIdentifier;
        private @Nullable AccountEncryptionManagedIdentity managedIdentity;
        private @Nullable String type;
        public Builder() {}
        public Builder(AccountEncryption defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.currentKeyIdentifier = defaults.currentKeyIdentifier;
    	      this.keyVaultKeyIdentifier = defaults.keyVaultKeyIdentifier;
    	      this.managedIdentity = defaults.managedIdentity;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder currentKeyIdentifier(@Nullable String currentKeyIdentifier) {

            this.currentKeyIdentifier = currentKeyIdentifier;
            return this;
        }
        @CustomType.Setter
        public Builder keyVaultKeyIdentifier(@Nullable String keyVaultKeyIdentifier) {

            this.keyVaultKeyIdentifier = keyVaultKeyIdentifier;
            return this;
        }
        @CustomType.Setter
        public Builder managedIdentity(@Nullable AccountEncryptionManagedIdentity managedIdentity) {

            this.managedIdentity = managedIdentity;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {

            this.type = type;
            return this;
        }
        public AccountEncryption build() {
            final var _resultValue = new AccountEncryption();
            _resultValue.currentKeyIdentifier = currentKeyIdentifier;
            _resultValue.keyVaultKeyIdentifier = keyVaultKeyIdentifier;
            _resultValue.managedIdentity = managedIdentity;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
