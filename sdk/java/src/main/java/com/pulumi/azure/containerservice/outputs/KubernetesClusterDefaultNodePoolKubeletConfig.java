// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerservice.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class KubernetesClusterDefaultNodePoolKubeletConfig {
    /**
     * @return Specifies the allow list of unsafe sysctls command or patterns (ending in `*`).
     * 
     */
    private @Nullable List<String> allowedUnsafeSysctls;
    /**
     * @return Specifies the maximum number of container log files that can be present for a container. must be at least 2.
     * 
     */
    private @Nullable Integer containerLogMaxLine;
    /**
     * @return Specifies the maximum size (e.g. 10MB) of container log file before it is rotated.
     * 
     */
    private @Nullable Integer containerLogMaxSizeMb;
    /**
     * @return Is CPU CFS quota enforcement for containers enabled?
     * 
     */
    private @Nullable Boolean cpuCfsQuotaEnabled;
    /**
     * @return Specifies the CPU CFS quota period value.
     * 
     */
    private @Nullable String cpuCfsQuotaPeriod;
    /**
     * @return Specifies the CPU Manager policy to use. Possible values are `none` and `static`,.
     * 
     */
    private @Nullable String cpuManagerPolicy;
    /**
     * @return Specifies the percent of disk usage above which image garbage collection is always run. Must be between `0` and `100`.
     * 
     */
    private @Nullable Integer imageGcHighThreshold;
    /**
     * @return Specifies the percent of disk usage lower than which image garbage collection is never run. Must be between `0` and `100`.
     * 
     */
    private @Nullable Integer imageGcLowThreshold;
    /**
     * @return Specifies the maximum number of processes per pod.
     * 
     */
    private @Nullable Integer podMaxPid;
    /**
     * @return Specifies the Topology Manager policy to use. Possible values are `none`, `best-effort`, `restricted` or `single-numa-node`.
     * 
     */
    private @Nullable String topologyManagerPolicy;

    private KubernetesClusterDefaultNodePoolKubeletConfig() {}
    /**
     * @return Specifies the allow list of unsafe sysctls command or patterns (ending in `*`).
     * 
     */
    public List<String> allowedUnsafeSysctls() {
        return this.allowedUnsafeSysctls == null ? List.of() : this.allowedUnsafeSysctls;
    }
    /**
     * @return Specifies the maximum number of container log files that can be present for a container. must be at least 2.
     * 
     */
    public Optional<Integer> containerLogMaxLine() {
        return Optional.ofNullable(this.containerLogMaxLine);
    }
    /**
     * @return Specifies the maximum size (e.g. 10MB) of container log file before it is rotated.
     * 
     */
    public Optional<Integer> containerLogMaxSizeMb() {
        return Optional.ofNullable(this.containerLogMaxSizeMb);
    }
    /**
     * @return Is CPU CFS quota enforcement for containers enabled?
     * 
     */
    public Optional<Boolean> cpuCfsQuotaEnabled() {
        return Optional.ofNullable(this.cpuCfsQuotaEnabled);
    }
    /**
     * @return Specifies the CPU CFS quota period value.
     * 
     */
    public Optional<String> cpuCfsQuotaPeriod() {
        return Optional.ofNullable(this.cpuCfsQuotaPeriod);
    }
    /**
     * @return Specifies the CPU Manager policy to use. Possible values are `none` and `static`,.
     * 
     */
    public Optional<String> cpuManagerPolicy() {
        return Optional.ofNullable(this.cpuManagerPolicy);
    }
    /**
     * @return Specifies the percent of disk usage above which image garbage collection is always run. Must be between `0` and `100`.
     * 
     */
    public Optional<Integer> imageGcHighThreshold() {
        return Optional.ofNullable(this.imageGcHighThreshold);
    }
    /**
     * @return Specifies the percent of disk usage lower than which image garbage collection is never run. Must be between `0` and `100`.
     * 
     */
    public Optional<Integer> imageGcLowThreshold() {
        return Optional.ofNullable(this.imageGcLowThreshold);
    }
    /**
     * @return Specifies the maximum number of processes per pod.
     * 
     */
    public Optional<Integer> podMaxPid() {
        return Optional.ofNullable(this.podMaxPid);
    }
    /**
     * @return Specifies the Topology Manager policy to use. Possible values are `none`, `best-effort`, `restricted` or `single-numa-node`.
     * 
     */
    public Optional<String> topologyManagerPolicy() {
        return Optional.ofNullable(this.topologyManagerPolicy);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(KubernetesClusterDefaultNodePoolKubeletConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> allowedUnsafeSysctls;
        private @Nullable Integer containerLogMaxLine;
        private @Nullable Integer containerLogMaxSizeMb;
        private @Nullable Boolean cpuCfsQuotaEnabled;
        private @Nullable String cpuCfsQuotaPeriod;
        private @Nullable String cpuManagerPolicy;
        private @Nullable Integer imageGcHighThreshold;
        private @Nullable Integer imageGcLowThreshold;
        private @Nullable Integer podMaxPid;
        private @Nullable String topologyManagerPolicy;
        public Builder() {}
        public Builder(KubernetesClusterDefaultNodePoolKubeletConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedUnsafeSysctls = defaults.allowedUnsafeSysctls;
    	      this.containerLogMaxLine = defaults.containerLogMaxLine;
    	      this.containerLogMaxSizeMb = defaults.containerLogMaxSizeMb;
    	      this.cpuCfsQuotaEnabled = defaults.cpuCfsQuotaEnabled;
    	      this.cpuCfsQuotaPeriod = defaults.cpuCfsQuotaPeriod;
    	      this.cpuManagerPolicy = defaults.cpuManagerPolicy;
    	      this.imageGcHighThreshold = defaults.imageGcHighThreshold;
    	      this.imageGcLowThreshold = defaults.imageGcLowThreshold;
    	      this.podMaxPid = defaults.podMaxPid;
    	      this.topologyManagerPolicy = defaults.topologyManagerPolicy;
        }

        @CustomType.Setter
        public Builder allowedUnsafeSysctls(@Nullable List<String> allowedUnsafeSysctls) {
            this.allowedUnsafeSysctls = allowedUnsafeSysctls;
            return this;
        }
        public Builder allowedUnsafeSysctls(String... allowedUnsafeSysctls) {
            return allowedUnsafeSysctls(List.of(allowedUnsafeSysctls));
        }
        @CustomType.Setter
        public Builder containerLogMaxLine(@Nullable Integer containerLogMaxLine) {
            this.containerLogMaxLine = containerLogMaxLine;
            return this;
        }
        @CustomType.Setter
        public Builder containerLogMaxSizeMb(@Nullable Integer containerLogMaxSizeMb) {
            this.containerLogMaxSizeMb = containerLogMaxSizeMb;
            return this;
        }
        @CustomType.Setter
        public Builder cpuCfsQuotaEnabled(@Nullable Boolean cpuCfsQuotaEnabled) {
            this.cpuCfsQuotaEnabled = cpuCfsQuotaEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder cpuCfsQuotaPeriod(@Nullable String cpuCfsQuotaPeriod) {
            this.cpuCfsQuotaPeriod = cpuCfsQuotaPeriod;
            return this;
        }
        @CustomType.Setter
        public Builder cpuManagerPolicy(@Nullable String cpuManagerPolicy) {
            this.cpuManagerPolicy = cpuManagerPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder imageGcHighThreshold(@Nullable Integer imageGcHighThreshold) {
            this.imageGcHighThreshold = imageGcHighThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder imageGcLowThreshold(@Nullable Integer imageGcLowThreshold) {
            this.imageGcLowThreshold = imageGcLowThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder podMaxPid(@Nullable Integer podMaxPid) {
            this.podMaxPid = podMaxPid;
            return this;
        }
        @CustomType.Setter
        public Builder topologyManagerPolicy(@Nullable String topologyManagerPolicy) {
            this.topologyManagerPolicy = topologyManagerPolicy;
            return this;
        }
        public KubernetesClusterDefaultNodePoolKubeletConfig build() {
            final var _resultValue = new KubernetesClusterDefaultNodePoolKubeletConfig();
            _resultValue.allowedUnsafeSysctls = allowedUnsafeSysctls;
            _resultValue.containerLogMaxLine = containerLogMaxLine;
            _resultValue.containerLogMaxSizeMb = containerLogMaxSizeMb;
            _resultValue.cpuCfsQuotaEnabled = cpuCfsQuotaEnabled;
            _resultValue.cpuCfsQuotaPeriod = cpuCfsQuotaPeriod;
            _resultValue.cpuManagerPolicy = cpuManagerPolicy;
            _resultValue.imageGcHighThreshold = imageGcHighThreshold;
            _resultValue.imageGcLowThreshold = imageGcLowThreshold;
            _resultValue.podMaxPid = podMaxPid;
            _resultValue.topologyManagerPolicy = topologyManagerPolicy;
            return _resultValue;
        }
    }
}
