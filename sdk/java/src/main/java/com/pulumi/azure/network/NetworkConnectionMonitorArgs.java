// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network;

import com.pulumi.azure.network.inputs.NetworkConnectionMonitorEndpointArgs;
import com.pulumi.azure.network.inputs.NetworkConnectionMonitorTestConfigurationArgs;
import com.pulumi.azure.network.inputs.NetworkConnectionMonitorTestGroupArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkConnectionMonitorArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworkConnectionMonitorArgs Empty = new NetworkConnectionMonitorArgs();

    /**
     * A `endpoint` block as defined below.
     * 
     */
    @Import(name="endpoints", required=true)
    private Output<List<NetworkConnectionMonitorEndpointArgs>> endpoints;

    /**
     * @return A `endpoint` block as defined below.
     * 
     */
    public Output<List<NetworkConnectionMonitorEndpointArgs>> endpoints() {
        return this.endpoints;
    }

    /**
     * The Azure Region where the Network Connection Monitor should exist. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The Azure Region where the Network Connection Monitor should exist. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name which should be used for this Network Connection Monitor. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name which should be used for this Network Connection Monitor. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the Network Watcher. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="networkWatcherId", required=true)
    private Output<String> networkWatcherId;

    /**
     * @return The ID of the Network Watcher. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> networkWatcherId() {
        return this.networkWatcherId;
    }

    /**
     * The description of the Network Connection Monitor.
     * 
     */
    @Import(name="notes")
    private @Nullable Output<String> notes;

    /**
     * @return The description of the Network Connection Monitor.
     * 
     */
    public Optional<Output<String>> notes() {
        return Optional.ofNullable(this.notes);
    }

    /**
     * A list of IDs of the Log Analytics Workspace which will accept the output from the Network Connection Monitor.
     * 
     */
    @Import(name="outputWorkspaceResourceIds")
    private @Nullable Output<List<String>> outputWorkspaceResourceIds;

    /**
     * @return A list of IDs of the Log Analytics Workspace which will accept the output from the Network Connection Monitor.
     * 
     */
    public Optional<Output<List<String>>> outputWorkspaceResourceIds() {
        return Optional.ofNullable(this.outputWorkspaceResourceIds);
    }

    /**
     * A mapping of tags which should be assigned to the Network Connection Monitor.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags which should be assigned to the Network Connection Monitor.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A `test_configuration` block as defined below.
     * 
     */
    @Import(name="testConfigurations", required=true)
    private Output<List<NetworkConnectionMonitorTestConfigurationArgs>> testConfigurations;

    /**
     * @return A `test_configuration` block as defined below.
     * 
     */
    public Output<List<NetworkConnectionMonitorTestConfigurationArgs>> testConfigurations() {
        return this.testConfigurations;
    }

    /**
     * A `test_group` block as defined below.
     * 
     */
    @Import(name="testGroups", required=true)
    private Output<List<NetworkConnectionMonitorTestGroupArgs>> testGroups;

    /**
     * @return A `test_group` block as defined below.
     * 
     */
    public Output<List<NetworkConnectionMonitorTestGroupArgs>> testGroups() {
        return this.testGroups;
    }

    private NetworkConnectionMonitorArgs() {}

    private NetworkConnectionMonitorArgs(NetworkConnectionMonitorArgs $) {
        this.endpoints = $.endpoints;
        this.location = $.location;
        this.name = $.name;
        this.networkWatcherId = $.networkWatcherId;
        this.notes = $.notes;
        this.outputWorkspaceResourceIds = $.outputWorkspaceResourceIds;
        this.tags = $.tags;
        this.testConfigurations = $.testConfigurations;
        this.testGroups = $.testGroups;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkConnectionMonitorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkConnectionMonitorArgs $;

        public Builder() {
            $ = new NetworkConnectionMonitorArgs();
        }

        public Builder(NetworkConnectionMonitorArgs defaults) {
            $ = new NetworkConnectionMonitorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param endpoints A `endpoint` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder endpoints(Output<List<NetworkConnectionMonitorEndpointArgs>> endpoints) {
            $.endpoints = endpoints;
            return this;
        }

        /**
         * @param endpoints A `endpoint` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder endpoints(List<NetworkConnectionMonitorEndpointArgs> endpoints) {
            return endpoints(Output.of(endpoints));
        }

        /**
         * @param endpoints A `endpoint` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder endpoints(NetworkConnectionMonitorEndpointArgs... endpoints) {
            return endpoints(List.of(endpoints));
        }

        /**
         * @param location The Azure Region where the Network Connection Monitor should exist. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The Azure Region where the Network Connection Monitor should exist. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The name which should be used for this Network Connection Monitor. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this Network Connection Monitor. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkWatcherId The ID of the Network Watcher. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder networkWatcherId(Output<String> networkWatcherId) {
            $.networkWatcherId = networkWatcherId;
            return this;
        }

        /**
         * @param networkWatcherId The ID of the Network Watcher. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder networkWatcherId(String networkWatcherId) {
            return networkWatcherId(Output.of(networkWatcherId));
        }

        /**
         * @param notes The description of the Network Connection Monitor.
         * 
         * @return builder
         * 
         */
        public Builder notes(@Nullable Output<String> notes) {
            $.notes = notes;
            return this;
        }

        /**
         * @param notes The description of the Network Connection Monitor.
         * 
         * @return builder
         * 
         */
        public Builder notes(String notes) {
            return notes(Output.of(notes));
        }

        /**
         * @param outputWorkspaceResourceIds A list of IDs of the Log Analytics Workspace which will accept the output from the Network Connection Monitor.
         * 
         * @return builder
         * 
         */
        public Builder outputWorkspaceResourceIds(@Nullable Output<List<String>> outputWorkspaceResourceIds) {
            $.outputWorkspaceResourceIds = outputWorkspaceResourceIds;
            return this;
        }

        /**
         * @param outputWorkspaceResourceIds A list of IDs of the Log Analytics Workspace which will accept the output from the Network Connection Monitor.
         * 
         * @return builder
         * 
         */
        public Builder outputWorkspaceResourceIds(List<String> outputWorkspaceResourceIds) {
            return outputWorkspaceResourceIds(Output.of(outputWorkspaceResourceIds));
        }

        /**
         * @param outputWorkspaceResourceIds A list of IDs of the Log Analytics Workspace which will accept the output from the Network Connection Monitor.
         * 
         * @return builder
         * 
         */
        public Builder outputWorkspaceResourceIds(String... outputWorkspaceResourceIds) {
            return outputWorkspaceResourceIds(List.of(outputWorkspaceResourceIds));
        }

        /**
         * @param tags A mapping of tags which should be assigned to the Network Connection Monitor.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags which should be assigned to the Network Connection Monitor.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param testConfigurations A `test_configuration` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder testConfigurations(Output<List<NetworkConnectionMonitorTestConfigurationArgs>> testConfigurations) {
            $.testConfigurations = testConfigurations;
            return this;
        }

        /**
         * @param testConfigurations A `test_configuration` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder testConfigurations(List<NetworkConnectionMonitorTestConfigurationArgs> testConfigurations) {
            return testConfigurations(Output.of(testConfigurations));
        }

        /**
         * @param testConfigurations A `test_configuration` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder testConfigurations(NetworkConnectionMonitorTestConfigurationArgs... testConfigurations) {
            return testConfigurations(List.of(testConfigurations));
        }

        /**
         * @param testGroups A `test_group` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder testGroups(Output<List<NetworkConnectionMonitorTestGroupArgs>> testGroups) {
            $.testGroups = testGroups;
            return this;
        }

        /**
         * @param testGroups A `test_group` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder testGroups(List<NetworkConnectionMonitorTestGroupArgs> testGroups) {
            return testGroups(Output.of(testGroups));
        }

        /**
         * @param testGroups A `test_group` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder testGroups(NetworkConnectionMonitorTestGroupArgs... testGroups) {
            return testGroups(List.of(testGroups));
        }

        public NetworkConnectionMonitorArgs build() {
            if ($.endpoints == null) {
                throw new MissingRequiredPropertyException("NetworkConnectionMonitorArgs", "endpoints");
            }
            if ($.networkWatcherId == null) {
                throw new MissingRequiredPropertyException("NetworkConnectionMonitorArgs", "networkWatcherId");
            }
            if ($.testConfigurations == null) {
                throw new MissingRequiredPropertyException("NetworkConnectionMonitorArgs", "testConfigurations");
            }
            if ($.testGroups == null) {
                throw new MissingRequiredPropertyException("NetworkConnectionMonitorArgs", "testGroups");
            }
            return $;
        }
    }

}
