// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.managedlustre.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FileSystemRootSquashArgs extends com.pulumi.resources.ResourceArgs {

    public static final FileSystemRootSquashArgs Empty = new FileSystemRootSquashArgs();

    /**
     * Squash mode of the AML file system. Possible values are `RootOnly`, and `All`.
     * 
     */
    @Import(name="mode", required=true)
    private Output<String> mode;

    /**
     * @return Squash mode of the AML file system. Possible values are `RootOnly`, and `All`.
     * 
     */
    public Output<String> mode() {
        return this.mode;
    }

    /**
     * NID IP Address list(s) to be added to the TrustedSystems, separated by semicolons.
     * 
     */
    @Import(name="noSquashNids", required=true)
    private Output<String> noSquashNids;

    /**
     * @return NID IP Address list(s) to be added to the TrustedSystems, separated by semicolons.
     * 
     */
    public Output<String> noSquashNids() {
        return this.noSquashNids;
    }

    /**
     * The GID to be used for the root squash. Defaults to `0`.
     * 
     */
    @Import(name="squashGid")
    private @Nullable Output<Integer> squashGid;

    /**
     * @return The GID to be used for the root squash. Defaults to `0`.
     * 
     */
    public Optional<Output<Integer>> squashGid() {
        return Optional.ofNullable(this.squashGid);
    }

    /**
     * The UID to be used for the root squash. Defaults to `0`.
     * 
     */
    @Import(name="squashUid")
    private @Nullable Output<Integer> squashUid;

    /**
     * @return The UID to be used for the root squash. Defaults to `0`.
     * 
     */
    public Optional<Output<Integer>> squashUid() {
        return Optional.ofNullable(this.squashUid);
    }

    private FileSystemRootSquashArgs() {}

    private FileSystemRootSquashArgs(FileSystemRootSquashArgs $) {
        this.mode = $.mode;
        this.noSquashNids = $.noSquashNids;
        this.squashGid = $.squashGid;
        this.squashUid = $.squashUid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FileSystemRootSquashArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FileSystemRootSquashArgs $;

        public Builder() {
            $ = new FileSystemRootSquashArgs();
        }

        public Builder(FileSystemRootSquashArgs defaults) {
            $ = new FileSystemRootSquashArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param mode Squash mode of the AML file system. Possible values are `RootOnly`, and `All`.
         * 
         * @return builder
         * 
         */
        public Builder mode(Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode Squash mode of the AML file system. Possible values are `RootOnly`, and `All`.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param noSquashNids NID IP Address list(s) to be added to the TrustedSystems, separated by semicolons.
         * 
         * @return builder
         * 
         */
        public Builder noSquashNids(Output<String> noSquashNids) {
            $.noSquashNids = noSquashNids;
            return this;
        }

        /**
         * @param noSquashNids NID IP Address list(s) to be added to the TrustedSystems, separated by semicolons.
         * 
         * @return builder
         * 
         */
        public Builder noSquashNids(String noSquashNids) {
            return noSquashNids(Output.of(noSquashNids));
        }

        /**
         * @param squashGid The GID to be used for the root squash. Defaults to `0`.
         * 
         * @return builder
         * 
         */
        public Builder squashGid(@Nullable Output<Integer> squashGid) {
            $.squashGid = squashGid;
            return this;
        }

        /**
         * @param squashGid The GID to be used for the root squash. Defaults to `0`.
         * 
         * @return builder
         * 
         */
        public Builder squashGid(Integer squashGid) {
            return squashGid(Output.of(squashGid));
        }

        /**
         * @param squashUid The UID to be used for the root squash. Defaults to `0`.
         * 
         * @return builder
         * 
         */
        public Builder squashUid(@Nullable Output<Integer> squashUid) {
            $.squashUid = squashUid;
            return this;
        }

        /**
         * @param squashUid The UID to be used for the root squash. Defaults to `0`.
         * 
         * @return builder
         * 
         */
        public Builder squashUid(Integer squashUid) {
            return squashUid(Output.of(squashUid));
        }

        public FileSystemRootSquashArgs build() {
            if ($.mode == null) {
                throw new MissingRequiredPropertyException("FileSystemRootSquashArgs", "mode");
            }
            if ($.noSquashNids == null) {
                throw new MissingRequiredPropertyException("FileSystemRootSquashArgs", "noSquashNids");
            }
            return $;
        }
    }

}
