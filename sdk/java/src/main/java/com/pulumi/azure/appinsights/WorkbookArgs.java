// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appinsights;

import com.pulumi.azure.appinsights.inputs.WorkbookIdentityArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkbookArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkbookArgs Empty = new WorkbookArgs();

    /**
     * Workbook category, as defined by the user at creation time. There may be additional category types beyond the following: `workbook`, `sentinel`. Defaults to `workbook`.
     * 
     */
    @Import(name="category")
    private @Nullable Output<String> category;

    /**
     * @return Workbook category, as defined by the user at creation time. There may be additional category types beyond the following: `workbook`, `sentinel`. Defaults to `workbook`.
     * 
     */
    public Optional<Output<String>> category() {
        return Optional.ofNullable(this.category);
    }

    /**
     * Configuration of this particular workbook. Configuration data is a string containing valid JSON.
     * 
     */
    @Import(name="dataJson", required=true)
    private Output<String> dataJson;

    /**
     * @return Configuration of this particular workbook. Configuration data is a string containing valid JSON.
     * 
     */
    public Output<String> dataJson() {
        return this.dataJson;
    }

    /**
     * Specifies the description of the workbook.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Specifies the description of the workbook.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Specifies the user-defined name (display name) of the workbook.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return Specifies the user-defined name (display name) of the workbook.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * An `identity` block as defined below. Changing this forces a new Workbook to be created.
     * 
     */
    @Import(name="identity")
    private @Nullable Output<WorkbookIdentityArgs> identity;

    /**
     * @return An `identity` block as defined below. Changing this forces a new Workbook to be created.
     * 
     */
    public Optional<Output<WorkbookIdentityArgs>> identity() {
        return Optional.ofNullable(this.identity);
    }

    /**
     * Specifies the Azure Region where the Workbook should exist. Changing this forces a new Workbook to be created.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Specifies the Azure Region where the Workbook should exist. Changing this forces a new Workbook to be created.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Specifies the name of this Workbook as a UUID/GUID. It should not contain any uppercase letters. Changing this forces a new Workbook to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the name of this Workbook as a UUID/GUID. It should not contain any uppercase letters. Changing this forces a new Workbook to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Specifies the name of the Resource Group where the Workbook should exist. Changing this forces a new Workbook to be created.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return Specifies the name of the Resource Group where the Workbook should exist. Changing this forces a new Workbook to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Resource ID for a source resource. It should not contain any uppercase letters. Defaults to `azure monitor`.
     * 
     */
    @Import(name="sourceId")
    private @Nullable Output<String> sourceId;

    /**
     * @return Resource ID for a source resource. It should not contain any uppercase letters. Defaults to `azure monitor`.
     * 
     */
    public Optional<Output<String>> sourceId() {
        return Optional.ofNullable(this.sourceId);
    }

    /**
     * Specifies the Resource Manager ID of the Storage Container when bring your own storage is used. Changing this forces a new Workbook to be created.
     * 
     * &gt; **Note:** This is the Resource Manager ID of the Storage Container, rather than the regular ID - and can be accessed on the `azure.storage.Container` Data Source/Resource as `resource_manager_id`.
     * 
     */
    @Import(name="storageContainerId")
    private @Nullable Output<String> storageContainerId;

    /**
     * @return Specifies the Resource Manager ID of the Storage Container when bring your own storage is used. Changing this forces a new Workbook to be created.
     * 
     * &gt; **Note:** This is the Resource Manager ID of the Storage Container, rather than the regular ID - and can be accessed on the `azure.storage.Container` Data Source/Resource as `resource_manager_id`.
     * 
     */
    public Optional<Output<String>> storageContainerId() {
        return Optional.ofNullable(this.storageContainerId);
    }

    /**
     * A mapping of tags which should be assigned to the Workbook.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags which should be assigned to the Workbook.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private WorkbookArgs() {}

    private WorkbookArgs(WorkbookArgs $) {
        this.category = $.category;
        this.dataJson = $.dataJson;
        this.description = $.description;
        this.displayName = $.displayName;
        this.identity = $.identity;
        this.location = $.location;
        this.name = $.name;
        this.resourceGroupName = $.resourceGroupName;
        this.sourceId = $.sourceId;
        this.storageContainerId = $.storageContainerId;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkbookArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkbookArgs $;

        public Builder() {
            $ = new WorkbookArgs();
        }

        public Builder(WorkbookArgs defaults) {
            $ = new WorkbookArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param category Workbook category, as defined by the user at creation time. There may be additional category types beyond the following: `workbook`, `sentinel`. Defaults to `workbook`.
         * 
         * @return builder
         * 
         */
        public Builder category(@Nullable Output<String> category) {
            $.category = category;
            return this;
        }

        /**
         * @param category Workbook category, as defined by the user at creation time. There may be additional category types beyond the following: `workbook`, `sentinel`. Defaults to `workbook`.
         * 
         * @return builder
         * 
         */
        public Builder category(String category) {
            return category(Output.of(category));
        }

        /**
         * @param dataJson Configuration of this particular workbook. Configuration data is a string containing valid JSON.
         * 
         * @return builder
         * 
         */
        public Builder dataJson(Output<String> dataJson) {
            $.dataJson = dataJson;
            return this;
        }

        /**
         * @param dataJson Configuration of this particular workbook. Configuration data is a string containing valid JSON.
         * 
         * @return builder
         * 
         */
        public Builder dataJson(String dataJson) {
            return dataJson(Output.of(dataJson));
        }

        /**
         * @param description Specifies the description of the workbook.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Specifies the description of the workbook.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName Specifies the user-defined name (display name) of the workbook.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Specifies the user-defined name (display name) of the workbook.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param identity An `identity` block as defined below. Changing this forces a new Workbook to be created.
         * 
         * @return builder
         * 
         */
        public Builder identity(@Nullable Output<WorkbookIdentityArgs> identity) {
            $.identity = identity;
            return this;
        }

        /**
         * @param identity An `identity` block as defined below. Changing this forces a new Workbook to be created.
         * 
         * @return builder
         * 
         */
        public Builder identity(WorkbookIdentityArgs identity) {
            return identity(Output.of(identity));
        }

        /**
         * @param location Specifies the Azure Region where the Workbook should exist. Changing this forces a new Workbook to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Specifies the Azure Region where the Workbook should exist. Changing this forces a new Workbook to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name Specifies the name of this Workbook as a UUID/GUID. It should not contain any uppercase letters. Changing this forces a new Workbook to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of this Workbook as a UUID/GUID. It should not contain any uppercase letters. Changing this forces a new Workbook to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param resourceGroupName Specifies the name of the Resource Group where the Workbook should exist. Changing this forces a new Workbook to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName Specifies the name of the Resource Group where the Workbook should exist. Changing this forces a new Workbook to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param sourceId Resource ID for a source resource. It should not contain any uppercase letters. Defaults to `azure monitor`.
         * 
         * @return builder
         * 
         */
        public Builder sourceId(@Nullable Output<String> sourceId) {
            $.sourceId = sourceId;
            return this;
        }

        /**
         * @param sourceId Resource ID for a source resource. It should not contain any uppercase letters. Defaults to `azure monitor`.
         * 
         * @return builder
         * 
         */
        public Builder sourceId(String sourceId) {
            return sourceId(Output.of(sourceId));
        }

        /**
         * @param storageContainerId Specifies the Resource Manager ID of the Storage Container when bring your own storage is used. Changing this forces a new Workbook to be created.
         * 
         * &gt; **Note:** This is the Resource Manager ID of the Storage Container, rather than the regular ID - and can be accessed on the `azure.storage.Container` Data Source/Resource as `resource_manager_id`.
         * 
         * @return builder
         * 
         */
        public Builder storageContainerId(@Nullable Output<String> storageContainerId) {
            $.storageContainerId = storageContainerId;
            return this;
        }

        /**
         * @param storageContainerId Specifies the Resource Manager ID of the Storage Container when bring your own storage is used. Changing this forces a new Workbook to be created.
         * 
         * &gt; **Note:** This is the Resource Manager ID of the Storage Container, rather than the regular ID - and can be accessed on the `azure.storage.Container` Data Source/Resource as `resource_manager_id`.
         * 
         * @return builder
         * 
         */
        public Builder storageContainerId(String storageContainerId) {
            return storageContainerId(Output.of(storageContainerId));
        }

        /**
         * @param tags A mapping of tags which should be assigned to the Workbook.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags which should be assigned to the Workbook.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public WorkbookArgs build() {
            if ($.dataJson == null) {
                throw new MissingRequiredPropertyException("WorkbookArgs", "dataJson");
            }
            if ($.displayName == null) {
                throw new MissingRequiredPropertyException("WorkbookArgs", "displayName");
            }
            if ($.resourceGroupName == null) {
                throw new MissingRequiredPropertyException("WorkbookArgs", "resourceGroupName");
            }
            return $;
        }
    }

}
