// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.authorization;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.authorization.inputs.GetRoleDefinitionArgs;
import com.pulumi.azure.authorization.inputs.GetRoleDefinitionPlainArgs;
import com.pulumi.azure.authorization.inputs.GetUserAssignedIdentityArgs;
import com.pulumi.azure.authorization.inputs.GetUserAssignedIdentityPlainArgs;
import com.pulumi.azure.authorization.outputs.GetRoleDefinitionResult;
import com.pulumi.azure.authorization.outputs.GetUserAssignedIdentityResult;
import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.deployment.InvokeOutputOptions;
import java.util.concurrent.CompletableFuture;

public final class AuthorizationFunctions {
    /**
     * Use this data source to access information about an existing Role Definition.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azure.core.CoreFunctions;
     * import com.pulumi.azure.core.inputs.GetSubscriptionArgs;
     * import com.pulumi.azure.authorization.RoleDefinition;
     * import com.pulumi.azure.authorization.RoleDefinitionArgs;
     * import com.pulumi.azure.authorization.AuthorizationFunctions;
     * import com.pulumi.azure.authorization.inputs.GetRoleDefinitionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var primary = CoreFunctions.getSubscription(GetSubscriptionArgs.builder()
     *             .build());
     * 
     *         var customRoleDefinition = new RoleDefinition("customRoleDefinition", RoleDefinitionArgs.builder()
     *             .roleDefinitionId("00000000-0000-0000-0000-000000000000")
     *             .name("CustomRoleDef")
     *             .scope(primary.id())
     *             .build());
     * 
     *         final var custom = customRoleDefinition.roleDefinitionId().applyValue(_roleDefinitionId -> AuthorizationFunctions.getRoleDefinition(GetRoleDefinitionArgs.builder()
     *             .roleDefinitionId(_roleDefinitionId)
     *             .scope(primary.id())
     *             .build()));
     * 
     *         final var custom-byname = customRoleDefinition.name().applyValue(_name -> AuthorizationFunctions.getRoleDefinition(GetRoleDefinitionArgs.builder()
     *             .name(_name)
     *             .scope(primary.id())
     *             .build()));
     * 
     *         final var builtin = AuthorizationFunctions.getRoleDefinition(GetRoleDefinitionArgs.builder()
     *             .name("Contributor")
     *             .build());
     * 
     *         ctx.export("customRoleDefinitionId", custom.id());
     *         ctx.export("contributorRoleDefinitionId", builtin.id());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ## API Providers
     * 
     * &lt;!-- This section is generated, changes will be overwritten --&gt;
     * This data source uses the following Azure API Providers:
     * 
     * * `Microsoft.Authorization` - 2022-05-01-preview
     * 
     */
    public static Output<GetRoleDefinitionResult> getRoleDefinition() {
        return getRoleDefinition(GetRoleDefinitionArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to access information about an existing Role Definition.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azure.core.CoreFunctions;
     * import com.pulumi.azure.core.inputs.GetSubscriptionArgs;
     * import com.pulumi.azure.authorization.RoleDefinition;
     * import com.pulumi.azure.authorization.RoleDefinitionArgs;
     * import com.pulumi.azure.authorization.AuthorizationFunctions;
     * import com.pulumi.azure.authorization.inputs.GetRoleDefinitionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var primary = CoreFunctions.getSubscription(GetSubscriptionArgs.builder()
     *             .build());
     * 
     *         var customRoleDefinition = new RoleDefinition("customRoleDefinition", RoleDefinitionArgs.builder()
     *             .roleDefinitionId("00000000-0000-0000-0000-000000000000")
     *             .name("CustomRoleDef")
     *             .scope(primary.id())
     *             .build());
     * 
     *         final var custom = customRoleDefinition.roleDefinitionId().applyValue(_roleDefinitionId -> AuthorizationFunctions.getRoleDefinition(GetRoleDefinitionArgs.builder()
     *             .roleDefinitionId(_roleDefinitionId)
     *             .scope(primary.id())
     *             .build()));
     * 
     *         final var custom-byname = customRoleDefinition.name().applyValue(_name -> AuthorizationFunctions.getRoleDefinition(GetRoleDefinitionArgs.builder()
     *             .name(_name)
     *             .scope(primary.id())
     *             .build()));
     * 
     *         final var builtin = AuthorizationFunctions.getRoleDefinition(GetRoleDefinitionArgs.builder()
     *             .name("Contributor")
     *             .build());
     * 
     *         ctx.export("customRoleDefinitionId", custom.id());
     *         ctx.export("contributorRoleDefinitionId", builtin.id());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ## API Providers
     * 
     * &lt;!-- This section is generated, changes will be overwritten --&gt;
     * This data source uses the following Azure API Providers:
     * 
     * * `Microsoft.Authorization` - 2022-05-01-preview
     * 
     */
    public static CompletableFuture<GetRoleDefinitionResult> getRoleDefinitionPlain() {
        return getRoleDefinitionPlain(GetRoleDefinitionPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to access information about an existing Role Definition.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azure.core.CoreFunctions;
     * import com.pulumi.azure.core.inputs.GetSubscriptionArgs;
     * import com.pulumi.azure.authorization.RoleDefinition;
     * import com.pulumi.azure.authorization.RoleDefinitionArgs;
     * import com.pulumi.azure.authorization.AuthorizationFunctions;
     * import com.pulumi.azure.authorization.inputs.GetRoleDefinitionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var primary = CoreFunctions.getSubscription(GetSubscriptionArgs.builder()
     *             .build());
     * 
     *         var customRoleDefinition = new RoleDefinition("customRoleDefinition", RoleDefinitionArgs.builder()
     *             .roleDefinitionId("00000000-0000-0000-0000-000000000000")
     *             .name("CustomRoleDef")
     *             .scope(primary.id())
     *             .build());
     * 
     *         final var custom = customRoleDefinition.roleDefinitionId().applyValue(_roleDefinitionId -> AuthorizationFunctions.getRoleDefinition(GetRoleDefinitionArgs.builder()
     *             .roleDefinitionId(_roleDefinitionId)
     *             .scope(primary.id())
     *             .build()));
     * 
     *         final var custom-byname = customRoleDefinition.name().applyValue(_name -> AuthorizationFunctions.getRoleDefinition(GetRoleDefinitionArgs.builder()
     *             .name(_name)
     *             .scope(primary.id())
     *             .build()));
     * 
     *         final var builtin = AuthorizationFunctions.getRoleDefinition(GetRoleDefinitionArgs.builder()
     *             .name("Contributor")
     *             .build());
     * 
     *         ctx.export("customRoleDefinitionId", custom.id());
     *         ctx.export("contributorRoleDefinitionId", builtin.id());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ## API Providers
     * 
     * &lt;!-- This section is generated, changes will be overwritten --&gt;
     * This data source uses the following Azure API Providers:
     * 
     * * `Microsoft.Authorization` - 2022-05-01-preview
     * 
     */
    public static Output<GetRoleDefinitionResult> getRoleDefinition(GetRoleDefinitionArgs args) {
        return getRoleDefinition(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to access information about an existing Role Definition.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azure.core.CoreFunctions;
     * import com.pulumi.azure.core.inputs.GetSubscriptionArgs;
     * import com.pulumi.azure.authorization.RoleDefinition;
     * import com.pulumi.azure.authorization.RoleDefinitionArgs;
     * import com.pulumi.azure.authorization.AuthorizationFunctions;
     * import com.pulumi.azure.authorization.inputs.GetRoleDefinitionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var primary = CoreFunctions.getSubscription(GetSubscriptionArgs.builder()
     *             .build());
     * 
     *         var customRoleDefinition = new RoleDefinition("customRoleDefinition", RoleDefinitionArgs.builder()
     *             .roleDefinitionId("00000000-0000-0000-0000-000000000000")
     *             .name("CustomRoleDef")
     *             .scope(primary.id())
     *             .build());
     * 
     *         final var custom = customRoleDefinition.roleDefinitionId().applyValue(_roleDefinitionId -> AuthorizationFunctions.getRoleDefinition(GetRoleDefinitionArgs.builder()
     *             .roleDefinitionId(_roleDefinitionId)
     *             .scope(primary.id())
     *             .build()));
     * 
     *         final var custom-byname = customRoleDefinition.name().applyValue(_name -> AuthorizationFunctions.getRoleDefinition(GetRoleDefinitionArgs.builder()
     *             .name(_name)
     *             .scope(primary.id())
     *             .build()));
     * 
     *         final var builtin = AuthorizationFunctions.getRoleDefinition(GetRoleDefinitionArgs.builder()
     *             .name("Contributor")
     *             .build());
     * 
     *         ctx.export("customRoleDefinitionId", custom.id());
     *         ctx.export("contributorRoleDefinitionId", builtin.id());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ## API Providers
     * 
     * &lt;!-- This section is generated, changes will be overwritten --&gt;
     * This data source uses the following Azure API Providers:
     * 
     * * `Microsoft.Authorization` - 2022-05-01-preview
     * 
     */
    public static CompletableFuture<GetRoleDefinitionResult> getRoleDefinitionPlain(GetRoleDefinitionPlainArgs args) {
        return getRoleDefinitionPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to access information about an existing Role Definition.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azure.core.CoreFunctions;
     * import com.pulumi.azure.core.inputs.GetSubscriptionArgs;
     * import com.pulumi.azure.authorization.RoleDefinition;
     * import com.pulumi.azure.authorization.RoleDefinitionArgs;
     * import com.pulumi.azure.authorization.AuthorizationFunctions;
     * import com.pulumi.azure.authorization.inputs.GetRoleDefinitionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var primary = CoreFunctions.getSubscription(GetSubscriptionArgs.builder()
     *             .build());
     * 
     *         var customRoleDefinition = new RoleDefinition("customRoleDefinition", RoleDefinitionArgs.builder()
     *             .roleDefinitionId("00000000-0000-0000-0000-000000000000")
     *             .name("CustomRoleDef")
     *             .scope(primary.id())
     *             .build());
     * 
     *         final var custom = customRoleDefinition.roleDefinitionId().applyValue(_roleDefinitionId -> AuthorizationFunctions.getRoleDefinition(GetRoleDefinitionArgs.builder()
     *             .roleDefinitionId(_roleDefinitionId)
     *             .scope(primary.id())
     *             .build()));
     * 
     *         final var custom-byname = customRoleDefinition.name().applyValue(_name -> AuthorizationFunctions.getRoleDefinition(GetRoleDefinitionArgs.builder()
     *             .name(_name)
     *             .scope(primary.id())
     *             .build()));
     * 
     *         final var builtin = AuthorizationFunctions.getRoleDefinition(GetRoleDefinitionArgs.builder()
     *             .name("Contributor")
     *             .build());
     * 
     *         ctx.export("customRoleDefinitionId", custom.id());
     *         ctx.export("contributorRoleDefinitionId", builtin.id());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ## API Providers
     * 
     * &lt;!-- This section is generated, changes will be overwritten --&gt;
     * This data source uses the following Azure API Providers:
     * 
     * * `Microsoft.Authorization` - 2022-05-01-preview
     * 
     */
    public static Output<GetRoleDefinitionResult> getRoleDefinition(GetRoleDefinitionArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("azure:authorization/getRoleDefinition:getRoleDefinition", TypeShape.of(GetRoleDefinitionResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to access information about an existing Role Definition.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azure.core.CoreFunctions;
     * import com.pulumi.azure.core.inputs.GetSubscriptionArgs;
     * import com.pulumi.azure.authorization.RoleDefinition;
     * import com.pulumi.azure.authorization.RoleDefinitionArgs;
     * import com.pulumi.azure.authorization.AuthorizationFunctions;
     * import com.pulumi.azure.authorization.inputs.GetRoleDefinitionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var primary = CoreFunctions.getSubscription(GetSubscriptionArgs.builder()
     *             .build());
     * 
     *         var customRoleDefinition = new RoleDefinition("customRoleDefinition", RoleDefinitionArgs.builder()
     *             .roleDefinitionId("00000000-0000-0000-0000-000000000000")
     *             .name("CustomRoleDef")
     *             .scope(primary.id())
     *             .build());
     * 
     *         final var custom = customRoleDefinition.roleDefinitionId().applyValue(_roleDefinitionId -> AuthorizationFunctions.getRoleDefinition(GetRoleDefinitionArgs.builder()
     *             .roleDefinitionId(_roleDefinitionId)
     *             .scope(primary.id())
     *             .build()));
     * 
     *         final var custom-byname = customRoleDefinition.name().applyValue(_name -> AuthorizationFunctions.getRoleDefinition(GetRoleDefinitionArgs.builder()
     *             .name(_name)
     *             .scope(primary.id())
     *             .build()));
     * 
     *         final var builtin = AuthorizationFunctions.getRoleDefinition(GetRoleDefinitionArgs.builder()
     *             .name("Contributor")
     *             .build());
     * 
     *         ctx.export("customRoleDefinitionId", custom.id());
     *         ctx.export("contributorRoleDefinitionId", builtin.id());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ## API Providers
     * 
     * &lt;!-- This section is generated, changes will be overwritten --&gt;
     * This data source uses the following Azure API Providers:
     * 
     * * `Microsoft.Authorization` - 2022-05-01-preview
     * 
     */
    public static Output<GetRoleDefinitionResult> getRoleDefinition(GetRoleDefinitionArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("azure:authorization/getRoleDefinition:getRoleDefinition", TypeShape.of(GetRoleDefinitionResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to access information about an existing Role Definition.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azure.core.CoreFunctions;
     * import com.pulumi.azure.core.inputs.GetSubscriptionArgs;
     * import com.pulumi.azure.authorization.RoleDefinition;
     * import com.pulumi.azure.authorization.RoleDefinitionArgs;
     * import com.pulumi.azure.authorization.AuthorizationFunctions;
     * import com.pulumi.azure.authorization.inputs.GetRoleDefinitionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var primary = CoreFunctions.getSubscription(GetSubscriptionArgs.builder()
     *             .build());
     * 
     *         var customRoleDefinition = new RoleDefinition("customRoleDefinition", RoleDefinitionArgs.builder()
     *             .roleDefinitionId("00000000-0000-0000-0000-000000000000")
     *             .name("CustomRoleDef")
     *             .scope(primary.id())
     *             .build());
     * 
     *         final var custom = customRoleDefinition.roleDefinitionId().applyValue(_roleDefinitionId -> AuthorizationFunctions.getRoleDefinition(GetRoleDefinitionArgs.builder()
     *             .roleDefinitionId(_roleDefinitionId)
     *             .scope(primary.id())
     *             .build()));
     * 
     *         final var custom-byname = customRoleDefinition.name().applyValue(_name -> AuthorizationFunctions.getRoleDefinition(GetRoleDefinitionArgs.builder()
     *             .name(_name)
     *             .scope(primary.id())
     *             .build()));
     * 
     *         final var builtin = AuthorizationFunctions.getRoleDefinition(GetRoleDefinitionArgs.builder()
     *             .name("Contributor")
     *             .build());
     * 
     *         ctx.export("customRoleDefinitionId", custom.id());
     *         ctx.export("contributorRoleDefinitionId", builtin.id());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ## API Providers
     * 
     * &lt;!-- This section is generated, changes will be overwritten --&gt;
     * This data source uses the following Azure API Providers:
     * 
     * * `Microsoft.Authorization` - 2022-05-01-preview
     * 
     */
    public static CompletableFuture<GetRoleDefinitionResult> getRoleDefinitionPlain(GetRoleDefinitionPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("azure:authorization/getRoleDefinition:getRoleDefinition", TypeShape.of(GetRoleDefinitionResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to access information about an existing User Assigned Identity.
     * 
     * ## Example Usage
     * 
     * ### Reference An Existing)
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azure.authorization.AuthorizationFunctions;
     * import com.pulumi.azure.authorization.inputs.GetUserAssignedIdentityArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AuthorizationFunctions.getUserAssignedIdentity(GetUserAssignedIdentityArgs.builder()
     *             .name("name_of_user_assigned_identity")
     *             .resourceGroupName("name_of_resource_group")
     *             .build());
     * 
     *         ctx.export("uaiClientId", example.clientId());
     *         ctx.export("uaiPrincipalId", example.principalId());
     *         ctx.export("uaiTenantId", example.tenantId());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ## API Providers
     * 
     * &lt;!-- This section is generated, changes will be overwritten --&gt;
     * This data source uses the following Azure API Providers:
     * 
     * * `Microsoft.ManagedIdentity` - 2023-01-31
     * 
     */
    public static Output<GetUserAssignedIdentityResult> getUserAssignedIdentity(GetUserAssignedIdentityArgs args) {
        return getUserAssignedIdentity(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to access information about an existing User Assigned Identity.
     * 
     * ## Example Usage
     * 
     * ### Reference An Existing)
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azure.authorization.AuthorizationFunctions;
     * import com.pulumi.azure.authorization.inputs.GetUserAssignedIdentityArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AuthorizationFunctions.getUserAssignedIdentity(GetUserAssignedIdentityArgs.builder()
     *             .name("name_of_user_assigned_identity")
     *             .resourceGroupName("name_of_resource_group")
     *             .build());
     * 
     *         ctx.export("uaiClientId", example.clientId());
     *         ctx.export("uaiPrincipalId", example.principalId());
     *         ctx.export("uaiTenantId", example.tenantId());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ## API Providers
     * 
     * &lt;!-- This section is generated, changes will be overwritten --&gt;
     * This data source uses the following Azure API Providers:
     * 
     * * `Microsoft.ManagedIdentity` - 2023-01-31
     * 
     */
    public static CompletableFuture<GetUserAssignedIdentityResult> getUserAssignedIdentityPlain(GetUserAssignedIdentityPlainArgs args) {
        return getUserAssignedIdentityPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to access information about an existing User Assigned Identity.
     * 
     * ## Example Usage
     * 
     * ### Reference An Existing)
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azure.authorization.AuthorizationFunctions;
     * import com.pulumi.azure.authorization.inputs.GetUserAssignedIdentityArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AuthorizationFunctions.getUserAssignedIdentity(GetUserAssignedIdentityArgs.builder()
     *             .name("name_of_user_assigned_identity")
     *             .resourceGroupName("name_of_resource_group")
     *             .build());
     * 
     *         ctx.export("uaiClientId", example.clientId());
     *         ctx.export("uaiPrincipalId", example.principalId());
     *         ctx.export("uaiTenantId", example.tenantId());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ## API Providers
     * 
     * &lt;!-- This section is generated, changes will be overwritten --&gt;
     * This data source uses the following Azure API Providers:
     * 
     * * `Microsoft.ManagedIdentity` - 2023-01-31
     * 
     */
    public static Output<GetUserAssignedIdentityResult> getUserAssignedIdentity(GetUserAssignedIdentityArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("azure:authorization/getUserAssignedIdentity:getUserAssignedIdentity", TypeShape.of(GetUserAssignedIdentityResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to access information about an existing User Assigned Identity.
     * 
     * ## Example Usage
     * 
     * ### Reference An Existing)
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azure.authorization.AuthorizationFunctions;
     * import com.pulumi.azure.authorization.inputs.GetUserAssignedIdentityArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AuthorizationFunctions.getUserAssignedIdentity(GetUserAssignedIdentityArgs.builder()
     *             .name("name_of_user_assigned_identity")
     *             .resourceGroupName("name_of_resource_group")
     *             .build());
     * 
     *         ctx.export("uaiClientId", example.clientId());
     *         ctx.export("uaiPrincipalId", example.principalId());
     *         ctx.export("uaiTenantId", example.tenantId());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ## API Providers
     * 
     * &lt;!-- This section is generated, changes will be overwritten --&gt;
     * This data source uses the following Azure API Providers:
     * 
     * * `Microsoft.ManagedIdentity` - 2023-01-31
     * 
     */
    public static Output<GetUserAssignedIdentityResult> getUserAssignedIdentity(GetUserAssignedIdentityArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("azure:authorization/getUserAssignedIdentity:getUserAssignedIdentity", TypeShape.of(GetUserAssignedIdentityResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to access information about an existing User Assigned Identity.
     * 
     * ## Example Usage
     * 
     * ### Reference An Existing)
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azure.authorization.AuthorizationFunctions;
     * import com.pulumi.azure.authorization.inputs.GetUserAssignedIdentityArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AuthorizationFunctions.getUserAssignedIdentity(GetUserAssignedIdentityArgs.builder()
     *             .name("name_of_user_assigned_identity")
     *             .resourceGroupName("name_of_resource_group")
     *             .build());
     * 
     *         ctx.export("uaiClientId", example.clientId());
     *         ctx.export("uaiPrincipalId", example.principalId());
     *         ctx.export("uaiTenantId", example.tenantId());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ## API Providers
     * 
     * &lt;!-- This section is generated, changes will be overwritten --&gt;
     * This data source uses the following Azure API Providers:
     * 
     * * `Microsoft.ManagedIdentity` - 2023-01-31
     * 
     */
    public static CompletableFuture<GetUserAssignedIdentityResult> getUserAssignedIdentityPlain(GetUserAssignedIdentityPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("azure:authorization/getUserAssignedIdentity:getUserAssignedIdentity", TypeShape.of(GetUserAssignedIdentityResult.class), args, Utilities.withVersion(options));
    }
}
