// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.logicapps.outputs;

import com.pulumi.azure.logicapps.outputs.GetStandardConnectionString;
import com.pulumi.azure.logicapps.outputs.GetStandardIdentity;
import com.pulumi.azure.logicapps.outputs.GetStandardSiteConfig;
import com.pulumi.azure.logicapps.outputs.GetStandardSiteCredential;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetStandardResult {
    private final String appServicePlanId;
    private final Map<String,String> appSettings;
    private final String bundleVersion;
    private final Boolean clientAffinityEnabled;
    private final String clientCertificateMode;
    private final List<GetStandardConnectionString> connectionStrings;
    private final String customDomainVerificationId;
    private final String defaultHostname;
    private final Boolean enabled;
    private final Boolean httpsOnly;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * @return An `identity` block as defined below.
     * 
     */
    private final List<GetStandardIdentity> identities;
    private final String kind;
    /**
     * @return The Azure location where the Logic App Standard exists.
     * 
     */
    private final String location;
    private final String name;
    private final String outboundIpAddresses;
    private final String possibleOutboundIpAddresses;
    private final String resourceGroupName;
    private final GetStandardSiteConfig siteConfig;
    private final List<GetStandardSiteCredential> siteCredentials;
    private final String storageAccountAccessKey;
    private final String storageAccountName;
    private final String storageAccountShareName;
    private final @Nullable Map<String,String> tags;
    private final Boolean useExtensionBundle;
    private final String version;

    @CustomType.Constructor
    private GetStandardResult(
        @CustomType.Parameter("appServicePlanId") String appServicePlanId,
        @CustomType.Parameter("appSettings") Map<String,String> appSettings,
        @CustomType.Parameter("bundleVersion") String bundleVersion,
        @CustomType.Parameter("clientAffinityEnabled") Boolean clientAffinityEnabled,
        @CustomType.Parameter("clientCertificateMode") String clientCertificateMode,
        @CustomType.Parameter("connectionStrings") List<GetStandardConnectionString> connectionStrings,
        @CustomType.Parameter("customDomainVerificationId") String customDomainVerificationId,
        @CustomType.Parameter("defaultHostname") String defaultHostname,
        @CustomType.Parameter("enabled") Boolean enabled,
        @CustomType.Parameter("httpsOnly") Boolean httpsOnly,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("identities") List<GetStandardIdentity> identities,
        @CustomType.Parameter("kind") String kind,
        @CustomType.Parameter("location") String location,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("outboundIpAddresses") String outboundIpAddresses,
        @CustomType.Parameter("possibleOutboundIpAddresses") String possibleOutboundIpAddresses,
        @CustomType.Parameter("resourceGroupName") String resourceGroupName,
        @CustomType.Parameter("siteConfig") GetStandardSiteConfig siteConfig,
        @CustomType.Parameter("siteCredentials") List<GetStandardSiteCredential> siteCredentials,
        @CustomType.Parameter("storageAccountAccessKey") String storageAccountAccessKey,
        @CustomType.Parameter("storageAccountName") String storageAccountName,
        @CustomType.Parameter("storageAccountShareName") String storageAccountShareName,
        @CustomType.Parameter("tags") @Nullable Map<String,String> tags,
        @CustomType.Parameter("useExtensionBundle") Boolean useExtensionBundle,
        @CustomType.Parameter("version") String version) {
        this.appServicePlanId = appServicePlanId;
        this.appSettings = appSettings;
        this.bundleVersion = bundleVersion;
        this.clientAffinityEnabled = clientAffinityEnabled;
        this.clientCertificateMode = clientCertificateMode;
        this.connectionStrings = connectionStrings;
        this.customDomainVerificationId = customDomainVerificationId;
        this.defaultHostname = defaultHostname;
        this.enabled = enabled;
        this.httpsOnly = httpsOnly;
        this.id = id;
        this.identities = identities;
        this.kind = kind;
        this.location = location;
        this.name = name;
        this.outboundIpAddresses = outboundIpAddresses;
        this.possibleOutboundIpAddresses = possibleOutboundIpAddresses;
        this.resourceGroupName = resourceGroupName;
        this.siteConfig = siteConfig;
        this.siteCredentials = siteCredentials;
        this.storageAccountAccessKey = storageAccountAccessKey;
        this.storageAccountName = storageAccountName;
        this.storageAccountShareName = storageAccountShareName;
        this.tags = tags;
        this.useExtensionBundle = useExtensionBundle;
        this.version = version;
    }

    public String appServicePlanId() {
        return this.appServicePlanId;
    }
    public Map<String,String> appSettings() {
        return this.appSettings;
    }
    public String bundleVersion() {
        return this.bundleVersion;
    }
    public Boolean clientAffinityEnabled() {
        return this.clientAffinityEnabled;
    }
    public String clientCertificateMode() {
        return this.clientCertificateMode;
    }
    public List<GetStandardConnectionString> connectionStrings() {
        return this.connectionStrings;
    }
    public String customDomainVerificationId() {
        return this.customDomainVerificationId;
    }
    public String defaultHostname() {
        return this.defaultHostname;
    }
    public Boolean enabled() {
        return this.enabled;
    }
    public Boolean httpsOnly() {
        return this.httpsOnly;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return An `identity` block as defined below.
     * 
     */
    public List<GetStandardIdentity> identities() {
        return this.identities;
    }
    public String kind() {
        return this.kind;
    }
    /**
     * @return The Azure location where the Logic App Standard exists.
     * 
     */
    public String location() {
        return this.location;
    }
    public String name() {
        return this.name;
    }
    public String outboundIpAddresses() {
        return this.outboundIpAddresses;
    }
    public String possibleOutboundIpAddresses() {
        return this.possibleOutboundIpAddresses;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    public GetStandardSiteConfig siteConfig() {
        return this.siteConfig;
    }
    public List<GetStandardSiteCredential> siteCredentials() {
        return this.siteCredentials;
    }
    public String storageAccountAccessKey() {
        return this.storageAccountAccessKey;
    }
    public String storageAccountName() {
        return this.storageAccountName;
    }
    public String storageAccountShareName() {
        return this.storageAccountShareName;
    }
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    public Boolean useExtensionBundle() {
        return this.useExtensionBundle;
    }
    public String version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetStandardResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String appServicePlanId;
        private Map<String,String> appSettings;
        private String bundleVersion;
        private Boolean clientAffinityEnabled;
        private String clientCertificateMode;
        private List<GetStandardConnectionString> connectionStrings;
        private String customDomainVerificationId;
        private String defaultHostname;
        private Boolean enabled;
        private Boolean httpsOnly;
        private String id;
        private List<GetStandardIdentity> identities;
        private String kind;
        private String location;
        private String name;
        private String outboundIpAddresses;
        private String possibleOutboundIpAddresses;
        private String resourceGroupName;
        private GetStandardSiteConfig siteConfig;
        private List<GetStandardSiteCredential> siteCredentials;
        private String storageAccountAccessKey;
        private String storageAccountName;
        private String storageAccountShareName;
        private @Nullable Map<String,String> tags;
        private Boolean useExtensionBundle;
        private String version;

        public Builder() {
    	      // Empty
        }

        public Builder(GetStandardResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appServicePlanId = defaults.appServicePlanId;
    	      this.appSettings = defaults.appSettings;
    	      this.bundleVersion = defaults.bundleVersion;
    	      this.clientAffinityEnabled = defaults.clientAffinityEnabled;
    	      this.clientCertificateMode = defaults.clientCertificateMode;
    	      this.connectionStrings = defaults.connectionStrings;
    	      this.customDomainVerificationId = defaults.customDomainVerificationId;
    	      this.defaultHostname = defaults.defaultHostname;
    	      this.enabled = defaults.enabled;
    	      this.httpsOnly = defaults.httpsOnly;
    	      this.id = defaults.id;
    	      this.identities = defaults.identities;
    	      this.kind = defaults.kind;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.outboundIpAddresses = defaults.outboundIpAddresses;
    	      this.possibleOutboundIpAddresses = defaults.possibleOutboundIpAddresses;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.siteConfig = defaults.siteConfig;
    	      this.siteCredentials = defaults.siteCredentials;
    	      this.storageAccountAccessKey = defaults.storageAccountAccessKey;
    	      this.storageAccountName = defaults.storageAccountName;
    	      this.storageAccountShareName = defaults.storageAccountShareName;
    	      this.tags = defaults.tags;
    	      this.useExtensionBundle = defaults.useExtensionBundle;
    	      this.version = defaults.version;
        }

        public Builder appServicePlanId(String appServicePlanId) {
            this.appServicePlanId = Objects.requireNonNull(appServicePlanId);
            return this;
        }
        public Builder appSettings(Map<String,String> appSettings) {
            this.appSettings = Objects.requireNonNull(appSettings);
            return this;
        }
        public Builder bundleVersion(String bundleVersion) {
            this.bundleVersion = Objects.requireNonNull(bundleVersion);
            return this;
        }
        public Builder clientAffinityEnabled(Boolean clientAffinityEnabled) {
            this.clientAffinityEnabled = Objects.requireNonNull(clientAffinityEnabled);
            return this;
        }
        public Builder clientCertificateMode(String clientCertificateMode) {
            this.clientCertificateMode = Objects.requireNonNull(clientCertificateMode);
            return this;
        }
        public Builder connectionStrings(List<GetStandardConnectionString> connectionStrings) {
            this.connectionStrings = Objects.requireNonNull(connectionStrings);
            return this;
        }
        public Builder connectionStrings(GetStandardConnectionString... connectionStrings) {
            return connectionStrings(List.of(connectionStrings));
        }
        public Builder customDomainVerificationId(String customDomainVerificationId) {
            this.customDomainVerificationId = Objects.requireNonNull(customDomainVerificationId);
            return this;
        }
        public Builder defaultHostname(String defaultHostname) {
            this.defaultHostname = Objects.requireNonNull(defaultHostname);
            return this;
        }
        public Builder enabled(Boolean enabled) {
            this.enabled = Objects.requireNonNull(enabled);
            return this;
        }
        public Builder httpsOnly(Boolean httpsOnly) {
            this.httpsOnly = Objects.requireNonNull(httpsOnly);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder identities(List<GetStandardIdentity> identities) {
            this.identities = Objects.requireNonNull(identities);
            return this;
        }
        public Builder identities(GetStandardIdentity... identities) {
            return identities(List.of(identities));
        }
        public Builder kind(String kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder outboundIpAddresses(String outboundIpAddresses) {
            this.outboundIpAddresses = Objects.requireNonNull(outboundIpAddresses);
            return this;
        }
        public Builder possibleOutboundIpAddresses(String possibleOutboundIpAddresses) {
            this.possibleOutboundIpAddresses = Objects.requireNonNull(possibleOutboundIpAddresses);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder siteConfig(GetStandardSiteConfig siteConfig) {
            this.siteConfig = Objects.requireNonNull(siteConfig);
            return this;
        }
        public Builder siteCredentials(List<GetStandardSiteCredential> siteCredentials) {
            this.siteCredentials = Objects.requireNonNull(siteCredentials);
            return this;
        }
        public Builder siteCredentials(GetStandardSiteCredential... siteCredentials) {
            return siteCredentials(List.of(siteCredentials));
        }
        public Builder storageAccountAccessKey(String storageAccountAccessKey) {
            this.storageAccountAccessKey = Objects.requireNonNull(storageAccountAccessKey);
            return this;
        }
        public Builder storageAccountName(String storageAccountName) {
            this.storageAccountName = Objects.requireNonNull(storageAccountName);
            return this;
        }
        public Builder storageAccountShareName(String storageAccountShareName) {
            this.storageAccountShareName = Objects.requireNonNull(storageAccountShareName);
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        public Builder useExtensionBundle(Boolean useExtensionBundle) {
            this.useExtensionBundle = Objects.requireNonNull(useExtensionBundle);
            return this;
        }
        public Builder version(String version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }        public GetStandardResult build() {
            return new GetStandardResult(appServicePlanId, appSettings, bundleVersion, clientAffinityEnabled, clientCertificateMode, connectionStrings, customDomainVerificationId, defaultHostname, enabled, httpsOnly, id, identities, kind, location, name, outboundIpAddresses, possibleOutboundIpAddresses, resourceGroupName, siteConfig, siteCredentials, storageAccountAccessKey, storageAccountName, storageAccountShareName, tags, useExtensionBundle, version);
        }
    }
}
