// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.logicapps.outputs;

import com.pulumi.azure.logicapps.outputs.GetStandardConnectionString;
import com.pulumi.azure.logicapps.outputs.GetStandardIdentity;
import com.pulumi.azure.logicapps.outputs.GetStandardSiteConfig;
import com.pulumi.azure.logicapps.outputs.GetStandardSiteCredential;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetStandardResult {
    private String appServicePlanId;
    private Map<String,String> appSettings;
    private String bundleVersion;
    private Boolean clientAffinityEnabled;
    private String clientCertificateMode;
    private List<GetStandardConnectionString> connectionStrings;
    private String customDomainVerificationId;
    private String defaultHostname;
    private Boolean enabled;
    private Boolean httpsOnly;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return An `identity` block as defined below.
     * 
     */
    private List<GetStandardIdentity> identities;
    private String kind;
    /**
     * @return The Azure location where the Logic App Standard exists.
     * 
     */
    private String location;
    private String name;
    private String outboundIpAddresses;
    private String possibleOutboundIpAddresses;
    private String resourceGroupName;
    private GetStandardSiteConfig siteConfig;
    private List<GetStandardSiteCredential> siteCredentials;
    private String storageAccountAccessKey;
    private String storageAccountName;
    private String storageAccountShareName;
    private @Nullable Map<String,String> tags;
    private Boolean useExtensionBundle;
    private String version;
    private String virtualNetworkSubnetId;

    private GetStandardResult() {}
    public String appServicePlanId() {
        return this.appServicePlanId;
    }
    public Map<String,String> appSettings() {
        return this.appSettings;
    }
    public String bundleVersion() {
        return this.bundleVersion;
    }
    public Boolean clientAffinityEnabled() {
        return this.clientAffinityEnabled;
    }
    public String clientCertificateMode() {
        return this.clientCertificateMode;
    }
    public List<GetStandardConnectionString> connectionStrings() {
        return this.connectionStrings;
    }
    public String customDomainVerificationId() {
        return this.customDomainVerificationId;
    }
    public String defaultHostname() {
        return this.defaultHostname;
    }
    public Boolean enabled() {
        return this.enabled;
    }
    public Boolean httpsOnly() {
        return this.httpsOnly;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return An `identity` block as defined below.
     * 
     */
    public List<GetStandardIdentity> identities() {
        return this.identities;
    }
    public String kind() {
        return this.kind;
    }
    /**
     * @return The Azure location where the Logic App Standard exists.
     * 
     */
    public String location() {
        return this.location;
    }
    public String name() {
        return this.name;
    }
    public String outboundIpAddresses() {
        return this.outboundIpAddresses;
    }
    public String possibleOutboundIpAddresses() {
        return this.possibleOutboundIpAddresses;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    public GetStandardSiteConfig siteConfig() {
        return this.siteConfig;
    }
    public List<GetStandardSiteCredential> siteCredentials() {
        return this.siteCredentials;
    }
    public String storageAccountAccessKey() {
        return this.storageAccountAccessKey;
    }
    public String storageAccountName() {
        return this.storageAccountName;
    }
    public String storageAccountShareName() {
        return this.storageAccountShareName;
    }
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    public Boolean useExtensionBundle() {
        return this.useExtensionBundle;
    }
    public String version() {
        return this.version;
    }
    public String virtualNetworkSubnetId() {
        return this.virtualNetworkSubnetId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetStandardResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String appServicePlanId;
        private Map<String,String> appSettings;
        private String bundleVersion;
        private Boolean clientAffinityEnabled;
        private String clientCertificateMode;
        private List<GetStandardConnectionString> connectionStrings;
        private String customDomainVerificationId;
        private String defaultHostname;
        private Boolean enabled;
        private Boolean httpsOnly;
        private String id;
        private List<GetStandardIdentity> identities;
        private String kind;
        private String location;
        private String name;
        private String outboundIpAddresses;
        private String possibleOutboundIpAddresses;
        private String resourceGroupName;
        private GetStandardSiteConfig siteConfig;
        private List<GetStandardSiteCredential> siteCredentials;
        private String storageAccountAccessKey;
        private String storageAccountName;
        private String storageAccountShareName;
        private @Nullable Map<String,String> tags;
        private Boolean useExtensionBundle;
        private String version;
        private String virtualNetworkSubnetId;
        public Builder() {}
        public Builder(GetStandardResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appServicePlanId = defaults.appServicePlanId;
    	      this.appSettings = defaults.appSettings;
    	      this.bundleVersion = defaults.bundleVersion;
    	      this.clientAffinityEnabled = defaults.clientAffinityEnabled;
    	      this.clientCertificateMode = defaults.clientCertificateMode;
    	      this.connectionStrings = defaults.connectionStrings;
    	      this.customDomainVerificationId = defaults.customDomainVerificationId;
    	      this.defaultHostname = defaults.defaultHostname;
    	      this.enabled = defaults.enabled;
    	      this.httpsOnly = defaults.httpsOnly;
    	      this.id = defaults.id;
    	      this.identities = defaults.identities;
    	      this.kind = defaults.kind;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.outboundIpAddresses = defaults.outboundIpAddresses;
    	      this.possibleOutboundIpAddresses = defaults.possibleOutboundIpAddresses;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.siteConfig = defaults.siteConfig;
    	      this.siteCredentials = defaults.siteCredentials;
    	      this.storageAccountAccessKey = defaults.storageAccountAccessKey;
    	      this.storageAccountName = defaults.storageAccountName;
    	      this.storageAccountShareName = defaults.storageAccountShareName;
    	      this.tags = defaults.tags;
    	      this.useExtensionBundle = defaults.useExtensionBundle;
    	      this.version = defaults.version;
    	      this.virtualNetworkSubnetId = defaults.virtualNetworkSubnetId;
        }

        @CustomType.Setter
        public Builder appServicePlanId(String appServicePlanId) {
            if (appServicePlanId == null) {
              throw new MissingRequiredPropertyException("GetStandardResult", "appServicePlanId");
            }
            this.appServicePlanId = appServicePlanId;
            return this;
        }
        @CustomType.Setter
        public Builder appSettings(Map<String,String> appSettings) {
            if (appSettings == null) {
              throw new MissingRequiredPropertyException("GetStandardResult", "appSettings");
            }
            this.appSettings = appSettings;
            return this;
        }
        @CustomType.Setter
        public Builder bundleVersion(String bundleVersion) {
            if (bundleVersion == null) {
              throw new MissingRequiredPropertyException("GetStandardResult", "bundleVersion");
            }
            this.bundleVersion = bundleVersion;
            return this;
        }
        @CustomType.Setter
        public Builder clientAffinityEnabled(Boolean clientAffinityEnabled) {
            if (clientAffinityEnabled == null) {
              throw new MissingRequiredPropertyException("GetStandardResult", "clientAffinityEnabled");
            }
            this.clientAffinityEnabled = clientAffinityEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder clientCertificateMode(String clientCertificateMode) {
            if (clientCertificateMode == null) {
              throw new MissingRequiredPropertyException("GetStandardResult", "clientCertificateMode");
            }
            this.clientCertificateMode = clientCertificateMode;
            return this;
        }
        @CustomType.Setter
        public Builder connectionStrings(List<GetStandardConnectionString> connectionStrings) {
            if (connectionStrings == null) {
              throw new MissingRequiredPropertyException("GetStandardResult", "connectionStrings");
            }
            this.connectionStrings = connectionStrings;
            return this;
        }
        public Builder connectionStrings(GetStandardConnectionString... connectionStrings) {
            return connectionStrings(List.of(connectionStrings));
        }
        @CustomType.Setter
        public Builder customDomainVerificationId(String customDomainVerificationId) {
            if (customDomainVerificationId == null) {
              throw new MissingRequiredPropertyException("GetStandardResult", "customDomainVerificationId");
            }
            this.customDomainVerificationId = customDomainVerificationId;
            return this;
        }
        @CustomType.Setter
        public Builder defaultHostname(String defaultHostname) {
            if (defaultHostname == null) {
              throw new MissingRequiredPropertyException("GetStandardResult", "defaultHostname");
            }
            this.defaultHostname = defaultHostname;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetStandardResult", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder httpsOnly(Boolean httpsOnly) {
            if (httpsOnly == null) {
              throw new MissingRequiredPropertyException("GetStandardResult", "httpsOnly");
            }
            this.httpsOnly = httpsOnly;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetStandardResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder identities(List<GetStandardIdentity> identities) {
            if (identities == null) {
              throw new MissingRequiredPropertyException("GetStandardResult", "identities");
            }
            this.identities = identities;
            return this;
        }
        public Builder identities(GetStandardIdentity... identities) {
            return identities(List.of(identities));
        }
        @CustomType.Setter
        public Builder kind(String kind) {
            if (kind == null) {
              throw new MissingRequiredPropertyException("GetStandardResult", "kind");
            }
            this.kind = kind;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetStandardResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetStandardResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder outboundIpAddresses(String outboundIpAddresses) {
            if (outboundIpAddresses == null) {
              throw new MissingRequiredPropertyException("GetStandardResult", "outboundIpAddresses");
            }
            this.outboundIpAddresses = outboundIpAddresses;
            return this;
        }
        @CustomType.Setter
        public Builder possibleOutboundIpAddresses(String possibleOutboundIpAddresses) {
            if (possibleOutboundIpAddresses == null) {
              throw new MissingRequiredPropertyException("GetStandardResult", "possibleOutboundIpAddresses");
            }
            this.possibleOutboundIpAddresses = possibleOutboundIpAddresses;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            if (resourceGroupName == null) {
              throw new MissingRequiredPropertyException("GetStandardResult", "resourceGroupName");
            }
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder siteConfig(GetStandardSiteConfig siteConfig) {
            if (siteConfig == null) {
              throw new MissingRequiredPropertyException("GetStandardResult", "siteConfig");
            }
            this.siteConfig = siteConfig;
            return this;
        }
        @CustomType.Setter
        public Builder siteCredentials(List<GetStandardSiteCredential> siteCredentials) {
            if (siteCredentials == null) {
              throw new MissingRequiredPropertyException("GetStandardResult", "siteCredentials");
            }
            this.siteCredentials = siteCredentials;
            return this;
        }
        public Builder siteCredentials(GetStandardSiteCredential... siteCredentials) {
            return siteCredentials(List.of(siteCredentials));
        }
        @CustomType.Setter
        public Builder storageAccountAccessKey(String storageAccountAccessKey) {
            if (storageAccountAccessKey == null) {
              throw new MissingRequiredPropertyException("GetStandardResult", "storageAccountAccessKey");
            }
            this.storageAccountAccessKey = storageAccountAccessKey;
            return this;
        }
        @CustomType.Setter
        public Builder storageAccountName(String storageAccountName) {
            if (storageAccountName == null) {
              throw new MissingRequiredPropertyException("GetStandardResult", "storageAccountName");
            }
            this.storageAccountName = storageAccountName;
            return this;
        }
        @CustomType.Setter
        public Builder storageAccountShareName(String storageAccountShareName) {
            if (storageAccountShareName == null) {
              throw new MissingRequiredPropertyException("GetStandardResult", "storageAccountShareName");
            }
            this.storageAccountShareName = storageAccountShareName;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {

            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder useExtensionBundle(Boolean useExtensionBundle) {
            if (useExtensionBundle == null) {
              throw new MissingRequiredPropertyException("GetStandardResult", "useExtensionBundle");
            }
            this.useExtensionBundle = useExtensionBundle;
            return this;
        }
        @CustomType.Setter
        public Builder version(String version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetStandardResult", "version");
            }
            this.version = version;
            return this;
        }
        @CustomType.Setter
        public Builder virtualNetworkSubnetId(String virtualNetworkSubnetId) {
            if (virtualNetworkSubnetId == null) {
              throw new MissingRequiredPropertyException("GetStandardResult", "virtualNetworkSubnetId");
            }
            this.virtualNetworkSubnetId = virtualNetworkSubnetId;
            return this;
        }
        public GetStandardResult build() {
            final var _resultValue = new GetStandardResult();
            _resultValue.appServicePlanId = appServicePlanId;
            _resultValue.appSettings = appSettings;
            _resultValue.bundleVersion = bundleVersion;
            _resultValue.clientAffinityEnabled = clientAffinityEnabled;
            _resultValue.clientCertificateMode = clientCertificateMode;
            _resultValue.connectionStrings = connectionStrings;
            _resultValue.customDomainVerificationId = customDomainVerificationId;
            _resultValue.defaultHostname = defaultHostname;
            _resultValue.enabled = enabled;
            _resultValue.httpsOnly = httpsOnly;
            _resultValue.id = id;
            _resultValue.identities = identities;
            _resultValue.kind = kind;
            _resultValue.location = location;
            _resultValue.name = name;
            _resultValue.outboundIpAddresses = outboundIpAddresses;
            _resultValue.possibleOutboundIpAddresses = possibleOutboundIpAddresses;
            _resultValue.resourceGroupName = resourceGroupName;
            _resultValue.siteConfig = siteConfig;
            _resultValue.siteCredentials = siteCredentials;
            _resultValue.storageAccountAccessKey = storageAccountAccessKey;
            _resultValue.storageAccountName = storageAccountName;
            _resultValue.storageAccountShareName = storageAccountShareName;
            _resultValue.tags = tags;
            _resultValue.useExtensionBundle = useExtensionBundle;
            _resultValue.version = version;
            _resultValue.virtualNetworkSubnetId = virtualNetworkSubnetId;
            return _resultValue;
        }
    }
}
