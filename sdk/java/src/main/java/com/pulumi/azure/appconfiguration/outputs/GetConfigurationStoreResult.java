// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appconfiguration.outputs;

import com.pulumi.azure.appconfiguration.outputs.GetConfigurationStoreEncryption;
import com.pulumi.azure.appconfiguration.outputs.GetConfigurationStoreIdentity;
import com.pulumi.azure.appconfiguration.outputs.GetConfigurationStorePrimaryReadKey;
import com.pulumi.azure.appconfiguration.outputs.GetConfigurationStorePrimaryWriteKey;
import com.pulumi.azure.appconfiguration.outputs.GetConfigurationStoreReplica;
import com.pulumi.azure.appconfiguration.outputs.GetConfigurationStoreSecondaryReadKey;
import com.pulumi.azure.appconfiguration.outputs.GetConfigurationStoreSecondaryWriteKey;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetConfigurationStoreResult {
    /**
     * @return An `encryption` block as defined below.
     * 
     */
    private List<GetConfigurationStoreEncryption> encryptions;
    /**
     * @return The URL of the App Configuration Replica.
     * 
     */
    private String endpoint;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private List<GetConfigurationStoreIdentity> identities;
    /**
     * @return Whether local authentication methods is enabled.
     * 
     */
    private Boolean localAuthEnabled;
    /**
     * @return The supported Azure location where the App Configuration Replica exists.
     * 
     */
    private String location;
    /**
     * @return The name of the App Configuration Replica.
     * 
     */
    private String name;
    /**
     * @return A `primary_read_key` block as defined below containing the primary read access key.
     * 
     */
    private List<GetConfigurationStorePrimaryReadKey> primaryReadKeys;
    /**
     * @return A `primary_write_key` block as defined below containing the primary write access key.
     * 
     */
    private List<GetConfigurationStorePrimaryWriteKey> primaryWriteKeys;
    /**
     * @return The Public Network Access setting of this App Configuration.
     * 
     */
    private String publicNetworkAccess;
    private Boolean publicNetworkAccessEnabled;
    /**
     * @return Whether Purge Protection is enabled.
     * 
     */
    private Boolean purgeProtectionEnabled;
    /**
     * @return One or more `replica` blocks as defined below.
     * 
     */
    private List<GetConfigurationStoreReplica> replicas;
    private String resourceGroupName;
    /**
     * @return A `secondary_read_key` block as defined below containing the secondary read access key.
     * 
     */
    private List<GetConfigurationStoreSecondaryReadKey> secondaryReadKeys;
    /**
     * @return A `secondary_write_key` block as defined below containing the secondary write access key.
     * 
     */
    private List<GetConfigurationStoreSecondaryWriteKey> secondaryWriteKeys;
    /**
     * @return The name of the SKU used for this App Configuration.
     * 
     */
    private String sku;
    /**
     * @return The number of days that items should be retained for once soft-deleted.
     * 
     */
    private Integer softDeleteRetentionDays;
    /**
     * @return A mapping of tags assigned to the App Configuration.
     * 
     */
    private Map<String,String> tags;

    private GetConfigurationStoreResult() {}
    /**
     * @return An `encryption` block as defined below.
     * 
     */
    public List<GetConfigurationStoreEncryption> encryptions() {
        return this.encryptions;
    }
    /**
     * @return The URL of the App Configuration Replica.
     * 
     */
    public String endpoint() {
        return this.endpoint;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public List<GetConfigurationStoreIdentity> identities() {
        return this.identities;
    }
    /**
     * @return Whether local authentication methods is enabled.
     * 
     */
    public Boolean localAuthEnabled() {
        return this.localAuthEnabled;
    }
    /**
     * @return The supported Azure location where the App Configuration Replica exists.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return The name of the App Configuration Replica.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return A `primary_read_key` block as defined below containing the primary read access key.
     * 
     */
    public List<GetConfigurationStorePrimaryReadKey> primaryReadKeys() {
        return this.primaryReadKeys;
    }
    /**
     * @return A `primary_write_key` block as defined below containing the primary write access key.
     * 
     */
    public List<GetConfigurationStorePrimaryWriteKey> primaryWriteKeys() {
        return this.primaryWriteKeys;
    }
    /**
     * @return The Public Network Access setting of this App Configuration.
     * 
     */
    public String publicNetworkAccess() {
        return this.publicNetworkAccess;
    }
    public Boolean publicNetworkAccessEnabled() {
        return this.publicNetworkAccessEnabled;
    }
    /**
     * @return Whether Purge Protection is enabled.
     * 
     */
    public Boolean purgeProtectionEnabled() {
        return this.purgeProtectionEnabled;
    }
    /**
     * @return One or more `replica` blocks as defined below.
     * 
     */
    public List<GetConfigurationStoreReplica> replicas() {
        return this.replicas;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return A `secondary_read_key` block as defined below containing the secondary read access key.
     * 
     */
    public List<GetConfigurationStoreSecondaryReadKey> secondaryReadKeys() {
        return this.secondaryReadKeys;
    }
    /**
     * @return A `secondary_write_key` block as defined below containing the secondary write access key.
     * 
     */
    public List<GetConfigurationStoreSecondaryWriteKey> secondaryWriteKeys() {
        return this.secondaryWriteKeys;
    }
    /**
     * @return The name of the SKU used for this App Configuration.
     * 
     */
    public String sku() {
        return this.sku;
    }
    /**
     * @return The number of days that items should be retained for once soft-deleted.
     * 
     */
    public Integer softDeleteRetentionDays() {
        return this.softDeleteRetentionDays;
    }
    /**
     * @return A mapping of tags assigned to the App Configuration.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConfigurationStoreResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetConfigurationStoreEncryption> encryptions;
        private String endpoint;
        private String id;
        private List<GetConfigurationStoreIdentity> identities;
        private Boolean localAuthEnabled;
        private String location;
        private String name;
        private List<GetConfigurationStorePrimaryReadKey> primaryReadKeys;
        private List<GetConfigurationStorePrimaryWriteKey> primaryWriteKeys;
        private String publicNetworkAccess;
        private Boolean publicNetworkAccessEnabled;
        private Boolean purgeProtectionEnabled;
        private List<GetConfigurationStoreReplica> replicas;
        private String resourceGroupName;
        private List<GetConfigurationStoreSecondaryReadKey> secondaryReadKeys;
        private List<GetConfigurationStoreSecondaryWriteKey> secondaryWriteKeys;
        private String sku;
        private Integer softDeleteRetentionDays;
        private Map<String,String> tags;
        public Builder() {}
        public Builder(GetConfigurationStoreResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.encryptions = defaults.encryptions;
    	      this.endpoint = defaults.endpoint;
    	      this.id = defaults.id;
    	      this.identities = defaults.identities;
    	      this.localAuthEnabled = defaults.localAuthEnabled;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.primaryReadKeys = defaults.primaryReadKeys;
    	      this.primaryWriteKeys = defaults.primaryWriteKeys;
    	      this.publicNetworkAccess = defaults.publicNetworkAccess;
    	      this.publicNetworkAccessEnabled = defaults.publicNetworkAccessEnabled;
    	      this.purgeProtectionEnabled = defaults.purgeProtectionEnabled;
    	      this.replicas = defaults.replicas;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.secondaryReadKeys = defaults.secondaryReadKeys;
    	      this.secondaryWriteKeys = defaults.secondaryWriteKeys;
    	      this.sku = defaults.sku;
    	      this.softDeleteRetentionDays = defaults.softDeleteRetentionDays;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder encryptions(List<GetConfigurationStoreEncryption> encryptions) {
            this.encryptions = Objects.requireNonNull(encryptions);
            return this;
        }
        public Builder encryptions(GetConfigurationStoreEncryption... encryptions) {
            return encryptions(List.of(encryptions));
        }
        @CustomType.Setter
        public Builder endpoint(String endpoint) {
            this.endpoint = Objects.requireNonNull(endpoint);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder identities(List<GetConfigurationStoreIdentity> identities) {
            this.identities = Objects.requireNonNull(identities);
            return this;
        }
        public Builder identities(GetConfigurationStoreIdentity... identities) {
            return identities(List.of(identities));
        }
        @CustomType.Setter
        public Builder localAuthEnabled(Boolean localAuthEnabled) {
            this.localAuthEnabled = Objects.requireNonNull(localAuthEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder primaryReadKeys(List<GetConfigurationStorePrimaryReadKey> primaryReadKeys) {
            this.primaryReadKeys = Objects.requireNonNull(primaryReadKeys);
            return this;
        }
        public Builder primaryReadKeys(GetConfigurationStorePrimaryReadKey... primaryReadKeys) {
            return primaryReadKeys(List.of(primaryReadKeys));
        }
        @CustomType.Setter
        public Builder primaryWriteKeys(List<GetConfigurationStorePrimaryWriteKey> primaryWriteKeys) {
            this.primaryWriteKeys = Objects.requireNonNull(primaryWriteKeys);
            return this;
        }
        public Builder primaryWriteKeys(GetConfigurationStorePrimaryWriteKey... primaryWriteKeys) {
            return primaryWriteKeys(List.of(primaryWriteKeys));
        }
        @CustomType.Setter
        public Builder publicNetworkAccess(String publicNetworkAccess) {
            this.publicNetworkAccess = Objects.requireNonNull(publicNetworkAccess);
            return this;
        }
        @CustomType.Setter
        public Builder publicNetworkAccessEnabled(Boolean publicNetworkAccessEnabled) {
            this.publicNetworkAccessEnabled = Objects.requireNonNull(publicNetworkAccessEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder purgeProtectionEnabled(Boolean purgeProtectionEnabled) {
            this.purgeProtectionEnabled = Objects.requireNonNull(purgeProtectionEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder replicas(List<GetConfigurationStoreReplica> replicas) {
            this.replicas = Objects.requireNonNull(replicas);
            return this;
        }
        public Builder replicas(GetConfigurationStoreReplica... replicas) {
            return replicas(List.of(replicas));
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryReadKeys(List<GetConfigurationStoreSecondaryReadKey> secondaryReadKeys) {
            this.secondaryReadKeys = Objects.requireNonNull(secondaryReadKeys);
            return this;
        }
        public Builder secondaryReadKeys(GetConfigurationStoreSecondaryReadKey... secondaryReadKeys) {
            return secondaryReadKeys(List.of(secondaryReadKeys));
        }
        @CustomType.Setter
        public Builder secondaryWriteKeys(List<GetConfigurationStoreSecondaryWriteKey> secondaryWriteKeys) {
            this.secondaryWriteKeys = Objects.requireNonNull(secondaryWriteKeys);
            return this;
        }
        public Builder secondaryWriteKeys(GetConfigurationStoreSecondaryWriteKey... secondaryWriteKeys) {
            return secondaryWriteKeys(List.of(secondaryWriteKeys));
        }
        @CustomType.Setter
        public Builder sku(String sku) {
            this.sku = Objects.requireNonNull(sku);
            return this;
        }
        @CustomType.Setter
        public Builder softDeleteRetentionDays(Integer softDeleteRetentionDays) {
            this.softDeleteRetentionDays = Objects.requireNonNull(softDeleteRetentionDays);
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public GetConfigurationStoreResult build() {
            final var o = new GetConfigurationStoreResult();
            o.encryptions = encryptions;
            o.endpoint = endpoint;
            o.id = id;
            o.identities = identities;
            o.localAuthEnabled = localAuthEnabled;
            o.location = location;
            o.name = name;
            o.primaryReadKeys = primaryReadKeys;
            o.primaryWriteKeys = primaryWriteKeys;
            o.publicNetworkAccess = publicNetworkAccess;
            o.publicNetworkAccessEnabled = publicNetworkAccessEnabled;
            o.purgeProtectionEnabled = purgeProtectionEnabled;
            o.replicas = replicas;
            o.resourceGroupName = resourceGroupName;
            o.secondaryReadKeys = secondaryReadKeys;
            o.secondaryWriteKeys = secondaryWriteKeys;
            o.sku = sku;
            o.softDeleteRetentionDays = softDeleteRetentionDays;
            o.tags = tags;
            return o;
        }
    }
}
