// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.desktopvirtualization.outputs;

import com.pulumi.azure.desktopvirtualization.outputs.HostPoolScheduledAgentUpdatesSchedule;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class HostPoolScheduledAgentUpdates {
    /**
     * @return Enables or disables scheduled updates of the AVD agent components (RDAgent, Geneva Monitoring agent, and side-by-side stack) on session hosts. If this is enabled then up to two `schedule` blocks must be defined. Default is `false`.
     * 
     * &gt; **NOTE:** if `enabled` is set to `true` then at least one and a maximum of two `schedule` blocks must be provided.
     * 
     */
    private @Nullable Boolean enabled;
    /**
     * @return A `schedule` block as defined below. A maximum of two blocks can be added.
     * 
     */
    private @Nullable List<HostPoolScheduledAgentUpdatesSchedule> schedules;
    /**
     * @return Specifies the time zone in which the agent update schedule will apply, [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/). If `use_session_host_timezone` is enabled then it will override this setting. Default is `UTC`
     * 
     */
    private @Nullable String timezone;
    /**
     * @return Specifies whether scheduled agent updates should be applied based on the timezone of the affected session host. If configured then this setting overrides `timezone`. Default is `false`.
     * 
     */
    private @Nullable Boolean useSessionHostTimezone;

    private HostPoolScheduledAgentUpdates() {}
    /**
     * @return Enables or disables scheduled updates of the AVD agent components (RDAgent, Geneva Monitoring agent, and side-by-side stack) on session hosts. If this is enabled then up to two `schedule` blocks must be defined. Default is `false`.
     * 
     * &gt; **NOTE:** if `enabled` is set to `true` then at least one and a maximum of two `schedule` blocks must be provided.
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    /**
     * @return A `schedule` block as defined below. A maximum of two blocks can be added.
     * 
     */
    public List<HostPoolScheduledAgentUpdatesSchedule> schedules() {
        return this.schedules == null ? List.of() : this.schedules;
    }
    /**
     * @return Specifies the time zone in which the agent update schedule will apply, [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/). If `use_session_host_timezone` is enabled then it will override this setting. Default is `UTC`
     * 
     */
    public Optional<String> timezone() {
        return Optional.ofNullable(this.timezone);
    }
    /**
     * @return Specifies whether scheduled agent updates should be applied based on the timezone of the affected session host. If configured then this setting overrides `timezone`. Default is `false`.
     * 
     */
    public Optional<Boolean> useSessionHostTimezone() {
        return Optional.ofNullable(this.useSessionHostTimezone);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HostPoolScheduledAgentUpdates defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean enabled;
        private @Nullable List<HostPoolScheduledAgentUpdatesSchedule> schedules;
        private @Nullable String timezone;
        private @Nullable Boolean useSessionHostTimezone;
        public Builder() {}
        public Builder(HostPoolScheduledAgentUpdates defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enabled = defaults.enabled;
    	      this.schedules = defaults.schedules;
    	      this.timezone = defaults.timezone;
    	      this.useSessionHostTimezone = defaults.useSessionHostTimezone;
        }

        @CustomType.Setter
        public Builder enabled(@Nullable Boolean enabled) {

            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder schedules(@Nullable List<HostPoolScheduledAgentUpdatesSchedule> schedules) {

            this.schedules = schedules;
            return this;
        }
        public Builder schedules(HostPoolScheduledAgentUpdatesSchedule... schedules) {
            return schedules(List.of(schedules));
        }
        @CustomType.Setter
        public Builder timezone(@Nullable String timezone) {

            this.timezone = timezone;
            return this;
        }
        @CustomType.Setter
        public Builder useSessionHostTimezone(@Nullable Boolean useSessionHostTimezone) {

            this.useSessionHostTimezone = useSessionHostTimezone;
            return this;
        }
        public HostPoolScheduledAgentUpdates build() {
            final var _resultValue = new HostPoolScheduledAgentUpdates();
            _resultValue.enabled = enabled;
            _resultValue.schedules = schedules;
            _resultValue.timezone = timezone;
            _resultValue.useSessionHostTimezone = useSessionHostTimezone;
            return _resultValue;
        }
    }
}
