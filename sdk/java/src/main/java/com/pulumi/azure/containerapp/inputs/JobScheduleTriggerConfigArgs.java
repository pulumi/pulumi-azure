// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerapp.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class JobScheduleTriggerConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final JobScheduleTriggerConfigArgs Empty = new JobScheduleTriggerConfigArgs();

    /**
     * Cron formatted repeating schedule of a Cron Job.
     * 
     */
    @Import(name="cronExpression", required=true)
    private Output<String> cronExpression;

    /**
     * @return Cron formatted repeating schedule of a Cron Job.
     * 
     */
    public Output<String> cronExpression() {
        return this.cronExpression;
    }

    /**
     * Number of parallel replicas of a job that can run at a given time.
     * 
     */
    @Import(name="parallelism")
    private @Nullable Output<Integer> parallelism;

    /**
     * @return Number of parallel replicas of a job that can run at a given time.
     * 
     */
    public Optional<Output<Integer>> parallelism() {
        return Optional.ofNullable(this.parallelism);
    }

    /**
     * Minimum number of successful replica completions before overall job completion.
     * 
     */
    @Import(name="replicaCompletionCount")
    private @Nullable Output<Integer> replicaCompletionCount;

    /**
     * @return Minimum number of successful replica completions before overall job completion.
     * 
     */
    public Optional<Output<Integer>> replicaCompletionCount() {
        return Optional.ofNullable(this.replicaCompletionCount);
    }

    private JobScheduleTriggerConfigArgs() {}

    private JobScheduleTriggerConfigArgs(JobScheduleTriggerConfigArgs $) {
        this.cronExpression = $.cronExpression;
        this.parallelism = $.parallelism;
        this.replicaCompletionCount = $.replicaCompletionCount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JobScheduleTriggerConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JobScheduleTriggerConfigArgs $;

        public Builder() {
            $ = new JobScheduleTriggerConfigArgs();
        }

        public Builder(JobScheduleTriggerConfigArgs defaults) {
            $ = new JobScheduleTriggerConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cronExpression Cron formatted repeating schedule of a Cron Job.
         * 
         * @return builder
         * 
         */
        public Builder cronExpression(Output<String> cronExpression) {
            $.cronExpression = cronExpression;
            return this;
        }

        /**
         * @param cronExpression Cron formatted repeating schedule of a Cron Job.
         * 
         * @return builder
         * 
         */
        public Builder cronExpression(String cronExpression) {
            return cronExpression(Output.of(cronExpression));
        }

        /**
         * @param parallelism Number of parallel replicas of a job that can run at a given time.
         * 
         * @return builder
         * 
         */
        public Builder parallelism(@Nullable Output<Integer> parallelism) {
            $.parallelism = parallelism;
            return this;
        }

        /**
         * @param parallelism Number of parallel replicas of a job that can run at a given time.
         * 
         * @return builder
         * 
         */
        public Builder parallelism(Integer parallelism) {
            return parallelism(Output.of(parallelism));
        }

        /**
         * @param replicaCompletionCount Minimum number of successful replica completions before overall job completion.
         * 
         * @return builder
         * 
         */
        public Builder replicaCompletionCount(@Nullable Output<Integer> replicaCompletionCount) {
            $.replicaCompletionCount = replicaCompletionCount;
            return this;
        }

        /**
         * @param replicaCompletionCount Minimum number of successful replica completions before overall job completion.
         * 
         * @return builder
         * 
         */
        public Builder replicaCompletionCount(Integer replicaCompletionCount) {
            return replicaCompletionCount(Output.of(replicaCompletionCount));
        }

        public JobScheduleTriggerConfigArgs build() {
            if ($.cronExpression == null) {
                throw new MissingRequiredPropertyException("JobScheduleTriggerConfigArgs", "cronExpression");
            }
            return $;
        }
    }

}
