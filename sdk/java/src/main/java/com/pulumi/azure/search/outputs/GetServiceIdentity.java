// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.search.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetServiceIdentity {
    /**
     * @return The (Client) ID of the Service Principal.
     * 
     */
    private String principalId;
    /**
     * @return The ID of the Tenant the Service Principal is assigned in.
     * 
     */
    private String tenantId;
    /**
     * @return The identity type of this Managed Service Identity.
     * 
     */
    private String type;

    private GetServiceIdentity() {}
    /**
     * @return The (Client) ID of the Service Principal.
     * 
     */
    public String principalId() {
        return this.principalId;
    }
    /**
     * @return The ID of the Tenant the Service Principal is assigned in.
     * 
     */
    public String tenantId() {
        return this.tenantId;
    }
    /**
     * @return The identity type of this Managed Service Identity.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceIdentity defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String principalId;
        private String tenantId;
        private String type;
        public Builder() {}
        public Builder(GetServiceIdentity defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.principalId = defaults.principalId;
    	      this.tenantId = defaults.tenantId;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder principalId(String principalId) {
            if (principalId == null) {
              throw new MissingRequiredPropertyException("GetServiceIdentity", "principalId");
            }
            this.principalId = principalId;
            return this;
        }
        @CustomType.Setter
        public Builder tenantId(String tenantId) {
            if (tenantId == null) {
              throw new MissingRequiredPropertyException("GetServiceIdentity", "tenantId");
            }
            this.tenantId = tenantId;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetServiceIdentity", "type");
            }
            this.type = type;
            return this;
        }
        public GetServiceIdentity build() {
            final var _resultValue = new GetServiceIdentity();
            _resultValue.principalId = principalId;
            _resultValue.tenantId = tenantId;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
