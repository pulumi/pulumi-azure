// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.waf.inputs;

import com.pulumi.azure.waf.inputs.PolicyPolicySettingsLogScrubbingArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PolicyPolicySettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final PolicyPolicySettingsArgs Empty = new PolicyPolicySettingsArgs();

    /**
     * Describes if the policy is in enabled state or disabled state. Defaults to `true`.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Describes if the policy is in enabled state or disabled state. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Whether the firewall should block a request with upload size greater then `fileUploadLimitInMb`.
     * 
     */
    @Import(name="fileUploadEnforcement")
    private @Nullable Output<Boolean> fileUploadEnforcement;

    /**
     * @return Whether the firewall should block a request with upload size greater then `fileUploadLimitInMb`.
     * 
     */
    public Optional<Output<Boolean>> fileUploadEnforcement() {
        return Optional.ofNullable(this.fileUploadEnforcement);
    }

    /**
     * The File Upload Limit in MB. Accepted values are in the range `1` to `4000`. Defaults to `100`.
     * 
     */
    @Import(name="fileUploadLimitInMb")
    private @Nullable Output<Integer> fileUploadLimitInMb;

    /**
     * @return The File Upload Limit in MB. Accepted values are in the range `1` to `4000`. Defaults to `100`.
     * 
     */
    public Optional<Output<Integer>> fileUploadLimitInMb() {
        return Optional.ofNullable(this.fileUploadLimitInMb);
    }

    /**
     * Specifies the JavaScript challenge cookie validity lifetime in minutes. The user is challenged after the lifetime expires. Accepted values are in the range `5` to `1440`. Defaults to `30`.
     * 
     */
    @Import(name="jsChallengeCookieExpirationInMinutes")
    private @Nullable Output<Integer> jsChallengeCookieExpirationInMinutes;

    /**
     * @return Specifies the JavaScript challenge cookie validity lifetime in minutes. The user is challenged after the lifetime expires. Accepted values are in the range `5` to `1440`. Defaults to `30`.
     * 
     */
    public Optional<Output<Integer>> jsChallengeCookieExpirationInMinutes() {
        return Optional.ofNullable(this.jsChallengeCookieExpirationInMinutes);
    }

    /**
     * One `logScrubbing` block as defined below.
     * 
     */
    @Import(name="logScrubbing")
    private @Nullable Output<PolicyPolicySettingsLogScrubbingArgs> logScrubbing;

    /**
     * @return One `logScrubbing` block as defined below.
     * 
     */
    public Optional<Output<PolicyPolicySettingsLogScrubbingArgs>> logScrubbing() {
        return Optional.ofNullable(this.logScrubbing);
    }

    /**
     * The Maximum Request Body Size in KB. Accepted values are in the range `8` to `2000`. Defaults to `128`.
     * 
     */
    @Import(name="maxRequestBodySizeInKb")
    private @Nullable Output<Integer> maxRequestBodySizeInKb;

    /**
     * @return The Maximum Request Body Size in KB. Accepted values are in the range `8` to `2000`. Defaults to `128`.
     * 
     */
    public Optional<Output<Integer>> maxRequestBodySizeInKb() {
        return Optional.ofNullable(this.maxRequestBodySizeInKb);
    }

    /**
     * Describes if it is in detection mode or prevention mode at the policy level. Valid values are `Detection` and `Prevention`. Defaults to `Prevention`.
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return Describes if it is in detection mode or prevention mode at the policy level. Valid values are `Detection` and `Prevention`. Defaults to `Prevention`.
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * Is Request Body Inspection enabled? Defaults to `true`.
     * 
     */
    @Import(name="requestBodyCheck")
    private @Nullable Output<Boolean> requestBodyCheck;

    /**
     * @return Is Request Body Inspection enabled? Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> requestBodyCheck() {
        return Optional.ofNullable(this.requestBodyCheck);
    }

    /**
     * Whether the firewall should block a request with body size greater then `maxRequestBodySizeInKb`. Defaults to `true`.
     * 
     */
    @Import(name="requestBodyEnforcement")
    private @Nullable Output<Boolean> requestBodyEnforcement;

    /**
     * @return Whether the firewall should block a request with body size greater then `maxRequestBodySizeInKb`. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> requestBodyEnforcement() {
        return Optional.ofNullable(this.requestBodyEnforcement);
    }

    /**
     * Specifies the maximum request body inspection limit in KB for the Web Application Firewall. Defaults to `128`.
     * 
     */
    @Import(name="requestBodyInspectLimitInKb")
    private @Nullable Output<Integer> requestBodyInspectLimitInKb;

    /**
     * @return Specifies the maximum request body inspection limit in KB for the Web Application Firewall. Defaults to `128`.
     * 
     */
    public Optional<Output<Integer>> requestBodyInspectLimitInKb() {
        return Optional.ofNullable(this.requestBodyInspectLimitInKb);
    }

    private PolicyPolicySettingsArgs() {}

    private PolicyPolicySettingsArgs(PolicyPolicySettingsArgs $) {
        this.enabled = $.enabled;
        this.fileUploadEnforcement = $.fileUploadEnforcement;
        this.fileUploadLimitInMb = $.fileUploadLimitInMb;
        this.jsChallengeCookieExpirationInMinutes = $.jsChallengeCookieExpirationInMinutes;
        this.logScrubbing = $.logScrubbing;
        this.maxRequestBodySizeInKb = $.maxRequestBodySizeInKb;
        this.mode = $.mode;
        this.requestBodyCheck = $.requestBodyCheck;
        this.requestBodyEnforcement = $.requestBodyEnforcement;
        this.requestBodyInspectLimitInKb = $.requestBodyInspectLimitInKb;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PolicyPolicySettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PolicyPolicySettingsArgs $;

        public Builder() {
            $ = new PolicyPolicySettingsArgs();
        }

        public Builder(PolicyPolicySettingsArgs defaults) {
            $ = new PolicyPolicySettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled Describes if the policy is in enabled state or disabled state. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Describes if the policy is in enabled state or disabled state. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param fileUploadEnforcement Whether the firewall should block a request with upload size greater then `fileUploadLimitInMb`.
         * 
         * @return builder
         * 
         */
        public Builder fileUploadEnforcement(@Nullable Output<Boolean> fileUploadEnforcement) {
            $.fileUploadEnforcement = fileUploadEnforcement;
            return this;
        }

        /**
         * @param fileUploadEnforcement Whether the firewall should block a request with upload size greater then `fileUploadLimitInMb`.
         * 
         * @return builder
         * 
         */
        public Builder fileUploadEnforcement(Boolean fileUploadEnforcement) {
            return fileUploadEnforcement(Output.of(fileUploadEnforcement));
        }

        /**
         * @param fileUploadLimitInMb The File Upload Limit in MB. Accepted values are in the range `1` to `4000`. Defaults to `100`.
         * 
         * @return builder
         * 
         */
        public Builder fileUploadLimitInMb(@Nullable Output<Integer> fileUploadLimitInMb) {
            $.fileUploadLimitInMb = fileUploadLimitInMb;
            return this;
        }

        /**
         * @param fileUploadLimitInMb The File Upload Limit in MB. Accepted values are in the range `1` to `4000`. Defaults to `100`.
         * 
         * @return builder
         * 
         */
        public Builder fileUploadLimitInMb(Integer fileUploadLimitInMb) {
            return fileUploadLimitInMb(Output.of(fileUploadLimitInMb));
        }

        /**
         * @param jsChallengeCookieExpirationInMinutes Specifies the JavaScript challenge cookie validity lifetime in minutes. The user is challenged after the lifetime expires. Accepted values are in the range `5` to `1440`. Defaults to `30`.
         * 
         * @return builder
         * 
         */
        public Builder jsChallengeCookieExpirationInMinutes(@Nullable Output<Integer> jsChallengeCookieExpirationInMinutes) {
            $.jsChallengeCookieExpirationInMinutes = jsChallengeCookieExpirationInMinutes;
            return this;
        }

        /**
         * @param jsChallengeCookieExpirationInMinutes Specifies the JavaScript challenge cookie validity lifetime in minutes. The user is challenged after the lifetime expires. Accepted values are in the range `5` to `1440`. Defaults to `30`.
         * 
         * @return builder
         * 
         */
        public Builder jsChallengeCookieExpirationInMinutes(Integer jsChallengeCookieExpirationInMinutes) {
            return jsChallengeCookieExpirationInMinutes(Output.of(jsChallengeCookieExpirationInMinutes));
        }

        /**
         * @param logScrubbing One `logScrubbing` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder logScrubbing(@Nullable Output<PolicyPolicySettingsLogScrubbingArgs> logScrubbing) {
            $.logScrubbing = logScrubbing;
            return this;
        }

        /**
         * @param logScrubbing One `logScrubbing` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder logScrubbing(PolicyPolicySettingsLogScrubbingArgs logScrubbing) {
            return logScrubbing(Output.of(logScrubbing));
        }

        /**
         * @param maxRequestBodySizeInKb The Maximum Request Body Size in KB. Accepted values are in the range `8` to `2000`. Defaults to `128`.
         * 
         * @return builder
         * 
         */
        public Builder maxRequestBodySizeInKb(@Nullable Output<Integer> maxRequestBodySizeInKb) {
            $.maxRequestBodySizeInKb = maxRequestBodySizeInKb;
            return this;
        }

        /**
         * @param maxRequestBodySizeInKb The Maximum Request Body Size in KB. Accepted values are in the range `8` to `2000`. Defaults to `128`.
         * 
         * @return builder
         * 
         */
        public Builder maxRequestBodySizeInKb(Integer maxRequestBodySizeInKb) {
            return maxRequestBodySizeInKb(Output.of(maxRequestBodySizeInKb));
        }

        /**
         * @param mode Describes if it is in detection mode or prevention mode at the policy level. Valid values are `Detection` and `Prevention`. Defaults to `Prevention`.
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode Describes if it is in detection mode or prevention mode at the policy level. Valid values are `Detection` and `Prevention`. Defaults to `Prevention`.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param requestBodyCheck Is Request Body Inspection enabled? Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder requestBodyCheck(@Nullable Output<Boolean> requestBodyCheck) {
            $.requestBodyCheck = requestBodyCheck;
            return this;
        }

        /**
         * @param requestBodyCheck Is Request Body Inspection enabled? Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder requestBodyCheck(Boolean requestBodyCheck) {
            return requestBodyCheck(Output.of(requestBodyCheck));
        }

        /**
         * @param requestBodyEnforcement Whether the firewall should block a request with body size greater then `maxRequestBodySizeInKb`. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder requestBodyEnforcement(@Nullable Output<Boolean> requestBodyEnforcement) {
            $.requestBodyEnforcement = requestBodyEnforcement;
            return this;
        }

        /**
         * @param requestBodyEnforcement Whether the firewall should block a request with body size greater then `maxRequestBodySizeInKb`. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder requestBodyEnforcement(Boolean requestBodyEnforcement) {
            return requestBodyEnforcement(Output.of(requestBodyEnforcement));
        }

        /**
         * @param requestBodyInspectLimitInKb Specifies the maximum request body inspection limit in KB for the Web Application Firewall. Defaults to `128`.
         * 
         * @return builder
         * 
         */
        public Builder requestBodyInspectLimitInKb(@Nullable Output<Integer> requestBodyInspectLimitInKb) {
            $.requestBodyInspectLimitInKb = requestBodyInspectLimitInKb;
            return this;
        }

        /**
         * @param requestBodyInspectLimitInKb Specifies the maximum request body inspection limit in KB for the Web Application Firewall. Defaults to `128`.
         * 
         * @return builder
         * 
         */
        public Builder requestBodyInspectLimitInKb(Integer requestBodyInspectLimitInKb) {
            return requestBodyInspectLimitInKb(Output.of(requestBodyInspectLimitInKb));
        }

        public PolicyPolicySettingsArgs build() {
            return $;
        }
    }

}
