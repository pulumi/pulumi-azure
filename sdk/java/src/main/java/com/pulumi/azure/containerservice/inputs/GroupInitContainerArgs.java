// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerservice.inputs;

import com.pulumi.azure.containerservice.inputs.GroupInitContainerSecurityArgs;
import com.pulumi.azure.containerservice.inputs.GroupInitContainerVolumeArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GroupInitContainerArgs extends com.pulumi.resources.ResourceArgs {

    public static final GroupInitContainerArgs Empty = new GroupInitContainerArgs();

    /**
     * A list of commands which should be run on the container. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="commands")
    private @Nullable Output<List<String>> commands;

    /**
     * @return A list of commands which should be run on the container. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<List<String>>> commands() {
        return Optional.ofNullable(this.commands);
    }

    /**
     * A list of environment variables to be set on the container. Specified as a map of name/value pairs. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="environmentVariables")
    private @Nullable Output<Map<String,String>> environmentVariables;

    /**
     * @return A list of environment variables to be set on the container. Specified as a map of name/value pairs. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<Map<String,String>>> environmentVariables() {
        return Optional.ofNullable(this.environmentVariables);
    }

    /**
     * The container image name. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="image", required=true)
    private Output<String> image;

    /**
     * @return The container image name. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> image() {
        return this.image;
    }

    /**
     * Specifies the name of the Container. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Specifies the name of the Container. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * A list of sensitive environment variables to be set on the container. Specified as a map of name/value pairs. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="secureEnvironmentVariables")
    private @Nullable Output<Map<String,String>> secureEnvironmentVariables;

    /**
     * @return A list of sensitive environment variables to be set on the container. Specified as a map of name/value pairs. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<Map<String,String>>> secureEnvironmentVariables() {
        return Optional.ofNullable(this.secureEnvironmentVariables);
    }

    /**
     * The definition of the security context for this container as documented in the `security` block below. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="securities")
    private @Nullable Output<List<GroupInitContainerSecurityArgs>> securities;

    /**
     * @return The definition of the security context for this container as documented in the `security` block below. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<List<GroupInitContainerSecurityArgs>>> securities() {
        return Optional.ofNullable(this.securities);
    }

    /**
     * The definition of a volume mount for this container as documented in the `volume` block below. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="volumes")
    private @Nullable Output<List<GroupInitContainerVolumeArgs>> volumes;

    /**
     * @return The definition of a volume mount for this container as documented in the `volume` block below. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<List<GroupInitContainerVolumeArgs>>> volumes() {
        return Optional.ofNullable(this.volumes);
    }

    private GroupInitContainerArgs() {}

    private GroupInitContainerArgs(GroupInitContainerArgs $) {
        this.commands = $.commands;
        this.environmentVariables = $.environmentVariables;
        this.image = $.image;
        this.name = $.name;
        this.secureEnvironmentVariables = $.secureEnvironmentVariables;
        this.securities = $.securities;
        this.volumes = $.volumes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GroupInitContainerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GroupInitContainerArgs $;

        public Builder() {
            $ = new GroupInitContainerArgs();
        }

        public Builder(GroupInitContainerArgs defaults) {
            $ = new GroupInitContainerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param commands A list of commands which should be run on the container. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder commands(@Nullable Output<List<String>> commands) {
            $.commands = commands;
            return this;
        }

        /**
         * @param commands A list of commands which should be run on the container. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder commands(List<String> commands) {
            return commands(Output.of(commands));
        }

        /**
         * @param commands A list of commands which should be run on the container. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder commands(String... commands) {
            return commands(List.of(commands));
        }

        /**
         * @param environmentVariables A list of environment variables to be set on the container. Specified as a map of name/value pairs. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder environmentVariables(@Nullable Output<Map<String,String>> environmentVariables) {
            $.environmentVariables = environmentVariables;
            return this;
        }

        /**
         * @param environmentVariables A list of environment variables to be set on the container. Specified as a map of name/value pairs. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder environmentVariables(Map<String,String> environmentVariables) {
            return environmentVariables(Output.of(environmentVariables));
        }

        /**
         * @param image The container image name. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder image(Output<String> image) {
            $.image = image;
            return this;
        }

        /**
         * @param image The container image name. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder image(String image) {
            return image(Output.of(image));
        }

        /**
         * @param name Specifies the name of the Container. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of the Container. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param secureEnvironmentVariables A list of sensitive environment variables to be set on the container. Specified as a map of name/value pairs. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder secureEnvironmentVariables(@Nullable Output<Map<String,String>> secureEnvironmentVariables) {
            $.secureEnvironmentVariables = secureEnvironmentVariables;
            return this;
        }

        /**
         * @param secureEnvironmentVariables A list of sensitive environment variables to be set on the container. Specified as a map of name/value pairs. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder secureEnvironmentVariables(Map<String,String> secureEnvironmentVariables) {
            return secureEnvironmentVariables(Output.of(secureEnvironmentVariables));
        }

        /**
         * @param securities The definition of the security context for this container as documented in the `security` block below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder securities(@Nullable Output<List<GroupInitContainerSecurityArgs>> securities) {
            $.securities = securities;
            return this;
        }

        /**
         * @param securities The definition of the security context for this container as documented in the `security` block below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder securities(List<GroupInitContainerSecurityArgs> securities) {
            return securities(Output.of(securities));
        }

        /**
         * @param securities The definition of the security context for this container as documented in the `security` block below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder securities(GroupInitContainerSecurityArgs... securities) {
            return securities(List.of(securities));
        }

        /**
         * @param volumes The definition of a volume mount for this container as documented in the `volume` block below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder volumes(@Nullable Output<List<GroupInitContainerVolumeArgs>> volumes) {
            $.volumes = volumes;
            return this;
        }

        /**
         * @param volumes The definition of a volume mount for this container as documented in the `volume` block below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder volumes(List<GroupInitContainerVolumeArgs> volumes) {
            return volumes(Output.of(volumes));
        }

        /**
         * @param volumes The definition of a volume mount for this container as documented in the `volume` block below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder volumes(GroupInitContainerVolumeArgs... volumes) {
            return volumes(List.of(volumes));
        }

        public GroupInitContainerArgs build() {
            if ($.image == null) {
                throw new MissingRequiredPropertyException("GroupInitContainerArgs", "image");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GroupInitContainerArgs", "name");
            }
            return $;
        }
    }

}
