// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.devtest.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VirtualNetworkSubnetSharedPublicIpAddressAllowedPortArgs extends com.pulumi.resources.ResourceArgs {

    public static final VirtualNetworkSubnetSharedPublicIpAddressAllowedPortArgs Empty = new VirtualNetworkSubnetSharedPublicIpAddressAllowedPortArgs();

    /**
     * The port on the Virtual Machine that the traffic will be sent to.
     * 
     */
    @Import(name="backendPort")
    private @Nullable Output<Integer> backendPort;

    /**
     * @return The port on the Virtual Machine that the traffic will be sent to.
     * 
     */
    public Optional<Output<Integer>> backendPort() {
        return Optional.ofNullable(this.backendPort);
    }

    /**
     * The transport protocol that the traffic will use. Possible values are `TCP` and `UDP`.
     * 
     */
    @Import(name="transportProtocol")
    private @Nullable Output<String> transportProtocol;

    /**
     * @return The transport protocol that the traffic will use. Possible values are `TCP` and `UDP`.
     * 
     */
    public Optional<Output<String>> transportProtocol() {
        return Optional.ofNullable(this.transportProtocol);
    }

    private VirtualNetworkSubnetSharedPublicIpAddressAllowedPortArgs() {}

    private VirtualNetworkSubnetSharedPublicIpAddressAllowedPortArgs(VirtualNetworkSubnetSharedPublicIpAddressAllowedPortArgs $) {
        this.backendPort = $.backendPort;
        this.transportProtocol = $.transportProtocol;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualNetworkSubnetSharedPublicIpAddressAllowedPortArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualNetworkSubnetSharedPublicIpAddressAllowedPortArgs $;

        public Builder() {
            $ = new VirtualNetworkSubnetSharedPublicIpAddressAllowedPortArgs();
        }

        public Builder(VirtualNetworkSubnetSharedPublicIpAddressAllowedPortArgs defaults) {
            $ = new VirtualNetworkSubnetSharedPublicIpAddressAllowedPortArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backendPort The port on the Virtual Machine that the traffic will be sent to.
         * 
         * @return builder
         * 
         */
        public Builder backendPort(@Nullable Output<Integer> backendPort) {
            $.backendPort = backendPort;
            return this;
        }

        /**
         * @param backendPort The port on the Virtual Machine that the traffic will be sent to.
         * 
         * @return builder
         * 
         */
        public Builder backendPort(Integer backendPort) {
            return backendPort(Output.of(backendPort));
        }

        /**
         * @param transportProtocol The transport protocol that the traffic will use. Possible values are `TCP` and `UDP`.
         * 
         * @return builder
         * 
         */
        public Builder transportProtocol(@Nullable Output<String> transportProtocol) {
            $.transportProtocol = transportProtocol;
            return this;
        }

        /**
         * @param transportProtocol The transport protocol that the traffic will use. Possible values are `TCP` and `UDP`.
         * 
         * @return builder
         * 
         */
        public Builder transportProtocol(String transportProtocol) {
            return transportProtocol(Output.of(transportProtocol));
        }

        public VirtualNetworkSubnetSharedPublicIpAddressAllowedPortArgs build() {
            return $;
        }
    }

}
