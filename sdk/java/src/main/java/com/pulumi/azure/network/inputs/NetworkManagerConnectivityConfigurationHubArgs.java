// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class NetworkManagerConnectivityConfigurationHubArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworkManagerConnectivityConfigurationHubArgs Empty = new NetworkManagerConnectivityConfigurationHubArgs();

    /**
     * Specifies the resource ID used as hub in Hub And Spoke topology.
     * 
     */
    @Import(name="resourceId", required=true)
    private Output<String> resourceId;

    /**
     * @return Specifies the resource ID used as hub in Hub And Spoke topology.
     * 
     */
    public Output<String> resourceId() {
        return this.resourceId;
    }

    /**
     * Specifies the resource Type used as hub in Hub And Spoke topology.
     * 
     */
    @Import(name="resourceType", required=true)
    private Output<String> resourceType;

    /**
     * @return Specifies the resource Type used as hub in Hub And Spoke topology.
     * 
     */
    public Output<String> resourceType() {
        return this.resourceType;
    }

    private NetworkManagerConnectivityConfigurationHubArgs() {}

    private NetworkManagerConnectivityConfigurationHubArgs(NetworkManagerConnectivityConfigurationHubArgs $) {
        this.resourceId = $.resourceId;
        this.resourceType = $.resourceType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkManagerConnectivityConfigurationHubArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkManagerConnectivityConfigurationHubArgs $;

        public Builder() {
            $ = new NetworkManagerConnectivityConfigurationHubArgs();
        }

        public Builder(NetworkManagerConnectivityConfigurationHubArgs defaults) {
            $ = new NetworkManagerConnectivityConfigurationHubArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param resourceId Specifies the resource ID used as hub in Hub And Spoke topology.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(Output<String> resourceId) {
            $.resourceId = resourceId;
            return this;
        }

        /**
         * @param resourceId Specifies the resource ID used as hub in Hub And Spoke topology.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(String resourceId) {
            return resourceId(Output.of(resourceId));
        }

        /**
         * @param resourceType Specifies the resource Type used as hub in Hub And Spoke topology.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(Output<String> resourceType) {
            $.resourceType = resourceType;
            return this;
        }

        /**
         * @param resourceType Specifies the resource Type used as hub in Hub And Spoke topology.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(String resourceType) {
            return resourceType(Output.of(resourceType));
        }

        public NetworkManagerConnectivityConfigurationHubArgs build() {
            if ($.resourceId == null) {
                throw new MissingRequiredPropertyException("NetworkManagerConnectivityConfigurationHubArgs", "resourceId");
            }
            if ($.resourceType == null) {
                throw new MissingRequiredPropertyException("NetworkManagerConnectivityConfigurationHubArgs", "resourceType");
            }
            return $;
        }
    }

}
