// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.monitoring.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LogzMonitorPlanArgs extends com.pulumi.resources.ResourceArgs {

    public static final LogzMonitorPlanArgs Empty = new LogzMonitorPlanArgs();

    /**
     * Different billing cycles. Possible values are `MONTHLY` or `WEEKLY`. Changing this forces a new logz Monitor to be created.
     * 
     */
    @Import(name="billingCycle", required=true)
    private Output<String> billingCycle;

    /**
     * @return Different billing cycles. Possible values are `MONTHLY` or `WEEKLY`. Changing this forces a new logz Monitor to be created.
     * 
     */
    public Output<String> billingCycle() {
        return this.billingCycle;
    }

    /**
     * Date when plan was applied. Changing this forces a new logz Monitor to be created.
     * 
     */
    @Import(name="effectiveDate", required=true)
    private Output<String> effectiveDate;

    /**
     * @return Date when plan was applied. Changing this forces a new logz Monitor to be created.
     * 
     */
    public Output<String> effectiveDate() {
        return this.effectiveDate;
    }

    /**
     * Plan id as published by Logz. The only possible value is `100gb14days`. Defaults to `100gb14days`. Changing this forces a new logz Monitor to be created.
     * 
     */
    @Import(name="planId")
    private @Nullable Output<String> planId;

    /**
     * @return Plan id as published by Logz. The only possible value is `100gb14days`. Defaults to `100gb14days`. Changing this forces a new logz Monitor to be created.
     * 
     */
    public Optional<Output<String>> planId() {
        return Optional.ofNullable(this.planId);
    }

    /**
     * Different usage types. Possible values are `PAYG` or `COMMITTED`. Changing this forces a new logz Monitor to be created.
     * 
     */
    @Import(name="usageType", required=true)
    private Output<String> usageType;

    /**
     * @return Different usage types. Possible values are `PAYG` or `COMMITTED`. Changing this forces a new logz Monitor to be created.
     * 
     */
    public Output<String> usageType() {
        return this.usageType;
    }

    private LogzMonitorPlanArgs() {}

    private LogzMonitorPlanArgs(LogzMonitorPlanArgs $) {
        this.billingCycle = $.billingCycle;
        this.effectiveDate = $.effectiveDate;
        this.planId = $.planId;
        this.usageType = $.usageType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LogzMonitorPlanArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LogzMonitorPlanArgs $;

        public Builder() {
            $ = new LogzMonitorPlanArgs();
        }

        public Builder(LogzMonitorPlanArgs defaults) {
            $ = new LogzMonitorPlanArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param billingCycle Different billing cycles. Possible values are `MONTHLY` or `WEEKLY`. Changing this forces a new logz Monitor to be created.
         * 
         * @return builder
         * 
         */
        public Builder billingCycle(Output<String> billingCycle) {
            $.billingCycle = billingCycle;
            return this;
        }

        /**
         * @param billingCycle Different billing cycles. Possible values are `MONTHLY` or `WEEKLY`. Changing this forces a new logz Monitor to be created.
         * 
         * @return builder
         * 
         */
        public Builder billingCycle(String billingCycle) {
            return billingCycle(Output.of(billingCycle));
        }

        /**
         * @param effectiveDate Date when plan was applied. Changing this forces a new logz Monitor to be created.
         * 
         * @return builder
         * 
         */
        public Builder effectiveDate(Output<String> effectiveDate) {
            $.effectiveDate = effectiveDate;
            return this;
        }

        /**
         * @param effectiveDate Date when plan was applied. Changing this forces a new logz Monitor to be created.
         * 
         * @return builder
         * 
         */
        public Builder effectiveDate(String effectiveDate) {
            return effectiveDate(Output.of(effectiveDate));
        }

        /**
         * @param planId Plan id as published by Logz. The only possible value is `100gb14days`. Defaults to `100gb14days`. Changing this forces a new logz Monitor to be created.
         * 
         * @return builder
         * 
         */
        public Builder planId(@Nullable Output<String> planId) {
            $.planId = planId;
            return this;
        }

        /**
         * @param planId Plan id as published by Logz. The only possible value is `100gb14days`. Defaults to `100gb14days`. Changing this forces a new logz Monitor to be created.
         * 
         * @return builder
         * 
         */
        public Builder planId(String planId) {
            return planId(Output.of(planId));
        }

        /**
         * @param usageType Different usage types. Possible values are `PAYG` or `COMMITTED`. Changing this forces a new logz Monitor to be created.
         * 
         * @return builder
         * 
         */
        public Builder usageType(Output<String> usageType) {
            $.usageType = usageType;
            return this;
        }

        /**
         * @param usageType Different usage types. Possible values are `PAYG` or `COMMITTED`. Changing this forces a new logz Monitor to be created.
         * 
         * @return builder
         * 
         */
        public Builder usageType(String usageType) {
            return usageType(Output.of(usageType));
        }

        public LogzMonitorPlanArgs build() {
            if ($.billingCycle == null) {
                throw new MissingRequiredPropertyException("LogzMonitorPlanArgs", "billingCycle");
            }
            if ($.effectiveDate == null) {
                throw new MissingRequiredPropertyException("LogzMonitorPlanArgs", "effectiveDate");
            }
            if ($.usageType == null) {
                throw new MissingRequiredPropertyException("LogzMonitorPlanArgs", "usageType");
            }
            return $;
        }
    }

}
