// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.compute;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.compute.DataDiskAttachmentArgs;
import com.pulumi.azure.compute.inputs.DataDiskAttachmentState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages attaching a Disk to a Virtual Machine.
 * 
 * &gt; **NOTE:** Data Disks can be attached either directly on the `azure.compute.VirtualMachine` resource, or using the `azure.compute.DataDiskAttachment` resource - but the two cannot be used together. If both are used against the same Virtual Machine, spurious changes will occur.
 * 
 * &gt; **Please Note:** only Managed Disks are supported via this separate resource, Unmanaged Disks can be attached using the `storage_data_disk` block in the `azure.compute.VirtualMachine` resource.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.network.VirtualNetwork;
 * import com.pulumi.azure.network.VirtualNetworkArgs;
 * import com.pulumi.azure.network.Subnet;
 * import com.pulumi.azure.network.SubnetArgs;
 * import com.pulumi.azure.network.NetworkInterface;
 * import com.pulumi.azure.network.NetworkInterfaceArgs;
 * import com.pulumi.azure.network.inputs.NetworkInterfaceIpConfigurationArgs;
 * import com.pulumi.azure.compute.VirtualMachine;
 * import com.pulumi.azure.compute.VirtualMachineArgs;
 * import com.pulumi.azure.compute.inputs.VirtualMachineStorageImageReferenceArgs;
 * import com.pulumi.azure.compute.inputs.VirtualMachineStorageOsDiskArgs;
 * import com.pulumi.azure.compute.inputs.VirtualMachineOsProfileArgs;
 * import com.pulumi.azure.compute.inputs.VirtualMachineOsProfileLinuxConfigArgs;
 * import com.pulumi.azure.compute.ManagedDisk;
 * import com.pulumi.azure.compute.ManagedDiskArgs;
 * import com.pulumi.azure.compute.DataDiskAttachment;
 * import com.pulumi.azure.compute.DataDiskAttachmentArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var config = ctx.config();
 *         final var prefix = config.get("prefix").orElse("example");
 *         final var vmName = String.format("%s-vm", prefix);
 * 
 *         var example = new ResourceGroup("example", ResourceGroupArgs.builder()        
 *             .name(String.format("%s-resources", prefix))
 *             .location("West Europe")
 *             .build());
 * 
 *         var main = new VirtualNetwork("main", VirtualNetworkArgs.builder()        
 *             .name(String.format("%s-network", prefix))
 *             .addressSpaces("10.0.0.0/16")
 *             .location(example.location())
 *             .resourceGroupName(example.name())
 *             .build());
 * 
 *         var internal = new Subnet("internal", SubnetArgs.builder()        
 *             .name("internal")
 *             .resourceGroupName(example.name())
 *             .virtualNetworkName(main.name())
 *             .addressPrefixes("10.0.2.0/24")
 *             .build());
 * 
 *         var mainNetworkInterface = new NetworkInterface("mainNetworkInterface", NetworkInterfaceArgs.builder()        
 *             .name(String.format("%s-nic", prefix))
 *             .location(example.location())
 *             .resourceGroupName(example.name())
 *             .ipConfigurations(NetworkInterfaceIpConfigurationArgs.builder()
 *                 .name("internal")
 *                 .subnetId(internal.id())
 *                 .privateIpAddressAllocation("Dynamic")
 *                 .build())
 *             .build());
 * 
 *         var exampleVirtualMachine = new VirtualMachine("exampleVirtualMachine", VirtualMachineArgs.builder()        
 *             .name(vmName)
 *             .location(example.location())
 *             .resourceGroupName(example.name())
 *             .networkInterfaceIds(mainNetworkInterface.id())
 *             .vmSize("Standard_F2")
 *             .storageImageReference(VirtualMachineStorageImageReferenceArgs.builder()
 *                 .publisher("Canonical")
 *                 .offer("0001-com-ubuntu-server-jammy")
 *                 .sku("22_04-lts")
 *                 .version("latest")
 *                 .build())
 *             .storageOsDisk(VirtualMachineStorageOsDiskArgs.builder()
 *                 .name("myosdisk1")
 *                 .caching("ReadWrite")
 *                 .createOption("FromImage")
 *                 .managedDiskType("Standard_LRS")
 *                 .build())
 *             .osProfile(VirtualMachineOsProfileArgs.builder()
 *                 .computerName(vmName)
 *                 .adminUsername("testadmin")
 *                 .adminPassword("Password1234!")
 *                 .build())
 *             .osProfileLinuxConfig(VirtualMachineOsProfileLinuxConfigArgs.builder()
 *                 .disablePasswordAuthentication(false)
 *                 .build())
 *             .build());
 * 
 *         var exampleManagedDisk = new ManagedDisk("exampleManagedDisk", ManagedDiskArgs.builder()        
 *             .name(String.format("%s-disk1", vmName))
 *             .location(example.location())
 *             .resourceGroupName(example.name())
 *             .storageAccountType("Standard_LRS")
 *             .createOption("Empty")
 *             .diskSizeGb(10)
 *             .build());
 * 
 *         var exampleDataDiskAttachment = new DataDiskAttachment("exampleDataDiskAttachment", DataDiskAttachmentArgs.builder()        
 *             .managedDiskId(exampleManagedDisk.id())
 *             .virtualMachineId(exampleVirtualMachine.id())
 *             .lun("10")
 *             .caching("ReadWrite")
 *             .build());
 * 
 *     }
 * }
 * }
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Virtual Machines Data Disk Attachments can be imported using the `resource id`, e.g.
 * 
 * ```sh
 * $ pulumi import azure:compute/dataDiskAttachment:DataDiskAttachment example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Compute/virtualMachines/machine1/dataDisks/disk1
 * ```
 * 
 */
@ResourceType(type="azure:compute/dataDiskAttachment:DataDiskAttachment")
public class DataDiskAttachment extends com.pulumi.resources.CustomResource {
    /**
     * Specifies the caching requirements for this Data Disk. Possible values include `None`, `ReadOnly` and `ReadWrite`.
     * 
     */
    @Export(name="caching", refs={String.class}, tree="[0]")
    private Output<String> caching;

    /**
     * @return Specifies the caching requirements for this Data Disk. Possible values include `None`, `ReadOnly` and `ReadWrite`.
     * 
     */
    public Output<String> caching() {
        return this.caching;
    }
    /**
     * The Create Option of the Data Disk, such as `Empty` or `Attach`. Defaults to `Attach`. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="createOption", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> createOption;

    /**
     * @return The Create Option of the Data Disk, such as `Empty` or `Attach`. Defaults to `Attach`. Changing this forces a new resource to be created.
     * 
     */
    public Output<Optional<String>> createOption() {
        return Codegen.optional(this.createOption);
    }
    /**
     * The Logical Unit Number of the Data Disk, which needs to be unique within the Virtual Machine. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="lun", refs={Integer.class}, tree="[0]")
    private Output<Integer> lun;

    /**
     * @return The Logical Unit Number of the Data Disk, which needs to be unique within the Virtual Machine. Changing this forces a new resource to be created.
     * 
     */
    public Output<Integer> lun() {
        return this.lun;
    }
    /**
     * The ID of an existing Managed Disk which should be attached. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="managedDiskId", refs={String.class}, tree="[0]")
    private Output<String> managedDiskId;

    /**
     * @return The ID of an existing Managed Disk which should be attached. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> managedDiskId() {
        return this.managedDiskId;
    }
    /**
     * The ID of the Virtual Machine to which the Data Disk should be attached. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="virtualMachineId", refs={String.class}, tree="[0]")
    private Output<String> virtualMachineId;

    /**
     * @return The ID of the Virtual Machine to which the Data Disk should be attached. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> virtualMachineId() {
        return this.virtualMachineId;
    }
    /**
     * Specifies if Write Accelerator is enabled on the disk. This can only be enabled on `Premium_LRS` managed disks with no caching and [M-Series VMs](https://docs.microsoft.com/azure/virtual-machines/workloads/sap/how-to-enable-write-accelerator). Defaults to `false`.
     * 
     */
    @Export(name="writeAcceleratorEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> writeAcceleratorEnabled;

    /**
     * @return Specifies if Write Accelerator is enabled on the disk. This can only be enabled on `Premium_LRS` managed disks with no caching and [M-Series VMs](https://docs.microsoft.com/azure/virtual-machines/workloads/sap/how-to-enable-write-accelerator). Defaults to `false`.
     * 
     */
    public Output<Optional<Boolean>> writeAcceleratorEnabled() {
        return Codegen.optional(this.writeAcceleratorEnabled);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public DataDiskAttachment(String name) {
        this(name, DataDiskAttachmentArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public DataDiskAttachment(String name, DataDiskAttachmentArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public DataDiskAttachment(String name, DataDiskAttachmentArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:compute/dataDiskAttachment:DataDiskAttachment", name, args == null ? DataDiskAttachmentArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private DataDiskAttachment(String name, Output<String> id, @Nullable DataDiskAttachmentState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:compute/dataDiskAttachment:DataDiskAttachment", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static DataDiskAttachment get(String name, Output<String> id, @Nullable DataDiskAttachmentState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new DataDiskAttachment(name, id, state, options);
    }
}
