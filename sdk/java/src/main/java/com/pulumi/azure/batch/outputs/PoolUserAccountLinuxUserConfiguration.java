// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.batch.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PoolUserAccountLinuxUserConfiguration {
    /**
     * @return The user ID of the user account. The `uid` and `gid` properties must be specified together or not at all. If not specified the underlying operating system picks the uid.
     * 
     */
    private @Nullable Integer gid;
    /**
     * @return The SSH private key for the user account. The private key must not be password protected. The private key is used to automatically configure asymmetric-key based authentication for SSH between nodes in a Linux pool when the pool&#39;s enableInterNodeCommunication property is true (it is ignored if enableInterNodeCommunication is false). It does this by placing the key pair into the user&#39;s .ssh directory. If not specified, password-less SSH is not configured between nodes (no modification of the user&#39;s .ssh directory is done).
     * 
     */
    private @Nullable String sshPrivateKey;
    /**
     * @return The group ID for the user account. The `uid` and `gid` properties must be specified together or not at all. If not specified the underlying operating system picks the gid.
     * 
     */
    private @Nullable Integer uid;

    private PoolUserAccountLinuxUserConfiguration() {}
    /**
     * @return The user ID of the user account. The `uid` and `gid` properties must be specified together or not at all. If not specified the underlying operating system picks the uid.
     * 
     */
    public Optional<Integer> gid() {
        return Optional.ofNullable(this.gid);
    }
    /**
     * @return The SSH private key for the user account. The private key must not be password protected. The private key is used to automatically configure asymmetric-key based authentication for SSH between nodes in a Linux pool when the pool&#39;s enableInterNodeCommunication property is true (it is ignored if enableInterNodeCommunication is false). It does this by placing the key pair into the user&#39;s .ssh directory. If not specified, password-less SSH is not configured between nodes (no modification of the user&#39;s .ssh directory is done).
     * 
     */
    public Optional<String> sshPrivateKey() {
        return Optional.ofNullable(this.sshPrivateKey);
    }
    /**
     * @return The group ID for the user account. The `uid` and `gid` properties must be specified together or not at all. If not specified the underlying operating system picks the gid.
     * 
     */
    public Optional<Integer> uid() {
        return Optional.ofNullable(this.uid);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PoolUserAccountLinuxUserConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer gid;
        private @Nullable String sshPrivateKey;
        private @Nullable Integer uid;
        public Builder() {}
        public Builder(PoolUserAccountLinuxUserConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.gid = defaults.gid;
    	      this.sshPrivateKey = defaults.sshPrivateKey;
    	      this.uid = defaults.uid;
        }

        @CustomType.Setter
        public Builder gid(@Nullable Integer gid) {

            this.gid = gid;
            return this;
        }
        @CustomType.Setter
        public Builder sshPrivateKey(@Nullable String sshPrivateKey) {

            this.sshPrivateKey = sshPrivateKey;
            return this;
        }
        @CustomType.Setter
        public Builder uid(@Nullable Integer uid) {

            this.uid = uid;
            return this;
        }
        public PoolUserAccountLinuxUserConfiguration build() {
            final var _resultValue = new PoolUserAccountLinuxUserConfiguration();
            _resultValue.gid = gid;
            _resultValue.sshPrivateKey = sshPrivateKey;
            _resultValue.uid = uid;
            return _resultValue;
        }
    }
}
