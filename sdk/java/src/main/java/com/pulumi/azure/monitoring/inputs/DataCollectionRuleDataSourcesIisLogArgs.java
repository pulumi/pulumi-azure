// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.monitoring.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataCollectionRuleDataSourcesIisLogArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataCollectionRuleDataSourcesIisLogArgs Empty = new DataCollectionRuleDataSourcesIisLogArgs();

    /**
     * Specifies a list of absolute paths where the log files are located.
     * 
     */
    @Import(name="logDirectories")
    private @Nullable Output<List<String>> logDirectories;

    /**
     * @return Specifies a list of absolute paths where the log files are located.
     * 
     */
    public Optional<Output<List<String>>> logDirectories() {
        return Optional.ofNullable(this.logDirectories);
    }

    /**
     * The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible value is `Microsoft-W3CIISLog`.
     * 
     */
    @Import(name="streams", required=true)
    private Output<List<String>> streams;

    /**
     * @return Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible value is `Microsoft-W3CIISLog`.
     * 
     */
    public Output<List<String>> streams() {
        return this.streams;
    }

    private DataCollectionRuleDataSourcesIisLogArgs() {}

    private DataCollectionRuleDataSourcesIisLogArgs(DataCollectionRuleDataSourcesIisLogArgs $) {
        this.logDirectories = $.logDirectories;
        this.name = $.name;
        this.streams = $.streams;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataCollectionRuleDataSourcesIisLogArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataCollectionRuleDataSourcesIisLogArgs $;

        public Builder() {
            $ = new DataCollectionRuleDataSourcesIisLogArgs();
        }

        public Builder(DataCollectionRuleDataSourcesIisLogArgs defaults) {
            $ = new DataCollectionRuleDataSourcesIisLogArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param logDirectories Specifies a list of absolute paths where the log files are located.
         * 
         * @return builder
         * 
         */
        public Builder logDirectories(@Nullable Output<List<String>> logDirectories) {
            $.logDirectories = logDirectories;
            return this;
        }

        /**
         * @param logDirectories Specifies a list of absolute paths where the log files are located.
         * 
         * @return builder
         * 
         */
        public Builder logDirectories(List<String> logDirectories) {
            return logDirectories(Output.of(logDirectories));
        }

        /**
         * @param logDirectories Specifies a list of absolute paths where the log files are located.
         * 
         * @return builder
         * 
         */
        public Builder logDirectories(String... logDirectories) {
            return logDirectories(List.of(logDirectories));
        }

        /**
         * @param name The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param streams Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible value is `Microsoft-W3CIISLog`.
         * 
         * @return builder
         * 
         */
        public Builder streams(Output<List<String>> streams) {
            $.streams = streams;
            return this;
        }

        /**
         * @param streams Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible value is `Microsoft-W3CIISLog`.
         * 
         * @return builder
         * 
         */
        public Builder streams(List<String> streams) {
            return streams(Output.of(streams));
        }

        /**
         * @param streams Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible value is `Microsoft-W3CIISLog`.
         * 
         * @return builder
         * 
         */
        public Builder streams(String... streams) {
            return streams(List.of(streams));
        }

        public DataCollectionRuleDataSourcesIisLogArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("DataCollectionRuleDataSourcesIisLogArgs", "name");
            }
            if ($.streams == null) {
                throw new MissingRequiredPropertyException("DataCollectionRuleDataSourcesIisLogArgs", "streams");
            }
            return $;
        }
    }

}
