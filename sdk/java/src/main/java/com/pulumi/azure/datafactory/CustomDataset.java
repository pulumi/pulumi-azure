// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.datafactory;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.datafactory.CustomDatasetArgs;
import com.pulumi.azure.datafactory.inputs.CustomDatasetState;
import com.pulumi.azure.datafactory.outputs.CustomDatasetLinkedService;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a Dataset inside an Azure Data Factory. This is a generic resource that supports all different Dataset Types.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.datafactory.Factory;
 * import com.pulumi.azure.datafactory.FactoryArgs;
 * import com.pulumi.azure.datafactory.inputs.FactoryIdentityArgs;
 * import com.pulumi.azure.storage.Account;
 * import com.pulumi.azure.storage.AccountArgs;
 * import com.pulumi.azure.datafactory.LinkedCustomService;
 * import com.pulumi.azure.datafactory.LinkedCustomServiceArgs;
 * import com.pulumi.azure.storage.Container;
 * import com.pulumi.azure.storage.ContainerArgs;
 * import com.pulumi.azure.datafactory.CustomDataset;
 * import com.pulumi.azure.datafactory.CustomDatasetArgs;
 * import com.pulumi.azure.datafactory.inputs.CustomDatasetLinkedServiceArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new ResourceGroup("example", ResourceGroupArgs.builder()
 *             .name("example-resources")
 *             .location("West Europe")
 *             .build());
 * 
 *         var exampleFactory = new Factory("exampleFactory", FactoryArgs.builder()
 *             .name("example")
 *             .location(example.location())
 *             .resourceGroupName(example.name())
 *             .identity(FactoryIdentityArgs.builder()
 *                 .type("SystemAssigned")
 *                 .build())
 *             .build());
 * 
 *         var exampleAccount = new Account("exampleAccount", AccountArgs.builder()
 *             .name("example")
 *             .resourceGroupName(example.name())
 *             .location(example.location())
 *             .accountKind("BlobStorage")
 *             .accountTier("Standard")
 *             .accountReplicationType("LRS")
 *             .build());
 * 
 *         var exampleLinkedCustomService = new LinkedCustomService("exampleLinkedCustomService", LinkedCustomServiceArgs.builder()
 *             .name("example")
 *             .dataFactoryId(exampleFactory.id())
 *             .type("AzureBlobStorage")
 *             .typePropertiesJson(exampleAccount.primaryConnectionString().applyValue(primaryConnectionString -> """
 * {
 *   "connectionString":"%s"
 * }
 * ", primaryConnectionString)))
 *             .build());
 * 
 *         var exampleContainer = new Container("exampleContainer", ContainerArgs.builder()
 *             .name("content")
 *             .storageAccountName(exampleAccount.name())
 *             .containerAccessType("private")
 *             .build());
 * 
 *         var exampleCustomDataset = new CustomDataset("exampleCustomDataset", CustomDatasetArgs.builder()
 *             .name("example")
 *             .dataFactoryId(exampleFactory.id())
 *             .type("Json")
 *             .linkedService(CustomDatasetLinkedServiceArgs.builder()
 *                 .name(exampleLinkedCustomService.name())
 *                 .parameters(Map.of("key1", "value1"))
 *                 .build())
 *             .typePropertiesJson(exampleContainer.name().applyValue(name -> """
 * {
 *   "location": {
 *     "container":"%s",
 *     "fileName":"foo.txt",
 *     "folderPath": "foo/bar/",
 *     "type":"AzureBlobStorageLocation"
 *   },
 *   "encodingName":"UTF-8"
 * }
 * ", name)))
 *             .description("test description")
 *             .annotations(            
 *                 "test1",
 *                 "test2",
 *                 "test3")
 *             .folder("testFolder")
 *             .parameters(Map.ofEntries(
 *                 Map.entry("foo", "test1"),
 *                 Map.entry("Bar", "Test2")
 *             ))
 *             .additionalProperties(Map.ofEntries(
 *                 Map.entry("foo", "test1"),
 *                 Map.entry("bar", "test2")
 *             ))
 *             .schemaJson("""
 * {
 *   "type": "object",
 *   "properties": {
 *     "name": {
 *       "type": "object",
 *       "properties": {
 *         "firstName": {
 *           "type": "string"
 *         },
 *         "lastName": {
 *           "type": "string"
 *         }
 *       }
 *     },
 *     "age": {
 *       "type": "integer"
 *     }
 *   }
 * }
 *             """)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Data Factory Datasets can be imported using the `resource id`, e.g.
 * 
 * ```sh
 * $ pulumi import azure:datafactory/customDataset:CustomDataset example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example/providers/Microsoft.DataFactory/factories/example/datasets/example
 * ```
 * 
 */
@ResourceType(type="azure:datafactory/customDataset:CustomDataset")
public class CustomDataset extends com.pulumi.resources.CustomResource {
    /**
     * A map of additional properties to associate with the Data Factory Dataset.
     * 
     */
    @Export(name="additionalProperties", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> additionalProperties;

    /**
     * @return A map of additional properties to associate with the Data Factory Dataset.
     * 
     */
    public Output<Optional<Map<String,String>>> additionalProperties() {
        return Codegen.optional(this.additionalProperties);
    }
    /**
     * List of tags that can be used for describing the Data Factory Dataset.
     * 
     */
    @Export(name="annotations", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> annotations;

    /**
     * @return List of tags that can be used for describing the Data Factory Dataset.
     * 
     */
    public Output<Optional<List<String>>> annotations() {
        return Codegen.optional(this.annotations);
    }
    /**
     * The Data Factory ID in which to associate the Dataset with. Changing this forces a new resource.
     * 
     */
    @Export(name="dataFactoryId", refs={String.class}, tree="[0]")
    private Output<String> dataFactoryId;

    /**
     * @return The Data Factory ID in which to associate the Dataset with. Changing this forces a new resource.
     * 
     */
    public Output<String> dataFactoryId() {
        return this.dataFactoryId;
    }
    /**
     * The description for the Data Factory Dataset.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return The description for the Data Factory Dataset.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * The folder that this Dataset is in. If not specified, the Dataset will appear at the root level.
     * 
     */
    @Export(name="folder", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> folder;

    /**
     * @return The folder that this Dataset is in. If not specified, the Dataset will appear at the root level.
     * 
     */
    public Output<Optional<String>> folder() {
        return Codegen.optional(this.folder);
    }
    /**
     * A `linked_service` block as defined below.
     * 
     */
    @Export(name="linkedService", refs={CustomDatasetLinkedService.class}, tree="[0]")
    private Output<CustomDatasetLinkedService> linkedService;

    /**
     * @return A `linked_service` block as defined below.
     * 
     */
    public Output<CustomDatasetLinkedService> linkedService() {
        return this.linkedService;
    }
    /**
     * Specifies the name of the Data Factory Dataset. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Specifies the name of the Data Factory Dataset. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * A map of parameters to associate with the Data Factory Dataset.
     * 
     */
    @Export(name="parameters", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> parameters;

    /**
     * @return A map of parameters to associate with the Data Factory Dataset.
     * 
     */
    public Output<Optional<Map<String,String>>> parameters() {
        return Codegen.optional(this.parameters);
    }
    /**
     * A JSON object that contains the schema of the Data Factory Dataset.
     * 
     */
    @Export(name="schemaJson", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> schemaJson;

    /**
     * @return A JSON object that contains the schema of the Data Factory Dataset.
     * 
     */
    public Output<Optional<String>> schemaJson() {
        return Codegen.optional(this.schemaJson);
    }
    /**
     * The type of dataset that will be associated with Data Factory. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return The type of dataset that will be associated with Data Factory. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * A JSON object that contains the properties of the Data Factory Dataset.
     * 
     */
    @Export(name="typePropertiesJson", refs={String.class}, tree="[0]")
    private Output<String> typePropertiesJson;

    /**
     * @return A JSON object that contains the properties of the Data Factory Dataset.
     * 
     */
    public Output<String> typePropertiesJson() {
        return this.typePropertiesJson;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public CustomDataset(java.lang.String name) {
        this(name, CustomDatasetArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public CustomDataset(java.lang.String name, CustomDatasetArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public CustomDataset(java.lang.String name, CustomDatasetArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:datafactory/customDataset:CustomDataset", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private CustomDataset(java.lang.String name, Output<java.lang.String> id, @Nullable CustomDatasetState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:datafactory/customDataset:CustomDataset", name, state, makeResourceOptions(options, id), false);
    }

    private static CustomDatasetArgs makeArgs(CustomDatasetArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? CustomDatasetArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static CustomDataset get(java.lang.String name, Output<java.lang.String> id, @Nullable CustomDatasetState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new CustomDataset(name, id, state, options);
    }
}
