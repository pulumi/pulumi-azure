// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network.outputs;

import com.pulumi.azure.network.outputs.GetNetworkManagerConnectivityConfigurationAppliesToGroup;
import com.pulumi.azure.network.outputs.GetNetworkManagerConnectivityConfigurationHub;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetNetworkManagerConnectivityConfigurationResult {
    /**
     * @return An `appliesToGroup` block as defined below.
     * 
     */
    private List<GetNetworkManagerConnectivityConfigurationAppliesToGroup> appliesToGroups;
    /**
     * @return The connectivity topology type.
     * 
     */
    private String connectivityTopology;
    /**
     * @return Whether to current existing Virtual Network Peering in the Connectivity Configuration affected scope.
     * 
     */
    private Boolean deleteExistingPeeringEnabled;
    /**
     * @return The description of the Connectivity Configuration.
     * 
     */
    private String description;
    /**
     * @return Whether global mesh is supported.
     * 
     */
    private Boolean globalMeshEnabled;
    /**
     * @return A `hub` block as defined below.
     * 
     */
    private List<GetNetworkManagerConnectivityConfigurationHub> hubs;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String name;
    private String networkManagerId;

    private GetNetworkManagerConnectivityConfigurationResult() {}
    /**
     * @return An `appliesToGroup` block as defined below.
     * 
     */
    public List<GetNetworkManagerConnectivityConfigurationAppliesToGroup> appliesToGroups() {
        return this.appliesToGroups;
    }
    /**
     * @return The connectivity topology type.
     * 
     */
    public String connectivityTopology() {
        return this.connectivityTopology;
    }
    /**
     * @return Whether to current existing Virtual Network Peering in the Connectivity Configuration affected scope.
     * 
     */
    public Boolean deleteExistingPeeringEnabled() {
        return this.deleteExistingPeeringEnabled;
    }
    /**
     * @return The description of the Connectivity Configuration.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Whether global mesh is supported.
     * 
     */
    public Boolean globalMeshEnabled() {
        return this.globalMeshEnabled;
    }
    /**
     * @return A `hub` block as defined below.
     * 
     */
    public List<GetNetworkManagerConnectivityConfigurationHub> hubs() {
        return this.hubs;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String name() {
        return this.name;
    }
    public String networkManagerId() {
        return this.networkManagerId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNetworkManagerConnectivityConfigurationResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetNetworkManagerConnectivityConfigurationAppliesToGroup> appliesToGroups;
        private String connectivityTopology;
        private Boolean deleteExistingPeeringEnabled;
        private String description;
        private Boolean globalMeshEnabled;
        private List<GetNetworkManagerConnectivityConfigurationHub> hubs;
        private String id;
        private String name;
        private String networkManagerId;
        public Builder() {}
        public Builder(GetNetworkManagerConnectivityConfigurationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appliesToGroups = defaults.appliesToGroups;
    	      this.connectivityTopology = defaults.connectivityTopology;
    	      this.deleteExistingPeeringEnabled = defaults.deleteExistingPeeringEnabled;
    	      this.description = defaults.description;
    	      this.globalMeshEnabled = defaults.globalMeshEnabled;
    	      this.hubs = defaults.hubs;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.networkManagerId = defaults.networkManagerId;
        }

        @CustomType.Setter
        public Builder appliesToGroups(List<GetNetworkManagerConnectivityConfigurationAppliesToGroup> appliesToGroups) {
            if (appliesToGroups == null) {
              throw new MissingRequiredPropertyException("GetNetworkManagerConnectivityConfigurationResult", "appliesToGroups");
            }
            this.appliesToGroups = appliesToGroups;
            return this;
        }
        public Builder appliesToGroups(GetNetworkManagerConnectivityConfigurationAppliesToGroup... appliesToGroups) {
            return appliesToGroups(List.of(appliesToGroups));
        }
        @CustomType.Setter
        public Builder connectivityTopology(String connectivityTopology) {
            if (connectivityTopology == null) {
              throw new MissingRequiredPropertyException("GetNetworkManagerConnectivityConfigurationResult", "connectivityTopology");
            }
            this.connectivityTopology = connectivityTopology;
            return this;
        }
        @CustomType.Setter
        public Builder deleteExistingPeeringEnabled(Boolean deleteExistingPeeringEnabled) {
            if (deleteExistingPeeringEnabled == null) {
              throw new MissingRequiredPropertyException("GetNetworkManagerConnectivityConfigurationResult", "deleteExistingPeeringEnabled");
            }
            this.deleteExistingPeeringEnabled = deleteExistingPeeringEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetNetworkManagerConnectivityConfigurationResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder globalMeshEnabled(Boolean globalMeshEnabled) {
            if (globalMeshEnabled == null) {
              throw new MissingRequiredPropertyException("GetNetworkManagerConnectivityConfigurationResult", "globalMeshEnabled");
            }
            this.globalMeshEnabled = globalMeshEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder hubs(List<GetNetworkManagerConnectivityConfigurationHub> hubs) {
            if (hubs == null) {
              throw new MissingRequiredPropertyException("GetNetworkManagerConnectivityConfigurationResult", "hubs");
            }
            this.hubs = hubs;
            return this;
        }
        public Builder hubs(GetNetworkManagerConnectivityConfigurationHub... hubs) {
            return hubs(List.of(hubs));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetNetworkManagerConnectivityConfigurationResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetNetworkManagerConnectivityConfigurationResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder networkManagerId(String networkManagerId) {
            if (networkManagerId == null) {
              throw new MissingRequiredPropertyException("GetNetworkManagerConnectivityConfigurationResult", "networkManagerId");
            }
            this.networkManagerId = networkManagerId;
            return this;
        }
        public GetNetworkManagerConnectivityConfigurationResult build() {
            final var _resultValue = new GetNetworkManagerConnectivityConfigurationResult();
            _resultValue.appliesToGroups = appliesToGroups;
            _resultValue.connectivityTopology = connectivityTopology;
            _resultValue.deleteExistingPeeringEnabled = deleteExistingPeeringEnabled;
            _resultValue.description = description;
            _resultValue.globalMeshEnabled = globalMeshEnabled;
            _resultValue.hubs = hubs;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.networkManagerId = networkManagerId;
            return _resultValue;
        }
    }
}
