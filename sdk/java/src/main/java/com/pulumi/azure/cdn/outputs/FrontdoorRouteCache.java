// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.cdn.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FrontdoorRouteCache {
    /**
     * @return Is content compression enabled? Possible values are `true` or `false`. Defaults to `false`.
     * 
     * &gt; **NOTE:** Content won&#39;t be compressed when the requested content is smaller than `1 KB` or larger than `8 MB`(inclusive).
     * 
     */
    private @Nullable Boolean compressionEnabled;
    /**
     * @return A list of one or more `Content types` (formerly known as `MIME types`) to compress. Possible values include `application/eot`, `application/font`, `application/font-sfnt`, `application/javascript`, `application/json`, `application/opentype`, `application/otf`, `application/pkcs7-mime`, `application/truetype`, `application/ttf`, `application/vnd.ms-fontobject`, `application/xhtml+xml`, `application/xml`, `application/xml+rss`, `application/x-font-opentype`, `application/x-font-truetype`, `application/x-font-ttf`, `application/x-httpd-cgi`, `application/x-mpegurl`, `application/x-opentype`, `application/x-otf`, `application/x-perl`, `application/x-ttf`, `application/x-javascript`, `font/eot`, `font/ttf`, `font/otf`, `font/opentype`, `image/svg+xml`, `text/css`, `text/csv`, `text/html`, `text/javascript`, `text/js`, `text/plain`, `text/richtext`, `text/tab-separated-values`, `text/xml`, `text/x-script`, `text/x-component` or `text/x-java-source`.
     * 
     */
    private @Nullable List<String> contentTypesToCompresses;
    /**
     * @return Defines how the Front Door Route will cache requests that include query strings. Possible values include `IgnoreQueryString`, `IgnoreSpecifiedQueryStrings`, `IncludeSpecifiedQueryStrings` or `UseQueryString`. Defaults to `IgnoreQueryString`.
     * 
     * &gt; **NOTE:** The value of the `query_string_caching_behavior` determines if the `query_strings` field will be used as an include list or an ignore list.
     * 
     */
    private @Nullable String queryStringCachingBehavior;
    /**
     * @return Query strings to include or ignore.
     * 
     */
    private @Nullable List<String> queryStrings;

    private FrontdoorRouteCache() {}
    /**
     * @return Is content compression enabled? Possible values are `true` or `false`. Defaults to `false`.
     * 
     * &gt; **NOTE:** Content won&#39;t be compressed when the requested content is smaller than `1 KB` or larger than `8 MB`(inclusive).
     * 
     */
    public Optional<Boolean> compressionEnabled() {
        return Optional.ofNullable(this.compressionEnabled);
    }
    /**
     * @return A list of one or more `Content types` (formerly known as `MIME types`) to compress. Possible values include `application/eot`, `application/font`, `application/font-sfnt`, `application/javascript`, `application/json`, `application/opentype`, `application/otf`, `application/pkcs7-mime`, `application/truetype`, `application/ttf`, `application/vnd.ms-fontobject`, `application/xhtml+xml`, `application/xml`, `application/xml+rss`, `application/x-font-opentype`, `application/x-font-truetype`, `application/x-font-ttf`, `application/x-httpd-cgi`, `application/x-mpegurl`, `application/x-opentype`, `application/x-otf`, `application/x-perl`, `application/x-ttf`, `application/x-javascript`, `font/eot`, `font/ttf`, `font/otf`, `font/opentype`, `image/svg+xml`, `text/css`, `text/csv`, `text/html`, `text/javascript`, `text/js`, `text/plain`, `text/richtext`, `text/tab-separated-values`, `text/xml`, `text/x-script`, `text/x-component` or `text/x-java-source`.
     * 
     */
    public List<String> contentTypesToCompresses() {
        return this.contentTypesToCompresses == null ? List.of() : this.contentTypesToCompresses;
    }
    /**
     * @return Defines how the Front Door Route will cache requests that include query strings. Possible values include `IgnoreQueryString`, `IgnoreSpecifiedQueryStrings`, `IncludeSpecifiedQueryStrings` or `UseQueryString`. Defaults to `IgnoreQueryString`.
     * 
     * &gt; **NOTE:** The value of the `query_string_caching_behavior` determines if the `query_strings` field will be used as an include list or an ignore list.
     * 
     */
    public Optional<String> queryStringCachingBehavior() {
        return Optional.ofNullable(this.queryStringCachingBehavior);
    }
    /**
     * @return Query strings to include or ignore.
     * 
     */
    public List<String> queryStrings() {
        return this.queryStrings == null ? List.of() : this.queryStrings;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FrontdoorRouteCache defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean compressionEnabled;
        private @Nullable List<String> contentTypesToCompresses;
        private @Nullable String queryStringCachingBehavior;
        private @Nullable List<String> queryStrings;
        public Builder() {}
        public Builder(FrontdoorRouteCache defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compressionEnabled = defaults.compressionEnabled;
    	      this.contentTypesToCompresses = defaults.contentTypesToCompresses;
    	      this.queryStringCachingBehavior = defaults.queryStringCachingBehavior;
    	      this.queryStrings = defaults.queryStrings;
        }

        @CustomType.Setter
        public Builder compressionEnabled(@Nullable Boolean compressionEnabled) {

            this.compressionEnabled = compressionEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder contentTypesToCompresses(@Nullable List<String> contentTypesToCompresses) {

            this.contentTypesToCompresses = contentTypesToCompresses;
            return this;
        }
        public Builder contentTypesToCompresses(String... contentTypesToCompresses) {
            return contentTypesToCompresses(List.of(contentTypesToCompresses));
        }
        @CustomType.Setter
        public Builder queryStringCachingBehavior(@Nullable String queryStringCachingBehavior) {

            this.queryStringCachingBehavior = queryStringCachingBehavior;
            return this;
        }
        @CustomType.Setter
        public Builder queryStrings(@Nullable List<String> queryStrings) {

            this.queryStrings = queryStrings;
            return this;
        }
        public Builder queryStrings(String... queryStrings) {
            return queryStrings(List.of(queryStrings));
        }
        public FrontdoorRouteCache build() {
            final var _resultValue = new FrontdoorRouteCache();
            _resultValue.compressionEnabled = compressionEnabled;
            _resultValue.contentTypesToCompresses = contentTypesToCompresses;
            _resultValue.queryStringCachingBehavior = queryStringCachingBehavior;
            _resultValue.queryStrings = queryStrings;
            return _resultValue;
        }
    }
}
