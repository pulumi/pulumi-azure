// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.netapp.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class VolumeCoolAccessArgs extends com.pulumi.resources.ResourceArgs {

    public static final VolumeCoolAccessArgs Empty = new VolumeCoolAccessArgs();

    /**
     * The coolness period in days for the volume. Possible vales are between `2` and `183`.
     * 
     */
    @Import(name="coolnessPeriodInDays", required=true)
    private Output<Integer> coolnessPeriodInDays;

    /**
     * @return The coolness period in days for the volume. Possible vales are between `2` and `183`.
     * 
     */
    public Output<Integer> coolnessPeriodInDays() {
        return this.coolnessPeriodInDays;
    }

    /**
     * The cool access retrieval policy for the volume. Possible values are `Default`, `Never` and `OnRead`.
     * 
     */
    @Import(name="retrievalPolicy", required=true)
    private Output<String> retrievalPolicy;

    /**
     * @return The cool access retrieval policy for the volume. Possible values are `Default`, `Never` and `OnRead`.
     * 
     */
    public Output<String> retrievalPolicy() {
        return this.retrievalPolicy;
    }

    /**
     * The cool access tiering policy for the volume. Possible values are `Auto` and `SnapshotOnly`.
     * 
     */
    @Import(name="tieringPolicy", required=true)
    private Output<String> tieringPolicy;

    /**
     * @return The cool access tiering policy for the volume. Possible values are `Auto` and `SnapshotOnly`.
     * 
     */
    public Output<String> tieringPolicy() {
        return this.tieringPolicy;
    }

    private VolumeCoolAccessArgs() {}

    private VolumeCoolAccessArgs(VolumeCoolAccessArgs $) {
        this.coolnessPeriodInDays = $.coolnessPeriodInDays;
        this.retrievalPolicy = $.retrievalPolicy;
        this.tieringPolicy = $.tieringPolicy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VolumeCoolAccessArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VolumeCoolAccessArgs $;

        public Builder() {
            $ = new VolumeCoolAccessArgs();
        }

        public Builder(VolumeCoolAccessArgs defaults) {
            $ = new VolumeCoolAccessArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param coolnessPeriodInDays The coolness period in days for the volume. Possible vales are between `2` and `183`.
         * 
         * @return builder
         * 
         */
        public Builder coolnessPeriodInDays(Output<Integer> coolnessPeriodInDays) {
            $.coolnessPeriodInDays = coolnessPeriodInDays;
            return this;
        }

        /**
         * @param coolnessPeriodInDays The coolness period in days for the volume. Possible vales are between `2` and `183`.
         * 
         * @return builder
         * 
         */
        public Builder coolnessPeriodInDays(Integer coolnessPeriodInDays) {
            return coolnessPeriodInDays(Output.of(coolnessPeriodInDays));
        }

        /**
         * @param retrievalPolicy The cool access retrieval policy for the volume. Possible values are `Default`, `Never` and `OnRead`.
         * 
         * @return builder
         * 
         */
        public Builder retrievalPolicy(Output<String> retrievalPolicy) {
            $.retrievalPolicy = retrievalPolicy;
            return this;
        }

        /**
         * @param retrievalPolicy The cool access retrieval policy for the volume. Possible values are `Default`, `Never` and `OnRead`.
         * 
         * @return builder
         * 
         */
        public Builder retrievalPolicy(String retrievalPolicy) {
            return retrievalPolicy(Output.of(retrievalPolicy));
        }

        /**
         * @param tieringPolicy The cool access tiering policy for the volume. Possible values are `Auto` and `SnapshotOnly`.
         * 
         * @return builder
         * 
         */
        public Builder tieringPolicy(Output<String> tieringPolicy) {
            $.tieringPolicy = tieringPolicy;
            return this;
        }

        /**
         * @param tieringPolicy The cool access tiering policy for the volume. Possible values are `Auto` and `SnapshotOnly`.
         * 
         * @return builder
         * 
         */
        public Builder tieringPolicy(String tieringPolicy) {
            return tieringPolicy(Output.of(tieringPolicy));
        }

        public VolumeCoolAccessArgs build() {
            if ($.coolnessPeriodInDays == null) {
                throw new MissingRequiredPropertyException("VolumeCoolAccessArgs", "coolnessPeriodInDays");
            }
            if ($.retrievalPolicy == null) {
                throw new MissingRequiredPropertyException("VolumeCoolAccessArgs", "retrievalPolicy");
            }
            if ($.tieringPolicy == null) {
                throw new MissingRequiredPropertyException("VolumeCoolAccessArgs", "tieringPolicy");
            }
            return $;
        }
    }

}
