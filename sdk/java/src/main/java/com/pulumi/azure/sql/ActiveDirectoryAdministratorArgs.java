// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.sql;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ActiveDirectoryAdministratorArgs extends com.pulumi.resources.ResourceArgs {

    public static final ActiveDirectoryAdministratorArgs Empty = new ActiveDirectoryAdministratorArgs();

    /**
     * Specifies whether only AD Users and administrators can be used to login (`true`) or also local database users (`false`).
     * 
     */
    @Import(name="azureadAuthenticationOnly")
    private @Nullable Output<Boolean> azureadAuthenticationOnly;

    /**
     * @return Specifies whether only AD Users and administrators can be used to login (`true`) or also local database users (`false`).
     * 
     */
    public Optional<Output<Boolean>> azureadAuthenticationOnly() {
        return Optional.ofNullable(this.azureadAuthenticationOnly);
    }

    /**
     * The login name of the principal to set as the server administrator
     * 
     */
    @Import(name="login", required=true)
    private Output<String> login;

    /**
     * @return The login name of the principal to set as the server administrator
     * 
     */
    public Output<String> login() {
        return this.login;
    }

    /**
     * The ID of the principal to set as the server administrator
     * 
     */
    @Import(name="objectId", required=true)
    private Output<String> objectId;

    /**
     * @return The ID of the principal to set as the server administrator
     * 
     */
    public Output<String> objectId() {
        return this.objectId;
    }

    /**
     * The name of the resource group for the SQL server. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group for the SQL server. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the SQL Server on which to set the administrator. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="serverName", required=true)
    private Output<String> serverName;

    /**
     * @return The name of the SQL Server on which to set the administrator. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> serverName() {
        return this.serverName;
    }

    /**
     * The Azure Tenant ID
     * 
     */
    @Import(name="tenantId", required=true)
    private Output<String> tenantId;

    /**
     * @return The Azure Tenant ID
     * 
     */
    public Output<String> tenantId() {
        return this.tenantId;
    }

    private ActiveDirectoryAdministratorArgs() {}

    private ActiveDirectoryAdministratorArgs(ActiveDirectoryAdministratorArgs $) {
        this.azureadAuthenticationOnly = $.azureadAuthenticationOnly;
        this.login = $.login;
        this.objectId = $.objectId;
        this.resourceGroupName = $.resourceGroupName;
        this.serverName = $.serverName;
        this.tenantId = $.tenantId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ActiveDirectoryAdministratorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ActiveDirectoryAdministratorArgs $;

        public Builder() {
            $ = new ActiveDirectoryAdministratorArgs();
        }

        public Builder(ActiveDirectoryAdministratorArgs defaults) {
            $ = new ActiveDirectoryAdministratorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param azureadAuthenticationOnly Specifies whether only AD Users and administrators can be used to login (`true`) or also local database users (`false`).
         * 
         * @return builder
         * 
         */
        public Builder azureadAuthenticationOnly(@Nullable Output<Boolean> azureadAuthenticationOnly) {
            $.azureadAuthenticationOnly = azureadAuthenticationOnly;
            return this;
        }

        /**
         * @param azureadAuthenticationOnly Specifies whether only AD Users and administrators can be used to login (`true`) or also local database users (`false`).
         * 
         * @return builder
         * 
         */
        public Builder azureadAuthenticationOnly(Boolean azureadAuthenticationOnly) {
            return azureadAuthenticationOnly(Output.of(azureadAuthenticationOnly));
        }

        /**
         * @param login The login name of the principal to set as the server administrator
         * 
         * @return builder
         * 
         */
        public Builder login(Output<String> login) {
            $.login = login;
            return this;
        }

        /**
         * @param login The login name of the principal to set as the server administrator
         * 
         * @return builder
         * 
         */
        public Builder login(String login) {
            return login(Output.of(login));
        }

        /**
         * @param objectId The ID of the principal to set as the server administrator
         * 
         * @return builder
         * 
         */
        public Builder objectId(Output<String> objectId) {
            $.objectId = objectId;
            return this;
        }

        /**
         * @param objectId The ID of the principal to set as the server administrator
         * 
         * @return builder
         * 
         */
        public Builder objectId(String objectId) {
            return objectId(Output.of(objectId));
        }

        /**
         * @param resourceGroupName The name of the resource group for the SQL server. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group for the SQL server. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param serverName The name of the SQL Server on which to set the administrator. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder serverName(Output<String> serverName) {
            $.serverName = serverName;
            return this;
        }

        /**
         * @param serverName The name of the SQL Server on which to set the administrator. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder serverName(String serverName) {
            return serverName(Output.of(serverName));
        }

        /**
         * @param tenantId The Azure Tenant ID
         * 
         * @return builder
         * 
         */
        public Builder tenantId(Output<String> tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        /**
         * @param tenantId The Azure Tenant ID
         * 
         * @return builder
         * 
         */
        public Builder tenantId(String tenantId) {
            return tenantId(Output.of(tenantId));
        }

        public ActiveDirectoryAdministratorArgs build() {
            if ($.login == null) {
                throw new MissingRequiredPropertyException("ActiveDirectoryAdministratorArgs", "login");
            }
            if ($.objectId == null) {
                throw new MissingRequiredPropertyException("ActiveDirectoryAdministratorArgs", "objectId");
            }
            if ($.resourceGroupName == null) {
                throw new MissingRequiredPropertyException("ActiveDirectoryAdministratorArgs", "resourceGroupName");
            }
            if ($.serverName == null) {
                throw new MissingRequiredPropertyException("ActiveDirectoryAdministratorArgs", "serverName");
            }
            if ($.tenantId == null) {
                throw new MissingRequiredPropertyException("ActiveDirectoryAdministratorArgs", "tenantId");
            }
            return $;
        }
    }

}
