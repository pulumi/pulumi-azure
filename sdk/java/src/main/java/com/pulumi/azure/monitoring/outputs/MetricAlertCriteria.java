// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.monitoring.outputs;

import com.pulumi.azure.monitoring.outputs.MetricAlertCriteriaDimension;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class MetricAlertCriteria {
    /**
     * @return The statistic that runs over the metric values. Possible values are `Average`, `Count`, `Minimum`, `Maximum` and `Total`.
     * 
     */
    private String aggregation;
    /**
     * @return One or more `dimension` blocks as defined below.
     * 
     */
    private @Nullable List<MetricAlertCriteriaDimension> dimensions;
    /**
     * @return One of the metric names to be monitored.
     * 
     */
    private String metricName;
    /**
     * @return One of the metric namespaces to be monitored.
     * 
     */
    private String metricNamespace;
    /**
     * @return The criteria operator. Possible values are `Equals`, `GreaterThan`, `GreaterThanOrEqual`, `LessThan` and `LessThanOrEqual`.
     * 
     */
    private String operator;
    /**
     * @return Skip the metric validation to allow creating an alert rule on a custom metric that isn&#39;t yet emitted? Defaults to `false`.
     * 
     */
    private @Nullable Boolean skipMetricValidation;
    /**
     * @return The criteria threshold value that activates the alert.
     * 
     */
    private Double threshold;

    private MetricAlertCriteria() {}
    /**
     * @return The statistic that runs over the metric values. Possible values are `Average`, `Count`, `Minimum`, `Maximum` and `Total`.
     * 
     */
    public String aggregation() {
        return this.aggregation;
    }
    /**
     * @return One or more `dimension` blocks as defined below.
     * 
     */
    public List<MetricAlertCriteriaDimension> dimensions() {
        return this.dimensions == null ? List.of() : this.dimensions;
    }
    /**
     * @return One of the metric names to be monitored.
     * 
     */
    public String metricName() {
        return this.metricName;
    }
    /**
     * @return One of the metric namespaces to be monitored.
     * 
     */
    public String metricNamespace() {
        return this.metricNamespace;
    }
    /**
     * @return The criteria operator. Possible values are `Equals`, `GreaterThan`, `GreaterThanOrEqual`, `LessThan` and `LessThanOrEqual`.
     * 
     */
    public String operator() {
        return this.operator;
    }
    /**
     * @return Skip the metric validation to allow creating an alert rule on a custom metric that isn&#39;t yet emitted? Defaults to `false`.
     * 
     */
    public Optional<Boolean> skipMetricValidation() {
        return Optional.ofNullable(this.skipMetricValidation);
    }
    /**
     * @return The criteria threshold value that activates the alert.
     * 
     */
    public Double threshold() {
        return this.threshold;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MetricAlertCriteria defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String aggregation;
        private @Nullable List<MetricAlertCriteriaDimension> dimensions;
        private String metricName;
        private String metricNamespace;
        private String operator;
        private @Nullable Boolean skipMetricValidation;
        private Double threshold;
        public Builder() {}
        public Builder(MetricAlertCriteria defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aggregation = defaults.aggregation;
    	      this.dimensions = defaults.dimensions;
    	      this.metricName = defaults.metricName;
    	      this.metricNamespace = defaults.metricNamespace;
    	      this.operator = defaults.operator;
    	      this.skipMetricValidation = defaults.skipMetricValidation;
    	      this.threshold = defaults.threshold;
        }

        @CustomType.Setter
        public Builder aggregation(String aggregation) {
            if (aggregation == null) {
              throw new MissingRequiredPropertyException("MetricAlertCriteria", "aggregation");
            }
            this.aggregation = aggregation;
            return this;
        }
        @CustomType.Setter
        public Builder dimensions(@Nullable List<MetricAlertCriteriaDimension> dimensions) {

            this.dimensions = dimensions;
            return this;
        }
        public Builder dimensions(MetricAlertCriteriaDimension... dimensions) {
            return dimensions(List.of(dimensions));
        }
        @CustomType.Setter
        public Builder metricName(String metricName) {
            if (metricName == null) {
              throw new MissingRequiredPropertyException("MetricAlertCriteria", "metricName");
            }
            this.metricName = metricName;
            return this;
        }
        @CustomType.Setter
        public Builder metricNamespace(String metricNamespace) {
            if (metricNamespace == null) {
              throw new MissingRequiredPropertyException("MetricAlertCriteria", "metricNamespace");
            }
            this.metricNamespace = metricNamespace;
            return this;
        }
        @CustomType.Setter
        public Builder operator(String operator) {
            if (operator == null) {
              throw new MissingRequiredPropertyException("MetricAlertCriteria", "operator");
            }
            this.operator = operator;
            return this;
        }
        @CustomType.Setter
        public Builder skipMetricValidation(@Nullable Boolean skipMetricValidation) {

            this.skipMetricValidation = skipMetricValidation;
            return this;
        }
        @CustomType.Setter
        public Builder threshold(Double threshold) {
            if (threshold == null) {
              throw new MissingRequiredPropertyException("MetricAlertCriteria", "threshold");
            }
            this.threshold = threshold;
            return this;
        }
        public MetricAlertCriteria build() {
            final var _resultValue = new MetricAlertCriteria();
            _resultValue.aggregation = aggregation;
            _resultValue.dimensions = dimensions;
            _resultValue.metricName = metricName;
            _resultValue.metricNamespace = metricNamespace;
            _resultValue.operator = operator;
            _resultValue.skipMetricValidation = skipMetricValidation;
            _resultValue.threshold = threshold;
            return _resultValue;
        }
    }
}
