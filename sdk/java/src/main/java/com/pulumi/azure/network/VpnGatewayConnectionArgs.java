// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network;

import com.pulumi.azure.network.inputs.VpnGatewayConnectionRoutingArgs;
import com.pulumi.azure.network.inputs.VpnGatewayConnectionTrafficSelectorPolicyArgs;
import com.pulumi.azure.network.inputs.VpnGatewayConnectionVpnLinkArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VpnGatewayConnectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final VpnGatewayConnectionArgs Empty = new VpnGatewayConnectionArgs();

    /**
     * Whether Internet Security is enabled for this VPN Connection. Defaults to `false`.
     * 
     */
    @Import(name="internetSecurityEnabled")
    private @Nullable Output<Boolean> internetSecurityEnabled;

    /**
     * @return Whether Internet Security is enabled for this VPN Connection. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> internetSecurityEnabled() {
        return Optional.ofNullable(this.internetSecurityEnabled);
    }

    /**
     * The name which should be used for this VPN Gateway Connection. Changing this forces a new VPN Gateway Connection to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name which should be used for this VPN Gateway Connection. Changing this forces a new VPN Gateway Connection to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the remote VPN Site, which will connect to the VPN Gateway. Changing this forces a new VPN Gateway Connection to be created.
     * 
     */
    @Import(name="remoteVpnSiteId", required=true)
    private Output<String> remoteVpnSiteId;

    /**
     * @return The ID of the remote VPN Site, which will connect to the VPN Gateway. Changing this forces a new VPN Gateway Connection to be created.
     * 
     */
    public Output<String> remoteVpnSiteId() {
        return this.remoteVpnSiteId;
    }

    /**
     * A `routing` block as defined below. If this is not specified, there will be a default route table created implicitly.
     * 
     */
    @Import(name="routing")
    private @Nullable Output<VpnGatewayConnectionRoutingArgs> routing;

    /**
     * @return A `routing` block as defined below. If this is not specified, there will be a default route table created implicitly.
     * 
     */
    public Optional<Output<VpnGatewayConnectionRoutingArgs>> routing() {
        return Optional.ofNullable(this.routing);
    }

    /**
     * One or more `traffic_selector_policy` blocks as defined below.
     * 
     */
    @Import(name="trafficSelectorPolicies")
    private @Nullable Output<List<VpnGatewayConnectionTrafficSelectorPolicyArgs>> trafficSelectorPolicies;

    /**
     * @return One or more `traffic_selector_policy` blocks as defined below.
     * 
     */
    public Optional<Output<List<VpnGatewayConnectionTrafficSelectorPolicyArgs>>> trafficSelectorPolicies() {
        return Optional.ofNullable(this.trafficSelectorPolicies);
    }

    /**
     * The ID of the VPN Gateway that this VPN Gateway Connection belongs to. Changing this forces a new VPN Gateway Connection to be created.
     * 
     */
    @Import(name="vpnGatewayId", required=true)
    private Output<String> vpnGatewayId;

    /**
     * @return The ID of the VPN Gateway that this VPN Gateway Connection belongs to. Changing this forces a new VPN Gateway Connection to be created.
     * 
     */
    public Output<String> vpnGatewayId() {
        return this.vpnGatewayId;
    }

    /**
     * One or more `vpn_link` blocks as defined below.
     * 
     */
    @Import(name="vpnLinks", required=true)
    private Output<List<VpnGatewayConnectionVpnLinkArgs>> vpnLinks;

    /**
     * @return One or more `vpn_link` blocks as defined below.
     * 
     */
    public Output<List<VpnGatewayConnectionVpnLinkArgs>> vpnLinks() {
        return this.vpnLinks;
    }

    private VpnGatewayConnectionArgs() {}

    private VpnGatewayConnectionArgs(VpnGatewayConnectionArgs $) {
        this.internetSecurityEnabled = $.internetSecurityEnabled;
        this.name = $.name;
        this.remoteVpnSiteId = $.remoteVpnSiteId;
        this.routing = $.routing;
        this.trafficSelectorPolicies = $.trafficSelectorPolicies;
        this.vpnGatewayId = $.vpnGatewayId;
        this.vpnLinks = $.vpnLinks;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VpnGatewayConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VpnGatewayConnectionArgs $;

        public Builder() {
            $ = new VpnGatewayConnectionArgs();
        }

        public Builder(VpnGatewayConnectionArgs defaults) {
            $ = new VpnGatewayConnectionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param internetSecurityEnabled Whether Internet Security is enabled for this VPN Connection. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder internetSecurityEnabled(@Nullable Output<Boolean> internetSecurityEnabled) {
            $.internetSecurityEnabled = internetSecurityEnabled;
            return this;
        }

        /**
         * @param internetSecurityEnabled Whether Internet Security is enabled for this VPN Connection. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder internetSecurityEnabled(Boolean internetSecurityEnabled) {
            return internetSecurityEnabled(Output.of(internetSecurityEnabled));
        }

        /**
         * @param name The name which should be used for this VPN Gateway Connection. Changing this forces a new VPN Gateway Connection to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this VPN Gateway Connection. Changing this forces a new VPN Gateway Connection to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param remoteVpnSiteId The ID of the remote VPN Site, which will connect to the VPN Gateway. Changing this forces a new VPN Gateway Connection to be created.
         * 
         * @return builder
         * 
         */
        public Builder remoteVpnSiteId(Output<String> remoteVpnSiteId) {
            $.remoteVpnSiteId = remoteVpnSiteId;
            return this;
        }

        /**
         * @param remoteVpnSiteId The ID of the remote VPN Site, which will connect to the VPN Gateway. Changing this forces a new VPN Gateway Connection to be created.
         * 
         * @return builder
         * 
         */
        public Builder remoteVpnSiteId(String remoteVpnSiteId) {
            return remoteVpnSiteId(Output.of(remoteVpnSiteId));
        }

        /**
         * @param routing A `routing` block as defined below. If this is not specified, there will be a default route table created implicitly.
         * 
         * @return builder
         * 
         */
        public Builder routing(@Nullable Output<VpnGatewayConnectionRoutingArgs> routing) {
            $.routing = routing;
            return this;
        }

        /**
         * @param routing A `routing` block as defined below. If this is not specified, there will be a default route table created implicitly.
         * 
         * @return builder
         * 
         */
        public Builder routing(VpnGatewayConnectionRoutingArgs routing) {
            return routing(Output.of(routing));
        }

        /**
         * @param trafficSelectorPolicies One or more `traffic_selector_policy` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder trafficSelectorPolicies(@Nullable Output<List<VpnGatewayConnectionTrafficSelectorPolicyArgs>> trafficSelectorPolicies) {
            $.trafficSelectorPolicies = trafficSelectorPolicies;
            return this;
        }

        /**
         * @param trafficSelectorPolicies One or more `traffic_selector_policy` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder trafficSelectorPolicies(List<VpnGatewayConnectionTrafficSelectorPolicyArgs> trafficSelectorPolicies) {
            return trafficSelectorPolicies(Output.of(trafficSelectorPolicies));
        }

        /**
         * @param trafficSelectorPolicies One or more `traffic_selector_policy` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder trafficSelectorPolicies(VpnGatewayConnectionTrafficSelectorPolicyArgs... trafficSelectorPolicies) {
            return trafficSelectorPolicies(List.of(trafficSelectorPolicies));
        }

        /**
         * @param vpnGatewayId The ID of the VPN Gateway that this VPN Gateway Connection belongs to. Changing this forces a new VPN Gateway Connection to be created.
         * 
         * @return builder
         * 
         */
        public Builder vpnGatewayId(Output<String> vpnGatewayId) {
            $.vpnGatewayId = vpnGatewayId;
            return this;
        }

        /**
         * @param vpnGatewayId The ID of the VPN Gateway that this VPN Gateway Connection belongs to. Changing this forces a new VPN Gateway Connection to be created.
         * 
         * @return builder
         * 
         */
        public Builder vpnGatewayId(String vpnGatewayId) {
            return vpnGatewayId(Output.of(vpnGatewayId));
        }

        /**
         * @param vpnLinks One or more `vpn_link` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder vpnLinks(Output<List<VpnGatewayConnectionVpnLinkArgs>> vpnLinks) {
            $.vpnLinks = vpnLinks;
            return this;
        }

        /**
         * @param vpnLinks One or more `vpn_link` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder vpnLinks(List<VpnGatewayConnectionVpnLinkArgs> vpnLinks) {
            return vpnLinks(Output.of(vpnLinks));
        }

        /**
         * @param vpnLinks One or more `vpn_link` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder vpnLinks(VpnGatewayConnectionVpnLinkArgs... vpnLinks) {
            return vpnLinks(List.of(vpnLinks));
        }

        public VpnGatewayConnectionArgs build() {
            if ($.remoteVpnSiteId == null) {
                throw new MissingRequiredPropertyException("VpnGatewayConnectionArgs", "remoteVpnSiteId");
            }
            if ($.vpnGatewayId == null) {
                throw new MissingRequiredPropertyException("VpnGatewayConnectionArgs", "vpnGatewayId");
            }
            if ($.vpnLinks == null) {
                throw new MissingRequiredPropertyException("VpnGatewayConnectionArgs", "vpnLinks");
            }
            return $;
        }
    }

}
