// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appinsights.inputs;

import com.pulumi.azure.appinsights.inputs.StandardWebTestRequestHeaderArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StandardWebTestRequestArgs extends com.pulumi.resources.ResourceArgs {

    public static final StandardWebTestRequestArgs Empty = new StandardWebTestRequestArgs();

    /**
     * The WebTest request body.
     * 
     */
    @Import(name="body")
    private @Nullable Output<String> body;

    /**
     * @return The WebTest request body.
     * 
     */
    public Optional<Output<String>> body() {
        return Optional.ofNullable(this.body);
    }

    /**
     * Should the following of redirects be enabled? Defaults to `true`.
     * 
     */
    @Import(name="followRedirectsEnabled")
    private @Nullable Output<Boolean> followRedirectsEnabled;

    /**
     * @return Should the following of redirects be enabled? Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> followRedirectsEnabled() {
        return Optional.ofNullable(this.followRedirectsEnabled);
    }

    /**
     * One or more `header` blocks as defined above.
     * 
     */
    @Import(name="headers")
    private @Nullable Output<List<StandardWebTestRequestHeaderArgs>> headers;

    /**
     * @return One or more `header` blocks as defined above.
     * 
     */
    public Optional<Output<List<StandardWebTestRequestHeaderArgs>>> headers() {
        return Optional.ofNullable(this.headers);
    }

    /**
     * Which HTTP verb to use for the call. Options are &#39;GET&#39;, &#39;POST&#39;, &#39;PUT&#39;, &#39;PATCH&#39;, and &#39;DELETE&#39;. Defaults to `GET`.
     * 
     */
    @Import(name="httpVerb")
    private @Nullable Output<String> httpVerb;

    /**
     * @return Which HTTP verb to use for the call. Options are &#39;GET&#39;, &#39;POST&#39;, &#39;PUT&#39;, &#39;PATCH&#39;, and &#39;DELETE&#39;. Defaults to `GET`.
     * 
     */
    public Optional<Output<String>> httpVerb() {
        return Optional.ofNullable(this.httpVerb);
    }

    /**
     * Should the parsing of dependend requests be enabled? Defaults to `true`.
     * 
     */
    @Import(name="parseDependentRequestsEnabled")
    private @Nullable Output<Boolean> parseDependentRequestsEnabled;

    /**
     * @return Should the parsing of dependend requests be enabled? Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> parseDependentRequestsEnabled() {
        return Optional.ofNullable(this.parseDependentRequestsEnabled);
    }

    /**
     * The WebTest request URL.
     * 
     */
    @Import(name="url", required=true)
    private Output<String> url;

    /**
     * @return The WebTest request URL.
     * 
     */
    public Output<String> url() {
        return this.url;
    }

    private StandardWebTestRequestArgs() {}

    private StandardWebTestRequestArgs(StandardWebTestRequestArgs $) {
        this.body = $.body;
        this.followRedirectsEnabled = $.followRedirectsEnabled;
        this.headers = $.headers;
        this.httpVerb = $.httpVerb;
        this.parseDependentRequestsEnabled = $.parseDependentRequestsEnabled;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StandardWebTestRequestArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StandardWebTestRequestArgs $;

        public Builder() {
            $ = new StandardWebTestRequestArgs();
        }

        public Builder(StandardWebTestRequestArgs defaults) {
            $ = new StandardWebTestRequestArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param body The WebTest request body.
         * 
         * @return builder
         * 
         */
        public Builder body(@Nullable Output<String> body) {
            $.body = body;
            return this;
        }

        /**
         * @param body The WebTest request body.
         * 
         * @return builder
         * 
         */
        public Builder body(String body) {
            return body(Output.of(body));
        }

        /**
         * @param followRedirectsEnabled Should the following of redirects be enabled? Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder followRedirectsEnabled(@Nullable Output<Boolean> followRedirectsEnabled) {
            $.followRedirectsEnabled = followRedirectsEnabled;
            return this;
        }

        /**
         * @param followRedirectsEnabled Should the following of redirects be enabled? Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder followRedirectsEnabled(Boolean followRedirectsEnabled) {
            return followRedirectsEnabled(Output.of(followRedirectsEnabled));
        }

        /**
         * @param headers One or more `header` blocks as defined above.
         * 
         * @return builder
         * 
         */
        public Builder headers(@Nullable Output<List<StandardWebTestRequestHeaderArgs>> headers) {
            $.headers = headers;
            return this;
        }

        /**
         * @param headers One or more `header` blocks as defined above.
         * 
         * @return builder
         * 
         */
        public Builder headers(List<StandardWebTestRequestHeaderArgs> headers) {
            return headers(Output.of(headers));
        }

        /**
         * @param headers One or more `header` blocks as defined above.
         * 
         * @return builder
         * 
         */
        public Builder headers(StandardWebTestRequestHeaderArgs... headers) {
            return headers(List.of(headers));
        }

        /**
         * @param httpVerb Which HTTP verb to use for the call. Options are &#39;GET&#39;, &#39;POST&#39;, &#39;PUT&#39;, &#39;PATCH&#39;, and &#39;DELETE&#39;. Defaults to `GET`.
         * 
         * @return builder
         * 
         */
        public Builder httpVerb(@Nullable Output<String> httpVerb) {
            $.httpVerb = httpVerb;
            return this;
        }

        /**
         * @param httpVerb Which HTTP verb to use for the call. Options are &#39;GET&#39;, &#39;POST&#39;, &#39;PUT&#39;, &#39;PATCH&#39;, and &#39;DELETE&#39;. Defaults to `GET`.
         * 
         * @return builder
         * 
         */
        public Builder httpVerb(String httpVerb) {
            return httpVerb(Output.of(httpVerb));
        }

        /**
         * @param parseDependentRequestsEnabled Should the parsing of dependend requests be enabled? Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder parseDependentRequestsEnabled(@Nullable Output<Boolean> parseDependentRequestsEnabled) {
            $.parseDependentRequestsEnabled = parseDependentRequestsEnabled;
            return this;
        }

        /**
         * @param parseDependentRequestsEnabled Should the parsing of dependend requests be enabled? Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder parseDependentRequestsEnabled(Boolean parseDependentRequestsEnabled) {
            return parseDependentRequestsEnabled(Output.of(parseDependentRequestsEnabled));
        }

        /**
         * @param url The WebTest request URL.
         * 
         * @return builder
         * 
         */
        public Builder url(Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url The WebTest request URL.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        public StandardWebTestRequestArgs build() {
            if ($.url == null) {
                throw new MissingRequiredPropertyException("StandardWebTestRequestArgs", "url");
            }
            return $;
        }
    }

}
