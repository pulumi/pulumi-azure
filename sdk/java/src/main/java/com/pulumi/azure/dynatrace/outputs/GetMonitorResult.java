// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.dynatrace.outputs;

import com.pulumi.azure.dynatrace.outputs.GetMonitorEnvironmentProperty;
import com.pulumi.azure.dynatrace.outputs.GetMonitorIdentity;
import com.pulumi.azure.dynatrace.outputs.GetMonitorPlan;
import com.pulumi.azure.dynatrace.outputs.GetMonitorUser;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetMonitorResult {
    private List<GetMonitorEnvironmentProperty> environmentProperties;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The kind of managed identity assigned to this resource.  A `identity` block as defined below.
     * 
     */
    private List<GetMonitorIdentity> identities;
    /**
     * @return The Azure Region where the Dynatrace monitor should exist.
     * 
     */
    private String location;
    /**
     * @return Flag specifying the Marketplace Subscription Status of the resource. If payment is not made in time, the resource will go in Suspended state.
     * 
     */
    private String marketplaceSubscription;
    /**
     * @return Flag specifying if the resource monitoring is enabled or disabled.
     * 
     */
    private Boolean monitoringEnabled;
    private String name;
    /**
     * @return Plan id as published by Dynatrace.
     * 
     */
    private List<GetMonitorPlan> plans;
    private String resourceGroupName;
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return User&#39;s information. A `user` block as defined below.
     * 
     */
    private List<GetMonitorUser> users;

    private GetMonitorResult() {}
    public List<GetMonitorEnvironmentProperty> environmentProperties() {
        return this.environmentProperties;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The kind of managed identity assigned to this resource.  A `identity` block as defined below.
     * 
     */
    public List<GetMonitorIdentity> identities() {
        return this.identities;
    }
    /**
     * @return The Azure Region where the Dynatrace monitor should exist.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return Flag specifying the Marketplace Subscription Status of the resource. If payment is not made in time, the resource will go in Suspended state.
     * 
     */
    public String marketplaceSubscription() {
        return this.marketplaceSubscription;
    }
    /**
     * @return Flag specifying if the resource monitoring is enabled or disabled.
     * 
     */
    public Boolean monitoringEnabled() {
        return this.monitoringEnabled;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return Plan id as published by Dynatrace.
     * 
     */
    public List<GetMonitorPlan> plans() {
        return this.plans;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return User&#39;s information. A `user` block as defined below.
     * 
     */
    public List<GetMonitorUser> users() {
        return this.users;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMonitorResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetMonitorEnvironmentProperty> environmentProperties;
        private String id;
        private List<GetMonitorIdentity> identities;
        private String location;
        private String marketplaceSubscription;
        private Boolean monitoringEnabled;
        private String name;
        private List<GetMonitorPlan> plans;
        private String resourceGroupName;
        private Map<String,String> tags;
        private List<GetMonitorUser> users;
        public Builder() {}
        public Builder(GetMonitorResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.environmentProperties = defaults.environmentProperties;
    	      this.id = defaults.id;
    	      this.identities = defaults.identities;
    	      this.location = defaults.location;
    	      this.marketplaceSubscription = defaults.marketplaceSubscription;
    	      this.monitoringEnabled = defaults.monitoringEnabled;
    	      this.name = defaults.name;
    	      this.plans = defaults.plans;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.tags = defaults.tags;
    	      this.users = defaults.users;
        }

        @CustomType.Setter
        public Builder environmentProperties(List<GetMonitorEnvironmentProperty> environmentProperties) {
            if (environmentProperties == null) {
              throw new MissingRequiredPropertyException("GetMonitorResult", "environmentProperties");
            }
            this.environmentProperties = environmentProperties;
            return this;
        }
        public Builder environmentProperties(GetMonitorEnvironmentProperty... environmentProperties) {
            return environmentProperties(List.of(environmentProperties));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetMonitorResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder identities(List<GetMonitorIdentity> identities) {
            if (identities == null) {
              throw new MissingRequiredPropertyException("GetMonitorResult", "identities");
            }
            this.identities = identities;
            return this;
        }
        public Builder identities(GetMonitorIdentity... identities) {
            return identities(List.of(identities));
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetMonitorResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder marketplaceSubscription(String marketplaceSubscription) {
            if (marketplaceSubscription == null) {
              throw new MissingRequiredPropertyException("GetMonitorResult", "marketplaceSubscription");
            }
            this.marketplaceSubscription = marketplaceSubscription;
            return this;
        }
        @CustomType.Setter
        public Builder monitoringEnabled(Boolean monitoringEnabled) {
            if (monitoringEnabled == null) {
              throw new MissingRequiredPropertyException("GetMonitorResult", "monitoringEnabled");
            }
            this.monitoringEnabled = monitoringEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetMonitorResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder plans(List<GetMonitorPlan> plans) {
            if (plans == null) {
              throw new MissingRequiredPropertyException("GetMonitorResult", "plans");
            }
            this.plans = plans;
            return this;
        }
        public Builder plans(GetMonitorPlan... plans) {
            return plans(List.of(plans));
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            if (resourceGroupName == null) {
              throw new MissingRequiredPropertyException("GetMonitorResult", "resourceGroupName");
            }
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetMonitorResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder users(List<GetMonitorUser> users) {
            if (users == null) {
              throw new MissingRequiredPropertyException("GetMonitorResult", "users");
            }
            this.users = users;
            return this;
        }
        public Builder users(GetMonitorUser... users) {
            return users(List.of(users));
        }
        public GetMonitorResult build() {
            final var _resultValue = new GetMonitorResult();
            _resultValue.environmentProperties = environmentProperties;
            _resultValue.id = id;
            _resultValue.identities = identities;
            _resultValue.location = location;
            _resultValue.marketplaceSubscription = marketplaceSubscription;
            _resultValue.monitoringEnabled = monitoringEnabled;
            _resultValue.name = name;
            _resultValue.plans = plans;
            _resultValue.resourceGroupName = resourceGroupName;
            _resultValue.tags = tags;
            _resultValue.users = users;
            return _resultValue;
        }
    }
}
