// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerservice.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GroupImageRegistryCredentialArgs extends com.pulumi.resources.ResourceArgs {

    public static final GroupImageRegistryCredentialArgs Empty = new GroupImageRegistryCredentialArgs();

    /**
     * The password with which to connect to the registry. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return The password with which to connect to the registry. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * The address to use to connect to the registry without protocol (&#34;https&#34;/&#34;http&#34;). For example: &#34;myacr.acr.io&#34;. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="server", required=true)
    private Output<String> server;

    /**
     * @return The address to use to connect to the registry without protocol (&#34;https&#34;/&#34;http&#34;). For example: &#34;myacr.acr.io&#34;. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> server() {
        return this.server;
    }

    /**
     * The identity ID for the private registry. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="userAssignedIdentityId")
    private @Nullable Output<String> userAssignedIdentityId;

    /**
     * @return The identity ID for the private registry. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> userAssignedIdentityId() {
        return Optional.ofNullable(this.userAssignedIdentityId);
    }

    /**
     * The username with which to connect to the registry. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return The username with which to connect to the registry. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private GroupImageRegistryCredentialArgs() {}

    private GroupImageRegistryCredentialArgs(GroupImageRegistryCredentialArgs $) {
        this.password = $.password;
        this.server = $.server;
        this.userAssignedIdentityId = $.userAssignedIdentityId;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GroupImageRegistryCredentialArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GroupImageRegistryCredentialArgs $;

        public Builder() {
            $ = new GroupImageRegistryCredentialArgs();
        }

        public Builder(GroupImageRegistryCredentialArgs defaults) {
            $ = new GroupImageRegistryCredentialArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param password The password with which to connect to the registry. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The password with which to connect to the registry. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param server The address to use to connect to the registry without protocol (&#34;https&#34;/&#34;http&#34;). For example: &#34;myacr.acr.io&#34;. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder server(Output<String> server) {
            $.server = server;
            return this;
        }

        /**
         * @param server The address to use to connect to the registry without protocol (&#34;https&#34;/&#34;http&#34;). For example: &#34;myacr.acr.io&#34;. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder server(String server) {
            return server(Output.of(server));
        }

        /**
         * @param userAssignedIdentityId The identity ID for the private registry. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder userAssignedIdentityId(@Nullable Output<String> userAssignedIdentityId) {
            $.userAssignedIdentityId = userAssignedIdentityId;
            return this;
        }

        /**
         * @param userAssignedIdentityId The identity ID for the private registry. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder userAssignedIdentityId(String userAssignedIdentityId) {
            return userAssignedIdentityId(Output.of(userAssignedIdentityId));
        }

        /**
         * @param username The username with which to connect to the registry. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The username with which to connect to the registry. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public GroupImageRegistryCredentialArgs build() {
            if ($.server == null) {
                throw new MissingRequiredPropertyException("GroupImageRegistryCredentialArgs", "server");
            }
            return $;
        }
    }

}
