// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetVirtualNetworkResult {
    /**
     * @return The list of address spaces used by the virtual network.
     * 
     */
    private List<String> addressSpaces;
    /**
     * @return The list of DNS servers used by the virtual network.
     * 
     */
    private List<String> dnsServers;
    /**
     * @return The GUID of the virtual network.
     * 
     */
    private String guid;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Location of the virtual network.
     * 
     */
    private String location;
    private String name;
    private String resourceGroupName;
    /**
     * @return The list of name of the subnets that are attached to this virtual network.
     * 
     */
    private List<String> subnets;
    /**
     * @return A mapping of tags to assigned to the resource.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return A mapping of name - virtual network id of the virtual network peerings.
     * 
     */
    private Map<String,String> vnetPeerings;
    /**
     * @return A list of virtual network peerings IP addresses.
     * 
     */
    private List<String> vnetPeeringsAddresses;

    private GetVirtualNetworkResult() {}
    /**
     * @return The list of address spaces used by the virtual network.
     * 
     */
    public List<String> addressSpaces() {
        return this.addressSpaces;
    }
    /**
     * @return The list of DNS servers used by the virtual network.
     * 
     */
    public List<String> dnsServers() {
        return this.dnsServers;
    }
    /**
     * @return The GUID of the virtual network.
     * 
     */
    public String guid() {
        return this.guid;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Location of the virtual network.
     * 
     */
    public String location() {
        return this.location;
    }
    public String name() {
        return this.name;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return The list of name of the subnets that are attached to this virtual network.
     * 
     */
    public List<String> subnets() {
        return this.subnets;
    }
    /**
     * @return A mapping of tags to assigned to the resource.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return A mapping of name - virtual network id of the virtual network peerings.
     * 
     */
    public Map<String,String> vnetPeerings() {
        return this.vnetPeerings;
    }
    /**
     * @return A list of virtual network peerings IP addresses.
     * 
     */
    public List<String> vnetPeeringsAddresses() {
        return this.vnetPeeringsAddresses;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVirtualNetworkResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> addressSpaces;
        private List<String> dnsServers;
        private String guid;
        private String id;
        private String location;
        private String name;
        private String resourceGroupName;
        private List<String> subnets;
        private Map<String,String> tags;
        private Map<String,String> vnetPeerings;
        private List<String> vnetPeeringsAddresses;
        public Builder() {}
        public Builder(GetVirtualNetworkResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.addressSpaces = defaults.addressSpaces;
    	      this.dnsServers = defaults.dnsServers;
    	      this.guid = defaults.guid;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.subnets = defaults.subnets;
    	      this.tags = defaults.tags;
    	      this.vnetPeerings = defaults.vnetPeerings;
    	      this.vnetPeeringsAddresses = defaults.vnetPeeringsAddresses;
        }

        @CustomType.Setter
        public Builder addressSpaces(List<String> addressSpaces) {
            if (addressSpaces == null) {
              throw new MissingRequiredPropertyException("GetVirtualNetworkResult", "addressSpaces");
            }
            this.addressSpaces = addressSpaces;
            return this;
        }
        public Builder addressSpaces(String... addressSpaces) {
            return addressSpaces(List.of(addressSpaces));
        }
        @CustomType.Setter
        public Builder dnsServers(List<String> dnsServers) {
            if (dnsServers == null) {
              throw new MissingRequiredPropertyException("GetVirtualNetworkResult", "dnsServers");
            }
            this.dnsServers = dnsServers;
            return this;
        }
        public Builder dnsServers(String... dnsServers) {
            return dnsServers(List.of(dnsServers));
        }
        @CustomType.Setter
        public Builder guid(String guid) {
            if (guid == null) {
              throw new MissingRequiredPropertyException("GetVirtualNetworkResult", "guid");
            }
            this.guid = guid;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetVirtualNetworkResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetVirtualNetworkResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetVirtualNetworkResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            if (resourceGroupName == null) {
              throw new MissingRequiredPropertyException("GetVirtualNetworkResult", "resourceGroupName");
            }
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder subnets(List<String> subnets) {
            if (subnets == null) {
              throw new MissingRequiredPropertyException("GetVirtualNetworkResult", "subnets");
            }
            this.subnets = subnets;
            return this;
        }
        public Builder subnets(String... subnets) {
            return subnets(List.of(subnets));
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetVirtualNetworkResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder vnetPeerings(Map<String,String> vnetPeerings) {
            if (vnetPeerings == null) {
              throw new MissingRequiredPropertyException("GetVirtualNetworkResult", "vnetPeerings");
            }
            this.vnetPeerings = vnetPeerings;
            return this;
        }
        @CustomType.Setter
        public Builder vnetPeeringsAddresses(List<String> vnetPeeringsAddresses) {
            if (vnetPeeringsAddresses == null) {
              throw new MissingRequiredPropertyException("GetVirtualNetworkResult", "vnetPeeringsAddresses");
            }
            this.vnetPeeringsAddresses = vnetPeeringsAddresses;
            return this;
        }
        public Builder vnetPeeringsAddresses(String... vnetPeeringsAddresses) {
            return vnetPeeringsAddresses(List.of(vnetPeeringsAddresses));
        }
        public GetVirtualNetworkResult build() {
            final var _resultValue = new GetVirtualNetworkResult();
            _resultValue.addressSpaces = addressSpaces;
            _resultValue.dnsServers = dnsServers;
            _resultValue.guid = guid;
            _resultValue.id = id;
            _resultValue.location = location;
            _resultValue.name = name;
            _resultValue.resourceGroupName = resourceGroupName;
            _resultValue.subnets = subnets;
            _resultValue.tags = tags;
            _resultValue.vnetPeerings = vnetPeerings;
            _resultValue.vnetPeeringsAddresses = vnetPeeringsAddresses;
            return _resultValue;
        }
    }
}
