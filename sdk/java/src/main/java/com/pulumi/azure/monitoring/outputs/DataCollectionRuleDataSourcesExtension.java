// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.monitoring.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DataCollectionRuleDataSourcesExtension {
    /**
     * @return A JSON String which specifies the extension setting.
     * 
     */
    private final @Nullable String extensionJson;
    /**
     * @return The name of the VM extension.
     * 
     */
    private final String extensionName;
    /**
     * @return Specifies a list of data sources this extension needs data from. An item should be a name of a supported data source which produces only one stream. Supported data sources type: `performance_counter`, `windows_event_log`,and `syslog`.
     * 
     */
    private final @Nullable List<String> inputDataSources;
    /**
     * @return The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
     * 
     */
    private final String name;
    /**
     * @return Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible values are `Microsoft-Event`, `Microsoft-InsightsMetrics`, `Microsoft-Perf`, `Microsoft-Syslog`,and `Microsoft-WindowsEvent`.
     * 
     */
    private final List<String> streams;

    @CustomType.Constructor
    private DataCollectionRuleDataSourcesExtension(
        @CustomType.Parameter("extensionJson") @Nullable String extensionJson,
        @CustomType.Parameter("extensionName") String extensionName,
        @CustomType.Parameter("inputDataSources") @Nullable List<String> inputDataSources,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("streams") List<String> streams) {
        this.extensionJson = extensionJson;
        this.extensionName = extensionName;
        this.inputDataSources = inputDataSources;
        this.name = name;
        this.streams = streams;
    }

    /**
     * @return A JSON String which specifies the extension setting.
     * 
     */
    public Optional<String> extensionJson() {
        return Optional.ofNullable(this.extensionJson);
    }
    /**
     * @return The name of the VM extension.
     * 
     */
    public String extensionName() {
        return this.extensionName;
    }
    /**
     * @return Specifies a list of data sources this extension needs data from. An item should be a name of a supported data source which produces only one stream. Supported data sources type: `performance_counter`, `windows_event_log`,and `syslog`.
     * 
     */
    public List<String> inputDataSources() {
        return this.inputDataSources == null ? List.of() : this.inputDataSources;
    }
    /**
     * @return The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible values are `Microsoft-Event`, `Microsoft-InsightsMetrics`, `Microsoft-Perf`, `Microsoft-Syslog`,and `Microsoft-WindowsEvent`.
     * 
     */
    public List<String> streams() {
        return this.streams;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataCollectionRuleDataSourcesExtension defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String extensionJson;
        private String extensionName;
        private @Nullable List<String> inputDataSources;
        private String name;
        private List<String> streams;

        public Builder() {
    	      // Empty
        }

        public Builder(DataCollectionRuleDataSourcesExtension defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.extensionJson = defaults.extensionJson;
    	      this.extensionName = defaults.extensionName;
    	      this.inputDataSources = defaults.inputDataSources;
    	      this.name = defaults.name;
    	      this.streams = defaults.streams;
        }

        public Builder extensionJson(@Nullable String extensionJson) {
            this.extensionJson = extensionJson;
            return this;
        }
        public Builder extensionName(String extensionName) {
            this.extensionName = Objects.requireNonNull(extensionName);
            return this;
        }
        public Builder inputDataSources(@Nullable List<String> inputDataSources) {
            this.inputDataSources = inputDataSources;
            return this;
        }
        public Builder inputDataSources(String... inputDataSources) {
            return inputDataSources(List.of(inputDataSources));
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder streams(List<String> streams) {
            this.streams = Objects.requireNonNull(streams);
            return this;
        }
        public Builder streams(String... streams) {
            return streams(List.of(streams));
        }        public DataCollectionRuleDataSourcesExtension build() {
            return new DataCollectionRuleDataSourcesExtension(extensionJson, extensionName, inputDataSources, name, streams);
        }
    }
}
