// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.arckubernetes.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FluxConfigurationKustomizationArgs extends com.pulumi.resources.ResourceArgs {

    public static final FluxConfigurationKustomizationArgs Empty = new FluxConfigurationKustomizationArgs();

    /**
     * Specifies other kustomizations that this kustomization depends on. This kustomization will not reconcile until all dependencies have completed their reconciliation.
     * 
     */
    @Import(name="dependsOns")
    private @Nullable Output<List<String>> dependsOns;

    /**
     * @return Specifies other kustomizations that this kustomization depends on. This kustomization will not reconcile until all dependencies have completed their reconciliation.
     * 
     */
    public Optional<Output<List<String>>> dependsOns() {
        return Optional.ofNullable(this.dependsOns);
    }

    /**
     * Whether garbage collections of Kubernetes objects created by this kustomization is enabled. Defaults to `false`.
     * 
     */
    @Import(name="garbageCollectionEnabled")
    private @Nullable Output<Boolean> garbageCollectionEnabled;

    /**
     * @return Whether garbage collections of Kubernetes objects created by this kustomization is enabled. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> garbageCollectionEnabled() {
        return Optional.ofNullable(this.garbageCollectionEnabled);
    }

    /**
     * Specifies the name of the kustomization.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Specifies the name of the kustomization.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Specifies the path in the source reference to reconcile on the cluster.
     * 
     */
    @Import(name="path")
    private @Nullable Output<String> path;

    /**
     * @return Specifies the path in the source reference to reconcile on the cluster.
     * 
     */
    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * Whether re-creating Kubernetes resources on the cluster is enabled when patching fails due to an immutable field change. Defaults to `false`.
     * 
     */
    @Import(name="recreatingEnabled")
    private @Nullable Output<Boolean> recreatingEnabled;

    /**
     * @return Whether re-creating Kubernetes resources on the cluster is enabled when patching fails due to an immutable field change. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> recreatingEnabled() {
        return Optional.ofNullable(this.recreatingEnabled);
    }

    /**
     * The interval at which to re-reconcile the kustomization on the cluster in the event of failure on reconciliation. Defaults to `600`.
     * 
     */
    @Import(name="retryIntervalInSeconds")
    private @Nullable Output<Integer> retryIntervalInSeconds;

    /**
     * @return The interval at which to re-reconcile the kustomization on the cluster in the event of failure on reconciliation. Defaults to `600`.
     * 
     */
    public Optional<Output<Integer>> retryIntervalInSeconds() {
        return Optional.ofNullable(this.retryIntervalInSeconds);
    }

    /**
     * The interval at which to re-reconcile the kustomization on the cluster. Defaults to `600`.
     * 
     */
    @Import(name="syncIntervalInSeconds")
    private @Nullable Output<Integer> syncIntervalInSeconds;

    /**
     * @return The interval at which to re-reconcile the kustomization on the cluster. Defaults to `600`.
     * 
     */
    public Optional<Output<Integer>> syncIntervalInSeconds() {
        return Optional.ofNullable(this.syncIntervalInSeconds);
    }

    /**
     * The maximum time to attempt to reconcile the kustomization on the cluster. Defaults to `600`.
     * 
     */
    @Import(name="timeoutInSeconds")
    private @Nullable Output<Integer> timeoutInSeconds;

    /**
     * @return The maximum time to attempt to reconcile the kustomization on the cluster. Defaults to `600`.
     * 
     */
    public Optional<Output<Integer>> timeoutInSeconds() {
        return Optional.ofNullable(this.timeoutInSeconds);
    }

    private FluxConfigurationKustomizationArgs() {}

    private FluxConfigurationKustomizationArgs(FluxConfigurationKustomizationArgs $) {
        this.dependsOns = $.dependsOns;
        this.garbageCollectionEnabled = $.garbageCollectionEnabled;
        this.name = $.name;
        this.path = $.path;
        this.recreatingEnabled = $.recreatingEnabled;
        this.retryIntervalInSeconds = $.retryIntervalInSeconds;
        this.syncIntervalInSeconds = $.syncIntervalInSeconds;
        this.timeoutInSeconds = $.timeoutInSeconds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FluxConfigurationKustomizationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FluxConfigurationKustomizationArgs $;

        public Builder() {
            $ = new FluxConfigurationKustomizationArgs();
        }

        public Builder(FluxConfigurationKustomizationArgs defaults) {
            $ = new FluxConfigurationKustomizationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dependsOns Specifies other kustomizations that this kustomization depends on. This kustomization will not reconcile until all dependencies have completed their reconciliation.
         * 
         * @return builder
         * 
         */
        public Builder dependsOns(@Nullable Output<List<String>> dependsOns) {
            $.dependsOns = dependsOns;
            return this;
        }

        /**
         * @param dependsOns Specifies other kustomizations that this kustomization depends on. This kustomization will not reconcile until all dependencies have completed their reconciliation.
         * 
         * @return builder
         * 
         */
        public Builder dependsOns(List<String> dependsOns) {
            return dependsOns(Output.of(dependsOns));
        }

        /**
         * @param dependsOns Specifies other kustomizations that this kustomization depends on. This kustomization will not reconcile until all dependencies have completed their reconciliation.
         * 
         * @return builder
         * 
         */
        public Builder dependsOns(String... dependsOns) {
            return dependsOns(List.of(dependsOns));
        }

        /**
         * @param garbageCollectionEnabled Whether garbage collections of Kubernetes objects created by this kustomization is enabled. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder garbageCollectionEnabled(@Nullable Output<Boolean> garbageCollectionEnabled) {
            $.garbageCollectionEnabled = garbageCollectionEnabled;
            return this;
        }

        /**
         * @param garbageCollectionEnabled Whether garbage collections of Kubernetes objects created by this kustomization is enabled. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder garbageCollectionEnabled(Boolean garbageCollectionEnabled) {
            return garbageCollectionEnabled(Output.of(garbageCollectionEnabled));
        }

        /**
         * @param name Specifies the name of the kustomization.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of the kustomization.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param path Specifies the path in the source reference to reconcile on the cluster.
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path Specifies the path in the source reference to reconcile on the cluster.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param recreatingEnabled Whether re-creating Kubernetes resources on the cluster is enabled when patching fails due to an immutable field change. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder recreatingEnabled(@Nullable Output<Boolean> recreatingEnabled) {
            $.recreatingEnabled = recreatingEnabled;
            return this;
        }

        /**
         * @param recreatingEnabled Whether re-creating Kubernetes resources on the cluster is enabled when patching fails due to an immutable field change. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder recreatingEnabled(Boolean recreatingEnabled) {
            return recreatingEnabled(Output.of(recreatingEnabled));
        }

        /**
         * @param retryIntervalInSeconds The interval at which to re-reconcile the kustomization on the cluster in the event of failure on reconciliation. Defaults to `600`.
         * 
         * @return builder
         * 
         */
        public Builder retryIntervalInSeconds(@Nullable Output<Integer> retryIntervalInSeconds) {
            $.retryIntervalInSeconds = retryIntervalInSeconds;
            return this;
        }

        /**
         * @param retryIntervalInSeconds The interval at which to re-reconcile the kustomization on the cluster in the event of failure on reconciliation. Defaults to `600`.
         * 
         * @return builder
         * 
         */
        public Builder retryIntervalInSeconds(Integer retryIntervalInSeconds) {
            return retryIntervalInSeconds(Output.of(retryIntervalInSeconds));
        }

        /**
         * @param syncIntervalInSeconds The interval at which to re-reconcile the kustomization on the cluster. Defaults to `600`.
         * 
         * @return builder
         * 
         */
        public Builder syncIntervalInSeconds(@Nullable Output<Integer> syncIntervalInSeconds) {
            $.syncIntervalInSeconds = syncIntervalInSeconds;
            return this;
        }

        /**
         * @param syncIntervalInSeconds The interval at which to re-reconcile the kustomization on the cluster. Defaults to `600`.
         * 
         * @return builder
         * 
         */
        public Builder syncIntervalInSeconds(Integer syncIntervalInSeconds) {
            return syncIntervalInSeconds(Output.of(syncIntervalInSeconds));
        }

        /**
         * @param timeoutInSeconds The maximum time to attempt to reconcile the kustomization on the cluster. Defaults to `600`.
         * 
         * @return builder
         * 
         */
        public Builder timeoutInSeconds(@Nullable Output<Integer> timeoutInSeconds) {
            $.timeoutInSeconds = timeoutInSeconds;
            return this;
        }

        /**
         * @param timeoutInSeconds The maximum time to attempt to reconcile the kustomization on the cluster. Defaults to `600`.
         * 
         * @return builder
         * 
         */
        public Builder timeoutInSeconds(Integer timeoutInSeconds) {
            return timeoutInSeconds(Output.of(timeoutInSeconds));
        }

        public FluxConfigurationKustomizationArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("FluxConfigurationKustomizationArgs", "name");
            }
            return $;
        }
    }

}
