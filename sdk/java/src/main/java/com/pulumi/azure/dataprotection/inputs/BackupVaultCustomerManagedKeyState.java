// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.dataprotection.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BackupVaultCustomerManagedKeyState extends com.pulumi.resources.ResourceArgs {

    public static final BackupVaultCustomerManagedKeyState Empty = new BackupVaultCustomerManagedKeyState();

    /**
     * The ID of the Backup Vault. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="dataProtectionBackupVaultId")
    private @Nullable Output<String> dataProtectionBackupVaultId;

    /**
     * @return The ID of the Backup Vault. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> dataProtectionBackupVaultId() {
        return Optional.ofNullable(this.dataProtectionBackupVaultId);
    }

    /**
     * The ID of the Key Vault Key which should be used to Encrypt the data in this Backup Vault.
     * 
     */
    @Import(name="keyVaultKeyId")
    private @Nullable Output<String> keyVaultKeyId;

    /**
     * @return The ID of the Key Vault Key which should be used to Encrypt the data in this Backup Vault.
     * 
     */
    public Optional<Output<String>> keyVaultKeyId() {
        return Optional.ofNullable(this.keyVaultKeyId);
    }

    private BackupVaultCustomerManagedKeyState() {}

    private BackupVaultCustomerManagedKeyState(BackupVaultCustomerManagedKeyState $) {
        this.dataProtectionBackupVaultId = $.dataProtectionBackupVaultId;
        this.keyVaultKeyId = $.keyVaultKeyId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackupVaultCustomerManagedKeyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackupVaultCustomerManagedKeyState $;

        public Builder() {
            $ = new BackupVaultCustomerManagedKeyState();
        }

        public Builder(BackupVaultCustomerManagedKeyState defaults) {
            $ = new BackupVaultCustomerManagedKeyState(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataProtectionBackupVaultId The ID of the Backup Vault. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder dataProtectionBackupVaultId(@Nullable Output<String> dataProtectionBackupVaultId) {
            $.dataProtectionBackupVaultId = dataProtectionBackupVaultId;
            return this;
        }

        /**
         * @param dataProtectionBackupVaultId The ID of the Backup Vault. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder dataProtectionBackupVaultId(String dataProtectionBackupVaultId) {
            return dataProtectionBackupVaultId(Output.of(dataProtectionBackupVaultId));
        }

        /**
         * @param keyVaultKeyId The ID of the Key Vault Key which should be used to Encrypt the data in this Backup Vault.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultKeyId(@Nullable Output<String> keyVaultKeyId) {
            $.keyVaultKeyId = keyVaultKeyId;
            return this;
        }

        /**
         * @param keyVaultKeyId The ID of the Key Vault Key which should be used to Encrypt the data in this Backup Vault.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultKeyId(String keyVaultKeyId) {
            return keyVaultKeyId(Output.of(keyVaultKeyId));
        }

        public BackupVaultCustomerManagedKeyState build() {
            return $;
        }
    }

}
