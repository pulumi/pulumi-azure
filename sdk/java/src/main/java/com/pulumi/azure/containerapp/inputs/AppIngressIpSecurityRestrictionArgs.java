// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerapp.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AppIngressIpSecurityRestrictionArgs extends com.pulumi.resources.ResourceArgs {

    public static final AppIngressIpSecurityRestrictionArgs Empty = new AppIngressIpSecurityRestrictionArgs();

    /**
     * The IP-filter action. `Allow` or `Deny`.
     * 
     * &gt; **NOTE:** The `action` types in an all `ip_security_restriction` blocks must be the same for the `ingress`, mixing `Allow` and `Deny` rules is not currently supported by the service.
     * 
     */
    @Import(name="action", required=true)
    private Output<String> action;

    /**
     * @return The IP-filter action. `Allow` or `Deny`.
     * 
     * &gt; **NOTE:** The `action` types in an all `ip_security_restriction` blocks must be the same for the `ingress`, mixing `Allow` and `Deny` rules is not currently supported by the service.
     * 
     */
    public Output<String> action() {
        return this.action;
    }

    /**
     * Describe the IP restriction rule that is being sent to the container-app.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Describe the IP restriction rule that is being sent to the container-app.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * CIDR notation to match incoming IP address.
     * 
     */
    @Import(name="ipAddressRange", required=true)
    private Output<String> ipAddressRange;

    /**
     * @return CIDR notation to match incoming IP address.
     * 
     */
    public Output<String> ipAddressRange() {
        return this.ipAddressRange;
    }

    /**
     * Name for the IP restriction rule.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name for the IP restriction rule.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    private AppIngressIpSecurityRestrictionArgs() {}

    private AppIngressIpSecurityRestrictionArgs(AppIngressIpSecurityRestrictionArgs $) {
        this.action = $.action;
        this.description = $.description;
        this.ipAddressRange = $.ipAddressRange;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppIngressIpSecurityRestrictionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppIngressIpSecurityRestrictionArgs $;

        public Builder() {
            $ = new AppIngressIpSecurityRestrictionArgs();
        }

        public Builder(AppIngressIpSecurityRestrictionArgs defaults) {
            $ = new AppIngressIpSecurityRestrictionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action The IP-filter action. `Allow` or `Deny`.
         * 
         * &gt; **NOTE:** The `action` types in an all `ip_security_restriction` blocks must be the same for the `ingress`, mixing `Allow` and `Deny` rules is not currently supported by the service.
         * 
         * @return builder
         * 
         */
        public Builder action(Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action The IP-filter action. `Allow` or `Deny`.
         * 
         * &gt; **NOTE:** The `action` types in an all `ip_security_restriction` blocks must be the same for the `ingress`, mixing `Allow` and `Deny` rules is not currently supported by the service.
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        /**
         * @param description Describe the IP restriction rule that is being sent to the container-app.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Describe the IP restriction rule that is being sent to the container-app.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param ipAddressRange CIDR notation to match incoming IP address.
         * 
         * @return builder
         * 
         */
        public Builder ipAddressRange(Output<String> ipAddressRange) {
            $.ipAddressRange = ipAddressRange;
            return this;
        }

        /**
         * @param ipAddressRange CIDR notation to match incoming IP address.
         * 
         * @return builder
         * 
         */
        public Builder ipAddressRange(String ipAddressRange) {
            return ipAddressRange(Output.of(ipAddressRange));
        }

        /**
         * @param name Name for the IP restriction rule.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name for the IP restriction rule.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public AppIngressIpSecurityRestrictionArgs build() {
            if ($.action == null) {
                throw new MissingRequiredPropertyException("AppIngressIpSecurityRestrictionArgs", "action");
            }
            if ($.ipAddressRange == null) {
                throw new MissingRequiredPropertyException("AppIngressIpSecurityRestrictionArgs", "ipAddressRange");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("AppIngressIpSecurityRestrictionArgs", "name");
            }
            return $;
        }
    }

}
