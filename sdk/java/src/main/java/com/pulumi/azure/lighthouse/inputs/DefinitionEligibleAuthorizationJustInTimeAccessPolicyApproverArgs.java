// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.lighthouse.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DefinitionEligibleAuthorizationJustInTimeAccessPolicyApproverArgs extends com.pulumi.resources.ResourceArgs {

    public static final DefinitionEligibleAuthorizationJustInTimeAccessPolicyApproverArgs Empty = new DefinitionEligibleAuthorizationJustInTimeAccessPolicyApproverArgs();

    /**
     * The display name of the Azure Active Directory Principal for the approver.
     * 
     */
    @Import(name="principalDisplayName")
    private @Nullable Output<String> principalDisplayName;

    /**
     * @return The display name of the Azure Active Directory Principal for the approver.
     * 
     */
    public Optional<Output<String>> principalDisplayName() {
        return Optional.ofNullable(this.principalDisplayName);
    }

    /**
     * The Principal ID of the Azure Active Directory principal for the approver.
     * 
     */
    @Import(name="principalId", required=true)
    private Output<String> principalId;

    /**
     * @return The Principal ID of the Azure Active Directory principal for the approver.
     * 
     */
    public Output<String> principalId() {
        return this.principalId;
    }

    private DefinitionEligibleAuthorizationJustInTimeAccessPolicyApproverArgs() {}

    private DefinitionEligibleAuthorizationJustInTimeAccessPolicyApproverArgs(DefinitionEligibleAuthorizationJustInTimeAccessPolicyApproverArgs $) {
        this.principalDisplayName = $.principalDisplayName;
        this.principalId = $.principalId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DefinitionEligibleAuthorizationJustInTimeAccessPolicyApproverArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DefinitionEligibleAuthorizationJustInTimeAccessPolicyApproverArgs $;

        public Builder() {
            $ = new DefinitionEligibleAuthorizationJustInTimeAccessPolicyApproverArgs();
        }

        public Builder(DefinitionEligibleAuthorizationJustInTimeAccessPolicyApproverArgs defaults) {
            $ = new DefinitionEligibleAuthorizationJustInTimeAccessPolicyApproverArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param principalDisplayName The display name of the Azure Active Directory Principal for the approver.
         * 
         * @return builder
         * 
         */
        public Builder principalDisplayName(@Nullable Output<String> principalDisplayName) {
            $.principalDisplayName = principalDisplayName;
            return this;
        }

        /**
         * @param principalDisplayName The display name of the Azure Active Directory Principal for the approver.
         * 
         * @return builder
         * 
         */
        public Builder principalDisplayName(String principalDisplayName) {
            return principalDisplayName(Output.of(principalDisplayName));
        }

        /**
         * @param principalId The Principal ID of the Azure Active Directory principal for the approver.
         * 
         * @return builder
         * 
         */
        public Builder principalId(Output<String> principalId) {
            $.principalId = principalId;
            return this;
        }

        /**
         * @param principalId The Principal ID of the Azure Active Directory principal for the approver.
         * 
         * @return builder
         * 
         */
        public Builder principalId(String principalId) {
            return principalId(Output.of(principalId));
        }

        public DefinitionEligibleAuthorizationJustInTimeAccessPolicyApproverArgs build() {
            if ($.principalId == null) {
                throw new MissingRequiredPropertyException("DefinitionEligibleAuthorizationJustInTimeAccessPolicyApproverArgs", "principalId");
            }
            return $;
        }
    }

}
