// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.mssql.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServerAzureadAdministratorArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServerAzureadAdministratorArgs Empty = new ServerAzureadAdministratorArgs();

    /**
     * Specifies whether only AD Users and administrators (e.g. `azuread_administrator.0.login_username`) can be used to login, or also local database users (e.g. `administrator_login`). When `true`, the `administrator_login` and `administrator_login_password` properties can be omitted.
     * 
     */
    @Import(name="azureadAuthenticationOnly")
    private @Nullable Output<Boolean> azureadAuthenticationOnly;

    /**
     * @return Specifies whether only AD Users and administrators (e.g. `azuread_administrator.0.login_username`) can be used to login, or also local database users (e.g. `administrator_login`). When `true`, the `administrator_login` and `administrator_login_password` properties can be omitted.
     * 
     */
    public Optional<Output<Boolean>> azureadAuthenticationOnly() {
        return Optional.ofNullable(this.azureadAuthenticationOnly);
    }

    /**
     * The login username of the Azure AD Administrator of this SQL Server.
     * 
     */
    @Import(name="loginUsername", required=true)
    private Output<String> loginUsername;

    /**
     * @return The login username of the Azure AD Administrator of this SQL Server.
     * 
     */
    public Output<String> loginUsername() {
        return this.loginUsername;
    }

    /**
     * The object id of the Azure AD Administrator of this SQL Server.
     * 
     */
    @Import(name="objectId", required=true)
    private Output<String> objectId;

    /**
     * @return The object id of the Azure AD Administrator of this SQL Server.
     * 
     */
    public Output<String> objectId() {
        return this.objectId;
    }

    /**
     * The tenant id of the Azure AD Administrator of this SQL Server.
     * 
     */
    @Import(name="tenantId")
    private @Nullable Output<String> tenantId;

    /**
     * @return The tenant id of the Azure AD Administrator of this SQL Server.
     * 
     */
    public Optional<Output<String>> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }

    private ServerAzureadAdministratorArgs() {}

    private ServerAzureadAdministratorArgs(ServerAzureadAdministratorArgs $) {
        this.azureadAuthenticationOnly = $.azureadAuthenticationOnly;
        this.loginUsername = $.loginUsername;
        this.objectId = $.objectId;
        this.tenantId = $.tenantId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServerAzureadAdministratorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServerAzureadAdministratorArgs $;

        public Builder() {
            $ = new ServerAzureadAdministratorArgs();
        }

        public Builder(ServerAzureadAdministratorArgs defaults) {
            $ = new ServerAzureadAdministratorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param azureadAuthenticationOnly Specifies whether only AD Users and administrators (e.g. `azuread_administrator.0.login_username`) can be used to login, or also local database users (e.g. `administrator_login`). When `true`, the `administrator_login` and `administrator_login_password` properties can be omitted.
         * 
         * @return builder
         * 
         */
        public Builder azureadAuthenticationOnly(@Nullable Output<Boolean> azureadAuthenticationOnly) {
            $.azureadAuthenticationOnly = azureadAuthenticationOnly;
            return this;
        }

        /**
         * @param azureadAuthenticationOnly Specifies whether only AD Users and administrators (e.g. `azuread_administrator.0.login_username`) can be used to login, or also local database users (e.g. `administrator_login`). When `true`, the `administrator_login` and `administrator_login_password` properties can be omitted.
         * 
         * @return builder
         * 
         */
        public Builder azureadAuthenticationOnly(Boolean azureadAuthenticationOnly) {
            return azureadAuthenticationOnly(Output.of(azureadAuthenticationOnly));
        }

        /**
         * @param loginUsername The login username of the Azure AD Administrator of this SQL Server.
         * 
         * @return builder
         * 
         */
        public Builder loginUsername(Output<String> loginUsername) {
            $.loginUsername = loginUsername;
            return this;
        }

        /**
         * @param loginUsername The login username of the Azure AD Administrator of this SQL Server.
         * 
         * @return builder
         * 
         */
        public Builder loginUsername(String loginUsername) {
            return loginUsername(Output.of(loginUsername));
        }

        /**
         * @param objectId The object id of the Azure AD Administrator of this SQL Server.
         * 
         * @return builder
         * 
         */
        public Builder objectId(Output<String> objectId) {
            $.objectId = objectId;
            return this;
        }

        /**
         * @param objectId The object id of the Azure AD Administrator of this SQL Server.
         * 
         * @return builder
         * 
         */
        public Builder objectId(String objectId) {
            return objectId(Output.of(objectId));
        }

        /**
         * @param tenantId The tenant id of the Azure AD Administrator of this SQL Server.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(@Nullable Output<String> tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        /**
         * @param tenantId The tenant id of the Azure AD Administrator of this SQL Server.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(String tenantId) {
            return tenantId(Output.of(tenantId));
        }

        public ServerAzureadAdministratorArgs build() {
            if ($.loginUsername == null) {
                throw new MissingRequiredPropertyException("ServerAzureadAdministratorArgs", "loginUsername");
            }
            if ($.objectId == null) {
                throw new MissingRequiredPropertyException("ServerAzureadAdministratorArgs", "objectId");
            }
            return $;
        }
    }

}
