// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.postgresql;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FlexibleServerVirtualEndpointArgs extends com.pulumi.resources.ResourceArgs {

    public static final FlexibleServerVirtualEndpointArgs Empty = new FlexibleServerVirtualEndpointArgs();

    /**
     * The name of the Virtual Endpoint
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the Virtual Endpoint
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The Resource ID of the *Replica* Postgres Flexible Server this should be associated with
     * 
     * &gt; **Note:** If a fail-over has occurred, you will be unable to update `replicaServerId`. You can remove the resource from state and reimport it back in with `sourceServerId` and `replicaServerId` flipped and then update `replicaServerId`.
     * 
     */
    @Import(name="replicaServerId", required=true)
    private Output<String> replicaServerId;

    /**
     * @return The Resource ID of the *Replica* Postgres Flexible Server this should be associated with
     * 
     * &gt; **Note:** If a fail-over has occurred, you will be unable to update `replicaServerId`. You can remove the resource from state and reimport it back in with `sourceServerId` and `replicaServerId` flipped and then update `replicaServerId`.
     * 
     */
    public Output<String> replicaServerId() {
        return this.replicaServerId;
    }

    /**
     * The Resource ID of the *Source* Postgres Flexible Server this should be associated with.
     * 
     */
    @Import(name="sourceServerId", required=true)
    private Output<String> sourceServerId;

    /**
     * @return The Resource ID of the *Source* Postgres Flexible Server this should be associated with.
     * 
     */
    public Output<String> sourceServerId() {
        return this.sourceServerId;
    }

    /**
     * The type of Virtual Endpoint. Currently only `ReadWrite` is supported.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of Virtual Endpoint. Currently only `ReadWrite` is supported.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private FlexibleServerVirtualEndpointArgs() {}

    private FlexibleServerVirtualEndpointArgs(FlexibleServerVirtualEndpointArgs $) {
        this.name = $.name;
        this.replicaServerId = $.replicaServerId;
        this.sourceServerId = $.sourceServerId;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FlexibleServerVirtualEndpointArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FlexibleServerVirtualEndpointArgs $;

        public Builder() {
            $ = new FlexibleServerVirtualEndpointArgs();
        }

        public Builder(FlexibleServerVirtualEndpointArgs defaults) {
            $ = new FlexibleServerVirtualEndpointArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name The name of the Virtual Endpoint
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Virtual Endpoint
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param replicaServerId The Resource ID of the *Replica* Postgres Flexible Server this should be associated with
         * 
         * &gt; **Note:** If a fail-over has occurred, you will be unable to update `replicaServerId`. You can remove the resource from state and reimport it back in with `sourceServerId` and `replicaServerId` flipped and then update `replicaServerId`.
         * 
         * @return builder
         * 
         */
        public Builder replicaServerId(Output<String> replicaServerId) {
            $.replicaServerId = replicaServerId;
            return this;
        }

        /**
         * @param replicaServerId The Resource ID of the *Replica* Postgres Flexible Server this should be associated with
         * 
         * &gt; **Note:** If a fail-over has occurred, you will be unable to update `replicaServerId`. You can remove the resource from state and reimport it back in with `sourceServerId` and `replicaServerId` flipped and then update `replicaServerId`.
         * 
         * @return builder
         * 
         */
        public Builder replicaServerId(String replicaServerId) {
            return replicaServerId(Output.of(replicaServerId));
        }

        /**
         * @param sourceServerId The Resource ID of the *Source* Postgres Flexible Server this should be associated with.
         * 
         * @return builder
         * 
         */
        public Builder sourceServerId(Output<String> sourceServerId) {
            $.sourceServerId = sourceServerId;
            return this;
        }

        /**
         * @param sourceServerId The Resource ID of the *Source* Postgres Flexible Server this should be associated with.
         * 
         * @return builder
         * 
         */
        public Builder sourceServerId(String sourceServerId) {
            return sourceServerId(Output.of(sourceServerId));
        }

        /**
         * @param type The type of Virtual Endpoint. Currently only `ReadWrite` is supported.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of Virtual Endpoint. Currently only `ReadWrite` is supported.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public FlexibleServerVirtualEndpointArgs build() {
            if ($.replicaServerId == null) {
                throw new MissingRequiredPropertyException("FlexibleServerVirtualEndpointArgs", "replicaServerId");
            }
            if ($.sourceServerId == null) {
                throw new MissingRequiredPropertyException("FlexibleServerVirtualEndpointArgs", "sourceServerId");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("FlexibleServerVirtualEndpointArgs", "type");
            }
            return $;
        }
    }

}
