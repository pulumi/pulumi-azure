// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerservice.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegistryTaskDockerStepArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegistryTaskDockerStepArgs Empty = new RegistryTaskDockerStepArgs();

    /**
     * Specifies a map of arguments to be used when executing this step.
     * 
     */
    @Import(name="arguments")
    private @Nullable Output<Map<String,String>> arguments;

    /**
     * @return Specifies a map of arguments to be used when executing this step.
     * 
     */
    public Optional<Output<Map<String,String>>> arguments() {
        return Optional.ofNullable(this.arguments);
    }

    /**
     * Should the image cache be enabled? Defaults to `true`.
     * 
     */
    @Import(name="cacheEnabled")
    private @Nullable Output<Boolean> cacheEnabled;

    /**
     * @return Should the image cache be enabled? Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> cacheEnabled() {
        return Optional.ofNullable(this.cacheEnabled);
    }

    /**
     * The token (Git PAT or SAS token of storage account blob) associated with the context for this step.
     * 
     */
    @Import(name="contextAccessToken", required=true)
    private Output<String> contextAccessToken;

    /**
     * @return The token (Git PAT or SAS token of storage account blob) associated with the context for this step.
     * 
     */
    public Output<String> contextAccessToken() {
        return this.contextAccessToken;
    }

    /**
     * The URL (absolute or relative) of the source context for this step. If the context is an url you can reference a specific branch or folder via `#branch:folder`.
     * 
     */
    @Import(name="contextPath", required=true)
    private Output<String> contextPath;

    /**
     * @return The URL (absolute or relative) of the source context for this step. If the context is an url you can reference a specific branch or folder via `#branch:folder`.
     * 
     */
    public Output<String> contextPath() {
        return this.contextPath;
    }

    /**
     * The Dockerfile path relative to the source context.
     * 
     */
    @Import(name="dockerfilePath", required=true)
    private Output<String> dockerfilePath;

    /**
     * @return The Dockerfile path relative to the source context.
     * 
     */
    public Output<String> dockerfilePath() {
        return this.dockerfilePath;
    }

    /**
     * Specifies a list of fully qualified image names including the repository and tag.
     * 
     */
    @Import(name="imageNames")
    private @Nullable Output<List<String>> imageNames;

    /**
     * @return Specifies a list of fully qualified image names including the repository and tag.
     * 
     */
    public Optional<Output<List<String>>> imageNames() {
        return Optional.ofNullable(this.imageNames);
    }

    /**
     * Should the image built be pushed to the registry or not? Defaults to `true`.
     * 
     */
    @Import(name="pushEnabled")
    private @Nullable Output<Boolean> pushEnabled;

    /**
     * @return Should the image built be pushed to the registry or not? Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> pushEnabled() {
        return Optional.ofNullable(this.pushEnabled);
    }

    /**
     * Specifies a map of *secret* arguments to be used when executing this step.
     * 
     */
    @Import(name="secretArguments")
    private @Nullable Output<Map<String,String>> secretArguments;

    /**
     * @return Specifies a map of *secret* arguments to be used when executing this step.
     * 
     */
    public Optional<Output<Map<String,String>>> secretArguments() {
        return Optional.ofNullable(this.secretArguments);
    }

    /**
     * The name of the target build stage for the docker build.
     * 
     */
    @Import(name="target")
    private @Nullable Output<String> target;

    /**
     * @return The name of the target build stage for the docker build.
     * 
     */
    public Optional<Output<String>> target() {
        return Optional.ofNullable(this.target);
    }

    private RegistryTaskDockerStepArgs() {}

    private RegistryTaskDockerStepArgs(RegistryTaskDockerStepArgs $) {
        this.arguments = $.arguments;
        this.cacheEnabled = $.cacheEnabled;
        this.contextAccessToken = $.contextAccessToken;
        this.contextPath = $.contextPath;
        this.dockerfilePath = $.dockerfilePath;
        this.imageNames = $.imageNames;
        this.pushEnabled = $.pushEnabled;
        this.secretArguments = $.secretArguments;
        this.target = $.target;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegistryTaskDockerStepArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegistryTaskDockerStepArgs $;

        public Builder() {
            $ = new RegistryTaskDockerStepArgs();
        }

        public Builder(RegistryTaskDockerStepArgs defaults) {
            $ = new RegistryTaskDockerStepArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param arguments Specifies a map of arguments to be used when executing this step.
         * 
         * @return builder
         * 
         */
        public Builder arguments(@Nullable Output<Map<String,String>> arguments) {
            $.arguments = arguments;
            return this;
        }

        /**
         * @param arguments Specifies a map of arguments to be used when executing this step.
         * 
         * @return builder
         * 
         */
        public Builder arguments(Map<String,String> arguments) {
            return arguments(Output.of(arguments));
        }

        /**
         * @param cacheEnabled Should the image cache be enabled? Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder cacheEnabled(@Nullable Output<Boolean> cacheEnabled) {
            $.cacheEnabled = cacheEnabled;
            return this;
        }

        /**
         * @param cacheEnabled Should the image cache be enabled? Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder cacheEnabled(Boolean cacheEnabled) {
            return cacheEnabled(Output.of(cacheEnabled));
        }

        /**
         * @param contextAccessToken The token (Git PAT or SAS token of storage account blob) associated with the context for this step.
         * 
         * @return builder
         * 
         */
        public Builder contextAccessToken(Output<String> contextAccessToken) {
            $.contextAccessToken = contextAccessToken;
            return this;
        }

        /**
         * @param contextAccessToken The token (Git PAT or SAS token of storage account blob) associated with the context for this step.
         * 
         * @return builder
         * 
         */
        public Builder contextAccessToken(String contextAccessToken) {
            return contextAccessToken(Output.of(contextAccessToken));
        }

        /**
         * @param contextPath The URL (absolute or relative) of the source context for this step. If the context is an url you can reference a specific branch or folder via `#branch:folder`.
         * 
         * @return builder
         * 
         */
        public Builder contextPath(Output<String> contextPath) {
            $.contextPath = contextPath;
            return this;
        }

        /**
         * @param contextPath The URL (absolute or relative) of the source context for this step. If the context is an url you can reference a specific branch or folder via `#branch:folder`.
         * 
         * @return builder
         * 
         */
        public Builder contextPath(String contextPath) {
            return contextPath(Output.of(contextPath));
        }

        /**
         * @param dockerfilePath The Dockerfile path relative to the source context.
         * 
         * @return builder
         * 
         */
        public Builder dockerfilePath(Output<String> dockerfilePath) {
            $.dockerfilePath = dockerfilePath;
            return this;
        }

        /**
         * @param dockerfilePath The Dockerfile path relative to the source context.
         * 
         * @return builder
         * 
         */
        public Builder dockerfilePath(String dockerfilePath) {
            return dockerfilePath(Output.of(dockerfilePath));
        }

        /**
         * @param imageNames Specifies a list of fully qualified image names including the repository and tag.
         * 
         * @return builder
         * 
         */
        public Builder imageNames(@Nullable Output<List<String>> imageNames) {
            $.imageNames = imageNames;
            return this;
        }

        /**
         * @param imageNames Specifies a list of fully qualified image names including the repository and tag.
         * 
         * @return builder
         * 
         */
        public Builder imageNames(List<String> imageNames) {
            return imageNames(Output.of(imageNames));
        }

        /**
         * @param imageNames Specifies a list of fully qualified image names including the repository and tag.
         * 
         * @return builder
         * 
         */
        public Builder imageNames(String... imageNames) {
            return imageNames(List.of(imageNames));
        }

        /**
         * @param pushEnabled Should the image built be pushed to the registry or not? Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder pushEnabled(@Nullable Output<Boolean> pushEnabled) {
            $.pushEnabled = pushEnabled;
            return this;
        }

        /**
         * @param pushEnabled Should the image built be pushed to the registry or not? Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder pushEnabled(Boolean pushEnabled) {
            return pushEnabled(Output.of(pushEnabled));
        }

        /**
         * @param secretArguments Specifies a map of *secret* arguments to be used when executing this step.
         * 
         * @return builder
         * 
         */
        public Builder secretArguments(@Nullable Output<Map<String,String>> secretArguments) {
            $.secretArguments = secretArguments;
            return this;
        }

        /**
         * @param secretArguments Specifies a map of *secret* arguments to be used when executing this step.
         * 
         * @return builder
         * 
         */
        public Builder secretArguments(Map<String,String> secretArguments) {
            return secretArguments(Output.of(secretArguments));
        }

        /**
         * @param target The name of the target build stage for the docker build.
         * 
         * @return builder
         * 
         */
        public Builder target(@Nullable Output<String> target) {
            $.target = target;
            return this;
        }

        /**
         * @param target The name of the target build stage for the docker build.
         * 
         * @return builder
         * 
         */
        public Builder target(String target) {
            return target(Output.of(target));
        }

        public RegistryTaskDockerStepArgs build() {
            if ($.contextAccessToken == null) {
                throw new MissingRequiredPropertyException("RegistryTaskDockerStepArgs", "contextAccessToken");
            }
            if ($.contextPath == null) {
                throw new MissingRequiredPropertyException("RegistryTaskDockerStepArgs", "contextPath");
            }
            if ($.dockerfilePath == null) {
                throw new MissingRequiredPropertyException("RegistryTaskDockerStepArgs", "dockerfilePath");
            }
            return $;
        }
    }

}
