// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.paloalto;

import com.pulumi.azure.paloalto.inputs.LocalRulestackRuleCategoryArgs;
import com.pulumi.azure.paloalto.inputs.LocalRulestackRuleDestinationArgs;
import com.pulumi.azure.paloalto.inputs.LocalRulestackRuleSourceArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LocalRulestackRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final LocalRulestackRuleArgs Empty = new LocalRulestackRuleArgs();

    /**
     * The action to take on the rule being triggered. Possible values are `Allow`, `DenyResetBoth`, `DenyResetServer` and `DenySilent`.
     * 
     */
    @Import(name="action", required=true)
    private Output<String> action;

    /**
     * @return The action to take on the rule being triggered. Possible values are `Allow`, `DenyResetBoth`, `DenyResetServer` and `DenySilent`.
     * 
     */
    public Output<String> action() {
        return this.action;
    }

    /**
     * Specifies a list of Applications.
     * 
     */
    @Import(name="applications", required=true)
    private Output<List<String>> applications;

    /**
     * @return Specifies a list of Applications.
     * 
     */
    public Output<List<String>> applications() {
        return this.applications;
    }

    /**
     * The comment for Audit purposes.
     * 
     */
    @Import(name="auditComment")
    private @Nullable Output<String> auditComment;

    /**
     * @return The comment for Audit purposes.
     * 
     */
    public Optional<Output<String>> auditComment() {
        return Optional.ofNullable(this.auditComment);
    }

    /**
     * A `category` block as defined below.
     * 
     */
    @Import(name="category")
    private @Nullable Output<LocalRulestackRuleCategoryArgs> category;

    /**
     * @return A `category` block as defined below.
     * 
     */
    public Optional<Output<LocalRulestackRuleCategoryArgs>> category() {
        return Optional.ofNullable(this.category);
    }

    /**
     * The type of Decryption to perform on the rule. Possible values include `SSLInboundInspection`, `SSLOutboundInspection`, and `None`. Defaults to `None`.
     * 
     */
    @Import(name="decryptionRuleType")
    private @Nullable Output<String> decryptionRuleType;

    /**
     * @return The type of Decryption to perform on the rule. Possible values include `SSLInboundInspection`, `SSLOutboundInspection`, and `None`. Defaults to `None`.
     * 
     */
    public Optional<Output<String>> decryptionRuleType() {
        return Optional.ofNullable(this.decryptionRuleType);
    }

    /**
     * The description for the rule.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description for the rule.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * One or more `destination` blocks as defined below.
     * 
     */
    @Import(name="destination", required=true)
    private Output<LocalRulestackRuleDestinationArgs> destination;

    /**
     * @return One or more `destination` blocks as defined below.
     * 
     */
    public Output<LocalRulestackRuleDestinationArgs> destination() {
        return this.destination;
    }

    /**
     * Should this Rule be enabled? Defaults to `true`.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Should this Rule be enabled? Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The ID of the certificate for inbound inspection. Only valid when `decryption_rule_type` is set to `SSLInboundInspection`.
     * 
     */
    @Import(name="inspectionCertificateId")
    private @Nullable Output<String> inspectionCertificateId;

    /**
     * @return The ID of the certificate for inbound inspection. Only valid when `decryption_rule_type` is set to `SSLInboundInspection`.
     * 
     */
    public Optional<Output<String>> inspectionCertificateId() {
        return Optional.ofNullable(this.inspectionCertificateId);
    }

    /**
     * Should Logging be enabled? Defaults to `false`.
     * 
     */
    @Import(name="loggingEnabled")
    private @Nullable Output<Boolean> loggingEnabled;

    /**
     * @return Should Logging be enabled? Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> loggingEnabled() {
        return Optional.ofNullable(this.loggingEnabled);
    }

    /**
     * The name which should be used for this Palo Alto Local Rulestack Rule.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name which should be used for this Palo Alto Local Rulestack Rule.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Should the inverse of the Destination configuration be used. Defaults to `false`.
     * 
     */
    @Import(name="negateDestination")
    private @Nullable Output<Boolean> negateDestination;

    /**
     * @return Should the inverse of the Destination configuration be used. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> negateDestination() {
        return Optional.ofNullable(this.negateDestination);
    }

    /**
     * Should the inverse of the Source configuration be used. Defaults to `false`.
     * 
     */
    @Import(name="negateSource")
    private @Nullable Output<Boolean> negateSource;

    /**
     * @return Should the inverse of the Source configuration be used. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> negateSource() {
        return Optional.ofNullable(this.negateSource);
    }

    /**
     * The Priority of this rule. Rules are executed in numerical order. Changing this forces a new Palo Alto Local Rulestack Rule to be created.
     * 
     * &gt; **NOTE:** This is the primary identifier of a rule, as such it is not possible to change the Priority of a rule once created.
     * 
     */
    @Import(name="priority", required=true)
    private Output<Integer> priority;

    /**
     * @return The Priority of this rule. Rules are executed in numerical order. Changing this forces a new Palo Alto Local Rulestack Rule to be created.
     * 
     * &gt; **NOTE:** This is the primary identifier of a rule, as such it is not possible to change the Priority of a rule once created.
     * 
     */
    public Output<Integer> priority() {
        return this.priority;
    }

    /**
     * The Protocol and port to use in the form `[protocol]:[port_number]` e.g. `TCP:8080` or `UDP:53`. Conflicts with `protocol_ports`. Defaults to `application-default`.
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return The Protocol and port to use in the form `[protocol]:[port_number]` e.g. `TCP:8080` or `UDP:53`. Conflicts with `protocol_ports`. Defaults to `application-default`.
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * Specifies a list of Protocol:Port entries. E.g. `[ &#34;TCP:80&#34;, &#34;UDP:5431&#34; ]`. Conflicts with `protocol`.
     * 
     */
    @Import(name="protocolPorts")
    private @Nullable Output<List<String>> protocolPorts;

    /**
     * @return Specifies a list of Protocol:Port entries. E.g. `[ &#34;TCP:80&#34;, &#34;UDP:5431&#34; ]`. Conflicts with `protocol`.
     * 
     */
    public Optional<Output<List<String>>> protocolPorts() {
        return Optional.ofNullable(this.protocolPorts);
    }

    /**
     * The ID of the Local Rulestack in which to create this Rule. Changing this forces a new Palo Alto Local Rulestack Rule to be created.
     * 
     */
    @Import(name="rulestackId", required=true)
    private Output<String> rulestackId;

    /**
     * @return The ID of the Local Rulestack in which to create this Rule. Changing this forces a new Palo Alto Local Rulestack Rule to be created.
     * 
     */
    public Output<String> rulestackId() {
        return this.rulestackId;
    }

    /**
     * One or more `source` blocks as defined below.
     * 
     */
    @Import(name="source", required=true)
    private Output<LocalRulestackRuleSourceArgs> source;

    /**
     * @return One or more `source` blocks as defined below.
     * 
     */
    public Output<LocalRulestackRuleSourceArgs> source() {
        return this.source;
    }

    /**
     * A mapping of tags which should be assigned to the Palo Alto Local Rulestack Rule.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags which should be assigned to the Palo Alto Local Rulestack Rule.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private LocalRulestackRuleArgs() {}

    private LocalRulestackRuleArgs(LocalRulestackRuleArgs $) {
        this.action = $.action;
        this.applications = $.applications;
        this.auditComment = $.auditComment;
        this.category = $.category;
        this.decryptionRuleType = $.decryptionRuleType;
        this.description = $.description;
        this.destination = $.destination;
        this.enabled = $.enabled;
        this.inspectionCertificateId = $.inspectionCertificateId;
        this.loggingEnabled = $.loggingEnabled;
        this.name = $.name;
        this.negateDestination = $.negateDestination;
        this.negateSource = $.negateSource;
        this.priority = $.priority;
        this.protocol = $.protocol;
        this.protocolPorts = $.protocolPorts;
        this.rulestackId = $.rulestackId;
        this.source = $.source;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LocalRulestackRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LocalRulestackRuleArgs $;

        public Builder() {
            $ = new LocalRulestackRuleArgs();
        }

        public Builder(LocalRulestackRuleArgs defaults) {
            $ = new LocalRulestackRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action The action to take on the rule being triggered. Possible values are `Allow`, `DenyResetBoth`, `DenyResetServer` and `DenySilent`.
         * 
         * @return builder
         * 
         */
        public Builder action(Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action The action to take on the rule being triggered. Possible values are `Allow`, `DenyResetBoth`, `DenyResetServer` and `DenySilent`.
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        /**
         * @param applications Specifies a list of Applications.
         * 
         * @return builder
         * 
         */
        public Builder applications(Output<List<String>> applications) {
            $.applications = applications;
            return this;
        }

        /**
         * @param applications Specifies a list of Applications.
         * 
         * @return builder
         * 
         */
        public Builder applications(List<String> applications) {
            return applications(Output.of(applications));
        }

        /**
         * @param applications Specifies a list of Applications.
         * 
         * @return builder
         * 
         */
        public Builder applications(String... applications) {
            return applications(List.of(applications));
        }

        /**
         * @param auditComment The comment for Audit purposes.
         * 
         * @return builder
         * 
         */
        public Builder auditComment(@Nullable Output<String> auditComment) {
            $.auditComment = auditComment;
            return this;
        }

        /**
         * @param auditComment The comment for Audit purposes.
         * 
         * @return builder
         * 
         */
        public Builder auditComment(String auditComment) {
            return auditComment(Output.of(auditComment));
        }

        /**
         * @param category A `category` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder category(@Nullable Output<LocalRulestackRuleCategoryArgs> category) {
            $.category = category;
            return this;
        }

        /**
         * @param category A `category` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder category(LocalRulestackRuleCategoryArgs category) {
            return category(Output.of(category));
        }

        /**
         * @param decryptionRuleType The type of Decryption to perform on the rule. Possible values include `SSLInboundInspection`, `SSLOutboundInspection`, and `None`. Defaults to `None`.
         * 
         * @return builder
         * 
         */
        public Builder decryptionRuleType(@Nullable Output<String> decryptionRuleType) {
            $.decryptionRuleType = decryptionRuleType;
            return this;
        }

        /**
         * @param decryptionRuleType The type of Decryption to perform on the rule. Possible values include `SSLInboundInspection`, `SSLOutboundInspection`, and `None`. Defaults to `None`.
         * 
         * @return builder
         * 
         */
        public Builder decryptionRuleType(String decryptionRuleType) {
            return decryptionRuleType(Output.of(decryptionRuleType));
        }

        /**
         * @param description The description for the rule.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description for the rule.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param destination One or more `destination` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder destination(Output<LocalRulestackRuleDestinationArgs> destination) {
            $.destination = destination;
            return this;
        }

        /**
         * @param destination One or more `destination` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder destination(LocalRulestackRuleDestinationArgs destination) {
            return destination(Output.of(destination));
        }

        /**
         * @param enabled Should this Rule be enabled? Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Should this Rule be enabled? Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param inspectionCertificateId The ID of the certificate for inbound inspection. Only valid when `decryption_rule_type` is set to `SSLInboundInspection`.
         * 
         * @return builder
         * 
         */
        public Builder inspectionCertificateId(@Nullable Output<String> inspectionCertificateId) {
            $.inspectionCertificateId = inspectionCertificateId;
            return this;
        }

        /**
         * @param inspectionCertificateId The ID of the certificate for inbound inspection. Only valid when `decryption_rule_type` is set to `SSLInboundInspection`.
         * 
         * @return builder
         * 
         */
        public Builder inspectionCertificateId(String inspectionCertificateId) {
            return inspectionCertificateId(Output.of(inspectionCertificateId));
        }

        /**
         * @param loggingEnabled Should Logging be enabled? Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder loggingEnabled(@Nullable Output<Boolean> loggingEnabled) {
            $.loggingEnabled = loggingEnabled;
            return this;
        }

        /**
         * @param loggingEnabled Should Logging be enabled? Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder loggingEnabled(Boolean loggingEnabled) {
            return loggingEnabled(Output.of(loggingEnabled));
        }

        /**
         * @param name The name which should be used for this Palo Alto Local Rulestack Rule.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this Palo Alto Local Rulestack Rule.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param negateDestination Should the inverse of the Destination configuration be used. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder negateDestination(@Nullable Output<Boolean> negateDestination) {
            $.negateDestination = negateDestination;
            return this;
        }

        /**
         * @param negateDestination Should the inverse of the Destination configuration be used. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder negateDestination(Boolean negateDestination) {
            return negateDestination(Output.of(negateDestination));
        }

        /**
         * @param negateSource Should the inverse of the Source configuration be used. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder negateSource(@Nullable Output<Boolean> negateSource) {
            $.negateSource = negateSource;
            return this;
        }

        /**
         * @param negateSource Should the inverse of the Source configuration be used. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder negateSource(Boolean negateSource) {
            return negateSource(Output.of(negateSource));
        }

        /**
         * @param priority The Priority of this rule. Rules are executed in numerical order. Changing this forces a new Palo Alto Local Rulestack Rule to be created.
         * 
         * &gt; **NOTE:** This is the primary identifier of a rule, as such it is not possible to change the Priority of a rule once created.
         * 
         * @return builder
         * 
         */
        public Builder priority(Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority The Priority of this rule. Rules are executed in numerical order. Changing this forces a new Palo Alto Local Rulestack Rule to be created.
         * 
         * &gt; **NOTE:** This is the primary identifier of a rule, as such it is not possible to change the Priority of a rule once created.
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param protocol The Protocol and port to use in the form `[protocol]:[port_number]` e.g. `TCP:8080` or `UDP:53`. Conflicts with `protocol_ports`. Defaults to `application-default`.
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol The Protocol and port to use in the form `[protocol]:[port_number]` e.g. `TCP:8080` or `UDP:53`. Conflicts with `protocol_ports`. Defaults to `application-default`.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param protocolPorts Specifies a list of Protocol:Port entries. E.g. `[ &#34;TCP:80&#34;, &#34;UDP:5431&#34; ]`. Conflicts with `protocol`.
         * 
         * @return builder
         * 
         */
        public Builder protocolPorts(@Nullable Output<List<String>> protocolPorts) {
            $.protocolPorts = protocolPorts;
            return this;
        }

        /**
         * @param protocolPorts Specifies a list of Protocol:Port entries. E.g. `[ &#34;TCP:80&#34;, &#34;UDP:5431&#34; ]`. Conflicts with `protocol`.
         * 
         * @return builder
         * 
         */
        public Builder protocolPorts(List<String> protocolPorts) {
            return protocolPorts(Output.of(protocolPorts));
        }

        /**
         * @param protocolPorts Specifies a list of Protocol:Port entries. E.g. `[ &#34;TCP:80&#34;, &#34;UDP:5431&#34; ]`. Conflicts with `protocol`.
         * 
         * @return builder
         * 
         */
        public Builder protocolPorts(String... protocolPorts) {
            return protocolPorts(List.of(protocolPorts));
        }

        /**
         * @param rulestackId The ID of the Local Rulestack in which to create this Rule. Changing this forces a new Palo Alto Local Rulestack Rule to be created.
         * 
         * @return builder
         * 
         */
        public Builder rulestackId(Output<String> rulestackId) {
            $.rulestackId = rulestackId;
            return this;
        }

        /**
         * @param rulestackId The ID of the Local Rulestack in which to create this Rule. Changing this forces a new Palo Alto Local Rulestack Rule to be created.
         * 
         * @return builder
         * 
         */
        public Builder rulestackId(String rulestackId) {
            return rulestackId(Output.of(rulestackId));
        }

        /**
         * @param source One or more `source` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder source(Output<LocalRulestackRuleSourceArgs> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source One or more `source` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder source(LocalRulestackRuleSourceArgs source) {
            return source(Output.of(source));
        }

        /**
         * @param tags A mapping of tags which should be assigned to the Palo Alto Local Rulestack Rule.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags which should be assigned to the Palo Alto Local Rulestack Rule.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public LocalRulestackRuleArgs build() {
            $.action = Objects.requireNonNull($.action, "expected parameter 'action' to be non-null");
            $.applications = Objects.requireNonNull($.applications, "expected parameter 'applications' to be non-null");
            $.destination = Objects.requireNonNull($.destination, "expected parameter 'destination' to be non-null");
            $.priority = Objects.requireNonNull($.priority, "expected parameter 'priority' to be non-null");
            $.rulestackId = Objects.requireNonNull($.rulestackId, "expected parameter 'rulestackId' to be non-null");
            $.source = Objects.requireNonNull($.source, "expected parameter 'source' to be non-null");
            return $;
        }
    }

}
