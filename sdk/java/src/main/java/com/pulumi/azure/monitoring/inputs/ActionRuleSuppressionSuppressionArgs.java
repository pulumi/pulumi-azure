// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.monitoring.inputs;

import com.pulumi.azure.monitoring.inputs.ActionRuleSuppressionSuppressionScheduleArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ActionRuleSuppressionSuppressionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ActionRuleSuppressionSuppressionArgs Empty = new ActionRuleSuppressionSuppressionArgs();

    /**
     * Specifies the type of suppression. Possible values are `Always`, `Daily`, `Monthly`, `Once`, and `Weekly`.
     * 
     */
    @Import(name="recurrenceType", required=true)
    private Output<String> recurrenceType;

    /**
     * @return Specifies the type of suppression. Possible values are `Always`, `Daily`, `Monthly`, `Once`, and `Weekly`.
     * 
     */
    public Output<String> recurrenceType() {
        return this.recurrenceType;
    }

    /**
     * A `schedule` block as defined below. Required if `recurrence_type` is `Daily`, `Monthly`, `Once` or `Weekly`.
     * 
     */
    @Import(name="schedule")
    private @Nullable Output<ActionRuleSuppressionSuppressionScheduleArgs> schedule;

    /**
     * @return A `schedule` block as defined below. Required if `recurrence_type` is `Daily`, `Monthly`, `Once` or `Weekly`.
     * 
     */
    public Optional<Output<ActionRuleSuppressionSuppressionScheduleArgs>> schedule() {
        return Optional.ofNullable(this.schedule);
    }

    private ActionRuleSuppressionSuppressionArgs() {}

    private ActionRuleSuppressionSuppressionArgs(ActionRuleSuppressionSuppressionArgs $) {
        this.recurrenceType = $.recurrenceType;
        this.schedule = $.schedule;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ActionRuleSuppressionSuppressionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ActionRuleSuppressionSuppressionArgs $;

        public Builder() {
            $ = new ActionRuleSuppressionSuppressionArgs();
        }

        public Builder(ActionRuleSuppressionSuppressionArgs defaults) {
            $ = new ActionRuleSuppressionSuppressionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param recurrenceType Specifies the type of suppression. Possible values are `Always`, `Daily`, `Monthly`, `Once`, and `Weekly`.
         * 
         * @return builder
         * 
         */
        public Builder recurrenceType(Output<String> recurrenceType) {
            $.recurrenceType = recurrenceType;
            return this;
        }

        /**
         * @param recurrenceType Specifies the type of suppression. Possible values are `Always`, `Daily`, `Monthly`, `Once`, and `Weekly`.
         * 
         * @return builder
         * 
         */
        public Builder recurrenceType(String recurrenceType) {
            return recurrenceType(Output.of(recurrenceType));
        }

        /**
         * @param schedule A `schedule` block as defined below. Required if `recurrence_type` is `Daily`, `Monthly`, `Once` or `Weekly`.
         * 
         * @return builder
         * 
         */
        public Builder schedule(@Nullable Output<ActionRuleSuppressionSuppressionScheduleArgs> schedule) {
            $.schedule = schedule;
            return this;
        }

        /**
         * @param schedule A `schedule` block as defined below. Required if `recurrence_type` is `Daily`, `Monthly`, `Once` or `Weekly`.
         * 
         * @return builder
         * 
         */
        public Builder schedule(ActionRuleSuppressionSuppressionScheduleArgs schedule) {
            return schedule(Output.of(schedule));
        }

        public ActionRuleSuppressionSuppressionArgs build() {
            if ($.recurrenceType == null) {
                throw new MissingRequiredPropertyException("ActionRuleSuppressionSuppressionArgs", "recurrenceType");
            }
            return $;
        }
    }

}
