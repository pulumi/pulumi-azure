// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.securitycenter.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StorageDefenderState extends com.pulumi.resources.ResourceArgs {

    public static final StorageDefenderState Empty = new StorageDefenderState();

    /**
     * The max GB to be scanned per Month. Must be `-1` or above `0`. Omit this property or set to `-1` if no capping is needed. Defaults to `-1`.
     * 
     */
    @Import(name="malwareScanningOnUploadCapGbPerMonth")
    private @Nullable Output<Integer> malwareScanningOnUploadCapGbPerMonth;

    /**
     * @return The max GB to be scanned per Month. Must be `-1` or above `0`. Omit this property or set to `-1` if no capping is needed. Defaults to `-1`.
     * 
     */
    public Optional<Output<Integer>> malwareScanningOnUploadCapGbPerMonth() {
        return Optional.ofNullable(this.malwareScanningOnUploadCapGbPerMonth);
    }

    /**
     * Whether On Upload malware scanning should be enabled. Defaults to `false`.
     * 
     */
    @Import(name="malwareScanningOnUploadEnabled")
    private @Nullable Output<Boolean> malwareScanningOnUploadEnabled;

    /**
     * @return Whether On Upload malware scanning should be enabled. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> malwareScanningOnUploadEnabled() {
        return Optional.ofNullable(this.malwareScanningOnUploadEnabled);
    }

    /**
     * Whether the settings defined for this storage account should override the settings defined for the subscription. Defaults to `false`.
     * 
     */
    @Import(name="overrideSubscriptionSettingsEnabled")
    private @Nullable Output<Boolean> overrideSubscriptionSettingsEnabled;

    /**
     * @return Whether the settings defined for this storage account should override the settings defined for the subscription. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> overrideSubscriptionSettingsEnabled() {
        return Optional.ofNullable(this.overrideSubscriptionSettingsEnabled);
    }

    /**
     * Whether Sensitive Data Discovery should be enabled. Defaults to `false`.
     * 
     */
    @Import(name="sensitiveDataDiscoveryEnabled")
    private @Nullable Output<Boolean> sensitiveDataDiscoveryEnabled;

    /**
     * @return Whether Sensitive Data Discovery should be enabled. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> sensitiveDataDiscoveryEnabled() {
        return Optional.ofNullable(this.sensitiveDataDiscoveryEnabled);
    }

    /**
     * The ID of the storage account the defender applied to. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="storageAccountId")
    private @Nullable Output<String> storageAccountId;

    /**
     * @return The ID of the storage account the defender applied to. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> storageAccountId() {
        return Optional.ofNullable(this.storageAccountId);
    }

    private StorageDefenderState() {}

    private StorageDefenderState(StorageDefenderState $) {
        this.malwareScanningOnUploadCapGbPerMonth = $.malwareScanningOnUploadCapGbPerMonth;
        this.malwareScanningOnUploadEnabled = $.malwareScanningOnUploadEnabled;
        this.overrideSubscriptionSettingsEnabled = $.overrideSubscriptionSettingsEnabled;
        this.sensitiveDataDiscoveryEnabled = $.sensitiveDataDiscoveryEnabled;
        this.storageAccountId = $.storageAccountId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StorageDefenderState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StorageDefenderState $;

        public Builder() {
            $ = new StorageDefenderState();
        }

        public Builder(StorageDefenderState defaults) {
            $ = new StorageDefenderState(Objects.requireNonNull(defaults));
        }

        /**
         * @param malwareScanningOnUploadCapGbPerMonth The max GB to be scanned per Month. Must be `-1` or above `0`. Omit this property or set to `-1` if no capping is needed. Defaults to `-1`.
         * 
         * @return builder
         * 
         */
        public Builder malwareScanningOnUploadCapGbPerMonth(@Nullable Output<Integer> malwareScanningOnUploadCapGbPerMonth) {
            $.malwareScanningOnUploadCapGbPerMonth = malwareScanningOnUploadCapGbPerMonth;
            return this;
        }

        /**
         * @param malwareScanningOnUploadCapGbPerMonth The max GB to be scanned per Month. Must be `-1` or above `0`. Omit this property or set to `-1` if no capping is needed. Defaults to `-1`.
         * 
         * @return builder
         * 
         */
        public Builder malwareScanningOnUploadCapGbPerMonth(Integer malwareScanningOnUploadCapGbPerMonth) {
            return malwareScanningOnUploadCapGbPerMonth(Output.of(malwareScanningOnUploadCapGbPerMonth));
        }

        /**
         * @param malwareScanningOnUploadEnabled Whether On Upload malware scanning should be enabled. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder malwareScanningOnUploadEnabled(@Nullable Output<Boolean> malwareScanningOnUploadEnabled) {
            $.malwareScanningOnUploadEnabled = malwareScanningOnUploadEnabled;
            return this;
        }

        /**
         * @param malwareScanningOnUploadEnabled Whether On Upload malware scanning should be enabled. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder malwareScanningOnUploadEnabled(Boolean malwareScanningOnUploadEnabled) {
            return malwareScanningOnUploadEnabled(Output.of(malwareScanningOnUploadEnabled));
        }

        /**
         * @param overrideSubscriptionSettingsEnabled Whether the settings defined for this storage account should override the settings defined for the subscription. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder overrideSubscriptionSettingsEnabled(@Nullable Output<Boolean> overrideSubscriptionSettingsEnabled) {
            $.overrideSubscriptionSettingsEnabled = overrideSubscriptionSettingsEnabled;
            return this;
        }

        /**
         * @param overrideSubscriptionSettingsEnabled Whether the settings defined for this storage account should override the settings defined for the subscription. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder overrideSubscriptionSettingsEnabled(Boolean overrideSubscriptionSettingsEnabled) {
            return overrideSubscriptionSettingsEnabled(Output.of(overrideSubscriptionSettingsEnabled));
        }

        /**
         * @param sensitiveDataDiscoveryEnabled Whether Sensitive Data Discovery should be enabled. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder sensitiveDataDiscoveryEnabled(@Nullable Output<Boolean> sensitiveDataDiscoveryEnabled) {
            $.sensitiveDataDiscoveryEnabled = sensitiveDataDiscoveryEnabled;
            return this;
        }

        /**
         * @param sensitiveDataDiscoveryEnabled Whether Sensitive Data Discovery should be enabled. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder sensitiveDataDiscoveryEnabled(Boolean sensitiveDataDiscoveryEnabled) {
            return sensitiveDataDiscoveryEnabled(Output.of(sensitiveDataDiscoveryEnabled));
        }

        /**
         * @param storageAccountId The ID of the storage account the defender applied to. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountId(@Nullable Output<String> storageAccountId) {
            $.storageAccountId = storageAccountId;
            return this;
        }

        /**
         * @param storageAccountId The ID of the storage account the defender applied to. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountId(String storageAccountId) {
            return storageAccountId(Output.of(storageAccountId));
        }

        public StorageDefenderState build() {
            return $;
        }
    }

}
