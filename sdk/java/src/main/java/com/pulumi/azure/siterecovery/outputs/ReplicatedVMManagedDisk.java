// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.siterecovery.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ReplicatedVMManagedDisk {
    /**
     * @return Id of disk that should be replicated.
     * 
     */
    private final String diskId;
    /**
     * @return Storage account that should be used for caching.
     * 
     */
    private final String stagingStorageAccountId;
    /**
     * @return The Disk Encryption Set that the Managed Disk will be associated with.
     * 
     */
    private final @Nullable String targetDiskEncryptionSetId;
    /**
     * @return What type should the disk be when a failover is done.
     * 
     */
    private final String targetDiskType;
    /**
     * @return What type should the disk be that holds the replication data.
     * 
     */
    private final String targetReplicaDiskType;
    /**
     * @return Resource group disk should belong to when a failover is done.
     * 
     */
    private final String targetResourceGroupId;

    @CustomType.Constructor
    private ReplicatedVMManagedDisk(
        @CustomType.Parameter("diskId") String diskId,
        @CustomType.Parameter("stagingStorageAccountId") String stagingStorageAccountId,
        @CustomType.Parameter("targetDiskEncryptionSetId") @Nullable String targetDiskEncryptionSetId,
        @CustomType.Parameter("targetDiskType") String targetDiskType,
        @CustomType.Parameter("targetReplicaDiskType") String targetReplicaDiskType,
        @CustomType.Parameter("targetResourceGroupId") String targetResourceGroupId) {
        this.diskId = diskId;
        this.stagingStorageAccountId = stagingStorageAccountId;
        this.targetDiskEncryptionSetId = targetDiskEncryptionSetId;
        this.targetDiskType = targetDiskType;
        this.targetReplicaDiskType = targetReplicaDiskType;
        this.targetResourceGroupId = targetResourceGroupId;
    }

    /**
     * @return Id of disk that should be replicated.
     * 
     */
    public String diskId() {
        return this.diskId;
    }
    /**
     * @return Storage account that should be used for caching.
     * 
     */
    public String stagingStorageAccountId() {
        return this.stagingStorageAccountId;
    }
    /**
     * @return The Disk Encryption Set that the Managed Disk will be associated with.
     * 
     */
    public Optional<String> targetDiskEncryptionSetId() {
        return Optional.ofNullable(this.targetDiskEncryptionSetId);
    }
    /**
     * @return What type should the disk be when a failover is done.
     * 
     */
    public String targetDiskType() {
        return this.targetDiskType;
    }
    /**
     * @return What type should the disk be that holds the replication data.
     * 
     */
    public String targetReplicaDiskType() {
        return this.targetReplicaDiskType;
    }
    /**
     * @return Resource group disk should belong to when a failover is done.
     * 
     */
    public String targetResourceGroupId() {
        return this.targetResourceGroupId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ReplicatedVMManagedDisk defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String diskId;
        private String stagingStorageAccountId;
        private @Nullable String targetDiskEncryptionSetId;
        private String targetDiskType;
        private String targetReplicaDiskType;
        private String targetResourceGroupId;

        public Builder() {
    	      // Empty
        }

        public Builder(ReplicatedVMManagedDisk defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.diskId = defaults.diskId;
    	      this.stagingStorageAccountId = defaults.stagingStorageAccountId;
    	      this.targetDiskEncryptionSetId = defaults.targetDiskEncryptionSetId;
    	      this.targetDiskType = defaults.targetDiskType;
    	      this.targetReplicaDiskType = defaults.targetReplicaDiskType;
    	      this.targetResourceGroupId = defaults.targetResourceGroupId;
        }

        public Builder diskId(String diskId) {
            this.diskId = Objects.requireNonNull(diskId);
            return this;
        }
        public Builder stagingStorageAccountId(String stagingStorageAccountId) {
            this.stagingStorageAccountId = Objects.requireNonNull(stagingStorageAccountId);
            return this;
        }
        public Builder targetDiskEncryptionSetId(@Nullable String targetDiskEncryptionSetId) {
            this.targetDiskEncryptionSetId = targetDiskEncryptionSetId;
            return this;
        }
        public Builder targetDiskType(String targetDiskType) {
            this.targetDiskType = Objects.requireNonNull(targetDiskType);
            return this;
        }
        public Builder targetReplicaDiskType(String targetReplicaDiskType) {
            this.targetReplicaDiskType = Objects.requireNonNull(targetReplicaDiskType);
            return this;
        }
        public Builder targetResourceGroupId(String targetResourceGroupId) {
            this.targetResourceGroupId = Objects.requireNonNull(targetResourceGroupId);
            return this;
        }        public ReplicatedVMManagedDisk build() {
            return new ReplicatedVMManagedDisk(diskId, stagingStorageAccountId, targetDiskEncryptionSetId, targetDiskType, targetReplicaDiskType, targetResourceGroupId);
        }
    }
}
