// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.siterecovery.outputs;

import com.pulumi.azure.siterecovery.outputs.ReplicatedVMManagedDiskTargetDiskEncryption;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ReplicatedVMManagedDisk {
    /**
     * @return Id of disk that should be replicated. Changing this forces a new resource to be created.
     * 
     */
    private String diskId;
    /**
     * @return Storage account that should be used for caching. Changing this forces a new resource to be created.
     * 
     */
    private String stagingStorageAccountId;
    /**
     * @return A `target_disk_encryption` block as defined below.
     * 
     */
    private @Nullable ReplicatedVMManagedDiskTargetDiskEncryption targetDiskEncryption;
    /**
     * @return The Disk Encryption Set that the Managed Disk will be associated with. Changing this forces a new resource to be created.
     * 
     * &gt; **NOTE:** Creating replicated vm with `target_disk_encryption_set_id` wil take more time (up to 5 hours), please extend the `timeout` for `create`.
     * 
     */
    private @Nullable String targetDiskEncryptionSetId;
    /**
     * @return What type should the disk be when a failover is done. Possible values are `Standard_LRS`, `Premium_LRS`, `StandardSSD_LRS` and `UltraSSD_LRS`. Changing this forces a new resource to be created.
     * 
     */
    private String targetDiskType;
    /**
     * @return What type should the disk be that holds the replication data. Possible values are `Standard_LRS`, `Premium_LRS`, `StandardSSD_LRS` and `UltraSSD_LRS`. Changing this forces a new resource to be created.
     * 
     */
    private String targetReplicaDiskType;
    /**
     * @return Resource group disk should belong to when a failover is done. Changing this forces a new resource to be created.
     * 
     */
    private String targetResourceGroupId;

    private ReplicatedVMManagedDisk() {}
    /**
     * @return Id of disk that should be replicated. Changing this forces a new resource to be created.
     * 
     */
    public String diskId() {
        return this.diskId;
    }
    /**
     * @return Storage account that should be used for caching. Changing this forces a new resource to be created.
     * 
     */
    public String stagingStorageAccountId() {
        return this.stagingStorageAccountId;
    }
    /**
     * @return A `target_disk_encryption` block as defined below.
     * 
     */
    public Optional<ReplicatedVMManagedDiskTargetDiskEncryption> targetDiskEncryption() {
        return Optional.ofNullable(this.targetDiskEncryption);
    }
    /**
     * @return The Disk Encryption Set that the Managed Disk will be associated with. Changing this forces a new resource to be created.
     * 
     * &gt; **NOTE:** Creating replicated vm with `target_disk_encryption_set_id` wil take more time (up to 5 hours), please extend the `timeout` for `create`.
     * 
     */
    public Optional<String> targetDiskEncryptionSetId() {
        return Optional.ofNullable(this.targetDiskEncryptionSetId);
    }
    /**
     * @return What type should the disk be when a failover is done. Possible values are `Standard_LRS`, `Premium_LRS`, `StandardSSD_LRS` and `UltraSSD_LRS`. Changing this forces a new resource to be created.
     * 
     */
    public String targetDiskType() {
        return this.targetDiskType;
    }
    /**
     * @return What type should the disk be that holds the replication data. Possible values are `Standard_LRS`, `Premium_LRS`, `StandardSSD_LRS` and `UltraSSD_LRS`. Changing this forces a new resource to be created.
     * 
     */
    public String targetReplicaDiskType() {
        return this.targetReplicaDiskType;
    }
    /**
     * @return Resource group disk should belong to when a failover is done. Changing this forces a new resource to be created.
     * 
     */
    public String targetResourceGroupId() {
        return this.targetResourceGroupId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ReplicatedVMManagedDisk defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String diskId;
        private String stagingStorageAccountId;
        private @Nullable ReplicatedVMManagedDiskTargetDiskEncryption targetDiskEncryption;
        private @Nullable String targetDiskEncryptionSetId;
        private String targetDiskType;
        private String targetReplicaDiskType;
        private String targetResourceGroupId;
        public Builder() {}
        public Builder(ReplicatedVMManagedDisk defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.diskId = defaults.diskId;
    	      this.stagingStorageAccountId = defaults.stagingStorageAccountId;
    	      this.targetDiskEncryption = defaults.targetDiskEncryption;
    	      this.targetDiskEncryptionSetId = defaults.targetDiskEncryptionSetId;
    	      this.targetDiskType = defaults.targetDiskType;
    	      this.targetReplicaDiskType = defaults.targetReplicaDiskType;
    	      this.targetResourceGroupId = defaults.targetResourceGroupId;
        }

        @CustomType.Setter
        public Builder diskId(String diskId) {
            if (diskId == null) {
              throw new MissingRequiredPropertyException("ReplicatedVMManagedDisk", "diskId");
            }
            this.diskId = diskId;
            return this;
        }
        @CustomType.Setter
        public Builder stagingStorageAccountId(String stagingStorageAccountId) {
            if (stagingStorageAccountId == null) {
              throw new MissingRequiredPropertyException("ReplicatedVMManagedDisk", "stagingStorageAccountId");
            }
            this.stagingStorageAccountId = stagingStorageAccountId;
            return this;
        }
        @CustomType.Setter
        public Builder targetDiskEncryption(@Nullable ReplicatedVMManagedDiskTargetDiskEncryption targetDiskEncryption) {

            this.targetDiskEncryption = targetDiskEncryption;
            return this;
        }
        @CustomType.Setter
        public Builder targetDiskEncryptionSetId(@Nullable String targetDiskEncryptionSetId) {

            this.targetDiskEncryptionSetId = targetDiskEncryptionSetId;
            return this;
        }
        @CustomType.Setter
        public Builder targetDiskType(String targetDiskType) {
            if (targetDiskType == null) {
              throw new MissingRequiredPropertyException("ReplicatedVMManagedDisk", "targetDiskType");
            }
            this.targetDiskType = targetDiskType;
            return this;
        }
        @CustomType.Setter
        public Builder targetReplicaDiskType(String targetReplicaDiskType) {
            if (targetReplicaDiskType == null) {
              throw new MissingRequiredPropertyException("ReplicatedVMManagedDisk", "targetReplicaDiskType");
            }
            this.targetReplicaDiskType = targetReplicaDiskType;
            return this;
        }
        @CustomType.Setter
        public Builder targetResourceGroupId(String targetResourceGroupId) {
            if (targetResourceGroupId == null) {
              throw new MissingRequiredPropertyException("ReplicatedVMManagedDisk", "targetResourceGroupId");
            }
            this.targetResourceGroupId = targetResourceGroupId;
            return this;
        }
        public ReplicatedVMManagedDisk build() {
            final var _resultValue = new ReplicatedVMManagedDisk();
            _resultValue.diskId = diskId;
            _resultValue.stagingStorageAccountId = stagingStorageAccountId;
            _resultValue.targetDiskEncryption = targetDiskEncryption;
            _resultValue.targetDiskEncryptionSetId = targetDiskEncryptionSetId;
            _resultValue.targetDiskType = targetDiskType;
            _resultValue.targetReplicaDiskType = targetReplicaDiskType;
            _resultValue.targetResourceGroupId = targetResourceGroupId;
            return _resultValue;
        }
    }
}
