// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.mobile.outputs;

import com.pulumi.azure.mobile.outputs.GetNetworkSimPolicySlice;
import com.pulumi.azure.mobile.outputs.GetNetworkSimPolicyUserEquipmentAggregateMaximumBitRate;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetNetworkSimPolicyResult {
    /**
     * @return The ID of default slice to use if the UE does not explicitly specify it.
     * 
     */
    private String defaultSliceId;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The Azure Region where the Mobile Network Sim Policy should exist.
     * 
     */
    private String location;
    private String mobileNetworkId;
    private String name;
    /**
     * @return RAT/Frequency Selection Priority Index, defined in 3GPP TS 36.413.
     * 
     */
    private Integer ratFrequencySelectionPriorityIndex;
    /**
     * @return Interval for the UE periodic registration update procedure.
     * 
     */
    private Integer registrationTimerInSeconds;
    /**
     * @return An array of `slice` block as defined below. The allowed slices and the settings to use for them.
     * 
     */
    private List<GetNetworkSimPolicySlice> slices;
    /**
     * @return A mapping of tags which should be assigned to the Mobile Network Sim Policies.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return A `user_equipment_aggregate_maximum_bit_rate` block as defined below.
     * 
     */
    private List<GetNetworkSimPolicyUserEquipmentAggregateMaximumBitRate> userEquipmentAggregateMaximumBitRates;

    private GetNetworkSimPolicyResult() {}
    /**
     * @return The ID of default slice to use if the UE does not explicitly specify it.
     * 
     */
    public String defaultSliceId() {
        return this.defaultSliceId;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The Azure Region where the Mobile Network Sim Policy should exist.
     * 
     */
    public String location() {
        return this.location;
    }
    public String mobileNetworkId() {
        return this.mobileNetworkId;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return RAT/Frequency Selection Priority Index, defined in 3GPP TS 36.413.
     * 
     */
    public Integer ratFrequencySelectionPriorityIndex() {
        return this.ratFrequencySelectionPriorityIndex;
    }
    /**
     * @return Interval for the UE periodic registration update procedure.
     * 
     */
    public Integer registrationTimerInSeconds() {
        return this.registrationTimerInSeconds;
    }
    /**
     * @return An array of `slice` block as defined below. The allowed slices and the settings to use for them.
     * 
     */
    public List<GetNetworkSimPolicySlice> slices() {
        return this.slices;
    }
    /**
     * @return A mapping of tags which should be assigned to the Mobile Network Sim Policies.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return A `user_equipment_aggregate_maximum_bit_rate` block as defined below.
     * 
     */
    public List<GetNetworkSimPolicyUserEquipmentAggregateMaximumBitRate> userEquipmentAggregateMaximumBitRates() {
        return this.userEquipmentAggregateMaximumBitRates;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNetworkSimPolicyResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String defaultSliceId;
        private String id;
        private String location;
        private String mobileNetworkId;
        private String name;
        private Integer ratFrequencySelectionPriorityIndex;
        private Integer registrationTimerInSeconds;
        private List<GetNetworkSimPolicySlice> slices;
        private Map<String,String> tags;
        private List<GetNetworkSimPolicyUserEquipmentAggregateMaximumBitRate> userEquipmentAggregateMaximumBitRates;
        public Builder() {}
        public Builder(GetNetworkSimPolicyResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.defaultSliceId = defaults.defaultSliceId;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.mobileNetworkId = defaults.mobileNetworkId;
    	      this.name = defaults.name;
    	      this.ratFrequencySelectionPriorityIndex = defaults.ratFrequencySelectionPriorityIndex;
    	      this.registrationTimerInSeconds = defaults.registrationTimerInSeconds;
    	      this.slices = defaults.slices;
    	      this.tags = defaults.tags;
    	      this.userEquipmentAggregateMaximumBitRates = defaults.userEquipmentAggregateMaximumBitRates;
        }

        @CustomType.Setter
        public Builder defaultSliceId(String defaultSliceId) {
            this.defaultSliceId = Objects.requireNonNull(defaultSliceId);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder mobileNetworkId(String mobileNetworkId) {
            this.mobileNetworkId = Objects.requireNonNull(mobileNetworkId);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder ratFrequencySelectionPriorityIndex(Integer ratFrequencySelectionPriorityIndex) {
            this.ratFrequencySelectionPriorityIndex = Objects.requireNonNull(ratFrequencySelectionPriorityIndex);
            return this;
        }
        @CustomType.Setter
        public Builder registrationTimerInSeconds(Integer registrationTimerInSeconds) {
            this.registrationTimerInSeconds = Objects.requireNonNull(registrationTimerInSeconds);
            return this;
        }
        @CustomType.Setter
        public Builder slices(List<GetNetworkSimPolicySlice> slices) {
            this.slices = Objects.requireNonNull(slices);
            return this;
        }
        public Builder slices(GetNetworkSimPolicySlice... slices) {
            return slices(List.of(slices));
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        @CustomType.Setter
        public Builder userEquipmentAggregateMaximumBitRates(List<GetNetworkSimPolicyUserEquipmentAggregateMaximumBitRate> userEquipmentAggregateMaximumBitRates) {
            this.userEquipmentAggregateMaximumBitRates = Objects.requireNonNull(userEquipmentAggregateMaximumBitRates);
            return this;
        }
        public Builder userEquipmentAggregateMaximumBitRates(GetNetworkSimPolicyUserEquipmentAggregateMaximumBitRate... userEquipmentAggregateMaximumBitRates) {
            return userEquipmentAggregateMaximumBitRates(List.of(userEquipmentAggregateMaximumBitRates));
        }
        public GetNetworkSimPolicyResult build() {
            final var o = new GetNetworkSimPolicyResult();
            o.defaultSliceId = defaultSliceId;
            o.id = id;
            o.location = location;
            o.mobileNetworkId = mobileNetworkId;
            o.name = name;
            o.ratFrequencySelectionPriorityIndex = ratFrequencySelectionPriorityIndex;
            o.registrationTimerInSeconds = registrationTimerInSeconds;
            o.slices = slices;
            o.tags = tags;
            o.userEquipmentAggregateMaximumBitRates = userEquipmentAggregateMaximumBitRates;
            return o;
        }
    }
}
