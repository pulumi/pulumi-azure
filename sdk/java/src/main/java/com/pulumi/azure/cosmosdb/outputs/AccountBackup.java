// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.cosmosdb.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AccountBackup {
    /**
     * @return The interval in minutes between two backups. This is configurable only when `type` is `Periodic`. Possible values are between 60 and 1440.
     * 
     */
    private @Nullable Integer intervalInMinutes;
    /**
     * @return The time in hours that each backup is retained. This is configurable only when `type` is `Periodic`. Possible values are between 8 and 720.
     * 
     */
    private @Nullable Integer retentionInHours;
    /**
     * @return The storage redundancy is used to indicate the type of backup residency. This is configurable only when `type` is `Periodic`. Possible values are `Geo`, `Local` and `Zone`.
     * 
     */
    private @Nullable String storageRedundancy;
    /**
     * @return The type of the `backup`. Possible values are `Continuous` and `Periodic`. Migration of `Periodic` to `Continuous` is one-way, changing `Continuous` to `Periodic` forces a new resource to be created.
     * 
     */
    private String type;

    private AccountBackup() {}
    /**
     * @return The interval in minutes between two backups. This is configurable only when `type` is `Periodic`. Possible values are between 60 and 1440.
     * 
     */
    public Optional<Integer> intervalInMinutes() {
        return Optional.ofNullable(this.intervalInMinutes);
    }
    /**
     * @return The time in hours that each backup is retained. This is configurable only when `type` is `Periodic`. Possible values are between 8 and 720.
     * 
     */
    public Optional<Integer> retentionInHours() {
        return Optional.ofNullable(this.retentionInHours);
    }
    /**
     * @return The storage redundancy is used to indicate the type of backup residency. This is configurable only when `type` is `Periodic`. Possible values are `Geo`, `Local` and `Zone`.
     * 
     */
    public Optional<String> storageRedundancy() {
        return Optional.ofNullable(this.storageRedundancy);
    }
    /**
     * @return The type of the `backup`. Possible values are `Continuous` and `Periodic`. Migration of `Periodic` to `Continuous` is one-way, changing `Continuous` to `Periodic` forces a new resource to be created.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AccountBackup defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer intervalInMinutes;
        private @Nullable Integer retentionInHours;
        private @Nullable String storageRedundancy;
        private String type;
        public Builder() {}
        public Builder(AccountBackup defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.intervalInMinutes = defaults.intervalInMinutes;
    	      this.retentionInHours = defaults.retentionInHours;
    	      this.storageRedundancy = defaults.storageRedundancy;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder intervalInMinutes(@Nullable Integer intervalInMinutes) {

            this.intervalInMinutes = intervalInMinutes;
            return this;
        }
        @CustomType.Setter
        public Builder retentionInHours(@Nullable Integer retentionInHours) {

            this.retentionInHours = retentionInHours;
            return this;
        }
        @CustomType.Setter
        public Builder storageRedundancy(@Nullable String storageRedundancy) {

            this.storageRedundancy = storageRedundancy;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("AccountBackup", "type");
            }
            this.type = type;
            return this;
        }
        public AccountBackup build() {
            final var _resultValue = new AccountBackup();
            _resultValue.intervalInMinutes = intervalInMinutes;
            _resultValue.retentionInHours = retentionInHours;
            _resultValue.storageRedundancy = storageRedundancy;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
