// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.devcenter;

import com.pulumi.azure.devcenter.inputs.CatalogCatalogAdogitArgs;
import com.pulumi.azure.devcenter.inputs.CatalogCatalogGithubArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CatalogArgs extends com.pulumi.resources.ResourceArgs {

    public static final CatalogArgs Empty = new CatalogArgs();

    @Import(name="catalogAdogit")
    private @Nullable Output<CatalogCatalogAdogitArgs> catalogAdogit;

    public Optional<Output<CatalogCatalogAdogitArgs>> catalogAdogit() {
        return Optional.ofNullable(this.catalogAdogit);
    }

    @Import(name="catalogGithub")
    private @Nullable Output<CatalogCatalogGithubArgs> catalogGithub;

    public Optional<Output<CatalogCatalogGithubArgs>> catalogGithub() {
        return Optional.ofNullable(this.catalogGithub);
    }

    @Import(name="devCenterId", required=true)
    private Output<String> devCenterId;

    public Output<String> devCenterId() {
        return this.devCenterId;
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    private CatalogArgs() {}

    private CatalogArgs(CatalogArgs $) {
        this.catalogAdogit = $.catalogAdogit;
        this.catalogGithub = $.catalogGithub;
        this.devCenterId = $.devCenterId;
        this.name = $.name;
        this.resourceGroupName = $.resourceGroupName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CatalogArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CatalogArgs $;

        public Builder() {
            $ = new CatalogArgs();
        }

        public Builder(CatalogArgs defaults) {
            $ = new CatalogArgs(Objects.requireNonNull(defaults));
        }

        public Builder catalogAdogit(@Nullable Output<CatalogCatalogAdogitArgs> catalogAdogit) {
            $.catalogAdogit = catalogAdogit;
            return this;
        }

        public Builder catalogAdogit(CatalogCatalogAdogitArgs catalogAdogit) {
            return catalogAdogit(Output.of(catalogAdogit));
        }

        public Builder catalogGithub(@Nullable Output<CatalogCatalogGithubArgs> catalogGithub) {
            $.catalogGithub = catalogGithub;
            return this;
        }

        public Builder catalogGithub(CatalogCatalogGithubArgs catalogGithub) {
            return catalogGithub(Output.of(catalogGithub));
        }

        public Builder devCenterId(Output<String> devCenterId) {
            $.devCenterId = devCenterId;
            return this;
        }

        public Builder devCenterId(String devCenterId) {
            return devCenterId(Output.of(devCenterId));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public CatalogArgs build() {
            if ($.devCenterId == null) {
                throw new MissingRequiredPropertyException("CatalogArgs", "devCenterId");
            }
            if ($.resourceGroupName == null) {
                throw new MissingRequiredPropertyException("CatalogArgs", "resourceGroupName");
            }
            return $;
        }
    }

}
