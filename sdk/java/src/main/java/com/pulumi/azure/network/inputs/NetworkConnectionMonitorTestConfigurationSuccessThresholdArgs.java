// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkConnectionMonitorTestConfigurationSuccessThresholdArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworkConnectionMonitorTestConfigurationSuccessThresholdArgs Empty = new NetworkConnectionMonitorTestConfigurationSuccessThresholdArgs();

    /**
     * The maximum percentage of failed checks permitted for a test to be successful.
     * 
     */
    @Import(name="checksFailedPercent")
    private @Nullable Output<Integer> checksFailedPercent;

    /**
     * @return The maximum percentage of failed checks permitted for a test to be successful.
     * 
     */
    public Optional<Output<Integer>> checksFailedPercent() {
        return Optional.ofNullable(this.checksFailedPercent);
    }

    /**
     * The maximum round-trip time in milliseconds permitted for a test to be successful.
     * 
     */
    @Import(name="roundTripTimeMs")
    private @Nullable Output<Double> roundTripTimeMs;

    /**
     * @return The maximum round-trip time in milliseconds permitted for a test to be successful.
     * 
     */
    public Optional<Output<Double>> roundTripTimeMs() {
        return Optional.ofNullable(this.roundTripTimeMs);
    }

    private NetworkConnectionMonitorTestConfigurationSuccessThresholdArgs() {}

    private NetworkConnectionMonitorTestConfigurationSuccessThresholdArgs(NetworkConnectionMonitorTestConfigurationSuccessThresholdArgs $) {
        this.checksFailedPercent = $.checksFailedPercent;
        this.roundTripTimeMs = $.roundTripTimeMs;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkConnectionMonitorTestConfigurationSuccessThresholdArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkConnectionMonitorTestConfigurationSuccessThresholdArgs $;

        public Builder() {
            $ = new NetworkConnectionMonitorTestConfigurationSuccessThresholdArgs();
        }

        public Builder(NetworkConnectionMonitorTestConfigurationSuccessThresholdArgs defaults) {
            $ = new NetworkConnectionMonitorTestConfigurationSuccessThresholdArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param checksFailedPercent The maximum percentage of failed checks permitted for a test to be successful.
         * 
         * @return builder
         * 
         */
        public Builder checksFailedPercent(@Nullable Output<Integer> checksFailedPercent) {
            $.checksFailedPercent = checksFailedPercent;
            return this;
        }

        /**
         * @param checksFailedPercent The maximum percentage of failed checks permitted for a test to be successful.
         * 
         * @return builder
         * 
         */
        public Builder checksFailedPercent(Integer checksFailedPercent) {
            return checksFailedPercent(Output.of(checksFailedPercent));
        }

        /**
         * @param roundTripTimeMs The maximum round-trip time in milliseconds permitted for a test to be successful.
         * 
         * @return builder
         * 
         */
        public Builder roundTripTimeMs(@Nullable Output<Double> roundTripTimeMs) {
            $.roundTripTimeMs = roundTripTimeMs;
            return this;
        }

        /**
         * @param roundTripTimeMs The maximum round-trip time in milliseconds permitted for a test to be successful.
         * 
         * @return builder
         * 
         */
        public Builder roundTripTimeMs(Double roundTripTimeMs) {
            return roundTripTimeMs(Output.of(roundTripTimeMs));
        }

        public NetworkConnectionMonitorTestConfigurationSuccessThresholdArgs build() {
            return $;
        }
    }

}
