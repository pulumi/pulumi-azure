// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.eventgrid.outputs;

import com.pulumi.azure.eventgrid.outputs.GetPartnerNamespaceInboundIpRule;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetPartnerNamespaceResult {
    /**
     * @return The endpoint for the Event Grid Partner Namespace.
     * 
     */
    private String endpoint;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return One or more `inbound_ip_rule` blocks as defined below.
     * 
     */
    private List<GetPartnerNamespaceInboundIpRule> inboundIpRules;
    /**
     * @return Whether local authentication methods are enabled for the Event Grid Partner Namespace.
     * 
     */
    private Boolean localAuthenticationEnabled;
    /**
     * @return The Azure Region where the Event Grid Partner Namespace exists.
     * 
     */
    private String location;
    private String name;
    /**
     * @return The resource Id of the partner registration associated with this Event Grid Partner Namespace.
     * 
     */
    private String partnerRegistrationId;
    /**
     * @return The partner topic routing mode.
     * 
     */
    private String partnerTopicRoutingMode;
    /**
     * @return Whether or not public network access is allowed for this server.
     * 
     */
    private String publicNetworkAccess;
    private String resourceGroupName;
    /**
     * @return A mapping of tags which are assigned to the Event Grid Partner Namespace.
     * 
     */
    private Map<String,String> tags;

    private GetPartnerNamespaceResult() {}
    /**
     * @return The endpoint for the Event Grid Partner Namespace.
     * 
     */
    public String endpoint() {
        return this.endpoint;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return One or more `inbound_ip_rule` blocks as defined below.
     * 
     */
    public List<GetPartnerNamespaceInboundIpRule> inboundIpRules() {
        return this.inboundIpRules;
    }
    /**
     * @return Whether local authentication methods are enabled for the Event Grid Partner Namespace.
     * 
     */
    public Boolean localAuthenticationEnabled() {
        return this.localAuthenticationEnabled;
    }
    /**
     * @return The Azure Region where the Event Grid Partner Namespace exists.
     * 
     */
    public String location() {
        return this.location;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return The resource Id of the partner registration associated with this Event Grid Partner Namespace.
     * 
     */
    public String partnerRegistrationId() {
        return this.partnerRegistrationId;
    }
    /**
     * @return The partner topic routing mode.
     * 
     */
    public String partnerTopicRoutingMode() {
        return this.partnerTopicRoutingMode;
    }
    /**
     * @return Whether or not public network access is allowed for this server.
     * 
     */
    public String publicNetworkAccess() {
        return this.publicNetworkAccess;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return A mapping of tags which are assigned to the Event Grid Partner Namespace.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPartnerNamespaceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String endpoint;
        private String id;
        private List<GetPartnerNamespaceInboundIpRule> inboundIpRules;
        private Boolean localAuthenticationEnabled;
        private String location;
        private String name;
        private String partnerRegistrationId;
        private String partnerTopicRoutingMode;
        private String publicNetworkAccess;
        private String resourceGroupName;
        private Map<String,String> tags;
        public Builder() {}
        public Builder(GetPartnerNamespaceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.endpoint = defaults.endpoint;
    	      this.id = defaults.id;
    	      this.inboundIpRules = defaults.inboundIpRules;
    	      this.localAuthenticationEnabled = defaults.localAuthenticationEnabled;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.partnerRegistrationId = defaults.partnerRegistrationId;
    	      this.partnerTopicRoutingMode = defaults.partnerTopicRoutingMode;
    	      this.publicNetworkAccess = defaults.publicNetworkAccess;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder endpoint(String endpoint) {
            if (endpoint == null) {
              throw new MissingRequiredPropertyException("GetPartnerNamespaceResult", "endpoint");
            }
            this.endpoint = endpoint;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetPartnerNamespaceResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder inboundIpRules(List<GetPartnerNamespaceInboundIpRule> inboundIpRules) {
            if (inboundIpRules == null) {
              throw new MissingRequiredPropertyException("GetPartnerNamespaceResult", "inboundIpRules");
            }
            this.inboundIpRules = inboundIpRules;
            return this;
        }
        public Builder inboundIpRules(GetPartnerNamespaceInboundIpRule... inboundIpRules) {
            return inboundIpRules(List.of(inboundIpRules));
        }
        @CustomType.Setter
        public Builder localAuthenticationEnabled(Boolean localAuthenticationEnabled) {
            if (localAuthenticationEnabled == null) {
              throw new MissingRequiredPropertyException("GetPartnerNamespaceResult", "localAuthenticationEnabled");
            }
            this.localAuthenticationEnabled = localAuthenticationEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetPartnerNamespaceResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetPartnerNamespaceResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder partnerRegistrationId(String partnerRegistrationId) {
            if (partnerRegistrationId == null) {
              throw new MissingRequiredPropertyException("GetPartnerNamespaceResult", "partnerRegistrationId");
            }
            this.partnerRegistrationId = partnerRegistrationId;
            return this;
        }
        @CustomType.Setter
        public Builder partnerTopicRoutingMode(String partnerTopicRoutingMode) {
            if (partnerTopicRoutingMode == null) {
              throw new MissingRequiredPropertyException("GetPartnerNamespaceResult", "partnerTopicRoutingMode");
            }
            this.partnerTopicRoutingMode = partnerTopicRoutingMode;
            return this;
        }
        @CustomType.Setter
        public Builder publicNetworkAccess(String publicNetworkAccess) {
            if (publicNetworkAccess == null) {
              throw new MissingRequiredPropertyException("GetPartnerNamespaceResult", "publicNetworkAccess");
            }
            this.publicNetworkAccess = publicNetworkAccess;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            if (resourceGroupName == null) {
              throw new MissingRequiredPropertyException("GetPartnerNamespaceResult", "resourceGroupName");
            }
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetPartnerNamespaceResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public GetPartnerNamespaceResult build() {
            final var _resultValue = new GetPartnerNamespaceResult();
            _resultValue.endpoint = endpoint;
            _resultValue.id = id;
            _resultValue.inboundIpRules = inboundIpRules;
            _resultValue.localAuthenticationEnabled = localAuthenticationEnabled;
            _resultValue.location = location;
            _resultValue.name = name;
            _resultValue.partnerRegistrationId = partnerRegistrationId;
            _resultValue.partnerTopicRoutingMode = partnerTopicRoutingMode;
            _resultValue.publicNetworkAccess = publicNetworkAccess;
            _resultValue.resourceGroupName = resourceGroupName;
            _resultValue.tags = tags;
            return _resultValue;
        }
    }
}
