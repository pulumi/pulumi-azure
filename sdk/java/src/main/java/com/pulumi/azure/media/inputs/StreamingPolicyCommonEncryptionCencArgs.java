// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.media.inputs;

import com.pulumi.azure.media.inputs.StreamingPolicyCommonEncryptionCencDefaultContentKeyArgs;
import com.pulumi.azure.media.inputs.StreamingPolicyCommonEncryptionCencDrmPlayreadyArgs;
import com.pulumi.azure.media.inputs.StreamingPolicyCommonEncryptionCencEnabledProtocolsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamingPolicyCommonEncryptionCencArgs extends com.pulumi.resources.ResourceArgs {

    public static final StreamingPolicyCommonEncryptionCencArgs Empty = new StreamingPolicyCommonEncryptionCencArgs();

    /**
     * A `default_content_key` block as defined below. Changing this forces a new Streaming Policy to be created.
     * 
     */
    @Import(name="defaultContentKey")
    private @Nullable Output<StreamingPolicyCommonEncryptionCencDefaultContentKeyArgs> defaultContentKey;

    /**
     * @return A `default_content_key` block as defined below. Changing this forces a new Streaming Policy to be created.
     * 
     */
    public Optional<Output<StreamingPolicyCommonEncryptionCencDefaultContentKeyArgs>> defaultContentKey() {
        return Optional.ofNullable(this.defaultContentKey);
    }

    /**
     * A `drm_playready` block as defined below. Changing this forces a new Streaming Policy to be created.
     * 
     */
    @Import(name="drmPlayready")
    private @Nullable Output<StreamingPolicyCommonEncryptionCencDrmPlayreadyArgs> drmPlayready;

    /**
     * @return A `drm_playready` block as defined below. Changing this forces a new Streaming Policy to be created.
     * 
     */
    public Optional<Output<StreamingPolicyCommonEncryptionCencDrmPlayreadyArgs>> drmPlayready() {
        return Optional.ofNullable(this.drmPlayready);
    }

    /**
     * Template for the URL of the custom service delivering licenses to end user players. Not required when using Azure Media Services for issuing licenses. The template supports replaceable tokens that the service will update at runtime with the value specific to the request. The currently supported token values are `{AlternativeMediaId}`, which is replaced with the value of `StreamingLocatorId.AlternativeMediaId`, and `{ContentKeyId}`, which is replaced with the value of identifier of the key being requested. Changing this forces a new Streaming Policy to be created.
     * 
     */
    @Import(name="drmWidevineCustomLicenseAcquisitionUrlTemplate")
    private @Nullable Output<String> drmWidevineCustomLicenseAcquisitionUrlTemplate;

    /**
     * @return Template for the URL of the custom service delivering licenses to end user players. Not required when using Azure Media Services for issuing licenses. The template supports replaceable tokens that the service will update at runtime with the value specific to the request. The currently supported token values are `{AlternativeMediaId}`, which is replaced with the value of `StreamingLocatorId.AlternativeMediaId`, and `{ContentKeyId}`, which is replaced with the value of identifier of the key being requested. Changing this forces a new Streaming Policy to be created.
     * 
     */
    public Optional<Output<String>> drmWidevineCustomLicenseAcquisitionUrlTemplate() {
        return Optional.ofNullable(this.drmWidevineCustomLicenseAcquisitionUrlTemplate);
    }

    /**
     * A `enabled_protocols` block as defined below. Changing this forces a new Streaming Policy to be created.
     * 
     */
    @Import(name="enabledProtocols")
    private @Nullable Output<StreamingPolicyCommonEncryptionCencEnabledProtocolsArgs> enabledProtocols;

    /**
     * @return A `enabled_protocols` block as defined below. Changing this forces a new Streaming Policy to be created.
     * 
     */
    public Optional<Output<StreamingPolicyCommonEncryptionCencEnabledProtocolsArgs>> enabledProtocols() {
        return Optional.ofNullable(this.enabledProtocols);
    }

    private StreamingPolicyCommonEncryptionCencArgs() {}

    private StreamingPolicyCommonEncryptionCencArgs(StreamingPolicyCommonEncryptionCencArgs $) {
        this.defaultContentKey = $.defaultContentKey;
        this.drmPlayready = $.drmPlayready;
        this.drmWidevineCustomLicenseAcquisitionUrlTemplate = $.drmWidevineCustomLicenseAcquisitionUrlTemplate;
        this.enabledProtocols = $.enabledProtocols;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamingPolicyCommonEncryptionCencArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamingPolicyCommonEncryptionCencArgs $;

        public Builder() {
            $ = new StreamingPolicyCommonEncryptionCencArgs();
        }

        public Builder(StreamingPolicyCommonEncryptionCencArgs defaults) {
            $ = new StreamingPolicyCommonEncryptionCencArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param defaultContentKey A `default_content_key` block as defined below. Changing this forces a new Streaming Policy to be created.
         * 
         * @return builder
         * 
         */
        public Builder defaultContentKey(@Nullable Output<StreamingPolicyCommonEncryptionCencDefaultContentKeyArgs> defaultContentKey) {
            $.defaultContentKey = defaultContentKey;
            return this;
        }

        /**
         * @param defaultContentKey A `default_content_key` block as defined below. Changing this forces a new Streaming Policy to be created.
         * 
         * @return builder
         * 
         */
        public Builder defaultContentKey(StreamingPolicyCommonEncryptionCencDefaultContentKeyArgs defaultContentKey) {
            return defaultContentKey(Output.of(defaultContentKey));
        }

        /**
         * @param drmPlayready A `drm_playready` block as defined below. Changing this forces a new Streaming Policy to be created.
         * 
         * @return builder
         * 
         */
        public Builder drmPlayready(@Nullable Output<StreamingPolicyCommonEncryptionCencDrmPlayreadyArgs> drmPlayready) {
            $.drmPlayready = drmPlayready;
            return this;
        }

        /**
         * @param drmPlayready A `drm_playready` block as defined below. Changing this forces a new Streaming Policy to be created.
         * 
         * @return builder
         * 
         */
        public Builder drmPlayready(StreamingPolicyCommonEncryptionCencDrmPlayreadyArgs drmPlayready) {
            return drmPlayready(Output.of(drmPlayready));
        }

        /**
         * @param drmWidevineCustomLicenseAcquisitionUrlTemplate Template for the URL of the custom service delivering licenses to end user players. Not required when using Azure Media Services for issuing licenses. The template supports replaceable tokens that the service will update at runtime with the value specific to the request. The currently supported token values are `{AlternativeMediaId}`, which is replaced with the value of `StreamingLocatorId.AlternativeMediaId`, and `{ContentKeyId}`, which is replaced with the value of identifier of the key being requested. Changing this forces a new Streaming Policy to be created.
         * 
         * @return builder
         * 
         */
        public Builder drmWidevineCustomLicenseAcquisitionUrlTemplate(@Nullable Output<String> drmWidevineCustomLicenseAcquisitionUrlTemplate) {
            $.drmWidevineCustomLicenseAcquisitionUrlTemplate = drmWidevineCustomLicenseAcquisitionUrlTemplate;
            return this;
        }

        /**
         * @param drmWidevineCustomLicenseAcquisitionUrlTemplate Template for the URL of the custom service delivering licenses to end user players. Not required when using Azure Media Services for issuing licenses. The template supports replaceable tokens that the service will update at runtime with the value specific to the request. The currently supported token values are `{AlternativeMediaId}`, which is replaced with the value of `StreamingLocatorId.AlternativeMediaId`, and `{ContentKeyId}`, which is replaced with the value of identifier of the key being requested. Changing this forces a new Streaming Policy to be created.
         * 
         * @return builder
         * 
         */
        public Builder drmWidevineCustomLicenseAcquisitionUrlTemplate(String drmWidevineCustomLicenseAcquisitionUrlTemplate) {
            return drmWidevineCustomLicenseAcquisitionUrlTemplate(Output.of(drmWidevineCustomLicenseAcquisitionUrlTemplate));
        }

        /**
         * @param enabledProtocols A `enabled_protocols` block as defined below. Changing this forces a new Streaming Policy to be created.
         * 
         * @return builder
         * 
         */
        public Builder enabledProtocols(@Nullable Output<StreamingPolicyCommonEncryptionCencEnabledProtocolsArgs> enabledProtocols) {
            $.enabledProtocols = enabledProtocols;
            return this;
        }

        /**
         * @param enabledProtocols A `enabled_protocols` block as defined below. Changing this forces a new Streaming Policy to be created.
         * 
         * @return builder
         * 
         */
        public Builder enabledProtocols(StreamingPolicyCommonEncryptionCencEnabledProtocolsArgs enabledProtocols) {
            return enabledProtocols(Output.of(enabledProtocols));
        }

        public StreamingPolicyCommonEncryptionCencArgs build() {
            return $;
        }
    }

}
