// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.storage.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BlobInventoryPolicyRuleFilter {
    /**
     * @return A set of blob types. Possible values are `blockBlob`, `appendBlob`, and `pageBlob`. The storage account with `is_hns_enabled` is `true` doesn&#39;t support `pageBlob`.
     * 
     * &gt; **NOTE**: The `rules.*.schema_fields` for this rule has to include `BlobType` so that you can specify the `blob_types`.
     * 
     */
    private List<String> blobTypes;
    /**
     * @return A set of strings for blob prefixes to be excluded. Maximum of 10 blob prefixes.
     * 
     */
    private @Nullable List<String> excludePrefixes;
    /**
     * @return Includes blob versions in blob inventory or not? Defaults to `false`.
     * 
     * &gt; **NOTE**: The `rules.*.schema_fields` for this rule has to include `IsCurrentVersion` and `VersionId` so that you can specify the `include_blob_versions`.
     * 
     */
    private @Nullable Boolean includeBlobVersions;
    /**
     * @return Includes deleted blobs in blob inventory or not? Defaults to `false`.
     * 
     * &gt; **NOTE:** If `rules.*.scope` is `Container`, the `rules.*.schema_fields` for this rule must include `Deleted`, `Version`, `DeletedTime`, and `RemainingRetentionDays` so that you can specify the `include_deleted`. If `rules.*.scope` is `Blob`, the `rules.*.schema_fields` must include `Deleted` and `RemainingRetentionDays` so that you can specify the `include_deleted`. If `rules.*.scope` is `Blob` and the storage account specified by `storage_account_id` has hierarchical namespaces enabled (`is_hns_enabled` is `true` on the storage account), the `rules.*.schema_fields` for this rule must include `Deleted`, `Version`, `DeletedTime`, and `RemainingRetentionDays` so that you can specify the `include_deleted`.
     * 
     */
    private @Nullable Boolean includeDeleted;
    /**
     * @return Includes blob snapshots in blob inventory or not? Defaults to `false`.
     * 
     * &gt; **NOTE**: The `rules.*.schema_fields` for this rule has to include `Snapshot` so that you can specify the `include_snapshots`.
     * 
     */
    private @Nullable Boolean includeSnapshots;
    /**
     * @return A set of strings for blob prefixes to be matched. Maximum of 10 blob prefixes.
     * 
     */
    private @Nullable List<String> prefixMatches;

    private BlobInventoryPolicyRuleFilter() {}
    /**
     * @return A set of blob types. Possible values are `blockBlob`, `appendBlob`, and `pageBlob`. The storage account with `is_hns_enabled` is `true` doesn&#39;t support `pageBlob`.
     * 
     * &gt; **NOTE**: The `rules.*.schema_fields` for this rule has to include `BlobType` so that you can specify the `blob_types`.
     * 
     */
    public List<String> blobTypes() {
        return this.blobTypes;
    }
    /**
     * @return A set of strings for blob prefixes to be excluded. Maximum of 10 blob prefixes.
     * 
     */
    public List<String> excludePrefixes() {
        return this.excludePrefixes == null ? List.of() : this.excludePrefixes;
    }
    /**
     * @return Includes blob versions in blob inventory or not? Defaults to `false`.
     * 
     * &gt; **NOTE**: The `rules.*.schema_fields` for this rule has to include `IsCurrentVersion` and `VersionId` so that you can specify the `include_blob_versions`.
     * 
     */
    public Optional<Boolean> includeBlobVersions() {
        return Optional.ofNullable(this.includeBlobVersions);
    }
    /**
     * @return Includes deleted blobs in blob inventory or not? Defaults to `false`.
     * 
     * &gt; **NOTE:** If `rules.*.scope` is `Container`, the `rules.*.schema_fields` for this rule must include `Deleted`, `Version`, `DeletedTime`, and `RemainingRetentionDays` so that you can specify the `include_deleted`. If `rules.*.scope` is `Blob`, the `rules.*.schema_fields` must include `Deleted` and `RemainingRetentionDays` so that you can specify the `include_deleted`. If `rules.*.scope` is `Blob` and the storage account specified by `storage_account_id` has hierarchical namespaces enabled (`is_hns_enabled` is `true` on the storage account), the `rules.*.schema_fields` for this rule must include `Deleted`, `Version`, `DeletedTime`, and `RemainingRetentionDays` so that you can specify the `include_deleted`.
     * 
     */
    public Optional<Boolean> includeDeleted() {
        return Optional.ofNullable(this.includeDeleted);
    }
    /**
     * @return Includes blob snapshots in blob inventory or not? Defaults to `false`.
     * 
     * &gt; **NOTE**: The `rules.*.schema_fields` for this rule has to include `Snapshot` so that you can specify the `include_snapshots`.
     * 
     */
    public Optional<Boolean> includeSnapshots() {
        return Optional.ofNullable(this.includeSnapshots);
    }
    /**
     * @return A set of strings for blob prefixes to be matched. Maximum of 10 blob prefixes.
     * 
     */
    public List<String> prefixMatches() {
        return this.prefixMatches == null ? List.of() : this.prefixMatches;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BlobInventoryPolicyRuleFilter defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> blobTypes;
        private @Nullable List<String> excludePrefixes;
        private @Nullable Boolean includeBlobVersions;
        private @Nullable Boolean includeDeleted;
        private @Nullable Boolean includeSnapshots;
        private @Nullable List<String> prefixMatches;
        public Builder() {}
        public Builder(BlobInventoryPolicyRuleFilter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.blobTypes = defaults.blobTypes;
    	      this.excludePrefixes = defaults.excludePrefixes;
    	      this.includeBlobVersions = defaults.includeBlobVersions;
    	      this.includeDeleted = defaults.includeDeleted;
    	      this.includeSnapshots = defaults.includeSnapshots;
    	      this.prefixMatches = defaults.prefixMatches;
        }

        @CustomType.Setter
        public Builder blobTypes(List<String> blobTypes) {
            if (blobTypes == null) {
              throw new MissingRequiredPropertyException("BlobInventoryPolicyRuleFilter", "blobTypes");
            }
            this.blobTypes = blobTypes;
            return this;
        }
        public Builder blobTypes(String... blobTypes) {
            return blobTypes(List.of(blobTypes));
        }
        @CustomType.Setter
        public Builder excludePrefixes(@Nullable List<String> excludePrefixes) {

            this.excludePrefixes = excludePrefixes;
            return this;
        }
        public Builder excludePrefixes(String... excludePrefixes) {
            return excludePrefixes(List.of(excludePrefixes));
        }
        @CustomType.Setter
        public Builder includeBlobVersions(@Nullable Boolean includeBlobVersions) {

            this.includeBlobVersions = includeBlobVersions;
            return this;
        }
        @CustomType.Setter
        public Builder includeDeleted(@Nullable Boolean includeDeleted) {

            this.includeDeleted = includeDeleted;
            return this;
        }
        @CustomType.Setter
        public Builder includeSnapshots(@Nullable Boolean includeSnapshots) {

            this.includeSnapshots = includeSnapshots;
            return this;
        }
        @CustomType.Setter
        public Builder prefixMatches(@Nullable List<String> prefixMatches) {

            this.prefixMatches = prefixMatches;
            return this;
        }
        public Builder prefixMatches(String... prefixMatches) {
            return prefixMatches(List.of(prefixMatches));
        }
        public BlobInventoryPolicyRuleFilter build() {
            final var _resultValue = new BlobInventoryPolicyRuleFilter();
            _resultValue.blobTypes = blobTypes;
            _resultValue.excludePrefixes = excludePrefixes;
            _resultValue.includeBlobVersions = includeBlobVersions;
            _resultValue.includeDeleted = includeDeleted;
            _resultValue.includeSnapshots = includeSnapshots;
            _resultValue.prefixMatches = prefixMatches;
            return _resultValue;
        }
    }
}
