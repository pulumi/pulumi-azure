// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appservice.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CertificateBindingState extends com.pulumi.resources.ResourceArgs {

    public static final CertificateBindingState Empty = new CertificateBindingState();

    /**
     * The name of the App Service to which the certificate was bound.
     * 
     */
    @Import(name="appServiceName")
    private @Nullable Output<String> appServiceName;

    /**
     * @return The name of the App Service to which the certificate was bound.
     * 
     */
    public Optional<Output<String>> appServiceName() {
        return Optional.ofNullable(this.appServiceName);
    }

    /**
     * The ID of the certificate to bind to the custom domain. Changing this forces a new App Service Certificate Binding to be created.
     * 
     */
    @Import(name="certificateId")
    private @Nullable Output<String> certificateId;

    /**
     * @return The ID of the certificate to bind to the custom domain. Changing this forces a new App Service Certificate Binding to be created.
     * 
     */
    public Optional<Output<String>> certificateId() {
        return Optional.ofNullable(this.certificateId);
    }

    /**
     * The hostname of the bound certificate.
     * 
     */
    @Import(name="hostname")
    private @Nullable Output<String> hostname;

    /**
     * @return The hostname of the bound certificate.
     * 
     */
    public Optional<Output<String>> hostname() {
        return Optional.ofNullable(this.hostname);
    }

    /**
     * The ID of the Custom Domain/Hostname Binding. Changing this forces a new App Service Certificate Binding to be created.
     * 
     */
    @Import(name="hostnameBindingId")
    private @Nullable Output<String> hostnameBindingId;

    /**
     * @return The ID of the Custom Domain/Hostname Binding. Changing this forces a new App Service Certificate Binding to be created.
     * 
     */
    public Optional<Output<String>> hostnameBindingId() {
        return Optional.ofNullable(this.hostnameBindingId);
    }

    /**
     * The type of certificate binding. Allowed values are `IpBasedEnabled` or `SniEnabled`. Changing this forces a new App Service Certificate Binding to be created.
     * 
     */
    @Import(name="sslState")
    private @Nullable Output<String> sslState;

    /**
     * @return The type of certificate binding. Allowed values are `IpBasedEnabled` or `SniEnabled`. Changing this forces a new App Service Certificate Binding to be created.
     * 
     */
    public Optional<Output<String>> sslState() {
        return Optional.ofNullable(this.sslState);
    }

    /**
     * The certificate thumbprint.
     * 
     */
    @Import(name="thumbprint")
    private @Nullable Output<String> thumbprint;

    /**
     * @return The certificate thumbprint.
     * 
     */
    public Optional<Output<String>> thumbprint() {
        return Optional.ofNullable(this.thumbprint);
    }

    private CertificateBindingState() {}

    private CertificateBindingState(CertificateBindingState $) {
        this.appServiceName = $.appServiceName;
        this.certificateId = $.certificateId;
        this.hostname = $.hostname;
        this.hostnameBindingId = $.hostnameBindingId;
        this.sslState = $.sslState;
        this.thumbprint = $.thumbprint;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertificateBindingState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertificateBindingState $;

        public Builder() {
            $ = new CertificateBindingState();
        }

        public Builder(CertificateBindingState defaults) {
            $ = new CertificateBindingState(Objects.requireNonNull(defaults));
        }

        /**
         * @param appServiceName The name of the App Service to which the certificate was bound.
         * 
         * @return builder
         * 
         */
        public Builder appServiceName(@Nullable Output<String> appServiceName) {
            $.appServiceName = appServiceName;
            return this;
        }

        /**
         * @param appServiceName The name of the App Service to which the certificate was bound.
         * 
         * @return builder
         * 
         */
        public Builder appServiceName(String appServiceName) {
            return appServiceName(Output.of(appServiceName));
        }

        /**
         * @param certificateId The ID of the certificate to bind to the custom domain. Changing this forces a new App Service Certificate Binding to be created.
         * 
         * @return builder
         * 
         */
        public Builder certificateId(@Nullable Output<String> certificateId) {
            $.certificateId = certificateId;
            return this;
        }

        /**
         * @param certificateId The ID of the certificate to bind to the custom domain. Changing this forces a new App Service Certificate Binding to be created.
         * 
         * @return builder
         * 
         */
        public Builder certificateId(String certificateId) {
            return certificateId(Output.of(certificateId));
        }

        /**
         * @param hostname The hostname of the bound certificate.
         * 
         * @return builder
         * 
         */
        public Builder hostname(@Nullable Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname The hostname of the bound certificate.
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        /**
         * @param hostnameBindingId The ID of the Custom Domain/Hostname Binding. Changing this forces a new App Service Certificate Binding to be created.
         * 
         * @return builder
         * 
         */
        public Builder hostnameBindingId(@Nullable Output<String> hostnameBindingId) {
            $.hostnameBindingId = hostnameBindingId;
            return this;
        }

        /**
         * @param hostnameBindingId The ID of the Custom Domain/Hostname Binding. Changing this forces a new App Service Certificate Binding to be created.
         * 
         * @return builder
         * 
         */
        public Builder hostnameBindingId(String hostnameBindingId) {
            return hostnameBindingId(Output.of(hostnameBindingId));
        }

        /**
         * @param sslState The type of certificate binding. Allowed values are `IpBasedEnabled` or `SniEnabled`. Changing this forces a new App Service Certificate Binding to be created.
         * 
         * @return builder
         * 
         */
        public Builder sslState(@Nullable Output<String> sslState) {
            $.sslState = sslState;
            return this;
        }

        /**
         * @param sslState The type of certificate binding. Allowed values are `IpBasedEnabled` or `SniEnabled`. Changing this forces a new App Service Certificate Binding to be created.
         * 
         * @return builder
         * 
         */
        public Builder sslState(String sslState) {
            return sslState(Output.of(sslState));
        }

        /**
         * @param thumbprint The certificate thumbprint.
         * 
         * @return builder
         * 
         */
        public Builder thumbprint(@Nullable Output<String> thumbprint) {
            $.thumbprint = thumbprint;
            return this;
        }

        /**
         * @param thumbprint The certificate thumbprint.
         * 
         * @return builder
         * 
         */
        public Builder thumbprint(String thumbprint) {
            return thumbprint(Output.of(thumbprint));
        }

        public CertificateBindingState build() {
            return $;
        }
    }

}
