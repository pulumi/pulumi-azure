// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplicationGatewaySslCertificateArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationGatewaySslCertificateArgs Empty = new ApplicationGatewaySslCertificateArgs();

    /**
     * The base64-encoded PFX certificate data. Required if `key_vault_secret_id` is not set.
     * 
     * &gt; **NOTE:** When specifying a file, use `data = filebase64(&#34;path/to/file&#34;)` to encode the contents of that file.
     * 
     */
    @Import(name="data")
    private @Nullable Output<String> data;

    /**
     * @return The base64-encoded PFX certificate data. Required if `key_vault_secret_id` is not set.
     * 
     * &gt; **NOTE:** When specifying a file, use `data = filebase64(&#34;path/to/file&#34;)` to encode the contents of that file.
     * 
     */
    public Optional<Output<String>> data() {
        return Optional.ofNullable(this.data);
    }

    /**
     * The ID of the Rewrite Rule Set
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return The ID of the Rewrite Rule Set
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The Secret ID of (base-64 encoded unencrypted pfx) the `Secret` or `Certificate` object stored in Azure KeyVault. You need to enable soft delete for Key Vault to use this feature. Required if `data` is not set.
     * 
     * &gt; **NOTE:** TLS termination with Key Vault certificates is limited to the [v2 SKUs](https://docs.microsoft.com/azure/application-gateway/key-vault-certs).
     * 
     * &gt; **NOTE:** For TLS termination with Key Vault certificates to work properly existing user-assigned managed identity, which Application Gateway uses to retrieve certificates from Key Vault, should be defined via `identity` block. Additionally, access policies in the Key Vault to allow the identity to be granted *get* access to the secret should be defined.
     * 
     */
    @Import(name="keyVaultSecretId")
    private @Nullable Output<String> keyVaultSecretId;

    /**
     * @return The Secret ID of (base-64 encoded unencrypted pfx) the `Secret` or `Certificate` object stored in Azure KeyVault. You need to enable soft delete for Key Vault to use this feature. Required if `data` is not set.
     * 
     * &gt; **NOTE:** TLS termination with Key Vault certificates is limited to the [v2 SKUs](https://docs.microsoft.com/azure/application-gateway/key-vault-certs).
     * 
     * &gt; **NOTE:** For TLS termination with Key Vault certificates to work properly existing user-assigned managed identity, which Application Gateway uses to retrieve certificates from Key Vault, should be defined via `identity` block. Additionally, access policies in the Key Vault to allow the identity to be granted *get* access to the secret should be defined.
     * 
     */
    public Optional<Output<String>> keyVaultSecretId() {
        return Optional.ofNullable(this.keyVaultSecretId);
    }

    /**
     * The Name of the SSL certificate that is unique within this Application Gateway
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The Name of the SSL certificate that is unique within this Application Gateway
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Password for the pfx file specified in data. Required if `data` is set.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return Password for the pfx file specified in data. Required if `data` is set.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * The Public Certificate Data associated with the SSL Certificate.
     * 
     */
    @Import(name="publicCertData")
    private @Nullable Output<String> publicCertData;

    /**
     * @return The Public Certificate Data associated with the SSL Certificate.
     * 
     */
    public Optional<Output<String>> publicCertData() {
        return Optional.ofNullable(this.publicCertData);
    }

    private ApplicationGatewaySslCertificateArgs() {}

    private ApplicationGatewaySslCertificateArgs(ApplicationGatewaySslCertificateArgs $) {
        this.data = $.data;
        this.id = $.id;
        this.keyVaultSecretId = $.keyVaultSecretId;
        this.name = $.name;
        this.password = $.password;
        this.publicCertData = $.publicCertData;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationGatewaySslCertificateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationGatewaySslCertificateArgs $;

        public Builder() {
            $ = new ApplicationGatewaySslCertificateArgs();
        }

        public Builder(ApplicationGatewaySslCertificateArgs defaults) {
            $ = new ApplicationGatewaySslCertificateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param data The base64-encoded PFX certificate data. Required if `key_vault_secret_id` is not set.
         * 
         * &gt; **NOTE:** When specifying a file, use `data = filebase64(&#34;path/to/file&#34;)` to encode the contents of that file.
         * 
         * @return builder
         * 
         */
        public Builder data(@Nullable Output<String> data) {
            $.data = data;
            return this;
        }

        /**
         * @param data The base64-encoded PFX certificate data. Required if `key_vault_secret_id` is not set.
         * 
         * &gt; **NOTE:** When specifying a file, use `data = filebase64(&#34;path/to/file&#34;)` to encode the contents of that file.
         * 
         * @return builder
         * 
         */
        public Builder data(String data) {
            return data(Output.of(data));
        }

        /**
         * @param id The ID of the Rewrite Rule Set
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The ID of the Rewrite Rule Set
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param keyVaultSecretId The Secret ID of (base-64 encoded unencrypted pfx) the `Secret` or `Certificate` object stored in Azure KeyVault. You need to enable soft delete for Key Vault to use this feature. Required if `data` is not set.
         * 
         * &gt; **NOTE:** TLS termination with Key Vault certificates is limited to the [v2 SKUs](https://docs.microsoft.com/azure/application-gateway/key-vault-certs).
         * 
         * &gt; **NOTE:** For TLS termination with Key Vault certificates to work properly existing user-assigned managed identity, which Application Gateway uses to retrieve certificates from Key Vault, should be defined via `identity` block. Additionally, access policies in the Key Vault to allow the identity to be granted *get* access to the secret should be defined.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultSecretId(@Nullable Output<String> keyVaultSecretId) {
            $.keyVaultSecretId = keyVaultSecretId;
            return this;
        }

        /**
         * @param keyVaultSecretId The Secret ID of (base-64 encoded unencrypted pfx) the `Secret` or `Certificate` object stored in Azure KeyVault. You need to enable soft delete for Key Vault to use this feature. Required if `data` is not set.
         * 
         * &gt; **NOTE:** TLS termination with Key Vault certificates is limited to the [v2 SKUs](https://docs.microsoft.com/azure/application-gateway/key-vault-certs).
         * 
         * &gt; **NOTE:** For TLS termination with Key Vault certificates to work properly existing user-assigned managed identity, which Application Gateway uses to retrieve certificates from Key Vault, should be defined via `identity` block. Additionally, access policies in the Key Vault to allow the identity to be granted *get* access to the secret should be defined.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultSecretId(String keyVaultSecretId) {
            return keyVaultSecretId(Output.of(keyVaultSecretId));
        }

        /**
         * @param name The Name of the SSL certificate that is unique within this Application Gateway
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The Name of the SSL certificate that is unique within this Application Gateway
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param password Password for the pfx file specified in data. Required if `data` is set.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password Password for the pfx file specified in data. Required if `data` is set.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param publicCertData The Public Certificate Data associated with the SSL Certificate.
         * 
         * @return builder
         * 
         */
        public Builder publicCertData(@Nullable Output<String> publicCertData) {
            $.publicCertData = publicCertData;
            return this;
        }

        /**
         * @param publicCertData The Public Certificate Data associated with the SSL Certificate.
         * 
         * @return builder
         * 
         */
        public Builder publicCertData(String publicCertData) {
            return publicCertData(Output.of(publicCertData));
        }

        public ApplicationGatewaySslCertificateArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ApplicationGatewaySslCertificateArgs", "name");
            }
            return $;
        }
    }

}
