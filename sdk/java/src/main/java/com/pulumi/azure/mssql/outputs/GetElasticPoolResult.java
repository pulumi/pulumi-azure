// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.mssql.outputs;

import com.pulumi.azure.mssql.outputs.GetElasticPoolSkus;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetElasticPoolResult {
    /**
     * @return The type of enclave being used by the elastic pool.
     * 
     */
    private String enclaveType;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The license type to apply for this elastic pool.
     * 
     */
    private String licenseType;
    /**
     * @return Specifies the supported Azure location where the resource exists.
     * 
     */
    private String location;
    /**
     * @return The max data size of the elastic pool in bytes.
     * 
     */
    private Integer maxSizeBytes;
    /**
     * @return The max data size of the elastic pool in gigabytes.
     * 
     */
    private Double maxSizeGb;
    /**
     * @return Specifies the SKU Name for this Elasticpool.
     * 
     */
    private String name;
    /**
     * @return The maximum capacity any one database can consume.
     * 
     */
    private Integer perDbMaxCapacity;
    /**
     * @return The minimum capacity all databases are guaranteed.
     * 
     */
    private Integer perDbMinCapacity;
    private String resourceGroupName;
    private String serverName;
    /**
     * @return A `sku` block as defined below.
     * 
     */
    private List<GetElasticPoolSkus> skus;
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return Whether or not this elastic pool is zone redundant.
     * 
     */
    private Boolean zoneRedundant;

    private GetElasticPoolResult() {}
    /**
     * @return The type of enclave being used by the elastic pool.
     * 
     */
    public String enclaveType() {
        return this.enclaveType;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The license type to apply for this elastic pool.
     * 
     */
    public String licenseType() {
        return this.licenseType;
    }
    /**
     * @return Specifies the supported Azure location where the resource exists.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return The max data size of the elastic pool in bytes.
     * 
     */
    public Integer maxSizeBytes() {
        return this.maxSizeBytes;
    }
    /**
     * @return The max data size of the elastic pool in gigabytes.
     * 
     */
    public Double maxSizeGb() {
        return this.maxSizeGb;
    }
    /**
     * @return Specifies the SKU Name for this Elasticpool.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The maximum capacity any one database can consume.
     * 
     */
    public Integer perDbMaxCapacity() {
        return this.perDbMaxCapacity;
    }
    /**
     * @return The minimum capacity all databases are guaranteed.
     * 
     */
    public Integer perDbMinCapacity() {
        return this.perDbMinCapacity;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    public String serverName() {
        return this.serverName;
    }
    /**
     * @return A `sku` block as defined below.
     * 
     */
    public List<GetElasticPoolSkus> skus() {
        return this.skus;
    }
    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return Whether or not this elastic pool is zone redundant.
     * 
     */
    public Boolean zoneRedundant() {
        return this.zoneRedundant;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetElasticPoolResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String enclaveType;
        private String id;
        private String licenseType;
        private String location;
        private Integer maxSizeBytes;
        private Double maxSizeGb;
        private String name;
        private Integer perDbMaxCapacity;
        private Integer perDbMinCapacity;
        private String resourceGroupName;
        private String serverName;
        private List<GetElasticPoolSkus> skus;
        private Map<String,String> tags;
        private Boolean zoneRedundant;
        public Builder() {}
        public Builder(GetElasticPoolResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enclaveType = defaults.enclaveType;
    	      this.id = defaults.id;
    	      this.licenseType = defaults.licenseType;
    	      this.location = defaults.location;
    	      this.maxSizeBytes = defaults.maxSizeBytes;
    	      this.maxSizeGb = defaults.maxSizeGb;
    	      this.name = defaults.name;
    	      this.perDbMaxCapacity = defaults.perDbMaxCapacity;
    	      this.perDbMinCapacity = defaults.perDbMinCapacity;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.serverName = defaults.serverName;
    	      this.skus = defaults.skus;
    	      this.tags = defaults.tags;
    	      this.zoneRedundant = defaults.zoneRedundant;
        }

        @CustomType.Setter
        public Builder enclaveType(String enclaveType) {
            this.enclaveType = Objects.requireNonNull(enclaveType);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder licenseType(String licenseType) {
            this.licenseType = Objects.requireNonNull(licenseType);
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder maxSizeBytes(Integer maxSizeBytes) {
            this.maxSizeBytes = Objects.requireNonNull(maxSizeBytes);
            return this;
        }
        @CustomType.Setter
        public Builder maxSizeGb(Double maxSizeGb) {
            this.maxSizeGb = Objects.requireNonNull(maxSizeGb);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder perDbMaxCapacity(Integer perDbMaxCapacity) {
            this.perDbMaxCapacity = Objects.requireNonNull(perDbMaxCapacity);
            return this;
        }
        @CustomType.Setter
        public Builder perDbMinCapacity(Integer perDbMinCapacity) {
            this.perDbMinCapacity = Objects.requireNonNull(perDbMinCapacity);
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        @CustomType.Setter
        public Builder serverName(String serverName) {
            this.serverName = Objects.requireNonNull(serverName);
            return this;
        }
        @CustomType.Setter
        public Builder skus(List<GetElasticPoolSkus> skus) {
            this.skus = Objects.requireNonNull(skus);
            return this;
        }
        public Builder skus(GetElasticPoolSkus... skus) {
            return skus(List.of(skus));
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        @CustomType.Setter
        public Builder zoneRedundant(Boolean zoneRedundant) {
            this.zoneRedundant = Objects.requireNonNull(zoneRedundant);
            return this;
        }
        public GetElasticPoolResult build() {
            final var _resultValue = new GetElasticPoolResult();
            _resultValue.enclaveType = enclaveType;
            _resultValue.id = id;
            _resultValue.licenseType = licenseType;
            _resultValue.location = location;
            _resultValue.maxSizeBytes = maxSizeBytes;
            _resultValue.maxSizeGb = maxSizeGb;
            _resultValue.name = name;
            _resultValue.perDbMaxCapacity = perDbMaxCapacity;
            _resultValue.perDbMinCapacity = perDbMinCapacity;
            _resultValue.resourceGroupName = resourceGroupName;
            _resultValue.serverName = serverName;
            _resultValue.skus = skus;
            _resultValue.tags = tags;
            _resultValue.zoneRedundant = zoneRedundant;
            return _resultValue;
        }
    }
}
