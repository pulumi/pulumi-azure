// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network;

import com.pulumi.azure.network.inputs.VnpGatewayNatRuleExternalMappingArgs;
import com.pulumi.azure.network.inputs.VnpGatewayNatRuleInternalMappingArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VnpGatewayNatRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final VnpGatewayNatRuleArgs Empty = new VnpGatewayNatRuleArgs();

    /**
     * One of more `externalMapping` blocks as defined below.
     * 
     */
    @Import(name="externalMappings")
    private @Nullable Output<List<VnpGatewayNatRuleExternalMappingArgs>> externalMappings;

    /**
     * @return One of more `externalMapping` blocks as defined below.
     * 
     */
    public Optional<Output<List<VnpGatewayNatRuleExternalMappingArgs>>> externalMappings() {
        return Optional.ofNullable(this.externalMappings);
    }

    /**
     * One of more `internalMapping` blocks as defined below.
     * 
     */
    @Import(name="internalMappings")
    private @Nullable Output<List<VnpGatewayNatRuleInternalMappingArgs>> internalMappings;

    /**
     * @return One of more `internalMapping` blocks as defined below.
     * 
     */
    public Optional<Output<List<VnpGatewayNatRuleInternalMappingArgs>>> internalMappings() {
        return Optional.ofNullable(this.internalMappings);
    }

    /**
     * The ID of the IP Configuration this VPN Gateway NAT Rule applies to. Possible values are `Instance0` and `Instance1`.
     * 
     */
    @Import(name="ipConfigurationId")
    private @Nullable Output<String> ipConfigurationId;

    /**
     * @return The ID of the IP Configuration this VPN Gateway NAT Rule applies to. Possible values are `Instance0` and `Instance1`.
     * 
     */
    public Optional<Output<String>> ipConfigurationId() {
        return Optional.ofNullable(this.ipConfigurationId);
    }

    /**
     * The source NAT direction of the VPN NAT. Possible values are `EgressSnat` and `IngressSnat`. Defaults to `EgressSnat`. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return The source NAT direction of the VPN NAT. Possible values are `EgressSnat` and `IngressSnat`. Defaults to `EgressSnat`. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * The name which should be used for this VPN Gateway NAT Rule. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name which should be used for this VPN Gateway NAT Rule. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The type of the VPN Gateway NAT Rule. Possible values are `Dynamic` and `Static`. Defaults to `Static`. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of the VPN Gateway NAT Rule. Possible values are `Dynamic` and `Static`. Defaults to `Static`. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * The ID of the VPN Gateway that this VPN Gateway NAT Rule belongs to. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="vpnGatewayId", required=true)
    private Output<String> vpnGatewayId;

    /**
     * @return The ID of the VPN Gateway that this VPN Gateway NAT Rule belongs to. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> vpnGatewayId() {
        return this.vpnGatewayId;
    }

    private VnpGatewayNatRuleArgs() {}

    private VnpGatewayNatRuleArgs(VnpGatewayNatRuleArgs $) {
        this.externalMappings = $.externalMappings;
        this.internalMappings = $.internalMappings;
        this.ipConfigurationId = $.ipConfigurationId;
        this.mode = $.mode;
        this.name = $.name;
        this.type = $.type;
        this.vpnGatewayId = $.vpnGatewayId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VnpGatewayNatRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VnpGatewayNatRuleArgs $;

        public Builder() {
            $ = new VnpGatewayNatRuleArgs();
        }

        public Builder(VnpGatewayNatRuleArgs defaults) {
            $ = new VnpGatewayNatRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param externalMappings One of more `externalMapping` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder externalMappings(@Nullable Output<List<VnpGatewayNatRuleExternalMappingArgs>> externalMappings) {
            $.externalMappings = externalMappings;
            return this;
        }

        /**
         * @param externalMappings One of more `externalMapping` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder externalMappings(List<VnpGatewayNatRuleExternalMappingArgs> externalMappings) {
            return externalMappings(Output.of(externalMappings));
        }

        /**
         * @param externalMappings One of more `externalMapping` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder externalMappings(VnpGatewayNatRuleExternalMappingArgs... externalMappings) {
            return externalMappings(List.of(externalMappings));
        }

        /**
         * @param internalMappings One of more `internalMapping` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder internalMappings(@Nullable Output<List<VnpGatewayNatRuleInternalMappingArgs>> internalMappings) {
            $.internalMappings = internalMappings;
            return this;
        }

        /**
         * @param internalMappings One of more `internalMapping` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder internalMappings(List<VnpGatewayNatRuleInternalMappingArgs> internalMappings) {
            return internalMappings(Output.of(internalMappings));
        }

        /**
         * @param internalMappings One of more `internalMapping` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder internalMappings(VnpGatewayNatRuleInternalMappingArgs... internalMappings) {
            return internalMappings(List.of(internalMappings));
        }

        /**
         * @param ipConfigurationId The ID of the IP Configuration this VPN Gateway NAT Rule applies to. Possible values are `Instance0` and `Instance1`.
         * 
         * @return builder
         * 
         */
        public Builder ipConfigurationId(@Nullable Output<String> ipConfigurationId) {
            $.ipConfigurationId = ipConfigurationId;
            return this;
        }

        /**
         * @param ipConfigurationId The ID of the IP Configuration this VPN Gateway NAT Rule applies to. Possible values are `Instance0` and `Instance1`.
         * 
         * @return builder
         * 
         */
        public Builder ipConfigurationId(String ipConfigurationId) {
            return ipConfigurationId(Output.of(ipConfigurationId));
        }

        /**
         * @param mode The source NAT direction of the VPN NAT. Possible values are `EgressSnat` and `IngressSnat`. Defaults to `EgressSnat`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode The source NAT direction of the VPN NAT. Possible values are `EgressSnat` and `IngressSnat`. Defaults to `EgressSnat`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param name The name which should be used for this VPN Gateway NAT Rule. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this VPN Gateway NAT Rule. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param type The type of the VPN Gateway NAT Rule. Possible values are `Dynamic` and `Static`. Defaults to `Static`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the VPN Gateway NAT Rule. Possible values are `Dynamic` and `Static`. Defaults to `Static`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param vpnGatewayId The ID of the VPN Gateway that this VPN Gateway NAT Rule belongs to. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder vpnGatewayId(Output<String> vpnGatewayId) {
            $.vpnGatewayId = vpnGatewayId;
            return this;
        }

        /**
         * @param vpnGatewayId The ID of the VPN Gateway that this VPN Gateway NAT Rule belongs to. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder vpnGatewayId(String vpnGatewayId) {
            return vpnGatewayId(Output.of(vpnGatewayId));
        }

        public VnpGatewayNatRuleArgs build() {
            if ($.vpnGatewayId == null) {
                throw new MissingRequiredPropertyException("VnpGatewayNatRuleArgs", "vpnGatewayId");
            }
            return $;
        }
    }

}
