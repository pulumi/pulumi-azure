// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.compute.outputs;

import com.pulumi.azure.compute.outputs.GetManagedDiskEncryptionSetting;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetManagedDiskResult {
    private String createOption;
    /**
     * @return The ID of the disk access resource for using private endpoints on disks.
     * 
     */
    private String diskAccessId;
    /**
     * @return The ID of the Disk Encryption Set used to encrypt this Managed Disk.
     * 
     */
    private String diskEncryptionSetId;
    /**
     * @return The number of IOPS allowed for this disk, where one operation can transfer between 4k and 256k bytes.
     * 
     */
    private Integer diskIopsReadWrite;
    /**
     * @return The bandwidth allowed for this disk.
     * 
     */
    private Integer diskMbpsReadWrite;
    /**
     * @return The size of the Managed Disk in gigabytes.
     * 
     */
    private Integer diskSizeGb;
    /**
     * @return A `encryption_settings` block as defined below.
     * 
     */
    private List<GetManagedDiskEncryptionSetting> encryptionSettings;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The ID of the source image used for creating this Managed Disk.
     * 
     */
    private String imageReferenceId;
    private String name;
    /**
     * @return Policy for accessing the disk via network.
     * 
     */
    private String networkAccessPolicy;
    /**
     * @return The operating system used for this Managed Disk.
     * 
     */
    private String osType;
    private String resourceGroupName;
    /**
     * @return The ID of an existing Managed Disk which this Disk was created from.
     * 
     */
    private String sourceResourceId;
    /**
     * @return The Source URI for this Managed Disk.
     * 
     */
    private String sourceUri;
    /**
     * @return The ID of the Storage Account where the `source_uri` is located.
     * 
     */
    private String storageAccountId;
    /**
     * @return The storage account type for the Managed Disk.
     * 
     */
    private String storageAccountType;
    /**
     * @return A mapping of tags assigned to the resource.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return A list of Availability Zones where the Managed Disk exists.
     * 
     */
    private List<String> zones;

    private GetManagedDiskResult() {}
    public String createOption() {
        return this.createOption;
    }
    /**
     * @return The ID of the disk access resource for using private endpoints on disks.
     * 
     */
    public String diskAccessId() {
        return this.diskAccessId;
    }
    /**
     * @return The ID of the Disk Encryption Set used to encrypt this Managed Disk.
     * 
     */
    public String diskEncryptionSetId() {
        return this.diskEncryptionSetId;
    }
    /**
     * @return The number of IOPS allowed for this disk, where one operation can transfer between 4k and 256k bytes.
     * 
     */
    public Integer diskIopsReadWrite() {
        return this.diskIopsReadWrite;
    }
    /**
     * @return The bandwidth allowed for this disk.
     * 
     */
    public Integer diskMbpsReadWrite() {
        return this.diskMbpsReadWrite;
    }
    /**
     * @return The size of the Managed Disk in gigabytes.
     * 
     */
    public Integer diskSizeGb() {
        return this.diskSizeGb;
    }
    /**
     * @return A `encryption_settings` block as defined below.
     * 
     */
    public List<GetManagedDiskEncryptionSetting> encryptionSettings() {
        return this.encryptionSettings;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The ID of the source image used for creating this Managed Disk.
     * 
     */
    public String imageReferenceId() {
        return this.imageReferenceId;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return Policy for accessing the disk via network.
     * 
     */
    public String networkAccessPolicy() {
        return this.networkAccessPolicy;
    }
    /**
     * @return The operating system used for this Managed Disk.
     * 
     */
    public String osType() {
        return this.osType;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return The ID of an existing Managed Disk which this Disk was created from.
     * 
     */
    public String sourceResourceId() {
        return this.sourceResourceId;
    }
    /**
     * @return The Source URI for this Managed Disk.
     * 
     */
    public String sourceUri() {
        return this.sourceUri;
    }
    /**
     * @return The ID of the Storage Account where the `source_uri` is located.
     * 
     */
    public String storageAccountId() {
        return this.storageAccountId;
    }
    /**
     * @return The storage account type for the Managed Disk.
     * 
     */
    public String storageAccountType() {
        return this.storageAccountType;
    }
    /**
     * @return A mapping of tags assigned to the resource.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return A list of Availability Zones where the Managed Disk exists.
     * 
     */
    public List<String> zones() {
        return this.zones;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedDiskResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createOption;
        private String diskAccessId;
        private String diskEncryptionSetId;
        private Integer diskIopsReadWrite;
        private Integer diskMbpsReadWrite;
        private Integer diskSizeGb;
        private List<GetManagedDiskEncryptionSetting> encryptionSettings;
        private String id;
        private String imageReferenceId;
        private String name;
        private String networkAccessPolicy;
        private String osType;
        private String resourceGroupName;
        private String sourceResourceId;
        private String sourceUri;
        private String storageAccountId;
        private String storageAccountType;
        private Map<String,String> tags;
        private List<String> zones;
        public Builder() {}
        public Builder(GetManagedDiskResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createOption = defaults.createOption;
    	      this.diskAccessId = defaults.diskAccessId;
    	      this.diskEncryptionSetId = defaults.diskEncryptionSetId;
    	      this.diskIopsReadWrite = defaults.diskIopsReadWrite;
    	      this.diskMbpsReadWrite = defaults.diskMbpsReadWrite;
    	      this.diskSizeGb = defaults.diskSizeGb;
    	      this.encryptionSettings = defaults.encryptionSettings;
    	      this.id = defaults.id;
    	      this.imageReferenceId = defaults.imageReferenceId;
    	      this.name = defaults.name;
    	      this.networkAccessPolicy = defaults.networkAccessPolicy;
    	      this.osType = defaults.osType;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.sourceResourceId = defaults.sourceResourceId;
    	      this.sourceUri = defaults.sourceUri;
    	      this.storageAccountId = defaults.storageAccountId;
    	      this.storageAccountType = defaults.storageAccountType;
    	      this.tags = defaults.tags;
    	      this.zones = defaults.zones;
        }

        @CustomType.Setter
        public Builder createOption(String createOption) {
            if (createOption == null) {
              throw new MissingRequiredPropertyException("GetManagedDiskResult", "createOption");
            }
            this.createOption = createOption;
            return this;
        }
        @CustomType.Setter
        public Builder diskAccessId(String diskAccessId) {
            if (diskAccessId == null) {
              throw new MissingRequiredPropertyException("GetManagedDiskResult", "diskAccessId");
            }
            this.diskAccessId = diskAccessId;
            return this;
        }
        @CustomType.Setter
        public Builder diskEncryptionSetId(String diskEncryptionSetId) {
            if (diskEncryptionSetId == null) {
              throw new MissingRequiredPropertyException("GetManagedDiskResult", "diskEncryptionSetId");
            }
            this.diskEncryptionSetId = diskEncryptionSetId;
            return this;
        }
        @CustomType.Setter
        public Builder diskIopsReadWrite(Integer diskIopsReadWrite) {
            if (diskIopsReadWrite == null) {
              throw new MissingRequiredPropertyException("GetManagedDiskResult", "diskIopsReadWrite");
            }
            this.diskIopsReadWrite = diskIopsReadWrite;
            return this;
        }
        @CustomType.Setter
        public Builder diskMbpsReadWrite(Integer diskMbpsReadWrite) {
            if (diskMbpsReadWrite == null) {
              throw new MissingRequiredPropertyException("GetManagedDiskResult", "diskMbpsReadWrite");
            }
            this.diskMbpsReadWrite = diskMbpsReadWrite;
            return this;
        }
        @CustomType.Setter
        public Builder diskSizeGb(Integer diskSizeGb) {
            if (diskSizeGb == null) {
              throw new MissingRequiredPropertyException("GetManagedDiskResult", "diskSizeGb");
            }
            this.diskSizeGb = diskSizeGb;
            return this;
        }
        @CustomType.Setter
        public Builder encryptionSettings(List<GetManagedDiskEncryptionSetting> encryptionSettings) {
            if (encryptionSettings == null) {
              throw new MissingRequiredPropertyException("GetManagedDiskResult", "encryptionSettings");
            }
            this.encryptionSettings = encryptionSettings;
            return this;
        }
        public Builder encryptionSettings(GetManagedDiskEncryptionSetting... encryptionSettings) {
            return encryptionSettings(List.of(encryptionSettings));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetManagedDiskResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder imageReferenceId(String imageReferenceId) {
            if (imageReferenceId == null) {
              throw new MissingRequiredPropertyException("GetManagedDiskResult", "imageReferenceId");
            }
            this.imageReferenceId = imageReferenceId;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetManagedDiskResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder networkAccessPolicy(String networkAccessPolicy) {
            if (networkAccessPolicy == null) {
              throw new MissingRequiredPropertyException("GetManagedDiskResult", "networkAccessPolicy");
            }
            this.networkAccessPolicy = networkAccessPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder osType(String osType) {
            if (osType == null) {
              throw new MissingRequiredPropertyException("GetManagedDiskResult", "osType");
            }
            this.osType = osType;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            if (resourceGroupName == null) {
              throw new MissingRequiredPropertyException("GetManagedDiskResult", "resourceGroupName");
            }
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder sourceResourceId(String sourceResourceId) {
            if (sourceResourceId == null) {
              throw new MissingRequiredPropertyException("GetManagedDiskResult", "sourceResourceId");
            }
            this.sourceResourceId = sourceResourceId;
            return this;
        }
        @CustomType.Setter
        public Builder sourceUri(String sourceUri) {
            if (sourceUri == null) {
              throw new MissingRequiredPropertyException("GetManagedDiskResult", "sourceUri");
            }
            this.sourceUri = sourceUri;
            return this;
        }
        @CustomType.Setter
        public Builder storageAccountId(String storageAccountId) {
            if (storageAccountId == null) {
              throw new MissingRequiredPropertyException("GetManagedDiskResult", "storageAccountId");
            }
            this.storageAccountId = storageAccountId;
            return this;
        }
        @CustomType.Setter
        public Builder storageAccountType(String storageAccountType) {
            if (storageAccountType == null) {
              throw new MissingRequiredPropertyException("GetManagedDiskResult", "storageAccountType");
            }
            this.storageAccountType = storageAccountType;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetManagedDiskResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder zones(List<String> zones) {
            if (zones == null) {
              throw new MissingRequiredPropertyException("GetManagedDiskResult", "zones");
            }
            this.zones = zones;
            return this;
        }
        public Builder zones(String... zones) {
            return zones(List.of(zones));
        }
        public GetManagedDiskResult build() {
            final var _resultValue = new GetManagedDiskResult();
            _resultValue.createOption = createOption;
            _resultValue.diskAccessId = diskAccessId;
            _resultValue.diskEncryptionSetId = diskEncryptionSetId;
            _resultValue.diskIopsReadWrite = diskIopsReadWrite;
            _resultValue.diskMbpsReadWrite = diskMbpsReadWrite;
            _resultValue.diskSizeGb = diskSizeGb;
            _resultValue.encryptionSettings = encryptionSettings;
            _resultValue.id = id;
            _resultValue.imageReferenceId = imageReferenceId;
            _resultValue.name = name;
            _resultValue.networkAccessPolicy = networkAccessPolicy;
            _resultValue.osType = osType;
            _resultValue.resourceGroupName = resourceGroupName;
            _resultValue.sourceResourceId = sourceResourceId;
            _resultValue.sourceUri = sourceUri;
            _resultValue.storageAccountId = storageAccountId;
            _resultValue.storageAccountType = storageAccountType;
            _resultValue.tags = tags;
            _resultValue.zones = zones;
            return _resultValue;
        }
    }
}
