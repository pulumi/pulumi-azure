// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.loadtest.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class LoadTestEncryptionIdentityArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoadTestEncryptionIdentityArgs Empty = new LoadTestEncryptionIdentityArgs();

    /**
     * The User Assigned Identity ID that should be assigned to this Load Test Encryption. Changing this forces a new Load Test to be created.
     * 
     */
    @Import(name="identityId", required=true)
    private Output<String> identityId;

    /**
     * @return The User Assigned Identity ID that should be assigned to this Load Test Encryption. Changing this forces a new Load Test to be created.
     * 
     */
    public Output<String> identityId() {
        return this.identityId;
    }

    /**
     * Specifies the type of Managed Identity that should be assigned to this Load Test Encryption. Possible values are `SystemAssigned` or `UserAssigned`. Changing this forces a new Load Test to be created.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Specifies the type of Managed Identity that should be assigned to this Load Test Encryption. Possible values are `SystemAssigned` or `UserAssigned`. Changing this forces a new Load Test to be created.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private LoadTestEncryptionIdentityArgs() {}

    private LoadTestEncryptionIdentityArgs(LoadTestEncryptionIdentityArgs $) {
        this.identityId = $.identityId;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadTestEncryptionIdentityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadTestEncryptionIdentityArgs $;

        public Builder() {
            $ = new LoadTestEncryptionIdentityArgs();
        }

        public Builder(LoadTestEncryptionIdentityArgs defaults) {
            $ = new LoadTestEncryptionIdentityArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param identityId The User Assigned Identity ID that should be assigned to this Load Test Encryption. Changing this forces a new Load Test to be created.
         * 
         * @return builder
         * 
         */
        public Builder identityId(Output<String> identityId) {
            $.identityId = identityId;
            return this;
        }

        /**
         * @param identityId The User Assigned Identity ID that should be assigned to this Load Test Encryption. Changing this forces a new Load Test to be created.
         * 
         * @return builder
         * 
         */
        public Builder identityId(String identityId) {
            return identityId(Output.of(identityId));
        }

        /**
         * @param type Specifies the type of Managed Identity that should be assigned to this Load Test Encryption. Possible values are `SystemAssigned` or `UserAssigned`. Changing this forces a new Load Test to be created.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Specifies the type of Managed Identity that should be assigned to this Load Test Encryption. Possible values are `SystemAssigned` or `UserAssigned`. Changing this forces a new Load Test to be created.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public LoadTestEncryptionIdentityArgs build() {
            if ($.identityId == null) {
                throw new MissingRequiredPropertyException("LoadTestEncryptionIdentityArgs", "identityId");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("LoadTestEncryptionIdentityArgs", "type");
            }
            return $;
        }
    }

}
