// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.media.inputs;

import com.pulumi.azure.media.inputs.TransformOutputCustomPresetCodecAacAudioArgs;
import com.pulumi.azure.media.inputs.TransformOutputCustomPresetCodecCopyAudioArgs;
import com.pulumi.azure.media.inputs.TransformOutputCustomPresetCodecCopyVideoArgs;
import com.pulumi.azure.media.inputs.TransformOutputCustomPresetCodecDdAudioArgs;
import com.pulumi.azure.media.inputs.TransformOutputCustomPresetCodecH264VideoArgs;
import com.pulumi.azure.media.inputs.TransformOutputCustomPresetCodecH265VideoArgs;
import com.pulumi.azure.media.inputs.TransformOutputCustomPresetCodecJpgImageArgs;
import com.pulumi.azure.media.inputs.TransformOutputCustomPresetCodecPngImageArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TransformOutputCustomPresetCodecArgs extends com.pulumi.resources.ResourceArgs {

    public static final TransformOutputCustomPresetCodecArgs Empty = new TransformOutputCustomPresetCodecArgs();

    /**
     * A `aac_audio` block as defined above.
     * 
     */
    @Import(name="aacAudio")
    private @Nullable Output<TransformOutputCustomPresetCodecAacAudioArgs> aacAudio;

    /**
     * @return A `aac_audio` block as defined above.
     * 
     */
    public Optional<Output<TransformOutputCustomPresetCodecAacAudioArgs>> aacAudio() {
        return Optional.ofNullable(this.aacAudio);
    }

    /**
     * A `copy_audio` block as defined below.
     * 
     */
    @Import(name="copyAudio")
    private @Nullable Output<TransformOutputCustomPresetCodecCopyAudioArgs> copyAudio;

    /**
     * @return A `copy_audio` block as defined below.
     * 
     */
    public Optional<Output<TransformOutputCustomPresetCodecCopyAudioArgs>> copyAudio() {
        return Optional.ofNullable(this.copyAudio);
    }

    /**
     * A `copy_video` block as defined below.
     * 
     */
    @Import(name="copyVideo")
    private @Nullable Output<TransformOutputCustomPresetCodecCopyVideoArgs> copyVideo;

    /**
     * @return A `copy_video` block as defined below.
     * 
     */
    public Optional<Output<TransformOutputCustomPresetCodecCopyVideoArgs>> copyVideo() {
        return Optional.ofNullable(this.copyVideo);
    }

    /**
     * A `dd_audio` block as defined below.
     * 
     */
    @Import(name="ddAudio")
    private @Nullable Output<TransformOutputCustomPresetCodecDdAudioArgs> ddAudio;

    /**
     * @return A `dd_audio` block as defined below.
     * 
     */
    public Optional<Output<TransformOutputCustomPresetCodecDdAudioArgs>> ddAudio() {
        return Optional.ofNullable(this.ddAudio);
    }

    /**
     * A `h264_video` block as defined below.
     * 
     */
    @Import(name="h264Video")
    private @Nullable Output<TransformOutputCustomPresetCodecH264VideoArgs> h264Video;

    /**
     * @return A `h264_video` block as defined below.
     * 
     */
    public Optional<Output<TransformOutputCustomPresetCodecH264VideoArgs>> h264Video() {
        return Optional.ofNullable(this.h264Video);
    }

    /**
     * A `h265_video` block as defined below.
     * 
     */
    @Import(name="h265Video")
    private @Nullable Output<TransformOutputCustomPresetCodecH265VideoArgs> h265Video;

    /**
     * @return A `h265_video` block as defined below.
     * 
     */
    public Optional<Output<TransformOutputCustomPresetCodecH265VideoArgs>> h265Video() {
        return Optional.ofNullable(this.h265Video);
    }

    /**
     * A `jpg_image` block as defined below.
     * 
     */
    @Import(name="jpgImage")
    private @Nullable Output<TransformOutputCustomPresetCodecJpgImageArgs> jpgImage;

    /**
     * @return A `jpg_image` block as defined below.
     * 
     */
    public Optional<Output<TransformOutputCustomPresetCodecJpgImageArgs>> jpgImage() {
        return Optional.ofNullable(this.jpgImage);
    }

    /**
     * A `png_image` block as defined below.
     * 
     * &gt; **NOTE:** Each codec can only have one type: `aac_audio`, `copy_audio`, `copy_video`, `dd_audio`, `h264_video`, `h265_video`, `jpg_image` or `png_image`. If you need to apply different codec you must create one codec for each one.
     * 
     */
    @Import(name="pngImage")
    private @Nullable Output<TransformOutputCustomPresetCodecPngImageArgs> pngImage;

    /**
     * @return A `png_image` block as defined below.
     * 
     * &gt; **NOTE:** Each codec can only have one type: `aac_audio`, `copy_audio`, `copy_video`, `dd_audio`, `h264_video`, `h265_video`, `jpg_image` or `png_image`. If you need to apply different codec you must create one codec for each one.
     * 
     */
    public Optional<Output<TransformOutputCustomPresetCodecPngImageArgs>> pngImage() {
        return Optional.ofNullable(this.pngImage);
    }

    private TransformOutputCustomPresetCodecArgs() {}

    private TransformOutputCustomPresetCodecArgs(TransformOutputCustomPresetCodecArgs $) {
        this.aacAudio = $.aacAudio;
        this.copyAudio = $.copyAudio;
        this.copyVideo = $.copyVideo;
        this.ddAudio = $.ddAudio;
        this.h264Video = $.h264Video;
        this.h265Video = $.h265Video;
        this.jpgImage = $.jpgImage;
        this.pngImage = $.pngImage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TransformOutputCustomPresetCodecArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TransformOutputCustomPresetCodecArgs $;

        public Builder() {
            $ = new TransformOutputCustomPresetCodecArgs();
        }

        public Builder(TransformOutputCustomPresetCodecArgs defaults) {
            $ = new TransformOutputCustomPresetCodecArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param aacAudio A `aac_audio` block as defined above.
         * 
         * @return builder
         * 
         */
        public Builder aacAudio(@Nullable Output<TransformOutputCustomPresetCodecAacAudioArgs> aacAudio) {
            $.aacAudio = aacAudio;
            return this;
        }

        /**
         * @param aacAudio A `aac_audio` block as defined above.
         * 
         * @return builder
         * 
         */
        public Builder aacAudio(TransformOutputCustomPresetCodecAacAudioArgs aacAudio) {
            return aacAudio(Output.of(aacAudio));
        }

        /**
         * @param copyAudio A `copy_audio` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder copyAudio(@Nullable Output<TransformOutputCustomPresetCodecCopyAudioArgs> copyAudio) {
            $.copyAudio = copyAudio;
            return this;
        }

        /**
         * @param copyAudio A `copy_audio` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder copyAudio(TransformOutputCustomPresetCodecCopyAudioArgs copyAudio) {
            return copyAudio(Output.of(copyAudio));
        }

        /**
         * @param copyVideo A `copy_video` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder copyVideo(@Nullable Output<TransformOutputCustomPresetCodecCopyVideoArgs> copyVideo) {
            $.copyVideo = copyVideo;
            return this;
        }

        /**
         * @param copyVideo A `copy_video` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder copyVideo(TransformOutputCustomPresetCodecCopyVideoArgs copyVideo) {
            return copyVideo(Output.of(copyVideo));
        }

        /**
         * @param ddAudio A `dd_audio` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder ddAudio(@Nullable Output<TransformOutputCustomPresetCodecDdAudioArgs> ddAudio) {
            $.ddAudio = ddAudio;
            return this;
        }

        /**
         * @param ddAudio A `dd_audio` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder ddAudio(TransformOutputCustomPresetCodecDdAudioArgs ddAudio) {
            return ddAudio(Output.of(ddAudio));
        }

        /**
         * @param h264Video A `h264_video` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder h264Video(@Nullable Output<TransformOutputCustomPresetCodecH264VideoArgs> h264Video) {
            $.h264Video = h264Video;
            return this;
        }

        /**
         * @param h264Video A `h264_video` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder h264Video(TransformOutputCustomPresetCodecH264VideoArgs h264Video) {
            return h264Video(Output.of(h264Video));
        }

        /**
         * @param h265Video A `h265_video` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder h265Video(@Nullable Output<TransformOutputCustomPresetCodecH265VideoArgs> h265Video) {
            $.h265Video = h265Video;
            return this;
        }

        /**
         * @param h265Video A `h265_video` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder h265Video(TransformOutputCustomPresetCodecH265VideoArgs h265Video) {
            return h265Video(Output.of(h265Video));
        }

        /**
         * @param jpgImage A `jpg_image` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder jpgImage(@Nullable Output<TransformOutputCustomPresetCodecJpgImageArgs> jpgImage) {
            $.jpgImage = jpgImage;
            return this;
        }

        /**
         * @param jpgImage A `jpg_image` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder jpgImage(TransformOutputCustomPresetCodecJpgImageArgs jpgImage) {
            return jpgImage(Output.of(jpgImage));
        }

        /**
         * @param pngImage A `png_image` block as defined below.
         * 
         * &gt; **NOTE:** Each codec can only have one type: `aac_audio`, `copy_audio`, `copy_video`, `dd_audio`, `h264_video`, `h265_video`, `jpg_image` or `png_image`. If you need to apply different codec you must create one codec for each one.
         * 
         * @return builder
         * 
         */
        public Builder pngImage(@Nullable Output<TransformOutputCustomPresetCodecPngImageArgs> pngImage) {
            $.pngImage = pngImage;
            return this;
        }

        /**
         * @param pngImage A `png_image` block as defined below.
         * 
         * &gt; **NOTE:** Each codec can only have one type: `aac_audio`, `copy_audio`, `copy_video`, `dd_audio`, `h264_video`, `h265_video`, `jpg_image` or `png_image`. If you need to apply different codec you must create one codec for each one.
         * 
         * @return builder
         * 
         */
        public Builder pngImage(TransformOutputCustomPresetCodecPngImageArgs pngImage) {
            return pngImage(Output.of(pngImage));
        }

        public TransformOutputCustomPresetCodecArgs build() {
            return $;
        }
    }

}
