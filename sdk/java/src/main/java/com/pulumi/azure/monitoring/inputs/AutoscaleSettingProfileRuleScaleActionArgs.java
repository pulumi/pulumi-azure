// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.monitoring.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class AutoscaleSettingProfileRuleScaleActionArgs extends com.pulumi.resources.ResourceArgs {

    public static final AutoscaleSettingProfileRuleScaleActionArgs Empty = new AutoscaleSettingProfileRuleScaleActionArgs();

    /**
     * The amount of time to wait since the last scaling action before this action occurs. Must be between 1 minute and 1 week and formatted as a ISO 8601 string.
     * 
     */
    @Import(name="cooldown", required=true)
    private Output<String> cooldown;

    /**
     * @return The amount of time to wait since the last scaling action before this action occurs. Must be between 1 minute and 1 week and formatted as a ISO 8601 string.
     * 
     */
    public Output<String> cooldown() {
        return this.cooldown;
    }

    /**
     * The scale direction. Possible values are `Increase` and `Decrease`.
     * 
     */
    @Import(name="direction", required=true)
    private Output<String> direction;

    /**
     * @return The scale direction. Possible values are `Increase` and `Decrease`.
     * 
     */
    public Output<String> direction() {
        return this.direction;
    }

    /**
     * The type of action that should occur. Possible values are `ChangeCount`, `ExactCount`, `PercentChangeCount` and `ServiceAllowedNextValue`.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of action that should occur. Possible values are `ChangeCount`, `ExactCount`, `PercentChangeCount` and `ServiceAllowedNextValue`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * The number of instances involved in the scaling action.
     * 
     */
    @Import(name="value", required=true)
    private Output<Integer> value;

    /**
     * @return The number of instances involved in the scaling action.
     * 
     */
    public Output<Integer> value() {
        return this.value;
    }

    private AutoscaleSettingProfileRuleScaleActionArgs() {}

    private AutoscaleSettingProfileRuleScaleActionArgs(AutoscaleSettingProfileRuleScaleActionArgs $) {
        this.cooldown = $.cooldown;
        this.direction = $.direction;
        this.type = $.type;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AutoscaleSettingProfileRuleScaleActionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AutoscaleSettingProfileRuleScaleActionArgs $;

        public Builder() {
            $ = new AutoscaleSettingProfileRuleScaleActionArgs();
        }

        public Builder(AutoscaleSettingProfileRuleScaleActionArgs defaults) {
            $ = new AutoscaleSettingProfileRuleScaleActionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cooldown The amount of time to wait since the last scaling action before this action occurs. Must be between 1 minute and 1 week and formatted as a ISO 8601 string.
         * 
         * @return builder
         * 
         */
        public Builder cooldown(Output<String> cooldown) {
            $.cooldown = cooldown;
            return this;
        }

        /**
         * @param cooldown The amount of time to wait since the last scaling action before this action occurs. Must be between 1 minute and 1 week and formatted as a ISO 8601 string.
         * 
         * @return builder
         * 
         */
        public Builder cooldown(String cooldown) {
            return cooldown(Output.of(cooldown));
        }

        /**
         * @param direction The scale direction. Possible values are `Increase` and `Decrease`.
         * 
         * @return builder
         * 
         */
        public Builder direction(Output<String> direction) {
            $.direction = direction;
            return this;
        }

        /**
         * @param direction The scale direction. Possible values are `Increase` and `Decrease`.
         * 
         * @return builder
         * 
         */
        public Builder direction(String direction) {
            return direction(Output.of(direction));
        }

        /**
         * @param type The type of action that should occur. Possible values are `ChangeCount`, `ExactCount`, `PercentChangeCount` and `ServiceAllowedNextValue`.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of action that should occur. Possible values are `ChangeCount`, `ExactCount`, `PercentChangeCount` and `ServiceAllowedNextValue`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param value The number of instances involved in the scaling action.
         * 
         * @return builder
         * 
         */
        public Builder value(Output<Integer> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value The number of instances involved in the scaling action.
         * 
         * @return builder
         * 
         */
        public Builder value(Integer value) {
            return value(Output.of(value));
        }

        public AutoscaleSettingProfileRuleScaleActionArgs build() {
            if ($.cooldown == null) {
                throw new MissingRequiredPropertyException("AutoscaleSettingProfileRuleScaleActionArgs", "cooldown");
            }
            if ($.direction == null) {
                throw new MissingRequiredPropertyException("AutoscaleSettingProfileRuleScaleActionArgs", "direction");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("AutoscaleSettingProfileRuleScaleActionArgs", "type");
            }
            if ($.value == null) {
                throw new MissingRequiredPropertyException("AutoscaleSettingProfileRuleScaleActionArgs", "value");
            }
            return $;
        }
    }

}
