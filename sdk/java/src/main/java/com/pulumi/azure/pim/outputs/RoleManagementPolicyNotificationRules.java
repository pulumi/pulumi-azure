// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.pim.outputs;

import com.pulumi.azure.pim.outputs.RoleManagementPolicyNotificationRulesActiveAssignments;
import com.pulumi.azure.pim.outputs.RoleManagementPolicyNotificationRulesEligibleActivations;
import com.pulumi.azure.pim.outputs.RoleManagementPolicyNotificationRulesEligibleAssignments;
import com.pulumi.core.annotations.CustomType;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RoleManagementPolicyNotificationRules {
    /**
     * @return A `notificationTarget` block as defined below to configure notfications on active role assignments.
     * 
     */
    private @Nullable RoleManagementPolicyNotificationRulesActiveAssignments activeAssignments;
    /**
     * @return A `notificationTarget` block as defined below for configuring notifications on activation of eligible role.
     * 
     */
    private @Nullable RoleManagementPolicyNotificationRulesEligibleActivations eligibleActivations;
    /**
     * @return A `notificationTarget` block as defined below to configure notification on eligible role assignments.
     * 
     * At least one `notificationTarget` block must be provided.
     * 
     */
    private @Nullable RoleManagementPolicyNotificationRulesEligibleAssignments eligibleAssignments;

    private RoleManagementPolicyNotificationRules() {}
    /**
     * @return A `notificationTarget` block as defined below to configure notfications on active role assignments.
     * 
     */
    public Optional<RoleManagementPolicyNotificationRulesActiveAssignments> activeAssignments() {
        return Optional.ofNullable(this.activeAssignments);
    }
    /**
     * @return A `notificationTarget` block as defined below for configuring notifications on activation of eligible role.
     * 
     */
    public Optional<RoleManagementPolicyNotificationRulesEligibleActivations> eligibleActivations() {
        return Optional.ofNullable(this.eligibleActivations);
    }
    /**
     * @return A `notificationTarget` block as defined below to configure notification on eligible role assignments.
     * 
     * At least one `notificationTarget` block must be provided.
     * 
     */
    public Optional<RoleManagementPolicyNotificationRulesEligibleAssignments> eligibleAssignments() {
        return Optional.ofNullable(this.eligibleAssignments);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RoleManagementPolicyNotificationRules defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable RoleManagementPolicyNotificationRulesActiveAssignments activeAssignments;
        private @Nullable RoleManagementPolicyNotificationRulesEligibleActivations eligibleActivations;
        private @Nullable RoleManagementPolicyNotificationRulesEligibleAssignments eligibleAssignments;
        public Builder() {}
        public Builder(RoleManagementPolicyNotificationRules defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activeAssignments = defaults.activeAssignments;
    	      this.eligibleActivations = defaults.eligibleActivations;
    	      this.eligibleAssignments = defaults.eligibleAssignments;
        }

        @CustomType.Setter
        public Builder activeAssignments(@Nullable RoleManagementPolicyNotificationRulesActiveAssignments activeAssignments) {

            this.activeAssignments = activeAssignments;
            return this;
        }
        @CustomType.Setter
        public Builder eligibleActivations(@Nullable RoleManagementPolicyNotificationRulesEligibleActivations eligibleActivations) {

            this.eligibleActivations = eligibleActivations;
            return this;
        }
        @CustomType.Setter
        public Builder eligibleAssignments(@Nullable RoleManagementPolicyNotificationRulesEligibleAssignments eligibleAssignments) {

            this.eligibleAssignments = eligibleAssignments;
            return this;
        }
        public RoleManagementPolicyNotificationRules build() {
            final var _resultValue = new RoleManagementPolicyNotificationRules();
            _resultValue.activeAssignments = activeAssignments;
            _resultValue.eligibleActivations = eligibleActivations;
            _resultValue.eligibleAssignments = eligibleAssignments;
            return _resultValue;
        }
    }
}
