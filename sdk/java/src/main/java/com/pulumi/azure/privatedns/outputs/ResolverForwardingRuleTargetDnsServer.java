// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.privatedns.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ResolverForwardingRuleTargetDnsServer {
    /**
     * @return DNS server IP address.
     * 
     */
    private String ipAddress;
    /**
     * @return DNS server port.
     * 
     */
    private @Nullable Integer port;

    private ResolverForwardingRuleTargetDnsServer() {}
    /**
     * @return DNS server IP address.
     * 
     */
    public String ipAddress() {
        return this.ipAddress;
    }
    /**
     * @return DNS server port.
     * 
     */
    public Optional<Integer> port() {
        return Optional.ofNullable(this.port);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ResolverForwardingRuleTargetDnsServer defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String ipAddress;
        private @Nullable Integer port;
        public Builder() {}
        public Builder(ResolverForwardingRuleTargetDnsServer defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ipAddress = defaults.ipAddress;
    	      this.port = defaults.port;
        }

        @CustomType.Setter
        public Builder ipAddress(String ipAddress) {
            if (ipAddress == null) {
              throw new MissingRequiredPropertyException("ResolverForwardingRuleTargetDnsServer", "ipAddress");
            }
            this.ipAddress = ipAddress;
            return this;
        }
        @CustomType.Setter
        public Builder port(@Nullable Integer port) {

            this.port = port;
            return this;
        }
        public ResolverForwardingRuleTargetDnsServer build() {
            final var _resultValue = new ResolverForwardingRuleTargetDnsServer();
            _resultValue.ipAddress = ipAddress;
            _resultValue.port = port;
            return _resultValue;
        }
    }
}
