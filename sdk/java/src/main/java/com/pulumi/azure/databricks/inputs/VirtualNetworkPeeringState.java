// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.databricks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VirtualNetworkPeeringState extends com.pulumi.resources.ResourceArgs {

    public static final VirtualNetworkPeeringState Empty = new VirtualNetworkPeeringState();

    /**
     * A list of address blocks reserved for this virtual network in CIDR notation.
     * 
     */
    @Import(name="addressSpacePrefixes")
    private @Nullable Output<List<String>> addressSpacePrefixes;

    /**
     * @return A list of address blocks reserved for this virtual network in CIDR notation.
     * 
     */
    public Optional<Output<List<String>>> addressSpacePrefixes() {
        return Optional.ofNullable(this.addressSpacePrefixes);
    }

    /**
     * Can the forwarded traffic from the VMs in the local virtual network be forwarded to the remote virtual network? Defaults to `false`.
     * 
     */
    @Import(name="allowForwardedTraffic")
    private @Nullable Output<Boolean> allowForwardedTraffic;

    /**
     * @return Can the forwarded traffic from the VMs in the local virtual network be forwarded to the remote virtual network? Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> allowForwardedTraffic() {
        return Optional.ofNullable(this.allowForwardedTraffic);
    }

    /**
     * Can the gateway links be used in the remote virtual network to link to the Databricks virtual network? Defaults to `false`.
     * 
     */
    @Import(name="allowGatewayTransit")
    private @Nullable Output<Boolean> allowGatewayTransit;

    /**
     * @return Can the gateway links be used in the remote virtual network to link to the Databricks virtual network? Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> allowGatewayTransit() {
        return Optional.ofNullable(this.allowGatewayTransit);
    }

    /**
     * Can the VMs in the local virtual network space access the VMs in the remote virtual network space? Defaults to `true`.
     * 
     */
    @Import(name="allowVirtualNetworkAccess")
    private @Nullable Output<Boolean> allowVirtualNetworkAccess;

    /**
     * @return Can the VMs in the local virtual network space access the VMs in the remote virtual network space? Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> allowVirtualNetworkAccess() {
        return Optional.ofNullable(this.allowVirtualNetworkAccess);
    }

    /**
     * Specifies the name of the Databricks Virtual Network Peering resource. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the name of the Databricks Virtual Network Peering resource. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A list of address blocks reserved for the remote virtual network in CIDR notation. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="remoteAddressSpacePrefixes")
    private @Nullable Output<List<String>> remoteAddressSpacePrefixes;

    /**
     * @return A list of address blocks reserved for the remote virtual network in CIDR notation. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<List<String>>> remoteAddressSpacePrefixes() {
        return Optional.ofNullable(this.remoteAddressSpacePrefixes);
    }

    /**
     * The ID of the remote virtual network. Changing this forces a new resource to be created.
     * 
     * &gt; **NOTE:** The remote virtual network should be in the same region as the databricks workspace. Please see the [product documentation](https://learn.microsoft.com/azure/databricks/administration-guide/cloud-configurations/azure/vnet-peering) for more information.
     * 
     */
    @Import(name="remoteVirtualNetworkId")
    private @Nullable Output<String> remoteVirtualNetworkId;

    /**
     * @return The ID of the remote virtual network. Changing this forces a new resource to be created.
     * 
     * &gt; **NOTE:** The remote virtual network should be in the same region as the databricks workspace. Please see the [product documentation](https://learn.microsoft.com/azure/databricks/administration-guide/cloud-configurations/azure/vnet-peering) for more information.
     * 
     */
    public Optional<Output<String>> remoteVirtualNetworkId() {
        return Optional.ofNullable(this.remoteVirtualNetworkId);
    }

    /**
     * The name of the Resource Group in which the Databricks Virtual Network Peering should exist. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="resourceGroupName")
    private @Nullable Output<String> resourceGroupName;

    /**
     * @return The name of the Resource Group in which the Databricks Virtual Network Peering should exist. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> resourceGroupName() {
        return Optional.ofNullable(this.resourceGroupName);
    }

    /**
     * Can remote gateways be used on the Databricks virtual network? Defaults to `false`.
     * 
     * &gt; **NOTE:** If the `use_remote_gateways` is set to `true`, and `allow_gateway_transit` on the remote peering is also `true`, the virtual network will use the gateways of the remote virtual network for transit. Only one peering can have this flag set to `true`. `use_remote_gateways` cannot be set if the virtual network already has a gateway.
     * 
     */
    @Import(name="useRemoteGateways")
    private @Nullable Output<Boolean> useRemoteGateways;

    /**
     * @return Can remote gateways be used on the Databricks virtual network? Defaults to `false`.
     * 
     * &gt; **NOTE:** If the `use_remote_gateways` is set to `true`, and `allow_gateway_transit` on the remote peering is also `true`, the virtual network will use the gateways of the remote virtual network for transit. Only one peering can have this flag set to `true`. `use_remote_gateways` cannot be set if the virtual network already has a gateway.
     * 
     */
    public Optional<Output<Boolean>> useRemoteGateways() {
        return Optional.ofNullable(this.useRemoteGateways);
    }

    /**
     * The ID of the internal Virtual Network used by the DataBricks Workspace.
     * 
     * &gt; **NOTE:** The `virtual_network_id` field is the value you must supply to the `azure.network.VirtualNetworkPeering` resources `remote_virtual_network_id` field to successfully peer the Databricks Virtual Network with the remote virtual network.
     * 
     */
    @Import(name="virtualNetworkId")
    private @Nullable Output<String> virtualNetworkId;

    /**
     * @return The ID of the internal Virtual Network used by the DataBricks Workspace.
     * 
     * &gt; **NOTE:** The `virtual_network_id` field is the value you must supply to the `azure.network.VirtualNetworkPeering` resources `remote_virtual_network_id` field to successfully peer the Databricks Virtual Network with the remote virtual network.
     * 
     */
    public Optional<Output<String>> virtualNetworkId() {
        return Optional.ofNullable(this.virtualNetworkId);
    }

    /**
     * The ID of the Databricks Workspace that this Databricks Virtual Network Peering is bound. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="workspaceId")
    private @Nullable Output<String> workspaceId;

    /**
     * @return The ID of the Databricks Workspace that this Databricks Virtual Network Peering is bound. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> workspaceId() {
        return Optional.ofNullable(this.workspaceId);
    }

    private VirtualNetworkPeeringState() {}

    private VirtualNetworkPeeringState(VirtualNetworkPeeringState $) {
        this.addressSpacePrefixes = $.addressSpacePrefixes;
        this.allowForwardedTraffic = $.allowForwardedTraffic;
        this.allowGatewayTransit = $.allowGatewayTransit;
        this.allowVirtualNetworkAccess = $.allowVirtualNetworkAccess;
        this.name = $.name;
        this.remoteAddressSpacePrefixes = $.remoteAddressSpacePrefixes;
        this.remoteVirtualNetworkId = $.remoteVirtualNetworkId;
        this.resourceGroupName = $.resourceGroupName;
        this.useRemoteGateways = $.useRemoteGateways;
        this.virtualNetworkId = $.virtualNetworkId;
        this.workspaceId = $.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualNetworkPeeringState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualNetworkPeeringState $;

        public Builder() {
            $ = new VirtualNetworkPeeringState();
        }

        public Builder(VirtualNetworkPeeringState defaults) {
            $ = new VirtualNetworkPeeringState(Objects.requireNonNull(defaults));
        }

        /**
         * @param addressSpacePrefixes A list of address blocks reserved for this virtual network in CIDR notation.
         * 
         * @return builder
         * 
         */
        public Builder addressSpacePrefixes(@Nullable Output<List<String>> addressSpacePrefixes) {
            $.addressSpacePrefixes = addressSpacePrefixes;
            return this;
        }

        /**
         * @param addressSpacePrefixes A list of address blocks reserved for this virtual network in CIDR notation.
         * 
         * @return builder
         * 
         */
        public Builder addressSpacePrefixes(List<String> addressSpacePrefixes) {
            return addressSpacePrefixes(Output.of(addressSpacePrefixes));
        }

        /**
         * @param addressSpacePrefixes A list of address blocks reserved for this virtual network in CIDR notation.
         * 
         * @return builder
         * 
         */
        public Builder addressSpacePrefixes(String... addressSpacePrefixes) {
            return addressSpacePrefixes(List.of(addressSpacePrefixes));
        }

        /**
         * @param allowForwardedTraffic Can the forwarded traffic from the VMs in the local virtual network be forwarded to the remote virtual network? Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder allowForwardedTraffic(@Nullable Output<Boolean> allowForwardedTraffic) {
            $.allowForwardedTraffic = allowForwardedTraffic;
            return this;
        }

        /**
         * @param allowForwardedTraffic Can the forwarded traffic from the VMs in the local virtual network be forwarded to the remote virtual network? Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder allowForwardedTraffic(Boolean allowForwardedTraffic) {
            return allowForwardedTraffic(Output.of(allowForwardedTraffic));
        }

        /**
         * @param allowGatewayTransit Can the gateway links be used in the remote virtual network to link to the Databricks virtual network? Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder allowGatewayTransit(@Nullable Output<Boolean> allowGatewayTransit) {
            $.allowGatewayTransit = allowGatewayTransit;
            return this;
        }

        /**
         * @param allowGatewayTransit Can the gateway links be used in the remote virtual network to link to the Databricks virtual network? Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder allowGatewayTransit(Boolean allowGatewayTransit) {
            return allowGatewayTransit(Output.of(allowGatewayTransit));
        }

        /**
         * @param allowVirtualNetworkAccess Can the VMs in the local virtual network space access the VMs in the remote virtual network space? Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder allowVirtualNetworkAccess(@Nullable Output<Boolean> allowVirtualNetworkAccess) {
            $.allowVirtualNetworkAccess = allowVirtualNetworkAccess;
            return this;
        }

        /**
         * @param allowVirtualNetworkAccess Can the VMs in the local virtual network space access the VMs in the remote virtual network space? Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder allowVirtualNetworkAccess(Boolean allowVirtualNetworkAccess) {
            return allowVirtualNetworkAccess(Output.of(allowVirtualNetworkAccess));
        }

        /**
         * @param name Specifies the name of the Databricks Virtual Network Peering resource. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of the Databricks Virtual Network Peering resource. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param remoteAddressSpacePrefixes A list of address blocks reserved for the remote virtual network in CIDR notation. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder remoteAddressSpacePrefixes(@Nullable Output<List<String>> remoteAddressSpacePrefixes) {
            $.remoteAddressSpacePrefixes = remoteAddressSpacePrefixes;
            return this;
        }

        /**
         * @param remoteAddressSpacePrefixes A list of address blocks reserved for the remote virtual network in CIDR notation. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder remoteAddressSpacePrefixes(List<String> remoteAddressSpacePrefixes) {
            return remoteAddressSpacePrefixes(Output.of(remoteAddressSpacePrefixes));
        }

        /**
         * @param remoteAddressSpacePrefixes A list of address blocks reserved for the remote virtual network in CIDR notation. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder remoteAddressSpacePrefixes(String... remoteAddressSpacePrefixes) {
            return remoteAddressSpacePrefixes(List.of(remoteAddressSpacePrefixes));
        }

        /**
         * @param remoteVirtualNetworkId The ID of the remote virtual network. Changing this forces a new resource to be created.
         * 
         * &gt; **NOTE:** The remote virtual network should be in the same region as the databricks workspace. Please see the [product documentation](https://learn.microsoft.com/azure/databricks/administration-guide/cloud-configurations/azure/vnet-peering) for more information.
         * 
         * @return builder
         * 
         */
        public Builder remoteVirtualNetworkId(@Nullable Output<String> remoteVirtualNetworkId) {
            $.remoteVirtualNetworkId = remoteVirtualNetworkId;
            return this;
        }

        /**
         * @param remoteVirtualNetworkId The ID of the remote virtual network. Changing this forces a new resource to be created.
         * 
         * &gt; **NOTE:** The remote virtual network should be in the same region as the databricks workspace. Please see the [product documentation](https://learn.microsoft.com/azure/databricks/administration-guide/cloud-configurations/azure/vnet-peering) for more information.
         * 
         * @return builder
         * 
         */
        public Builder remoteVirtualNetworkId(String remoteVirtualNetworkId) {
            return remoteVirtualNetworkId(Output.of(remoteVirtualNetworkId));
        }

        /**
         * @param resourceGroupName The name of the Resource Group in which the Databricks Virtual Network Peering should exist. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(@Nullable Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the Resource Group in which the Databricks Virtual Network Peering should exist. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param useRemoteGateways Can remote gateways be used on the Databricks virtual network? Defaults to `false`.
         * 
         * &gt; **NOTE:** If the `use_remote_gateways` is set to `true`, and `allow_gateway_transit` on the remote peering is also `true`, the virtual network will use the gateways of the remote virtual network for transit. Only one peering can have this flag set to `true`. `use_remote_gateways` cannot be set if the virtual network already has a gateway.
         * 
         * @return builder
         * 
         */
        public Builder useRemoteGateways(@Nullable Output<Boolean> useRemoteGateways) {
            $.useRemoteGateways = useRemoteGateways;
            return this;
        }

        /**
         * @param useRemoteGateways Can remote gateways be used on the Databricks virtual network? Defaults to `false`.
         * 
         * &gt; **NOTE:** If the `use_remote_gateways` is set to `true`, and `allow_gateway_transit` on the remote peering is also `true`, the virtual network will use the gateways of the remote virtual network for transit. Only one peering can have this flag set to `true`. `use_remote_gateways` cannot be set if the virtual network already has a gateway.
         * 
         * @return builder
         * 
         */
        public Builder useRemoteGateways(Boolean useRemoteGateways) {
            return useRemoteGateways(Output.of(useRemoteGateways));
        }

        /**
         * @param virtualNetworkId The ID of the internal Virtual Network used by the DataBricks Workspace.
         * 
         * &gt; **NOTE:** The `virtual_network_id` field is the value you must supply to the `azure.network.VirtualNetworkPeering` resources `remote_virtual_network_id` field to successfully peer the Databricks Virtual Network with the remote virtual network.
         * 
         * @return builder
         * 
         */
        public Builder virtualNetworkId(@Nullable Output<String> virtualNetworkId) {
            $.virtualNetworkId = virtualNetworkId;
            return this;
        }

        /**
         * @param virtualNetworkId The ID of the internal Virtual Network used by the DataBricks Workspace.
         * 
         * &gt; **NOTE:** The `virtual_network_id` field is the value you must supply to the `azure.network.VirtualNetworkPeering` resources `remote_virtual_network_id` field to successfully peer the Databricks Virtual Network with the remote virtual network.
         * 
         * @return builder
         * 
         */
        public Builder virtualNetworkId(String virtualNetworkId) {
            return virtualNetworkId(Output.of(virtualNetworkId));
        }

        /**
         * @param workspaceId The ID of the Databricks Workspace that this Databricks Virtual Network Peering is bound. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(@Nullable Output<String> workspaceId) {
            $.workspaceId = workspaceId;
            return this;
        }

        /**
         * @param workspaceId The ID of the Databricks Workspace that this Databricks Virtual Network Peering is bound. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(String workspaceId) {
            return workspaceId(Output.of(workspaceId));
        }

        public VirtualNetworkPeeringState build() {
            return $;
        }
    }

}
