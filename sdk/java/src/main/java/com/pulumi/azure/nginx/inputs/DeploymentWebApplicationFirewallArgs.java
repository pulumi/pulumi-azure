// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.nginx.inputs;

import com.pulumi.azure.nginx.inputs.DeploymentWebApplicationFirewallStatusArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeploymentWebApplicationFirewallArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeploymentWebApplicationFirewallArgs Empty = new DeploymentWebApplicationFirewallArgs();

    /**
     * Whether WAF is enabled/disabled for this NGINX Deployment.
     * 
     */
    @Import(name="activationStateEnabled", required=true)
    private Output<Boolean> activationStateEnabled;

    /**
     * @return Whether WAF is enabled/disabled for this NGINX Deployment.
     * 
     */
    public Output<Boolean> activationStateEnabled() {
        return this.activationStateEnabled;
    }

    /**
     * A `web_application_firewall.status` block as defined below:
     * 
     */
    @Import(name="statuses")
    private @Nullable Output<List<DeploymentWebApplicationFirewallStatusArgs>> statuses;

    /**
     * @return A `web_application_firewall.status` block as defined below:
     * 
     */
    public Optional<Output<List<DeploymentWebApplicationFirewallStatusArgs>>> statuses() {
        return Optional.ofNullable(this.statuses);
    }

    private DeploymentWebApplicationFirewallArgs() {}

    private DeploymentWebApplicationFirewallArgs(DeploymentWebApplicationFirewallArgs $) {
        this.activationStateEnabled = $.activationStateEnabled;
        this.statuses = $.statuses;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeploymentWebApplicationFirewallArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeploymentWebApplicationFirewallArgs $;

        public Builder() {
            $ = new DeploymentWebApplicationFirewallArgs();
        }

        public Builder(DeploymentWebApplicationFirewallArgs defaults) {
            $ = new DeploymentWebApplicationFirewallArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param activationStateEnabled Whether WAF is enabled/disabled for this NGINX Deployment.
         * 
         * @return builder
         * 
         */
        public Builder activationStateEnabled(Output<Boolean> activationStateEnabled) {
            $.activationStateEnabled = activationStateEnabled;
            return this;
        }

        /**
         * @param activationStateEnabled Whether WAF is enabled/disabled for this NGINX Deployment.
         * 
         * @return builder
         * 
         */
        public Builder activationStateEnabled(Boolean activationStateEnabled) {
            return activationStateEnabled(Output.of(activationStateEnabled));
        }

        /**
         * @param statuses A `web_application_firewall.status` block as defined below:
         * 
         * @return builder
         * 
         */
        public Builder statuses(@Nullable Output<List<DeploymentWebApplicationFirewallStatusArgs>> statuses) {
            $.statuses = statuses;
            return this;
        }

        /**
         * @param statuses A `web_application_firewall.status` block as defined below:
         * 
         * @return builder
         * 
         */
        public Builder statuses(List<DeploymentWebApplicationFirewallStatusArgs> statuses) {
            return statuses(Output.of(statuses));
        }

        /**
         * @param statuses A `web_application_firewall.status` block as defined below:
         * 
         * @return builder
         * 
         */
        public Builder statuses(DeploymentWebApplicationFirewallStatusArgs... statuses) {
            return statuses(List.of(statuses));
        }

        public DeploymentWebApplicationFirewallArgs build() {
            if ($.activationStateEnabled == null) {
                throw new MissingRequiredPropertyException("DeploymentWebApplicationFirewallArgs", "activationStateEnabled");
            }
            return $;
        }
    }

}
