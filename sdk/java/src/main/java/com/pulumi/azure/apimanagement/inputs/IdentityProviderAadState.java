// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.apimanagement.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IdentityProviderAadState extends com.pulumi.resources.ResourceArgs {

    public static final IdentityProviderAadState Empty = new IdentityProviderAadState();

    /**
     * List of allowed AAD Tenants.
     * 
     */
    @Import(name="allowedTenants")
    private @Nullable Output<List<String>> allowedTenants;

    /**
     * @return List of allowed AAD Tenants.
     * 
     */
    public Optional<Output<List<String>>> allowedTenants() {
        return Optional.ofNullable(this.allowedTenants);
    }

    /**
     * The Name of the API Management Service where this AAD Identity Provider should be created. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="apiManagementName")
    private @Nullable Output<String> apiManagementName;

    /**
     * @return The Name of the API Management Service where this AAD Identity Provider should be created. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> apiManagementName() {
        return Optional.ofNullable(this.apiManagementName);
    }

    /**
     * Client Id of the Application in the AAD Identity Provider.
     * 
     */
    @Import(name="clientId")
    private @Nullable Output<String> clientId;

    /**
     * @return Client Id of the Application in the AAD Identity Provider.
     * 
     */
    public Optional<Output<String>> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * Client secret of the Application in the AAD Identity Provider.
     * 
     */
    @Import(name="clientSecret")
    private @Nullable Output<String> clientSecret;

    /**
     * @return Client secret of the Application in the AAD Identity Provider.
     * 
     */
    public Optional<Output<String>> clientSecret() {
        return Optional.ofNullable(this.clientSecret);
    }

    /**
     * The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="resourceGroupName")
    private @Nullable Output<String> resourceGroupName;

    /**
     * @return The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> resourceGroupName() {
        return Optional.ofNullable(this.resourceGroupName);
    }

    /**
     * The AAD Tenant to use instead of Common when logging into Active Directory
     * 
     */
    @Import(name="signinTenant")
    private @Nullable Output<String> signinTenant;

    /**
     * @return The AAD Tenant to use instead of Common when logging into Active Directory
     * 
     */
    public Optional<Output<String>> signinTenant() {
        return Optional.ofNullable(this.signinTenant);
    }

    private IdentityProviderAadState() {}

    private IdentityProviderAadState(IdentityProviderAadState $) {
        this.allowedTenants = $.allowedTenants;
        this.apiManagementName = $.apiManagementName;
        this.clientId = $.clientId;
        this.clientSecret = $.clientSecret;
        this.resourceGroupName = $.resourceGroupName;
        this.signinTenant = $.signinTenant;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IdentityProviderAadState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IdentityProviderAadState $;

        public Builder() {
            $ = new IdentityProviderAadState();
        }

        public Builder(IdentityProviderAadState defaults) {
            $ = new IdentityProviderAadState(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedTenants List of allowed AAD Tenants.
         * 
         * @return builder
         * 
         */
        public Builder allowedTenants(@Nullable Output<List<String>> allowedTenants) {
            $.allowedTenants = allowedTenants;
            return this;
        }

        /**
         * @param allowedTenants List of allowed AAD Tenants.
         * 
         * @return builder
         * 
         */
        public Builder allowedTenants(List<String> allowedTenants) {
            return allowedTenants(Output.of(allowedTenants));
        }

        /**
         * @param allowedTenants List of allowed AAD Tenants.
         * 
         * @return builder
         * 
         */
        public Builder allowedTenants(String... allowedTenants) {
            return allowedTenants(List.of(allowedTenants));
        }

        /**
         * @param apiManagementName The Name of the API Management Service where this AAD Identity Provider should be created. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder apiManagementName(@Nullable Output<String> apiManagementName) {
            $.apiManagementName = apiManagementName;
            return this;
        }

        /**
         * @param apiManagementName The Name of the API Management Service where this AAD Identity Provider should be created. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder apiManagementName(String apiManagementName) {
            return apiManagementName(Output.of(apiManagementName));
        }

        /**
         * @param clientId Client Id of the Application in the AAD Identity Provider.
         * 
         * @return builder
         * 
         */
        public Builder clientId(@Nullable Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId Client Id of the Application in the AAD Identity Provider.
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param clientSecret Client secret of the Application in the AAD Identity Provider.
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(@Nullable Output<String> clientSecret) {
            $.clientSecret = clientSecret;
            return this;
        }

        /**
         * @param clientSecret Client secret of the Application in the AAD Identity Provider.
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(String clientSecret) {
            return clientSecret(Output.of(clientSecret));
        }

        /**
         * @param resourceGroupName The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(@Nullable Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param signinTenant The AAD Tenant to use instead of Common when logging into Active Directory
         * 
         * @return builder
         * 
         */
        public Builder signinTenant(@Nullable Output<String> signinTenant) {
            $.signinTenant = signinTenant;
            return this;
        }

        /**
         * @param signinTenant The AAD Tenant to use instead of Common when logging into Active Directory
         * 
         * @return builder
         * 
         */
        public Builder signinTenant(String signinTenant) {
            return signinTenant(Output.of(signinTenant));
        }

        public IdentityProviderAadState build() {
            return $;
        }
    }

}
