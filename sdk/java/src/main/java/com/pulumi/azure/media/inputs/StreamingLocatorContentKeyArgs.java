// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.media.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamingLocatorContentKeyArgs extends com.pulumi.resources.ResourceArgs {

    public static final StreamingLocatorContentKeyArgs Empty = new StreamingLocatorContentKeyArgs();

    /**
     * ID of Content Key. Changing this forces a new Streaming Locator to be created.
     * 
     */
    @Import(name="contentKeyId")
    private @Nullable Output<String> contentKeyId;

    /**
     * @return ID of Content Key. Changing this forces a new Streaming Locator to be created.
     * 
     */
    public Optional<Output<String>> contentKeyId() {
        return Optional.ofNullable(this.contentKeyId);
    }

    /**
     * Label of Content Key as specified in the Streaming Policy. Changing this forces a new Streaming Locator to be created.
     * 
     */
    @Import(name="labelReferenceInStreamingPolicy")
    private @Nullable Output<String> labelReferenceInStreamingPolicy;

    /**
     * @return Label of Content Key as specified in the Streaming Policy. Changing this forces a new Streaming Locator to be created.
     * 
     */
    public Optional<Output<String>> labelReferenceInStreamingPolicy() {
        return Optional.ofNullable(this.labelReferenceInStreamingPolicy);
    }

    /**
     * Content Key Policy used by Content Key. Changing this forces a new Streaming Locator to be created.
     * 
     */
    @Import(name="policyName")
    private @Nullable Output<String> policyName;

    /**
     * @return Content Key Policy used by Content Key. Changing this forces a new Streaming Locator to be created.
     * 
     */
    public Optional<Output<String>> policyName() {
        return Optional.ofNullable(this.policyName);
    }

    /**
     * Encryption type of Content Key. Supported values are `CommonEncryptionCbcs`, `CommonEncryptionCenc` or `EnvelopeEncryption`. Changing this forces a new Streaming Locator to be created.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Encryption type of Content Key. Supported values are `CommonEncryptionCbcs`, `CommonEncryptionCenc` or `EnvelopeEncryption`. Changing this forces a new Streaming Locator to be created.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Value of Content Key. Changing this forces a new Streaming Locator to be created.
     * 
     */
    @Import(name="value")
    private @Nullable Output<String> value;

    /**
     * @return Value of Content Key. Changing this forces a new Streaming Locator to be created.
     * 
     */
    public Optional<Output<String>> value() {
        return Optional.ofNullable(this.value);
    }

    private StreamingLocatorContentKeyArgs() {}

    private StreamingLocatorContentKeyArgs(StreamingLocatorContentKeyArgs $) {
        this.contentKeyId = $.contentKeyId;
        this.labelReferenceInStreamingPolicy = $.labelReferenceInStreamingPolicy;
        this.policyName = $.policyName;
        this.type = $.type;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamingLocatorContentKeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamingLocatorContentKeyArgs $;

        public Builder() {
            $ = new StreamingLocatorContentKeyArgs();
        }

        public Builder(StreamingLocatorContentKeyArgs defaults) {
            $ = new StreamingLocatorContentKeyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param contentKeyId ID of Content Key. Changing this forces a new Streaming Locator to be created.
         * 
         * @return builder
         * 
         */
        public Builder contentKeyId(@Nullable Output<String> contentKeyId) {
            $.contentKeyId = contentKeyId;
            return this;
        }

        /**
         * @param contentKeyId ID of Content Key. Changing this forces a new Streaming Locator to be created.
         * 
         * @return builder
         * 
         */
        public Builder contentKeyId(String contentKeyId) {
            return contentKeyId(Output.of(contentKeyId));
        }

        /**
         * @param labelReferenceInStreamingPolicy Label of Content Key as specified in the Streaming Policy. Changing this forces a new Streaming Locator to be created.
         * 
         * @return builder
         * 
         */
        public Builder labelReferenceInStreamingPolicy(@Nullable Output<String> labelReferenceInStreamingPolicy) {
            $.labelReferenceInStreamingPolicy = labelReferenceInStreamingPolicy;
            return this;
        }

        /**
         * @param labelReferenceInStreamingPolicy Label of Content Key as specified in the Streaming Policy. Changing this forces a new Streaming Locator to be created.
         * 
         * @return builder
         * 
         */
        public Builder labelReferenceInStreamingPolicy(String labelReferenceInStreamingPolicy) {
            return labelReferenceInStreamingPolicy(Output.of(labelReferenceInStreamingPolicy));
        }

        /**
         * @param policyName Content Key Policy used by Content Key. Changing this forces a new Streaming Locator to be created.
         * 
         * @return builder
         * 
         */
        public Builder policyName(@Nullable Output<String> policyName) {
            $.policyName = policyName;
            return this;
        }

        /**
         * @param policyName Content Key Policy used by Content Key. Changing this forces a new Streaming Locator to be created.
         * 
         * @return builder
         * 
         */
        public Builder policyName(String policyName) {
            return policyName(Output.of(policyName));
        }

        /**
         * @param type Encryption type of Content Key. Supported values are `CommonEncryptionCbcs`, `CommonEncryptionCenc` or `EnvelopeEncryption`. Changing this forces a new Streaming Locator to be created.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Encryption type of Content Key. Supported values are `CommonEncryptionCbcs`, `CommonEncryptionCenc` or `EnvelopeEncryption`. Changing this forces a new Streaming Locator to be created.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param value Value of Content Key. Changing this forces a new Streaming Locator to be created.
         * 
         * @return builder
         * 
         */
        public Builder value(@Nullable Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value Value of Content Key. Changing this forces a new Streaming Locator to be created.
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        public StreamingLocatorContentKeyArgs build() {
            return $;
        }
    }

}
