// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.devcenter.outputs;

import com.pulumi.azure.devcenter.outputs.GetProjectIdentity;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetProjectResult {
    /**
     * @return The description of the Dev Center Project.
     * 
     */
    private String description;
    /**
     * @return The ID of the associated Dev Center.
     * 
     */
    private String devCenterId;
    /**
     * @return The URI of the Dev Center.
     * 
     */
    private String devCenterUri;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return An `identity` block as defined below.
     * 
     */
    private List<GetProjectIdentity> identities;
    /**
     * @return The Azure Region where the Dev Center Project exists.
     * 
     */
    private String location;
    /**
     * @return The maximum number of Dev Boxes a single user can create across all pools in the project.
     * 
     */
    private Integer maximumDevBoxesPerUser;
    private String name;
    private String resourceGroupName;
    /**
     * @return A mapping of tags assigned to the Dev Center Project.
     * 
     */
    private Map<String,String> tags;

    private GetProjectResult() {}
    /**
     * @return The description of the Dev Center Project.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The ID of the associated Dev Center.
     * 
     */
    public String devCenterId() {
        return this.devCenterId;
    }
    /**
     * @return The URI of the Dev Center.
     * 
     */
    public String devCenterUri() {
        return this.devCenterUri;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return An `identity` block as defined below.
     * 
     */
    public List<GetProjectIdentity> identities() {
        return this.identities;
    }
    /**
     * @return The Azure Region where the Dev Center Project exists.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return The maximum number of Dev Boxes a single user can create across all pools in the project.
     * 
     */
    public Integer maximumDevBoxesPerUser() {
        return this.maximumDevBoxesPerUser;
    }
    public String name() {
        return this.name;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return A mapping of tags assigned to the Dev Center Project.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProjectResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String description;
        private String devCenterId;
        private String devCenterUri;
        private String id;
        private List<GetProjectIdentity> identities;
        private String location;
        private Integer maximumDevBoxesPerUser;
        private String name;
        private String resourceGroupName;
        private Map<String,String> tags;
        public Builder() {}
        public Builder(GetProjectResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.devCenterId = defaults.devCenterId;
    	      this.devCenterUri = defaults.devCenterUri;
    	      this.id = defaults.id;
    	      this.identities = defaults.identities;
    	      this.location = defaults.location;
    	      this.maximumDevBoxesPerUser = defaults.maximumDevBoxesPerUser;
    	      this.name = defaults.name;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder devCenterId(String devCenterId) {
            if (devCenterId == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "devCenterId");
            }
            this.devCenterId = devCenterId;
            return this;
        }
        @CustomType.Setter
        public Builder devCenterUri(String devCenterUri) {
            if (devCenterUri == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "devCenterUri");
            }
            this.devCenterUri = devCenterUri;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder identities(List<GetProjectIdentity> identities) {
            if (identities == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "identities");
            }
            this.identities = identities;
            return this;
        }
        public Builder identities(GetProjectIdentity... identities) {
            return identities(List.of(identities));
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder maximumDevBoxesPerUser(Integer maximumDevBoxesPerUser) {
            if (maximumDevBoxesPerUser == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "maximumDevBoxesPerUser");
            }
            this.maximumDevBoxesPerUser = maximumDevBoxesPerUser;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            if (resourceGroupName == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "resourceGroupName");
            }
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public GetProjectResult build() {
            final var _resultValue = new GetProjectResult();
            _resultValue.description = description;
            _resultValue.devCenterId = devCenterId;
            _resultValue.devCenterUri = devCenterUri;
            _resultValue.id = id;
            _resultValue.identities = identities;
            _resultValue.location = location;
            _resultValue.maximumDevBoxesPerUser = maximumDevBoxesPerUser;
            _resultValue.name = name;
            _resultValue.resourceGroupName = resourceGroupName;
            _resultValue.tags = tags;
            return _resultValue;
        }
    }
}
