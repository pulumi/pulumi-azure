// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.monitoring.outputs;

import com.pulumi.azure.monitoring.outputs.AutoscaleSettingProfileRuleMetricTriggerDimension;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AutoscaleSettingProfileRuleMetricTrigger {
    /**
     * @return One or more `dimensions` block as defined below.
     * 
     */
    private final @Nullable List<AutoscaleSettingProfileRuleMetricTriggerDimension> dimensions;
    /**
     * @return Whether to enable metric divide by instance count.
     * 
     */
    private final @Nullable Boolean divideByInstanceCount;
    /**
     * @return The name of the metric that defines what the rule monitors, such as `Percentage CPU` for `Virtual Machine Scale Sets` and `CpuPercentage` for `App Service Plan`.
     * 
     */
    private final String metricName;
    /**
     * @return The namespace of the metric that defines what the rule monitors, such as `microsoft.compute/virtualmachinescalesets` for `Virtual Machine Scale Sets`.
     * 
     */
    private final @Nullable String metricNamespace;
    /**
     * @return The ID of the Resource which the Rule monitors.
     * 
     */
    private final String metricResourceId;
    /**
     * @return Specifies the operator used to compare the metric data and threshold. Possible values are: `Equals`, `NotEquals`, `GreaterThan`, `GreaterThanOrEqual`, `LessThan`, `LessThanOrEqual`.
     * 
     */
    private final String operator;
    /**
     * @return Specifies how the metrics from multiple instances are combined. Possible values are `Average`, `Min` and `Max`.
     * 
     */
    private final String statistic;
    /**
     * @return Specifies the threshold of the metric that triggers the scale action.
     * 
     */
    private final Double threshold;
    /**
     * @return Specifies how the data that&#39;s collected should be combined over time. Possible values include `Average`, `Count`, `Maximum`, `Minimum`, `Last` and `Total`. Defaults to `Average`.
     * 
     */
    private final String timeAggregation;
    /**
     * @return Specifies the granularity of metrics that the rule monitors, which must be one of the pre-defined values returned from the metric definitions for the metric. This value must be between 1 minute and 12 hours an be formatted as an ISO 8601 string.
     * 
     */
    private final String timeGrain;
    /**
     * @return Specifies the time range for which data is collected, which must be greater than the delay in metric collection (which varies from resource to resource). This value must be between 5 minutes and 12 hours and be formatted as an ISO 8601 string.
     * 
     */
    private final String timeWindow;

    @CustomType.Constructor
    private AutoscaleSettingProfileRuleMetricTrigger(
        @CustomType.Parameter("dimensions") @Nullable List<AutoscaleSettingProfileRuleMetricTriggerDimension> dimensions,
        @CustomType.Parameter("divideByInstanceCount") @Nullable Boolean divideByInstanceCount,
        @CustomType.Parameter("metricName") String metricName,
        @CustomType.Parameter("metricNamespace") @Nullable String metricNamespace,
        @CustomType.Parameter("metricResourceId") String metricResourceId,
        @CustomType.Parameter("operator") String operator,
        @CustomType.Parameter("statistic") String statistic,
        @CustomType.Parameter("threshold") Double threshold,
        @CustomType.Parameter("timeAggregation") String timeAggregation,
        @CustomType.Parameter("timeGrain") String timeGrain,
        @CustomType.Parameter("timeWindow") String timeWindow) {
        this.dimensions = dimensions;
        this.divideByInstanceCount = divideByInstanceCount;
        this.metricName = metricName;
        this.metricNamespace = metricNamespace;
        this.metricResourceId = metricResourceId;
        this.operator = operator;
        this.statistic = statistic;
        this.threshold = threshold;
        this.timeAggregation = timeAggregation;
        this.timeGrain = timeGrain;
        this.timeWindow = timeWindow;
    }

    /**
     * @return One or more `dimensions` block as defined below.
     * 
     */
    public List<AutoscaleSettingProfileRuleMetricTriggerDimension> dimensions() {
        return this.dimensions == null ? List.of() : this.dimensions;
    }
    /**
     * @return Whether to enable metric divide by instance count.
     * 
     */
    public Optional<Boolean> divideByInstanceCount() {
        return Optional.ofNullable(this.divideByInstanceCount);
    }
    /**
     * @return The name of the metric that defines what the rule monitors, such as `Percentage CPU` for `Virtual Machine Scale Sets` and `CpuPercentage` for `App Service Plan`.
     * 
     */
    public String metricName() {
        return this.metricName;
    }
    /**
     * @return The namespace of the metric that defines what the rule monitors, such as `microsoft.compute/virtualmachinescalesets` for `Virtual Machine Scale Sets`.
     * 
     */
    public Optional<String> metricNamespace() {
        return Optional.ofNullable(this.metricNamespace);
    }
    /**
     * @return The ID of the Resource which the Rule monitors.
     * 
     */
    public String metricResourceId() {
        return this.metricResourceId;
    }
    /**
     * @return Specifies the operator used to compare the metric data and threshold. Possible values are: `Equals`, `NotEquals`, `GreaterThan`, `GreaterThanOrEqual`, `LessThan`, `LessThanOrEqual`.
     * 
     */
    public String operator() {
        return this.operator;
    }
    /**
     * @return Specifies how the metrics from multiple instances are combined. Possible values are `Average`, `Min` and `Max`.
     * 
     */
    public String statistic() {
        return this.statistic;
    }
    /**
     * @return Specifies the threshold of the metric that triggers the scale action.
     * 
     */
    public Double threshold() {
        return this.threshold;
    }
    /**
     * @return Specifies how the data that&#39;s collected should be combined over time. Possible values include `Average`, `Count`, `Maximum`, `Minimum`, `Last` and `Total`. Defaults to `Average`.
     * 
     */
    public String timeAggregation() {
        return this.timeAggregation;
    }
    /**
     * @return Specifies the granularity of metrics that the rule monitors, which must be one of the pre-defined values returned from the metric definitions for the metric. This value must be between 1 minute and 12 hours an be formatted as an ISO 8601 string.
     * 
     */
    public String timeGrain() {
        return this.timeGrain;
    }
    /**
     * @return Specifies the time range for which data is collected, which must be greater than the delay in metric collection (which varies from resource to resource). This value must be between 5 minutes and 12 hours and be formatted as an ISO 8601 string.
     * 
     */
    public String timeWindow() {
        return this.timeWindow;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AutoscaleSettingProfileRuleMetricTrigger defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<AutoscaleSettingProfileRuleMetricTriggerDimension> dimensions;
        private @Nullable Boolean divideByInstanceCount;
        private String metricName;
        private @Nullable String metricNamespace;
        private String metricResourceId;
        private String operator;
        private String statistic;
        private Double threshold;
        private String timeAggregation;
        private String timeGrain;
        private String timeWindow;

        public Builder() {
    	      // Empty
        }

        public Builder(AutoscaleSettingProfileRuleMetricTrigger defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dimensions = defaults.dimensions;
    	      this.divideByInstanceCount = defaults.divideByInstanceCount;
    	      this.metricName = defaults.metricName;
    	      this.metricNamespace = defaults.metricNamespace;
    	      this.metricResourceId = defaults.metricResourceId;
    	      this.operator = defaults.operator;
    	      this.statistic = defaults.statistic;
    	      this.threshold = defaults.threshold;
    	      this.timeAggregation = defaults.timeAggregation;
    	      this.timeGrain = defaults.timeGrain;
    	      this.timeWindow = defaults.timeWindow;
        }

        public Builder dimensions(@Nullable List<AutoscaleSettingProfileRuleMetricTriggerDimension> dimensions) {
            this.dimensions = dimensions;
            return this;
        }
        public Builder dimensions(AutoscaleSettingProfileRuleMetricTriggerDimension... dimensions) {
            return dimensions(List.of(dimensions));
        }
        public Builder divideByInstanceCount(@Nullable Boolean divideByInstanceCount) {
            this.divideByInstanceCount = divideByInstanceCount;
            return this;
        }
        public Builder metricName(String metricName) {
            this.metricName = Objects.requireNonNull(metricName);
            return this;
        }
        public Builder metricNamespace(@Nullable String metricNamespace) {
            this.metricNamespace = metricNamespace;
            return this;
        }
        public Builder metricResourceId(String metricResourceId) {
            this.metricResourceId = Objects.requireNonNull(metricResourceId);
            return this;
        }
        public Builder operator(String operator) {
            this.operator = Objects.requireNonNull(operator);
            return this;
        }
        public Builder statistic(String statistic) {
            this.statistic = Objects.requireNonNull(statistic);
            return this;
        }
        public Builder threshold(Double threshold) {
            this.threshold = Objects.requireNonNull(threshold);
            return this;
        }
        public Builder timeAggregation(String timeAggregation) {
            this.timeAggregation = Objects.requireNonNull(timeAggregation);
            return this;
        }
        public Builder timeGrain(String timeGrain) {
            this.timeGrain = Objects.requireNonNull(timeGrain);
            return this;
        }
        public Builder timeWindow(String timeWindow) {
            this.timeWindow = Objects.requireNonNull(timeWindow);
            return this;
        }        public AutoscaleSettingProfileRuleMetricTrigger build() {
            return new AutoscaleSettingProfileRuleMetricTrigger(dimensions, divideByInstanceCount, metricName, metricNamespace, metricResourceId, operator, statistic, threshold, timeAggregation, timeGrain, timeWindow);
        }
    }
}
