// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network.inputs;

import com.pulumi.azure.network.inputs.RouteMapRuleActionArgs;
import com.pulumi.azure.network.inputs.RouteMapRuleMatchCriterionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RouteMapRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final RouteMapRuleArgs Empty = new RouteMapRuleArgs();

    /**
     * An `action` block as defined below.
     * 
     */
    @Import(name="actions")
    private @Nullable Output<List<RouteMapRuleActionArgs>> actions;

    /**
     * @return An `action` block as defined below.
     * 
     */
    public Optional<Output<List<RouteMapRuleActionArgs>>> actions() {
        return Optional.ofNullable(this.actions);
    }

    /**
     * A `match_criterion` block as defined below.
     * 
     */
    @Import(name="matchCriterions")
    private @Nullable Output<List<RouteMapRuleMatchCriterionArgs>> matchCriterions;

    /**
     * @return A `match_criterion` block as defined below.
     * 
     */
    public Optional<Output<List<RouteMapRuleMatchCriterionArgs>>> matchCriterions() {
        return Optional.ofNullable(this.matchCriterions);
    }

    /**
     * The unique name for the rule.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The unique name for the rule.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The next step after the rule is evaluated. Possible values are `Continue`, `Terminate` and `Unknown`. Defaults to `Unknown`.
     * 
     */
    @Import(name="nextStepIfMatched")
    private @Nullable Output<String> nextStepIfMatched;

    /**
     * @return The next step after the rule is evaluated. Possible values are `Continue`, `Terminate` and `Unknown`. Defaults to `Unknown`.
     * 
     */
    public Optional<Output<String>> nextStepIfMatched() {
        return Optional.ofNullable(this.nextStepIfMatched);
    }

    private RouteMapRuleArgs() {}

    private RouteMapRuleArgs(RouteMapRuleArgs $) {
        this.actions = $.actions;
        this.matchCriterions = $.matchCriterions;
        this.name = $.name;
        this.nextStepIfMatched = $.nextStepIfMatched;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RouteMapRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RouteMapRuleArgs $;

        public Builder() {
            $ = new RouteMapRuleArgs();
        }

        public Builder(RouteMapRuleArgs defaults) {
            $ = new RouteMapRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param actions An `action` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder actions(@Nullable Output<List<RouteMapRuleActionArgs>> actions) {
            $.actions = actions;
            return this;
        }

        /**
         * @param actions An `action` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder actions(List<RouteMapRuleActionArgs> actions) {
            return actions(Output.of(actions));
        }

        /**
         * @param actions An `action` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder actions(RouteMapRuleActionArgs... actions) {
            return actions(List.of(actions));
        }

        /**
         * @param matchCriterions A `match_criterion` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder matchCriterions(@Nullable Output<List<RouteMapRuleMatchCriterionArgs>> matchCriterions) {
            $.matchCriterions = matchCriterions;
            return this;
        }

        /**
         * @param matchCriterions A `match_criterion` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder matchCriterions(List<RouteMapRuleMatchCriterionArgs> matchCriterions) {
            return matchCriterions(Output.of(matchCriterions));
        }

        /**
         * @param matchCriterions A `match_criterion` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder matchCriterions(RouteMapRuleMatchCriterionArgs... matchCriterions) {
            return matchCriterions(List.of(matchCriterions));
        }

        /**
         * @param name The unique name for the rule.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The unique name for the rule.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nextStepIfMatched The next step after the rule is evaluated. Possible values are `Continue`, `Terminate` and `Unknown`. Defaults to `Unknown`.
         * 
         * @return builder
         * 
         */
        public Builder nextStepIfMatched(@Nullable Output<String> nextStepIfMatched) {
            $.nextStepIfMatched = nextStepIfMatched;
            return this;
        }

        /**
         * @param nextStepIfMatched The next step after the rule is evaluated. Possible values are `Continue`, `Terminate` and `Unknown`. Defaults to `Unknown`.
         * 
         * @return builder
         * 
         */
        public Builder nextStepIfMatched(String nextStepIfMatched) {
            return nextStepIfMatched(Output.of(nextStepIfMatched));
        }

        public RouteMapRuleArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("RouteMapRuleArgs", "name");
            }
            return $;
        }
    }

}
