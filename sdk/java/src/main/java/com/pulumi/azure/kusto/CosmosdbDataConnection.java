// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.kusto;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.kusto.CosmosdbDataConnectionArgs;
import com.pulumi.azure.kusto.inputs.CosmosdbDataConnectionState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a Kusto / Cosmos Database Data Connection.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.CoreFunctions;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.authorization.AuthorizationFunctions;
 * import com.pulumi.azure.authorization.inputs.GetRoleDefinitionArgs;
 * import com.pulumi.azure.kusto.Cluster;
 * import com.pulumi.azure.kusto.ClusterArgs;
 * import com.pulumi.azure.kusto.inputs.ClusterSkuArgs;
 * import com.pulumi.azure.kusto.inputs.ClusterIdentityArgs;
 * import com.pulumi.azure.authorization.Assignment;
 * import com.pulumi.azure.authorization.AssignmentArgs;
 * import com.pulumi.azure.cosmosdb.Account;
 * import com.pulumi.azure.cosmosdb.AccountArgs;
 * import com.pulumi.azure.cosmosdb.inputs.AccountConsistencyPolicyArgs;
 * import com.pulumi.azure.cosmosdb.inputs.AccountGeoLocationArgs;
 * import com.pulumi.azure.cosmosdb.SqlDatabase;
 * import com.pulumi.azure.cosmosdb.SqlDatabaseArgs;
 * import com.pulumi.azure.cosmosdb.SqlContainer;
 * import com.pulumi.azure.cosmosdb.SqlContainerArgs;
 * import com.pulumi.azure.cosmosdb.CosmosdbFunctions;
 * import com.pulumi.azure.cosmosdb.inputs.GetSqlRoleDefinitionArgs;
 * import com.pulumi.azure.cosmosdb.SqlRoleAssignment;
 * import com.pulumi.azure.cosmosdb.SqlRoleAssignmentArgs;
 * import com.pulumi.azure.kusto.Database;
 * import com.pulumi.azure.kusto.DatabaseArgs;
 * import com.pulumi.azure.kusto.Script;
 * import com.pulumi.azure.kusto.ScriptArgs;
 * import com.pulumi.azure.kusto.CosmosdbDataConnection;
 * import com.pulumi.azure.kusto.CosmosdbDataConnectionArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var current = CoreFunctions.getClientConfig();
 * 
 *         var exampleResourceGroup = new ResourceGroup(&#34;exampleResourceGroup&#34;, ResourceGroupArgs.builder()        
 *             .location(&#34;West Europe&#34;)
 *             .build());
 * 
 *         final var builtin = AuthorizationFunctions.getRoleDefinition(GetRoleDefinitionArgs.builder()
 *             .roleDefinitionId(&#34;fbdf93bf-df7d-467e-a4d2-9458aa1360c8&#34;)
 *             .build());
 * 
 *         var exampleCluster = new Cluster(&#34;exampleCluster&#34;, ClusterArgs.builder()        
 *             .location(exampleResourceGroup.location())
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .sku(ClusterSkuArgs.builder()
 *                 .name(&#34;Dev(No SLA)_Standard_D11_v2&#34;)
 *                 .capacity(1)
 *                 .build())
 *             .identity(ClusterIdentityArgs.builder()
 *                 .type(&#34;SystemAssigned&#34;)
 *                 .build())
 *             .build());
 * 
 *         var exampleAssignment = new Assignment(&#34;exampleAssignment&#34;, AssignmentArgs.builder()        
 *             .scope(exampleResourceGroup.id())
 *             .roleDefinitionName(builtin.applyValue(getRoleDefinitionResult -&gt; getRoleDefinitionResult.name()))
 *             .principalId(exampleCluster.identity().applyValue(identity -&gt; identity.principalId()))
 *             .build());
 * 
 *         var exampleAccount = new Account(&#34;exampleAccount&#34;, AccountArgs.builder()        
 *             .location(exampleResourceGroup.location())
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .offerType(&#34;Standard&#34;)
 *             .kind(&#34;GlobalDocumentDB&#34;)
 *             .consistencyPolicy(AccountConsistencyPolicyArgs.builder()
 *                 .consistencyLevel(&#34;Session&#34;)
 *                 .maxIntervalInSeconds(5)
 *                 .maxStalenessPrefix(100)
 *                 .build())
 *             .geoLocations(AccountGeoLocationArgs.builder()
 *                 .location(exampleResourceGroup.location())
 *                 .failoverPriority(0)
 *                 .build())
 *             .build());
 * 
 *         var exampleSqlDatabase = new SqlDatabase(&#34;exampleSqlDatabase&#34;, SqlDatabaseArgs.builder()        
 *             .resourceGroupName(exampleAccount.resourceGroupName())
 *             .accountName(exampleAccount.name())
 *             .build());
 * 
 *         var exampleSqlContainer = new SqlContainer(&#34;exampleSqlContainer&#34;, SqlContainerArgs.builder()        
 *             .resourceGroupName(exampleAccount.resourceGroupName())
 *             .accountName(exampleAccount.name())
 *             .databaseName(exampleSqlDatabase.name())
 *             .partitionKeyPath(&#34;/part&#34;)
 *             .throughput(400)
 *             .build());
 * 
 *         final var exampleSqlRoleDefinition = CosmosdbFunctions.getSqlRoleDefinition(GetSqlRoleDefinitionArgs.builder()
 *             .roleDefinitionId(&#34;00000000-0000-0000-0000-000000000001&#34;)
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .accountName(exampleAccount.name())
 *             .build());
 * 
 *         var exampleSqlRoleAssignment = new SqlRoleAssignment(&#34;exampleSqlRoleAssignment&#34;, SqlRoleAssignmentArgs.builder()        
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .accountName(exampleAccount.name())
 *             .roleDefinitionId(exampleSqlRoleDefinition.applyValue(getSqlRoleDefinitionResult -&gt; getSqlRoleDefinitionResult).applyValue(exampleSqlRoleDefinition -&gt; exampleSqlRoleDefinition.applyValue(getSqlRoleDefinitionResult -&gt; getSqlRoleDefinitionResult.id())))
 *             .principalId(exampleCluster.identity().applyValue(identity -&gt; identity.principalId()))
 *             .scope(exampleAccount.id())
 *             .build());
 * 
 *         var exampleDatabase = new Database(&#34;exampleDatabase&#34;, DatabaseArgs.builder()        
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .location(exampleResourceGroup.location())
 *             .clusterName(exampleCluster.name())
 *             .build());
 * 
 *         var exampleScript = new Script(&#34;exampleScript&#34;, ScriptArgs.builder()        
 *             .databaseId(exampleDatabase.id())
 *             .scriptContent(&#34;&#34;&#34;
 * .create table TestTable(Id:string, Name:string, _ts:long, _timestamp:datetime)
 * .create table TestTable ingestion json mapping &#34;TestMapping&#34;
 * &#39;[&#39;
 * &#39;    {&#34;column&#34;:&#34;Id&#34;,&#34;path&#34;:&#34;$.id&#34;},&#39;
 * &#39;    {&#34;column&#34;:&#34;Name&#34;,&#34;path&#34;:&#34;$.name&#34;},&#39;
 * &#39;    {&#34;column&#34;:&#34;_ts&#34;,&#34;path&#34;:&#34;$._ts&#34;},&#39;
 * &#39;    {&#34;column&#34;:&#34;_timestamp&#34;,&#34;path&#34;:&#34;$._ts&#34;, &#34;transform&#34;:&#34;DateTimeFromUnixSeconds&#34;}&#39;
 * &#39;]&#39;
 * .alter table TestTable policy ingestionbatching &#34;{&#39;MaximumBatchingTimeSpan&#39;: &#39;0:0:10&#39;, &#39;MaximumNumberOfItems&#39;: 10000}&#34;
 *             &#34;&#34;&#34;)
 *             .build());
 * 
 *         var exampleCosmosdbDataConnection = new CosmosdbDataConnection(&#34;exampleCosmosdbDataConnection&#34;, CosmosdbDataConnectionArgs.builder()        
 *             .location(exampleResourceGroup.location())
 *             .cosmosdbContainerId(exampleSqlContainer.id())
 *             .kustoDatabaseId(exampleDatabase.id())
 *             .managedIdentityId(exampleCluster.id())
 *             .tableName(&#34;TestTable&#34;)
 *             .mappingRuleName(&#34;TestMapping&#34;)
 *             .retrievalStartDate(&#34;2023-06-26T12:00:00.6554616Z&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Kusto / Cosmos Database Data Connection can be imported using the `resource id`, e.g.
 * 
 * ```sh
 *  $ pulumi import azure:kusto/cosmosdbDataConnection:CosmosdbDataConnection example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Kusto/clusters/cluster1/databases/database1/dataConnections/dataConnection1
 * ```
 * 
 */
@ResourceType(type="azure:kusto/cosmosdbDataConnection:CosmosdbDataConnection")
public class CosmosdbDataConnection extends com.pulumi.resources.CustomResource {
    /**
     * The name of an existing container in the Cosmos DB database. Changing this forces a new Kusto Cosmos DB Connection to be created.
     * 
     */
    @Export(name="cosmosdbContainerId", refs={String.class}, tree="[0]")
    private Output<String> cosmosdbContainerId;

    /**
     * @return The name of an existing container in the Cosmos DB database. Changing this forces a new Kusto Cosmos DB Connection to be created.
     * 
     */
    public Output<String> cosmosdbContainerId() {
        return this.cosmosdbContainerId;
    }
    /**
     * The name of the database in the Kusto cluster. Changing this forces a new Kusto Cosmos DB Connection to be created.
     * 
     */
    @Export(name="kustoDatabaseId", refs={String.class}, tree="[0]")
    private Output<String> kustoDatabaseId;

    /**
     * @return The name of the database in the Kusto cluster. Changing this forces a new Kusto Cosmos DB Connection to be created.
     * 
     */
    public Output<String> kustoDatabaseId() {
        return this.kustoDatabaseId;
    }
    /**
     * The Azure Region where the Data Explorer should exist. Changing this forces a new Kusto Cosmos DB Connection to be created.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return The Azure Region where the Data Explorer should exist. Changing this forces a new Kusto Cosmos DB Connection to be created.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * The resource ID of a managed system or user-assigned identity. The identity is used to authenticate with Cosmos DB. Changing this forces a new Kusto Cosmos DB Connection to be created.
     * 
     */
    @Export(name="managedIdentityId", refs={String.class}, tree="[0]")
    private Output<String> managedIdentityId;

    /**
     * @return The resource ID of a managed system or user-assigned identity. The identity is used to authenticate with Cosmos DB. Changing this forces a new Kusto Cosmos DB Connection to be created.
     * 
     */
    public Output<String> managedIdentityId() {
        return this.managedIdentityId;
    }
    /**
     * The name of an existing mapping rule to use when ingesting the retrieved data. Changing this forces a new Kusto Cosmos DB Connection to be created.
     * 
     */
    @Export(name="mappingRuleName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> mappingRuleName;

    /**
     * @return The name of an existing mapping rule to use when ingesting the retrieved data. Changing this forces a new Kusto Cosmos DB Connection to be created.
     * 
     */
    public Output<Optional<String>> mappingRuleName() {
        return Codegen.optional(this.mappingRuleName);
    }
    /**
     * The name of the data connection. Changing this forces a new Kusto Cosmos DB Connection to be created.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the data connection. Changing this forces a new Kusto Cosmos DB Connection to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * If defined, the data connection retrieves Cosmos DB documents created or updated after the specified retrieval start date. Changing this forces a new Kusto Cosmos DB Connection to be created.
     * 
     */
    @Export(name="retrievalStartDate", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> retrievalStartDate;

    /**
     * @return If defined, the data connection retrieves Cosmos DB documents created or updated after the specified retrieval start date. Changing this forces a new Kusto Cosmos DB Connection to be created.
     * 
     */
    public Output<Optional<String>> retrievalStartDate() {
        return Codegen.optional(this.retrievalStartDate);
    }
    /**
     * The case-sensitive name of the existing target table in your cluster. Retrieved data is ingested into this table. Changing this forces a new Kusto Cosmos DB Connection to be created.
     * 
     */
    @Export(name="tableName", refs={String.class}, tree="[0]")
    private Output<String> tableName;

    /**
     * @return The case-sensitive name of the existing target table in your cluster. Retrieved data is ingested into this table. Changing this forces a new Kusto Cosmos DB Connection to be created.
     * 
     */
    public Output<String> tableName() {
        return this.tableName;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public CosmosdbDataConnection(String name) {
        this(name, CosmosdbDataConnectionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public CosmosdbDataConnection(String name, CosmosdbDataConnectionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public CosmosdbDataConnection(String name, CosmosdbDataConnectionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:kusto/cosmosdbDataConnection:CosmosdbDataConnection", name, args == null ? CosmosdbDataConnectionArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private CosmosdbDataConnection(String name, Output<String> id, @Nullable CosmosdbDataConnectionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:kusto/cosmosdbDataConnection:CosmosdbDataConnection", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static CosmosdbDataConnection get(String name, Output<String> id, @Nullable CosmosdbDataConnectionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new CosmosdbDataConnection(name, id, state, options);
    }
}
