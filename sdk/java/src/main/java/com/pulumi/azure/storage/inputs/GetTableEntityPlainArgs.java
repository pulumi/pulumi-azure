// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.storage.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class GetTableEntityPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetTableEntityPlainArgs Empty = new GetTableEntityPlainArgs();

    /**
     * The key for the partition where the entity will be retrieved.
     * 
     */
    @Import(name="partitionKey", required=true)
    private String partitionKey;

    /**
     * @return The key for the partition where the entity will be retrieved.
     * 
     */
    public String partitionKey() {
        return this.partitionKey;
    }

    /**
     * The key for the row where the entity will be retrieved.
     * 
     */
    @Import(name="rowKey", required=true)
    private String rowKey;

    /**
     * @return The key for the row where the entity will be retrieved.
     * 
     */
    public String rowKey() {
        return this.rowKey;
    }

    /**
     * The name of the Storage Account where the Table exists.
     * 
     */
    @Import(name="storageAccountName", required=true)
    private String storageAccountName;

    /**
     * @return The name of the Storage Account where the Table exists.
     * 
     */
    public String storageAccountName() {
        return this.storageAccountName;
    }

    /**
     * The name of the Table.
     * 
     */
    @Import(name="tableName", required=true)
    private String tableName;

    /**
     * @return The name of the Table.
     * 
     */
    public String tableName() {
        return this.tableName;
    }

    private GetTableEntityPlainArgs() {}

    private GetTableEntityPlainArgs(GetTableEntityPlainArgs $) {
        this.partitionKey = $.partitionKey;
        this.rowKey = $.rowKey;
        this.storageAccountName = $.storageAccountName;
        this.tableName = $.tableName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetTableEntityPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetTableEntityPlainArgs $;

        public Builder() {
            $ = new GetTableEntityPlainArgs();
        }

        public Builder(GetTableEntityPlainArgs defaults) {
            $ = new GetTableEntityPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param partitionKey The key for the partition where the entity will be retrieved.
         * 
         * @return builder
         * 
         */
        public Builder partitionKey(String partitionKey) {
            $.partitionKey = partitionKey;
            return this;
        }

        /**
         * @param rowKey The key for the row where the entity will be retrieved.
         * 
         * @return builder
         * 
         */
        public Builder rowKey(String rowKey) {
            $.rowKey = rowKey;
            return this;
        }

        /**
         * @param storageAccountName The name of the Storage Account where the Table exists.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountName(String storageAccountName) {
            $.storageAccountName = storageAccountName;
            return this;
        }

        /**
         * @param tableName The name of the Table.
         * 
         * @return builder
         * 
         */
        public Builder tableName(String tableName) {
            $.tableName = tableName;
            return this;
        }

        public GetTableEntityPlainArgs build() {
            if ($.partitionKey == null) {
                throw new MissingRequiredPropertyException("GetTableEntityPlainArgs", "partitionKey");
            }
            if ($.rowKey == null) {
                throw new MissingRequiredPropertyException("GetTableEntityPlainArgs", "rowKey");
            }
            if ($.storageAccountName == null) {
                throw new MissingRequiredPropertyException("GetTableEntityPlainArgs", "storageAccountName");
            }
            if ($.tableName == null) {
                throw new MissingRequiredPropertyException("GetTableEntityPlainArgs", "tableName");
            }
            return $;
        }
    }

}
