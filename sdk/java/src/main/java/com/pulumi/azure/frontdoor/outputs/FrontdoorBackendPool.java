// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.frontdoor.outputs;

import com.pulumi.azure.frontdoor.outputs.FrontdoorBackendPoolBackend;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FrontdoorBackendPool {
    /**
     * @return A `backend` block as defined below.
     * 
     */
    private List<FrontdoorBackendPoolBackend> backends;
    /**
     * @return Specifies the name of the `backend_pool_health_probe` block within this resource to use for this `Backend Pool`.
     * 
     */
    private String healthProbeName;
    /**
     * @return The ID of the FrontDoor.
     * 
     */
    private @Nullable String id;
    /**
     * @return Specifies the name of the `backend_pool_load_balancing` block within this resource to use for this `Backend Pool`.
     * 
     */
    private String loadBalancingName;
    /**
     * @return Specifies the name of the Backend Pool.
     * 
     */
    private String name;

    private FrontdoorBackendPool() {}
    /**
     * @return A `backend` block as defined below.
     * 
     */
    public List<FrontdoorBackendPoolBackend> backends() {
        return this.backends;
    }
    /**
     * @return Specifies the name of the `backend_pool_health_probe` block within this resource to use for this `Backend Pool`.
     * 
     */
    public String healthProbeName() {
        return this.healthProbeName;
    }
    /**
     * @return The ID of the FrontDoor.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Specifies the name of the `backend_pool_load_balancing` block within this resource to use for this `Backend Pool`.
     * 
     */
    public String loadBalancingName() {
        return this.loadBalancingName;
    }
    /**
     * @return Specifies the name of the Backend Pool.
     * 
     */
    public String name() {
        return this.name;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FrontdoorBackendPool defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<FrontdoorBackendPoolBackend> backends;
        private String healthProbeName;
        private @Nullable String id;
        private String loadBalancingName;
        private String name;
        public Builder() {}
        public Builder(FrontdoorBackendPool defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backends = defaults.backends;
    	      this.healthProbeName = defaults.healthProbeName;
    	      this.id = defaults.id;
    	      this.loadBalancingName = defaults.loadBalancingName;
    	      this.name = defaults.name;
        }

        @CustomType.Setter
        public Builder backends(List<FrontdoorBackendPoolBackend> backends) {
            if (backends == null) {
              throw new MissingRequiredPropertyException("FrontdoorBackendPool", "backends");
            }
            this.backends = backends;
            return this;
        }
        public Builder backends(FrontdoorBackendPoolBackend... backends) {
            return backends(List.of(backends));
        }
        @CustomType.Setter
        public Builder healthProbeName(String healthProbeName) {
            if (healthProbeName == null) {
              throw new MissingRequiredPropertyException("FrontdoorBackendPool", "healthProbeName");
            }
            this.healthProbeName = healthProbeName;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder loadBalancingName(String loadBalancingName) {
            if (loadBalancingName == null) {
              throw new MissingRequiredPropertyException("FrontdoorBackendPool", "loadBalancingName");
            }
            this.loadBalancingName = loadBalancingName;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("FrontdoorBackendPool", "name");
            }
            this.name = name;
            return this;
        }
        public FrontdoorBackendPool build() {
            final var _resultValue = new FrontdoorBackendPool();
            _resultValue.backends = backends;
            _resultValue.healthProbeName = healthProbeName;
            _resultValue.id = id;
            _resultValue.loadBalancingName = loadBalancingName;
            _resultValue.name = name;
            return _resultValue;
        }
    }
}
