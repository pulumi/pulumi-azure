// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.oracle.outputs;

import com.pulumi.azure.oracle.outputs.GetExadataInfrastructureDefinedFileSystemConfiguration;
import com.pulumi.azure.oracle.outputs.GetExadataInfrastructureEstimatedPatchingTime;
import com.pulumi.azure.oracle.outputs.GetExadataInfrastructureMaintenanceWindow;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetExadataInfrastructureResult {
    /**
     * @return The requested number of additional storage servers activated for the Cloud Exadata Infrastructure.
     * 
     */
    private Integer activatedStorageCount;
    /**
     * @return The requested number of additional storage servers for the Cloud Exadata Infrastructure.
     * 
     */
    private Integer additionalStorageCount;
    /**
     * @return The available storage can be allocated to the Cloud Exadata Infrastructure resource, in gigabytes (GB).
     * 
     */
    private Integer availableStorageSizeInGbs;
    /**
     * @return The number of compute servers for the Cloud Exadata Infrastructure.
     * 
     */
    private Integer computeCount;
    /**
     * @return The compute model of the Exadata Infrastructure.
     * 
     */
    private String computeModel;
    /**
     * @return The total number of CPU cores allocated.
     * 
     */
    private Integer cpuCount;
    /**
     * @return A `customer_contacts` block as defined below.
     * 
     */
    private List<String> customerContacts;
    /**
     * @return The data storage size in terabytes of the DATA disk group.
     * 
     */
    private Double dataStorageSizeInTbs;
    /**
     * @return The database server model type of the cloud Exadata infrastructure resource.
     * 
     */
    private String databaseServerType;
    /**
     * @return The local node storage allocated in GBs.
     * 
     */
    private Integer dbNodeStorageSizeInGbs;
    /**
     * @return The software version of the database servers (dom0) in the Cloud Exadata Infrastructure.
     * 
     */
    private String dbServerVersion;
    /**
     * @return A `defined_file_system_configuration` block as defined below.
     * 
     */
    private List<GetExadataInfrastructureDefinedFileSystemConfiguration> definedFileSystemConfigurations;
    /**
     * @return The user-friendly name for the Cloud Exadata Infrastructure resource. The name does not need to be unique.
     * 
     */
    private String displayName;
    /**
     * @return A `estimated_patching_time` block as defined below.
     * 
     */
    private List<GetExadataInfrastructureEstimatedPatchingTime> estimatedPatchingTimes;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The [OCID](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm) of the last maintenance run.
     * 
     */
    private String lastMaintenanceRunId;
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return Cloud Exadata Infrastructure lifecycle state.
     * 
     */
    private String lifecycleState;
    /**
     * @return The Azure Region where the Cloud Exadata Infrastructure exists.
     * 
     */
    private String location;
    /**
     * @return A `maintenance_window` block as defined below.
     * 
     */
    private List<GetExadataInfrastructureMaintenanceWindow> maintenanceWindows;
    /**
     * @return The total number of CPU cores available.
     * 
     */
    private Integer maxCpuCount;
    /**
     * @return The total available DATA disk group size.
     * 
     */
    private Double maxDataStorageInTbs;
    /**
     * @return The total local node storage available in GBs.
     * 
     */
    private Integer maxDbNodeStorageSizeInGbs;
    /**
     * @return The total memory available in GBs.
     * 
     */
    private Integer maxMemoryInGbs;
    /**
     * @return The memory allocated in GBs.
     * 
     */
    private Integer memorySizeInGbs;
    /**
     * @return The monthly software version of the database servers (dom0) in the Cloud Exadata Infrastructure.
     * 
     */
    private String monthlyDbServerVersion;
    /**
     * @return The monthly software version of the storage servers (cells) in the Cloud Exadata Infrastructure.
     * 
     */
    private String monthlyStorageServerVersion;
    private String name;
    /**
     * @return The [OCID](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm) of the next maintenance run.
     * 
     */
    private String nextMaintenanceRunId;
    /**
     * @return The URL of the resource in the OCI console.
     * 
     */
    private String ociUrl;
    /**
     * @return The [OCID](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm) of the Cloud Exadata Infrastructure.
     * 
     */
    private String ocid;
    private String resourceGroupName;
    /**
     * @return The model name of the Cloud Exadata Infrastructure resource.
     * 
     */
    private String shape;
    /**
     * @return The number of storage servers for the Cloud Exadata Infrastructure.
     * 
     */
    private Integer storageCount;
    /**
     * @return The storage server model type of the cloud Exadata infrastructure resource.
     * 
     */
    private String storageServerType;
    /**
     * @return The software version of the storage servers (cells) in the Cloud Exadata Infrastructure.
     * 
     */
    private String storageServerVersion;
    /**
     * @return A mapping of tags assigned to the Cloud Exadata Infrastructure.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return The date and time the Cloud Exadata Infrastructure resource was created.
     * 
     */
    private String timeCreated;
    /**
     * @return The total storage allocated to the Cloud Exadata Infrastructure resource, in gigabytes (GB).
     * 
     */
    private Integer totalStorageSizeInGbs;
    /**
     * @return The Cloud Exadata Infrastructure Azure zones.
     * 
     */
    private List<String> zones;

    private GetExadataInfrastructureResult() {}
    /**
     * @return The requested number of additional storage servers activated for the Cloud Exadata Infrastructure.
     * 
     */
    public Integer activatedStorageCount() {
        return this.activatedStorageCount;
    }
    /**
     * @return The requested number of additional storage servers for the Cloud Exadata Infrastructure.
     * 
     */
    public Integer additionalStorageCount() {
        return this.additionalStorageCount;
    }
    /**
     * @return The available storage can be allocated to the Cloud Exadata Infrastructure resource, in gigabytes (GB).
     * 
     */
    public Integer availableStorageSizeInGbs() {
        return this.availableStorageSizeInGbs;
    }
    /**
     * @return The number of compute servers for the Cloud Exadata Infrastructure.
     * 
     */
    public Integer computeCount() {
        return this.computeCount;
    }
    /**
     * @return The compute model of the Exadata Infrastructure.
     * 
     */
    public String computeModel() {
        return this.computeModel;
    }
    /**
     * @return The total number of CPU cores allocated.
     * 
     */
    public Integer cpuCount() {
        return this.cpuCount;
    }
    /**
     * @return A `customer_contacts` block as defined below.
     * 
     */
    public List<String> customerContacts() {
        return this.customerContacts;
    }
    /**
     * @return The data storage size in terabytes of the DATA disk group.
     * 
     */
    public Double dataStorageSizeInTbs() {
        return this.dataStorageSizeInTbs;
    }
    /**
     * @return The database server model type of the cloud Exadata infrastructure resource.
     * 
     */
    public String databaseServerType() {
        return this.databaseServerType;
    }
    /**
     * @return The local node storage allocated in GBs.
     * 
     */
    public Integer dbNodeStorageSizeInGbs() {
        return this.dbNodeStorageSizeInGbs;
    }
    /**
     * @return The software version of the database servers (dom0) in the Cloud Exadata Infrastructure.
     * 
     */
    public String dbServerVersion() {
        return this.dbServerVersion;
    }
    /**
     * @return A `defined_file_system_configuration` block as defined below.
     * 
     */
    public List<GetExadataInfrastructureDefinedFileSystemConfiguration> definedFileSystemConfigurations() {
        return this.definedFileSystemConfigurations;
    }
    /**
     * @return The user-friendly name for the Cloud Exadata Infrastructure resource. The name does not need to be unique.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return A `estimated_patching_time` block as defined below.
     * 
     */
    public List<GetExadataInfrastructureEstimatedPatchingTime> estimatedPatchingTimes() {
        return this.estimatedPatchingTimes;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The [OCID](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm) of the last maintenance run.
     * 
     */
    public String lastMaintenanceRunId() {
        return this.lastMaintenanceRunId;
    }
    /**
     * @return Additional information about the current lifecycle state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return Cloud Exadata Infrastructure lifecycle state.
     * 
     */
    public String lifecycleState() {
        return this.lifecycleState;
    }
    /**
     * @return The Azure Region where the Cloud Exadata Infrastructure exists.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return A `maintenance_window` block as defined below.
     * 
     */
    public List<GetExadataInfrastructureMaintenanceWindow> maintenanceWindows() {
        return this.maintenanceWindows;
    }
    /**
     * @return The total number of CPU cores available.
     * 
     */
    public Integer maxCpuCount() {
        return this.maxCpuCount;
    }
    /**
     * @return The total available DATA disk group size.
     * 
     */
    public Double maxDataStorageInTbs() {
        return this.maxDataStorageInTbs;
    }
    /**
     * @return The total local node storage available in GBs.
     * 
     */
    public Integer maxDbNodeStorageSizeInGbs() {
        return this.maxDbNodeStorageSizeInGbs;
    }
    /**
     * @return The total memory available in GBs.
     * 
     */
    public Integer maxMemoryInGbs() {
        return this.maxMemoryInGbs;
    }
    /**
     * @return The memory allocated in GBs.
     * 
     */
    public Integer memorySizeInGbs() {
        return this.memorySizeInGbs;
    }
    /**
     * @return The monthly software version of the database servers (dom0) in the Cloud Exadata Infrastructure.
     * 
     */
    public String monthlyDbServerVersion() {
        return this.monthlyDbServerVersion;
    }
    /**
     * @return The monthly software version of the storage servers (cells) in the Cloud Exadata Infrastructure.
     * 
     */
    public String monthlyStorageServerVersion() {
        return this.monthlyStorageServerVersion;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return The [OCID](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm) of the next maintenance run.
     * 
     */
    public String nextMaintenanceRunId() {
        return this.nextMaintenanceRunId;
    }
    /**
     * @return The URL of the resource in the OCI console.
     * 
     */
    public String ociUrl() {
        return this.ociUrl;
    }
    /**
     * @return The [OCID](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm) of the Cloud Exadata Infrastructure.
     * 
     */
    public String ocid() {
        return this.ocid;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return The model name of the Cloud Exadata Infrastructure resource.
     * 
     */
    public String shape() {
        return this.shape;
    }
    /**
     * @return The number of storage servers for the Cloud Exadata Infrastructure.
     * 
     */
    public Integer storageCount() {
        return this.storageCount;
    }
    /**
     * @return The storage server model type of the cloud Exadata infrastructure resource.
     * 
     */
    public String storageServerType() {
        return this.storageServerType;
    }
    /**
     * @return The software version of the storage servers (cells) in the Cloud Exadata Infrastructure.
     * 
     */
    public String storageServerVersion() {
        return this.storageServerVersion;
    }
    /**
     * @return A mapping of tags assigned to the Cloud Exadata Infrastructure.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return The date and time the Cloud Exadata Infrastructure resource was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The total storage allocated to the Cloud Exadata Infrastructure resource, in gigabytes (GB).
     * 
     */
    public Integer totalStorageSizeInGbs() {
        return this.totalStorageSizeInGbs;
    }
    /**
     * @return The Cloud Exadata Infrastructure Azure zones.
     * 
     */
    public List<String> zones() {
        return this.zones;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetExadataInfrastructureResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer activatedStorageCount;
        private Integer additionalStorageCount;
        private Integer availableStorageSizeInGbs;
        private Integer computeCount;
        private String computeModel;
        private Integer cpuCount;
        private List<String> customerContacts;
        private Double dataStorageSizeInTbs;
        private String databaseServerType;
        private Integer dbNodeStorageSizeInGbs;
        private String dbServerVersion;
        private List<GetExadataInfrastructureDefinedFileSystemConfiguration> definedFileSystemConfigurations;
        private String displayName;
        private List<GetExadataInfrastructureEstimatedPatchingTime> estimatedPatchingTimes;
        private String id;
        private String lastMaintenanceRunId;
        private String lifecycleDetails;
        private String lifecycleState;
        private String location;
        private List<GetExadataInfrastructureMaintenanceWindow> maintenanceWindows;
        private Integer maxCpuCount;
        private Double maxDataStorageInTbs;
        private Integer maxDbNodeStorageSizeInGbs;
        private Integer maxMemoryInGbs;
        private Integer memorySizeInGbs;
        private String monthlyDbServerVersion;
        private String monthlyStorageServerVersion;
        private String name;
        private String nextMaintenanceRunId;
        private String ociUrl;
        private String ocid;
        private String resourceGroupName;
        private String shape;
        private Integer storageCount;
        private String storageServerType;
        private String storageServerVersion;
        private Map<String,String> tags;
        private String timeCreated;
        private Integer totalStorageSizeInGbs;
        private List<String> zones;
        public Builder() {}
        public Builder(GetExadataInfrastructureResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activatedStorageCount = defaults.activatedStorageCount;
    	      this.additionalStorageCount = defaults.additionalStorageCount;
    	      this.availableStorageSizeInGbs = defaults.availableStorageSizeInGbs;
    	      this.computeCount = defaults.computeCount;
    	      this.computeModel = defaults.computeModel;
    	      this.cpuCount = defaults.cpuCount;
    	      this.customerContacts = defaults.customerContacts;
    	      this.dataStorageSizeInTbs = defaults.dataStorageSizeInTbs;
    	      this.databaseServerType = defaults.databaseServerType;
    	      this.dbNodeStorageSizeInGbs = defaults.dbNodeStorageSizeInGbs;
    	      this.dbServerVersion = defaults.dbServerVersion;
    	      this.definedFileSystemConfigurations = defaults.definedFileSystemConfigurations;
    	      this.displayName = defaults.displayName;
    	      this.estimatedPatchingTimes = defaults.estimatedPatchingTimes;
    	      this.id = defaults.id;
    	      this.lastMaintenanceRunId = defaults.lastMaintenanceRunId;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.lifecycleState = defaults.lifecycleState;
    	      this.location = defaults.location;
    	      this.maintenanceWindows = defaults.maintenanceWindows;
    	      this.maxCpuCount = defaults.maxCpuCount;
    	      this.maxDataStorageInTbs = defaults.maxDataStorageInTbs;
    	      this.maxDbNodeStorageSizeInGbs = defaults.maxDbNodeStorageSizeInGbs;
    	      this.maxMemoryInGbs = defaults.maxMemoryInGbs;
    	      this.memorySizeInGbs = defaults.memorySizeInGbs;
    	      this.monthlyDbServerVersion = defaults.monthlyDbServerVersion;
    	      this.monthlyStorageServerVersion = defaults.monthlyStorageServerVersion;
    	      this.name = defaults.name;
    	      this.nextMaintenanceRunId = defaults.nextMaintenanceRunId;
    	      this.ociUrl = defaults.ociUrl;
    	      this.ocid = defaults.ocid;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.shape = defaults.shape;
    	      this.storageCount = defaults.storageCount;
    	      this.storageServerType = defaults.storageServerType;
    	      this.storageServerVersion = defaults.storageServerVersion;
    	      this.tags = defaults.tags;
    	      this.timeCreated = defaults.timeCreated;
    	      this.totalStorageSizeInGbs = defaults.totalStorageSizeInGbs;
    	      this.zones = defaults.zones;
        }

        @CustomType.Setter
        public Builder activatedStorageCount(Integer activatedStorageCount) {
            if (activatedStorageCount == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructureResult", "activatedStorageCount");
            }
            this.activatedStorageCount = activatedStorageCount;
            return this;
        }
        @CustomType.Setter
        public Builder additionalStorageCount(Integer additionalStorageCount) {
            if (additionalStorageCount == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructureResult", "additionalStorageCount");
            }
            this.additionalStorageCount = additionalStorageCount;
            return this;
        }
        @CustomType.Setter
        public Builder availableStorageSizeInGbs(Integer availableStorageSizeInGbs) {
            if (availableStorageSizeInGbs == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructureResult", "availableStorageSizeInGbs");
            }
            this.availableStorageSizeInGbs = availableStorageSizeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder computeCount(Integer computeCount) {
            if (computeCount == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructureResult", "computeCount");
            }
            this.computeCount = computeCount;
            return this;
        }
        @CustomType.Setter
        public Builder computeModel(String computeModel) {
            if (computeModel == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructureResult", "computeModel");
            }
            this.computeModel = computeModel;
            return this;
        }
        @CustomType.Setter
        public Builder cpuCount(Integer cpuCount) {
            if (cpuCount == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructureResult", "cpuCount");
            }
            this.cpuCount = cpuCount;
            return this;
        }
        @CustomType.Setter
        public Builder customerContacts(List<String> customerContacts) {
            if (customerContacts == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructureResult", "customerContacts");
            }
            this.customerContacts = customerContacts;
            return this;
        }
        public Builder customerContacts(String... customerContacts) {
            return customerContacts(List.of(customerContacts));
        }
        @CustomType.Setter
        public Builder dataStorageSizeInTbs(Double dataStorageSizeInTbs) {
            if (dataStorageSizeInTbs == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructureResult", "dataStorageSizeInTbs");
            }
            this.dataStorageSizeInTbs = dataStorageSizeInTbs;
            return this;
        }
        @CustomType.Setter
        public Builder databaseServerType(String databaseServerType) {
            if (databaseServerType == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructureResult", "databaseServerType");
            }
            this.databaseServerType = databaseServerType;
            return this;
        }
        @CustomType.Setter
        public Builder dbNodeStorageSizeInGbs(Integer dbNodeStorageSizeInGbs) {
            if (dbNodeStorageSizeInGbs == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructureResult", "dbNodeStorageSizeInGbs");
            }
            this.dbNodeStorageSizeInGbs = dbNodeStorageSizeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder dbServerVersion(String dbServerVersion) {
            if (dbServerVersion == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructureResult", "dbServerVersion");
            }
            this.dbServerVersion = dbServerVersion;
            return this;
        }
        @CustomType.Setter
        public Builder definedFileSystemConfigurations(List<GetExadataInfrastructureDefinedFileSystemConfiguration> definedFileSystemConfigurations) {
            if (definedFileSystemConfigurations == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructureResult", "definedFileSystemConfigurations");
            }
            this.definedFileSystemConfigurations = definedFileSystemConfigurations;
            return this;
        }
        public Builder definedFileSystemConfigurations(GetExadataInfrastructureDefinedFileSystemConfiguration... definedFileSystemConfigurations) {
            return definedFileSystemConfigurations(List.of(definedFileSystemConfigurations));
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructureResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder estimatedPatchingTimes(List<GetExadataInfrastructureEstimatedPatchingTime> estimatedPatchingTimes) {
            if (estimatedPatchingTimes == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructureResult", "estimatedPatchingTimes");
            }
            this.estimatedPatchingTimes = estimatedPatchingTimes;
            return this;
        }
        public Builder estimatedPatchingTimes(GetExadataInfrastructureEstimatedPatchingTime... estimatedPatchingTimes) {
            return estimatedPatchingTimes(List.of(estimatedPatchingTimes));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructureResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lastMaintenanceRunId(String lastMaintenanceRunId) {
            if (lastMaintenanceRunId == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructureResult", "lastMaintenanceRunId");
            }
            this.lastMaintenanceRunId = lastMaintenanceRunId;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructureResult", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleState(String lifecycleState) {
            if (lifecycleState == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructureResult", "lifecycleState");
            }
            this.lifecycleState = lifecycleState;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructureResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder maintenanceWindows(List<GetExadataInfrastructureMaintenanceWindow> maintenanceWindows) {
            if (maintenanceWindows == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructureResult", "maintenanceWindows");
            }
            this.maintenanceWindows = maintenanceWindows;
            return this;
        }
        public Builder maintenanceWindows(GetExadataInfrastructureMaintenanceWindow... maintenanceWindows) {
            return maintenanceWindows(List.of(maintenanceWindows));
        }
        @CustomType.Setter
        public Builder maxCpuCount(Integer maxCpuCount) {
            if (maxCpuCount == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructureResult", "maxCpuCount");
            }
            this.maxCpuCount = maxCpuCount;
            return this;
        }
        @CustomType.Setter
        public Builder maxDataStorageInTbs(Double maxDataStorageInTbs) {
            if (maxDataStorageInTbs == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructureResult", "maxDataStorageInTbs");
            }
            this.maxDataStorageInTbs = maxDataStorageInTbs;
            return this;
        }
        @CustomType.Setter
        public Builder maxDbNodeStorageSizeInGbs(Integer maxDbNodeStorageSizeInGbs) {
            if (maxDbNodeStorageSizeInGbs == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructureResult", "maxDbNodeStorageSizeInGbs");
            }
            this.maxDbNodeStorageSizeInGbs = maxDbNodeStorageSizeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder maxMemoryInGbs(Integer maxMemoryInGbs) {
            if (maxMemoryInGbs == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructureResult", "maxMemoryInGbs");
            }
            this.maxMemoryInGbs = maxMemoryInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder memorySizeInGbs(Integer memorySizeInGbs) {
            if (memorySizeInGbs == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructureResult", "memorySizeInGbs");
            }
            this.memorySizeInGbs = memorySizeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder monthlyDbServerVersion(String monthlyDbServerVersion) {
            if (monthlyDbServerVersion == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructureResult", "monthlyDbServerVersion");
            }
            this.monthlyDbServerVersion = monthlyDbServerVersion;
            return this;
        }
        @CustomType.Setter
        public Builder monthlyStorageServerVersion(String monthlyStorageServerVersion) {
            if (monthlyStorageServerVersion == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructureResult", "monthlyStorageServerVersion");
            }
            this.monthlyStorageServerVersion = monthlyStorageServerVersion;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructureResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nextMaintenanceRunId(String nextMaintenanceRunId) {
            if (nextMaintenanceRunId == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructureResult", "nextMaintenanceRunId");
            }
            this.nextMaintenanceRunId = nextMaintenanceRunId;
            return this;
        }
        @CustomType.Setter
        public Builder ociUrl(String ociUrl) {
            if (ociUrl == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructureResult", "ociUrl");
            }
            this.ociUrl = ociUrl;
            return this;
        }
        @CustomType.Setter
        public Builder ocid(String ocid) {
            if (ocid == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructureResult", "ocid");
            }
            this.ocid = ocid;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            if (resourceGroupName == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructureResult", "resourceGroupName");
            }
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder shape(String shape) {
            if (shape == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructureResult", "shape");
            }
            this.shape = shape;
            return this;
        }
        @CustomType.Setter
        public Builder storageCount(Integer storageCount) {
            if (storageCount == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructureResult", "storageCount");
            }
            this.storageCount = storageCount;
            return this;
        }
        @CustomType.Setter
        public Builder storageServerType(String storageServerType) {
            if (storageServerType == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructureResult", "storageServerType");
            }
            this.storageServerType = storageServerType;
            return this;
        }
        @CustomType.Setter
        public Builder storageServerVersion(String storageServerVersion) {
            if (storageServerVersion == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructureResult", "storageServerVersion");
            }
            this.storageServerVersion = storageServerVersion;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructureResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructureResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder totalStorageSizeInGbs(Integer totalStorageSizeInGbs) {
            if (totalStorageSizeInGbs == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructureResult", "totalStorageSizeInGbs");
            }
            this.totalStorageSizeInGbs = totalStorageSizeInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder zones(List<String> zones) {
            if (zones == null) {
              throw new MissingRequiredPropertyException("GetExadataInfrastructureResult", "zones");
            }
            this.zones = zones;
            return this;
        }
        public Builder zones(String... zones) {
            return zones(List.of(zones));
        }
        public GetExadataInfrastructureResult build() {
            final var _resultValue = new GetExadataInfrastructureResult();
            _resultValue.activatedStorageCount = activatedStorageCount;
            _resultValue.additionalStorageCount = additionalStorageCount;
            _resultValue.availableStorageSizeInGbs = availableStorageSizeInGbs;
            _resultValue.computeCount = computeCount;
            _resultValue.computeModel = computeModel;
            _resultValue.cpuCount = cpuCount;
            _resultValue.customerContacts = customerContacts;
            _resultValue.dataStorageSizeInTbs = dataStorageSizeInTbs;
            _resultValue.databaseServerType = databaseServerType;
            _resultValue.dbNodeStorageSizeInGbs = dbNodeStorageSizeInGbs;
            _resultValue.dbServerVersion = dbServerVersion;
            _resultValue.definedFileSystemConfigurations = definedFileSystemConfigurations;
            _resultValue.displayName = displayName;
            _resultValue.estimatedPatchingTimes = estimatedPatchingTimes;
            _resultValue.id = id;
            _resultValue.lastMaintenanceRunId = lastMaintenanceRunId;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.lifecycleState = lifecycleState;
            _resultValue.location = location;
            _resultValue.maintenanceWindows = maintenanceWindows;
            _resultValue.maxCpuCount = maxCpuCount;
            _resultValue.maxDataStorageInTbs = maxDataStorageInTbs;
            _resultValue.maxDbNodeStorageSizeInGbs = maxDbNodeStorageSizeInGbs;
            _resultValue.maxMemoryInGbs = maxMemoryInGbs;
            _resultValue.memorySizeInGbs = memorySizeInGbs;
            _resultValue.monthlyDbServerVersion = monthlyDbServerVersion;
            _resultValue.monthlyStorageServerVersion = monthlyStorageServerVersion;
            _resultValue.name = name;
            _resultValue.nextMaintenanceRunId = nextMaintenanceRunId;
            _resultValue.ociUrl = ociUrl;
            _resultValue.ocid = ocid;
            _resultValue.resourceGroupName = resourceGroupName;
            _resultValue.shape = shape;
            _resultValue.storageCount = storageCount;
            _resultValue.storageServerType = storageServerType;
            _resultValue.storageServerVersion = storageServerVersion;
            _resultValue.tags = tags;
            _resultValue.timeCreated = timeCreated;
            _resultValue.totalStorageSizeInGbs = totalStorageSizeInGbs;
            _resultValue.zones = zones;
            return _resultValue;
        }
    }
}
