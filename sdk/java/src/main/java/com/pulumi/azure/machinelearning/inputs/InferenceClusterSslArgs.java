// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.machinelearning.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InferenceClusterSslArgs extends com.pulumi.resources.ResourceArgs {

    public static final InferenceClusterSslArgs Empty = new InferenceClusterSslArgs();

    /**
     * The certificate for the SSL configuration.Conflicts with `ssl.0.leaf_domain_label`,`ssl.0.overwrite_existing_domain`. Changing this forces a new Machine Learning Inference Cluster to be created.
     * 
     */
    @Import(name="cert")
    private @Nullable Output<String> cert;

    /**
     * @return The certificate for the SSL configuration.Conflicts with `ssl.0.leaf_domain_label`,`ssl.0.overwrite_existing_domain`. Changing this forces a new Machine Learning Inference Cluster to be created.
     * 
     */
    public Optional<Output<String>> cert() {
        return Optional.ofNullable(this.cert);
    }

    /**
     * The cname of the SSL configuration.Conflicts with `ssl.0.leaf_domain_label`,`ssl.0.overwrite_existing_domain`. Changing this forces a new Machine Learning Inference Cluster to be created.
     * 
     */
    @Import(name="cname")
    private @Nullable Output<String> cname;

    /**
     * @return The cname of the SSL configuration.Conflicts with `ssl.0.leaf_domain_label`,`ssl.0.overwrite_existing_domain`. Changing this forces a new Machine Learning Inference Cluster to be created.
     * 
     */
    public Optional<Output<String>> cname() {
        return Optional.ofNullable(this.cname);
    }

    /**
     * The key content for the SSL configuration.Conflicts with `ssl.0.leaf_domain_label`,`ssl.0.overwrite_existing_domain`. Changing this forces a new Machine Learning Inference Cluster to be created.
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return The key content for the SSL configuration.Conflicts with `ssl.0.leaf_domain_label`,`ssl.0.overwrite_existing_domain`. Changing this forces a new Machine Learning Inference Cluster to be created.
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * The leaf domain label for the SSL configuration. Conflicts with `ssl.0.cert`,`ssl.0.key`,`ssl.0.cname`. Changing this forces a new Machine Learning Inference Cluster to be created.
     * 
     */
    @Import(name="leafDomainLabel")
    private @Nullable Output<String> leafDomainLabel;

    /**
     * @return The leaf domain label for the SSL configuration. Conflicts with `ssl.0.cert`,`ssl.0.key`,`ssl.0.cname`. Changing this forces a new Machine Learning Inference Cluster to be created.
     * 
     */
    public Optional<Output<String>> leafDomainLabel() {
        return Optional.ofNullable(this.leafDomainLabel);
    }

    /**
     * Whether or not to overwrite existing leaf domain. Conflicts with `ssl.0.cert`,`ssl.0.key`,`ssl.0.cname` Changing this forces a new Machine Learning Inference Cluster to be created.
     * 
     */
    @Import(name="overwriteExistingDomain")
    private @Nullable Output<Boolean> overwriteExistingDomain;

    /**
     * @return Whether or not to overwrite existing leaf domain. Conflicts with `ssl.0.cert`,`ssl.0.key`,`ssl.0.cname` Changing this forces a new Machine Learning Inference Cluster to be created.
     * 
     */
    public Optional<Output<Boolean>> overwriteExistingDomain() {
        return Optional.ofNullable(this.overwriteExistingDomain);
    }

    private InferenceClusterSslArgs() {}

    private InferenceClusterSslArgs(InferenceClusterSslArgs $) {
        this.cert = $.cert;
        this.cname = $.cname;
        this.key = $.key;
        this.leafDomainLabel = $.leafDomainLabel;
        this.overwriteExistingDomain = $.overwriteExistingDomain;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InferenceClusterSslArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InferenceClusterSslArgs $;

        public Builder() {
            $ = new InferenceClusterSslArgs();
        }

        public Builder(InferenceClusterSslArgs defaults) {
            $ = new InferenceClusterSslArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cert The certificate for the SSL configuration.Conflicts with `ssl.0.leaf_domain_label`,`ssl.0.overwrite_existing_domain`. Changing this forces a new Machine Learning Inference Cluster to be created.
         * 
         * @return builder
         * 
         */
        public Builder cert(@Nullable Output<String> cert) {
            $.cert = cert;
            return this;
        }

        /**
         * @param cert The certificate for the SSL configuration.Conflicts with `ssl.0.leaf_domain_label`,`ssl.0.overwrite_existing_domain`. Changing this forces a new Machine Learning Inference Cluster to be created.
         * 
         * @return builder
         * 
         */
        public Builder cert(String cert) {
            return cert(Output.of(cert));
        }

        /**
         * @param cname The cname of the SSL configuration.Conflicts with `ssl.0.leaf_domain_label`,`ssl.0.overwrite_existing_domain`. Changing this forces a new Machine Learning Inference Cluster to be created.
         * 
         * @return builder
         * 
         */
        public Builder cname(@Nullable Output<String> cname) {
            $.cname = cname;
            return this;
        }

        /**
         * @param cname The cname of the SSL configuration.Conflicts with `ssl.0.leaf_domain_label`,`ssl.0.overwrite_existing_domain`. Changing this forces a new Machine Learning Inference Cluster to be created.
         * 
         * @return builder
         * 
         */
        public Builder cname(String cname) {
            return cname(Output.of(cname));
        }

        /**
         * @param key The key content for the SSL configuration.Conflicts with `ssl.0.leaf_domain_label`,`ssl.0.overwrite_existing_domain`. Changing this forces a new Machine Learning Inference Cluster to be created.
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key The key content for the SSL configuration.Conflicts with `ssl.0.leaf_domain_label`,`ssl.0.overwrite_existing_domain`. Changing this forces a new Machine Learning Inference Cluster to be created.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param leafDomainLabel The leaf domain label for the SSL configuration. Conflicts with `ssl.0.cert`,`ssl.0.key`,`ssl.0.cname`. Changing this forces a new Machine Learning Inference Cluster to be created.
         * 
         * @return builder
         * 
         */
        public Builder leafDomainLabel(@Nullable Output<String> leafDomainLabel) {
            $.leafDomainLabel = leafDomainLabel;
            return this;
        }

        /**
         * @param leafDomainLabel The leaf domain label for the SSL configuration. Conflicts with `ssl.0.cert`,`ssl.0.key`,`ssl.0.cname`. Changing this forces a new Machine Learning Inference Cluster to be created.
         * 
         * @return builder
         * 
         */
        public Builder leafDomainLabel(String leafDomainLabel) {
            return leafDomainLabel(Output.of(leafDomainLabel));
        }

        /**
         * @param overwriteExistingDomain Whether or not to overwrite existing leaf domain. Conflicts with `ssl.0.cert`,`ssl.0.key`,`ssl.0.cname` Changing this forces a new Machine Learning Inference Cluster to be created.
         * 
         * @return builder
         * 
         */
        public Builder overwriteExistingDomain(@Nullable Output<Boolean> overwriteExistingDomain) {
            $.overwriteExistingDomain = overwriteExistingDomain;
            return this;
        }

        /**
         * @param overwriteExistingDomain Whether or not to overwrite existing leaf domain. Conflicts with `ssl.0.cert`,`ssl.0.key`,`ssl.0.cname` Changing this forces a new Machine Learning Inference Cluster to be created.
         * 
         * @return builder
         * 
         */
        public Builder overwriteExistingDomain(Boolean overwriteExistingDomain) {
            return overwriteExistingDomain(Output.of(overwriteExistingDomain));
        }

        public InferenceClusterSslArgs build() {
            return $;
        }
    }

}
