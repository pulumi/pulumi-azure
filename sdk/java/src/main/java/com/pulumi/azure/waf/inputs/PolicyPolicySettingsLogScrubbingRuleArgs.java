// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.waf.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PolicyPolicySettingsLogScrubbingRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final PolicyPolicySettingsLogScrubbingRuleArgs Empty = new PolicyPolicySettingsLogScrubbingRuleArgs();

    /**
     * Describes if the managed rule is in enabled state or disabled state.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Describes if the managed rule is in enabled state or disabled state.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The name of the Match Variable. Possible values: `RequestArgKeys`, `RequestArgNames`, `RequestArgValues`, `RequestCookieKeys`, `RequestCookieNames`, `RequestCookieValues`, `RequestHeaderKeys`, `RequestHeaderNames`, `RequestHeaderValues`.
     * 
     */
    @Import(name="matchVariable", required=true)
    private Output<String> matchVariable;

    /**
     * @return The name of the Match Variable. Possible values: `RequestArgKeys`, `RequestArgNames`, `RequestArgValues`, `RequestCookieKeys`, `RequestCookieNames`, `RequestCookieValues`, `RequestHeaderKeys`, `RequestHeaderNames`, `RequestHeaderValues`.
     * 
     */
    public Output<String> matchVariable() {
        return this.matchVariable;
    }

    /**
     * Describes field of the matchVariable collection.
     * 
     */
    @Import(name="selector")
    private @Nullable Output<String> selector;

    /**
     * @return Describes field of the matchVariable collection.
     * 
     */
    public Optional<Output<String>> selector() {
        return Optional.ofNullable(this.selector);
    }

    /**
     * Describes operator to be matched. Possible values: `Contains`, `EndsWith`, `Equals`, `EqualsAny`, `StartsWith`.
     * 
     */
    @Import(name="selectorMatchOperator")
    private @Nullable Output<String> selectorMatchOperator;

    /**
     * @return Describes operator to be matched. Possible values: `Contains`, `EndsWith`, `Equals`, `EqualsAny`, `StartsWith`.
     * 
     */
    public Optional<Output<String>> selectorMatchOperator() {
        return Optional.ofNullable(this.selectorMatchOperator);
    }

    private PolicyPolicySettingsLogScrubbingRuleArgs() {}

    private PolicyPolicySettingsLogScrubbingRuleArgs(PolicyPolicySettingsLogScrubbingRuleArgs $) {
        this.enabled = $.enabled;
        this.matchVariable = $.matchVariable;
        this.selector = $.selector;
        this.selectorMatchOperator = $.selectorMatchOperator;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PolicyPolicySettingsLogScrubbingRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PolicyPolicySettingsLogScrubbingRuleArgs $;

        public Builder() {
            $ = new PolicyPolicySettingsLogScrubbingRuleArgs();
        }

        public Builder(PolicyPolicySettingsLogScrubbingRuleArgs defaults) {
            $ = new PolicyPolicySettingsLogScrubbingRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled Describes if the managed rule is in enabled state or disabled state.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Describes if the managed rule is in enabled state or disabled state.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param matchVariable The name of the Match Variable. Possible values: `RequestArgKeys`, `RequestArgNames`, `RequestArgValues`, `RequestCookieKeys`, `RequestCookieNames`, `RequestCookieValues`, `RequestHeaderKeys`, `RequestHeaderNames`, `RequestHeaderValues`.
         * 
         * @return builder
         * 
         */
        public Builder matchVariable(Output<String> matchVariable) {
            $.matchVariable = matchVariable;
            return this;
        }

        /**
         * @param matchVariable The name of the Match Variable. Possible values: `RequestArgKeys`, `RequestArgNames`, `RequestArgValues`, `RequestCookieKeys`, `RequestCookieNames`, `RequestCookieValues`, `RequestHeaderKeys`, `RequestHeaderNames`, `RequestHeaderValues`.
         * 
         * @return builder
         * 
         */
        public Builder matchVariable(String matchVariable) {
            return matchVariable(Output.of(matchVariable));
        }

        /**
         * @param selector Describes field of the matchVariable collection.
         * 
         * @return builder
         * 
         */
        public Builder selector(@Nullable Output<String> selector) {
            $.selector = selector;
            return this;
        }

        /**
         * @param selector Describes field of the matchVariable collection.
         * 
         * @return builder
         * 
         */
        public Builder selector(String selector) {
            return selector(Output.of(selector));
        }

        /**
         * @param selectorMatchOperator Describes operator to be matched. Possible values: `Contains`, `EndsWith`, `Equals`, `EqualsAny`, `StartsWith`.
         * 
         * @return builder
         * 
         */
        public Builder selectorMatchOperator(@Nullable Output<String> selectorMatchOperator) {
            $.selectorMatchOperator = selectorMatchOperator;
            return this;
        }

        /**
         * @param selectorMatchOperator Describes operator to be matched. Possible values: `Contains`, `EndsWith`, `Equals`, `EqualsAny`, `StartsWith`.
         * 
         * @return builder
         * 
         */
        public Builder selectorMatchOperator(String selectorMatchOperator) {
            return selectorMatchOperator(Output.of(selectorMatchOperator));
        }

        public PolicyPolicySettingsLogScrubbingRuleArgs build() {
            if ($.matchVariable == null) {
                throw new MissingRequiredPropertyException("PolicyPolicySettingsLogScrubbingRuleArgs", "matchVariable");
            }
            return $;
        }
    }

}
