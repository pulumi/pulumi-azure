// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.cognitive.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


public final class AccountRaiPolicyContentFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final AccountRaiPolicyContentFilterArgs Empty = new AccountRaiPolicyContentFilterArgs();

    /**
     * Whether the filter should block content. Possible values are `true` or `false`.
     * 
     */
    @Import(name="blockEnabled", required=true)
    private Output<Boolean> blockEnabled;

    /**
     * @return Whether the filter should block content. Possible values are `true` or `false`.
     * 
     */
    public Output<Boolean> blockEnabled() {
        return this.blockEnabled;
    }

    /**
     * Whether the filter is enabled. Possible values are `true` or `false`.
     * 
     */
    @Import(name="filterEnabled", required=true)
    private Output<Boolean> filterEnabled;

    /**
     * @return Whether the filter is enabled. Possible values are `true` or `false`.
     * 
     */
    public Output<Boolean> filterEnabled() {
        return this.filterEnabled;
    }

    /**
     * The name of the content filter.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the content filter.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The severity threshold for the filter. Possible values are `Low`, `Medium` or `High`.
     * 
     */
    @Import(name="severityThreshold", required=true)
    private Output<String> severityThreshold;

    /**
     * @return The severity threshold for the filter. Possible values are `Low`, `Medium` or `High`.
     * 
     */
    public Output<String> severityThreshold() {
        return this.severityThreshold;
    }

    /**
     * Content source to apply the content filter. Possible values are `Prompt` or `Completion`.
     * 
     */
    @Import(name="source", required=true)
    private Output<String> source;

    /**
     * @return Content source to apply the content filter. Possible values are `Prompt` or `Completion`.
     * 
     */
    public Output<String> source() {
        return this.source;
    }

    private AccountRaiPolicyContentFilterArgs() {}

    private AccountRaiPolicyContentFilterArgs(AccountRaiPolicyContentFilterArgs $) {
        this.blockEnabled = $.blockEnabled;
        this.filterEnabled = $.filterEnabled;
        this.name = $.name;
        this.severityThreshold = $.severityThreshold;
        this.source = $.source;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccountRaiPolicyContentFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccountRaiPolicyContentFilterArgs $;

        public Builder() {
            $ = new AccountRaiPolicyContentFilterArgs();
        }

        public Builder(AccountRaiPolicyContentFilterArgs defaults) {
            $ = new AccountRaiPolicyContentFilterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param blockEnabled Whether the filter should block content. Possible values are `true` or `false`.
         * 
         * @return builder
         * 
         */
        public Builder blockEnabled(Output<Boolean> blockEnabled) {
            $.blockEnabled = blockEnabled;
            return this;
        }

        /**
         * @param blockEnabled Whether the filter should block content. Possible values are `true` or `false`.
         * 
         * @return builder
         * 
         */
        public Builder blockEnabled(Boolean blockEnabled) {
            return blockEnabled(Output.of(blockEnabled));
        }

        /**
         * @param filterEnabled Whether the filter is enabled. Possible values are `true` or `false`.
         * 
         * @return builder
         * 
         */
        public Builder filterEnabled(Output<Boolean> filterEnabled) {
            $.filterEnabled = filterEnabled;
            return this;
        }

        /**
         * @param filterEnabled Whether the filter is enabled. Possible values are `true` or `false`.
         * 
         * @return builder
         * 
         */
        public Builder filterEnabled(Boolean filterEnabled) {
            return filterEnabled(Output.of(filterEnabled));
        }

        /**
         * @param name The name of the content filter.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the content filter.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param severityThreshold The severity threshold for the filter. Possible values are `Low`, `Medium` or `High`.
         * 
         * @return builder
         * 
         */
        public Builder severityThreshold(Output<String> severityThreshold) {
            $.severityThreshold = severityThreshold;
            return this;
        }

        /**
         * @param severityThreshold The severity threshold for the filter. Possible values are `Low`, `Medium` or `High`.
         * 
         * @return builder
         * 
         */
        public Builder severityThreshold(String severityThreshold) {
            return severityThreshold(Output.of(severityThreshold));
        }

        /**
         * @param source Content source to apply the content filter. Possible values are `Prompt` or `Completion`.
         * 
         * @return builder
         * 
         */
        public Builder source(Output<String> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source Content source to apply the content filter. Possible values are `Prompt` or `Completion`.
         * 
         * @return builder
         * 
         */
        public Builder source(String source) {
            return source(Output.of(source));
        }

        public AccountRaiPolicyContentFilterArgs build() {
            if ($.blockEnabled == null) {
                throw new MissingRequiredPropertyException("AccountRaiPolicyContentFilterArgs", "blockEnabled");
            }
            if ($.filterEnabled == null) {
                throw new MissingRequiredPropertyException("AccountRaiPolicyContentFilterArgs", "filterEnabled");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("AccountRaiPolicyContentFilterArgs", "name");
            }
            if ($.severityThreshold == null) {
                throw new MissingRequiredPropertyException("AccountRaiPolicyContentFilterArgs", "severityThreshold");
            }
            if ($.source == null) {
                throw new MissingRequiredPropertyException("AccountRaiPolicyContentFilterArgs", "source");
            }
            return $;
        }
    }

}
