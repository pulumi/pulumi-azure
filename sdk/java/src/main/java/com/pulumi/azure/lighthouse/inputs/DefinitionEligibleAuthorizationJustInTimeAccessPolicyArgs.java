// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.lighthouse.inputs;

import com.pulumi.azure.lighthouse.inputs.DefinitionEligibleAuthorizationJustInTimeAccessPolicyApproverArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DefinitionEligibleAuthorizationJustInTimeAccessPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final DefinitionEligibleAuthorizationJustInTimeAccessPolicyArgs Empty = new DefinitionEligibleAuthorizationJustInTimeAccessPolicyArgs();

    /**
     * An `approver` block as defined below.
     * 
     */
    @Import(name="approvers")
    private @Nullable Output<List<DefinitionEligibleAuthorizationJustInTimeAccessPolicyApproverArgs>> approvers;

    /**
     * @return An `approver` block as defined below.
     * 
     */
    public Optional<Output<List<DefinitionEligibleAuthorizationJustInTimeAccessPolicyApproverArgs>>> approvers() {
        return Optional.ofNullable(this.approvers);
    }

    /**
     * The maximum access duration in ISO 8601 format for just-in-time access requests. Defaults to `PT8H`.
     * 
     */
    @Import(name="maximumActivationDuration")
    private @Nullable Output<String> maximumActivationDuration;

    /**
     * @return The maximum access duration in ISO 8601 format for just-in-time access requests. Defaults to `PT8H`.
     * 
     */
    public Optional<Output<String>> maximumActivationDuration() {
        return Optional.ofNullable(this.maximumActivationDuration);
    }

    /**
     * The multi-factor authorization provider to be used for just-in-time access requests. Possible value is `Azure`.
     * 
     * &gt; **Note:** When this property isn&#39;t set, it would be set to `None`.
     * 
     */
    @Import(name="multiFactorAuthProvider")
    private @Nullable Output<String> multiFactorAuthProvider;

    /**
     * @return The multi-factor authorization provider to be used for just-in-time access requests. Possible value is `Azure`.
     * 
     * &gt; **Note:** When this property isn&#39;t set, it would be set to `None`.
     * 
     */
    public Optional<Output<String>> multiFactorAuthProvider() {
        return Optional.ofNullable(this.multiFactorAuthProvider);
    }

    private DefinitionEligibleAuthorizationJustInTimeAccessPolicyArgs() {}

    private DefinitionEligibleAuthorizationJustInTimeAccessPolicyArgs(DefinitionEligibleAuthorizationJustInTimeAccessPolicyArgs $) {
        this.approvers = $.approvers;
        this.maximumActivationDuration = $.maximumActivationDuration;
        this.multiFactorAuthProvider = $.multiFactorAuthProvider;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DefinitionEligibleAuthorizationJustInTimeAccessPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DefinitionEligibleAuthorizationJustInTimeAccessPolicyArgs $;

        public Builder() {
            $ = new DefinitionEligibleAuthorizationJustInTimeAccessPolicyArgs();
        }

        public Builder(DefinitionEligibleAuthorizationJustInTimeAccessPolicyArgs defaults) {
            $ = new DefinitionEligibleAuthorizationJustInTimeAccessPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param approvers An `approver` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder approvers(@Nullable Output<List<DefinitionEligibleAuthorizationJustInTimeAccessPolicyApproverArgs>> approvers) {
            $.approvers = approvers;
            return this;
        }

        /**
         * @param approvers An `approver` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder approvers(List<DefinitionEligibleAuthorizationJustInTimeAccessPolicyApproverArgs> approvers) {
            return approvers(Output.of(approvers));
        }

        /**
         * @param approvers An `approver` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder approvers(DefinitionEligibleAuthorizationJustInTimeAccessPolicyApproverArgs... approvers) {
            return approvers(List.of(approvers));
        }

        /**
         * @param maximumActivationDuration The maximum access duration in ISO 8601 format for just-in-time access requests. Defaults to `PT8H`.
         * 
         * @return builder
         * 
         */
        public Builder maximumActivationDuration(@Nullable Output<String> maximumActivationDuration) {
            $.maximumActivationDuration = maximumActivationDuration;
            return this;
        }

        /**
         * @param maximumActivationDuration The maximum access duration in ISO 8601 format for just-in-time access requests. Defaults to `PT8H`.
         * 
         * @return builder
         * 
         */
        public Builder maximumActivationDuration(String maximumActivationDuration) {
            return maximumActivationDuration(Output.of(maximumActivationDuration));
        }

        /**
         * @param multiFactorAuthProvider The multi-factor authorization provider to be used for just-in-time access requests. Possible value is `Azure`.
         * 
         * &gt; **Note:** When this property isn&#39;t set, it would be set to `None`.
         * 
         * @return builder
         * 
         */
        public Builder multiFactorAuthProvider(@Nullable Output<String> multiFactorAuthProvider) {
            $.multiFactorAuthProvider = multiFactorAuthProvider;
            return this;
        }

        /**
         * @param multiFactorAuthProvider The multi-factor authorization provider to be used for just-in-time access requests. Possible value is `Azure`.
         * 
         * &gt; **Note:** When this property isn&#39;t set, it would be set to `None`.
         * 
         * @return builder
         * 
         */
        public Builder multiFactorAuthProvider(String multiFactorAuthProvider) {
            return multiFactorAuthProvider(Output.of(multiFactorAuthProvider));
        }

        public DefinitionEligibleAuthorizationJustInTimeAccessPolicyArgs build() {
            return $;
        }
    }

}
