// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.automation.inputs;

import com.pulumi.azure.automation.inputs.SoftwareUpdateConfigurationScheduleMonthlyOccurrenceArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SoftwareUpdateConfigurationScheduleArgs extends com.pulumi.resources.ResourceArgs {

    public static final SoftwareUpdateConfigurationScheduleArgs Empty = new SoftwareUpdateConfigurationScheduleArgs();

    /**
     * List of days of the month that the job should execute on. Must be between `1` and `31`. `-1` for last day of the month. Only valid when frequency is `Month`.
     * 
     */
    @Import(name="advancedMonthDays")
    private @Nullable Output<List<Integer>> advancedMonthDays;

    /**
     * @return List of days of the month that the job should execute on. Must be between `1` and `31`. `-1` for last day of the month. Only valid when frequency is `Month`.
     * 
     */
    public Optional<Output<List<Integer>>> advancedMonthDays() {
        return Optional.ofNullable(this.advancedMonthDays);
    }

    /**
     * List of days of the week that the job should execute on. Only valid when frequency is `Week`. Possible values include `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, and `Sunday`.
     * 
     */
    @Import(name="advancedWeekDays")
    private @Nullable Output<List<String>> advancedWeekDays;

    /**
     * @return List of days of the week that the job should execute on. Only valid when frequency is `Week`. Possible values include `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, and `Sunday`.
     * 
     */
    public Optional<Output<List<String>>> advancedWeekDays() {
        return Optional.ofNullable(this.advancedWeekDays);
    }

    @Import(name="creationTime")
    private @Nullable Output<String> creationTime;

    public Optional<Output<String>> creationTime() {
        return Optional.ofNullable(this.creationTime);
    }

    /**
     * A description for this Schedule.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description for this Schedule.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The end time of the schedule.
     * 
     */
    @Import(name="expiryTime")
    private @Nullable Output<String> expiryTime;

    /**
     * @return The end time of the schedule.
     * 
     */
    public Optional<Output<String>> expiryTime() {
        return Optional.ofNullable(this.expiryTime);
    }

    @Import(name="expiryTimeOffsetMinutes")
    private @Nullable Output<Double> expiryTimeOffsetMinutes;

    public Optional<Output<Double>> expiryTimeOffsetMinutes() {
        return Optional.ofNullable(this.expiryTimeOffsetMinutes);
    }

    /**
     * The frequency of the schedule. - can be either `OneTime`, `Day`, `Hour`, `Week`, or `Month`.
     * 
     */
    @Import(name="frequency", required=true)
    private Output<String> frequency;

    /**
     * @return The frequency of the schedule. - can be either `OneTime`, `Day`, `Hour`, `Week`, or `Month`.
     * 
     */
    public Output<String> frequency() {
        return this.frequency;
    }

    /**
     * The number of `frequency`s between runs. Only valid when frequency is `Day`, `Hour`, `Week`, or `Month`.
     * 
     */
    @Import(name="interval")
    private @Nullable Output<Integer> interval;

    /**
     * @return The number of `frequency`s between runs. Only valid when frequency is `Day`, `Hour`, `Week`, or `Month`.
     * 
     */
    public Optional<Output<Integer>> interval() {
        return Optional.ofNullable(this.interval);
    }

    /**
     * Whether the schedule is enabled. Defaults to `true`.
     * 
     */
    @Import(name="isEnabled")
    private @Nullable Output<Boolean> isEnabled;

    /**
     * @return Whether the schedule is enabled. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> isEnabled() {
        return Optional.ofNullable(this.isEnabled);
    }

    @Import(name="lastModifiedTime")
    private @Nullable Output<String> lastModifiedTime;

    public Optional<Output<String>> lastModifiedTime() {
        return Optional.ofNullable(this.lastModifiedTime);
    }

    /**
     * List of `monthly_occurrence` blocks as defined below to specifies occurrences of days within a month. Only valid when frequency is `Month`. The `monthly_occurrence` block supports fields as defined below.
     * 
     */
    @Import(name="monthlyOccurrences")
    private @Nullable Output<List<SoftwareUpdateConfigurationScheduleMonthlyOccurrenceArgs>> monthlyOccurrences;

    /**
     * @return List of `monthly_occurrence` blocks as defined below to specifies occurrences of days within a month. Only valid when frequency is `Month`. The `monthly_occurrence` block supports fields as defined below.
     * 
     */
    public Optional<Output<List<SoftwareUpdateConfigurationScheduleMonthlyOccurrenceArgs>>> monthlyOccurrences() {
        return Optional.ofNullable(this.monthlyOccurrences);
    }

    @Import(name="nextRun")
    private @Nullable Output<String> nextRun;

    public Optional<Output<String>> nextRun() {
        return Optional.ofNullable(this.nextRun);
    }

    @Import(name="nextRunOffsetMinutes")
    private @Nullable Output<Double> nextRunOffsetMinutes;

    public Optional<Output<Double>> nextRunOffsetMinutes() {
        return Optional.ofNullable(this.nextRunOffsetMinutes);
    }

    /**
     * Start time of the schedule. Must be at least five minutes in the future. Defaults to seven minutes in the future from the time the resource is created.
     * 
     */
    @Import(name="startTime")
    private @Nullable Output<String> startTime;

    /**
     * @return Start time of the schedule. Must be at least five minutes in the future. Defaults to seven minutes in the future from the time the resource is created.
     * 
     */
    public Optional<Output<String>> startTime() {
        return Optional.ofNullable(this.startTime);
    }

    @Import(name="startTimeOffsetMinutes")
    private @Nullable Output<Double> startTimeOffsetMinutes;

    public Optional<Output<Double>> startTimeOffsetMinutes() {
        return Optional.ofNullable(this.startTimeOffsetMinutes);
    }

    /**
     * The timezone of the start time. Defaults to `Etc/UTC`. For possible values see: &lt;https://docs.microsoft.com/en-us/rest/api/maps/timezone/gettimezoneenumwindows&gt;
     * 
     */
    @Import(name="timeZone")
    private @Nullable Output<String> timeZone;

    /**
     * @return The timezone of the start time. Defaults to `Etc/UTC`. For possible values see: &lt;https://docs.microsoft.com/en-us/rest/api/maps/timezone/gettimezoneenumwindows&gt;
     * 
     */
    public Optional<Output<String>> timeZone() {
        return Optional.ofNullable(this.timeZone);
    }

    private SoftwareUpdateConfigurationScheduleArgs() {}

    private SoftwareUpdateConfigurationScheduleArgs(SoftwareUpdateConfigurationScheduleArgs $) {
        this.advancedMonthDays = $.advancedMonthDays;
        this.advancedWeekDays = $.advancedWeekDays;
        this.creationTime = $.creationTime;
        this.description = $.description;
        this.expiryTime = $.expiryTime;
        this.expiryTimeOffsetMinutes = $.expiryTimeOffsetMinutes;
        this.frequency = $.frequency;
        this.interval = $.interval;
        this.isEnabled = $.isEnabled;
        this.lastModifiedTime = $.lastModifiedTime;
        this.monthlyOccurrences = $.monthlyOccurrences;
        this.nextRun = $.nextRun;
        this.nextRunOffsetMinutes = $.nextRunOffsetMinutes;
        this.startTime = $.startTime;
        this.startTimeOffsetMinutes = $.startTimeOffsetMinutes;
        this.timeZone = $.timeZone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SoftwareUpdateConfigurationScheduleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SoftwareUpdateConfigurationScheduleArgs $;

        public Builder() {
            $ = new SoftwareUpdateConfigurationScheduleArgs();
        }

        public Builder(SoftwareUpdateConfigurationScheduleArgs defaults) {
            $ = new SoftwareUpdateConfigurationScheduleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param advancedMonthDays List of days of the month that the job should execute on. Must be between `1` and `31`. `-1` for last day of the month. Only valid when frequency is `Month`.
         * 
         * @return builder
         * 
         */
        public Builder advancedMonthDays(@Nullable Output<List<Integer>> advancedMonthDays) {
            $.advancedMonthDays = advancedMonthDays;
            return this;
        }

        /**
         * @param advancedMonthDays List of days of the month that the job should execute on. Must be between `1` and `31`. `-1` for last day of the month. Only valid when frequency is `Month`.
         * 
         * @return builder
         * 
         */
        public Builder advancedMonthDays(List<Integer> advancedMonthDays) {
            return advancedMonthDays(Output.of(advancedMonthDays));
        }

        /**
         * @param advancedMonthDays List of days of the month that the job should execute on. Must be between `1` and `31`. `-1` for last day of the month. Only valid when frequency is `Month`.
         * 
         * @return builder
         * 
         */
        public Builder advancedMonthDays(Integer... advancedMonthDays) {
            return advancedMonthDays(List.of(advancedMonthDays));
        }

        /**
         * @param advancedWeekDays List of days of the week that the job should execute on. Only valid when frequency is `Week`. Possible values include `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, and `Sunday`.
         * 
         * @return builder
         * 
         */
        public Builder advancedWeekDays(@Nullable Output<List<String>> advancedWeekDays) {
            $.advancedWeekDays = advancedWeekDays;
            return this;
        }

        /**
         * @param advancedWeekDays List of days of the week that the job should execute on. Only valid when frequency is `Week`. Possible values include `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, and `Sunday`.
         * 
         * @return builder
         * 
         */
        public Builder advancedWeekDays(List<String> advancedWeekDays) {
            return advancedWeekDays(Output.of(advancedWeekDays));
        }

        /**
         * @param advancedWeekDays List of days of the week that the job should execute on. Only valid when frequency is `Week`. Possible values include `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, and `Sunday`.
         * 
         * @return builder
         * 
         */
        public Builder advancedWeekDays(String... advancedWeekDays) {
            return advancedWeekDays(List.of(advancedWeekDays));
        }

        public Builder creationTime(@Nullable Output<String> creationTime) {
            $.creationTime = creationTime;
            return this;
        }

        public Builder creationTime(String creationTime) {
            return creationTime(Output.of(creationTime));
        }

        /**
         * @param description A description for this Schedule.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description for this Schedule.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param expiryTime The end time of the schedule.
         * 
         * @return builder
         * 
         */
        public Builder expiryTime(@Nullable Output<String> expiryTime) {
            $.expiryTime = expiryTime;
            return this;
        }

        /**
         * @param expiryTime The end time of the schedule.
         * 
         * @return builder
         * 
         */
        public Builder expiryTime(String expiryTime) {
            return expiryTime(Output.of(expiryTime));
        }

        public Builder expiryTimeOffsetMinutes(@Nullable Output<Double> expiryTimeOffsetMinutes) {
            $.expiryTimeOffsetMinutes = expiryTimeOffsetMinutes;
            return this;
        }

        public Builder expiryTimeOffsetMinutes(Double expiryTimeOffsetMinutes) {
            return expiryTimeOffsetMinutes(Output.of(expiryTimeOffsetMinutes));
        }

        /**
         * @param frequency The frequency of the schedule. - can be either `OneTime`, `Day`, `Hour`, `Week`, or `Month`.
         * 
         * @return builder
         * 
         */
        public Builder frequency(Output<String> frequency) {
            $.frequency = frequency;
            return this;
        }

        /**
         * @param frequency The frequency of the schedule. - can be either `OneTime`, `Day`, `Hour`, `Week`, or `Month`.
         * 
         * @return builder
         * 
         */
        public Builder frequency(String frequency) {
            return frequency(Output.of(frequency));
        }

        /**
         * @param interval The number of `frequency`s between runs. Only valid when frequency is `Day`, `Hour`, `Week`, or `Month`.
         * 
         * @return builder
         * 
         */
        public Builder interval(@Nullable Output<Integer> interval) {
            $.interval = interval;
            return this;
        }

        /**
         * @param interval The number of `frequency`s between runs. Only valid when frequency is `Day`, `Hour`, `Week`, or `Month`.
         * 
         * @return builder
         * 
         */
        public Builder interval(Integer interval) {
            return interval(Output.of(interval));
        }

        /**
         * @param isEnabled Whether the schedule is enabled. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(@Nullable Output<Boolean> isEnabled) {
            $.isEnabled = isEnabled;
            return this;
        }

        /**
         * @param isEnabled Whether the schedule is enabled. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(Boolean isEnabled) {
            return isEnabled(Output.of(isEnabled));
        }

        public Builder lastModifiedTime(@Nullable Output<String> lastModifiedTime) {
            $.lastModifiedTime = lastModifiedTime;
            return this;
        }

        public Builder lastModifiedTime(String lastModifiedTime) {
            return lastModifiedTime(Output.of(lastModifiedTime));
        }

        /**
         * @param monthlyOccurrences List of `monthly_occurrence` blocks as defined below to specifies occurrences of days within a month. Only valid when frequency is `Month`. The `monthly_occurrence` block supports fields as defined below.
         * 
         * @return builder
         * 
         */
        public Builder monthlyOccurrences(@Nullable Output<List<SoftwareUpdateConfigurationScheduleMonthlyOccurrenceArgs>> monthlyOccurrences) {
            $.monthlyOccurrences = monthlyOccurrences;
            return this;
        }

        /**
         * @param monthlyOccurrences List of `monthly_occurrence` blocks as defined below to specifies occurrences of days within a month. Only valid when frequency is `Month`. The `monthly_occurrence` block supports fields as defined below.
         * 
         * @return builder
         * 
         */
        public Builder monthlyOccurrences(List<SoftwareUpdateConfigurationScheduleMonthlyOccurrenceArgs> monthlyOccurrences) {
            return monthlyOccurrences(Output.of(monthlyOccurrences));
        }

        /**
         * @param monthlyOccurrences List of `monthly_occurrence` blocks as defined below to specifies occurrences of days within a month. Only valid when frequency is `Month`. The `monthly_occurrence` block supports fields as defined below.
         * 
         * @return builder
         * 
         */
        public Builder monthlyOccurrences(SoftwareUpdateConfigurationScheduleMonthlyOccurrenceArgs... monthlyOccurrences) {
            return monthlyOccurrences(List.of(monthlyOccurrences));
        }

        public Builder nextRun(@Nullable Output<String> nextRun) {
            $.nextRun = nextRun;
            return this;
        }

        public Builder nextRun(String nextRun) {
            return nextRun(Output.of(nextRun));
        }

        public Builder nextRunOffsetMinutes(@Nullable Output<Double> nextRunOffsetMinutes) {
            $.nextRunOffsetMinutes = nextRunOffsetMinutes;
            return this;
        }

        public Builder nextRunOffsetMinutes(Double nextRunOffsetMinutes) {
            return nextRunOffsetMinutes(Output.of(nextRunOffsetMinutes));
        }

        /**
         * @param startTime Start time of the schedule. Must be at least five minutes in the future. Defaults to seven minutes in the future from the time the resource is created.
         * 
         * @return builder
         * 
         */
        public Builder startTime(@Nullable Output<String> startTime) {
            $.startTime = startTime;
            return this;
        }

        /**
         * @param startTime Start time of the schedule. Must be at least five minutes in the future. Defaults to seven minutes in the future from the time the resource is created.
         * 
         * @return builder
         * 
         */
        public Builder startTime(String startTime) {
            return startTime(Output.of(startTime));
        }

        public Builder startTimeOffsetMinutes(@Nullable Output<Double> startTimeOffsetMinutes) {
            $.startTimeOffsetMinutes = startTimeOffsetMinutes;
            return this;
        }

        public Builder startTimeOffsetMinutes(Double startTimeOffsetMinutes) {
            return startTimeOffsetMinutes(Output.of(startTimeOffsetMinutes));
        }

        /**
         * @param timeZone The timezone of the start time. Defaults to `Etc/UTC`. For possible values see: &lt;https://docs.microsoft.com/en-us/rest/api/maps/timezone/gettimezoneenumwindows&gt;
         * 
         * @return builder
         * 
         */
        public Builder timeZone(@Nullable Output<String> timeZone) {
            $.timeZone = timeZone;
            return this;
        }

        /**
         * @param timeZone The timezone of the start time. Defaults to `Etc/UTC`. For possible values see: &lt;https://docs.microsoft.com/en-us/rest/api/maps/timezone/gettimezoneenumwindows&gt;
         * 
         * @return builder
         * 
         */
        public Builder timeZone(String timeZone) {
            return timeZone(Output.of(timeZone));
        }

        public SoftwareUpdateConfigurationScheduleArgs build() {
            if ($.frequency == null) {
                throw new MissingRequiredPropertyException("SoftwareUpdateConfigurationScheduleArgs", "frequency");
            }
            return $;
        }
    }

}
