// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerapp.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CustomDomainState extends com.pulumi.resources.ResourceArgs {

    public static final CustomDomainState Empty = new CustomDomainState();

    /**
     * The Certificate Binding type. Possible values include `Disabled` and `SniEnabled`. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="certificateBindingType")
    private @Nullable Output<String> certificateBindingType;

    /**
     * @return The Certificate Binding type. Possible values include `Disabled` and `SniEnabled`. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> certificateBindingType() {
        return Optional.ofNullable(this.certificateBindingType);
    }

    /**
     * The ID of the Container App Environment Certificate to use. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="containerAppEnvironmentCertificateId")
    private @Nullable Output<String> containerAppEnvironmentCertificateId;

    /**
     * @return The ID of the Container App Environment Certificate to use. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> containerAppEnvironmentCertificateId() {
        return Optional.ofNullable(this.containerAppEnvironmentCertificateId);
    }

    /**
     * The ID of the Container App to which this Custom Domain should be bound. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="containerAppId")
    private @Nullable Output<String> containerAppId;

    /**
     * @return The ID of the Container App to which this Custom Domain should be bound. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> containerAppId() {
        return Optional.ofNullable(this.containerAppId);
    }

    /**
     * The fully qualified name of the Custom Domain. Must be the CN or a named SAN in the certificate specified by the `container_app_environment_certificate_id`. Changing this forces a new resource to be created.
     * 
     * &gt; **Note:** The Custom Domain verification TXT record requires a prefix of `asuid.`, however, this must be trimmed from the `name` property here. See the [official docs](https://learn.microsoft.com/en-us/azure/container-apps/custom-domains-certificates) for more information.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The fully qualified name of the Custom Domain. Must be the CN or a named SAN in the certificate specified by the `container_app_environment_certificate_id`. Changing this forces a new resource to be created.
     * 
     * &gt; **Note:** The Custom Domain verification TXT record requires a prefix of `asuid.`, however, this must be trimmed from the `name` property here. See the [official docs](https://learn.microsoft.com/en-us/azure/container-apps/custom-domains-certificates) for more information.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private CustomDomainState() {}

    private CustomDomainState(CustomDomainState $) {
        this.certificateBindingType = $.certificateBindingType;
        this.containerAppEnvironmentCertificateId = $.containerAppEnvironmentCertificateId;
        this.containerAppId = $.containerAppId;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CustomDomainState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CustomDomainState $;

        public Builder() {
            $ = new CustomDomainState();
        }

        public Builder(CustomDomainState defaults) {
            $ = new CustomDomainState(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateBindingType The Certificate Binding type. Possible values include `Disabled` and `SniEnabled`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder certificateBindingType(@Nullable Output<String> certificateBindingType) {
            $.certificateBindingType = certificateBindingType;
            return this;
        }

        /**
         * @param certificateBindingType The Certificate Binding type. Possible values include `Disabled` and `SniEnabled`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder certificateBindingType(String certificateBindingType) {
            return certificateBindingType(Output.of(certificateBindingType));
        }

        /**
         * @param containerAppEnvironmentCertificateId The ID of the Container App Environment Certificate to use. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder containerAppEnvironmentCertificateId(@Nullable Output<String> containerAppEnvironmentCertificateId) {
            $.containerAppEnvironmentCertificateId = containerAppEnvironmentCertificateId;
            return this;
        }

        /**
         * @param containerAppEnvironmentCertificateId The ID of the Container App Environment Certificate to use. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder containerAppEnvironmentCertificateId(String containerAppEnvironmentCertificateId) {
            return containerAppEnvironmentCertificateId(Output.of(containerAppEnvironmentCertificateId));
        }

        /**
         * @param containerAppId The ID of the Container App to which this Custom Domain should be bound. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder containerAppId(@Nullable Output<String> containerAppId) {
            $.containerAppId = containerAppId;
            return this;
        }

        /**
         * @param containerAppId The ID of the Container App to which this Custom Domain should be bound. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder containerAppId(String containerAppId) {
            return containerAppId(Output.of(containerAppId));
        }

        /**
         * @param name The fully qualified name of the Custom Domain. Must be the CN or a named SAN in the certificate specified by the `container_app_environment_certificate_id`. Changing this forces a new resource to be created.
         * 
         * &gt; **Note:** The Custom Domain verification TXT record requires a prefix of `asuid.`, however, this must be trimmed from the `name` property here. See the [official docs](https://learn.microsoft.com/en-us/azure/container-apps/custom-domains-certificates) for more information.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The fully qualified name of the Custom Domain. Must be the CN or a named SAN in the certificate specified by the `container_app_environment_certificate_id`. Changing this forces a new resource to be created.
         * 
         * &gt; **Note:** The Custom Domain verification TXT record requires a prefix of `asuid.`, however, this must be trimmed from the `name` property here. See the [official docs](https://learn.microsoft.com/en-us/azure/container-apps/custom-domains-certificates) for more information.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public CustomDomainState build() {
            return $;
        }
    }

}
