// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LinuxVirtualMachineScaleSetDataDiskArgs extends com.pulumi.resources.ResourceArgs {

    public static final LinuxVirtualMachineScaleSetDataDiskArgs Empty = new LinuxVirtualMachineScaleSetDataDiskArgs();

    /**
     * The type of Caching which should be used for this Data Disk. Possible values are `None`, `ReadOnly` and `ReadWrite`.
     * 
     */
    @Import(name="caching", required=true)
    private Output<String> caching;

    /**
     * @return The type of Caching which should be used for this Data Disk. Possible values are `None`, `ReadOnly` and `ReadWrite`.
     * 
     */
    public Output<String> caching() {
        return this.caching;
    }

    /**
     * The create option which should be used for this Data Disk. Possible values are `Empty` and `FromImage`. Defaults to `Empty`. (`FromImage` should only be used if the source image includes data disks).
     * 
     */
    @Import(name="createOption")
    private @Nullable Output<String> createOption;

    /**
     * @return The create option which should be used for this Data Disk. Possible values are `Empty` and `FromImage`. Defaults to `Empty`. (`FromImage` should only be used if the source image includes data disks).
     * 
     */
    public Optional<Output<String>> createOption() {
        return Optional.ofNullable(this.createOption);
    }

    /**
     * The ID of the Disk Encryption Set which should be used to encrypt this Data Disk.
     * 
     */
    @Import(name="diskEncryptionSetId")
    private @Nullable Output<String> diskEncryptionSetId;

    /**
     * @return The ID of the Disk Encryption Set which should be used to encrypt this Data Disk.
     * 
     */
    public Optional<Output<String>> diskEncryptionSetId() {
        return Optional.ofNullable(this.diskEncryptionSetId);
    }

    /**
     * The size of the Data Disk which should be created.
     * 
     */
    @Import(name="diskSizeGb", required=true)
    private Output<Integer> diskSizeGb;

    /**
     * @return The size of the Data Disk which should be created.
     * 
     */
    public Output<Integer> diskSizeGb() {
        return this.diskSizeGb;
    }

    /**
     * The Logical Unit Number of the Data Disk, which must be unique within the Virtual Machine.
     * 
     */
    @Import(name="lun", required=true)
    private Output<Integer> lun;

    /**
     * @return The Logical Unit Number of the Data Disk, which must be unique within the Virtual Machine.
     * 
     */
    public Output<Integer> lun() {
        return this.lun;
    }

    /**
     * The Type of Storage Account which should back this Data Disk. Possible values include `Standard_LRS`, `StandardSSD_LRS`, `Premium_LRS` and `UltraSSD_LRS`.
     * 
     */
    @Import(name="storageAccountType", required=true)
    private Output<String> storageAccountType;

    /**
     * @return The Type of Storage Account which should back this Data Disk. Possible values include `Standard_LRS`, `StandardSSD_LRS`, `Premium_LRS` and `UltraSSD_LRS`.
     * 
     */
    public Output<String> storageAccountType() {
        return this.storageAccountType;
    }

    @Import(name="ultraSsdDiskIopsReadWrite")
    private @Nullable Output<Integer> ultraSsdDiskIopsReadWrite;

    public Optional<Output<Integer>> ultraSsdDiskIopsReadWrite() {
        return Optional.ofNullable(this.ultraSsdDiskIopsReadWrite);
    }

    @Import(name="ultraSsdDiskMbpsReadWrite")
    private @Nullable Output<Integer> ultraSsdDiskMbpsReadWrite;

    public Optional<Output<Integer>> ultraSsdDiskMbpsReadWrite() {
        return Optional.ofNullable(this.ultraSsdDiskMbpsReadWrite);
    }

    /**
     * Should Write Accelerator be enabled for this Data Disk? Defaults to `false`.
     * 
     */
    @Import(name="writeAcceleratorEnabled")
    private @Nullable Output<Boolean> writeAcceleratorEnabled;

    /**
     * @return Should Write Accelerator be enabled for this Data Disk? Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> writeAcceleratorEnabled() {
        return Optional.ofNullable(this.writeAcceleratorEnabled);
    }

    private LinuxVirtualMachineScaleSetDataDiskArgs() {}

    private LinuxVirtualMachineScaleSetDataDiskArgs(LinuxVirtualMachineScaleSetDataDiskArgs $) {
        this.caching = $.caching;
        this.createOption = $.createOption;
        this.diskEncryptionSetId = $.diskEncryptionSetId;
        this.diskSizeGb = $.diskSizeGb;
        this.lun = $.lun;
        this.storageAccountType = $.storageAccountType;
        this.ultraSsdDiskIopsReadWrite = $.ultraSsdDiskIopsReadWrite;
        this.ultraSsdDiskMbpsReadWrite = $.ultraSsdDiskMbpsReadWrite;
        this.writeAcceleratorEnabled = $.writeAcceleratorEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LinuxVirtualMachineScaleSetDataDiskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LinuxVirtualMachineScaleSetDataDiskArgs $;

        public Builder() {
            $ = new LinuxVirtualMachineScaleSetDataDiskArgs();
        }

        public Builder(LinuxVirtualMachineScaleSetDataDiskArgs defaults) {
            $ = new LinuxVirtualMachineScaleSetDataDiskArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param caching The type of Caching which should be used for this Data Disk. Possible values are `None`, `ReadOnly` and `ReadWrite`.
         * 
         * @return builder
         * 
         */
        public Builder caching(Output<String> caching) {
            $.caching = caching;
            return this;
        }

        /**
         * @param caching The type of Caching which should be used for this Data Disk. Possible values are `None`, `ReadOnly` and `ReadWrite`.
         * 
         * @return builder
         * 
         */
        public Builder caching(String caching) {
            return caching(Output.of(caching));
        }

        /**
         * @param createOption The create option which should be used for this Data Disk. Possible values are `Empty` and `FromImage`. Defaults to `Empty`. (`FromImage` should only be used if the source image includes data disks).
         * 
         * @return builder
         * 
         */
        public Builder createOption(@Nullable Output<String> createOption) {
            $.createOption = createOption;
            return this;
        }

        /**
         * @param createOption The create option which should be used for this Data Disk. Possible values are `Empty` and `FromImage`. Defaults to `Empty`. (`FromImage` should only be used if the source image includes data disks).
         * 
         * @return builder
         * 
         */
        public Builder createOption(String createOption) {
            return createOption(Output.of(createOption));
        }

        /**
         * @param diskEncryptionSetId The ID of the Disk Encryption Set which should be used to encrypt this Data Disk.
         * 
         * @return builder
         * 
         */
        public Builder diskEncryptionSetId(@Nullable Output<String> diskEncryptionSetId) {
            $.diskEncryptionSetId = diskEncryptionSetId;
            return this;
        }

        /**
         * @param diskEncryptionSetId The ID of the Disk Encryption Set which should be used to encrypt this Data Disk.
         * 
         * @return builder
         * 
         */
        public Builder diskEncryptionSetId(String diskEncryptionSetId) {
            return diskEncryptionSetId(Output.of(diskEncryptionSetId));
        }

        /**
         * @param diskSizeGb The size of the Data Disk which should be created.
         * 
         * @return builder
         * 
         */
        public Builder diskSizeGb(Output<Integer> diskSizeGb) {
            $.diskSizeGb = diskSizeGb;
            return this;
        }

        /**
         * @param diskSizeGb The size of the Data Disk which should be created.
         * 
         * @return builder
         * 
         */
        public Builder diskSizeGb(Integer diskSizeGb) {
            return diskSizeGb(Output.of(diskSizeGb));
        }

        /**
         * @param lun The Logical Unit Number of the Data Disk, which must be unique within the Virtual Machine.
         * 
         * @return builder
         * 
         */
        public Builder lun(Output<Integer> lun) {
            $.lun = lun;
            return this;
        }

        /**
         * @param lun The Logical Unit Number of the Data Disk, which must be unique within the Virtual Machine.
         * 
         * @return builder
         * 
         */
        public Builder lun(Integer lun) {
            return lun(Output.of(lun));
        }

        /**
         * @param storageAccountType The Type of Storage Account which should back this Data Disk. Possible values include `Standard_LRS`, `StandardSSD_LRS`, `Premium_LRS` and `UltraSSD_LRS`.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountType(Output<String> storageAccountType) {
            $.storageAccountType = storageAccountType;
            return this;
        }

        /**
         * @param storageAccountType The Type of Storage Account which should back this Data Disk. Possible values include `Standard_LRS`, `StandardSSD_LRS`, `Premium_LRS` and `UltraSSD_LRS`.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountType(String storageAccountType) {
            return storageAccountType(Output.of(storageAccountType));
        }

        public Builder ultraSsdDiskIopsReadWrite(@Nullable Output<Integer> ultraSsdDiskIopsReadWrite) {
            $.ultraSsdDiskIopsReadWrite = ultraSsdDiskIopsReadWrite;
            return this;
        }

        public Builder ultraSsdDiskIopsReadWrite(Integer ultraSsdDiskIopsReadWrite) {
            return ultraSsdDiskIopsReadWrite(Output.of(ultraSsdDiskIopsReadWrite));
        }

        public Builder ultraSsdDiskMbpsReadWrite(@Nullable Output<Integer> ultraSsdDiskMbpsReadWrite) {
            $.ultraSsdDiskMbpsReadWrite = ultraSsdDiskMbpsReadWrite;
            return this;
        }

        public Builder ultraSsdDiskMbpsReadWrite(Integer ultraSsdDiskMbpsReadWrite) {
            return ultraSsdDiskMbpsReadWrite(Output.of(ultraSsdDiskMbpsReadWrite));
        }

        /**
         * @param writeAcceleratorEnabled Should Write Accelerator be enabled for this Data Disk? Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder writeAcceleratorEnabled(@Nullable Output<Boolean> writeAcceleratorEnabled) {
            $.writeAcceleratorEnabled = writeAcceleratorEnabled;
            return this;
        }

        /**
         * @param writeAcceleratorEnabled Should Write Accelerator be enabled for this Data Disk? Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder writeAcceleratorEnabled(Boolean writeAcceleratorEnabled) {
            return writeAcceleratorEnabled(Output.of(writeAcceleratorEnabled));
        }

        public LinuxVirtualMachineScaleSetDataDiskArgs build() {
            $.caching = Objects.requireNonNull($.caching, "expected parameter 'caching' to be non-null");
            $.diskSizeGb = Objects.requireNonNull($.diskSizeGb, "expected parameter 'diskSizeGb' to be non-null");
            $.lun = Objects.requireNonNull($.lun, "expected parameter 'lun' to be non-null");
            $.storageAccountType = Objects.requireNonNull($.storageAccountType, "expected parameter 'storageAccountType' to be non-null");
            return $;
        }
    }

}
