// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.pim.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetRoleManagementPolicyActiveAssignmentRule {
    /**
     * @return (Boolean) Must an assignment have an expiry date.
     * 
     */
    private Boolean expirationRequired;
    /**
     * @return (String) The maximum length of time an assignment can be valid, as an ISO8601 duration.
     * 
     */
    private String expireAfter;
    /**
     * @return (Boolean) Is a justification required to create new assignments.
     * 
     */
    private Boolean requireJustification;
    /**
     * @return (Boolean) Is multi-factor authentication required to create new assignments.
     * 
     */
    private Boolean requireMultifactorAuthentication;
    /**
     * @return (Boolean) Is ticket information required to create new assignments.
     * 
     */
    private Boolean requireTicketInfo;

    private GetRoleManagementPolicyActiveAssignmentRule() {}
    /**
     * @return (Boolean) Must an assignment have an expiry date.
     * 
     */
    public Boolean expirationRequired() {
        return this.expirationRequired;
    }
    /**
     * @return (String) The maximum length of time an assignment can be valid, as an ISO8601 duration.
     * 
     */
    public String expireAfter() {
        return this.expireAfter;
    }
    /**
     * @return (Boolean) Is a justification required to create new assignments.
     * 
     */
    public Boolean requireJustification() {
        return this.requireJustification;
    }
    /**
     * @return (Boolean) Is multi-factor authentication required to create new assignments.
     * 
     */
    public Boolean requireMultifactorAuthentication() {
        return this.requireMultifactorAuthentication;
    }
    /**
     * @return (Boolean) Is ticket information required to create new assignments.
     * 
     */
    public Boolean requireTicketInfo() {
        return this.requireTicketInfo;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRoleManagementPolicyActiveAssignmentRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean expirationRequired;
        private String expireAfter;
        private Boolean requireJustification;
        private Boolean requireMultifactorAuthentication;
        private Boolean requireTicketInfo;
        public Builder() {}
        public Builder(GetRoleManagementPolicyActiveAssignmentRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.expirationRequired = defaults.expirationRequired;
    	      this.expireAfter = defaults.expireAfter;
    	      this.requireJustification = defaults.requireJustification;
    	      this.requireMultifactorAuthentication = defaults.requireMultifactorAuthentication;
    	      this.requireTicketInfo = defaults.requireTicketInfo;
        }

        @CustomType.Setter
        public Builder expirationRequired(Boolean expirationRequired) {
            if (expirationRequired == null) {
              throw new MissingRequiredPropertyException("GetRoleManagementPolicyActiveAssignmentRule", "expirationRequired");
            }
            this.expirationRequired = expirationRequired;
            return this;
        }
        @CustomType.Setter
        public Builder expireAfter(String expireAfter) {
            if (expireAfter == null) {
              throw new MissingRequiredPropertyException("GetRoleManagementPolicyActiveAssignmentRule", "expireAfter");
            }
            this.expireAfter = expireAfter;
            return this;
        }
        @CustomType.Setter
        public Builder requireJustification(Boolean requireJustification) {
            if (requireJustification == null) {
              throw new MissingRequiredPropertyException("GetRoleManagementPolicyActiveAssignmentRule", "requireJustification");
            }
            this.requireJustification = requireJustification;
            return this;
        }
        @CustomType.Setter
        public Builder requireMultifactorAuthentication(Boolean requireMultifactorAuthentication) {
            if (requireMultifactorAuthentication == null) {
              throw new MissingRequiredPropertyException("GetRoleManagementPolicyActiveAssignmentRule", "requireMultifactorAuthentication");
            }
            this.requireMultifactorAuthentication = requireMultifactorAuthentication;
            return this;
        }
        @CustomType.Setter
        public Builder requireTicketInfo(Boolean requireTicketInfo) {
            if (requireTicketInfo == null) {
              throw new MissingRequiredPropertyException("GetRoleManagementPolicyActiveAssignmentRule", "requireTicketInfo");
            }
            this.requireTicketInfo = requireTicketInfo;
            return this;
        }
        public GetRoleManagementPolicyActiveAssignmentRule build() {
            final var _resultValue = new GetRoleManagementPolicyActiveAssignmentRule();
            _resultValue.expirationRequired = expirationRequired;
            _resultValue.expireAfter = expireAfter;
            _resultValue.requireJustification = requireJustification;
            _resultValue.requireMultifactorAuthentication = requireMultifactorAuthentication;
            _resultValue.requireTicketInfo = requireTicketInfo;
            return _resultValue;
        }
    }
}
