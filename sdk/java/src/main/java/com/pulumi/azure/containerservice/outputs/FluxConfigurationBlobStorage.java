// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerservice.outputs;

import com.pulumi.azure.containerservice.outputs.FluxConfigurationBlobStorageManagedIdentity;
import com.pulumi.azure.containerservice.outputs.FluxConfigurationBlobStorageServicePrincipal;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FluxConfigurationBlobStorage {
    /**
     * @return Specifies the account key (shared key) to access the storage account.
     * 
     */
    private @Nullable String accountKey;
    /**
     * @return Specifies the Azure Blob container ID.
     * 
     */
    private String containerId;
    /**
     * @return Specifies the name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets.
     * 
     */
    private @Nullable String localAuthReference;
    /**
     * @return A `managed_identity` block as defined below.
     * 
     */
    private @Nullable FluxConfigurationBlobStorageManagedIdentity managedIdentity;
    /**
     * @return Specifies the shared access token to access the storage container.
     * 
     */
    private @Nullable String sasToken;
    /**
     * @return A `service_principal` block as defined below.
     * 
     */
    private @Nullable FluxConfigurationBlobStorageServicePrincipal servicePrincipal;
    /**
     * @return Specifies the interval at which to re-reconcile the cluster Azure Blob source with the remote.
     * 
     */
    private @Nullable Integer syncIntervalInSeconds;
    /**
     * @return Specifies the maximum time to attempt to reconcile the cluster Azure Blob source with the remote.
     * 
     */
    private @Nullable Integer timeoutInSeconds;

    private FluxConfigurationBlobStorage() {}
    /**
     * @return Specifies the account key (shared key) to access the storage account.
     * 
     */
    public Optional<String> accountKey() {
        return Optional.ofNullable(this.accountKey);
    }
    /**
     * @return Specifies the Azure Blob container ID.
     * 
     */
    public String containerId() {
        return this.containerId;
    }
    /**
     * @return Specifies the name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets.
     * 
     */
    public Optional<String> localAuthReference() {
        return Optional.ofNullable(this.localAuthReference);
    }
    /**
     * @return A `managed_identity` block as defined below.
     * 
     */
    public Optional<FluxConfigurationBlobStorageManagedIdentity> managedIdentity() {
        return Optional.ofNullable(this.managedIdentity);
    }
    /**
     * @return Specifies the shared access token to access the storage container.
     * 
     */
    public Optional<String> sasToken() {
        return Optional.ofNullable(this.sasToken);
    }
    /**
     * @return A `service_principal` block as defined below.
     * 
     */
    public Optional<FluxConfigurationBlobStorageServicePrincipal> servicePrincipal() {
        return Optional.ofNullable(this.servicePrincipal);
    }
    /**
     * @return Specifies the interval at which to re-reconcile the cluster Azure Blob source with the remote.
     * 
     */
    public Optional<Integer> syncIntervalInSeconds() {
        return Optional.ofNullable(this.syncIntervalInSeconds);
    }
    /**
     * @return Specifies the maximum time to attempt to reconcile the cluster Azure Blob source with the remote.
     * 
     */
    public Optional<Integer> timeoutInSeconds() {
        return Optional.ofNullable(this.timeoutInSeconds);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FluxConfigurationBlobStorage defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accountKey;
        private String containerId;
        private @Nullable String localAuthReference;
        private @Nullable FluxConfigurationBlobStorageManagedIdentity managedIdentity;
        private @Nullable String sasToken;
        private @Nullable FluxConfigurationBlobStorageServicePrincipal servicePrincipal;
        private @Nullable Integer syncIntervalInSeconds;
        private @Nullable Integer timeoutInSeconds;
        public Builder() {}
        public Builder(FluxConfigurationBlobStorage defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountKey = defaults.accountKey;
    	      this.containerId = defaults.containerId;
    	      this.localAuthReference = defaults.localAuthReference;
    	      this.managedIdentity = defaults.managedIdentity;
    	      this.sasToken = defaults.sasToken;
    	      this.servicePrincipal = defaults.servicePrincipal;
    	      this.syncIntervalInSeconds = defaults.syncIntervalInSeconds;
    	      this.timeoutInSeconds = defaults.timeoutInSeconds;
        }

        @CustomType.Setter
        public Builder accountKey(@Nullable String accountKey) {

            this.accountKey = accountKey;
            return this;
        }
        @CustomType.Setter
        public Builder containerId(String containerId) {
            if (containerId == null) {
              throw new MissingRequiredPropertyException("FluxConfigurationBlobStorage", "containerId");
            }
            this.containerId = containerId;
            return this;
        }
        @CustomType.Setter
        public Builder localAuthReference(@Nullable String localAuthReference) {

            this.localAuthReference = localAuthReference;
            return this;
        }
        @CustomType.Setter
        public Builder managedIdentity(@Nullable FluxConfigurationBlobStorageManagedIdentity managedIdentity) {

            this.managedIdentity = managedIdentity;
            return this;
        }
        @CustomType.Setter
        public Builder sasToken(@Nullable String sasToken) {

            this.sasToken = sasToken;
            return this;
        }
        @CustomType.Setter
        public Builder servicePrincipal(@Nullable FluxConfigurationBlobStorageServicePrincipal servicePrincipal) {

            this.servicePrincipal = servicePrincipal;
            return this;
        }
        @CustomType.Setter
        public Builder syncIntervalInSeconds(@Nullable Integer syncIntervalInSeconds) {

            this.syncIntervalInSeconds = syncIntervalInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder timeoutInSeconds(@Nullable Integer timeoutInSeconds) {

            this.timeoutInSeconds = timeoutInSeconds;
            return this;
        }
        public FluxConfigurationBlobStorage build() {
            final var _resultValue = new FluxConfigurationBlobStorage();
            _resultValue.accountKey = accountKey;
            _resultValue.containerId = containerId;
            _resultValue.localAuthReference = localAuthReference;
            _resultValue.managedIdentity = managedIdentity;
            _resultValue.sasToken = sasToken;
            _resultValue.servicePrincipal = servicePrincipal;
            _resultValue.syncIntervalInSeconds = syncIntervalInSeconds;
            _resultValue.timeoutInSeconds = timeoutInSeconds;
            return _resultValue;
        }
    }
}
