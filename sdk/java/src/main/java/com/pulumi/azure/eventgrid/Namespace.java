// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.eventgrid;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.eventgrid.NamespaceArgs;
import com.pulumi.azure.eventgrid.inputs.NamespaceState;
import com.pulumi.azure.eventgrid.outputs.NamespaceIdentity;
import com.pulumi.azure.eventgrid.outputs.NamespaceInboundIpRule;
import com.pulumi.azure.eventgrid.outputs.NamespaceTopicSpacesConfiguration;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages an EventGrid Namespace
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.eventgrid.Namespace;
 * import com.pulumi.azure.eventgrid.NamespaceArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new ResourceGroup("example", ResourceGroupArgs.builder()
 *             .name("example-resources")
 *             .location("West Europe")
 *             .build());
 * 
 *         var exampleNamespace = new Namespace("exampleNamespace", NamespaceArgs.builder()
 *             .name("my-eventgrid-namespace")
 *             .location(example.location())
 *             .resourceGroupName(example.name())
 *             .tags(Map.of("environment", "Production"))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## API Providers
 * 
 * &lt;!-- This section is generated, changes will be overwritten --&gt;
 * This resource uses the following Azure API Providers:
 * 
 * * `Microsoft.EventGrid` - 2023-12-15-preview
 * 
 * ## Import
 * 
 * EventGrid Namespace&#39;s can be imported using the `resource id`, e.g.
 * 
 * ```sh
 * $ pulumi import azure:eventgrid/namespace:Namespace namespace1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.EventGrid/namespaces/namespace1
 * ```
 * 
 */
@ResourceType(type="azure:eventgrid/namespace:Namespace")
public class Namespace extends com.pulumi.resources.CustomResource {
    /**
     * Specifies the Capacity / Throughput Units for an Eventgrid Namespace. Valid values can be between `1` and `40`.
     * 
     */
    @Export(name="capacity", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> capacity;

    /**
     * @return Specifies the Capacity / Throughput Units for an Eventgrid Namespace. Valid values can be between `1` and `40`.
     * 
     */
    public Output<Optional<Integer>> capacity() {
        return Codegen.optional(this.capacity);
    }
    /**
     * An `identity` block as defined below.
     * 
     */
    @Export(name="identity", refs={NamespaceIdentity.class}, tree="[0]")
    private Output</* @Nullable */ NamespaceIdentity> identity;

    /**
     * @return An `identity` block as defined below.
     * 
     */
    public Output<Optional<NamespaceIdentity>> identity() {
        return Codegen.optional(this.identity);
    }
    /**
     * One or more `inbound_ip_rule` blocks as defined below.
     * 
     */
    @Export(name="inboundIpRules", refs={List.class,NamespaceInboundIpRule.class}, tree="[0,1]")
    private Output</* @Nullable */ List<NamespaceInboundIpRule>> inboundIpRules;

    /**
     * @return One or more `inbound_ip_rule` blocks as defined below.
     * 
     */
    public Output<Optional<List<NamespaceInboundIpRule>>> inboundIpRules() {
        return Codegen.optional(this.inboundIpRules);
    }
    /**
     * Specifies the supported Azure location where the resource should exist. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return Specifies the supported Azure location where the resource should exist. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * Specifies the name of the Event Grid Namespace resource. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Specifies the name of the Event Grid Namespace resource. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Whether or not public network access is allowed for this server. Defaults to `Enabled`.
     * 
     */
    @Export(name="publicNetworkAccess", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> publicNetworkAccess;

    /**
     * @return Whether or not public network access is allowed for this server. Defaults to `Enabled`.
     * 
     */
    public Output<Optional<String>> publicNetworkAccess() {
        return Codegen.optional(this.publicNetworkAccess);
    }
    /**
     * The name of the resource group in which the Event Grid Namespace should exist. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="resourceGroupName", refs={String.class}, tree="[0]")
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group in which the Event Grid Namespace should exist. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * Defines which tier to use. The only possible value is `Standard`. Defaults to `Standard`.
     * 
     */
    @Export(name="sku", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> sku;

    /**
     * @return Defines which tier to use. The only possible value is `Standard`. Defaults to `Standard`.
     * 
     */
    public Output<Optional<String>> sku() {
        return Codegen.optional(this.sku);
    }
    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Export(name="tags", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * A `topic_spaces_configuration` block as defined below.
     * 
     */
    @Export(name="topicSpacesConfigurations", refs={List.class,NamespaceTopicSpacesConfiguration.class}, tree="[0,1]")
    private Output</* @Nullable */ List<NamespaceTopicSpacesConfiguration>> topicSpacesConfigurations;

    /**
     * @return A `topic_spaces_configuration` block as defined below.
     * 
     */
    public Output<Optional<List<NamespaceTopicSpacesConfiguration>>> topicSpacesConfigurations() {
        return Codegen.optional(this.topicSpacesConfigurations);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Namespace(java.lang.String name) {
        this(name, NamespaceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Namespace(java.lang.String name, NamespaceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Namespace(java.lang.String name, NamespaceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:eventgrid/namespace:Namespace", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Namespace(java.lang.String name, Output<java.lang.String> id, @Nullable NamespaceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:eventgrid/namespace:Namespace", name, state, makeResourceOptions(options, id), false);
    }

    private static NamespaceArgs makeArgs(NamespaceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? NamespaceArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Namespace get(java.lang.String name, Output<java.lang.String> id, @Nullable NamespaceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Namespace(name, id, state, options);
    }
}
