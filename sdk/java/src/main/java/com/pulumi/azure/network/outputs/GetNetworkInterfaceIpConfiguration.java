// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetNetworkInterfaceIpConfiguration {
    /**
     * @return A list of Backend Address Pool IDs within a Application Gateway that this Network Interface is connected to.
     * 
     */
    private List<String> applicationGatewayBackendAddressPoolsIds;
    private List<String> applicationSecurityGroupIds;
    /**
     * @return The Frontend IP Configuration ID of a Gateway SKU Load Balancer the Network Interface is consuming.
     * 
     */
    private String gatewayLoadBalancerFrontendIpConfigurationId;
    /**
     * @return A list of Backend Address Pool IDs within a Load Balancer that this Network Interface is connected to.
     * 
     */
    private List<String> loadBalancerBackendAddressPoolsIds;
    /**
     * @return A list of Inbound NAT Rule IDs within a Load Balancer that this Network Interface is connected to.
     * 
     */
    private List<String> loadBalancerInboundNatRulesIds;
    /**
     * @return Specifies the name of the Network Interface.
     * 
     */
    private String name;
    /**
     * @return is this the Primary IP Configuration for this Network Interface?
     * 
     */
    private Boolean primary;
    /**
     * @return The Private IP Address assigned to this Network Interface.
     * 
     */
    private String privateIpAddress;
    /**
     * @return The IP Address allocation type for the Private address, such as `Dynamic` or `Static`.
     * 
     */
    private String privateIpAddressAllocation;
    private String privateIpAddressVersion;
    /**
     * @return The ID of the Public IP Address which is connected to this Network Interface.
     * 
     */
    private String publicIpAddressId;
    /**
     * @return The ID of the Subnet which the Network Interface is connected to.
     * 
     */
    private String subnetId;

    private GetNetworkInterfaceIpConfiguration() {}
    /**
     * @return A list of Backend Address Pool IDs within a Application Gateway that this Network Interface is connected to.
     * 
     */
    public List<String> applicationGatewayBackendAddressPoolsIds() {
        return this.applicationGatewayBackendAddressPoolsIds;
    }
    public List<String> applicationSecurityGroupIds() {
        return this.applicationSecurityGroupIds;
    }
    /**
     * @return The Frontend IP Configuration ID of a Gateway SKU Load Balancer the Network Interface is consuming.
     * 
     */
    public String gatewayLoadBalancerFrontendIpConfigurationId() {
        return this.gatewayLoadBalancerFrontendIpConfigurationId;
    }
    /**
     * @return A list of Backend Address Pool IDs within a Load Balancer that this Network Interface is connected to.
     * 
     */
    public List<String> loadBalancerBackendAddressPoolsIds() {
        return this.loadBalancerBackendAddressPoolsIds;
    }
    /**
     * @return A list of Inbound NAT Rule IDs within a Load Balancer that this Network Interface is connected to.
     * 
     */
    public List<String> loadBalancerInboundNatRulesIds() {
        return this.loadBalancerInboundNatRulesIds;
    }
    /**
     * @return Specifies the name of the Network Interface.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return is this the Primary IP Configuration for this Network Interface?
     * 
     */
    public Boolean primary() {
        return this.primary;
    }
    /**
     * @return The Private IP Address assigned to this Network Interface.
     * 
     */
    public String privateIpAddress() {
        return this.privateIpAddress;
    }
    /**
     * @return The IP Address allocation type for the Private address, such as `Dynamic` or `Static`.
     * 
     */
    public String privateIpAddressAllocation() {
        return this.privateIpAddressAllocation;
    }
    public String privateIpAddressVersion() {
        return this.privateIpAddressVersion;
    }
    /**
     * @return The ID of the Public IP Address which is connected to this Network Interface.
     * 
     */
    public String publicIpAddressId() {
        return this.publicIpAddressId;
    }
    /**
     * @return The ID of the Subnet which the Network Interface is connected to.
     * 
     */
    public String subnetId() {
        return this.subnetId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNetworkInterfaceIpConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> applicationGatewayBackendAddressPoolsIds;
        private List<String> applicationSecurityGroupIds;
        private String gatewayLoadBalancerFrontendIpConfigurationId;
        private List<String> loadBalancerBackendAddressPoolsIds;
        private List<String> loadBalancerInboundNatRulesIds;
        private String name;
        private Boolean primary;
        private String privateIpAddress;
        private String privateIpAddressAllocation;
        private String privateIpAddressVersion;
        private String publicIpAddressId;
        private String subnetId;
        public Builder() {}
        public Builder(GetNetworkInterfaceIpConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationGatewayBackendAddressPoolsIds = defaults.applicationGatewayBackendAddressPoolsIds;
    	      this.applicationSecurityGroupIds = defaults.applicationSecurityGroupIds;
    	      this.gatewayLoadBalancerFrontendIpConfigurationId = defaults.gatewayLoadBalancerFrontendIpConfigurationId;
    	      this.loadBalancerBackendAddressPoolsIds = defaults.loadBalancerBackendAddressPoolsIds;
    	      this.loadBalancerInboundNatRulesIds = defaults.loadBalancerInboundNatRulesIds;
    	      this.name = defaults.name;
    	      this.primary = defaults.primary;
    	      this.privateIpAddress = defaults.privateIpAddress;
    	      this.privateIpAddressAllocation = defaults.privateIpAddressAllocation;
    	      this.privateIpAddressVersion = defaults.privateIpAddressVersion;
    	      this.publicIpAddressId = defaults.publicIpAddressId;
    	      this.subnetId = defaults.subnetId;
        }

        @CustomType.Setter
        public Builder applicationGatewayBackendAddressPoolsIds(List<String> applicationGatewayBackendAddressPoolsIds) {
            if (applicationGatewayBackendAddressPoolsIds == null) {
              throw new MissingRequiredPropertyException("GetNetworkInterfaceIpConfiguration", "applicationGatewayBackendAddressPoolsIds");
            }
            this.applicationGatewayBackendAddressPoolsIds = applicationGatewayBackendAddressPoolsIds;
            return this;
        }
        public Builder applicationGatewayBackendAddressPoolsIds(String... applicationGatewayBackendAddressPoolsIds) {
            return applicationGatewayBackendAddressPoolsIds(List.of(applicationGatewayBackendAddressPoolsIds));
        }
        @CustomType.Setter
        public Builder applicationSecurityGroupIds(List<String> applicationSecurityGroupIds) {
            if (applicationSecurityGroupIds == null) {
              throw new MissingRequiredPropertyException("GetNetworkInterfaceIpConfiguration", "applicationSecurityGroupIds");
            }
            this.applicationSecurityGroupIds = applicationSecurityGroupIds;
            return this;
        }
        public Builder applicationSecurityGroupIds(String... applicationSecurityGroupIds) {
            return applicationSecurityGroupIds(List.of(applicationSecurityGroupIds));
        }
        @CustomType.Setter
        public Builder gatewayLoadBalancerFrontendIpConfigurationId(String gatewayLoadBalancerFrontendIpConfigurationId) {
            if (gatewayLoadBalancerFrontendIpConfigurationId == null) {
              throw new MissingRequiredPropertyException("GetNetworkInterfaceIpConfiguration", "gatewayLoadBalancerFrontendIpConfigurationId");
            }
            this.gatewayLoadBalancerFrontendIpConfigurationId = gatewayLoadBalancerFrontendIpConfigurationId;
            return this;
        }
        @CustomType.Setter
        public Builder loadBalancerBackendAddressPoolsIds(List<String> loadBalancerBackendAddressPoolsIds) {
            if (loadBalancerBackendAddressPoolsIds == null) {
              throw new MissingRequiredPropertyException("GetNetworkInterfaceIpConfiguration", "loadBalancerBackendAddressPoolsIds");
            }
            this.loadBalancerBackendAddressPoolsIds = loadBalancerBackendAddressPoolsIds;
            return this;
        }
        public Builder loadBalancerBackendAddressPoolsIds(String... loadBalancerBackendAddressPoolsIds) {
            return loadBalancerBackendAddressPoolsIds(List.of(loadBalancerBackendAddressPoolsIds));
        }
        @CustomType.Setter
        public Builder loadBalancerInboundNatRulesIds(List<String> loadBalancerInboundNatRulesIds) {
            if (loadBalancerInboundNatRulesIds == null) {
              throw new MissingRequiredPropertyException("GetNetworkInterfaceIpConfiguration", "loadBalancerInboundNatRulesIds");
            }
            this.loadBalancerInboundNatRulesIds = loadBalancerInboundNatRulesIds;
            return this;
        }
        public Builder loadBalancerInboundNatRulesIds(String... loadBalancerInboundNatRulesIds) {
            return loadBalancerInboundNatRulesIds(List.of(loadBalancerInboundNatRulesIds));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetNetworkInterfaceIpConfiguration", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder primary(Boolean primary) {
            if (primary == null) {
              throw new MissingRequiredPropertyException("GetNetworkInterfaceIpConfiguration", "primary");
            }
            this.primary = primary;
            return this;
        }
        @CustomType.Setter
        public Builder privateIpAddress(String privateIpAddress) {
            if (privateIpAddress == null) {
              throw new MissingRequiredPropertyException("GetNetworkInterfaceIpConfiguration", "privateIpAddress");
            }
            this.privateIpAddress = privateIpAddress;
            return this;
        }
        @CustomType.Setter
        public Builder privateIpAddressAllocation(String privateIpAddressAllocation) {
            if (privateIpAddressAllocation == null) {
              throw new MissingRequiredPropertyException("GetNetworkInterfaceIpConfiguration", "privateIpAddressAllocation");
            }
            this.privateIpAddressAllocation = privateIpAddressAllocation;
            return this;
        }
        @CustomType.Setter
        public Builder privateIpAddressVersion(String privateIpAddressVersion) {
            if (privateIpAddressVersion == null) {
              throw new MissingRequiredPropertyException("GetNetworkInterfaceIpConfiguration", "privateIpAddressVersion");
            }
            this.privateIpAddressVersion = privateIpAddressVersion;
            return this;
        }
        @CustomType.Setter
        public Builder publicIpAddressId(String publicIpAddressId) {
            if (publicIpAddressId == null) {
              throw new MissingRequiredPropertyException("GetNetworkInterfaceIpConfiguration", "publicIpAddressId");
            }
            this.publicIpAddressId = publicIpAddressId;
            return this;
        }
        @CustomType.Setter
        public Builder subnetId(String subnetId) {
            if (subnetId == null) {
              throw new MissingRequiredPropertyException("GetNetworkInterfaceIpConfiguration", "subnetId");
            }
            this.subnetId = subnetId;
            return this;
        }
        public GetNetworkInterfaceIpConfiguration build() {
            final var _resultValue = new GetNetworkInterfaceIpConfiguration();
            _resultValue.applicationGatewayBackendAddressPoolsIds = applicationGatewayBackendAddressPoolsIds;
            _resultValue.applicationSecurityGroupIds = applicationSecurityGroupIds;
            _resultValue.gatewayLoadBalancerFrontendIpConfigurationId = gatewayLoadBalancerFrontendIpConfigurationId;
            _resultValue.loadBalancerBackendAddressPoolsIds = loadBalancerBackendAddressPoolsIds;
            _resultValue.loadBalancerInboundNatRulesIds = loadBalancerInboundNatRulesIds;
            _resultValue.name = name;
            _resultValue.primary = primary;
            _resultValue.privateIpAddress = privateIpAddress;
            _resultValue.privateIpAddressAllocation = privateIpAddressAllocation;
            _resultValue.privateIpAddressVersion = privateIpAddressVersion;
            _resultValue.publicIpAddressId = publicIpAddressId;
            _resultValue.subnetId = subnetId;
            return _resultValue;
        }
    }
}
