// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appservice.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagedCertificateState extends com.pulumi.resources.ResourceArgs {

    public static final ManagedCertificateState Empty = new ManagedCertificateState();

    /**
     * The Canonical Name of the Certificate.
     * 
     */
    @Import(name="canonicalName")
    private @Nullable Output<String> canonicalName;

    /**
     * @return The Canonical Name of the Certificate.
     * 
     */
    public Optional<Output<String>> canonicalName() {
        return Optional.ofNullable(this.canonicalName);
    }

    /**
     * The ID of the App Service Custom Hostname Binding for the Certificate. Changing this forces a new App Service Managed Certificate to be created.
     * 
     */
    @Import(name="customHostnameBindingId")
    private @Nullable Output<String> customHostnameBindingId;

    /**
     * @return The ID of the App Service Custom Hostname Binding for the Certificate. Changing this forces a new App Service Managed Certificate to be created.
     * 
     */
    public Optional<Output<String>> customHostnameBindingId() {
        return Optional.ofNullable(this.customHostnameBindingId);
    }

    /**
     * The expiration date of the Certificate.
     * 
     */
    @Import(name="expirationDate")
    private @Nullable Output<String> expirationDate;

    /**
     * @return The expiration date of the Certificate.
     * 
     */
    public Optional<Output<String>> expirationDate() {
        return Optional.ofNullable(this.expirationDate);
    }

    /**
     * The friendly name of the Certificate.
     * 
     */
    @Import(name="friendlyName")
    private @Nullable Output<String> friendlyName;

    /**
     * @return The friendly name of the Certificate.
     * 
     */
    public Optional<Output<String>> friendlyName() {
        return Optional.ofNullable(this.friendlyName);
    }

    /**
     * The list of Host Names for the Certificate.
     * 
     */
    @Import(name="hostNames")
    private @Nullable Output<List<String>> hostNames;

    /**
     * @return The list of Host Names for the Certificate.
     * 
     */
    public Optional<Output<List<String>>> hostNames() {
        return Optional.ofNullable(this.hostNames);
    }

    /**
     * The Start date for the Certificate.
     * 
     */
    @Import(name="issueDate")
    private @Nullable Output<String> issueDate;

    /**
     * @return The Start date for the Certificate.
     * 
     */
    public Optional<Output<String>> issueDate() {
        return Optional.ofNullable(this.issueDate);
    }

    /**
     * The issuer of the Certificate.
     * 
     */
    @Import(name="issuer")
    private @Nullable Output<String> issuer;

    /**
     * @return The issuer of the Certificate.
     * 
     */
    public Optional<Output<String>> issuer() {
        return Optional.ofNullable(this.issuer);
    }

    /**
     * The Subject Name for the Certificate.
     * 
     */
    @Import(name="subjectName")
    private @Nullable Output<String> subjectName;

    /**
     * @return The Subject Name for the Certificate.
     * 
     */
    public Optional<Output<String>> subjectName() {
        return Optional.ofNullable(this.subjectName);
    }

    /**
     * A mapping of tags which should be assigned to the App Service Managed Certificate.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags which should be assigned to the App Service Managed Certificate.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The Certificate Thumbprint.
     * 
     */
    @Import(name="thumbprint")
    private @Nullable Output<String> thumbprint;

    /**
     * @return The Certificate Thumbprint.
     * 
     */
    public Optional<Output<String>> thumbprint() {
        return Optional.ofNullable(this.thumbprint);
    }

    private ManagedCertificateState() {}

    private ManagedCertificateState(ManagedCertificateState $) {
        this.canonicalName = $.canonicalName;
        this.customHostnameBindingId = $.customHostnameBindingId;
        this.expirationDate = $.expirationDate;
        this.friendlyName = $.friendlyName;
        this.hostNames = $.hostNames;
        this.issueDate = $.issueDate;
        this.issuer = $.issuer;
        this.subjectName = $.subjectName;
        this.tags = $.tags;
        this.thumbprint = $.thumbprint;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedCertificateState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedCertificateState $;

        public Builder() {
            $ = new ManagedCertificateState();
        }

        public Builder(ManagedCertificateState defaults) {
            $ = new ManagedCertificateState(Objects.requireNonNull(defaults));
        }

        /**
         * @param canonicalName The Canonical Name of the Certificate.
         * 
         * @return builder
         * 
         */
        public Builder canonicalName(@Nullable Output<String> canonicalName) {
            $.canonicalName = canonicalName;
            return this;
        }

        /**
         * @param canonicalName The Canonical Name of the Certificate.
         * 
         * @return builder
         * 
         */
        public Builder canonicalName(String canonicalName) {
            return canonicalName(Output.of(canonicalName));
        }

        /**
         * @param customHostnameBindingId The ID of the App Service Custom Hostname Binding for the Certificate. Changing this forces a new App Service Managed Certificate to be created.
         * 
         * @return builder
         * 
         */
        public Builder customHostnameBindingId(@Nullable Output<String> customHostnameBindingId) {
            $.customHostnameBindingId = customHostnameBindingId;
            return this;
        }

        /**
         * @param customHostnameBindingId The ID of the App Service Custom Hostname Binding for the Certificate. Changing this forces a new App Service Managed Certificate to be created.
         * 
         * @return builder
         * 
         */
        public Builder customHostnameBindingId(String customHostnameBindingId) {
            return customHostnameBindingId(Output.of(customHostnameBindingId));
        }

        /**
         * @param expirationDate The expiration date of the Certificate.
         * 
         * @return builder
         * 
         */
        public Builder expirationDate(@Nullable Output<String> expirationDate) {
            $.expirationDate = expirationDate;
            return this;
        }

        /**
         * @param expirationDate The expiration date of the Certificate.
         * 
         * @return builder
         * 
         */
        public Builder expirationDate(String expirationDate) {
            return expirationDate(Output.of(expirationDate));
        }

        /**
         * @param friendlyName The friendly name of the Certificate.
         * 
         * @return builder
         * 
         */
        public Builder friendlyName(@Nullable Output<String> friendlyName) {
            $.friendlyName = friendlyName;
            return this;
        }

        /**
         * @param friendlyName The friendly name of the Certificate.
         * 
         * @return builder
         * 
         */
        public Builder friendlyName(String friendlyName) {
            return friendlyName(Output.of(friendlyName));
        }

        /**
         * @param hostNames The list of Host Names for the Certificate.
         * 
         * @return builder
         * 
         */
        public Builder hostNames(@Nullable Output<List<String>> hostNames) {
            $.hostNames = hostNames;
            return this;
        }

        /**
         * @param hostNames The list of Host Names for the Certificate.
         * 
         * @return builder
         * 
         */
        public Builder hostNames(List<String> hostNames) {
            return hostNames(Output.of(hostNames));
        }

        /**
         * @param hostNames The list of Host Names for the Certificate.
         * 
         * @return builder
         * 
         */
        public Builder hostNames(String... hostNames) {
            return hostNames(List.of(hostNames));
        }

        /**
         * @param issueDate The Start date for the Certificate.
         * 
         * @return builder
         * 
         */
        public Builder issueDate(@Nullable Output<String> issueDate) {
            $.issueDate = issueDate;
            return this;
        }

        /**
         * @param issueDate The Start date for the Certificate.
         * 
         * @return builder
         * 
         */
        public Builder issueDate(String issueDate) {
            return issueDate(Output.of(issueDate));
        }

        /**
         * @param issuer The issuer of the Certificate.
         * 
         * @return builder
         * 
         */
        public Builder issuer(@Nullable Output<String> issuer) {
            $.issuer = issuer;
            return this;
        }

        /**
         * @param issuer The issuer of the Certificate.
         * 
         * @return builder
         * 
         */
        public Builder issuer(String issuer) {
            return issuer(Output.of(issuer));
        }

        /**
         * @param subjectName The Subject Name for the Certificate.
         * 
         * @return builder
         * 
         */
        public Builder subjectName(@Nullable Output<String> subjectName) {
            $.subjectName = subjectName;
            return this;
        }

        /**
         * @param subjectName The Subject Name for the Certificate.
         * 
         * @return builder
         * 
         */
        public Builder subjectName(String subjectName) {
            return subjectName(Output.of(subjectName));
        }

        /**
         * @param tags A mapping of tags which should be assigned to the App Service Managed Certificate.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags which should be assigned to the App Service Managed Certificate.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param thumbprint The Certificate Thumbprint.
         * 
         * @return builder
         * 
         */
        public Builder thumbprint(@Nullable Output<String> thumbprint) {
            $.thumbprint = thumbprint;
            return this;
        }

        /**
         * @param thumbprint The Certificate Thumbprint.
         * 
         * @return builder
         * 
         */
        public Builder thumbprint(String thumbprint) {
            return thumbprint(Output.of(thumbprint));
        }

        public ManagedCertificateState build() {
            return $;
        }
    }

}
