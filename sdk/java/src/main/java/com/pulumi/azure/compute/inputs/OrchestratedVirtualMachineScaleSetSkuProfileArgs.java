// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class OrchestratedVirtualMachineScaleSetSkuProfileArgs extends com.pulumi.resources.ResourceArgs {

    public static final OrchestratedVirtualMachineScaleSetSkuProfileArgs Empty = new OrchestratedVirtualMachineScaleSetSkuProfileArgs();

    /**
     * Specifies the allocation strategy for the virtual machine scale set based on which the VMs will be allocated. Possible values are `LowestPrice` and `CapacityOptimized`.
     * 
     */
    @Import(name="allocationStrategy", required=true)
    private Output<String> allocationStrategy;

    /**
     * @return Specifies the allocation strategy for the virtual machine scale set based on which the VMs will be allocated. Possible values are `LowestPrice` and `CapacityOptimized`.
     * 
     */
    public Output<String> allocationStrategy() {
        return this.allocationStrategy;
    }

    /**
     * Specifies the VM sizes for the virtual machine scale set.
     * 
     */
    @Import(name="vmSizes", required=true)
    private Output<List<String>> vmSizes;

    /**
     * @return Specifies the VM sizes for the virtual machine scale set.
     * 
     */
    public Output<List<String>> vmSizes() {
        return this.vmSizes;
    }

    private OrchestratedVirtualMachineScaleSetSkuProfileArgs() {}

    private OrchestratedVirtualMachineScaleSetSkuProfileArgs(OrchestratedVirtualMachineScaleSetSkuProfileArgs $) {
        this.allocationStrategy = $.allocationStrategy;
        this.vmSizes = $.vmSizes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OrchestratedVirtualMachineScaleSetSkuProfileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OrchestratedVirtualMachineScaleSetSkuProfileArgs $;

        public Builder() {
            $ = new OrchestratedVirtualMachineScaleSetSkuProfileArgs();
        }

        public Builder(OrchestratedVirtualMachineScaleSetSkuProfileArgs defaults) {
            $ = new OrchestratedVirtualMachineScaleSetSkuProfileArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allocationStrategy Specifies the allocation strategy for the virtual machine scale set based on which the VMs will be allocated. Possible values are `LowestPrice` and `CapacityOptimized`.
         * 
         * @return builder
         * 
         */
        public Builder allocationStrategy(Output<String> allocationStrategy) {
            $.allocationStrategy = allocationStrategy;
            return this;
        }

        /**
         * @param allocationStrategy Specifies the allocation strategy for the virtual machine scale set based on which the VMs will be allocated. Possible values are `LowestPrice` and `CapacityOptimized`.
         * 
         * @return builder
         * 
         */
        public Builder allocationStrategy(String allocationStrategy) {
            return allocationStrategy(Output.of(allocationStrategy));
        }

        /**
         * @param vmSizes Specifies the VM sizes for the virtual machine scale set.
         * 
         * @return builder
         * 
         */
        public Builder vmSizes(Output<List<String>> vmSizes) {
            $.vmSizes = vmSizes;
            return this;
        }

        /**
         * @param vmSizes Specifies the VM sizes for the virtual machine scale set.
         * 
         * @return builder
         * 
         */
        public Builder vmSizes(List<String> vmSizes) {
            return vmSizes(Output.of(vmSizes));
        }

        /**
         * @param vmSizes Specifies the VM sizes for the virtual machine scale set.
         * 
         * @return builder
         * 
         */
        public Builder vmSizes(String... vmSizes) {
            return vmSizes(List.of(vmSizes));
        }

        public OrchestratedVirtualMachineScaleSetSkuProfileArgs build() {
            if ($.allocationStrategy == null) {
                throw new MissingRequiredPropertyException("OrchestratedVirtualMachineScaleSetSkuProfileArgs", "allocationStrategy");
            }
            if ($.vmSizes == null) {
                throw new MissingRequiredPropertyException("OrchestratedVirtualMachineScaleSetSkuProfileArgs", "vmSizes");
            }
            return $;
        }
    }

}
