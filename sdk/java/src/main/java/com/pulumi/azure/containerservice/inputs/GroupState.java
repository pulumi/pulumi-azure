// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerservice.inputs;

import com.pulumi.azure.containerservice.inputs.GroupContainerArgs;
import com.pulumi.azure.containerservice.inputs.GroupDiagnosticsArgs;
import com.pulumi.azure.containerservice.inputs.GroupDnsConfigArgs;
import com.pulumi.azure.containerservice.inputs.GroupExposedPortArgs;
import com.pulumi.azure.containerservice.inputs.GroupIdentityArgs;
import com.pulumi.azure.containerservice.inputs.GroupImageRegistryCredentialArgs;
import com.pulumi.azure.containerservice.inputs.GroupInitContainerArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GroupState extends com.pulumi.resources.ResourceArgs {

    public static final GroupState Empty = new GroupState();

    /**
     * The definition of a container that is part of the group as documented in the `container` block below. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="containers")
    private @Nullable Output<List<GroupContainerArgs>> containers;

    /**
     * @return The definition of a container that is part of the group as documented in the `container` block below. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<List<GroupContainerArgs>>> containers() {
        return Optional.ofNullable(this.containers);
    }

    /**
     * A `diagnostics` block as documented below.
     * 
     */
    @Import(name="diagnostics")
    private @Nullable Output<GroupDiagnosticsArgs> diagnostics;

    /**
     * @return A `diagnostics` block as documented below.
     * 
     */
    public Optional<Output<GroupDiagnosticsArgs>> diagnostics() {
        return Optional.ofNullable(this.diagnostics);
    }

    /**
     * A `dns_config` block as documented below.
     * 
     */
    @Import(name="dnsConfig")
    private @Nullable Output<GroupDnsConfigArgs> dnsConfig;

    /**
     * @return A `dns_config` block as documented below.
     * 
     */
    public Optional<Output<GroupDnsConfigArgs>> dnsConfig() {
        return Optional.ofNullable(this.dnsConfig);
    }

    /**
     * The DNS label/name for the container groups IP. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="dnsNameLabel")
    private @Nullable Output<String> dnsNameLabel;

    /**
     * @return The DNS label/name for the container groups IP. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> dnsNameLabel() {
        return Optional.ofNullable(this.dnsNameLabel);
    }

    /**
     * Zero or more `exposed_port` blocks as defined below. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="exposedPorts")
    private @Nullable Output<List<GroupExposedPortArgs>> exposedPorts;

    /**
     * @return Zero or more `exposed_port` blocks as defined below. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<List<GroupExposedPortArgs>>> exposedPorts() {
        return Optional.ofNullable(this.exposedPorts);
    }

    /**
     * The FQDN of the container group derived from `dns_name_label`.
     * 
     */
    @Import(name="fqdn")
    private @Nullable Output<String> fqdn;

    /**
     * @return The FQDN of the container group derived from `dns_name_label`.
     * 
     */
    public Optional<Output<String>> fqdn() {
        return Optional.ofNullable(this.fqdn);
    }

    /**
     * An `identity` block as defined below.
     * 
     */
    @Import(name="identity")
    private @Nullable Output<GroupIdentityArgs> identity;

    /**
     * @return An `identity` block as defined below.
     * 
     */
    public Optional<Output<GroupIdentityArgs>> identity() {
        return Optional.ofNullable(this.identity);
    }

    /**
     * A `image_registry_credential` block as documented below. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="imageRegistryCredentials")
    private @Nullable Output<List<GroupImageRegistryCredentialArgs>> imageRegistryCredentials;

    /**
     * @return A `image_registry_credential` block as documented below. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<List<GroupImageRegistryCredentialArgs>>> imageRegistryCredentials() {
        return Optional.ofNullable(this.imageRegistryCredentials);
    }

    /**
     * The definition of an init container that is part of the group as documented in the `init_container` block below. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="initContainers")
    private @Nullable Output<List<GroupInitContainerArgs>> initContainers;

    /**
     * @return The definition of an init container that is part of the group as documented in the `init_container` block below. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<List<GroupInitContainerArgs>>> initContainers() {
        return Optional.ofNullable(this.initContainers);
    }

    /**
     * The IP address allocated to the container group.
     * 
     */
    @Import(name="ipAddress")
    private @Nullable Output<String> ipAddress;

    /**
     * @return The IP address allocated to the container group.
     * 
     */
    public Optional<Output<String>> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }

    /**
     * Specifies the IP address type of the container. `Public`, `Private` or `None`. Changing this forces a new resource to be created. If set to `Private`, `network_profile_id` also needs to be set.
     * 
     */
    @Import(name="ipAddressType")
    private @Nullable Output<String> ipAddressType;

    /**
     * @return Specifies the IP address type of the container. `Public`, `Private` or `None`. Changing this forces a new resource to be created. If set to `Private`, `network_profile_id` also needs to be set.
     * 
     */
    public Optional<Output<String>> ipAddressType() {
        return Optional.ofNullable(this.ipAddressType);
    }

    /**
     * The Key Vault key URI for CMK encryption. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="keyVaultKeyId")
    private @Nullable Output<String> keyVaultKeyId;

    /**
     * @return The Key Vault key URI for CMK encryption. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> keyVaultKeyId() {
        return Optional.ofNullable(this.keyVaultKeyId);
    }

    /**
     * Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Specifies the name of the Container Group. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the name of the Container Group. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Network profile ID for deploying to virtual network.
     * 
     */
    @Import(name="networkProfileId")
    private @Nullable Output<String> networkProfileId;

    /**
     * @return Network profile ID for deploying to virtual network.
     * 
     */
    public Optional<Output<String>> networkProfileId() {
        return Optional.ofNullable(this.networkProfileId);
    }

    /**
     * The OS for the container group. Allowed values are `Linux` and `Windows`. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="osType")
    private @Nullable Output<String> osType;

    /**
     * @return The OS for the container group. Allowed values are `Linux` and `Windows`. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> osType() {
        return Optional.ofNullable(this.osType);
    }

    /**
     * The name of the resource group in which to create the Container Group. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="resourceGroupName")
    private @Nullable Output<String> resourceGroupName;

    /**
     * @return The name of the resource group in which to create the Container Group. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> resourceGroupName() {
        return Optional.ofNullable(this.resourceGroupName);
    }

    /**
     * Restart policy for the container group. Allowed values are `Always`, `Never`, `OnFailure`. Defaults to `Always`. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="restartPolicy")
    private @Nullable Output<String> restartPolicy;

    /**
     * @return Restart policy for the container group. Allowed values are `Always`, `Never`, `OnFailure`. Defaults to `Always`. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> restartPolicy() {
        return Optional.ofNullable(this.restartPolicy);
    }

    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private GroupState() {}

    private GroupState(GroupState $) {
        this.containers = $.containers;
        this.diagnostics = $.diagnostics;
        this.dnsConfig = $.dnsConfig;
        this.dnsNameLabel = $.dnsNameLabel;
        this.exposedPorts = $.exposedPorts;
        this.fqdn = $.fqdn;
        this.identity = $.identity;
        this.imageRegistryCredentials = $.imageRegistryCredentials;
        this.initContainers = $.initContainers;
        this.ipAddress = $.ipAddress;
        this.ipAddressType = $.ipAddressType;
        this.keyVaultKeyId = $.keyVaultKeyId;
        this.location = $.location;
        this.name = $.name;
        this.networkProfileId = $.networkProfileId;
        this.osType = $.osType;
        this.resourceGroupName = $.resourceGroupName;
        this.restartPolicy = $.restartPolicy;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GroupState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GroupState $;

        public Builder() {
            $ = new GroupState();
        }

        public Builder(GroupState defaults) {
            $ = new GroupState(Objects.requireNonNull(defaults));
        }

        /**
         * @param containers The definition of a container that is part of the group as documented in the `container` block below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder containers(@Nullable Output<List<GroupContainerArgs>> containers) {
            $.containers = containers;
            return this;
        }

        /**
         * @param containers The definition of a container that is part of the group as documented in the `container` block below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder containers(List<GroupContainerArgs> containers) {
            return containers(Output.of(containers));
        }

        /**
         * @param containers The definition of a container that is part of the group as documented in the `container` block below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder containers(GroupContainerArgs... containers) {
            return containers(List.of(containers));
        }

        /**
         * @param diagnostics A `diagnostics` block as documented below.
         * 
         * @return builder
         * 
         */
        public Builder diagnostics(@Nullable Output<GroupDiagnosticsArgs> diagnostics) {
            $.diagnostics = diagnostics;
            return this;
        }

        /**
         * @param diagnostics A `diagnostics` block as documented below.
         * 
         * @return builder
         * 
         */
        public Builder diagnostics(GroupDiagnosticsArgs diagnostics) {
            return diagnostics(Output.of(diagnostics));
        }

        /**
         * @param dnsConfig A `dns_config` block as documented below.
         * 
         * @return builder
         * 
         */
        public Builder dnsConfig(@Nullable Output<GroupDnsConfigArgs> dnsConfig) {
            $.dnsConfig = dnsConfig;
            return this;
        }

        /**
         * @param dnsConfig A `dns_config` block as documented below.
         * 
         * @return builder
         * 
         */
        public Builder dnsConfig(GroupDnsConfigArgs dnsConfig) {
            return dnsConfig(Output.of(dnsConfig));
        }

        /**
         * @param dnsNameLabel The DNS label/name for the container groups IP. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder dnsNameLabel(@Nullable Output<String> dnsNameLabel) {
            $.dnsNameLabel = dnsNameLabel;
            return this;
        }

        /**
         * @param dnsNameLabel The DNS label/name for the container groups IP. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder dnsNameLabel(String dnsNameLabel) {
            return dnsNameLabel(Output.of(dnsNameLabel));
        }

        /**
         * @param exposedPorts Zero or more `exposed_port` blocks as defined below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder exposedPorts(@Nullable Output<List<GroupExposedPortArgs>> exposedPorts) {
            $.exposedPorts = exposedPorts;
            return this;
        }

        /**
         * @param exposedPorts Zero or more `exposed_port` blocks as defined below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder exposedPorts(List<GroupExposedPortArgs> exposedPorts) {
            return exposedPorts(Output.of(exposedPorts));
        }

        /**
         * @param exposedPorts Zero or more `exposed_port` blocks as defined below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder exposedPorts(GroupExposedPortArgs... exposedPorts) {
            return exposedPorts(List.of(exposedPorts));
        }

        /**
         * @param fqdn The FQDN of the container group derived from `dns_name_label`.
         * 
         * @return builder
         * 
         */
        public Builder fqdn(@Nullable Output<String> fqdn) {
            $.fqdn = fqdn;
            return this;
        }

        /**
         * @param fqdn The FQDN of the container group derived from `dns_name_label`.
         * 
         * @return builder
         * 
         */
        public Builder fqdn(String fqdn) {
            return fqdn(Output.of(fqdn));
        }

        /**
         * @param identity An `identity` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder identity(@Nullable Output<GroupIdentityArgs> identity) {
            $.identity = identity;
            return this;
        }

        /**
         * @param identity An `identity` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder identity(GroupIdentityArgs identity) {
            return identity(Output.of(identity));
        }

        /**
         * @param imageRegistryCredentials A `image_registry_credential` block as documented below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder imageRegistryCredentials(@Nullable Output<List<GroupImageRegistryCredentialArgs>> imageRegistryCredentials) {
            $.imageRegistryCredentials = imageRegistryCredentials;
            return this;
        }

        /**
         * @param imageRegistryCredentials A `image_registry_credential` block as documented below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder imageRegistryCredentials(List<GroupImageRegistryCredentialArgs> imageRegistryCredentials) {
            return imageRegistryCredentials(Output.of(imageRegistryCredentials));
        }

        /**
         * @param imageRegistryCredentials A `image_registry_credential` block as documented below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder imageRegistryCredentials(GroupImageRegistryCredentialArgs... imageRegistryCredentials) {
            return imageRegistryCredentials(List.of(imageRegistryCredentials));
        }

        /**
         * @param initContainers The definition of an init container that is part of the group as documented in the `init_container` block below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder initContainers(@Nullable Output<List<GroupInitContainerArgs>> initContainers) {
            $.initContainers = initContainers;
            return this;
        }

        /**
         * @param initContainers The definition of an init container that is part of the group as documented in the `init_container` block below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder initContainers(List<GroupInitContainerArgs> initContainers) {
            return initContainers(Output.of(initContainers));
        }

        /**
         * @param initContainers The definition of an init container that is part of the group as documented in the `init_container` block below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder initContainers(GroupInitContainerArgs... initContainers) {
            return initContainers(List.of(initContainers));
        }

        /**
         * @param ipAddress The IP address allocated to the container group.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(@Nullable Output<String> ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        /**
         * @param ipAddress The IP address allocated to the container group.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(String ipAddress) {
            return ipAddress(Output.of(ipAddress));
        }

        /**
         * @param ipAddressType Specifies the IP address type of the container. `Public`, `Private` or `None`. Changing this forces a new resource to be created. If set to `Private`, `network_profile_id` also needs to be set.
         * 
         * @return builder
         * 
         */
        public Builder ipAddressType(@Nullable Output<String> ipAddressType) {
            $.ipAddressType = ipAddressType;
            return this;
        }

        /**
         * @param ipAddressType Specifies the IP address type of the container. `Public`, `Private` or `None`. Changing this forces a new resource to be created. If set to `Private`, `network_profile_id` also needs to be set.
         * 
         * @return builder
         * 
         */
        public Builder ipAddressType(String ipAddressType) {
            return ipAddressType(Output.of(ipAddressType));
        }

        /**
         * @param keyVaultKeyId The Key Vault key URI for CMK encryption. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultKeyId(@Nullable Output<String> keyVaultKeyId) {
            $.keyVaultKeyId = keyVaultKeyId;
            return this;
        }

        /**
         * @param keyVaultKeyId The Key Vault key URI for CMK encryption. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultKeyId(String keyVaultKeyId) {
            return keyVaultKeyId(Output.of(keyVaultKeyId));
        }

        /**
         * @param location Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name Specifies the name of the Container Group. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of the Container Group. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkProfileId Network profile ID for deploying to virtual network.
         * 
         * @return builder
         * 
         */
        public Builder networkProfileId(@Nullable Output<String> networkProfileId) {
            $.networkProfileId = networkProfileId;
            return this;
        }

        /**
         * @param networkProfileId Network profile ID for deploying to virtual network.
         * 
         * @return builder
         * 
         */
        public Builder networkProfileId(String networkProfileId) {
            return networkProfileId(Output.of(networkProfileId));
        }

        /**
         * @param osType The OS for the container group. Allowed values are `Linux` and `Windows`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder osType(@Nullable Output<String> osType) {
            $.osType = osType;
            return this;
        }

        /**
         * @param osType The OS for the container group. Allowed values are `Linux` and `Windows`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder osType(String osType) {
            return osType(Output.of(osType));
        }

        /**
         * @param resourceGroupName The name of the resource group in which to create the Container Group. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(@Nullable Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group in which to create the Container Group. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param restartPolicy Restart policy for the container group. Allowed values are `Always`, `Never`, `OnFailure`. Defaults to `Always`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder restartPolicy(@Nullable Output<String> restartPolicy) {
            $.restartPolicy = restartPolicy;
            return this;
        }

        /**
         * @param restartPolicy Restart policy for the container group. Allowed values are `Always`, `Never`, `OnFailure`. Defaults to `Always`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder restartPolicy(String restartPolicy) {
            return restartPolicy(Output.of(restartPolicy));
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public GroupState build() {
            return $;
        }
    }

}
