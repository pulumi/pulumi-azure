// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.netapp.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VolumeGroupSapHanaVolumeExportPolicyRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final VolumeGroupSapHanaVolumeExportPolicyRuleArgs Empty = new VolumeGroupSapHanaVolumeExportPolicyRuleArgs();

    /**
     * A comma-sperated list of allowed client IPv4 addresses.
     * 
     */
    @Import(name="allowedClients", required=true)
    private Output<String> allowedClients;

    /**
     * @return A comma-sperated list of allowed client IPv4 addresses.
     * 
     */
    public Output<String> allowedClients() {
        return this.allowedClients;
    }

    /**
     * Enables NFSv3. Please note that this cannot be enabled if volume has NFSv4.1 as its protocol.
     * 
     */
    @Import(name="nfsv3Enabled", required=true)
    private Output<Boolean> nfsv3Enabled;

    /**
     * @return Enables NFSv3. Please note that this cannot be enabled if volume has NFSv4.1 as its protocol.
     * 
     */
    public Output<Boolean> nfsv3Enabled() {
        return this.nfsv3Enabled;
    }

    /**
     * Enables NFSv4.1. Please note that this cannot be enabled if volume has NFSv3 as its protocol.
     * 
     */
    @Import(name="nfsv41Enabled", required=true)
    private Output<Boolean> nfsv41Enabled;

    /**
     * @return Enables NFSv4.1. Please note that this cannot be enabled if volume has NFSv3 as its protocol.
     * 
     */
    public Output<Boolean> nfsv41Enabled() {
        return this.nfsv41Enabled;
    }

    /**
     * Is root access permitted to this volume? Defaults to `true`.
     * 
     */
    @Import(name="rootAccessEnabled")
    private @Nullable Output<Boolean> rootAccessEnabled;

    /**
     * @return Is root access permitted to this volume? Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> rootAccessEnabled() {
        return Optional.ofNullable(this.rootAccessEnabled);
    }

    /**
     * The index number of the rule, must start at 1 and maximum 5.
     * 
     */
    @Import(name="ruleIndex", required=true)
    private Output<Integer> ruleIndex;

    /**
     * @return The index number of the rule, must start at 1 and maximum 5.
     * 
     */
    public Output<Integer> ruleIndex() {
        return this.ruleIndex;
    }

    /**
     * Is the file system on unix read only? Defaults to `false.
     * 
     */
    @Import(name="unixReadOnly")
    private @Nullable Output<Boolean> unixReadOnly;

    /**
     * @return Is the file system on unix read only? Defaults to `false.
     * 
     */
    public Optional<Output<Boolean>> unixReadOnly() {
        return Optional.ofNullable(this.unixReadOnly);
    }

    /**
     * Is the file system on unix read and write? Defaults to `true`.
     * 
     */
    @Import(name="unixReadWrite")
    private @Nullable Output<Boolean> unixReadWrite;

    /**
     * @return Is the file system on unix read and write? Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> unixReadWrite() {
        return Optional.ofNullable(this.unixReadWrite);
    }

    private VolumeGroupSapHanaVolumeExportPolicyRuleArgs() {}

    private VolumeGroupSapHanaVolumeExportPolicyRuleArgs(VolumeGroupSapHanaVolumeExportPolicyRuleArgs $) {
        this.allowedClients = $.allowedClients;
        this.nfsv3Enabled = $.nfsv3Enabled;
        this.nfsv41Enabled = $.nfsv41Enabled;
        this.rootAccessEnabled = $.rootAccessEnabled;
        this.ruleIndex = $.ruleIndex;
        this.unixReadOnly = $.unixReadOnly;
        this.unixReadWrite = $.unixReadWrite;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VolumeGroupSapHanaVolumeExportPolicyRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VolumeGroupSapHanaVolumeExportPolicyRuleArgs $;

        public Builder() {
            $ = new VolumeGroupSapHanaVolumeExportPolicyRuleArgs();
        }

        public Builder(VolumeGroupSapHanaVolumeExportPolicyRuleArgs defaults) {
            $ = new VolumeGroupSapHanaVolumeExportPolicyRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedClients A comma-sperated list of allowed client IPv4 addresses.
         * 
         * @return builder
         * 
         */
        public Builder allowedClients(Output<String> allowedClients) {
            $.allowedClients = allowedClients;
            return this;
        }

        /**
         * @param allowedClients A comma-sperated list of allowed client IPv4 addresses.
         * 
         * @return builder
         * 
         */
        public Builder allowedClients(String allowedClients) {
            return allowedClients(Output.of(allowedClients));
        }

        /**
         * @param nfsv3Enabled Enables NFSv3. Please note that this cannot be enabled if volume has NFSv4.1 as its protocol.
         * 
         * @return builder
         * 
         */
        public Builder nfsv3Enabled(Output<Boolean> nfsv3Enabled) {
            $.nfsv3Enabled = nfsv3Enabled;
            return this;
        }

        /**
         * @param nfsv3Enabled Enables NFSv3. Please note that this cannot be enabled if volume has NFSv4.1 as its protocol.
         * 
         * @return builder
         * 
         */
        public Builder nfsv3Enabled(Boolean nfsv3Enabled) {
            return nfsv3Enabled(Output.of(nfsv3Enabled));
        }

        /**
         * @param nfsv41Enabled Enables NFSv4.1. Please note that this cannot be enabled if volume has NFSv3 as its protocol.
         * 
         * @return builder
         * 
         */
        public Builder nfsv41Enabled(Output<Boolean> nfsv41Enabled) {
            $.nfsv41Enabled = nfsv41Enabled;
            return this;
        }

        /**
         * @param nfsv41Enabled Enables NFSv4.1. Please note that this cannot be enabled if volume has NFSv3 as its protocol.
         * 
         * @return builder
         * 
         */
        public Builder nfsv41Enabled(Boolean nfsv41Enabled) {
            return nfsv41Enabled(Output.of(nfsv41Enabled));
        }

        /**
         * @param rootAccessEnabled Is root access permitted to this volume? Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder rootAccessEnabled(@Nullable Output<Boolean> rootAccessEnabled) {
            $.rootAccessEnabled = rootAccessEnabled;
            return this;
        }

        /**
         * @param rootAccessEnabled Is root access permitted to this volume? Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder rootAccessEnabled(Boolean rootAccessEnabled) {
            return rootAccessEnabled(Output.of(rootAccessEnabled));
        }

        /**
         * @param ruleIndex The index number of the rule, must start at 1 and maximum 5.
         * 
         * @return builder
         * 
         */
        public Builder ruleIndex(Output<Integer> ruleIndex) {
            $.ruleIndex = ruleIndex;
            return this;
        }

        /**
         * @param ruleIndex The index number of the rule, must start at 1 and maximum 5.
         * 
         * @return builder
         * 
         */
        public Builder ruleIndex(Integer ruleIndex) {
            return ruleIndex(Output.of(ruleIndex));
        }

        /**
         * @param unixReadOnly Is the file system on unix read only? Defaults to `false.
         * 
         * @return builder
         * 
         */
        public Builder unixReadOnly(@Nullable Output<Boolean> unixReadOnly) {
            $.unixReadOnly = unixReadOnly;
            return this;
        }

        /**
         * @param unixReadOnly Is the file system on unix read only? Defaults to `false.
         * 
         * @return builder
         * 
         */
        public Builder unixReadOnly(Boolean unixReadOnly) {
            return unixReadOnly(Output.of(unixReadOnly));
        }

        /**
         * @param unixReadWrite Is the file system on unix read and write? Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder unixReadWrite(@Nullable Output<Boolean> unixReadWrite) {
            $.unixReadWrite = unixReadWrite;
            return this;
        }

        /**
         * @param unixReadWrite Is the file system on unix read and write? Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder unixReadWrite(Boolean unixReadWrite) {
            return unixReadWrite(Output.of(unixReadWrite));
        }

        public VolumeGroupSapHanaVolumeExportPolicyRuleArgs build() {
            if ($.allowedClients == null) {
                throw new MissingRequiredPropertyException("VolumeGroupSapHanaVolumeExportPolicyRuleArgs", "allowedClients");
            }
            if ($.nfsv3Enabled == null) {
                throw new MissingRequiredPropertyException("VolumeGroupSapHanaVolumeExportPolicyRuleArgs", "nfsv3Enabled");
            }
            if ($.nfsv41Enabled == null) {
                throw new MissingRequiredPropertyException("VolumeGroupSapHanaVolumeExportPolicyRuleArgs", "nfsv41Enabled");
            }
            if ($.ruleIndex == null) {
                throw new MissingRequiredPropertyException("VolumeGroupSapHanaVolumeExportPolicyRuleArgs", "ruleIndex");
            }
            return $;
        }
    }

}
