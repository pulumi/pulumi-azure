// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerservice.outputs;

import com.pulumi.azure.containerservice.outputs.KubernetesClusterMaintenanceWindowAutoUpgradeNotAllowed;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class KubernetesClusterMaintenanceWindowAutoUpgrade {
    /**
     * @return The day of the month for the maintenance run. Required in combination with RelativeMonthly frequency. Value between 0 and 31 (inclusive).
     * 
     */
    private @Nullable Integer dayOfMonth;
    /**
     * @return The day of the week for the maintenance run. Required in combination with weekly frequency. Possible values are `Friday`, `Monday`, `Saturday`, `Sunday`, `Thursday`, `Tuesday` and `Wednesday`.
     * 
     */
    private @Nullable String dayOfWeek;
    /**
     * @return The duration of the window for maintenance to run in hours.
     * 
     */
    private Integer duration;
    /**
     * @return Frequency of maintenance. Possible options are `Weekly`, `AbsoluteMonthly` and `RelativeMonthly`.
     * 
     */
    private String frequency;
    /**
     * @return The interval for maintenance runs. Depending on the frequency this interval is week or month based.
     * 
     */
    private Integer interval;
    /**
     * @return One or more `not_allowed` block as defined below.
     * 
     */
    private @Nullable List<KubernetesClusterMaintenanceWindowAutoUpgradeNotAllowed> notAlloweds;
    /**
     * @return The date on which the maintenance window begins to take effect.
     * 
     */
    private @Nullable String startDate;
    /**
     * @return The time for maintenance to begin, based on the timezone determined by `utc_offset`. Format is `HH:mm`.
     * 
     */
    private @Nullable String startTime;
    /**
     * @return Used to determine the timezone for cluster maintenance.
     * 
     */
    private @Nullable String utcOffset;
    /**
     * @return The week in the month used for the maintenance run. Options are `First`, `Second`, `Third`, `Fourth`, and `Last`.
     * Required in combination with relative monthly frequency.
     * 
     */
    private @Nullable String weekIndex;

    private KubernetesClusterMaintenanceWindowAutoUpgrade() {}
    /**
     * @return The day of the month for the maintenance run. Required in combination with RelativeMonthly frequency. Value between 0 and 31 (inclusive).
     * 
     */
    public Optional<Integer> dayOfMonth() {
        return Optional.ofNullable(this.dayOfMonth);
    }
    /**
     * @return The day of the week for the maintenance run. Required in combination with weekly frequency. Possible values are `Friday`, `Monday`, `Saturday`, `Sunday`, `Thursday`, `Tuesday` and `Wednesday`.
     * 
     */
    public Optional<String> dayOfWeek() {
        return Optional.ofNullable(this.dayOfWeek);
    }
    /**
     * @return The duration of the window for maintenance to run in hours.
     * 
     */
    public Integer duration() {
        return this.duration;
    }
    /**
     * @return Frequency of maintenance. Possible options are `Weekly`, `AbsoluteMonthly` and `RelativeMonthly`.
     * 
     */
    public String frequency() {
        return this.frequency;
    }
    /**
     * @return The interval for maintenance runs. Depending on the frequency this interval is week or month based.
     * 
     */
    public Integer interval() {
        return this.interval;
    }
    /**
     * @return One or more `not_allowed` block as defined below.
     * 
     */
    public List<KubernetesClusterMaintenanceWindowAutoUpgradeNotAllowed> notAlloweds() {
        return this.notAlloweds == null ? List.of() : this.notAlloweds;
    }
    /**
     * @return The date on which the maintenance window begins to take effect.
     * 
     */
    public Optional<String> startDate() {
        return Optional.ofNullable(this.startDate);
    }
    /**
     * @return The time for maintenance to begin, based on the timezone determined by `utc_offset`. Format is `HH:mm`.
     * 
     */
    public Optional<String> startTime() {
        return Optional.ofNullable(this.startTime);
    }
    /**
     * @return Used to determine the timezone for cluster maintenance.
     * 
     */
    public Optional<String> utcOffset() {
        return Optional.ofNullable(this.utcOffset);
    }
    /**
     * @return The week in the month used for the maintenance run. Options are `First`, `Second`, `Third`, `Fourth`, and `Last`.
     * Required in combination with relative monthly frequency.
     * 
     */
    public Optional<String> weekIndex() {
        return Optional.ofNullable(this.weekIndex);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(KubernetesClusterMaintenanceWindowAutoUpgrade defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer dayOfMonth;
        private @Nullable String dayOfWeek;
        private Integer duration;
        private String frequency;
        private Integer interval;
        private @Nullable List<KubernetesClusterMaintenanceWindowAutoUpgradeNotAllowed> notAlloweds;
        private @Nullable String startDate;
        private @Nullable String startTime;
        private @Nullable String utcOffset;
        private @Nullable String weekIndex;
        public Builder() {}
        public Builder(KubernetesClusterMaintenanceWindowAutoUpgrade defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dayOfMonth = defaults.dayOfMonth;
    	      this.dayOfWeek = defaults.dayOfWeek;
    	      this.duration = defaults.duration;
    	      this.frequency = defaults.frequency;
    	      this.interval = defaults.interval;
    	      this.notAlloweds = defaults.notAlloweds;
    	      this.startDate = defaults.startDate;
    	      this.startTime = defaults.startTime;
    	      this.utcOffset = defaults.utcOffset;
    	      this.weekIndex = defaults.weekIndex;
        }

        @CustomType.Setter
        public Builder dayOfMonth(@Nullable Integer dayOfMonth) {
            this.dayOfMonth = dayOfMonth;
            return this;
        }
        @CustomType.Setter
        public Builder dayOfWeek(@Nullable String dayOfWeek) {
            this.dayOfWeek = dayOfWeek;
            return this;
        }
        @CustomType.Setter
        public Builder duration(Integer duration) {
            this.duration = Objects.requireNonNull(duration);
            return this;
        }
        @CustomType.Setter
        public Builder frequency(String frequency) {
            this.frequency = Objects.requireNonNull(frequency);
            return this;
        }
        @CustomType.Setter
        public Builder interval(Integer interval) {
            this.interval = Objects.requireNonNull(interval);
            return this;
        }
        @CustomType.Setter
        public Builder notAlloweds(@Nullable List<KubernetesClusterMaintenanceWindowAutoUpgradeNotAllowed> notAlloweds) {
            this.notAlloweds = notAlloweds;
            return this;
        }
        public Builder notAlloweds(KubernetesClusterMaintenanceWindowAutoUpgradeNotAllowed... notAlloweds) {
            return notAlloweds(List.of(notAlloweds));
        }
        @CustomType.Setter
        public Builder startDate(@Nullable String startDate) {
            this.startDate = startDate;
            return this;
        }
        @CustomType.Setter
        public Builder startTime(@Nullable String startTime) {
            this.startTime = startTime;
            return this;
        }
        @CustomType.Setter
        public Builder utcOffset(@Nullable String utcOffset) {
            this.utcOffset = utcOffset;
            return this;
        }
        @CustomType.Setter
        public Builder weekIndex(@Nullable String weekIndex) {
            this.weekIndex = weekIndex;
            return this;
        }
        public KubernetesClusterMaintenanceWindowAutoUpgrade build() {
            final var _resultValue = new KubernetesClusterMaintenanceWindowAutoUpgrade();
            _resultValue.dayOfMonth = dayOfMonth;
            _resultValue.dayOfWeek = dayOfWeek;
            _resultValue.duration = duration;
            _resultValue.frequency = frequency;
            _resultValue.interval = interval;
            _resultValue.notAlloweds = notAlloweds;
            _resultValue.startDate = startDate;
            _resultValue.startTime = startTime;
            _resultValue.utcOffset = utcOffset;
            _resultValue.weekIndex = weekIndex;
            return _resultValue;
        }
    }
}
