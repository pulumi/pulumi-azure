// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appservice.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WindowsWebAppSlotAuthSettingsV2LoginArgs extends com.pulumi.resources.ResourceArgs {

    public static final WindowsWebAppSlotAuthSettingsV2LoginArgs Empty = new WindowsWebAppSlotAuthSettingsV2LoginArgs();

    /**
     * External URLs that can be redirected to as part of logging in or logging out of the app. This is an advanced setting typically only needed by Windows Store application backends.
     * 
     * &gt; **Note:** URLs within the current domain are always implicitly allowed.
     * 
     */
    @Import(name="allowedExternalRedirectUrls")
    private @Nullable Output<List<String>> allowedExternalRedirectUrls;

    /**
     * @return External URLs that can be redirected to as part of logging in or logging out of the app. This is an advanced setting typically only needed by Windows Store application backends.
     * 
     * &gt; **Note:** URLs within the current domain are always implicitly allowed.
     * 
     */
    public Optional<Output<List<String>>> allowedExternalRedirectUrls() {
        return Optional.ofNullable(this.allowedExternalRedirectUrls);
    }

    /**
     * The method by which cookies expire. Possible values include: `FixedTime`, and `IdentityProviderDerived`. Defaults to `FixedTime`.
     * 
     */
    @Import(name="cookieExpirationConvention")
    private @Nullable Output<String> cookieExpirationConvention;

    /**
     * @return The method by which cookies expire. Possible values include: `FixedTime`, and `IdentityProviderDerived`. Defaults to `FixedTime`.
     * 
     */
    public Optional<Output<String>> cookieExpirationConvention() {
        return Optional.ofNullable(this.cookieExpirationConvention);
    }

    /**
     * The time after the request is made when the session cookie should expire. Defaults to `08:00:00`.
     * 
     */
    @Import(name="cookieExpirationTime")
    private @Nullable Output<String> cookieExpirationTime;

    /**
     * @return The time after the request is made when the session cookie should expire. Defaults to `08:00:00`.
     * 
     */
    public Optional<Output<String>> cookieExpirationTime() {
        return Optional.ofNullable(this.cookieExpirationTime);
    }

    /**
     * The endpoint to which logout requests should be made.
     * 
     */
    @Import(name="logoutEndpoint")
    private @Nullable Output<String> logoutEndpoint;

    /**
     * @return The endpoint to which logout requests should be made.
     * 
     */
    public Optional<Output<String>> logoutEndpoint() {
        return Optional.ofNullable(this.logoutEndpoint);
    }

    /**
     * The time after the request is made when the nonce should expire. Defaults to `00:05:00`.
     * 
     */
    @Import(name="nonceExpirationTime")
    private @Nullable Output<String> nonceExpirationTime;

    /**
     * @return The time after the request is made when the nonce should expire. Defaults to `00:05:00`.
     * 
     */
    public Optional<Output<String>> nonceExpirationTime() {
        return Optional.ofNullable(this.nonceExpirationTime);
    }

    /**
     * Should the fragments from the request be preserved after the login request is made. Defaults to `false`.
     * 
     */
    @Import(name="preserveUrlFragmentsForLogins")
    private @Nullable Output<Boolean> preserveUrlFragmentsForLogins;

    /**
     * @return Should the fragments from the request be preserved after the login request is made. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> preserveUrlFragmentsForLogins() {
        return Optional.ofNullable(this.preserveUrlFragmentsForLogins);
    }

    /**
     * The number of hours after session token expiration that a session token can be used to call the token refresh API. Defaults to `72` hours.
     * 
     */
    @Import(name="tokenRefreshExtensionTime")
    private @Nullable Output<Double> tokenRefreshExtensionTime;

    /**
     * @return The number of hours after session token expiration that a session token can be used to call the token refresh API. Defaults to `72` hours.
     * 
     */
    public Optional<Output<Double>> tokenRefreshExtensionTime() {
        return Optional.ofNullable(this.tokenRefreshExtensionTime);
    }

    /**
     * Should the Token Store configuration Enabled. Defaults to `false`
     * 
     */
    @Import(name="tokenStoreEnabled")
    private @Nullable Output<Boolean> tokenStoreEnabled;

    /**
     * @return Should the Token Store configuration Enabled. Defaults to `false`
     * 
     */
    public Optional<Output<Boolean>> tokenStoreEnabled() {
        return Optional.ofNullable(this.tokenStoreEnabled);
    }

    /**
     * The directory path in the App Filesystem in which the tokens will be stored.
     * 
     */
    @Import(name="tokenStorePath")
    private @Nullable Output<String> tokenStorePath;

    /**
     * @return The directory path in the App Filesystem in which the tokens will be stored.
     * 
     */
    public Optional<Output<String>> tokenStorePath() {
        return Optional.ofNullable(this.tokenStorePath);
    }

    /**
     * The name of the app setting which contains the SAS URL of the blob storage containing the tokens.
     * 
     */
    @Import(name="tokenStoreSasSettingName")
    private @Nullable Output<String> tokenStoreSasSettingName;

    /**
     * @return The name of the app setting which contains the SAS URL of the blob storage containing the tokens.
     * 
     */
    public Optional<Output<String>> tokenStoreSasSettingName() {
        return Optional.ofNullable(this.tokenStoreSasSettingName);
    }

    /**
     * Should the nonce be validated while completing the login flow. Defaults to `true`.
     * 
     */
    @Import(name="validateNonce")
    private @Nullable Output<Boolean> validateNonce;

    /**
     * @return Should the nonce be validated while completing the login flow. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> validateNonce() {
        return Optional.ofNullable(this.validateNonce);
    }

    private WindowsWebAppSlotAuthSettingsV2LoginArgs() {}

    private WindowsWebAppSlotAuthSettingsV2LoginArgs(WindowsWebAppSlotAuthSettingsV2LoginArgs $) {
        this.allowedExternalRedirectUrls = $.allowedExternalRedirectUrls;
        this.cookieExpirationConvention = $.cookieExpirationConvention;
        this.cookieExpirationTime = $.cookieExpirationTime;
        this.logoutEndpoint = $.logoutEndpoint;
        this.nonceExpirationTime = $.nonceExpirationTime;
        this.preserveUrlFragmentsForLogins = $.preserveUrlFragmentsForLogins;
        this.tokenRefreshExtensionTime = $.tokenRefreshExtensionTime;
        this.tokenStoreEnabled = $.tokenStoreEnabled;
        this.tokenStorePath = $.tokenStorePath;
        this.tokenStoreSasSettingName = $.tokenStoreSasSettingName;
        this.validateNonce = $.validateNonce;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WindowsWebAppSlotAuthSettingsV2LoginArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WindowsWebAppSlotAuthSettingsV2LoginArgs $;

        public Builder() {
            $ = new WindowsWebAppSlotAuthSettingsV2LoginArgs();
        }

        public Builder(WindowsWebAppSlotAuthSettingsV2LoginArgs defaults) {
            $ = new WindowsWebAppSlotAuthSettingsV2LoginArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedExternalRedirectUrls External URLs that can be redirected to as part of logging in or logging out of the app. This is an advanced setting typically only needed by Windows Store application backends.
         * 
         * &gt; **Note:** URLs within the current domain are always implicitly allowed.
         * 
         * @return builder
         * 
         */
        public Builder allowedExternalRedirectUrls(@Nullable Output<List<String>> allowedExternalRedirectUrls) {
            $.allowedExternalRedirectUrls = allowedExternalRedirectUrls;
            return this;
        }

        /**
         * @param allowedExternalRedirectUrls External URLs that can be redirected to as part of logging in or logging out of the app. This is an advanced setting typically only needed by Windows Store application backends.
         * 
         * &gt; **Note:** URLs within the current domain are always implicitly allowed.
         * 
         * @return builder
         * 
         */
        public Builder allowedExternalRedirectUrls(List<String> allowedExternalRedirectUrls) {
            return allowedExternalRedirectUrls(Output.of(allowedExternalRedirectUrls));
        }

        /**
         * @param allowedExternalRedirectUrls External URLs that can be redirected to as part of logging in or logging out of the app. This is an advanced setting typically only needed by Windows Store application backends.
         * 
         * &gt; **Note:** URLs within the current domain are always implicitly allowed.
         * 
         * @return builder
         * 
         */
        public Builder allowedExternalRedirectUrls(String... allowedExternalRedirectUrls) {
            return allowedExternalRedirectUrls(List.of(allowedExternalRedirectUrls));
        }

        /**
         * @param cookieExpirationConvention The method by which cookies expire. Possible values include: `FixedTime`, and `IdentityProviderDerived`. Defaults to `FixedTime`.
         * 
         * @return builder
         * 
         */
        public Builder cookieExpirationConvention(@Nullable Output<String> cookieExpirationConvention) {
            $.cookieExpirationConvention = cookieExpirationConvention;
            return this;
        }

        /**
         * @param cookieExpirationConvention The method by which cookies expire. Possible values include: `FixedTime`, and `IdentityProviderDerived`. Defaults to `FixedTime`.
         * 
         * @return builder
         * 
         */
        public Builder cookieExpirationConvention(String cookieExpirationConvention) {
            return cookieExpirationConvention(Output.of(cookieExpirationConvention));
        }

        /**
         * @param cookieExpirationTime The time after the request is made when the session cookie should expire. Defaults to `08:00:00`.
         * 
         * @return builder
         * 
         */
        public Builder cookieExpirationTime(@Nullable Output<String> cookieExpirationTime) {
            $.cookieExpirationTime = cookieExpirationTime;
            return this;
        }

        /**
         * @param cookieExpirationTime The time after the request is made when the session cookie should expire. Defaults to `08:00:00`.
         * 
         * @return builder
         * 
         */
        public Builder cookieExpirationTime(String cookieExpirationTime) {
            return cookieExpirationTime(Output.of(cookieExpirationTime));
        }

        /**
         * @param logoutEndpoint The endpoint to which logout requests should be made.
         * 
         * @return builder
         * 
         */
        public Builder logoutEndpoint(@Nullable Output<String> logoutEndpoint) {
            $.logoutEndpoint = logoutEndpoint;
            return this;
        }

        /**
         * @param logoutEndpoint The endpoint to which logout requests should be made.
         * 
         * @return builder
         * 
         */
        public Builder logoutEndpoint(String logoutEndpoint) {
            return logoutEndpoint(Output.of(logoutEndpoint));
        }

        /**
         * @param nonceExpirationTime The time after the request is made when the nonce should expire. Defaults to `00:05:00`.
         * 
         * @return builder
         * 
         */
        public Builder nonceExpirationTime(@Nullable Output<String> nonceExpirationTime) {
            $.nonceExpirationTime = nonceExpirationTime;
            return this;
        }

        /**
         * @param nonceExpirationTime The time after the request is made when the nonce should expire. Defaults to `00:05:00`.
         * 
         * @return builder
         * 
         */
        public Builder nonceExpirationTime(String nonceExpirationTime) {
            return nonceExpirationTime(Output.of(nonceExpirationTime));
        }

        /**
         * @param preserveUrlFragmentsForLogins Should the fragments from the request be preserved after the login request is made. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder preserveUrlFragmentsForLogins(@Nullable Output<Boolean> preserveUrlFragmentsForLogins) {
            $.preserveUrlFragmentsForLogins = preserveUrlFragmentsForLogins;
            return this;
        }

        /**
         * @param preserveUrlFragmentsForLogins Should the fragments from the request be preserved after the login request is made. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder preserveUrlFragmentsForLogins(Boolean preserveUrlFragmentsForLogins) {
            return preserveUrlFragmentsForLogins(Output.of(preserveUrlFragmentsForLogins));
        }

        /**
         * @param tokenRefreshExtensionTime The number of hours after session token expiration that a session token can be used to call the token refresh API. Defaults to `72` hours.
         * 
         * @return builder
         * 
         */
        public Builder tokenRefreshExtensionTime(@Nullable Output<Double> tokenRefreshExtensionTime) {
            $.tokenRefreshExtensionTime = tokenRefreshExtensionTime;
            return this;
        }

        /**
         * @param tokenRefreshExtensionTime The number of hours after session token expiration that a session token can be used to call the token refresh API. Defaults to `72` hours.
         * 
         * @return builder
         * 
         */
        public Builder tokenRefreshExtensionTime(Double tokenRefreshExtensionTime) {
            return tokenRefreshExtensionTime(Output.of(tokenRefreshExtensionTime));
        }

        /**
         * @param tokenStoreEnabled Should the Token Store configuration Enabled. Defaults to `false`
         * 
         * @return builder
         * 
         */
        public Builder tokenStoreEnabled(@Nullable Output<Boolean> tokenStoreEnabled) {
            $.tokenStoreEnabled = tokenStoreEnabled;
            return this;
        }

        /**
         * @param tokenStoreEnabled Should the Token Store configuration Enabled. Defaults to `false`
         * 
         * @return builder
         * 
         */
        public Builder tokenStoreEnabled(Boolean tokenStoreEnabled) {
            return tokenStoreEnabled(Output.of(tokenStoreEnabled));
        }

        /**
         * @param tokenStorePath The directory path in the App Filesystem in which the tokens will be stored.
         * 
         * @return builder
         * 
         */
        public Builder tokenStorePath(@Nullable Output<String> tokenStorePath) {
            $.tokenStorePath = tokenStorePath;
            return this;
        }

        /**
         * @param tokenStorePath The directory path in the App Filesystem in which the tokens will be stored.
         * 
         * @return builder
         * 
         */
        public Builder tokenStorePath(String tokenStorePath) {
            return tokenStorePath(Output.of(tokenStorePath));
        }

        /**
         * @param tokenStoreSasSettingName The name of the app setting which contains the SAS URL of the blob storage containing the tokens.
         * 
         * @return builder
         * 
         */
        public Builder tokenStoreSasSettingName(@Nullable Output<String> tokenStoreSasSettingName) {
            $.tokenStoreSasSettingName = tokenStoreSasSettingName;
            return this;
        }

        /**
         * @param tokenStoreSasSettingName The name of the app setting which contains the SAS URL of the blob storage containing the tokens.
         * 
         * @return builder
         * 
         */
        public Builder tokenStoreSasSettingName(String tokenStoreSasSettingName) {
            return tokenStoreSasSettingName(Output.of(tokenStoreSasSettingName));
        }

        /**
         * @param validateNonce Should the nonce be validated while completing the login flow. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder validateNonce(@Nullable Output<Boolean> validateNonce) {
            $.validateNonce = validateNonce;
            return this;
        }

        /**
         * @param validateNonce Should the nonce be validated while completing the login flow. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder validateNonce(Boolean validateNonce) {
            return validateNonce(Output.of(validateNonce));
        }

        public WindowsWebAppSlotAuthSettingsV2LoginArgs build() {
            return $;
        }
    }

}
