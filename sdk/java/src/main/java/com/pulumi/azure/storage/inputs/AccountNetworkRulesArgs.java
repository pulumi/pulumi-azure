// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.storage.inputs;

import com.pulumi.azure.storage.inputs.AccountNetworkRulesPrivateLinkAccessArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AccountNetworkRulesArgs extends com.pulumi.resources.ResourceArgs {

    public static final AccountNetworkRulesArgs Empty = new AccountNetworkRulesArgs();

    /**
     * Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Valid options are any combination of `Logging`, `Metrics`, `AzureServices`, or `None`.
     * 
     */
    @Import(name="bypasses")
    private @Nullable Output<List<String>> bypasses;

    /**
     * @return Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Valid options are any combination of `Logging`, `Metrics`, `AzureServices`, or `None`.
     * 
     */
    public Optional<Output<List<String>>> bypasses() {
        return Optional.ofNullable(this.bypasses);
    }

    /**
     * Specifies the default action of allow or deny when no other rules match. Valid options are `Deny` or `Allow`.
     * 
     */
    @Import(name="defaultAction", required=true)
    private Output<String> defaultAction;

    /**
     * @return Specifies the default action of allow or deny when no other rules match. Valid options are `Deny` or `Allow`.
     * 
     */
    public Output<String> defaultAction() {
        return this.defaultAction;
    }

    /**
     * List of public IP or IP ranges in CIDR Format. Only IPv4 addresses are allowed. /31 CIDRs, /32 CIDRs, and Private IP address ranges (as defined in [RFC 1918](https://tools.ietf.org/html/rfc1918#section-3)), are not allowed.
     * 
     */
    @Import(name="ipRules")
    private @Nullable Output<List<String>> ipRules;

    /**
     * @return List of public IP or IP ranges in CIDR Format. Only IPv4 addresses are allowed. /31 CIDRs, /32 CIDRs, and Private IP address ranges (as defined in [RFC 1918](https://tools.ietf.org/html/rfc1918#section-3)), are not allowed.
     * 
     */
    public Optional<Output<List<String>>> ipRules() {
        return Optional.ofNullable(this.ipRules);
    }

    /**
     * One or more `private_link_access` block as defined below.
     * 
     * &gt; **Note:** If specifying `network_rules`, one of either `ip_rules` or `virtual_network_subnet_ids` must be specified and `default_action` must be set to `Deny`.
     * 
     * &gt; **NOTE:** Network Rules can be defined either directly on the `azure.storage.Account` resource, or using the `azure.storage.AccountNetworkRules` resource - but the two cannot be used together. If both are used against the same Storage Account, spurious changes will occur. When managing Network Rules using this resource, to change from a `default_action` of `Deny` to `Allow` requires defining, rather than removing, the block.
     * 
     * &gt; **Note:** The prefix of `ip_rules` must be between 0 and 30 and only supports public IP addresses.
     * 
     * &gt; **Note:** [More information on Validation is available here](https://docs.microsoft.com/en-gb/azure/storage/blobs/storage-custom-domain-name)
     * 
     */
    @Import(name="privateLinkAccesses")
    private @Nullable Output<List<AccountNetworkRulesPrivateLinkAccessArgs>> privateLinkAccesses;

    /**
     * @return One or more `private_link_access` block as defined below.
     * 
     * &gt; **Note:** If specifying `network_rules`, one of either `ip_rules` or `virtual_network_subnet_ids` must be specified and `default_action` must be set to `Deny`.
     * 
     * &gt; **NOTE:** Network Rules can be defined either directly on the `azure.storage.Account` resource, or using the `azure.storage.AccountNetworkRules` resource - but the two cannot be used together. If both are used against the same Storage Account, spurious changes will occur. When managing Network Rules using this resource, to change from a `default_action` of `Deny` to `Allow` requires defining, rather than removing, the block.
     * 
     * &gt; **Note:** The prefix of `ip_rules` must be between 0 and 30 and only supports public IP addresses.
     * 
     * &gt; **Note:** [More information on Validation is available here](https://docs.microsoft.com/en-gb/azure/storage/blobs/storage-custom-domain-name)
     * 
     */
    public Optional<Output<List<AccountNetworkRulesPrivateLinkAccessArgs>>> privateLinkAccesses() {
        return Optional.ofNullable(this.privateLinkAccesses);
    }

    /**
     * A list of resource ids for subnets.
     * 
     */
    @Import(name="virtualNetworkSubnetIds")
    private @Nullable Output<List<String>> virtualNetworkSubnetIds;

    /**
     * @return A list of resource ids for subnets.
     * 
     */
    public Optional<Output<List<String>>> virtualNetworkSubnetIds() {
        return Optional.ofNullable(this.virtualNetworkSubnetIds);
    }

    private AccountNetworkRulesArgs() {}

    private AccountNetworkRulesArgs(AccountNetworkRulesArgs $) {
        this.bypasses = $.bypasses;
        this.defaultAction = $.defaultAction;
        this.ipRules = $.ipRules;
        this.privateLinkAccesses = $.privateLinkAccesses;
        this.virtualNetworkSubnetIds = $.virtualNetworkSubnetIds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccountNetworkRulesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccountNetworkRulesArgs $;

        public Builder() {
            $ = new AccountNetworkRulesArgs();
        }

        public Builder(AccountNetworkRulesArgs defaults) {
            $ = new AccountNetworkRulesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bypasses Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Valid options are any combination of `Logging`, `Metrics`, `AzureServices`, or `None`.
         * 
         * @return builder
         * 
         */
        public Builder bypasses(@Nullable Output<List<String>> bypasses) {
            $.bypasses = bypasses;
            return this;
        }

        /**
         * @param bypasses Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Valid options are any combination of `Logging`, `Metrics`, `AzureServices`, or `None`.
         * 
         * @return builder
         * 
         */
        public Builder bypasses(List<String> bypasses) {
            return bypasses(Output.of(bypasses));
        }

        /**
         * @param bypasses Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Valid options are any combination of `Logging`, `Metrics`, `AzureServices`, or `None`.
         * 
         * @return builder
         * 
         */
        public Builder bypasses(String... bypasses) {
            return bypasses(List.of(bypasses));
        }

        /**
         * @param defaultAction Specifies the default action of allow or deny when no other rules match. Valid options are `Deny` or `Allow`.
         * 
         * @return builder
         * 
         */
        public Builder defaultAction(Output<String> defaultAction) {
            $.defaultAction = defaultAction;
            return this;
        }

        /**
         * @param defaultAction Specifies the default action of allow or deny when no other rules match. Valid options are `Deny` or `Allow`.
         * 
         * @return builder
         * 
         */
        public Builder defaultAction(String defaultAction) {
            return defaultAction(Output.of(defaultAction));
        }

        /**
         * @param ipRules List of public IP or IP ranges in CIDR Format. Only IPv4 addresses are allowed. /31 CIDRs, /32 CIDRs, and Private IP address ranges (as defined in [RFC 1918](https://tools.ietf.org/html/rfc1918#section-3)), are not allowed.
         * 
         * @return builder
         * 
         */
        public Builder ipRules(@Nullable Output<List<String>> ipRules) {
            $.ipRules = ipRules;
            return this;
        }

        /**
         * @param ipRules List of public IP or IP ranges in CIDR Format. Only IPv4 addresses are allowed. /31 CIDRs, /32 CIDRs, and Private IP address ranges (as defined in [RFC 1918](https://tools.ietf.org/html/rfc1918#section-3)), are not allowed.
         * 
         * @return builder
         * 
         */
        public Builder ipRules(List<String> ipRules) {
            return ipRules(Output.of(ipRules));
        }

        /**
         * @param ipRules List of public IP or IP ranges in CIDR Format. Only IPv4 addresses are allowed. /31 CIDRs, /32 CIDRs, and Private IP address ranges (as defined in [RFC 1918](https://tools.ietf.org/html/rfc1918#section-3)), are not allowed.
         * 
         * @return builder
         * 
         */
        public Builder ipRules(String... ipRules) {
            return ipRules(List.of(ipRules));
        }

        /**
         * @param privateLinkAccesses One or more `private_link_access` block as defined below.
         * 
         * &gt; **Note:** If specifying `network_rules`, one of either `ip_rules` or `virtual_network_subnet_ids` must be specified and `default_action` must be set to `Deny`.
         * 
         * &gt; **NOTE:** Network Rules can be defined either directly on the `azure.storage.Account` resource, or using the `azure.storage.AccountNetworkRules` resource - but the two cannot be used together. If both are used against the same Storage Account, spurious changes will occur. When managing Network Rules using this resource, to change from a `default_action` of `Deny` to `Allow` requires defining, rather than removing, the block.
         * 
         * &gt; **Note:** The prefix of `ip_rules` must be between 0 and 30 and only supports public IP addresses.
         * 
         * &gt; **Note:** [More information on Validation is available here](https://docs.microsoft.com/en-gb/azure/storage/blobs/storage-custom-domain-name)
         * 
         * @return builder
         * 
         */
        public Builder privateLinkAccesses(@Nullable Output<List<AccountNetworkRulesPrivateLinkAccessArgs>> privateLinkAccesses) {
            $.privateLinkAccesses = privateLinkAccesses;
            return this;
        }

        /**
         * @param privateLinkAccesses One or more `private_link_access` block as defined below.
         * 
         * &gt; **Note:** If specifying `network_rules`, one of either `ip_rules` or `virtual_network_subnet_ids` must be specified and `default_action` must be set to `Deny`.
         * 
         * &gt; **NOTE:** Network Rules can be defined either directly on the `azure.storage.Account` resource, or using the `azure.storage.AccountNetworkRules` resource - but the two cannot be used together. If both are used against the same Storage Account, spurious changes will occur. When managing Network Rules using this resource, to change from a `default_action` of `Deny` to `Allow` requires defining, rather than removing, the block.
         * 
         * &gt; **Note:** The prefix of `ip_rules` must be between 0 and 30 and only supports public IP addresses.
         * 
         * &gt; **Note:** [More information on Validation is available here](https://docs.microsoft.com/en-gb/azure/storage/blobs/storage-custom-domain-name)
         * 
         * @return builder
         * 
         */
        public Builder privateLinkAccesses(List<AccountNetworkRulesPrivateLinkAccessArgs> privateLinkAccesses) {
            return privateLinkAccesses(Output.of(privateLinkAccesses));
        }

        /**
         * @param privateLinkAccesses One or more `private_link_access` block as defined below.
         * 
         * &gt; **Note:** If specifying `network_rules`, one of either `ip_rules` or `virtual_network_subnet_ids` must be specified and `default_action` must be set to `Deny`.
         * 
         * &gt; **NOTE:** Network Rules can be defined either directly on the `azure.storage.Account` resource, or using the `azure.storage.AccountNetworkRules` resource - but the two cannot be used together. If both are used against the same Storage Account, spurious changes will occur. When managing Network Rules using this resource, to change from a `default_action` of `Deny` to `Allow` requires defining, rather than removing, the block.
         * 
         * &gt; **Note:** The prefix of `ip_rules` must be between 0 and 30 and only supports public IP addresses.
         * 
         * &gt; **Note:** [More information on Validation is available here](https://docs.microsoft.com/en-gb/azure/storage/blobs/storage-custom-domain-name)
         * 
         * @return builder
         * 
         */
        public Builder privateLinkAccesses(AccountNetworkRulesPrivateLinkAccessArgs... privateLinkAccesses) {
            return privateLinkAccesses(List.of(privateLinkAccesses));
        }

        /**
         * @param virtualNetworkSubnetIds A list of resource ids for subnets.
         * 
         * @return builder
         * 
         */
        public Builder virtualNetworkSubnetIds(@Nullable Output<List<String>> virtualNetworkSubnetIds) {
            $.virtualNetworkSubnetIds = virtualNetworkSubnetIds;
            return this;
        }

        /**
         * @param virtualNetworkSubnetIds A list of resource ids for subnets.
         * 
         * @return builder
         * 
         */
        public Builder virtualNetworkSubnetIds(List<String> virtualNetworkSubnetIds) {
            return virtualNetworkSubnetIds(Output.of(virtualNetworkSubnetIds));
        }

        /**
         * @param virtualNetworkSubnetIds A list of resource ids for subnets.
         * 
         * @return builder
         * 
         */
        public Builder virtualNetworkSubnetIds(String... virtualNetworkSubnetIds) {
            return virtualNetworkSubnetIds(List.of(virtualNetworkSubnetIds));
        }

        public AccountNetworkRulesArgs build() {
            if ($.defaultAction == null) {
                throw new MissingRequiredPropertyException("AccountNetworkRulesArgs", "defaultAction");
            }
            return $;
        }
    }

}
