// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appservice.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LinuxWebAppSlotAuthSettingsV2CustomOidcV2Args extends com.pulumi.resources.ResourceArgs {

    public static final LinuxWebAppSlotAuthSettingsV2CustomOidcV2Args Empty = new LinuxWebAppSlotAuthSettingsV2CustomOidcV2Args();

    /**
     * The endpoint to make the Authorisation Request as supplied by `openid_configuration_endpoint` response.
     * 
     */
    @Import(name="authorisationEndpoint")
    private @Nullable Output<String> authorisationEndpoint;

    /**
     * @return The endpoint to make the Authorisation Request as supplied by `openid_configuration_endpoint` response.
     * 
     */
    public Optional<Output<String>> authorisationEndpoint() {
        return Optional.ofNullable(this.authorisationEndpoint);
    }

    /**
     * The endpoint that provides the keys necessary to validate the token as supplied by `openid_configuration_endpoint` response.
     * 
     */
    @Import(name="certificationUri")
    private @Nullable Output<String> certificationUri;

    /**
     * @return The endpoint that provides the keys necessary to validate the token as supplied by `openid_configuration_endpoint` response.
     * 
     */
    public Optional<Output<String>> certificationUri() {
        return Optional.ofNullable(this.certificationUri);
    }

    /**
     * The Client Credential Method used.
     * 
     */
    @Import(name="clientCredentialMethod")
    private @Nullable Output<String> clientCredentialMethod;

    /**
     * @return The Client Credential Method used.
     * 
     */
    public Optional<Output<String>> clientCredentialMethod() {
        return Optional.ofNullable(this.clientCredentialMethod);
    }

    /**
     * The ID of the Client to use to authenticate with Azure Active Directory.
     * 
     */
    @Import(name="clientId", required=true)
    private Output<String> clientId;

    /**
     * @return The ID of the Client to use to authenticate with Azure Active Directory.
     * 
     */
    public Output<String> clientId() {
        return this.clientId;
    }

    /**
     * The App Setting name that contains the client secret of the Client. Cannot be used with `client_secret`.
     * 
     */
    @Import(name="clientSecretSettingName")
    private @Nullable Output<String> clientSecretSettingName;

    /**
     * @return The App Setting name that contains the client secret of the Client. Cannot be used with `client_secret`.
     * 
     */
    public Optional<Output<String>> clientSecretSettingName() {
        return Optional.ofNullable(this.clientSecretSettingName);
    }

    /**
     * The endpoint that issued the Token as supplied by `openid_configuration_endpoint` response.
     * 
     */
    @Import(name="issuerEndpoint")
    private @Nullable Output<String> issuerEndpoint;

    /**
     * @return The endpoint that issued the Token as supplied by `openid_configuration_endpoint` response.
     * 
     */
    public Optional<Output<String>> issuerEndpoint() {
        return Optional.ofNullable(this.issuerEndpoint);
    }

    @Import(name="name", required=true)
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    /**
     * The name of the claim that contains the users name.
     * 
     */
    @Import(name="nameClaimType")
    private @Nullable Output<String> nameClaimType;

    /**
     * @return The name of the claim that contains the users name.
     * 
     */
    public Optional<Output<String>> nameClaimType() {
        return Optional.ofNullable(this.nameClaimType);
    }

    /**
     * The app setting name that contains the `client_secret` value used for the Custom OIDC Login.
     * 
     */
    @Import(name="openidConfigurationEndpoint", required=true)
    private Output<String> openidConfigurationEndpoint;

    /**
     * @return The app setting name that contains the `client_secret` value used for the Custom OIDC Login.
     * 
     */
    public Output<String> openidConfigurationEndpoint() {
        return this.openidConfigurationEndpoint;
    }

    /**
     * The list of the scopes that should be requested while authenticating.
     * 
     */
    @Import(name="scopes")
    private @Nullable Output<List<String>> scopes;

    /**
     * @return The list of the scopes that should be requested while authenticating.
     * 
     */
    public Optional<Output<List<String>>> scopes() {
        return Optional.ofNullable(this.scopes);
    }

    /**
     * The endpoint used to request a Token as supplied by `openid_configuration_endpoint` response.
     * 
     */
    @Import(name="tokenEndpoint")
    private @Nullable Output<String> tokenEndpoint;

    /**
     * @return The endpoint used to request a Token as supplied by `openid_configuration_endpoint` response.
     * 
     */
    public Optional<Output<String>> tokenEndpoint() {
        return Optional.ofNullable(this.tokenEndpoint);
    }

    private LinuxWebAppSlotAuthSettingsV2CustomOidcV2Args() {}

    private LinuxWebAppSlotAuthSettingsV2CustomOidcV2Args(LinuxWebAppSlotAuthSettingsV2CustomOidcV2Args $) {
        this.authorisationEndpoint = $.authorisationEndpoint;
        this.certificationUri = $.certificationUri;
        this.clientCredentialMethod = $.clientCredentialMethod;
        this.clientId = $.clientId;
        this.clientSecretSettingName = $.clientSecretSettingName;
        this.issuerEndpoint = $.issuerEndpoint;
        this.name = $.name;
        this.nameClaimType = $.nameClaimType;
        this.openidConfigurationEndpoint = $.openidConfigurationEndpoint;
        this.scopes = $.scopes;
        this.tokenEndpoint = $.tokenEndpoint;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LinuxWebAppSlotAuthSettingsV2CustomOidcV2Args defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LinuxWebAppSlotAuthSettingsV2CustomOidcV2Args $;

        public Builder() {
            $ = new LinuxWebAppSlotAuthSettingsV2CustomOidcV2Args();
        }

        public Builder(LinuxWebAppSlotAuthSettingsV2CustomOidcV2Args defaults) {
            $ = new LinuxWebAppSlotAuthSettingsV2CustomOidcV2Args(Objects.requireNonNull(defaults));
        }

        /**
         * @param authorisationEndpoint The endpoint to make the Authorisation Request as supplied by `openid_configuration_endpoint` response.
         * 
         * @return builder
         * 
         */
        public Builder authorisationEndpoint(@Nullable Output<String> authorisationEndpoint) {
            $.authorisationEndpoint = authorisationEndpoint;
            return this;
        }

        /**
         * @param authorisationEndpoint The endpoint to make the Authorisation Request as supplied by `openid_configuration_endpoint` response.
         * 
         * @return builder
         * 
         */
        public Builder authorisationEndpoint(String authorisationEndpoint) {
            return authorisationEndpoint(Output.of(authorisationEndpoint));
        }

        /**
         * @param certificationUri The endpoint that provides the keys necessary to validate the token as supplied by `openid_configuration_endpoint` response.
         * 
         * @return builder
         * 
         */
        public Builder certificationUri(@Nullable Output<String> certificationUri) {
            $.certificationUri = certificationUri;
            return this;
        }

        /**
         * @param certificationUri The endpoint that provides the keys necessary to validate the token as supplied by `openid_configuration_endpoint` response.
         * 
         * @return builder
         * 
         */
        public Builder certificationUri(String certificationUri) {
            return certificationUri(Output.of(certificationUri));
        }

        /**
         * @param clientCredentialMethod The Client Credential Method used.
         * 
         * @return builder
         * 
         */
        public Builder clientCredentialMethod(@Nullable Output<String> clientCredentialMethod) {
            $.clientCredentialMethod = clientCredentialMethod;
            return this;
        }

        /**
         * @param clientCredentialMethod The Client Credential Method used.
         * 
         * @return builder
         * 
         */
        public Builder clientCredentialMethod(String clientCredentialMethod) {
            return clientCredentialMethod(Output.of(clientCredentialMethod));
        }

        /**
         * @param clientId The ID of the Client to use to authenticate with Azure Active Directory.
         * 
         * @return builder
         * 
         */
        public Builder clientId(Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId The ID of the Client to use to authenticate with Azure Active Directory.
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param clientSecretSettingName The App Setting name that contains the client secret of the Client. Cannot be used with `client_secret`.
         * 
         * @return builder
         * 
         */
        public Builder clientSecretSettingName(@Nullable Output<String> clientSecretSettingName) {
            $.clientSecretSettingName = clientSecretSettingName;
            return this;
        }

        /**
         * @param clientSecretSettingName The App Setting name that contains the client secret of the Client. Cannot be used with `client_secret`.
         * 
         * @return builder
         * 
         */
        public Builder clientSecretSettingName(String clientSecretSettingName) {
            return clientSecretSettingName(Output.of(clientSecretSettingName));
        }

        /**
         * @param issuerEndpoint The endpoint that issued the Token as supplied by `openid_configuration_endpoint` response.
         * 
         * @return builder
         * 
         */
        public Builder issuerEndpoint(@Nullable Output<String> issuerEndpoint) {
            $.issuerEndpoint = issuerEndpoint;
            return this;
        }

        /**
         * @param issuerEndpoint The endpoint that issued the Token as supplied by `openid_configuration_endpoint` response.
         * 
         * @return builder
         * 
         */
        public Builder issuerEndpoint(String issuerEndpoint) {
            return issuerEndpoint(Output.of(issuerEndpoint));
        }

        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nameClaimType The name of the claim that contains the users name.
         * 
         * @return builder
         * 
         */
        public Builder nameClaimType(@Nullable Output<String> nameClaimType) {
            $.nameClaimType = nameClaimType;
            return this;
        }

        /**
         * @param nameClaimType The name of the claim that contains the users name.
         * 
         * @return builder
         * 
         */
        public Builder nameClaimType(String nameClaimType) {
            return nameClaimType(Output.of(nameClaimType));
        }

        /**
         * @param openidConfigurationEndpoint The app setting name that contains the `client_secret` value used for the Custom OIDC Login.
         * 
         * @return builder
         * 
         */
        public Builder openidConfigurationEndpoint(Output<String> openidConfigurationEndpoint) {
            $.openidConfigurationEndpoint = openidConfigurationEndpoint;
            return this;
        }

        /**
         * @param openidConfigurationEndpoint The app setting name that contains the `client_secret` value used for the Custom OIDC Login.
         * 
         * @return builder
         * 
         */
        public Builder openidConfigurationEndpoint(String openidConfigurationEndpoint) {
            return openidConfigurationEndpoint(Output.of(openidConfigurationEndpoint));
        }

        /**
         * @param scopes The list of the scopes that should be requested while authenticating.
         * 
         * @return builder
         * 
         */
        public Builder scopes(@Nullable Output<List<String>> scopes) {
            $.scopes = scopes;
            return this;
        }

        /**
         * @param scopes The list of the scopes that should be requested while authenticating.
         * 
         * @return builder
         * 
         */
        public Builder scopes(List<String> scopes) {
            return scopes(Output.of(scopes));
        }

        /**
         * @param scopes The list of the scopes that should be requested while authenticating.
         * 
         * @return builder
         * 
         */
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }

        /**
         * @param tokenEndpoint The endpoint used to request a Token as supplied by `openid_configuration_endpoint` response.
         * 
         * @return builder
         * 
         */
        public Builder tokenEndpoint(@Nullable Output<String> tokenEndpoint) {
            $.tokenEndpoint = tokenEndpoint;
            return this;
        }

        /**
         * @param tokenEndpoint The endpoint used to request a Token as supplied by `openid_configuration_endpoint` response.
         * 
         * @return builder
         * 
         */
        public Builder tokenEndpoint(String tokenEndpoint) {
            return tokenEndpoint(Output.of(tokenEndpoint));
        }

        public LinuxWebAppSlotAuthSettingsV2CustomOidcV2Args build() {
            if ($.clientId == null) {
                throw new MissingRequiredPropertyException("LinuxWebAppSlotAuthSettingsV2CustomOidcV2Args", "clientId");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("LinuxWebAppSlotAuthSettingsV2CustomOidcV2Args", "name");
            }
            if ($.openidConfigurationEndpoint == null) {
                throw new MissingRequiredPropertyException("LinuxWebAppSlotAuthSettingsV2CustomOidcV2Args", "openidConfigurationEndpoint");
            }
            return $;
        }
    }

}
