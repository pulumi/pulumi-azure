// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.sql;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.sql.ManagedInstanceActiveDirectoryAdministratorArgs;
import com.pulumi.azure.sql.inputs.ManagedInstanceActiveDirectoryAdministratorState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Allows you to set a user or group as the AD administrator for an Azure SQL Managed Instance.
 * 
 * &gt; **Note:** The `azure.sql.ManagedInstanceActiveDirectoryAdministrator` resource is deprecated in version 3.0 of the AzureRM provider and will be removed in version 4.0. Please use the `azure.mssql.ManagedInstanceActiveDirectoryAdministrator` resource instead.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.sql.ManagedInstance;
 * import com.pulumi.azure.sql.ManagedInstanceArgs;
 * import com.pulumi.azure.core.CoreFunctions;
 * import com.pulumi.azure.sql.ManagedInstanceActiveDirectoryAdministrator;
 * import com.pulumi.azure.sql.ManagedInstanceActiveDirectoryAdministratorArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new ResourceGroup("example", ResourceGroupArgs.builder()        
 *             .name("rg-example")
 *             .location("West Europe")
 *             .build());
 * 
 *         var exampleManagedInstance = new ManagedInstance("exampleManagedInstance", ManagedInstanceArgs.builder()        
 *             .name("managedsqlinstance")
 *             .resourceGroupName(example.name())
 *             .location(example.location())
 *             .administratorLogin("mradministrator")
 *             .administratorLoginPassword("thisIsDog11")
 *             .licenseType("BasePrice")
 *             .subnetId(exampleAzurermSubnet.id())
 *             .skuName("GP_Gen5")
 *             .vcores(4)
 *             .storageSizeInGb(32)
 *             .build());
 * 
 *         final var current = CoreFunctions.getClientConfig();
 * 
 *         var exampleManagedInstanceActiveDirectoryAdministrator = new ManagedInstanceActiveDirectoryAdministrator("exampleManagedInstanceActiveDirectoryAdministrator", ManagedInstanceActiveDirectoryAdministratorArgs.builder()        
 *             .managedInstanceName(exampleManagedInstance.name())
 *             .resourceGroupName(example.name())
 *             .login("sqladmin")
 *             .tenantId(current.applyValue(getClientConfigResult -> getClientConfigResult.tenantId()))
 *             .objectId(current.applyValue(getClientConfigResult -> getClientConfigResult.objectId()))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * A SQL Active Directory Administrator can be imported using the `resource id`, e.g.
 * 
 * ```sh
 * $ pulumi import azure:sql/managedInstanceActiveDirectoryAdministrator:ManagedInstanceActiveDirectoryAdministrator administrator /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myresourcegroup/providers/Microsoft.Sql/managedInstances/mymanagedinstance/administrators/activeDirectory
 * ```
 * 
 */
@ResourceType(type="azure:sql/managedInstanceActiveDirectoryAdministrator:ManagedInstanceActiveDirectoryAdministrator")
public class ManagedInstanceActiveDirectoryAdministrator extends com.pulumi.resources.CustomResource {
    /**
     * Specifies whether only AD Users and administrators can be used to login (`true`) or also local database users (`false`). Defaults to `false`.
     * 
     */
    @Export(name="azureadAuthenticationOnly", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> azureadAuthenticationOnly;

    /**
     * @return Specifies whether only AD Users and administrators can be used to login (`true`) or also local database users (`false`). Defaults to `false`.
     * 
     */
    public Output<Optional<Boolean>> azureadAuthenticationOnly() {
        return Codegen.optional(this.azureadAuthenticationOnly);
    }
    /**
     * The login name of the principal to set as the Managed Instance administrator
     * 
     */
    @Export(name="login", refs={String.class}, tree="[0]")
    private Output<String> login;

    /**
     * @return The login name of the principal to set as the Managed Instance administrator
     * 
     */
    public Output<String> login() {
        return this.login;
    }
    /**
     * The name of the SQL Managed Instance on which to set the administrator. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="managedInstanceName", refs={String.class}, tree="[0]")
    private Output<String> managedInstanceName;

    /**
     * @return The name of the SQL Managed Instance on which to set the administrator. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> managedInstanceName() {
        return this.managedInstanceName;
    }
    /**
     * The ID of the principal to set as the Managed Instance administrator
     * 
     */
    @Export(name="objectId", refs={String.class}, tree="[0]")
    private Output<String> objectId;

    /**
     * @return The ID of the principal to set as the Managed Instance administrator
     * 
     */
    public Output<String> objectId() {
        return this.objectId;
    }
    /**
     * The name of the resource group for the SQL Managed Instance. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="resourceGroupName", refs={String.class}, tree="[0]")
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group for the SQL Managed Instance. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * The Azure Tenant ID
     * 
     */
    @Export(name="tenantId", refs={String.class}, tree="[0]")
    private Output<String> tenantId;

    /**
     * @return The Azure Tenant ID
     * 
     */
    public Output<String> tenantId() {
        return this.tenantId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ManagedInstanceActiveDirectoryAdministrator(String name) {
        this(name, ManagedInstanceActiveDirectoryAdministratorArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ManagedInstanceActiveDirectoryAdministrator(String name, ManagedInstanceActiveDirectoryAdministratorArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ManagedInstanceActiveDirectoryAdministrator(String name, ManagedInstanceActiveDirectoryAdministratorArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:sql/managedInstanceActiveDirectoryAdministrator:ManagedInstanceActiveDirectoryAdministrator", name, args == null ? ManagedInstanceActiveDirectoryAdministratorArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private ManagedInstanceActiveDirectoryAdministrator(String name, Output<String> id, @Nullable ManagedInstanceActiveDirectoryAdministratorState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:sql/managedInstanceActiveDirectoryAdministrator:ManagedInstanceActiveDirectoryAdministrator", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ManagedInstanceActiveDirectoryAdministrator get(String name, Output<String> id, @Nullable ManagedInstanceActiveDirectoryAdministratorState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ManagedInstanceActiveDirectoryAdministrator(name, id, state, options);
    }
}
