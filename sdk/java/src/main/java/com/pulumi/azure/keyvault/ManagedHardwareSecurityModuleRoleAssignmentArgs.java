// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.keyvault;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagedHardwareSecurityModuleRoleAssignmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagedHardwareSecurityModuleRoleAssignmentArgs Empty = new ManagedHardwareSecurityModuleRoleAssignmentArgs();

    /**
     * The name in GUID notation which should be used for this KeyVault Role Assignment. Changing this forces a new KeyVault to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name in GUID notation which should be used for this KeyVault Role Assignment. Changing this forces a new KeyVault to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The principal ID to be assigned to this role. It can point to a user, service principal, or security group. Changing this forces a new KeyVault to be created.
     * 
     */
    @Import(name="principalId", required=true)
    private Output<String> principalId;

    /**
     * @return The principal ID to be assigned to this role. It can point to a user, service principal, or security group. Changing this forces a new KeyVault to be created.
     * 
     */
    public Output<String> principalId() {
        return this.principalId;
    }

    /**
     * The resource ID of the role definition to assign. Changing this forces a new KeyVault to be created.
     * 
     */
    @Import(name="roleDefinitionId", required=true)
    private Output<String> roleDefinitionId;

    /**
     * @return The resource ID of the role definition to assign. Changing this forces a new KeyVault to be created.
     * 
     */
    public Output<String> roleDefinitionId() {
        return this.roleDefinitionId;
    }

    /**
     * Specifies the scope to create the role assignment. Changing this forces a new KeyVault to be created.
     * 
     */
    @Import(name="scope", required=true)
    private Output<String> scope;

    /**
     * @return Specifies the scope to create the role assignment. Changing this forces a new KeyVault to be created.
     * 
     */
    public Output<String> scope() {
        return this.scope;
    }

    /**
     * The HSM URI of a Managed Hardware Security Module resource. Changing this forces a new KeyVault to be created.
     * 
     */
    @Import(name="vaultBaseUrl", required=true)
    private Output<String> vaultBaseUrl;

    /**
     * @return The HSM URI of a Managed Hardware Security Module resource. Changing this forces a new KeyVault to be created.
     * 
     */
    public Output<String> vaultBaseUrl() {
        return this.vaultBaseUrl;
    }

    private ManagedHardwareSecurityModuleRoleAssignmentArgs() {}

    private ManagedHardwareSecurityModuleRoleAssignmentArgs(ManagedHardwareSecurityModuleRoleAssignmentArgs $) {
        this.name = $.name;
        this.principalId = $.principalId;
        this.roleDefinitionId = $.roleDefinitionId;
        this.scope = $.scope;
        this.vaultBaseUrl = $.vaultBaseUrl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedHardwareSecurityModuleRoleAssignmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedHardwareSecurityModuleRoleAssignmentArgs $;

        public Builder() {
            $ = new ManagedHardwareSecurityModuleRoleAssignmentArgs();
        }

        public Builder(ManagedHardwareSecurityModuleRoleAssignmentArgs defaults) {
            $ = new ManagedHardwareSecurityModuleRoleAssignmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name The name in GUID notation which should be used for this KeyVault Role Assignment. Changing this forces a new KeyVault to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name in GUID notation which should be used for this KeyVault Role Assignment. Changing this forces a new KeyVault to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param principalId The principal ID to be assigned to this role. It can point to a user, service principal, or security group. Changing this forces a new KeyVault to be created.
         * 
         * @return builder
         * 
         */
        public Builder principalId(Output<String> principalId) {
            $.principalId = principalId;
            return this;
        }

        /**
         * @param principalId The principal ID to be assigned to this role. It can point to a user, service principal, or security group. Changing this forces a new KeyVault to be created.
         * 
         * @return builder
         * 
         */
        public Builder principalId(String principalId) {
            return principalId(Output.of(principalId));
        }

        /**
         * @param roleDefinitionId The resource ID of the role definition to assign. Changing this forces a new KeyVault to be created.
         * 
         * @return builder
         * 
         */
        public Builder roleDefinitionId(Output<String> roleDefinitionId) {
            $.roleDefinitionId = roleDefinitionId;
            return this;
        }

        /**
         * @param roleDefinitionId The resource ID of the role definition to assign. Changing this forces a new KeyVault to be created.
         * 
         * @return builder
         * 
         */
        public Builder roleDefinitionId(String roleDefinitionId) {
            return roleDefinitionId(Output.of(roleDefinitionId));
        }

        /**
         * @param scope Specifies the scope to create the role assignment. Changing this forces a new KeyVault to be created.
         * 
         * @return builder
         * 
         */
        public Builder scope(Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope Specifies the scope to create the role assignment. Changing this forces a new KeyVault to be created.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param vaultBaseUrl The HSM URI of a Managed Hardware Security Module resource. Changing this forces a new KeyVault to be created.
         * 
         * @return builder
         * 
         */
        public Builder vaultBaseUrl(Output<String> vaultBaseUrl) {
            $.vaultBaseUrl = vaultBaseUrl;
            return this;
        }

        /**
         * @param vaultBaseUrl The HSM URI of a Managed Hardware Security Module resource. Changing this forces a new KeyVault to be created.
         * 
         * @return builder
         * 
         */
        public Builder vaultBaseUrl(String vaultBaseUrl) {
            return vaultBaseUrl(Output.of(vaultBaseUrl));
        }

        public ManagedHardwareSecurityModuleRoleAssignmentArgs build() {
            $.principalId = Objects.requireNonNull($.principalId, "expected parameter 'principalId' to be non-null");
            $.roleDefinitionId = Objects.requireNonNull($.roleDefinitionId, "expected parameter 'roleDefinitionId' to be non-null");
            $.scope = Objects.requireNonNull($.scope, "expected parameter 'scope' to be non-null");
            $.vaultBaseUrl = Objects.requireNonNull($.vaultBaseUrl, "expected parameter 'vaultBaseUrl' to be non-null");
            return $;
        }
    }

}
