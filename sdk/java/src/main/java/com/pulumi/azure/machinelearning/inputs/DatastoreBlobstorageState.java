// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.machinelearning.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatastoreBlobstorageState extends com.pulumi.resources.ResourceArgs {

    public static final DatastoreBlobstorageState Empty = new DatastoreBlobstorageState();

    @Import(name="accountKey")
    private @Nullable Output<String> accountKey;

    public Optional<Output<String>> accountKey() {
        return Optional.ofNullable(this.accountKey);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="isDefault")
    private @Nullable Output<Boolean> isDefault;

    public Optional<Output<Boolean>> isDefault() {
        return Optional.ofNullable(this.isDefault);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="serviceDataAuthIdentity")
    private @Nullable Output<String> serviceDataAuthIdentity;

    public Optional<Output<String>> serviceDataAuthIdentity() {
        return Optional.ofNullable(this.serviceDataAuthIdentity);
    }

    @Import(name="sharedAccessSignature")
    private @Nullable Output<String> sharedAccessSignature;

    public Optional<Output<String>> sharedAccessSignature() {
        return Optional.ofNullable(this.sharedAccessSignature);
    }

    @Import(name="storageContainerId")
    private @Nullable Output<String> storageContainerId;

    public Optional<Output<String>> storageContainerId() {
        return Optional.ofNullable(this.storageContainerId);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="workspaceId")
    private @Nullable Output<String> workspaceId;

    public Optional<Output<String>> workspaceId() {
        return Optional.ofNullable(this.workspaceId);
    }

    private DatastoreBlobstorageState() {}

    private DatastoreBlobstorageState(DatastoreBlobstorageState $) {
        this.accountKey = $.accountKey;
        this.description = $.description;
        this.isDefault = $.isDefault;
        this.name = $.name;
        this.serviceDataAuthIdentity = $.serviceDataAuthIdentity;
        this.sharedAccessSignature = $.sharedAccessSignature;
        this.storageContainerId = $.storageContainerId;
        this.tags = $.tags;
        this.workspaceId = $.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatastoreBlobstorageState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatastoreBlobstorageState $;

        public Builder() {
            $ = new DatastoreBlobstorageState();
        }

        public Builder(DatastoreBlobstorageState defaults) {
            $ = new DatastoreBlobstorageState(Objects.requireNonNull(defaults));
        }

        public Builder accountKey(@Nullable Output<String> accountKey) {
            $.accountKey = accountKey;
            return this;
        }

        public Builder accountKey(String accountKey) {
            return accountKey(Output.of(accountKey));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder isDefault(@Nullable Output<Boolean> isDefault) {
            $.isDefault = isDefault;
            return this;
        }

        public Builder isDefault(Boolean isDefault) {
            return isDefault(Output.of(isDefault));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder serviceDataAuthIdentity(@Nullable Output<String> serviceDataAuthIdentity) {
            $.serviceDataAuthIdentity = serviceDataAuthIdentity;
            return this;
        }

        public Builder serviceDataAuthIdentity(String serviceDataAuthIdentity) {
            return serviceDataAuthIdentity(Output.of(serviceDataAuthIdentity));
        }

        public Builder sharedAccessSignature(@Nullable Output<String> sharedAccessSignature) {
            $.sharedAccessSignature = sharedAccessSignature;
            return this;
        }

        public Builder sharedAccessSignature(String sharedAccessSignature) {
            return sharedAccessSignature(Output.of(sharedAccessSignature));
        }

        public Builder storageContainerId(@Nullable Output<String> storageContainerId) {
            $.storageContainerId = storageContainerId;
            return this;
        }

        public Builder storageContainerId(String storageContainerId) {
            return storageContainerId(Output.of(storageContainerId));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder workspaceId(@Nullable Output<String> workspaceId) {
            $.workspaceId = workspaceId;
            return this;
        }

        public Builder workspaceId(String workspaceId) {
            return workspaceId(Output.of(workspaceId));
        }

        public DatastoreBlobstorageState build() {
            return $;
        }
    }

}
