// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.nginx.outputs;

import com.pulumi.azure.nginx.outputs.GetDeploymentFrontendPrivate;
import com.pulumi.azure.nginx.outputs.GetDeploymentFrontendPublic;
import com.pulumi.azure.nginx.outputs.GetDeploymentIdentity;
import com.pulumi.azure.nginx.outputs.GetDeploymentLoggingStorageAccount;
import com.pulumi.azure.nginx.outputs.GetDeploymentNetworkInterface;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetDeploymentResult {
    /**
     * @return The number of NGINX capacity units for this Nginx Deployment.
     * 
     */
    private Integer capacity;
    /**
     * @return Whether diagnostic settings are enabled.
     * 
     */
    private Boolean diagnoseSupportEnabled;
    /**
     * @return Preferred email associated with the Nginx Deployment.
     * 
     */
    private String email;
    /**
     * @return A `frontend_private` block as defined below.
     * 
     */
    private List<GetDeploymentFrontendPrivate> frontendPrivates;
    /**
     * @return A `frontend_public` block as defined below.
     * 
     */
    private List<GetDeploymentFrontendPublic> frontendPublics;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return A `identity` block as defined below.
     * 
     */
    private List<GetDeploymentIdentity> identities;
    /**
     * @return List of public IPs of the Ngix Deployment.
     * 
     */
    private String ipAddress;
    /**
     * @return The Azure Region where the Nginx Deployment exists.
     * 
     */
    private String location;
    /**
     * @return A `logging_storage_account` block as defined below.
     * 
     */
    private List<GetDeploymentLoggingStorageAccount> loggingStorageAccounts;
    /**
     * @return Auto-generated managed resource group for the Nginx Deployment.
     * 
     */
    private String managedResourceGroup;
    /**
     * @return The account name of the StorageAccount for logging.
     * 
     */
    private String name;
    /**
     * @return A `network_interface` block as defined below.
     * 
     */
    private List<GetDeploymentNetworkInterface> networkInterfaces;
    /**
     * @return NGINX version of the Nginx Deployment.
     * 
     */
    private String nginxVersion;
    private String resourceGroupName;
    /**
     * @return Name of the SKU for this Nginx Deployment.
     * 
     */
    private String sku;
    /**
     * @return A mapping of tags assigned to the Nginx Deployment.
     * 
     */
    private Map<String,String> tags;

    private GetDeploymentResult() {}
    /**
     * @return The number of NGINX capacity units for this Nginx Deployment.
     * 
     */
    public Integer capacity() {
        return this.capacity;
    }
    /**
     * @return Whether diagnostic settings are enabled.
     * 
     */
    public Boolean diagnoseSupportEnabled() {
        return this.diagnoseSupportEnabled;
    }
    /**
     * @return Preferred email associated with the Nginx Deployment.
     * 
     */
    public String email() {
        return this.email;
    }
    /**
     * @return A `frontend_private` block as defined below.
     * 
     */
    public List<GetDeploymentFrontendPrivate> frontendPrivates() {
        return this.frontendPrivates;
    }
    /**
     * @return A `frontend_public` block as defined below.
     * 
     */
    public List<GetDeploymentFrontendPublic> frontendPublics() {
        return this.frontendPublics;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A `identity` block as defined below.
     * 
     */
    public List<GetDeploymentIdentity> identities() {
        return this.identities;
    }
    /**
     * @return List of public IPs of the Ngix Deployment.
     * 
     */
    public String ipAddress() {
        return this.ipAddress;
    }
    /**
     * @return The Azure Region where the Nginx Deployment exists.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return A `logging_storage_account` block as defined below.
     * 
     */
    public List<GetDeploymentLoggingStorageAccount> loggingStorageAccounts() {
        return this.loggingStorageAccounts;
    }
    /**
     * @return Auto-generated managed resource group for the Nginx Deployment.
     * 
     */
    public String managedResourceGroup() {
        return this.managedResourceGroup;
    }
    /**
     * @return The account name of the StorageAccount for logging.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return A `network_interface` block as defined below.
     * 
     */
    public List<GetDeploymentNetworkInterface> networkInterfaces() {
        return this.networkInterfaces;
    }
    /**
     * @return NGINX version of the Nginx Deployment.
     * 
     */
    public String nginxVersion() {
        return this.nginxVersion;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return Name of the SKU for this Nginx Deployment.
     * 
     */
    public String sku() {
        return this.sku;
    }
    /**
     * @return A mapping of tags assigned to the Nginx Deployment.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDeploymentResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer capacity;
        private Boolean diagnoseSupportEnabled;
        private String email;
        private List<GetDeploymentFrontendPrivate> frontendPrivates;
        private List<GetDeploymentFrontendPublic> frontendPublics;
        private String id;
        private List<GetDeploymentIdentity> identities;
        private String ipAddress;
        private String location;
        private List<GetDeploymentLoggingStorageAccount> loggingStorageAccounts;
        private String managedResourceGroup;
        private String name;
        private List<GetDeploymentNetworkInterface> networkInterfaces;
        private String nginxVersion;
        private String resourceGroupName;
        private String sku;
        private Map<String,String> tags;
        public Builder() {}
        public Builder(GetDeploymentResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.capacity = defaults.capacity;
    	      this.diagnoseSupportEnabled = defaults.diagnoseSupportEnabled;
    	      this.email = defaults.email;
    	      this.frontendPrivates = defaults.frontendPrivates;
    	      this.frontendPublics = defaults.frontendPublics;
    	      this.id = defaults.id;
    	      this.identities = defaults.identities;
    	      this.ipAddress = defaults.ipAddress;
    	      this.location = defaults.location;
    	      this.loggingStorageAccounts = defaults.loggingStorageAccounts;
    	      this.managedResourceGroup = defaults.managedResourceGroup;
    	      this.name = defaults.name;
    	      this.networkInterfaces = defaults.networkInterfaces;
    	      this.nginxVersion = defaults.nginxVersion;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.sku = defaults.sku;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder capacity(Integer capacity) {
            if (capacity == null) {
              throw new MissingRequiredPropertyException("GetDeploymentResult", "capacity");
            }
            this.capacity = capacity;
            return this;
        }
        @CustomType.Setter
        public Builder diagnoseSupportEnabled(Boolean diagnoseSupportEnabled) {
            if (diagnoseSupportEnabled == null) {
              throw new MissingRequiredPropertyException("GetDeploymentResult", "diagnoseSupportEnabled");
            }
            this.diagnoseSupportEnabled = diagnoseSupportEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder email(String email) {
            if (email == null) {
              throw new MissingRequiredPropertyException("GetDeploymentResult", "email");
            }
            this.email = email;
            return this;
        }
        @CustomType.Setter
        public Builder frontendPrivates(List<GetDeploymentFrontendPrivate> frontendPrivates) {
            if (frontendPrivates == null) {
              throw new MissingRequiredPropertyException("GetDeploymentResult", "frontendPrivates");
            }
            this.frontendPrivates = frontendPrivates;
            return this;
        }
        public Builder frontendPrivates(GetDeploymentFrontendPrivate... frontendPrivates) {
            return frontendPrivates(List.of(frontendPrivates));
        }
        @CustomType.Setter
        public Builder frontendPublics(List<GetDeploymentFrontendPublic> frontendPublics) {
            if (frontendPublics == null) {
              throw new MissingRequiredPropertyException("GetDeploymentResult", "frontendPublics");
            }
            this.frontendPublics = frontendPublics;
            return this;
        }
        public Builder frontendPublics(GetDeploymentFrontendPublic... frontendPublics) {
            return frontendPublics(List.of(frontendPublics));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDeploymentResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder identities(List<GetDeploymentIdentity> identities) {
            if (identities == null) {
              throw new MissingRequiredPropertyException("GetDeploymentResult", "identities");
            }
            this.identities = identities;
            return this;
        }
        public Builder identities(GetDeploymentIdentity... identities) {
            return identities(List.of(identities));
        }
        @CustomType.Setter
        public Builder ipAddress(String ipAddress) {
            if (ipAddress == null) {
              throw new MissingRequiredPropertyException("GetDeploymentResult", "ipAddress");
            }
            this.ipAddress = ipAddress;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetDeploymentResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder loggingStorageAccounts(List<GetDeploymentLoggingStorageAccount> loggingStorageAccounts) {
            if (loggingStorageAccounts == null) {
              throw new MissingRequiredPropertyException("GetDeploymentResult", "loggingStorageAccounts");
            }
            this.loggingStorageAccounts = loggingStorageAccounts;
            return this;
        }
        public Builder loggingStorageAccounts(GetDeploymentLoggingStorageAccount... loggingStorageAccounts) {
            return loggingStorageAccounts(List.of(loggingStorageAccounts));
        }
        @CustomType.Setter
        public Builder managedResourceGroup(String managedResourceGroup) {
            if (managedResourceGroup == null) {
              throw new MissingRequiredPropertyException("GetDeploymentResult", "managedResourceGroup");
            }
            this.managedResourceGroup = managedResourceGroup;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetDeploymentResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder networkInterfaces(List<GetDeploymentNetworkInterface> networkInterfaces) {
            if (networkInterfaces == null) {
              throw new MissingRequiredPropertyException("GetDeploymentResult", "networkInterfaces");
            }
            this.networkInterfaces = networkInterfaces;
            return this;
        }
        public Builder networkInterfaces(GetDeploymentNetworkInterface... networkInterfaces) {
            return networkInterfaces(List.of(networkInterfaces));
        }
        @CustomType.Setter
        public Builder nginxVersion(String nginxVersion) {
            if (nginxVersion == null) {
              throw new MissingRequiredPropertyException("GetDeploymentResult", "nginxVersion");
            }
            this.nginxVersion = nginxVersion;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            if (resourceGroupName == null) {
              throw new MissingRequiredPropertyException("GetDeploymentResult", "resourceGroupName");
            }
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder sku(String sku) {
            if (sku == null) {
              throw new MissingRequiredPropertyException("GetDeploymentResult", "sku");
            }
            this.sku = sku;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetDeploymentResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public GetDeploymentResult build() {
            final var _resultValue = new GetDeploymentResult();
            _resultValue.capacity = capacity;
            _resultValue.diagnoseSupportEnabled = diagnoseSupportEnabled;
            _resultValue.email = email;
            _resultValue.frontendPrivates = frontendPrivates;
            _resultValue.frontendPublics = frontendPublics;
            _resultValue.id = id;
            _resultValue.identities = identities;
            _resultValue.ipAddress = ipAddress;
            _resultValue.location = location;
            _resultValue.loggingStorageAccounts = loggingStorageAccounts;
            _resultValue.managedResourceGroup = managedResourceGroup;
            _resultValue.name = name;
            _resultValue.networkInterfaces = networkInterfaces;
            _resultValue.nginxVersion = nginxVersion;
            _resultValue.resourceGroupName = resourceGroupName;
            _resultValue.sku = sku;
            _resultValue.tags = tags;
            return _resultValue;
        }
    }
}
