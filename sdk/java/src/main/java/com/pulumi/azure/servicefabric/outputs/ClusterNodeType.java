// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.servicefabric.outputs;

import com.pulumi.azure.servicefabric.outputs.ClusterNodeTypeApplicationPorts;
import com.pulumi.azure.servicefabric.outputs.ClusterNodeTypeEphemeralPorts;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ClusterNodeType {
    /**
     * @return A `application_ports` block as defined below.
     * 
     */
    private final @Nullable ClusterNodeTypeApplicationPorts applicationPorts;
    /**
     * @return The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has.
     * 
     */
    private final @Nullable Map<String,String> capacities;
    /**
     * @return The Port used for the Client Endpoint for this Node Type. Changing this forces a new resource to be created.
     * 
     */
    private final Integer clientEndpointPort;
    /**
     * @return The Durability Level for this Node Type. Possible values include `Bronze`, `Gold` and `Silver`. Defaults to `Bronze`. Changing this forces a new resource to be created.
     * 
     */
    private final @Nullable String durabilityLevel;
    /**
     * @return A `ephemeral_ports` block as defined below.
     * 
     */
    private final @Nullable ClusterNodeTypeEphemeralPorts ephemeralPorts;
    /**
     * @return The Port used for the HTTP Endpoint for this Node Type. Changing this forces a new resource to be created.
     * 
     */
    private final Integer httpEndpointPort;
    /**
     * @return The number of nodes for this Node Type.
     * 
     */
    private final Integer instanceCount;
    /**
     * @return Is this the Primary Node Type? Changing this forces a new resource to be created.
     * 
     */
    private final Boolean isPrimary;
    /**
     * @return Should this node type run only stateless services?
     * 
     */
    private final @Nullable Boolean isStateless;
    /**
     * @return Does this node type span availability zones?
     * 
     */
    private final @Nullable Boolean multipleAvailabilityZones;
    /**
     * @return The name of the Node Type. Changing this forces a new resource to be created.
     * 
     */
    private final String name;
    /**
     * @return The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run.
     * 
     */
    private final @Nullable Map<String,String> placementProperties;
    /**
     * @return The Port used for the Reverse Proxy Endpoint  for this Node Type. Changing this will upgrade the cluster.
     * 
     */
    private final @Nullable Integer reverseProxyEndpointPort;

    @CustomType.Constructor
    private ClusterNodeType(
        @CustomType.Parameter("applicationPorts") @Nullable ClusterNodeTypeApplicationPorts applicationPorts,
        @CustomType.Parameter("capacities") @Nullable Map<String,String> capacities,
        @CustomType.Parameter("clientEndpointPort") Integer clientEndpointPort,
        @CustomType.Parameter("durabilityLevel") @Nullable String durabilityLevel,
        @CustomType.Parameter("ephemeralPorts") @Nullable ClusterNodeTypeEphemeralPorts ephemeralPorts,
        @CustomType.Parameter("httpEndpointPort") Integer httpEndpointPort,
        @CustomType.Parameter("instanceCount") Integer instanceCount,
        @CustomType.Parameter("isPrimary") Boolean isPrimary,
        @CustomType.Parameter("isStateless") @Nullable Boolean isStateless,
        @CustomType.Parameter("multipleAvailabilityZones") @Nullable Boolean multipleAvailabilityZones,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("placementProperties") @Nullable Map<String,String> placementProperties,
        @CustomType.Parameter("reverseProxyEndpointPort") @Nullable Integer reverseProxyEndpointPort) {
        this.applicationPorts = applicationPorts;
        this.capacities = capacities;
        this.clientEndpointPort = clientEndpointPort;
        this.durabilityLevel = durabilityLevel;
        this.ephemeralPorts = ephemeralPorts;
        this.httpEndpointPort = httpEndpointPort;
        this.instanceCount = instanceCount;
        this.isPrimary = isPrimary;
        this.isStateless = isStateless;
        this.multipleAvailabilityZones = multipleAvailabilityZones;
        this.name = name;
        this.placementProperties = placementProperties;
        this.reverseProxyEndpointPort = reverseProxyEndpointPort;
    }

    /**
     * @return A `application_ports` block as defined below.
     * 
     */
    public Optional<ClusterNodeTypeApplicationPorts> applicationPorts() {
        return Optional.ofNullable(this.applicationPorts);
    }
    /**
     * @return The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has.
     * 
     */
    public Map<String,String> capacities() {
        return this.capacities == null ? Map.of() : this.capacities;
    }
    /**
     * @return The Port used for the Client Endpoint for this Node Type. Changing this forces a new resource to be created.
     * 
     */
    public Integer clientEndpointPort() {
        return this.clientEndpointPort;
    }
    /**
     * @return The Durability Level for this Node Type. Possible values include `Bronze`, `Gold` and `Silver`. Defaults to `Bronze`. Changing this forces a new resource to be created.
     * 
     */
    public Optional<String> durabilityLevel() {
        return Optional.ofNullable(this.durabilityLevel);
    }
    /**
     * @return A `ephemeral_ports` block as defined below.
     * 
     */
    public Optional<ClusterNodeTypeEphemeralPorts> ephemeralPorts() {
        return Optional.ofNullable(this.ephemeralPorts);
    }
    /**
     * @return The Port used for the HTTP Endpoint for this Node Type. Changing this forces a new resource to be created.
     * 
     */
    public Integer httpEndpointPort() {
        return this.httpEndpointPort;
    }
    /**
     * @return The number of nodes for this Node Type.
     * 
     */
    public Integer instanceCount() {
        return this.instanceCount;
    }
    /**
     * @return Is this the Primary Node Type? Changing this forces a new resource to be created.
     * 
     */
    public Boolean isPrimary() {
        return this.isPrimary;
    }
    /**
     * @return Should this node type run only stateless services?
     * 
     */
    public Optional<Boolean> isStateless() {
        return Optional.ofNullable(this.isStateless);
    }
    /**
     * @return Does this node type span availability zones?
     * 
     */
    public Optional<Boolean> multipleAvailabilityZones() {
        return Optional.ofNullable(this.multipleAvailabilityZones);
    }
    /**
     * @return The name of the Node Type. Changing this forces a new resource to be created.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run.
     * 
     */
    public Map<String,String> placementProperties() {
        return this.placementProperties == null ? Map.of() : this.placementProperties;
    }
    /**
     * @return The Port used for the Reverse Proxy Endpoint  for this Node Type. Changing this will upgrade the cluster.
     * 
     */
    public Optional<Integer> reverseProxyEndpointPort() {
        return Optional.ofNullable(this.reverseProxyEndpointPort);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterNodeType defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable ClusterNodeTypeApplicationPorts applicationPorts;
        private @Nullable Map<String,String> capacities;
        private Integer clientEndpointPort;
        private @Nullable String durabilityLevel;
        private @Nullable ClusterNodeTypeEphemeralPorts ephemeralPorts;
        private Integer httpEndpointPort;
        private Integer instanceCount;
        private Boolean isPrimary;
        private @Nullable Boolean isStateless;
        private @Nullable Boolean multipleAvailabilityZones;
        private String name;
        private @Nullable Map<String,String> placementProperties;
        private @Nullable Integer reverseProxyEndpointPort;

        public Builder() {
    	      // Empty
        }

        public Builder(ClusterNodeType defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationPorts = defaults.applicationPorts;
    	      this.capacities = defaults.capacities;
    	      this.clientEndpointPort = defaults.clientEndpointPort;
    	      this.durabilityLevel = defaults.durabilityLevel;
    	      this.ephemeralPorts = defaults.ephemeralPorts;
    	      this.httpEndpointPort = defaults.httpEndpointPort;
    	      this.instanceCount = defaults.instanceCount;
    	      this.isPrimary = defaults.isPrimary;
    	      this.isStateless = defaults.isStateless;
    	      this.multipleAvailabilityZones = defaults.multipleAvailabilityZones;
    	      this.name = defaults.name;
    	      this.placementProperties = defaults.placementProperties;
    	      this.reverseProxyEndpointPort = defaults.reverseProxyEndpointPort;
        }

        public Builder applicationPorts(@Nullable ClusterNodeTypeApplicationPorts applicationPorts) {
            this.applicationPorts = applicationPorts;
            return this;
        }
        public Builder capacities(@Nullable Map<String,String> capacities) {
            this.capacities = capacities;
            return this;
        }
        public Builder clientEndpointPort(Integer clientEndpointPort) {
            this.clientEndpointPort = Objects.requireNonNull(clientEndpointPort);
            return this;
        }
        public Builder durabilityLevel(@Nullable String durabilityLevel) {
            this.durabilityLevel = durabilityLevel;
            return this;
        }
        public Builder ephemeralPorts(@Nullable ClusterNodeTypeEphemeralPorts ephemeralPorts) {
            this.ephemeralPorts = ephemeralPorts;
            return this;
        }
        public Builder httpEndpointPort(Integer httpEndpointPort) {
            this.httpEndpointPort = Objects.requireNonNull(httpEndpointPort);
            return this;
        }
        public Builder instanceCount(Integer instanceCount) {
            this.instanceCount = Objects.requireNonNull(instanceCount);
            return this;
        }
        public Builder isPrimary(Boolean isPrimary) {
            this.isPrimary = Objects.requireNonNull(isPrimary);
            return this;
        }
        public Builder isStateless(@Nullable Boolean isStateless) {
            this.isStateless = isStateless;
            return this;
        }
        public Builder multipleAvailabilityZones(@Nullable Boolean multipleAvailabilityZones) {
            this.multipleAvailabilityZones = multipleAvailabilityZones;
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder placementProperties(@Nullable Map<String,String> placementProperties) {
            this.placementProperties = placementProperties;
            return this;
        }
        public Builder reverseProxyEndpointPort(@Nullable Integer reverseProxyEndpointPort) {
            this.reverseProxyEndpointPort = reverseProxyEndpointPort;
            return this;
        }        public ClusterNodeType build() {
            return new ClusterNodeType(applicationPorts, capacities, clientEndpointPort, durabilityLevel, ephemeralPorts, httpEndpointPort, instanceCount, isPrimary, isStateless, multipleAvailabilityZones, name, placementProperties, reverseProxyEndpointPort);
        }
    }
}
