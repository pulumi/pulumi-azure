// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.servicefabric.outputs;

import com.pulumi.azure.servicefabric.outputs.ClusterNodeTypeApplicationPorts;
import com.pulumi.azure.servicefabric.outputs.ClusterNodeTypeEphemeralPorts;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ClusterNodeType {
    /**
     * @return A `application_ports` block as defined below.
     * 
     */
    private @Nullable ClusterNodeTypeApplicationPorts applicationPorts;
    /**
     * @return The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has.
     * 
     */
    private @Nullable Map<String,String> capacities;
    /**
     * @return The Port used for the Client Endpoint for this Node Type.
     * 
     */
    private Integer clientEndpointPort;
    /**
     * @return The Durability Level for this Node Type. Possible values include `Bronze`, `Gold` and `Silver`. Defaults to `Bronze`.
     * 
     */
    private @Nullable String durabilityLevel;
    /**
     * @return A `ephemeral_ports` block as defined below.
     * 
     */
    private @Nullable ClusterNodeTypeEphemeralPorts ephemeralPorts;
    /**
     * @return The Port used for the HTTP Endpoint for this Node Type.
     * 
     */
    private Integer httpEndpointPort;
    /**
     * @return The number of nodes for this Node Type.
     * 
     */
    private Integer instanceCount;
    /**
     * @return Is this the Primary Node Type?
     * 
     */
    private Boolean isPrimary;
    /**
     * @return Should this node type run only stateless services?
     * 
     */
    private @Nullable Boolean isStateless;
    /**
     * @return Does this node type span availability zones?
     * 
     */
    private @Nullable Boolean multipleAvailabilityZones;
    /**
     * @return The name of the Node Type.
     * 
     */
    private String name;
    /**
     * @return The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run.
     * 
     */
    private @Nullable Map<String,String> placementProperties;
    /**
     * @return The Port used for the Reverse Proxy Endpoint for this Node Type. Changing this will upgrade the cluster.
     * 
     */
    private @Nullable Integer reverseProxyEndpointPort;

    private ClusterNodeType() {}
    /**
     * @return A `application_ports` block as defined below.
     * 
     */
    public Optional<ClusterNodeTypeApplicationPorts> applicationPorts() {
        return Optional.ofNullable(this.applicationPorts);
    }
    /**
     * @return The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has.
     * 
     */
    public Map<String,String> capacities() {
        return this.capacities == null ? Map.of() : this.capacities;
    }
    /**
     * @return The Port used for the Client Endpoint for this Node Type.
     * 
     */
    public Integer clientEndpointPort() {
        return this.clientEndpointPort;
    }
    /**
     * @return The Durability Level for this Node Type. Possible values include `Bronze`, `Gold` and `Silver`. Defaults to `Bronze`.
     * 
     */
    public Optional<String> durabilityLevel() {
        return Optional.ofNullable(this.durabilityLevel);
    }
    /**
     * @return A `ephemeral_ports` block as defined below.
     * 
     */
    public Optional<ClusterNodeTypeEphemeralPorts> ephemeralPorts() {
        return Optional.ofNullable(this.ephemeralPorts);
    }
    /**
     * @return The Port used for the HTTP Endpoint for this Node Type.
     * 
     */
    public Integer httpEndpointPort() {
        return this.httpEndpointPort;
    }
    /**
     * @return The number of nodes for this Node Type.
     * 
     */
    public Integer instanceCount() {
        return this.instanceCount;
    }
    /**
     * @return Is this the Primary Node Type?
     * 
     */
    public Boolean isPrimary() {
        return this.isPrimary;
    }
    /**
     * @return Should this node type run only stateless services?
     * 
     */
    public Optional<Boolean> isStateless() {
        return Optional.ofNullable(this.isStateless);
    }
    /**
     * @return Does this node type span availability zones?
     * 
     */
    public Optional<Boolean> multipleAvailabilityZones() {
        return Optional.ofNullable(this.multipleAvailabilityZones);
    }
    /**
     * @return The name of the Node Type.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run.
     * 
     */
    public Map<String,String> placementProperties() {
        return this.placementProperties == null ? Map.of() : this.placementProperties;
    }
    /**
     * @return The Port used for the Reverse Proxy Endpoint for this Node Type. Changing this will upgrade the cluster.
     * 
     */
    public Optional<Integer> reverseProxyEndpointPort() {
        return Optional.ofNullable(this.reverseProxyEndpointPort);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterNodeType defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable ClusterNodeTypeApplicationPorts applicationPorts;
        private @Nullable Map<String,String> capacities;
        private Integer clientEndpointPort;
        private @Nullable String durabilityLevel;
        private @Nullable ClusterNodeTypeEphemeralPorts ephemeralPorts;
        private Integer httpEndpointPort;
        private Integer instanceCount;
        private Boolean isPrimary;
        private @Nullable Boolean isStateless;
        private @Nullable Boolean multipleAvailabilityZones;
        private String name;
        private @Nullable Map<String,String> placementProperties;
        private @Nullable Integer reverseProxyEndpointPort;
        public Builder() {}
        public Builder(ClusterNodeType defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationPorts = defaults.applicationPorts;
    	      this.capacities = defaults.capacities;
    	      this.clientEndpointPort = defaults.clientEndpointPort;
    	      this.durabilityLevel = defaults.durabilityLevel;
    	      this.ephemeralPorts = defaults.ephemeralPorts;
    	      this.httpEndpointPort = defaults.httpEndpointPort;
    	      this.instanceCount = defaults.instanceCount;
    	      this.isPrimary = defaults.isPrimary;
    	      this.isStateless = defaults.isStateless;
    	      this.multipleAvailabilityZones = defaults.multipleAvailabilityZones;
    	      this.name = defaults.name;
    	      this.placementProperties = defaults.placementProperties;
    	      this.reverseProxyEndpointPort = defaults.reverseProxyEndpointPort;
        }

        @CustomType.Setter
        public Builder applicationPorts(@Nullable ClusterNodeTypeApplicationPorts applicationPorts) {

            this.applicationPorts = applicationPorts;
            return this;
        }
        @CustomType.Setter
        public Builder capacities(@Nullable Map<String,String> capacities) {

            this.capacities = capacities;
            return this;
        }
        @CustomType.Setter
        public Builder clientEndpointPort(Integer clientEndpointPort) {
            if (clientEndpointPort == null) {
              throw new MissingRequiredPropertyException("ClusterNodeType", "clientEndpointPort");
            }
            this.clientEndpointPort = clientEndpointPort;
            return this;
        }
        @CustomType.Setter
        public Builder durabilityLevel(@Nullable String durabilityLevel) {

            this.durabilityLevel = durabilityLevel;
            return this;
        }
        @CustomType.Setter
        public Builder ephemeralPorts(@Nullable ClusterNodeTypeEphemeralPorts ephemeralPorts) {

            this.ephemeralPorts = ephemeralPorts;
            return this;
        }
        @CustomType.Setter
        public Builder httpEndpointPort(Integer httpEndpointPort) {
            if (httpEndpointPort == null) {
              throw new MissingRequiredPropertyException("ClusterNodeType", "httpEndpointPort");
            }
            this.httpEndpointPort = httpEndpointPort;
            return this;
        }
        @CustomType.Setter
        public Builder instanceCount(Integer instanceCount) {
            if (instanceCount == null) {
              throw new MissingRequiredPropertyException("ClusterNodeType", "instanceCount");
            }
            this.instanceCount = instanceCount;
            return this;
        }
        @CustomType.Setter
        public Builder isPrimary(Boolean isPrimary) {
            if (isPrimary == null) {
              throw new MissingRequiredPropertyException("ClusterNodeType", "isPrimary");
            }
            this.isPrimary = isPrimary;
            return this;
        }
        @CustomType.Setter
        public Builder isStateless(@Nullable Boolean isStateless) {

            this.isStateless = isStateless;
            return this;
        }
        @CustomType.Setter
        public Builder multipleAvailabilityZones(@Nullable Boolean multipleAvailabilityZones) {

            this.multipleAvailabilityZones = multipleAvailabilityZones;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("ClusterNodeType", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder placementProperties(@Nullable Map<String,String> placementProperties) {

            this.placementProperties = placementProperties;
            return this;
        }
        @CustomType.Setter
        public Builder reverseProxyEndpointPort(@Nullable Integer reverseProxyEndpointPort) {

            this.reverseProxyEndpointPort = reverseProxyEndpointPort;
            return this;
        }
        public ClusterNodeType build() {
            final var _resultValue = new ClusterNodeType();
            _resultValue.applicationPorts = applicationPorts;
            _resultValue.capacities = capacities;
            _resultValue.clientEndpointPort = clientEndpointPort;
            _resultValue.durabilityLevel = durabilityLevel;
            _resultValue.ephemeralPorts = ephemeralPorts;
            _resultValue.httpEndpointPort = httpEndpointPort;
            _resultValue.instanceCount = instanceCount;
            _resultValue.isPrimary = isPrimary;
            _resultValue.isStateless = isStateless;
            _resultValue.multipleAvailabilityZones = multipleAvailabilityZones;
            _resultValue.name = name;
            _resultValue.placementProperties = placementProperties;
            _resultValue.reverseProxyEndpointPort = reverseProxyEndpointPort;
            return _resultValue;
        }
    }
}
