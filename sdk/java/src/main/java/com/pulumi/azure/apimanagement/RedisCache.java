// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.apimanagement;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.apimanagement.RedisCacheArgs;
import com.pulumi.azure.apimanagement.inputs.RedisCacheState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a API Management Redis Cache.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.apimanagement.Service;
 * import com.pulumi.azure.apimanagement.ServiceArgs;
 * import com.pulumi.azure.redis.Cache;
 * import com.pulumi.azure.redis.CacheArgs;
 * import com.pulumi.azure.redis.inputs.CacheRedisConfigurationArgs;
 * import com.pulumi.azure.apimanagement.RedisCache;
 * import com.pulumi.azure.apimanagement.RedisCacheArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampleResourceGroup = new ResourceGroup(&#34;exampleResourceGroup&#34;, ResourceGroupArgs.builder()        
 *             .location(&#34;West Europe&#34;)
 *             .build());
 * 
 *         var exampleService = new Service(&#34;exampleService&#34;, ServiceArgs.builder()        
 *             .location(exampleResourceGroup.location())
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .publisherName(&#34;pub1&#34;)
 *             .publisherEmail(&#34;pub1@email.com&#34;)
 *             .skuName(&#34;Consumption_0&#34;)
 *             .build());
 * 
 *         var exampleCache = new Cache(&#34;exampleCache&#34;, CacheArgs.builder()        
 *             .location(exampleResourceGroup.location())
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .capacity(1)
 *             .family(&#34;C&#34;)
 *             .skuName(&#34;Basic&#34;)
 *             .enableNonSslPort(false)
 *             .minimumTlsVersion(&#34;1.2&#34;)
 *             .redisConfiguration()
 *             .build());
 * 
 *         var exampleRedisCache = new RedisCache(&#34;exampleRedisCache&#34;, RedisCacheArgs.builder()        
 *             .apiManagementId(exampleService.id())
 *             .connectionString(exampleCache.primaryConnectionString())
 *             .description(&#34;Redis cache instances&#34;)
 *             .redisCacheId(exampleCache.id())
 *             .cacheLocation(&#34;East Us&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * API Management Redis Caches can be imported using the `resource id`, e.g.
 * 
 * ```sh
 *  $ pulumi import azure:apimanagement/redisCache:RedisCache example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.ApiManagement/service/service1/caches/cache1
 * ```
 * 
 */
@ResourceType(type="azure:apimanagement/redisCache:RedisCache")
public class RedisCache extends com.pulumi.resources.CustomResource {
    /**
     * The resource ID of the API Management Service from which to create this external cache. Changing this forces a new API Management Redis Cache to be created.
     * 
     */
    @Export(name="apiManagementId", refs={String.class}, tree="[0]")
    private Output<String> apiManagementId;

    /**
     * @return The resource ID of the API Management Service from which to create this external cache. Changing this forces a new API Management Redis Cache to be created.
     * 
     */
    public Output<String> apiManagementId() {
        return this.apiManagementId;
    }
    /**
     * The location where to use cache from. Possible values are `default` and valid Azure regions. Defaults to `default`.
     * 
     */
    @Export(name="cacheLocation", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> cacheLocation;

    /**
     * @return The location where to use cache from. Possible values are `default` and valid Azure regions. Defaults to `default`.
     * 
     */
    public Output<Optional<String>> cacheLocation() {
        return Codegen.optional(this.cacheLocation);
    }
    /**
     * The connection string to the Cache for Redis.
     * 
     */
    @Export(name="connectionString", refs={String.class}, tree="[0]")
    private Output<String> connectionString;

    /**
     * @return The connection string to the Cache for Redis.
     * 
     */
    public Output<String> connectionString() {
        return this.connectionString;
    }
    /**
     * The description of the API Management Redis Cache.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return The description of the API Management Redis Cache.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * The name which should be used for this API Management Redis Cache. Changing this forces a new API Management Redis Cache to be created.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name which should be used for this API Management Redis Cache. Changing this forces a new API Management Redis Cache to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The resource ID of the Cache for Redis.
     * 
     */
    @Export(name="redisCacheId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> redisCacheId;

    /**
     * @return The resource ID of the Cache for Redis.
     * 
     */
    public Output<Optional<String>> redisCacheId() {
        return Codegen.optional(this.redisCacheId);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public RedisCache(String name) {
        this(name, RedisCacheArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public RedisCache(String name, RedisCacheArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public RedisCache(String name, RedisCacheArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:apimanagement/redisCache:RedisCache", name, args == null ? RedisCacheArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private RedisCache(String name, Output<String> id, @Nullable RedisCacheState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:apimanagement/redisCache:RedisCache", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "connectionString"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static RedisCache get(String name, Output<String> id, @Nullable RedisCacheState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new RedisCache(name, id, state, options);
    }
}
