// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.logicapps;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.logicapps.ActionHttpArgs;
import com.pulumi.azure.logicapps.inputs.ActionHttpState;
import com.pulumi.azure.logicapps.outputs.ActionHttpRunAfter;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages an HTTP Action within a Logic App Workflow
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.logicapps.Workflow;
 * import com.pulumi.azure.logicapps.WorkflowArgs;
 * import com.pulumi.azure.logicapps.ActionHttp;
 * import com.pulumi.azure.logicapps.ActionHttpArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new ResourceGroup("example", ResourceGroupArgs.builder()
 *             .name("workflow-resources")
 *             .location("West Europe")
 *             .build());
 * 
 *         var exampleWorkflow = new Workflow("exampleWorkflow", WorkflowArgs.builder()
 *             .name("workflow1")
 *             .location(example.location())
 *             .resourceGroupName(example.name())
 *             .build());
 * 
 *         var exampleActionHttp = new ActionHttp("exampleActionHttp", ActionHttpArgs.builder()
 *             .name("webhook")
 *             .logicAppId(exampleWorkflow.id())
 *             .method("GET")
 *             .uri("http://example.com/some-webhook")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * Logic App HTTP Actions can be imported using the `resource id`, e.g.
 * 
 * ```sh
 * $ pulumi import azure:logicapps/actionHttp:ActionHttp webhook1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Logic/workflows/workflow1/actions/webhook1
 * ```
 * 
 */
@ResourceType(type="azure:logicapps/actionHttp:ActionHttp")
public class ActionHttp extends com.pulumi.resources.CustomResource {
    /**
     * Specifies the HTTP Body that should be sent to the `uri` when this HTTP Action is triggered.
     * 
     */
    @Export(name="body", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> body;

    /**
     * @return Specifies the HTTP Body that should be sent to the `uri` when this HTTP Action is triggered.
     * 
     */
    public Output<Optional<String>> body() {
        return Codegen.optional(this.body);
    }
    /**
     * Specifies a Map of Key-Value Pairs that should be sent to the `uri` when this HTTP Action is triggered.
     * 
     */
    @Export(name="headers", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> headers;

    /**
     * @return Specifies a Map of Key-Value Pairs that should be sent to the `uri` when this HTTP Action is triggered.
     * 
     */
    public Output<Optional<Map<String,String>>> headers() {
        return Codegen.optional(this.headers);
    }
    /**
     * Specifies the ID of the Logic App Workflow. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="logicAppId", refs={String.class}, tree="[0]")
    private Output<String> logicAppId;

    /**
     * @return Specifies the ID of the Logic App Workflow. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> logicAppId() {
        return this.logicAppId;
    }
    /**
     * Specifies the HTTP Method which should be used for this HTTP Action. Possible values include `DELETE`, `GET`, `PATCH`, `POST` and `PUT`.
     * 
     */
    @Export(name="method", refs={String.class}, tree="[0]")
    private Output<String> method;

    /**
     * @return Specifies the HTTP Method which should be used for this HTTP Action. Possible values include `DELETE`, `GET`, `PATCH`, `POST` and `PUT`.
     * 
     */
    public Output<String> method() {
        return this.method;
    }
    /**
     * Specifies the name of the HTTP Action to be created within the Logic App Workflow. Changing this forces a new resource to be created.
     * 
     * &gt; **NOTE:** This name must be unique across all Actions within the Logic App Workflow.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Specifies the name of the HTTP Action to be created within the Logic App Workflow. Changing this forces a new resource to be created.
     * 
     * &gt; **NOTE:** This name must be unique across all Actions within the Logic App Workflow.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Specifies a Map of Key-Value Pairs that should be sent to the `uri` when this HTTP Action is triggered.
     * 
     */
    @Export(name="queries", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> queries;

    /**
     * @return Specifies a Map of Key-Value Pairs that should be sent to the `uri` when this HTTP Action is triggered.
     * 
     */
    public Output<Optional<Map<String,String>>> queries() {
        return Codegen.optional(this.queries);
    }
    /**
     * Specifies the place of the HTTP Action in the Logic App Workflow. If not specified, the HTTP Action is right after the Trigger. A `run_after` block is as defined below.
     * 
     */
    @Export(name="runAfters", refs={List.class,ActionHttpRunAfter.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ActionHttpRunAfter>> runAfters;

    /**
     * @return Specifies the place of the HTTP Action in the Logic App Workflow. If not specified, the HTTP Action is right after the Trigger. A `run_after` block is as defined below.
     * 
     */
    public Output<Optional<List<ActionHttpRunAfter>>> runAfters() {
        return Codegen.optional(this.runAfters);
    }
    /**
     * Specifies the URI which will be called when this HTTP Action is triggered.
     * 
     */
    @Export(name="uri", refs={String.class}, tree="[0]")
    private Output<String> uri;

    /**
     * @return Specifies the URI which will be called when this HTTP Action is triggered.
     * 
     */
    public Output<String> uri() {
        return this.uri;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ActionHttp(java.lang.String name) {
        this(name, ActionHttpArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ActionHttp(java.lang.String name, ActionHttpArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ActionHttp(java.lang.String name, ActionHttpArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:logicapps/actionHttp:ActionHttp", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private ActionHttp(java.lang.String name, Output<java.lang.String> id, @Nullable ActionHttpState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:logicapps/actionHttp:ActionHttp", name, state, makeResourceOptions(options, id), false);
    }

    private static ActionHttpArgs makeArgs(ActionHttpArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ActionHttpArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ActionHttp get(java.lang.String name, Output<java.lang.String> id, @Nullable ActionHttpState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ActionHttp(name, id, state, options);
    }
}
