// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.keyvault.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class KeyVaultAccessPolicy {
    /**
     * @return The object ID of an Application in Azure Active Directory.
     * 
     */
    private @Nullable String applicationId;
    /**
     * @return List of certificate permissions, must be one or more from the following: `Backup`, `Create`, `Delete`, `DeleteIssuers`, `Get`, `GetIssuers`, `Import`, `List`, `ListIssuers`, `ManageContacts`, `ManageIssuers`, `Purge`, `Recover`, `Restore`, `SetIssuers` and `Update`.
     * 
     */
    private @Nullable List<String> certificatePermissions;
    /**
     * @return List of key permissions. Possible values are `Backup`, `Create`, `Decrypt`, `Delete`, `Encrypt`, `Get`, `Import`, `List`, `Purge`, `Recover`, `Restore`, `Sign`, `UnwrapKey`, `Update`, `Verify`, `WrapKey`, `Release`, `Rotate`, `GetRotationPolicy` and `SetRotationPolicy`.
     * 
     */
    private @Nullable List<String> keyPermissions;
    /**
     * @return The object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies.
     * 
     */
    private String objectId;
    /**
     * @return List of secret permissions, must be one or more from the following: `Backup`, `Delete`, `Get`, `List`, `Purge`, `Recover`, `Restore` and `Set`.
     * 
     */
    private @Nullable List<String> secretPermissions;
    /**
     * @return List of storage permissions, must be one or more from the following: `Backup`, `Delete`, `DeleteSAS`, `Get`, `GetSAS`, `List`, `ListSAS`, `Purge`, `Recover`, `RegenerateKey`, `Restore`, `Set`, `SetSAS` and `Update`.
     * 
     */
    private @Nullable List<String> storagePermissions;
    /**
     * @return The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault. Must match the `tenant_id` used above.
     * 
     */
    private String tenantId;

    private KeyVaultAccessPolicy() {}
    /**
     * @return The object ID of an Application in Azure Active Directory.
     * 
     */
    public Optional<String> applicationId() {
        return Optional.ofNullable(this.applicationId);
    }
    /**
     * @return List of certificate permissions, must be one or more from the following: `Backup`, `Create`, `Delete`, `DeleteIssuers`, `Get`, `GetIssuers`, `Import`, `List`, `ListIssuers`, `ManageContacts`, `ManageIssuers`, `Purge`, `Recover`, `Restore`, `SetIssuers` and `Update`.
     * 
     */
    public List<String> certificatePermissions() {
        return this.certificatePermissions == null ? List.of() : this.certificatePermissions;
    }
    /**
     * @return List of key permissions. Possible values are `Backup`, `Create`, `Decrypt`, `Delete`, `Encrypt`, `Get`, `Import`, `List`, `Purge`, `Recover`, `Restore`, `Sign`, `UnwrapKey`, `Update`, `Verify`, `WrapKey`, `Release`, `Rotate`, `GetRotationPolicy` and `SetRotationPolicy`.
     * 
     */
    public List<String> keyPermissions() {
        return this.keyPermissions == null ? List.of() : this.keyPermissions;
    }
    /**
     * @return The object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies.
     * 
     */
    public String objectId() {
        return this.objectId;
    }
    /**
     * @return List of secret permissions, must be one or more from the following: `Backup`, `Delete`, `Get`, `List`, `Purge`, `Recover`, `Restore` and `Set`.
     * 
     */
    public List<String> secretPermissions() {
        return this.secretPermissions == null ? List.of() : this.secretPermissions;
    }
    /**
     * @return List of storage permissions, must be one or more from the following: `Backup`, `Delete`, `DeleteSAS`, `Get`, `GetSAS`, `List`, `ListSAS`, `Purge`, `Recover`, `RegenerateKey`, `Restore`, `Set`, `SetSAS` and `Update`.
     * 
     */
    public List<String> storagePermissions() {
        return this.storagePermissions == null ? List.of() : this.storagePermissions;
    }
    /**
     * @return The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault. Must match the `tenant_id` used above.
     * 
     */
    public String tenantId() {
        return this.tenantId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(KeyVaultAccessPolicy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String applicationId;
        private @Nullable List<String> certificatePermissions;
        private @Nullable List<String> keyPermissions;
        private String objectId;
        private @Nullable List<String> secretPermissions;
        private @Nullable List<String> storagePermissions;
        private String tenantId;
        public Builder() {}
        public Builder(KeyVaultAccessPolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationId = defaults.applicationId;
    	      this.certificatePermissions = defaults.certificatePermissions;
    	      this.keyPermissions = defaults.keyPermissions;
    	      this.objectId = defaults.objectId;
    	      this.secretPermissions = defaults.secretPermissions;
    	      this.storagePermissions = defaults.storagePermissions;
    	      this.tenantId = defaults.tenantId;
        }

        @CustomType.Setter
        public Builder applicationId(@Nullable String applicationId) {

            this.applicationId = applicationId;
            return this;
        }
        @CustomType.Setter
        public Builder certificatePermissions(@Nullable List<String> certificatePermissions) {

            this.certificatePermissions = certificatePermissions;
            return this;
        }
        public Builder certificatePermissions(String... certificatePermissions) {
            return certificatePermissions(List.of(certificatePermissions));
        }
        @CustomType.Setter
        public Builder keyPermissions(@Nullable List<String> keyPermissions) {

            this.keyPermissions = keyPermissions;
            return this;
        }
        public Builder keyPermissions(String... keyPermissions) {
            return keyPermissions(List.of(keyPermissions));
        }
        @CustomType.Setter
        public Builder objectId(String objectId) {
            if (objectId == null) {
              throw new MissingRequiredPropertyException("KeyVaultAccessPolicy", "objectId");
            }
            this.objectId = objectId;
            return this;
        }
        @CustomType.Setter
        public Builder secretPermissions(@Nullable List<String> secretPermissions) {

            this.secretPermissions = secretPermissions;
            return this;
        }
        public Builder secretPermissions(String... secretPermissions) {
            return secretPermissions(List.of(secretPermissions));
        }
        @CustomType.Setter
        public Builder storagePermissions(@Nullable List<String> storagePermissions) {

            this.storagePermissions = storagePermissions;
            return this;
        }
        public Builder storagePermissions(String... storagePermissions) {
            return storagePermissions(List.of(storagePermissions));
        }
        @CustomType.Setter
        public Builder tenantId(String tenantId) {
            if (tenantId == null) {
              throw new MissingRequiredPropertyException("KeyVaultAccessPolicy", "tenantId");
            }
            this.tenantId = tenantId;
            return this;
        }
        public KeyVaultAccessPolicy build() {
            final var _resultValue = new KeyVaultAccessPolicy();
            _resultValue.applicationId = applicationId;
            _resultValue.certificatePermissions = certificatePermissions;
            _resultValue.keyPermissions = keyPermissions;
            _resultValue.objectId = objectId;
            _resultValue.secretPermissions = secretPermissions;
            _resultValue.storagePermissions = storagePermissions;
            _resultValue.tenantId = tenantId;
            return _resultValue;
        }
    }
}
