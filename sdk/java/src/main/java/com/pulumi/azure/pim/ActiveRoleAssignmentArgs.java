// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.pim;

import com.pulumi.azure.pim.inputs.ActiveRoleAssignmentScheduleArgs;
import com.pulumi.azure.pim.inputs.ActiveRoleAssignmentTicketArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ActiveRoleAssignmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final ActiveRoleAssignmentArgs Empty = new ActiveRoleAssignmentArgs();

    /**
     * The justification for the role assignment. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="justification")
    private @Nullable Output<String> justification;

    /**
     * @return The justification for the role assignment. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> justification() {
        return Optional.ofNullable(this.justification);
    }

    /**
     * Object ID of the principal for this role assignment. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="principalId", required=true)
    private Output<String> principalId;

    /**
     * @return Object ID of the principal for this role assignment. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> principalId() {
        return this.principalId;
    }

    /**
     * The role definition ID for this role assignment. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="roleDefinitionId", required=true)
    private Output<String> roleDefinitionId;

    /**
     * @return The role definition ID for this role assignment. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> roleDefinitionId() {
        return this.roleDefinitionId;
    }

    /**
     * A `schedule` block as defined below. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="schedule")
    private @Nullable Output<ActiveRoleAssignmentScheduleArgs> schedule;

    /**
     * @return A `schedule` block as defined below. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<ActiveRoleAssignmentScheduleArgs>> schedule() {
        return Optional.ofNullable(this.schedule);
    }

    /**
     * The scope for this role assignment, should be a valid resource ID. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="scope", required=true)
    private Output<String> scope;

    /**
     * @return The scope for this role assignment, should be a valid resource ID. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> scope() {
        return this.scope;
    }

    /**
     * A `ticket` block as defined below. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="ticket")
    private @Nullable Output<ActiveRoleAssignmentTicketArgs> ticket;

    /**
     * @return A `ticket` block as defined below. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<ActiveRoleAssignmentTicketArgs>> ticket() {
        return Optional.ofNullable(this.ticket);
    }

    private ActiveRoleAssignmentArgs() {}

    private ActiveRoleAssignmentArgs(ActiveRoleAssignmentArgs $) {
        this.justification = $.justification;
        this.principalId = $.principalId;
        this.roleDefinitionId = $.roleDefinitionId;
        this.schedule = $.schedule;
        this.scope = $.scope;
        this.ticket = $.ticket;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ActiveRoleAssignmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ActiveRoleAssignmentArgs $;

        public Builder() {
            $ = new ActiveRoleAssignmentArgs();
        }

        public Builder(ActiveRoleAssignmentArgs defaults) {
            $ = new ActiveRoleAssignmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param justification The justification for the role assignment. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder justification(@Nullable Output<String> justification) {
            $.justification = justification;
            return this;
        }

        /**
         * @param justification The justification for the role assignment. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder justification(String justification) {
            return justification(Output.of(justification));
        }

        /**
         * @param principalId Object ID of the principal for this role assignment. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder principalId(Output<String> principalId) {
            $.principalId = principalId;
            return this;
        }

        /**
         * @param principalId Object ID of the principal for this role assignment. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder principalId(String principalId) {
            return principalId(Output.of(principalId));
        }

        /**
         * @param roleDefinitionId The role definition ID for this role assignment. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder roleDefinitionId(Output<String> roleDefinitionId) {
            $.roleDefinitionId = roleDefinitionId;
            return this;
        }

        /**
         * @param roleDefinitionId The role definition ID for this role assignment. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder roleDefinitionId(String roleDefinitionId) {
            return roleDefinitionId(Output.of(roleDefinitionId));
        }

        /**
         * @param schedule A `schedule` block as defined below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder schedule(@Nullable Output<ActiveRoleAssignmentScheduleArgs> schedule) {
            $.schedule = schedule;
            return this;
        }

        /**
         * @param schedule A `schedule` block as defined below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder schedule(ActiveRoleAssignmentScheduleArgs schedule) {
            return schedule(Output.of(schedule));
        }

        /**
         * @param scope The scope for this role assignment, should be a valid resource ID. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder scope(Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope The scope for this role assignment, should be a valid resource ID. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param ticket A `ticket` block as defined below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder ticket(@Nullable Output<ActiveRoleAssignmentTicketArgs> ticket) {
            $.ticket = ticket;
            return this;
        }

        /**
         * @param ticket A `ticket` block as defined below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder ticket(ActiveRoleAssignmentTicketArgs ticket) {
            return ticket(Output.of(ticket));
        }

        public ActiveRoleAssignmentArgs build() {
            if ($.principalId == null) {
                throw new MissingRequiredPropertyException("ActiveRoleAssignmentArgs", "principalId");
            }
            if ($.roleDefinitionId == null) {
                throw new MissingRequiredPropertyException("ActiveRoleAssignmentArgs", "roleDefinitionId");
            }
            if ($.scope == null) {
                throw new MissingRequiredPropertyException("ActiveRoleAssignmentArgs", "scope");
            }
            return $;
        }
    }

}
