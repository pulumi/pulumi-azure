// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.monitoring.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ActionRuleSuppressionSuppressionScheduleArgs extends com.pulumi.resources.ResourceArgs {

    public static final ActionRuleSuppressionSuppressionScheduleArgs Empty = new ActionRuleSuppressionSuppressionScheduleArgs();

    /**
     * specifies the recurrence UTC end datetime (Y-m-d&#39;T&#39;H:M:S&#39;Z&#39;).
     * 
     */
    @Import(name="endDateUtc", required=true)
    private Output<String> endDateUtc;

    /**
     * @return specifies the recurrence UTC end datetime (Y-m-d&#39;T&#39;H:M:S&#39;Z&#39;).
     * 
     */
    public Output<String> endDateUtc() {
        return this.endDateUtc;
    }

    /**
     * specifies the list of dayOfMonth to recurrence. Possible values are between `1` - `31`. Required if `recurrence_type` is `Monthly`.
     * 
     */
    @Import(name="recurrenceMonthlies")
    private @Nullable Output<List<Integer>> recurrenceMonthlies;

    /**
     * @return specifies the list of dayOfMonth to recurrence. Possible values are between `1` - `31`. Required if `recurrence_type` is `Monthly`.
     * 
     */
    public Optional<Output<List<Integer>>> recurrenceMonthlies() {
        return Optional.ofNullable(this.recurrenceMonthlies);
    }

    /**
     * specifies the list of dayOfWeek to recurrence. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` and `Saturday`.
     * 
     */
    @Import(name="recurrenceWeeklies")
    private @Nullable Output<List<String>> recurrenceWeeklies;

    /**
     * @return specifies the list of dayOfWeek to recurrence. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` and `Saturday`.
     * 
     */
    public Optional<Output<List<String>>> recurrenceWeeklies() {
        return Optional.ofNullable(this.recurrenceWeeklies);
    }

    /**
     * specifies the recurrence UTC start datetime (Y-m-d&#39;T&#39;H:M:S&#39;Z&#39;).
     * 
     */
    @Import(name="startDateUtc", required=true)
    private Output<String> startDateUtc;

    /**
     * @return specifies the recurrence UTC start datetime (Y-m-d&#39;T&#39;H:M:S&#39;Z&#39;).
     * 
     */
    public Output<String> startDateUtc() {
        return this.startDateUtc;
    }

    private ActionRuleSuppressionSuppressionScheduleArgs() {}

    private ActionRuleSuppressionSuppressionScheduleArgs(ActionRuleSuppressionSuppressionScheduleArgs $) {
        this.endDateUtc = $.endDateUtc;
        this.recurrenceMonthlies = $.recurrenceMonthlies;
        this.recurrenceWeeklies = $.recurrenceWeeklies;
        this.startDateUtc = $.startDateUtc;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ActionRuleSuppressionSuppressionScheduleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ActionRuleSuppressionSuppressionScheduleArgs $;

        public Builder() {
            $ = new ActionRuleSuppressionSuppressionScheduleArgs();
        }

        public Builder(ActionRuleSuppressionSuppressionScheduleArgs defaults) {
            $ = new ActionRuleSuppressionSuppressionScheduleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param endDateUtc specifies the recurrence UTC end datetime (Y-m-d&#39;T&#39;H:M:S&#39;Z&#39;).
         * 
         * @return builder
         * 
         */
        public Builder endDateUtc(Output<String> endDateUtc) {
            $.endDateUtc = endDateUtc;
            return this;
        }

        /**
         * @param endDateUtc specifies the recurrence UTC end datetime (Y-m-d&#39;T&#39;H:M:S&#39;Z&#39;).
         * 
         * @return builder
         * 
         */
        public Builder endDateUtc(String endDateUtc) {
            return endDateUtc(Output.of(endDateUtc));
        }

        /**
         * @param recurrenceMonthlies specifies the list of dayOfMonth to recurrence. Possible values are between `1` - `31`. Required if `recurrence_type` is `Monthly`.
         * 
         * @return builder
         * 
         */
        public Builder recurrenceMonthlies(@Nullable Output<List<Integer>> recurrenceMonthlies) {
            $.recurrenceMonthlies = recurrenceMonthlies;
            return this;
        }

        /**
         * @param recurrenceMonthlies specifies the list of dayOfMonth to recurrence. Possible values are between `1` - `31`. Required if `recurrence_type` is `Monthly`.
         * 
         * @return builder
         * 
         */
        public Builder recurrenceMonthlies(List<Integer> recurrenceMonthlies) {
            return recurrenceMonthlies(Output.of(recurrenceMonthlies));
        }

        /**
         * @param recurrenceMonthlies specifies the list of dayOfMonth to recurrence. Possible values are between `1` - `31`. Required if `recurrence_type` is `Monthly`.
         * 
         * @return builder
         * 
         */
        public Builder recurrenceMonthlies(Integer... recurrenceMonthlies) {
            return recurrenceMonthlies(List.of(recurrenceMonthlies));
        }

        /**
         * @param recurrenceWeeklies specifies the list of dayOfWeek to recurrence. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` and `Saturday`.
         * 
         * @return builder
         * 
         */
        public Builder recurrenceWeeklies(@Nullable Output<List<String>> recurrenceWeeklies) {
            $.recurrenceWeeklies = recurrenceWeeklies;
            return this;
        }

        /**
         * @param recurrenceWeeklies specifies the list of dayOfWeek to recurrence. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` and `Saturday`.
         * 
         * @return builder
         * 
         */
        public Builder recurrenceWeeklies(List<String> recurrenceWeeklies) {
            return recurrenceWeeklies(Output.of(recurrenceWeeklies));
        }

        /**
         * @param recurrenceWeeklies specifies the list of dayOfWeek to recurrence. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` and `Saturday`.
         * 
         * @return builder
         * 
         */
        public Builder recurrenceWeeklies(String... recurrenceWeeklies) {
            return recurrenceWeeklies(List.of(recurrenceWeeklies));
        }

        /**
         * @param startDateUtc specifies the recurrence UTC start datetime (Y-m-d&#39;T&#39;H:M:S&#39;Z&#39;).
         * 
         * @return builder
         * 
         */
        public Builder startDateUtc(Output<String> startDateUtc) {
            $.startDateUtc = startDateUtc;
            return this;
        }

        /**
         * @param startDateUtc specifies the recurrence UTC start datetime (Y-m-d&#39;T&#39;H:M:S&#39;Z&#39;).
         * 
         * @return builder
         * 
         */
        public Builder startDateUtc(String startDateUtc) {
            return startDateUtc(Output.of(startDateUtc));
        }

        public ActionRuleSuppressionSuppressionScheduleArgs build() {
            if ($.endDateUtc == null) {
                throw new MissingRequiredPropertyException("ActionRuleSuppressionSuppressionScheduleArgs", "endDateUtc");
            }
            if ($.startDateUtc == null) {
                throw new MissingRequiredPropertyException("ActionRuleSuppressionSuppressionScheduleArgs", "startDateUtc");
            }
            return $;
        }
    }

}
