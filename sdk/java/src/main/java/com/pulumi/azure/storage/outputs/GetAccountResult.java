// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.storage.outputs;

import com.pulumi.azure.storage.outputs.GetAccountCustomDomain;
import com.pulumi.azure.storage.outputs.GetAccountIdentity;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetAccountResult {
    /**
     * @return The access tier for `BlobStorage` accounts.
     * 
     */
    private final String accessTier;
    /**
     * @return The Kind of account.
     * 
     */
    private final String accountKind;
    /**
     * @return The type of replication used for this storage account.
     * 
     */
    private final String accountReplicationType;
    /**
     * @return The Tier of this storage account.
     * 
     */
    private final String accountTier;
    /**
     * @return Can nested items in the storage account opt into allowing public access?
     * 
     */
    private final Boolean allowNestedItemsToBePublic;
    /**
     * @return A `custom_domain` block as documented below.
     * 
     */
    private final List<GetAccountCustomDomain> customDomains;
    /**
     * @return Is traffic only allowed via HTTPS? See [here](https://docs.microsoft.com/azure/storage/storage-require-secure-transfer/)
     * for more information.
     * 
     */
    private final Boolean enableHttpsTrafficOnly;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * @return An `identity` block as documented below.
     * 
     */
    private final List<GetAccountIdentity> identities;
    /**
     * @return Is infrastructure encryption enabled? See [here](https://docs.microsoft.com/azure/storage/common/infrastructure-encryption-enable/)
     * for more information.
     * ---
     * 
     */
    private final Boolean infrastructureEncryptionEnabled;
    /**
     * @return Is Hierarchical Namespace enabled?
     * 
     */
    private final Boolean isHnsEnabled;
    /**
     * @return The Azure location where the Storage Account exists
     * 
     */
    private final String location;
    /**
     * @return The minimum supported TLS version for this storage account.
     * 
     */
    private final @Nullable String minTlsVersion;
    /**
     * @return The Custom Domain Name used for the Storage Account.
     * 
     */
    private final String name;
    /**
     * @return Is NFSv3 protocol enabled?
     * 
     */
    private final Boolean nfsv3Enabled;
    /**
     * @return The primary access key for the Storage Account.
     * 
     */
    private final String primaryAccessKey;
    /**
     * @return The connection string associated with the primary blob location
     * 
     */
    private final String primaryBlobConnectionString;
    /**
     * @return The endpoint URL for blob storage in the primary location.
     * 
     */
    private final String primaryBlobEndpoint;
    /**
     * @return The hostname with port if applicable for blob storage in the primary location.
     * 
     */
    private final String primaryBlobHost;
    /**
     * @return The connection string associated with the primary location
     * 
     */
    private final String primaryConnectionString;
    /**
     * @return The endpoint URL for DFS storage in the primary location.
     * 
     */
    private final String primaryDfsEndpoint;
    /**
     * @return The hostname with port if applicable for DFS storage in the primary location.
     * 
     */
    private final String primaryDfsHost;
    /**
     * @return The endpoint URL for file storage in the primary location.
     * 
     */
    private final String primaryFileEndpoint;
    /**
     * @return The hostname with port if applicable for file storage in the primary location.
     * 
     */
    private final String primaryFileHost;
    /**
     * @return The primary location of the Storage Account.
     * 
     */
    private final String primaryLocation;
    /**
     * @return The endpoint URL for queue storage in the primary location.
     * 
     */
    private final String primaryQueueEndpoint;
    /**
     * @return The hostname with port if applicable for queue storage in the primary location.
     * 
     */
    private final String primaryQueueHost;
    /**
     * @return The endpoint URL for table storage in the primary location.
     * 
     */
    private final String primaryTableEndpoint;
    /**
     * @return The hostname with port if applicable for table storage in the primary location.
     * 
     */
    private final String primaryTableHost;
    /**
     * @return The endpoint URL for web storage in the primary location.
     * 
     */
    private final String primaryWebEndpoint;
    /**
     * @return The hostname with port if applicable for web storage in the primary location.
     * 
     */
    private final String primaryWebHost;
    /**
     * @return The encryption key type of the queue.
     * 
     */
    private final String queueEncryptionKeyType;
    private final @Nullable String resourceGroupName;
    /**
     * @return The secondary access key for the Storage Account.
     * 
     */
    private final String secondaryAccessKey;
    /**
     * @return The connection string associated with the secondary blob location
     * 
     */
    private final String secondaryBlobConnectionString;
    /**
     * @return The endpoint URL for blob storage in the secondary location.
     * 
     */
    private final String secondaryBlobEndpoint;
    /**
     * @return The hostname with port if applicable for blob storage in the secondary location.
     * 
     */
    private final String secondaryBlobHost;
    /**
     * @return The connection string associated with the secondary location
     * 
     */
    private final String secondaryConnectionString;
    /**
     * @return The endpoint URL for DFS storage in the secondary location.
     * 
     */
    private final String secondaryDfsEndpoint;
    /**
     * @return The hostname with port if applicable for DFS storage in the secondary location.
     * 
     */
    private final String secondaryDfsHost;
    /**
     * @return The endpoint URL for file storage in the secondary location.
     * 
     */
    private final String secondaryFileEndpoint;
    /**
     * @return The hostname with port if applicable for file storage in the secondary location.
     * 
     */
    private final String secondaryFileHost;
    /**
     * @return The secondary location of the Storage Account.
     * 
     */
    private final String secondaryLocation;
    /**
     * @return The endpoint URL for queue storage in the secondary location.
     * 
     */
    private final String secondaryQueueEndpoint;
    /**
     * @return The hostname with port if applicable for queue storage in the secondary location.
     * 
     */
    private final String secondaryQueueHost;
    /**
     * @return The endpoint URL for table storage in the secondary location.
     * 
     */
    private final String secondaryTableEndpoint;
    /**
     * @return The hostname with port if applicable for table storage in the secondary location.
     * 
     */
    private final String secondaryTableHost;
    /**
     * @return The endpoint URL for web storage in the secondary location.
     * 
     */
    private final String secondaryWebEndpoint;
    /**
     * @return The hostname with port if applicable for web storage in the secondary location.
     * 
     */
    private final String secondaryWebHost;
    /**
     * @return The encryption key type of the table.
     * 
     */
    private final String tableEncryptionKeyType;
    /**
     * @return A mapping of tags to assigned to the resource.
     * 
     */
    private final Map<String,String> tags;

    @CustomType.Constructor
    private GetAccountResult(
        @CustomType.Parameter("accessTier") String accessTier,
        @CustomType.Parameter("accountKind") String accountKind,
        @CustomType.Parameter("accountReplicationType") String accountReplicationType,
        @CustomType.Parameter("accountTier") String accountTier,
        @CustomType.Parameter("allowNestedItemsToBePublic") Boolean allowNestedItemsToBePublic,
        @CustomType.Parameter("customDomains") List<GetAccountCustomDomain> customDomains,
        @CustomType.Parameter("enableHttpsTrafficOnly") Boolean enableHttpsTrafficOnly,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("identities") List<GetAccountIdentity> identities,
        @CustomType.Parameter("infrastructureEncryptionEnabled") Boolean infrastructureEncryptionEnabled,
        @CustomType.Parameter("isHnsEnabled") Boolean isHnsEnabled,
        @CustomType.Parameter("location") String location,
        @CustomType.Parameter("minTlsVersion") @Nullable String minTlsVersion,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("nfsv3Enabled") Boolean nfsv3Enabled,
        @CustomType.Parameter("primaryAccessKey") String primaryAccessKey,
        @CustomType.Parameter("primaryBlobConnectionString") String primaryBlobConnectionString,
        @CustomType.Parameter("primaryBlobEndpoint") String primaryBlobEndpoint,
        @CustomType.Parameter("primaryBlobHost") String primaryBlobHost,
        @CustomType.Parameter("primaryConnectionString") String primaryConnectionString,
        @CustomType.Parameter("primaryDfsEndpoint") String primaryDfsEndpoint,
        @CustomType.Parameter("primaryDfsHost") String primaryDfsHost,
        @CustomType.Parameter("primaryFileEndpoint") String primaryFileEndpoint,
        @CustomType.Parameter("primaryFileHost") String primaryFileHost,
        @CustomType.Parameter("primaryLocation") String primaryLocation,
        @CustomType.Parameter("primaryQueueEndpoint") String primaryQueueEndpoint,
        @CustomType.Parameter("primaryQueueHost") String primaryQueueHost,
        @CustomType.Parameter("primaryTableEndpoint") String primaryTableEndpoint,
        @CustomType.Parameter("primaryTableHost") String primaryTableHost,
        @CustomType.Parameter("primaryWebEndpoint") String primaryWebEndpoint,
        @CustomType.Parameter("primaryWebHost") String primaryWebHost,
        @CustomType.Parameter("queueEncryptionKeyType") String queueEncryptionKeyType,
        @CustomType.Parameter("resourceGroupName") @Nullable String resourceGroupName,
        @CustomType.Parameter("secondaryAccessKey") String secondaryAccessKey,
        @CustomType.Parameter("secondaryBlobConnectionString") String secondaryBlobConnectionString,
        @CustomType.Parameter("secondaryBlobEndpoint") String secondaryBlobEndpoint,
        @CustomType.Parameter("secondaryBlobHost") String secondaryBlobHost,
        @CustomType.Parameter("secondaryConnectionString") String secondaryConnectionString,
        @CustomType.Parameter("secondaryDfsEndpoint") String secondaryDfsEndpoint,
        @CustomType.Parameter("secondaryDfsHost") String secondaryDfsHost,
        @CustomType.Parameter("secondaryFileEndpoint") String secondaryFileEndpoint,
        @CustomType.Parameter("secondaryFileHost") String secondaryFileHost,
        @CustomType.Parameter("secondaryLocation") String secondaryLocation,
        @CustomType.Parameter("secondaryQueueEndpoint") String secondaryQueueEndpoint,
        @CustomType.Parameter("secondaryQueueHost") String secondaryQueueHost,
        @CustomType.Parameter("secondaryTableEndpoint") String secondaryTableEndpoint,
        @CustomType.Parameter("secondaryTableHost") String secondaryTableHost,
        @CustomType.Parameter("secondaryWebEndpoint") String secondaryWebEndpoint,
        @CustomType.Parameter("secondaryWebHost") String secondaryWebHost,
        @CustomType.Parameter("tableEncryptionKeyType") String tableEncryptionKeyType,
        @CustomType.Parameter("tags") Map<String,String> tags) {
        this.accessTier = accessTier;
        this.accountKind = accountKind;
        this.accountReplicationType = accountReplicationType;
        this.accountTier = accountTier;
        this.allowNestedItemsToBePublic = allowNestedItemsToBePublic;
        this.customDomains = customDomains;
        this.enableHttpsTrafficOnly = enableHttpsTrafficOnly;
        this.id = id;
        this.identities = identities;
        this.infrastructureEncryptionEnabled = infrastructureEncryptionEnabled;
        this.isHnsEnabled = isHnsEnabled;
        this.location = location;
        this.minTlsVersion = minTlsVersion;
        this.name = name;
        this.nfsv3Enabled = nfsv3Enabled;
        this.primaryAccessKey = primaryAccessKey;
        this.primaryBlobConnectionString = primaryBlobConnectionString;
        this.primaryBlobEndpoint = primaryBlobEndpoint;
        this.primaryBlobHost = primaryBlobHost;
        this.primaryConnectionString = primaryConnectionString;
        this.primaryDfsEndpoint = primaryDfsEndpoint;
        this.primaryDfsHost = primaryDfsHost;
        this.primaryFileEndpoint = primaryFileEndpoint;
        this.primaryFileHost = primaryFileHost;
        this.primaryLocation = primaryLocation;
        this.primaryQueueEndpoint = primaryQueueEndpoint;
        this.primaryQueueHost = primaryQueueHost;
        this.primaryTableEndpoint = primaryTableEndpoint;
        this.primaryTableHost = primaryTableHost;
        this.primaryWebEndpoint = primaryWebEndpoint;
        this.primaryWebHost = primaryWebHost;
        this.queueEncryptionKeyType = queueEncryptionKeyType;
        this.resourceGroupName = resourceGroupName;
        this.secondaryAccessKey = secondaryAccessKey;
        this.secondaryBlobConnectionString = secondaryBlobConnectionString;
        this.secondaryBlobEndpoint = secondaryBlobEndpoint;
        this.secondaryBlobHost = secondaryBlobHost;
        this.secondaryConnectionString = secondaryConnectionString;
        this.secondaryDfsEndpoint = secondaryDfsEndpoint;
        this.secondaryDfsHost = secondaryDfsHost;
        this.secondaryFileEndpoint = secondaryFileEndpoint;
        this.secondaryFileHost = secondaryFileHost;
        this.secondaryLocation = secondaryLocation;
        this.secondaryQueueEndpoint = secondaryQueueEndpoint;
        this.secondaryQueueHost = secondaryQueueHost;
        this.secondaryTableEndpoint = secondaryTableEndpoint;
        this.secondaryTableHost = secondaryTableHost;
        this.secondaryWebEndpoint = secondaryWebEndpoint;
        this.secondaryWebHost = secondaryWebHost;
        this.tableEncryptionKeyType = tableEncryptionKeyType;
        this.tags = tags;
    }

    /**
     * @return The access tier for `BlobStorage` accounts.
     * 
     */
    public String accessTier() {
        return this.accessTier;
    }
    /**
     * @return The Kind of account.
     * 
     */
    public String accountKind() {
        return this.accountKind;
    }
    /**
     * @return The type of replication used for this storage account.
     * 
     */
    public String accountReplicationType() {
        return this.accountReplicationType;
    }
    /**
     * @return The Tier of this storage account.
     * 
     */
    public String accountTier() {
        return this.accountTier;
    }
    /**
     * @return Can nested items in the storage account opt into allowing public access?
     * 
     */
    public Boolean allowNestedItemsToBePublic() {
        return this.allowNestedItemsToBePublic;
    }
    /**
     * @return A `custom_domain` block as documented below.
     * 
     */
    public List<GetAccountCustomDomain> customDomains() {
        return this.customDomains;
    }
    /**
     * @return Is traffic only allowed via HTTPS? See [here](https://docs.microsoft.com/azure/storage/storage-require-secure-transfer/)
     * for more information.
     * 
     */
    public Boolean enableHttpsTrafficOnly() {
        return this.enableHttpsTrafficOnly;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return An `identity` block as documented below.
     * 
     */
    public List<GetAccountIdentity> identities() {
        return this.identities;
    }
    /**
     * @return Is infrastructure encryption enabled? See [here](https://docs.microsoft.com/azure/storage/common/infrastructure-encryption-enable/)
     * for more information.
     * ---
     * 
     */
    public Boolean infrastructureEncryptionEnabled() {
        return this.infrastructureEncryptionEnabled;
    }
    /**
     * @return Is Hierarchical Namespace enabled?
     * 
     */
    public Boolean isHnsEnabled() {
        return this.isHnsEnabled;
    }
    /**
     * @return The Azure location where the Storage Account exists
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return The minimum supported TLS version for this storage account.
     * 
     */
    public Optional<String> minTlsVersion() {
        return Optional.ofNullable(this.minTlsVersion);
    }
    /**
     * @return The Custom Domain Name used for the Storage Account.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Is NFSv3 protocol enabled?
     * 
     */
    public Boolean nfsv3Enabled() {
        return this.nfsv3Enabled;
    }
    /**
     * @return The primary access key for the Storage Account.
     * 
     */
    public String primaryAccessKey() {
        return this.primaryAccessKey;
    }
    /**
     * @return The connection string associated with the primary blob location
     * 
     */
    public String primaryBlobConnectionString() {
        return this.primaryBlobConnectionString;
    }
    /**
     * @return The endpoint URL for blob storage in the primary location.
     * 
     */
    public String primaryBlobEndpoint() {
        return this.primaryBlobEndpoint;
    }
    /**
     * @return The hostname with port if applicable for blob storage in the primary location.
     * 
     */
    public String primaryBlobHost() {
        return this.primaryBlobHost;
    }
    /**
     * @return The connection string associated with the primary location
     * 
     */
    public String primaryConnectionString() {
        return this.primaryConnectionString;
    }
    /**
     * @return The endpoint URL for DFS storage in the primary location.
     * 
     */
    public String primaryDfsEndpoint() {
        return this.primaryDfsEndpoint;
    }
    /**
     * @return The hostname with port if applicable for DFS storage in the primary location.
     * 
     */
    public String primaryDfsHost() {
        return this.primaryDfsHost;
    }
    /**
     * @return The endpoint URL for file storage in the primary location.
     * 
     */
    public String primaryFileEndpoint() {
        return this.primaryFileEndpoint;
    }
    /**
     * @return The hostname with port if applicable for file storage in the primary location.
     * 
     */
    public String primaryFileHost() {
        return this.primaryFileHost;
    }
    /**
     * @return The primary location of the Storage Account.
     * 
     */
    public String primaryLocation() {
        return this.primaryLocation;
    }
    /**
     * @return The endpoint URL for queue storage in the primary location.
     * 
     */
    public String primaryQueueEndpoint() {
        return this.primaryQueueEndpoint;
    }
    /**
     * @return The hostname with port if applicable for queue storage in the primary location.
     * 
     */
    public String primaryQueueHost() {
        return this.primaryQueueHost;
    }
    /**
     * @return The endpoint URL for table storage in the primary location.
     * 
     */
    public String primaryTableEndpoint() {
        return this.primaryTableEndpoint;
    }
    /**
     * @return The hostname with port if applicable for table storage in the primary location.
     * 
     */
    public String primaryTableHost() {
        return this.primaryTableHost;
    }
    /**
     * @return The endpoint URL for web storage in the primary location.
     * 
     */
    public String primaryWebEndpoint() {
        return this.primaryWebEndpoint;
    }
    /**
     * @return The hostname with port if applicable for web storage in the primary location.
     * 
     */
    public String primaryWebHost() {
        return this.primaryWebHost;
    }
    /**
     * @return The encryption key type of the queue.
     * 
     */
    public String queueEncryptionKeyType() {
        return this.queueEncryptionKeyType;
    }
    public Optional<String> resourceGroupName() {
        return Optional.ofNullable(this.resourceGroupName);
    }
    /**
     * @return The secondary access key for the Storage Account.
     * 
     */
    public String secondaryAccessKey() {
        return this.secondaryAccessKey;
    }
    /**
     * @return The connection string associated with the secondary blob location
     * 
     */
    public String secondaryBlobConnectionString() {
        return this.secondaryBlobConnectionString;
    }
    /**
     * @return The endpoint URL for blob storage in the secondary location.
     * 
     */
    public String secondaryBlobEndpoint() {
        return this.secondaryBlobEndpoint;
    }
    /**
     * @return The hostname with port if applicable for blob storage in the secondary location.
     * 
     */
    public String secondaryBlobHost() {
        return this.secondaryBlobHost;
    }
    /**
     * @return The connection string associated with the secondary location
     * 
     */
    public String secondaryConnectionString() {
        return this.secondaryConnectionString;
    }
    /**
     * @return The endpoint URL for DFS storage in the secondary location.
     * 
     */
    public String secondaryDfsEndpoint() {
        return this.secondaryDfsEndpoint;
    }
    /**
     * @return The hostname with port if applicable for DFS storage in the secondary location.
     * 
     */
    public String secondaryDfsHost() {
        return this.secondaryDfsHost;
    }
    /**
     * @return The endpoint URL for file storage in the secondary location.
     * 
     */
    public String secondaryFileEndpoint() {
        return this.secondaryFileEndpoint;
    }
    /**
     * @return The hostname with port if applicable for file storage in the secondary location.
     * 
     */
    public String secondaryFileHost() {
        return this.secondaryFileHost;
    }
    /**
     * @return The secondary location of the Storage Account.
     * 
     */
    public String secondaryLocation() {
        return this.secondaryLocation;
    }
    /**
     * @return The endpoint URL for queue storage in the secondary location.
     * 
     */
    public String secondaryQueueEndpoint() {
        return this.secondaryQueueEndpoint;
    }
    /**
     * @return The hostname with port if applicable for queue storage in the secondary location.
     * 
     */
    public String secondaryQueueHost() {
        return this.secondaryQueueHost;
    }
    /**
     * @return The endpoint URL for table storage in the secondary location.
     * 
     */
    public String secondaryTableEndpoint() {
        return this.secondaryTableEndpoint;
    }
    /**
     * @return The hostname with port if applicable for table storage in the secondary location.
     * 
     */
    public String secondaryTableHost() {
        return this.secondaryTableHost;
    }
    /**
     * @return The endpoint URL for web storage in the secondary location.
     * 
     */
    public String secondaryWebEndpoint() {
        return this.secondaryWebEndpoint;
    }
    /**
     * @return The hostname with port if applicable for web storage in the secondary location.
     * 
     */
    public String secondaryWebHost() {
        return this.secondaryWebHost;
    }
    /**
     * @return The encryption key type of the table.
     * 
     */
    public String tableEncryptionKeyType() {
        return this.tableEncryptionKeyType;
    }
    /**
     * @return A mapping of tags to assigned to the resource.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAccountResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String accessTier;
        private String accountKind;
        private String accountReplicationType;
        private String accountTier;
        private Boolean allowNestedItemsToBePublic;
        private List<GetAccountCustomDomain> customDomains;
        private Boolean enableHttpsTrafficOnly;
        private String id;
        private List<GetAccountIdentity> identities;
        private Boolean infrastructureEncryptionEnabled;
        private Boolean isHnsEnabled;
        private String location;
        private @Nullable String minTlsVersion;
        private String name;
        private Boolean nfsv3Enabled;
        private String primaryAccessKey;
        private String primaryBlobConnectionString;
        private String primaryBlobEndpoint;
        private String primaryBlobHost;
        private String primaryConnectionString;
        private String primaryDfsEndpoint;
        private String primaryDfsHost;
        private String primaryFileEndpoint;
        private String primaryFileHost;
        private String primaryLocation;
        private String primaryQueueEndpoint;
        private String primaryQueueHost;
        private String primaryTableEndpoint;
        private String primaryTableHost;
        private String primaryWebEndpoint;
        private String primaryWebHost;
        private String queueEncryptionKeyType;
        private @Nullable String resourceGroupName;
        private String secondaryAccessKey;
        private String secondaryBlobConnectionString;
        private String secondaryBlobEndpoint;
        private String secondaryBlobHost;
        private String secondaryConnectionString;
        private String secondaryDfsEndpoint;
        private String secondaryDfsHost;
        private String secondaryFileEndpoint;
        private String secondaryFileHost;
        private String secondaryLocation;
        private String secondaryQueueEndpoint;
        private String secondaryQueueHost;
        private String secondaryTableEndpoint;
        private String secondaryTableHost;
        private String secondaryWebEndpoint;
        private String secondaryWebHost;
        private String tableEncryptionKeyType;
        private Map<String,String> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(GetAccountResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessTier = defaults.accessTier;
    	      this.accountKind = defaults.accountKind;
    	      this.accountReplicationType = defaults.accountReplicationType;
    	      this.accountTier = defaults.accountTier;
    	      this.allowNestedItemsToBePublic = defaults.allowNestedItemsToBePublic;
    	      this.customDomains = defaults.customDomains;
    	      this.enableHttpsTrafficOnly = defaults.enableHttpsTrafficOnly;
    	      this.id = defaults.id;
    	      this.identities = defaults.identities;
    	      this.infrastructureEncryptionEnabled = defaults.infrastructureEncryptionEnabled;
    	      this.isHnsEnabled = defaults.isHnsEnabled;
    	      this.location = defaults.location;
    	      this.minTlsVersion = defaults.minTlsVersion;
    	      this.name = defaults.name;
    	      this.nfsv3Enabled = defaults.nfsv3Enabled;
    	      this.primaryAccessKey = defaults.primaryAccessKey;
    	      this.primaryBlobConnectionString = defaults.primaryBlobConnectionString;
    	      this.primaryBlobEndpoint = defaults.primaryBlobEndpoint;
    	      this.primaryBlobHost = defaults.primaryBlobHost;
    	      this.primaryConnectionString = defaults.primaryConnectionString;
    	      this.primaryDfsEndpoint = defaults.primaryDfsEndpoint;
    	      this.primaryDfsHost = defaults.primaryDfsHost;
    	      this.primaryFileEndpoint = defaults.primaryFileEndpoint;
    	      this.primaryFileHost = defaults.primaryFileHost;
    	      this.primaryLocation = defaults.primaryLocation;
    	      this.primaryQueueEndpoint = defaults.primaryQueueEndpoint;
    	      this.primaryQueueHost = defaults.primaryQueueHost;
    	      this.primaryTableEndpoint = defaults.primaryTableEndpoint;
    	      this.primaryTableHost = defaults.primaryTableHost;
    	      this.primaryWebEndpoint = defaults.primaryWebEndpoint;
    	      this.primaryWebHost = defaults.primaryWebHost;
    	      this.queueEncryptionKeyType = defaults.queueEncryptionKeyType;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.secondaryAccessKey = defaults.secondaryAccessKey;
    	      this.secondaryBlobConnectionString = defaults.secondaryBlobConnectionString;
    	      this.secondaryBlobEndpoint = defaults.secondaryBlobEndpoint;
    	      this.secondaryBlobHost = defaults.secondaryBlobHost;
    	      this.secondaryConnectionString = defaults.secondaryConnectionString;
    	      this.secondaryDfsEndpoint = defaults.secondaryDfsEndpoint;
    	      this.secondaryDfsHost = defaults.secondaryDfsHost;
    	      this.secondaryFileEndpoint = defaults.secondaryFileEndpoint;
    	      this.secondaryFileHost = defaults.secondaryFileHost;
    	      this.secondaryLocation = defaults.secondaryLocation;
    	      this.secondaryQueueEndpoint = defaults.secondaryQueueEndpoint;
    	      this.secondaryQueueHost = defaults.secondaryQueueHost;
    	      this.secondaryTableEndpoint = defaults.secondaryTableEndpoint;
    	      this.secondaryTableHost = defaults.secondaryTableHost;
    	      this.secondaryWebEndpoint = defaults.secondaryWebEndpoint;
    	      this.secondaryWebHost = defaults.secondaryWebHost;
    	      this.tableEncryptionKeyType = defaults.tableEncryptionKeyType;
    	      this.tags = defaults.tags;
        }

        public Builder accessTier(String accessTier) {
            this.accessTier = Objects.requireNonNull(accessTier);
            return this;
        }
        public Builder accountKind(String accountKind) {
            this.accountKind = Objects.requireNonNull(accountKind);
            return this;
        }
        public Builder accountReplicationType(String accountReplicationType) {
            this.accountReplicationType = Objects.requireNonNull(accountReplicationType);
            return this;
        }
        public Builder accountTier(String accountTier) {
            this.accountTier = Objects.requireNonNull(accountTier);
            return this;
        }
        public Builder allowNestedItemsToBePublic(Boolean allowNestedItemsToBePublic) {
            this.allowNestedItemsToBePublic = Objects.requireNonNull(allowNestedItemsToBePublic);
            return this;
        }
        public Builder customDomains(List<GetAccountCustomDomain> customDomains) {
            this.customDomains = Objects.requireNonNull(customDomains);
            return this;
        }
        public Builder customDomains(GetAccountCustomDomain... customDomains) {
            return customDomains(List.of(customDomains));
        }
        public Builder enableHttpsTrafficOnly(Boolean enableHttpsTrafficOnly) {
            this.enableHttpsTrafficOnly = Objects.requireNonNull(enableHttpsTrafficOnly);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder identities(List<GetAccountIdentity> identities) {
            this.identities = Objects.requireNonNull(identities);
            return this;
        }
        public Builder identities(GetAccountIdentity... identities) {
            return identities(List.of(identities));
        }
        public Builder infrastructureEncryptionEnabled(Boolean infrastructureEncryptionEnabled) {
            this.infrastructureEncryptionEnabled = Objects.requireNonNull(infrastructureEncryptionEnabled);
            return this;
        }
        public Builder isHnsEnabled(Boolean isHnsEnabled) {
            this.isHnsEnabled = Objects.requireNonNull(isHnsEnabled);
            return this;
        }
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        public Builder minTlsVersion(@Nullable String minTlsVersion) {
            this.minTlsVersion = minTlsVersion;
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder nfsv3Enabled(Boolean nfsv3Enabled) {
            this.nfsv3Enabled = Objects.requireNonNull(nfsv3Enabled);
            return this;
        }
        public Builder primaryAccessKey(String primaryAccessKey) {
            this.primaryAccessKey = Objects.requireNonNull(primaryAccessKey);
            return this;
        }
        public Builder primaryBlobConnectionString(String primaryBlobConnectionString) {
            this.primaryBlobConnectionString = Objects.requireNonNull(primaryBlobConnectionString);
            return this;
        }
        public Builder primaryBlobEndpoint(String primaryBlobEndpoint) {
            this.primaryBlobEndpoint = Objects.requireNonNull(primaryBlobEndpoint);
            return this;
        }
        public Builder primaryBlobHost(String primaryBlobHost) {
            this.primaryBlobHost = Objects.requireNonNull(primaryBlobHost);
            return this;
        }
        public Builder primaryConnectionString(String primaryConnectionString) {
            this.primaryConnectionString = Objects.requireNonNull(primaryConnectionString);
            return this;
        }
        public Builder primaryDfsEndpoint(String primaryDfsEndpoint) {
            this.primaryDfsEndpoint = Objects.requireNonNull(primaryDfsEndpoint);
            return this;
        }
        public Builder primaryDfsHost(String primaryDfsHost) {
            this.primaryDfsHost = Objects.requireNonNull(primaryDfsHost);
            return this;
        }
        public Builder primaryFileEndpoint(String primaryFileEndpoint) {
            this.primaryFileEndpoint = Objects.requireNonNull(primaryFileEndpoint);
            return this;
        }
        public Builder primaryFileHost(String primaryFileHost) {
            this.primaryFileHost = Objects.requireNonNull(primaryFileHost);
            return this;
        }
        public Builder primaryLocation(String primaryLocation) {
            this.primaryLocation = Objects.requireNonNull(primaryLocation);
            return this;
        }
        public Builder primaryQueueEndpoint(String primaryQueueEndpoint) {
            this.primaryQueueEndpoint = Objects.requireNonNull(primaryQueueEndpoint);
            return this;
        }
        public Builder primaryQueueHost(String primaryQueueHost) {
            this.primaryQueueHost = Objects.requireNonNull(primaryQueueHost);
            return this;
        }
        public Builder primaryTableEndpoint(String primaryTableEndpoint) {
            this.primaryTableEndpoint = Objects.requireNonNull(primaryTableEndpoint);
            return this;
        }
        public Builder primaryTableHost(String primaryTableHost) {
            this.primaryTableHost = Objects.requireNonNull(primaryTableHost);
            return this;
        }
        public Builder primaryWebEndpoint(String primaryWebEndpoint) {
            this.primaryWebEndpoint = Objects.requireNonNull(primaryWebEndpoint);
            return this;
        }
        public Builder primaryWebHost(String primaryWebHost) {
            this.primaryWebHost = Objects.requireNonNull(primaryWebHost);
            return this;
        }
        public Builder queueEncryptionKeyType(String queueEncryptionKeyType) {
            this.queueEncryptionKeyType = Objects.requireNonNull(queueEncryptionKeyType);
            return this;
        }
        public Builder resourceGroupName(@Nullable String resourceGroupName) {
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        public Builder secondaryAccessKey(String secondaryAccessKey) {
            this.secondaryAccessKey = Objects.requireNonNull(secondaryAccessKey);
            return this;
        }
        public Builder secondaryBlobConnectionString(String secondaryBlobConnectionString) {
            this.secondaryBlobConnectionString = Objects.requireNonNull(secondaryBlobConnectionString);
            return this;
        }
        public Builder secondaryBlobEndpoint(String secondaryBlobEndpoint) {
            this.secondaryBlobEndpoint = Objects.requireNonNull(secondaryBlobEndpoint);
            return this;
        }
        public Builder secondaryBlobHost(String secondaryBlobHost) {
            this.secondaryBlobHost = Objects.requireNonNull(secondaryBlobHost);
            return this;
        }
        public Builder secondaryConnectionString(String secondaryConnectionString) {
            this.secondaryConnectionString = Objects.requireNonNull(secondaryConnectionString);
            return this;
        }
        public Builder secondaryDfsEndpoint(String secondaryDfsEndpoint) {
            this.secondaryDfsEndpoint = Objects.requireNonNull(secondaryDfsEndpoint);
            return this;
        }
        public Builder secondaryDfsHost(String secondaryDfsHost) {
            this.secondaryDfsHost = Objects.requireNonNull(secondaryDfsHost);
            return this;
        }
        public Builder secondaryFileEndpoint(String secondaryFileEndpoint) {
            this.secondaryFileEndpoint = Objects.requireNonNull(secondaryFileEndpoint);
            return this;
        }
        public Builder secondaryFileHost(String secondaryFileHost) {
            this.secondaryFileHost = Objects.requireNonNull(secondaryFileHost);
            return this;
        }
        public Builder secondaryLocation(String secondaryLocation) {
            this.secondaryLocation = Objects.requireNonNull(secondaryLocation);
            return this;
        }
        public Builder secondaryQueueEndpoint(String secondaryQueueEndpoint) {
            this.secondaryQueueEndpoint = Objects.requireNonNull(secondaryQueueEndpoint);
            return this;
        }
        public Builder secondaryQueueHost(String secondaryQueueHost) {
            this.secondaryQueueHost = Objects.requireNonNull(secondaryQueueHost);
            return this;
        }
        public Builder secondaryTableEndpoint(String secondaryTableEndpoint) {
            this.secondaryTableEndpoint = Objects.requireNonNull(secondaryTableEndpoint);
            return this;
        }
        public Builder secondaryTableHost(String secondaryTableHost) {
            this.secondaryTableHost = Objects.requireNonNull(secondaryTableHost);
            return this;
        }
        public Builder secondaryWebEndpoint(String secondaryWebEndpoint) {
            this.secondaryWebEndpoint = Objects.requireNonNull(secondaryWebEndpoint);
            return this;
        }
        public Builder secondaryWebHost(String secondaryWebHost) {
            this.secondaryWebHost = Objects.requireNonNull(secondaryWebHost);
            return this;
        }
        public Builder tableEncryptionKeyType(String tableEncryptionKeyType) {
            this.tableEncryptionKeyType = Objects.requireNonNull(tableEncryptionKeyType);
            return this;
        }
        public Builder tags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }        public GetAccountResult build() {
            return new GetAccountResult(accessTier, accountKind, accountReplicationType, accountTier, allowNestedItemsToBePublic, customDomains, enableHttpsTrafficOnly, id, identities, infrastructureEncryptionEnabled, isHnsEnabled, location, minTlsVersion, name, nfsv3Enabled, primaryAccessKey, primaryBlobConnectionString, primaryBlobEndpoint, primaryBlobHost, primaryConnectionString, primaryDfsEndpoint, primaryDfsHost, primaryFileEndpoint, primaryFileHost, primaryLocation, primaryQueueEndpoint, primaryQueueHost, primaryTableEndpoint, primaryTableHost, primaryWebEndpoint, primaryWebHost, queueEncryptionKeyType, resourceGroupName, secondaryAccessKey, secondaryBlobConnectionString, secondaryBlobEndpoint, secondaryBlobHost, secondaryConnectionString, secondaryDfsEndpoint, secondaryDfsHost, secondaryFileEndpoint, secondaryFileHost, secondaryLocation, secondaryQueueEndpoint, secondaryQueueHost, secondaryTableEndpoint, secondaryTableHost, secondaryWebEndpoint, secondaryWebHost, tableEncryptionKeyType, tags);
        }
    }
}
