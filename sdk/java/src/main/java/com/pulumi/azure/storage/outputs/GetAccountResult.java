// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.storage.outputs;

import com.pulumi.azure.storage.outputs.GetAccountAzureFilesAuthentication;
import com.pulumi.azure.storage.outputs.GetAccountCustomDomain;
import com.pulumi.azure.storage.outputs.GetAccountIdentity;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetAccountResult {
    /**
     * @return The access tier for `BlobStorage` accounts.
     * 
     */
    private String accessTier;
    /**
     * @return The Kind of account.
     * 
     */
    private String accountKind;
    /**
     * @return The type of replication used for this storage account.
     * 
     */
    private String accountReplicationType;
    /**
     * @return The Tier of this storage account.
     * 
     */
    private String accountTier;
    /**
     * @return Can nested items in the storage account opt into allowing public access?
     * 
     */
    private Boolean allowNestedItemsToBePublic;
    /**
     * @return A `azure_files_authentication` block as documented below.
     * 
     */
    private List<GetAccountAzureFilesAuthentication> azureFilesAuthentications;
    /**
     * @return supports the following:
     * 
     */
    private List<GetAccountCustomDomain> customDomains;
    /**
     * @return Is traffic only allowed via HTTPS? See [here](https://docs.microsoft.com/azure/storage/storage-require-secure-transfer/)
     * for more information.
     * 
     */
    private Boolean enableHttpsTrafficOnly;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return An `identity` block as documented below.
     * 
     */
    private List<GetAccountIdentity> identities;
    /**
     * @return Is infrastructure encryption enabled? See [here](https://docs.microsoft.com/azure/storage/common/infrastructure-encryption-enable/)
     * for more information.
     * 
     */
    private Boolean infrastructureEncryptionEnabled;
    /**
     * @return Is Hierarchical Namespace enabled?
     * 
     */
    private Boolean isHnsEnabled;
    /**
     * @return The Azure location where the Storage Account exists
     * 
     */
    private String location;
    /**
     * @return The minimum supported TLS version for this storage account.
     * 
     */
    private @Nullable String minTlsVersion;
    /**
     * @return The Custom Domain Name used for the Storage Account.
     * 
     */
    private String name;
    /**
     * @return Is NFSv3 protocol enabled?
     * 
     */
    private Boolean nfsv3Enabled;
    /**
     * @return The primary access key for the Storage Account.
     * 
     */
    private String primaryAccessKey;
    /**
     * @return The connection string associated with the primary blob location
     * 
     */
    private String primaryBlobConnectionString;
    /**
     * @return The endpoint URL for blob storage in the primary location.
     * 
     */
    private String primaryBlobEndpoint;
    /**
     * @return The hostname with port if applicable for blob storage in the primary location.
     * 
     */
    private String primaryBlobHost;
    /**
     * @return The internet routing endpoint URL for blob storage in the primary location.
     * 
     */
    private String primaryBlobInternetEndpoint;
    /**
     * @return The internet routing hostname with port if applicable for blob storage in the primary location.
     * 
     */
    private String primaryBlobInternetHost;
    /**
     * @return The microsoft routing endpoint URL for blob storage in the primary location.
     * 
     */
    private String primaryBlobMicrosoftEndpoint;
    /**
     * @return The microsoft routing hostname with port if applicable for blob storage in the primary location.
     * 
     */
    private String primaryBlobMicrosoftHost;
    /**
     * @return The connection string associated with the primary location
     * 
     */
    private String primaryConnectionString;
    /**
     * @return The endpoint URL for DFS storage in the primary location.
     * 
     */
    private String primaryDfsEndpoint;
    /**
     * @return The hostname with port if applicable for DFS storage in the primary location.
     * 
     */
    private String primaryDfsHost;
    /**
     * @return The internet routing endpoint URL for DFS storage in the primary location.
     * 
     */
    private String primaryDfsInternetEndpoint;
    /**
     * @return The internet routing hostname with port if applicable for DFS storage in the primary location.
     * 
     */
    private String primaryDfsInternetHost;
    /**
     * @return The microsoft routing endpoint URL for DFS storage in the primary location.
     * 
     */
    private String primaryDfsMicrosoftEndpoint;
    /**
     * @return The microsoft routing hostname with port if applicable for DFS storage in the primary location.
     * 
     */
    private String primaryDfsMicrosoftHost;
    /**
     * @return The endpoint URL for file storage in the primary location.
     * 
     */
    private String primaryFileEndpoint;
    /**
     * @return The hostname with port if applicable for file storage in the primary location.
     * 
     */
    private String primaryFileHost;
    /**
     * @return The internet routing endpoint URL for file storage in the primary location.
     * 
     */
    private String primaryFileInternetEndpoint;
    /**
     * @return The internet routing hostname with port if applicable for file storage in the primary location.
     * 
     */
    private String primaryFileInternetHost;
    /**
     * @return The microsoft routing endpoint URL for file storage in the primary location.
     * 
     */
    private String primaryFileMicrosoftEndpoint;
    /**
     * @return The microsoft routing hostname with port if applicable for file storage in the primary location.
     * 
     */
    private String primaryFileMicrosoftHost;
    /**
     * @return The primary location of the Storage Account.
     * 
     */
    private String primaryLocation;
    /**
     * @return The endpoint URL for queue storage in the primary location.
     * 
     */
    private String primaryQueueEndpoint;
    /**
     * @return The hostname with port if applicable for queue storage in the primary location.
     * 
     */
    private String primaryQueueHost;
    /**
     * @return The microsoft routing endpoint URL for queue storage in the primary location.
     * 
     */
    private String primaryQueueMicrosoftEndpoint;
    /**
     * @return The microsoft routing hostname with port if applicable for queue storage in the primary location.
     * 
     */
    private String primaryQueueMicrosoftHost;
    /**
     * @return The endpoint URL for table storage in the primary location.
     * 
     */
    private String primaryTableEndpoint;
    /**
     * @return The hostname with port if applicable for table storage in the primary location.
     * 
     */
    private String primaryTableHost;
    /**
     * @return The microsoft routing endpoint URL for table storage in the primary location.
     * 
     */
    private String primaryTableMicrosoftEndpoint;
    /**
     * @return The microsoft routing hostname with port if applicable for table storage in the primary location.
     * 
     */
    private String primaryTableMicrosoftHost;
    /**
     * @return The endpoint URL for web storage in the primary location.
     * 
     */
    private String primaryWebEndpoint;
    /**
     * @return The hostname with port if applicable for web storage in the primary location.
     * 
     */
    private String primaryWebHost;
    /**
     * @return The internet routing endpoint URL for web storage in the primary location.
     * 
     */
    private String primaryWebInternetEndpoint;
    /**
     * @return The internet routing hostname with port if applicable for web storage in the primary location.
     * 
     */
    private String primaryWebInternetHost;
    /**
     * @return The microsoft routing endpoint URL for web storage in the primary location.
     * 
     */
    private String primaryWebMicrosoftEndpoint;
    /**
     * @return The microsoft routing hostname with port if applicable for web storage in the primary location.
     * 
     */
    private String primaryWebMicrosoftHost;
    /**
     * @return The encryption key type of the queue.
     * 
     */
    private String queueEncryptionKeyType;
    private @Nullable String resourceGroupName;
    /**
     * @return The secondary access key for the Storage Account.
     * 
     */
    private String secondaryAccessKey;
    /**
     * @return The connection string associated with the secondary blob location
     * 
     */
    private String secondaryBlobConnectionString;
    /**
     * @return The endpoint URL for blob storage in the secondary location.
     * 
     */
    private String secondaryBlobEndpoint;
    /**
     * @return The hostname with port if applicable for blob storage in the secondary location.
     * 
     */
    private String secondaryBlobHost;
    /**
     * @return The internet routing endpoint URL for blob storage in the secondary location.
     * 
     */
    private String secondaryBlobInternetEndpoint;
    /**
     * @return The internet routing hostname with port if applicable for blob storage in the secondary location.
     * 
     */
    private String secondaryBlobInternetHost;
    /**
     * @return The microsoft routing endpoint URL for blob storage in the secondary location.
     * 
     */
    private String secondaryBlobMicrosoftEndpoint;
    /**
     * @return The microsoft routing hostname with port if applicable for blob storage in the secondary location.
     * 
     */
    private String secondaryBlobMicrosoftHost;
    /**
     * @return The connection string associated with the secondary location
     * 
     */
    private String secondaryConnectionString;
    /**
     * @return The endpoint URL for DFS storage in the secondary location.
     * 
     */
    private String secondaryDfsEndpoint;
    /**
     * @return The hostname with port if applicable for DFS storage in the secondary location.
     * 
     */
    private String secondaryDfsHost;
    /**
     * @return The internet routing endpoint URL for DFS storage in the secondary location.
     * 
     */
    private String secondaryDfsInternetEndpoint;
    /**
     * @return The internet routing hostname with port if applicable for DFS storage in the secondary location.
     * 
     */
    private String secondaryDfsInternetHost;
    /**
     * @return The microsoft routing endpoint URL for DFS storage in the secondary location.
     * 
     */
    private String secondaryDfsMicrosoftEndpoint;
    /**
     * @return The microsoft routing hostname with port if applicable for DFS storage in the secondary location.
     * 
     */
    private String secondaryDfsMicrosoftHost;
    /**
     * @return The endpoint URL for file storage in the secondary location.
     * 
     */
    private String secondaryFileEndpoint;
    /**
     * @return The hostname with port if applicable for file storage in the secondary location.
     * 
     */
    private String secondaryFileHost;
    /**
     * @return The internet routing endpoint URL for file storage in the secondary location.
     * 
     */
    private String secondaryFileInternetEndpoint;
    /**
     * @return The internet routing hostname with port if applicable for file storage in the secondary location.
     * 
     */
    private String secondaryFileInternetHost;
    /**
     * @return The microsoft routing endpoint URL for file storage in the secondary location.
     * 
     */
    private String secondaryFileMicrosoftEndpoint;
    /**
     * @return The microsoft routing hostname with port if applicable for file storage in the secondary location.
     * 
     */
    private String secondaryFileMicrosoftHost;
    /**
     * @return The secondary location of the Storage Account.
     * 
     */
    private String secondaryLocation;
    /**
     * @return The endpoint URL for queue storage in the secondary location.
     * 
     */
    private String secondaryQueueEndpoint;
    /**
     * @return The hostname with port if applicable for queue storage in the secondary location.
     * 
     */
    private String secondaryQueueHost;
    /**
     * @return The microsoft routing endpoint URL for queue storage in the secondary location.
     * 
     */
    private String secondaryQueueMicrosoftEndpoint;
    /**
     * @return The microsoft routing hostname with port if applicable for queue storage in the secondary location.
     * 
     */
    private String secondaryQueueMicrosoftHost;
    /**
     * @return The endpoint URL for table storage in the secondary location.
     * 
     */
    private String secondaryTableEndpoint;
    /**
     * @return The hostname with port if applicable for table storage in the secondary location.
     * 
     */
    private String secondaryTableHost;
    /**
     * @return The microsoft routing endpoint URL for table storage in the secondary location.
     * 
     */
    private String secondaryTableMicrosoftEndpoint;
    /**
     * @return The microsoft routing hostname with port if applicable for table storage in the secondary location.
     * 
     */
    private String secondaryTableMicrosoftHost;
    /**
     * @return The endpoint URL for web storage in the secondary location.
     * 
     */
    private String secondaryWebEndpoint;
    /**
     * @return The hostname with port if applicable for web storage in the secondary location.
     * 
     */
    private String secondaryWebHost;
    /**
     * @return The internet routing endpoint URL for web storage in the secondary location.
     * 
     */
    private String secondaryWebInternetEndpoint;
    /**
     * @return The internet routing hostname with port if applicable for web storage in the secondary location.
     * 
     */
    private String secondaryWebInternetHost;
    /**
     * @return The microsoft routing endpoint URL for web storage in the secondary location.
     * 
     */
    private String secondaryWebMicrosoftEndpoint;
    /**
     * @return The microsoft routing hostname with port if applicable for web storage in the secondary location.
     * 
     */
    private String secondaryWebMicrosoftHost;
    /**
     * @return The encryption key type of the table.
     * 
     */
    private String tableEncryptionKeyType;
    /**
     * @return A mapping of tags to assigned to the resource.
     * 
     */
    private Map<String,String> tags;

    private GetAccountResult() {}
    /**
     * @return The access tier for `BlobStorage` accounts.
     * 
     */
    public String accessTier() {
        return this.accessTier;
    }
    /**
     * @return The Kind of account.
     * 
     */
    public String accountKind() {
        return this.accountKind;
    }
    /**
     * @return The type of replication used for this storage account.
     * 
     */
    public String accountReplicationType() {
        return this.accountReplicationType;
    }
    /**
     * @return The Tier of this storage account.
     * 
     */
    public String accountTier() {
        return this.accountTier;
    }
    /**
     * @return Can nested items in the storage account opt into allowing public access?
     * 
     */
    public Boolean allowNestedItemsToBePublic() {
        return this.allowNestedItemsToBePublic;
    }
    /**
     * @return A `azure_files_authentication` block as documented below.
     * 
     */
    public List<GetAccountAzureFilesAuthentication> azureFilesAuthentications() {
        return this.azureFilesAuthentications;
    }
    /**
     * @return supports the following:
     * 
     */
    public List<GetAccountCustomDomain> customDomains() {
        return this.customDomains;
    }
    /**
     * @return Is traffic only allowed via HTTPS? See [here](https://docs.microsoft.com/azure/storage/storage-require-secure-transfer/)
     * for more information.
     * 
     */
    public Boolean enableHttpsTrafficOnly() {
        return this.enableHttpsTrafficOnly;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return An `identity` block as documented below.
     * 
     */
    public List<GetAccountIdentity> identities() {
        return this.identities;
    }
    /**
     * @return Is infrastructure encryption enabled? See [here](https://docs.microsoft.com/azure/storage/common/infrastructure-encryption-enable/)
     * for more information.
     * 
     */
    public Boolean infrastructureEncryptionEnabled() {
        return this.infrastructureEncryptionEnabled;
    }
    /**
     * @return Is Hierarchical Namespace enabled?
     * 
     */
    public Boolean isHnsEnabled() {
        return this.isHnsEnabled;
    }
    /**
     * @return The Azure location where the Storage Account exists
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return The minimum supported TLS version for this storage account.
     * 
     */
    public Optional<String> minTlsVersion() {
        return Optional.ofNullable(this.minTlsVersion);
    }
    /**
     * @return The Custom Domain Name used for the Storage Account.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Is NFSv3 protocol enabled?
     * 
     */
    public Boolean nfsv3Enabled() {
        return this.nfsv3Enabled;
    }
    /**
     * @return The primary access key for the Storage Account.
     * 
     */
    public String primaryAccessKey() {
        return this.primaryAccessKey;
    }
    /**
     * @return The connection string associated with the primary blob location
     * 
     */
    public String primaryBlobConnectionString() {
        return this.primaryBlobConnectionString;
    }
    /**
     * @return The endpoint URL for blob storage in the primary location.
     * 
     */
    public String primaryBlobEndpoint() {
        return this.primaryBlobEndpoint;
    }
    /**
     * @return The hostname with port if applicable for blob storage in the primary location.
     * 
     */
    public String primaryBlobHost() {
        return this.primaryBlobHost;
    }
    /**
     * @return The internet routing endpoint URL for blob storage in the primary location.
     * 
     */
    public String primaryBlobInternetEndpoint() {
        return this.primaryBlobInternetEndpoint;
    }
    /**
     * @return The internet routing hostname with port if applicable for blob storage in the primary location.
     * 
     */
    public String primaryBlobInternetHost() {
        return this.primaryBlobInternetHost;
    }
    /**
     * @return The microsoft routing endpoint URL for blob storage in the primary location.
     * 
     */
    public String primaryBlobMicrosoftEndpoint() {
        return this.primaryBlobMicrosoftEndpoint;
    }
    /**
     * @return The microsoft routing hostname with port if applicable for blob storage in the primary location.
     * 
     */
    public String primaryBlobMicrosoftHost() {
        return this.primaryBlobMicrosoftHost;
    }
    /**
     * @return The connection string associated with the primary location
     * 
     */
    public String primaryConnectionString() {
        return this.primaryConnectionString;
    }
    /**
     * @return The endpoint URL for DFS storage in the primary location.
     * 
     */
    public String primaryDfsEndpoint() {
        return this.primaryDfsEndpoint;
    }
    /**
     * @return The hostname with port if applicable for DFS storage in the primary location.
     * 
     */
    public String primaryDfsHost() {
        return this.primaryDfsHost;
    }
    /**
     * @return The internet routing endpoint URL for DFS storage in the primary location.
     * 
     */
    public String primaryDfsInternetEndpoint() {
        return this.primaryDfsInternetEndpoint;
    }
    /**
     * @return The internet routing hostname with port if applicable for DFS storage in the primary location.
     * 
     */
    public String primaryDfsInternetHost() {
        return this.primaryDfsInternetHost;
    }
    /**
     * @return The microsoft routing endpoint URL for DFS storage in the primary location.
     * 
     */
    public String primaryDfsMicrosoftEndpoint() {
        return this.primaryDfsMicrosoftEndpoint;
    }
    /**
     * @return The microsoft routing hostname with port if applicable for DFS storage in the primary location.
     * 
     */
    public String primaryDfsMicrosoftHost() {
        return this.primaryDfsMicrosoftHost;
    }
    /**
     * @return The endpoint URL for file storage in the primary location.
     * 
     */
    public String primaryFileEndpoint() {
        return this.primaryFileEndpoint;
    }
    /**
     * @return The hostname with port if applicable for file storage in the primary location.
     * 
     */
    public String primaryFileHost() {
        return this.primaryFileHost;
    }
    /**
     * @return The internet routing endpoint URL for file storage in the primary location.
     * 
     */
    public String primaryFileInternetEndpoint() {
        return this.primaryFileInternetEndpoint;
    }
    /**
     * @return The internet routing hostname with port if applicable for file storage in the primary location.
     * 
     */
    public String primaryFileInternetHost() {
        return this.primaryFileInternetHost;
    }
    /**
     * @return The microsoft routing endpoint URL for file storage in the primary location.
     * 
     */
    public String primaryFileMicrosoftEndpoint() {
        return this.primaryFileMicrosoftEndpoint;
    }
    /**
     * @return The microsoft routing hostname with port if applicable for file storage in the primary location.
     * 
     */
    public String primaryFileMicrosoftHost() {
        return this.primaryFileMicrosoftHost;
    }
    /**
     * @return The primary location of the Storage Account.
     * 
     */
    public String primaryLocation() {
        return this.primaryLocation;
    }
    /**
     * @return The endpoint URL for queue storage in the primary location.
     * 
     */
    public String primaryQueueEndpoint() {
        return this.primaryQueueEndpoint;
    }
    /**
     * @return The hostname with port if applicable for queue storage in the primary location.
     * 
     */
    public String primaryQueueHost() {
        return this.primaryQueueHost;
    }
    /**
     * @return The microsoft routing endpoint URL for queue storage in the primary location.
     * 
     */
    public String primaryQueueMicrosoftEndpoint() {
        return this.primaryQueueMicrosoftEndpoint;
    }
    /**
     * @return The microsoft routing hostname with port if applicable for queue storage in the primary location.
     * 
     */
    public String primaryQueueMicrosoftHost() {
        return this.primaryQueueMicrosoftHost;
    }
    /**
     * @return The endpoint URL for table storage in the primary location.
     * 
     */
    public String primaryTableEndpoint() {
        return this.primaryTableEndpoint;
    }
    /**
     * @return The hostname with port if applicable for table storage in the primary location.
     * 
     */
    public String primaryTableHost() {
        return this.primaryTableHost;
    }
    /**
     * @return The microsoft routing endpoint URL for table storage in the primary location.
     * 
     */
    public String primaryTableMicrosoftEndpoint() {
        return this.primaryTableMicrosoftEndpoint;
    }
    /**
     * @return The microsoft routing hostname with port if applicable for table storage in the primary location.
     * 
     */
    public String primaryTableMicrosoftHost() {
        return this.primaryTableMicrosoftHost;
    }
    /**
     * @return The endpoint URL for web storage in the primary location.
     * 
     */
    public String primaryWebEndpoint() {
        return this.primaryWebEndpoint;
    }
    /**
     * @return The hostname with port if applicable for web storage in the primary location.
     * 
     */
    public String primaryWebHost() {
        return this.primaryWebHost;
    }
    /**
     * @return The internet routing endpoint URL for web storage in the primary location.
     * 
     */
    public String primaryWebInternetEndpoint() {
        return this.primaryWebInternetEndpoint;
    }
    /**
     * @return The internet routing hostname with port if applicable for web storage in the primary location.
     * 
     */
    public String primaryWebInternetHost() {
        return this.primaryWebInternetHost;
    }
    /**
     * @return The microsoft routing endpoint URL for web storage in the primary location.
     * 
     */
    public String primaryWebMicrosoftEndpoint() {
        return this.primaryWebMicrosoftEndpoint;
    }
    /**
     * @return The microsoft routing hostname with port if applicable for web storage in the primary location.
     * 
     */
    public String primaryWebMicrosoftHost() {
        return this.primaryWebMicrosoftHost;
    }
    /**
     * @return The encryption key type of the queue.
     * 
     */
    public String queueEncryptionKeyType() {
        return this.queueEncryptionKeyType;
    }
    public Optional<String> resourceGroupName() {
        return Optional.ofNullable(this.resourceGroupName);
    }
    /**
     * @return The secondary access key for the Storage Account.
     * 
     */
    public String secondaryAccessKey() {
        return this.secondaryAccessKey;
    }
    /**
     * @return The connection string associated with the secondary blob location
     * 
     */
    public String secondaryBlobConnectionString() {
        return this.secondaryBlobConnectionString;
    }
    /**
     * @return The endpoint URL for blob storage in the secondary location.
     * 
     */
    public String secondaryBlobEndpoint() {
        return this.secondaryBlobEndpoint;
    }
    /**
     * @return The hostname with port if applicable for blob storage in the secondary location.
     * 
     */
    public String secondaryBlobHost() {
        return this.secondaryBlobHost;
    }
    /**
     * @return The internet routing endpoint URL for blob storage in the secondary location.
     * 
     */
    public String secondaryBlobInternetEndpoint() {
        return this.secondaryBlobInternetEndpoint;
    }
    /**
     * @return The internet routing hostname with port if applicable for blob storage in the secondary location.
     * 
     */
    public String secondaryBlobInternetHost() {
        return this.secondaryBlobInternetHost;
    }
    /**
     * @return The microsoft routing endpoint URL for blob storage in the secondary location.
     * 
     */
    public String secondaryBlobMicrosoftEndpoint() {
        return this.secondaryBlobMicrosoftEndpoint;
    }
    /**
     * @return The microsoft routing hostname with port if applicable for blob storage in the secondary location.
     * 
     */
    public String secondaryBlobMicrosoftHost() {
        return this.secondaryBlobMicrosoftHost;
    }
    /**
     * @return The connection string associated with the secondary location
     * 
     */
    public String secondaryConnectionString() {
        return this.secondaryConnectionString;
    }
    /**
     * @return The endpoint URL for DFS storage in the secondary location.
     * 
     */
    public String secondaryDfsEndpoint() {
        return this.secondaryDfsEndpoint;
    }
    /**
     * @return The hostname with port if applicable for DFS storage in the secondary location.
     * 
     */
    public String secondaryDfsHost() {
        return this.secondaryDfsHost;
    }
    /**
     * @return The internet routing endpoint URL for DFS storage in the secondary location.
     * 
     */
    public String secondaryDfsInternetEndpoint() {
        return this.secondaryDfsInternetEndpoint;
    }
    /**
     * @return The internet routing hostname with port if applicable for DFS storage in the secondary location.
     * 
     */
    public String secondaryDfsInternetHost() {
        return this.secondaryDfsInternetHost;
    }
    /**
     * @return The microsoft routing endpoint URL for DFS storage in the secondary location.
     * 
     */
    public String secondaryDfsMicrosoftEndpoint() {
        return this.secondaryDfsMicrosoftEndpoint;
    }
    /**
     * @return The microsoft routing hostname with port if applicable for DFS storage in the secondary location.
     * 
     */
    public String secondaryDfsMicrosoftHost() {
        return this.secondaryDfsMicrosoftHost;
    }
    /**
     * @return The endpoint URL for file storage in the secondary location.
     * 
     */
    public String secondaryFileEndpoint() {
        return this.secondaryFileEndpoint;
    }
    /**
     * @return The hostname with port if applicable for file storage in the secondary location.
     * 
     */
    public String secondaryFileHost() {
        return this.secondaryFileHost;
    }
    /**
     * @return The internet routing endpoint URL for file storage in the secondary location.
     * 
     */
    public String secondaryFileInternetEndpoint() {
        return this.secondaryFileInternetEndpoint;
    }
    /**
     * @return The internet routing hostname with port if applicable for file storage in the secondary location.
     * 
     */
    public String secondaryFileInternetHost() {
        return this.secondaryFileInternetHost;
    }
    /**
     * @return The microsoft routing endpoint URL for file storage in the secondary location.
     * 
     */
    public String secondaryFileMicrosoftEndpoint() {
        return this.secondaryFileMicrosoftEndpoint;
    }
    /**
     * @return The microsoft routing hostname with port if applicable for file storage in the secondary location.
     * 
     */
    public String secondaryFileMicrosoftHost() {
        return this.secondaryFileMicrosoftHost;
    }
    /**
     * @return The secondary location of the Storage Account.
     * 
     */
    public String secondaryLocation() {
        return this.secondaryLocation;
    }
    /**
     * @return The endpoint URL for queue storage in the secondary location.
     * 
     */
    public String secondaryQueueEndpoint() {
        return this.secondaryQueueEndpoint;
    }
    /**
     * @return The hostname with port if applicable for queue storage in the secondary location.
     * 
     */
    public String secondaryQueueHost() {
        return this.secondaryQueueHost;
    }
    /**
     * @return The microsoft routing endpoint URL for queue storage in the secondary location.
     * 
     */
    public String secondaryQueueMicrosoftEndpoint() {
        return this.secondaryQueueMicrosoftEndpoint;
    }
    /**
     * @return The microsoft routing hostname with port if applicable for queue storage in the secondary location.
     * 
     */
    public String secondaryQueueMicrosoftHost() {
        return this.secondaryQueueMicrosoftHost;
    }
    /**
     * @return The endpoint URL for table storage in the secondary location.
     * 
     */
    public String secondaryTableEndpoint() {
        return this.secondaryTableEndpoint;
    }
    /**
     * @return The hostname with port if applicable for table storage in the secondary location.
     * 
     */
    public String secondaryTableHost() {
        return this.secondaryTableHost;
    }
    /**
     * @return The microsoft routing endpoint URL for table storage in the secondary location.
     * 
     */
    public String secondaryTableMicrosoftEndpoint() {
        return this.secondaryTableMicrosoftEndpoint;
    }
    /**
     * @return The microsoft routing hostname with port if applicable for table storage in the secondary location.
     * 
     */
    public String secondaryTableMicrosoftHost() {
        return this.secondaryTableMicrosoftHost;
    }
    /**
     * @return The endpoint URL for web storage in the secondary location.
     * 
     */
    public String secondaryWebEndpoint() {
        return this.secondaryWebEndpoint;
    }
    /**
     * @return The hostname with port if applicable for web storage in the secondary location.
     * 
     */
    public String secondaryWebHost() {
        return this.secondaryWebHost;
    }
    /**
     * @return The internet routing endpoint URL for web storage in the secondary location.
     * 
     */
    public String secondaryWebInternetEndpoint() {
        return this.secondaryWebInternetEndpoint;
    }
    /**
     * @return The internet routing hostname with port if applicable for web storage in the secondary location.
     * 
     */
    public String secondaryWebInternetHost() {
        return this.secondaryWebInternetHost;
    }
    /**
     * @return The microsoft routing endpoint URL for web storage in the secondary location.
     * 
     */
    public String secondaryWebMicrosoftEndpoint() {
        return this.secondaryWebMicrosoftEndpoint;
    }
    /**
     * @return The microsoft routing hostname with port if applicable for web storage in the secondary location.
     * 
     */
    public String secondaryWebMicrosoftHost() {
        return this.secondaryWebMicrosoftHost;
    }
    /**
     * @return The encryption key type of the table.
     * 
     */
    public String tableEncryptionKeyType() {
        return this.tableEncryptionKeyType;
    }
    /**
     * @return A mapping of tags to assigned to the resource.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAccountResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accessTier;
        private String accountKind;
        private String accountReplicationType;
        private String accountTier;
        private Boolean allowNestedItemsToBePublic;
        private List<GetAccountAzureFilesAuthentication> azureFilesAuthentications;
        private List<GetAccountCustomDomain> customDomains;
        private Boolean enableHttpsTrafficOnly;
        private String id;
        private List<GetAccountIdentity> identities;
        private Boolean infrastructureEncryptionEnabled;
        private Boolean isHnsEnabled;
        private String location;
        private @Nullable String minTlsVersion;
        private String name;
        private Boolean nfsv3Enabled;
        private String primaryAccessKey;
        private String primaryBlobConnectionString;
        private String primaryBlobEndpoint;
        private String primaryBlobHost;
        private String primaryBlobInternetEndpoint;
        private String primaryBlobInternetHost;
        private String primaryBlobMicrosoftEndpoint;
        private String primaryBlobMicrosoftHost;
        private String primaryConnectionString;
        private String primaryDfsEndpoint;
        private String primaryDfsHost;
        private String primaryDfsInternetEndpoint;
        private String primaryDfsInternetHost;
        private String primaryDfsMicrosoftEndpoint;
        private String primaryDfsMicrosoftHost;
        private String primaryFileEndpoint;
        private String primaryFileHost;
        private String primaryFileInternetEndpoint;
        private String primaryFileInternetHost;
        private String primaryFileMicrosoftEndpoint;
        private String primaryFileMicrosoftHost;
        private String primaryLocation;
        private String primaryQueueEndpoint;
        private String primaryQueueHost;
        private String primaryQueueMicrosoftEndpoint;
        private String primaryQueueMicrosoftHost;
        private String primaryTableEndpoint;
        private String primaryTableHost;
        private String primaryTableMicrosoftEndpoint;
        private String primaryTableMicrosoftHost;
        private String primaryWebEndpoint;
        private String primaryWebHost;
        private String primaryWebInternetEndpoint;
        private String primaryWebInternetHost;
        private String primaryWebMicrosoftEndpoint;
        private String primaryWebMicrosoftHost;
        private String queueEncryptionKeyType;
        private @Nullable String resourceGroupName;
        private String secondaryAccessKey;
        private String secondaryBlobConnectionString;
        private String secondaryBlobEndpoint;
        private String secondaryBlobHost;
        private String secondaryBlobInternetEndpoint;
        private String secondaryBlobInternetHost;
        private String secondaryBlobMicrosoftEndpoint;
        private String secondaryBlobMicrosoftHost;
        private String secondaryConnectionString;
        private String secondaryDfsEndpoint;
        private String secondaryDfsHost;
        private String secondaryDfsInternetEndpoint;
        private String secondaryDfsInternetHost;
        private String secondaryDfsMicrosoftEndpoint;
        private String secondaryDfsMicrosoftHost;
        private String secondaryFileEndpoint;
        private String secondaryFileHost;
        private String secondaryFileInternetEndpoint;
        private String secondaryFileInternetHost;
        private String secondaryFileMicrosoftEndpoint;
        private String secondaryFileMicrosoftHost;
        private String secondaryLocation;
        private String secondaryQueueEndpoint;
        private String secondaryQueueHost;
        private String secondaryQueueMicrosoftEndpoint;
        private String secondaryQueueMicrosoftHost;
        private String secondaryTableEndpoint;
        private String secondaryTableHost;
        private String secondaryTableMicrosoftEndpoint;
        private String secondaryTableMicrosoftHost;
        private String secondaryWebEndpoint;
        private String secondaryWebHost;
        private String secondaryWebInternetEndpoint;
        private String secondaryWebInternetHost;
        private String secondaryWebMicrosoftEndpoint;
        private String secondaryWebMicrosoftHost;
        private String tableEncryptionKeyType;
        private Map<String,String> tags;
        public Builder() {}
        public Builder(GetAccountResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessTier = defaults.accessTier;
    	      this.accountKind = defaults.accountKind;
    	      this.accountReplicationType = defaults.accountReplicationType;
    	      this.accountTier = defaults.accountTier;
    	      this.allowNestedItemsToBePublic = defaults.allowNestedItemsToBePublic;
    	      this.azureFilesAuthentications = defaults.azureFilesAuthentications;
    	      this.customDomains = defaults.customDomains;
    	      this.enableHttpsTrafficOnly = defaults.enableHttpsTrafficOnly;
    	      this.id = defaults.id;
    	      this.identities = defaults.identities;
    	      this.infrastructureEncryptionEnabled = defaults.infrastructureEncryptionEnabled;
    	      this.isHnsEnabled = defaults.isHnsEnabled;
    	      this.location = defaults.location;
    	      this.minTlsVersion = defaults.minTlsVersion;
    	      this.name = defaults.name;
    	      this.nfsv3Enabled = defaults.nfsv3Enabled;
    	      this.primaryAccessKey = defaults.primaryAccessKey;
    	      this.primaryBlobConnectionString = defaults.primaryBlobConnectionString;
    	      this.primaryBlobEndpoint = defaults.primaryBlobEndpoint;
    	      this.primaryBlobHost = defaults.primaryBlobHost;
    	      this.primaryBlobInternetEndpoint = defaults.primaryBlobInternetEndpoint;
    	      this.primaryBlobInternetHost = defaults.primaryBlobInternetHost;
    	      this.primaryBlobMicrosoftEndpoint = defaults.primaryBlobMicrosoftEndpoint;
    	      this.primaryBlobMicrosoftHost = defaults.primaryBlobMicrosoftHost;
    	      this.primaryConnectionString = defaults.primaryConnectionString;
    	      this.primaryDfsEndpoint = defaults.primaryDfsEndpoint;
    	      this.primaryDfsHost = defaults.primaryDfsHost;
    	      this.primaryDfsInternetEndpoint = defaults.primaryDfsInternetEndpoint;
    	      this.primaryDfsInternetHost = defaults.primaryDfsInternetHost;
    	      this.primaryDfsMicrosoftEndpoint = defaults.primaryDfsMicrosoftEndpoint;
    	      this.primaryDfsMicrosoftHost = defaults.primaryDfsMicrosoftHost;
    	      this.primaryFileEndpoint = defaults.primaryFileEndpoint;
    	      this.primaryFileHost = defaults.primaryFileHost;
    	      this.primaryFileInternetEndpoint = defaults.primaryFileInternetEndpoint;
    	      this.primaryFileInternetHost = defaults.primaryFileInternetHost;
    	      this.primaryFileMicrosoftEndpoint = defaults.primaryFileMicrosoftEndpoint;
    	      this.primaryFileMicrosoftHost = defaults.primaryFileMicrosoftHost;
    	      this.primaryLocation = defaults.primaryLocation;
    	      this.primaryQueueEndpoint = defaults.primaryQueueEndpoint;
    	      this.primaryQueueHost = defaults.primaryQueueHost;
    	      this.primaryQueueMicrosoftEndpoint = defaults.primaryQueueMicrosoftEndpoint;
    	      this.primaryQueueMicrosoftHost = defaults.primaryQueueMicrosoftHost;
    	      this.primaryTableEndpoint = defaults.primaryTableEndpoint;
    	      this.primaryTableHost = defaults.primaryTableHost;
    	      this.primaryTableMicrosoftEndpoint = defaults.primaryTableMicrosoftEndpoint;
    	      this.primaryTableMicrosoftHost = defaults.primaryTableMicrosoftHost;
    	      this.primaryWebEndpoint = defaults.primaryWebEndpoint;
    	      this.primaryWebHost = defaults.primaryWebHost;
    	      this.primaryWebInternetEndpoint = defaults.primaryWebInternetEndpoint;
    	      this.primaryWebInternetHost = defaults.primaryWebInternetHost;
    	      this.primaryWebMicrosoftEndpoint = defaults.primaryWebMicrosoftEndpoint;
    	      this.primaryWebMicrosoftHost = defaults.primaryWebMicrosoftHost;
    	      this.queueEncryptionKeyType = defaults.queueEncryptionKeyType;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.secondaryAccessKey = defaults.secondaryAccessKey;
    	      this.secondaryBlobConnectionString = defaults.secondaryBlobConnectionString;
    	      this.secondaryBlobEndpoint = defaults.secondaryBlobEndpoint;
    	      this.secondaryBlobHost = defaults.secondaryBlobHost;
    	      this.secondaryBlobInternetEndpoint = defaults.secondaryBlobInternetEndpoint;
    	      this.secondaryBlobInternetHost = defaults.secondaryBlobInternetHost;
    	      this.secondaryBlobMicrosoftEndpoint = defaults.secondaryBlobMicrosoftEndpoint;
    	      this.secondaryBlobMicrosoftHost = defaults.secondaryBlobMicrosoftHost;
    	      this.secondaryConnectionString = defaults.secondaryConnectionString;
    	      this.secondaryDfsEndpoint = defaults.secondaryDfsEndpoint;
    	      this.secondaryDfsHost = defaults.secondaryDfsHost;
    	      this.secondaryDfsInternetEndpoint = defaults.secondaryDfsInternetEndpoint;
    	      this.secondaryDfsInternetHost = defaults.secondaryDfsInternetHost;
    	      this.secondaryDfsMicrosoftEndpoint = defaults.secondaryDfsMicrosoftEndpoint;
    	      this.secondaryDfsMicrosoftHost = defaults.secondaryDfsMicrosoftHost;
    	      this.secondaryFileEndpoint = defaults.secondaryFileEndpoint;
    	      this.secondaryFileHost = defaults.secondaryFileHost;
    	      this.secondaryFileInternetEndpoint = defaults.secondaryFileInternetEndpoint;
    	      this.secondaryFileInternetHost = defaults.secondaryFileInternetHost;
    	      this.secondaryFileMicrosoftEndpoint = defaults.secondaryFileMicrosoftEndpoint;
    	      this.secondaryFileMicrosoftHost = defaults.secondaryFileMicrosoftHost;
    	      this.secondaryLocation = defaults.secondaryLocation;
    	      this.secondaryQueueEndpoint = defaults.secondaryQueueEndpoint;
    	      this.secondaryQueueHost = defaults.secondaryQueueHost;
    	      this.secondaryQueueMicrosoftEndpoint = defaults.secondaryQueueMicrosoftEndpoint;
    	      this.secondaryQueueMicrosoftHost = defaults.secondaryQueueMicrosoftHost;
    	      this.secondaryTableEndpoint = defaults.secondaryTableEndpoint;
    	      this.secondaryTableHost = defaults.secondaryTableHost;
    	      this.secondaryTableMicrosoftEndpoint = defaults.secondaryTableMicrosoftEndpoint;
    	      this.secondaryTableMicrosoftHost = defaults.secondaryTableMicrosoftHost;
    	      this.secondaryWebEndpoint = defaults.secondaryWebEndpoint;
    	      this.secondaryWebHost = defaults.secondaryWebHost;
    	      this.secondaryWebInternetEndpoint = defaults.secondaryWebInternetEndpoint;
    	      this.secondaryWebInternetHost = defaults.secondaryWebInternetHost;
    	      this.secondaryWebMicrosoftEndpoint = defaults.secondaryWebMicrosoftEndpoint;
    	      this.secondaryWebMicrosoftHost = defaults.secondaryWebMicrosoftHost;
    	      this.tableEncryptionKeyType = defaults.tableEncryptionKeyType;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder accessTier(String accessTier) {
            this.accessTier = Objects.requireNonNull(accessTier);
            return this;
        }
        @CustomType.Setter
        public Builder accountKind(String accountKind) {
            this.accountKind = Objects.requireNonNull(accountKind);
            return this;
        }
        @CustomType.Setter
        public Builder accountReplicationType(String accountReplicationType) {
            this.accountReplicationType = Objects.requireNonNull(accountReplicationType);
            return this;
        }
        @CustomType.Setter
        public Builder accountTier(String accountTier) {
            this.accountTier = Objects.requireNonNull(accountTier);
            return this;
        }
        @CustomType.Setter
        public Builder allowNestedItemsToBePublic(Boolean allowNestedItemsToBePublic) {
            this.allowNestedItemsToBePublic = Objects.requireNonNull(allowNestedItemsToBePublic);
            return this;
        }
        @CustomType.Setter
        public Builder azureFilesAuthentications(List<GetAccountAzureFilesAuthentication> azureFilesAuthentications) {
            this.azureFilesAuthentications = Objects.requireNonNull(azureFilesAuthentications);
            return this;
        }
        public Builder azureFilesAuthentications(GetAccountAzureFilesAuthentication... azureFilesAuthentications) {
            return azureFilesAuthentications(List.of(azureFilesAuthentications));
        }
        @CustomType.Setter
        public Builder customDomains(List<GetAccountCustomDomain> customDomains) {
            this.customDomains = Objects.requireNonNull(customDomains);
            return this;
        }
        public Builder customDomains(GetAccountCustomDomain... customDomains) {
            return customDomains(List.of(customDomains));
        }
        @CustomType.Setter
        public Builder enableHttpsTrafficOnly(Boolean enableHttpsTrafficOnly) {
            this.enableHttpsTrafficOnly = Objects.requireNonNull(enableHttpsTrafficOnly);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder identities(List<GetAccountIdentity> identities) {
            this.identities = Objects.requireNonNull(identities);
            return this;
        }
        public Builder identities(GetAccountIdentity... identities) {
            return identities(List.of(identities));
        }
        @CustomType.Setter
        public Builder infrastructureEncryptionEnabled(Boolean infrastructureEncryptionEnabled) {
            this.infrastructureEncryptionEnabled = Objects.requireNonNull(infrastructureEncryptionEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder isHnsEnabled(Boolean isHnsEnabled) {
            this.isHnsEnabled = Objects.requireNonNull(isHnsEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder minTlsVersion(@Nullable String minTlsVersion) {
            this.minTlsVersion = minTlsVersion;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder nfsv3Enabled(Boolean nfsv3Enabled) {
            this.nfsv3Enabled = Objects.requireNonNull(nfsv3Enabled);
            return this;
        }
        @CustomType.Setter
        public Builder primaryAccessKey(String primaryAccessKey) {
            this.primaryAccessKey = Objects.requireNonNull(primaryAccessKey);
            return this;
        }
        @CustomType.Setter
        public Builder primaryBlobConnectionString(String primaryBlobConnectionString) {
            this.primaryBlobConnectionString = Objects.requireNonNull(primaryBlobConnectionString);
            return this;
        }
        @CustomType.Setter
        public Builder primaryBlobEndpoint(String primaryBlobEndpoint) {
            this.primaryBlobEndpoint = Objects.requireNonNull(primaryBlobEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder primaryBlobHost(String primaryBlobHost) {
            this.primaryBlobHost = Objects.requireNonNull(primaryBlobHost);
            return this;
        }
        @CustomType.Setter
        public Builder primaryBlobInternetEndpoint(String primaryBlobInternetEndpoint) {
            this.primaryBlobInternetEndpoint = Objects.requireNonNull(primaryBlobInternetEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder primaryBlobInternetHost(String primaryBlobInternetHost) {
            this.primaryBlobInternetHost = Objects.requireNonNull(primaryBlobInternetHost);
            return this;
        }
        @CustomType.Setter
        public Builder primaryBlobMicrosoftEndpoint(String primaryBlobMicrosoftEndpoint) {
            this.primaryBlobMicrosoftEndpoint = Objects.requireNonNull(primaryBlobMicrosoftEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder primaryBlobMicrosoftHost(String primaryBlobMicrosoftHost) {
            this.primaryBlobMicrosoftHost = Objects.requireNonNull(primaryBlobMicrosoftHost);
            return this;
        }
        @CustomType.Setter
        public Builder primaryConnectionString(String primaryConnectionString) {
            this.primaryConnectionString = Objects.requireNonNull(primaryConnectionString);
            return this;
        }
        @CustomType.Setter
        public Builder primaryDfsEndpoint(String primaryDfsEndpoint) {
            this.primaryDfsEndpoint = Objects.requireNonNull(primaryDfsEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder primaryDfsHost(String primaryDfsHost) {
            this.primaryDfsHost = Objects.requireNonNull(primaryDfsHost);
            return this;
        }
        @CustomType.Setter
        public Builder primaryDfsInternetEndpoint(String primaryDfsInternetEndpoint) {
            this.primaryDfsInternetEndpoint = Objects.requireNonNull(primaryDfsInternetEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder primaryDfsInternetHost(String primaryDfsInternetHost) {
            this.primaryDfsInternetHost = Objects.requireNonNull(primaryDfsInternetHost);
            return this;
        }
        @CustomType.Setter
        public Builder primaryDfsMicrosoftEndpoint(String primaryDfsMicrosoftEndpoint) {
            this.primaryDfsMicrosoftEndpoint = Objects.requireNonNull(primaryDfsMicrosoftEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder primaryDfsMicrosoftHost(String primaryDfsMicrosoftHost) {
            this.primaryDfsMicrosoftHost = Objects.requireNonNull(primaryDfsMicrosoftHost);
            return this;
        }
        @CustomType.Setter
        public Builder primaryFileEndpoint(String primaryFileEndpoint) {
            this.primaryFileEndpoint = Objects.requireNonNull(primaryFileEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder primaryFileHost(String primaryFileHost) {
            this.primaryFileHost = Objects.requireNonNull(primaryFileHost);
            return this;
        }
        @CustomType.Setter
        public Builder primaryFileInternetEndpoint(String primaryFileInternetEndpoint) {
            this.primaryFileInternetEndpoint = Objects.requireNonNull(primaryFileInternetEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder primaryFileInternetHost(String primaryFileInternetHost) {
            this.primaryFileInternetHost = Objects.requireNonNull(primaryFileInternetHost);
            return this;
        }
        @CustomType.Setter
        public Builder primaryFileMicrosoftEndpoint(String primaryFileMicrosoftEndpoint) {
            this.primaryFileMicrosoftEndpoint = Objects.requireNonNull(primaryFileMicrosoftEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder primaryFileMicrosoftHost(String primaryFileMicrosoftHost) {
            this.primaryFileMicrosoftHost = Objects.requireNonNull(primaryFileMicrosoftHost);
            return this;
        }
        @CustomType.Setter
        public Builder primaryLocation(String primaryLocation) {
            this.primaryLocation = Objects.requireNonNull(primaryLocation);
            return this;
        }
        @CustomType.Setter
        public Builder primaryQueueEndpoint(String primaryQueueEndpoint) {
            this.primaryQueueEndpoint = Objects.requireNonNull(primaryQueueEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder primaryQueueHost(String primaryQueueHost) {
            this.primaryQueueHost = Objects.requireNonNull(primaryQueueHost);
            return this;
        }
        @CustomType.Setter
        public Builder primaryQueueMicrosoftEndpoint(String primaryQueueMicrosoftEndpoint) {
            this.primaryQueueMicrosoftEndpoint = Objects.requireNonNull(primaryQueueMicrosoftEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder primaryQueueMicrosoftHost(String primaryQueueMicrosoftHost) {
            this.primaryQueueMicrosoftHost = Objects.requireNonNull(primaryQueueMicrosoftHost);
            return this;
        }
        @CustomType.Setter
        public Builder primaryTableEndpoint(String primaryTableEndpoint) {
            this.primaryTableEndpoint = Objects.requireNonNull(primaryTableEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder primaryTableHost(String primaryTableHost) {
            this.primaryTableHost = Objects.requireNonNull(primaryTableHost);
            return this;
        }
        @CustomType.Setter
        public Builder primaryTableMicrosoftEndpoint(String primaryTableMicrosoftEndpoint) {
            this.primaryTableMicrosoftEndpoint = Objects.requireNonNull(primaryTableMicrosoftEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder primaryTableMicrosoftHost(String primaryTableMicrosoftHost) {
            this.primaryTableMicrosoftHost = Objects.requireNonNull(primaryTableMicrosoftHost);
            return this;
        }
        @CustomType.Setter
        public Builder primaryWebEndpoint(String primaryWebEndpoint) {
            this.primaryWebEndpoint = Objects.requireNonNull(primaryWebEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder primaryWebHost(String primaryWebHost) {
            this.primaryWebHost = Objects.requireNonNull(primaryWebHost);
            return this;
        }
        @CustomType.Setter
        public Builder primaryWebInternetEndpoint(String primaryWebInternetEndpoint) {
            this.primaryWebInternetEndpoint = Objects.requireNonNull(primaryWebInternetEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder primaryWebInternetHost(String primaryWebInternetHost) {
            this.primaryWebInternetHost = Objects.requireNonNull(primaryWebInternetHost);
            return this;
        }
        @CustomType.Setter
        public Builder primaryWebMicrosoftEndpoint(String primaryWebMicrosoftEndpoint) {
            this.primaryWebMicrosoftEndpoint = Objects.requireNonNull(primaryWebMicrosoftEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder primaryWebMicrosoftHost(String primaryWebMicrosoftHost) {
            this.primaryWebMicrosoftHost = Objects.requireNonNull(primaryWebMicrosoftHost);
            return this;
        }
        @CustomType.Setter
        public Builder queueEncryptionKeyType(String queueEncryptionKeyType) {
            this.queueEncryptionKeyType = Objects.requireNonNull(queueEncryptionKeyType);
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupName(@Nullable String resourceGroupName) {
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder secondaryAccessKey(String secondaryAccessKey) {
            this.secondaryAccessKey = Objects.requireNonNull(secondaryAccessKey);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryBlobConnectionString(String secondaryBlobConnectionString) {
            this.secondaryBlobConnectionString = Objects.requireNonNull(secondaryBlobConnectionString);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryBlobEndpoint(String secondaryBlobEndpoint) {
            this.secondaryBlobEndpoint = Objects.requireNonNull(secondaryBlobEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryBlobHost(String secondaryBlobHost) {
            this.secondaryBlobHost = Objects.requireNonNull(secondaryBlobHost);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryBlobInternetEndpoint(String secondaryBlobInternetEndpoint) {
            this.secondaryBlobInternetEndpoint = Objects.requireNonNull(secondaryBlobInternetEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryBlobInternetHost(String secondaryBlobInternetHost) {
            this.secondaryBlobInternetHost = Objects.requireNonNull(secondaryBlobInternetHost);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryBlobMicrosoftEndpoint(String secondaryBlobMicrosoftEndpoint) {
            this.secondaryBlobMicrosoftEndpoint = Objects.requireNonNull(secondaryBlobMicrosoftEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryBlobMicrosoftHost(String secondaryBlobMicrosoftHost) {
            this.secondaryBlobMicrosoftHost = Objects.requireNonNull(secondaryBlobMicrosoftHost);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryConnectionString(String secondaryConnectionString) {
            this.secondaryConnectionString = Objects.requireNonNull(secondaryConnectionString);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryDfsEndpoint(String secondaryDfsEndpoint) {
            this.secondaryDfsEndpoint = Objects.requireNonNull(secondaryDfsEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryDfsHost(String secondaryDfsHost) {
            this.secondaryDfsHost = Objects.requireNonNull(secondaryDfsHost);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryDfsInternetEndpoint(String secondaryDfsInternetEndpoint) {
            this.secondaryDfsInternetEndpoint = Objects.requireNonNull(secondaryDfsInternetEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryDfsInternetHost(String secondaryDfsInternetHost) {
            this.secondaryDfsInternetHost = Objects.requireNonNull(secondaryDfsInternetHost);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryDfsMicrosoftEndpoint(String secondaryDfsMicrosoftEndpoint) {
            this.secondaryDfsMicrosoftEndpoint = Objects.requireNonNull(secondaryDfsMicrosoftEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryDfsMicrosoftHost(String secondaryDfsMicrosoftHost) {
            this.secondaryDfsMicrosoftHost = Objects.requireNonNull(secondaryDfsMicrosoftHost);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryFileEndpoint(String secondaryFileEndpoint) {
            this.secondaryFileEndpoint = Objects.requireNonNull(secondaryFileEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryFileHost(String secondaryFileHost) {
            this.secondaryFileHost = Objects.requireNonNull(secondaryFileHost);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryFileInternetEndpoint(String secondaryFileInternetEndpoint) {
            this.secondaryFileInternetEndpoint = Objects.requireNonNull(secondaryFileInternetEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryFileInternetHost(String secondaryFileInternetHost) {
            this.secondaryFileInternetHost = Objects.requireNonNull(secondaryFileInternetHost);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryFileMicrosoftEndpoint(String secondaryFileMicrosoftEndpoint) {
            this.secondaryFileMicrosoftEndpoint = Objects.requireNonNull(secondaryFileMicrosoftEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryFileMicrosoftHost(String secondaryFileMicrosoftHost) {
            this.secondaryFileMicrosoftHost = Objects.requireNonNull(secondaryFileMicrosoftHost);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryLocation(String secondaryLocation) {
            this.secondaryLocation = Objects.requireNonNull(secondaryLocation);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryQueueEndpoint(String secondaryQueueEndpoint) {
            this.secondaryQueueEndpoint = Objects.requireNonNull(secondaryQueueEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryQueueHost(String secondaryQueueHost) {
            this.secondaryQueueHost = Objects.requireNonNull(secondaryQueueHost);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryQueueMicrosoftEndpoint(String secondaryQueueMicrosoftEndpoint) {
            this.secondaryQueueMicrosoftEndpoint = Objects.requireNonNull(secondaryQueueMicrosoftEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryQueueMicrosoftHost(String secondaryQueueMicrosoftHost) {
            this.secondaryQueueMicrosoftHost = Objects.requireNonNull(secondaryQueueMicrosoftHost);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryTableEndpoint(String secondaryTableEndpoint) {
            this.secondaryTableEndpoint = Objects.requireNonNull(secondaryTableEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryTableHost(String secondaryTableHost) {
            this.secondaryTableHost = Objects.requireNonNull(secondaryTableHost);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryTableMicrosoftEndpoint(String secondaryTableMicrosoftEndpoint) {
            this.secondaryTableMicrosoftEndpoint = Objects.requireNonNull(secondaryTableMicrosoftEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryTableMicrosoftHost(String secondaryTableMicrosoftHost) {
            this.secondaryTableMicrosoftHost = Objects.requireNonNull(secondaryTableMicrosoftHost);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryWebEndpoint(String secondaryWebEndpoint) {
            this.secondaryWebEndpoint = Objects.requireNonNull(secondaryWebEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryWebHost(String secondaryWebHost) {
            this.secondaryWebHost = Objects.requireNonNull(secondaryWebHost);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryWebInternetEndpoint(String secondaryWebInternetEndpoint) {
            this.secondaryWebInternetEndpoint = Objects.requireNonNull(secondaryWebInternetEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryWebInternetHost(String secondaryWebInternetHost) {
            this.secondaryWebInternetHost = Objects.requireNonNull(secondaryWebInternetHost);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryWebMicrosoftEndpoint(String secondaryWebMicrosoftEndpoint) {
            this.secondaryWebMicrosoftEndpoint = Objects.requireNonNull(secondaryWebMicrosoftEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryWebMicrosoftHost(String secondaryWebMicrosoftHost) {
            this.secondaryWebMicrosoftHost = Objects.requireNonNull(secondaryWebMicrosoftHost);
            return this;
        }
        @CustomType.Setter
        public Builder tableEncryptionKeyType(String tableEncryptionKeyType) {
            this.tableEncryptionKeyType = Objects.requireNonNull(tableEncryptionKeyType);
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public GetAccountResult build() {
            final var _resultValue = new GetAccountResult();
            _resultValue.accessTier = accessTier;
            _resultValue.accountKind = accountKind;
            _resultValue.accountReplicationType = accountReplicationType;
            _resultValue.accountTier = accountTier;
            _resultValue.allowNestedItemsToBePublic = allowNestedItemsToBePublic;
            _resultValue.azureFilesAuthentications = azureFilesAuthentications;
            _resultValue.customDomains = customDomains;
            _resultValue.enableHttpsTrafficOnly = enableHttpsTrafficOnly;
            _resultValue.id = id;
            _resultValue.identities = identities;
            _resultValue.infrastructureEncryptionEnabled = infrastructureEncryptionEnabled;
            _resultValue.isHnsEnabled = isHnsEnabled;
            _resultValue.location = location;
            _resultValue.minTlsVersion = minTlsVersion;
            _resultValue.name = name;
            _resultValue.nfsv3Enabled = nfsv3Enabled;
            _resultValue.primaryAccessKey = primaryAccessKey;
            _resultValue.primaryBlobConnectionString = primaryBlobConnectionString;
            _resultValue.primaryBlobEndpoint = primaryBlobEndpoint;
            _resultValue.primaryBlobHost = primaryBlobHost;
            _resultValue.primaryBlobInternetEndpoint = primaryBlobInternetEndpoint;
            _resultValue.primaryBlobInternetHost = primaryBlobInternetHost;
            _resultValue.primaryBlobMicrosoftEndpoint = primaryBlobMicrosoftEndpoint;
            _resultValue.primaryBlobMicrosoftHost = primaryBlobMicrosoftHost;
            _resultValue.primaryConnectionString = primaryConnectionString;
            _resultValue.primaryDfsEndpoint = primaryDfsEndpoint;
            _resultValue.primaryDfsHost = primaryDfsHost;
            _resultValue.primaryDfsInternetEndpoint = primaryDfsInternetEndpoint;
            _resultValue.primaryDfsInternetHost = primaryDfsInternetHost;
            _resultValue.primaryDfsMicrosoftEndpoint = primaryDfsMicrosoftEndpoint;
            _resultValue.primaryDfsMicrosoftHost = primaryDfsMicrosoftHost;
            _resultValue.primaryFileEndpoint = primaryFileEndpoint;
            _resultValue.primaryFileHost = primaryFileHost;
            _resultValue.primaryFileInternetEndpoint = primaryFileInternetEndpoint;
            _resultValue.primaryFileInternetHost = primaryFileInternetHost;
            _resultValue.primaryFileMicrosoftEndpoint = primaryFileMicrosoftEndpoint;
            _resultValue.primaryFileMicrosoftHost = primaryFileMicrosoftHost;
            _resultValue.primaryLocation = primaryLocation;
            _resultValue.primaryQueueEndpoint = primaryQueueEndpoint;
            _resultValue.primaryQueueHost = primaryQueueHost;
            _resultValue.primaryQueueMicrosoftEndpoint = primaryQueueMicrosoftEndpoint;
            _resultValue.primaryQueueMicrosoftHost = primaryQueueMicrosoftHost;
            _resultValue.primaryTableEndpoint = primaryTableEndpoint;
            _resultValue.primaryTableHost = primaryTableHost;
            _resultValue.primaryTableMicrosoftEndpoint = primaryTableMicrosoftEndpoint;
            _resultValue.primaryTableMicrosoftHost = primaryTableMicrosoftHost;
            _resultValue.primaryWebEndpoint = primaryWebEndpoint;
            _resultValue.primaryWebHost = primaryWebHost;
            _resultValue.primaryWebInternetEndpoint = primaryWebInternetEndpoint;
            _resultValue.primaryWebInternetHost = primaryWebInternetHost;
            _resultValue.primaryWebMicrosoftEndpoint = primaryWebMicrosoftEndpoint;
            _resultValue.primaryWebMicrosoftHost = primaryWebMicrosoftHost;
            _resultValue.queueEncryptionKeyType = queueEncryptionKeyType;
            _resultValue.resourceGroupName = resourceGroupName;
            _resultValue.secondaryAccessKey = secondaryAccessKey;
            _resultValue.secondaryBlobConnectionString = secondaryBlobConnectionString;
            _resultValue.secondaryBlobEndpoint = secondaryBlobEndpoint;
            _resultValue.secondaryBlobHost = secondaryBlobHost;
            _resultValue.secondaryBlobInternetEndpoint = secondaryBlobInternetEndpoint;
            _resultValue.secondaryBlobInternetHost = secondaryBlobInternetHost;
            _resultValue.secondaryBlobMicrosoftEndpoint = secondaryBlobMicrosoftEndpoint;
            _resultValue.secondaryBlobMicrosoftHost = secondaryBlobMicrosoftHost;
            _resultValue.secondaryConnectionString = secondaryConnectionString;
            _resultValue.secondaryDfsEndpoint = secondaryDfsEndpoint;
            _resultValue.secondaryDfsHost = secondaryDfsHost;
            _resultValue.secondaryDfsInternetEndpoint = secondaryDfsInternetEndpoint;
            _resultValue.secondaryDfsInternetHost = secondaryDfsInternetHost;
            _resultValue.secondaryDfsMicrosoftEndpoint = secondaryDfsMicrosoftEndpoint;
            _resultValue.secondaryDfsMicrosoftHost = secondaryDfsMicrosoftHost;
            _resultValue.secondaryFileEndpoint = secondaryFileEndpoint;
            _resultValue.secondaryFileHost = secondaryFileHost;
            _resultValue.secondaryFileInternetEndpoint = secondaryFileInternetEndpoint;
            _resultValue.secondaryFileInternetHost = secondaryFileInternetHost;
            _resultValue.secondaryFileMicrosoftEndpoint = secondaryFileMicrosoftEndpoint;
            _resultValue.secondaryFileMicrosoftHost = secondaryFileMicrosoftHost;
            _resultValue.secondaryLocation = secondaryLocation;
            _resultValue.secondaryQueueEndpoint = secondaryQueueEndpoint;
            _resultValue.secondaryQueueHost = secondaryQueueHost;
            _resultValue.secondaryQueueMicrosoftEndpoint = secondaryQueueMicrosoftEndpoint;
            _resultValue.secondaryQueueMicrosoftHost = secondaryQueueMicrosoftHost;
            _resultValue.secondaryTableEndpoint = secondaryTableEndpoint;
            _resultValue.secondaryTableHost = secondaryTableHost;
            _resultValue.secondaryTableMicrosoftEndpoint = secondaryTableMicrosoftEndpoint;
            _resultValue.secondaryTableMicrosoftHost = secondaryTableMicrosoftHost;
            _resultValue.secondaryWebEndpoint = secondaryWebEndpoint;
            _resultValue.secondaryWebHost = secondaryWebHost;
            _resultValue.secondaryWebInternetEndpoint = secondaryWebInternetEndpoint;
            _resultValue.secondaryWebInternetHost = secondaryWebInternetHost;
            _resultValue.secondaryWebMicrosoftEndpoint = secondaryWebMicrosoftEndpoint;
            _resultValue.secondaryWebMicrosoftHost = secondaryWebMicrosoftHost;
            _resultValue.tableEncryptionKeyType = tableEncryptionKeyType;
            _resultValue.tags = tags;
            return _resultValue;
        }
    }
}
