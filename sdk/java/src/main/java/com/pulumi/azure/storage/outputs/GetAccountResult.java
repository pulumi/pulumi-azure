// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.storage.outputs;

import com.pulumi.azure.storage.outputs.GetAccountCustomDomain;
import com.pulumi.azure.storage.outputs.GetAccountIdentity;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetAccountResult {
    /**
     * @return The access tier for `BlobStorage` accounts.
     * 
     */
    private String accessTier;
    /**
     * @return The Kind of account.
     * 
     */
    private String accountKind;
    /**
     * @return The type of replication used for this storage account.
     * 
     */
    private String accountReplicationType;
    /**
     * @return The Tier of this storage account.
     * 
     */
    private String accountTier;
    /**
     * @return Can nested items in the storage account opt into allowing public access?
     * 
     */
    private Boolean allowNestedItemsToBePublic;
    /**
     * @return A `custom_domain` block as documented below.
     * 
     */
    private List<GetAccountCustomDomain> customDomains;
    /**
     * @return Is traffic only allowed via HTTPS? See [here](https://docs.microsoft.com/azure/storage/storage-require-secure-transfer/)
     * for more information.
     * 
     */
    private Boolean enableHttpsTrafficOnly;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return An `identity` block as documented below.
     * 
     */
    private List<GetAccountIdentity> identities;
    /**
     * @return Is infrastructure encryption enabled? See [here](https://docs.microsoft.com/azure/storage/common/infrastructure-encryption-enable/)
     * for more information.
     * ---
     * 
     */
    private Boolean infrastructureEncryptionEnabled;
    /**
     * @return Is Hierarchical Namespace enabled?
     * 
     */
    private Boolean isHnsEnabled;
    /**
     * @return The Azure location where the Storage Account exists
     * 
     */
    private String location;
    /**
     * @return The minimum supported TLS version for this storage account.
     * 
     */
    private @Nullable String minTlsVersion;
    /**
     * @return The Custom Domain Name used for the Storage Account.
     * 
     */
    private String name;
    /**
     * @return Is NFSv3 protocol enabled?
     * 
     */
    private Boolean nfsv3Enabled;
    /**
     * @return The primary access key for the Storage Account.
     * 
     */
    private String primaryAccessKey;
    /**
     * @return The connection string associated with the primary blob location
     * 
     */
    private String primaryBlobConnectionString;
    /**
     * @return The endpoint URL for blob storage in the primary location.
     * 
     */
    private String primaryBlobEndpoint;
    /**
     * @return The hostname with port if applicable for blob storage in the primary location.
     * 
     */
    private String primaryBlobHost;
    /**
     * @return The connection string associated with the primary location
     * 
     */
    private String primaryConnectionString;
    /**
     * @return The endpoint URL for DFS storage in the primary location.
     * 
     */
    private String primaryDfsEndpoint;
    /**
     * @return The hostname with port if applicable for DFS storage in the primary location.
     * 
     */
    private String primaryDfsHost;
    /**
     * @return The endpoint URL for file storage in the primary location.
     * 
     */
    private String primaryFileEndpoint;
    /**
     * @return The hostname with port if applicable for file storage in the primary location.
     * 
     */
    private String primaryFileHost;
    /**
     * @return The primary location of the Storage Account.
     * 
     */
    private String primaryLocation;
    /**
     * @return The endpoint URL for queue storage in the primary location.
     * 
     */
    private String primaryQueueEndpoint;
    /**
     * @return The hostname with port if applicable for queue storage in the primary location.
     * 
     */
    private String primaryQueueHost;
    /**
     * @return The endpoint URL for table storage in the primary location.
     * 
     */
    private String primaryTableEndpoint;
    /**
     * @return The hostname with port if applicable for table storage in the primary location.
     * 
     */
    private String primaryTableHost;
    /**
     * @return The endpoint URL for web storage in the primary location.
     * 
     */
    private String primaryWebEndpoint;
    /**
     * @return The hostname with port if applicable for web storage in the primary location.
     * 
     */
    private String primaryWebHost;
    /**
     * @return The encryption key type of the queue.
     * 
     */
    private String queueEncryptionKeyType;
    private @Nullable String resourceGroupName;
    /**
     * @return The secondary access key for the Storage Account.
     * 
     */
    private String secondaryAccessKey;
    /**
     * @return The connection string associated with the secondary blob location
     * 
     */
    private String secondaryBlobConnectionString;
    /**
     * @return The endpoint URL for blob storage in the secondary location.
     * 
     */
    private String secondaryBlobEndpoint;
    /**
     * @return The hostname with port if applicable for blob storage in the secondary location.
     * 
     */
    private String secondaryBlobHost;
    /**
     * @return The connection string associated with the secondary location
     * 
     */
    private String secondaryConnectionString;
    /**
     * @return The endpoint URL for DFS storage in the secondary location.
     * 
     */
    private String secondaryDfsEndpoint;
    /**
     * @return The hostname with port if applicable for DFS storage in the secondary location.
     * 
     */
    private String secondaryDfsHost;
    /**
     * @return The endpoint URL for file storage in the secondary location.
     * 
     */
    private String secondaryFileEndpoint;
    /**
     * @return The hostname with port if applicable for file storage in the secondary location.
     * 
     */
    private String secondaryFileHost;
    /**
     * @return The secondary location of the Storage Account.
     * 
     */
    private String secondaryLocation;
    /**
     * @return The endpoint URL for queue storage in the secondary location.
     * 
     */
    private String secondaryQueueEndpoint;
    /**
     * @return The hostname with port if applicable for queue storage in the secondary location.
     * 
     */
    private String secondaryQueueHost;
    /**
     * @return The endpoint URL for table storage in the secondary location.
     * 
     */
    private String secondaryTableEndpoint;
    /**
     * @return The hostname with port if applicable for table storage in the secondary location.
     * 
     */
    private String secondaryTableHost;
    /**
     * @return The endpoint URL for web storage in the secondary location.
     * 
     */
    private String secondaryWebEndpoint;
    /**
     * @return The hostname with port if applicable for web storage in the secondary location.
     * 
     */
    private String secondaryWebHost;
    /**
     * @return The encryption key type of the table.
     * 
     */
    private String tableEncryptionKeyType;
    /**
     * @return A mapping of tags to assigned to the resource.
     * 
     */
    private Map<String,String> tags;

    private GetAccountResult() {}
    /**
     * @return The access tier for `BlobStorage` accounts.
     * 
     */
    public String accessTier() {
        return this.accessTier;
    }
    /**
     * @return The Kind of account.
     * 
     */
    public String accountKind() {
        return this.accountKind;
    }
    /**
     * @return The type of replication used for this storage account.
     * 
     */
    public String accountReplicationType() {
        return this.accountReplicationType;
    }
    /**
     * @return The Tier of this storage account.
     * 
     */
    public String accountTier() {
        return this.accountTier;
    }
    /**
     * @return Can nested items in the storage account opt into allowing public access?
     * 
     */
    public Boolean allowNestedItemsToBePublic() {
        return this.allowNestedItemsToBePublic;
    }
    /**
     * @return A `custom_domain` block as documented below.
     * 
     */
    public List<GetAccountCustomDomain> customDomains() {
        return this.customDomains;
    }
    /**
     * @return Is traffic only allowed via HTTPS? See [here](https://docs.microsoft.com/azure/storage/storage-require-secure-transfer/)
     * for more information.
     * 
     */
    public Boolean enableHttpsTrafficOnly() {
        return this.enableHttpsTrafficOnly;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return An `identity` block as documented below.
     * 
     */
    public List<GetAccountIdentity> identities() {
        return this.identities;
    }
    /**
     * @return Is infrastructure encryption enabled? See [here](https://docs.microsoft.com/azure/storage/common/infrastructure-encryption-enable/)
     * for more information.
     * ---
     * 
     */
    public Boolean infrastructureEncryptionEnabled() {
        return this.infrastructureEncryptionEnabled;
    }
    /**
     * @return Is Hierarchical Namespace enabled?
     * 
     */
    public Boolean isHnsEnabled() {
        return this.isHnsEnabled;
    }
    /**
     * @return The Azure location where the Storage Account exists
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return The minimum supported TLS version for this storage account.
     * 
     */
    public Optional<String> minTlsVersion() {
        return Optional.ofNullable(this.minTlsVersion);
    }
    /**
     * @return The Custom Domain Name used for the Storage Account.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Is NFSv3 protocol enabled?
     * 
     */
    public Boolean nfsv3Enabled() {
        return this.nfsv3Enabled;
    }
    /**
     * @return The primary access key for the Storage Account.
     * 
     */
    public String primaryAccessKey() {
        return this.primaryAccessKey;
    }
    /**
     * @return The connection string associated with the primary blob location
     * 
     */
    public String primaryBlobConnectionString() {
        return this.primaryBlobConnectionString;
    }
    /**
     * @return The endpoint URL for blob storage in the primary location.
     * 
     */
    public String primaryBlobEndpoint() {
        return this.primaryBlobEndpoint;
    }
    /**
     * @return The hostname with port if applicable for blob storage in the primary location.
     * 
     */
    public String primaryBlobHost() {
        return this.primaryBlobHost;
    }
    /**
     * @return The connection string associated with the primary location
     * 
     */
    public String primaryConnectionString() {
        return this.primaryConnectionString;
    }
    /**
     * @return The endpoint URL for DFS storage in the primary location.
     * 
     */
    public String primaryDfsEndpoint() {
        return this.primaryDfsEndpoint;
    }
    /**
     * @return The hostname with port if applicable for DFS storage in the primary location.
     * 
     */
    public String primaryDfsHost() {
        return this.primaryDfsHost;
    }
    /**
     * @return The endpoint URL for file storage in the primary location.
     * 
     */
    public String primaryFileEndpoint() {
        return this.primaryFileEndpoint;
    }
    /**
     * @return The hostname with port if applicable for file storage in the primary location.
     * 
     */
    public String primaryFileHost() {
        return this.primaryFileHost;
    }
    /**
     * @return The primary location of the Storage Account.
     * 
     */
    public String primaryLocation() {
        return this.primaryLocation;
    }
    /**
     * @return The endpoint URL for queue storage in the primary location.
     * 
     */
    public String primaryQueueEndpoint() {
        return this.primaryQueueEndpoint;
    }
    /**
     * @return The hostname with port if applicable for queue storage in the primary location.
     * 
     */
    public String primaryQueueHost() {
        return this.primaryQueueHost;
    }
    /**
     * @return The endpoint URL for table storage in the primary location.
     * 
     */
    public String primaryTableEndpoint() {
        return this.primaryTableEndpoint;
    }
    /**
     * @return The hostname with port if applicable for table storage in the primary location.
     * 
     */
    public String primaryTableHost() {
        return this.primaryTableHost;
    }
    /**
     * @return The endpoint URL for web storage in the primary location.
     * 
     */
    public String primaryWebEndpoint() {
        return this.primaryWebEndpoint;
    }
    /**
     * @return The hostname with port if applicable for web storage in the primary location.
     * 
     */
    public String primaryWebHost() {
        return this.primaryWebHost;
    }
    /**
     * @return The encryption key type of the queue.
     * 
     */
    public String queueEncryptionKeyType() {
        return this.queueEncryptionKeyType;
    }
    public Optional<String> resourceGroupName() {
        return Optional.ofNullable(this.resourceGroupName);
    }
    /**
     * @return The secondary access key for the Storage Account.
     * 
     */
    public String secondaryAccessKey() {
        return this.secondaryAccessKey;
    }
    /**
     * @return The connection string associated with the secondary blob location
     * 
     */
    public String secondaryBlobConnectionString() {
        return this.secondaryBlobConnectionString;
    }
    /**
     * @return The endpoint URL for blob storage in the secondary location.
     * 
     */
    public String secondaryBlobEndpoint() {
        return this.secondaryBlobEndpoint;
    }
    /**
     * @return The hostname with port if applicable for blob storage in the secondary location.
     * 
     */
    public String secondaryBlobHost() {
        return this.secondaryBlobHost;
    }
    /**
     * @return The connection string associated with the secondary location
     * 
     */
    public String secondaryConnectionString() {
        return this.secondaryConnectionString;
    }
    /**
     * @return The endpoint URL for DFS storage in the secondary location.
     * 
     */
    public String secondaryDfsEndpoint() {
        return this.secondaryDfsEndpoint;
    }
    /**
     * @return The hostname with port if applicable for DFS storage in the secondary location.
     * 
     */
    public String secondaryDfsHost() {
        return this.secondaryDfsHost;
    }
    /**
     * @return The endpoint URL for file storage in the secondary location.
     * 
     */
    public String secondaryFileEndpoint() {
        return this.secondaryFileEndpoint;
    }
    /**
     * @return The hostname with port if applicable for file storage in the secondary location.
     * 
     */
    public String secondaryFileHost() {
        return this.secondaryFileHost;
    }
    /**
     * @return The secondary location of the Storage Account.
     * 
     */
    public String secondaryLocation() {
        return this.secondaryLocation;
    }
    /**
     * @return The endpoint URL for queue storage in the secondary location.
     * 
     */
    public String secondaryQueueEndpoint() {
        return this.secondaryQueueEndpoint;
    }
    /**
     * @return The hostname with port if applicable for queue storage in the secondary location.
     * 
     */
    public String secondaryQueueHost() {
        return this.secondaryQueueHost;
    }
    /**
     * @return The endpoint URL for table storage in the secondary location.
     * 
     */
    public String secondaryTableEndpoint() {
        return this.secondaryTableEndpoint;
    }
    /**
     * @return The hostname with port if applicable for table storage in the secondary location.
     * 
     */
    public String secondaryTableHost() {
        return this.secondaryTableHost;
    }
    /**
     * @return The endpoint URL for web storage in the secondary location.
     * 
     */
    public String secondaryWebEndpoint() {
        return this.secondaryWebEndpoint;
    }
    /**
     * @return The hostname with port if applicable for web storage in the secondary location.
     * 
     */
    public String secondaryWebHost() {
        return this.secondaryWebHost;
    }
    /**
     * @return The encryption key type of the table.
     * 
     */
    public String tableEncryptionKeyType() {
        return this.tableEncryptionKeyType;
    }
    /**
     * @return A mapping of tags to assigned to the resource.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAccountResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accessTier;
        private String accountKind;
        private String accountReplicationType;
        private String accountTier;
        private Boolean allowNestedItemsToBePublic;
        private List<GetAccountCustomDomain> customDomains;
        private Boolean enableHttpsTrafficOnly;
        private String id;
        private List<GetAccountIdentity> identities;
        private Boolean infrastructureEncryptionEnabled;
        private Boolean isHnsEnabled;
        private String location;
        private @Nullable String minTlsVersion;
        private String name;
        private Boolean nfsv3Enabled;
        private String primaryAccessKey;
        private String primaryBlobConnectionString;
        private String primaryBlobEndpoint;
        private String primaryBlobHost;
        private String primaryConnectionString;
        private String primaryDfsEndpoint;
        private String primaryDfsHost;
        private String primaryFileEndpoint;
        private String primaryFileHost;
        private String primaryLocation;
        private String primaryQueueEndpoint;
        private String primaryQueueHost;
        private String primaryTableEndpoint;
        private String primaryTableHost;
        private String primaryWebEndpoint;
        private String primaryWebHost;
        private String queueEncryptionKeyType;
        private @Nullable String resourceGroupName;
        private String secondaryAccessKey;
        private String secondaryBlobConnectionString;
        private String secondaryBlobEndpoint;
        private String secondaryBlobHost;
        private String secondaryConnectionString;
        private String secondaryDfsEndpoint;
        private String secondaryDfsHost;
        private String secondaryFileEndpoint;
        private String secondaryFileHost;
        private String secondaryLocation;
        private String secondaryQueueEndpoint;
        private String secondaryQueueHost;
        private String secondaryTableEndpoint;
        private String secondaryTableHost;
        private String secondaryWebEndpoint;
        private String secondaryWebHost;
        private String tableEncryptionKeyType;
        private Map<String,String> tags;
        public Builder() {}
        public Builder(GetAccountResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessTier = defaults.accessTier;
    	      this.accountKind = defaults.accountKind;
    	      this.accountReplicationType = defaults.accountReplicationType;
    	      this.accountTier = defaults.accountTier;
    	      this.allowNestedItemsToBePublic = defaults.allowNestedItemsToBePublic;
    	      this.customDomains = defaults.customDomains;
    	      this.enableHttpsTrafficOnly = defaults.enableHttpsTrafficOnly;
    	      this.id = defaults.id;
    	      this.identities = defaults.identities;
    	      this.infrastructureEncryptionEnabled = defaults.infrastructureEncryptionEnabled;
    	      this.isHnsEnabled = defaults.isHnsEnabled;
    	      this.location = defaults.location;
    	      this.minTlsVersion = defaults.minTlsVersion;
    	      this.name = defaults.name;
    	      this.nfsv3Enabled = defaults.nfsv3Enabled;
    	      this.primaryAccessKey = defaults.primaryAccessKey;
    	      this.primaryBlobConnectionString = defaults.primaryBlobConnectionString;
    	      this.primaryBlobEndpoint = defaults.primaryBlobEndpoint;
    	      this.primaryBlobHost = defaults.primaryBlobHost;
    	      this.primaryConnectionString = defaults.primaryConnectionString;
    	      this.primaryDfsEndpoint = defaults.primaryDfsEndpoint;
    	      this.primaryDfsHost = defaults.primaryDfsHost;
    	      this.primaryFileEndpoint = defaults.primaryFileEndpoint;
    	      this.primaryFileHost = defaults.primaryFileHost;
    	      this.primaryLocation = defaults.primaryLocation;
    	      this.primaryQueueEndpoint = defaults.primaryQueueEndpoint;
    	      this.primaryQueueHost = defaults.primaryQueueHost;
    	      this.primaryTableEndpoint = defaults.primaryTableEndpoint;
    	      this.primaryTableHost = defaults.primaryTableHost;
    	      this.primaryWebEndpoint = defaults.primaryWebEndpoint;
    	      this.primaryWebHost = defaults.primaryWebHost;
    	      this.queueEncryptionKeyType = defaults.queueEncryptionKeyType;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.secondaryAccessKey = defaults.secondaryAccessKey;
    	      this.secondaryBlobConnectionString = defaults.secondaryBlobConnectionString;
    	      this.secondaryBlobEndpoint = defaults.secondaryBlobEndpoint;
    	      this.secondaryBlobHost = defaults.secondaryBlobHost;
    	      this.secondaryConnectionString = defaults.secondaryConnectionString;
    	      this.secondaryDfsEndpoint = defaults.secondaryDfsEndpoint;
    	      this.secondaryDfsHost = defaults.secondaryDfsHost;
    	      this.secondaryFileEndpoint = defaults.secondaryFileEndpoint;
    	      this.secondaryFileHost = defaults.secondaryFileHost;
    	      this.secondaryLocation = defaults.secondaryLocation;
    	      this.secondaryQueueEndpoint = defaults.secondaryQueueEndpoint;
    	      this.secondaryQueueHost = defaults.secondaryQueueHost;
    	      this.secondaryTableEndpoint = defaults.secondaryTableEndpoint;
    	      this.secondaryTableHost = defaults.secondaryTableHost;
    	      this.secondaryWebEndpoint = defaults.secondaryWebEndpoint;
    	      this.secondaryWebHost = defaults.secondaryWebHost;
    	      this.tableEncryptionKeyType = defaults.tableEncryptionKeyType;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder accessTier(String accessTier) {
            this.accessTier = Objects.requireNonNull(accessTier);
            return this;
        }
        @CustomType.Setter
        public Builder accountKind(String accountKind) {
            this.accountKind = Objects.requireNonNull(accountKind);
            return this;
        }
        @CustomType.Setter
        public Builder accountReplicationType(String accountReplicationType) {
            this.accountReplicationType = Objects.requireNonNull(accountReplicationType);
            return this;
        }
        @CustomType.Setter
        public Builder accountTier(String accountTier) {
            this.accountTier = Objects.requireNonNull(accountTier);
            return this;
        }
        @CustomType.Setter
        public Builder allowNestedItemsToBePublic(Boolean allowNestedItemsToBePublic) {
            this.allowNestedItemsToBePublic = Objects.requireNonNull(allowNestedItemsToBePublic);
            return this;
        }
        @CustomType.Setter
        public Builder customDomains(List<GetAccountCustomDomain> customDomains) {
            this.customDomains = Objects.requireNonNull(customDomains);
            return this;
        }
        public Builder customDomains(GetAccountCustomDomain... customDomains) {
            return customDomains(List.of(customDomains));
        }
        @CustomType.Setter
        public Builder enableHttpsTrafficOnly(Boolean enableHttpsTrafficOnly) {
            this.enableHttpsTrafficOnly = Objects.requireNonNull(enableHttpsTrafficOnly);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder identities(List<GetAccountIdentity> identities) {
            this.identities = Objects.requireNonNull(identities);
            return this;
        }
        public Builder identities(GetAccountIdentity... identities) {
            return identities(List.of(identities));
        }
        @CustomType.Setter
        public Builder infrastructureEncryptionEnabled(Boolean infrastructureEncryptionEnabled) {
            this.infrastructureEncryptionEnabled = Objects.requireNonNull(infrastructureEncryptionEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder isHnsEnabled(Boolean isHnsEnabled) {
            this.isHnsEnabled = Objects.requireNonNull(isHnsEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder minTlsVersion(@Nullable String minTlsVersion) {
            this.minTlsVersion = minTlsVersion;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder nfsv3Enabled(Boolean nfsv3Enabled) {
            this.nfsv3Enabled = Objects.requireNonNull(nfsv3Enabled);
            return this;
        }
        @CustomType.Setter
        public Builder primaryAccessKey(String primaryAccessKey) {
            this.primaryAccessKey = Objects.requireNonNull(primaryAccessKey);
            return this;
        }
        @CustomType.Setter
        public Builder primaryBlobConnectionString(String primaryBlobConnectionString) {
            this.primaryBlobConnectionString = Objects.requireNonNull(primaryBlobConnectionString);
            return this;
        }
        @CustomType.Setter
        public Builder primaryBlobEndpoint(String primaryBlobEndpoint) {
            this.primaryBlobEndpoint = Objects.requireNonNull(primaryBlobEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder primaryBlobHost(String primaryBlobHost) {
            this.primaryBlobHost = Objects.requireNonNull(primaryBlobHost);
            return this;
        }
        @CustomType.Setter
        public Builder primaryConnectionString(String primaryConnectionString) {
            this.primaryConnectionString = Objects.requireNonNull(primaryConnectionString);
            return this;
        }
        @CustomType.Setter
        public Builder primaryDfsEndpoint(String primaryDfsEndpoint) {
            this.primaryDfsEndpoint = Objects.requireNonNull(primaryDfsEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder primaryDfsHost(String primaryDfsHost) {
            this.primaryDfsHost = Objects.requireNonNull(primaryDfsHost);
            return this;
        }
        @CustomType.Setter
        public Builder primaryFileEndpoint(String primaryFileEndpoint) {
            this.primaryFileEndpoint = Objects.requireNonNull(primaryFileEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder primaryFileHost(String primaryFileHost) {
            this.primaryFileHost = Objects.requireNonNull(primaryFileHost);
            return this;
        }
        @CustomType.Setter
        public Builder primaryLocation(String primaryLocation) {
            this.primaryLocation = Objects.requireNonNull(primaryLocation);
            return this;
        }
        @CustomType.Setter
        public Builder primaryQueueEndpoint(String primaryQueueEndpoint) {
            this.primaryQueueEndpoint = Objects.requireNonNull(primaryQueueEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder primaryQueueHost(String primaryQueueHost) {
            this.primaryQueueHost = Objects.requireNonNull(primaryQueueHost);
            return this;
        }
        @CustomType.Setter
        public Builder primaryTableEndpoint(String primaryTableEndpoint) {
            this.primaryTableEndpoint = Objects.requireNonNull(primaryTableEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder primaryTableHost(String primaryTableHost) {
            this.primaryTableHost = Objects.requireNonNull(primaryTableHost);
            return this;
        }
        @CustomType.Setter
        public Builder primaryWebEndpoint(String primaryWebEndpoint) {
            this.primaryWebEndpoint = Objects.requireNonNull(primaryWebEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder primaryWebHost(String primaryWebHost) {
            this.primaryWebHost = Objects.requireNonNull(primaryWebHost);
            return this;
        }
        @CustomType.Setter
        public Builder queueEncryptionKeyType(String queueEncryptionKeyType) {
            this.queueEncryptionKeyType = Objects.requireNonNull(queueEncryptionKeyType);
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupName(@Nullable String resourceGroupName) {
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder secondaryAccessKey(String secondaryAccessKey) {
            this.secondaryAccessKey = Objects.requireNonNull(secondaryAccessKey);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryBlobConnectionString(String secondaryBlobConnectionString) {
            this.secondaryBlobConnectionString = Objects.requireNonNull(secondaryBlobConnectionString);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryBlobEndpoint(String secondaryBlobEndpoint) {
            this.secondaryBlobEndpoint = Objects.requireNonNull(secondaryBlobEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryBlobHost(String secondaryBlobHost) {
            this.secondaryBlobHost = Objects.requireNonNull(secondaryBlobHost);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryConnectionString(String secondaryConnectionString) {
            this.secondaryConnectionString = Objects.requireNonNull(secondaryConnectionString);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryDfsEndpoint(String secondaryDfsEndpoint) {
            this.secondaryDfsEndpoint = Objects.requireNonNull(secondaryDfsEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryDfsHost(String secondaryDfsHost) {
            this.secondaryDfsHost = Objects.requireNonNull(secondaryDfsHost);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryFileEndpoint(String secondaryFileEndpoint) {
            this.secondaryFileEndpoint = Objects.requireNonNull(secondaryFileEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryFileHost(String secondaryFileHost) {
            this.secondaryFileHost = Objects.requireNonNull(secondaryFileHost);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryLocation(String secondaryLocation) {
            this.secondaryLocation = Objects.requireNonNull(secondaryLocation);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryQueueEndpoint(String secondaryQueueEndpoint) {
            this.secondaryQueueEndpoint = Objects.requireNonNull(secondaryQueueEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryQueueHost(String secondaryQueueHost) {
            this.secondaryQueueHost = Objects.requireNonNull(secondaryQueueHost);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryTableEndpoint(String secondaryTableEndpoint) {
            this.secondaryTableEndpoint = Objects.requireNonNull(secondaryTableEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryTableHost(String secondaryTableHost) {
            this.secondaryTableHost = Objects.requireNonNull(secondaryTableHost);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryWebEndpoint(String secondaryWebEndpoint) {
            this.secondaryWebEndpoint = Objects.requireNonNull(secondaryWebEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryWebHost(String secondaryWebHost) {
            this.secondaryWebHost = Objects.requireNonNull(secondaryWebHost);
            return this;
        }
        @CustomType.Setter
        public Builder tableEncryptionKeyType(String tableEncryptionKeyType) {
            this.tableEncryptionKeyType = Objects.requireNonNull(tableEncryptionKeyType);
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public GetAccountResult build() {
            final var o = new GetAccountResult();
            o.accessTier = accessTier;
            o.accountKind = accountKind;
            o.accountReplicationType = accountReplicationType;
            o.accountTier = accountTier;
            o.allowNestedItemsToBePublic = allowNestedItemsToBePublic;
            o.customDomains = customDomains;
            o.enableHttpsTrafficOnly = enableHttpsTrafficOnly;
            o.id = id;
            o.identities = identities;
            o.infrastructureEncryptionEnabled = infrastructureEncryptionEnabled;
            o.isHnsEnabled = isHnsEnabled;
            o.location = location;
            o.minTlsVersion = minTlsVersion;
            o.name = name;
            o.nfsv3Enabled = nfsv3Enabled;
            o.primaryAccessKey = primaryAccessKey;
            o.primaryBlobConnectionString = primaryBlobConnectionString;
            o.primaryBlobEndpoint = primaryBlobEndpoint;
            o.primaryBlobHost = primaryBlobHost;
            o.primaryConnectionString = primaryConnectionString;
            o.primaryDfsEndpoint = primaryDfsEndpoint;
            o.primaryDfsHost = primaryDfsHost;
            o.primaryFileEndpoint = primaryFileEndpoint;
            o.primaryFileHost = primaryFileHost;
            o.primaryLocation = primaryLocation;
            o.primaryQueueEndpoint = primaryQueueEndpoint;
            o.primaryQueueHost = primaryQueueHost;
            o.primaryTableEndpoint = primaryTableEndpoint;
            o.primaryTableHost = primaryTableHost;
            o.primaryWebEndpoint = primaryWebEndpoint;
            o.primaryWebHost = primaryWebHost;
            o.queueEncryptionKeyType = queueEncryptionKeyType;
            o.resourceGroupName = resourceGroupName;
            o.secondaryAccessKey = secondaryAccessKey;
            o.secondaryBlobConnectionString = secondaryBlobConnectionString;
            o.secondaryBlobEndpoint = secondaryBlobEndpoint;
            o.secondaryBlobHost = secondaryBlobHost;
            o.secondaryConnectionString = secondaryConnectionString;
            o.secondaryDfsEndpoint = secondaryDfsEndpoint;
            o.secondaryDfsHost = secondaryDfsHost;
            o.secondaryFileEndpoint = secondaryFileEndpoint;
            o.secondaryFileHost = secondaryFileHost;
            o.secondaryLocation = secondaryLocation;
            o.secondaryQueueEndpoint = secondaryQueueEndpoint;
            o.secondaryQueueHost = secondaryQueueHost;
            o.secondaryTableEndpoint = secondaryTableEndpoint;
            o.secondaryTableHost = secondaryTableHost;
            o.secondaryWebEndpoint = secondaryWebEndpoint;
            o.secondaryWebHost = secondaryWebHost;
            o.tableEncryptionKeyType = tableEncryptionKeyType;
            o.tags = tags;
            return o;
        }
    }
}
