// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.dynatrace.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetMonitorPlan {
    /**
     * @return Different billing cycles.
     * 
     */
    private String billingCycle;
    /**
     * @return Date when plan was applied.
     * 
     */
    private String effectiveDate;
    /**
     * @return Plan id as published by Dynatrace.
     * 
     */
    private String plan;
    /**
     * @return Different usage type.
     * 
     */
    private String usageType;

    private GetMonitorPlan() {}
    /**
     * @return Different billing cycles.
     * 
     */
    public String billingCycle() {
        return this.billingCycle;
    }
    /**
     * @return Date when plan was applied.
     * 
     */
    public String effectiveDate() {
        return this.effectiveDate;
    }
    /**
     * @return Plan id as published by Dynatrace.
     * 
     */
    public String plan() {
        return this.plan;
    }
    /**
     * @return Different usage type.
     * 
     */
    public String usageType() {
        return this.usageType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMonitorPlan defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String billingCycle;
        private String effectiveDate;
        private String plan;
        private String usageType;
        public Builder() {}
        public Builder(GetMonitorPlan defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.billingCycle = defaults.billingCycle;
    	      this.effectiveDate = defaults.effectiveDate;
    	      this.plan = defaults.plan;
    	      this.usageType = defaults.usageType;
        }

        @CustomType.Setter
        public Builder billingCycle(String billingCycle) {
            if (billingCycle == null) {
              throw new MissingRequiredPropertyException("GetMonitorPlan", "billingCycle");
            }
            this.billingCycle = billingCycle;
            return this;
        }
        @CustomType.Setter
        public Builder effectiveDate(String effectiveDate) {
            if (effectiveDate == null) {
              throw new MissingRequiredPropertyException("GetMonitorPlan", "effectiveDate");
            }
            this.effectiveDate = effectiveDate;
            return this;
        }
        @CustomType.Setter
        public Builder plan(String plan) {
            if (plan == null) {
              throw new MissingRequiredPropertyException("GetMonitorPlan", "plan");
            }
            this.plan = plan;
            return this;
        }
        @CustomType.Setter
        public Builder usageType(String usageType) {
            if (usageType == null) {
              throw new MissingRequiredPropertyException("GetMonitorPlan", "usageType");
            }
            this.usageType = usageType;
            return this;
        }
        public GetMonitorPlan build() {
            final var _resultValue = new GetMonitorPlan();
            _resultValue.billingCycle = billingCycle;
            _resultValue.effectiveDate = effectiveDate;
            _resultValue.plan = plan;
            _resultValue.usageType = usageType;
            return _resultValue;
        }
    }
}
