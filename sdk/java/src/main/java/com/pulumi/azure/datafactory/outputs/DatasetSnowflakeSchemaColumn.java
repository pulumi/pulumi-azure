// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.datafactory.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DatasetSnowflakeSchemaColumn {
    /**
     * @return The name of the column.
     * 
     */
    private String name;
    /**
     * @return The total number of digits allowed.
     * 
     */
    private @Nullable Integer precision;
    /**
     * @return The number of digits allowed to the right of the decimal point.
     * 
     */
    private @Nullable Integer scale;
    /**
     * @return Type of the column. Valid values are `NUMBER`, `DECIMAL`, `NUMERIC`, `INT`, `INTEGER`, `BIGINT`, `SMALLINT`, `FLOAT``FLOAT4`, `FLOAT8`, `DOUBLE`, `DOUBLE PRECISION`, `REAL`, `VARCHAR`, `CHAR`, `CHARACTER`, `STRING`, `TEXT`, `BINARY`, `VARBINARY`, `BOOLEAN`, `DATE`, `DATETIME`, `TIME`, `TIMESTAMP`, `TIMESTAMP_LTZ`, `TIMESTAMP_NTZ`, `TIMESTAMP_TZ`, `VARIANT`, `OBJECT`, `ARRAY`, `GEOGRAPHY`. Please note these values are case sensitive.
     * 
     */
    private @Nullable String type;

    private DatasetSnowflakeSchemaColumn() {}
    /**
     * @return The name of the column.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The total number of digits allowed.
     * 
     */
    public Optional<Integer> precision() {
        return Optional.ofNullable(this.precision);
    }
    /**
     * @return The number of digits allowed to the right of the decimal point.
     * 
     */
    public Optional<Integer> scale() {
        return Optional.ofNullable(this.scale);
    }
    /**
     * @return Type of the column. Valid values are `NUMBER`, `DECIMAL`, `NUMERIC`, `INT`, `INTEGER`, `BIGINT`, `SMALLINT`, `FLOAT``FLOAT4`, `FLOAT8`, `DOUBLE`, `DOUBLE PRECISION`, `REAL`, `VARCHAR`, `CHAR`, `CHARACTER`, `STRING`, `TEXT`, `BINARY`, `VARBINARY`, `BOOLEAN`, `DATE`, `DATETIME`, `TIME`, `TIMESTAMP`, `TIMESTAMP_LTZ`, `TIMESTAMP_NTZ`, `TIMESTAMP_TZ`, `VARIANT`, `OBJECT`, `ARRAY`, `GEOGRAPHY`. Please note these values are case sensitive.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatasetSnowflakeSchemaColumn defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String name;
        private @Nullable Integer precision;
        private @Nullable Integer scale;
        private @Nullable String type;
        public Builder() {}
        public Builder(DatasetSnowflakeSchemaColumn defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.name = defaults.name;
    	      this.precision = defaults.precision;
    	      this.scale = defaults.scale;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("DatasetSnowflakeSchemaColumn", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder precision(@Nullable Integer precision) {

            this.precision = precision;
            return this;
        }
        @CustomType.Setter
        public Builder scale(@Nullable Integer scale) {

            this.scale = scale;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {

            this.type = type;
            return this;
        }
        public DatasetSnowflakeSchemaColumn build() {
            final var _resultValue = new DatasetSnowflakeSchemaColumn();
            _resultValue.name = name;
            _resultValue.precision = precision;
            _resultValue.scale = scale;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
