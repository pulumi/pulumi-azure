// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.datafactory.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DatasetSnowflakeSchemaColumn {
    /**
     * @return The name of the column.
     * 
     */
    private final String name;
    /**
     * @return The total number of digits allowed.
     * 
     */
    private final @Nullable Integer precision;
    /**
     * @return The number of digits allowed to the right of the decimal point.
     * 
     */
    private final @Nullable Integer scale;
    /**
     * @return Type of the column. Valid values are `NUMBER`, `DECIMAL`, `NUMERIC`, `INT`, `INTEGER`, `BIGINT`, `SMALLINT`, `FLOAT``FLOAT4`, `FLOAT8`, `DOUBLE`, `DOUBLE PRECISION`, `REAL`, `VARCHAR`, `CHAR`, `CHARACTER`, `STRING`, `TEXT`, `BINARY`, `VARBINARY`, `BOOLEAN`, `DATE`, `DATETIME`, `TIME`, `TIMESTAMP`, `TIMESTAMP_LTZ`, `TIMESTAMP_NTZ`, `TIMESTAMP_TZ`, `VARIANT`, `OBJECT`, `ARRAY`, `GEOGRAPHY`. Please note these values are case sensitive.
     * 
     */
    private final @Nullable String type;

    @CustomType.Constructor
    private DatasetSnowflakeSchemaColumn(
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("precision") @Nullable Integer precision,
        @CustomType.Parameter("scale") @Nullable Integer scale,
        @CustomType.Parameter("type") @Nullable String type) {
        this.name = name;
        this.precision = precision;
        this.scale = scale;
        this.type = type;
    }

    /**
     * @return The name of the column.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The total number of digits allowed.
     * 
     */
    public Optional<Integer> precision() {
        return Optional.ofNullable(this.precision);
    }
    /**
     * @return The number of digits allowed to the right of the decimal point.
     * 
     */
    public Optional<Integer> scale() {
        return Optional.ofNullable(this.scale);
    }
    /**
     * @return Type of the column. Valid values are `NUMBER`, `DECIMAL`, `NUMERIC`, `INT`, `INTEGER`, `BIGINT`, `SMALLINT`, `FLOAT``FLOAT4`, `FLOAT8`, `DOUBLE`, `DOUBLE PRECISION`, `REAL`, `VARCHAR`, `CHAR`, `CHARACTER`, `STRING`, `TEXT`, `BINARY`, `VARBINARY`, `BOOLEAN`, `DATE`, `DATETIME`, `TIME`, `TIMESTAMP`, `TIMESTAMP_LTZ`, `TIMESTAMP_NTZ`, `TIMESTAMP_TZ`, `VARIANT`, `OBJECT`, `ARRAY`, `GEOGRAPHY`. Please note these values are case sensitive.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatasetSnowflakeSchemaColumn defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String name;
        private @Nullable Integer precision;
        private @Nullable Integer scale;
        private @Nullable String type;

        public Builder() {
    	      // Empty
        }

        public Builder(DatasetSnowflakeSchemaColumn defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.name = defaults.name;
    	      this.precision = defaults.precision;
    	      this.scale = defaults.scale;
    	      this.type = defaults.type;
        }

        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder precision(@Nullable Integer precision) {
            this.precision = precision;
            return this;
        }
        public Builder scale(@Nullable Integer scale) {
            this.scale = scale;
            return this;
        }
        public Builder type(@Nullable String type) {
            this.type = type;
            return this;
        }        public DatasetSnowflakeSchemaColumn build() {
            return new DatasetSnowflakeSchemaColumn(name, precision, scale, type);
        }
    }
}
