// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.cdn.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetFrontdoorCustomDomainTl {
    /**
     * @return The Resource ID of the Front Door Secret.
     * 
     */
    private String cdnFrontdoorSecretId;
    /**
     * @return The SSL certificate type.
     * 
     */
    private String certificateType;
    /**
     * @return The TLS protocol version that will be used for Https connections.
     * 
     */
    private String minimumTlsVersion;

    private GetFrontdoorCustomDomainTl() {}
    /**
     * @return The Resource ID of the Front Door Secret.
     * 
     */
    public String cdnFrontdoorSecretId() {
        return this.cdnFrontdoorSecretId;
    }
    /**
     * @return The SSL certificate type.
     * 
     */
    public String certificateType() {
        return this.certificateType;
    }
    /**
     * @return The TLS protocol version that will be used for Https connections.
     * 
     */
    public String minimumTlsVersion() {
        return this.minimumTlsVersion;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFrontdoorCustomDomainTl defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String cdnFrontdoorSecretId;
        private String certificateType;
        private String minimumTlsVersion;
        public Builder() {}
        public Builder(GetFrontdoorCustomDomainTl defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cdnFrontdoorSecretId = defaults.cdnFrontdoorSecretId;
    	      this.certificateType = defaults.certificateType;
    	      this.minimumTlsVersion = defaults.minimumTlsVersion;
        }

        @CustomType.Setter
        public Builder cdnFrontdoorSecretId(String cdnFrontdoorSecretId) {
            if (cdnFrontdoorSecretId == null) {
              throw new MissingRequiredPropertyException("GetFrontdoorCustomDomainTl", "cdnFrontdoorSecretId");
            }
            this.cdnFrontdoorSecretId = cdnFrontdoorSecretId;
            return this;
        }
        @CustomType.Setter
        public Builder certificateType(String certificateType) {
            if (certificateType == null) {
              throw new MissingRequiredPropertyException("GetFrontdoorCustomDomainTl", "certificateType");
            }
            this.certificateType = certificateType;
            return this;
        }
        @CustomType.Setter
        public Builder minimumTlsVersion(String minimumTlsVersion) {
            if (minimumTlsVersion == null) {
              throw new MissingRequiredPropertyException("GetFrontdoorCustomDomainTl", "minimumTlsVersion");
            }
            this.minimumTlsVersion = minimumTlsVersion;
            return this;
        }
        public GetFrontdoorCustomDomainTl build() {
            final var _resultValue = new GetFrontdoorCustomDomainTl();
            _resultValue.cdnFrontdoorSecretId = cdnFrontdoorSecretId;
            _resultValue.certificateType = certificateType;
            _resultValue.minimumTlsVersion = minimumTlsVersion;
            return _resultValue;
        }
    }
}
