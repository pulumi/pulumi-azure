// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.lb.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetLBRuleResult {
    /**
     * @return A reference to a Backend Address Pool over which this Load Balancing Rule operates.
     * 
     */
    private String backendAddressPoolId;
    /**
     * @return The port used for internal connections on the endpoint.
     * 
     */
    private Integer backendPort;
    /**
     * @return If outbound SNAT is enabled for this Load Balancer Rule.
     * 
     */
    private Boolean disableOutboundSnat;
    /**
     * @return If Floating IPs are enabled for this Load Balancer Rule
     * 
     */
    private Boolean enableFloatingIp;
    /**
     * @return If TCP Reset is enabled for this Load Balancer Rule.
     * 
     */
    private Boolean enableTcpReset;
    /**
     * @return The name of the frontend IP configuration to which the rule is associated.
     * 
     */
    private String frontendIpConfigurationName;
    /**
     * @return The port for the external endpoint.
     * 
     */
    private Integer frontendPort;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Specifies the idle timeout in minutes for TCP connections.
     * 
     */
    private Integer idleTimeoutInMinutes;
    /**
     * @return Specifies the load balancing distribution type used by the Load Balancer.
     * 
     */
    private String loadDistribution;
    private String loadbalancerId;
    private String name;
    /**
     * @return A reference to a Probe used by this Load Balancing Rule.
     * 
     */
    private String probeId;
    /**
     * @return The transport protocol for the external endpoint.
     * 
     */
    private String protocol;

    private GetLBRuleResult() {}
    /**
     * @return A reference to a Backend Address Pool over which this Load Balancing Rule operates.
     * 
     */
    public String backendAddressPoolId() {
        return this.backendAddressPoolId;
    }
    /**
     * @return The port used for internal connections on the endpoint.
     * 
     */
    public Integer backendPort() {
        return this.backendPort;
    }
    /**
     * @return If outbound SNAT is enabled for this Load Balancer Rule.
     * 
     */
    public Boolean disableOutboundSnat() {
        return this.disableOutboundSnat;
    }
    /**
     * @return If Floating IPs are enabled for this Load Balancer Rule
     * 
     */
    public Boolean enableFloatingIp() {
        return this.enableFloatingIp;
    }
    /**
     * @return If TCP Reset is enabled for this Load Balancer Rule.
     * 
     */
    public Boolean enableTcpReset() {
        return this.enableTcpReset;
    }
    /**
     * @return The name of the frontend IP configuration to which the rule is associated.
     * 
     */
    public String frontendIpConfigurationName() {
        return this.frontendIpConfigurationName;
    }
    /**
     * @return The port for the external endpoint.
     * 
     */
    public Integer frontendPort() {
        return this.frontendPort;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Specifies the idle timeout in minutes for TCP connections.
     * 
     */
    public Integer idleTimeoutInMinutes() {
        return this.idleTimeoutInMinutes;
    }
    /**
     * @return Specifies the load balancing distribution type used by the Load Balancer.
     * 
     */
    public String loadDistribution() {
        return this.loadDistribution;
    }
    public String loadbalancerId() {
        return this.loadbalancerId;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return A reference to a Probe used by this Load Balancing Rule.
     * 
     */
    public String probeId() {
        return this.probeId;
    }
    /**
     * @return The transport protocol for the external endpoint.
     * 
     */
    public String protocol() {
        return this.protocol;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLBRuleResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String backendAddressPoolId;
        private Integer backendPort;
        private Boolean disableOutboundSnat;
        private Boolean enableFloatingIp;
        private Boolean enableTcpReset;
        private String frontendIpConfigurationName;
        private Integer frontendPort;
        private String id;
        private Integer idleTimeoutInMinutes;
        private String loadDistribution;
        private String loadbalancerId;
        private String name;
        private String probeId;
        private String protocol;
        public Builder() {}
        public Builder(GetLBRuleResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backendAddressPoolId = defaults.backendAddressPoolId;
    	      this.backendPort = defaults.backendPort;
    	      this.disableOutboundSnat = defaults.disableOutboundSnat;
    	      this.enableFloatingIp = defaults.enableFloatingIp;
    	      this.enableTcpReset = defaults.enableTcpReset;
    	      this.frontendIpConfigurationName = defaults.frontendIpConfigurationName;
    	      this.frontendPort = defaults.frontendPort;
    	      this.id = defaults.id;
    	      this.idleTimeoutInMinutes = defaults.idleTimeoutInMinutes;
    	      this.loadDistribution = defaults.loadDistribution;
    	      this.loadbalancerId = defaults.loadbalancerId;
    	      this.name = defaults.name;
    	      this.probeId = defaults.probeId;
    	      this.protocol = defaults.protocol;
        }

        @CustomType.Setter
        public Builder backendAddressPoolId(String backendAddressPoolId) {
            if (backendAddressPoolId == null) {
              throw new MissingRequiredPropertyException("GetLBRuleResult", "backendAddressPoolId");
            }
            this.backendAddressPoolId = backendAddressPoolId;
            return this;
        }
        @CustomType.Setter
        public Builder backendPort(Integer backendPort) {
            if (backendPort == null) {
              throw new MissingRequiredPropertyException("GetLBRuleResult", "backendPort");
            }
            this.backendPort = backendPort;
            return this;
        }
        @CustomType.Setter
        public Builder disableOutboundSnat(Boolean disableOutboundSnat) {
            if (disableOutboundSnat == null) {
              throw new MissingRequiredPropertyException("GetLBRuleResult", "disableOutboundSnat");
            }
            this.disableOutboundSnat = disableOutboundSnat;
            return this;
        }
        @CustomType.Setter
        public Builder enableFloatingIp(Boolean enableFloatingIp) {
            if (enableFloatingIp == null) {
              throw new MissingRequiredPropertyException("GetLBRuleResult", "enableFloatingIp");
            }
            this.enableFloatingIp = enableFloatingIp;
            return this;
        }
        @CustomType.Setter
        public Builder enableTcpReset(Boolean enableTcpReset) {
            if (enableTcpReset == null) {
              throw new MissingRequiredPropertyException("GetLBRuleResult", "enableTcpReset");
            }
            this.enableTcpReset = enableTcpReset;
            return this;
        }
        @CustomType.Setter
        public Builder frontendIpConfigurationName(String frontendIpConfigurationName) {
            if (frontendIpConfigurationName == null) {
              throw new MissingRequiredPropertyException("GetLBRuleResult", "frontendIpConfigurationName");
            }
            this.frontendIpConfigurationName = frontendIpConfigurationName;
            return this;
        }
        @CustomType.Setter
        public Builder frontendPort(Integer frontendPort) {
            if (frontendPort == null) {
              throw new MissingRequiredPropertyException("GetLBRuleResult", "frontendPort");
            }
            this.frontendPort = frontendPort;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetLBRuleResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder idleTimeoutInMinutes(Integer idleTimeoutInMinutes) {
            if (idleTimeoutInMinutes == null) {
              throw new MissingRequiredPropertyException("GetLBRuleResult", "idleTimeoutInMinutes");
            }
            this.idleTimeoutInMinutes = idleTimeoutInMinutes;
            return this;
        }
        @CustomType.Setter
        public Builder loadDistribution(String loadDistribution) {
            if (loadDistribution == null) {
              throw new MissingRequiredPropertyException("GetLBRuleResult", "loadDistribution");
            }
            this.loadDistribution = loadDistribution;
            return this;
        }
        @CustomType.Setter
        public Builder loadbalancerId(String loadbalancerId) {
            if (loadbalancerId == null) {
              throw new MissingRequiredPropertyException("GetLBRuleResult", "loadbalancerId");
            }
            this.loadbalancerId = loadbalancerId;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetLBRuleResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder probeId(String probeId) {
            if (probeId == null) {
              throw new MissingRequiredPropertyException("GetLBRuleResult", "probeId");
            }
            this.probeId = probeId;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("GetLBRuleResult", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        public GetLBRuleResult build() {
            final var _resultValue = new GetLBRuleResult();
            _resultValue.backendAddressPoolId = backendAddressPoolId;
            _resultValue.backendPort = backendPort;
            _resultValue.disableOutboundSnat = disableOutboundSnat;
            _resultValue.enableFloatingIp = enableFloatingIp;
            _resultValue.enableTcpReset = enableTcpReset;
            _resultValue.frontendIpConfigurationName = frontendIpConfigurationName;
            _resultValue.frontendPort = frontendPort;
            _resultValue.id = id;
            _resultValue.idleTimeoutInMinutes = idleTimeoutInMinutes;
            _resultValue.loadDistribution = loadDistribution;
            _resultValue.loadbalancerId = loadbalancerId;
            _resultValue.name = name;
            _resultValue.probeId = probeId;
            _resultValue.protocol = protocol;
            return _resultValue;
        }
    }
}
