// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network;

import com.pulumi.azure.network.inputs.ExpressRouteCircuitPeeringIpv6Args;
import com.pulumi.azure.network.inputs.ExpressRouteCircuitPeeringMicrosoftPeeringConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ExpressRouteCircuitPeeringArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExpressRouteCircuitPeeringArgs Empty = new ExpressRouteCircuitPeeringArgs();

    /**
     * The name of the ExpressRoute Circuit in which to create the Peering. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="expressRouteCircuitName", required=true)
    private Output<String> expressRouteCircuitName;

    /**
     * @return The name of the ExpressRoute Circuit in which to create the Peering. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> expressRouteCircuitName() {
        return this.expressRouteCircuitName;
    }

    /**
     * A boolean value indicating whether the IPv4 peering is enabled. Defaults to `true`.
     * 
     */
    @Import(name="ipv4Enabled")
    private @Nullable Output<Boolean> ipv4Enabled;

    /**
     * @return A boolean value indicating whether the IPv4 peering is enabled. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> ipv4Enabled() {
        return Optional.ofNullable(this.ipv4Enabled);
    }

    /**
     * A `ipv6` block as defined below.
     * 
     */
    @Import(name="ipv6")
    private @Nullable Output<ExpressRouteCircuitPeeringIpv6Args> ipv6;

    /**
     * @return A `ipv6` block as defined below.
     * 
     */
    public Optional<Output<ExpressRouteCircuitPeeringIpv6Args>> ipv6() {
        return Optional.ofNullable(this.ipv6);
    }

    /**
     * A `microsoft_peering_config` block as defined below. Required when `peering_type` is set to `MicrosoftPeering` and config for IPv4.
     * 
     */
    @Import(name="microsoftPeeringConfig")
    private @Nullable Output<ExpressRouteCircuitPeeringMicrosoftPeeringConfigArgs> microsoftPeeringConfig;

    /**
     * @return A `microsoft_peering_config` block as defined below. Required when `peering_type` is set to `MicrosoftPeering` and config for IPv4.
     * 
     */
    public Optional<Output<ExpressRouteCircuitPeeringMicrosoftPeeringConfigArgs>> microsoftPeeringConfig() {
        return Optional.ofNullable(this.microsoftPeeringConfig);
    }

    /**
     * The Either a 16-bit or a 32-bit ASN. Can either be public or private.
     * 
     */
    @Import(name="peerAsn")
    private @Nullable Output<Integer> peerAsn;

    /**
     * @return The Either a 16-bit or a 32-bit ASN. Can either be public or private.
     * 
     */
    public Optional<Output<Integer>> peerAsn() {
        return Optional.ofNullable(this.peerAsn);
    }

    /**
     * The type of the ExpressRoute Circuit Peering. Acceptable values include `AzurePrivatePeering`, `AzurePublicPeering` and `MicrosoftPeering`.
     * 
     * &gt; **NOTE:** only one Peering of each Type can be created. Attempting to create multiple peerings of the same type will overwrite the original peering.
     * 
     */
    @Import(name="peeringType", required=true)
    private Output<String> peeringType;

    /**
     * @return The type of the ExpressRoute Circuit Peering. Acceptable values include `AzurePrivatePeering`, `AzurePublicPeering` and `MicrosoftPeering`.
     * 
     * &gt; **NOTE:** only one Peering of each Type can be created. Attempting to create multiple peerings of the same type will overwrite the original peering.
     * 
     */
    public Output<String> peeringType() {
        return this.peeringType;
    }

    /**
     * A subnet for the primary link.
     * 
     */
    @Import(name="primaryPeerAddressPrefix")
    private @Nullable Output<String> primaryPeerAddressPrefix;

    /**
     * @return A subnet for the primary link.
     * 
     */
    public Optional<Output<String>> primaryPeerAddressPrefix() {
        return Optional.ofNullable(this.primaryPeerAddressPrefix);
    }

    /**
     * The name of the resource group in which to create the Express Route Circuit Peering. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group in which to create the Express Route Circuit Peering. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The ID of the Route Filter. Only available when `peering_type` is set to `MicrosoftPeering`.
     * 
     * &gt; **NOTE:** `ipv6` can be specified when `peering_type` is `MicrosoftPeering` or `AzurePrivatePeering`
     * 
     */
    @Import(name="routeFilterId")
    private @Nullable Output<String> routeFilterId;

    /**
     * @return The ID of the Route Filter. Only available when `peering_type` is set to `MicrosoftPeering`.
     * 
     * &gt; **NOTE:** `ipv6` can be specified when `peering_type` is `MicrosoftPeering` or `AzurePrivatePeering`
     * 
     */
    public Optional<Output<String>> routeFilterId() {
        return Optional.ofNullable(this.routeFilterId);
    }

    /**
     * A subnet for the secondary link.
     * 
     */
    @Import(name="secondaryPeerAddressPrefix")
    private @Nullable Output<String> secondaryPeerAddressPrefix;

    /**
     * @return A subnet for the secondary link.
     * 
     */
    public Optional<Output<String>> secondaryPeerAddressPrefix() {
        return Optional.ofNullable(this.secondaryPeerAddressPrefix);
    }

    /**
     * The shared key. Can be a maximum of 25 characters.
     * 
     */
    @Import(name="sharedKey")
    private @Nullable Output<String> sharedKey;

    /**
     * @return The shared key. Can be a maximum of 25 characters.
     * 
     */
    public Optional<Output<String>> sharedKey() {
        return Optional.ofNullable(this.sharedKey);
    }

    /**
     * A valid VLAN ID to establish this peering on.
     * 
     */
    @Import(name="vlanId", required=true)
    private Output<Integer> vlanId;

    /**
     * @return A valid VLAN ID to establish this peering on.
     * 
     */
    public Output<Integer> vlanId() {
        return this.vlanId;
    }

    private ExpressRouteCircuitPeeringArgs() {}

    private ExpressRouteCircuitPeeringArgs(ExpressRouteCircuitPeeringArgs $) {
        this.expressRouteCircuitName = $.expressRouteCircuitName;
        this.ipv4Enabled = $.ipv4Enabled;
        this.ipv6 = $.ipv6;
        this.microsoftPeeringConfig = $.microsoftPeeringConfig;
        this.peerAsn = $.peerAsn;
        this.peeringType = $.peeringType;
        this.primaryPeerAddressPrefix = $.primaryPeerAddressPrefix;
        this.resourceGroupName = $.resourceGroupName;
        this.routeFilterId = $.routeFilterId;
        this.secondaryPeerAddressPrefix = $.secondaryPeerAddressPrefix;
        this.sharedKey = $.sharedKey;
        this.vlanId = $.vlanId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExpressRouteCircuitPeeringArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExpressRouteCircuitPeeringArgs $;

        public Builder() {
            $ = new ExpressRouteCircuitPeeringArgs();
        }

        public Builder(ExpressRouteCircuitPeeringArgs defaults) {
            $ = new ExpressRouteCircuitPeeringArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param expressRouteCircuitName The name of the ExpressRoute Circuit in which to create the Peering. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder expressRouteCircuitName(Output<String> expressRouteCircuitName) {
            $.expressRouteCircuitName = expressRouteCircuitName;
            return this;
        }

        /**
         * @param expressRouteCircuitName The name of the ExpressRoute Circuit in which to create the Peering. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder expressRouteCircuitName(String expressRouteCircuitName) {
            return expressRouteCircuitName(Output.of(expressRouteCircuitName));
        }

        /**
         * @param ipv4Enabled A boolean value indicating whether the IPv4 peering is enabled. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder ipv4Enabled(@Nullable Output<Boolean> ipv4Enabled) {
            $.ipv4Enabled = ipv4Enabled;
            return this;
        }

        /**
         * @param ipv4Enabled A boolean value indicating whether the IPv4 peering is enabled. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder ipv4Enabled(Boolean ipv4Enabled) {
            return ipv4Enabled(Output.of(ipv4Enabled));
        }

        /**
         * @param ipv6 A `ipv6` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder ipv6(@Nullable Output<ExpressRouteCircuitPeeringIpv6Args> ipv6) {
            $.ipv6 = ipv6;
            return this;
        }

        /**
         * @param ipv6 A `ipv6` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder ipv6(ExpressRouteCircuitPeeringIpv6Args ipv6) {
            return ipv6(Output.of(ipv6));
        }

        /**
         * @param microsoftPeeringConfig A `microsoft_peering_config` block as defined below. Required when `peering_type` is set to `MicrosoftPeering` and config for IPv4.
         * 
         * @return builder
         * 
         */
        public Builder microsoftPeeringConfig(@Nullable Output<ExpressRouteCircuitPeeringMicrosoftPeeringConfigArgs> microsoftPeeringConfig) {
            $.microsoftPeeringConfig = microsoftPeeringConfig;
            return this;
        }

        /**
         * @param microsoftPeeringConfig A `microsoft_peering_config` block as defined below. Required when `peering_type` is set to `MicrosoftPeering` and config for IPv4.
         * 
         * @return builder
         * 
         */
        public Builder microsoftPeeringConfig(ExpressRouteCircuitPeeringMicrosoftPeeringConfigArgs microsoftPeeringConfig) {
            return microsoftPeeringConfig(Output.of(microsoftPeeringConfig));
        }

        /**
         * @param peerAsn The Either a 16-bit or a 32-bit ASN. Can either be public or private.
         * 
         * @return builder
         * 
         */
        public Builder peerAsn(@Nullable Output<Integer> peerAsn) {
            $.peerAsn = peerAsn;
            return this;
        }

        /**
         * @param peerAsn The Either a 16-bit or a 32-bit ASN. Can either be public or private.
         * 
         * @return builder
         * 
         */
        public Builder peerAsn(Integer peerAsn) {
            return peerAsn(Output.of(peerAsn));
        }

        /**
         * @param peeringType The type of the ExpressRoute Circuit Peering. Acceptable values include `AzurePrivatePeering`, `AzurePublicPeering` and `MicrosoftPeering`.
         * 
         * &gt; **NOTE:** only one Peering of each Type can be created. Attempting to create multiple peerings of the same type will overwrite the original peering.
         * 
         * @return builder
         * 
         */
        public Builder peeringType(Output<String> peeringType) {
            $.peeringType = peeringType;
            return this;
        }

        /**
         * @param peeringType The type of the ExpressRoute Circuit Peering. Acceptable values include `AzurePrivatePeering`, `AzurePublicPeering` and `MicrosoftPeering`.
         * 
         * &gt; **NOTE:** only one Peering of each Type can be created. Attempting to create multiple peerings of the same type will overwrite the original peering.
         * 
         * @return builder
         * 
         */
        public Builder peeringType(String peeringType) {
            return peeringType(Output.of(peeringType));
        }

        /**
         * @param primaryPeerAddressPrefix A subnet for the primary link.
         * 
         * @return builder
         * 
         */
        public Builder primaryPeerAddressPrefix(@Nullable Output<String> primaryPeerAddressPrefix) {
            $.primaryPeerAddressPrefix = primaryPeerAddressPrefix;
            return this;
        }

        /**
         * @param primaryPeerAddressPrefix A subnet for the primary link.
         * 
         * @return builder
         * 
         */
        public Builder primaryPeerAddressPrefix(String primaryPeerAddressPrefix) {
            return primaryPeerAddressPrefix(Output.of(primaryPeerAddressPrefix));
        }

        /**
         * @param resourceGroupName The name of the resource group in which to create the Express Route Circuit Peering. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group in which to create the Express Route Circuit Peering. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param routeFilterId The ID of the Route Filter. Only available when `peering_type` is set to `MicrosoftPeering`.
         * 
         * &gt; **NOTE:** `ipv6` can be specified when `peering_type` is `MicrosoftPeering` or `AzurePrivatePeering`
         * 
         * @return builder
         * 
         */
        public Builder routeFilterId(@Nullable Output<String> routeFilterId) {
            $.routeFilterId = routeFilterId;
            return this;
        }

        /**
         * @param routeFilterId The ID of the Route Filter. Only available when `peering_type` is set to `MicrosoftPeering`.
         * 
         * &gt; **NOTE:** `ipv6` can be specified when `peering_type` is `MicrosoftPeering` or `AzurePrivatePeering`
         * 
         * @return builder
         * 
         */
        public Builder routeFilterId(String routeFilterId) {
            return routeFilterId(Output.of(routeFilterId));
        }

        /**
         * @param secondaryPeerAddressPrefix A subnet for the secondary link.
         * 
         * @return builder
         * 
         */
        public Builder secondaryPeerAddressPrefix(@Nullable Output<String> secondaryPeerAddressPrefix) {
            $.secondaryPeerAddressPrefix = secondaryPeerAddressPrefix;
            return this;
        }

        /**
         * @param secondaryPeerAddressPrefix A subnet for the secondary link.
         * 
         * @return builder
         * 
         */
        public Builder secondaryPeerAddressPrefix(String secondaryPeerAddressPrefix) {
            return secondaryPeerAddressPrefix(Output.of(secondaryPeerAddressPrefix));
        }

        /**
         * @param sharedKey The shared key. Can be a maximum of 25 characters.
         * 
         * @return builder
         * 
         */
        public Builder sharedKey(@Nullable Output<String> sharedKey) {
            $.sharedKey = sharedKey;
            return this;
        }

        /**
         * @param sharedKey The shared key. Can be a maximum of 25 characters.
         * 
         * @return builder
         * 
         */
        public Builder sharedKey(String sharedKey) {
            return sharedKey(Output.of(sharedKey));
        }

        /**
         * @param vlanId A valid VLAN ID to establish this peering on.
         * 
         * @return builder
         * 
         */
        public Builder vlanId(Output<Integer> vlanId) {
            $.vlanId = vlanId;
            return this;
        }

        /**
         * @param vlanId A valid VLAN ID to establish this peering on.
         * 
         * @return builder
         * 
         */
        public Builder vlanId(Integer vlanId) {
            return vlanId(Output.of(vlanId));
        }

        public ExpressRouteCircuitPeeringArgs build() {
            if ($.expressRouteCircuitName == null) {
                throw new MissingRequiredPropertyException("ExpressRouteCircuitPeeringArgs", "expressRouteCircuitName");
            }
            if ($.peeringType == null) {
                throw new MissingRequiredPropertyException("ExpressRouteCircuitPeeringArgs", "peeringType");
            }
            if ($.resourceGroupName == null) {
                throw new MissingRequiredPropertyException("ExpressRouteCircuitPeeringArgs", "resourceGroupName");
            }
            if ($.vlanId == null) {
                throw new MissingRequiredPropertyException("ExpressRouteCircuitPeeringArgs", "vlanId");
            }
            return $;
        }
    }

}
