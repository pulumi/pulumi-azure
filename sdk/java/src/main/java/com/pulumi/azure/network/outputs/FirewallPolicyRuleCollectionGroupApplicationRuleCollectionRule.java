// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network.outputs;

import com.pulumi.azure.network.outputs.FirewallPolicyRuleCollectionGroupApplicationRuleCollectionRuleProtocol;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FirewallPolicyRuleCollectionGroupApplicationRuleCollectionRule {
    /**
     * @return The description which should be used for this rule.
     * 
     */
    private final @Nullable String description;
    /**
     * @return Specifies a list of destination IP addresses (including CIDR and `*`) or Service Tags.
     * 
     */
    private final @Nullable List<String> destinationAddresses;
    /**
     * @return Specifies a list of destination FQDN tags.
     * 
     */
    private final @Nullable List<String> destinationFqdnTags;
    /**
     * @return Specifies a list of destination FQDNs.
     * 
     */
    private final @Nullable List<String> destinationFqdns;
    /**
     * @return Specifies a list of destination URLs for which policy should hold. Needs Premium SKU for Firewall Policy. Conflicts with `destination_fqdns`.
     * 
     */
    private final @Nullable List<String> destinationUrls;
    /**
     * @return The name which should be used for this rule.
     * 
     */
    private final String name;
    /**
     * @return Specifies a list of network protocols this rule applies to. Possible values are `TCP`, `UDP`.
     * 
     */
    private final @Nullable List<FirewallPolicyRuleCollectionGroupApplicationRuleCollectionRuleProtocol> protocols;
    /**
     * @return Specifies a list of source IP addresses (including CIDR and `*`).
     * 
     */
    private final @Nullable List<String> sourceAddresses;
    /**
     * @return Specifies a list of source IP groups.
     * 
     */
    private final @Nullable List<String> sourceIpGroups;
    /**
     * @return Boolean specifying if TLS shall be terminated (true) or not (false). Must be  `true` when using `destination_urls`. Needs Premium SKU for Firewall Policy.
     * 
     */
    private final @Nullable Boolean terminateTls;
    /**
     * @return Specifies a list of web categories to which access is denied or allowed depending on the value of `action` above. Needs Premium SKU for Firewall Policy.
     * 
     */
    private final @Nullable List<String> webCategories;

    @CustomType.Constructor
    private FirewallPolicyRuleCollectionGroupApplicationRuleCollectionRule(
        @CustomType.Parameter("description") @Nullable String description,
        @CustomType.Parameter("destinationAddresses") @Nullable List<String> destinationAddresses,
        @CustomType.Parameter("destinationFqdnTags") @Nullable List<String> destinationFqdnTags,
        @CustomType.Parameter("destinationFqdns") @Nullable List<String> destinationFqdns,
        @CustomType.Parameter("destinationUrls") @Nullable List<String> destinationUrls,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("protocols") @Nullable List<FirewallPolicyRuleCollectionGroupApplicationRuleCollectionRuleProtocol> protocols,
        @CustomType.Parameter("sourceAddresses") @Nullable List<String> sourceAddresses,
        @CustomType.Parameter("sourceIpGroups") @Nullable List<String> sourceIpGroups,
        @CustomType.Parameter("terminateTls") @Nullable Boolean terminateTls,
        @CustomType.Parameter("webCategories") @Nullable List<String> webCategories) {
        this.description = description;
        this.destinationAddresses = destinationAddresses;
        this.destinationFqdnTags = destinationFqdnTags;
        this.destinationFqdns = destinationFqdns;
        this.destinationUrls = destinationUrls;
        this.name = name;
        this.protocols = protocols;
        this.sourceAddresses = sourceAddresses;
        this.sourceIpGroups = sourceIpGroups;
        this.terminateTls = terminateTls;
        this.webCategories = webCategories;
    }

    /**
     * @return The description which should be used for this rule.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return Specifies a list of destination IP addresses (including CIDR and `*`) or Service Tags.
     * 
     */
    public List<String> destinationAddresses() {
        return this.destinationAddresses == null ? List.of() : this.destinationAddresses;
    }
    /**
     * @return Specifies a list of destination FQDN tags.
     * 
     */
    public List<String> destinationFqdnTags() {
        return this.destinationFqdnTags == null ? List.of() : this.destinationFqdnTags;
    }
    /**
     * @return Specifies a list of destination FQDNs.
     * 
     */
    public List<String> destinationFqdns() {
        return this.destinationFqdns == null ? List.of() : this.destinationFqdns;
    }
    /**
     * @return Specifies a list of destination URLs for which policy should hold. Needs Premium SKU for Firewall Policy. Conflicts with `destination_fqdns`.
     * 
     */
    public List<String> destinationUrls() {
        return this.destinationUrls == null ? List.of() : this.destinationUrls;
    }
    /**
     * @return The name which should be used for this rule.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Specifies a list of network protocols this rule applies to. Possible values are `TCP`, `UDP`.
     * 
     */
    public List<FirewallPolicyRuleCollectionGroupApplicationRuleCollectionRuleProtocol> protocols() {
        return this.protocols == null ? List.of() : this.protocols;
    }
    /**
     * @return Specifies a list of source IP addresses (including CIDR and `*`).
     * 
     */
    public List<String> sourceAddresses() {
        return this.sourceAddresses == null ? List.of() : this.sourceAddresses;
    }
    /**
     * @return Specifies a list of source IP groups.
     * 
     */
    public List<String> sourceIpGroups() {
        return this.sourceIpGroups == null ? List.of() : this.sourceIpGroups;
    }
    /**
     * @return Boolean specifying if TLS shall be terminated (true) or not (false). Must be  `true` when using `destination_urls`. Needs Premium SKU for Firewall Policy.
     * 
     */
    public Optional<Boolean> terminateTls() {
        return Optional.ofNullable(this.terminateTls);
    }
    /**
     * @return Specifies a list of web categories to which access is denied or allowed depending on the value of `action` above. Needs Premium SKU for Firewall Policy.
     * 
     */
    public List<String> webCategories() {
        return this.webCategories == null ? List.of() : this.webCategories;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FirewallPolicyRuleCollectionGroupApplicationRuleCollectionRule defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String description;
        private @Nullable List<String> destinationAddresses;
        private @Nullable List<String> destinationFqdnTags;
        private @Nullable List<String> destinationFqdns;
        private @Nullable List<String> destinationUrls;
        private String name;
        private @Nullable List<FirewallPolicyRuleCollectionGroupApplicationRuleCollectionRuleProtocol> protocols;
        private @Nullable List<String> sourceAddresses;
        private @Nullable List<String> sourceIpGroups;
        private @Nullable Boolean terminateTls;
        private @Nullable List<String> webCategories;

        public Builder() {
    	      // Empty
        }

        public Builder(FirewallPolicyRuleCollectionGroupApplicationRuleCollectionRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.destinationAddresses = defaults.destinationAddresses;
    	      this.destinationFqdnTags = defaults.destinationFqdnTags;
    	      this.destinationFqdns = defaults.destinationFqdns;
    	      this.destinationUrls = defaults.destinationUrls;
    	      this.name = defaults.name;
    	      this.protocols = defaults.protocols;
    	      this.sourceAddresses = defaults.sourceAddresses;
    	      this.sourceIpGroups = defaults.sourceIpGroups;
    	      this.terminateTls = defaults.terminateTls;
    	      this.webCategories = defaults.webCategories;
        }

        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        public Builder destinationAddresses(@Nullable List<String> destinationAddresses) {
            this.destinationAddresses = destinationAddresses;
            return this;
        }
        public Builder destinationAddresses(String... destinationAddresses) {
            return destinationAddresses(List.of(destinationAddresses));
        }
        public Builder destinationFqdnTags(@Nullable List<String> destinationFqdnTags) {
            this.destinationFqdnTags = destinationFqdnTags;
            return this;
        }
        public Builder destinationFqdnTags(String... destinationFqdnTags) {
            return destinationFqdnTags(List.of(destinationFqdnTags));
        }
        public Builder destinationFqdns(@Nullable List<String> destinationFqdns) {
            this.destinationFqdns = destinationFqdns;
            return this;
        }
        public Builder destinationFqdns(String... destinationFqdns) {
            return destinationFqdns(List.of(destinationFqdns));
        }
        public Builder destinationUrls(@Nullable List<String> destinationUrls) {
            this.destinationUrls = destinationUrls;
            return this;
        }
        public Builder destinationUrls(String... destinationUrls) {
            return destinationUrls(List.of(destinationUrls));
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder protocols(@Nullable List<FirewallPolicyRuleCollectionGroupApplicationRuleCollectionRuleProtocol> protocols) {
            this.protocols = protocols;
            return this;
        }
        public Builder protocols(FirewallPolicyRuleCollectionGroupApplicationRuleCollectionRuleProtocol... protocols) {
            return protocols(List.of(protocols));
        }
        public Builder sourceAddresses(@Nullable List<String> sourceAddresses) {
            this.sourceAddresses = sourceAddresses;
            return this;
        }
        public Builder sourceAddresses(String... sourceAddresses) {
            return sourceAddresses(List.of(sourceAddresses));
        }
        public Builder sourceIpGroups(@Nullable List<String> sourceIpGroups) {
            this.sourceIpGroups = sourceIpGroups;
            return this;
        }
        public Builder sourceIpGroups(String... sourceIpGroups) {
            return sourceIpGroups(List.of(sourceIpGroups));
        }
        public Builder terminateTls(@Nullable Boolean terminateTls) {
            this.terminateTls = terminateTls;
            return this;
        }
        public Builder webCategories(@Nullable List<String> webCategories) {
            this.webCategories = webCategories;
            return this;
        }
        public Builder webCategories(String... webCategories) {
            return webCategories(List.of(webCategories));
        }        public FirewallPolicyRuleCollectionGroupApplicationRuleCollectionRule build() {
            return new FirewallPolicyRuleCollectionGroupApplicationRuleCollectionRule(description, destinationAddresses, destinationFqdnTags, destinationFqdns, destinationUrls, name, protocols, sourceAddresses, sourceIpGroups, terminateTls, webCategories);
        }
    }
}
