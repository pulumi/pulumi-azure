// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.media.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TransformOutputCustomPresetCodecH265VideoLayerArgs extends com.pulumi.resources.ResourceArgs {

    public static final TransformOutputCustomPresetCodecH265VideoLayerArgs Empty = new TransformOutputCustomPresetCodecH265VideoLayerArgs();

    /**
     * Whether adaptive B-frames are used when encoding this layer. If not specified, the encoder will turn it on whenever the video profile permits its use. Default to `true`.
     * 
     */
    @Import(name="adaptiveBFrameEnabled")
    private @Nullable Output<Boolean> adaptiveBFrameEnabled;

    /**
     * @return Whether adaptive B-frames are used when encoding this layer. If not specified, the encoder will turn it on whenever the video profile permits its use. Default to `true`.
     * 
     */
    public Optional<Output<Boolean>> adaptiveBFrameEnabled() {
        return Optional.ofNullable(this.adaptiveBFrameEnabled);
    }

    /**
     * The number of B-frames to use when encoding this layer. If not specified, the encoder chooses an appropriate number based on the video profile and level.
     * 
     */
    @Import(name="bFrames")
    private @Nullable Output<Integer> bFrames;

    /**
     * @return The number of B-frames to use when encoding this layer. If not specified, the encoder chooses an appropriate number based on the video profile and level.
     * 
     */
    public Optional<Output<Integer>> bFrames() {
        return Optional.ofNullable(this.bFrames);
    }

    /**
     * The average bitrate in bits per second at which to encode the input video when generating this layer.
     * 
     */
    @Import(name="bitrate", required=true)
    private Output<Integer> bitrate;

    /**
     * @return The average bitrate in bits per second at which to encode the input video when generating this layer.
     * 
     */
    public Output<Integer> bitrate() {
        return this.bitrate;
    }

    /**
     * Specifies the maximum amount of time that the encoder should buffer frames before encoding. The value should be in ISO 8601 format. The value should be in the range `0.1` to `100` seconds. Defaults to `PT5S`.
     * 
     */
    @Import(name="bufferWindow")
    private @Nullable Output<String> bufferWindow;

    /**
     * @return Specifies the maximum amount of time that the encoder should buffer frames before encoding. The value should be in ISO 8601 format. The value should be in the range `0.1` to `100` seconds. Defaults to `PT5S`.
     * 
     */
    public Optional<Output<String>> bufferWindow() {
        return Optional.ofNullable(this.bufferWindow);
    }

    /**
     * The value of CRF to be used when encoding this layer. This setting takes effect when `rate_control_mode` is set `CRF`. The range of CRF value is between `0` and `51`, where lower values would result in better quality, at the expense of higher file sizes. Higher values mean more compression, but at some point quality degradation will be noticed. Default to `28`.
     * 
     */
    @Import(name="crf")
    private @Nullable Output<Double> crf;

    /**
     * @return The value of CRF to be used when encoding this layer. This setting takes effect when `rate_control_mode` is set `CRF`. The range of CRF value is between `0` and `51`, where lower values would result in better quality, at the expense of higher file sizes. Higher values mean more compression, but at some point quality degradation will be noticed. Default to `28`.
     * 
     */
    public Optional<Output<Double>> crf() {
        return Optional.ofNullable(this.crf);
    }

    /**
     * The frame rate (in frames per second) at which to encode this layer. The value can be in the form of `M/N` where `M` and `N` are integers (For example, `30000/1001`), or in the form of a number (For example, `30`, or `29.97`). The encoder enforces constraints on allowed frame rates based on the profile and level. If it is not specified, the encoder will use the same frame rate as the input video.
     * 
     */
    @Import(name="frameRate")
    private @Nullable Output<String> frameRate;

    /**
     * @return The frame rate (in frames per second) at which to encode this layer. The value can be in the form of `M/N` where `M` and `N` are integers (For example, `30000/1001`), or in the form of a number (For example, `30`, or `29.97`). The encoder enforces constraints on allowed frame rates based on the profile and level. If it is not specified, the encoder will use the same frame rate as the input video.
     * 
     */
    public Optional<Output<String>> frameRate() {
        return Optional.ofNullable(this.frameRate);
    }

    /**
     * The height of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example `50%` means the output video has half as many pixels in height as the input.
     * 
     */
    @Import(name="height")
    private @Nullable Output<String> height;

    /**
     * @return The height of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example `50%` means the output video has half as many pixels in height as the input.
     * 
     */
    public Optional<Output<String>> height() {
        return Optional.ofNullable(this.height);
    }

    /**
     * The alphanumeric label for this layer, which can be used in multiplexing different video and audio layers, or in naming the output file.
     * 
     */
    @Import(name="label")
    private @Nullable Output<String> label;

    /**
     * @return The alphanumeric label for this layer, which can be used in multiplexing different video and audio layers, or in naming the output file.
     * 
     */
    public Optional<Output<String>> label() {
        return Optional.ofNullable(this.label);
    }

    /**
     * The H.264 levels. Currently, the resource support Level up to `6.2`. The value can be `auto`, or a number that matches the H.264 profile. If not specified, the default is `auto`, which lets the encoder choose the Level that is appropriate for this layer.
     * 
     */
    @Import(name="level")
    private @Nullable Output<String> level;

    /**
     * @return The H.264 levels. Currently, the resource support Level up to `6.2`. The value can be `auto`, or a number that matches the H.264 profile. If not specified, the default is `auto`, which lets the encoder choose the Level that is appropriate for this layer.
     * 
     */
    public Optional<Output<String>> level() {
        return Optional.ofNullable(this.level);
    }

    /**
     * The maximum bitrate (in bits per second), at which the VBV buffer should be assumed to refill. If not specified, defaults to the same value as bitrate.
     * 
     */
    @Import(name="maxBitrate")
    private @Nullable Output<Integer> maxBitrate;

    /**
     * @return The maximum bitrate (in bits per second), at which the VBV buffer should be assumed to refill. If not specified, defaults to the same value as bitrate.
     * 
     */
    public Optional<Output<Integer>> maxBitrate() {
        return Optional.ofNullable(this.maxBitrate);
    }

    /**
     * The H.264 profile. Possible values are `Auto`, `Main` and `Main10`. Default to `Auto`.
     * 
     */
    @Import(name="profile")
    private @Nullable Output<String> profile;

    /**
     * @return The H.264 profile. Possible values are `Auto`, `Main` and `Main10`. Default to `Auto`.
     * 
     */
    public Optional<Output<String>> profile() {
        return Optional.ofNullable(this.profile);
    }

    /**
     * The number of reference frames to be used when encoding this layer. If not specified, the encoder determines an appropriate number based on the encoder complexity setting.
     * 
     */
    @Import(name="referenceFrames")
    private @Nullable Output<Integer> referenceFrames;

    /**
     * @return The number of reference frames to be used when encoding this layer. If not specified, the encoder determines an appropriate number based on the encoder complexity setting.
     * 
     */
    public Optional<Output<Integer>> referenceFrames() {
        return Optional.ofNullable(this.referenceFrames);
    }

    /**
     * The number of slices to be used when encoding this layer. If not specified, default is `1`, which means that encoder will use a single slice for each frame.
     * 
     */
    @Import(name="slices")
    private @Nullable Output<Integer> slices;

    /**
     * @return The number of slices to be used when encoding this layer. If not specified, default is `1`, which means that encoder will use a single slice for each frame.
     * 
     */
    public Optional<Output<Integer>> slices() {
        return Optional.ofNullable(this.slices);
    }

    /**
     * The width of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example `50%` means the output video has half as many pixels in width as the input.
     * 
     */
    @Import(name="width")
    private @Nullable Output<String> width;

    /**
     * @return The width of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example `50%` means the output video has half as many pixels in width as the input.
     * 
     */
    public Optional<Output<String>> width() {
        return Optional.ofNullable(this.width);
    }

    private TransformOutputCustomPresetCodecH265VideoLayerArgs() {}

    private TransformOutputCustomPresetCodecH265VideoLayerArgs(TransformOutputCustomPresetCodecH265VideoLayerArgs $) {
        this.adaptiveBFrameEnabled = $.adaptiveBFrameEnabled;
        this.bFrames = $.bFrames;
        this.bitrate = $.bitrate;
        this.bufferWindow = $.bufferWindow;
        this.crf = $.crf;
        this.frameRate = $.frameRate;
        this.height = $.height;
        this.label = $.label;
        this.level = $.level;
        this.maxBitrate = $.maxBitrate;
        this.profile = $.profile;
        this.referenceFrames = $.referenceFrames;
        this.slices = $.slices;
        this.width = $.width;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TransformOutputCustomPresetCodecH265VideoLayerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TransformOutputCustomPresetCodecH265VideoLayerArgs $;

        public Builder() {
            $ = new TransformOutputCustomPresetCodecH265VideoLayerArgs();
        }

        public Builder(TransformOutputCustomPresetCodecH265VideoLayerArgs defaults) {
            $ = new TransformOutputCustomPresetCodecH265VideoLayerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param adaptiveBFrameEnabled Whether adaptive B-frames are used when encoding this layer. If not specified, the encoder will turn it on whenever the video profile permits its use. Default to `true`.
         * 
         * @return builder
         * 
         */
        public Builder adaptiveBFrameEnabled(@Nullable Output<Boolean> adaptiveBFrameEnabled) {
            $.adaptiveBFrameEnabled = adaptiveBFrameEnabled;
            return this;
        }

        /**
         * @param adaptiveBFrameEnabled Whether adaptive B-frames are used when encoding this layer. If not specified, the encoder will turn it on whenever the video profile permits its use. Default to `true`.
         * 
         * @return builder
         * 
         */
        public Builder adaptiveBFrameEnabled(Boolean adaptiveBFrameEnabled) {
            return adaptiveBFrameEnabled(Output.of(adaptiveBFrameEnabled));
        }

        /**
         * @param bFrames The number of B-frames to use when encoding this layer. If not specified, the encoder chooses an appropriate number based on the video profile and level.
         * 
         * @return builder
         * 
         */
        public Builder bFrames(@Nullable Output<Integer> bFrames) {
            $.bFrames = bFrames;
            return this;
        }

        /**
         * @param bFrames The number of B-frames to use when encoding this layer. If not specified, the encoder chooses an appropriate number based on the video profile and level.
         * 
         * @return builder
         * 
         */
        public Builder bFrames(Integer bFrames) {
            return bFrames(Output.of(bFrames));
        }

        /**
         * @param bitrate The average bitrate in bits per second at which to encode the input video when generating this layer.
         * 
         * @return builder
         * 
         */
        public Builder bitrate(Output<Integer> bitrate) {
            $.bitrate = bitrate;
            return this;
        }

        /**
         * @param bitrate The average bitrate in bits per second at which to encode the input video when generating this layer.
         * 
         * @return builder
         * 
         */
        public Builder bitrate(Integer bitrate) {
            return bitrate(Output.of(bitrate));
        }

        /**
         * @param bufferWindow Specifies the maximum amount of time that the encoder should buffer frames before encoding. The value should be in ISO 8601 format. The value should be in the range `0.1` to `100` seconds. Defaults to `PT5S`.
         * 
         * @return builder
         * 
         */
        public Builder bufferWindow(@Nullable Output<String> bufferWindow) {
            $.bufferWindow = bufferWindow;
            return this;
        }

        /**
         * @param bufferWindow Specifies the maximum amount of time that the encoder should buffer frames before encoding. The value should be in ISO 8601 format. The value should be in the range `0.1` to `100` seconds. Defaults to `PT5S`.
         * 
         * @return builder
         * 
         */
        public Builder bufferWindow(String bufferWindow) {
            return bufferWindow(Output.of(bufferWindow));
        }

        /**
         * @param crf The value of CRF to be used when encoding this layer. This setting takes effect when `rate_control_mode` is set `CRF`. The range of CRF value is between `0` and `51`, where lower values would result in better quality, at the expense of higher file sizes. Higher values mean more compression, but at some point quality degradation will be noticed. Default to `28`.
         * 
         * @return builder
         * 
         */
        public Builder crf(@Nullable Output<Double> crf) {
            $.crf = crf;
            return this;
        }

        /**
         * @param crf The value of CRF to be used when encoding this layer. This setting takes effect when `rate_control_mode` is set `CRF`. The range of CRF value is between `0` and `51`, where lower values would result in better quality, at the expense of higher file sizes. Higher values mean more compression, but at some point quality degradation will be noticed. Default to `28`.
         * 
         * @return builder
         * 
         */
        public Builder crf(Double crf) {
            return crf(Output.of(crf));
        }

        /**
         * @param frameRate The frame rate (in frames per second) at which to encode this layer. The value can be in the form of `M/N` where `M` and `N` are integers (For example, `30000/1001`), or in the form of a number (For example, `30`, or `29.97`). The encoder enforces constraints on allowed frame rates based on the profile and level. If it is not specified, the encoder will use the same frame rate as the input video.
         * 
         * @return builder
         * 
         */
        public Builder frameRate(@Nullable Output<String> frameRate) {
            $.frameRate = frameRate;
            return this;
        }

        /**
         * @param frameRate The frame rate (in frames per second) at which to encode this layer. The value can be in the form of `M/N` where `M` and `N` are integers (For example, `30000/1001`), or in the form of a number (For example, `30`, or `29.97`). The encoder enforces constraints on allowed frame rates based on the profile and level. If it is not specified, the encoder will use the same frame rate as the input video.
         * 
         * @return builder
         * 
         */
        public Builder frameRate(String frameRate) {
            return frameRate(Output.of(frameRate));
        }

        /**
         * @param height The height of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example `50%` means the output video has half as many pixels in height as the input.
         * 
         * @return builder
         * 
         */
        public Builder height(@Nullable Output<String> height) {
            $.height = height;
            return this;
        }

        /**
         * @param height The height of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example `50%` means the output video has half as many pixels in height as the input.
         * 
         * @return builder
         * 
         */
        public Builder height(String height) {
            return height(Output.of(height));
        }

        /**
         * @param label The alphanumeric label for this layer, which can be used in multiplexing different video and audio layers, or in naming the output file.
         * 
         * @return builder
         * 
         */
        public Builder label(@Nullable Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label The alphanumeric label for this layer, which can be used in multiplexing different video and audio layers, or in naming the output file.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param level The H.264 levels. Currently, the resource support Level up to `6.2`. The value can be `auto`, or a number that matches the H.264 profile. If not specified, the default is `auto`, which lets the encoder choose the Level that is appropriate for this layer.
         * 
         * @return builder
         * 
         */
        public Builder level(@Nullable Output<String> level) {
            $.level = level;
            return this;
        }

        /**
         * @param level The H.264 levels. Currently, the resource support Level up to `6.2`. The value can be `auto`, or a number that matches the H.264 profile. If not specified, the default is `auto`, which lets the encoder choose the Level that is appropriate for this layer.
         * 
         * @return builder
         * 
         */
        public Builder level(String level) {
            return level(Output.of(level));
        }

        /**
         * @param maxBitrate The maximum bitrate (in bits per second), at which the VBV buffer should be assumed to refill. If not specified, defaults to the same value as bitrate.
         * 
         * @return builder
         * 
         */
        public Builder maxBitrate(@Nullable Output<Integer> maxBitrate) {
            $.maxBitrate = maxBitrate;
            return this;
        }

        /**
         * @param maxBitrate The maximum bitrate (in bits per second), at which the VBV buffer should be assumed to refill. If not specified, defaults to the same value as bitrate.
         * 
         * @return builder
         * 
         */
        public Builder maxBitrate(Integer maxBitrate) {
            return maxBitrate(Output.of(maxBitrate));
        }

        /**
         * @param profile The H.264 profile. Possible values are `Auto`, `Main` and `Main10`. Default to `Auto`.
         * 
         * @return builder
         * 
         */
        public Builder profile(@Nullable Output<String> profile) {
            $.profile = profile;
            return this;
        }

        /**
         * @param profile The H.264 profile. Possible values are `Auto`, `Main` and `Main10`. Default to `Auto`.
         * 
         * @return builder
         * 
         */
        public Builder profile(String profile) {
            return profile(Output.of(profile));
        }

        /**
         * @param referenceFrames The number of reference frames to be used when encoding this layer. If not specified, the encoder determines an appropriate number based on the encoder complexity setting.
         * 
         * @return builder
         * 
         */
        public Builder referenceFrames(@Nullable Output<Integer> referenceFrames) {
            $.referenceFrames = referenceFrames;
            return this;
        }

        /**
         * @param referenceFrames The number of reference frames to be used when encoding this layer. If not specified, the encoder determines an appropriate number based on the encoder complexity setting.
         * 
         * @return builder
         * 
         */
        public Builder referenceFrames(Integer referenceFrames) {
            return referenceFrames(Output.of(referenceFrames));
        }

        /**
         * @param slices The number of slices to be used when encoding this layer. If not specified, default is `1`, which means that encoder will use a single slice for each frame.
         * 
         * @return builder
         * 
         */
        public Builder slices(@Nullable Output<Integer> slices) {
            $.slices = slices;
            return this;
        }

        /**
         * @param slices The number of slices to be used when encoding this layer. If not specified, default is `1`, which means that encoder will use a single slice for each frame.
         * 
         * @return builder
         * 
         */
        public Builder slices(Integer slices) {
            return slices(Output.of(slices));
        }

        /**
         * @param width The width of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example `50%` means the output video has half as many pixels in width as the input.
         * 
         * @return builder
         * 
         */
        public Builder width(@Nullable Output<String> width) {
            $.width = width;
            return this;
        }

        /**
         * @param width The width of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example `50%` means the output video has half as many pixels in width as the input.
         * 
         * @return builder
         * 
         */
        public Builder width(String width) {
            return width(Output.of(width));
        }

        public TransformOutputCustomPresetCodecH265VideoLayerArgs build() {
            if ($.bitrate == null) {
                throw new MissingRequiredPropertyException("TransformOutputCustomPresetCodecH265VideoLayerArgs", "bitrate");
            }
            return $;
        }
    }

}
