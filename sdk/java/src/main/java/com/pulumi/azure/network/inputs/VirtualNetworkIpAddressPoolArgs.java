// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VirtualNetworkIpAddressPoolArgs extends com.pulumi.resources.ResourceArgs {

    public static final VirtualNetworkIpAddressPoolArgs Empty = new VirtualNetworkIpAddressPoolArgs();

    /**
     * The list of IP address prefixes allocated to the Virtual Network.
     * 
     */
    @Import(name="allocatedIpAddressPrefixes")
    private @Nullable Output<List<String>> allocatedIpAddressPrefixes;

    /**
     * @return The list of IP address prefixes allocated to the Virtual Network.
     * 
     */
    public Optional<Output<List<String>>> allocatedIpAddressPrefixes() {
        return Optional.ofNullable(this.allocatedIpAddressPrefixes);
    }

    /**
     * The ID of the Network Manager IP Address Management (IPAM) Pool.
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return The ID of the Network Manager IP Address Management (IPAM) Pool.
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * The number of IP addresses to allocated to the Virtual Network. The value must be a string that represents a positive number, e.g., `&#34;100&#34;`.
     * 
     */
    @Import(name="numberOfIpAddresses", required=true)
    private Output<String> numberOfIpAddresses;

    /**
     * @return The number of IP addresses to allocated to the Virtual Network. The value must be a string that represents a positive number, e.g., `&#34;100&#34;`.
     * 
     */
    public Output<String> numberOfIpAddresses() {
        return this.numberOfIpAddresses;
    }

    private VirtualNetworkIpAddressPoolArgs() {}

    private VirtualNetworkIpAddressPoolArgs(VirtualNetworkIpAddressPoolArgs $) {
        this.allocatedIpAddressPrefixes = $.allocatedIpAddressPrefixes;
        this.id = $.id;
        this.numberOfIpAddresses = $.numberOfIpAddresses;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualNetworkIpAddressPoolArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualNetworkIpAddressPoolArgs $;

        public Builder() {
            $ = new VirtualNetworkIpAddressPoolArgs();
        }

        public Builder(VirtualNetworkIpAddressPoolArgs defaults) {
            $ = new VirtualNetworkIpAddressPoolArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allocatedIpAddressPrefixes The list of IP address prefixes allocated to the Virtual Network.
         * 
         * @return builder
         * 
         */
        public Builder allocatedIpAddressPrefixes(@Nullable Output<List<String>> allocatedIpAddressPrefixes) {
            $.allocatedIpAddressPrefixes = allocatedIpAddressPrefixes;
            return this;
        }

        /**
         * @param allocatedIpAddressPrefixes The list of IP address prefixes allocated to the Virtual Network.
         * 
         * @return builder
         * 
         */
        public Builder allocatedIpAddressPrefixes(List<String> allocatedIpAddressPrefixes) {
            return allocatedIpAddressPrefixes(Output.of(allocatedIpAddressPrefixes));
        }

        /**
         * @param allocatedIpAddressPrefixes The list of IP address prefixes allocated to the Virtual Network.
         * 
         * @return builder
         * 
         */
        public Builder allocatedIpAddressPrefixes(String... allocatedIpAddressPrefixes) {
            return allocatedIpAddressPrefixes(List.of(allocatedIpAddressPrefixes));
        }

        /**
         * @param id The ID of the Network Manager IP Address Management (IPAM) Pool.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The ID of the Network Manager IP Address Management (IPAM) Pool.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param numberOfIpAddresses The number of IP addresses to allocated to the Virtual Network. The value must be a string that represents a positive number, e.g., `&#34;100&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder numberOfIpAddresses(Output<String> numberOfIpAddresses) {
            $.numberOfIpAddresses = numberOfIpAddresses;
            return this;
        }

        /**
         * @param numberOfIpAddresses The number of IP addresses to allocated to the Virtual Network. The value must be a string that represents a positive number, e.g., `&#34;100&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder numberOfIpAddresses(String numberOfIpAddresses) {
            return numberOfIpAddresses(Output.of(numberOfIpAddresses));
        }

        public VirtualNetworkIpAddressPoolArgs build() {
            if ($.id == null) {
                throw new MissingRequiredPropertyException("VirtualNetworkIpAddressPoolArgs", "id");
            }
            if ($.numberOfIpAddresses == null) {
                throw new MissingRequiredPropertyException("VirtualNetworkIpAddressPoolArgs", "numberOfIpAddresses");
            }
            return $;
        }
    }

}
