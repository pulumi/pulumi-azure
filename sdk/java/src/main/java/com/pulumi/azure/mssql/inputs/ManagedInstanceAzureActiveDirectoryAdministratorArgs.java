// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.mssql.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagedInstanceAzureActiveDirectoryAdministratorArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagedInstanceAzureActiveDirectoryAdministratorArgs Empty = new ManagedInstanceAzureActiveDirectoryAdministratorArgs();

    /**
     * Specifies whether only Azure AD authentication can be used to log in to this SQL Managed Instance. When `true`, the `administrator_login` and `administrator_login_password` properties can be omitted. Defaults to `false`.
     * 
     */
    @Import(name="azureadAuthenticationOnlyEnabled")
    private @Nullable Output<Boolean> azureadAuthenticationOnlyEnabled;

    /**
     * @return Specifies whether only Azure AD authentication can be used to log in to this SQL Managed Instance. When `true`, the `administrator_login` and `administrator_login_password` properties can be omitted. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> azureadAuthenticationOnlyEnabled() {
        return Optional.ofNullable(this.azureadAuthenticationOnlyEnabled);
    }

    /**
     * The login username of the Azure AD Administrator of this SQL Managed Instance.
     * 
     */
    @Import(name="loginUsername", required=true)
    private Output<String> loginUsername;

    /**
     * @return The login username of the Azure AD Administrator of this SQL Managed Instance.
     * 
     */
    public Output<String> loginUsername() {
        return this.loginUsername;
    }

    /**
     * The object id of the Azure AD Administrator of this SQL Managed Instance.
     * 
     */
    @Import(name="objectId", required=true)
    private Output<String> objectId;

    /**
     * @return The object id of the Azure AD Administrator of this SQL Managed Instance.
     * 
     */
    public Output<String> objectId() {
        return this.objectId;
    }

    /**
     * The principal type of the Azure AD Administrator of this SQL Managed Instance. Possible values are `Application`, `Group`, `User`.
     * 
     */
    @Import(name="principalType", required=true)
    private Output<String> principalType;

    /**
     * @return The principal type of the Azure AD Administrator of this SQL Managed Instance. Possible values are `Application`, `Group`, `User`.
     * 
     */
    public Output<String> principalType() {
        return this.principalType;
    }

    /**
     * The tenant id of the Azure AD Administrator of this SQL Managed Instance. Should be specified if the Azure AD Administrator is homed in a different tenant to the SQL Managed Instance.
     * 
     */
    @Import(name="tenantId")
    private @Nullable Output<String> tenantId;

    /**
     * @return The tenant id of the Azure AD Administrator of this SQL Managed Instance. Should be specified if the Azure AD Administrator is homed in a different tenant to the SQL Managed Instance.
     * 
     */
    public Optional<Output<String>> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }

    private ManagedInstanceAzureActiveDirectoryAdministratorArgs() {}

    private ManagedInstanceAzureActiveDirectoryAdministratorArgs(ManagedInstanceAzureActiveDirectoryAdministratorArgs $) {
        this.azureadAuthenticationOnlyEnabled = $.azureadAuthenticationOnlyEnabled;
        this.loginUsername = $.loginUsername;
        this.objectId = $.objectId;
        this.principalType = $.principalType;
        this.tenantId = $.tenantId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedInstanceAzureActiveDirectoryAdministratorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedInstanceAzureActiveDirectoryAdministratorArgs $;

        public Builder() {
            $ = new ManagedInstanceAzureActiveDirectoryAdministratorArgs();
        }

        public Builder(ManagedInstanceAzureActiveDirectoryAdministratorArgs defaults) {
            $ = new ManagedInstanceAzureActiveDirectoryAdministratorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param azureadAuthenticationOnlyEnabled Specifies whether only Azure AD authentication can be used to log in to this SQL Managed Instance. When `true`, the `administrator_login` and `administrator_login_password` properties can be omitted. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder azureadAuthenticationOnlyEnabled(@Nullable Output<Boolean> azureadAuthenticationOnlyEnabled) {
            $.azureadAuthenticationOnlyEnabled = azureadAuthenticationOnlyEnabled;
            return this;
        }

        /**
         * @param azureadAuthenticationOnlyEnabled Specifies whether only Azure AD authentication can be used to log in to this SQL Managed Instance. When `true`, the `administrator_login` and `administrator_login_password` properties can be omitted. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder azureadAuthenticationOnlyEnabled(Boolean azureadAuthenticationOnlyEnabled) {
            return azureadAuthenticationOnlyEnabled(Output.of(azureadAuthenticationOnlyEnabled));
        }

        /**
         * @param loginUsername The login username of the Azure AD Administrator of this SQL Managed Instance.
         * 
         * @return builder
         * 
         */
        public Builder loginUsername(Output<String> loginUsername) {
            $.loginUsername = loginUsername;
            return this;
        }

        /**
         * @param loginUsername The login username of the Azure AD Administrator of this SQL Managed Instance.
         * 
         * @return builder
         * 
         */
        public Builder loginUsername(String loginUsername) {
            return loginUsername(Output.of(loginUsername));
        }

        /**
         * @param objectId The object id of the Azure AD Administrator of this SQL Managed Instance.
         * 
         * @return builder
         * 
         */
        public Builder objectId(Output<String> objectId) {
            $.objectId = objectId;
            return this;
        }

        /**
         * @param objectId The object id of the Azure AD Administrator of this SQL Managed Instance.
         * 
         * @return builder
         * 
         */
        public Builder objectId(String objectId) {
            return objectId(Output.of(objectId));
        }

        /**
         * @param principalType The principal type of the Azure AD Administrator of this SQL Managed Instance. Possible values are `Application`, `Group`, `User`.
         * 
         * @return builder
         * 
         */
        public Builder principalType(Output<String> principalType) {
            $.principalType = principalType;
            return this;
        }

        /**
         * @param principalType The principal type of the Azure AD Administrator of this SQL Managed Instance. Possible values are `Application`, `Group`, `User`.
         * 
         * @return builder
         * 
         */
        public Builder principalType(String principalType) {
            return principalType(Output.of(principalType));
        }

        /**
         * @param tenantId The tenant id of the Azure AD Administrator of this SQL Managed Instance. Should be specified if the Azure AD Administrator is homed in a different tenant to the SQL Managed Instance.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(@Nullable Output<String> tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        /**
         * @param tenantId The tenant id of the Azure AD Administrator of this SQL Managed Instance. Should be specified if the Azure AD Administrator is homed in a different tenant to the SQL Managed Instance.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(String tenantId) {
            return tenantId(Output.of(tenantId));
        }

        public ManagedInstanceAzureActiveDirectoryAdministratorArgs build() {
            if ($.loginUsername == null) {
                throw new MissingRequiredPropertyException("ManagedInstanceAzureActiveDirectoryAdministratorArgs", "loginUsername");
            }
            if ($.objectId == null) {
                throw new MissingRequiredPropertyException("ManagedInstanceAzureActiveDirectoryAdministratorArgs", "objectId");
            }
            if ($.principalType == null) {
                throw new MissingRequiredPropertyException("ManagedInstanceAzureActiveDirectoryAdministratorArgs", "principalType");
            }
            return $;
        }
    }

}
