// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.compute;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.compute.DiskPoolManagedDiskAttachmentArgs;
import com.pulumi.azure.compute.inputs.DiskPoolManagedDiskAttachmentState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Manages a Disk Pool Managed Disk Attachment.
 * 
 * &gt; **Note:** Must be either a premium SSD, standard SSD, or an ultra disk in the same region and availability zone as the disk pool.
 * 
 * &gt; **Note:** Ultra disks must have a disk sector size of 512 bytes.
 * 
 * &gt; **Note:** Must be a shared disk, with a maxShares value of two or greater.
 * 
 * &gt; **Note:** You must provide the StoragePool resource provider RBAC permissions to the disks that will be added to the disk pool.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.network.VirtualNetwork;
 * import com.pulumi.azure.network.VirtualNetworkArgs;
 * import com.pulumi.azure.network.Subnet;
 * import com.pulumi.azure.network.SubnetArgs;
 * import com.pulumi.azure.network.inputs.SubnetDelegationArgs;
 * import com.pulumi.azure.network.inputs.SubnetDelegationServiceDelegationArgs;
 * import com.pulumi.azure.compute.DiskPool;
 * import com.pulumi.azure.compute.DiskPoolArgs;
 * import com.pulumi.azure.compute.ManagedDisk;
 * import com.pulumi.azure.compute.ManagedDiskArgs;
 * import com.pulumi.azuread.AzureadFunctions;
 * import com.pulumi.azuread.inputs.GetServicePrincipalArgs;
 * import com.pulumi.azure.authorization.Assignment;
 * import com.pulumi.azure.authorization.AssignmentArgs;
 * import com.pulumi.azure.compute.DiskPoolManagedDiskAttachment;
 * import com.pulumi.azure.compute.DiskPoolManagedDiskAttachmentArgs;
 * import com.pulumi.codegen.internal.KeyedValue;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampleResourceGroup = new ResourceGroup(&#34;exampleResourceGroup&#34;, ResourceGroupArgs.builder()        
 *             .location(&#34;West Europe&#34;)
 *             .build());
 * 
 *         var exampleVirtualNetwork = new VirtualNetwork(&#34;exampleVirtualNetwork&#34;, VirtualNetworkArgs.builder()        
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .location(exampleResourceGroup.location())
 *             .addressSpaces(&#34;10.0.0.0/16&#34;)
 *             .build());
 * 
 *         var exampleSubnet = new Subnet(&#34;exampleSubnet&#34;, SubnetArgs.builder()        
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .virtualNetworkName(exampleVirtualNetwork.name())
 *             .addressPrefixes(&#34;10.0.0.0/24&#34;)
 *             .delegations(SubnetDelegationArgs.builder()
 *                 .name(&#34;diskspool&#34;)
 *                 .serviceDelegation(SubnetDelegationServiceDelegationArgs.builder()
 *                     .actions(&#34;Microsoft.Network/virtualNetworks/read&#34;)
 *                     .name(&#34;Microsoft.StoragePool/diskPools&#34;)
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var exampleDiskPool = new DiskPool(&#34;exampleDiskPool&#34;, DiskPoolArgs.builder()        
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .location(exampleResourceGroup.location())
 *             .subnetId(exampleSubnet.id())
 *             .zones(&#34;1&#34;)
 *             .skuName(&#34;Basic_B1&#34;)
 *             .build());
 * 
 *         var exampleManagedDisk = new ManagedDisk(&#34;exampleManagedDisk&#34;, ManagedDiskArgs.builder()        
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .location(exampleResourceGroup.location())
 *             .createOption(&#34;Empty&#34;)
 *             .storageAccountType(&#34;Premium_LRS&#34;)
 *             .diskSizeGb(4)
 *             .maxShares(2)
 *             .zone(&#34;1&#34;)
 *             .build());
 * 
 *         final var exampleServicePrincipal = AzureadFunctions.getServicePrincipal(GetServicePrincipalArgs.builder()
 *             .displayName(&#34;StoragePool Resource Provider&#34;)
 *             .build());
 * 
 *         final var roles =         
 *             &#34;Disk Pool Operator&#34;,
 *             &#34;Virtual Machine Contributor&#34;;
 * 
 *         for (var i = 0; i &lt; roles.length(); i++) {
 *             new Assignment(&#34;exampleAssignment-&#34; + i, AssignmentArgs.builder()            
 *                 .principalId(exampleServicePrincipal.applyValue(getServicePrincipalResult -&gt; getServicePrincipalResult.id()))
 *                 .roleDefinitionName(roles[range.value()])
 *                 .scope(exampleManagedDisk.id())
 *                 .build());
 * 
 *         
 * }
 *         var exampleDiskPoolManagedDiskAttachment = new DiskPoolManagedDiskAttachment(&#34;exampleDiskPoolManagedDiskAttachment&#34;, DiskPoolManagedDiskAttachmentArgs.builder()        
 *             .diskPoolId(exampleDiskPool.id())
 *             .managedDiskId(exampleManagedDisk.id())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(exampleAssignment)
 *                 .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Disks Pool Managed Disk Attachments can be imported using the `resource id`, e.g.
 * 
 * ```sh
 *  $ pulumi import azure:compute/diskPoolManagedDiskAttachment:DiskPoolManagedDiskAttachment example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resGroup1/providers/Microsoft.StoragePool/diskPools/storagePool1/managedDisks|/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resGroup1/providers/Microsoft.Compute/disks/disk1
 * ```
 * 
 */
@ResourceType(type="azure:compute/diskPoolManagedDiskAttachment:DiskPoolManagedDiskAttachment")
public class DiskPoolManagedDiskAttachment extends com.pulumi.resources.CustomResource {
    /**
     * The ID of the Disk Pool. Changing this forces a new Disk Pool Managed Disk Attachment to be created.
     * 
     */
    @Export(name="diskPoolId", type=String.class, parameters={})
    private Output<String> diskPoolId;

    /**
     * @return The ID of the Disk Pool. Changing this forces a new Disk Pool Managed Disk Attachment to be created.
     * 
     */
    public Output<String> diskPoolId() {
        return this.diskPoolId;
    }
    /**
     * The ID of the Managed Disk. Changing this forces a new Disks Pool Managed Disk Attachment to be created.
     * 
     */
    @Export(name="managedDiskId", type=String.class, parameters={})
    private Output<String> managedDiskId;

    /**
     * @return The ID of the Managed Disk. Changing this forces a new Disks Pool Managed Disk Attachment to be created.
     * 
     */
    public Output<String> managedDiskId() {
        return this.managedDiskId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public DiskPoolManagedDiskAttachment(String name) {
        this(name, DiskPoolManagedDiskAttachmentArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public DiskPoolManagedDiskAttachment(String name, DiskPoolManagedDiskAttachmentArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public DiskPoolManagedDiskAttachment(String name, DiskPoolManagedDiskAttachmentArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:compute/diskPoolManagedDiskAttachment:DiskPoolManagedDiskAttachment", name, args == null ? DiskPoolManagedDiskAttachmentArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private DiskPoolManagedDiskAttachment(String name, Output<String> id, @Nullable DiskPoolManagedDiskAttachmentState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:compute/diskPoolManagedDiskAttachment:DiskPoolManagedDiskAttachment", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static DiskPoolManagedDiskAttachment get(String name, Output<String> id, @Nullable DiskPoolManagedDiskAttachmentState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new DiskPoolManagedDiskAttachment(name, id, state, options);
    }
}
