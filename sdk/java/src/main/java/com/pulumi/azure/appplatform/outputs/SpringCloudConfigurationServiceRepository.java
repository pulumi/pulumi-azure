// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appplatform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SpringCloudConfigurationServiceRepository {
    /**
     * @return Specifies the ID of the Certificate Authority used when retrieving the Git Repository via HTTPS.
     * 
     */
    private @Nullable String caCertificateId;
    /**
     * @return Specifies the SSH public key of git repository.
     * 
     */
    private @Nullable String hostKey;
    /**
     * @return Specifies the SSH key algorithm of git repository.
     * 
     */
    private @Nullable String hostKeyAlgorithm;
    /**
     * @return Specifies the label of the repository.
     * 
     */
    private String label;
    /**
     * @return Specifies the name which should be used for this repository.
     * 
     */
    private String name;
    /**
     * @return Specifies the password of git repository basic auth.
     * 
     */
    private @Nullable String password;
    /**
     * @return Specifies the collection of patterns of the repository.
     * 
     */
    private List<String> patterns;
    /**
     * @return Specifies the SSH private key of git repository.
     * 
     */
    private @Nullable String privateKey;
    /**
     * @return Specifies a list of searching path of the repository
     * 
     */
    private @Nullable List<String> searchPaths;
    /**
     * @return Specifies whether enable the strict host key checking.
     * 
     */
    private @Nullable Boolean strictHostKeyChecking;
    /**
     * @return Specifies the URI of the repository.
     * 
     */
    private String uri;
    /**
     * @return Specifies the username of git repository basic auth.
     * 
     */
    private @Nullable String username;

    private SpringCloudConfigurationServiceRepository() {}
    /**
     * @return Specifies the ID of the Certificate Authority used when retrieving the Git Repository via HTTPS.
     * 
     */
    public Optional<String> caCertificateId() {
        return Optional.ofNullable(this.caCertificateId);
    }
    /**
     * @return Specifies the SSH public key of git repository.
     * 
     */
    public Optional<String> hostKey() {
        return Optional.ofNullable(this.hostKey);
    }
    /**
     * @return Specifies the SSH key algorithm of git repository.
     * 
     */
    public Optional<String> hostKeyAlgorithm() {
        return Optional.ofNullable(this.hostKeyAlgorithm);
    }
    /**
     * @return Specifies the label of the repository.
     * 
     */
    public String label() {
        return this.label;
    }
    /**
     * @return Specifies the name which should be used for this repository.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Specifies the password of git repository basic auth.
     * 
     */
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }
    /**
     * @return Specifies the collection of patterns of the repository.
     * 
     */
    public List<String> patterns() {
        return this.patterns;
    }
    /**
     * @return Specifies the SSH private key of git repository.
     * 
     */
    public Optional<String> privateKey() {
        return Optional.ofNullable(this.privateKey);
    }
    /**
     * @return Specifies a list of searching path of the repository
     * 
     */
    public List<String> searchPaths() {
        return this.searchPaths == null ? List.of() : this.searchPaths;
    }
    /**
     * @return Specifies whether enable the strict host key checking.
     * 
     */
    public Optional<Boolean> strictHostKeyChecking() {
        return Optional.ofNullable(this.strictHostKeyChecking);
    }
    /**
     * @return Specifies the URI of the repository.
     * 
     */
    public String uri() {
        return this.uri;
    }
    /**
     * @return Specifies the username of git repository basic auth.
     * 
     */
    public Optional<String> username() {
        return Optional.ofNullable(this.username);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SpringCloudConfigurationServiceRepository defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String caCertificateId;
        private @Nullable String hostKey;
        private @Nullable String hostKeyAlgorithm;
        private String label;
        private String name;
        private @Nullable String password;
        private List<String> patterns;
        private @Nullable String privateKey;
        private @Nullable List<String> searchPaths;
        private @Nullable Boolean strictHostKeyChecking;
        private String uri;
        private @Nullable String username;
        public Builder() {}
        public Builder(SpringCloudConfigurationServiceRepository defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.caCertificateId = defaults.caCertificateId;
    	      this.hostKey = defaults.hostKey;
    	      this.hostKeyAlgorithm = defaults.hostKeyAlgorithm;
    	      this.label = defaults.label;
    	      this.name = defaults.name;
    	      this.password = defaults.password;
    	      this.patterns = defaults.patterns;
    	      this.privateKey = defaults.privateKey;
    	      this.searchPaths = defaults.searchPaths;
    	      this.strictHostKeyChecking = defaults.strictHostKeyChecking;
    	      this.uri = defaults.uri;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder caCertificateId(@Nullable String caCertificateId) {

            this.caCertificateId = caCertificateId;
            return this;
        }
        @CustomType.Setter
        public Builder hostKey(@Nullable String hostKey) {

            this.hostKey = hostKey;
            return this;
        }
        @CustomType.Setter
        public Builder hostKeyAlgorithm(@Nullable String hostKeyAlgorithm) {

            this.hostKeyAlgorithm = hostKeyAlgorithm;
            return this;
        }
        @CustomType.Setter
        public Builder label(String label) {
            if (label == null) {
              throw new MissingRequiredPropertyException("SpringCloudConfigurationServiceRepository", "label");
            }
            this.label = label;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("SpringCloudConfigurationServiceRepository", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder password(@Nullable String password) {

            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder patterns(List<String> patterns) {
            if (patterns == null) {
              throw new MissingRequiredPropertyException("SpringCloudConfigurationServiceRepository", "patterns");
            }
            this.patterns = patterns;
            return this;
        }
        public Builder patterns(String... patterns) {
            return patterns(List.of(patterns));
        }
        @CustomType.Setter
        public Builder privateKey(@Nullable String privateKey) {

            this.privateKey = privateKey;
            return this;
        }
        @CustomType.Setter
        public Builder searchPaths(@Nullable List<String> searchPaths) {

            this.searchPaths = searchPaths;
            return this;
        }
        public Builder searchPaths(String... searchPaths) {
            return searchPaths(List.of(searchPaths));
        }
        @CustomType.Setter
        public Builder strictHostKeyChecking(@Nullable Boolean strictHostKeyChecking) {

            this.strictHostKeyChecking = strictHostKeyChecking;
            return this;
        }
        @CustomType.Setter
        public Builder uri(String uri) {
            if (uri == null) {
              throw new MissingRequiredPropertyException("SpringCloudConfigurationServiceRepository", "uri");
            }
            this.uri = uri;
            return this;
        }
        @CustomType.Setter
        public Builder username(@Nullable String username) {

            this.username = username;
            return this;
        }
        public SpringCloudConfigurationServiceRepository build() {
            final var _resultValue = new SpringCloudConfigurationServiceRepository();
            _resultValue.caCertificateId = caCertificateId;
            _resultValue.hostKey = hostKey;
            _resultValue.hostKeyAlgorithm = hostKeyAlgorithm;
            _resultValue.label = label;
            _resultValue.name = name;
            _resultValue.password = password;
            _resultValue.patterns = patterns;
            _resultValue.privateKey = privateKey;
            _resultValue.searchPaths = searchPaths;
            _resultValue.strictHostKeyChecking = strictHostKeyChecking;
            _resultValue.uri = uri;
            _resultValue.username = username;
            return _resultValue;
        }
    }
}
