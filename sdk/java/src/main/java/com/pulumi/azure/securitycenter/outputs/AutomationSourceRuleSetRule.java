// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.securitycenter.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class AutomationSourceRuleSetRule {
    /**
     * @return A value that will be compared with the value in `property_path`.
     * 
     */
    private String expectedValue;
    /**
     * @return The comparison operator to use, must be one of: `Contains`, `EndsWith`, `Equals`, `GreaterThan`, `GreaterThanOrEqualTo`, `LesserThan`, `LesserThanOrEqualTo`, `NotEquals`, `StartsWith`
     * 
     */
    private String operator;
    /**
     * @return The JPath of the entity model property that should be checked.
     * 
     */
    private String propertyPath;
    /**
     * @return The data type of the compared operands, must be one of: `Integer`, `String`, `Boolean` or `Number`.
     * 
     * &gt; **NOTE:** The schema for Security Center alerts (when `event_source` is &#34;Alerts&#34;) [can be found here](https://docs.microsoft.com/azure/security-center/alerts-schemas?tabs=schema-continuousexport)
     * 
     */
    private String propertyType;

    private AutomationSourceRuleSetRule() {}
    /**
     * @return A value that will be compared with the value in `property_path`.
     * 
     */
    public String expectedValue() {
        return this.expectedValue;
    }
    /**
     * @return The comparison operator to use, must be one of: `Contains`, `EndsWith`, `Equals`, `GreaterThan`, `GreaterThanOrEqualTo`, `LesserThan`, `LesserThanOrEqualTo`, `NotEquals`, `StartsWith`
     * 
     */
    public String operator() {
        return this.operator;
    }
    /**
     * @return The JPath of the entity model property that should be checked.
     * 
     */
    public String propertyPath() {
        return this.propertyPath;
    }
    /**
     * @return The data type of the compared operands, must be one of: `Integer`, `String`, `Boolean` or `Number`.
     * 
     * &gt; **NOTE:** The schema for Security Center alerts (when `event_source` is &#34;Alerts&#34;) [can be found here](https://docs.microsoft.com/azure/security-center/alerts-schemas?tabs=schema-continuousexport)
     * 
     */
    public String propertyType() {
        return this.propertyType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AutomationSourceRuleSetRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String expectedValue;
        private String operator;
        private String propertyPath;
        private String propertyType;
        public Builder() {}
        public Builder(AutomationSourceRuleSetRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.expectedValue = defaults.expectedValue;
    	      this.operator = defaults.operator;
    	      this.propertyPath = defaults.propertyPath;
    	      this.propertyType = defaults.propertyType;
        }

        @CustomType.Setter
        public Builder expectedValue(String expectedValue) {
            if (expectedValue == null) {
              throw new MissingRequiredPropertyException("AutomationSourceRuleSetRule", "expectedValue");
            }
            this.expectedValue = expectedValue;
            return this;
        }
        @CustomType.Setter
        public Builder operator(String operator) {
            if (operator == null) {
              throw new MissingRequiredPropertyException("AutomationSourceRuleSetRule", "operator");
            }
            this.operator = operator;
            return this;
        }
        @CustomType.Setter
        public Builder propertyPath(String propertyPath) {
            if (propertyPath == null) {
              throw new MissingRequiredPropertyException("AutomationSourceRuleSetRule", "propertyPath");
            }
            this.propertyPath = propertyPath;
            return this;
        }
        @CustomType.Setter
        public Builder propertyType(String propertyType) {
            if (propertyType == null) {
              throw new MissingRequiredPropertyException("AutomationSourceRuleSetRule", "propertyType");
            }
            this.propertyType = propertyType;
            return this;
        }
        public AutomationSourceRuleSetRule build() {
            final var _resultValue = new AutomationSourceRuleSetRule();
            _resultValue.expectedValue = expectedValue;
            _resultValue.operator = operator;
            _resultValue.propertyPath = propertyPath;
            _resultValue.propertyType = propertyType;
            return _resultValue;
        }
    }
}
