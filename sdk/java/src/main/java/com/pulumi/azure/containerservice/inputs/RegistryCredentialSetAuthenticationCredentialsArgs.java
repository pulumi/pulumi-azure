// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerservice.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class RegistryCredentialSetAuthenticationCredentialsArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegistryCredentialSetAuthenticationCredentialsArgs Empty = new RegistryCredentialSetAuthenticationCredentialsArgs();

    /**
     * The URI of the secret containing the password in a Key Vault.
     * 
     * &gt; **Note:** Be aware that you will need to permit the Identity that is created for the Container Registry to have `get` on secrets to the Key Vault, e.g. using the `azure.keyvault.AccessPolicy` resource.
     * 
     */
    @Import(name="passwordSecretId", required=true)
    private Output<String> passwordSecretId;

    /**
     * @return The URI of the secret containing the password in a Key Vault.
     * 
     * &gt; **Note:** Be aware that you will need to permit the Identity that is created for the Container Registry to have `get` on secrets to the Key Vault, e.g. using the `azure.keyvault.AccessPolicy` resource.
     * 
     */
    public Output<String> passwordSecretId() {
        return this.passwordSecretId;
    }

    /**
     * The URI of the secret containing the username in a Key Vault.
     * 
     */
    @Import(name="usernameSecretId", required=true)
    private Output<String> usernameSecretId;

    /**
     * @return The URI of the secret containing the username in a Key Vault.
     * 
     */
    public Output<String> usernameSecretId() {
        return this.usernameSecretId;
    }

    private RegistryCredentialSetAuthenticationCredentialsArgs() {}

    private RegistryCredentialSetAuthenticationCredentialsArgs(RegistryCredentialSetAuthenticationCredentialsArgs $) {
        this.passwordSecretId = $.passwordSecretId;
        this.usernameSecretId = $.usernameSecretId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegistryCredentialSetAuthenticationCredentialsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegistryCredentialSetAuthenticationCredentialsArgs $;

        public Builder() {
            $ = new RegistryCredentialSetAuthenticationCredentialsArgs();
        }

        public Builder(RegistryCredentialSetAuthenticationCredentialsArgs defaults) {
            $ = new RegistryCredentialSetAuthenticationCredentialsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param passwordSecretId The URI of the secret containing the password in a Key Vault.
         * 
         * &gt; **Note:** Be aware that you will need to permit the Identity that is created for the Container Registry to have `get` on secrets to the Key Vault, e.g. using the `azure.keyvault.AccessPolicy` resource.
         * 
         * @return builder
         * 
         */
        public Builder passwordSecretId(Output<String> passwordSecretId) {
            $.passwordSecretId = passwordSecretId;
            return this;
        }

        /**
         * @param passwordSecretId The URI of the secret containing the password in a Key Vault.
         * 
         * &gt; **Note:** Be aware that you will need to permit the Identity that is created for the Container Registry to have `get` on secrets to the Key Vault, e.g. using the `azure.keyvault.AccessPolicy` resource.
         * 
         * @return builder
         * 
         */
        public Builder passwordSecretId(String passwordSecretId) {
            return passwordSecretId(Output.of(passwordSecretId));
        }

        /**
         * @param usernameSecretId The URI of the secret containing the username in a Key Vault.
         * 
         * @return builder
         * 
         */
        public Builder usernameSecretId(Output<String> usernameSecretId) {
            $.usernameSecretId = usernameSecretId;
            return this;
        }

        /**
         * @param usernameSecretId The URI of the secret containing the username in a Key Vault.
         * 
         * @return builder
         * 
         */
        public Builder usernameSecretId(String usernameSecretId) {
            return usernameSecretId(Output.of(usernameSecretId));
        }

        public RegistryCredentialSetAuthenticationCredentialsArgs build() {
            if ($.passwordSecretId == null) {
                throw new MissingRequiredPropertyException("RegistryCredentialSetAuthenticationCredentialsArgs", "passwordSecretId");
            }
            if ($.usernameSecretId == null) {
                throw new MissingRequiredPropertyException("RegistryCredentialSetAuthenticationCredentialsArgs", "usernameSecretId");
            }
            return $;
        }
    }

}
