// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.domainservices.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.util.Objects;

@CustomType
public final class GetServiceSecurity {
    /**
     * @return (Optional) Whether the Kerberos Armoring is enabled.
     * 
     */
    private Boolean kerberosArmoringEnabled;
    /**
     * @return (Optional) Whether the Kerberos RC4 Encryption is enabled.
     * 
     */
    private Boolean kerberosRc4EncryptionEnabled;
    /**
     * @return Whether legacy NTLM v1 support is enabled.
     * 
     */
    private Boolean ntlmV1Enabled;
    /**
     * @return Whether Kerberos password hashes are synchronized to the managed domain.
     * 
     */
    private Boolean syncKerberosPasswords;
    /**
     * @return Whether NTLM password hashes are synchronized to the managed domain.
     * 
     */
    private Boolean syncNtlmPasswords;
    /**
     * @return Whether on-premises password hashes are synchronized to the managed domain.
     * 
     */
    private Boolean syncOnPremPasswords;
    /**
     * @return Whether legacy TLS v1 support is enabled.
     * 
     */
    private Boolean tlsV1Enabled;

    private GetServiceSecurity() {}
    /**
     * @return (Optional) Whether the Kerberos Armoring is enabled.
     * 
     */
    public Boolean kerberosArmoringEnabled() {
        return this.kerberosArmoringEnabled;
    }
    /**
     * @return (Optional) Whether the Kerberos RC4 Encryption is enabled.
     * 
     */
    public Boolean kerberosRc4EncryptionEnabled() {
        return this.kerberosRc4EncryptionEnabled;
    }
    /**
     * @return Whether legacy NTLM v1 support is enabled.
     * 
     */
    public Boolean ntlmV1Enabled() {
        return this.ntlmV1Enabled;
    }
    /**
     * @return Whether Kerberos password hashes are synchronized to the managed domain.
     * 
     */
    public Boolean syncKerberosPasswords() {
        return this.syncKerberosPasswords;
    }
    /**
     * @return Whether NTLM password hashes are synchronized to the managed domain.
     * 
     */
    public Boolean syncNtlmPasswords() {
        return this.syncNtlmPasswords;
    }
    /**
     * @return Whether on-premises password hashes are synchronized to the managed domain.
     * 
     */
    public Boolean syncOnPremPasswords() {
        return this.syncOnPremPasswords;
    }
    /**
     * @return Whether legacy TLS v1 support is enabled.
     * 
     */
    public Boolean tlsV1Enabled() {
        return this.tlsV1Enabled;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceSecurity defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean kerberosArmoringEnabled;
        private Boolean kerberosRc4EncryptionEnabled;
        private Boolean ntlmV1Enabled;
        private Boolean syncKerberosPasswords;
        private Boolean syncNtlmPasswords;
        private Boolean syncOnPremPasswords;
        private Boolean tlsV1Enabled;
        public Builder() {}
        public Builder(GetServiceSecurity defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.kerberosArmoringEnabled = defaults.kerberosArmoringEnabled;
    	      this.kerberosRc4EncryptionEnabled = defaults.kerberosRc4EncryptionEnabled;
    	      this.ntlmV1Enabled = defaults.ntlmV1Enabled;
    	      this.syncKerberosPasswords = defaults.syncKerberosPasswords;
    	      this.syncNtlmPasswords = defaults.syncNtlmPasswords;
    	      this.syncOnPremPasswords = defaults.syncOnPremPasswords;
    	      this.tlsV1Enabled = defaults.tlsV1Enabled;
        }

        @CustomType.Setter
        public Builder kerberosArmoringEnabled(Boolean kerberosArmoringEnabled) {
            if (kerberosArmoringEnabled == null) {
              throw new MissingRequiredPropertyException("GetServiceSecurity", "kerberosArmoringEnabled");
            }
            this.kerberosArmoringEnabled = kerberosArmoringEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder kerberosRc4EncryptionEnabled(Boolean kerberosRc4EncryptionEnabled) {
            if (kerberosRc4EncryptionEnabled == null) {
              throw new MissingRequiredPropertyException("GetServiceSecurity", "kerberosRc4EncryptionEnabled");
            }
            this.kerberosRc4EncryptionEnabled = kerberosRc4EncryptionEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder ntlmV1Enabled(Boolean ntlmV1Enabled) {
            if (ntlmV1Enabled == null) {
              throw new MissingRequiredPropertyException("GetServiceSecurity", "ntlmV1Enabled");
            }
            this.ntlmV1Enabled = ntlmV1Enabled;
            return this;
        }
        @CustomType.Setter
        public Builder syncKerberosPasswords(Boolean syncKerberosPasswords) {
            if (syncKerberosPasswords == null) {
              throw new MissingRequiredPropertyException("GetServiceSecurity", "syncKerberosPasswords");
            }
            this.syncKerberosPasswords = syncKerberosPasswords;
            return this;
        }
        @CustomType.Setter
        public Builder syncNtlmPasswords(Boolean syncNtlmPasswords) {
            if (syncNtlmPasswords == null) {
              throw new MissingRequiredPropertyException("GetServiceSecurity", "syncNtlmPasswords");
            }
            this.syncNtlmPasswords = syncNtlmPasswords;
            return this;
        }
        @CustomType.Setter
        public Builder syncOnPremPasswords(Boolean syncOnPremPasswords) {
            if (syncOnPremPasswords == null) {
              throw new MissingRequiredPropertyException("GetServiceSecurity", "syncOnPremPasswords");
            }
            this.syncOnPremPasswords = syncOnPremPasswords;
            return this;
        }
        @CustomType.Setter
        public Builder tlsV1Enabled(Boolean tlsV1Enabled) {
            if (tlsV1Enabled == null) {
              throw new MissingRequiredPropertyException("GetServiceSecurity", "tlsV1Enabled");
            }
            this.tlsV1Enabled = tlsV1Enabled;
            return this;
        }
        public GetServiceSecurity build() {
            final var _resultValue = new GetServiceSecurity();
            _resultValue.kerberosArmoringEnabled = kerberosArmoringEnabled;
            _resultValue.kerberosRc4EncryptionEnabled = kerberosRc4EncryptionEnabled;
            _resultValue.ntlmV1Enabled = ntlmV1Enabled;
            _resultValue.syncKerberosPasswords = syncKerberosPasswords;
            _resultValue.syncNtlmPasswords = syncNtlmPasswords;
            _resultValue.syncOnPremPasswords = syncOnPremPasswords;
            _resultValue.tlsV1Enabled = tlsV1Enabled;
            return _resultValue;
        }
    }
}
