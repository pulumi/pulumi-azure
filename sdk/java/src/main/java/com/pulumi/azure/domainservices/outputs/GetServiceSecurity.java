// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.domainservices.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.util.Objects;

@CustomType
public final class GetServiceSecurity {
    /**
     * @return (Optional) Whether the Kerberos Armoring is enabled.
     * 
     */
    private final Boolean kerberosArmoringEnabled;
    /**
     * @return (Optional) Whether the Kerberos RC4 Encryption is enabled.
     * 
     */
    private final Boolean kerberosRc4EncryptionEnabled;
    /**
     * @return Whether legacy NTLM v1 support is enabled.
     * 
     */
    private final Boolean ntlmV1Enabled;
    /**
     * @return Whether Kerberos password hashes are synchronized to the managed domain.
     * 
     */
    private final Boolean syncKerberosPasswords;
    /**
     * @return Whether NTLM password hashes are synchronized to the managed domain.
     * 
     */
    private final Boolean syncNtlmPasswords;
    /**
     * @return Whether on-premises password hashes are synchronized to the managed domain.
     * 
     */
    private final Boolean syncOnPremPasswords;
    /**
     * @return Whether legacy TLS v1 support is enabled.
     * 
     */
    private final Boolean tlsV1Enabled;

    @CustomType.Constructor
    private GetServiceSecurity(
        @CustomType.Parameter("kerberosArmoringEnabled") Boolean kerberosArmoringEnabled,
        @CustomType.Parameter("kerberosRc4EncryptionEnabled") Boolean kerberosRc4EncryptionEnabled,
        @CustomType.Parameter("ntlmV1Enabled") Boolean ntlmV1Enabled,
        @CustomType.Parameter("syncKerberosPasswords") Boolean syncKerberosPasswords,
        @CustomType.Parameter("syncNtlmPasswords") Boolean syncNtlmPasswords,
        @CustomType.Parameter("syncOnPremPasswords") Boolean syncOnPremPasswords,
        @CustomType.Parameter("tlsV1Enabled") Boolean tlsV1Enabled) {
        this.kerberosArmoringEnabled = kerberosArmoringEnabled;
        this.kerberosRc4EncryptionEnabled = kerberosRc4EncryptionEnabled;
        this.ntlmV1Enabled = ntlmV1Enabled;
        this.syncKerberosPasswords = syncKerberosPasswords;
        this.syncNtlmPasswords = syncNtlmPasswords;
        this.syncOnPremPasswords = syncOnPremPasswords;
        this.tlsV1Enabled = tlsV1Enabled;
    }

    /**
     * @return (Optional) Whether the Kerberos Armoring is enabled.
     * 
     */
    public Boolean kerberosArmoringEnabled() {
        return this.kerberosArmoringEnabled;
    }
    /**
     * @return (Optional) Whether the Kerberos RC4 Encryption is enabled.
     * 
     */
    public Boolean kerberosRc4EncryptionEnabled() {
        return this.kerberosRc4EncryptionEnabled;
    }
    /**
     * @return Whether legacy NTLM v1 support is enabled.
     * 
     */
    public Boolean ntlmV1Enabled() {
        return this.ntlmV1Enabled;
    }
    /**
     * @return Whether Kerberos password hashes are synchronized to the managed domain.
     * 
     */
    public Boolean syncKerberosPasswords() {
        return this.syncKerberosPasswords;
    }
    /**
     * @return Whether NTLM password hashes are synchronized to the managed domain.
     * 
     */
    public Boolean syncNtlmPasswords() {
        return this.syncNtlmPasswords;
    }
    /**
     * @return Whether on-premises password hashes are synchronized to the managed domain.
     * 
     */
    public Boolean syncOnPremPasswords() {
        return this.syncOnPremPasswords;
    }
    /**
     * @return Whether legacy TLS v1 support is enabled.
     * 
     */
    public Boolean tlsV1Enabled() {
        return this.tlsV1Enabled;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceSecurity defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean kerberosArmoringEnabled;
        private Boolean kerberosRc4EncryptionEnabled;
        private Boolean ntlmV1Enabled;
        private Boolean syncKerberosPasswords;
        private Boolean syncNtlmPasswords;
        private Boolean syncOnPremPasswords;
        private Boolean tlsV1Enabled;

        public Builder() {
    	      // Empty
        }

        public Builder(GetServiceSecurity defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.kerberosArmoringEnabled = defaults.kerberosArmoringEnabled;
    	      this.kerberosRc4EncryptionEnabled = defaults.kerberosRc4EncryptionEnabled;
    	      this.ntlmV1Enabled = defaults.ntlmV1Enabled;
    	      this.syncKerberosPasswords = defaults.syncKerberosPasswords;
    	      this.syncNtlmPasswords = defaults.syncNtlmPasswords;
    	      this.syncOnPremPasswords = defaults.syncOnPremPasswords;
    	      this.tlsV1Enabled = defaults.tlsV1Enabled;
        }

        public Builder kerberosArmoringEnabled(Boolean kerberosArmoringEnabled) {
            this.kerberosArmoringEnabled = Objects.requireNonNull(kerberosArmoringEnabled);
            return this;
        }
        public Builder kerberosRc4EncryptionEnabled(Boolean kerberosRc4EncryptionEnabled) {
            this.kerberosRc4EncryptionEnabled = Objects.requireNonNull(kerberosRc4EncryptionEnabled);
            return this;
        }
        public Builder ntlmV1Enabled(Boolean ntlmV1Enabled) {
            this.ntlmV1Enabled = Objects.requireNonNull(ntlmV1Enabled);
            return this;
        }
        public Builder syncKerberosPasswords(Boolean syncKerberosPasswords) {
            this.syncKerberosPasswords = Objects.requireNonNull(syncKerberosPasswords);
            return this;
        }
        public Builder syncNtlmPasswords(Boolean syncNtlmPasswords) {
            this.syncNtlmPasswords = Objects.requireNonNull(syncNtlmPasswords);
            return this;
        }
        public Builder syncOnPremPasswords(Boolean syncOnPremPasswords) {
            this.syncOnPremPasswords = Objects.requireNonNull(syncOnPremPasswords);
            return this;
        }
        public Builder tlsV1Enabled(Boolean tlsV1Enabled) {
            this.tlsV1Enabled = Objects.requireNonNull(tlsV1Enabled);
            return this;
        }        public GetServiceSecurity build() {
            return new GetServiceSecurity(kerberosArmoringEnabled, kerberosRc4EncryptionEnabled, ntlmV1Enabled, syncKerberosPasswords, syncNtlmPasswords, syncOnPremPasswords, tlsV1Enabled);
        }
    }
}
