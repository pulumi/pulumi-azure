// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetVpnServerConfigurationIpsecPolicy {
    /**
     * @return The DH Group, used in IKE Phase 1.
     * 
     */
    private String dhGroup;
    /**
     * @return The IKE encryption algorithm, used for IKE Phase 2.
     * 
     */
    private String ikeEncryption;
    /**
     * @return The IKE encryption integrity algorithm, used for IKE Phase 2.
     * 
     */
    private String ikeIntegrity;
    /**
     * @return The IPSec encryption algorithm, used for IKE phase 1.
     * 
     */
    private String ipsecEncryption;
    /**
     * @return The IPSec integrity algorithm, used for IKE phase 1.
     * 
     */
    private String ipsecIntegrity;
    /**
     * @return The Pfs Group, used in IKE Phase 2.
     * 
     */
    private String pfsGroup;
    /**
     * @return The IPSec Security Association payload size in KB for a Site-to-Site VPN tunnel.
     * 
     */
    private Integer saDataSizeKilobytes;
    /**
     * @return The IPSec Security Association lifetime in seconds for a Site-to-Site VPN tunnel.
     * 
     */
    private Integer saLifetimeSeconds;

    private GetVpnServerConfigurationIpsecPolicy() {}
    /**
     * @return The DH Group, used in IKE Phase 1.
     * 
     */
    public String dhGroup() {
        return this.dhGroup;
    }
    /**
     * @return The IKE encryption algorithm, used for IKE Phase 2.
     * 
     */
    public String ikeEncryption() {
        return this.ikeEncryption;
    }
    /**
     * @return The IKE encryption integrity algorithm, used for IKE Phase 2.
     * 
     */
    public String ikeIntegrity() {
        return this.ikeIntegrity;
    }
    /**
     * @return The IPSec encryption algorithm, used for IKE phase 1.
     * 
     */
    public String ipsecEncryption() {
        return this.ipsecEncryption;
    }
    /**
     * @return The IPSec integrity algorithm, used for IKE phase 1.
     * 
     */
    public String ipsecIntegrity() {
        return this.ipsecIntegrity;
    }
    /**
     * @return The Pfs Group, used in IKE Phase 2.
     * 
     */
    public String pfsGroup() {
        return this.pfsGroup;
    }
    /**
     * @return The IPSec Security Association payload size in KB for a Site-to-Site VPN tunnel.
     * 
     */
    public Integer saDataSizeKilobytes() {
        return this.saDataSizeKilobytes;
    }
    /**
     * @return The IPSec Security Association lifetime in seconds for a Site-to-Site VPN tunnel.
     * 
     */
    public Integer saLifetimeSeconds() {
        return this.saLifetimeSeconds;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVpnServerConfigurationIpsecPolicy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String dhGroup;
        private String ikeEncryption;
        private String ikeIntegrity;
        private String ipsecEncryption;
        private String ipsecIntegrity;
        private String pfsGroup;
        private Integer saDataSizeKilobytes;
        private Integer saLifetimeSeconds;
        public Builder() {}
        public Builder(GetVpnServerConfigurationIpsecPolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dhGroup = defaults.dhGroup;
    	      this.ikeEncryption = defaults.ikeEncryption;
    	      this.ikeIntegrity = defaults.ikeIntegrity;
    	      this.ipsecEncryption = defaults.ipsecEncryption;
    	      this.ipsecIntegrity = defaults.ipsecIntegrity;
    	      this.pfsGroup = defaults.pfsGroup;
    	      this.saDataSizeKilobytes = defaults.saDataSizeKilobytes;
    	      this.saLifetimeSeconds = defaults.saLifetimeSeconds;
        }

        @CustomType.Setter
        public Builder dhGroup(String dhGroup) {
            if (dhGroup == null) {
              throw new MissingRequiredPropertyException("GetVpnServerConfigurationIpsecPolicy", "dhGroup");
            }
            this.dhGroup = dhGroup;
            return this;
        }
        @CustomType.Setter
        public Builder ikeEncryption(String ikeEncryption) {
            if (ikeEncryption == null) {
              throw new MissingRequiredPropertyException("GetVpnServerConfigurationIpsecPolicy", "ikeEncryption");
            }
            this.ikeEncryption = ikeEncryption;
            return this;
        }
        @CustomType.Setter
        public Builder ikeIntegrity(String ikeIntegrity) {
            if (ikeIntegrity == null) {
              throw new MissingRequiredPropertyException("GetVpnServerConfigurationIpsecPolicy", "ikeIntegrity");
            }
            this.ikeIntegrity = ikeIntegrity;
            return this;
        }
        @CustomType.Setter
        public Builder ipsecEncryption(String ipsecEncryption) {
            if (ipsecEncryption == null) {
              throw new MissingRequiredPropertyException("GetVpnServerConfigurationIpsecPolicy", "ipsecEncryption");
            }
            this.ipsecEncryption = ipsecEncryption;
            return this;
        }
        @CustomType.Setter
        public Builder ipsecIntegrity(String ipsecIntegrity) {
            if (ipsecIntegrity == null) {
              throw new MissingRequiredPropertyException("GetVpnServerConfigurationIpsecPolicy", "ipsecIntegrity");
            }
            this.ipsecIntegrity = ipsecIntegrity;
            return this;
        }
        @CustomType.Setter
        public Builder pfsGroup(String pfsGroup) {
            if (pfsGroup == null) {
              throw new MissingRequiredPropertyException("GetVpnServerConfigurationIpsecPolicy", "pfsGroup");
            }
            this.pfsGroup = pfsGroup;
            return this;
        }
        @CustomType.Setter
        public Builder saDataSizeKilobytes(Integer saDataSizeKilobytes) {
            if (saDataSizeKilobytes == null) {
              throw new MissingRequiredPropertyException("GetVpnServerConfigurationIpsecPolicy", "saDataSizeKilobytes");
            }
            this.saDataSizeKilobytes = saDataSizeKilobytes;
            return this;
        }
        @CustomType.Setter
        public Builder saLifetimeSeconds(Integer saLifetimeSeconds) {
            if (saLifetimeSeconds == null) {
              throw new MissingRequiredPropertyException("GetVpnServerConfigurationIpsecPolicy", "saLifetimeSeconds");
            }
            this.saLifetimeSeconds = saLifetimeSeconds;
            return this;
        }
        public GetVpnServerConfigurationIpsecPolicy build() {
            final var _resultValue = new GetVpnServerConfigurationIpsecPolicy();
            _resultValue.dhGroup = dhGroup;
            _resultValue.ikeEncryption = ikeEncryption;
            _resultValue.ikeIntegrity = ikeIntegrity;
            _resultValue.ipsecEncryption = ipsecEncryption;
            _resultValue.ipsecIntegrity = ipsecIntegrity;
            _resultValue.pfsGroup = pfsGroup;
            _resultValue.saDataSizeKilobytes = saDataSizeKilobytes;
            _resultValue.saLifetimeSeconds = saLifetimeSeconds;
            return _resultValue;
        }
    }
}
