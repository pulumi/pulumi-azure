// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.hpc.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CacheNfsTargetNamespaceJunction {
    /**
     * @return The name of the access policy applied to this target. Defaults to `default`.
     * 
     */
    private final @Nullable String accessPolicyName;
    /**
     * @return The client-facing file path of this NFS target within the HPC Cache NFS Target.
     * 
     */
    private final String namespacePath;
    /**
     * @return The NFS export of this NFS target within the HPC Cache NFS Target.
     * 
     */
    private final String nfsExport;
    /**
     * @return The relative subdirectory path from the `nfs_export` to map to the `namespace_path`. Defaults to `&#34;&#34;`, in which case the whole `nfs_export` is exported.
     * 
     */
    private final @Nullable String targetPath;

    @CustomType.Constructor
    private CacheNfsTargetNamespaceJunction(
        @CustomType.Parameter("accessPolicyName") @Nullable String accessPolicyName,
        @CustomType.Parameter("namespacePath") String namespacePath,
        @CustomType.Parameter("nfsExport") String nfsExport,
        @CustomType.Parameter("targetPath") @Nullable String targetPath) {
        this.accessPolicyName = accessPolicyName;
        this.namespacePath = namespacePath;
        this.nfsExport = nfsExport;
        this.targetPath = targetPath;
    }

    /**
     * @return The name of the access policy applied to this target. Defaults to `default`.
     * 
     */
    public Optional<String> accessPolicyName() {
        return Optional.ofNullable(this.accessPolicyName);
    }
    /**
     * @return The client-facing file path of this NFS target within the HPC Cache NFS Target.
     * 
     */
    public String namespacePath() {
        return this.namespacePath;
    }
    /**
     * @return The NFS export of this NFS target within the HPC Cache NFS Target.
     * 
     */
    public String nfsExport() {
        return this.nfsExport;
    }
    /**
     * @return The relative subdirectory path from the `nfs_export` to map to the `namespace_path`. Defaults to `&#34;&#34;`, in which case the whole `nfs_export` is exported.
     * 
     */
    public Optional<String> targetPath() {
        return Optional.ofNullable(this.targetPath);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CacheNfsTargetNamespaceJunction defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String accessPolicyName;
        private String namespacePath;
        private String nfsExport;
        private @Nullable String targetPath;

        public Builder() {
    	      // Empty
        }

        public Builder(CacheNfsTargetNamespaceJunction defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessPolicyName = defaults.accessPolicyName;
    	      this.namespacePath = defaults.namespacePath;
    	      this.nfsExport = defaults.nfsExport;
    	      this.targetPath = defaults.targetPath;
        }

        public Builder accessPolicyName(@Nullable String accessPolicyName) {
            this.accessPolicyName = accessPolicyName;
            return this;
        }
        public Builder namespacePath(String namespacePath) {
            this.namespacePath = Objects.requireNonNull(namespacePath);
            return this;
        }
        public Builder nfsExport(String nfsExport) {
            this.nfsExport = Objects.requireNonNull(nfsExport);
            return this;
        }
        public Builder targetPath(@Nullable String targetPath) {
            this.targetPath = targetPath;
            return this;
        }        public CacheNfsTargetNamespaceJunction build() {
            return new CacheNfsTargetNamespaceJunction(accessPolicyName, namespacePath, nfsExport, targetPath);
        }
    }
}
