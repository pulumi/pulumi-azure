// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network.inputs;

import com.pulumi.azure.network.inputs.NetworkConnectionMonitorTestConfigurationHttpConfigurationRequestHeaderArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkConnectionMonitorTestConfigurationHttpConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworkConnectionMonitorTestConfigurationHttpConfigurationArgs Empty = new NetworkConnectionMonitorTestConfigurationHttpConfigurationArgs();

    /**
     * The HTTP method for the HTTP request. Possible values are `Get` and `Post`. Defaults to `Get`.
     * 
     */
    @Import(name="method")
    private @Nullable Output<String> method;

    /**
     * @return The HTTP method for the HTTP request. Possible values are `Get` and `Post`. Defaults to `Get`.
     * 
     */
    public Optional<Output<String>> method() {
        return Optional.ofNullable(this.method);
    }

    /**
     * The path component of the URI. It only accepts the absolute path.
     * 
     */
    @Import(name="path")
    private @Nullable Output<String> path;

    /**
     * @return The path component of the URI. It only accepts the absolute path.
     * 
     */
    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * The port for the HTTP connection.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return The port for the HTTP connection.
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * Should HTTPS be preferred over HTTP in cases where the choice is not explicit? Defaults to `false`.
     * 
     */
    @Import(name="preferHttps")
    private @Nullable Output<Boolean> preferHttps;

    /**
     * @return Should HTTPS be preferred over HTTP in cases where the choice is not explicit? Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> preferHttps() {
        return Optional.ofNullable(this.preferHttps);
    }

    /**
     * A `request_header` block as defined below.
     * 
     */
    @Import(name="requestHeaders")
    private @Nullable Output<List<NetworkConnectionMonitorTestConfigurationHttpConfigurationRequestHeaderArgs>> requestHeaders;

    /**
     * @return A `request_header` block as defined below.
     * 
     */
    public Optional<Output<List<NetworkConnectionMonitorTestConfigurationHttpConfigurationRequestHeaderArgs>>> requestHeaders() {
        return Optional.ofNullable(this.requestHeaders);
    }

    /**
     * The HTTP status codes to consider successful. For instance, `2xx`, `301-304` and `418`.
     * 
     */
    @Import(name="validStatusCodeRanges")
    private @Nullable Output<List<String>> validStatusCodeRanges;

    /**
     * @return The HTTP status codes to consider successful. For instance, `2xx`, `301-304` and `418`.
     * 
     */
    public Optional<Output<List<String>>> validStatusCodeRanges() {
        return Optional.ofNullable(this.validStatusCodeRanges);
    }

    private NetworkConnectionMonitorTestConfigurationHttpConfigurationArgs() {}

    private NetworkConnectionMonitorTestConfigurationHttpConfigurationArgs(NetworkConnectionMonitorTestConfigurationHttpConfigurationArgs $) {
        this.method = $.method;
        this.path = $.path;
        this.port = $.port;
        this.preferHttps = $.preferHttps;
        this.requestHeaders = $.requestHeaders;
        this.validStatusCodeRanges = $.validStatusCodeRanges;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkConnectionMonitorTestConfigurationHttpConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkConnectionMonitorTestConfigurationHttpConfigurationArgs $;

        public Builder() {
            $ = new NetworkConnectionMonitorTestConfigurationHttpConfigurationArgs();
        }

        public Builder(NetworkConnectionMonitorTestConfigurationHttpConfigurationArgs defaults) {
            $ = new NetworkConnectionMonitorTestConfigurationHttpConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param method The HTTP method for the HTTP request. Possible values are `Get` and `Post`. Defaults to `Get`.
         * 
         * @return builder
         * 
         */
        public Builder method(@Nullable Output<String> method) {
            $.method = method;
            return this;
        }

        /**
         * @param method The HTTP method for the HTTP request. Possible values are `Get` and `Post`. Defaults to `Get`.
         * 
         * @return builder
         * 
         */
        public Builder method(String method) {
            return method(Output.of(method));
        }

        /**
         * @param path The path component of the URI. It only accepts the absolute path.
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path The path component of the URI. It only accepts the absolute path.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param port The port for the HTTP connection.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The port for the HTTP connection.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param preferHttps Should HTTPS be preferred over HTTP in cases where the choice is not explicit? Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder preferHttps(@Nullable Output<Boolean> preferHttps) {
            $.preferHttps = preferHttps;
            return this;
        }

        /**
         * @param preferHttps Should HTTPS be preferred over HTTP in cases where the choice is not explicit? Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder preferHttps(Boolean preferHttps) {
            return preferHttps(Output.of(preferHttps));
        }

        /**
         * @param requestHeaders A `request_header` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder requestHeaders(@Nullable Output<List<NetworkConnectionMonitorTestConfigurationHttpConfigurationRequestHeaderArgs>> requestHeaders) {
            $.requestHeaders = requestHeaders;
            return this;
        }

        /**
         * @param requestHeaders A `request_header` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder requestHeaders(List<NetworkConnectionMonitorTestConfigurationHttpConfigurationRequestHeaderArgs> requestHeaders) {
            return requestHeaders(Output.of(requestHeaders));
        }

        /**
         * @param requestHeaders A `request_header` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder requestHeaders(NetworkConnectionMonitorTestConfigurationHttpConfigurationRequestHeaderArgs... requestHeaders) {
            return requestHeaders(List.of(requestHeaders));
        }

        /**
         * @param validStatusCodeRanges The HTTP status codes to consider successful. For instance, `2xx`, `301-304` and `418`.
         * 
         * @return builder
         * 
         */
        public Builder validStatusCodeRanges(@Nullable Output<List<String>> validStatusCodeRanges) {
            $.validStatusCodeRanges = validStatusCodeRanges;
            return this;
        }

        /**
         * @param validStatusCodeRanges The HTTP status codes to consider successful. For instance, `2xx`, `301-304` and `418`.
         * 
         * @return builder
         * 
         */
        public Builder validStatusCodeRanges(List<String> validStatusCodeRanges) {
            return validStatusCodeRanges(Output.of(validStatusCodeRanges));
        }

        /**
         * @param validStatusCodeRanges The HTTP status codes to consider successful. For instance, `2xx`, `301-304` and `418`.
         * 
         * @return builder
         * 
         */
        public Builder validStatusCodeRanges(String... validStatusCodeRanges) {
            return validStatusCodeRanges(List.of(validStatusCodeRanges));
        }

        public NetworkConnectionMonitorTestConfigurationHttpConfigurationArgs build() {
            return $;
        }
    }

}
