// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetApplicationGatewayRequestRoutingRule {
    /**
     * @return The ID of the associated Backend Address Pool.
     * 
     */
    private String backendAddressPoolId;
    /**
     * @return The Name of the Backend Address Pool which is used for this Routing Rule.
     * 
     */
    private String backendAddressPoolName;
    /**
     * @return The ID of the associated Backend HTTP Settings Configuration.
     * 
     */
    private String backendHttpSettingsId;
    /**
     * @return The Name of the Backend HTTP Settings Collection which is used for this Routing Rule.
     * 
     */
    private String backendHttpSettingsName;
    /**
     * @return The ID of the associated HTTP Listener.
     * 
     */
    private String httpListenerId;
    /**
     * @return The Name of the HTTP Listener which is used for this Routing Rule.
     * 
     */
    private String httpListenerName;
    /**
     * @return The ID of the Rewrite Rule Set
     * 
     */
    private String id;
    /**
     * @return The name of this Application Gateway.
     * 
     */
    private String name;
    /**
     * @return The Priority of this Routing Rule.
     * 
     */
    private Integer priority;
    /**
     * @return The ID of the associated Redirect Configuration.
     * 
     */
    private String redirectConfigurationId;
    /**
     * @return The Name of the Redirect Configuration which is used for this Routing Rule.
     * 
     */
    private String redirectConfigurationName;
    /**
     * @return The ID of the associated Rewrite Rule Set.
     * 
     */
    private String rewriteRuleSetId;
    /**
     * @return The Name of the Rewrite Rule Set which is used for this Routing Rule.
     * 
     */
    private String rewriteRuleSetName;
    /**
     * @return The Type of Routing that is used for this Rule.
     * 
     */
    private String ruleType;
    /**
     * @return The ID of the associated URL Path Map.
     * 
     */
    private String urlPathMapId;
    /**
     * @return The Name of the URL Path Map which is associated with this Routing Rule.
     * 
     */
    private String urlPathMapName;

    private GetApplicationGatewayRequestRoutingRule() {}
    /**
     * @return The ID of the associated Backend Address Pool.
     * 
     */
    public String backendAddressPoolId() {
        return this.backendAddressPoolId;
    }
    /**
     * @return The Name of the Backend Address Pool which is used for this Routing Rule.
     * 
     */
    public String backendAddressPoolName() {
        return this.backendAddressPoolName;
    }
    /**
     * @return The ID of the associated Backend HTTP Settings Configuration.
     * 
     */
    public String backendHttpSettingsId() {
        return this.backendHttpSettingsId;
    }
    /**
     * @return The Name of the Backend HTTP Settings Collection which is used for this Routing Rule.
     * 
     */
    public String backendHttpSettingsName() {
        return this.backendHttpSettingsName;
    }
    /**
     * @return The ID of the associated HTTP Listener.
     * 
     */
    public String httpListenerId() {
        return this.httpListenerId;
    }
    /**
     * @return The Name of the HTTP Listener which is used for this Routing Rule.
     * 
     */
    public String httpListenerName() {
        return this.httpListenerName;
    }
    /**
     * @return The ID of the Rewrite Rule Set
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The name of this Application Gateway.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The Priority of this Routing Rule.
     * 
     */
    public Integer priority() {
        return this.priority;
    }
    /**
     * @return The ID of the associated Redirect Configuration.
     * 
     */
    public String redirectConfigurationId() {
        return this.redirectConfigurationId;
    }
    /**
     * @return The Name of the Redirect Configuration which is used for this Routing Rule.
     * 
     */
    public String redirectConfigurationName() {
        return this.redirectConfigurationName;
    }
    /**
     * @return The ID of the associated Rewrite Rule Set.
     * 
     */
    public String rewriteRuleSetId() {
        return this.rewriteRuleSetId;
    }
    /**
     * @return The Name of the Rewrite Rule Set which is used for this Routing Rule.
     * 
     */
    public String rewriteRuleSetName() {
        return this.rewriteRuleSetName;
    }
    /**
     * @return The Type of Routing that is used for this Rule.
     * 
     */
    public String ruleType() {
        return this.ruleType;
    }
    /**
     * @return The ID of the associated URL Path Map.
     * 
     */
    public String urlPathMapId() {
        return this.urlPathMapId;
    }
    /**
     * @return The Name of the URL Path Map which is associated with this Routing Rule.
     * 
     */
    public String urlPathMapName() {
        return this.urlPathMapName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetApplicationGatewayRequestRoutingRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String backendAddressPoolId;
        private String backendAddressPoolName;
        private String backendHttpSettingsId;
        private String backendHttpSettingsName;
        private String httpListenerId;
        private String httpListenerName;
        private String id;
        private String name;
        private Integer priority;
        private String redirectConfigurationId;
        private String redirectConfigurationName;
        private String rewriteRuleSetId;
        private String rewriteRuleSetName;
        private String ruleType;
        private String urlPathMapId;
        private String urlPathMapName;
        public Builder() {}
        public Builder(GetApplicationGatewayRequestRoutingRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backendAddressPoolId = defaults.backendAddressPoolId;
    	      this.backendAddressPoolName = defaults.backendAddressPoolName;
    	      this.backendHttpSettingsId = defaults.backendHttpSettingsId;
    	      this.backendHttpSettingsName = defaults.backendHttpSettingsName;
    	      this.httpListenerId = defaults.httpListenerId;
    	      this.httpListenerName = defaults.httpListenerName;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.priority = defaults.priority;
    	      this.redirectConfigurationId = defaults.redirectConfigurationId;
    	      this.redirectConfigurationName = defaults.redirectConfigurationName;
    	      this.rewriteRuleSetId = defaults.rewriteRuleSetId;
    	      this.rewriteRuleSetName = defaults.rewriteRuleSetName;
    	      this.ruleType = defaults.ruleType;
    	      this.urlPathMapId = defaults.urlPathMapId;
    	      this.urlPathMapName = defaults.urlPathMapName;
        }

        @CustomType.Setter
        public Builder backendAddressPoolId(String backendAddressPoolId) {
            if (backendAddressPoolId == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayRequestRoutingRule", "backendAddressPoolId");
            }
            this.backendAddressPoolId = backendAddressPoolId;
            return this;
        }
        @CustomType.Setter
        public Builder backendAddressPoolName(String backendAddressPoolName) {
            if (backendAddressPoolName == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayRequestRoutingRule", "backendAddressPoolName");
            }
            this.backendAddressPoolName = backendAddressPoolName;
            return this;
        }
        @CustomType.Setter
        public Builder backendHttpSettingsId(String backendHttpSettingsId) {
            if (backendHttpSettingsId == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayRequestRoutingRule", "backendHttpSettingsId");
            }
            this.backendHttpSettingsId = backendHttpSettingsId;
            return this;
        }
        @CustomType.Setter
        public Builder backendHttpSettingsName(String backendHttpSettingsName) {
            if (backendHttpSettingsName == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayRequestRoutingRule", "backendHttpSettingsName");
            }
            this.backendHttpSettingsName = backendHttpSettingsName;
            return this;
        }
        @CustomType.Setter
        public Builder httpListenerId(String httpListenerId) {
            if (httpListenerId == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayRequestRoutingRule", "httpListenerId");
            }
            this.httpListenerId = httpListenerId;
            return this;
        }
        @CustomType.Setter
        public Builder httpListenerName(String httpListenerName) {
            if (httpListenerName == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayRequestRoutingRule", "httpListenerName");
            }
            this.httpListenerName = httpListenerName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayRequestRoutingRule", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayRequestRoutingRule", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder priority(Integer priority) {
            if (priority == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayRequestRoutingRule", "priority");
            }
            this.priority = priority;
            return this;
        }
        @CustomType.Setter
        public Builder redirectConfigurationId(String redirectConfigurationId) {
            if (redirectConfigurationId == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayRequestRoutingRule", "redirectConfigurationId");
            }
            this.redirectConfigurationId = redirectConfigurationId;
            return this;
        }
        @CustomType.Setter
        public Builder redirectConfigurationName(String redirectConfigurationName) {
            if (redirectConfigurationName == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayRequestRoutingRule", "redirectConfigurationName");
            }
            this.redirectConfigurationName = redirectConfigurationName;
            return this;
        }
        @CustomType.Setter
        public Builder rewriteRuleSetId(String rewriteRuleSetId) {
            if (rewriteRuleSetId == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayRequestRoutingRule", "rewriteRuleSetId");
            }
            this.rewriteRuleSetId = rewriteRuleSetId;
            return this;
        }
        @CustomType.Setter
        public Builder rewriteRuleSetName(String rewriteRuleSetName) {
            if (rewriteRuleSetName == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayRequestRoutingRule", "rewriteRuleSetName");
            }
            this.rewriteRuleSetName = rewriteRuleSetName;
            return this;
        }
        @CustomType.Setter
        public Builder ruleType(String ruleType) {
            if (ruleType == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayRequestRoutingRule", "ruleType");
            }
            this.ruleType = ruleType;
            return this;
        }
        @CustomType.Setter
        public Builder urlPathMapId(String urlPathMapId) {
            if (urlPathMapId == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayRequestRoutingRule", "urlPathMapId");
            }
            this.urlPathMapId = urlPathMapId;
            return this;
        }
        @CustomType.Setter
        public Builder urlPathMapName(String urlPathMapName) {
            if (urlPathMapName == null) {
              throw new MissingRequiredPropertyException("GetApplicationGatewayRequestRoutingRule", "urlPathMapName");
            }
            this.urlPathMapName = urlPathMapName;
            return this;
        }
        public GetApplicationGatewayRequestRoutingRule build() {
            final var _resultValue = new GetApplicationGatewayRequestRoutingRule();
            _resultValue.backendAddressPoolId = backendAddressPoolId;
            _resultValue.backendAddressPoolName = backendAddressPoolName;
            _resultValue.backendHttpSettingsId = backendHttpSettingsId;
            _resultValue.backendHttpSettingsName = backendHttpSettingsName;
            _resultValue.httpListenerId = httpListenerId;
            _resultValue.httpListenerName = httpListenerName;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.priority = priority;
            _resultValue.redirectConfigurationId = redirectConfigurationId;
            _resultValue.redirectConfigurationName = redirectConfigurationName;
            _resultValue.rewriteRuleSetId = rewriteRuleSetId;
            _resultValue.rewriteRuleSetName = rewriteRuleSetName;
            _resultValue.ruleType = ruleType;
            _resultValue.urlPathMapId = urlPathMapId;
            _resultValue.urlPathMapName = urlPathMapName;
            return _resultValue;
        }
    }
}
