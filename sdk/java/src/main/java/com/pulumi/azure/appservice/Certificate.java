// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appservice;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.appservice.CertificateArgs;
import com.pulumi.azure.appservice.inputs.CertificateState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages an App Service certificate.
 * 
 * ## Example Usage
 * 
 * This example provisions an App Service Certificate from a Local File.
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.appservice.Certificate;
 * import com.pulumi.azure.appservice.CertificateArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampleResourceGroup = new ResourceGroup(&#34;exampleResourceGroup&#34;, ResourceGroupArgs.builder()        
 *             .location(&#34;West Europe&#34;)
 *             .build());
 * 
 *         var exampleCertificate = new Certificate(&#34;exampleCertificate&#34;, CertificateArgs.builder()        
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .location(exampleResourceGroup.location())
 *             .pfxBlob(Base64.getEncoder().encodeToString(Files.readAllBytes(Paths.get(&#34;certificate.pfx&#34;))))
 *             .password(&#34;password123!&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * App Service Certificates can be imported using the `resource id`, e.g.
 * 
 * ```sh
 *  $ pulumi import azure:appservice/certificate:Certificate example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Web/certificates/certificate1
 * ```
 * 
 */
@ResourceType(type="azure:appservice/certificate:Certificate")
public class Certificate extends com.pulumi.resources.CustomResource {
    /**
     * The ID of the associated App Service plan. Must be specified when the certificate is used inside an App Service Environment hosted App Service. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="appServicePlanId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> appServicePlanId;

    /**
     * @return The ID of the associated App Service plan. Must be specified when the certificate is used inside an App Service Environment hosted App Service. Changing this forces a new resource to be created.
     * 
     */
    public Output<Optional<String>> appServicePlanId() {
        return Codegen.optional(this.appServicePlanId);
    }
    /**
     * The expiration date for the certificate.
     * 
     */
    @Export(name="expirationDate", refs={String.class}, tree="[0]")
    private Output<String> expirationDate;

    /**
     * @return The expiration date for the certificate.
     * 
     */
    public Output<String> expirationDate() {
        return this.expirationDate;
    }
    /**
     * The friendly name of the certificate.
     * 
     */
    @Export(name="friendlyName", refs={String.class}, tree="[0]")
    private Output<String> friendlyName;

    /**
     * @return The friendly name of the certificate.
     * 
     */
    public Output<String> friendlyName() {
        return this.friendlyName;
    }
    /**
     * List of host names the certificate applies to.
     * 
     */
    @Export(name="hostNames", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> hostNames;

    /**
     * @return List of host names the certificate applies to.
     * 
     */
    public Output<List<String>> hostNames() {
        return this.hostNames;
    }
    /**
     * The ID of the App Service Environment where the certificate is in use.
     * 
     */
    @Export(name="hostingEnvironmentProfileId", refs={String.class}, tree="[0]")
    private Output<String> hostingEnvironmentProfileId;

    /**
     * @return The ID of the App Service Environment where the certificate is in use.
     * 
     */
    public Output<String> hostingEnvironmentProfileId() {
        return this.hostingEnvironmentProfileId;
    }
    /**
     * The issue date for the certificate.
     * 
     */
    @Export(name="issueDate", refs={String.class}, tree="[0]")
    private Output<String> issueDate;

    /**
     * @return The issue date for the certificate.
     * 
     */
    public Output<String> issueDate() {
        return this.issueDate;
    }
    /**
     * The name of the certificate issuer.
     * 
     */
    @Export(name="issuer", refs={String.class}, tree="[0]")
    private Output<String> issuer;

    /**
     * @return The name of the certificate issuer.
     * 
     */
    public Output<String> issuer() {
        return this.issuer;
    }
    /**
     * The ID of the Key Vault secret. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="keyVaultSecretId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> keyVaultSecretId;

    /**
     * @return The ID of the Key Vault secret. Changing this forces a new resource to be created.
     * 
     */
    public Output<Optional<String>> keyVaultSecretId() {
        return Codegen.optional(this.keyVaultSecretId);
    }
    /**
     * Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * Specifies the name of the certificate. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Specifies the name of the certificate. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The password to access the certificate&#39;s private key. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="password", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> password;

    /**
     * @return The password to access the certificate&#39;s private key. Changing this forces a new resource to be created.
     * 
     */
    public Output<Optional<String>> password() {
        return Codegen.optional(this.password);
    }
    /**
     * The base64-encoded contents of the certificate. Changing this forces a new resource to be created.
     * 
     * &gt; **NOTE:** Either `pfx_blob` or `key_vault_secret_id` must be set - but not both.
     * 
     */
    @Export(name="pfxBlob", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> pfxBlob;

    /**
     * @return The base64-encoded contents of the certificate. Changing this forces a new resource to be created.
     * 
     * &gt; **NOTE:** Either `pfx_blob` or `key_vault_secret_id` must be set - but not both.
     * 
     */
    public Output<Optional<String>> pfxBlob() {
        return Codegen.optional(this.pfxBlob);
    }
    /**
     * The name of the resource group in which to create the certificate. Changing this forces a new resource to be created.
     * 
     * &gt; **NOTE:** The resource group must be the same as that which the app service plan is defined in - otherwise the certificate will not show as available for the app services.
     * 
     */
    @Export(name="resourceGroupName", refs={String.class}, tree="[0]")
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group in which to create the certificate. Changing this forces a new resource to be created.
     * 
     * &gt; **NOTE:** The resource group must be the same as that which the app service plan is defined in - otherwise the certificate will not show as available for the app services.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * The subject name of the certificate.
     * 
     */
    @Export(name="subjectName", refs={String.class}, tree="[0]")
    private Output<String> subjectName;

    /**
     * @return The subject name of the certificate.
     * 
     */
    public Output<String> subjectName() {
        return this.subjectName;
    }
    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Export(name="tags", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * The thumbprint for the certificate.
     * 
     */
    @Export(name="thumbprint", refs={String.class}, tree="[0]")
    private Output<String> thumbprint;

    /**
     * @return The thumbprint for the certificate.
     * 
     */
    public Output<String> thumbprint() {
        return this.thumbprint;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Certificate(String name) {
        this(name, CertificateArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Certificate(String name, CertificateArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Certificate(String name, CertificateArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:appservice/certificate:Certificate", name, args == null ? CertificateArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Certificate(String name, Output<String> id, @Nullable CertificateState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:appservice/certificate:Certificate", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "password",
                "pfxBlob"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Certificate get(String name, Output<String> id, @Nullable CertificateState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Certificate(name, id, state, options);
    }
}
