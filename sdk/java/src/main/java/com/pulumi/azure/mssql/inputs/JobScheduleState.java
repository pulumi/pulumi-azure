// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.mssql.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class JobScheduleState extends com.pulumi.resources.ResourceArgs {

    public static final JobScheduleState Empty = new JobScheduleState();

    /**
     * Should the Elastic Job Schedule be enabled? Defaults to `false`.
     * 
     * &gt; **Note:** When `type` is set to `Once` and `enabled` is set to `true`, it&#39;s recommended to add `enabled` to `ignore_changes`. This is because Azure will set `enabled` to `false` once the job has executed.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Should the Elastic Job Schedule be enabled? Defaults to `false`.
     * 
     * &gt; **Note:** When `type` is set to `Once` and `enabled` is set to `true`, it&#39;s recommended to add `enabled` to `ignore_changes`. This is because Azure will set `enabled` to `false` once the job has executed.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The end time of the schedule. Must be in RFC3339 format.
     * 
     */
    @Import(name="endTime")
    private @Nullable Output<String> endTime;

    /**
     * @return The end time of the schedule. Must be in RFC3339 format.
     * 
     */
    public Optional<Output<String>> endTime() {
        return Optional.ofNullable(this.endTime);
    }

    /**
     * The interval between job executions. Must be in ISO8601 duration format.
     * 
     */
    @Import(name="interval")
    private @Nullable Output<String> interval;

    /**
     * @return The interval between job executions. Must be in ISO8601 duration format.
     * 
     */
    public Optional<Output<String>> interval() {
        return Optional.ofNullable(this.interval);
    }

    /**
     * The ID of the Elastic Job. Changing this forces a new Elastic Job Schedule to be created.
     * 
     */
    @Import(name="jobId")
    private @Nullable Output<String> jobId;

    /**
     * @return The ID of the Elastic Job. Changing this forces a new Elastic Job Schedule to be created.
     * 
     */
    public Optional<Output<String>> jobId() {
        return Optional.ofNullable(this.jobId);
    }

    /**
     * The start time of the schedule. Must be in RFC3339 format.
     * 
     */
    @Import(name="startTime")
    private @Nullable Output<String> startTime;

    /**
     * @return The start time of the schedule. Must be in RFC3339 format.
     * 
     */
    public Optional<Output<String>> startTime() {
        return Optional.ofNullable(this.startTime);
    }

    /**
     * The type of schedule. Possible values are `Once` and `Recurring`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of schedule. Possible values are `Once` and `Recurring`.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private JobScheduleState() {}

    private JobScheduleState(JobScheduleState $) {
        this.enabled = $.enabled;
        this.endTime = $.endTime;
        this.interval = $.interval;
        this.jobId = $.jobId;
        this.startTime = $.startTime;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JobScheduleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JobScheduleState $;

        public Builder() {
            $ = new JobScheduleState();
        }

        public Builder(JobScheduleState defaults) {
            $ = new JobScheduleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled Should the Elastic Job Schedule be enabled? Defaults to `false`.
         * 
         * &gt; **Note:** When `type` is set to `Once` and `enabled` is set to `true`, it&#39;s recommended to add `enabled` to `ignore_changes`. This is because Azure will set `enabled` to `false` once the job has executed.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Should the Elastic Job Schedule be enabled? Defaults to `false`.
         * 
         * &gt; **Note:** When `type` is set to `Once` and `enabled` is set to `true`, it&#39;s recommended to add `enabled` to `ignore_changes`. This is because Azure will set `enabled` to `false` once the job has executed.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param endTime The end time of the schedule. Must be in RFC3339 format.
         * 
         * @return builder
         * 
         */
        public Builder endTime(@Nullable Output<String> endTime) {
            $.endTime = endTime;
            return this;
        }

        /**
         * @param endTime The end time of the schedule. Must be in RFC3339 format.
         * 
         * @return builder
         * 
         */
        public Builder endTime(String endTime) {
            return endTime(Output.of(endTime));
        }

        /**
         * @param interval The interval between job executions. Must be in ISO8601 duration format.
         * 
         * @return builder
         * 
         */
        public Builder interval(@Nullable Output<String> interval) {
            $.interval = interval;
            return this;
        }

        /**
         * @param interval The interval between job executions. Must be in ISO8601 duration format.
         * 
         * @return builder
         * 
         */
        public Builder interval(String interval) {
            return interval(Output.of(interval));
        }

        /**
         * @param jobId The ID of the Elastic Job. Changing this forces a new Elastic Job Schedule to be created.
         * 
         * @return builder
         * 
         */
        public Builder jobId(@Nullable Output<String> jobId) {
            $.jobId = jobId;
            return this;
        }

        /**
         * @param jobId The ID of the Elastic Job. Changing this forces a new Elastic Job Schedule to be created.
         * 
         * @return builder
         * 
         */
        public Builder jobId(String jobId) {
            return jobId(Output.of(jobId));
        }

        /**
         * @param startTime The start time of the schedule. Must be in RFC3339 format.
         * 
         * @return builder
         * 
         */
        public Builder startTime(@Nullable Output<String> startTime) {
            $.startTime = startTime;
            return this;
        }

        /**
         * @param startTime The start time of the schedule. Must be in RFC3339 format.
         * 
         * @return builder
         * 
         */
        public Builder startTime(String startTime) {
            return startTime(Output.of(startTime));
        }

        /**
         * @param type The type of schedule. Possible values are `Once` and `Recurring`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of schedule. Possible values are `Once` and `Recurring`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public JobScheduleState build() {
            return $;
        }
    }

}
