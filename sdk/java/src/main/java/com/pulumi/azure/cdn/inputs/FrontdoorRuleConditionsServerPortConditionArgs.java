// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.cdn.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FrontdoorRuleConditionsServerPortConditionArgs extends com.pulumi.resources.ResourceArgs {

    public static final FrontdoorRuleConditionsServerPortConditionArgs Empty = new FrontdoorRuleConditionsServerPortConditionArgs();

    /**
     * A list of one or more integer values(e.g. &#34;1&#34;) representing the value of the client port to match. Possible values include `80` or `443`. If multiple values are specified, they&#39;re evaluated using `OR` logic.
     * 
     */
    @Import(name="matchValues", required=true)
    private Output<List<String>> matchValues;

    /**
     * @return A list of one or more integer values(e.g. &#34;1&#34;) representing the value of the client port to match. Possible values include `80` or `443`. If multiple values are specified, they&#39;re evaluated using `OR` logic.
     * 
     */
    public Output<List<String>> matchValues() {
        return this.matchValues;
    }

    /**
     * If `true` operator becomes the opposite of its value. Possible values `true` or `false`. Defaults to `false`. Details can be found in the `Condition Operator List` below.
     * 
     */
    @Import(name="negateCondition")
    private @Nullable Output<Boolean> negateCondition;

    /**
     * @return If `true` operator becomes the opposite of its value. Possible values `true` or `false`. Defaults to `false`. Details can be found in the `Condition Operator List` below.
     * 
     */
    public Optional<Output<Boolean>> negateCondition() {
        return Optional.ofNullable(this.negateCondition);
    }

    /**
     * A Conditional operator. Possible values include `Any`, `Equal`, `Contains`, `BeginsWith`, `EndsWith`, `LessThan`, `LessThanOrEqual`, `GreaterThan`, `GreaterThanOrEqual` or `RegEx`. Details can be found in the `Condition Operator List` below.
     * 
     */
    @Import(name="operator", required=true)
    private Output<String> operator;

    /**
     * @return A Conditional operator. Possible values include `Any`, `Equal`, `Contains`, `BeginsWith`, `EndsWith`, `LessThan`, `LessThanOrEqual`, `GreaterThan`, `GreaterThanOrEqual` or `RegEx`. Details can be found in the `Condition Operator List` below.
     * 
     */
    public Output<String> operator() {
        return this.operator;
    }

    private FrontdoorRuleConditionsServerPortConditionArgs() {}

    private FrontdoorRuleConditionsServerPortConditionArgs(FrontdoorRuleConditionsServerPortConditionArgs $) {
        this.matchValues = $.matchValues;
        this.negateCondition = $.negateCondition;
        this.operator = $.operator;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FrontdoorRuleConditionsServerPortConditionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FrontdoorRuleConditionsServerPortConditionArgs $;

        public Builder() {
            $ = new FrontdoorRuleConditionsServerPortConditionArgs();
        }

        public Builder(FrontdoorRuleConditionsServerPortConditionArgs defaults) {
            $ = new FrontdoorRuleConditionsServerPortConditionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param matchValues A list of one or more integer values(e.g. &#34;1&#34;) representing the value of the client port to match. Possible values include `80` or `443`. If multiple values are specified, they&#39;re evaluated using `OR` logic.
         * 
         * @return builder
         * 
         */
        public Builder matchValues(Output<List<String>> matchValues) {
            $.matchValues = matchValues;
            return this;
        }

        /**
         * @param matchValues A list of one or more integer values(e.g. &#34;1&#34;) representing the value of the client port to match. Possible values include `80` or `443`. If multiple values are specified, they&#39;re evaluated using `OR` logic.
         * 
         * @return builder
         * 
         */
        public Builder matchValues(List<String> matchValues) {
            return matchValues(Output.of(matchValues));
        }

        /**
         * @param matchValues A list of one or more integer values(e.g. &#34;1&#34;) representing the value of the client port to match. Possible values include `80` or `443`. If multiple values are specified, they&#39;re evaluated using `OR` logic.
         * 
         * @return builder
         * 
         */
        public Builder matchValues(String... matchValues) {
            return matchValues(List.of(matchValues));
        }

        /**
         * @param negateCondition If `true` operator becomes the opposite of its value. Possible values `true` or `false`. Defaults to `false`. Details can be found in the `Condition Operator List` below.
         * 
         * @return builder
         * 
         */
        public Builder negateCondition(@Nullable Output<Boolean> negateCondition) {
            $.negateCondition = negateCondition;
            return this;
        }

        /**
         * @param negateCondition If `true` operator becomes the opposite of its value. Possible values `true` or `false`. Defaults to `false`. Details can be found in the `Condition Operator List` below.
         * 
         * @return builder
         * 
         */
        public Builder negateCondition(Boolean negateCondition) {
            return negateCondition(Output.of(negateCondition));
        }

        /**
         * @param operator A Conditional operator. Possible values include `Any`, `Equal`, `Contains`, `BeginsWith`, `EndsWith`, `LessThan`, `LessThanOrEqual`, `GreaterThan`, `GreaterThanOrEqual` or `RegEx`. Details can be found in the `Condition Operator List` below.
         * 
         * @return builder
         * 
         */
        public Builder operator(Output<String> operator) {
            $.operator = operator;
            return this;
        }

        /**
         * @param operator A Conditional operator. Possible values include `Any`, `Equal`, `Contains`, `BeginsWith`, `EndsWith`, `LessThan`, `LessThanOrEqual`, `GreaterThan`, `GreaterThanOrEqual` or `RegEx`. Details can be found in the `Condition Operator List` below.
         * 
         * @return builder
         * 
         */
        public Builder operator(String operator) {
            return operator(Output.of(operator));
        }

        public FrontdoorRuleConditionsServerPortConditionArgs build() {
            if ($.matchValues == null) {
                throw new MissingRequiredPropertyException("FrontdoorRuleConditionsServerPortConditionArgs", "matchValues");
            }
            if ($.operator == null) {
                throw new MissingRequiredPropertyException("FrontdoorRuleConditionsServerPortConditionArgs", "operator");
            }
            return $;
        }
    }

}
