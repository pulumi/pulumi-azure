// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appconfiguration.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetConfigurationKeyArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetConfigurationKeyArgs Empty = new GetConfigurationKeyArgs();

    /**
     * Specifies the id of the App Configuration.
     * 
     */
    @Import(name="configurationStoreId", required=true)
    private Output<String> configurationStoreId;

    /**
     * @return Specifies the id of the App Configuration.
     * 
     */
    public Output<String> configurationStoreId() {
        return this.configurationStoreId;
    }

    /**
     * The name of the App Configuration Key.
     * 
     */
    @Import(name="key", required=true)
    private Output<String> key;

    /**
     * @return The name of the App Configuration Key.
     * 
     */
    public Output<String> key() {
        return this.key;
    }

    /**
     * The label of the App Configuration Key.
     * 
     */
    @Import(name="label")
    private @Nullable Output<String> label;

    /**
     * @return The label of the App Configuration Key.
     * 
     */
    public Optional<Output<String>> label() {
        return Optional.ofNullable(this.label);
    }

    private GetConfigurationKeyArgs() {}

    private GetConfigurationKeyArgs(GetConfigurationKeyArgs $) {
        this.configurationStoreId = $.configurationStoreId;
        this.key = $.key;
        this.label = $.label;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetConfigurationKeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetConfigurationKeyArgs $;

        public Builder() {
            $ = new GetConfigurationKeyArgs();
        }

        public Builder(GetConfigurationKeyArgs defaults) {
            $ = new GetConfigurationKeyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param configurationStoreId Specifies the id of the App Configuration.
         * 
         * @return builder
         * 
         */
        public Builder configurationStoreId(Output<String> configurationStoreId) {
            $.configurationStoreId = configurationStoreId;
            return this;
        }

        /**
         * @param configurationStoreId Specifies the id of the App Configuration.
         * 
         * @return builder
         * 
         */
        public Builder configurationStoreId(String configurationStoreId) {
            return configurationStoreId(Output.of(configurationStoreId));
        }

        /**
         * @param key The name of the App Configuration Key.
         * 
         * @return builder
         * 
         */
        public Builder key(Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key The name of the App Configuration Key.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param label The label of the App Configuration Key.
         * 
         * @return builder
         * 
         */
        public Builder label(@Nullable Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label The label of the App Configuration Key.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        public GetConfigurationKeyArgs build() {
            if ($.configurationStoreId == null) {
                throw new MissingRequiredPropertyException("GetConfigurationKeyArgs", "configurationStoreId");
            }
            if ($.key == null) {
                throw new MissingRequiredPropertyException("GetConfigurationKeyArgs", "key");
            }
            return $;
        }
    }

}
