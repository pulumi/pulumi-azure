// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.securitycenter.inputs;

import com.pulumi.azure.securitycenter.inputs.AutomationActionArgs;
import com.pulumi.azure.securitycenter.inputs.AutomationSourceArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AutomationState extends com.pulumi.resources.ResourceArgs {

    public static final AutomationState Empty = new AutomationState();

    /**
     * One or more `action` blocks as defined below. An `action` tells this automation where the data is to be sent to upon being evaluated by the rules in the `source`.
     * 
     */
    @Import(name="actions")
    private @Nullable Output<List<AutomationActionArgs>> actions;

    /**
     * @return One or more `action` blocks as defined below. An `action` tells this automation where the data is to be sent to upon being evaluated by the rules in the `source`.
     * 
     */
    public Optional<Output<List<AutomationActionArgs>>> actions() {
        return Optional.ofNullable(this.actions);
    }

    /**
     * Specifies the description for the Security Center Automation.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Specifies the description for the Security Center Automation.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Boolean to enable or disable this Security Center Automation. Defaults to `true`.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Boolean to enable or disable this Security Center Automation. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The Azure Region where the Security Center Automation should exist. Changing this forces a new Security Center Automation to be created.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The Azure Region where the Security Center Automation should exist. Changing this forces a new Security Center Automation to be created.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name which should be used for this Security Center Automation. Changing this forces a new Security Center Automation to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name which should be used for this Security Center Automation. Changing this forces a new Security Center Automation to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The name of the Resource Group where the Security Center Automation should exist. Changing this forces a new Security Center Automation to be created.
     * 
     */
    @Import(name="resourceGroupName")
    private @Nullable Output<String> resourceGroupName;

    /**
     * @return The name of the Resource Group where the Security Center Automation should exist. Changing this forces a new Security Center Automation to be created.
     * 
     */
    public Optional<Output<String>> resourceGroupName() {
        return Optional.ofNullable(this.resourceGroupName);
    }

    /**
     * A list of scopes on which the automation logic is applied, at least one is required. Supported scopes are a subscription (in this format `/subscriptions/00000000-0000-0000-0000-000000000000`) or a resource group under that subscription (in the format `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example`). The automation will only apply on defined scopes.
     * 
     */
    @Import(name="scopes")
    private @Nullable Output<List<String>> scopes;

    /**
     * @return A list of scopes on which the automation logic is applied, at least one is required. Supported scopes are a subscription (in this format `/subscriptions/00000000-0000-0000-0000-000000000000`) or a resource group under that subscription (in the format `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example`). The automation will only apply on defined scopes.
     * 
     */
    public Optional<Output<List<String>>> scopes() {
        return Optional.ofNullable(this.scopes);
    }

    /**
     * One or more `source` blocks as defined below. A `source` defines what data types will be processed and a set of rules to filter that data.
     * 
     */
    @Import(name="sources")
    private @Nullable Output<List<AutomationSourceArgs>> sources;

    /**
     * @return One or more `source` blocks as defined below. A `source` defines what data types will be processed and a set of rules to filter that data.
     * 
     */
    public Optional<Output<List<AutomationSourceArgs>>> sources() {
        return Optional.ofNullable(this.sources);
    }

    /**
     * A mapping of tags assigned to the resource. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags assigned to the resource. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private AutomationState() {}

    private AutomationState(AutomationState $) {
        this.actions = $.actions;
        this.description = $.description;
        this.enabled = $.enabled;
        this.location = $.location;
        this.name = $.name;
        this.resourceGroupName = $.resourceGroupName;
        this.scopes = $.scopes;
        this.sources = $.sources;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AutomationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AutomationState $;

        public Builder() {
            $ = new AutomationState();
        }

        public Builder(AutomationState defaults) {
            $ = new AutomationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param actions One or more `action` blocks as defined below. An `action` tells this automation where the data is to be sent to upon being evaluated by the rules in the `source`.
         * 
         * @return builder
         * 
         */
        public Builder actions(@Nullable Output<List<AutomationActionArgs>> actions) {
            $.actions = actions;
            return this;
        }

        /**
         * @param actions One or more `action` blocks as defined below. An `action` tells this automation where the data is to be sent to upon being evaluated by the rules in the `source`.
         * 
         * @return builder
         * 
         */
        public Builder actions(List<AutomationActionArgs> actions) {
            return actions(Output.of(actions));
        }

        /**
         * @param actions One or more `action` blocks as defined below. An `action` tells this automation where the data is to be sent to upon being evaluated by the rules in the `source`.
         * 
         * @return builder
         * 
         */
        public Builder actions(AutomationActionArgs... actions) {
            return actions(List.of(actions));
        }

        /**
         * @param description Specifies the description for the Security Center Automation.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Specifies the description for the Security Center Automation.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param enabled Boolean to enable or disable this Security Center Automation. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Boolean to enable or disable this Security Center Automation. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param location The Azure Region where the Security Center Automation should exist. Changing this forces a new Security Center Automation to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The Azure Region where the Security Center Automation should exist. Changing this forces a new Security Center Automation to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The name which should be used for this Security Center Automation. Changing this forces a new Security Center Automation to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this Security Center Automation. Changing this forces a new Security Center Automation to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param resourceGroupName The name of the Resource Group where the Security Center Automation should exist. Changing this forces a new Security Center Automation to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(@Nullable Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the Resource Group where the Security Center Automation should exist. Changing this forces a new Security Center Automation to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param scopes A list of scopes on which the automation logic is applied, at least one is required. Supported scopes are a subscription (in this format `/subscriptions/00000000-0000-0000-0000-000000000000`) or a resource group under that subscription (in the format `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example`). The automation will only apply on defined scopes.
         * 
         * @return builder
         * 
         */
        public Builder scopes(@Nullable Output<List<String>> scopes) {
            $.scopes = scopes;
            return this;
        }

        /**
         * @param scopes A list of scopes on which the automation logic is applied, at least one is required. Supported scopes are a subscription (in this format `/subscriptions/00000000-0000-0000-0000-000000000000`) or a resource group under that subscription (in the format `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example`). The automation will only apply on defined scopes.
         * 
         * @return builder
         * 
         */
        public Builder scopes(List<String> scopes) {
            return scopes(Output.of(scopes));
        }

        /**
         * @param scopes A list of scopes on which the automation logic is applied, at least one is required. Supported scopes are a subscription (in this format `/subscriptions/00000000-0000-0000-0000-000000000000`) or a resource group under that subscription (in the format `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example`). The automation will only apply on defined scopes.
         * 
         * @return builder
         * 
         */
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }

        /**
         * @param sources One or more `source` blocks as defined below. A `source` defines what data types will be processed and a set of rules to filter that data.
         * 
         * @return builder
         * 
         */
        public Builder sources(@Nullable Output<List<AutomationSourceArgs>> sources) {
            $.sources = sources;
            return this;
        }

        /**
         * @param sources One or more `source` blocks as defined below. A `source` defines what data types will be processed and a set of rules to filter that data.
         * 
         * @return builder
         * 
         */
        public Builder sources(List<AutomationSourceArgs> sources) {
            return sources(Output.of(sources));
        }

        /**
         * @param sources One or more `source` blocks as defined below. A `source` defines what data types will be processed and a set of rules to filter that data.
         * 
         * @return builder
         * 
         */
        public Builder sources(AutomationSourceArgs... sources) {
            return sources(List.of(sources));
        }

        /**
         * @param tags A mapping of tags assigned to the resource. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags assigned to the resource. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public AutomationState build() {
            return $;
        }
    }

}
