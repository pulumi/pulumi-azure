// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerservice.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RegistryTaskSourceTriggerAuthentication {
    /**
     * @return Time in seconds that the token remains valid.
     * 
     */
    private final @Nullable Integer expireInSeconds;
    /**
     * @return The refresh token used to refresh the access token.
     * 
     */
    private final @Nullable String refreshToken;
    /**
     * @return The scope of the access token.
     * 
     */
    private final @Nullable String scope;
    /**
     * @return The access token used to access the source control provider.
     * 
     */
    private final String token;
    /**
     * @return The type of the token. Possible values are `PAT` (personal access token) and `OAuth`.
     * 
     */
    private final String tokenType;

    @CustomType.Constructor
    private RegistryTaskSourceTriggerAuthentication(
        @CustomType.Parameter("expireInSeconds") @Nullable Integer expireInSeconds,
        @CustomType.Parameter("refreshToken") @Nullable String refreshToken,
        @CustomType.Parameter("scope") @Nullable String scope,
        @CustomType.Parameter("token") String token,
        @CustomType.Parameter("tokenType") String tokenType) {
        this.expireInSeconds = expireInSeconds;
        this.refreshToken = refreshToken;
        this.scope = scope;
        this.token = token;
        this.tokenType = tokenType;
    }

    /**
     * @return Time in seconds that the token remains valid.
     * 
     */
    public Optional<Integer> expireInSeconds() {
        return Optional.ofNullable(this.expireInSeconds);
    }
    /**
     * @return The refresh token used to refresh the access token.
     * 
     */
    public Optional<String> refreshToken() {
        return Optional.ofNullable(this.refreshToken);
    }
    /**
     * @return The scope of the access token.
     * 
     */
    public Optional<String> scope() {
        return Optional.ofNullable(this.scope);
    }
    /**
     * @return The access token used to access the source control provider.
     * 
     */
    public String token() {
        return this.token;
    }
    /**
     * @return The type of the token. Possible values are `PAT` (personal access token) and `OAuth`.
     * 
     */
    public String tokenType() {
        return this.tokenType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RegistryTaskSourceTriggerAuthentication defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Integer expireInSeconds;
        private @Nullable String refreshToken;
        private @Nullable String scope;
        private String token;
        private String tokenType;

        public Builder() {
    	      // Empty
        }

        public Builder(RegistryTaskSourceTriggerAuthentication defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.expireInSeconds = defaults.expireInSeconds;
    	      this.refreshToken = defaults.refreshToken;
    	      this.scope = defaults.scope;
    	      this.token = defaults.token;
    	      this.tokenType = defaults.tokenType;
        }

        public Builder expireInSeconds(@Nullable Integer expireInSeconds) {
            this.expireInSeconds = expireInSeconds;
            return this;
        }
        public Builder refreshToken(@Nullable String refreshToken) {
            this.refreshToken = refreshToken;
            return this;
        }
        public Builder scope(@Nullable String scope) {
            this.scope = scope;
            return this;
        }
        public Builder token(String token) {
            this.token = Objects.requireNonNull(token);
            return this;
        }
        public Builder tokenType(String tokenType) {
            this.tokenType = Objects.requireNonNull(tokenType);
            return this;
        }        public RegistryTaskSourceTriggerAuthentication build() {
            return new RegistryTaskSourceTriggerAuthentication(expireInSeconds, refreshToken, scope, token, tokenType);
        }
    }
}
