// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.network.NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentArgs;
import com.pulumi.azure.network.inputs.NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentState;
import com.pulumi.azure.network.outputs.NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentIpTraffic;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a Network Manager Verifier Workspace Reachability Analysis Intent.
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.core.CoreFunctions;
 * import com.pulumi.azure.core.inputs.GetSubscriptionArgs;
 * import com.pulumi.azure.network.NetworkManager;
 * import com.pulumi.azure.network.NetworkManagerArgs;
 * import com.pulumi.azure.network.inputs.NetworkManagerScopeArgs;
 * import com.pulumi.azure.network.NetworkManagerVerifierWorkspace;
 * import com.pulumi.azure.network.NetworkManagerVerifierWorkspaceArgs;
 * import com.pulumi.azure.network.VirtualNetwork;
 * import com.pulumi.azure.network.VirtualNetworkArgs;
 * import com.pulumi.azure.network.Subnet;
 * import com.pulumi.azure.network.SubnetArgs;
 * import com.pulumi.azure.network.NetworkInterface;
 * import com.pulumi.azure.network.NetworkInterfaceArgs;
 * import com.pulumi.azure.network.inputs.NetworkInterfaceIpConfigurationArgs;
 * import com.pulumi.azure.compute.LinuxVirtualMachine;
 * import com.pulumi.azure.compute.LinuxVirtualMachineArgs;
 * import com.pulumi.azure.compute.inputs.LinuxVirtualMachineOsDiskArgs;
 * import com.pulumi.azure.compute.inputs.LinuxVirtualMachineSourceImageReferenceArgs;
 * import com.pulumi.azure.network.NetworkManagerVerifierWorkspaceReachabilityAnalysisIntent;
 * import com.pulumi.azure.network.NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentArgs;
 * import com.pulumi.azure.network.inputs.NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentIpTrafficArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var example = new ResourceGroup("example", ResourceGroupArgs.builder()
 *             .name("example-resources")
 *             .location("West Europe")
 *             .build());
 * 
 *         final var current = CoreFunctions.getSubscription(GetSubscriptionArgs.builder()
 *             .build());
 * 
 *         var exampleNetworkManager = new NetworkManager("exampleNetworkManager", NetworkManagerArgs.builder()
 *             .name("example-nm")
 *             .resourceGroupName(example.name())
 *             .location(example.location())
 *             .scope(NetworkManagerScopeArgs.builder()
 *                 .subscriptionIds(current.id())
 *                 .build())
 *             .scopeAccesses("Connectivity")
 *             .build());
 * 
 *         var exampleNetworkManagerVerifierWorkspace = new NetworkManagerVerifierWorkspace("exampleNetworkManagerVerifierWorkspace", NetworkManagerVerifierWorkspaceArgs.builder()
 *             .name("example")
 *             .networkManagerId(exampleNetworkManager.id())
 *             .location(example.location())
 *             .build());
 * 
 *         var exampleVirtualNetwork = new VirtualNetwork("exampleVirtualNetwork", VirtualNetworkArgs.builder()
 *             .name("example-network")
 *             .addressSpaces("10.0.0.0/16")
 *             .location(example.location())
 *             .resourceGroupName(example.name())
 *             .build());
 * 
 *         var exampleSubnet = new Subnet("exampleSubnet", SubnetArgs.builder()
 *             .name("internal")
 *             .resourceGroupName(example.name())
 *             .virtualNetworkName(exampleVirtualNetwork.name())
 *             .addressPrefixes("10.0.2.0/24")
 *             .build());
 * 
 *         var exampleNetworkInterface = new NetworkInterface("exampleNetworkInterface", NetworkInterfaceArgs.builder()
 *             .name("example-nic")
 *             .location(example.location())
 *             .resourceGroupName(example.name())
 *             .ipConfigurations(NetworkInterfaceIpConfigurationArgs.builder()
 *                 .name("internal")
 *                 .subnetId(exampleSubnet.id())
 *                 .privateIpAddressAllocation("Dynamic")
 *                 .build())
 *             .build());
 * 
 *         var exampleLinuxVirtualMachine = new LinuxVirtualMachine("exampleLinuxVirtualMachine", LinuxVirtualMachineArgs.builder()
 *             .name("example-machine")
 *             .resourceGroupName(example.name())
 *             .location(example.location())
 *             .size("Standard_B1ls")
 *             .adminUsername("adminuser")
 *             .adminPassword("P}{@literal @}{@code ssw0rd1234!")
 *             .disablePasswordAuthentication(false)
 *             .networkInterfaceIds(exampleNetworkInterface.id())
 *             .osDisk(LinuxVirtualMachineOsDiskArgs.builder()
 *                 .caching("ReadWrite")
 *                 .storageAccountType("Standard_LRS")
 *                 .build())
 *             .sourceImageReference(LinuxVirtualMachineSourceImageReferenceArgs.builder()
 *                 .publisher("Canonical")
 *                 .offer("0001-com-ubuntu-server-jammy")
 *                 .sku("22_04-lts")
 *                 .version("latest")
 *                 .build())
 *             .build());
 * 
 *         var exampleNetworkManagerVerifierWorkspaceReachabilityAnalysisIntent = new NetworkManagerVerifierWorkspaceReachabilityAnalysisIntent("exampleNetworkManagerVerifierWorkspaceReachabilityAnalysisIntent", NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentArgs.builder()
 *             .name("example-intent")
 *             .verifierWorkspaceId(exampleNetworkManagerVerifierWorkspace.id())
 *             .sourceResourceId(exampleLinuxVirtualMachine.id())
 *             .destinationResourceId(exampleLinuxVirtualMachine.id())
 *             .description("example")
 *             .ipTraffic(NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentIpTrafficArgs.builder()
 *                 .sourceIps("10.0.2.1")
 *                 .sourcePorts("80")
 *                 .destinationIps("10.0.2.2")
 *                 .destinationPorts("*")
 *                 .protocols("Any")
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * 
 * ## API Providers
 * 
 * &lt;!-- This section is generated, changes will be overwritten --&gt;
 * This resource uses the following Azure API Providers:
 * 
 * * `Microsoft.Network` - 2024-05-01
 * 
 * ## Import
 * 
 * Network Manager Verifier Workspace Reachability Analysis Intents can be imported using the `resource id`, e.g.
 * 
 * ```sh
 * $ pulumi import azure:network/networkManagerVerifierWorkspaceReachabilityAnalysisIntent:NetworkManagerVerifierWorkspaceReachabilityAnalysisIntent example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/networkManagers/manager1/verifierWorkspaces/workspace1/reachabilityAnalysisIntents/intent1
 * ```
 * 
 */
@ResourceType(type="azure:network/networkManagerVerifierWorkspaceReachabilityAnalysisIntent:NetworkManagerVerifierWorkspaceReachabilityAnalysisIntent")
public class NetworkManagerVerifierWorkspaceReachabilityAnalysisIntent extends com.pulumi.resources.CustomResource {
    /**
     * The description of the resource. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return The description of the resource. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * The ID of the destination resource. The value can be the ID of either Public internet, Cosmos DB, Storage Account, SQL Server, Virtual machines, or Subnet. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
     * 
     */
    @Export(name="destinationResourceId", refs={String.class}, tree="[0]")
    private Output<String> destinationResourceId;

    /**
     * @return The ID of the destination resource. The value can be the ID of either Public internet, Cosmos DB, Storage Account, SQL Server, Virtual machines, or Subnet. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
     * 
     */
    public Output<String> destinationResourceId() {
        return this.destinationResourceId;
    }
    /**
     * An `ip_traffic` block as defined below. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
     * 
     */
    @Export(name="ipTraffic", refs={NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentIpTraffic.class}, tree="[0]")
    private Output<NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentIpTraffic> ipTraffic;

    /**
     * @return An `ip_traffic` block as defined below. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
     * 
     */
    public Output<NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentIpTraffic> ipTraffic() {
        return this.ipTraffic;
    }
    /**
     * The name which should be used for this Network Manager Verifier Workspace Reachability Analysis Intent. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name which should be used for this Network Manager Verifier Workspace Reachability Analysis Intent. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the source resource. The value can be the ID of either Public internet, Virtual machines, or Subnet. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
     * 
     */
    @Export(name="sourceResourceId", refs={String.class}, tree="[0]")
    private Output<String> sourceResourceId;

    /**
     * @return The ID of the source resource. The value can be the ID of either Public internet, Virtual machines, or Subnet. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
     * 
     */
    public Output<String> sourceResourceId() {
        return this.sourceResourceId;
    }
    /**
     * The ID of the Network Manager Verifier Workspace. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
     * 
     */
    @Export(name="verifierWorkspaceId", refs={String.class}, tree="[0]")
    private Output<String> verifierWorkspaceId;

    /**
     * @return The ID of the Network Manager Verifier Workspace. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
     * 
     */
    public Output<String> verifierWorkspaceId() {
        return this.verifierWorkspaceId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public NetworkManagerVerifierWorkspaceReachabilityAnalysisIntent(java.lang.String name) {
        this(name, NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public NetworkManagerVerifierWorkspaceReachabilityAnalysisIntent(java.lang.String name, NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public NetworkManagerVerifierWorkspaceReachabilityAnalysisIntent(java.lang.String name, NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:network/networkManagerVerifierWorkspaceReachabilityAnalysisIntent:NetworkManagerVerifierWorkspaceReachabilityAnalysisIntent", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private NetworkManagerVerifierWorkspaceReachabilityAnalysisIntent(java.lang.String name, Output<java.lang.String> id, @Nullable NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:network/networkManagerVerifierWorkspaceReachabilityAnalysisIntent:NetworkManagerVerifierWorkspaceReachabilityAnalysisIntent", name, state, makeResourceOptions(options, id), false);
    }

    private static NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentArgs makeArgs(NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static NetworkManagerVerifierWorkspaceReachabilityAnalysisIntent get(java.lang.String name, Output<java.lang.String> id, @Nullable NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new NetworkManagerVerifierWorkspaceReachabilityAnalysisIntent(name, id, state, options);
    }
}
