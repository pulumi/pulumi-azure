// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.cdn.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FrontdoorRuleActionsUrlRewriteActionArgs extends com.pulumi.resources.ResourceArgs {

    public static final FrontdoorRuleActionsUrlRewriteActionArgs Empty = new FrontdoorRuleActionsUrlRewriteActionArgs();

    /**
     * The destination path to use in the rewrite. The destination path overwrites the source pattern.
     * 
     */
    @Import(name="destination", required=true)
    private Output<String> destination;

    /**
     * @return The destination path to use in the rewrite. The destination path overwrites the source pattern.
     * 
     */
    public Output<String> destination() {
        return this.destination;
    }

    /**
     * Append the remaining path after the source pattern to the new destination path? Possible values `true` or `false`. Defaults to `false`.
     * 
     */
    @Import(name="preserveUnmatchedPath")
    private @Nullable Output<Boolean> preserveUnmatchedPath;

    /**
     * @return Append the remaining path after the source pattern to the new destination path? Possible values `true` or `false`. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> preserveUnmatchedPath() {
        return Optional.ofNullable(this.preserveUnmatchedPath);
    }

    /**
     * The source pattern in the URL path to replace. This uses prefix-based matching. For example, to match all URL paths use a forward slash `&#34;/&#34;` as the source pattern value.
     * 
     */
    @Import(name="sourcePattern", required=true)
    private Output<String> sourcePattern;

    /**
     * @return The source pattern in the URL path to replace. This uses prefix-based matching. For example, to match all URL paths use a forward slash `&#34;/&#34;` as the source pattern value.
     * 
     */
    public Output<String> sourcePattern() {
        return this.sourcePattern;
    }

    private FrontdoorRuleActionsUrlRewriteActionArgs() {}

    private FrontdoorRuleActionsUrlRewriteActionArgs(FrontdoorRuleActionsUrlRewriteActionArgs $) {
        this.destination = $.destination;
        this.preserveUnmatchedPath = $.preserveUnmatchedPath;
        this.sourcePattern = $.sourcePattern;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FrontdoorRuleActionsUrlRewriteActionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FrontdoorRuleActionsUrlRewriteActionArgs $;

        public Builder() {
            $ = new FrontdoorRuleActionsUrlRewriteActionArgs();
        }

        public Builder(FrontdoorRuleActionsUrlRewriteActionArgs defaults) {
            $ = new FrontdoorRuleActionsUrlRewriteActionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param destination The destination path to use in the rewrite. The destination path overwrites the source pattern.
         * 
         * @return builder
         * 
         */
        public Builder destination(Output<String> destination) {
            $.destination = destination;
            return this;
        }

        /**
         * @param destination The destination path to use in the rewrite. The destination path overwrites the source pattern.
         * 
         * @return builder
         * 
         */
        public Builder destination(String destination) {
            return destination(Output.of(destination));
        }

        /**
         * @param preserveUnmatchedPath Append the remaining path after the source pattern to the new destination path? Possible values `true` or `false`. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder preserveUnmatchedPath(@Nullable Output<Boolean> preserveUnmatchedPath) {
            $.preserveUnmatchedPath = preserveUnmatchedPath;
            return this;
        }

        /**
         * @param preserveUnmatchedPath Append the remaining path after the source pattern to the new destination path? Possible values `true` or `false`. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder preserveUnmatchedPath(Boolean preserveUnmatchedPath) {
            return preserveUnmatchedPath(Output.of(preserveUnmatchedPath));
        }

        /**
         * @param sourcePattern The source pattern in the URL path to replace. This uses prefix-based matching. For example, to match all URL paths use a forward slash `&#34;/&#34;` as the source pattern value.
         * 
         * @return builder
         * 
         */
        public Builder sourcePattern(Output<String> sourcePattern) {
            $.sourcePattern = sourcePattern;
            return this;
        }

        /**
         * @param sourcePattern The source pattern in the URL path to replace. This uses prefix-based matching. For example, to match all URL paths use a forward slash `&#34;/&#34;` as the source pattern value.
         * 
         * @return builder
         * 
         */
        public Builder sourcePattern(String sourcePattern) {
            return sourcePattern(Output.of(sourcePattern));
        }

        public FrontdoorRuleActionsUrlRewriteActionArgs build() {
            if ($.destination == null) {
                throw new MissingRequiredPropertyException("FrontdoorRuleActionsUrlRewriteActionArgs", "destination");
            }
            if ($.sourcePattern == null) {
                throw new MissingRequiredPropertyException("FrontdoorRuleActionsUrlRewriteActionArgs", "sourcePattern");
            }
            return $;
        }
    }

}
