// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerapp.inputs;

import com.pulumi.azure.containerapp.inputs.AppTemplateContainerEnvArgs;
import com.pulumi.azure.containerapp.inputs.AppTemplateContainerLivenessProbeArgs;
import com.pulumi.azure.containerapp.inputs.AppTemplateContainerReadinessProbeArgs;
import com.pulumi.azure.containerapp.inputs.AppTemplateContainerStartupProbeArgs;
import com.pulumi.azure.containerapp.inputs.AppTemplateContainerVolumeMountArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AppTemplateContainerArgs extends com.pulumi.resources.ResourceArgs {

    public static final AppTemplateContainerArgs Empty = new AppTemplateContainerArgs();

    /**
     * A list of extra arguments to pass to the container.
     * 
     */
    @Import(name="args")
    private @Nullable Output<List<String>> args;

    /**
     * @return A list of extra arguments to pass to the container.
     * 
     */
    public Optional<Output<List<String>>> args() {
        return Optional.ofNullable(this.args);
    }

    /**
     * A command to pass to the container to override the default. This is provided as a list of command line elements without spaces.
     * 
     */
    @Import(name="commands")
    private @Nullable Output<List<String>> commands;

    /**
     * @return A command to pass to the container to override the default. This is provided as a list of command line elements without spaces.
     * 
     */
    public Optional<Output<List<String>>> commands() {
        return Optional.ofNullable(this.commands);
    }

    /**
     * The amount of vCPU to allocate to the container. Possible values include `0.25`, `0.5`, `0.75`, `1.0`, `1.25`, `1.5`, `1.75`, and `2.0`.
     * 
     * &gt; **NOTE:** `cpu` and `memory` must be specified in `0.25&#39;/&#39;0.5Gi` combination increments. e.g. `1.0` / `2.0` or `0.5` / `1.0`
     * 
     */
    @Import(name="cpu", required=true)
    private Output<Double> cpu;

    /**
     * @return The amount of vCPU to allocate to the container. Possible values include `0.25`, `0.5`, `0.75`, `1.0`, `1.25`, `1.5`, `1.75`, and `2.0`.
     * 
     * &gt; **NOTE:** `cpu` and `memory` must be specified in `0.25&#39;/&#39;0.5Gi` combination increments. e.g. `1.0` / `2.0` or `0.5` / `1.0`
     * 
     */
    public Output<Double> cpu() {
        return this.cpu;
    }

    /**
     * One or more `env` blocks as detailed below.
     * 
     */
    @Import(name="envs")
    private @Nullable Output<List<AppTemplateContainerEnvArgs>> envs;

    /**
     * @return One or more `env` blocks as detailed below.
     * 
     */
    public Optional<Output<List<AppTemplateContainerEnvArgs>>> envs() {
        return Optional.ofNullable(this.envs);
    }

    /**
     * The amount of ephemeral storage available to the Container App.
     * 
     * &gt; **NOTE:** `ephemeral_storage` is currently in preview and not configurable at this time.
     * 
     */
    @Import(name="ephemeralStorage")
    private @Nullable Output<String> ephemeralStorage;

    /**
     * @return The amount of ephemeral storage available to the Container App.
     * 
     * &gt; **NOTE:** `ephemeral_storage` is currently in preview and not configurable at this time.
     * 
     */
    public Optional<Output<String>> ephemeralStorage() {
        return Optional.ofNullable(this.ephemeralStorage);
    }

    /**
     * The image to use to create the container.
     * 
     */
    @Import(name="image", required=true)
    private Output<String> image;

    /**
     * @return The image to use to create the container.
     * 
     */
    public Output<String> image() {
        return this.image;
    }

    /**
     * A `liveness_probe` block as detailed below.
     * 
     */
    @Import(name="livenessProbes")
    private @Nullable Output<List<AppTemplateContainerLivenessProbeArgs>> livenessProbes;

    /**
     * @return A `liveness_probe` block as detailed below.
     * 
     */
    public Optional<Output<List<AppTemplateContainerLivenessProbeArgs>>> livenessProbes() {
        return Optional.ofNullable(this.livenessProbes);
    }

    /**
     * The amount of memory to allocate to the container. Possible values are `0.5Gi`, `1Gi`, `1.5Gi`, `2Gi`, `2.5Gi`, `3Gi`, `3.5Gi` and `4Gi`.
     * 
     * &gt; **NOTE:** `cpu` and `memory` must be specified in `0.25&#39;/&#39;0.5Gi` combination increments. e.g. `1.25` / `2.5Gi` or `0.75` / `1.5Gi`
     * 
     */
    @Import(name="memory", required=true)
    private Output<String> memory;

    /**
     * @return The amount of memory to allocate to the container. Possible values are `0.5Gi`, `1Gi`, `1.5Gi`, `2Gi`, `2.5Gi`, `3Gi`, `3.5Gi` and `4Gi`.
     * 
     * &gt; **NOTE:** `cpu` and `memory` must be specified in `0.25&#39;/&#39;0.5Gi` combination increments. e.g. `1.25` / `2.5Gi` or `0.75` / `1.5Gi`
     * 
     */
    public Output<String> memory() {
        return this.memory;
    }

    /**
     * The name of the container
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the container
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * A `readiness_probe` block as detailed below.
     * 
     */
    @Import(name="readinessProbes")
    private @Nullable Output<List<AppTemplateContainerReadinessProbeArgs>> readinessProbes;

    /**
     * @return A `readiness_probe` block as detailed below.
     * 
     */
    public Optional<Output<List<AppTemplateContainerReadinessProbeArgs>>> readinessProbes() {
        return Optional.ofNullable(this.readinessProbes);
    }

    /**
     * A `startup_probe` block as detailed below.
     * 
     */
    @Import(name="startupProbes")
    private @Nullable Output<List<AppTemplateContainerStartupProbeArgs>> startupProbes;

    /**
     * @return A `startup_probe` block as detailed below.
     * 
     */
    public Optional<Output<List<AppTemplateContainerStartupProbeArgs>>> startupProbes() {
        return Optional.ofNullable(this.startupProbes);
    }

    /**
     * A `volume_mounts` block as detailed below.
     * 
     */
    @Import(name="volumeMounts")
    private @Nullable Output<List<AppTemplateContainerVolumeMountArgs>> volumeMounts;

    /**
     * @return A `volume_mounts` block as detailed below.
     * 
     */
    public Optional<Output<List<AppTemplateContainerVolumeMountArgs>>> volumeMounts() {
        return Optional.ofNullable(this.volumeMounts);
    }

    private AppTemplateContainerArgs() {}

    private AppTemplateContainerArgs(AppTemplateContainerArgs $) {
        this.args = $.args;
        this.commands = $.commands;
        this.cpu = $.cpu;
        this.envs = $.envs;
        this.ephemeralStorage = $.ephemeralStorage;
        this.image = $.image;
        this.livenessProbes = $.livenessProbes;
        this.memory = $.memory;
        this.name = $.name;
        this.readinessProbes = $.readinessProbes;
        this.startupProbes = $.startupProbes;
        this.volumeMounts = $.volumeMounts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppTemplateContainerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppTemplateContainerArgs $;

        public Builder() {
            $ = new AppTemplateContainerArgs();
        }

        public Builder(AppTemplateContainerArgs defaults) {
            $ = new AppTemplateContainerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param args A list of extra arguments to pass to the container.
         * 
         * @return builder
         * 
         */
        public Builder args(@Nullable Output<List<String>> args) {
            $.args = args;
            return this;
        }

        /**
         * @param args A list of extra arguments to pass to the container.
         * 
         * @return builder
         * 
         */
        public Builder args(List<String> args) {
            return args(Output.of(args));
        }

        /**
         * @param args A list of extra arguments to pass to the container.
         * 
         * @return builder
         * 
         */
        public Builder args(String... args) {
            return args(List.of(args));
        }

        /**
         * @param commands A command to pass to the container to override the default. This is provided as a list of command line elements without spaces.
         * 
         * @return builder
         * 
         */
        public Builder commands(@Nullable Output<List<String>> commands) {
            $.commands = commands;
            return this;
        }

        /**
         * @param commands A command to pass to the container to override the default. This is provided as a list of command line elements without spaces.
         * 
         * @return builder
         * 
         */
        public Builder commands(List<String> commands) {
            return commands(Output.of(commands));
        }

        /**
         * @param commands A command to pass to the container to override the default. This is provided as a list of command line elements without spaces.
         * 
         * @return builder
         * 
         */
        public Builder commands(String... commands) {
            return commands(List.of(commands));
        }

        /**
         * @param cpu The amount of vCPU to allocate to the container. Possible values include `0.25`, `0.5`, `0.75`, `1.0`, `1.25`, `1.5`, `1.75`, and `2.0`.
         * 
         * &gt; **NOTE:** `cpu` and `memory` must be specified in `0.25&#39;/&#39;0.5Gi` combination increments. e.g. `1.0` / `2.0` or `0.5` / `1.0`
         * 
         * @return builder
         * 
         */
        public Builder cpu(Output<Double> cpu) {
            $.cpu = cpu;
            return this;
        }

        /**
         * @param cpu The amount of vCPU to allocate to the container. Possible values include `0.25`, `0.5`, `0.75`, `1.0`, `1.25`, `1.5`, `1.75`, and `2.0`.
         * 
         * &gt; **NOTE:** `cpu` and `memory` must be specified in `0.25&#39;/&#39;0.5Gi` combination increments. e.g. `1.0` / `2.0` or `0.5` / `1.0`
         * 
         * @return builder
         * 
         */
        public Builder cpu(Double cpu) {
            return cpu(Output.of(cpu));
        }

        /**
         * @param envs One or more `env` blocks as detailed below.
         * 
         * @return builder
         * 
         */
        public Builder envs(@Nullable Output<List<AppTemplateContainerEnvArgs>> envs) {
            $.envs = envs;
            return this;
        }

        /**
         * @param envs One or more `env` blocks as detailed below.
         * 
         * @return builder
         * 
         */
        public Builder envs(List<AppTemplateContainerEnvArgs> envs) {
            return envs(Output.of(envs));
        }

        /**
         * @param envs One or more `env` blocks as detailed below.
         * 
         * @return builder
         * 
         */
        public Builder envs(AppTemplateContainerEnvArgs... envs) {
            return envs(List.of(envs));
        }

        /**
         * @param ephemeralStorage The amount of ephemeral storage available to the Container App.
         * 
         * &gt; **NOTE:** `ephemeral_storage` is currently in preview and not configurable at this time.
         * 
         * @return builder
         * 
         */
        public Builder ephemeralStorage(@Nullable Output<String> ephemeralStorage) {
            $.ephemeralStorage = ephemeralStorage;
            return this;
        }

        /**
         * @param ephemeralStorage The amount of ephemeral storage available to the Container App.
         * 
         * &gt; **NOTE:** `ephemeral_storage` is currently in preview and not configurable at this time.
         * 
         * @return builder
         * 
         */
        public Builder ephemeralStorage(String ephemeralStorage) {
            return ephemeralStorage(Output.of(ephemeralStorage));
        }

        /**
         * @param image The image to use to create the container.
         * 
         * @return builder
         * 
         */
        public Builder image(Output<String> image) {
            $.image = image;
            return this;
        }

        /**
         * @param image The image to use to create the container.
         * 
         * @return builder
         * 
         */
        public Builder image(String image) {
            return image(Output.of(image));
        }

        /**
         * @param livenessProbes A `liveness_probe` block as detailed below.
         * 
         * @return builder
         * 
         */
        public Builder livenessProbes(@Nullable Output<List<AppTemplateContainerLivenessProbeArgs>> livenessProbes) {
            $.livenessProbes = livenessProbes;
            return this;
        }

        /**
         * @param livenessProbes A `liveness_probe` block as detailed below.
         * 
         * @return builder
         * 
         */
        public Builder livenessProbes(List<AppTemplateContainerLivenessProbeArgs> livenessProbes) {
            return livenessProbes(Output.of(livenessProbes));
        }

        /**
         * @param livenessProbes A `liveness_probe` block as detailed below.
         * 
         * @return builder
         * 
         */
        public Builder livenessProbes(AppTemplateContainerLivenessProbeArgs... livenessProbes) {
            return livenessProbes(List.of(livenessProbes));
        }

        /**
         * @param memory The amount of memory to allocate to the container. Possible values are `0.5Gi`, `1Gi`, `1.5Gi`, `2Gi`, `2.5Gi`, `3Gi`, `3.5Gi` and `4Gi`.
         * 
         * &gt; **NOTE:** `cpu` and `memory` must be specified in `0.25&#39;/&#39;0.5Gi` combination increments. e.g. `1.25` / `2.5Gi` or `0.75` / `1.5Gi`
         * 
         * @return builder
         * 
         */
        public Builder memory(Output<String> memory) {
            $.memory = memory;
            return this;
        }

        /**
         * @param memory The amount of memory to allocate to the container. Possible values are `0.5Gi`, `1Gi`, `1.5Gi`, `2Gi`, `2.5Gi`, `3Gi`, `3.5Gi` and `4Gi`.
         * 
         * &gt; **NOTE:** `cpu` and `memory` must be specified in `0.25&#39;/&#39;0.5Gi` combination increments. e.g. `1.25` / `2.5Gi` or `0.75` / `1.5Gi`
         * 
         * @return builder
         * 
         */
        public Builder memory(String memory) {
            return memory(Output.of(memory));
        }

        /**
         * @param name The name of the container
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the container
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param readinessProbes A `readiness_probe` block as detailed below.
         * 
         * @return builder
         * 
         */
        public Builder readinessProbes(@Nullable Output<List<AppTemplateContainerReadinessProbeArgs>> readinessProbes) {
            $.readinessProbes = readinessProbes;
            return this;
        }

        /**
         * @param readinessProbes A `readiness_probe` block as detailed below.
         * 
         * @return builder
         * 
         */
        public Builder readinessProbes(List<AppTemplateContainerReadinessProbeArgs> readinessProbes) {
            return readinessProbes(Output.of(readinessProbes));
        }

        /**
         * @param readinessProbes A `readiness_probe` block as detailed below.
         * 
         * @return builder
         * 
         */
        public Builder readinessProbes(AppTemplateContainerReadinessProbeArgs... readinessProbes) {
            return readinessProbes(List.of(readinessProbes));
        }

        /**
         * @param startupProbes A `startup_probe` block as detailed below.
         * 
         * @return builder
         * 
         */
        public Builder startupProbes(@Nullable Output<List<AppTemplateContainerStartupProbeArgs>> startupProbes) {
            $.startupProbes = startupProbes;
            return this;
        }

        /**
         * @param startupProbes A `startup_probe` block as detailed below.
         * 
         * @return builder
         * 
         */
        public Builder startupProbes(List<AppTemplateContainerStartupProbeArgs> startupProbes) {
            return startupProbes(Output.of(startupProbes));
        }

        /**
         * @param startupProbes A `startup_probe` block as detailed below.
         * 
         * @return builder
         * 
         */
        public Builder startupProbes(AppTemplateContainerStartupProbeArgs... startupProbes) {
            return startupProbes(List.of(startupProbes));
        }

        /**
         * @param volumeMounts A `volume_mounts` block as detailed below.
         * 
         * @return builder
         * 
         */
        public Builder volumeMounts(@Nullable Output<List<AppTemplateContainerVolumeMountArgs>> volumeMounts) {
            $.volumeMounts = volumeMounts;
            return this;
        }

        /**
         * @param volumeMounts A `volume_mounts` block as detailed below.
         * 
         * @return builder
         * 
         */
        public Builder volumeMounts(List<AppTemplateContainerVolumeMountArgs> volumeMounts) {
            return volumeMounts(Output.of(volumeMounts));
        }

        /**
         * @param volumeMounts A `volume_mounts` block as detailed below.
         * 
         * @return builder
         * 
         */
        public Builder volumeMounts(AppTemplateContainerVolumeMountArgs... volumeMounts) {
            return volumeMounts(List.of(volumeMounts));
        }

        public AppTemplateContainerArgs build() {
            if ($.cpu == null) {
                throw new MissingRequiredPropertyException("AppTemplateContainerArgs", "cpu");
            }
            if ($.image == null) {
                throw new MissingRequiredPropertyException("AppTemplateContainerArgs", "image");
            }
            if ($.memory == null) {
                throw new MissingRequiredPropertyException("AppTemplateContainerArgs", "memory");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("AppTemplateContainerArgs", "name");
            }
            return $;
        }
    }

}
