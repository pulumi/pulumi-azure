// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.mssql.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class VirtualMachineSqlInstance {
    /**
     * @return Specifies if the SQL Server is optimized for adhoc workloads. Possible values are `true` and `false`. Defaults to `false`.
     * 
     */
    private @Nullable Boolean adhocWorkloadsOptimizationEnabled;
    /**
     * @return Collation of the SQL Server. Defaults to `SQL_Latin1_General_CP1_CI_AS`. Changing this forces a new resource to be created.
     * 
     */
    private @Nullable String collation;
    /**
     * @return Specifies if Instant File Initialization is enabled for the SQL Server. Possible values are `true` and `false`. Defaults to `false`. Changing this forces a new resource to be created.
     * 
     */
    private @Nullable Boolean instantFileInitializationEnabled;
    /**
     * @return Specifies if Lock Pages in Memory is enabled for the SQL Server. Possible values are `true` and `false`. Defaults to `false`. Changing this forces a new resource to be created.
     * 
     */
    private @Nullable Boolean lockPagesInMemoryEnabled;
    /**
     * @return Maximum Degree of Parallelism of the SQL Server. Possible values are between `0` and `32767`. Defaults to `0`.
     * 
     */
    private @Nullable Integer maxDop;
    /**
     * @return Maximum amount memory that SQL Server Memory Manager can allocate to the SQL Server process. Possible values are between `128` and `2147483647` Defaults to `2147483647`.
     * 
     */
    private @Nullable Integer maxServerMemoryMb;
    /**
     * @return Minimum amount memory that SQL Server Memory Manager can allocate to the SQL Server process. Possible values are between `0` and `2147483647` Defaults to `0`.
     * 
     * &gt; **NOTE:** `max_server_memory_mb` must be greater than or equal to `min_server_memory_mb`
     * 
     */
    private @Nullable Integer minServerMemoryMb;

    private VirtualMachineSqlInstance() {}
    /**
     * @return Specifies if the SQL Server is optimized for adhoc workloads. Possible values are `true` and `false`. Defaults to `false`.
     * 
     */
    public Optional<Boolean> adhocWorkloadsOptimizationEnabled() {
        return Optional.ofNullable(this.adhocWorkloadsOptimizationEnabled);
    }
    /**
     * @return Collation of the SQL Server. Defaults to `SQL_Latin1_General_CP1_CI_AS`. Changing this forces a new resource to be created.
     * 
     */
    public Optional<String> collation() {
        return Optional.ofNullable(this.collation);
    }
    /**
     * @return Specifies if Instant File Initialization is enabled for the SQL Server. Possible values are `true` and `false`. Defaults to `false`. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Boolean> instantFileInitializationEnabled() {
        return Optional.ofNullable(this.instantFileInitializationEnabled);
    }
    /**
     * @return Specifies if Lock Pages in Memory is enabled for the SQL Server. Possible values are `true` and `false`. Defaults to `false`. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Boolean> lockPagesInMemoryEnabled() {
        return Optional.ofNullable(this.lockPagesInMemoryEnabled);
    }
    /**
     * @return Maximum Degree of Parallelism of the SQL Server. Possible values are between `0` and `32767`. Defaults to `0`.
     * 
     */
    public Optional<Integer> maxDop() {
        return Optional.ofNullable(this.maxDop);
    }
    /**
     * @return Maximum amount memory that SQL Server Memory Manager can allocate to the SQL Server process. Possible values are between `128` and `2147483647` Defaults to `2147483647`.
     * 
     */
    public Optional<Integer> maxServerMemoryMb() {
        return Optional.ofNullable(this.maxServerMemoryMb);
    }
    /**
     * @return Minimum amount memory that SQL Server Memory Manager can allocate to the SQL Server process. Possible values are between `0` and `2147483647` Defaults to `0`.
     * 
     * &gt; **NOTE:** `max_server_memory_mb` must be greater than or equal to `min_server_memory_mb`
     * 
     */
    public Optional<Integer> minServerMemoryMb() {
        return Optional.ofNullable(this.minServerMemoryMb);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VirtualMachineSqlInstance defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean adhocWorkloadsOptimizationEnabled;
        private @Nullable String collation;
        private @Nullable Boolean instantFileInitializationEnabled;
        private @Nullable Boolean lockPagesInMemoryEnabled;
        private @Nullable Integer maxDop;
        private @Nullable Integer maxServerMemoryMb;
        private @Nullable Integer minServerMemoryMb;
        public Builder() {}
        public Builder(VirtualMachineSqlInstance defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adhocWorkloadsOptimizationEnabled = defaults.adhocWorkloadsOptimizationEnabled;
    	      this.collation = defaults.collation;
    	      this.instantFileInitializationEnabled = defaults.instantFileInitializationEnabled;
    	      this.lockPagesInMemoryEnabled = defaults.lockPagesInMemoryEnabled;
    	      this.maxDop = defaults.maxDop;
    	      this.maxServerMemoryMb = defaults.maxServerMemoryMb;
    	      this.minServerMemoryMb = defaults.minServerMemoryMb;
        }

        @CustomType.Setter
        public Builder adhocWorkloadsOptimizationEnabled(@Nullable Boolean adhocWorkloadsOptimizationEnabled) {

            this.adhocWorkloadsOptimizationEnabled = adhocWorkloadsOptimizationEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder collation(@Nullable String collation) {

            this.collation = collation;
            return this;
        }
        @CustomType.Setter
        public Builder instantFileInitializationEnabled(@Nullable Boolean instantFileInitializationEnabled) {

            this.instantFileInitializationEnabled = instantFileInitializationEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder lockPagesInMemoryEnabled(@Nullable Boolean lockPagesInMemoryEnabled) {

            this.lockPagesInMemoryEnabled = lockPagesInMemoryEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder maxDop(@Nullable Integer maxDop) {

            this.maxDop = maxDop;
            return this;
        }
        @CustomType.Setter
        public Builder maxServerMemoryMb(@Nullable Integer maxServerMemoryMb) {

            this.maxServerMemoryMb = maxServerMemoryMb;
            return this;
        }
        @CustomType.Setter
        public Builder minServerMemoryMb(@Nullable Integer minServerMemoryMb) {

            this.minServerMemoryMb = minServerMemoryMb;
            return this;
        }
        public VirtualMachineSqlInstance build() {
            final var _resultValue = new VirtualMachineSqlInstance();
            _resultValue.adhocWorkloadsOptimizationEnabled = adhocWorkloadsOptimizationEnabled;
            _resultValue.collation = collation;
            _resultValue.instantFileInitializationEnabled = instantFileInitializationEnabled;
            _resultValue.lockPagesInMemoryEnabled = lockPagesInMemoryEnabled;
            _resultValue.maxDop = maxDop;
            _resultValue.maxServerMemoryMb = maxServerMemoryMb;
            _resultValue.minServerMemoryMb = minServerMemoryMb;
            return _resultValue;
        }
    }
}
