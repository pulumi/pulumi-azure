// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.cdn.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FrontdoorRuleConditionsRemoteAddressConditionArgs extends com.pulumi.resources.ResourceArgs {

    public static final FrontdoorRuleConditionsRemoteAddressConditionArgs Empty = new FrontdoorRuleConditionsRemoteAddressConditionArgs();

    /**
     * For the IP Match or IP Not Match operators: specify one or more IP address ranges. If multiple IP address ranges are specified, they&#39;re evaluated using `OR` logic. For the Geo Match or Geo Not Match operators: specify one or more locations using their country code.
     * 
     * -&gt;**NOTE:** See the `Specifying IP Address Ranges` section below on how to correctly define the `match_values` field.
     * 
     */
    @Import(name="matchValues")
    private @Nullable Output<List<String>> matchValues;

    /**
     * @return For the IP Match or IP Not Match operators: specify one or more IP address ranges. If multiple IP address ranges are specified, they&#39;re evaluated using `OR` logic. For the Geo Match or Geo Not Match operators: specify one or more locations using their country code.
     * 
     * -&gt;**NOTE:** See the `Specifying IP Address Ranges` section below on how to correctly define the `match_values` field.
     * 
     */
    public Optional<Output<List<String>>> matchValues() {
        return Optional.ofNullable(this.matchValues);
    }

    /**
     * If `true` operator becomes the opposite of its value. Possible values `true` or `false`. Defaults to `false`. Details can be found in the `Condition Operator List` below.
     * 
     */
    @Import(name="negateCondition")
    private @Nullable Output<Boolean> negateCondition;

    /**
     * @return If `true` operator becomes the opposite of its value. Possible values `true` or `false`. Defaults to `false`. Details can be found in the `Condition Operator List` below.
     * 
     */
    public Optional<Output<Boolean>> negateCondition() {
        return Optional.ofNullable(this.negateCondition);
    }

    /**
     * The type of the remote address to match. Possible values include `Any`, `GeoMatch` or `IPMatch`. Use the `negate_condition` to specify Not `GeoMatch` or Not `IPMatch`. Defaults to `IPMatch`.
     * 
     */
    @Import(name="operator")
    private @Nullable Output<String> operator;

    /**
     * @return The type of the remote address to match. Possible values include `Any`, `GeoMatch` or `IPMatch`. Use the `negate_condition` to specify Not `GeoMatch` or Not `IPMatch`. Defaults to `IPMatch`.
     * 
     */
    public Optional<Output<String>> operator() {
        return Optional.ofNullable(this.operator);
    }

    private FrontdoorRuleConditionsRemoteAddressConditionArgs() {}

    private FrontdoorRuleConditionsRemoteAddressConditionArgs(FrontdoorRuleConditionsRemoteAddressConditionArgs $) {
        this.matchValues = $.matchValues;
        this.negateCondition = $.negateCondition;
        this.operator = $.operator;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FrontdoorRuleConditionsRemoteAddressConditionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FrontdoorRuleConditionsRemoteAddressConditionArgs $;

        public Builder() {
            $ = new FrontdoorRuleConditionsRemoteAddressConditionArgs();
        }

        public Builder(FrontdoorRuleConditionsRemoteAddressConditionArgs defaults) {
            $ = new FrontdoorRuleConditionsRemoteAddressConditionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param matchValues For the IP Match or IP Not Match operators: specify one or more IP address ranges. If multiple IP address ranges are specified, they&#39;re evaluated using `OR` logic. For the Geo Match or Geo Not Match operators: specify one or more locations using their country code.
         * 
         * -&gt;**NOTE:** See the `Specifying IP Address Ranges` section below on how to correctly define the `match_values` field.
         * 
         * @return builder
         * 
         */
        public Builder matchValues(@Nullable Output<List<String>> matchValues) {
            $.matchValues = matchValues;
            return this;
        }

        /**
         * @param matchValues For the IP Match or IP Not Match operators: specify one or more IP address ranges. If multiple IP address ranges are specified, they&#39;re evaluated using `OR` logic. For the Geo Match or Geo Not Match operators: specify one or more locations using their country code.
         * 
         * -&gt;**NOTE:** See the `Specifying IP Address Ranges` section below on how to correctly define the `match_values` field.
         * 
         * @return builder
         * 
         */
        public Builder matchValues(List<String> matchValues) {
            return matchValues(Output.of(matchValues));
        }

        /**
         * @param matchValues For the IP Match or IP Not Match operators: specify one or more IP address ranges. If multiple IP address ranges are specified, they&#39;re evaluated using `OR` logic. For the Geo Match or Geo Not Match operators: specify one or more locations using their country code.
         * 
         * -&gt;**NOTE:** See the `Specifying IP Address Ranges` section below on how to correctly define the `match_values` field.
         * 
         * @return builder
         * 
         */
        public Builder matchValues(String... matchValues) {
            return matchValues(List.of(matchValues));
        }

        /**
         * @param negateCondition If `true` operator becomes the opposite of its value. Possible values `true` or `false`. Defaults to `false`. Details can be found in the `Condition Operator List` below.
         * 
         * @return builder
         * 
         */
        public Builder negateCondition(@Nullable Output<Boolean> negateCondition) {
            $.negateCondition = negateCondition;
            return this;
        }

        /**
         * @param negateCondition If `true` operator becomes the opposite of its value. Possible values `true` or `false`. Defaults to `false`. Details can be found in the `Condition Operator List` below.
         * 
         * @return builder
         * 
         */
        public Builder negateCondition(Boolean negateCondition) {
            return negateCondition(Output.of(negateCondition));
        }

        /**
         * @param operator The type of the remote address to match. Possible values include `Any`, `GeoMatch` or `IPMatch`. Use the `negate_condition` to specify Not `GeoMatch` or Not `IPMatch`. Defaults to `IPMatch`.
         * 
         * @return builder
         * 
         */
        public Builder operator(@Nullable Output<String> operator) {
            $.operator = operator;
            return this;
        }

        /**
         * @param operator The type of the remote address to match. Possible values include `Any`, `GeoMatch` or `IPMatch`. Use the `negate_condition` to specify Not `GeoMatch` or Not `IPMatch`. Defaults to `IPMatch`.
         * 
         * @return builder
         * 
         */
        public Builder operator(String operator) {
            return operator(Output.of(operator));
        }

        public FrontdoorRuleConditionsRemoteAddressConditionArgs build() {
            return $;
        }
    }

}
