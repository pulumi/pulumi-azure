// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.keyvault;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagedStorageAccountSasTokenDefinitionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagedStorageAccountSasTokenDefinitionArgs Empty = new ManagedStorageAccountSasTokenDefinitionArgs();

    /**
     * The ID of the Managed Storage Account.
     * 
     */
    @Import(name="managedStorageAccountId", required=true)
    private Output<String> managedStorageAccountId;

    /**
     * @return The ID of the Managed Storage Account.
     * 
     */
    public Output<String> managedStorageAccountId() {
        return this.managedStorageAccountId;
    }

    /**
     * The name which should be used for this SAS Definition.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name which should be used for this SAS Definition.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The SAS definition token template signed with an arbitrary key. Tokens created according to the SAS definition will have the same properties as the template, but regenerated with a new validity period.
     * 
     */
    @Import(name="sasTemplateUri", required=true)
    private Output<String> sasTemplateUri;

    /**
     * @return The SAS definition token template signed with an arbitrary key. Tokens created according to the SAS definition will have the same properties as the template, but regenerated with a new validity period.
     * 
     */
    public Output<String> sasTemplateUri() {
        return this.sasTemplateUri;
    }

    /**
     * The type of SAS token the SAS definition will create. Possible values are `account` and `service`.
     * 
     */
    @Import(name="sasType", required=true)
    private Output<String> sasType;

    /**
     * @return The type of SAS token the SAS definition will create. Possible values are `account` and `service`.
     * 
     */
    public Output<String> sasType() {
        return this.sasType;
    }

    /**
     * A mapping of tags which should be assigned to the SAS Definition. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags which should be assigned to the SAS Definition. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Validity period of SAS token. Value needs to be in [ISO 8601 duration format](https://en.wikipedia.org/wiki/ISO_8601#Durations).
     * 
     */
    @Import(name="validityPeriod", required=true)
    private Output<String> validityPeriod;

    /**
     * @return Validity period of SAS token. Value needs to be in [ISO 8601 duration format](https://en.wikipedia.org/wiki/ISO_8601#Durations).
     * 
     */
    public Output<String> validityPeriod() {
        return this.validityPeriod;
    }

    private ManagedStorageAccountSasTokenDefinitionArgs() {}

    private ManagedStorageAccountSasTokenDefinitionArgs(ManagedStorageAccountSasTokenDefinitionArgs $) {
        this.managedStorageAccountId = $.managedStorageAccountId;
        this.name = $.name;
        this.sasTemplateUri = $.sasTemplateUri;
        this.sasType = $.sasType;
        this.tags = $.tags;
        this.validityPeriod = $.validityPeriod;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedStorageAccountSasTokenDefinitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedStorageAccountSasTokenDefinitionArgs $;

        public Builder() {
            $ = new ManagedStorageAccountSasTokenDefinitionArgs();
        }

        public Builder(ManagedStorageAccountSasTokenDefinitionArgs defaults) {
            $ = new ManagedStorageAccountSasTokenDefinitionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param managedStorageAccountId The ID of the Managed Storage Account.
         * 
         * @return builder
         * 
         */
        public Builder managedStorageAccountId(Output<String> managedStorageAccountId) {
            $.managedStorageAccountId = managedStorageAccountId;
            return this;
        }

        /**
         * @param managedStorageAccountId The ID of the Managed Storage Account.
         * 
         * @return builder
         * 
         */
        public Builder managedStorageAccountId(String managedStorageAccountId) {
            return managedStorageAccountId(Output.of(managedStorageAccountId));
        }

        /**
         * @param name The name which should be used for this SAS Definition.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this SAS Definition.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param sasTemplateUri The SAS definition token template signed with an arbitrary key. Tokens created according to the SAS definition will have the same properties as the template, but regenerated with a new validity period.
         * 
         * @return builder
         * 
         */
        public Builder sasTemplateUri(Output<String> sasTemplateUri) {
            $.sasTemplateUri = sasTemplateUri;
            return this;
        }

        /**
         * @param sasTemplateUri The SAS definition token template signed with an arbitrary key. Tokens created according to the SAS definition will have the same properties as the template, but regenerated with a new validity period.
         * 
         * @return builder
         * 
         */
        public Builder sasTemplateUri(String sasTemplateUri) {
            return sasTemplateUri(Output.of(sasTemplateUri));
        }

        /**
         * @param sasType The type of SAS token the SAS definition will create. Possible values are `account` and `service`.
         * 
         * @return builder
         * 
         */
        public Builder sasType(Output<String> sasType) {
            $.sasType = sasType;
            return this;
        }

        /**
         * @param sasType The type of SAS token the SAS definition will create. Possible values are `account` and `service`.
         * 
         * @return builder
         * 
         */
        public Builder sasType(String sasType) {
            return sasType(Output.of(sasType));
        }

        /**
         * @param tags A mapping of tags which should be assigned to the SAS Definition. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags which should be assigned to the SAS Definition. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param validityPeriod Validity period of SAS token. Value needs to be in [ISO 8601 duration format](https://en.wikipedia.org/wiki/ISO_8601#Durations).
         * 
         * @return builder
         * 
         */
        public Builder validityPeriod(Output<String> validityPeriod) {
            $.validityPeriod = validityPeriod;
            return this;
        }

        /**
         * @param validityPeriod Validity period of SAS token. Value needs to be in [ISO 8601 duration format](https://en.wikipedia.org/wiki/ISO_8601#Durations).
         * 
         * @return builder
         * 
         */
        public Builder validityPeriod(String validityPeriod) {
            return validityPeriod(Output.of(validityPeriod));
        }

        public ManagedStorageAccountSasTokenDefinitionArgs build() {
            if ($.managedStorageAccountId == null) {
                throw new MissingRequiredPropertyException("ManagedStorageAccountSasTokenDefinitionArgs", "managedStorageAccountId");
            }
            if ($.sasTemplateUri == null) {
                throw new MissingRequiredPropertyException("ManagedStorageAccountSasTokenDefinitionArgs", "sasTemplateUri");
            }
            if ($.sasType == null) {
                throw new MissingRequiredPropertyException("ManagedStorageAccountSasTokenDefinitionArgs", "sasType");
            }
            if ($.validityPeriod == null) {
                throw new MissingRequiredPropertyException("ManagedStorageAccountSasTokenDefinitionArgs", "validityPeriod");
            }
            return $;
        }
    }

}
