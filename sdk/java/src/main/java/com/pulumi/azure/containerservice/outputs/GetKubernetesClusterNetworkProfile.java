// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerservice.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetKubernetesClusterNetworkProfile {
    /**
     * @return IP address within the Kubernetes service address range used by cluster service discovery (kube-dns).
     * 
     */
    private String dnsServiceIp;
    /**
     * @return IP address (in CIDR notation) used as the Docker bridge IP address on nodes.
     * 
     */
    private String dockerBridgeCidr;
    private String loadBalancerSku;
    /**
     * @return Network plugin used such as `azure` or `kubenet`.
     * 
     */
    private String networkPlugin;
    /**
     * @return Network policy to be used with Azure CNI. e.g. `calico` or `azure`
     * 
     */
    private String networkPolicy;
    /**
     * @return The CIDR used for pod IP addresses.
     * 
     */
    private String podCidr;
    /**
     * @return Network range used by the Kubernetes service.
     * 
     */
    private String serviceCidr;

    private GetKubernetesClusterNetworkProfile() {}
    /**
     * @return IP address within the Kubernetes service address range used by cluster service discovery (kube-dns).
     * 
     */
    public String dnsServiceIp() {
        return this.dnsServiceIp;
    }
    /**
     * @return IP address (in CIDR notation) used as the Docker bridge IP address on nodes.
     * 
     */
    public String dockerBridgeCidr() {
        return this.dockerBridgeCidr;
    }
    public String loadBalancerSku() {
        return this.loadBalancerSku;
    }
    /**
     * @return Network plugin used such as `azure` or `kubenet`.
     * 
     */
    public String networkPlugin() {
        return this.networkPlugin;
    }
    /**
     * @return Network policy to be used with Azure CNI. e.g. `calico` or `azure`
     * 
     */
    public String networkPolicy() {
        return this.networkPolicy;
    }
    /**
     * @return The CIDR used for pod IP addresses.
     * 
     */
    public String podCidr() {
        return this.podCidr;
    }
    /**
     * @return Network range used by the Kubernetes service.
     * 
     */
    public String serviceCidr() {
        return this.serviceCidr;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetKubernetesClusterNetworkProfile defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String dnsServiceIp;
        private String dockerBridgeCidr;
        private String loadBalancerSku;
        private String networkPlugin;
        private String networkPolicy;
        private String podCidr;
        private String serviceCidr;
        public Builder() {}
        public Builder(GetKubernetesClusterNetworkProfile defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dnsServiceIp = defaults.dnsServiceIp;
    	      this.dockerBridgeCidr = defaults.dockerBridgeCidr;
    	      this.loadBalancerSku = defaults.loadBalancerSku;
    	      this.networkPlugin = defaults.networkPlugin;
    	      this.networkPolicy = defaults.networkPolicy;
    	      this.podCidr = defaults.podCidr;
    	      this.serviceCidr = defaults.serviceCidr;
        }

        @CustomType.Setter
        public Builder dnsServiceIp(String dnsServiceIp) {
            if (dnsServiceIp == null) {
              throw new MissingRequiredPropertyException("GetKubernetesClusterNetworkProfile", "dnsServiceIp");
            }
            this.dnsServiceIp = dnsServiceIp;
            return this;
        }
        @CustomType.Setter
        public Builder dockerBridgeCidr(String dockerBridgeCidr) {
            if (dockerBridgeCidr == null) {
              throw new MissingRequiredPropertyException("GetKubernetesClusterNetworkProfile", "dockerBridgeCidr");
            }
            this.dockerBridgeCidr = dockerBridgeCidr;
            return this;
        }
        @CustomType.Setter
        public Builder loadBalancerSku(String loadBalancerSku) {
            if (loadBalancerSku == null) {
              throw new MissingRequiredPropertyException("GetKubernetesClusterNetworkProfile", "loadBalancerSku");
            }
            this.loadBalancerSku = loadBalancerSku;
            return this;
        }
        @CustomType.Setter
        public Builder networkPlugin(String networkPlugin) {
            if (networkPlugin == null) {
              throw new MissingRequiredPropertyException("GetKubernetesClusterNetworkProfile", "networkPlugin");
            }
            this.networkPlugin = networkPlugin;
            return this;
        }
        @CustomType.Setter
        public Builder networkPolicy(String networkPolicy) {
            if (networkPolicy == null) {
              throw new MissingRequiredPropertyException("GetKubernetesClusterNetworkProfile", "networkPolicy");
            }
            this.networkPolicy = networkPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder podCidr(String podCidr) {
            if (podCidr == null) {
              throw new MissingRequiredPropertyException("GetKubernetesClusterNetworkProfile", "podCidr");
            }
            this.podCidr = podCidr;
            return this;
        }
        @CustomType.Setter
        public Builder serviceCidr(String serviceCidr) {
            if (serviceCidr == null) {
              throw new MissingRequiredPropertyException("GetKubernetesClusterNetworkProfile", "serviceCidr");
            }
            this.serviceCidr = serviceCidr;
            return this;
        }
        public GetKubernetesClusterNetworkProfile build() {
            final var _resultValue = new GetKubernetesClusterNetworkProfile();
            _resultValue.dnsServiceIp = dnsServiceIp;
            _resultValue.dockerBridgeCidr = dockerBridgeCidr;
            _resultValue.loadBalancerSku = loadBalancerSku;
            _resultValue.networkPlugin = networkPlugin;
            _resultValue.networkPolicy = networkPolicy;
            _resultValue.podCidr = podCidr;
            _resultValue.serviceCidr = serviceCidr;
            return _resultValue;
        }
    }
}
