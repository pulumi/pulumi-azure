// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerservice.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetKubernetesClusterNetworkProfile {
    /**
     * @return IP address within the Kubernetes service address range used by cluster service discovery (kube-dns).
     * 
     */
    private final String dnsServiceIp;
    /**
     * @return IP address (in CIDR notation) used as the Docker bridge IP address on nodes.
     * 
     */
    private final String dockerBridgeCidr;
    private final String loadBalancerSku;
    /**
     * @return Network plugin used such as `azure` or `kubenet`.
     * 
     */
    private final String networkPlugin;
    /**
     * @return Network policy to be used with Azure CNI. e.g. `calico` or `azure`
     * 
     */
    private final String networkPolicy;
    /**
     * @return The CIDR used for pod IP addresses.
     * 
     */
    private final String podCidr;
    /**
     * @return Network range used by the Kubernetes service.
     * 
     */
    private final String serviceCidr;

    @CustomType.Constructor
    private GetKubernetesClusterNetworkProfile(
        @CustomType.Parameter("dnsServiceIp") String dnsServiceIp,
        @CustomType.Parameter("dockerBridgeCidr") String dockerBridgeCidr,
        @CustomType.Parameter("loadBalancerSku") String loadBalancerSku,
        @CustomType.Parameter("networkPlugin") String networkPlugin,
        @CustomType.Parameter("networkPolicy") String networkPolicy,
        @CustomType.Parameter("podCidr") String podCidr,
        @CustomType.Parameter("serviceCidr") String serviceCidr) {
        this.dnsServiceIp = dnsServiceIp;
        this.dockerBridgeCidr = dockerBridgeCidr;
        this.loadBalancerSku = loadBalancerSku;
        this.networkPlugin = networkPlugin;
        this.networkPolicy = networkPolicy;
        this.podCidr = podCidr;
        this.serviceCidr = serviceCidr;
    }

    /**
     * @return IP address within the Kubernetes service address range used by cluster service discovery (kube-dns).
     * 
     */
    public String dnsServiceIp() {
        return this.dnsServiceIp;
    }
    /**
     * @return IP address (in CIDR notation) used as the Docker bridge IP address on nodes.
     * 
     */
    public String dockerBridgeCidr() {
        return this.dockerBridgeCidr;
    }
    public String loadBalancerSku() {
        return this.loadBalancerSku;
    }
    /**
     * @return Network plugin used such as `azure` or `kubenet`.
     * 
     */
    public String networkPlugin() {
        return this.networkPlugin;
    }
    /**
     * @return Network policy to be used with Azure CNI. e.g. `calico` or `azure`
     * 
     */
    public String networkPolicy() {
        return this.networkPolicy;
    }
    /**
     * @return The CIDR used for pod IP addresses.
     * 
     */
    public String podCidr() {
        return this.podCidr;
    }
    /**
     * @return Network range used by the Kubernetes service.
     * 
     */
    public String serviceCidr() {
        return this.serviceCidr;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetKubernetesClusterNetworkProfile defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String dnsServiceIp;
        private String dockerBridgeCidr;
        private String loadBalancerSku;
        private String networkPlugin;
        private String networkPolicy;
        private String podCidr;
        private String serviceCidr;

        public Builder() {
    	      // Empty
        }

        public Builder(GetKubernetesClusterNetworkProfile defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dnsServiceIp = defaults.dnsServiceIp;
    	      this.dockerBridgeCidr = defaults.dockerBridgeCidr;
    	      this.loadBalancerSku = defaults.loadBalancerSku;
    	      this.networkPlugin = defaults.networkPlugin;
    	      this.networkPolicy = defaults.networkPolicy;
    	      this.podCidr = defaults.podCidr;
    	      this.serviceCidr = defaults.serviceCidr;
        }

        public Builder dnsServiceIp(String dnsServiceIp) {
            this.dnsServiceIp = Objects.requireNonNull(dnsServiceIp);
            return this;
        }
        public Builder dockerBridgeCidr(String dockerBridgeCidr) {
            this.dockerBridgeCidr = Objects.requireNonNull(dockerBridgeCidr);
            return this;
        }
        public Builder loadBalancerSku(String loadBalancerSku) {
            this.loadBalancerSku = Objects.requireNonNull(loadBalancerSku);
            return this;
        }
        public Builder networkPlugin(String networkPlugin) {
            this.networkPlugin = Objects.requireNonNull(networkPlugin);
            return this;
        }
        public Builder networkPolicy(String networkPolicy) {
            this.networkPolicy = Objects.requireNonNull(networkPolicy);
            return this;
        }
        public Builder podCidr(String podCidr) {
            this.podCidr = Objects.requireNonNull(podCidr);
            return this;
        }
        public Builder serviceCidr(String serviceCidr) {
            this.serviceCidr = Objects.requireNonNull(serviceCidr);
            return this;
        }        public GetKubernetesClusterNetworkProfile build() {
            return new GetKubernetesClusterNetworkProfile(dnsServiceIp, dockerBridgeCidr, loadBalancerSku, networkPlugin, networkPolicy, podCidr, serviceCidr);
        }
    }
}
