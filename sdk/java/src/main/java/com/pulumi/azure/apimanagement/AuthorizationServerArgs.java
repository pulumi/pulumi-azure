// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.apimanagement;

import com.pulumi.azure.apimanagement.inputs.AuthorizationServerTokenBodyParameterArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AuthorizationServerArgs extends com.pulumi.resources.ResourceArgs {

    public static final AuthorizationServerArgs Empty = new AuthorizationServerArgs();

    /**
     * The name of the API Management Service in which this Authorization Server should be created. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="apiManagementName", required=true)
    private Output<String> apiManagementName;

    /**
     * @return The name of the API Management Service in which this Authorization Server should be created. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> apiManagementName() {
        return this.apiManagementName;
    }

    /**
     * The OAUTH Authorization Endpoint.
     * 
     */
    @Import(name="authorizationEndpoint", required=true)
    private Output<String> authorizationEndpoint;

    /**
     * @return The OAUTH Authorization Endpoint.
     * 
     */
    public Output<String> authorizationEndpoint() {
        return this.authorizationEndpoint;
    }

    /**
     * The HTTP Verbs supported by the Authorization Endpoint. Possible values are `DELETE`, `GET`, `HEAD`, `OPTIONS`, `PATCH`, `POST`, `PUT` and `TRACE`.
     * 
     * &gt; **NOTE:** `GET` must always be present.
     * 
     */
    @Import(name="authorizationMethods", required=true)
    private Output<List<String>> authorizationMethods;

    /**
     * @return The HTTP Verbs supported by the Authorization Endpoint. Possible values are `DELETE`, `GET`, `HEAD`, `OPTIONS`, `PATCH`, `POST`, `PUT` and `TRACE`.
     * 
     * &gt; **NOTE:** `GET` must always be present.
     * 
     */
    public Output<List<String>> authorizationMethods() {
        return this.authorizationMethods;
    }

    /**
     * The mechanism by which Access Tokens are passed to the API. Possible values are `authorizationHeader` and `query`.
     * 
     */
    @Import(name="bearerTokenSendingMethods")
    private @Nullable Output<List<String>> bearerTokenSendingMethods;

    /**
     * @return The mechanism by which Access Tokens are passed to the API. Possible values are `authorizationHeader` and `query`.
     * 
     */
    public Optional<Output<List<String>>> bearerTokenSendingMethods() {
        return Optional.ofNullable(this.bearerTokenSendingMethods);
    }

    /**
     * The Authentication Methods supported by the Token endpoint of this Authorization Server.. Possible values are `Basic` and `Body`.
     * 
     */
    @Import(name="clientAuthenticationMethods")
    private @Nullable Output<List<String>> clientAuthenticationMethods;

    /**
     * @return The Authentication Methods supported by the Token endpoint of this Authorization Server.. Possible values are `Basic` and `Body`.
     * 
     */
    public Optional<Output<List<String>>> clientAuthenticationMethods() {
        return Optional.ofNullable(this.clientAuthenticationMethods);
    }

    /**
     * The Client/App ID registered with this Authorization Server.
     * 
     */
    @Import(name="clientId", required=true)
    private Output<String> clientId;

    /**
     * @return The Client/App ID registered with this Authorization Server.
     * 
     */
    public Output<String> clientId() {
        return this.clientId;
    }

    /**
     * The URI of page where Client/App Registration is performed for this Authorization Server.
     * 
     */
    @Import(name="clientRegistrationEndpoint", required=true)
    private Output<String> clientRegistrationEndpoint;

    /**
     * @return The URI of page where Client/App Registration is performed for this Authorization Server.
     * 
     */
    public Output<String> clientRegistrationEndpoint() {
        return this.clientRegistrationEndpoint;
    }

    /**
     * The Client/App Secret registered with this Authorization Server.
     * 
     */
    @Import(name="clientSecret")
    private @Nullable Output<String> clientSecret;

    /**
     * @return The Client/App Secret registered with this Authorization Server.
     * 
     */
    public Optional<Output<String>> clientSecret() {
        return Optional.ofNullable(this.clientSecret);
    }

    /**
     * The Default Scope used when requesting an Access Token, specified as a string containing space-delimited values.
     * 
     */
    @Import(name="defaultScope")
    private @Nullable Output<String> defaultScope;

    /**
     * @return The Default Scope used when requesting an Access Token, specified as a string containing space-delimited values.
     * 
     */
    public Optional<Output<String>> defaultScope() {
        return Optional.ofNullable(this.defaultScope);
    }

    /**
     * A description of the Authorization Server, which may contain HTML formatting tags.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of the Authorization Server, which may contain HTML formatting tags.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The user-friendly name of this Authorization Server.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return The user-friendly name of this Authorization Server.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * Form of Authorization Grants required when requesting an Access Token. Possible values are `authorizationCode`, `clientCredentials`, `implicit` and `resourceOwnerPassword`.
     * 
     */
    @Import(name="grantTypes", required=true)
    private Output<List<String>> grantTypes;

    /**
     * @return Form of Authorization Grants required when requesting an Access Token. Possible values are `authorizationCode`, `clientCredentials`, `implicit` and `resourceOwnerPassword`.
     * 
     */
    public Output<List<String>> grantTypes() {
        return this.grantTypes;
    }

    /**
     * The name of this Authorization Server. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of this Authorization Server. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The password associated with the Resource Owner.
     * 
     * &gt; **NOTE:** This can only be specified when `grant_type` includes `resourceOwnerPassword`.
     * 
     */
    @Import(name="resourceOwnerPassword")
    private @Nullable Output<String> resourceOwnerPassword;

    /**
     * @return The password associated with the Resource Owner.
     * 
     * &gt; **NOTE:** This can only be specified when `grant_type` includes `resourceOwnerPassword`.
     * 
     */
    public Optional<Output<String>> resourceOwnerPassword() {
        return Optional.ofNullable(this.resourceOwnerPassword);
    }

    /**
     * The username associated with the Resource Owner.
     * 
     * &gt; **NOTE:** This can only be specified when `grant_type` includes `resourceOwnerPassword`.
     * 
     */
    @Import(name="resourceOwnerUsername")
    private @Nullable Output<String> resourceOwnerUsername;

    /**
     * @return The username associated with the Resource Owner.
     * 
     * &gt; **NOTE:** This can only be specified when `grant_type` includes `resourceOwnerPassword`.
     * 
     */
    public Optional<Output<String>> resourceOwnerUsername() {
        return Optional.ofNullable(this.resourceOwnerUsername);
    }

    /**
     * Does this Authorization Server support State? If this is set to `true` the client may use the state parameter to raise protocol security.
     * 
     */
    @Import(name="supportState")
    private @Nullable Output<Boolean> supportState;

    /**
     * @return Does this Authorization Server support State? If this is set to `true` the client may use the state parameter to raise protocol security.
     * 
     */
    public Optional<Output<Boolean>> supportState() {
        return Optional.ofNullable(this.supportState);
    }

    /**
     * A `token_body_parameter` block as defined below.
     * 
     */
    @Import(name="tokenBodyParameters")
    private @Nullable Output<List<AuthorizationServerTokenBodyParameterArgs>> tokenBodyParameters;

    /**
     * @return A `token_body_parameter` block as defined below.
     * 
     */
    public Optional<Output<List<AuthorizationServerTokenBodyParameterArgs>>> tokenBodyParameters() {
        return Optional.ofNullable(this.tokenBodyParameters);
    }

    /**
     * The OAUTH Token Endpoint.
     * 
     */
    @Import(name="tokenEndpoint")
    private @Nullable Output<String> tokenEndpoint;

    /**
     * @return The OAUTH Token Endpoint.
     * 
     */
    public Optional<Output<String>> tokenEndpoint() {
        return Optional.ofNullable(this.tokenEndpoint);
    }

    private AuthorizationServerArgs() {}

    private AuthorizationServerArgs(AuthorizationServerArgs $) {
        this.apiManagementName = $.apiManagementName;
        this.authorizationEndpoint = $.authorizationEndpoint;
        this.authorizationMethods = $.authorizationMethods;
        this.bearerTokenSendingMethods = $.bearerTokenSendingMethods;
        this.clientAuthenticationMethods = $.clientAuthenticationMethods;
        this.clientId = $.clientId;
        this.clientRegistrationEndpoint = $.clientRegistrationEndpoint;
        this.clientSecret = $.clientSecret;
        this.defaultScope = $.defaultScope;
        this.description = $.description;
        this.displayName = $.displayName;
        this.grantTypes = $.grantTypes;
        this.name = $.name;
        this.resourceGroupName = $.resourceGroupName;
        this.resourceOwnerPassword = $.resourceOwnerPassword;
        this.resourceOwnerUsername = $.resourceOwnerUsername;
        this.supportState = $.supportState;
        this.tokenBodyParameters = $.tokenBodyParameters;
        this.tokenEndpoint = $.tokenEndpoint;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AuthorizationServerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AuthorizationServerArgs $;

        public Builder() {
            $ = new AuthorizationServerArgs();
        }

        public Builder(AuthorizationServerArgs defaults) {
            $ = new AuthorizationServerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiManagementName The name of the API Management Service in which this Authorization Server should be created. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder apiManagementName(Output<String> apiManagementName) {
            $.apiManagementName = apiManagementName;
            return this;
        }

        /**
         * @param apiManagementName The name of the API Management Service in which this Authorization Server should be created. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder apiManagementName(String apiManagementName) {
            return apiManagementName(Output.of(apiManagementName));
        }

        /**
         * @param authorizationEndpoint The OAUTH Authorization Endpoint.
         * 
         * @return builder
         * 
         */
        public Builder authorizationEndpoint(Output<String> authorizationEndpoint) {
            $.authorizationEndpoint = authorizationEndpoint;
            return this;
        }

        /**
         * @param authorizationEndpoint The OAUTH Authorization Endpoint.
         * 
         * @return builder
         * 
         */
        public Builder authorizationEndpoint(String authorizationEndpoint) {
            return authorizationEndpoint(Output.of(authorizationEndpoint));
        }

        /**
         * @param authorizationMethods The HTTP Verbs supported by the Authorization Endpoint. Possible values are `DELETE`, `GET`, `HEAD`, `OPTIONS`, `PATCH`, `POST`, `PUT` and `TRACE`.
         * 
         * &gt; **NOTE:** `GET` must always be present.
         * 
         * @return builder
         * 
         */
        public Builder authorizationMethods(Output<List<String>> authorizationMethods) {
            $.authorizationMethods = authorizationMethods;
            return this;
        }

        /**
         * @param authorizationMethods The HTTP Verbs supported by the Authorization Endpoint. Possible values are `DELETE`, `GET`, `HEAD`, `OPTIONS`, `PATCH`, `POST`, `PUT` and `TRACE`.
         * 
         * &gt; **NOTE:** `GET` must always be present.
         * 
         * @return builder
         * 
         */
        public Builder authorizationMethods(List<String> authorizationMethods) {
            return authorizationMethods(Output.of(authorizationMethods));
        }

        /**
         * @param authorizationMethods The HTTP Verbs supported by the Authorization Endpoint. Possible values are `DELETE`, `GET`, `HEAD`, `OPTIONS`, `PATCH`, `POST`, `PUT` and `TRACE`.
         * 
         * &gt; **NOTE:** `GET` must always be present.
         * 
         * @return builder
         * 
         */
        public Builder authorizationMethods(String... authorizationMethods) {
            return authorizationMethods(List.of(authorizationMethods));
        }

        /**
         * @param bearerTokenSendingMethods The mechanism by which Access Tokens are passed to the API. Possible values are `authorizationHeader` and `query`.
         * 
         * @return builder
         * 
         */
        public Builder bearerTokenSendingMethods(@Nullable Output<List<String>> bearerTokenSendingMethods) {
            $.bearerTokenSendingMethods = bearerTokenSendingMethods;
            return this;
        }

        /**
         * @param bearerTokenSendingMethods The mechanism by which Access Tokens are passed to the API. Possible values are `authorizationHeader` and `query`.
         * 
         * @return builder
         * 
         */
        public Builder bearerTokenSendingMethods(List<String> bearerTokenSendingMethods) {
            return bearerTokenSendingMethods(Output.of(bearerTokenSendingMethods));
        }

        /**
         * @param bearerTokenSendingMethods The mechanism by which Access Tokens are passed to the API. Possible values are `authorizationHeader` and `query`.
         * 
         * @return builder
         * 
         */
        public Builder bearerTokenSendingMethods(String... bearerTokenSendingMethods) {
            return bearerTokenSendingMethods(List.of(bearerTokenSendingMethods));
        }

        /**
         * @param clientAuthenticationMethods The Authentication Methods supported by the Token endpoint of this Authorization Server.. Possible values are `Basic` and `Body`.
         * 
         * @return builder
         * 
         */
        public Builder clientAuthenticationMethods(@Nullable Output<List<String>> clientAuthenticationMethods) {
            $.clientAuthenticationMethods = clientAuthenticationMethods;
            return this;
        }

        /**
         * @param clientAuthenticationMethods The Authentication Methods supported by the Token endpoint of this Authorization Server.. Possible values are `Basic` and `Body`.
         * 
         * @return builder
         * 
         */
        public Builder clientAuthenticationMethods(List<String> clientAuthenticationMethods) {
            return clientAuthenticationMethods(Output.of(clientAuthenticationMethods));
        }

        /**
         * @param clientAuthenticationMethods The Authentication Methods supported by the Token endpoint of this Authorization Server.. Possible values are `Basic` and `Body`.
         * 
         * @return builder
         * 
         */
        public Builder clientAuthenticationMethods(String... clientAuthenticationMethods) {
            return clientAuthenticationMethods(List.of(clientAuthenticationMethods));
        }

        /**
         * @param clientId The Client/App ID registered with this Authorization Server.
         * 
         * @return builder
         * 
         */
        public Builder clientId(Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId The Client/App ID registered with this Authorization Server.
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param clientRegistrationEndpoint The URI of page where Client/App Registration is performed for this Authorization Server.
         * 
         * @return builder
         * 
         */
        public Builder clientRegistrationEndpoint(Output<String> clientRegistrationEndpoint) {
            $.clientRegistrationEndpoint = clientRegistrationEndpoint;
            return this;
        }

        /**
         * @param clientRegistrationEndpoint The URI of page where Client/App Registration is performed for this Authorization Server.
         * 
         * @return builder
         * 
         */
        public Builder clientRegistrationEndpoint(String clientRegistrationEndpoint) {
            return clientRegistrationEndpoint(Output.of(clientRegistrationEndpoint));
        }

        /**
         * @param clientSecret The Client/App Secret registered with this Authorization Server.
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(@Nullable Output<String> clientSecret) {
            $.clientSecret = clientSecret;
            return this;
        }

        /**
         * @param clientSecret The Client/App Secret registered with this Authorization Server.
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(String clientSecret) {
            return clientSecret(Output.of(clientSecret));
        }

        /**
         * @param defaultScope The Default Scope used when requesting an Access Token, specified as a string containing space-delimited values.
         * 
         * @return builder
         * 
         */
        public Builder defaultScope(@Nullable Output<String> defaultScope) {
            $.defaultScope = defaultScope;
            return this;
        }

        /**
         * @param defaultScope The Default Scope used when requesting an Access Token, specified as a string containing space-delimited values.
         * 
         * @return builder
         * 
         */
        public Builder defaultScope(String defaultScope) {
            return defaultScope(Output.of(defaultScope));
        }

        /**
         * @param description A description of the Authorization Server, which may contain HTML formatting tags.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of the Authorization Server, which may contain HTML formatting tags.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName The user-friendly name of this Authorization Server.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The user-friendly name of this Authorization Server.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param grantTypes Form of Authorization Grants required when requesting an Access Token. Possible values are `authorizationCode`, `clientCredentials`, `implicit` and `resourceOwnerPassword`.
         * 
         * @return builder
         * 
         */
        public Builder grantTypes(Output<List<String>> grantTypes) {
            $.grantTypes = grantTypes;
            return this;
        }

        /**
         * @param grantTypes Form of Authorization Grants required when requesting an Access Token. Possible values are `authorizationCode`, `clientCredentials`, `implicit` and `resourceOwnerPassword`.
         * 
         * @return builder
         * 
         */
        public Builder grantTypes(List<String> grantTypes) {
            return grantTypes(Output.of(grantTypes));
        }

        /**
         * @param grantTypes Form of Authorization Grants required when requesting an Access Token. Possible values are `authorizationCode`, `clientCredentials`, `implicit` and `resourceOwnerPassword`.
         * 
         * @return builder
         * 
         */
        public Builder grantTypes(String... grantTypes) {
            return grantTypes(List.of(grantTypes));
        }

        /**
         * @param name The name of this Authorization Server. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of this Authorization Server. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param resourceGroupName The name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param resourceOwnerPassword The password associated with the Resource Owner.
         * 
         * &gt; **NOTE:** This can only be specified when `grant_type` includes `resourceOwnerPassword`.
         * 
         * @return builder
         * 
         */
        public Builder resourceOwnerPassword(@Nullable Output<String> resourceOwnerPassword) {
            $.resourceOwnerPassword = resourceOwnerPassword;
            return this;
        }

        /**
         * @param resourceOwnerPassword The password associated with the Resource Owner.
         * 
         * &gt; **NOTE:** This can only be specified when `grant_type` includes `resourceOwnerPassword`.
         * 
         * @return builder
         * 
         */
        public Builder resourceOwnerPassword(String resourceOwnerPassword) {
            return resourceOwnerPassword(Output.of(resourceOwnerPassword));
        }

        /**
         * @param resourceOwnerUsername The username associated with the Resource Owner.
         * 
         * &gt; **NOTE:** This can only be specified when `grant_type` includes `resourceOwnerPassword`.
         * 
         * @return builder
         * 
         */
        public Builder resourceOwnerUsername(@Nullable Output<String> resourceOwnerUsername) {
            $.resourceOwnerUsername = resourceOwnerUsername;
            return this;
        }

        /**
         * @param resourceOwnerUsername The username associated with the Resource Owner.
         * 
         * &gt; **NOTE:** This can only be specified when `grant_type` includes `resourceOwnerPassword`.
         * 
         * @return builder
         * 
         */
        public Builder resourceOwnerUsername(String resourceOwnerUsername) {
            return resourceOwnerUsername(Output.of(resourceOwnerUsername));
        }

        /**
         * @param supportState Does this Authorization Server support State? If this is set to `true` the client may use the state parameter to raise protocol security.
         * 
         * @return builder
         * 
         */
        public Builder supportState(@Nullable Output<Boolean> supportState) {
            $.supportState = supportState;
            return this;
        }

        /**
         * @param supportState Does this Authorization Server support State? If this is set to `true` the client may use the state parameter to raise protocol security.
         * 
         * @return builder
         * 
         */
        public Builder supportState(Boolean supportState) {
            return supportState(Output.of(supportState));
        }

        /**
         * @param tokenBodyParameters A `token_body_parameter` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder tokenBodyParameters(@Nullable Output<List<AuthorizationServerTokenBodyParameterArgs>> tokenBodyParameters) {
            $.tokenBodyParameters = tokenBodyParameters;
            return this;
        }

        /**
         * @param tokenBodyParameters A `token_body_parameter` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder tokenBodyParameters(List<AuthorizationServerTokenBodyParameterArgs> tokenBodyParameters) {
            return tokenBodyParameters(Output.of(tokenBodyParameters));
        }

        /**
         * @param tokenBodyParameters A `token_body_parameter` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder tokenBodyParameters(AuthorizationServerTokenBodyParameterArgs... tokenBodyParameters) {
            return tokenBodyParameters(List.of(tokenBodyParameters));
        }

        /**
         * @param tokenEndpoint The OAUTH Token Endpoint.
         * 
         * @return builder
         * 
         */
        public Builder tokenEndpoint(@Nullable Output<String> tokenEndpoint) {
            $.tokenEndpoint = tokenEndpoint;
            return this;
        }

        /**
         * @param tokenEndpoint The OAUTH Token Endpoint.
         * 
         * @return builder
         * 
         */
        public Builder tokenEndpoint(String tokenEndpoint) {
            return tokenEndpoint(Output.of(tokenEndpoint));
        }

        public AuthorizationServerArgs build() {
            if ($.apiManagementName == null) {
                throw new MissingRequiredPropertyException("AuthorizationServerArgs", "apiManagementName");
            }
            if ($.authorizationEndpoint == null) {
                throw new MissingRequiredPropertyException("AuthorizationServerArgs", "authorizationEndpoint");
            }
            if ($.authorizationMethods == null) {
                throw new MissingRequiredPropertyException("AuthorizationServerArgs", "authorizationMethods");
            }
            if ($.clientId == null) {
                throw new MissingRequiredPropertyException("AuthorizationServerArgs", "clientId");
            }
            if ($.clientRegistrationEndpoint == null) {
                throw new MissingRequiredPropertyException("AuthorizationServerArgs", "clientRegistrationEndpoint");
            }
            if ($.displayName == null) {
                throw new MissingRequiredPropertyException("AuthorizationServerArgs", "displayName");
            }
            if ($.grantTypes == null) {
                throw new MissingRequiredPropertyException("AuthorizationServerArgs", "grantTypes");
            }
            if ($.resourceGroupName == null) {
                throw new MissingRequiredPropertyException("AuthorizationServerArgs", "resourceGroupName");
            }
            return $;
        }
    }

}
