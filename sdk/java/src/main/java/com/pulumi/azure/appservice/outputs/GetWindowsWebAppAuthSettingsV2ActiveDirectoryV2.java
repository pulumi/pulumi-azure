// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appservice.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetWindowsWebAppAuthSettingsV2ActiveDirectoryV2 {
    /**
     * @return The list of allowed Applications for the Default Authorisation Policy.
     * 
     */
    private List<String> allowedApplications;
    /**
     * @return The list of Allowed Audiences that are be requested as part of Microsoft Sign-In authentication.
     * 
     */
    private List<String> allowedAudiences;
    /**
     * @return The list of allowed Group Names for the Default Authorisation Policy.
     * 
     */
    private List<String> allowedGroups;
    /**
     * @return The list of allowed Identities for the Default Authorisation Policy.
     * 
     */
    private List<String> allowedIdentities;
    /**
     * @return The OAuth 2.0 client ID used by the app for authentication.
     * 
     */
    private String clientId;
    /**
     * @return The thumbprint of the certificate used for signing purposes.
     * 
     */
    private String clientSecretCertificateThumbprint;
    /**
     * @return The app setting name containing the OAuth 2.0 client secret used by the app for authentication.
     * 
     */
    private String clientSecretSettingName;
    /**
     * @return The list of Allowed Client Applications in the JWT Claim.
     * 
     */
    private List<String> jwtAllowedClientApplications;
    /**
     * @return The list of Allowed Groups in the JWT Claim.
     * 
     */
    private List<String> jwtAllowedGroups;
    /**
     * @return A map of key-value pairs sent to the Authorisation Endpoint when a user logs in.
     * 
     */
    private Map<String,String> loginParameters;
    /**
     * @return The Azure Tenant Endpoint for the Authenticating Tenant. e.g. `https://login.microsoftonline.com/v2.0/{tenant-guid}/`
     * 
     */
    private String tenantAuthEndpoint;
    /**
     * @return Is the www-authenticate provider omitted from the request?
     * 
     */
    private Boolean wwwAuthenticationDisabled;

    private GetWindowsWebAppAuthSettingsV2ActiveDirectoryV2() {}
    /**
     * @return The list of allowed Applications for the Default Authorisation Policy.
     * 
     */
    public List<String> allowedApplications() {
        return this.allowedApplications;
    }
    /**
     * @return The list of Allowed Audiences that are be requested as part of Microsoft Sign-In authentication.
     * 
     */
    public List<String> allowedAudiences() {
        return this.allowedAudiences;
    }
    /**
     * @return The list of allowed Group Names for the Default Authorisation Policy.
     * 
     */
    public List<String> allowedGroups() {
        return this.allowedGroups;
    }
    /**
     * @return The list of allowed Identities for the Default Authorisation Policy.
     * 
     */
    public List<String> allowedIdentities() {
        return this.allowedIdentities;
    }
    /**
     * @return The OAuth 2.0 client ID used by the app for authentication.
     * 
     */
    public String clientId() {
        return this.clientId;
    }
    /**
     * @return The thumbprint of the certificate used for signing purposes.
     * 
     */
    public String clientSecretCertificateThumbprint() {
        return this.clientSecretCertificateThumbprint;
    }
    /**
     * @return The app setting name containing the OAuth 2.0 client secret used by the app for authentication.
     * 
     */
    public String clientSecretSettingName() {
        return this.clientSecretSettingName;
    }
    /**
     * @return The list of Allowed Client Applications in the JWT Claim.
     * 
     */
    public List<String> jwtAllowedClientApplications() {
        return this.jwtAllowedClientApplications;
    }
    /**
     * @return The list of Allowed Groups in the JWT Claim.
     * 
     */
    public List<String> jwtAllowedGroups() {
        return this.jwtAllowedGroups;
    }
    /**
     * @return A map of key-value pairs sent to the Authorisation Endpoint when a user logs in.
     * 
     */
    public Map<String,String> loginParameters() {
        return this.loginParameters;
    }
    /**
     * @return The Azure Tenant Endpoint for the Authenticating Tenant. e.g. `https://login.microsoftonline.com/v2.0/{tenant-guid}/`
     * 
     */
    public String tenantAuthEndpoint() {
        return this.tenantAuthEndpoint;
    }
    /**
     * @return Is the www-authenticate provider omitted from the request?
     * 
     */
    public Boolean wwwAuthenticationDisabled() {
        return this.wwwAuthenticationDisabled;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWindowsWebAppAuthSettingsV2ActiveDirectoryV2 defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> allowedApplications;
        private List<String> allowedAudiences;
        private List<String> allowedGroups;
        private List<String> allowedIdentities;
        private String clientId;
        private String clientSecretCertificateThumbprint;
        private String clientSecretSettingName;
        private List<String> jwtAllowedClientApplications;
        private List<String> jwtAllowedGroups;
        private Map<String,String> loginParameters;
        private String tenantAuthEndpoint;
        private Boolean wwwAuthenticationDisabled;
        public Builder() {}
        public Builder(GetWindowsWebAppAuthSettingsV2ActiveDirectoryV2 defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedApplications = defaults.allowedApplications;
    	      this.allowedAudiences = defaults.allowedAudiences;
    	      this.allowedGroups = defaults.allowedGroups;
    	      this.allowedIdentities = defaults.allowedIdentities;
    	      this.clientId = defaults.clientId;
    	      this.clientSecretCertificateThumbprint = defaults.clientSecretCertificateThumbprint;
    	      this.clientSecretSettingName = defaults.clientSecretSettingName;
    	      this.jwtAllowedClientApplications = defaults.jwtAllowedClientApplications;
    	      this.jwtAllowedGroups = defaults.jwtAllowedGroups;
    	      this.loginParameters = defaults.loginParameters;
    	      this.tenantAuthEndpoint = defaults.tenantAuthEndpoint;
    	      this.wwwAuthenticationDisabled = defaults.wwwAuthenticationDisabled;
        }

        @CustomType.Setter
        public Builder allowedApplications(List<String> allowedApplications) {
            if (allowedApplications == null) {
              throw new MissingRequiredPropertyException("GetWindowsWebAppAuthSettingsV2ActiveDirectoryV2", "allowedApplications");
            }
            this.allowedApplications = allowedApplications;
            return this;
        }
        public Builder allowedApplications(String... allowedApplications) {
            return allowedApplications(List.of(allowedApplications));
        }
        @CustomType.Setter
        public Builder allowedAudiences(List<String> allowedAudiences) {
            if (allowedAudiences == null) {
              throw new MissingRequiredPropertyException("GetWindowsWebAppAuthSettingsV2ActiveDirectoryV2", "allowedAudiences");
            }
            this.allowedAudiences = allowedAudiences;
            return this;
        }
        public Builder allowedAudiences(String... allowedAudiences) {
            return allowedAudiences(List.of(allowedAudiences));
        }
        @CustomType.Setter
        public Builder allowedGroups(List<String> allowedGroups) {
            if (allowedGroups == null) {
              throw new MissingRequiredPropertyException("GetWindowsWebAppAuthSettingsV2ActiveDirectoryV2", "allowedGroups");
            }
            this.allowedGroups = allowedGroups;
            return this;
        }
        public Builder allowedGroups(String... allowedGroups) {
            return allowedGroups(List.of(allowedGroups));
        }
        @CustomType.Setter
        public Builder allowedIdentities(List<String> allowedIdentities) {
            if (allowedIdentities == null) {
              throw new MissingRequiredPropertyException("GetWindowsWebAppAuthSettingsV2ActiveDirectoryV2", "allowedIdentities");
            }
            this.allowedIdentities = allowedIdentities;
            return this;
        }
        public Builder allowedIdentities(String... allowedIdentities) {
            return allowedIdentities(List.of(allowedIdentities));
        }
        @CustomType.Setter
        public Builder clientId(String clientId) {
            if (clientId == null) {
              throw new MissingRequiredPropertyException("GetWindowsWebAppAuthSettingsV2ActiveDirectoryV2", "clientId");
            }
            this.clientId = clientId;
            return this;
        }
        @CustomType.Setter
        public Builder clientSecretCertificateThumbprint(String clientSecretCertificateThumbprint) {
            if (clientSecretCertificateThumbprint == null) {
              throw new MissingRequiredPropertyException("GetWindowsWebAppAuthSettingsV2ActiveDirectoryV2", "clientSecretCertificateThumbprint");
            }
            this.clientSecretCertificateThumbprint = clientSecretCertificateThumbprint;
            return this;
        }
        @CustomType.Setter
        public Builder clientSecretSettingName(String clientSecretSettingName) {
            if (clientSecretSettingName == null) {
              throw new MissingRequiredPropertyException("GetWindowsWebAppAuthSettingsV2ActiveDirectoryV2", "clientSecretSettingName");
            }
            this.clientSecretSettingName = clientSecretSettingName;
            return this;
        }
        @CustomType.Setter
        public Builder jwtAllowedClientApplications(List<String> jwtAllowedClientApplications) {
            if (jwtAllowedClientApplications == null) {
              throw new MissingRequiredPropertyException("GetWindowsWebAppAuthSettingsV2ActiveDirectoryV2", "jwtAllowedClientApplications");
            }
            this.jwtAllowedClientApplications = jwtAllowedClientApplications;
            return this;
        }
        public Builder jwtAllowedClientApplications(String... jwtAllowedClientApplications) {
            return jwtAllowedClientApplications(List.of(jwtAllowedClientApplications));
        }
        @CustomType.Setter
        public Builder jwtAllowedGroups(List<String> jwtAllowedGroups) {
            if (jwtAllowedGroups == null) {
              throw new MissingRequiredPropertyException("GetWindowsWebAppAuthSettingsV2ActiveDirectoryV2", "jwtAllowedGroups");
            }
            this.jwtAllowedGroups = jwtAllowedGroups;
            return this;
        }
        public Builder jwtAllowedGroups(String... jwtAllowedGroups) {
            return jwtAllowedGroups(List.of(jwtAllowedGroups));
        }
        @CustomType.Setter
        public Builder loginParameters(Map<String,String> loginParameters) {
            if (loginParameters == null) {
              throw new MissingRequiredPropertyException("GetWindowsWebAppAuthSettingsV2ActiveDirectoryV2", "loginParameters");
            }
            this.loginParameters = loginParameters;
            return this;
        }
        @CustomType.Setter
        public Builder tenantAuthEndpoint(String tenantAuthEndpoint) {
            if (tenantAuthEndpoint == null) {
              throw new MissingRequiredPropertyException("GetWindowsWebAppAuthSettingsV2ActiveDirectoryV2", "tenantAuthEndpoint");
            }
            this.tenantAuthEndpoint = tenantAuthEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder wwwAuthenticationDisabled(Boolean wwwAuthenticationDisabled) {
            if (wwwAuthenticationDisabled == null) {
              throw new MissingRequiredPropertyException("GetWindowsWebAppAuthSettingsV2ActiveDirectoryV2", "wwwAuthenticationDisabled");
            }
            this.wwwAuthenticationDisabled = wwwAuthenticationDisabled;
            return this;
        }
        public GetWindowsWebAppAuthSettingsV2ActiveDirectoryV2 build() {
            final var _resultValue = new GetWindowsWebAppAuthSettingsV2ActiveDirectoryV2();
            _resultValue.allowedApplications = allowedApplications;
            _resultValue.allowedAudiences = allowedAudiences;
            _resultValue.allowedGroups = allowedGroups;
            _resultValue.allowedIdentities = allowedIdentities;
            _resultValue.clientId = clientId;
            _resultValue.clientSecretCertificateThumbprint = clientSecretCertificateThumbprint;
            _resultValue.clientSecretSettingName = clientSecretSettingName;
            _resultValue.jwtAllowedClientApplications = jwtAllowedClientApplications;
            _resultValue.jwtAllowedGroups = jwtAllowedGroups;
            _resultValue.loginParameters = loginParameters;
            _resultValue.tenantAuthEndpoint = tenantAuthEndpoint;
            _resultValue.wwwAuthenticationDisabled = wwwAuthenticationDisabled;
            return _resultValue;
        }
    }
}
