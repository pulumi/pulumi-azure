// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.dataprotection.outputs;

import com.pulumi.azure.dataprotection.outputs.GetBackupVaultIdentity;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetBackupVaultResult {
    /**
     * @return Specifies the type of the data store.
     * 
     */
    private String datastoreType;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return A `identity` block as defined below.
     * 
     */
    private List<GetBackupVaultIdentity> identities;
    /**
     * @return The Azure Region where the Backup Vault exists.
     * 
     */
    private String location;
    private String name;
    /**
     * @return Specifies the backup storage redundancy.
     * 
     */
    private String redundancy;
    private String resourceGroupName;
    /**
     * @return A mapping of tags which are assigned to the Backup Vault.
     * 
     */
    private Map<String,String> tags;

    private GetBackupVaultResult() {}
    /**
     * @return Specifies the type of the data store.
     * 
     */
    public String datastoreType() {
        return this.datastoreType;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A `identity` block as defined below.
     * 
     */
    public List<GetBackupVaultIdentity> identities() {
        return this.identities;
    }
    /**
     * @return The Azure Region where the Backup Vault exists.
     * 
     */
    public String location() {
        return this.location;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return Specifies the backup storage redundancy.
     * 
     */
    public String redundancy() {
        return this.redundancy;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return A mapping of tags which are assigned to the Backup Vault.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBackupVaultResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String datastoreType;
        private String id;
        private List<GetBackupVaultIdentity> identities;
        private String location;
        private String name;
        private String redundancy;
        private String resourceGroupName;
        private Map<String,String> tags;
        public Builder() {}
        public Builder(GetBackupVaultResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.datastoreType = defaults.datastoreType;
    	      this.id = defaults.id;
    	      this.identities = defaults.identities;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.redundancy = defaults.redundancy;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder datastoreType(String datastoreType) {
            if (datastoreType == null) {
              throw new MissingRequiredPropertyException("GetBackupVaultResult", "datastoreType");
            }
            this.datastoreType = datastoreType;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetBackupVaultResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder identities(List<GetBackupVaultIdentity> identities) {
            if (identities == null) {
              throw new MissingRequiredPropertyException("GetBackupVaultResult", "identities");
            }
            this.identities = identities;
            return this;
        }
        public Builder identities(GetBackupVaultIdentity... identities) {
            return identities(List.of(identities));
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetBackupVaultResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetBackupVaultResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder redundancy(String redundancy) {
            if (redundancy == null) {
              throw new MissingRequiredPropertyException("GetBackupVaultResult", "redundancy");
            }
            this.redundancy = redundancy;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            if (resourceGroupName == null) {
              throw new MissingRequiredPropertyException("GetBackupVaultResult", "resourceGroupName");
            }
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetBackupVaultResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public GetBackupVaultResult build() {
            final var _resultValue = new GetBackupVaultResult();
            _resultValue.datastoreType = datastoreType;
            _resultValue.id = id;
            _resultValue.identities = identities;
            _resultValue.location = location;
            _resultValue.name = name;
            _resultValue.redundancy = redundancy;
            _resultValue.resourceGroupName = resourceGroupName;
            _resultValue.tags = tags;
            return _resultValue;
        }
    }
}
