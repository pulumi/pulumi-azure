// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.automation.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RunBookDraftParameterArgs extends com.pulumi.resources.ResourceArgs {

    public static final RunBookDraftParameterArgs Empty = new RunBookDraftParameterArgs();

    /**
     * Specifies the default value of the parameter.
     * 
     */
    @Import(name="defaultValue")
    private @Nullable Output<String> defaultValue;

    /**
     * @return Specifies the default value of the parameter.
     * 
     */
    public Optional<Output<String>> defaultValue() {
        return Optional.ofNullable(this.defaultValue);
    }

    /**
     * The name of the parameter.
     * 
     */
    @Import(name="key", required=true)
    private Output<String> key;

    /**
     * @return The name of the parameter.
     * 
     */
    public Output<String> key() {
        return this.key;
    }

    /**
     * Whether this parameter is mandatory.
     * 
     */
    @Import(name="mandatory")
    private @Nullable Output<Boolean> mandatory;

    /**
     * @return Whether this parameter is mandatory.
     * 
     */
    public Optional<Output<Boolean>> mandatory() {
        return Optional.ofNullable(this.mandatory);
    }

    /**
     * Specifies the position of the parameter.
     * 
     */
    @Import(name="position")
    private @Nullable Output<Integer> position;

    /**
     * @return Specifies the position of the parameter.
     * 
     */
    public Optional<Output<Integer>> position() {
        return Optional.ofNullable(this.position);
    }

    /**
     * Specifies the type of this parameter.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Specifies the type of this parameter.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private RunBookDraftParameterArgs() {}

    private RunBookDraftParameterArgs(RunBookDraftParameterArgs $) {
        this.defaultValue = $.defaultValue;
        this.key = $.key;
        this.mandatory = $.mandatory;
        this.position = $.position;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RunBookDraftParameterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RunBookDraftParameterArgs $;

        public Builder() {
            $ = new RunBookDraftParameterArgs();
        }

        public Builder(RunBookDraftParameterArgs defaults) {
            $ = new RunBookDraftParameterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param defaultValue Specifies the default value of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder defaultValue(@Nullable Output<String> defaultValue) {
            $.defaultValue = defaultValue;
            return this;
        }

        /**
         * @param defaultValue Specifies the default value of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder defaultValue(String defaultValue) {
            return defaultValue(Output.of(defaultValue));
        }

        /**
         * @param key The name of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder key(Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key The name of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param mandatory Whether this parameter is mandatory.
         * 
         * @return builder
         * 
         */
        public Builder mandatory(@Nullable Output<Boolean> mandatory) {
            $.mandatory = mandatory;
            return this;
        }

        /**
         * @param mandatory Whether this parameter is mandatory.
         * 
         * @return builder
         * 
         */
        public Builder mandatory(Boolean mandatory) {
            return mandatory(Output.of(mandatory));
        }

        /**
         * @param position Specifies the position of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder position(@Nullable Output<Integer> position) {
            $.position = position;
            return this;
        }

        /**
         * @param position Specifies the position of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder position(Integer position) {
            return position(Output.of(position));
        }

        /**
         * @param type Specifies the type of this parameter.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Specifies the type of this parameter.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public RunBookDraftParameterArgs build() {
            if ($.key == null) {
                throw new MissingRequiredPropertyException("RunBookDraftParameterArgs", "key");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("RunBookDraftParameterArgs", "type");
            }
            return $;
        }
    }

}
