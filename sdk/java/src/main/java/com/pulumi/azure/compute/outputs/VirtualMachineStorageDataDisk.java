// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class VirtualMachineStorageDataDisk {
    /**
     * @return Specifies the caching requirements for the Data Disk. Possible values include `None`, `ReadOnly` and `ReadWrite`.
     * 
     */
    private @Nullable String caching;
    /**
     * @return Specifies how the data disk should be created. Possible values are `Attach`, `FromImage` and `Empty`.
     * 
     * &gt; **NOTE:** If using an image that does not have data to be written to the Data Disk, use `Empty` as the create option in order to create the desired disk without any data.
     * 
     */
    private String createOption;
    /**
     * @return Specifies the size of the data disk in gigabytes.
     * 
     */
    private @Nullable Integer diskSizeGb;
    /**
     * @return Specifies the logical unit number of the data disk. This needs to be unique within all the Data Disks on the Virtual Machine.
     * 
     */
    private Integer lun;
    /**
     * @return Specifies the ID of an Existing Managed Disk which should be attached to this Virtual Machine. When this field is set `create_option` must be set to `Attach`.
     * 
     * The following properties apply when using Unmanaged Disks:
     * 
     */
    private @Nullable String managedDiskId;
    /**
     * @return Specifies the type of managed disk to create. Possible values are either `Standard_LRS`, `StandardSSD_LRS`, `Premium_LRS` or `UltraSSD_LRS`.
     * 
     * &gt; **Note:** `managed_disk_type` of type `UltraSSD_LRS` is currently in preview and are not available to subscriptions that have not [requested](https://aka.ms/UltraSSDPreviewSignUp) onboarding to `Azure Ultra Disk Storage` preview. `Azure Ultra Disk Storage` is only available in `East US 2`, `North Europe`, and `Southeast Asia` regions. For more information see the `Azure Ultra Disk Storage` [product documentation](https://docs.microsoft.com/azure/virtual-machines/windows/disks-enable-ultra-ssd), [product blog](https://azure.microsoft.com/en-us/blog/announcing-the-general-availability-of-azure-ultra-disk-storage/) and [FAQ](https://docs.microsoft.com/azure/virtual-machines/windows/faq-for-disks#ultra-disks). You must also set `additional_capabilities.ultra_ssd_enabled` to `true`.
     * 
     */
    private @Nullable String managedDiskType;
    /**
     * @return The name of the Data Disk.
     * 
     */
    private String name;
    /**
     * @return Specifies the URI of the VHD file backing this Unmanaged Data Disk.
     * 
     */
    private @Nullable String vhdUri;
    /**
     * @return Specifies if Write Accelerator is enabled on the disk. This can only be enabled on `Premium_LRS` managed disks with no caching and [M-Series VMs](https://docs.microsoft.com/azure/virtual-machines/workloads/sap/how-to-enable-write-accelerator). Defaults to `false`.
     * 
     * The following properties apply when using Managed Disks:
     * 
     */
    private @Nullable Boolean writeAcceleratorEnabled;

    private VirtualMachineStorageDataDisk() {}
    /**
     * @return Specifies the caching requirements for the Data Disk. Possible values include `None`, `ReadOnly` and `ReadWrite`.
     * 
     */
    public Optional<String> caching() {
        return Optional.ofNullable(this.caching);
    }
    /**
     * @return Specifies how the data disk should be created. Possible values are `Attach`, `FromImage` and `Empty`.
     * 
     * &gt; **NOTE:** If using an image that does not have data to be written to the Data Disk, use `Empty` as the create option in order to create the desired disk without any data.
     * 
     */
    public String createOption() {
        return this.createOption;
    }
    /**
     * @return Specifies the size of the data disk in gigabytes.
     * 
     */
    public Optional<Integer> diskSizeGb() {
        return Optional.ofNullable(this.diskSizeGb);
    }
    /**
     * @return Specifies the logical unit number of the data disk. This needs to be unique within all the Data Disks on the Virtual Machine.
     * 
     */
    public Integer lun() {
        return this.lun;
    }
    /**
     * @return Specifies the ID of an Existing Managed Disk which should be attached to this Virtual Machine. When this field is set `create_option` must be set to `Attach`.
     * 
     * The following properties apply when using Unmanaged Disks:
     * 
     */
    public Optional<String> managedDiskId() {
        return Optional.ofNullable(this.managedDiskId);
    }
    /**
     * @return Specifies the type of managed disk to create. Possible values are either `Standard_LRS`, `StandardSSD_LRS`, `Premium_LRS` or `UltraSSD_LRS`.
     * 
     * &gt; **Note:** `managed_disk_type` of type `UltraSSD_LRS` is currently in preview and are not available to subscriptions that have not [requested](https://aka.ms/UltraSSDPreviewSignUp) onboarding to `Azure Ultra Disk Storage` preview. `Azure Ultra Disk Storage` is only available in `East US 2`, `North Europe`, and `Southeast Asia` regions. For more information see the `Azure Ultra Disk Storage` [product documentation](https://docs.microsoft.com/azure/virtual-machines/windows/disks-enable-ultra-ssd), [product blog](https://azure.microsoft.com/en-us/blog/announcing-the-general-availability-of-azure-ultra-disk-storage/) and [FAQ](https://docs.microsoft.com/azure/virtual-machines/windows/faq-for-disks#ultra-disks). You must also set `additional_capabilities.ultra_ssd_enabled` to `true`.
     * 
     */
    public Optional<String> managedDiskType() {
        return Optional.ofNullable(this.managedDiskType);
    }
    /**
     * @return The name of the Data Disk.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Specifies the URI of the VHD file backing this Unmanaged Data Disk.
     * 
     */
    public Optional<String> vhdUri() {
        return Optional.ofNullable(this.vhdUri);
    }
    /**
     * @return Specifies if Write Accelerator is enabled on the disk. This can only be enabled on `Premium_LRS` managed disks with no caching and [M-Series VMs](https://docs.microsoft.com/azure/virtual-machines/workloads/sap/how-to-enable-write-accelerator). Defaults to `false`.
     * 
     * The following properties apply when using Managed Disks:
     * 
     */
    public Optional<Boolean> writeAcceleratorEnabled() {
        return Optional.ofNullable(this.writeAcceleratorEnabled);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VirtualMachineStorageDataDisk defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String caching;
        private String createOption;
        private @Nullable Integer diskSizeGb;
        private Integer lun;
        private @Nullable String managedDiskId;
        private @Nullable String managedDiskType;
        private String name;
        private @Nullable String vhdUri;
        private @Nullable Boolean writeAcceleratorEnabled;
        public Builder() {}
        public Builder(VirtualMachineStorageDataDisk defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.caching = defaults.caching;
    	      this.createOption = defaults.createOption;
    	      this.diskSizeGb = defaults.diskSizeGb;
    	      this.lun = defaults.lun;
    	      this.managedDiskId = defaults.managedDiskId;
    	      this.managedDiskType = defaults.managedDiskType;
    	      this.name = defaults.name;
    	      this.vhdUri = defaults.vhdUri;
    	      this.writeAcceleratorEnabled = defaults.writeAcceleratorEnabled;
        }

        @CustomType.Setter
        public Builder caching(@Nullable String caching) {

            this.caching = caching;
            return this;
        }
        @CustomType.Setter
        public Builder createOption(String createOption) {
            if (createOption == null) {
              throw new MissingRequiredPropertyException("VirtualMachineStorageDataDisk", "createOption");
            }
            this.createOption = createOption;
            return this;
        }
        @CustomType.Setter
        public Builder diskSizeGb(@Nullable Integer diskSizeGb) {

            this.diskSizeGb = diskSizeGb;
            return this;
        }
        @CustomType.Setter
        public Builder lun(Integer lun) {
            if (lun == null) {
              throw new MissingRequiredPropertyException("VirtualMachineStorageDataDisk", "lun");
            }
            this.lun = lun;
            return this;
        }
        @CustomType.Setter
        public Builder managedDiskId(@Nullable String managedDiskId) {

            this.managedDiskId = managedDiskId;
            return this;
        }
        @CustomType.Setter
        public Builder managedDiskType(@Nullable String managedDiskType) {

            this.managedDiskType = managedDiskType;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("VirtualMachineStorageDataDisk", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder vhdUri(@Nullable String vhdUri) {

            this.vhdUri = vhdUri;
            return this;
        }
        @CustomType.Setter
        public Builder writeAcceleratorEnabled(@Nullable Boolean writeAcceleratorEnabled) {

            this.writeAcceleratorEnabled = writeAcceleratorEnabled;
            return this;
        }
        public VirtualMachineStorageDataDisk build() {
            final var _resultValue = new VirtualMachineStorageDataDisk();
            _resultValue.caching = caching;
            _resultValue.createOption = createOption;
            _resultValue.diskSizeGb = diskSizeGb;
            _resultValue.lun = lun;
            _resultValue.managedDiskId = managedDiskId;
            _resultValue.managedDiskType = managedDiskType;
            _resultValue.name = name;
            _resultValue.vhdUri = vhdUri;
            _resultValue.writeAcceleratorEnabled = writeAcceleratorEnabled;
            return _resultValue;
        }
    }
}
