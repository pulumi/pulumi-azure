// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class VirtualMachineStorageDataDisk {
    /**
     * @return Specifies the caching requirements for the Data Disk. Possible values include `None`, `ReadOnly` and `ReadWrite`.
     * 
     */
    private final @Nullable String caching;
    /**
     * @return Specifies how the data disk should be created. Possible values are `Attach`, `FromImage` and `Empty`.
     * 
     */
    private final String createOption;
    /**
     * @return Specifies the size of the data disk in gigabytes.
     * 
     */
    private final @Nullable Integer diskSizeGb;
    /**
     * @return Specifies the logical unit number of the data disk. This needs to be unique within all the Data Disks on the Virtual Machine.
     * 
     */
    private final Integer lun;
    /**
     * @return Specifies the ID of an Existing Managed Disk which should be attached to this Virtual Machine. When this field is set `create_option` must be set to `Attach`.
     * 
     */
    private final @Nullable String managedDiskId;
    /**
     * @return Specifies the type of managed disk to create. Possible values are either `Standard_LRS`, `StandardSSD_LRS`, `Premium_LRS` or `UltraSSD_LRS`.
     * 
     */
    private final @Nullable String managedDiskType;
    /**
     * @return The name of the Data Disk.
     * 
     */
    private final String name;
    /**
     * @return Specifies the URI of the VHD file backing this Unmanaged Data Disk. Changing this forces a new resource to be created.
     * 
     */
    private final @Nullable String vhdUri;
    /**
     * @return Specifies if Write Accelerator is enabled on the disk. This can only be enabled on `Premium_LRS` managed disks with no caching and [M-Series VMs](https://docs.microsoft.com/azure/virtual-machines/workloads/sap/how-to-enable-write-accelerator). Defaults to `false`.
     * 
     */
    private final @Nullable Boolean writeAcceleratorEnabled;

    @CustomType.Constructor
    private VirtualMachineStorageDataDisk(
        @CustomType.Parameter("caching") @Nullable String caching,
        @CustomType.Parameter("createOption") String createOption,
        @CustomType.Parameter("diskSizeGb") @Nullable Integer diskSizeGb,
        @CustomType.Parameter("lun") Integer lun,
        @CustomType.Parameter("managedDiskId") @Nullable String managedDiskId,
        @CustomType.Parameter("managedDiskType") @Nullable String managedDiskType,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("vhdUri") @Nullable String vhdUri,
        @CustomType.Parameter("writeAcceleratorEnabled") @Nullable Boolean writeAcceleratorEnabled) {
        this.caching = caching;
        this.createOption = createOption;
        this.diskSizeGb = diskSizeGb;
        this.lun = lun;
        this.managedDiskId = managedDiskId;
        this.managedDiskType = managedDiskType;
        this.name = name;
        this.vhdUri = vhdUri;
        this.writeAcceleratorEnabled = writeAcceleratorEnabled;
    }

    /**
     * @return Specifies the caching requirements for the Data Disk. Possible values include `None`, `ReadOnly` and `ReadWrite`.
     * 
     */
    public Optional<String> caching() {
        return Optional.ofNullable(this.caching);
    }
    /**
     * @return Specifies how the data disk should be created. Possible values are `Attach`, `FromImage` and `Empty`.
     * 
     */
    public String createOption() {
        return this.createOption;
    }
    /**
     * @return Specifies the size of the data disk in gigabytes.
     * 
     */
    public Optional<Integer> diskSizeGb() {
        return Optional.ofNullable(this.diskSizeGb);
    }
    /**
     * @return Specifies the logical unit number of the data disk. This needs to be unique within all the Data Disks on the Virtual Machine.
     * 
     */
    public Integer lun() {
        return this.lun;
    }
    /**
     * @return Specifies the ID of an Existing Managed Disk which should be attached to this Virtual Machine. When this field is set `create_option` must be set to `Attach`.
     * 
     */
    public Optional<String> managedDiskId() {
        return Optional.ofNullable(this.managedDiskId);
    }
    /**
     * @return Specifies the type of managed disk to create. Possible values are either `Standard_LRS`, `StandardSSD_LRS`, `Premium_LRS` or `UltraSSD_LRS`.
     * 
     */
    public Optional<String> managedDiskType() {
        return Optional.ofNullable(this.managedDiskType);
    }
    /**
     * @return The name of the Data Disk.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Specifies the URI of the VHD file backing this Unmanaged Data Disk. Changing this forces a new resource to be created.
     * 
     */
    public Optional<String> vhdUri() {
        return Optional.ofNullable(this.vhdUri);
    }
    /**
     * @return Specifies if Write Accelerator is enabled on the disk. This can only be enabled on `Premium_LRS` managed disks with no caching and [M-Series VMs](https://docs.microsoft.com/azure/virtual-machines/workloads/sap/how-to-enable-write-accelerator). Defaults to `false`.
     * 
     */
    public Optional<Boolean> writeAcceleratorEnabled() {
        return Optional.ofNullable(this.writeAcceleratorEnabled);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VirtualMachineStorageDataDisk defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String caching;
        private String createOption;
        private @Nullable Integer diskSizeGb;
        private Integer lun;
        private @Nullable String managedDiskId;
        private @Nullable String managedDiskType;
        private String name;
        private @Nullable String vhdUri;
        private @Nullable Boolean writeAcceleratorEnabled;

        public Builder() {
    	      // Empty
        }

        public Builder(VirtualMachineStorageDataDisk defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.caching = defaults.caching;
    	      this.createOption = defaults.createOption;
    	      this.diskSizeGb = defaults.diskSizeGb;
    	      this.lun = defaults.lun;
    	      this.managedDiskId = defaults.managedDiskId;
    	      this.managedDiskType = defaults.managedDiskType;
    	      this.name = defaults.name;
    	      this.vhdUri = defaults.vhdUri;
    	      this.writeAcceleratorEnabled = defaults.writeAcceleratorEnabled;
        }

        public Builder caching(@Nullable String caching) {
            this.caching = caching;
            return this;
        }
        public Builder createOption(String createOption) {
            this.createOption = Objects.requireNonNull(createOption);
            return this;
        }
        public Builder diskSizeGb(@Nullable Integer diskSizeGb) {
            this.diskSizeGb = diskSizeGb;
            return this;
        }
        public Builder lun(Integer lun) {
            this.lun = Objects.requireNonNull(lun);
            return this;
        }
        public Builder managedDiskId(@Nullable String managedDiskId) {
            this.managedDiskId = managedDiskId;
            return this;
        }
        public Builder managedDiskType(@Nullable String managedDiskType) {
            this.managedDiskType = managedDiskType;
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder vhdUri(@Nullable String vhdUri) {
            this.vhdUri = vhdUri;
            return this;
        }
        public Builder writeAcceleratorEnabled(@Nullable Boolean writeAcceleratorEnabled) {
            this.writeAcceleratorEnabled = writeAcceleratorEnabled;
            return this;
        }        public VirtualMachineStorageDataDisk build() {
            return new VirtualMachineStorageDataDisk(caching, createOption, diskSizeGb, lun, managedDiskId, managedDiskType, name, vhdUri, writeAcceleratorEnabled);
        }
    }
}
