// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.mssql;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatabaseExtendedAuditingPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseExtendedAuditingPolicyArgs Empty = new DatabaseExtendedAuditingPolicyArgs();

    /**
     * The ID of the SQL database to set the extended auditing policy. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="databaseId", required=true)
    private Output<String> databaseId;

    /**
     * @return The ID of the SQL database to set the extended auditing policy. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> databaseId() {
        return this.databaseId;
    }

    /**
     * Whether to enable the extended auditing policy. Possible values are `true` and `false`. Defaults to `true`.
     * 
     * -&gt;**NOTE:**  If `enabled` is `true`, `storage_endpoint` or `log_monitoring_enabled` are required.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether to enable the extended auditing policy. Possible values are `true` and `false`. Defaults to `true`.
     * 
     * -&gt;**NOTE:**  If `enabled` is `true`, `storage_endpoint` or `log_monitoring_enabled` are required.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Enable audit events to Azure Monitor? Defaults to `true`.
     * 
     * &gt; **NOTE:** To enable sending audit events to Log Analytics, please refer to the example which can be found in the `./examples/sql-azure/sql_auditing_log_analytics` directory within the GitHub Repository.  To enable sending server audit events to Log Analytics, please enable the master database to send audit events to Log Analytics.
     * To enable audit events to Eventhub, please refer to the example which can be found in the `./examples/sql-azure/sql_auditing_eventhub` directory within the GitHub Repository.
     * 
     */
    @Import(name="logMonitoringEnabled")
    private @Nullable Output<Boolean> logMonitoringEnabled;

    /**
     * @return Enable audit events to Azure Monitor? Defaults to `true`.
     * 
     * &gt; **NOTE:** To enable sending audit events to Log Analytics, please refer to the example which can be found in the `./examples/sql-azure/sql_auditing_log_analytics` directory within the GitHub Repository.  To enable sending server audit events to Log Analytics, please enable the master database to send audit events to Log Analytics.
     * To enable audit events to Eventhub, please refer to the example which can be found in the `./examples/sql-azure/sql_auditing_eventhub` directory within the GitHub Repository.
     * 
     */
    public Optional<Output<Boolean>> logMonitoringEnabled() {
        return Optional.ofNullable(this.logMonitoringEnabled);
    }

    /**
     * The number of days to retain logs for in the storage account. Defaults to `0`.
     * 
     */
    @Import(name="retentionInDays")
    private @Nullable Output<Integer> retentionInDays;

    /**
     * @return The number of days to retain logs for in the storage account. Defaults to `0`.
     * 
     */
    public Optional<Output<Integer>> retentionInDays() {
        return Optional.ofNullable(this.retentionInDays);
    }

    /**
     * The access key to use for the auditing storage account.
     * 
     */
    @Import(name="storageAccountAccessKey")
    private @Nullable Output<String> storageAccountAccessKey;

    /**
     * @return The access key to use for the auditing storage account.
     * 
     */
    public Optional<Output<String>> storageAccountAccessKey() {
        return Optional.ofNullable(this.storageAccountAccessKey);
    }

    /**
     * Is `storage_account_access_key` value the storage&#39;s secondary key?
     * 
     */
    @Import(name="storageAccountAccessKeyIsSecondary")
    private @Nullable Output<Boolean> storageAccountAccessKeyIsSecondary;

    /**
     * @return Is `storage_account_access_key` value the storage&#39;s secondary key?
     * 
     */
    public Optional<Output<Boolean>> storageAccountAccessKeyIsSecondary() {
        return Optional.ofNullable(this.storageAccountAccessKeyIsSecondary);
    }

    /**
     * The blob storage endpoint (e.g. &lt;https://example.blob.core.windows.net&gt;). This blob storage will hold all extended auditing logs.
     * 
     */
    @Import(name="storageEndpoint")
    private @Nullable Output<String> storageEndpoint;

    /**
     * @return The blob storage endpoint (e.g. &lt;https://example.blob.core.windows.net&gt;). This blob storage will hold all extended auditing logs.
     * 
     */
    public Optional<Output<String>> storageEndpoint() {
        return Optional.ofNullable(this.storageEndpoint);
    }

    private DatabaseExtendedAuditingPolicyArgs() {}

    private DatabaseExtendedAuditingPolicyArgs(DatabaseExtendedAuditingPolicyArgs $) {
        this.databaseId = $.databaseId;
        this.enabled = $.enabled;
        this.logMonitoringEnabled = $.logMonitoringEnabled;
        this.retentionInDays = $.retentionInDays;
        this.storageAccountAccessKey = $.storageAccountAccessKey;
        this.storageAccountAccessKeyIsSecondary = $.storageAccountAccessKeyIsSecondary;
        this.storageEndpoint = $.storageEndpoint;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseExtendedAuditingPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseExtendedAuditingPolicyArgs $;

        public Builder() {
            $ = new DatabaseExtendedAuditingPolicyArgs();
        }

        public Builder(DatabaseExtendedAuditingPolicyArgs defaults) {
            $ = new DatabaseExtendedAuditingPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param databaseId The ID of the SQL database to set the extended auditing policy. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder databaseId(Output<String> databaseId) {
            $.databaseId = databaseId;
            return this;
        }

        /**
         * @param databaseId The ID of the SQL database to set the extended auditing policy. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder databaseId(String databaseId) {
            return databaseId(Output.of(databaseId));
        }

        /**
         * @param enabled Whether to enable the extended auditing policy. Possible values are `true` and `false`. Defaults to `true`.
         * 
         * -&gt;**NOTE:**  If `enabled` is `true`, `storage_endpoint` or `log_monitoring_enabled` are required.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether to enable the extended auditing policy. Possible values are `true` and `false`. Defaults to `true`.
         * 
         * -&gt;**NOTE:**  If `enabled` is `true`, `storage_endpoint` or `log_monitoring_enabled` are required.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param logMonitoringEnabled Enable audit events to Azure Monitor? Defaults to `true`.
         * 
         * &gt; **NOTE:** To enable sending audit events to Log Analytics, please refer to the example which can be found in the `./examples/sql-azure/sql_auditing_log_analytics` directory within the GitHub Repository.  To enable sending server audit events to Log Analytics, please enable the master database to send audit events to Log Analytics.
         * To enable audit events to Eventhub, please refer to the example which can be found in the `./examples/sql-azure/sql_auditing_eventhub` directory within the GitHub Repository.
         * 
         * @return builder
         * 
         */
        public Builder logMonitoringEnabled(@Nullable Output<Boolean> logMonitoringEnabled) {
            $.logMonitoringEnabled = logMonitoringEnabled;
            return this;
        }

        /**
         * @param logMonitoringEnabled Enable audit events to Azure Monitor? Defaults to `true`.
         * 
         * &gt; **NOTE:** To enable sending audit events to Log Analytics, please refer to the example which can be found in the `./examples/sql-azure/sql_auditing_log_analytics` directory within the GitHub Repository.  To enable sending server audit events to Log Analytics, please enable the master database to send audit events to Log Analytics.
         * To enable audit events to Eventhub, please refer to the example which can be found in the `./examples/sql-azure/sql_auditing_eventhub` directory within the GitHub Repository.
         * 
         * @return builder
         * 
         */
        public Builder logMonitoringEnabled(Boolean logMonitoringEnabled) {
            return logMonitoringEnabled(Output.of(logMonitoringEnabled));
        }

        /**
         * @param retentionInDays The number of days to retain logs for in the storage account. Defaults to `0`.
         * 
         * @return builder
         * 
         */
        public Builder retentionInDays(@Nullable Output<Integer> retentionInDays) {
            $.retentionInDays = retentionInDays;
            return this;
        }

        /**
         * @param retentionInDays The number of days to retain logs for in the storage account. Defaults to `0`.
         * 
         * @return builder
         * 
         */
        public Builder retentionInDays(Integer retentionInDays) {
            return retentionInDays(Output.of(retentionInDays));
        }

        /**
         * @param storageAccountAccessKey The access key to use for the auditing storage account.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountAccessKey(@Nullable Output<String> storageAccountAccessKey) {
            $.storageAccountAccessKey = storageAccountAccessKey;
            return this;
        }

        /**
         * @param storageAccountAccessKey The access key to use for the auditing storage account.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountAccessKey(String storageAccountAccessKey) {
            return storageAccountAccessKey(Output.of(storageAccountAccessKey));
        }

        /**
         * @param storageAccountAccessKeyIsSecondary Is `storage_account_access_key` value the storage&#39;s secondary key?
         * 
         * @return builder
         * 
         */
        public Builder storageAccountAccessKeyIsSecondary(@Nullable Output<Boolean> storageAccountAccessKeyIsSecondary) {
            $.storageAccountAccessKeyIsSecondary = storageAccountAccessKeyIsSecondary;
            return this;
        }

        /**
         * @param storageAccountAccessKeyIsSecondary Is `storage_account_access_key` value the storage&#39;s secondary key?
         * 
         * @return builder
         * 
         */
        public Builder storageAccountAccessKeyIsSecondary(Boolean storageAccountAccessKeyIsSecondary) {
            return storageAccountAccessKeyIsSecondary(Output.of(storageAccountAccessKeyIsSecondary));
        }

        /**
         * @param storageEndpoint The blob storage endpoint (e.g. &lt;https://example.blob.core.windows.net&gt;). This blob storage will hold all extended auditing logs.
         * 
         * @return builder
         * 
         */
        public Builder storageEndpoint(@Nullable Output<String> storageEndpoint) {
            $.storageEndpoint = storageEndpoint;
            return this;
        }

        /**
         * @param storageEndpoint The blob storage endpoint (e.g. &lt;https://example.blob.core.windows.net&gt;). This blob storage will hold all extended auditing logs.
         * 
         * @return builder
         * 
         */
        public Builder storageEndpoint(String storageEndpoint) {
            return storageEndpoint(Output.of(storageEndpoint));
        }

        public DatabaseExtendedAuditingPolicyArgs build() {
            if ($.databaseId == null) {
                throw new MissingRequiredPropertyException("DatabaseExtendedAuditingPolicyArgs", "databaseId");
            }
            return $;
        }
    }

}
