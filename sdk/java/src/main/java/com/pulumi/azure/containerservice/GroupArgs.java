// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerservice;

import com.pulumi.azure.containerservice.inputs.GroupContainerArgs;
import com.pulumi.azure.containerservice.inputs.GroupDiagnosticsArgs;
import com.pulumi.azure.containerservice.inputs.GroupDnsConfigArgs;
import com.pulumi.azure.containerservice.inputs.GroupExposedPortArgs;
import com.pulumi.azure.containerservice.inputs.GroupIdentityArgs;
import com.pulumi.azure.containerservice.inputs.GroupImageRegistryCredentialArgs;
import com.pulumi.azure.containerservice.inputs.GroupInitContainerArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final GroupArgs Empty = new GroupArgs();

    /**
     * The definition of a container that is part of the group as documented in the `container` block below. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="containers", required=true)
    private Output<List<GroupContainerArgs>> containers;

    /**
     * @return The definition of a container that is part of the group as documented in the `container` block below. Changing this forces a new resource to be created.
     * 
     */
    public Output<List<GroupContainerArgs>> containers() {
        return this.containers;
    }

    /**
     * A `diagnostics` block as documented below. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="diagnostics")
    private @Nullable Output<GroupDiagnosticsArgs> diagnostics;

    /**
     * @return A `diagnostics` block as documented below. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<GroupDiagnosticsArgs>> diagnostics() {
        return Optional.ofNullable(this.diagnostics);
    }

    /**
     * A `dns_config` block as documented below. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="dnsConfig")
    private @Nullable Output<GroupDnsConfigArgs> dnsConfig;

    /**
     * @return A `dns_config` block as documented below. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<GroupDnsConfigArgs>> dnsConfig() {
        return Optional.ofNullable(this.dnsConfig);
    }

    /**
     * The DNS label/name for the container group&#39;s IP. Changing this forces a new resource to be created.
     * 
     * &gt; **Note:** DNS label/name is not supported when deploying to virtual networks.
     * 
     */
    @Import(name="dnsNameLabel")
    private @Nullable Output<String> dnsNameLabel;

    /**
     * @return The DNS label/name for the container group&#39;s IP. Changing this forces a new resource to be created.
     * 
     * &gt; **Note:** DNS label/name is not supported when deploying to virtual networks.
     * 
     */
    public Optional<Output<String>> dnsNameLabel() {
        return Optional.ofNullable(this.dnsNameLabel);
    }

    /**
     * The value representing the security enum. `Noreuse`, `ResourceGroupReuse`, `SubscriptionReuse`, `TenantReuse` or `Unsecure`. Defaults to `Unsecure`.
     * 
     */
    @Import(name="dnsNameLabelReusePolicy")
    private @Nullable Output<String> dnsNameLabelReusePolicy;

    /**
     * @return The value representing the security enum. `Noreuse`, `ResourceGroupReuse`, `SubscriptionReuse`, `TenantReuse` or `Unsecure`. Defaults to `Unsecure`.
     * 
     */
    public Optional<Output<String>> dnsNameLabelReusePolicy() {
        return Optional.ofNullable(this.dnsNameLabelReusePolicy);
    }

    /**
     * Zero or more `exposed_port` blocks as defined below. Changing this forces a new resource to be created.
     * 
     * &gt; **Note:** The `exposed_port` can only contain ports that are also exposed on one or more containers in the group.
     * 
     */
    @Import(name="exposedPorts")
    private @Nullable Output<List<GroupExposedPortArgs>> exposedPorts;

    /**
     * @return Zero or more `exposed_port` blocks as defined below. Changing this forces a new resource to be created.
     * 
     * &gt; **Note:** The `exposed_port` can only contain ports that are also exposed on one or more containers in the group.
     * 
     */
    public Optional<Output<List<GroupExposedPortArgs>>> exposedPorts() {
        return Optional.ofNullable(this.exposedPorts);
    }

    /**
     * An `identity` block as defined below.
     * 
     */
    @Import(name="identity")
    private @Nullable Output<GroupIdentityArgs> identity;

    /**
     * @return An `identity` block as defined below.
     * 
     */
    public Optional<Output<GroupIdentityArgs>> identity() {
        return Optional.ofNullable(this.identity);
    }

    /**
     * An `image_registry_credential` block as documented below. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="imageRegistryCredentials")
    private @Nullable Output<List<GroupImageRegistryCredentialArgs>> imageRegistryCredentials;

    /**
     * @return An `image_registry_credential` block as documented below. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<List<GroupImageRegistryCredentialArgs>>> imageRegistryCredentials() {
        return Optional.ofNullable(this.imageRegistryCredentials);
    }

    /**
     * The definition of an init container that is part of the group as documented in the `init_container` block below. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="initContainers")
    private @Nullable Output<List<GroupInitContainerArgs>> initContainers;

    /**
     * @return The definition of an init container that is part of the group as documented in the `init_container` block below. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<List<GroupInitContainerArgs>>> initContainers() {
        return Optional.ofNullable(this.initContainers);
    }

    /**
     * Specifies the IP address type of the container. `Public`, `Private` or `None`. Changing this forces a new resource to be created. If set to `Private`, `subnet_ids` also needs to be set. Defaults to `Public`.
     * 
     * &gt; **Note:** `dns_name_label` and `os_type` set to `windows` are not compatible with `Private` `ip_address_type`
     * 
     */
    @Import(name="ipAddressType")
    private @Nullable Output<String> ipAddressType;

    /**
     * @return Specifies the IP address type of the container. `Public`, `Private` or `None`. Changing this forces a new resource to be created. If set to `Private`, `subnet_ids` also needs to be set. Defaults to `Public`.
     * 
     * &gt; **Note:** `dns_name_label` and `os_type` set to `windows` are not compatible with `Private` `ip_address_type`
     * 
     */
    public Optional<Output<String>> ipAddressType() {
        return Optional.ofNullable(this.ipAddressType);
    }

    /**
     * The Key Vault key URI for CMK encryption. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="keyVaultKeyId")
    private @Nullable Output<String> keyVaultKeyId;

    /**
     * @return The Key Vault key URI for CMK encryption. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> keyVaultKeyId() {
        return Optional.ofNullable(this.keyVaultKeyId);
    }

    /**
     * The user assigned identity that has access to the Key Vault Key. If not specified, the RP principal named &#34;Azure Container Instance Service&#34; will be used instead. Make sure the identity has the proper `key_permissions` set, at least with `Get`, `UnwrapKey`, `WrapKey` and `GetRotationPolicy`.
     * 
     */
    @Import(name="keyVaultUserAssignedIdentityId")
    private @Nullable Output<String> keyVaultUserAssignedIdentityId;

    /**
     * @return The user assigned identity that has access to the Key Vault Key. If not specified, the RP principal named &#34;Azure Container Instance Service&#34; will be used instead. Make sure the identity has the proper `key_permissions` set, at least with `Get`, `UnwrapKey`, `WrapKey` and `GetRotationPolicy`.
     * 
     */
    public Optional<Output<String>> keyVaultUserAssignedIdentityId() {
        return Optional.ofNullable(this.keyVaultUserAssignedIdentityId);
    }

    /**
     * Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Specifies the name of the Container Group. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the name of the Container Group. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * @deprecated
     * the &#39;network_profile_id&#39; has been removed from the latest versions of the container instance API and has been deprecated. It no longer functions and will be removed from the 4.0 AzureRM provider. Please use the &#39;subnet_ids&#39; field instead
     * 
     */
    @Deprecated /* the 'network_profile_id' has been removed from the latest versions of the container instance API and has been deprecated. It no longer functions and will be removed from the 4.0 AzureRM provider. Please use the 'subnet_ids' field instead */
    @Import(name="networkProfileId")
    private @Nullable Output<String> networkProfileId;

    /**
     * @deprecated
     * the &#39;network_profile_id&#39; has been removed from the latest versions of the container instance API and has been deprecated. It no longer functions and will be removed from the 4.0 AzureRM provider. Please use the &#39;subnet_ids&#39; field instead
     * 
     */
    @Deprecated /* the 'network_profile_id' has been removed from the latest versions of the container instance API and has been deprecated. It no longer functions and will be removed from the 4.0 AzureRM provider. Please use the 'subnet_ids' field instead */
    public Optional<Output<String>> networkProfileId() {
        return Optional.ofNullable(this.networkProfileId);
    }

    /**
     * The OS for the container group. Allowed values are `Linux` and `Windows`. Changing this forces a new resource to be created.
     * 
     * &gt; **Note:** if `os_type` is set to `Windows` currently only a single `container` block is supported. Windows containers are not supported in virtual networks.
     * 
     */
    @Import(name="osType", required=true)
    private Output<String> osType;

    /**
     * @return The OS for the container group. Allowed values are `Linux` and `Windows`. Changing this forces a new resource to be created.
     * 
     * &gt; **Note:** if `os_type` is set to `Windows` currently only a single `container` block is supported. Windows containers are not supported in virtual networks.
     * 
     */
    public Output<String> osType() {
        return this.osType;
    }

    /**
     * The priority of the Container Group. Possible values are `Regular` and `Spot`. Changing this forces a new resource to be created.
     * 
     * &gt; **NOTE:** When `priority` is set to `Spot`, the `ip_address_type` has to be `None`.
     * 
     */
    @Import(name="priority")
    private @Nullable Output<String> priority;

    /**
     * @return The priority of the Container Group. Possible values are `Regular` and `Spot`. Changing this forces a new resource to be created.
     * 
     * &gt; **NOTE:** When `priority` is set to `Spot`, the `ip_address_type` has to be `None`.
     * 
     */
    public Optional<Output<String>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * The name of the resource group in which to create the Container Group. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group in which to create the Container Group. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Restart policy for the container group. Allowed values are `Always`, `Never`, `OnFailure`. Defaults to `Always`. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="restartPolicy")
    private @Nullable Output<String> restartPolicy;

    /**
     * @return Restart policy for the container group. Allowed values are `Always`, `Never`, `OnFailure`. Defaults to `Always`. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> restartPolicy() {
        return Optional.ofNullable(this.restartPolicy);
    }

    /**
     * Specifies the sku of the Container Group. Possible values are `Confidential`, `Dedicated` and `Standard`. Defaults to `Standard`. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="sku")
    private @Nullable Output<String> sku;

    /**
     * @return Specifies the sku of the Container Group. Possible values are `Confidential`, `Dedicated` and `Standard`. Defaults to `Standard`. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> sku() {
        return Optional.ofNullable(this.sku);
    }

    /**
     * The subnet resource IDs for a container group. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="subnetIds")
    private @Nullable Output<String> subnetIds;

    /**
     * @return The subnet resource IDs for a container group. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> subnetIds() {
        return Optional.ofNullable(this.subnetIds);
    }

    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A list of Availability Zones in which this Container Group is located. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="zones")
    private @Nullable Output<List<String>> zones;

    /**
     * @return A list of Availability Zones in which this Container Group is located. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<List<String>>> zones() {
        return Optional.ofNullable(this.zones);
    }

    private GroupArgs() {}

    private GroupArgs(GroupArgs $) {
        this.containers = $.containers;
        this.diagnostics = $.diagnostics;
        this.dnsConfig = $.dnsConfig;
        this.dnsNameLabel = $.dnsNameLabel;
        this.dnsNameLabelReusePolicy = $.dnsNameLabelReusePolicy;
        this.exposedPorts = $.exposedPorts;
        this.identity = $.identity;
        this.imageRegistryCredentials = $.imageRegistryCredentials;
        this.initContainers = $.initContainers;
        this.ipAddressType = $.ipAddressType;
        this.keyVaultKeyId = $.keyVaultKeyId;
        this.keyVaultUserAssignedIdentityId = $.keyVaultUserAssignedIdentityId;
        this.location = $.location;
        this.name = $.name;
        this.networkProfileId = $.networkProfileId;
        this.osType = $.osType;
        this.priority = $.priority;
        this.resourceGroupName = $.resourceGroupName;
        this.restartPolicy = $.restartPolicy;
        this.sku = $.sku;
        this.subnetIds = $.subnetIds;
        this.tags = $.tags;
        this.zones = $.zones;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GroupArgs $;

        public Builder() {
            $ = new GroupArgs();
        }

        public Builder(GroupArgs defaults) {
            $ = new GroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param containers The definition of a container that is part of the group as documented in the `container` block below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder containers(Output<List<GroupContainerArgs>> containers) {
            $.containers = containers;
            return this;
        }

        /**
         * @param containers The definition of a container that is part of the group as documented in the `container` block below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder containers(List<GroupContainerArgs> containers) {
            return containers(Output.of(containers));
        }

        /**
         * @param containers The definition of a container that is part of the group as documented in the `container` block below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder containers(GroupContainerArgs... containers) {
            return containers(List.of(containers));
        }

        /**
         * @param diagnostics A `diagnostics` block as documented below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder diagnostics(@Nullable Output<GroupDiagnosticsArgs> diagnostics) {
            $.diagnostics = diagnostics;
            return this;
        }

        /**
         * @param diagnostics A `diagnostics` block as documented below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder diagnostics(GroupDiagnosticsArgs diagnostics) {
            return diagnostics(Output.of(diagnostics));
        }

        /**
         * @param dnsConfig A `dns_config` block as documented below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder dnsConfig(@Nullable Output<GroupDnsConfigArgs> dnsConfig) {
            $.dnsConfig = dnsConfig;
            return this;
        }

        /**
         * @param dnsConfig A `dns_config` block as documented below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder dnsConfig(GroupDnsConfigArgs dnsConfig) {
            return dnsConfig(Output.of(dnsConfig));
        }

        /**
         * @param dnsNameLabel The DNS label/name for the container group&#39;s IP. Changing this forces a new resource to be created.
         * 
         * &gt; **Note:** DNS label/name is not supported when deploying to virtual networks.
         * 
         * @return builder
         * 
         */
        public Builder dnsNameLabel(@Nullable Output<String> dnsNameLabel) {
            $.dnsNameLabel = dnsNameLabel;
            return this;
        }

        /**
         * @param dnsNameLabel The DNS label/name for the container group&#39;s IP. Changing this forces a new resource to be created.
         * 
         * &gt; **Note:** DNS label/name is not supported when deploying to virtual networks.
         * 
         * @return builder
         * 
         */
        public Builder dnsNameLabel(String dnsNameLabel) {
            return dnsNameLabel(Output.of(dnsNameLabel));
        }

        /**
         * @param dnsNameLabelReusePolicy The value representing the security enum. `Noreuse`, `ResourceGroupReuse`, `SubscriptionReuse`, `TenantReuse` or `Unsecure`. Defaults to `Unsecure`.
         * 
         * @return builder
         * 
         */
        public Builder dnsNameLabelReusePolicy(@Nullable Output<String> dnsNameLabelReusePolicy) {
            $.dnsNameLabelReusePolicy = dnsNameLabelReusePolicy;
            return this;
        }

        /**
         * @param dnsNameLabelReusePolicy The value representing the security enum. `Noreuse`, `ResourceGroupReuse`, `SubscriptionReuse`, `TenantReuse` or `Unsecure`. Defaults to `Unsecure`.
         * 
         * @return builder
         * 
         */
        public Builder dnsNameLabelReusePolicy(String dnsNameLabelReusePolicy) {
            return dnsNameLabelReusePolicy(Output.of(dnsNameLabelReusePolicy));
        }

        /**
         * @param exposedPorts Zero or more `exposed_port` blocks as defined below. Changing this forces a new resource to be created.
         * 
         * &gt; **Note:** The `exposed_port` can only contain ports that are also exposed on one or more containers in the group.
         * 
         * @return builder
         * 
         */
        public Builder exposedPorts(@Nullable Output<List<GroupExposedPortArgs>> exposedPorts) {
            $.exposedPorts = exposedPorts;
            return this;
        }

        /**
         * @param exposedPorts Zero or more `exposed_port` blocks as defined below. Changing this forces a new resource to be created.
         * 
         * &gt; **Note:** The `exposed_port` can only contain ports that are also exposed on one or more containers in the group.
         * 
         * @return builder
         * 
         */
        public Builder exposedPorts(List<GroupExposedPortArgs> exposedPorts) {
            return exposedPorts(Output.of(exposedPorts));
        }

        /**
         * @param exposedPorts Zero or more `exposed_port` blocks as defined below. Changing this forces a new resource to be created.
         * 
         * &gt; **Note:** The `exposed_port` can only contain ports that are also exposed on one or more containers in the group.
         * 
         * @return builder
         * 
         */
        public Builder exposedPorts(GroupExposedPortArgs... exposedPorts) {
            return exposedPorts(List.of(exposedPorts));
        }

        /**
         * @param identity An `identity` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder identity(@Nullable Output<GroupIdentityArgs> identity) {
            $.identity = identity;
            return this;
        }

        /**
         * @param identity An `identity` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder identity(GroupIdentityArgs identity) {
            return identity(Output.of(identity));
        }

        /**
         * @param imageRegistryCredentials An `image_registry_credential` block as documented below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder imageRegistryCredentials(@Nullable Output<List<GroupImageRegistryCredentialArgs>> imageRegistryCredentials) {
            $.imageRegistryCredentials = imageRegistryCredentials;
            return this;
        }

        /**
         * @param imageRegistryCredentials An `image_registry_credential` block as documented below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder imageRegistryCredentials(List<GroupImageRegistryCredentialArgs> imageRegistryCredentials) {
            return imageRegistryCredentials(Output.of(imageRegistryCredentials));
        }

        /**
         * @param imageRegistryCredentials An `image_registry_credential` block as documented below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder imageRegistryCredentials(GroupImageRegistryCredentialArgs... imageRegistryCredentials) {
            return imageRegistryCredentials(List.of(imageRegistryCredentials));
        }

        /**
         * @param initContainers The definition of an init container that is part of the group as documented in the `init_container` block below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder initContainers(@Nullable Output<List<GroupInitContainerArgs>> initContainers) {
            $.initContainers = initContainers;
            return this;
        }

        /**
         * @param initContainers The definition of an init container that is part of the group as documented in the `init_container` block below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder initContainers(List<GroupInitContainerArgs> initContainers) {
            return initContainers(Output.of(initContainers));
        }

        /**
         * @param initContainers The definition of an init container that is part of the group as documented in the `init_container` block below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder initContainers(GroupInitContainerArgs... initContainers) {
            return initContainers(List.of(initContainers));
        }

        /**
         * @param ipAddressType Specifies the IP address type of the container. `Public`, `Private` or `None`. Changing this forces a new resource to be created. If set to `Private`, `subnet_ids` also needs to be set. Defaults to `Public`.
         * 
         * &gt; **Note:** `dns_name_label` and `os_type` set to `windows` are not compatible with `Private` `ip_address_type`
         * 
         * @return builder
         * 
         */
        public Builder ipAddressType(@Nullable Output<String> ipAddressType) {
            $.ipAddressType = ipAddressType;
            return this;
        }

        /**
         * @param ipAddressType Specifies the IP address type of the container. `Public`, `Private` or `None`. Changing this forces a new resource to be created. If set to `Private`, `subnet_ids` also needs to be set. Defaults to `Public`.
         * 
         * &gt; **Note:** `dns_name_label` and `os_type` set to `windows` are not compatible with `Private` `ip_address_type`
         * 
         * @return builder
         * 
         */
        public Builder ipAddressType(String ipAddressType) {
            return ipAddressType(Output.of(ipAddressType));
        }

        /**
         * @param keyVaultKeyId The Key Vault key URI for CMK encryption. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultKeyId(@Nullable Output<String> keyVaultKeyId) {
            $.keyVaultKeyId = keyVaultKeyId;
            return this;
        }

        /**
         * @param keyVaultKeyId The Key Vault key URI for CMK encryption. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultKeyId(String keyVaultKeyId) {
            return keyVaultKeyId(Output.of(keyVaultKeyId));
        }

        /**
         * @param keyVaultUserAssignedIdentityId The user assigned identity that has access to the Key Vault Key. If not specified, the RP principal named &#34;Azure Container Instance Service&#34; will be used instead. Make sure the identity has the proper `key_permissions` set, at least with `Get`, `UnwrapKey`, `WrapKey` and `GetRotationPolicy`.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultUserAssignedIdentityId(@Nullable Output<String> keyVaultUserAssignedIdentityId) {
            $.keyVaultUserAssignedIdentityId = keyVaultUserAssignedIdentityId;
            return this;
        }

        /**
         * @param keyVaultUserAssignedIdentityId The user assigned identity that has access to the Key Vault Key. If not specified, the RP principal named &#34;Azure Container Instance Service&#34; will be used instead. Make sure the identity has the proper `key_permissions` set, at least with `Get`, `UnwrapKey`, `WrapKey` and `GetRotationPolicy`.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultUserAssignedIdentityId(String keyVaultUserAssignedIdentityId) {
            return keyVaultUserAssignedIdentityId(Output.of(keyVaultUserAssignedIdentityId));
        }

        /**
         * @param location Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name Specifies the name of the Container Group. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of the Container Group. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * the &#39;network_profile_id&#39; has been removed from the latest versions of the container instance API and has been deprecated. It no longer functions and will be removed from the 4.0 AzureRM provider. Please use the &#39;subnet_ids&#39; field instead
         * 
         */
        @Deprecated /* the 'network_profile_id' has been removed from the latest versions of the container instance API and has been deprecated. It no longer functions and will be removed from the 4.0 AzureRM provider. Please use the 'subnet_ids' field instead */
        public Builder networkProfileId(@Nullable Output<String> networkProfileId) {
            $.networkProfileId = networkProfileId;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * the &#39;network_profile_id&#39; has been removed from the latest versions of the container instance API and has been deprecated. It no longer functions and will be removed from the 4.0 AzureRM provider. Please use the &#39;subnet_ids&#39; field instead
         * 
         */
        @Deprecated /* the 'network_profile_id' has been removed from the latest versions of the container instance API and has been deprecated. It no longer functions and will be removed from the 4.0 AzureRM provider. Please use the 'subnet_ids' field instead */
        public Builder networkProfileId(String networkProfileId) {
            return networkProfileId(Output.of(networkProfileId));
        }

        /**
         * @param osType The OS for the container group. Allowed values are `Linux` and `Windows`. Changing this forces a new resource to be created.
         * 
         * &gt; **Note:** if `os_type` is set to `Windows` currently only a single `container` block is supported. Windows containers are not supported in virtual networks.
         * 
         * @return builder
         * 
         */
        public Builder osType(Output<String> osType) {
            $.osType = osType;
            return this;
        }

        /**
         * @param osType The OS for the container group. Allowed values are `Linux` and `Windows`. Changing this forces a new resource to be created.
         * 
         * &gt; **Note:** if `os_type` is set to `Windows` currently only a single `container` block is supported. Windows containers are not supported in virtual networks.
         * 
         * @return builder
         * 
         */
        public Builder osType(String osType) {
            return osType(Output.of(osType));
        }

        /**
         * @param priority The priority of the Container Group. Possible values are `Regular` and `Spot`. Changing this forces a new resource to be created.
         * 
         * &gt; **NOTE:** When `priority` is set to `Spot`, the `ip_address_type` has to be `None`.
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<String> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority The priority of the Container Group. Possible values are `Regular` and `Spot`. Changing this forces a new resource to be created.
         * 
         * &gt; **NOTE:** When `priority` is set to `Spot`, the `ip_address_type` has to be `None`.
         * 
         * @return builder
         * 
         */
        public Builder priority(String priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param resourceGroupName The name of the resource group in which to create the Container Group. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group in which to create the Container Group. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param restartPolicy Restart policy for the container group. Allowed values are `Always`, `Never`, `OnFailure`. Defaults to `Always`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder restartPolicy(@Nullable Output<String> restartPolicy) {
            $.restartPolicy = restartPolicy;
            return this;
        }

        /**
         * @param restartPolicy Restart policy for the container group. Allowed values are `Always`, `Never`, `OnFailure`. Defaults to `Always`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder restartPolicy(String restartPolicy) {
            return restartPolicy(Output.of(restartPolicy));
        }

        /**
         * @param sku Specifies the sku of the Container Group. Possible values are `Confidential`, `Dedicated` and `Standard`. Defaults to `Standard`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder sku(@Nullable Output<String> sku) {
            $.sku = sku;
            return this;
        }

        /**
         * @param sku Specifies the sku of the Container Group. Possible values are `Confidential`, `Dedicated` and `Standard`. Defaults to `Standard`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder sku(String sku) {
            return sku(Output.of(sku));
        }

        /**
         * @param subnetIds The subnet resource IDs for a container group. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder subnetIds(@Nullable Output<String> subnetIds) {
            $.subnetIds = subnetIds;
            return this;
        }

        /**
         * @param subnetIds The subnet resource IDs for a container group. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder subnetIds(String subnetIds) {
            return subnetIds(Output.of(subnetIds));
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param zones A list of Availability Zones in which this Container Group is located. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder zones(@Nullable Output<List<String>> zones) {
            $.zones = zones;
            return this;
        }

        /**
         * @param zones A list of Availability Zones in which this Container Group is located. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder zones(List<String> zones) {
            return zones(Output.of(zones));
        }

        /**
         * @param zones A list of Availability Zones in which this Container Group is located. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder zones(String... zones) {
            return zones(List.of(zones));
        }

        public GroupArgs build() {
            if ($.containers == null) {
                throw new MissingRequiredPropertyException("GroupArgs", "containers");
            }
            if ($.osType == null) {
                throw new MissingRequiredPropertyException("GroupArgs", "osType");
            }
            if ($.resourceGroupName == null) {
                throw new MissingRequiredPropertyException("GroupArgs", "resourceGroupName");
            }
            return $;
        }
    }

}
