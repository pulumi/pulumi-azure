// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.batch.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PoolNodePlacementArgs extends com.pulumi.resources.ResourceArgs {

    public static final PoolNodePlacementArgs Empty = new PoolNodePlacementArgs();

    /**
     * The placement policy for allocating nodes in the pool. Values are: &#34;Regional&#34;: All nodes in the pool will be allocated in the same region; &#34;Zonal&#34;: Nodes in the pool will be spread across different zones with the best effort balancing. Defaults to `Regional`.
     * 
     */
    @Import(name="policy")
    private @Nullable Output<String> policy;

    /**
     * @return The placement policy for allocating nodes in the pool. Values are: &#34;Regional&#34;: All nodes in the pool will be allocated in the same region; &#34;Zonal&#34;: Nodes in the pool will be spread across different zones with the best effort balancing. Defaults to `Regional`.
     * 
     */
    public Optional<Output<String>> policy() {
        return Optional.ofNullable(this.policy);
    }

    private PoolNodePlacementArgs() {}

    private PoolNodePlacementArgs(PoolNodePlacementArgs $) {
        this.policy = $.policy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PoolNodePlacementArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PoolNodePlacementArgs $;

        public Builder() {
            $ = new PoolNodePlacementArgs();
        }

        public Builder(PoolNodePlacementArgs defaults) {
            $ = new PoolNodePlacementArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param policy The placement policy for allocating nodes in the pool. Values are: &#34;Regional&#34;: All nodes in the pool will be allocated in the same region; &#34;Zonal&#34;: Nodes in the pool will be spread across different zones with the best effort balancing. Defaults to `Regional`.
         * 
         * @return builder
         * 
         */
        public Builder policy(@Nullable Output<String> policy) {
            $.policy = policy;
            return this;
        }

        /**
         * @param policy The placement policy for allocating nodes in the pool. Values are: &#34;Regional&#34;: All nodes in the pool will be allocated in the same region; &#34;Zonal&#34;: Nodes in the pool will be spread across different zones with the best effort balancing. Defaults to `Regional`.
         * 
         * @return builder
         * 
         */
        public Builder policy(String policy) {
            return policy(Output.of(policy));
        }

        public PoolNodePlacementArgs build() {
            return $;
        }
    }

}
