// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.elasticsan.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VolumeGroupEncryptionArgs extends com.pulumi.resources.ResourceArgs {

    public static final VolumeGroupEncryptionArgs Empty = new VolumeGroupEncryptionArgs();

    /**
     * The timestamp of the expiration time for the current version of the customer managed key.
     * 
     */
    @Import(name="currentVersionedKeyExpirationTimestamp")
    private @Nullable Output<String> currentVersionedKeyExpirationTimestamp;

    /**
     * @return The timestamp of the expiration time for the current version of the customer managed key.
     * 
     */
    public Optional<Output<String>> currentVersionedKeyExpirationTimestamp() {
        return Optional.ofNullable(this.currentVersionedKeyExpirationTimestamp);
    }

    /**
     * The ID of the current versioned Key Vault Key in use.
     * 
     */
    @Import(name="currentVersionedKeyId")
    private @Nullable Output<String> currentVersionedKeyId;

    /**
     * @return The ID of the current versioned Key Vault Key in use.
     * 
     */
    public Optional<Output<String>> currentVersionedKeyId() {
        return Optional.ofNullable(this.currentVersionedKeyId);
    }

    /**
     * The Key Vault key URI for Customer Managed Key encryption, which can be either a full URI or a versionless URI.
     * 
     */
    @Import(name="keyVaultKeyId", required=true)
    private Output<String> keyVaultKeyId;

    /**
     * @return The Key Vault key URI for Customer Managed Key encryption, which can be either a full URI or a versionless URI.
     * 
     */
    public Output<String> keyVaultKeyId() {
        return this.keyVaultKeyId;
    }

    /**
     * The timestamp of the last rotation of the Key Vault Key.
     * 
     */
    @Import(name="lastKeyRotationTimestamp")
    private @Nullable Output<String> lastKeyRotationTimestamp;

    /**
     * @return The timestamp of the last rotation of the Key Vault Key.
     * 
     */
    public Optional<Output<String>> lastKeyRotationTimestamp() {
        return Optional.ofNullable(this.lastKeyRotationTimestamp);
    }

    /**
     * The ID of the User Assigned Identity used by this Elastic SAN Volume Group.
     * 
     */
    @Import(name="userAssignedIdentityId")
    private @Nullable Output<String> userAssignedIdentityId;

    /**
     * @return The ID of the User Assigned Identity used by this Elastic SAN Volume Group.
     * 
     */
    public Optional<Output<String>> userAssignedIdentityId() {
        return Optional.ofNullable(this.userAssignedIdentityId);
    }

    private VolumeGroupEncryptionArgs() {}

    private VolumeGroupEncryptionArgs(VolumeGroupEncryptionArgs $) {
        this.currentVersionedKeyExpirationTimestamp = $.currentVersionedKeyExpirationTimestamp;
        this.currentVersionedKeyId = $.currentVersionedKeyId;
        this.keyVaultKeyId = $.keyVaultKeyId;
        this.lastKeyRotationTimestamp = $.lastKeyRotationTimestamp;
        this.userAssignedIdentityId = $.userAssignedIdentityId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VolumeGroupEncryptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VolumeGroupEncryptionArgs $;

        public Builder() {
            $ = new VolumeGroupEncryptionArgs();
        }

        public Builder(VolumeGroupEncryptionArgs defaults) {
            $ = new VolumeGroupEncryptionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param currentVersionedKeyExpirationTimestamp The timestamp of the expiration time for the current version of the customer managed key.
         * 
         * @return builder
         * 
         */
        public Builder currentVersionedKeyExpirationTimestamp(@Nullable Output<String> currentVersionedKeyExpirationTimestamp) {
            $.currentVersionedKeyExpirationTimestamp = currentVersionedKeyExpirationTimestamp;
            return this;
        }

        /**
         * @param currentVersionedKeyExpirationTimestamp The timestamp of the expiration time for the current version of the customer managed key.
         * 
         * @return builder
         * 
         */
        public Builder currentVersionedKeyExpirationTimestamp(String currentVersionedKeyExpirationTimestamp) {
            return currentVersionedKeyExpirationTimestamp(Output.of(currentVersionedKeyExpirationTimestamp));
        }

        /**
         * @param currentVersionedKeyId The ID of the current versioned Key Vault Key in use.
         * 
         * @return builder
         * 
         */
        public Builder currentVersionedKeyId(@Nullable Output<String> currentVersionedKeyId) {
            $.currentVersionedKeyId = currentVersionedKeyId;
            return this;
        }

        /**
         * @param currentVersionedKeyId The ID of the current versioned Key Vault Key in use.
         * 
         * @return builder
         * 
         */
        public Builder currentVersionedKeyId(String currentVersionedKeyId) {
            return currentVersionedKeyId(Output.of(currentVersionedKeyId));
        }

        /**
         * @param keyVaultKeyId The Key Vault key URI for Customer Managed Key encryption, which can be either a full URI or a versionless URI.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultKeyId(Output<String> keyVaultKeyId) {
            $.keyVaultKeyId = keyVaultKeyId;
            return this;
        }

        /**
         * @param keyVaultKeyId The Key Vault key URI for Customer Managed Key encryption, which can be either a full URI or a versionless URI.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultKeyId(String keyVaultKeyId) {
            return keyVaultKeyId(Output.of(keyVaultKeyId));
        }

        /**
         * @param lastKeyRotationTimestamp The timestamp of the last rotation of the Key Vault Key.
         * 
         * @return builder
         * 
         */
        public Builder lastKeyRotationTimestamp(@Nullable Output<String> lastKeyRotationTimestamp) {
            $.lastKeyRotationTimestamp = lastKeyRotationTimestamp;
            return this;
        }

        /**
         * @param lastKeyRotationTimestamp The timestamp of the last rotation of the Key Vault Key.
         * 
         * @return builder
         * 
         */
        public Builder lastKeyRotationTimestamp(String lastKeyRotationTimestamp) {
            return lastKeyRotationTimestamp(Output.of(lastKeyRotationTimestamp));
        }

        /**
         * @param userAssignedIdentityId The ID of the User Assigned Identity used by this Elastic SAN Volume Group.
         * 
         * @return builder
         * 
         */
        public Builder userAssignedIdentityId(@Nullable Output<String> userAssignedIdentityId) {
            $.userAssignedIdentityId = userAssignedIdentityId;
            return this;
        }

        /**
         * @param userAssignedIdentityId The ID of the User Assigned Identity used by this Elastic SAN Volume Group.
         * 
         * @return builder
         * 
         */
        public Builder userAssignedIdentityId(String userAssignedIdentityId) {
            return userAssignedIdentityId(Output.of(userAssignedIdentityId));
        }

        public VolumeGroupEncryptionArgs build() {
            if ($.keyVaultKeyId == null) {
                throw new MissingRequiredPropertyException("VolumeGroupEncryptionArgs", "keyVaultKeyId");
            }
            return $;
        }
    }

}
