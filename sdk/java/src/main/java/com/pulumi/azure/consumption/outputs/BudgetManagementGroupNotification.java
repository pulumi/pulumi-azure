// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.consumption.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BudgetManagementGroupNotification {
    /**
     * @return Specifies a list of email addresses to send the budget notification to when the threshold is exceeded.
     * 
     */
    private final List<String> contactEmails;
    /**
     * @return Should the notification be enabled?
     * 
     */
    private final @Nullable Boolean enabled;
    /**
     * @return The comparison operator for the notification. Must be one of `EqualTo`, `GreaterThan`, or `GreaterThanOrEqualTo`.
     * 
     */
    private final String operator;
    /**
     * @return Threshold value associated with a notification. Notification is sent when the cost exceeded the threshold. It is always percent and has to be between 0 and 1000.
     * 
     */
    private final Integer threshold;
    /**
     * @return The type of threshold for the notification. This determines whether the notification is triggered by forecasted costs or actual costs. The allowed values are `Actual` and `Forecasted`. Default is `Actual`. Changing this forces a new resource to be created.
     * 
     */
    private final @Nullable String thresholdType;

    @CustomType.Constructor
    private BudgetManagementGroupNotification(
        @CustomType.Parameter("contactEmails") List<String> contactEmails,
        @CustomType.Parameter("enabled") @Nullable Boolean enabled,
        @CustomType.Parameter("operator") String operator,
        @CustomType.Parameter("threshold") Integer threshold,
        @CustomType.Parameter("thresholdType") @Nullable String thresholdType) {
        this.contactEmails = contactEmails;
        this.enabled = enabled;
        this.operator = operator;
        this.threshold = threshold;
        this.thresholdType = thresholdType;
    }

    /**
     * @return Specifies a list of email addresses to send the budget notification to when the threshold is exceeded.
     * 
     */
    public List<String> contactEmails() {
        return this.contactEmails;
    }
    /**
     * @return Should the notification be enabled?
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    /**
     * @return The comparison operator for the notification. Must be one of `EqualTo`, `GreaterThan`, or `GreaterThanOrEqualTo`.
     * 
     */
    public String operator() {
        return this.operator;
    }
    /**
     * @return Threshold value associated with a notification. Notification is sent when the cost exceeded the threshold. It is always percent and has to be between 0 and 1000.
     * 
     */
    public Integer threshold() {
        return this.threshold;
    }
    /**
     * @return The type of threshold for the notification. This determines whether the notification is triggered by forecasted costs or actual costs. The allowed values are `Actual` and `Forecasted`. Default is `Actual`. Changing this forces a new resource to be created.
     * 
     */
    public Optional<String> thresholdType() {
        return Optional.ofNullable(this.thresholdType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BudgetManagementGroupNotification defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<String> contactEmails;
        private @Nullable Boolean enabled;
        private String operator;
        private Integer threshold;
        private @Nullable String thresholdType;

        public Builder() {
    	      // Empty
        }

        public Builder(BudgetManagementGroupNotification defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.contactEmails = defaults.contactEmails;
    	      this.enabled = defaults.enabled;
    	      this.operator = defaults.operator;
    	      this.threshold = defaults.threshold;
    	      this.thresholdType = defaults.thresholdType;
        }

        public Builder contactEmails(List<String> contactEmails) {
            this.contactEmails = Objects.requireNonNull(contactEmails);
            return this;
        }
        public Builder contactEmails(String... contactEmails) {
            return contactEmails(List.of(contactEmails));
        }
        public Builder enabled(@Nullable Boolean enabled) {
            this.enabled = enabled;
            return this;
        }
        public Builder operator(String operator) {
            this.operator = Objects.requireNonNull(operator);
            return this;
        }
        public Builder threshold(Integer threshold) {
            this.threshold = Objects.requireNonNull(threshold);
            return this;
        }
        public Builder thresholdType(@Nullable String thresholdType) {
            this.thresholdType = thresholdType;
            return this;
        }        public BudgetManagementGroupNotification build() {
            return new BudgetManagementGroupNotification(contactEmails, enabled, operator, threshold, thresholdType);
        }
    }
}
