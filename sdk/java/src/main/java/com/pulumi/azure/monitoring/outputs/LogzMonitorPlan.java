// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.monitoring.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class LogzMonitorPlan {
    /**
     * @return Different billing cycles. Possible values are `MONTHLY` or `WEEKLY`. Changing this forces a new logz Monitor to be created.
     * 
     */
    private final String billingCycle;
    /**
     * @return Date when plan was applied. Changing this forces a new logz Monitor to be created.
     * 
     */
    private final String effectiveDate;
    /**
     * @return Plan id as published by Logz. Possible values are `100gb14days`. Changing this forces a new logz Monitor to be created.
     * 
     */
    private final String planId;
    /**
     * @return Different usage types. Possible values are `PAYG` or `COMMITTED`. Changing this forces a new logz Monitor to be created.
     * 
     */
    private final String usageType;

    @CustomType.Constructor
    private LogzMonitorPlan(
        @CustomType.Parameter("billingCycle") String billingCycle,
        @CustomType.Parameter("effectiveDate") String effectiveDate,
        @CustomType.Parameter("planId") String planId,
        @CustomType.Parameter("usageType") String usageType) {
        this.billingCycle = billingCycle;
        this.effectiveDate = effectiveDate;
        this.planId = planId;
        this.usageType = usageType;
    }

    /**
     * @return Different billing cycles. Possible values are `MONTHLY` or `WEEKLY`. Changing this forces a new logz Monitor to be created.
     * 
     */
    public String billingCycle() {
        return this.billingCycle;
    }
    /**
     * @return Date when plan was applied. Changing this forces a new logz Monitor to be created.
     * 
     */
    public String effectiveDate() {
        return this.effectiveDate;
    }
    /**
     * @return Plan id as published by Logz. Possible values are `100gb14days`. Changing this forces a new logz Monitor to be created.
     * 
     */
    public String planId() {
        return this.planId;
    }
    /**
     * @return Different usage types. Possible values are `PAYG` or `COMMITTED`. Changing this forces a new logz Monitor to be created.
     * 
     */
    public String usageType() {
        return this.usageType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LogzMonitorPlan defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String billingCycle;
        private String effectiveDate;
        private String planId;
        private String usageType;

        public Builder() {
    	      // Empty
        }

        public Builder(LogzMonitorPlan defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.billingCycle = defaults.billingCycle;
    	      this.effectiveDate = defaults.effectiveDate;
    	      this.planId = defaults.planId;
    	      this.usageType = defaults.usageType;
        }

        public Builder billingCycle(String billingCycle) {
            this.billingCycle = Objects.requireNonNull(billingCycle);
            return this;
        }
        public Builder effectiveDate(String effectiveDate) {
            this.effectiveDate = Objects.requireNonNull(effectiveDate);
            return this;
        }
        public Builder planId(String planId) {
            this.planId = Objects.requireNonNull(planId);
            return this;
        }
        public Builder usageType(String usageType) {
            this.usageType = Objects.requireNonNull(usageType);
            return this;
        }        public LogzMonitorPlan build() {
            return new LogzMonitorPlan(billingCycle, effectiveDate, planId, usageType);
        }
    }
}
