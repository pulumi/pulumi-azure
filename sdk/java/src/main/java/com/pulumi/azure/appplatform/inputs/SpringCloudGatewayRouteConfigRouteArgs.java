// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appplatform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SpringCloudGatewayRouteConfigRouteArgs extends com.pulumi.resources.ResourceArgs {

    public static final SpringCloudGatewayRouteConfigRouteArgs Empty = new SpringCloudGatewayRouteConfigRouteArgs();

    /**
     * Specifies the classification tags which will be applied to methods in the generated OpenAPI documentation.
     * 
     */
    @Import(name="classificationTags")
    private @Nullable Output<List<String>> classificationTags;

    /**
     * @return Specifies the classification tags which will be applied to methods in the generated OpenAPI documentation.
     * 
     */
    public Optional<Output<List<String>>> classificationTags() {
        return Optional.ofNullable(this.classificationTags);
    }

    /**
     * Specifies the description which will be applied to methods in the generated OpenAPI documentation.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Specifies the description which will be applied to methods in the generated OpenAPI documentation.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Specifies a list of filters which are used to modify the request before sending it to the target endpoint, or the received response.
     * 
     */
    @Import(name="filters")
    private @Nullable Output<List<String>> filters;

    /**
     * @return Specifies a list of filters which are used to modify the request before sending it to the target endpoint, or the received response.
     * 
     */
    public Optional<Output<List<String>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Specifies the route processing order.
     * 
     */
    @Import(name="order", required=true)
    private Output<Integer> order;

    /**
     * @return Specifies the route processing order.
     * 
     */
    public Output<Integer> order() {
        return this.order;
    }

    /**
     * Specifies a list of conditions to evaluate a route for each request. Each predicate may be evaluated against request headers and parameter values. All of the predicates associated with a route must evaluate to true for the route to be matched to the request.
     * 
     */
    @Import(name="predicates")
    private @Nullable Output<List<String>> predicates;

    /**
     * @return Specifies a list of conditions to evaluate a route for each request. Each predicate may be evaluated against request headers and parameter values. All of the predicates associated with a route must evaluate to true for the route to be matched to the request.
     * 
     */
    public Optional<Output<List<String>>> predicates() {
        return Optional.ofNullable(this.predicates);
    }

    /**
     * Should the sso validation be enabled?
     * 
     */
    @Import(name="ssoValidationEnabled")
    private @Nullable Output<Boolean> ssoValidationEnabled;

    /**
     * @return Should the sso validation be enabled?
     * 
     */
    public Optional<Output<Boolean>> ssoValidationEnabled() {
        return Optional.ofNullable(this.ssoValidationEnabled);
    }

    /**
     * Specifies the title which will be applied to methods in the generated OpenAPI documentation.
     * 
     */
    @Import(name="title")
    private @Nullable Output<String> title;

    /**
     * @return Specifies the title which will be applied to methods in the generated OpenAPI documentation.
     * 
     */
    public Optional<Output<String>> title() {
        return Optional.ofNullable(this.title);
    }

    /**
     * Should pass currently-authenticated user&#39;s identity token to application service?
     * 
     */
    @Import(name="tokenRelay")
    private @Nullable Output<Boolean> tokenRelay;

    /**
     * @return Should pass currently-authenticated user&#39;s identity token to application service?
     * 
     */
    public Optional<Output<Boolean>> tokenRelay() {
        return Optional.ofNullable(this.tokenRelay);
    }

    /**
     * Specifies the full uri which will override `appName`.
     * 
     */
    @Import(name="uri")
    private @Nullable Output<String> uri;

    /**
     * @return Specifies the full uri which will override `appName`.
     * 
     */
    public Optional<Output<String>> uri() {
        return Optional.ofNullable(this.uri);
    }

    private SpringCloudGatewayRouteConfigRouteArgs() {}

    private SpringCloudGatewayRouteConfigRouteArgs(SpringCloudGatewayRouteConfigRouteArgs $) {
        this.classificationTags = $.classificationTags;
        this.description = $.description;
        this.filters = $.filters;
        this.order = $.order;
        this.predicates = $.predicates;
        this.ssoValidationEnabled = $.ssoValidationEnabled;
        this.title = $.title;
        this.tokenRelay = $.tokenRelay;
        this.uri = $.uri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SpringCloudGatewayRouteConfigRouteArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SpringCloudGatewayRouteConfigRouteArgs $;

        public Builder() {
            $ = new SpringCloudGatewayRouteConfigRouteArgs();
        }

        public Builder(SpringCloudGatewayRouteConfigRouteArgs defaults) {
            $ = new SpringCloudGatewayRouteConfigRouteArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param classificationTags Specifies the classification tags which will be applied to methods in the generated OpenAPI documentation.
         * 
         * @return builder
         * 
         */
        public Builder classificationTags(@Nullable Output<List<String>> classificationTags) {
            $.classificationTags = classificationTags;
            return this;
        }

        /**
         * @param classificationTags Specifies the classification tags which will be applied to methods in the generated OpenAPI documentation.
         * 
         * @return builder
         * 
         */
        public Builder classificationTags(List<String> classificationTags) {
            return classificationTags(Output.of(classificationTags));
        }

        /**
         * @param classificationTags Specifies the classification tags which will be applied to methods in the generated OpenAPI documentation.
         * 
         * @return builder
         * 
         */
        public Builder classificationTags(String... classificationTags) {
            return classificationTags(List.of(classificationTags));
        }

        /**
         * @param description Specifies the description which will be applied to methods in the generated OpenAPI documentation.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Specifies the description which will be applied to methods in the generated OpenAPI documentation.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param filters Specifies a list of filters which are used to modify the request before sending it to the target endpoint, or the received response.
         * 
         * @return builder
         * 
         */
        public Builder filters(@Nullable Output<List<String>> filters) {
            $.filters = filters;
            return this;
        }

        /**
         * @param filters Specifies a list of filters which are used to modify the request before sending it to the target endpoint, or the received response.
         * 
         * @return builder
         * 
         */
        public Builder filters(List<String> filters) {
            return filters(Output.of(filters));
        }

        /**
         * @param filters Specifies a list of filters which are used to modify the request before sending it to the target endpoint, or the received response.
         * 
         * @return builder
         * 
         */
        public Builder filters(String... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param order Specifies the route processing order.
         * 
         * @return builder
         * 
         */
        public Builder order(Output<Integer> order) {
            $.order = order;
            return this;
        }

        /**
         * @param order Specifies the route processing order.
         * 
         * @return builder
         * 
         */
        public Builder order(Integer order) {
            return order(Output.of(order));
        }

        /**
         * @param predicates Specifies a list of conditions to evaluate a route for each request. Each predicate may be evaluated against request headers and parameter values. All of the predicates associated with a route must evaluate to true for the route to be matched to the request.
         * 
         * @return builder
         * 
         */
        public Builder predicates(@Nullable Output<List<String>> predicates) {
            $.predicates = predicates;
            return this;
        }

        /**
         * @param predicates Specifies a list of conditions to evaluate a route for each request. Each predicate may be evaluated against request headers and parameter values. All of the predicates associated with a route must evaluate to true for the route to be matched to the request.
         * 
         * @return builder
         * 
         */
        public Builder predicates(List<String> predicates) {
            return predicates(Output.of(predicates));
        }

        /**
         * @param predicates Specifies a list of conditions to evaluate a route for each request. Each predicate may be evaluated against request headers and parameter values. All of the predicates associated with a route must evaluate to true for the route to be matched to the request.
         * 
         * @return builder
         * 
         */
        public Builder predicates(String... predicates) {
            return predicates(List.of(predicates));
        }

        /**
         * @param ssoValidationEnabled Should the sso validation be enabled?
         * 
         * @return builder
         * 
         */
        public Builder ssoValidationEnabled(@Nullable Output<Boolean> ssoValidationEnabled) {
            $.ssoValidationEnabled = ssoValidationEnabled;
            return this;
        }

        /**
         * @param ssoValidationEnabled Should the sso validation be enabled?
         * 
         * @return builder
         * 
         */
        public Builder ssoValidationEnabled(Boolean ssoValidationEnabled) {
            return ssoValidationEnabled(Output.of(ssoValidationEnabled));
        }

        /**
         * @param title Specifies the title which will be applied to methods in the generated OpenAPI documentation.
         * 
         * @return builder
         * 
         */
        public Builder title(@Nullable Output<String> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title Specifies the title which will be applied to methods in the generated OpenAPI documentation.
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            return title(Output.of(title));
        }

        /**
         * @param tokenRelay Should pass currently-authenticated user&#39;s identity token to application service?
         * 
         * @return builder
         * 
         */
        public Builder tokenRelay(@Nullable Output<Boolean> tokenRelay) {
            $.tokenRelay = tokenRelay;
            return this;
        }

        /**
         * @param tokenRelay Should pass currently-authenticated user&#39;s identity token to application service?
         * 
         * @return builder
         * 
         */
        public Builder tokenRelay(Boolean tokenRelay) {
            return tokenRelay(Output.of(tokenRelay));
        }

        /**
         * @param uri Specifies the full uri which will override `appName`.
         * 
         * @return builder
         * 
         */
        public Builder uri(@Nullable Output<String> uri) {
            $.uri = uri;
            return this;
        }

        /**
         * @param uri Specifies the full uri which will override `appName`.
         * 
         * @return builder
         * 
         */
        public Builder uri(String uri) {
            return uri(Output.of(uri));
        }

        public SpringCloudGatewayRouteConfigRouteArgs build() {
            if ($.order == null) {
                throw new MissingRequiredPropertyException("SpringCloudGatewayRouteConfigRouteArgs", "order");
            }
            return $;
        }
    }

}
