// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network.outputs;

import com.pulumi.azure.network.outputs.GetVirtualHubConnectionRoutingPropagatedRouteTable;
import com.pulumi.azure.network.outputs.GetVirtualHubConnectionRoutingStaticVnetRoute;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetVirtualHubConnectionRouting {
    /**
     * @return The ID of the route table associated with this Virtual Hub connection.
     * 
     */
    private String associatedRouteTableId;
    /**
     * @return The ID of the Route Map associated with this Routing Configuration for inbound learned routes.
     * 
     */
    private String inboundRouteMapId;
    /**
     * @return The ID of the Route Map associated with this Routing Configuration for outbound advertised routes.
     * 
     */
    private String outboundRouteMapId;
    /**
     * @return A `propagated_route_table` block as defined below.
     * 
     */
    private List<GetVirtualHubConnectionRoutingPropagatedRouteTable> propagatedRouteTables;
    /**
     * @return The static VNet local route override criteria that is used to determine whether NVA in spoke VNet is bypassed for traffic with destination in spoke VNet.
     * 
     */
    private String staticVnetLocalRouteOverrideCriteria;
    /**
     * @return A `static_vnet_route` block as defined below.
     * 
     */
    private List<GetVirtualHubConnectionRoutingStaticVnetRoute> staticVnetRoutes;

    private GetVirtualHubConnectionRouting() {}
    /**
     * @return The ID of the route table associated with this Virtual Hub connection.
     * 
     */
    public String associatedRouteTableId() {
        return this.associatedRouteTableId;
    }
    /**
     * @return The ID of the Route Map associated with this Routing Configuration for inbound learned routes.
     * 
     */
    public String inboundRouteMapId() {
        return this.inboundRouteMapId;
    }
    /**
     * @return The ID of the Route Map associated with this Routing Configuration for outbound advertised routes.
     * 
     */
    public String outboundRouteMapId() {
        return this.outboundRouteMapId;
    }
    /**
     * @return A `propagated_route_table` block as defined below.
     * 
     */
    public List<GetVirtualHubConnectionRoutingPropagatedRouteTable> propagatedRouteTables() {
        return this.propagatedRouteTables;
    }
    /**
     * @return The static VNet local route override criteria that is used to determine whether NVA in spoke VNet is bypassed for traffic with destination in spoke VNet.
     * 
     */
    public String staticVnetLocalRouteOverrideCriteria() {
        return this.staticVnetLocalRouteOverrideCriteria;
    }
    /**
     * @return A `static_vnet_route` block as defined below.
     * 
     */
    public List<GetVirtualHubConnectionRoutingStaticVnetRoute> staticVnetRoutes() {
        return this.staticVnetRoutes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVirtualHubConnectionRouting defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String associatedRouteTableId;
        private String inboundRouteMapId;
        private String outboundRouteMapId;
        private List<GetVirtualHubConnectionRoutingPropagatedRouteTable> propagatedRouteTables;
        private String staticVnetLocalRouteOverrideCriteria;
        private List<GetVirtualHubConnectionRoutingStaticVnetRoute> staticVnetRoutes;
        public Builder() {}
        public Builder(GetVirtualHubConnectionRouting defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.associatedRouteTableId = defaults.associatedRouteTableId;
    	      this.inboundRouteMapId = defaults.inboundRouteMapId;
    	      this.outboundRouteMapId = defaults.outboundRouteMapId;
    	      this.propagatedRouteTables = defaults.propagatedRouteTables;
    	      this.staticVnetLocalRouteOverrideCriteria = defaults.staticVnetLocalRouteOverrideCriteria;
    	      this.staticVnetRoutes = defaults.staticVnetRoutes;
        }

        @CustomType.Setter
        public Builder associatedRouteTableId(String associatedRouteTableId) {
            if (associatedRouteTableId == null) {
              throw new MissingRequiredPropertyException("GetVirtualHubConnectionRouting", "associatedRouteTableId");
            }
            this.associatedRouteTableId = associatedRouteTableId;
            return this;
        }
        @CustomType.Setter
        public Builder inboundRouteMapId(String inboundRouteMapId) {
            if (inboundRouteMapId == null) {
              throw new MissingRequiredPropertyException("GetVirtualHubConnectionRouting", "inboundRouteMapId");
            }
            this.inboundRouteMapId = inboundRouteMapId;
            return this;
        }
        @CustomType.Setter
        public Builder outboundRouteMapId(String outboundRouteMapId) {
            if (outboundRouteMapId == null) {
              throw new MissingRequiredPropertyException("GetVirtualHubConnectionRouting", "outboundRouteMapId");
            }
            this.outboundRouteMapId = outboundRouteMapId;
            return this;
        }
        @CustomType.Setter
        public Builder propagatedRouteTables(List<GetVirtualHubConnectionRoutingPropagatedRouteTable> propagatedRouteTables) {
            if (propagatedRouteTables == null) {
              throw new MissingRequiredPropertyException("GetVirtualHubConnectionRouting", "propagatedRouteTables");
            }
            this.propagatedRouteTables = propagatedRouteTables;
            return this;
        }
        public Builder propagatedRouteTables(GetVirtualHubConnectionRoutingPropagatedRouteTable... propagatedRouteTables) {
            return propagatedRouteTables(List.of(propagatedRouteTables));
        }
        @CustomType.Setter
        public Builder staticVnetLocalRouteOverrideCriteria(String staticVnetLocalRouteOverrideCriteria) {
            if (staticVnetLocalRouteOverrideCriteria == null) {
              throw new MissingRequiredPropertyException("GetVirtualHubConnectionRouting", "staticVnetLocalRouteOverrideCriteria");
            }
            this.staticVnetLocalRouteOverrideCriteria = staticVnetLocalRouteOverrideCriteria;
            return this;
        }
        @CustomType.Setter
        public Builder staticVnetRoutes(List<GetVirtualHubConnectionRoutingStaticVnetRoute> staticVnetRoutes) {
            if (staticVnetRoutes == null) {
              throw new MissingRequiredPropertyException("GetVirtualHubConnectionRouting", "staticVnetRoutes");
            }
            this.staticVnetRoutes = staticVnetRoutes;
            return this;
        }
        public Builder staticVnetRoutes(GetVirtualHubConnectionRoutingStaticVnetRoute... staticVnetRoutes) {
            return staticVnetRoutes(List.of(staticVnetRoutes));
        }
        public GetVirtualHubConnectionRouting build() {
            final var _resultValue = new GetVirtualHubConnectionRouting();
            _resultValue.associatedRouteTableId = associatedRouteTableId;
            _resultValue.inboundRouteMapId = inboundRouteMapId;
            _resultValue.outboundRouteMapId = outboundRouteMapId;
            _resultValue.propagatedRouteTables = propagatedRouteTables;
            _resultValue.staticVnetLocalRouteOverrideCriteria = staticVnetLocalRouteOverrideCriteria;
            _resultValue.staticVnetRoutes = staticVnetRoutes;
            return _resultValue;
        }
    }
}
