// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.avs;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.avs.PrivateCloudArgs;
import com.pulumi.azure.avs.inputs.PrivateCloudState;
import com.pulumi.azure.avs.outputs.PrivateCloudCircuit;
import com.pulumi.azure.avs.outputs.PrivateCloudManagementCluster;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Import
 * 
 * VMware Private Clouds can be imported using the `resource id`, e.g.
 * 
 * ```sh
 *  $ pulumi import azure:avs/privateCloud:PrivateCloud example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.AVS/PrivateClouds/privateCloud1
 * ```
 * 
 */
@ResourceType(type="azure:avs/privateCloud:PrivateCloud")
public class PrivateCloud extends com.pulumi.resources.CustomResource {
    /**
     * A `circuit` block as defined below.
     * 
     */
    @Export(name="circuits", type=List.class, parameters={PrivateCloudCircuit.class})
    private Output<List<PrivateCloudCircuit>> circuits;

    /**
     * @return A `circuit` block as defined below.
     * 
     */
    public Output<List<PrivateCloudCircuit>> circuits() {
        return this.circuits;
    }
    /**
     * The endpoint for the HCX Cloud Manager.
     * 
     */
    @Export(name="hcxCloudManagerEndpoint", type=String.class, parameters={})
    private Output<String> hcxCloudManagerEndpoint;

    /**
     * @return The endpoint for the HCX Cloud Manager.
     * 
     */
    public Output<String> hcxCloudManagerEndpoint() {
        return this.hcxCloudManagerEndpoint;
    }
    /**
     * Is the Private Cluster connected to the internet? This field can not updated with `management_cluster.0.size` together.
     * &gt; **NOTE :** `internet_connection_enabled` and `management_cluster.0.size` cannot be updated at the same time.
     * 
     */
    @Export(name="internetConnectionEnabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> internetConnectionEnabled;

    /**
     * @return Is the Private Cluster connected to the internet? This field can not updated with `management_cluster.0.size` together.
     * &gt; **NOTE :** `internet_connection_enabled` and `management_cluster.0.size` cannot be updated at the same time.
     * 
     */
    public Output<Optional<Boolean>> internetConnectionEnabled() {
        return Codegen.optional(this.internetConnectionEnabled);
    }
    /**
     * The Azure Region where the VMware Private Cloud should exist. Changing this forces a new VMware Private Cloud to be created.
     * 
     */
    @Export(name="location", type=String.class, parameters={})
    private Output<String> location;

    /**
     * @return The Azure Region where the VMware Private Cloud should exist. Changing this forces a new VMware Private Cloud to be created.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * A `management_cluster` block as defined below.
     * &gt; **NOTE :** `internet_connection_enabled` and `management_cluster.0.size` cannot be updated at the same time.
     * 
     */
    @Export(name="managementCluster", type=PrivateCloudManagementCluster.class, parameters={})
    private Output<PrivateCloudManagementCluster> managementCluster;

    /**
     * @return A `management_cluster` block as defined below.
     * &gt; **NOTE :** `internet_connection_enabled` and `management_cluster.0.size` cannot be updated at the same time.
     * 
     */
    public Output<PrivateCloudManagementCluster> managementCluster() {
        return this.managementCluster;
    }
    /**
     * The network used to access vCenter Server and NSX-T Manager.
     * 
     */
    @Export(name="managementSubnetCidr", type=String.class, parameters={})
    private Output<String> managementSubnetCidr;

    /**
     * @return The network used to access vCenter Server and NSX-T Manager.
     * 
     */
    public Output<String> managementSubnetCidr() {
        return this.managementSubnetCidr;
    }
    /**
     * The name which should be used for this VMware Private Cloud. Changing this forces a new VMware Private Cloud to be created.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name which should be used for this VMware Private Cloud. Changing this forces a new VMware Private Cloud to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The subnet which should be unique across virtual network in your subscription as well as on-premise. Changing this forces a new VMware Private Cloud to be created.
     * 
     */
    @Export(name="networkSubnetCidr", type=String.class, parameters={})
    private Output<String> networkSubnetCidr;

    /**
     * @return The subnet which should be unique across virtual network in your subscription as well as on-premise. Changing this forces a new VMware Private Cloud to be created.
     * 
     */
    public Output<String> networkSubnetCidr() {
        return this.networkSubnetCidr;
    }
    /**
     * The thumbprint of the NSX-T Manager SSL certificate.
     * 
     */
    @Export(name="nsxtCertificateThumbprint", type=String.class, parameters={})
    private Output<String> nsxtCertificateThumbprint;

    /**
     * @return The thumbprint of the NSX-T Manager SSL certificate.
     * 
     */
    public Output<String> nsxtCertificateThumbprint() {
        return this.nsxtCertificateThumbprint;
    }
    /**
     * The endpoint for the NSX-T Data Center manager.
     * 
     */
    @Export(name="nsxtManagerEndpoint", type=String.class, parameters={})
    private Output<String> nsxtManagerEndpoint;

    /**
     * @return The endpoint for the NSX-T Data Center manager.
     * 
     */
    public Output<String> nsxtManagerEndpoint() {
        return this.nsxtManagerEndpoint;
    }
    /**
     * The password of the NSX-T Manager. Changing this forces a new VMware Private Cloud to be created.
     * 
     */
    @Export(name="nsxtPassword", type=String.class, parameters={})
    private Output</* @Nullable */ String> nsxtPassword;

    /**
     * @return The password of the NSX-T Manager. Changing this forces a new VMware Private Cloud to be created.
     * 
     */
    public Output<Optional<String>> nsxtPassword() {
        return Codegen.optional(this.nsxtPassword);
    }
    /**
     * The network which is used for virtual machine cold migration, cloning, and snapshot migration.
     * 
     */
    @Export(name="provisioningSubnetCidr", type=String.class, parameters={})
    private Output<String> provisioningSubnetCidr;

    /**
     * @return The network which is used for virtual machine cold migration, cloning, and snapshot migration.
     * 
     */
    public Output<String> provisioningSubnetCidr() {
        return this.provisioningSubnetCidr;
    }
    /**
     * The name of the Resource Group where the VMware Private Cloud should exist. Changing this forces a new VMware Private Cloud to be created.
     * 
     */
    @Export(name="resourceGroupName", type=String.class, parameters={})
    private Output<String> resourceGroupName;

    /**
     * @return The name of the Resource Group where the VMware Private Cloud should exist. Changing this forces a new VMware Private Cloud to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * The Name of the SKU used for this Private Cloud. Possible values are `av20`, `av36` and `av36t`. Changing this forces a new VMware Private Cloud to be created.
     * 
     */
    @Export(name="skuName", type=String.class, parameters={})
    private Output<String> skuName;

    /**
     * @return The Name of the SKU used for this Private Cloud. Possible values are `av20`, `av36` and `av36t`. Changing this forces a new VMware Private Cloud to be created.
     * 
     */
    public Output<String> skuName() {
        return this.skuName;
    }
    /**
     * A mapping of tags which should be assigned to the VMware Private Cloud.
     * 
     */
    @Export(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return A mapping of tags which should be assigned to the VMware Private Cloud.
     * 
     */
    public Output<Optional<Map<String,String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * The thumbprint of the vCenter Server SSL certificate.
     * 
     */
    @Export(name="vcenterCertificateThumbprint", type=String.class, parameters={})
    private Output<String> vcenterCertificateThumbprint;

    /**
     * @return The thumbprint of the vCenter Server SSL certificate.
     * 
     */
    public Output<String> vcenterCertificateThumbprint() {
        return this.vcenterCertificateThumbprint;
    }
    /**
     * The password of the vCenter admin. Changing this forces a new VMware Private Cloud to be created.
     * 
     */
    @Export(name="vcenterPassword", type=String.class, parameters={})
    private Output</* @Nullable */ String> vcenterPassword;

    /**
     * @return The password of the vCenter admin. Changing this forces a new VMware Private Cloud to be created.
     * 
     */
    public Output<Optional<String>> vcenterPassword() {
        return Codegen.optional(this.vcenterPassword);
    }
    /**
     * The endpoint for Virtual Center Server Appliance.
     * 
     */
    @Export(name="vcsaEndpoint", type=String.class, parameters={})
    private Output<String> vcsaEndpoint;

    /**
     * @return The endpoint for Virtual Center Server Appliance.
     * 
     */
    public Output<String> vcsaEndpoint() {
        return this.vcsaEndpoint;
    }
    /**
     * The network which is used for live migration of virtual machines.
     * 
     */
    @Export(name="vmotionSubnetCidr", type=String.class, parameters={})
    private Output<String> vmotionSubnetCidr;

    /**
     * @return The network which is used for live migration of virtual machines.
     * 
     */
    public Output<String> vmotionSubnetCidr() {
        return this.vmotionSubnetCidr;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public PrivateCloud(String name) {
        this(name, PrivateCloudArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public PrivateCloud(String name, PrivateCloudArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public PrivateCloud(String name, PrivateCloudArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:avs/privateCloud:PrivateCloud", name, args == null ? PrivateCloudArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private PrivateCloud(String name, Output<String> id, @Nullable PrivateCloudState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:avs/privateCloud:PrivateCloud", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static PrivateCloud get(String name, Output<String> id, @Nullable PrivateCloudState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new PrivateCloud(name, id, state, options);
    }
}
