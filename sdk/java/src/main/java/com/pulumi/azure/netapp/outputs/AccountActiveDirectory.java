// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.netapp.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AccountActiveDirectory {
    /**
     * @return A list of DNS server IP addresses for the Active Directory domain. Only allows `IPv4` address.
     * 
     */
    private final List<String> dnsServers;
    /**
     * @return The name of the Active Directory domain.
     * 
     */
    private final String domain;
    /**
     * @return The Organizational Unit (OU) within the Active Directory Domain.
     * 
     */
    private final @Nullable String organizationalUnit;
    /**
     * @return The password associated with the `username`.
     * 
     */
    private final String password;
    /**
     * @return The NetBIOS name which should be used for the NetApp SMB Server, which will be registered as a computer account in the AD and used to mount volumes.
     * 
     */
    private final String smbServerName;
    /**
     * @return The Username of Active Directory Domain Administrator.
     * 
     */
    private final String username;

    @CustomType.Constructor
    private AccountActiveDirectory(
        @CustomType.Parameter("dnsServers") List<String> dnsServers,
        @CustomType.Parameter("domain") String domain,
        @CustomType.Parameter("organizationalUnit") @Nullable String organizationalUnit,
        @CustomType.Parameter("password") String password,
        @CustomType.Parameter("smbServerName") String smbServerName,
        @CustomType.Parameter("username") String username) {
        this.dnsServers = dnsServers;
        this.domain = domain;
        this.organizationalUnit = organizationalUnit;
        this.password = password;
        this.smbServerName = smbServerName;
        this.username = username;
    }

    /**
     * @return A list of DNS server IP addresses for the Active Directory domain. Only allows `IPv4` address.
     * 
     */
    public List<String> dnsServers() {
        return this.dnsServers;
    }
    /**
     * @return The name of the Active Directory domain.
     * 
     */
    public String domain() {
        return this.domain;
    }
    /**
     * @return The Organizational Unit (OU) within the Active Directory Domain.
     * 
     */
    public Optional<String> organizationalUnit() {
        return Optional.ofNullable(this.organizationalUnit);
    }
    /**
     * @return The password associated with the `username`.
     * 
     */
    public String password() {
        return this.password;
    }
    /**
     * @return The NetBIOS name which should be used for the NetApp SMB Server, which will be registered as a computer account in the AD and used to mount volumes.
     * 
     */
    public String smbServerName() {
        return this.smbServerName;
    }
    /**
     * @return The Username of Active Directory Domain Administrator.
     * 
     */
    public String username() {
        return this.username;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AccountActiveDirectory defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<String> dnsServers;
        private String domain;
        private @Nullable String organizationalUnit;
        private String password;
        private String smbServerName;
        private String username;

        public Builder() {
    	      // Empty
        }

        public Builder(AccountActiveDirectory defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dnsServers = defaults.dnsServers;
    	      this.domain = defaults.domain;
    	      this.organizationalUnit = defaults.organizationalUnit;
    	      this.password = defaults.password;
    	      this.smbServerName = defaults.smbServerName;
    	      this.username = defaults.username;
        }

        public Builder dnsServers(List<String> dnsServers) {
            this.dnsServers = Objects.requireNonNull(dnsServers);
            return this;
        }
        public Builder dnsServers(String... dnsServers) {
            return dnsServers(List.of(dnsServers));
        }
        public Builder domain(String domain) {
            this.domain = Objects.requireNonNull(domain);
            return this;
        }
        public Builder organizationalUnit(@Nullable String organizationalUnit) {
            this.organizationalUnit = organizationalUnit;
            return this;
        }
        public Builder password(String password) {
            this.password = Objects.requireNonNull(password);
            return this;
        }
        public Builder smbServerName(String smbServerName) {
            this.smbServerName = Objects.requireNonNull(smbServerName);
            return this;
        }
        public Builder username(String username) {
            this.username = Objects.requireNonNull(username);
            return this;
        }        public AccountActiveDirectory build() {
            return new AccountActiveDirectory(dnsServers, domain, organizationalUnit, password, smbServerName, username);
        }
    }
}
