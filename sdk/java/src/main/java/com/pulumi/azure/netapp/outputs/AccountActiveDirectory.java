// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.netapp.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AccountActiveDirectory {
    /**
     * @return If enabled, AES encryption will be enabled for SMB communication. Defaults to `false`.
     * 
     */
    private @Nullable Boolean aesEncryptionEnabled;
    /**
     * @return A list of DNS server IP addresses for the Active Directory domain. Only allows `IPv4` address.
     * 
     */
    private List<String> dnsServers;
    /**
     * @return The name of the Active Directory domain.
     * 
     */
    private String domain;
    /**
     * @return Name of the active directory machine.
     * 
     */
    private @Nullable String kerberosAdName;
    /**
     * @return kdc server IP addresses for the active directory machine.
     * 
     * &gt; **Note:** If you plan on using **Kerberos** volumes, both `adName` and `kdcIp` are required in order to create the volume.
     * 
     */
    private @Nullable String kerberosKdcIp;
    /**
     * @return Specifies whether or not the LDAP traffic needs to be secured via TLS. Defaults to `false`.
     * 
     */
    private @Nullable Boolean ldapOverTlsEnabled;
    /**
     * @return Specifies whether or not the LDAP traffic needs to be signed. Defaults to `false`.
     * 
     */
    private @Nullable Boolean ldapSigningEnabled;
    /**
     * @return If enabled, NFS client local users can also (in addition to LDAP users) access the NFS volumes. Defaults to `false`.
     * 
     */
    private @Nullable Boolean localNfsUsersWithLdapAllowed;
    /**
     * @return The Organizational Unit (OU) within Active Directory where machines will be created. If blank, defaults to `CN=Computers`.
     * 
     */
    private @Nullable String organizationalUnit;
    /**
     * @return The password associated with the `username`.
     * 
     */
    private String password;
    /**
     * @return When LDAP over SSL/TLS is enabled, the LDAP client is required to have a *base64 encoded Active Directory Certificate Service&#39;s self-signed root CA certificate*, this optional parameter is used only for dual protocol with LDAP user-mapping volumes. Required if `ldapOverTlsEnabled` is set to `true`.
     * 
     */
    private @Nullable String serverRootCaCertificate;
    /**
     * @return The Active Directory site the service will limit Domain Controller discovery to. If blank, defaults to `Default-First-Site-Name`.
     * 
     */
    private @Nullable String siteName;
    /**
     * @return The NetBIOS name which should be used for the NetApp SMB Server, which will be registered as a computer account in the AD and used to mount volumes.
     * 
     */
    private String smbServerName;
    /**
     * @return The Username of Active Directory Domain Administrator.
     * 
     */
    private String username;

    private AccountActiveDirectory() {}
    /**
     * @return If enabled, AES encryption will be enabled for SMB communication. Defaults to `false`.
     * 
     */
    public Optional<Boolean> aesEncryptionEnabled() {
        return Optional.ofNullable(this.aesEncryptionEnabled);
    }
    /**
     * @return A list of DNS server IP addresses for the Active Directory domain. Only allows `IPv4` address.
     * 
     */
    public List<String> dnsServers() {
        return this.dnsServers;
    }
    /**
     * @return The name of the Active Directory domain.
     * 
     */
    public String domain() {
        return this.domain;
    }
    /**
     * @return Name of the active directory machine.
     * 
     */
    public Optional<String> kerberosAdName() {
        return Optional.ofNullable(this.kerberosAdName);
    }
    /**
     * @return kdc server IP addresses for the active directory machine.
     * 
     * &gt; **Note:** If you plan on using **Kerberos** volumes, both `adName` and `kdcIp` are required in order to create the volume.
     * 
     */
    public Optional<String> kerberosKdcIp() {
        return Optional.ofNullable(this.kerberosKdcIp);
    }
    /**
     * @return Specifies whether or not the LDAP traffic needs to be secured via TLS. Defaults to `false`.
     * 
     */
    public Optional<Boolean> ldapOverTlsEnabled() {
        return Optional.ofNullable(this.ldapOverTlsEnabled);
    }
    /**
     * @return Specifies whether or not the LDAP traffic needs to be signed. Defaults to `false`.
     * 
     */
    public Optional<Boolean> ldapSigningEnabled() {
        return Optional.ofNullable(this.ldapSigningEnabled);
    }
    /**
     * @return If enabled, NFS client local users can also (in addition to LDAP users) access the NFS volumes. Defaults to `false`.
     * 
     */
    public Optional<Boolean> localNfsUsersWithLdapAllowed() {
        return Optional.ofNullable(this.localNfsUsersWithLdapAllowed);
    }
    /**
     * @return The Organizational Unit (OU) within Active Directory where machines will be created. If blank, defaults to `CN=Computers`.
     * 
     */
    public Optional<String> organizationalUnit() {
        return Optional.ofNullable(this.organizationalUnit);
    }
    /**
     * @return The password associated with the `username`.
     * 
     */
    public String password() {
        return this.password;
    }
    /**
     * @return When LDAP over SSL/TLS is enabled, the LDAP client is required to have a *base64 encoded Active Directory Certificate Service&#39;s self-signed root CA certificate*, this optional parameter is used only for dual protocol with LDAP user-mapping volumes. Required if `ldapOverTlsEnabled` is set to `true`.
     * 
     */
    public Optional<String> serverRootCaCertificate() {
        return Optional.ofNullable(this.serverRootCaCertificate);
    }
    /**
     * @return The Active Directory site the service will limit Domain Controller discovery to. If blank, defaults to `Default-First-Site-Name`.
     * 
     */
    public Optional<String> siteName() {
        return Optional.ofNullable(this.siteName);
    }
    /**
     * @return The NetBIOS name which should be used for the NetApp SMB Server, which will be registered as a computer account in the AD and used to mount volumes.
     * 
     */
    public String smbServerName() {
        return this.smbServerName;
    }
    /**
     * @return The Username of Active Directory Domain Administrator.
     * 
     */
    public String username() {
        return this.username;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AccountActiveDirectory defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean aesEncryptionEnabled;
        private List<String> dnsServers;
        private String domain;
        private @Nullable String kerberosAdName;
        private @Nullable String kerberosKdcIp;
        private @Nullable Boolean ldapOverTlsEnabled;
        private @Nullable Boolean ldapSigningEnabled;
        private @Nullable Boolean localNfsUsersWithLdapAllowed;
        private @Nullable String organizationalUnit;
        private String password;
        private @Nullable String serverRootCaCertificate;
        private @Nullable String siteName;
        private String smbServerName;
        private String username;
        public Builder() {}
        public Builder(AccountActiveDirectory defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aesEncryptionEnabled = defaults.aesEncryptionEnabled;
    	      this.dnsServers = defaults.dnsServers;
    	      this.domain = defaults.domain;
    	      this.kerberosAdName = defaults.kerberosAdName;
    	      this.kerberosKdcIp = defaults.kerberosKdcIp;
    	      this.ldapOverTlsEnabled = defaults.ldapOverTlsEnabled;
    	      this.ldapSigningEnabled = defaults.ldapSigningEnabled;
    	      this.localNfsUsersWithLdapAllowed = defaults.localNfsUsersWithLdapAllowed;
    	      this.organizationalUnit = defaults.organizationalUnit;
    	      this.password = defaults.password;
    	      this.serverRootCaCertificate = defaults.serverRootCaCertificate;
    	      this.siteName = defaults.siteName;
    	      this.smbServerName = defaults.smbServerName;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder aesEncryptionEnabled(@Nullable Boolean aesEncryptionEnabled) {

            this.aesEncryptionEnabled = aesEncryptionEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder dnsServers(List<String> dnsServers) {
            if (dnsServers == null) {
              throw new MissingRequiredPropertyException("AccountActiveDirectory", "dnsServers");
            }
            this.dnsServers = dnsServers;
            return this;
        }
        public Builder dnsServers(String... dnsServers) {
            return dnsServers(List.of(dnsServers));
        }
        @CustomType.Setter
        public Builder domain(String domain) {
            if (domain == null) {
              throw new MissingRequiredPropertyException("AccountActiveDirectory", "domain");
            }
            this.domain = domain;
            return this;
        }
        @CustomType.Setter
        public Builder kerberosAdName(@Nullable String kerberosAdName) {

            this.kerberosAdName = kerberosAdName;
            return this;
        }
        @CustomType.Setter
        public Builder kerberosKdcIp(@Nullable String kerberosKdcIp) {

            this.kerberosKdcIp = kerberosKdcIp;
            return this;
        }
        @CustomType.Setter
        public Builder ldapOverTlsEnabled(@Nullable Boolean ldapOverTlsEnabled) {

            this.ldapOverTlsEnabled = ldapOverTlsEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder ldapSigningEnabled(@Nullable Boolean ldapSigningEnabled) {

            this.ldapSigningEnabled = ldapSigningEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder localNfsUsersWithLdapAllowed(@Nullable Boolean localNfsUsersWithLdapAllowed) {

            this.localNfsUsersWithLdapAllowed = localNfsUsersWithLdapAllowed;
            return this;
        }
        @CustomType.Setter
        public Builder organizationalUnit(@Nullable String organizationalUnit) {

            this.organizationalUnit = organizationalUnit;
            return this;
        }
        @CustomType.Setter
        public Builder password(String password) {
            if (password == null) {
              throw new MissingRequiredPropertyException("AccountActiveDirectory", "password");
            }
            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder serverRootCaCertificate(@Nullable String serverRootCaCertificate) {

            this.serverRootCaCertificate = serverRootCaCertificate;
            return this;
        }
        @CustomType.Setter
        public Builder siteName(@Nullable String siteName) {

            this.siteName = siteName;
            return this;
        }
        @CustomType.Setter
        public Builder smbServerName(String smbServerName) {
            if (smbServerName == null) {
              throw new MissingRequiredPropertyException("AccountActiveDirectory", "smbServerName");
            }
            this.smbServerName = smbServerName;
            return this;
        }
        @CustomType.Setter
        public Builder username(String username) {
            if (username == null) {
              throw new MissingRequiredPropertyException("AccountActiveDirectory", "username");
            }
            this.username = username;
            return this;
        }
        public AccountActiveDirectory build() {
            final var _resultValue = new AccountActiveDirectory();
            _resultValue.aesEncryptionEnabled = aesEncryptionEnabled;
            _resultValue.dnsServers = dnsServers;
            _resultValue.domain = domain;
            _resultValue.kerberosAdName = kerberosAdName;
            _resultValue.kerberosKdcIp = kerberosKdcIp;
            _resultValue.ldapOverTlsEnabled = ldapOverTlsEnabled;
            _resultValue.ldapSigningEnabled = ldapSigningEnabled;
            _resultValue.localNfsUsersWithLdapAllowed = localNfsUsersWithLdapAllowed;
            _resultValue.organizationalUnit = organizationalUnit;
            _resultValue.password = password;
            _resultValue.serverRootCaCertificate = serverRootCaCertificate;
            _resultValue.siteName = siteName;
            _resultValue.smbServerName = smbServerName;
            _resultValue.username = username;
            return _resultValue;
        }
    }
}
