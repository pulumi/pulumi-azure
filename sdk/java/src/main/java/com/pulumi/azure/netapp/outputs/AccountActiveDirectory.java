// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.netapp.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AccountActiveDirectory {
    /**
     * @return A list of DNS server IP addresses for the Active Directory domain. Only allows `IPv4` address.
     * 
     */
    private List<String> dnsServers;
    /**
     * @return The name of the Active Directory domain.
     * 
     */
    private String domain;
    /**
     * @return The Organizational Unit (OU) within the Active Directory Domain.
     * 
     */
    private @Nullable String organizationalUnit;
    /**
     * @return The password associated with the `username`.
     * 
     */
    private String password;
    /**
     * @return The NetBIOS name which should be used for the NetApp SMB Server, which will be registered as a computer account in the AD and used to mount volumes.
     * 
     */
    private String smbServerName;
    /**
     * @return The Username of Active Directory Domain Administrator.
     * 
     */
    private String username;

    private AccountActiveDirectory() {}
    /**
     * @return A list of DNS server IP addresses for the Active Directory domain. Only allows `IPv4` address.
     * 
     */
    public List<String> dnsServers() {
        return this.dnsServers;
    }
    /**
     * @return The name of the Active Directory domain.
     * 
     */
    public String domain() {
        return this.domain;
    }
    /**
     * @return The Organizational Unit (OU) within the Active Directory Domain.
     * 
     */
    public Optional<String> organizationalUnit() {
        return Optional.ofNullable(this.organizationalUnit);
    }
    /**
     * @return The password associated with the `username`.
     * 
     */
    public String password() {
        return this.password;
    }
    /**
     * @return The NetBIOS name which should be used for the NetApp SMB Server, which will be registered as a computer account in the AD and used to mount volumes.
     * 
     */
    public String smbServerName() {
        return this.smbServerName;
    }
    /**
     * @return The Username of Active Directory Domain Administrator.
     * 
     */
    public String username() {
        return this.username;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AccountActiveDirectory defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> dnsServers;
        private String domain;
        private @Nullable String organizationalUnit;
        private String password;
        private String smbServerName;
        private String username;
        public Builder() {}
        public Builder(AccountActiveDirectory defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dnsServers = defaults.dnsServers;
    	      this.domain = defaults.domain;
    	      this.organizationalUnit = defaults.organizationalUnit;
    	      this.password = defaults.password;
    	      this.smbServerName = defaults.smbServerName;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder dnsServers(List<String> dnsServers) {
            if (dnsServers == null) {
              throw new MissingRequiredPropertyException("AccountActiveDirectory", "dnsServers");
            }
            this.dnsServers = dnsServers;
            return this;
        }
        public Builder dnsServers(String... dnsServers) {
            return dnsServers(List.of(dnsServers));
        }
        @CustomType.Setter
        public Builder domain(String domain) {
            if (domain == null) {
              throw new MissingRequiredPropertyException("AccountActiveDirectory", "domain");
            }
            this.domain = domain;
            return this;
        }
        @CustomType.Setter
        public Builder organizationalUnit(@Nullable String organizationalUnit) {

            this.organizationalUnit = organizationalUnit;
            return this;
        }
        @CustomType.Setter
        public Builder password(String password) {
            if (password == null) {
              throw new MissingRequiredPropertyException("AccountActiveDirectory", "password");
            }
            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder smbServerName(String smbServerName) {
            if (smbServerName == null) {
              throw new MissingRequiredPropertyException("AccountActiveDirectory", "smbServerName");
            }
            this.smbServerName = smbServerName;
            return this;
        }
        @CustomType.Setter
        public Builder username(String username) {
            if (username == null) {
              throw new MissingRequiredPropertyException("AccountActiveDirectory", "username");
            }
            this.username = username;
            return this;
        }
        public AccountActiveDirectory build() {
            final var _resultValue = new AccountActiveDirectory();
            _resultValue.dnsServers = dnsServers;
            _resultValue.domain = domain;
            _resultValue.organizationalUnit = organizationalUnit;
            _resultValue.password = password;
            _resultValue.smbServerName = smbServerName;
            _resultValue.username = username;
            return _resultValue;
        }
    }
}
