// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.storage.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AccountAzureFilesAuthenticationActiveDirectoryArgs extends com.pulumi.resources.ResourceArgs {

    public static final AccountAzureFilesAuthenticationActiveDirectoryArgs Empty = new AccountAzureFilesAuthenticationActiveDirectoryArgs();

    /**
     * Specifies the domain GUID.
     * 
     */
    @Import(name="domainGuid", required=true)
    private Output<String> domainGuid;

    /**
     * @return Specifies the domain GUID.
     * 
     */
    public Output<String> domainGuid() {
        return this.domainGuid;
    }

    /**
     * Specifies the primary domain that the AD DNS server is authoritative for.
     * 
     */
    @Import(name="domainName", required=true)
    private Output<String> domainName;

    /**
     * @return Specifies the primary domain that the AD DNS server is authoritative for.
     * 
     */
    public Output<String> domainName() {
        return this.domainName;
    }

    /**
     * Specifies the security identifier (SID). This is required when `directory_type` is set to `AD`.
     * 
     */
    @Import(name="domainSid")
    private @Nullable Output<String> domainSid;

    /**
     * @return Specifies the security identifier (SID). This is required when `directory_type` is set to `AD`.
     * 
     */
    public Optional<Output<String>> domainSid() {
        return Optional.ofNullable(this.domainSid);
    }

    /**
     * Specifies the Active Directory forest. This is required when `directory_type` is set to `AD`.
     * 
     */
    @Import(name="forestName")
    private @Nullable Output<String> forestName;

    /**
     * @return Specifies the Active Directory forest. This is required when `directory_type` is set to `AD`.
     * 
     */
    public Optional<Output<String>> forestName() {
        return Optional.ofNullable(this.forestName);
    }

    /**
     * Specifies the NetBIOS domain name. This is required when `directory_type` is set to `AD`.
     * 
     */
    @Import(name="netbiosDomainName")
    private @Nullable Output<String> netbiosDomainName;

    /**
     * @return Specifies the NetBIOS domain name. This is required when `directory_type` is set to `AD`.
     * 
     */
    public Optional<Output<String>> netbiosDomainName() {
        return Optional.ofNullable(this.netbiosDomainName);
    }

    /**
     * Specifies the security identifier (SID) for Azure Storage. This is required when `directory_type` is set to `AD`.
     * 
     */
    @Import(name="storageSid")
    private @Nullable Output<String> storageSid;

    /**
     * @return Specifies the security identifier (SID) for Azure Storage. This is required when `directory_type` is set to `AD`.
     * 
     */
    public Optional<Output<String>> storageSid() {
        return Optional.ofNullable(this.storageSid);
    }

    private AccountAzureFilesAuthenticationActiveDirectoryArgs() {}

    private AccountAzureFilesAuthenticationActiveDirectoryArgs(AccountAzureFilesAuthenticationActiveDirectoryArgs $) {
        this.domainGuid = $.domainGuid;
        this.domainName = $.domainName;
        this.domainSid = $.domainSid;
        this.forestName = $.forestName;
        this.netbiosDomainName = $.netbiosDomainName;
        this.storageSid = $.storageSid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccountAzureFilesAuthenticationActiveDirectoryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccountAzureFilesAuthenticationActiveDirectoryArgs $;

        public Builder() {
            $ = new AccountAzureFilesAuthenticationActiveDirectoryArgs();
        }

        public Builder(AccountAzureFilesAuthenticationActiveDirectoryArgs defaults) {
            $ = new AccountAzureFilesAuthenticationActiveDirectoryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param domainGuid Specifies the domain GUID.
         * 
         * @return builder
         * 
         */
        public Builder domainGuid(Output<String> domainGuid) {
            $.domainGuid = domainGuid;
            return this;
        }

        /**
         * @param domainGuid Specifies the domain GUID.
         * 
         * @return builder
         * 
         */
        public Builder domainGuid(String domainGuid) {
            return domainGuid(Output.of(domainGuid));
        }

        /**
         * @param domainName Specifies the primary domain that the AD DNS server is authoritative for.
         * 
         * @return builder
         * 
         */
        public Builder domainName(Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        /**
         * @param domainName Specifies the primary domain that the AD DNS server is authoritative for.
         * 
         * @return builder
         * 
         */
        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        /**
         * @param domainSid Specifies the security identifier (SID). This is required when `directory_type` is set to `AD`.
         * 
         * @return builder
         * 
         */
        public Builder domainSid(@Nullable Output<String> domainSid) {
            $.domainSid = domainSid;
            return this;
        }

        /**
         * @param domainSid Specifies the security identifier (SID). This is required when `directory_type` is set to `AD`.
         * 
         * @return builder
         * 
         */
        public Builder domainSid(String domainSid) {
            return domainSid(Output.of(domainSid));
        }

        /**
         * @param forestName Specifies the Active Directory forest. This is required when `directory_type` is set to `AD`.
         * 
         * @return builder
         * 
         */
        public Builder forestName(@Nullable Output<String> forestName) {
            $.forestName = forestName;
            return this;
        }

        /**
         * @param forestName Specifies the Active Directory forest. This is required when `directory_type` is set to `AD`.
         * 
         * @return builder
         * 
         */
        public Builder forestName(String forestName) {
            return forestName(Output.of(forestName));
        }

        /**
         * @param netbiosDomainName Specifies the NetBIOS domain name. This is required when `directory_type` is set to `AD`.
         * 
         * @return builder
         * 
         */
        public Builder netbiosDomainName(@Nullable Output<String> netbiosDomainName) {
            $.netbiosDomainName = netbiosDomainName;
            return this;
        }

        /**
         * @param netbiosDomainName Specifies the NetBIOS domain name. This is required when `directory_type` is set to `AD`.
         * 
         * @return builder
         * 
         */
        public Builder netbiosDomainName(String netbiosDomainName) {
            return netbiosDomainName(Output.of(netbiosDomainName));
        }

        /**
         * @param storageSid Specifies the security identifier (SID) for Azure Storage. This is required when `directory_type` is set to `AD`.
         * 
         * @return builder
         * 
         */
        public Builder storageSid(@Nullable Output<String> storageSid) {
            $.storageSid = storageSid;
            return this;
        }

        /**
         * @param storageSid Specifies the security identifier (SID) for Azure Storage. This is required when `directory_type` is set to `AD`.
         * 
         * @return builder
         * 
         */
        public Builder storageSid(String storageSid) {
            return storageSid(Output.of(storageSid));
        }

        public AccountAzureFilesAuthenticationActiveDirectoryArgs build() {
            if ($.domainGuid == null) {
                throw new MissingRequiredPropertyException("AccountAzureFilesAuthenticationActiveDirectoryArgs", "domainGuid");
            }
            if ($.domainName == null) {
                throw new MissingRequiredPropertyException("AccountAzureFilesAuthenticationActiveDirectoryArgs", "domainName");
            }
            return $;
        }
    }

}
