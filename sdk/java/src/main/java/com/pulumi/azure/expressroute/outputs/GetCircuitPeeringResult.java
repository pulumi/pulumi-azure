// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.expressroute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetCircuitPeeringResult {
    /**
     * @return The ASN used by Azure for the peering.
     * 
     */
    private Integer azureAsn;
    private String expressRouteCircuitName;
    private String gatewayManagerEtag;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Indicates if IPv4 is enabled.
     * 
     */
    private Boolean ipv4Enabled;
    private Integer peerAsn;
    /**
     * @return The type of the ExpressRoute Circuit Peering.
     * 
     */
    private String peeringType;
    /**
     * @return The primary port used by Azure for this peering.
     * 
     */
    private String primaryAzurePort;
    /**
     * @return The primary peer address prefix.
     * 
     */
    private String primaryPeerAddressPrefix;
    private String resourceGroupName;
    private String routeFilterId;
    /**
     * @return The secondary port used by Azure for this peering.
     * 
     */
    private String secondaryAzurePort;
    /**
     * @return The secondary peer address prefix.
     * 
     */
    private String secondaryPeerAddressPrefix;
    private String sharedKey;
    /**
     * @return The VLAN ID used for this peering.
     * 
     */
    private Integer vlanId;

    private GetCircuitPeeringResult() {}
    /**
     * @return The ASN used by Azure for the peering.
     * 
     */
    public Integer azureAsn() {
        return this.azureAsn;
    }
    public String expressRouteCircuitName() {
        return this.expressRouteCircuitName;
    }
    public String gatewayManagerEtag() {
        return this.gatewayManagerEtag;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Indicates if IPv4 is enabled.
     * 
     */
    public Boolean ipv4Enabled() {
        return this.ipv4Enabled;
    }
    public Integer peerAsn() {
        return this.peerAsn;
    }
    /**
     * @return The type of the ExpressRoute Circuit Peering.
     * 
     */
    public String peeringType() {
        return this.peeringType;
    }
    /**
     * @return The primary port used by Azure for this peering.
     * 
     */
    public String primaryAzurePort() {
        return this.primaryAzurePort;
    }
    /**
     * @return The primary peer address prefix.
     * 
     */
    public String primaryPeerAddressPrefix() {
        return this.primaryPeerAddressPrefix;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    public String routeFilterId() {
        return this.routeFilterId;
    }
    /**
     * @return The secondary port used by Azure for this peering.
     * 
     */
    public String secondaryAzurePort() {
        return this.secondaryAzurePort;
    }
    /**
     * @return The secondary peer address prefix.
     * 
     */
    public String secondaryPeerAddressPrefix() {
        return this.secondaryPeerAddressPrefix;
    }
    public String sharedKey() {
        return this.sharedKey;
    }
    /**
     * @return The VLAN ID used for this peering.
     * 
     */
    public Integer vlanId() {
        return this.vlanId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCircuitPeeringResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer azureAsn;
        private String expressRouteCircuitName;
        private String gatewayManagerEtag;
        private String id;
        private Boolean ipv4Enabled;
        private Integer peerAsn;
        private String peeringType;
        private String primaryAzurePort;
        private String primaryPeerAddressPrefix;
        private String resourceGroupName;
        private String routeFilterId;
        private String secondaryAzurePort;
        private String secondaryPeerAddressPrefix;
        private String sharedKey;
        private Integer vlanId;
        public Builder() {}
        public Builder(GetCircuitPeeringResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.azureAsn = defaults.azureAsn;
    	      this.expressRouteCircuitName = defaults.expressRouteCircuitName;
    	      this.gatewayManagerEtag = defaults.gatewayManagerEtag;
    	      this.id = defaults.id;
    	      this.ipv4Enabled = defaults.ipv4Enabled;
    	      this.peerAsn = defaults.peerAsn;
    	      this.peeringType = defaults.peeringType;
    	      this.primaryAzurePort = defaults.primaryAzurePort;
    	      this.primaryPeerAddressPrefix = defaults.primaryPeerAddressPrefix;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.routeFilterId = defaults.routeFilterId;
    	      this.secondaryAzurePort = defaults.secondaryAzurePort;
    	      this.secondaryPeerAddressPrefix = defaults.secondaryPeerAddressPrefix;
    	      this.sharedKey = defaults.sharedKey;
    	      this.vlanId = defaults.vlanId;
        }

        @CustomType.Setter
        public Builder azureAsn(Integer azureAsn) {
            if (azureAsn == null) {
              throw new MissingRequiredPropertyException("GetCircuitPeeringResult", "azureAsn");
            }
            this.azureAsn = azureAsn;
            return this;
        }
        @CustomType.Setter
        public Builder expressRouteCircuitName(String expressRouteCircuitName) {
            if (expressRouteCircuitName == null) {
              throw new MissingRequiredPropertyException("GetCircuitPeeringResult", "expressRouteCircuitName");
            }
            this.expressRouteCircuitName = expressRouteCircuitName;
            return this;
        }
        @CustomType.Setter
        public Builder gatewayManagerEtag(String gatewayManagerEtag) {
            if (gatewayManagerEtag == null) {
              throw new MissingRequiredPropertyException("GetCircuitPeeringResult", "gatewayManagerEtag");
            }
            this.gatewayManagerEtag = gatewayManagerEtag;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetCircuitPeeringResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4Enabled(Boolean ipv4Enabled) {
            if (ipv4Enabled == null) {
              throw new MissingRequiredPropertyException("GetCircuitPeeringResult", "ipv4Enabled");
            }
            this.ipv4Enabled = ipv4Enabled;
            return this;
        }
        @CustomType.Setter
        public Builder peerAsn(Integer peerAsn) {
            if (peerAsn == null) {
              throw new MissingRequiredPropertyException("GetCircuitPeeringResult", "peerAsn");
            }
            this.peerAsn = peerAsn;
            return this;
        }
        @CustomType.Setter
        public Builder peeringType(String peeringType) {
            if (peeringType == null) {
              throw new MissingRequiredPropertyException("GetCircuitPeeringResult", "peeringType");
            }
            this.peeringType = peeringType;
            return this;
        }
        @CustomType.Setter
        public Builder primaryAzurePort(String primaryAzurePort) {
            if (primaryAzurePort == null) {
              throw new MissingRequiredPropertyException("GetCircuitPeeringResult", "primaryAzurePort");
            }
            this.primaryAzurePort = primaryAzurePort;
            return this;
        }
        @CustomType.Setter
        public Builder primaryPeerAddressPrefix(String primaryPeerAddressPrefix) {
            if (primaryPeerAddressPrefix == null) {
              throw new MissingRequiredPropertyException("GetCircuitPeeringResult", "primaryPeerAddressPrefix");
            }
            this.primaryPeerAddressPrefix = primaryPeerAddressPrefix;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            if (resourceGroupName == null) {
              throw new MissingRequiredPropertyException("GetCircuitPeeringResult", "resourceGroupName");
            }
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder routeFilterId(String routeFilterId) {
            if (routeFilterId == null) {
              throw new MissingRequiredPropertyException("GetCircuitPeeringResult", "routeFilterId");
            }
            this.routeFilterId = routeFilterId;
            return this;
        }
        @CustomType.Setter
        public Builder secondaryAzurePort(String secondaryAzurePort) {
            if (secondaryAzurePort == null) {
              throw new MissingRequiredPropertyException("GetCircuitPeeringResult", "secondaryAzurePort");
            }
            this.secondaryAzurePort = secondaryAzurePort;
            return this;
        }
        @CustomType.Setter
        public Builder secondaryPeerAddressPrefix(String secondaryPeerAddressPrefix) {
            if (secondaryPeerAddressPrefix == null) {
              throw new MissingRequiredPropertyException("GetCircuitPeeringResult", "secondaryPeerAddressPrefix");
            }
            this.secondaryPeerAddressPrefix = secondaryPeerAddressPrefix;
            return this;
        }
        @CustomType.Setter
        public Builder sharedKey(String sharedKey) {
            if (sharedKey == null) {
              throw new MissingRequiredPropertyException("GetCircuitPeeringResult", "sharedKey");
            }
            this.sharedKey = sharedKey;
            return this;
        }
        @CustomType.Setter
        public Builder vlanId(Integer vlanId) {
            if (vlanId == null) {
              throw new MissingRequiredPropertyException("GetCircuitPeeringResult", "vlanId");
            }
            this.vlanId = vlanId;
            return this;
        }
        public GetCircuitPeeringResult build() {
            final var _resultValue = new GetCircuitPeeringResult();
            _resultValue.azureAsn = azureAsn;
            _resultValue.expressRouteCircuitName = expressRouteCircuitName;
            _resultValue.gatewayManagerEtag = gatewayManagerEtag;
            _resultValue.id = id;
            _resultValue.ipv4Enabled = ipv4Enabled;
            _resultValue.peerAsn = peerAsn;
            _resultValue.peeringType = peeringType;
            _resultValue.primaryAzurePort = primaryAzurePort;
            _resultValue.primaryPeerAddressPrefix = primaryPeerAddressPrefix;
            _resultValue.resourceGroupName = resourceGroupName;
            _resultValue.routeFilterId = routeFilterId;
            _resultValue.secondaryAzurePort = secondaryAzurePort;
            _resultValue.secondaryPeerAddressPrefix = secondaryPeerAddressPrefix;
            _resultValue.sharedKey = sharedKey;
            _resultValue.vlanId = vlanId;
            return _resultValue;
        }
    }
}
