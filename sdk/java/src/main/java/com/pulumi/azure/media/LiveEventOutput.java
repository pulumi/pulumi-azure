// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.media;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.media.LiveEventOutputArgs;
import com.pulumi.azure.media.inputs.LiveEventOutputState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a Azure Media Live Event Output.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.storage.Account;
 * import com.pulumi.azure.storage.AccountArgs;
 * import com.pulumi.azure.media.ServiceAccount;
 * import com.pulumi.azure.media.ServiceAccountArgs;
 * import com.pulumi.azure.media.inputs.ServiceAccountStorageAccountArgs;
 * import com.pulumi.azure.media.Asset;
 * import com.pulumi.azure.media.AssetArgs;
 * import com.pulumi.azure.media.LiveEvent;
 * import com.pulumi.azure.media.LiveEventArgs;
 * import com.pulumi.azure.media.inputs.LiveEventInputArgs;
 * import com.pulumi.azure.media.LiveEventOutput;
 * import com.pulumi.azure.media.LiveEventOutputArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampleResourceGroup = new ResourceGroup(&#34;exampleResourceGroup&#34;, ResourceGroupArgs.builder()        
 *             .location(&#34;West Europe&#34;)
 *             .build());
 * 
 *         var exampleAccount = new Account(&#34;exampleAccount&#34;, AccountArgs.builder()        
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .location(exampleResourceGroup.location())
 *             .accountTier(&#34;Standard&#34;)
 *             .accountReplicationType(&#34;GRS&#34;)
 *             .build());
 * 
 *         var exampleServiceAccount = new ServiceAccount(&#34;exampleServiceAccount&#34;, ServiceAccountArgs.builder()        
 *             .location(exampleResourceGroup.location())
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .storageAccounts(ServiceAccountStorageAccountArgs.builder()
 *                 .id(exampleAccount.id())
 *                 .isPrimary(true)
 *                 .build())
 *             .build());
 * 
 *         var exampleAsset = new Asset(&#34;exampleAsset&#34;, AssetArgs.builder()        
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .mediaServicesAccountName(exampleServiceAccount.name())
 *             .build());
 * 
 *         var exampleLiveEvent = new LiveEvent(&#34;exampleLiveEvent&#34;, LiveEventArgs.builder()        
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .location(exampleResourceGroup.location())
 *             .mediaServicesAccountName(exampleServiceAccount.name())
 *             .description(&#34;My Event Description&#34;)
 *             .input(LiveEventInputArgs.builder()
 *                 .streamingProtocol(&#34;RTMP&#34;)
 *                 .keyFrameIntervalDuration(&#34;PT6S&#34;)
 *                 .ipAccessControlAllows(LiveEventInputIpAccessControlAllowArgs.builder()
 *                     .name(&#34;AllowAll&#34;)
 *                     .address(&#34;0.0.0.0&#34;)
 *                     .subnetPrefixLength(0)
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var exampleLiveEventOutput = new LiveEventOutput(&#34;exampleLiveEventOutput&#34;, LiveEventOutputArgs.builder()        
 *             .liveEventId(exampleLiveEvent.id())
 *             .archiveWindowDuration(&#34;PT5M&#34;)
 *             .assetName(exampleAsset.name())
 *             .description(&#34;Test live output 1&#34;)
 *             .manifestName(&#34;testmanifest&#34;)
 *             .outputSnapTimeInSeconds(0)
 *             .hlsFragmentsPerTsSegment(5)
 *             .rewindWindowDuration(&#34;PT5M&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Live Outputs can be imported using the `resource id`, e.g.
 * 
 * ```sh
 *  $ pulumi import azure:media/liveEventOutput:LiveEventOutput example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Media/mediaServices/account1/liveEvents/event1/liveOutputs/output1
 * ```
 * 
 */
@ResourceType(type="azure:media/liveEventOutput:LiveEventOutput")
public class LiveEventOutput extends com.pulumi.resources.CustomResource {
    /**
     * `ISO 8601` time between 1 minute to 25 hours to indicate the maximum content length that can be archived in the asset for this live output. This also sets the maximum content length for the rewind window. For example, use `PT1H30M` to indicate 1 hour and 30 minutes of archive window. Changing this forces a new Live Output to be created.
     * 
     */
    @Export(name="archiveWindowDuration", refs={String.class}, tree="[0]")
    private Output<String> archiveWindowDuration;

    /**
     * @return `ISO 8601` time between 1 minute to 25 hours to indicate the maximum content length that can be archived in the asset for this live output. This also sets the maximum content length for the rewind window. For example, use `PT1H30M` to indicate 1 hour and 30 minutes of archive window. Changing this forces a new Live Output to be created.
     * 
     */
    public Output<String> archiveWindowDuration() {
        return this.archiveWindowDuration;
    }
    /**
     * The asset that the live output will write to. Changing this forces a new Live Output to be created.
     * 
     */
    @Export(name="assetName", refs={String.class}, tree="[0]")
    private Output<String> assetName;

    /**
     * @return The asset that the live output will write to. Changing this forces a new Live Output to be created.
     * 
     */
    public Output<String> assetName() {
        return this.assetName;
    }
    /**
     * The description of the live output. Changing this forces a new Live Output to be created.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return The description of the live output. Changing this forces a new Live Output to be created.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * The number of fragments in an HTTP Live Streaming (HLS) TS segment in the output of the live event. This value does not affect the packing ratio for HLS CMAF output. Changing this forces a new Live Output to be created.
     * 
     */
    @Export(name="hlsFragmentsPerTsSegment", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> hlsFragmentsPerTsSegment;

    /**
     * @return The number of fragments in an HTTP Live Streaming (HLS) TS segment in the output of the live event. This value does not affect the packing ratio for HLS CMAF output. Changing this forces a new Live Output to be created.
     * 
     */
    public Output<Optional<Integer>> hlsFragmentsPerTsSegment() {
        return Codegen.optional(this.hlsFragmentsPerTsSegment);
    }
    /**
     * The id of the live event. Changing this forces a new Live Output to be created.
     * 
     */
    @Export(name="liveEventId", refs={String.class}, tree="[0]")
    private Output<String> liveEventId;

    /**
     * @return The id of the live event. Changing this forces a new Live Output to be created.
     * 
     */
    public Output<String> liveEventId() {
        return this.liveEventId;
    }
    /**
     * The manifest file name. If not provided, the service will generate one automatically. Changing this forces a new Live Output to be created.
     * 
     */
    @Export(name="manifestName", refs={String.class}, tree="[0]")
    private Output<String> manifestName;

    /**
     * @return The manifest file name. If not provided, the service will generate one automatically. Changing this forces a new Live Output to be created.
     * 
     */
    public Output<String> manifestName() {
        return this.manifestName;
    }
    /**
     * The name which should be used for this Live Event Output. Changing this forces a new Live Output to be created.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name which should be used for this Live Event Output. Changing this forces a new Live Output to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The initial timestamp that the live output will start at, any content before this value will not be archived. Changing this forces a new Live Output to be created.
     * 
     */
    @Export(name="outputSnapTimeInSeconds", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> outputSnapTimeInSeconds;

    /**
     * @return The initial timestamp that the live output will start at, any content before this value will not be archived. Changing this forces a new Live Output to be created.
     * 
     */
    public Output<Optional<Integer>> outputSnapTimeInSeconds() {
        return Codegen.optional(this.outputSnapTimeInSeconds);
    }
    /**
     * `ISO 8601` time between 1 minute to the duration of `archive_window_duration` to control seek-able window length during Live. The service won&#39;t use this property once LiveOutput stops. The archived VOD will have full content with original ArchiveWindowLength. For example, use `PT1H30M` to indicate 1 hour and 30 minutes of rewind window length. Service will use implicit default value 30m only if Live Event enables LL. Changing this forces a new Live Output to be created.
     * 
     */
    @Export(name="rewindWindowDuration", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> rewindWindowDuration;

    /**
     * @return `ISO 8601` time between 1 minute to the duration of `archive_window_duration` to control seek-able window length during Live. The service won&#39;t use this property once LiveOutput stops. The archived VOD will have full content with original ArchiveWindowLength. For example, use `PT1H30M` to indicate 1 hour and 30 minutes of rewind window length. Service will use implicit default value 30m only if Live Event enables LL. Changing this forces a new Live Output to be created.
     * 
     */
    public Output<Optional<String>> rewindWindowDuration() {
        return Codegen.optional(this.rewindWindowDuration);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public LiveEventOutput(String name) {
        this(name, LiveEventOutputArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public LiveEventOutput(String name, LiveEventOutputArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public LiveEventOutput(String name, LiveEventOutputArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:media/liveEventOutput:LiveEventOutput", name, args == null ? LiveEventOutputArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private LiveEventOutput(String name, Output<String> id, @Nullable LiveEventOutputState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:media/liveEventOutput:LiveEventOutput", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static LiveEventOutput get(String name, Output<String> id, @Nullable LiveEventOutputState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new LiveEventOutput(name, id, state, options);
    }
}
