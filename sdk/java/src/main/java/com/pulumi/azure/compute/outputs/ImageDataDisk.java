// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ImageDataDisk {
    /**
     * @return Specifies the URI in Azure storage of the blob that you want to use to create the image.
     * 
     */
    private final @Nullable String blobUri;
    /**
     * @return Specifies the caching mode as `ReadWrite`, `ReadOnly`, or `None`. The default is `None`.
     * 
     */
    private final @Nullable String caching;
    /**
     * @return Specifies the logical unit number of the data disk.
     * 
     */
    private final @Nullable Integer lun;
    /**
     * @return Specifies the ID of the managed disk resource that you want to use to create the image.
     * 
     */
    private final @Nullable String managedDiskId;
    /**
     * @return Specifies the size of the image to be created. The target size can&#39;t be smaller than the source size.
     * 
     */
    private final @Nullable Integer sizeGb;

    @CustomType.Constructor
    private ImageDataDisk(
        @CustomType.Parameter("blobUri") @Nullable String blobUri,
        @CustomType.Parameter("caching") @Nullable String caching,
        @CustomType.Parameter("lun") @Nullable Integer lun,
        @CustomType.Parameter("managedDiskId") @Nullable String managedDiskId,
        @CustomType.Parameter("sizeGb") @Nullable Integer sizeGb) {
        this.blobUri = blobUri;
        this.caching = caching;
        this.lun = lun;
        this.managedDiskId = managedDiskId;
        this.sizeGb = sizeGb;
    }

    /**
     * @return Specifies the URI in Azure storage of the blob that you want to use to create the image.
     * 
     */
    public Optional<String> blobUri() {
        return Optional.ofNullable(this.blobUri);
    }
    /**
     * @return Specifies the caching mode as `ReadWrite`, `ReadOnly`, or `None`. The default is `None`.
     * 
     */
    public Optional<String> caching() {
        return Optional.ofNullable(this.caching);
    }
    /**
     * @return Specifies the logical unit number of the data disk.
     * 
     */
    public Optional<Integer> lun() {
        return Optional.ofNullable(this.lun);
    }
    /**
     * @return Specifies the ID of the managed disk resource that you want to use to create the image.
     * 
     */
    public Optional<String> managedDiskId() {
        return Optional.ofNullable(this.managedDiskId);
    }
    /**
     * @return Specifies the size of the image to be created. The target size can&#39;t be smaller than the source size.
     * 
     */
    public Optional<Integer> sizeGb() {
        return Optional.ofNullable(this.sizeGb);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ImageDataDisk defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String blobUri;
        private @Nullable String caching;
        private @Nullable Integer lun;
        private @Nullable String managedDiskId;
        private @Nullable Integer sizeGb;

        public Builder() {
    	      // Empty
        }

        public Builder(ImageDataDisk defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.blobUri = defaults.blobUri;
    	      this.caching = defaults.caching;
    	      this.lun = defaults.lun;
    	      this.managedDiskId = defaults.managedDiskId;
    	      this.sizeGb = defaults.sizeGb;
        }

        public Builder blobUri(@Nullable String blobUri) {
            this.blobUri = blobUri;
            return this;
        }
        public Builder caching(@Nullable String caching) {
            this.caching = caching;
            return this;
        }
        public Builder lun(@Nullable Integer lun) {
            this.lun = lun;
            return this;
        }
        public Builder managedDiskId(@Nullable String managedDiskId) {
            this.managedDiskId = managedDiskId;
            return this;
        }
        public Builder sizeGb(@Nullable Integer sizeGb) {
            this.sizeGb = sizeGb;
            return this;
        }        public ImageDataDisk build() {
            return new ImageDataDisk(blobUri, caching, lun, managedDiskId, sizeGb);
        }
    }
}
