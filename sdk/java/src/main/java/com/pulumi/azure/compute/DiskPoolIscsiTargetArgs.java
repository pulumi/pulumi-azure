// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.compute;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DiskPoolIscsiTargetArgs extends com.pulumi.resources.ResourceArgs {

    public static final DiskPoolIscsiTargetArgs Empty = new DiskPoolIscsiTargetArgs();

    /**
     * Mode for Target connectivity. The only supported value is `Dynamic` for now. Changing this forces a new iSCSI Target to be created.
     * 
     */
    @Import(name="aclMode", required=true)
    private Output<String> aclMode;

    /**
     * @return Mode for Target connectivity. The only supported value is `Dynamic` for now. Changing this forces a new iSCSI Target to be created.
     * 
     */
    public Output<String> aclMode() {
        return this.aclMode;
    }

    /**
     * The ID of the Disk Pool. Changing this forces a new iSCSI Target to be created.
     * 
     */
    @Import(name="disksPoolId", required=true)
    private Output<String> disksPoolId;

    /**
     * @return The ID of the Disk Pool. Changing this forces a new iSCSI Target to be created.
     * 
     */
    public Output<String> disksPoolId() {
        return this.disksPoolId;
    }

    /**
     * The name of the iSCSI Target. The name can only contain lowercase letters, numbers, periods, or hyphens, and length should between [5-223]. Changing this forces a new iSCSI Target to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the iSCSI Target. The name can only contain lowercase letters, numbers, periods, or hyphens, and length should between [5-223]. Changing this forces a new iSCSI Target to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * ISCSI Target IQN (iSCSI Qualified Name); example: `iqn.2005-03.org.iscsi:server`. IQN should follow the format `iqn.yyyy-mm.&lt;abc&gt;.&lt;pqr&gt;[:xyz]`; supported characters include alphanumeric characters in lower case, hyphen, dot and colon, and the length should between `4` and `223`. Changing this forces a new iSCSI Target to be created.
     * 
     */
    @Import(name="targetIqn")
    private @Nullable Output<String> targetIqn;

    /**
     * @return ISCSI Target IQN (iSCSI Qualified Name); example: `iqn.2005-03.org.iscsi:server`. IQN should follow the format `iqn.yyyy-mm.&lt;abc&gt;.&lt;pqr&gt;[:xyz]`; supported characters include alphanumeric characters in lower case, hyphen, dot and colon, and the length should between `4` and `223`. Changing this forces a new iSCSI Target to be created.
     * 
     */
    public Optional<Output<String>> targetIqn() {
        return Optional.ofNullable(this.targetIqn);
    }

    private DiskPoolIscsiTargetArgs() {}

    private DiskPoolIscsiTargetArgs(DiskPoolIscsiTargetArgs $) {
        this.aclMode = $.aclMode;
        this.disksPoolId = $.disksPoolId;
        this.name = $.name;
        this.targetIqn = $.targetIqn;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DiskPoolIscsiTargetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DiskPoolIscsiTargetArgs $;

        public Builder() {
            $ = new DiskPoolIscsiTargetArgs();
        }

        public Builder(DiskPoolIscsiTargetArgs defaults) {
            $ = new DiskPoolIscsiTargetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param aclMode Mode for Target connectivity. The only supported value is `Dynamic` for now. Changing this forces a new iSCSI Target to be created.
         * 
         * @return builder
         * 
         */
        public Builder aclMode(Output<String> aclMode) {
            $.aclMode = aclMode;
            return this;
        }

        /**
         * @param aclMode Mode for Target connectivity. The only supported value is `Dynamic` for now. Changing this forces a new iSCSI Target to be created.
         * 
         * @return builder
         * 
         */
        public Builder aclMode(String aclMode) {
            return aclMode(Output.of(aclMode));
        }

        /**
         * @param disksPoolId The ID of the Disk Pool. Changing this forces a new iSCSI Target to be created.
         * 
         * @return builder
         * 
         */
        public Builder disksPoolId(Output<String> disksPoolId) {
            $.disksPoolId = disksPoolId;
            return this;
        }

        /**
         * @param disksPoolId The ID of the Disk Pool. Changing this forces a new iSCSI Target to be created.
         * 
         * @return builder
         * 
         */
        public Builder disksPoolId(String disksPoolId) {
            return disksPoolId(Output.of(disksPoolId));
        }

        /**
         * @param name The name of the iSCSI Target. The name can only contain lowercase letters, numbers, periods, or hyphens, and length should between [5-223]. Changing this forces a new iSCSI Target to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the iSCSI Target. The name can only contain lowercase letters, numbers, periods, or hyphens, and length should between [5-223]. Changing this forces a new iSCSI Target to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param targetIqn ISCSI Target IQN (iSCSI Qualified Name); example: `iqn.2005-03.org.iscsi:server`. IQN should follow the format `iqn.yyyy-mm.&lt;abc&gt;.&lt;pqr&gt;[:xyz]`; supported characters include alphanumeric characters in lower case, hyphen, dot and colon, and the length should between `4` and `223`. Changing this forces a new iSCSI Target to be created.
         * 
         * @return builder
         * 
         */
        public Builder targetIqn(@Nullable Output<String> targetIqn) {
            $.targetIqn = targetIqn;
            return this;
        }

        /**
         * @param targetIqn ISCSI Target IQN (iSCSI Qualified Name); example: `iqn.2005-03.org.iscsi:server`. IQN should follow the format `iqn.yyyy-mm.&lt;abc&gt;.&lt;pqr&gt;[:xyz]`; supported characters include alphanumeric characters in lower case, hyphen, dot and colon, and the length should between `4` and `223`. Changing this forces a new iSCSI Target to be created.
         * 
         * @return builder
         * 
         */
        public Builder targetIqn(String targetIqn) {
            return targetIqn(Output.of(targetIqn));
        }

        public DiskPoolIscsiTargetArgs build() {
            if ($.aclMode == null) {
                throw new MissingRequiredPropertyException("DiskPoolIscsiTargetArgs", "aclMode");
            }
            if ($.disksPoolId == null) {
                throw new MissingRequiredPropertyException("DiskPoolIscsiTargetArgs", "disksPoolId");
            }
            return $;
        }
    }

}
