// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.elasticsan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetVolumeGroupEncryption {
    /**
     * @return The timestamp of the expiration time for the current version of the Customer Managed Key.
     * 
     */
    private String currentVersionedKeyExpirationTimestamp;
    /**
     * @return The ID of the current versioned Key Vault Key in use.
     * 
     */
    private String currentVersionedKeyId;
    /**
     * @return The Key Vault Key URI for Customer Managed Key encryption, which can be either a full URI or a versionless URI.
     * 
     */
    private String keyVaultKeyId;
    /**
     * @return The timestamp of the last rotation of the Key Vault Key.
     * 
     */
    private String lastKeyRotationTimestamp;
    /**
     * @return The ID of the User Assigned Identity used by this Elastic SAN Volume Group.
     * 
     */
    private String userAssignedIdentityId;

    private GetVolumeGroupEncryption() {}
    /**
     * @return The timestamp of the expiration time for the current version of the Customer Managed Key.
     * 
     */
    public String currentVersionedKeyExpirationTimestamp() {
        return this.currentVersionedKeyExpirationTimestamp;
    }
    /**
     * @return The ID of the current versioned Key Vault Key in use.
     * 
     */
    public String currentVersionedKeyId() {
        return this.currentVersionedKeyId;
    }
    /**
     * @return The Key Vault Key URI for Customer Managed Key encryption, which can be either a full URI or a versionless URI.
     * 
     */
    public String keyVaultKeyId() {
        return this.keyVaultKeyId;
    }
    /**
     * @return The timestamp of the last rotation of the Key Vault Key.
     * 
     */
    public String lastKeyRotationTimestamp() {
        return this.lastKeyRotationTimestamp;
    }
    /**
     * @return The ID of the User Assigned Identity used by this Elastic SAN Volume Group.
     * 
     */
    public String userAssignedIdentityId() {
        return this.userAssignedIdentityId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVolumeGroupEncryption defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String currentVersionedKeyExpirationTimestamp;
        private String currentVersionedKeyId;
        private String keyVaultKeyId;
        private String lastKeyRotationTimestamp;
        private String userAssignedIdentityId;
        public Builder() {}
        public Builder(GetVolumeGroupEncryption defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.currentVersionedKeyExpirationTimestamp = defaults.currentVersionedKeyExpirationTimestamp;
    	      this.currentVersionedKeyId = defaults.currentVersionedKeyId;
    	      this.keyVaultKeyId = defaults.keyVaultKeyId;
    	      this.lastKeyRotationTimestamp = defaults.lastKeyRotationTimestamp;
    	      this.userAssignedIdentityId = defaults.userAssignedIdentityId;
        }

        @CustomType.Setter
        public Builder currentVersionedKeyExpirationTimestamp(String currentVersionedKeyExpirationTimestamp) {
            if (currentVersionedKeyExpirationTimestamp == null) {
              throw new MissingRequiredPropertyException("GetVolumeGroupEncryption", "currentVersionedKeyExpirationTimestamp");
            }
            this.currentVersionedKeyExpirationTimestamp = currentVersionedKeyExpirationTimestamp;
            return this;
        }
        @CustomType.Setter
        public Builder currentVersionedKeyId(String currentVersionedKeyId) {
            if (currentVersionedKeyId == null) {
              throw new MissingRequiredPropertyException("GetVolumeGroupEncryption", "currentVersionedKeyId");
            }
            this.currentVersionedKeyId = currentVersionedKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder keyVaultKeyId(String keyVaultKeyId) {
            if (keyVaultKeyId == null) {
              throw new MissingRequiredPropertyException("GetVolumeGroupEncryption", "keyVaultKeyId");
            }
            this.keyVaultKeyId = keyVaultKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder lastKeyRotationTimestamp(String lastKeyRotationTimestamp) {
            if (lastKeyRotationTimestamp == null) {
              throw new MissingRequiredPropertyException("GetVolumeGroupEncryption", "lastKeyRotationTimestamp");
            }
            this.lastKeyRotationTimestamp = lastKeyRotationTimestamp;
            return this;
        }
        @CustomType.Setter
        public Builder userAssignedIdentityId(String userAssignedIdentityId) {
            if (userAssignedIdentityId == null) {
              throw new MissingRequiredPropertyException("GetVolumeGroupEncryption", "userAssignedIdentityId");
            }
            this.userAssignedIdentityId = userAssignedIdentityId;
            return this;
        }
        public GetVolumeGroupEncryption build() {
            final var _resultValue = new GetVolumeGroupEncryption();
            _resultValue.currentVersionedKeyExpirationTimestamp = currentVersionedKeyExpirationTimestamp;
            _resultValue.currentVersionedKeyId = currentVersionedKeyId;
            _resultValue.keyVaultKeyId = keyVaultKeyId;
            _resultValue.lastKeyRotationTimestamp = lastKeyRotationTimestamp;
            _resultValue.userAssignedIdentityId = userAssignedIdentityId;
            return _resultValue;
        }
    }
}
