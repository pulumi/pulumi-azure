// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.cosmosdb.inputs;

import com.pulumi.azure.cosmosdb.inputs.MongoCollectionAutoscaleSettingsArgs;
import com.pulumi.azure.cosmosdb.inputs.MongoCollectionIndexArgs;
import com.pulumi.azure.cosmosdb.inputs.MongoCollectionSystemIndexArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MongoCollectionState extends com.pulumi.resources.ResourceArgs {

    public static final MongoCollectionState Empty = new MongoCollectionState();

    @Import(name="accountName")
    private @Nullable Output<String> accountName;

    public Optional<Output<String>> accountName() {
        return Optional.ofNullable(this.accountName);
    }

    /**
     * The default time to live of Analytical Storage for this Mongo Collection. If present and the value is set to `-1`, it is equal to infinity, and items don’t expire by default. If present and the value is set to some number `n` – items will expire `n` seconds after their last modified time.
     * 
     */
    @Import(name="analyticalStorageTtl")
    private @Nullable Output<Integer> analyticalStorageTtl;

    /**
     * @return The default time to live of Analytical Storage for this Mongo Collection. If present and the value is set to `-1`, it is equal to infinity, and items don’t expire by default. If present and the value is set to some number `n` – items will expire `n` seconds after their last modified time.
     * 
     */
    public Optional<Output<Integer>> analyticalStorageTtl() {
        return Optional.ofNullable(this.analyticalStorageTtl);
    }

    @Import(name="autoscaleSettings")
    private @Nullable Output<MongoCollectionAutoscaleSettingsArgs> autoscaleSettings;

    public Optional<Output<MongoCollectionAutoscaleSettingsArgs>> autoscaleSettings() {
        return Optional.ofNullable(this.autoscaleSettings);
    }

    /**
     * The name of the Cosmos DB Mongo Database in which the Cosmos DB Mongo Collection is created. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="databaseName")
    private @Nullable Output<String> databaseName;

    /**
     * @return The name of the Cosmos DB Mongo Database in which the Cosmos DB Mongo Collection is created. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> databaseName() {
        return Optional.ofNullable(this.databaseName);
    }

    /**
     * The default Time To Live in seconds. If the value is `-1`, items are not automatically expired.
     * * # `index` - (Optional) One or more `index` blocks as defined below.
     * 
     */
    @Import(name="defaultTtlSeconds")
    private @Nullable Output<Integer> defaultTtlSeconds;

    /**
     * @return The default Time To Live in seconds. If the value is `-1`, items are not automatically expired.
     * * # `index` - (Optional) One or more `index` blocks as defined below.
     * 
     */
    public Optional<Output<Integer>> defaultTtlSeconds() {
        return Optional.ofNullable(this.defaultTtlSeconds);
    }

    @Import(name="indices")
    private @Nullable Output<List<MongoCollectionIndexArgs>> indices;

    public Optional<Output<List<MongoCollectionIndexArgs>>> indices() {
        return Optional.ofNullable(this.indices);
    }

    /**
     * Specifies the name of the Cosmos DB Mongo Collection. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the name of the Cosmos DB Mongo Collection. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The name of the resource group in which the Cosmos DB Mongo Collection is created. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="resourceGroupName")
    private @Nullable Output<String> resourceGroupName;

    /**
     * @return The name of the resource group in which the Cosmos DB Mongo Collection is created. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> resourceGroupName() {
        return Optional.ofNullable(this.resourceGroupName);
    }

    /**
     * The name of the key to partition on for sharding. There must not be any other unique index keys.
     * 
     */
    @Import(name="shardKey")
    private @Nullable Output<String> shardKey;

    /**
     * @return The name of the key to partition on for sharding. There must not be any other unique index keys.
     * 
     */
    public Optional<Output<String>> shardKey() {
        return Optional.ofNullable(this.shardKey);
    }

    /**
     * One or more `system_indexes` blocks as defined below.
     * 
     */
    @Import(name="systemIndexes")
    private @Nullable Output<List<MongoCollectionSystemIndexArgs>> systemIndexes;

    /**
     * @return One or more `system_indexes` blocks as defined below.
     * 
     */
    public Optional<Output<List<MongoCollectionSystemIndexArgs>>> systemIndexes() {
        return Optional.ofNullable(this.systemIndexes);
    }

    @Import(name="throughput")
    private @Nullable Output<Integer> throughput;

    public Optional<Output<Integer>> throughput() {
        return Optional.ofNullable(this.throughput);
    }

    private MongoCollectionState() {}

    private MongoCollectionState(MongoCollectionState $) {
        this.accountName = $.accountName;
        this.analyticalStorageTtl = $.analyticalStorageTtl;
        this.autoscaleSettings = $.autoscaleSettings;
        this.databaseName = $.databaseName;
        this.defaultTtlSeconds = $.defaultTtlSeconds;
        this.indices = $.indices;
        this.name = $.name;
        this.resourceGroupName = $.resourceGroupName;
        this.shardKey = $.shardKey;
        this.systemIndexes = $.systemIndexes;
        this.throughput = $.throughput;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MongoCollectionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MongoCollectionState $;

        public Builder() {
            $ = new MongoCollectionState();
        }

        public Builder(MongoCollectionState defaults) {
            $ = new MongoCollectionState(Objects.requireNonNull(defaults));
        }

        public Builder accountName(@Nullable Output<String> accountName) {
            $.accountName = accountName;
            return this;
        }

        public Builder accountName(String accountName) {
            return accountName(Output.of(accountName));
        }

        /**
         * @param analyticalStorageTtl The default time to live of Analytical Storage for this Mongo Collection. If present and the value is set to `-1`, it is equal to infinity, and items don’t expire by default. If present and the value is set to some number `n` – items will expire `n` seconds after their last modified time.
         * 
         * @return builder
         * 
         */
        public Builder analyticalStorageTtl(@Nullable Output<Integer> analyticalStorageTtl) {
            $.analyticalStorageTtl = analyticalStorageTtl;
            return this;
        }

        /**
         * @param analyticalStorageTtl The default time to live of Analytical Storage for this Mongo Collection. If present and the value is set to `-1`, it is equal to infinity, and items don’t expire by default. If present and the value is set to some number `n` – items will expire `n` seconds after their last modified time.
         * 
         * @return builder
         * 
         */
        public Builder analyticalStorageTtl(Integer analyticalStorageTtl) {
            return analyticalStorageTtl(Output.of(analyticalStorageTtl));
        }

        public Builder autoscaleSettings(@Nullable Output<MongoCollectionAutoscaleSettingsArgs> autoscaleSettings) {
            $.autoscaleSettings = autoscaleSettings;
            return this;
        }

        public Builder autoscaleSettings(MongoCollectionAutoscaleSettingsArgs autoscaleSettings) {
            return autoscaleSettings(Output.of(autoscaleSettings));
        }

        /**
         * @param databaseName The name of the Cosmos DB Mongo Database in which the Cosmos DB Mongo Collection is created. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(@Nullable Output<String> databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        /**
         * @param databaseName The name of the Cosmos DB Mongo Database in which the Cosmos DB Mongo Collection is created. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(String databaseName) {
            return databaseName(Output.of(databaseName));
        }

        /**
         * @param defaultTtlSeconds The default Time To Live in seconds. If the value is `-1`, items are not automatically expired.
         * * # `index` - (Optional) One or more `index` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder defaultTtlSeconds(@Nullable Output<Integer> defaultTtlSeconds) {
            $.defaultTtlSeconds = defaultTtlSeconds;
            return this;
        }

        /**
         * @param defaultTtlSeconds The default Time To Live in seconds. If the value is `-1`, items are not automatically expired.
         * * # `index` - (Optional) One or more `index` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder defaultTtlSeconds(Integer defaultTtlSeconds) {
            return defaultTtlSeconds(Output.of(defaultTtlSeconds));
        }

        public Builder indices(@Nullable Output<List<MongoCollectionIndexArgs>> indices) {
            $.indices = indices;
            return this;
        }

        public Builder indices(List<MongoCollectionIndexArgs> indices) {
            return indices(Output.of(indices));
        }

        public Builder indices(MongoCollectionIndexArgs... indices) {
            return indices(List.of(indices));
        }

        /**
         * @param name Specifies the name of the Cosmos DB Mongo Collection. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of the Cosmos DB Mongo Collection. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param resourceGroupName The name of the resource group in which the Cosmos DB Mongo Collection is created. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(@Nullable Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group in which the Cosmos DB Mongo Collection is created. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param shardKey The name of the key to partition on for sharding. There must not be any other unique index keys.
         * 
         * @return builder
         * 
         */
        public Builder shardKey(@Nullable Output<String> shardKey) {
            $.shardKey = shardKey;
            return this;
        }

        /**
         * @param shardKey The name of the key to partition on for sharding. There must not be any other unique index keys.
         * 
         * @return builder
         * 
         */
        public Builder shardKey(String shardKey) {
            return shardKey(Output.of(shardKey));
        }

        /**
         * @param systemIndexes One or more `system_indexes` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder systemIndexes(@Nullable Output<List<MongoCollectionSystemIndexArgs>> systemIndexes) {
            $.systemIndexes = systemIndexes;
            return this;
        }

        /**
         * @param systemIndexes One or more `system_indexes` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder systemIndexes(List<MongoCollectionSystemIndexArgs> systemIndexes) {
            return systemIndexes(Output.of(systemIndexes));
        }

        /**
         * @param systemIndexes One or more `system_indexes` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder systemIndexes(MongoCollectionSystemIndexArgs... systemIndexes) {
            return systemIndexes(List.of(systemIndexes));
        }

        public Builder throughput(@Nullable Output<Integer> throughput) {
            $.throughput = throughput;
            return this;
        }

        public Builder throughput(Integer throughput) {
            return throughput(Output.of(throughput));
        }

        public MongoCollectionState build() {
            return $;
        }
    }

}
