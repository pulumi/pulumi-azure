// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.dataprotection;

import com.pulumi.azure.dataprotection.inputs.BackupPolicyMysqlFlexibleServerDefaultRetentionRuleArgs;
import com.pulumi.azure.dataprotection.inputs.BackupPolicyMysqlFlexibleServerRetentionRuleArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BackupPolicyMysqlFlexibleServerArgs extends com.pulumi.resources.ResourceArgs {

    public static final BackupPolicyMysqlFlexibleServerArgs Empty = new BackupPolicyMysqlFlexibleServerArgs();

    /**
     * Specifies a list of repeating time interval. It supports weekly back. It should follow `ISO 8601` repeating time interval format. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="backupRepeatingTimeIntervals", required=true)
    private Output<List<String>> backupRepeatingTimeIntervals;

    /**
     * @return Specifies a list of repeating time interval. It supports weekly back. It should follow `ISO 8601` repeating time interval format. Changing this forces a new resource to be created.
     * 
     */
    public Output<List<String>> backupRepeatingTimeIntervals() {
        return this.backupRepeatingTimeIntervals;
    }

    /**
     * A `default_retention_rule` block as defined below. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="defaultRetentionRule", required=true)
    private Output<BackupPolicyMysqlFlexibleServerDefaultRetentionRuleArgs> defaultRetentionRule;

    /**
     * @return A `default_retention_rule` block as defined below. Changing this forces a new resource to be created.
     * 
     */
    public Output<BackupPolicyMysqlFlexibleServerDefaultRetentionRuleArgs> defaultRetentionRule() {
        return this.defaultRetentionRule;
    }

    /**
     * Specifies the name of the Backup Policy for the MySQL Flexible Server. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the name of the Backup Policy for the MySQL Flexible Server. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * One or more `retention_rule` blocks as defined below. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="retentionRules")
    private @Nullable Output<List<BackupPolicyMysqlFlexibleServerRetentionRuleArgs>> retentionRules;

    /**
     * @return One or more `retention_rule` blocks as defined below. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<List<BackupPolicyMysqlFlexibleServerRetentionRuleArgs>>> retentionRules() {
        return Optional.ofNullable(this.retentionRules);
    }

    /**
     * Specifies the Time Zone which should be used by the backup schedule. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="timeZone")
    private @Nullable Output<String> timeZone;

    /**
     * @return Specifies the Time Zone which should be used by the backup schedule. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> timeZone() {
        return Optional.ofNullable(this.timeZone);
    }

    /**
     * The ID of the Backup Vault where the Backup Policy MySQL Flexible Server should exist. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="vaultId", required=true)
    private Output<String> vaultId;

    /**
     * @return The ID of the Backup Vault where the Backup Policy MySQL Flexible Server should exist. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> vaultId() {
        return this.vaultId;
    }

    private BackupPolicyMysqlFlexibleServerArgs() {}

    private BackupPolicyMysqlFlexibleServerArgs(BackupPolicyMysqlFlexibleServerArgs $) {
        this.backupRepeatingTimeIntervals = $.backupRepeatingTimeIntervals;
        this.defaultRetentionRule = $.defaultRetentionRule;
        this.name = $.name;
        this.retentionRules = $.retentionRules;
        this.timeZone = $.timeZone;
        this.vaultId = $.vaultId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackupPolicyMysqlFlexibleServerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackupPolicyMysqlFlexibleServerArgs $;

        public Builder() {
            $ = new BackupPolicyMysqlFlexibleServerArgs();
        }

        public Builder(BackupPolicyMysqlFlexibleServerArgs defaults) {
            $ = new BackupPolicyMysqlFlexibleServerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backupRepeatingTimeIntervals Specifies a list of repeating time interval. It supports weekly back. It should follow `ISO 8601` repeating time interval format. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder backupRepeatingTimeIntervals(Output<List<String>> backupRepeatingTimeIntervals) {
            $.backupRepeatingTimeIntervals = backupRepeatingTimeIntervals;
            return this;
        }

        /**
         * @param backupRepeatingTimeIntervals Specifies a list of repeating time interval. It supports weekly back. It should follow `ISO 8601` repeating time interval format. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder backupRepeatingTimeIntervals(List<String> backupRepeatingTimeIntervals) {
            return backupRepeatingTimeIntervals(Output.of(backupRepeatingTimeIntervals));
        }

        /**
         * @param backupRepeatingTimeIntervals Specifies a list of repeating time interval. It supports weekly back. It should follow `ISO 8601` repeating time interval format. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder backupRepeatingTimeIntervals(String... backupRepeatingTimeIntervals) {
            return backupRepeatingTimeIntervals(List.of(backupRepeatingTimeIntervals));
        }

        /**
         * @param defaultRetentionRule A `default_retention_rule` block as defined below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder defaultRetentionRule(Output<BackupPolicyMysqlFlexibleServerDefaultRetentionRuleArgs> defaultRetentionRule) {
            $.defaultRetentionRule = defaultRetentionRule;
            return this;
        }

        /**
         * @param defaultRetentionRule A `default_retention_rule` block as defined below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder defaultRetentionRule(BackupPolicyMysqlFlexibleServerDefaultRetentionRuleArgs defaultRetentionRule) {
            return defaultRetentionRule(Output.of(defaultRetentionRule));
        }

        /**
         * @param name Specifies the name of the Backup Policy for the MySQL Flexible Server. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of the Backup Policy for the MySQL Flexible Server. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param retentionRules One or more `retention_rule` blocks as defined below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder retentionRules(@Nullable Output<List<BackupPolicyMysqlFlexibleServerRetentionRuleArgs>> retentionRules) {
            $.retentionRules = retentionRules;
            return this;
        }

        /**
         * @param retentionRules One or more `retention_rule` blocks as defined below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder retentionRules(List<BackupPolicyMysqlFlexibleServerRetentionRuleArgs> retentionRules) {
            return retentionRules(Output.of(retentionRules));
        }

        /**
         * @param retentionRules One or more `retention_rule` blocks as defined below. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder retentionRules(BackupPolicyMysqlFlexibleServerRetentionRuleArgs... retentionRules) {
            return retentionRules(List.of(retentionRules));
        }

        /**
         * @param timeZone Specifies the Time Zone which should be used by the backup schedule. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder timeZone(@Nullable Output<String> timeZone) {
            $.timeZone = timeZone;
            return this;
        }

        /**
         * @param timeZone Specifies the Time Zone which should be used by the backup schedule. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder timeZone(String timeZone) {
            return timeZone(Output.of(timeZone));
        }

        /**
         * @param vaultId The ID of the Backup Vault where the Backup Policy MySQL Flexible Server should exist. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder vaultId(Output<String> vaultId) {
            $.vaultId = vaultId;
            return this;
        }

        /**
         * @param vaultId The ID of the Backup Vault where the Backup Policy MySQL Flexible Server should exist. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder vaultId(String vaultId) {
            return vaultId(Output.of(vaultId));
        }

        public BackupPolicyMysqlFlexibleServerArgs build() {
            if ($.backupRepeatingTimeIntervals == null) {
                throw new MissingRequiredPropertyException("BackupPolicyMysqlFlexibleServerArgs", "backupRepeatingTimeIntervals");
            }
            if ($.defaultRetentionRule == null) {
                throw new MissingRequiredPropertyException("BackupPolicyMysqlFlexibleServerArgs", "defaultRetentionRule");
            }
            if ($.vaultId == null) {
                throw new MissingRequiredPropertyException("BackupPolicyMysqlFlexibleServerArgs", "vaultId");
            }
            return $;
        }
    }

}
