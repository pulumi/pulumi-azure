// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.mobile.outputs;

import com.pulumi.azure.mobile.outputs.GetNetworkPacketCoreControlPlaneIdentity;
import com.pulumi.azure.mobile.outputs.GetNetworkPacketCoreControlPlaneLocalDiagnosticsAccess;
import com.pulumi.azure.mobile.outputs.GetNetworkPacketCoreControlPlanePlatform;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetNetworkPacketCoreControlPlaneResult {
    private String controlPlaneAccessIpv4Address;
    private String controlPlaneAccessIpv4Gateway;
    private String controlPlaneAccessIpv4Subnet;
    private String controlPlaneAccessName;
    /**
     * @return The core network technology generation.
     * 
     */
    private String coreNetworkTechnology;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return An `identity` block as defined below.
     * 
     */
    private List<GetNetworkPacketCoreControlPlaneIdentity> identities;
    /**
     * @return Settings in JSON format to allow interoperability with third party components e.g. RANs and UEs.
     * 
     */
    private String interoperabilitySettingsJson;
    /**
     * @return One or more `local_diagnostics_access` blocks as defined below. The Kubernetes ingress configuration that controls access to the packet core diagnostics through local APIs.
     * 
     */
    private List<GetNetworkPacketCoreControlPlaneLocalDiagnosticsAccess> localDiagnosticsAccesses;
    /**
     * @return The Azure Region where the Mobile Network Packet Core Control Plane exists.
     * 
     */
    private String location;
    /**
     * @return The logical name for this interface.
     * 
     */
    private String name;
    /**
     * @return A `platform` block as defined below.
     * 
     */
    private List<GetNetworkPacketCoreControlPlanePlatform> platforms;
    private String resourceGroupName;
    /**
     * @return The list of Mobile Network Site IDs in which this packet core control plane is deployed.
     * 
     */
    private List<String> siteIds;
    /**
     * @return The SKU defining the throughput and SIM allowances for this packet core control plane deployment.
     * 
     */
    private String sku;
    /**
     * @return The version of the packet core software that is deployed.
     * 
     */
    private String softwareVersion;
    /**
     * @return A mapping of tags assigned to the Mobile Network Packet Core Control Plane.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return The MTU in bytes that can be sent to the user equipment.
     * 
     */
    private Integer userEquipmentMtuInBytes;

    private GetNetworkPacketCoreControlPlaneResult() {}
    public String controlPlaneAccessIpv4Address() {
        return this.controlPlaneAccessIpv4Address;
    }
    public String controlPlaneAccessIpv4Gateway() {
        return this.controlPlaneAccessIpv4Gateway;
    }
    public String controlPlaneAccessIpv4Subnet() {
        return this.controlPlaneAccessIpv4Subnet;
    }
    public String controlPlaneAccessName() {
        return this.controlPlaneAccessName;
    }
    /**
     * @return The core network technology generation.
     * 
     */
    public String coreNetworkTechnology() {
        return this.coreNetworkTechnology;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return An `identity` block as defined below.
     * 
     */
    public List<GetNetworkPacketCoreControlPlaneIdentity> identities() {
        return this.identities;
    }
    /**
     * @return Settings in JSON format to allow interoperability with third party components e.g. RANs and UEs.
     * 
     */
    public String interoperabilitySettingsJson() {
        return this.interoperabilitySettingsJson;
    }
    /**
     * @return One or more `local_diagnostics_access` blocks as defined below. The Kubernetes ingress configuration that controls access to the packet core diagnostics through local APIs.
     * 
     */
    public List<GetNetworkPacketCoreControlPlaneLocalDiagnosticsAccess> localDiagnosticsAccesses() {
        return this.localDiagnosticsAccesses;
    }
    /**
     * @return The Azure Region where the Mobile Network Packet Core Control Plane exists.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return The logical name for this interface.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return A `platform` block as defined below.
     * 
     */
    public List<GetNetworkPacketCoreControlPlanePlatform> platforms() {
        return this.platforms;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return The list of Mobile Network Site IDs in which this packet core control plane is deployed.
     * 
     */
    public List<String> siteIds() {
        return this.siteIds;
    }
    /**
     * @return The SKU defining the throughput and SIM allowances for this packet core control plane deployment.
     * 
     */
    public String sku() {
        return this.sku;
    }
    /**
     * @return The version of the packet core software that is deployed.
     * 
     */
    public String softwareVersion() {
        return this.softwareVersion;
    }
    /**
     * @return A mapping of tags assigned to the Mobile Network Packet Core Control Plane.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return The MTU in bytes that can be sent to the user equipment.
     * 
     */
    public Integer userEquipmentMtuInBytes() {
        return this.userEquipmentMtuInBytes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNetworkPacketCoreControlPlaneResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String controlPlaneAccessIpv4Address;
        private String controlPlaneAccessIpv4Gateway;
        private String controlPlaneAccessIpv4Subnet;
        private String controlPlaneAccessName;
        private String coreNetworkTechnology;
        private String id;
        private List<GetNetworkPacketCoreControlPlaneIdentity> identities;
        private String interoperabilitySettingsJson;
        private List<GetNetworkPacketCoreControlPlaneLocalDiagnosticsAccess> localDiagnosticsAccesses;
        private String location;
        private String name;
        private List<GetNetworkPacketCoreControlPlanePlatform> platforms;
        private String resourceGroupName;
        private List<String> siteIds;
        private String sku;
        private String softwareVersion;
        private Map<String,String> tags;
        private Integer userEquipmentMtuInBytes;
        public Builder() {}
        public Builder(GetNetworkPacketCoreControlPlaneResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.controlPlaneAccessIpv4Address = defaults.controlPlaneAccessIpv4Address;
    	      this.controlPlaneAccessIpv4Gateway = defaults.controlPlaneAccessIpv4Gateway;
    	      this.controlPlaneAccessIpv4Subnet = defaults.controlPlaneAccessIpv4Subnet;
    	      this.controlPlaneAccessName = defaults.controlPlaneAccessName;
    	      this.coreNetworkTechnology = defaults.coreNetworkTechnology;
    	      this.id = defaults.id;
    	      this.identities = defaults.identities;
    	      this.interoperabilitySettingsJson = defaults.interoperabilitySettingsJson;
    	      this.localDiagnosticsAccesses = defaults.localDiagnosticsAccesses;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.platforms = defaults.platforms;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.siteIds = defaults.siteIds;
    	      this.sku = defaults.sku;
    	      this.softwareVersion = defaults.softwareVersion;
    	      this.tags = defaults.tags;
    	      this.userEquipmentMtuInBytes = defaults.userEquipmentMtuInBytes;
        }

        @CustomType.Setter
        public Builder controlPlaneAccessIpv4Address(String controlPlaneAccessIpv4Address) {
            if (controlPlaneAccessIpv4Address == null) {
              throw new MissingRequiredPropertyException("GetNetworkPacketCoreControlPlaneResult", "controlPlaneAccessIpv4Address");
            }
            this.controlPlaneAccessIpv4Address = controlPlaneAccessIpv4Address;
            return this;
        }
        @CustomType.Setter
        public Builder controlPlaneAccessIpv4Gateway(String controlPlaneAccessIpv4Gateway) {
            if (controlPlaneAccessIpv4Gateway == null) {
              throw new MissingRequiredPropertyException("GetNetworkPacketCoreControlPlaneResult", "controlPlaneAccessIpv4Gateway");
            }
            this.controlPlaneAccessIpv4Gateway = controlPlaneAccessIpv4Gateway;
            return this;
        }
        @CustomType.Setter
        public Builder controlPlaneAccessIpv4Subnet(String controlPlaneAccessIpv4Subnet) {
            if (controlPlaneAccessIpv4Subnet == null) {
              throw new MissingRequiredPropertyException("GetNetworkPacketCoreControlPlaneResult", "controlPlaneAccessIpv4Subnet");
            }
            this.controlPlaneAccessIpv4Subnet = controlPlaneAccessIpv4Subnet;
            return this;
        }
        @CustomType.Setter
        public Builder controlPlaneAccessName(String controlPlaneAccessName) {
            if (controlPlaneAccessName == null) {
              throw new MissingRequiredPropertyException("GetNetworkPacketCoreControlPlaneResult", "controlPlaneAccessName");
            }
            this.controlPlaneAccessName = controlPlaneAccessName;
            return this;
        }
        @CustomType.Setter
        public Builder coreNetworkTechnology(String coreNetworkTechnology) {
            if (coreNetworkTechnology == null) {
              throw new MissingRequiredPropertyException("GetNetworkPacketCoreControlPlaneResult", "coreNetworkTechnology");
            }
            this.coreNetworkTechnology = coreNetworkTechnology;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetNetworkPacketCoreControlPlaneResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder identities(List<GetNetworkPacketCoreControlPlaneIdentity> identities) {
            if (identities == null) {
              throw new MissingRequiredPropertyException("GetNetworkPacketCoreControlPlaneResult", "identities");
            }
            this.identities = identities;
            return this;
        }
        public Builder identities(GetNetworkPacketCoreControlPlaneIdentity... identities) {
            return identities(List.of(identities));
        }
        @CustomType.Setter
        public Builder interoperabilitySettingsJson(String interoperabilitySettingsJson) {
            if (interoperabilitySettingsJson == null) {
              throw new MissingRequiredPropertyException("GetNetworkPacketCoreControlPlaneResult", "interoperabilitySettingsJson");
            }
            this.interoperabilitySettingsJson = interoperabilitySettingsJson;
            return this;
        }
        @CustomType.Setter
        public Builder localDiagnosticsAccesses(List<GetNetworkPacketCoreControlPlaneLocalDiagnosticsAccess> localDiagnosticsAccesses) {
            if (localDiagnosticsAccesses == null) {
              throw new MissingRequiredPropertyException("GetNetworkPacketCoreControlPlaneResult", "localDiagnosticsAccesses");
            }
            this.localDiagnosticsAccesses = localDiagnosticsAccesses;
            return this;
        }
        public Builder localDiagnosticsAccesses(GetNetworkPacketCoreControlPlaneLocalDiagnosticsAccess... localDiagnosticsAccesses) {
            return localDiagnosticsAccesses(List.of(localDiagnosticsAccesses));
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetNetworkPacketCoreControlPlaneResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetNetworkPacketCoreControlPlaneResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder platforms(List<GetNetworkPacketCoreControlPlanePlatform> platforms) {
            if (platforms == null) {
              throw new MissingRequiredPropertyException("GetNetworkPacketCoreControlPlaneResult", "platforms");
            }
            this.platforms = platforms;
            return this;
        }
        public Builder platforms(GetNetworkPacketCoreControlPlanePlatform... platforms) {
            return platforms(List.of(platforms));
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            if (resourceGroupName == null) {
              throw new MissingRequiredPropertyException("GetNetworkPacketCoreControlPlaneResult", "resourceGroupName");
            }
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder siteIds(List<String> siteIds) {
            if (siteIds == null) {
              throw new MissingRequiredPropertyException("GetNetworkPacketCoreControlPlaneResult", "siteIds");
            }
            this.siteIds = siteIds;
            return this;
        }
        public Builder siteIds(String... siteIds) {
            return siteIds(List.of(siteIds));
        }
        @CustomType.Setter
        public Builder sku(String sku) {
            if (sku == null) {
              throw new MissingRequiredPropertyException("GetNetworkPacketCoreControlPlaneResult", "sku");
            }
            this.sku = sku;
            return this;
        }
        @CustomType.Setter
        public Builder softwareVersion(String softwareVersion) {
            if (softwareVersion == null) {
              throw new MissingRequiredPropertyException("GetNetworkPacketCoreControlPlaneResult", "softwareVersion");
            }
            this.softwareVersion = softwareVersion;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetNetworkPacketCoreControlPlaneResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder userEquipmentMtuInBytes(Integer userEquipmentMtuInBytes) {
            if (userEquipmentMtuInBytes == null) {
              throw new MissingRequiredPropertyException("GetNetworkPacketCoreControlPlaneResult", "userEquipmentMtuInBytes");
            }
            this.userEquipmentMtuInBytes = userEquipmentMtuInBytes;
            return this;
        }
        public GetNetworkPacketCoreControlPlaneResult build() {
            final var _resultValue = new GetNetworkPacketCoreControlPlaneResult();
            _resultValue.controlPlaneAccessIpv4Address = controlPlaneAccessIpv4Address;
            _resultValue.controlPlaneAccessIpv4Gateway = controlPlaneAccessIpv4Gateway;
            _resultValue.controlPlaneAccessIpv4Subnet = controlPlaneAccessIpv4Subnet;
            _resultValue.controlPlaneAccessName = controlPlaneAccessName;
            _resultValue.coreNetworkTechnology = coreNetworkTechnology;
            _resultValue.id = id;
            _resultValue.identities = identities;
            _resultValue.interoperabilitySettingsJson = interoperabilitySettingsJson;
            _resultValue.localDiagnosticsAccesses = localDiagnosticsAccesses;
            _resultValue.location = location;
            _resultValue.name = name;
            _resultValue.platforms = platforms;
            _resultValue.resourceGroupName = resourceGroupName;
            _resultValue.siteIds = siteIds;
            _resultValue.sku = sku;
            _resultValue.softwareVersion = softwareVersion;
            _resultValue.tags = tags;
            _resultValue.userEquipmentMtuInBytes = userEquipmentMtuInBytes;
            return _resultValue;
        }
    }
}
