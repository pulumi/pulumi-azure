// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.datafactory;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.datafactory.inputs.GetFactoryArgs;
import com.pulumi.azure.datafactory.inputs.GetFactoryPlainArgs;
import com.pulumi.azure.datafactory.outputs.GetFactoryResult;
import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import java.util.concurrent.CompletableFuture;

public final class DatafactoryFunctions {
    /**
     * Use this data source to access information about an existing Azure Data Factory (Version 2).
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azure.datafactory.DatafactoryFunctions;
     * import com.pulumi.azure.datafactory.inputs.GetFactoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DatafactoryFunctions.getFactory(GetFactoryArgs.builder()
     *             .name(&#34;existing-adf&#34;)
     *             .resourceGroupName(&#34;existing-rg&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;id&#34;, example.applyValue(getFactoryResult -&gt; getFactoryResult.id()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFactoryResult> getFactory(GetFactoryArgs args) {
        return getFactory(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to access information about an existing Azure Data Factory (Version 2).
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azure.datafactory.DatafactoryFunctions;
     * import com.pulumi.azure.datafactory.inputs.GetFactoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DatafactoryFunctions.getFactory(GetFactoryArgs.builder()
     *             .name(&#34;existing-adf&#34;)
     *             .resourceGroupName(&#34;existing-rg&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;id&#34;, example.applyValue(getFactoryResult -&gt; getFactoryResult.id()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFactoryResult> getFactoryPlain(GetFactoryPlainArgs args) {
        return getFactoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to access information about an existing Azure Data Factory (Version 2).
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azure.datafactory.DatafactoryFunctions;
     * import com.pulumi.azure.datafactory.inputs.GetFactoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DatafactoryFunctions.getFactory(GetFactoryArgs.builder()
     *             .name(&#34;existing-adf&#34;)
     *             .resourceGroupName(&#34;existing-rg&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;id&#34;, example.applyValue(getFactoryResult -&gt; getFactoryResult.id()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFactoryResult> getFactory(GetFactoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("azure:datafactory/getFactory:getFactory", TypeShape.of(GetFactoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to access information about an existing Azure Data Factory (Version 2).
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azure.datafactory.DatafactoryFunctions;
     * import com.pulumi.azure.datafactory.inputs.GetFactoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DatafactoryFunctions.getFactory(GetFactoryArgs.builder()
     *             .name(&#34;existing-adf&#34;)
     *             .resourceGroupName(&#34;existing-rg&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;id&#34;, example.applyValue(getFactoryResult -&gt; getFactoryResult.id()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFactoryResult> getFactoryPlain(GetFactoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("azure:datafactory/getFactory:getFactory", TypeShape.of(GetFactoryResult.class), args, Utilities.withVersion(options));
    }
}
