// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.securitycenter.inputs;

import com.pulumi.azure.securitycenter.inputs.AutomationSourceRuleSetRuleArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.util.List;
import java.util.Objects;


public final class AutomationSourceRuleSetArgs extends com.pulumi.resources.ResourceArgs {

    public static final AutomationSourceRuleSetArgs Empty = new AutomationSourceRuleSetArgs();

    /**
     * One or more `rule` blocks as defined below.
     * 
     * &gt; **NOTE:** This automation will trigger when all of the `rule`s in this `rule_set` are evaluated as &#39;true&#39;. This is equivalent to a logical &#39;AND&#39;.
     * 
     */
    @Import(name="rules", required=true)
    private Output<List<AutomationSourceRuleSetRuleArgs>> rules;

    /**
     * @return One or more `rule` blocks as defined below.
     * 
     * &gt; **NOTE:** This automation will trigger when all of the `rule`s in this `rule_set` are evaluated as &#39;true&#39;. This is equivalent to a logical &#39;AND&#39;.
     * 
     */
    public Output<List<AutomationSourceRuleSetRuleArgs>> rules() {
        return this.rules;
    }

    private AutomationSourceRuleSetArgs() {}

    private AutomationSourceRuleSetArgs(AutomationSourceRuleSetArgs $) {
        this.rules = $.rules;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AutomationSourceRuleSetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AutomationSourceRuleSetArgs $;

        public Builder() {
            $ = new AutomationSourceRuleSetArgs();
        }

        public Builder(AutomationSourceRuleSetArgs defaults) {
            $ = new AutomationSourceRuleSetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param rules One or more `rule` blocks as defined below.
         * 
         * &gt; **NOTE:** This automation will trigger when all of the `rule`s in this `rule_set` are evaluated as &#39;true&#39;. This is equivalent to a logical &#39;AND&#39;.
         * 
         * @return builder
         * 
         */
        public Builder rules(Output<List<AutomationSourceRuleSetRuleArgs>> rules) {
            $.rules = rules;
            return this;
        }

        /**
         * @param rules One or more `rule` blocks as defined below.
         * 
         * &gt; **NOTE:** This automation will trigger when all of the `rule`s in this `rule_set` are evaluated as &#39;true&#39;. This is equivalent to a logical &#39;AND&#39;.
         * 
         * @return builder
         * 
         */
        public Builder rules(List<AutomationSourceRuleSetRuleArgs> rules) {
            return rules(Output.of(rules));
        }

        /**
         * @param rules One or more `rule` blocks as defined below.
         * 
         * &gt; **NOTE:** This automation will trigger when all of the `rule`s in this `rule_set` are evaluated as &#39;true&#39;. This is equivalent to a logical &#39;AND&#39;.
         * 
         * @return builder
         * 
         */
        public Builder rules(AutomationSourceRuleSetRuleArgs... rules) {
            return rules(List.of(rules));
        }

        public AutomationSourceRuleSetArgs build() {
            if ($.rules == null) {
                throw new MissingRequiredPropertyException("AutomationSourceRuleSetArgs", "rules");
            }
            return $;
        }
    }

}
