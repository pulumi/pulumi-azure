// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.datashare.outputs;

import com.pulumi.azure.datashare.outputs.GetDatasetBlobStorageStorageAccount;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDatasetBlobStorageResult {
    /**
     * @return The name of the storage account container to be shared with the receiver.
     * 
     */
    private String containerName;
    private String dataShareId;
    /**
     * @return The name of the Data Share Dataset.
     * 
     */
    private String displayName;
    /**
     * @return The path of the file in the storage container to be shared with the receiver.
     * 
     */
    private String filePath;
    /**
     * @return The folder path of the file in the storage container to be shared with the receiver.
     * 
     */
    private String folderPath;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The name of the storage account to be shared with the receiver.
     * 
     */
    private String name;
    /**
     * @return A `storage_account` block as defined below.
     * 
     */
    private List<GetDatasetBlobStorageStorageAccount> storageAccounts;

    private GetDatasetBlobStorageResult() {}
    /**
     * @return The name of the storage account container to be shared with the receiver.
     * 
     */
    public String containerName() {
        return this.containerName;
    }
    public String dataShareId() {
        return this.dataShareId;
    }
    /**
     * @return The name of the Data Share Dataset.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The path of the file in the storage container to be shared with the receiver.
     * 
     */
    public String filePath() {
        return this.filePath;
    }
    /**
     * @return The folder path of the file in the storage container to be shared with the receiver.
     * 
     */
    public String folderPath() {
        return this.folderPath;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The name of the storage account to be shared with the receiver.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return A `storage_account` block as defined below.
     * 
     */
    public List<GetDatasetBlobStorageStorageAccount> storageAccounts() {
        return this.storageAccounts;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatasetBlobStorageResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String containerName;
        private String dataShareId;
        private String displayName;
        private String filePath;
        private String folderPath;
        private String id;
        private String name;
        private List<GetDatasetBlobStorageStorageAccount> storageAccounts;
        public Builder() {}
        public Builder(GetDatasetBlobStorageResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.containerName = defaults.containerName;
    	      this.dataShareId = defaults.dataShareId;
    	      this.displayName = defaults.displayName;
    	      this.filePath = defaults.filePath;
    	      this.folderPath = defaults.folderPath;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.storageAccounts = defaults.storageAccounts;
        }

        @CustomType.Setter
        public Builder containerName(String containerName) {
            this.containerName = Objects.requireNonNull(containerName);
            return this;
        }
        @CustomType.Setter
        public Builder dataShareId(String dataShareId) {
            this.dataShareId = Objects.requireNonNull(dataShareId);
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        @CustomType.Setter
        public Builder filePath(String filePath) {
            this.filePath = Objects.requireNonNull(filePath);
            return this;
        }
        @CustomType.Setter
        public Builder folderPath(String folderPath) {
            this.folderPath = Objects.requireNonNull(folderPath);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder storageAccounts(List<GetDatasetBlobStorageStorageAccount> storageAccounts) {
            this.storageAccounts = Objects.requireNonNull(storageAccounts);
            return this;
        }
        public Builder storageAccounts(GetDatasetBlobStorageStorageAccount... storageAccounts) {
            return storageAccounts(List.of(storageAccounts));
        }
        public GetDatasetBlobStorageResult build() {
            final var o = new GetDatasetBlobStorageResult();
            o.containerName = containerName;
            o.dataShareId = dataShareId;
            o.displayName = displayName;
            o.filePath = filePath;
            o.folderPath = folderPath;
            o.id = id;
            o.name = name;
            o.storageAccounts = storageAccounts;
            return o;
        }
    }
}
