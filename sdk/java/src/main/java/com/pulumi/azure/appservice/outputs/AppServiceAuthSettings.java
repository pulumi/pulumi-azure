// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appservice.outputs;

import com.pulumi.azure.appservice.outputs.AppServiceAuthSettingsActiveDirectory;
import com.pulumi.azure.appservice.outputs.AppServiceAuthSettingsFacebook;
import com.pulumi.azure.appservice.outputs.AppServiceAuthSettingsGoogle;
import com.pulumi.azure.appservice.outputs.AppServiceAuthSettingsMicrosoft;
import com.pulumi.azure.appservice.outputs.AppServiceAuthSettingsTwitter;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AppServiceAuthSettings {
    /**
     * @return A `active_directory` block as defined below.
     * 
     */
    private @Nullable AppServiceAuthSettingsActiveDirectory activeDirectory;
    /**
     * @return Login parameters to send to the OpenID Connect authorization endpoint when a user logs in. Each parameter must be in the form &#34;key=value&#34;.
     * 
     */
    private @Nullable Map<String,String> additionalLoginParams;
    /**
     * @return External URLs that can be redirected to as part of logging in or logging out of the app.
     * 
     */
    private @Nullable List<String> allowedExternalRedirectUrls;
    /**
     * @return The default provider to use when multiple providers have been set up. Possible values are `AzureActiveDirectory`, `Facebook`, `Google`, `MicrosoftAccount` and `Twitter`.
     * 
     * &gt; **NOTE:** When using multiple providers, the default provider must be set for settings like `unauthenticated_client_action` to work.
     * 
     */
    private @Nullable String defaultProvider;
    /**
     * @return Is Authentication enabled?
     * 
     */
    private Boolean enabled;
    /**
     * @return A `facebook` block as defined below.
     * 
     */
    private @Nullable AppServiceAuthSettingsFacebook facebook;
    /**
     * @return A `google` block as defined below.
     * 
     */
    private @Nullable AppServiceAuthSettingsGoogle google;
    /**
     * @return Issuer URI. When using Azure Active Directory, this value is the URI of the directory tenant, e.g. &lt;https://sts.windows.net/{tenant-guid}/&gt;.
     * 
     */
    private @Nullable String issuer;
    /**
     * @return A `microsoft` block as defined below.
     * 
     */
    private @Nullable AppServiceAuthSettingsMicrosoft microsoft;
    /**
     * @return The runtime version of the Authentication/Authorization module.
     * 
     */
    private @Nullable String runtimeVersion;
    /**
     * @return The number of hours after session token expiration that a session token can be used to call the token refresh API. Defaults to `72`.
     * 
     */
    private @Nullable Double tokenRefreshExtensionHours;
    /**
     * @return If enabled the module will durably store platform-specific security tokens that are obtained during login flows. Defaults to `false`.
     * 
     */
    private @Nullable Boolean tokenStoreEnabled;
    /**
     * @return A `twitter` block as defined below.
     * 
     */
    private @Nullable AppServiceAuthSettingsTwitter twitter;
    /**
     * @return The action to take when an unauthenticated client attempts to access the app. Possible values are `AllowAnonymous` and `RedirectToLoginPage`.
     * 
     */
    private @Nullable String unauthenticatedClientAction;

    private AppServiceAuthSettings() {}
    /**
     * @return A `active_directory` block as defined below.
     * 
     */
    public Optional<AppServiceAuthSettingsActiveDirectory> activeDirectory() {
        return Optional.ofNullable(this.activeDirectory);
    }
    /**
     * @return Login parameters to send to the OpenID Connect authorization endpoint when a user logs in. Each parameter must be in the form &#34;key=value&#34;.
     * 
     */
    public Map<String,String> additionalLoginParams() {
        return this.additionalLoginParams == null ? Map.of() : this.additionalLoginParams;
    }
    /**
     * @return External URLs that can be redirected to as part of logging in or logging out of the app.
     * 
     */
    public List<String> allowedExternalRedirectUrls() {
        return this.allowedExternalRedirectUrls == null ? List.of() : this.allowedExternalRedirectUrls;
    }
    /**
     * @return The default provider to use when multiple providers have been set up. Possible values are `AzureActiveDirectory`, `Facebook`, `Google`, `MicrosoftAccount` and `Twitter`.
     * 
     * &gt; **NOTE:** When using multiple providers, the default provider must be set for settings like `unauthenticated_client_action` to work.
     * 
     */
    public Optional<String> defaultProvider() {
        return Optional.ofNullable(this.defaultProvider);
    }
    /**
     * @return Is Authentication enabled?
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return A `facebook` block as defined below.
     * 
     */
    public Optional<AppServiceAuthSettingsFacebook> facebook() {
        return Optional.ofNullable(this.facebook);
    }
    /**
     * @return A `google` block as defined below.
     * 
     */
    public Optional<AppServiceAuthSettingsGoogle> google() {
        return Optional.ofNullable(this.google);
    }
    /**
     * @return Issuer URI. When using Azure Active Directory, this value is the URI of the directory tenant, e.g. &lt;https://sts.windows.net/{tenant-guid}/&gt;.
     * 
     */
    public Optional<String> issuer() {
        return Optional.ofNullable(this.issuer);
    }
    /**
     * @return A `microsoft` block as defined below.
     * 
     */
    public Optional<AppServiceAuthSettingsMicrosoft> microsoft() {
        return Optional.ofNullable(this.microsoft);
    }
    /**
     * @return The runtime version of the Authentication/Authorization module.
     * 
     */
    public Optional<String> runtimeVersion() {
        return Optional.ofNullable(this.runtimeVersion);
    }
    /**
     * @return The number of hours after session token expiration that a session token can be used to call the token refresh API. Defaults to `72`.
     * 
     */
    public Optional<Double> tokenRefreshExtensionHours() {
        return Optional.ofNullable(this.tokenRefreshExtensionHours);
    }
    /**
     * @return If enabled the module will durably store platform-specific security tokens that are obtained during login flows. Defaults to `false`.
     * 
     */
    public Optional<Boolean> tokenStoreEnabled() {
        return Optional.ofNullable(this.tokenStoreEnabled);
    }
    /**
     * @return A `twitter` block as defined below.
     * 
     */
    public Optional<AppServiceAuthSettingsTwitter> twitter() {
        return Optional.ofNullable(this.twitter);
    }
    /**
     * @return The action to take when an unauthenticated client attempts to access the app. Possible values are `AllowAnonymous` and `RedirectToLoginPage`.
     * 
     */
    public Optional<String> unauthenticatedClientAction() {
        return Optional.ofNullable(this.unauthenticatedClientAction);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AppServiceAuthSettings defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable AppServiceAuthSettingsActiveDirectory activeDirectory;
        private @Nullable Map<String,String> additionalLoginParams;
        private @Nullable List<String> allowedExternalRedirectUrls;
        private @Nullable String defaultProvider;
        private Boolean enabled;
        private @Nullable AppServiceAuthSettingsFacebook facebook;
        private @Nullable AppServiceAuthSettingsGoogle google;
        private @Nullable String issuer;
        private @Nullable AppServiceAuthSettingsMicrosoft microsoft;
        private @Nullable String runtimeVersion;
        private @Nullable Double tokenRefreshExtensionHours;
        private @Nullable Boolean tokenStoreEnabled;
        private @Nullable AppServiceAuthSettingsTwitter twitter;
        private @Nullable String unauthenticatedClientAction;
        public Builder() {}
        public Builder(AppServiceAuthSettings defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activeDirectory = defaults.activeDirectory;
    	      this.additionalLoginParams = defaults.additionalLoginParams;
    	      this.allowedExternalRedirectUrls = defaults.allowedExternalRedirectUrls;
    	      this.defaultProvider = defaults.defaultProvider;
    	      this.enabled = defaults.enabled;
    	      this.facebook = defaults.facebook;
    	      this.google = defaults.google;
    	      this.issuer = defaults.issuer;
    	      this.microsoft = defaults.microsoft;
    	      this.runtimeVersion = defaults.runtimeVersion;
    	      this.tokenRefreshExtensionHours = defaults.tokenRefreshExtensionHours;
    	      this.tokenStoreEnabled = defaults.tokenStoreEnabled;
    	      this.twitter = defaults.twitter;
    	      this.unauthenticatedClientAction = defaults.unauthenticatedClientAction;
        }

        @CustomType.Setter
        public Builder activeDirectory(@Nullable AppServiceAuthSettingsActiveDirectory activeDirectory) {

            this.activeDirectory = activeDirectory;
            return this;
        }
        @CustomType.Setter
        public Builder additionalLoginParams(@Nullable Map<String,String> additionalLoginParams) {

            this.additionalLoginParams = additionalLoginParams;
            return this;
        }
        @CustomType.Setter
        public Builder allowedExternalRedirectUrls(@Nullable List<String> allowedExternalRedirectUrls) {

            this.allowedExternalRedirectUrls = allowedExternalRedirectUrls;
            return this;
        }
        public Builder allowedExternalRedirectUrls(String... allowedExternalRedirectUrls) {
            return allowedExternalRedirectUrls(List.of(allowedExternalRedirectUrls));
        }
        @CustomType.Setter
        public Builder defaultProvider(@Nullable String defaultProvider) {

            this.defaultProvider = defaultProvider;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("AppServiceAuthSettings", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder facebook(@Nullable AppServiceAuthSettingsFacebook facebook) {

            this.facebook = facebook;
            return this;
        }
        @CustomType.Setter
        public Builder google(@Nullable AppServiceAuthSettingsGoogle google) {

            this.google = google;
            return this;
        }
        @CustomType.Setter
        public Builder issuer(@Nullable String issuer) {

            this.issuer = issuer;
            return this;
        }
        @CustomType.Setter
        public Builder microsoft(@Nullable AppServiceAuthSettingsMicrosoft microsoft) {

            this.microsoft = microsoft;
            return this;
        }
        @CustomType.Setter
        public Builder runtimeVersion(@Nullable String runtimeVersion) {

            this.runtimeVersion = runtimeVersion;
            return this;
        }
        @CustomType.Setter
        public Builder tokenRefreshExtensionHours(@Nullable Double tokenRefreshExtensionHours) {

            this.tokenRefreshExtensionHours = tokenRefreshExtensionHours;
            return this;
        }
        @CustomType.Setter
        public Builder tokenStoreEnabled(@Nullable Boolean tokenStoreEnabled) {

            this.tokenStoreEnabled = tokenStoreEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder twitter(@Nullable AppServiceAuthSettingsTwitter twitter) {

            this.twitter = twitter;
            return this;
        }
        @CustomType.Setter
        public Builder unauthenticatedClientAction(@Nullable String unauthenticatedClientAction) {

            this.unauthenticatedClientAction = unauthenticatedClientAction;
            return this;
        }
        public AppServiceAuthSettings build() {
            final var _resultValue = new AppServiceAuthSettings();
            _resultValue.activeDirectory = activeDirectory;
            _resultValue.additionalLoginParams = additionalLoginParams;
            _resultValue.allowedExternalRedirectUrls = allowedExternalRedirectUrls;
            _resultValue.defaultProvider = defaultProvider;
            _resultValue.enabled = enabled;
            _resultValue.facebook = facebook;
            _resultValue.google = google;
            _resultValue.issuer = issuer;
            _resultValue.microsoft = microsoft;
            _resultValue.runtimeVersion = runtimeVersion;
            _resultValue.tokenRefreshExtensionHours = tokenRefreshExtensionHours;
            _resultValue.tokenStoreEnabled = tokenStoreEnabled;
            _resultValue.twitter = twitter;
            _resultValue.unauthenticatedClientAction = unauthenticatedClientAction;
            return _resultValue;
        }
    }
}
