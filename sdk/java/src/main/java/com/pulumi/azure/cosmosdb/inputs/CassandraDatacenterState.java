// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.cosmosdb.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CassandraDatacenterState extends com.pulumi.resources.ResourceArgs {

    public static final CassandraDatacenterState Empty = new CassandraDatacenterState();

    /**
     * Determines whether availability zones are enabled. Defaults to `true`.
     * 
     */
    @Import(name="availabilityZonesEnabled")
    private @Nullable Output<Boolean> availabilityZonesEnabled;

    /**
     * @return Determines whether availability zones are enabled. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> availabilityZonesEnabled() {
        return Optional.ofNullable(this.availabilityZonesEnabled);
    }

    /**
     * The key URI of the customer key to use for the encryption of the backup Storage Account.
     * 
     */
    @Import(name="backupStorageCustomerKeyUri")
    private @Nullable Output<String> backupStorageCustomerKeyUri;

    /**
     * @return The key URI of the customer key to use for the encryption of the backup Storage Account.
     * 
     */
    public Optional<Output<String>> backupStorageCustomerKeyUri() {
        return Optional.ofNullable(this.backupStorageCustomerKeyUri);
    }

    /**
     * The fragment of the cassandra.yaml configuration file to be included in the cassandra.yaml for all nodes in this Cassandra Datacenter. The fragment should be Base64 encoded and only a subset of keys is allowed.
     * 
     */
    @Import(name="base64EncodedYamlFragment")
    private @Nullable Output<String> base64EncodedYamlFragment;

    /**
     * @return The fragment of the cassandra.yaml configuration file to be included in the cassandra.yaml for all nodes in this Cassandra Datacenter. The fragment should be Base64 encoded and only a subset of keys is allowed.
     * 
     */
    public Optional<Output<String>> base64EncodedYamlFragment() {
        return Optional.ofNullable(this.base64EncodedYamlFragment);
    }

    /**
     * The ID of the Cassandra Cluster. Changing this forces a new Cassandra Datacenter to be created.
     * 
     */
    @Import(name="cassandraClusterId")
    private @Nullable Output<String> cassandraClusterId;

    /**
     * @return The ID of the Cassandra Cluster. Changing this forces a new Cassandra Datacenter to be created.
     * 
     */
    public Optional<Output<String>> cassandraClusterId() {
        return Optional.ofNullable(this.cassandraClusterId);
    }

    /**
     * The ID of the delegated management subnet for this Cassandra Datacenter. Changing this forces a new Cassandra Datacenter to be created.
     * 
     */
    @Import(name="delegatedManagementSubnetId")
    private @Nullable Output<String> delegatedManagementSubnetId;

    /**
     * @return The ID of the delegated management subnet for this Cassandra Datacenter. Changing this forces a new Cassandra Datacenter to be created.
     * 
     */
    public Optional<Output<String>> delegatedManagementSubnetId() {
        return Optional.ofNullable(this.delegatedManagementSubnetId);
    }

    /**
     * Determines the number of p30 disks that are attached to each node.
     * 
     */
    @Import(name="diskCount")
    private @Nullable Output<Integer> diskCount;

    /**
     * @return Determines the number of p30 disks that are attached to each node.
     * 
     */
    public Optional<Output<Integer>> diskCount() {
        return Optional.ofNullable(this.diskCount);
    }

    /**
     * The Disk SKU that is used for this Cassandra Datacenter. Defaults to `P30`.
     * 
     */
    @Import(name="diskSku")
    private @Nullable Output<String> diskSku;

    /**
     * @return The Disk SKU that is used for this Cassandra Datacenter. Defaults to `P30`.
     * 
     */
    public Optional<Output<String>> diskSku() {
        return Optional.ofNullable(this.diskSku);
    }

    /**
     * The Azure Region where the Cassandra Datacenter should exist. Changing this forces a new Cassandra Datacenter to be created.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The Azure Region where the Cassandra Datacenter should exist. Changing this forces a new Cassandra Datacenter to be created.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The key URI of the customer key to use for the encryption of the Managed Disk.
     * 
     */
    @Import(name="managedDiskCustomerKeyUri")
    private @Nullable Output<String> managedDiskCustomerKeyUri;

    /**
     * @return The key URI of the customer key to use for the encryption of the Managed Disk.
     * 
     */
    public Optional<Output<String>> managedDiskCustomerKeyUri() {
        return Optional.ofNullable(this.managedDiskCustomerKeyUri);
    }

    /**
     * The name which should be used for this Cassandra Datacenter. Changing this forces a new Cassandra Datacenter to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name which should be used for this Cassandra Datacenter. Changing this forces a new Cassandra Datacenter to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The number of nodes the Cassandra Datacenter should have. The number should be equal or greater than `3`. Defaults to `3`.
     * 
     */
    @Import(name="nodeCount")
    private @Nullable Output<Integer> nodeCount;

    /**
     * @return The number of nodes the Cassandra Datacenter should have. The number should be equal or greater than `3`. Defaults to `3`.
     * 
     */
    public Optional<Output<Integer>> nodeCount() {
        return Optional.ofNullable(this.nodeCount);
    }

    /**
     * A list of IP Address for the seed nodes in this Cassandra Datacenter.
     * 
     */
    @Import(name="seedNodeIpAddresses")
    private @Nullable Output<List<String>> seedNodeIpAddresses;

    /**
     * @return A list of IP Address for the seed nodes in this Cassandra Datacenter.
     * 
     */
    public Optional<Output<List<String>>> seedNodeIpAddresses() {
        return Optional.ofNullable(this.seedNodeIpAddresses);
    }

    /**
     * Determines the selected sku.
     * 
     * &gt; **NOTE:** In v4.0 of the provider the `sku_name` will have a default value of `Standard_E16s_v5`.
     * 
     */
    @Import(name="skuName")
    private @Nullable Output<String> skuName;

    /**
     * @return Determines the selected sku.
     * 
     * &gt; **NOTE:** In v4.0 of the provider the `sku_name` will have a default value of `Standard_E16s_v5`.
     * 
     */
    public Optional<Output<String>> skuName() {
        return Optional.ofNullable(this.skuName);
    }

    private CassandraDatacenterState() {}

    private CassandraDatacenterState(CassandraDatacenterState $) {
        this.availabilityZonesEnabled = $.availabilityZonesEnabled;
        this.backupStorageCustomerKeyUri = $.backupStorageCustomerKeyUri;
        this.base64EncodedYamlFragment = $.base64EncodedYamlFragment;
        this.cassandraClusterId = $.cassandraClusterId;
        this.delegatedManagementSubnetId = $.delegatedManagementSubnetId;
        this.diskCount = $.diskCount;
        this.diskSku = $.diskSku;
        this.location = $.location;
        this.managedDiskCustomerKeyUri = $.managedDiskCustomerKeyUri;
        this.name = $.name;
        this.nodeCount = $.nodeCount;
        this.seedNodeIpAddresses = $.seedNodeIpAddresses;
        this.skuName = $.skuName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CassandraDatacenterState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CassandraDatacenterState $;

        public Builder() {
            $ = new CassandraDatacenterState();
        }

        public Builder(CassandraDatacenterState defaults) {
            $ = new CassandraDatacenterState(Objects.requireNonNull(defaults));
        }

        /**
         * @param availabilityZonesEnabled Determines whether availability zones are enabled. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder availabilityZonesEnabled(@Nullable Output<Boolean> availabilityZonesEnabled) {
            $.availabilityZonesEnabled = availabilityZonesEnabled;
            return this;
        }

        /**
         * @param availabilityZonesEnabled Determines whether availability zones are enabled. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder availabilityZonesEnabled(Boolean availabilityZonesEnabled) {
            return availabilityZonesEnabled(Output.of(availabilityZonesEnabled));
        }

        /**
         * @param backupStorageCustomerKeyUri The key URI of the customer key to use for the encryption of the backup Storage Account.
         * 
         * @return builder
         * 
         */
        public Builder backupStorageCustomerKeyUri(@Nullable Output<String> backupStorageCustomerKeyUri) {
            $.backupStorageCustomerKeyUri = backupStorageCustomerKeyUri;
            return this;
        }

        /**
         * @param backupStorageCustomerKeyUri The key URI of the customer key to use for the encryption of the backup Storage Account.
         * 
         * @return builder
         * 
         */
        public Builder backupStorageCustomerKeyUri(String backupStorageCustomerKeyUri) {
            return backupStorageCustomerKeyUri(Output.of(backupStorageCustomerKeyUri));
        }

        /**
         * @param base64EncodedYamlFragment The fragment of the cassandra.yaml configuration file to be included in the cassandra.yaml for all nodes in this Cassandra Datacenter. The fragment should be Base64 encoded and only a subset of keys is allowed.
         * 
         * @return builder
         * 
         */
        public Builder base64EncodedYamlFragment(@Nullable Output<String> base64EncodedYamlFragment) {
            $.base64EncodedYamlFragment = base64EncodedYamlFragment;
            return this;
        }

        /**
         * @param base64EncodedYamlFragment The fragment of the cassandra.yaml configuration file to be included in the cassandra.yaml for all nodes in this Cassandra Datacenter. The fragment should be Base64 encoded and only a subset of keys is allowed.
         * 
         * @return builder
         * 
         */
        public Builder base64EncodedYamlFragment(String base64EncodedYamlFragment) {
            return base64EncodedYamlFragment(Output.of(base64EncodedYamlFragment));
        }

        /**
         * @param cassandraClusterId The ID of the Cassandra Cluster. Changing this forces a new Cassandra Datacenter to be created.
         * 
         * @return builder
         * 
         */
        public Builder cassandraClusterId(@Nullable Output<String> cassandraClusterId) {
            $.cassandraClusterId = cassandraClusterId;
            return this;
        }

        /**
         * @param cassandraClusterId The ID of the Cassandra Cluster. Changing this forces a new Cassandra Datacenter to be created.
         * 
         * @return builder
         * 
         */
        public Builder cassandraClusterId(String cassandraClusterId) {
            return cassandraClusterId(Output.of(cassandraClusterId));
        }

        /**
         * @param delegatedManagementSubnetId The ID of the delegated management subnet for this Cassandra Datacenter. Changing this forces a new Cassandra Datacenter to be created.
         * 
         * @return builder
         * 
         */
        public Builder delegatedManagementSubnetId(@Nullable Output<String> delegatedManagementSubnetId) {
            $.delegatedManagementSubnetId = delegatedManagementSubnetId;
            return this;
        }

        /**
         * @param delegatedManagementSubnetId The ID of the delegated management subnet for this Cassandra Datacenter. Changing this forces a new Cassandra Datacenter to be created.
         * 
         * @return builder
         * 
         */
        public Builder delegatedManagementSubnetId(String delegatedManagementSubnetId) {
            return delegatedManagementSubnetId(Output.of(delegatedManagementSubnetId));
        }

        /**
         * @param diskCount Determines the number of p30 disks that are attached to each node.
         * 
         * @return builder
         * 
         */
        public Builder diskCount(@Nullable Output<Integer> diskCount) {
            $.diskCount = diskCount;
            return this;
        }

        /**
         * @param diskCount Determines the number of p30 disks that are attached to each node.
         * 
         * @return builder
         * 
         */
        public Builder diskCount(Integer diskCount) {
            return diskCount(Output.of(diskCount));
        }

        /**
         * @param diskSku The Disk SKU that is used for this Cassandra Datacenter. Defaults to `P30`.
         * 
         * @return builder
         * 
         */
        public Builder diskSku(@Nullable Output<String> diskSku) {
            $.diskSku = diskSku;
            return this;
        }

        /**
         * @param diskSku The Disk SKU that is used for this Cassandra Datacenter. Defaults to `P30`.
         * 
         * @return builder
         * 
         */
        public Builder diskSku(String diskSku) {
            return diskSku(Output.of(diskSku));
        }

        /**
         * @param location The Azure Region where the Cassandra Datacenter should exist. Changing this forces a new Cassandra Datacenter to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The Azure Region where the Cassandra Datacenter should exist. Changing this forces a new Cassandra Datacenter to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param managedDiskCustomerKeyUri The key URI of the customer key to use for the encryption of the Managed Disk.
         * 
         * @return builder
         * 
         */
        public Builder managedDiskCustomerKeyUri(@Nullable Output<String> managedDiskCustomerKeyUri) {
            $.managedDiskCustomerKeyUri = managedDiskCustomerKeyUri;
            return this;
        }

        /**
         * @param managedDiskCustomerKeyUri The key URI of the customer key to use for the encryption of the Managed Disk.
         * 
         * @return builder
         * 
         */
        public Builder managedDiskCustomerKeyUri(String managedDiskCustomerKeyUri) {
            return managedDiskCustomerKeyUri(Output.of(managedDiskCustomerKeyUri));
        }

        /**
         * @param name The name which should be used for this Cassandra Datacenter. Changing this forces a new Cassandra Datacenter to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this Cassandra Datacenter. Changing this forces a new Cassandra Datacenter to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nodeCount The number of nodes the Cassandra Datacenter should have. The number should be equal or greater than `3`. Defaults to `3`.
         * 
         * @return builder
         * 
         */
        public Builder nodeCount(@Nullable Output<Integer> nodeCount) {
            $.nodeCount = nodeCount;
            return this;
        }

        /**
         * @param nodeCount The number of nodes the Cassandra Datacenter should have. The number should be equal or greater than `3`. Defaults to `3`.
         * 
         * @return builder
         * 
         */
        public Builder nodeCount(Integer nodeCount) {
            return nodeCount(Output.of(nodeCount));
        }

        /**
         * @param seedNodeIpAddresses A list of IP Address for the seed nodes in this Cassandra Datacenter.
         * 
         * @return builder
         * 
         */
        public Builder seedNodeIpAddresses(@Nullable Output<List<String>> seedNodeIpAddresses) {
            $.seedNodeIpAddresses = seedNodeIpAddresses;
            return this;
        }

        /**
         * @param seedNodeIpAddresses A list of IP Address for the seed nodes in this Cassandra Datacenter.
         * 
         * @return builder
         * 
         */
        public Builder seedNodeIpAddresses(List<String> seedNodeIpAddresses) {
            return seedNodeIpAddresses(Output.of(seedNodeIpAddresses));
        }

        /**
         * @param seedNodeIpAddresses A list of IP Address for the seed nodes in this Cassandra Datacenter.
         * 
         * @return builder
         * 
         */
        public Builder seedNodeIpAddresses(String... seedNodeIpAddresses) {
            return seedNodeIpAddresses(List.of(seedNodeIpAddresses));
        }

        /**
         * @param skuName Determines the selected sku.
         * 
         * &gt; **NOTE:** In v4.0 of the provider the `sku_name` will have a default value of `Standard_E16s_v5`.
         * 
         * @return builder
         * 
         */
        public Builder skuName(@Nullable Output<String> skuName) {
            $.skuName = skuName;
            return this;
        }

        /**
         * @param skuName Determines the selected sku.
         * 
         * &gt; **NOTE:** In v4.0 of the provider the `sku_name` will have a default value of `Standard_E16s_v5`.
         * 
         * @return builder
         * 
         */
        public Builder skuName(String skuName) {
            return skuName(Output.of(skuName));
        }

        public CassandraDatacenterState build() {
            return $;
        }
    }

}
