// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.mssql.outputs;

import com.pulumi.azure.mssql.outputs.GetManagedInstanceIdentity;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetManagedInstanceResult {
    /**
     * @return The administrator login name for the SQL Managed Instance.
     * 
     */
    private final String administratorLogin;
    /**
     * @return Specifies how the SQL Managed Instance will be collated.
     * 
     */
    private final String collation;
    /**
     * @return The ID of the SQL Managed Instance which shares the DNS zone.
     * 
     */
    private final String dnsZonePartnerId;
    /**
     * @return The fully qualified domain name of the Azure Managed SQL Instance.
     * 
     */
    private final String fqdn;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * @return An `identity` block as defined below.
     * 
     */
    private final List<GetManagedInstanceIdentity> identities;
    /**
     * @return What type of license the SQL Managed Instance uses.
     * 
     */
    private final String licenseType;
    /**
     * @return Specifies the supported Azure location where the resource exists.
     * 
     */
    private final String location;
    /**
     * @return The Minimum TLS Version.
     * 
     */
    private final String minimumTlsVersion;
    private final String name;
    /**
     * @return Specifies how the SQL Managed Instance will be accessed.
     * 
     */
    private final String proxyOverride;
    /**
     * @return Whether the public data endpoint is enabled.
     * 
     */
    private final Boolean publicDataEndpointEnabled;
    private final String resourceGroupName;
    /**
     * @return Specifies the SKU Name of the SQL Managed Instance.
     * 
     */
    private final String skuName;
    /**
     * @return Specifies the storage account type used to store backups for this database.
     * 
     */
    private final String storageAccountType;
    /**
     * @return Maximum storage space allocated for the SQL Managed Instance.
     * 
     */
    private final Integer storageSizeInGb;
    /**
     * @return The subnet resource ID that the SQL Managed Instance is associated with.
     * 
     */
    private final String subnetId;
    /**
     * @return A mapping of tags assigned to the resource.
     * 
     */
    private final Map<String,String> tags;
    /**
     * @return The TimeZone ID that the SQL Managed Instance is running in.
     * 
     */
    private final String timezoneId;
    /**
     * @return Number of cores that are assigned to the SQL Managed Instance.
     * 
     */
    private final Integer vcores;

    @CustomType.Constructor
    private GetManagedInstanceResult(
        @CustomType.Parameter("administratorLogin") String administratorLogin,
        @CustomType.Parameter("collation") String collation,
        @CustomType.Parameter("dnsZonePartnerId") String dnsZonePartnerId,
        @CustomType.Parameter("fqdn") String fqdn,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("identities") List<GetManagedInstanceIdentity> identities,
        @CustomType.Parameter("licenseType") String licenseType,
        @CustomType.Parameter("location") String location,
        @CustomType.Parameter("minimumTlsVersion") String minimumTlsVersion,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("proxyOverride") String proxyOverride,
        @CustomType.Parameter("publicDataEndpointEnabled") Boolean publicDataEndpointEnabled,
        @CustomType.Parameter("resourceGroupName") String resourceGroupName,
        @CustomType.Parameter("skuName") String skuName,
        @CustomType.Parameter("storageAccountType") String storageAccountType,
        @CustomType.Parameter("storageSizeInGb") Integer storageSizeInGb,
        @CustomType.Parameter("subnetId") String subnetId,
        @CustomType.Parameter("tags") Map<String,String> tags,
        @CustomType.Parameter("timezoneId") String timezoneId,
        @CustomType.Parameter("vcores") Integer vcores) {
        this.administratorLogin = administratorLogin;
        this.collation = collation;
        this.dnsZonePartnerId = dnsZonePartnerId;
        this.fqdn = fqdn;
        this.id = id;
        this.identities = identities;
        this.licenseType = licenseType;
        this.location = location;
        this.minimumTlsVersion = minimumTlsVersion;
        this.name = name;
        this.proxyOverride = proxyOverride;
        this.publicDataEndpointEnabled = publicDataEndpointEnabled;
        this.resourceGroupName = resourceGroupName;
        this.skuName = skuName;
        this.storageAccountType = storageAccountType;
        this.storageSizeInGb = storageSizeInGb;
        this.subnetId = subnetId;
        this.tags = tags;
        this.timezoneId = timezoneId;
        this.vcores = vcores;
    }

    /**
     * @return The administrator login name for the SQL Managed Instance.
     * 
     */
    public String administratorLogin() {
        return this.administratorLogin;
    }
    /**
     * @return Specifies how the SQL Managed Instance will be collated.
     * 
     */
    public String collation() {
        return this.collation;
    }
    /**
     * @return The ID of the SQL Managed Instance which shares the DNS zone.
     * 
     */
    public String dnsZonePartnerId() {
        return this.dnsZonePartnerId;
    }
    /**
     * @return The fully qualified domain name of the Azure Managed SQL Instance.
     * 
     */
    public String fqdn() {
        return this.fqdn;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return An `identity` block as defined below.
     * 
     */
    public List<GetManagedInstanceIdentity> identities() {
        return this.identities;
    }
    /**
     * @return What type of license the SQL Managed Instance uses.
     * 
     */
    public String licenseType() {
        return this.licenseType;
    }
    /**
     * @return Specifies the supported Azure location where the resource exists.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return The Minimum TLS Version.
     * 
     */
    public String minimumTlsVersion() {
        return this.minimumTlsVersion;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return Specifies how the SQL Managed Instance will be accessed.
     * 
     */
    public String proxyOverride() {
        return this.proxyOverride;
    }
    /**
     * @return Whether the public data endpoint is enabled.
     * 
     */
    public Boolean publicDataEndpointEnabled() {
        return this.publicDataEndpointEnabled;
    }
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return Specifies the SKU Name of the SQL Managed Instance.
     * 
     */
    public String skuName() {
        return this.skuName;
    }
    /**
     * @return Specifies the storage account type used to store backups for this database.
     * 
     */
    public String storageAccountType() {
        return this.storageAccountType;
    }
    /**
     * @return Maximum storage space allocated for the SQL Managed Instance.
     * 
     */
    public Integer storageSizeInGb() {
        return this.storageSizeInGb;
    }
    /**
     * @return The subnet resource ID that the SQL Managed Instance is associated with.
     * 
     */
    public String subnetId() {
        return this.subnetId;
    }
    /**
     * @return A mapping of tags assigned to the resource.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return The TimeZone ID that the SQL Managed Instance is running in.
     * 
     */
    public String timezoneId() {
        return this.timezoneId;
    }
    /**
     * @return Number of cores that are assigned to the SQL Managed Instance.
     * 
     */
    public Integer vcores() {
        return this.vcores;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedInstanceResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String administratorLogin;
        private String collation;
        private String dnsZonePartnerId;
        private String fqdn;
        private String id;
        private List<GetManagedInstanceIdentity> identities;
        private String licenseType;
        private String location;
        private String minimumTlsVersion;
        private String name;
        private String proxyOverride;
        private Boolean publicDataEndpointEnabled;
        private String resourceGroupName;
        private String skuName;
        private String storageAccountType;
        private Integer storageSizeInGb;
        private String subnetId;
        private Map<String,String> tags;
        private String timezoneId;
        private Integer vcores;

        public Builder() {
    	      // Empty
        }

        public Builder(GetManagedInstanceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.administratorLogin = defaults.administratorLogin;
    	      this.collation = defaults.collation;
    	      this.dnsZonePartnerId = defaults.dnsZonePartnerId;
    	      this.fqdn = defaults.fqdn;
    	      this.id = defaults.id;
    	      this.identities = defaults.identities;
    	      this.licenseType = defaults.licenseType;
    	      this.location = defaults.location;
    	      this.minimumTlsVersion = defaults.minimumTlsVersion;
    	      this.name = defaults.name;
    	      this.proxyOverride = defaults.proxyOverride;
    	      this.publicDataEndpointEnabled = defaults.publicDataEndpointEnabled;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.skuName = defaults.skuName;
    	      this.storageAccountType = defaults.storageAccountType;
    	      this.storageSizeInGb = defaults.storageSizeInGb;
    	      this.subnetId = defaults.subnetId;
    	      this.tags = defaults.tags;
    	      this.timezoneId = defaults.timezoneId;
    	      this.vcores = defaults.vcores;
        }

        public Builder administratorLogin(String administratorLogin) {
            this.administratorLogin = Objects.requireNonNull(administratorLogin);
            return this;
        }
        public Builder collation(String collation) {
            this.collation = Objects.requireNonNull(collation);
            return this;
        }
        public Builder dnsZonePartnerId(String dnsZonePartnerId) {
            this.dnsZonePartnerId = Objects.requireNonNull(dnsZonePartnerId);
            return this;
        }
        public Builder fqdn(String fqdn) {
            this.fqdn = Objects.requireNonNull(fqdn);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder identities(List<GetManagedInstanceIdentity> identities) {
            this.identities = Objects.requireNonNull(identities);
            return this;
        }
        public Builder identities(GetManagedInstanceIdentity... identities) {
            return identities(List.of(identities));
        }
        public Builder licenseType(String licenseType) {
            this.licenseType = Objects.requireNonNull(licenseType);
            return this;
        }
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        public Builder minimumTlsVersion(String minimumTlsVersion) {
            this.minimumTlsVersion = Objects.requireNonNull(minimumTlsVersion);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder proxyOverride(String proxyOverride) {
            this.proxyOverride = Objects.requireNonNull(proxyOverride);
            return this;
        }
        public Builder publicDataEndpointEnabled(Boolean publicDataEndpointEnabled) {
            this.publicDataEndpointEnabled = Objects.requireNonNull(publicDataEndpointEnabled);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder skuName(String skuName) {
            this.skuName = Objects.requireNonNull(skuName);
            return this;
        }
        public Builder storageAccountType(String storageAccountType) {
            this.storageAccountType = Objects.requireNonNull(storageAccountType);
            return this;
        }
        public Builder storageSizeInGb(Integer storageSizeInGb) {
            this.storageSizeInGb = Objects.requireNonNull(storageSizeInGb);
            return this;
        }
        public Builder subnetId(String subnetId) {
            this.subnetId = Objects.requireNonNull(subnetId);
            return this;
        }
        public Builder tags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder timezoneId(String timezoneId) {
            this.timezoneId = Objects.requireNonNull(timezoneId);
            return this;
        }
        public Builder vcores(Integer vcores) {
            this.vcores = Objects.requireNonNull(vcores);
            return this;
        }        public GetManagedInstanceResult build() {
            return new GetManagedInstanceResult(administratorLogin, collation, dnsZonePartnerId, fqdn, id, identities, licenseType, location, minimumTlsVersion, name, proxyOverride, publicDataEndpointEnabled, resourceGroupName, skuName, storageAccountType, storageSizeInGb, subnetId, tags, timezoneId, vcores);
        }
    }
}
