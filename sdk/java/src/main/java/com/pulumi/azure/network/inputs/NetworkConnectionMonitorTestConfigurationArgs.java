// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network.inputs;

import com.pulumi.azure.network.inputs.NetworkConnectionMonitorTestConfigurationHttpConfigurationArgs;
import com.pulumi.azure.network.inputs.NetworkConnectionMonitorTestConfigurationIcmpConfigurationArgs;
import com.pulumi.azure.network.inputs.NetworkConnectionMonitorTestConfigurationSuccessThresholdArgs;
import com.pulumi.azure.network.inputs.NetworkConnectionMonitorTestConfigurationTcpConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkConnectionMonitorTestConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworkConnectionMonitorTestConfigurationArgs Empty = new NetworkConnectionMonitorTestConfigurationArgs();

    /**
     * A `http_configuration` block as defined below.
     * 
     */
    @Import(name="httpConfiguration")
    private @Nullable Output<NetworkConnectionMonitorTestConfigurationHttpConfigurationArgs> httpConfiguration;

    /**
     * @return A `http_configuration` block as defined below.
     * 
     */
    public Optional<Output<NetworkConnectionMonitorTestConfigurationHttpConfigurationArgs>> httpConfiguration() {
        return Optional.ofNullable(this.httpConfiguration);
    }

    /**
     * A `icmp_configuration` block as defined below.
     * 
     */
    @Import(name="icmpConfiguration")
    private @Nullable Output<NetworkConnectionMonitorTestConfigurationIcmpConfigurationArgs> icmpConfiguration;

    /**
     * @return A `icmp_configuration` block as defined below.
     * 
     */
    public Optional<Output<NetworkConnectionMonitorTestConfigurationIcmpConfigurationArgs>> icmpConfiguration() {
        return Optional.ofNullable(this.icmpConfiguration);
    }

    /**
     * The name of test configuration for the Network Connection Monitor.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of test configuration for the Network Connection Monitor.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The preferred IP version which is used in the test evaluation. Possible values are `IPv4` and `IPv6`.
     * 
     */
    @Import(name="preferredIpVersion")
    private @Nullable Output<String> preferredIpVersion;

    /**
     * @return The preferred IP version which is used in the test evaluation. Possible values are `IPv4` and `IPv6`.
     * 
     */
    public Optional<Output<String>> preferredIpVersion() {
        return Optional.ofNullable(this.preferredIpVersion);
    }

    /**
     * The protocol used to evaluate tests. Possible values are `Tcp`, `Http` and `Icmp`.
     * 
     */
    @Import(name="protocol", required=true)
    private Output<String> protocol;

    /**
     * @return The protocol used to evaluate tests. Possible values are `Tcp`, `Http` and `Icmp`.
     * 
     */
    public Output<String> protocol() {
        return this.protocol;
    }

    /**
     * A `success_threshold` block as defined below.
     * 
     */
    @Import(name="successThreshold")
    private @Nullable Output<NetworkConnectionMonitorTestConfigurationSuccessThresholdArgs> successThreshold;

    /**
     * @return A `success_threshold` block as defined below.
     * 
     */
    public Optional<Output<NetworkConnectionMonitorTestConfigurationSuccessThresholdArgs>> successThreshold() {
        return Optional.ofNullable(this.successThreshold);
    }

    /**
     * A `tcp_configuration` block as defined below.
     * 
     */
    @Import(name="tcpConfiguration")
    private @Nullable Output<NetworkConnectionMonitorTestConfigurationTcpConfigurationArgs> tcpConfiguration;

    /**
     * @return A `tcp_configuration` block as defined below.
     * 
     */
    public Optional<Output<NetworkConnectionMonitorTestConfigurationTcpConfigurationArgs>> tcpConfiguration() {
        return Optional.ofNullable(this.tcpConfiguration);
    }

    /**
     * The time interval in seconds at which the test evaluation will happen. Defaults to `60`.
     * 
     */
    @Import(name="testFrequencyInSeconds")
    private @Nullable Output<Integer> testFrequencyInSeconds;

    /**
     * @return The time interval in seconds at which the test evaluation will happen. Defaults to `60`.
     * 
     */
    public Optional<Output<Integer>> testFrequencyInSeconds() {
        return Optional.ofNullable(this.testFrequencyInSeconds);
    }

    private NetworkConnectionMonitorTestConfigurationArgs() {}

    private NetworkConnectionMonitorTestConfigurationArgs(NetworkConnectionMonitorTestConfigurationArgs $) {
        this.httpConfiguration = $.httpConfiguration;
        this.icmpConfiguration = $.icmpConfiguration;
        this.name = $.name;
        this.preferredIpVersion = $.preferredIpVersion;
        this.protocol = $.protocol;
        this.successThreshold = $.successThreshold;
        this.tcpConfiguration = $.tcpConfiguration;
        this.testFrequencyInSeconds = $.testFrequencyInSeconds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkConnectionMonitorTestConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkConnectionMonitorTestConfigurationArgs $;

        public Builder() {
            $ = new NetworkConnectionMonitorTestConfigurationArgs();
        }

        public Builder(NetworkConnectionMonitorTestConfigurationArgs defaults) {
            $ = new NetworkConnectionMonitorTestConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param httpConfiguration A `http_configuration` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder httpConfiguration(@Nullable Output<NetworkConnectionMonitorTestConfigurationHttpConfigurationArgs> httpConfiguration) {
            $.httpConfiguration = httpConfiguration;
            return this;
        }

        /**
         * @param httpConfiguration A `http_configuration` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder httpConfiguration(NetworkConnectionMonitorTestConfigurationHttpConfigurationArgs httpConfiguration) {
            return httpConfiguration(Output.of(httpConfiguration));
        }

        /**
         * @param icmpConfiguration A `icmp_configuration` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder icmpConfiguration(@Nullable Output<NetworkConnectionMonitorTestConfigurationIcmpConfigurationArgs> icmpConfiguration) {
            $.icmpConfiguration = icmpConfiguration;
            return this;
        }

        /**
         * @param icmpConfiguration A `icmp_configuration` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder icmpConfiguration(NetworkConnectionMonitorTestConfigurationIcmpConfigurationArgs icmpConfiguration) {
            return icmpConfiguration(Output.of(icmpConfiguration));
        }

        /**
         * @param name The name of test configuration for the Network Connection Monitor.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of test configuration for the Network Connection Monitor.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param preferredIpVersion The preferred IP version which is used in the test evaluation. Possible values are `IPv4` and `IPv6`.
         * 
         * @return builder
         * 
         */
        public Builder preferredIpVersion(@Nullable Output<String> preferredIpVersion) {
            $.preferredIpVersion = preferredIpVersion;
            return this;
        }

        /**
         * @param preferredIpVersion The preferred IP version which is used in the test evaluation. Possible values are `IPv4` and `IPv6`.
         * 
         * @return builder
         * 
         */
        public Builder preferredIpVersion(String preferredIpVersion) {
            return preferredIpVersion(Output.of(preferredIpVersion));
        }

        /**
         * @param protocol The protocol used to evaluate tests. Possible values are `Tcp`, `Http` and `Icmp`.
         * 
         * @return builder
         * 
         */
        public Builder protocol(Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol The protocol used to evaluate tests. Possible values are `Tcp`, `Http` and `Icmp`.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param successThreshold A `success_threshold` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder successThreshold(@Nullable Output<NetworkConnectionMonitorTestConfigurationSuccessThresholdArgs> successThreshold) {
            $.successThreshold = successThreshold;
            return this;
        }

        /**
         * @param successThreshold A `success_threshold` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder successThreshold(NetworkConnectionMonitorTestConfigurationSuccessThresholdArgs successThreshold) {
            return successThreshold(Output.of(successThreshold));
        }

        /**
         * @param tcpConfiguration A `tcp_configuration` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder tcpConfiguration(@Nullable Output<NetworkConnectionMonitorTestConfigurationTcpConfigurationArgs> tcpConfiguration) {
            $.tcpConfiguration = tcpConfiguration;
            return this;
        }

        /**
         * @param tcpConfiguration A `tcp_configuration` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder tcpConfiguration(NetworkConnectionMonitorTestConfigurationTcpConfigurationArgs tcpConfiguration) {
            return tcpConfiguration(Output.of(tcpConfiguration));
        }

        /**
         * @param testFrequencyInSeconds The time interval in seconds at which the test evaluation will happen. Defaults to `60`.
         * 
         * @return builder
         * 
         */
        public Builder testFrequencyInSeconds(@Nullable Output<Integer> testFrequencyInSeconds) {
            $.testFrequencyInSeconds = testFrequencyInSeconds;
            return this;
        }

        /**
         * @param testFrequencyInSeconds The time interval in seconds at which the test evaluation will happen. Defaults to `60`.
         * 
         * @return builder
         * 
         */
        public Builder testFrequencyInSeconds(Integer testFrequencyInSeconds) {
            return testFrequencyInSeconds(Output.of(testFrequencyInSeconds));
        }

        public NetworkConnectionMonitorTestConfigurationArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("NetworkConnectionMonitorTestConfigurationArgs", "name");
            }
            if ($.protocol == null) {
                throw new MissingRequiredPropertyException("NetworkConnectionMonitorTestConfigurationArgs", "protocol");
            }
            return $;
        }
    }

}
