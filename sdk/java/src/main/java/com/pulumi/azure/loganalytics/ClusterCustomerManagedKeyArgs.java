// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.loganalytics;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class ClusterCustomerManagedKeyArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterCustomerManagedKeyArgs Empty = new ClusterCustomerManagedKeyArgs();

    /**
     * The ID of the Key Vault Key to use for encryption.
     * 
     */
    @Import(name="keyVaultKeyId", required=true)
    private Output<String> keyVaultKeyId;

    /**
     * @return The ID of the Key Vault Key to use for encryption.
     * 
     */
    public Output<String> keyVaultKeyId() {
        return this.keyVaultKeyId;
    }

    /**
     * The ID of the Log Analytics Cluster. Changing this forces a new Log Analytics Cluster Customer Managed Key to be created.
     * 
     */
    @Import(name="logAnalyticsClusterId", required=true)
    private Output<String> logAnalyticsClusterId;

    /**
     * @return The ID of the Log Analytics Cluster. Changing this forces a new Log Analytics Cluster Customer Managed Key to be created.
     * 
     */
    public Output<String> logAnalyticsClusterId() {
        return this.logAnalyticsClusterId;
    }

    private ClusterCustomerManagedKeyArgs() {}

    private ClusterCustomerManagedKeyArgs(ClusterCustomerManagedKeyArgs $) {
        this.keyVaultKeyId = $.keyVaultKeyId;
        this.logAnalyticsClusterId = $.logAnalyticsClusterId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterCustomerManagedKeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterCustomerManagedKeyArgs $;

        public Builder() {
            $ = new ClusterCustomerManagedKeyArgs();
        }

        public Builder(ClusterCustomerManagedKeyArgs defaults) {
            $ = new ClusterCustomerManagedKeyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param keyVaultKeyId The ID of the Key Vault Key to use for encryption.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultKeyId(Output<String> keyVaultKeyId) {
            $.keyVaultKeyId = keyVaultKeyId;
            return this;
        }

        /**
         * @param keyVaultKeyId The ID of the Key Vault Key to use for encryption.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultKeyId(String keyVaultKeyId) {
            return keyVaultKeyId(Output.of(keyVaultKeyId));
        }

        /**
         * @param logAnalyticsClusterId The ID of the Log Analytics Cluster. Changing this forces a new Log Analytics Cluster Customer Managed Key to be created.
         * 
         * @return builder
         * 
         */
        public Builder logAnalyticsClusterId(Output<String> logAnalyticsClusterId) {
            $.logAnalyticsClusterId = logAnalyticsClusterId;
            return this;
        }

        /**
         * @param logAnalyticsClusterId The ID of the Log Analytics Cluster. Changing this forces a new Log Analytics Cluster Customer Managed Key to be created.
         * 
         * @return builder
         * 
         */
        public Builder logAnalyticsClusterId(String logAnalyticsClusterId) {
            return logAnalyticsClusterId(Output.of(logAnalyticsClusterId));
        }

        public ClusterCustomerManagedKeyArgs build() {
            if ($.keyVaultKeyId == null) {
                throw new MissingRequiredPropertyException("ClusterCustomerManagedKeyArgs", "keyVaultKeyId");
            }
            if ($.logAnalyticsClusterId == null) {
                throw new MissingRequiredPropertyException("ClusterCustomerManagedKeyArgs", "logAnalyticsClusterId");
            }
            return $;
        }
    }

}
