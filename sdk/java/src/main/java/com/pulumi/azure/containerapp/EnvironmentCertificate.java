// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerapp;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.containerapp.EnvironmentCertificateArgs;
import com.pulumi.azure.containerapp.inputs.EnvironmentCertificateState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a Container App Environment Certificate.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * A Container App Environment Certificate can be imported using the `resource id`, e.g.
 * 
 * ```sh
 * $ pulumi import azure:containerapp/environmentCertificate:EnvironmentCertificate example &#34;/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resGroup1/providers/Microsoft.App/managedEnvironments/myenv/certificates/mycertificate&#34;
 * ```
 * 
 */
@ResourceType(type="azure:containerapp/environmentCertificate:EnvironmentCertificate")
public class EnvironmentCertificate extends com.pulumi.resources.CustomResource {
    /**
     * The Certificate Private Key as a base64 encoded PFX or PEM. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="certificateBlobBase64", refs={String.class}, tree="[0]")
    private Output<String> certificateBlobBase64;

    /**
     * @return The Certificate Private Key as a base64 encoded PFX or PEM. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> certificateBlobBase64() {
        return this.certificateBlobBase64;
    }
    /**
     * The password for the Certificate. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="certificatePassword", refs={String.class}, tree="[0]")
    private Output<String> certificatePassword;

    /**
     * @return The password for the Certificate. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> certificatePassword() {
        return this.certificatePassword;
    }
    /**
     * The Container App Managed Environment ID to configure this Certificate on. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="containerAppEnvironmentId", refs={String.class}, tree="[0]")
    private Output<String> containerAppEnvironmentId;

    /**
     * @return The Container App Managed Environment ID to configure this Certificate on. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> containerAppEnvironmentId() {
        return this.containerAppEnvironmentId;
    }
    /**
     * The expiration date for the Certificate.
     * 
     */
    @Export(name="expirationDate", refs={String.class}, tree="[0]")
    private Output<String> expirationDate;

    /**
     * @return The expiration date for the Certificate.
     * 
     */
    public Output<String> expirationDate() {
        return this.expirationDate;
    }
    /**
     * The date of issue for the Certificate.
     * 
     */
    @Export(name="issueDate", refs={String.class}, tree="[0]")
    private Output<String> issueDate;

    /**
     * @return The date of issue for the Certificate.
     * 
     */
    public Output<String> issueDate() {
        return this.issueDate;
    }
    /**
     * The Certificate Issuer.
     * 
     */
    @Export(name="issuer", refs={String.class}, tree="[0]")
    private Output<String> issuer;

    /**
     * @return The Certificate Issuer.
     * 
     */
    public Output<String> issuer() {
        return this.issuer;
    }
    /**
     * The name of the Container Apps Environment Certificate. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the Container Apps Environment Certificate. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The Subject Name for the Certificate.
     * 
     */
    @Export(name="subjectName", refs={String.class}, tree="[0]")
    private Output<String> subjectName;

    /**
     * @return The Subject Name for the Certificate.
     * 
     */
    public Output<String> subjectName() {
        return this.subjectName;
    }
    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Export(name="tags", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * The Thumbprint of the Certificate.
     * 
     */
    @Export(name="thumbprint", refs={String.class}, tree="[0]")
    private Output<String> thumbprint;

    /**
     * @return The Thumbprint of the Certificate.
     * 
     */
    public Output<String> thumbprint() {
        return this.thumbprint;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public EnvironmentCertificate(String name) {
        this(name, EnvironmentCertificateArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public EnvironmentCertificate(String name, EnvironmentCertificateArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public EnvironmentCertificate(String name, EnvironmentCertificateArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:containerapp/environmentCertificate:EnvironmentCertificate", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()));
    }

    private EnvironmentCertificate(String name, Output<String> id, @Nullable EnvironmentCertificateState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:containerapp/environmentCertificate:EnvironmentCertificate", name, state, makeResourceOptions(options, id));
    }

    private static EnvironmentCertificateArgs makeArgs(EnvironmentCertificateArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? EnvironmentCertificateArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "certificatePassword"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static EnvironmentCertificate get(String name, Output<String> id, @Nullable EnvironmentCertificateState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new EnvironmentCertificate(name, id, state, options);
    }
}
