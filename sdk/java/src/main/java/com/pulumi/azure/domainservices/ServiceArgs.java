// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.domainservices;

import com.pulumi.azure.domainservices.inputs.ServiceInitialReplicaSetArgs;
import com.pulumi.azure.domainservices.inputs.ServiceNotificationsArgs;
import com.pulumi.azure.domainservices.inputs.ServiceSecureLdapArgs;
import com.pulumi.azure.domainservices.inputs.ServiceSecurityArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceArgs Empty = new ServiceArgs();

    /**
     * The configuration type of this Active Directory Domain. Possible values are `FullySynced` and `ResourceTrusting`. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="domainConfigurationType")
    private @Nullable Output<String> domainConfigurationType;

    /**
     * @return The configuration type of this Active Directory Domain. Possible values are `FullySynced` and `ResourceTrusting`. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> domainConfigurationType() {
        return Optional.ofNullable(this.domainConfigurationType);
    }

    /**
     * The Active Directory domain to use. See [official documentation](https://docs.microsoft.com/azure/active-directory-domain-services/tutorial-create-instance#create-a-managed-domain) for constraints and recommendations. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="domainName", required=true)
    private Output<String> domainName;

    /**
     * @return The Active Directory domain to use. See [official documentation](https://docs.microsoft.com/azure/active-directory-domain-services/tutorial-create-instance#create-a-managed-domain) for constraints and recommendations. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> domainName() {
        return this.domainName;
    }

    /**
     * Whether to enable group-based filtered sync (also called scoped synchronisation). Defaults to `false`.
     * 
     */
    @Import(name="filteredSyncEnabled")
    private @Nullable Output<Boolean> filteredSyncEnabled;

    /**
     * @return Whether to enable group-based filtered sync (also called scoped synchronisation). Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> filteredSyncEnabled() {
        return Optional.ofNullable(this.filteredSyncEnabled);
    }

    /**
     * An `initial_replica_set` block as defined below. The initial replica set inherits the same location as the Domain Service resource.
     * 
     */
    @Import(name="initialReplicaSet", required=true)
    private Output<ServiceInitialReplicaSetArgs> initialReplicaSet;

    /**
     * @return An `initial_replica_set` block as defined below. The initial replica set inherits the same location as the Domain Service resource.
     * 
     */
    public Output<ServiceInitialReplicaSetArgs> initialReplicaSet() {
        return this.initialReplicaSet;
    }

    /**
     * The Azure location where the Domain Service exists. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The Azure location where the Domain Service exists. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The display name for your managed Active Directory Domain Service resource. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The display name for your managed Active Directory Domain Service resource. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A `notifications` block as defined below.
     * 
     */
    @Import(name="notifications")
    private @Nullable Output<ServiceNotificationsArgs> notifications;

    /**
     * @return A `notifications` block as defined below.
     * 
     */
    public Optional<Output<ServiceNotificationsArgs>> notifications() {
        return Optional.ofNullable(this.notifications);
    }

    /**
     * The name of the Resource Group in which the Domain Service should exist. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the Resource Group in which the Domain Service should exist. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * A `secure_ldap` block as defined below.
     * 
     */
    @Import(name="secureLdap")
    private @Nullable Output<ServiceSecureLdapArgs> secureLdap;

    /**
     * @return A `secure_ldap` block as defined below.
     * 
     */
    public Optional<Output<ServiceSecureLdapArgs>> secureLdap() {
        return Optional.ofNullable(this.secureLdap);
    }

    /**
     * A `security` block as defined below.
     * 
     */
    @Import(name="security")
    private @Nullable Output<ServiceSecurityArgs> security;

    /**
     * @return A `security` block as defined below.
     * 
     */
    public Optional<Output<ServiceSecurityArgs>> security() {
        return Optional.ofNullable(this.security);
    }

    /**
     * The SKU to use when provisioning the Domain Service resource. One of `Standard`, `Enterprise` or `Premium`.
     * 
     */
    @Import(name="sku", required=true)
    private Output<String> sku;

    /**
     * @return The SKU to use when provisioning the Domain Service resource. One of `Standard`, `Enterprise` or `Premium`.
     * 
     */
    public Output<String> sku() {
        return this.sku;
    }

    /**
     * A mapping of tags assigned to the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags assigned to the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private ServiceArgs() {}

    private ServiceArgs(ServiceArgs $) {
        this.domainConfigurationType = $.domainConfigurationType;
        this.domainName = $.domainName;
        this.filteredSyncEnabled = $.filteredSyncEnabled;
        this.initialReplicaSet = $.initialReplicaSet;
        this.location = $.location;
        this.name = $.name;
        this.notifications = $.notifications;
        this.resourceGroupName = $.resourceGroupName;
        this.secureLdap = $.secureLdap;
        this.security = $.security;
        this.sku = $.sku;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceArgs $;

        public Builder() {
            $ = new ServiceArgs();
        }

        public Builder(ServiceArgs defaults) {
            $ = new ServiceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param domainConfigurationType The configuration type of this Active Directory Domain. Possible values are `FullySynced` and `ResourceTrusting`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder domainConfigurationType(@Nullable Output<String> domainConfigurationType) {
            $.domainConfigurationType = domainConfigurationType;
            return this;
        }

        /**
         * @param domainConfigurationType The configuration type of this Active Directory Domain. Possible values are `FullySynced` and `ResourceTrusting`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder domainConfigurationType(String domainConfigurationType) {
            return domainConfigurationType(Output.of(domainConfigurationType));
        }

        /**
         * @param domainName The Active Directory domain to use. See [official documentation](https://docs.microsoft.com/azure/active-directory-domain-services/tutorial-create-instance#create-a-managed-domain) for constraints and recommendations. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder domainName(Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        /**
         * @param domainName The Active Directory domain to use. See [official documentation](https://docs.microsoft.com/azure/active-directory-domain-services/tutorial-create-instance#create-a-managed-domain) for constraints and recommendations. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        /**
         * @param filteredSyncEnabled Whether to enable group-based filtered sync (also called scoped synchronisation). Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder filteredSyncEnabled(@Nullable Output<Boolean> filteredSyncEnabled) {
            $.filteredSyncEnabled = filteredSyncEnabled;
            return this;
        }

        /**
         * @param filteredSyncEnabled Whether to enable group-based filtered sync (also called scoped synchronisation). Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder filteredSyncEnabled(Boolean filteredSyncEnabled) {
            return filteredSyncEnabled(Output.of(filteredSyncEnabled));
        }

        /**
         * @param initialReplicaSet An `initial_replica_set` block as defined below. The initial replica set inherits the same location as the Domain Service resource.
         * 
         * @return builder
         * 
         */
        public Builder initialReplicaSet(Output<ServiceInitialReplicaSetArgs> initialReplicaSet) {
            $.initialReplicaSet = initialReplicaSet;
            return this;
        }

        /**
         * @param initialReplicaSet An `initial_replica_set` block as defined below. The initial replica set inherits the same location as the Domain Service resource.
         * 
         * @return builder
         * 
         */
        public Builder initialReplicaSet(ServiceInitialReplicaSetArgs initialReplicaSet) {
            return initialReplicaSet(Output.of(initialReplicaSet));
        }

        /**
         * @param location The Azure location where the Domain Service exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The Azure location where the Domain Service exists. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The display name for your managed Active Directory Domain Service resource. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The display name for your managed Active Directory Domain Service resource. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param notifications A `notifications` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder notifications(@Nullable Output<ServiceNotificationsArgs> notifications) {
            $.notifications = notifications;
            return this;
        }

        /**
         * @param notifications A `notifications` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder notifications(ServiceNotificationsArgs notifications) {
            return notifications(Output.of(notifications));
        }

        /**
         * @param resourceGroupName The name of the Resource Group in which the Domain Service should exist. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the Resource Group in which the Domain Service should exist. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param secureLdap A `secure_ldap` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder secureLdap(@Nullable Output<ServiceSecureLdapArgs> secureLdap) {
            $.secureLdap = secureLdap;
            return this;
        }

        /**
         * @param secureLdap A `secure_ldap` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder secureLdap(ServiceSecureLdapArgs secureLdap) {
            return secureLdap(Output.of(secureLdap));
        }

        /**
         * @param security A `security` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder security(@Nullable Output<ServiceSecurityArgs> security) {
            $.security = security;
            return this;
        }

        /**
         * @param security A `security` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder security(ServiceSecurityArgs security) {
            return security(Output.of(security));
        }

        /**
         * @param sku The SKU to use when provisioning the Domain Service resource. One of `Standard`, `Enterprise` or `Premium`.
         * 
         * @return builder
         * 
         */
        public Builder sku(Output<String> sku) {
            $.sku = sku;
            return this;
        }

        /**
         * @param sku The SKU to use when provisioning the Domain Service resource. One of `Standard`, `Enterprise` or `Premium`.
         * 
         * @return builder
         * 
         */
        public Builder sku(String sku) {
            return sku(Output.of(sku));
        }

        /**
         * @param tags A mapping of tags assigned to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags assigned to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public ServiceArgs build() {
            if ($.domainName == null) {
                throw new MissingRequiredPropertyException("ServiceArgs", "domainName");
            }
            if ($.initialReplicaSet == null) {
                throw new MissingRequiredPropertyException("ServiceArgs", "initialReplicaSet");
            }
            if ($.resourceGroupName == null) {
                throw new MissingRequiredPropertyException("ServiceArgs", "resourceGroupName");
            }
            if ($.sku == null) {
                throw new MissingRequiredPropertyException("ServiceArgs", "sku");
            }
            return $;
        }
    }

}
