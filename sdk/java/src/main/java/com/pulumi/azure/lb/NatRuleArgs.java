// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.lb;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NatRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final NatRuleArgs Empty = new NatRuleArgs();

    /**
     * Specifies a reference to backendAddressPool resource.
     * 
     */
    @Import(name="backendAddressPoolId")
    private @Nullable Output<String> backendAddressPoolId;

    /**
     * @return Specifies a reference to backendAddressPool resource.
     * 
     */
    public Optional<Output<String>> backendAddressPoolId() {
        return Optional.ofNullable(this.backendAddressPoolId);
    }

    /**
     * The port used for internal connections on the endpoint. Possible values range between 1 and 65535, inclusive.
     * 
     */
    @Import(name="backendPort", required=true)
    private Output<Integer> backendPort;

    /**
     * @return The port used for internal connections on the endpoint. Possible values range between 1 and 65535, inclusive.
     * 
     */
    public Output<Integer> backendPort() {
        return this.backendPort;
    }

    /**
     * Are the Floating IPs enabled for this Load Balancer Rule? A &#34;floating” IP is reassigned to a secondary server in case the primary server fails. Required to configure a SQL AlwaysOn Availability Group. Defaults to `false`.
     * 
     */
    @Import(name="enableFloatingIp")
    private @Nullable Output<Boolean> enableFloatingIp;

    /**
     * @return Are the Floating IPs enabled for this Load Balancer Rule? A &#34;floating” IP is reassigned to a secondary server in case the primary server fails. Required to configure a SQL AlwaysOn Availability Group. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> enableFloatingIp() {
        return Optional.ofNullable(this.enableFloatingIp);
    }

    /**
     * Is TCP Reset enabled for this Load Balancer Rule?
     * 
     */
    @Import(name="enableTcpReset")
    private @Nullable Output<Boolean> enableTcpReset;

    /**
     * @return Is TCP Reset enabled for this Load Balancer Rule?
     * 
     */
    public Optional<Output<Boolean>> enableTcpReset() {
        return Optional.ofNullable(this.enableTcpReset);
    }

    /**
     * The name of the frontend IP configuration exposing this rule.
     * 
     */
    @Import(name="frontendIpConfigurationName", required=true)
    private Output<String> frontendIpConfigurationName;

    /**
     * @return The name of the frontend IP configuration exposing this rule.
     * 
     */
    public Output<String> frontendIpConfigurationName() {
        return this.frontendIpConfigurationName;
    }

    /**
     * The port for the external endpoint. Port numbers for each Rule must be unique within the Load Balancer. Possible values range between 1 and 65534, inclusive.
     * 
     */
    @Import(name="frontendPort")
    private @Nullable Output<Integer> frontendPort;

    /**
     * @return The port for the external endpoint. Port numbers for each Rule must be unique within the Load Balancer. Possible values range between 1 and 65534, inclusive.
     * 
     */
    public Optional<Output<Integer>> frontendPort() {
        return Optional.ofNullable(this.frontendPort);
    }

    /**
     * The port range end for the external endpoint. This property is used together with BackendAddressPool and FrontendPortRangeStart. Individual inbound NAT rule port mappings will be created for each backend address from BackendAddressPool. Acceptable values range from 1 to 65534, inclusive.
     * 
     */
    @Import(name="frontendPortEnd")
    private @Nullable Output<Integer> frontendPortEnd;

    /**
     * @return The port range end for the external endpoint. This property is used together with BackendAddressPool and FrontendPortRangeStart. Individual inbound NAT rule port mappings will be created for each backend address from BackendAddressPool. Acceptable values range from 1 to 65534, inclusive.
     * 
     */
    public Optional<Output<Integer>> frontendPortEnd() {
        return Optional.ofNullable(this.frontendPortEnd);
    }

    /**
     * The port range start for the external endpoint. This property is used together with BackendAddressPool and FrontendPortRangeEnd. Individual inbound NAT rule port mappings will be created for each backend address from BackendAddressPool. Acceptable values range from 1 to 65534, inclusive.
     * 
     */
    @Import(name="frontendPortStart")
    private @Nullable Output<Integer> frontendPortStart;

    /**
     * @return The port range start for the external endpoint. This property is used together with BackendAddressPool and FrontendPortRangeEnd. Individual inbound NAT rule port mappings will be created for each backend address from BackendAddressPool. Acceptable values range from 1 to 65534, inclusive.
     * 
     */
    public Optional<Output<Integer>> frontendPortStart() {
        return Optional.ofNullable(this.frontendPortStart);
    }

    /**
     * Specifies the idle timeout in minutes for TCP connections. Valid values are between `4` and `30` minutes. Defaults to `4` minutes.
     * 
     */
    @Import(name="idleTimeoutInMinutes")
    private @Nullable Output<Integer> idleTimeoutInMinutes;

    /**
     * @return Specifies the idle timeout in minutes for TCP connections. Valid values are between `4` and `30` minutes. Defaults to `4` minutes.
     * 
     */
    public Optional<Output<Integer>> idleTimeoutInMinutes() {
        return Optional.ofNullable(this.idleTimeoutInMinutes);
    }

    /**
     * The ID of the Load Balancer in which to create the NAT Rule. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="loadbalancerId", required=true)
    private Output<String> loadbalancerId;

    /**
     * @return The ID of the Load Balancer in which to create the NAT Rule. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> loadbalancerId() {
        return this.loadbalancerId;
    }

    /**
     * Specifies the name of the NAT Rule. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the name of the NAT Rule. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The transport protocol for the external endpoint. Possible values are `Udp`, `Tcp` or `All`.
     * 
     */
    @Import(name="protocol", required=true)
    private Output<String> protocol;

    /**
     * @return The transport protocol for the external endpoint. Possible values are `Udp`, `Tcp` or `All`.
     * 
     */
    public Output<String> protocol() {
        return this.protocol;
    }

    /**
     * The name of the resource group in which to create the resource. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group in which to create the resource. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    private NatRuleArgs() {}

    private NatRuleArgs(NatRuleArgs $) {
        this.backendAddressPoolId = $.backendAddressPoolId;
        this.backendPort = $.backendPort;
        this.enableFloatingIp = $.enableFloatingIp;
        this.enableTcpReset = $.enableTcpReset;
        this.frontendIpConfigurationName = $.frontendIpConfigurationName;
        this.frontendPort = $.frontendPort;
        this.frontendPortEnd = $.frontendPortEnd;
        this.frontendPortStart = $.frontendPortStart;
        this.idleTimeoutInMinutes = $.idleTimeoutInMinutes;
        this.loadbalancerId = $.loadbalancerId;
        this.name = $.name;
        this.protocol = $.protocol;
        this.resourceGroupName = $.resourceGroupName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NatRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NatRuleArgs $;

        public Builder() {
            $ = new NatRuleArgs();
        }

        public Builder(NatRuleArgs defaults) {
            $ = new NatRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backendAddressPoolId Specifies a reference to backendAddressPool resource.
         * 
         * @return builder
         * 
         */
        public Builder backendAddressPoolId(@Nullable Output<String> backendAddressPoolId) {
            $.backendAddressPoolId = backendAddressPoolId;
            return this;
        }

        /**
         * @param backendAddressPoolId Specifies a reference to backendAddressPool resource.
         * 
         * @return builder
         * 
         */
        public Builder backendAddressPoolId(String backendAddressPoolId) {
            return backendAddressPoolId(Output.of(backendAddressPoolId));
        }

        /**
         * @param backendPort The port used for internal connections on the endpoint. Possible values range between 1 and 65535, inclusive.
         * 
         * @return builder
         * 
         */
        public Builder backendPort(Output<Integer> backendPort) {
            $.backendPort = backendPort;
            return this;
        }

        /**
         * @param backendPort The port used for internal connections on the endpoint. Possible values range between 1 and 65535, inclusive.
         * 
         * @return builder
         * 
         */
        public Builder backendPort(Integer backendPort) {
            return backendPort(Output.of(backendPort));
        }

        /**
         * @param enableFloatingIp Are the Floating IPs enabled for this Load Balancer Rule? A &#34;floating” IP is reassigned to a secondary server in case the primary server fails. Required to configure a SQL AlwaysOn Availability Group. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder enableFloatingIp(@Nullable Output<Boolean> enableFloatingIp) {
            $.enableFloatingIp = enableFloatingIp;
            return this;
        }

        /**
         * @param enableFloatingIp Are the Floating IPs enabled for this Load Balancer Rule? A &#34;floating” IP is reassigned to a secondary server in case the primary server fails. Required to configure a SQL AlwaysOn Availability Group. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder enableFloatingIp(Boolean enableFloatingIp) {
            return enableFloatingIp(Output.of(enableFloatingIp));
        }

        /**
         * @param enableTcpReset Is TCP Reset enabled for this Load Balancer Rule?
         * 
         * @return builder
         * 
         */
        public Builder enableTcpReset(@Nullable Output<Boolean> enableTcpReset) {
            $.enableTcpReset = enableTcpReset;
            return this;
        }

        /**
         * @param enableTcpReset Is TCP Reset enabled for this Load Balancer Rule?
         * 
         * @return builder
         * 
         */
        public Builder enableTcpReset(Boolean enableTcpReset) {
            return enableTcpReset(Output.of(enableTcpReset));
        }

        /**
         * @param frontendIpConfigurationName The name of the frontend IP configuration exposing this rule.
         * 
         * @return builder
         * 
         */
        public Builder frontendIpConfigurationName(Output<String> frontendIpConfigurationName) {
            $.frontendIpConfigurationName = frontendIpConfigurationName;
            return this;
        }

        /**
         * @param frontendIpConfigurationName The name of the frontend IP configuration exposing this rule.
         * 
         * @return builder
         * 
         */
        public Builder frontendIpConfigurationName(String frontendIpConfigurationName) {
            return frontendIpConfigurationName(Output.of(frontendIpConfigurationName));
        }

        /**
         * @param frontendPort The port for the external endpoint. Port numbers for each Rule must be unique within the Load Balancer. Possible values range between 1 and 65534, inclusive.
         * 
         * @return builder
         * 
         */
        public Builder frontendPort(@Nullable Output<Integer> frontendPort) {
            $.frontendPort = frontendPort;
            return this;
        }

        /**
         * @param frontendPort The port for the external endpoint. Port numbers for each Rule must be unique within the Load Balancer. Possible values range between 1 and 65534, inclusive.
         * 
         * @return builder
         * 
         */
        public Builder frontendPort(Integer frontendPort) {
            return frontendPort(Output.of(frontendPort));
        }

        /**
         * @param frontendPortEnd The port range end for the external endpoint. This property is used together with BackendAddressPool and FrontendPortRangeStart. Individual inbound NAT rule port mappings will be created for each backend address from BackendAddressPool. Acceptable values range from 1 to 65534, inclusive.
         * 
         * @return builder
         * 
         */
        public Builder frontendPortEnd(@Nullable Output<Integer> frontendPortEnd) {
            $.frontendPortEnd = frontendPortEnd;
            return this;
        }

        /**
         * @param frontendPortEnd The port range end for the external endpoint. This property is used together with BackendAddressPool and FrontendPortRangeStart. Individual inbound NAT rule port mappings will be created for each backend address from BackendAddressPool. Acceptable values range from 1 to 65534, inclusive.
         * 
         * @return builder
         * 
         */
        public Builder frontendPortEnd(Integer frontendPortEnd) {
            return frontendPortEnd(Output.of(frontendPortEnd));
        }

        /**
         * @param frontendPortStart The port range start for the external endpoint. This property is used together with BackendAddressPool and FrontendPortRangeEnd. Individual inbound NAT rule port mappings will be created for each backend address from BackendAddressPool. Acceptable values range from 1 to 65534, inclusive.
         * 
         * @return builder
         * 
         */
        public Builder frontendPortStart(@Nullable Output<Integer> frontendPortStart) {
            $.frontendPortStart = frontendPortStart;
            return this;
        }

        /**
         * @param frontendPortStart The port range start for the external endpoint. This property is used together with BackendAddressPool and FrontendPortRangeEnd. Individual inbound NAT rule port mappings will be created for each backend address from BackendAddressPool. Acceptable values range from 1 to 65534, inclusive.
         * 
         * @return builder
         * 
         */
        public Builder frontendPortStart(Integer frontendPortStart) {
            return frontendPortStart(Output.of(frontendPortStart));
        }

        /**
         * @param idleTimeoutInMinutes Specifies the idle timeout in minutes for TCP connections. Valid values are between `4` and `30` minutes. Defaults to `4` minutes.
         * 
         * @return builder
         * 
         */
        public Builder idleTimeoutInMinutes(@Nullable Output<Integer> idleTimeoutInMinutes) {
            $.idleTimeoutInMinutes = idleTimeoutInMinutes;
            return this;
        }

        /**
         * @param idleTimeoutInMinutes Specifies the idle timeout in minutes for TCP connections. Valid values are between `4` and `30` minutes. Defaults to `4` minutes.
         * 
         * @return builder
         * 
         */
        public Builder idleTimeoutInMinutes(Integer idleTimeoutInMinutes) {
            return idleTimeoutInMinutes(Output.of(idleTimeoutInMinutes));
        }

        /**
         * @param loadbalancerId The ID of the Load Balancer in which to create the NAT Rule. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder loadbalancerId(Output<String> loadbalancerId) {
            $.loadbalancerId = loadbalancerId;
            return this;
        }

        /**
         * @param loadbalancerId The ID of the Load Balancer in which to create the NAT Rule. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder loadbalancerId(String loadbalancerId) {
            return loadbalancerId(Output.of(loadbalancerId));
        }

        /**
         * @param name Specifies the name of the NAT Rule. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of the NAT Rule. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param protocol The transport protocol for the external endpoint. Possible values are `Udp`, `Tcp` or `All`.
         * 
         * @return builder
         * 
         */
        public Builder protocol(Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol The transport protocol for the external endpoint. Possible values are `Udp`, `Tcp` or `All`.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param resourceGroupName The name of the resource group in which to create the resource. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group in which to create the resource. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public NatRuleArgs build() {
            if ($.backendPort == null) {
                throw new MissingRequiredPropertyException("NatRuleArgs", "backendPort");
            }
            if ($.frontendIpConfigurationName == null) {
                throw new MissingRequiredPropertyException("NatRuleArgs", "frontendIpConfigurationName");
            }
            if ($.loadbalancerId == null) {
                throw new MissingRequiredPropertyException("NatRuleArgs", "loadbalancerId");
            }
            if ($.protocol == null) {
                throw new MissingRequiredPropertyException("NatRuleArgs", "protocol");
            }
            if ($.resourceGroupName == null) {
                throw new MissingRequiredPropertyException("NatRuleArgs", "resourceGroupName");
            }
            return $;
        }
    }

}
