// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appservice.inputs;

import com.pulumi.azure.appservice.inputs.WindowsWebAppSiteConfigVirtualApplicationVirtualDirectoryArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WindowsWebAppSiteConfigVirtualApplicationArgs extends com.pulumi.resources.ResourceArgs {

    public static final WindowsWebAppSiteConfigVirtualApplicationArgs Empty = new WindowsWebAppSiteConfigVirtualApplicationArgs();

    /**
     * The physical path for the Virtual Application.
     * 
     */
    @Import(name="physicalPath", required=true)
    private Output<String> physicalPath;

    /**
     * @return The physical path for the Virtual Application.
     * 
     */
    public Output<String> physicalPath() {
        return this.physicalPath;
    }

    /**
     * Should pre-loading be enabled. Defaults to `false`.
     * 
     */
    @Import(name="preload", required=true)
    private Output<Boolean> preload;

    /**
     * @return Should pre-loading be enabled. Defaults to `false`.
     * 
     */
    public Output<Boolean> preload() {
        return this.preload;
    }

    /**
     * One or more `virtual_directory` blocks as defined below.
     * 
     */
    @Import(name="virtualDirectories")
    private @Nullable Output<List<WindowsWebAppSiteConfigVirtualApplicationVirtualDirectoryArgs>> virtualDirectories;

    /**
     * @return One or more `virtual_directory` blocks as defined below.
     * 
     */
    public Optional<Output<List<WindowsWebAppSiteConfigVirtualApplicationVirtualDirectoryArgs>>> virtualDirectories() {
        return Optional.ofNullable(this.virtualDirectories);
    }

    /**
     * The Virtual Path for the Virtual Application.
     * 
     */
    @Import(name="virtualPath", required=true)
    private Output<String> virtualPath;

    /**
     * @return The Virtual Path for the Virtual Application.
     * 
     */
    public Output<String> virtualPath() {
        return this.virtualPath;
    }

    private WindowsWebAppSiteConfigVirtualApplicationArgs() {}

    private WindowsWebAppSiteConfigVirtualApplicationArgs(WindowsWebAppSiteConfigVirtualApplicationArgs $) {
        this.physicalPath = $.physicalPath;
        this.preload = $.preload;
        this.virtualDirectories = $.virtualDirectories;
        this.virtualPath = $.virtualPath;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WindowsWebAppSiteConfigVirtualApplicationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WindowsWebAppSiteConfigVirtualApplicationArgs $;

        public Builder() {
            $ = new WindowsWebAppSiteConfigVirtualApplicationArgs();
        }

        public Builder(WindowsWebAppSiteConfigVirtualApplicationArgs defaults) {
            $ = new WindowsWebAppSiteConfigVirtualApplicationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param physicalPath The physical path for the Virtual Application.
         * 
         * @return builder
         * 
         */
        public Builder physicalPath(Output<String> physicalPath) {
            $.physicalPath = physicalPath;
            return this;
        }

        /**
         * @param physicalPath The physical path for the Virtual Application.
         * 
         * @return builder
         * 
         */
        public Builder physicalPath(String physicalPath) {
            return physicalPath(Output.of(physicalPath));
        }

        /**
         * @param preload Should pre-loading be enabled. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder preload(Output<Boolean> preload) {
            $.preload = preload;
            return this;
        }

        /**
         * @param preload Should pre-loading be enabled. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder preload(Boolean preload) {
            return preload(Output.of(preload));
        }

        /**
         * @param virtualDirectories One or more `virtual_directory` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder virtualDirectories(@Nullable Output<List<WindowsWebAppSiteConfigVirtualApplicationVirtualDirectoryArgs>> virtualDirectories) {
            $.virtualDirectories = virtualDirectories;
            return this;
        }

        /**
         * @param virtualDirectories One or more `virtual_directory` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder virtualDirectories(List<WindowsWebAppSiteConfigVirtualApplicationVirtualDirectoryArgs> virtualDirectories) {
            return virtualDirectories(Output.of(virtualDirectories));
        }

        /**
         * @param virtualDirectories One or more `virtual_directory` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder virtualDirectories(WindowsWebAppSiteConfigVirtualApplicationVirtualDirectoryArgs... virtualDirectories) {
            return virtualDirectories(List.of(virtualDirectories));
        }

        /**
         * @param virtualPath The Virtual Path for the Virtual Application.
         * 
         * @return builder
         * 
         */
        public Builder virtualPath(Output<String> virtualPath) {
            $.virtualPath = virtualPath;
            return this;
        }

        /**
         * @param virtualPath The Virtual Path for the Virtual Application.
         * 
         * @return builder
         * 
         */
        public Builder virtualPath(String virtualPath) {
            return virtualPath(Output.of(virtualPath));
        }

        public WindowsWebAppSiteConfigVirtualApplicationArgs build() {
            $.physicalPath = Objects.requireNonNull($.physicalPath, "expected parameter 'physicalPath' to be non-null");
            $.preload = Objects.requireNonNull($.preload, "expected parameter 'preload' to be non-null");
            $.virtualPath = Objects.requireNonNull($.virtualPath, "expected parameter 'virtualPath' to be non-null");
            return $;
        }
    }

}
