// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.batch.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CertificateState extends com.pulumi.resources.ResourceArgs {

    public static final CertificateState Empty = new CertificateState();

    /**
     * Specifies the name of the Batch account. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="accountName")
    private @Nullable Output<String> accountName;

    /**
     * @return Specifies the name of the Batch account. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> accountName() {
        return Optional.ofNullable(this.accountName);
    }

    /**
     * The base64-encoded contents of the certificate.
     * 
     */
    @Import(name="certificate")
    private @Nullable Output<String> certificate;

    /**
     * @return The base64-encoded contents of the certificate.
     * 
     */
    public Optional<Output<String>> certificate() {
        return Optional.ofNullable(this.certificate);
    }

    /**
     * The format of the certificate. Possible values are `Cer` or `Pfx`.
     * 
     */
    @Import(name="format")
    private @Nullable Output<String> format;

    /**
     * @return The format of the certificate. Possible values are `Cer` or `Pfx`.
     * 
     */
    public Optional<Output<String>> format() {
        return Optional.ofNullable(this.format);
    }

    /**
     * The generated name of the certificate.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The generated name of the certificate.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The password to access the certificate&#39;s private key. This can only be specified when `format` is `Pfx`.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return The password to access the certificate&#39;s private key. This can only be specified when `format` is `Pfx`.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * The public key of the certificate.
     * 
     */
    @Import(name="publicData")
    private @Nullable Output<String> publicData;

    /**
     * @return The public key of the certificate.
     * 
     */
    public Optional<Output<String>> publicData() {
        return Optional.ofNullable(this.publicData);
    }

    /**
     * The name of the resource group in which to create the Batch account. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="resourceGroupName")
    private @Nullable Output<String> resourceGroupName;

    /**
     * @return The name of the resource group in which to create the Batch account. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> resourceGroupName() {
        return Optional.ofNullable(this.resourceGroupName);
    }

    /**
     * The thumbprint of the certificate. At this time the only supported value is &#39;SHA1&#39;.
     * 
     */
    @Import(name="thumbprint")
    private @Nullable Output<String> thumbprint;

    /**
     * @return The thumbprint of the certificate. At this time the only supported value is &#39;SHA1&#39;.
     * 
     */
    public Optional<Output<String>> thumbprint() {
        return Optional.ofNullable(this.thumbprint);
    }

    @Import(name="thumbprintAlgorithm")
    private @Nullable Output<String> thumbprintAlgorithm;

    public Optional<Output<String>> thumbprintAlgorithm() {
        return Optional.ofNullable(this.thumbprintAlgorithm);
    }

    private CertificateState() {}

    private CertificateState(CertificateState $) {
        this.accountName = $.accountName;
        this.certificate = $.certificate;
        this.format = $.format;
        this.name = $.name;
        this.password = $.password;
        this.publicData = $.publicData;
        this.resourceGroupName = $.resourceGroupName;
        this.thumbprint = $.thumbprint;
        this.thumbprintAlgorithm = $.thumbprintAlgorithm;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertificateState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertificateState $;

        public Builder() {
            $ = new CertificateState();
        }

        public Builder(CertificateState defaults) {
            $ = new CertificateState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountName Specifies the name of the Batch account. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder accountName(@Nullable Output<String> accountName) {
            $.accountName = accountName;
            return this;
        }

        /**
         * @param accountName Specifies the name of the Batch account. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder accountName(String accountName) {
            return accountName(Output.of(accountName));
        }

        /**
         * @param certificate The base64-encoded contents of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificate(@Nullable Output<String> certificate) {
            $.certificate = certificate;
            return this;
        }

        /**
         * @param certificate The base64-encoded contents of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificate(String certificate) {
            return certificate(Output.of(certificate));
        }

        /**
         * @param format The format of the certificate. Possible values are `Cer` or `Pfx`.
         * 
         * @return builder
         * 
         */
        public Builder format(@Nullable Output<String> format) {
            $.format = format;
            return this;
        }

        /**
         * @param format The format of the certificate. Possible values are `Cer` or `Pfx`.
         * 
         * @return builder
         * 
         */
        public Builder format(String format) {
            return format(Output.of(format));
        }

        /**
         * @param name The generated name of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The generated name of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param password The password to access the certificate&#39;s private key. This can only be specified when `format` is `Pfx`.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The password to access the certificate&#39;s private key. This can only be specified when `format` is `Pfx`.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param publicData The public key of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder publicData(@Nullable Output<String> publicData) {
            $.publicData = publicData;
            return this;
        }

        /**
         * @param publicData The public key of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder publicData(String publicData) {
            return publicData(Output.of(publicData));
        }

        /**
         * @param resourceGroupName The name of the resource group in which to create the Batch account. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(@Nullable Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group in which to create the Batch account. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param thumbprint The thumbprint of the certificate. At this time the only supported value is &#39;SHA1&#39;.
         * 
         * @return builder
         * 
         */
        public Builder thumbprint(@Nullable Output<String> thumbprint) {
            $.thumbprint = thumbprint;
            return this;
        }

        /**
         * @param thumbprint The thumbprint of the certificate. At this time the only supported value is &#39;SHA1&#39;.
         * 
         * @return builder
         * 
         */
        public Builder thumbprint(String thumbprint) {
            return thumbprint(Output.of(thumbprint));
        }

        public Builder thumbprintAlgorithm(@Nullable Output<String> thumbprintAlgorithm) {
            $.thumbprintAlgorithm = thumbprintAlgorithm;
            return this;
        }

        public Builder thumbprintAlgorithm(String thumbprintAlgorithm) {
            return thumbprintAlgorithm(Output.of(thumbprintAlgorithm));
        }

        public CertificateState build() {
            return $;
        }
    }

}
