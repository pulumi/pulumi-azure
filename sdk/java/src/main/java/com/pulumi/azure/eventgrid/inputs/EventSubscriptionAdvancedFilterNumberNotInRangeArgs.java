// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.eventgrid.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class EventSubscriptionAdvancedFilterNumberNotInRangeArgs extends com.pulumi.resources.ResourceArgs {

    public static final EventSubscriptionAdvancedFilterNumberNotInRangeArgs Empty = new EventSubscriptionAdvancedFilterNumberNotInRangeArgs();

    /**
     * Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
     * 
     */
    @Import(name="key", required=true)
    private Output<String> key;

    /**
     * @return Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
     * 
     */
    public Output<String> key() {
        return this.key;
    }

    /**
     * Specifies an array of values to compare to when using a multiple values operator.
     * 
     * &gt; **NOTE:** A maximum of total number of advanced filter values allowed on event subscription is 25.
     * 
     */
    @Import(name="values", required=true)
    private Output<List<List<Double>>> values;

    /**
     * @return Specifies an array of values to compare to when using a multiple values operator.
     * 
     * &gt; **NOTE:** A maximum of total number of advanced filter values allowed on event subscription is 25.
     * 
     */
    public Output<List<List<Double>>> values() {
        return this.values;
    }

    private EventSubscriptionAdvancedFilterNumberNotInRangeArgs() {}

    private EventSubscriptionAdvancedFilterNumberNotInRangeArgs(EventSubscriptionAdvancedFilterNumberNotInRangeArgs $) {
        this.key = $.key;
        this.values = $.values;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EventSubscriptionAdvancedFilterNumberNotInRangeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EventSubscriptionAdvancedFilterNumberNotInRangeArgs $;

        public Builder() {
            $ = new EventSubscriptionAdvancedFilterNumberNotInRangeArgs();
        }

        public Builder(EventSubscriptionAdvancedFilterNumberNotInRangeArgs defaults) {
            $ = new EventSubscriptionAdvancedFilterNumberNotInRangeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param key Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
         * 
         * @return builder
         * 
         */
        public Builder key(Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param values Specifies an array of values to compare to when using a multiple values operator.
         * 
         * &gt; **NOTE:** A maximum of total number of advanced filter values allowed on event subscription is 25.
         * 
         * @return builder
         * 
         */
        public Builder values(Output<List<List<Double>>> values) {
            $.values = values;
            return this;
        }

        /**
         * @param values Specifies an array of values to compare to when using a multiple values operator.
         * 
         * &gt; **NOTE:** A maximum of total number of advanced filter values allowed on event subscription is 25.
         * 
         * @return builder
         * 
         */
        public Builder values(List<List<Double>> values) {
            return values(Output.of(values));
        }

        /**
         * @param values Specifies an array of values to compare to when using a multiple values operator.
         * 
         * &gt; **NOTE:** A maximum of total number of advanced filter values allowed on event subscription is 25.
         * 
         * @return builder
         * 
         */
        public Builder values(List<Double>... values) {
            return values(List.of(values));
        }

        public EventSubscriptionAdvancedFilterNumberNotInRangeArgs build() {
            if ($.key == null) {
                throw new MissingRequiredPropertyException("EventSubscriptionAdvancedFilterNumberNotInRangeArgs", "key");
            }
            if ($.values == null) {
                throw new MissingRequiredPropertyException("EventSubscriptionAdvancedFilterNumberNotInRangeArgs", "values");
            }
            return $;
        }
    }

}
