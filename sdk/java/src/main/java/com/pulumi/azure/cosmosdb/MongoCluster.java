// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.cosmosdb;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.cosmosdb.MongoClusterArgs;
import com.pulumi.azure.cosmosdb.inputs.MongoClusterState;
import com.pulumi.azure.cosmosdb.outputs.MongoClusterConnectionString;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a MongoDB Cluster using vCore Architecture.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.cosmosdb.MongoCluster;
 * import com.pulumi.azure.cosmosdb.MongoClusterArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new ResourceGroup("example", ResourceGroupArgs.builder()
 *             .name("example-rg")
 *             .location("East US")
 *             .build());
 * 
 *         var exampleMongoCluster = new MongoCluster("exampleMongoCluster", MongoClusterArgs.builder()
 *             .name("example-mc")
 *             .resourceGroupName(example.name())
 *             .location(example.location())
 *             .administratorUsername("adminTerraform")
 *             .administratorPassword("QAZwsx123")
 *             .shardCount(1)
 *             .computeTier("Free")
 *             .highAvailabilityMode("Disabled")
 *             .storageSizeInGb(32)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### Preview Feature GeoReplicas)
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.cosmosdb.MongoCluster;
 * import com.pulumi.azure.cosmosdb.MongoClusterArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new ResourceGroup("example", ResourceGroupArgs.builder()
 *             .name("example-rg")
 *             .location("East US")
 *             .build());
 * 
 *         var exampleMongoCluster = new MongoCluster("exampleMongoCluster", MongoClusterArgs.builder()
 *             .name("example-mc")
 *             .resourceGroupName(example.name())
 *             .location(example.location())
 *             .administratorUsername("adminTerraform")
 *             .administratorPassword("QAZwsx123")
 *             .shardCount(1)
 *             .computeTier("M30")
 *             .highAvailabilityMode("ZoneRedundantPreferred")
 *             .storageSizeInGb(64)
 *             .previewFeatures("GeoReplicas")
 *             .build());
 * 
 *         var exampleGeoReplica = new MongoCluster("exampleGeoReplica", MongoClusterArgs.builder()
 *             .name("example-mc-geo")
 *             .resourceGroupName(example.name())
 *             .location("Central US")
 *             .sourceServerId(exampleMongoCluster.id())
 *             .sourceLocation(exampleMongoCluster.location())
 *             .createMode("GeoReplica")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * MongoDB Clusters can be imported using the `resource id`, e.g.
 * 
 * ```sh
 * $ pulumi import azure:cosmosdb/mongoCluster:MongoCluster example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DocumentDB/mongoClusters/myMongoCluster
 * ```
 * 
 */
@ResourceType(type="azure:cosmosdb/mongoCluster:MongoCluster")
public class MongoCluster extends com.pulumi.resources.CustomResource {
    /**
     * The Password associated with the `administrator_username` for the MongoDB Cluster.
     * 
     */
    @Export(name="administratorPassword", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> administratorPassword;

    /**
     * @return The Password associated with the `administrator_username` for the MongoDB Cluster.
     * 
     */
    public Output<Optional<String>> administratorPassword() {
        return Codegen.optional(this.administratorPassword);
    }
    /**
     * The administrator username of the MongoDB Cluster. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="administratorUsername", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> administratorUsername;

    /**
     * @return The administrator username of the MongoDB Cluster. Changing this forces a new resource to be created.
     * 
     */
    public Output<Optional<String>> administratorUsername() {
        return Codegen.optional(this.administratorUsername);
    }
    /**
     * The compute tier to assign to the MongoDB Cluster. Possible values are `Free`, `M10`, `M20`, `M25`, `M30`, `M40`, `M50`, `M60`, `M80`, and `M200`.
     * 
     */
    @Export(name="computeTier", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> computeTier;

    /**
     * @return The compute tier to assign to the MongoDB Cluster. Possible values are `Free`, `M10`, `M20`, `M25`, `M30`, `M40`, `M50`, `M60`, `M80`, and `M200`.
     * 
     */
    public Output<Optional<String>> computeTier() {
        return Codegen.optional(this.computeTier);
    }
    /**
     * The list of `connection_strings` blocks as defined below.
     * 
     */
    @Export(name="connectionStrings", refs={List.class,MongoClusterConnectionString.class}, tree="[0,1]")
    private Output<List<MongoClusterConnectionString>> connectionStrings;

    /**
     * @return The list of `connection_strings` blocks as defined below.
     * 
     */
    public Output<List<MongoClusterConnectionString>> connectionStrings() {
        return this.connectionStrings;
    }
    /**
     * The creation mode for the MongoDB Cluster. Possibles values are `Default` and `GeoReplica`. Defaults to `Default`. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="createMode", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> createMode;

    /**
     * @return The creation mode for the MongoDB Cluster. Possibles values are `Default` and `GeoReplica`. Defaults to `Default`. Changing this forces a new resource to be created.
     * 
     */
    public Output<Optional<String>> createMode() {
        return Codegen.optional(this.createMode);
    }
    /**
     * The high availability mode for the MongoDB Cluster. Possibles values are `Disabled` and `ZoneRedundantPreferred`.
     * 
     */
    @Export(name="highAvailabilityMode", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> highAvailabilityMode;

    /**
     * @return The high availability mode for the MongoDB Cluster. Possibles values are `Disabled` and `ZoneRedundantPreferred`.
     * 
     */
    public Output<Optional<String>> highAvailabilityMode() {
        return Codegen.optional(this.highAvailabilityMode);
    }
    /**
     * The supported Azure location where the MongoDB Cluster exists. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return The supported Azure location where the MongoDB Cluster exists. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * The name which should be used for the MongoDB Cluster. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name which should be used for the MongoDB Cluster. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The preview features that can be enabled on the MongoDB Cluster. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="previewFeatures", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> previewFeatures;

    /**
     * @return The preview features that can be enabled on the MongoDB Cluster. Changing this forces a new resource to be created.
     * 
     */
    public Output<Optional<List<String>>> previewFeatures() {
        return Codegen.optional(this.previewFeatures);
    }
    /**
     * The Public Network Access setting for the MongoDB Cluster. Possibles values are `Disabled` and `Enabled`. Defaults to `Enabled`.
     * 
     */
    @Export(name="publicNetworkAccess", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> publicNetworkAccess;

    /**
     * @return The Public Network Access setting for the MongoDB Cluster. Possibles values are `Disabled` and `Enabled`. Defaults to `Enabled`.
     * 
     */
    public Output<Optional<String>> publicNetworkAccess() {
        return Codegen.optional(this.publicNetworkAccess);
    }
    /**
     * The name of the resource group in which to create the MongoDB Cluster. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="resourceGroupName", refs={String.class}, tree="[0]")
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group in which to create the MongoDB Cluster. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * The Number of shards to provision on the MongoDB Cluster. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="shardCount", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> shardCount;

    /**
     * @return The Number of shards to provision on the MongoDB Cluster. Changing this forces a new resource to be created.
     * 
     */
    public Output<Optional<Integer>> shardCount() {
        return Codegen.optional(this.shardCount);
    }
    /**
     * The location of the source MongoDB Cluster. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="sourceLocation", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> sourceLocation;

    /**
     * @return The location of the source MongoDB Cluster. Changing this forces a new resource to be created.
     * 
     */
    public Output<Optional<String>> sourceLocation() {
        return Codegen.optional(this.sourceLocation);
    }
    /**
     * The ID of the replication source MongoDB Cluster. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="sourceServerId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> sourceServerId;

    /**
     * @return The ID of the replication source MongoDB Cluster. Changing this forces a new resource to be created.
     * 
     */
    public Output<Optional<String>> sourceServerId() {
        return Codegen.optional(this.sourceServerId);
    }
    /**
     * The size of the data disk space for the MongoDB Cluster.
     * 
     */
    @Export(name="storageSizeInGb", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> storageSizeInGb;

    /**
     * @return The size of the data disk space for the MongoDB Cluster.
     * 
     */
    public Output<Optional<Integer>> storageSizeInGb() {
        return Codegen.optional(this.storageSizeInGb);
    }
    /**
     * A mapping of tags to assign to the MongoDB Cluster.
     * 
     */
    @Export(name="tags", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the MongoDB Cluster.
     * 
     */
    public Output<Optional<Map<String,String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * The version for the MongoDB Cluster. Possibles values are `5.0`, `6.0` and `7.0`.
     * 
     */
    @Export(name="version", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> version;

    /**
     * @return The version for the MongoDB Cluster. Possibles values are `5.0`, `6.0` and `7.0`.
     * 
     */
    public Output<Optional<String>> version() {
        return Codegen.optional(this.version);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public MongoCluster(java.lang.String name) {
        this(name, MongoClusterArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public MongoCluster(java.lang.String name, MongoClusterArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public MongoCluster(java.lang.String name, MongoClusterArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:cosmosdb/mongoCluster:MongoCluster", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private MongoCluster(java.lang.String name, Output<java.lang.String> id, @Nullable MongoClusterState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:cosmosdb/mongoCluster:MongoCluster", name, state, makeResourceOptions(options, id), false);
    }

    private static MongoClusterArgs makeArgs(MongoClusterArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? MongoClusterArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "administratorPassword",
                "connectionStrings"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static MongoCluster get(java.lang.String name, Output<java.lang.String> id, @Nullable MongoClusterState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new MongoCluster(name, id, state, options);
    }
}
