// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.mobile.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetNetworkPacketCoreDataPlaneResult {
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The Azure Region where the Mobile Network Packet Core Data Plane should exist.
     * 
     */
    private String location;
    private String mobileNetworkPacketCoreControlPlaneId;
    private String name;
    /**
     * @return A mapping of tags which should be assigned to the Mobile Network Packet Core Data Plane.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return The IPv4 address for the user plane interface.
     * 
     */
    private String userPlaneAccessIpv4Address;
    /**
     * @return The default IPv4 gateway for the user plane interface.
     * 
     */
    private String userPlaneAccessIpv4Gateway;
    /**
     * @return The IPv4 subnet for the user plane interface.
     * 
     */
    private String userPlaneAccessIpv4Subnet;
    /**
     * @return The logical name for thie user plane interface.
     * 
     */
    private String userPlaneAccessName;

    private GetNetworkPacketCoreDataPlaneResult() {}
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The Azure Region where the Mobile Network Packet Core Data Plane should exist.
     * 
     */
    public String location() {
        return this.location;
    }
    public String mobileNetworkPacketCoreControlPlaneId() {
        return this.mobileNetworkPacketCoreControlPlaneId;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return A mapping of tags which should be assigned to the Mobile Network Packet Core Data Plane.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return The IPv4 address for the user plane interface.
     * 
     */
    public String userPlaneAccessIpv4Address() {
        return this.userPlaneAccessIpv4Address;
    }
    /**
     * @return The default IPv4 gateway for the user plane interface.
     * 
     */
    public String userPlaneAccessIpv4Gateway() {
        return this.userPlaneAccessIpv4Gateway;
    }
    /**
     * @return The IPv4 subnet for the user plane interface.
     * 
     */
    public String userPlaneAccessIpv4Subnet() {
        return this.userPlaneAccessIpv4Subnet;
    }
    /**
     * @return The logical name for thie user plane interface.
     * 
     */
    public String userPlaneAccessName() {
        return this.userPlaneAccessName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNetworkPacketCoreDataPlaneResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String id;
        private String location;
        private String mobileNetworkPacketCoreControlPlaneId;
        private String name;
        private Map<String,String> tags;
        private String userPlaneAccessIpv4Address;
        private String userPlaneAccessIpv4Gateway;
        private String userPlaneAccessIpv4Subnet;
        private String userPlaneAccessName;
        public Builder() {}
        public Builder(GetNetworkPacketCoreDataPlaneResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.mobileNetworkPacketCoreControlPlaneId = defaults.mobileNetworkPacketCoreControlPlaneId;
    	      this.name = defaults.name;
    	      this.tags = defaults.tags;
    	      this.userPlaneAccessIpv4Address = defaults.userPlaneAccessIpv4Address;
    	      this.userPlaneAccessIpv4Gateway = defaults.userPlaneAccessIpv4Gateway;
    	      this.userPlaneAccessIpv4Subnet = defaults.userPlaneAccessIpv4Subnet;
    	      this.userPlaneAccessName = defaults.userPlaneAccessName;
        }

        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetNetworkPacketCoreDataPlaneResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetNetworkPacketCoreDataPlaneResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder mobileNetworkPacketCoreControlPlaneId(String mobileNetworkPacketCoreControlPlaneId) {
            if (mobileNetworkPacketCoreControlPlaneId == null) {
              throw new MissingRequiredPropertyException("GetNetworkPacketCoreDataPlaneResult", "mobileNetworkPacketCoreControlPlaneId");
            }
            this.mobileNetworkPacketCoreControlPlaneId = mobileNetworkPacketCoreControlPlaneId;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetNetworkPacketCoreDataPlaneResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetNetworkPacketCoreDataPlaneResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder userPlaneAccessIpv4Address(String userPlaneAccessIpv4Address) {
            if (userPlaneAccessIpv4Address == null) {
              throw new MissingRequiredPropertyException("GetNetworkPacketCoreDataPlaneResult", "userPlaneAccessIpv4Address");
            }
            this.userPlaneAccessIpv4Address = userPlaneAccessIpv4Address;
            return this;
        }
        @CustomType.Setter
        public Builder userPlaneAccessIpv4Gateway(String userPlaneAccessIpv4Gateway) {
            if (userPlaneAccessIpv4Gateway == null) {
              throw new MissingRequiredPropertyException("GetNetworkPacketCoreDataPlaneResult", "userPlaneAccessIpv4Gateway");
            }
            this.userPlaneAccessIpv4Gateway = userPlaneAccessIpv4Gateway;
            return this;
        }
        @CustomType.Setter
        public Builder userPlaneAccessIpv4Subnet(String userPlaneAccessIpv4Subnet) {
            if (userPlaneAccessIpv4Subnet == null) {
              throw new MissingRequiredPropertyException("GetNetworkPacketCoreDataPlaneResult", "userPlaneAccessIpv4Subnet");
            }
            this.userPlaneAccessIpv4Subnet = userPlaneAccessIpv4Subnet;
            return this;
        }
        @CustomType.Setter
        public Builder userPlaneAccessName(String userPlaneAccessName) {
            if (userPlaneAccessName == null) {
              throw new MissingRequiredPropertyException("GetNetworkPacketCoreDataPlaneResult", "userPlaneAccessName");
            }
            this.userPlaneAccessName = userPlaneAccessName;
            return this;
        }
        public GetNetworkPacketCoreDataPlaneResult build() {
            final var _resultValue = new GetNetworkPacketCoreDataPlaneResult();
            _resultValue.id = id;
            _resultValue.location = location;
            _resultValue.mobileNetworkPacketCoreControlPlaneId = mobileNetworkPacketCoreControlPlaneId;
            _resultValue.name = name;
            _resultValue.tags = tags;
            _resultValue.userPlaneAccessIpv4Address = userPlaneAccessIpv4Address;
            _resultValue.userPlaneAccessIpv4Gateway = userPlaneAccessIpv4Gateway;
            _resultValue.userPlaneAccessIpv4Subnet = userPlaneAccessIpv4Subnet;
            _resultValue.userPlaneAccessName = userPlaneAccessName;
            return _resultValue;
        }
    }
}
