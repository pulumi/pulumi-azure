// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.containerservice;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.containerservice.ConnectedRegistryArgs;
import com.pulumi.azure.containerservice.inputs.ConnectedRegistryState;
import com.pulumi.azure.containerservice.outputs.ConnectedRegistryNotification;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a Container Connected Registry.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.containerservice.Registry;
 * import com.pulumi.azure.containerservice.RegistryArgs;
 * import com.pulumi.azure.containerservice.RegistryScopeMap;
 * import com.pulumi.azure.containerservice.RegistryScopeMapArgs;
 * import com.pulumi.azure.containerservice.RegistryToken;
 * import com.pulumi.azure.containerservice.RegistryTokenArgs;
 * import com.pulumi.azure.containerservice.ConnectedRegistry;
 * import com.pulumi.azure.containerservice.ConnectedRegistryArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampleResourceGroup = new ResourceGroup(&#34;exampleResourceGroup&#34;, ResourceGroupArgs.builder()        
 *             .location(&#34;West Europe&#34;)
 *             .build());
 * 
 *         var exampleRegistry = new Registry(&#34;exampleRegistry&#34;, RegistryArgs.builder()        
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .location(exampleResourceGroup.location())
 *             .sku(&#34;Premium&#34;)
 *             .dataEndpointEnabled(true)
 *             .build());
 * 
 *         var exampleRegistryScopeMap = new RegistryScopeMap(&#34;exampleRegistryScopeMap&#34;, RegistryScopeMapArgs.builder()        
 *             .containerRegistryName(exampleRegistry.name())
 *             .resourceGroupName(exampleRegistry.resourceGroupName())
 *             .actions(            
 *                 &#34;repositories/hello-world/content/delete&#34;,
 *                 &#34;repositories/hello-world/content/read&#34;,
 *                 &#34;repositories/hello-world/content/write&#34;,
 *                 &#34;repositories/hello-world/metadata/read&#34;,
 *                 &#34;repositories/hello-world/metadata/write&#34;,
 *                 &#34;gateway/examplecr/config/read&#34;,
 *                 &#34;gateway/examplecr/config/write&#34;,
 *                 &#34;gateway/examplecr/message/read&#34;,
 *                 &#34;gateway/examplecr/message/write&#34;)
 *             .build());
 * 
 *         var exampleRegistryToken = new RegistryToken(&#34;exampleRegistryToken&#34;, RegistryTokenArgs.builder()        
 *             .containerRegistryName(exampleRegistry.name())
 *             .resourceGroupName(exampleRegistry.resourceGroupName())
 *             .scopeMapId(exampleRegistryScopeMap.id())
 *             .build());
 * 
 *         var exampleConnectedRegistry = new ConnectedRegistry(&#34;exampleConnectedRegistry&#34;, ConnectedRegistryArgs.builder()        
 *             .containerRegistryId(exampleRegistry.id())
 *             .syncTokenId(exampleRegistryToken.id())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Container Connected Registries can be imported using the `resource id`, e.g.
 * 
 * ```sh
 *  $ pulumi import azure:containerservice/connectedRegistry:ConnectedRegistry example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.ContainerRegistry/registries/registry1/connectedRegistries/registry1
 * ```
 * 
 */
@ResourceType(type="azure:containerservice/connectedRegistry:ConnectedRegistry")
public class ConnectedRegistry extends com.pulumi.resources.CustomResource {
    /**
     * Should the log auditing be enabled?
     * 
     */
    @Export(name="auditLogEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> auditLogEnabled;

    /**
     * @return Should the log auditing be enabled?
     * 
     */
    public Output<Optional<Boolean>> auditLogEnabled() {
        return Codegen.optional(this.auditLogEnabled);
    }
    /**
     * Specifies a list of IDs of Container Registry Tokens, which are meant to be used by the clients to connect to the Connected Registry.
     * 
     */
    @Export(name="clientTokenIds", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> clientTokenIds;

    /**
     * @return Specifies a list of IDs of Container Registry Tokens, which are meant to be used by the clients to connect to the Connected Registry.
     * 
     */
    public Output<Optional<List<String>>> clientTokenIds() {
        return Codegen.optional(this.clientTokenIds);
    }
    /**
     * The ID of the Container Registry that this Connected Registry will reside in. Changing this forces a new Container Connected Registry to be created.
     * 
     * &gt; If `parent_registry_id` is not specified, the Connected Registry will be connected to the Container Registry identified by `container_registry_id`.
     * 
     */
    @Export(name="containerRegistryId", refs={String.class}, tree="[0]")
    private Output<String> containerRegistryId;

    /**
     * @return The ID of the Container Registry that this Connected Registry will reside in. Changing this forces a new Container Connected Registry to be created.
     * 
     * &gt; If `parent_registry_id` is not specified, the Connected Registry will be connected to the Container Registry identified by `container_registry_id`.
     * 
     */
    public Output<String> containerRegistryId() {
        return this.containerRegistryId;
    }
    /**
     * The verbosity of the logs. Possible values are `None`, `Debug`, `Information`, `Warning` and `Error`. Defaults to `None`.
     * 
     */
    @Export(name="logLevel", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> logLevel;

    /**
     * @return The verbosity of the logs. Possible values are `None`, `Debug`, `Information`, `Warning` and `Error`. Defaults to `None`.
     * 
     */
    public Output<Optional<String>> logLevel() {
        return Codegen.optional(this.logLevel);
    }
    /**
     * The mode of the Connected Registry. Possible values are `Mirror`, `ReadOnly`, `ReadWrite` and `Registry`. Changing this forces a new Container Connected Registry to be created. Defaults to `ReadWrite`.
     * 
     */
    @Export(name="mode", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> mode;

    /**
     * @return The mode of the Connected Registry. Possible values are `Mirror`, `ReadOnly`, `ReadWrite` and `Registry`. Changing this forces a new Container Connected Registry to be created. Defaults to `ReadWrite`.
     * 
     */
    public Output<Optional<String>> mode() {
        return Codegen.optional(this.mode);
    }
    /**
     * The name which should be used for this Container Connected Registry. Changing this forces a new Container Connected Registry to be created.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name which should be used for this Container Connected Registry. Changing this forces a new Container Connected Registry to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * One or more `notification` blocks as defined below.
     * 
     */
    @Export(name="notifications", refs={List.class,ConnectedRegistryNotification.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ConnectedRegistryNotification>> notifications;

    /**
     * @return One or more `notification` blocks as defined below.
     * 
     */
    public Output<Optional<List<ConnectedRegistryNotification>>> notifications() {
        return Codegen.optional(this.notifications);
    }
    /**
     * The ID of the parent registry. This can be either a Container Registry ID or a Connected Registry ID. Changing this forces a new Container Connected Registry to be created.
     * 
     */
    @Export(name="parentRegistryId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> parentRegistryId;

    /**
     * @return The ID of the parent registry. This can be either a Container Registry ID or a Connected Registry ID. Changing this forces a new Container Connected Registry to be created.
     * 
     */
    public Output<Optional<String>> parentRegistryId() {
        return Codegen.optional(this.parentRegistryId);
    }
    /**
     * The period of time (in form of ISO8601) for which a message is available to sync before it is expired. Allowed range is from `P1D` to `P90D`. Defaults to `P1D`.
     * 
     */
    @Export(name="syncMessageTtl", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> syncMessageTtl;

    /**
     * @return The period of time (in form of ISO8601) for which a message is available to sync before it is expired. Allowed range is from `P1D` to `P90D`. Defaults to `P1D`.
     * 
     */
    public Output<Optional<String>> syncMessageTtl() {
        return Codegen.optional(this.syncMessageTtl);
    }
    /**
     * The cron expression indicating the schedule that the Connected Registry will sync with its parent. Defaults to `* * * * *`.
     * 
     */
    @Export(name="syncSchedule", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> syncSchedule;

    /**
     * @return The cron expression indicating the schedule that the Connected Registry will sync with its parent. Defaults to `* * * * *`.
     * 
     */
    public Output<Optional<String>> syncSchedule() {
        return Codegen.optional(this.syncSchedule);
    }
    /**
     * The ID of the Container Registry Token which is used for synchronizing the Connected Registry. Changing this forces a new Container Connected Registry to be created.
     * 
     */
    @Export(name="syncTokenId", refs={String.class}, tree="[0]")
    private Output<String> syncTokenId;

    /**
     * @return The ID of the Container Registry Token which is used for synchronizing the Connected Registry. Changing this forces a new Container Connected Registry to be created.
     * 
     */
    public Output<String> syncTokenId() {
        return this.syncTokenId;
    }
    /**
     * The time window (in form of ISO8601) during which sync is enabled for each schedule occurrence. Allowed range is from `PT3H` to `P7D`.
     * 
     */
    @Export(name="syncWindow", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> syncWindow;

    /**
     * @return The time window (in form of ISO8601) during which sync is enabled for each schedule occurrence. Allowed range is from `PT3H` to `P7D`.
     * 
     */
    public Output<Optional<String>> syncWindow() {
        return Codegen.optional(this.syncWindow);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ConnectedRegistry(String name) {
        this(name, ConnectedRegistryArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ConnectedRegistry(String name, ConnectedRegistryArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ConnectedRegistry(String name, ConnectedRegistryArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:containerservice/connectedRegistry:ConnectedRegistry", name, args == null ? ConnectedRegistryArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private ConnectedRegistry(String name, Output<String> id, @Nullable ConnectedRegistryState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:containerservice/connectedRegistry:ConnectedRegistry", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ConnectedRegistry get(String name, Output<String> id, @Nullable ConnectedRegistryState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ConnectedRegistry(name, id, state, options);
    }
}
