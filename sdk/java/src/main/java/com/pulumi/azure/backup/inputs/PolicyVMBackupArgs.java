// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.backup.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PolicyVMBackupArgs extends com.pulumi.resources.ResourceArgs {

    public static final PolicyVMBackupArgs Empty = new PolicyVMBackupArgs();

    /**
     * Sets the backup frequency. Possible values are `Hourly`, `Daily` and `Weekly`.
     * 
     */
    @Import(name="frequency", required=true)
    private Output<String> frequency;

    /**
     * @return Sets the backup frequency. Possible values are `Hourly`, `Daily` and `Weekly`.
     * 
     */
    public Output<String> frequency() {
        return this.frequency;
    }

    /**
     * Duration of the backup window in hours. Possible values are between `4` and `24` This is used when `frequency` is `Hourly`.
     * 
     * &gt; **NOTE:** `hour_duration` must be multiplier of `hour_interval`
     * 
     */
    @Import(name="hourDuration")
    private @Nullable Output<Integer> hourDuration;

    /**
     * @return Duration of the backup window in hours. Possible values are between `4` and `24` This is used when `frequency` is `Hourly`.
     * 
     * &gt; **NOTE:** `hour_duration` must be multiplier of `hour_interval`
     * 
     */
    public Optional<Output<Integer>> hourDuration() {
        return Optional.ofNullable(this.hourDuration);
    }

    /**
     * Interval in hour at which backup is triggered. Possible values are `4`, `6`, `8` and `12`. This is used when `frequency` is `Hourly`.
     * 
     */
    @Import(name="hourInterval")
    private @Nullable Output<Integer> hourInterval;

    /**
     * @return Interval in hour at which backup is triggered. Possible values are `4`, `6`, `8` and `12`. This is used when `frequency` is `Hourly`.
     * 
     */
    public Optional<Output<Integer>> hourInterval() {
        return Optional.ofNullable(this.hourInterval);
    }

    /**
     * The time of day to perform the backup in 24hour format.
     * 
     */
    @Import(name="time", required=true)
    private Output<String> time;

    /**
     * @return The time of day to perform the backup in 24hour format.
     * 
     */
    public Output<String> time() {
        return this.time;
    }

    /**
     * The days of the week to perform backups on. Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`. This is used when `frequency` is `Weekly`.
     * 
     */
    @Import(name="weekdays")
    private @Nullable Output<List<String>> weekdays;

    /**
     * @return The days of the week to perform backups on. Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`. This is used when `frequency` is `Weekly`.
     * 
     */
    public Optional<Output<List<String>>> weekdays() {
        return Optional.ofNullable(this.weekdays);
    }

    private PolicyVMBackupArgs() {}

    private PolicyVMBackupArgs(PolicyVMBackupArgs $) {
        this.frequency = $.frequency;
        this.hourDuration = $.hourDuration;
        this.hourInterval = $.hourInterval;
        this.time = $.time;
        this.weekdays = $.weekdays;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PolicyVMBackupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PolicyVMBackupArgs $;

        public Builder() {
            $ = new PolicyVMBackupArgs();
        }

        public Builder(PolicyVMBackupArgs defaults) {
            $ = new PolicyVMBackupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param frequency Sets the backup frequency. Possible values are `Hourly`, `Daily` and `Weekly`.
         * 
         * @return builder
         * 
         */
        public Builder frequency(Output<String> frequency) {
            $.frequency = frequency;
            return this;
        }

        /**
         * @param frequency Sets the backup frequency. Possible values are `Hourly`, `Daily` and `Weekly`.
         * 
         * @return builder
         * 
         */
        public Builder frequency(String frequency) {
            return frequency(Output.of(frequency));
        }

        /**
         * @param hourDuration Duration of the backup window in hours. Possible values are between `4` and `24` This is used when `frequency` is `Hourly`.
         * 
         * &gt; **NOTE:** `hour_duration` must be multiplier of `hour_interval`
         * 
         * @return builder
         * 
         */
        public Builder hourDuration(@Nullable Output<Integer> hourDuration) {
            $.hourDuration = hourDuration;
            return this;
        }

        /**
         * @param hourDuration Duration of the backup window in hours. Possible values are between `4` and `24` This is used when `frequency` is `Hourly`.
         * 
         * &gt; **NOTE:** `hour_duration` must be multiplier of `hour_interval`
         * 
         * @return builder
         * 
         */
        public Builder hourDuration(Integer hourDuration) {
            return hourDuration(Output.of(hourDuration));
        }

        /**
         * @param hourInterval Interval in hour at which backup is triggered. Possible values are `4`, `6`, `8` and `12`. This is used when `frequency` is `Hourly`.
         * 
         * @return builder
         * 
         */
        public Builder hourInterval(@Nullable Output<Integer> hourInterval) {
            $.hourInterval = hourInterval;
            return this;
        }

        /**
         * @param hourInterval Interval in hour at which backup is triggered. Possible values are `4`, `6`, `8` and `12`. This is used when `frequency` is `Hourly`.
         * 
         * @return builder
         * 
         */
        public Builder hourInterval(Integer hourInterval) {
            return hourInterval(Output.of(hourInterval));
        }

        /**
         * @param time The time of day to perform the backup in 24hour format.
         * 
         * @return builder
         * 
         */
        public Builder time(Output<String> time) {
            $.time = time;
            return this;
        }

        /**
         * @param time The time of day to perform the backup in 24hour format.
         * 
         * @return builder
         * 
         */
        public Builder time(String time) {
            return time(Output.of(time));
        }

        /**
         * @param weekdays The days of the week to perform backups on. Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`. This is used when `frequency` is `Weekly`.
         * 
         * @return builder
         * 
         */
        public Builder weekdays(@Nullable Output<List<String>> weekdays) {
            $.weekdays = weekdays;
            return this;
        }

        /**
         * @param weekdays The days of the week to perform backups on. Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`. This is used when `frequency` is `Weekly`.
         * 
         * @return builder
         * 
         */
        public Builder weekdays(List<String> weekdays) {
            return weekdays(Output.of(weekdays));
        }

        /**
         * @param weekdays The days of the week to perform backups on. Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`. This is used when `frequency` is `Weekly`.
         * 
         * @return builder
         * 
         */
        public Builder weekdays(String... weekdays) {
            return weekdays(List.of(weekdays));
        }

        public PolicyVMBackupArgs build() {
            if ($.frequency == null) {
                throw new MissingRequiredPropertyException("PolicyVMBackupArgs", "frequency");
            }
            if ($.time == null) {
                throw new MissingRequiredPropertyException("PolicyVMBackupArgs", "time");
            }
            return $;
        }
    }

}
