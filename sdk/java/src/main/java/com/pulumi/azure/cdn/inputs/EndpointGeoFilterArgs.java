// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.cdn.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class EndpointGeoFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final EndpointGeoFilterArgs Empty = new EndpointGeoFilterArgs();

    /**
     * The Action of the Geo Filter. Possible values include `Allow` and `Block`.
     * 
     */
    @Import(name="action", required=true)
    private Output<String> action;

    /**
     * @return The Action of the Geo Filter. Possible values include `Allow` and `Block`.
     * 
     */
    public Output<String> action() {
        return this.action;
    }

    /**
     * A List of two letter country codes (e.g. `US`, `GB`) to be associated with this Geo Filter.
     * 
     */
    @Import(name="countryCodes", required=true)
    private Output<List<String>> countryCodes;

    /**
     * @return A List of two letter country codes (e.g. `US`, `GB`) to be associated with this Geo Filter.
     * 
     */
    public Output<List<String>> countryCodes() {
        return this.countryCodes;
    }

    /**
     * The relative path applicable to geo filter.
     * 
     */
    @Import(name="relativePath", required=true)
    private Output<String> relativePath;

    /**
     * @return The relative path applicable to geo filter.
     * 
     */
    public Output<String> relativePath() {
        return this.relativePath;
    }

    private EndpointGeoFilterArgs() {}

    private EndpointGeoFilterArgs(EndpointGeoFilterArgs $) {
        this.action = $.action;
        this.countryCodes = $.countryCodes;
        this.relativePath = $.relativePath;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EndpointGeoFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EndpointGeoFilterArgs $;

        public Builder() {
            $ = new EndpointGeoFilterArgs();
        }

        public Builder(EndpointGeoFilterArgs defaults) {
            $ = new EndpointGeoFilterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action The Action of the Geo Filter. Possible values include `Allow` and `Block`.
         * 
         * @return builder
         * 
         */
        public Builder action(Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action The Action of the Geo Filter. Possible values include `Allow` and `Block`.
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        /**
         * @param countryCodes A List of two letter country codes (e.g. `US`, `GB`) to be associated with this Geo Filter.
         * 
         * @return builder
         * 
         */
        public Builder countryCodes(Output<List<String>> countryCodes) {
            $.countryCodes = countryCodes;
            return this;
        }

        /**
         * @param countryCodes A List of two letter country codes (e.g. `US`, `GB`) to be associated with this Geo Filter.
         * 
         * @return builder
         * 
         */
        public Builder countryCodes(List<String> countryCodes) {
            return countryCodes(Output.of(countryCodes));
        }

        /**
         * @param countryCodes A List of two letter country codes (e.g. `US`, `GB`) to be associated with this Geo Filter.
         * 
         * @return builder
         * 
         */
        public Builder countryCodes(String... countryCodes) {
            return countryCodes(List.of(countryCodes));
        }

        /**
         * @param relativePath The relative path applicable to geo filter.
         * 
         * @return builder
         * 
         */
        public Builder relativePath(Output<String> relativePath) {
            $.relativePath = relativePath;
            return this;
        }

        /**
         * @param relativePath The relative path applicable to geo filter.
         * 
         * @return builder
         * 
         */
        public Builder relativePath(String relativePath) {
            return relativePath(Output.of(relativePath));
        }

        public EndpointGeoFilterArgs build() {
            if ($.action == null) {
                throw new MissingRequiredPropertyException("EndpointGeoFilterArgs", "action");
            }
            if ($.countryCodes == null) {
                throw new MissingRequiredPropertyException("EndpointGeoFilterArgs", "countryCodes");
            }
            if ($.relativePath == null) {
                throw new MissingRequiredPropertyException("EndpointGeoFilterArgs", "relativePath");
            }
            return $;
        }
    }

}
