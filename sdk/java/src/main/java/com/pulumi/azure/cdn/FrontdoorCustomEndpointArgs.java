// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.cdn;

import com.pulumi.azure.cdn.inputs.FrontdoorCustomEndpointTlsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FrontdoorCustomEndpointArgs extends com.pulumi.resources.ResourceArgs {

    public static final FrontdoorCustomEndpointArgs Empty = new FrontdoorCustomEndpointArgs();

    /**
     * The resource ID of the CDN FrontDoor Route this Custom Domain should be associated with.
     * 
     */
    @Import(name="associateWithCdnFrontdoorRouteId")
    private @Nullable Output<String> associateWithCdnFrontdoorRouteId;

    /**
     * @return The resource ID of the CDN FrontDoor Route this Custom Domain should be associated with.
     * 
     */
    public Optional<Output<String>> associateWithCdnFrontdoorRouteId() {
        return Optional.ofNullable(this.associateWithCdnFrontdoorRouteId);
    }

    /**
     * The ID of the Frontdoor Profile. Changing this forces a new Frontdoor Profile to be created.
     * 
     */
    @Import(name="cdnFrontdoorProfileId", required=true)
    private Output<String> cdnFrontdoorProfileId;

    /**
     * @return The ID of the Frontdoor Profile. Changing this forces a new Frontdoor Profile to be created.
     * 
     */
    public Output<String> cdnFrontdoorProfileId() {
        return this.cdnFrontdoorProfileId;
    }

    /**
     * The ID of the DNS Zone which should be used for this FrontDoor Custom Domain.
     * 
     */
    @Import(name="dnsZoneId")
    private @Nullable Output<String> dnsZoneId;

    /**
     * @return The ID of the DNS Zone which should be used for this FrontDoor Custom Domain.
     * 
     */
    public Optional<Output<String>> dnsZoneId() {
        return Optional.ofNullable(this.dnsZoneId);
    }

    /**
     * The host name of the domain. Changing this forces a new CDN FrontDoor Custom Domain to be created.
     * 
     */
    @Import(name="hostName", required=true)
    private Output<String> hostName;

    /**
     * @return The host name of the domain. Changing this forces a new CDN FrontDoor Custom Domain to be created.
     * 
     */
    public Output<String> hostName() {
        return this.hostName;
    }

    /**
     * The name which should be used for this CDN FrontDoor Custom Domain. Possible values must be between 2 and 260 characters in length, must begin with a letter or number, end with a letter or number and contain only letters, numbers and hyphens. Changing this forces a new CDN FrontDoor Custom Domain to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name which should be used for this CDN FrontDoor Custom Domain. Possible values must be between 2 and 260 characters in length, must begin with a letter or number, end with a letter or number and contain only letters, numbers and hyphens. Changing this forces a new CDN FrontDoor Custom Domain to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A `tls` block as defined below.
     * 
     */
    @Import(name="tls", required=true)
    private Output<FrontdoorCustomEndpointTlsArgs> tls;

    /**
     * @return A `tls` block as defined below.
     * 
     */
    public Output<FrontdoorCustomEndpointTlsArgs> tls() {
        return this.tls;
    }

    private FrontdoorCustomEndpointArgs() {}

    private FrontdoorCustomEndpointArgs(FrontdoorCustomEndpointArgs $) {
        this.associateWithCdnFrontdoorRouteId = $.associateWithCdnFrontdoorRouteId;
        this.cdnFrontdoorProfileId = $.cdnFrontdoorProfileId;
        this.dnsZoneId = $.dnsZoneId;
        this.hostName = $.hostName;
        this.name = $.name;
        this.tls = $.tls;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FrontdoorCustomEndpointArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FrontdoorCustomEndpointArgs $;

        public Builder() {
            $ = new FrontdoorCustomEndpointArgs();
        }

        public Builder(FrontdoorCustomEndpointArgs defaults) {
            $ = new FrontdoorCustomEndpointArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param associateWithCdnFrontdoorRouteId The resource ID of the CDN FrontDoor Route this Custom Domain should be associated with.
         * 
         * @return builder
         * 
         */
        public Builder associateWithCdnFrontdoorRouteId(@Nullable Output<String> associateWithCdnFrontdoorRouteId) {
            $.associateWithCdnFrontdoorRouteId = associateWithCdnFrontdoorRouteId;
            return this;
        }

        /**
         * @param associateWithCdnFrontdoorRouteId The resource ID of the CDN FrontDoor Route this Custom Domain should be associated with.
         * 
         * @return builder
         * 
         */
        public Builder associateWithCdnFrontdoorRouteId(String associateWithCdnFrontdoorRouteId) {
            return associateWithCdnFrontdoorRouteId(Output.of(associateWithCdnFrontdoorRouteId));
        }

        /**
         * @param cdnFrontdoorProfileId The ID of the Frontdoor Profile. Changing this forces a new Frontdoor Profile to be created.
         * 
         * @return builder
         * 
         */
        public Builder cdnFrontdoorProfileId(Output<String> cdnFrontdoorProfileId) {
            $.cdnFrontdoorProfileId = cdnFrontdoorProfileId;
            return this;
        }

        /**
         * @param cdnFrontdoorProfileId The ID of the Frontdoor Profile. Changing this forces a new Frontdoor Profile to be created.
         * 
         * @return builder
         * 
         */
        public Builder cdnFrontdoorProfileId(String cdnFrontdoorProfileId) {
            return cdnFrontdoorProfileId(Output.of(cdnFrontdoorProfileId));
        }

        /**
         * @param dnsZoneId The ID of the DNS Zone which should be used for this FrontDoor Custom Domain.
         * 
         * @return builder
         * 
         */
        public Builder dnsZoneId(@Nullable Output<String> dnsZoneId) {
            $.dnsZoneId = dnsZoneId;
            return this;
        }

        /**
         * @param dnsZoneId The ID of the DNS Zone which should be used for this FrontDoor Custom Domain.
         * 
         * @return builder
         * 
         */
        public Builder dnsZoneId(String dnsZoneId) {
            return dnsZoneId(Output.of(dnsZoneId));
        }

        /**
         * @param hostName The host name of the domain. Changing this forces a new CDN FrontDoor Custom Domain to be created.
         * 
         * @return builder
         * 
         */
        public Builder hostName(Output<String> hostName) {
            $.hostName = hostName;
            return this;
        }

        /**
         * @param hostName The host name of the domain. Changing this forces a new CDN FrontDoor Custom Domain to be created.
         * 
         * @return builder
         * 
         */
        public Builder hostName(String hostName) {
            return hostName(Output.of(hostName));
        }

        /**
         * @param name The name which should be used for this CDN FrontDoor Custom Domain. Possible values must be between 2 and 260 characters in length, must begin with a letter or number, end with a letter or number and contain only letters, numbers and hyphens. Changing this forces a new CDN FrontDoor Custom Domain to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this CDN FrontDoor Custom Domain. Possible values must be between 2 and 260 characters in length, must begin with a letter or number, end with a letter or number and contain only letters, numbers and hyphens. Changing this forces a new CDN FrontDoor Custom Domain to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param tls A `tls` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder tls(Output<FrontdoorCustomEndpointTlsArgs> tls) {
            $.tls = tls;
            return this;
        }

        /**
         * @param tls A `tls` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder tls(FrontdoorCustomEndpointTlsArgs tls) {
            return tls(Output.of(tls));
        }

        public FrontdoorCustomEndpointArgs build() {
            $.cdnFrontdoorProfileId = Objects.requireNonNull($.cdnFrontdoorProfileId, "expected parameter 'cdnFrontdoorProfileId' to be non-null");
            $.hostName = Objects.requireNonNull($.hostName, "expected parameter 'hostName' to be non-null");
            $.tls = Objects.requireNonNull($.tls, "expected parameter 'tls' to be non-null");
            return $;
        }
    }

}
