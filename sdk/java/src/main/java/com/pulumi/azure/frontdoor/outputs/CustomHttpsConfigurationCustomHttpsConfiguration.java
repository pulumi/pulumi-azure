// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.frontdoor.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CustomHttpsConfigurationCustomHttpsConfiguration {
    /**
     * @return The name of the Key Vault secret representing the full certificate PFX.
     * 
     */
    private final @Nullable String azureKeyVaultCertificateSecretName;
    /**
     * @return The version of the Key Vault secret representing the full certificate PFX. Defaults to `Latest`.
     * 
     */
    private final @Nullable String azureKeyVaultCertificateSecretVersion;
    /**
     * @return The ID of the Key Vault containing the SSL certificate.
     * 
     */
    private final @Nullable String azureKeyVaultCertificateVaultId;
    /**
     * @return Certificate source to encrypted `HTTPS` traffic with. Allowed values are `FrontDoor` or `AzureKeyVault`. Defaults to `FrontDoor`.
     * 
     */
    private final @Nullable String certificateSource;
    /**
     * @return Minimum client TLS version supported.
     * 
     */
    private final @Nullable String minimumTlsVersion;
    private final @Nullable String provisioningState;
    private final @Nullable String provisioningSubstate;

    @CustomType.Constructor
    private CustomHttpsConfigurationCustomHttpsConfiguration(
        @CustomType.Parameter("azureKeyVaultCertificateSecretName") @Nullable String azureKeyVaultCertificateSecretName,
        @CustomType.Parameter("azureKeyVaultCertificateSecretVersion") @Nullable String azureKeyVaultCertificateSecretVersion,
        @CustomType.Parameter("azureKeyVaultCertificateVaultId") @Nullable String azureKeyVaultCertificateVaultId,
        @CustomType.Parameter("certificateSource") @Nullable String certificateSource,
        @CustomType.Parameter("minimumTlsVersion") @Nullable String minimumTlsVersion,
        @CustomType.Parameter("provisioningState") @Nullable String provisioningState,
        @CustomType.Parameter("provisioningSubstate") @Nullable String provisioningSubstate) {
        this.azureKeyVaultCertificateSecretName = azureKeyVaultCertificateSecretName;
        this.azureKeyVaultCertificateSecretVersion = azureKeyVaultCertificateSecretVersion;
        this.azureKeyVaultCertificateVaultId = azureKeyVaultCertificateVaultId;
        this.certificateSource = certificateSource;
        this.minimumTlsVersion = minimumTlsVersion;
        this.provisioningState = provisioningState;
        this.provisioningSubstate = provisioningSubstate;
    }

    /**
     * @return The name of the Key Vault secret representing the full certificate PFX.
     * 
     */
    public Optional<String> azureKeyVaultCertificateSecretName() {
        return Optional.ofNullable(this.azureKeyVaultCertificateSecretName);
    }
    /**
     * @return The version of the Key Vault secret representing the full certificate PFX. Defaults to `Latest`.
     * 
     */
    public Optional<String> azureKeyVaultCertificateSecretVersion() {
        return Optional.ofNullable(this.azureKeyVaultCertificateSecretVersion);
    }
    /**
     * @return The ID of the Key Vault containing the SSL certificate.
     * 
     */
    public Optional<String> azureKeyVaultCertificateVaultId() {
        return Optional.ofNullable(this.azureKeyVaultCertificateVaultId);
    }
    /**
     * @return Certificate source to encrypted `HTTPS` traffic with. Allowed values are `FrontDoor` or `AzureKeyVault`. Defaults to `FrontDoor`.
     * 
     */
    public Optional<String> certificateSource() {
        return Optional.ofNullable(this.certificateSource);
    }
    /**
     * @return Minimum client TLS version supported.
     * 
     */
    public Optional<String> minimumTlsVersion() {
        return Optional.ofNullable(this.minimumTlsVersion);
    }
    public Optional<String> provisioningState() {
        return Optional.ofNullable(this.provisioningState);
    }
    public Optional<String> provisioningSubstate() {
        return Optional.ofNullable(this.provisioningSubstate);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CustomHttpsConfigurationCustomHttpsConfiguration defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String azureKeyVaultCertificateSecretName;
        private @Nullable String azureKeyVaultCertificateSecretVersion;
        private @Nullable String azureKeyVaultCertificateVaultId;
        private @Nullable String certificateSource;
        private @Nullable String minimumTlsVersion;
        private @Nullable String provisioningState;
        private @Nullable String provisioningSubstate;

        public Builder() {
    	      // Empty
        }

        public Builder(CustomHttpsConfigurationCustomHttpsConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.azureKeyVaultCertificateSecretName = defaults.azureKeyVaultCertificateSecretName;
    	      this.azureKeyVaultCertificateSecretVersion = defaults.azureKeyVaultCertificateSecretVersion;
    	      this.azureKeyVaultCertificateVaultId = defaults.azureKeyVaultCertificateVaultId;
    	      this.certificateSource = defaults.certificateSource;
    	      this.minimumTlsVersion = defaults.minimumTlsVersion;
    	      this.provisioningState = defaults.provisioningState;
    	      this.provisioningSubstate = defaults.provisioningSubstate;
        }

        public Builder azureKeyVaultCertificateSecretName(@Nullable String azureKeyVaultCertificateSecretName) {
            this.azureKeyVaultCertificateSecretName = azureKeyVaultCertificateSecretName;
            return this;
        }
        public Builder azureKeyVaultCertificateSecretVersion(@Nullable String azureKeyVaultCertificateSecretVersion) {
            this.azureKeyVaultCertificateSecretVersion = azureKeyVaultCertificateSecretVersion;
            return this;
        }
        public Builder azureKeyVaultCertificateVaultId(@Nullable String azureKeyVaultCertificateVaultId) {
            this.azureKeyVaultCertificateVaultId = azureKeyVaultCertificateVaultId;
            return this;
        }
        public Builder certificateSource(@Nullable String certificateSource) {
            this.certificateSource = certificateSource;
            return this;
        }
        public Builder minimumTlsVersion(@Nullable String minimumTlsVersion) {
            this.minimumTlsVersion = minimumTlsVersion;
            return this;
        }
        public Builder provisioningState(@Nullable String provisioningState) {
            this.provisioningState = provisioningState;
            return this;
        }
        public Builder provisioningSubstate(@Nullable String provisioningSubstate) {
            this.provisioningSubstate = provisioningSubstate;
            return this;
        }        public CustomHttpsConfigurationCustomHttpsConfiguration build() {
            return new CustomHttpsConfigurationCustomHttpsConfiguration(azureKeyVaultCertificateSecretName, azureKeyVaultCertificateSecretVersion, azureKeyVaultCertificateVaultId, certificateSource, minimumTlsVersion, provisioningState, provisioningSubstate);
        }
    }
}
