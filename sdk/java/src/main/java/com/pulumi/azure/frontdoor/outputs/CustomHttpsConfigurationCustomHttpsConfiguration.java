// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.frontdoor.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CustomHttpsConfigurationCustomHttpsConfiguration {
    /**
     * @return The name of the Key Vault secret representing the full certificate PFX.
     * 
     */
    private @Nullable String azureKeyVaultCertificateSecretName;
    /**
     * @return The version of the Key Vault secret representing the full certificate PFX.
     * 
     * &gt; **Note:** In order to enable the use of your own custom `HTTPS certificate` you must grant `Azure Front Door Service` access to your key vault. For instructions on how to configure your `Key Vault` correctly please refer to the [product documentation](https://docs.microsoft.com/azure/frontdoor/front-door-custom-domain-https#option-2-use-your-own-certificate).
     * 
     */
    private @Nullable String azureKeyVaultCertificateSecretVersion;
    /**
     * @return The ID of the Key Vault containing the SSL certificate.
     * 
     */
    private @Nullable String azureKeyVaultCertificateVaultId;
    /**
     * @return Certificate source to encrypted `HTTPS` traffic with. Allowed values are `FrontDoor` or `AzureKeyVault`. Defaults to `FrontDoor`.
     * 
     * The following attributes are only valid if `certificate_source` is set to `AzureKeyVault`:
     * 
     */
    private @Nullable String certificateSource;
    /**
     * @return Minimum client TLS version supported.
     * 
     */
    private @Nullable String minimumTlsVersion;
    private @Nullable String provisioningState;
    private @Nullable String provisioningSubstate;

    private CustomHttpsConfigurationCustomHttpsConfiguration() {}
    /**
     * @return The name of the Key Vault secret representing the full certificate PFX.
     * 
     */
    public Optional<String> azureKeyVaultCertificateSecretName() {
        return Optional.ofNullable(this.azureKeyVaultCertificateSecretName);
    }
    /**
     * @return The version of the Key Vault secret representing the full certificate PFX.
     * 
     * &gt; **Note:** In order to enable the use of your own custom `HTTPS certificate` you must grant `Azure Front Door Service` access to your key vault. For instructions on how to configure your `Key Vault` correctly please refer to the [product documentation](https://docs.microsoft.com/azure/frontdoor/front-door-custom-domain-https#option-2-use-your-own-certificate).
     * 
     */
    public Optional<String> azureKeyVaultCertificateSecretVersion() {
        return Optional.ofNullable(this.azureKeyVaultCertificateSecretVersion);
    }
    /**
     * @return The ID of the Key Vault containing the SSL certificate.
     * 
     */
    public Optional<String> azureKeyVaultCertificateVaultId() {
        return Optional.ofNullable(this.azureKeyVaultCertificateVaultId);
    }
    /**
     * @return Certificate source to encrypted `HTTPS` traffic with. Allowed values are `FrontDoor` or `AzureKeyVault`. Defaults to `FrontDoor`.
     * 
     * The following attributes are only valid if `certificate_source` is set to `AzureKeyVault`:
     * 
     */
    public Optional<String> certificateSource() {
        return Optional.ofNullable(this.certificateSource);
    }
    /**
     * @return Minimum client TLS version supported.
     * 
     */
    public Optional<String> minimumTlsVersion() {
        return Optional.ofNullable(this.minimumTlsVersion);
    }
    public Optional<String> provisioningState() {
        return Optional.ofNullable(this.provisioningState);
    }
    public Optional<String> provisioningSubstate() {
        return Optional.ofNullable(this.provisioningSubstate);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CustomHttpsConfigurationCustomHttpsConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String azureKeyVaultCertificateSecretName;
        private @Nullable String azureKeyVaultCertificateSecretVersion;
        private @Nullable String azureKeyVaultCertificateVaultId;
        private @Nullable String certificateSource;
        private @Nullable String minimumTlsVersion;
        private @Nullable String provisioningState;
        private @Nullable String provisioningSubstate;
        public Builder() {}
        public Builder(CustomHttpsConfigurationCustomHttpsConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.azureKeyVaultCertificateSecretName = defaults.azureKeyVaultCertificateSecretName;
    	      this.azureKeyVaultCertificateSecretVersion = defaults.azureKeyVaultCertificateSecretVersion;
    	      this.azureKeyVaultCertificateVaultId = defaults.azureKeyVaultCertificateVaultId;
    	      this.certificateSource = defaults.certificateSource;
    	      this.minimumTlsVersion = defaults.minimumTlsVersion;
    	      this.provisioningState = defaults.provisioningState;
    	      this.provisioningSubstate = defaults.provisioningSubstate;
        }

        @CustomType.Setter
        public Builder azureKeyVaultCertificateSecretName(@Nullable String azureKeyVaultCertificateSecretName) {

            this.azureKeyVaultCertificateSecretName = azureKeyVaultCertificateSecretName;
            return this;
        }
        @CustomType.Setter
        public Builder azureKeyVaultCertificateSecretVersion(@Nullable String azureKeyVaultCertificateSecretVersion) {

            this.azureKeyVaultCertificateSecretVersion = azureKeyVaultCertificateSecretVersion;
            return this;
        }
        @CustomType.Setter
        public Builder azureKeyVaultCertificateVaultId(@Nullable String azureKeyVaultCertificateVaultId) {

            this.azureKeyVaultCertificateVaultId = azureKeyVaultCertificateVaultId;
            return this;
        }
        @CustomType.Setter
        public Builder certificateSource(@Nullable String certificateSource) {

            this.certificateSource = certificateSource;
            return this;
        }
        @CustomType.Setter
        public Builder minimumTlsVersion(@Nullable String minimumTlsVersion) {

            this.minimumTlsVersion = minimumTlsVersion;
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(@Nullable String provisioningState) {

            this.provisioningState = provisioningState;
            return this;
        }
        @CustomType.Setter
        public Builder provisioningSubstate(@Nullable String provisioningSubstate) {

            this.provisioningSubstate = provisioningSubstate;
            return this;
        }
        public CustomHttpsConfigurationCustomHttpsConfiguration build() {
            final var _resultValue = new CustomHttpsConfigurationCustomHttpsConfiguration();
            _resultValue.azureKeyVaultCertificateSecretName = azureKeyVaultCertificateSecretName;
            _resultValue.azureKeyVaultCertificateSecretVersion = azureKeyVaultCertificateSecretVersion;
            _resultValue.azureKeyVaultCertificateVaultId = azureKeyVaultCertificateVaultId;
            _resultValue.certificateSource = certificateSource;
            _resultValue.minimumTlsVersion = minimumTlsVersion;
            _resultValue.provisioningState = provisioningState;
            _resultValue.provisioningSubstate = provisioningSubstate;
            return _resultValue;
        }
    }
}
