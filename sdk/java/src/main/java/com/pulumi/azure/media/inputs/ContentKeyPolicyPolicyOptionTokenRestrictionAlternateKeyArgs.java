// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.media.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArgs Empty = new ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArgs();

    /**
     * The RSA parameter exponent.
     * 
     */
    @Import(name="rsaTokenKeyExponent")
    private @Nullable Output<String> rsaTokenKeyExponent;

    /**
     * @return The RSA parameter exponent.
     * 
     */
    public Optional<Output<String>> rsaTokenKeyExponent() {
        return Optional.ofNullable(this.rsaTokenKeyExponent);
    }

    /**
     * The RSA parameter modulus.
     * 
     */
    @Import(name="rsaTokenKeyModulus")
    private @Nullable Output<String> rsaTokenKeyModulus;

    /**
     * @return The RSA parameter modulus.
     * 
     */
    public Optional<Output<String>> rsaTokenKeyModulus() {
        return Optional.ofNullable(this.rsaTokenKeyModulus);
    }

    /**
     * The key value of the key. Specifies a symmetric key for token validation.
     * 
     */
    @Import(name="symmetricTokenKey")
    private @Nullable Output<String> symmetricTokenKey;

    /**
     * @return The key value of the key. Specifies a symmetric key for token validation.
     * 
     */
    public Optional<Output<String>> symmetricTokenKey() {
        return Optional.ofNullable(this.symmetricTokenKey);
    }

    /**
     * The raw data field of a certificate in PKCS 12 format (X509Certificate2 in .NET). Specifies a certificate for token validation.
     * 
     */
    @Import(name="x509TokenKeyRaw")
    private @Nullable Output<String> x509TokenKeyRaw;

    /**
     * @return The raw data field of a certificate in PKCS 12 format (X509Certificate2 in .NET). Specifies a certificate for token validation.
     * 
     */
    public Optional<Output<String>> x509TokenKeyRaw() {
        return Optional.ofNullable(this.x509TokenKeyRaw);
    }

    private ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArgs() {}

    private ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArgs(ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArgs $) {
        this.rsaTokenKeyExponent = $.rsaTokenKeyExponent;
        this.rsaTokenKeyModulus = $.rsaTokenKeyModulus;
        this.symmetricTokenKey = $.symmetricTokenKey;
        this.x509TokenKeyRaw = $.x509TokenKeyRaw;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArgs $;

        public Builder() {
            $ = new ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArgs();
        }

        public Builder(ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArgs defaults) {
            $ = new ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param rsaTokenKeyExponent The RSA parameter exponent.
         * 
         * @return builder
         * 
         */
        public Builder rsaTokenKeyExponent(@Nullable Output<String> rsaTokenKeyExponent) {
            $.rsaTokenKeyExponent = rsaTokenKeyExponent;
            return this;
        }

        /**
         * @param rsaTokenKeyExponent The RSA parameter exponent.
         * 
         * @return builder
         * 
         */
        public Builder rsaTokenKeyExponent(String rsaTokenKeyExponent) {
            return rsaTokenKeyExponent(Output.of(rsaTokenKeyExponent));
        }

        /**
         * @param rsaTokenKeyModulus The RSA parameter modulus.
         * 
         * @return builder
         * 
         */
        public Builder rsaTokenKeyModulus(@Nullable Output<String> rsaTokenKeyModulus) {
            $.rsaTokenKeyModulus = rsaTokenKeyModulus;
            return this;
        }

        /**
         * @param rsaTokenKeyModulus The RSA parameter modulus.
         * 
         * @return builder
         * 
         */
        public Builder rsaTokenKeyModulus(String rsaTokenKeyModulus) {
            return rsaTokenKeyModulus(Output.of(rsaTokenKeyModulus));
        }

        /**
         * @param symmetricTokenKey The key value of the key. Specifies a symmetric key for token validation.
         * 
         * @return builder
         * 
         */
        public Builder symmetricTokenKey(@Nullable Output<String> symmetricTokenKey) {
            $.symmetricTokenKey = symmetricTokenKey;
            return this;
        }

        /**
         * @param symmetricTokenKey The key value of the key. Specifies a symmetric key for token validation.
         * 
         * @return builder
         * 
         */
        public Builder symmetricTokenKey(String symmetricTokenKey) {
            return symmetricTokenKey(Output.of(symmetricTokenKey));
        }

        /**
         * @param x509TokenKeyRaw The raw data field of a certificate in PKCS 12 format (X509Certificate2 in .NET). Specifies a certificate for token validation.
         * 
         * @return builder
         * 
         */
        public Builder x509TokenKeyRaw(@Nullable Output<String> x509TokenKeyRaw) {
            $.x509TokenKeyRaw = x509TokenKeyRaw;
            return this;
        }

        /**
         * @param x509TokenKeyRaw The raw data field of a certificate in PKCS 12 format (X509Certificate2 in .NET). Specifies a certificate for token validation.
         * 
         * @return builder
         * 
         */
        public Builder x509TokenKeyRaw(String x509TokenKeyRaw) {
            return x509TokenKeyRaw(Output.of(x509TokenKeyRaw));
        }

        public ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArgs build() {
            return $;
        }
    }

}
