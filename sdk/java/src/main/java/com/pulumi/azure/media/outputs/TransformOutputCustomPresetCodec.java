// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.media.outputs;

import com.pulumi.azure.media.outputs.TransformOutputCustomPresetCodecAacAudio;
import com.pulumi.azure.media.outputs.TransformOutputCustomPresetCodecCopyAudio;
import com.pulumi.azure.media.outputs.TransformOutputCustomPresetCodecCopyVideo;
import com.pulumi.azure.media.outputs.TransformOutputCustomPresetCodecDdAudio;
import com.pulumi.azure.media.outputs.TransformOutputCustomPresetCodecH264Video;
import com.pulumi.azure.media.outputs.TransformOutputCustomPresetCodecH265Video;
import com.pulumi.core.annotations.CustomType;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class TransformOutputCustomPresetCodec {
    /**
     * @return A `aac_audio` block as defined above.
     * 
     */
    private @Nullable TransformOutputCustomPresetCodecAacAudio aacAudio;
    /**
     * @return A `copy_audio` block as defined below.
     * 
     */
    private @Nullable TransformOutputCustomPresetCodecCopyAudio copyAudio;
    /**
     * @return A `copy_video` block as defined below.
     * 
     */
    private @Nullable TransformOutputCustomPresetCodecCopyVideo copyVideo;
    /**
     * @return A `dd_audio` block as defined below.
     * 
     */
    private @Nullable TransformOutputCustomPresetCodecDdAudio ddAudio;
    /**
     * @return A `h264_video` block as defined below.
     * 
     */
    private @Nullable TransformOutputCustomPresetCodecH264Video h264Video;
    /**
     * @return A `h265_video` block as defined below.
     * 
     * &gt; **NOTE:** Each codec can only have one type: `aac_audio`, `copy_audio`, `copy_video`, `dd_audio`, `h264_video` or `h265_video`. If you need to apply different codec you must create one codec for each one.
     * 
     */
    private @Nullable TransformOutputCustomPresetCodecH265Video h265Video;

    private TransformOutputCustomPresetCodec() {}
    /**
     * @return A `aac_audio` block as defined above.
     * 
     */
    public Optional<TransformOutputCustomPresetCodecAacAudio> aacAudio() {
        return Optional.ofNullable(this.aacAudio);
    }
    /**
     * @return A `copy_audio` block as defined below.
     * 
     */
    public Optional<TransformOutputCustomPresetCodecCopyAudio> copyAudio() {
        return Optional.ofNullable(this.copyAudio);
    }
    /**
     * @return A `copy_video` block as defined below.
     * 
     */
    public Optional<TransformOutputCustomPresetCodecCopyVideo> copyVideo() {
        return Optional.ofNullable(this.copyVideo);
    }
    /**
     * @return A `dd_audio` block as defined below.
     * 
     */
    public Optional<TransformOutputCustomPresetCodecDdAudio> ddAudio() {
        return Optional.ofNullable(this.ddAudio);
    }
    /**
     * @return A `h264_video` block as defined below.
     * 
     */
    public Optional<TransformOutputCustomPresetCodecH264Video> h264Video() {
        return Optional.ofNullable(this.h264Video);
    }
    /**
     * @return A `h265_video` block as defined below.
     * 
     * &gt; **NOTE:** Each codec can only have one type: `aac_audio`, `copy_audio`, `copy_video`, `dd_audio`, `h264_video` or `h265_video`. If you need to apply different codec you must create one codec for each one.
     * 
     */
    public Optional<TransformOutputCustomPresetCodecH265Video> h265Video() {
        return Optional.ofNullable(this.h265Video);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TransformOutputCustomPresetCodec defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable TransformOutputCustomPresetCodecAacAudio aacAudio;
        private @Nullable TransformOutputCustomPresetCodecCopyAudio copyAudio;
        private @Nullable TransformOutputCustomPresetCodecCopyVideo copyVideo;
        private @Nullable TransformOutputCustomPresetCodecDdAudio ddAudio;
        private @Nullable TransformOutputCustomPresetCodecH264Video h264Video;
        private @Nullable TransformOutputCustomPresetCodecH265Video h265Video;
        public Builder() {}
        public Builder(TransformOutputCustomPresetCodec defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aacAudio = defaults.aacAudio;
    	      this.copyAudio = defaults.copyAudio;
    	      this.copyVideo = defaults.copyVideo;
    	      this.ddAudio = defaults.ddAudio;
    	      this.h264Video = defaults.h264Video;
    	      this.h265Video = defaults.h265Video;
        }

        @CustomType.Setter
        public Builder aacAudio(@Nullable TransformOutputCustomPresetCodecAacAudio aacAudio) {
            this.aacAudio = aacAudio;
            return this;
        }
        @CustomType.Setter
        public Builder copyAudio(@Nullable TransformOutputCustomPresetCodecCopyAudio copyAudio) {
            this.copyAudio = copyAudio;
            return this;
        }
        @CustomType.Setter
        public Builder copyVideo(@Nullable TransformOutputCustomPresetCodecCopyVideo copyVideo) {
            this.copyVideo = copyVideo;
            return this;
        }
        @CustomType.Setter
        public Builder ddAudio(@Nullable TransformOutputCustomPresetCodecDdAudio ddAudio) {
            this.ddAudio = ddAudio;
            return this;
        }
        @CustomType.Setter
        public Builder h264Video(@Nullable TransformOutputCustomPresetCodecH264Video h264Video) {
            this.h264Video = h264Video;
            return this;
        }
        @CustomType.Setter
        public Builder h265Video(@Nullable TransformOutputCustomPresetCodecH265Video h265Video) {
            this.h265Video = h265Video;
            return this;
        }
        public TransformOutputCustomPresetCodec build() {
            final var o = new TransformOutputCustomPresetCodec();
            o.aacAudio = aacAudio;
            o.copyAudio = copyAudio;
            o.copyVideo = copyVideo;
            o.ddAudio = ddAudio;
            o.h264Video = h264Video;
            o.h265Video = h265Video;
            return o;
        }
    }
}
