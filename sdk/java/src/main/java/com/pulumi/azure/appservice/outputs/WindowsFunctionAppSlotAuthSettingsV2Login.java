// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.appservice.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class WindowsFunctionAppSlotAuthSettingsV2Login {
    /**
     * @return External URLs that can be redirected to as part of logging in or logging out of the app. This is an advanced setting typically only needed by Windows Store application backends.
     * 
     * &gt; **Note:** URLs within the current domain are always implicitly allowed.
     * 
     */
    private @Nullable List<String> allowedExternalRedirectUrls;
    /**
     * @return The method by which cookies expire. Possible values include: `FixedTime`, and `IdentityProviderDerived`. Defaults to `FixedTime`.
     * 
     */
    private @Nullable String cookieExpirationConvention;
    /**
     * @return The time after the request is made when the session cookie should expire. Defaults to `08:00:00`.
     * 
     */
    private @Nullable String cookieExpirationTime;
    /**
     * @return The endpoint to which logout requests should be made.
     * 
     */
    private @Nullable String logoutEndpoint;
    /**
     * @return The time after the request is made when the nonce should expire. Defaults to `00:05:00`.
     * 
     */
    private @Nullable String nonceExpirationTime;
    /**
     * @return Should the fragments from the request be preserved after the login request is made. Defaults to `false`.
     * 
     */
    private @Nullable Boolean preserveUrlFragmentsForLogins;
    /**
     * @return The number of hours after session token expiration that a session token can be used to call the token refresh API. Defaults to `72` hours.
     * 
     */
    private @Nullable Double tokenRefreshExtensionTime;
    /**
     * @return Should the Token Store configuration Enabled. Defaults to `false`
     * 
     */
    private @Nullable Boolean tokenStoreEnabled;
    /**
     * @return The directory path in the App Filesystem in which the tokens will be stored.
     * 
     */
    private @Nullable String tokenStorePath;
    /**
     * @return The name of the app setting which contains the SAS URL of the blob storage containing the tokens.
     * 
     */
    private @Nullable String tokenStoreSasSettingName;
    /**
     * @return Should the nonce be validated while completing the login flow. Defaults to `true`.
     * 
     */
    private @Nullable Boolean validateNonce;

    private WindowsFunctionAppSlotAuthSettingsV2Login() {}
    /**
     * @return External URLs that can be redirected to as part of logging in or logging out of the app. This is an advanced setting typically only needed by Windows Store application backends.
     * 
     * &gt; **Note:** URLs within the current domain are always implicitly allowed.
     * 
     */
    public List<String> allowedExternalRedirectUrls() {
        return this.allowedExternalRedirectUrls == null ? List.of() : this.allowedExternalRedirectUrls;
    }
    /**
     * @return The method by which cookies expire. Possible values include: `FixedTime`, and `IdentityProviderDerived`. Defaults to `FixedTime`.
     * 
     */
    public Optional<String> cookieExpirationConvention() {
        return Optional.ofNullable(this.cookieExpirationConvention);
    }
    /**
     * @return The time after the request is made when the session cookie should expire. Defaults to `08:00:00`.
     * 
     */
    public Optional<String> cookieExpirationTime() {
        return Optional.ofNullable(this.cookieExpirationTime);
    }
    /**
     * @return The endpoint to which logout requests should be made.
     * 
     */
    public Optional<String> logoutEndpoint() {
        return Optional.ofNullable(this.logoutEndpoint);
    }
    /**
     * @return The time after the request is made when the nonce should expire. Defaults to `00:05:00`.
     * 
     */
    public Optional<String> nonceExpirationTime() {
        return Optional.ofNullable(this.nonceExpirationTime);
    }
    /**
     * @return Should the fragments from the request be preserved after the login request is made. Defaults to `false`.
     * 
     */
    public Optional<Boolean> preserveUrlFragmentsForLogins() {
        return Optional.ofNullable(this.preserveUrlFragmentsForLogins);
    }
    /**
     * @return The number of hours after session token expiration that a session token can be used to call the token refresh API. Defaults to `72` hours.
     * 
     */
    public Optional<Double> tokenRefreshExtensionTime() {
        return Optional.ofNullable(this.tokenRefreshExtensionTime);
    }
    /**
     * @return Should the Token Store configuration Enabled. Defaults to `false`
     * 
     */
    public Optional<Boolean> tokenStoreEnabled() {
        return Optional.ofNullable(this.tokenStoreEnabled);
    }
    /**
     * @return The directory path in the App Filesystem in which the tokens will be stored.
     * 
     */
    public Optional<String> tokenStorePath() {
        return Optional.ofNullable(this.tokenStorePath);
    }
    /**
     * @return The name of the app setting which contains the SAS URL of the blob storage containing the tokens.
     * 
     */
    public Optional<String> tokenStoreSasSettingName() {
        return Optional.ofNullable(this.tokenStoreSasSettingName);
    }
    /**
     * @return Should the nonce be validated while completing the login flow. Defaults to `true`.
     * 
     */
    public Optional<Boolean> validateNonce() {
        return Optional.ofNullable(this.validateNonce);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WindowsFunctionAppSlotAuthSettingsV2Login defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> allowedExternalRedirectUrls;
        private @Nullable String cookieExpirationConvention;
        private @Nullable String cookieExpirationTime;
        private @Nullable String logoutEndpoint;
        private @Nullable String nonceExpirationTime;
        private @Nullable Boolean preserveUrlFragmentsForLogins;
        private @Nullable Double tokenRefreshExtensionTime;
        private @Nullable Boolean tokenStoreEnabled;
        private @Nullable String tokenStorePath;
        private @Nullable String tokenStoreSasSettingName;
        private @Nullable Boolean validateNonce;
        public Builder() {}
        public Builder(WindowsFunctionAppSlotAuthSettingsV2Login defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedExternalRedirectUrls = defaults.allowedExternalRedirectUrls;
    	      this.cookieExpirationConvention = defaults.cookieExpirationConvention;
    	      this.cookieExpirationTime = defaults.cookieExpirationTime;
    	      this.logoutEndpoint = defaults.logoutEndpoint;
    	      this.nonceExpirationTime = defaults.nonceExpirationTime;
    	      this.preserveUrlFragmentsForLogins = defaults.preserveUrlFragmentsForLogins;
    	      this.tokenRefreshExtensionTime = defaults.tokenRefreshExtensionTime;
    	      this.tokenStoreEnabled = defaults.tokenStoreEnabled;
    	      this.tokenStorePath = defaults.tokenStorePath;
    	      this.tokenStoreSasSettingName = defaults.tokenStoreSasSettingName;
    	      this.validateNonce = defaults.validateNonce;
        }

        @CustomType.Setter
        public Builder allowedExternalRedirectUrls(@Nullable List<String> allowedExternalRedirectUrls) {

            this.allowedExternalRedirectUrls = allowedExternalRedirectUrls;
            return this;
        }
        public Builder allowedExternalRedirectUrls(String... allowedExternalRedirectUrls) {
            return allowedExternalRedirectUrls(List.of(allowedExternalRedirectUrls));
        }
        @CustomType.Setter
        public Builder cookieExpirationConvention(@Nullable String cookieExpirationConvention) {

            this.cookieExpirationConvention = cookieExpirationConvention;
            return this;
        }
        @CustomType.Setter
        public Builder cookieExpirationTime(@Nullable String cookieExpirationTime) {

            this.cookieExpirationTime = cookieExpirationTime;
            return this;
        }
        @CustomType.Setter
        public Builder logoutEndpoint(@Nullable String logoutEndpoint) {

            this.logoutEndpoint = logoutEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder nonceExpirationTime(@Nullable String nonceExpirationTime) {

            this.nonceExpirationTime = nonceExpirationTime;
            return this;
        }
        @CustomType.Setter
        public Builder preserveUrlFragmentsForLogins(@Nullable Boolean preserveUrlFragmentsForLogins) {

            this.preserveUrlFragmentsForLogins = preserveUrlFragmentsForLogins;
            return this;
        }
        @CustomType.Setter
        public Builder tokenRefreshExtensionTime(@Nullable Double tokenRefreshExtensionTime) {

            this.tokenRefreshExtensionTime = tokenRefreshExtensionTime;
            return this;
        }
        @CustomType.Setter
        public Builder tokenStoreEnabled(@Nullable Boolean tokenStoreEnabled) {

            this.tokenStoreEnabled = tokenStoreEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder tokenStorePath(@Nullable String tokenStorePath) {

            this.tokenStorePath = tokenStorePath;
            return this;
        }
        @CustomType.Setter
        public Builder tokenStoreSasSettingName(@Nullable String tokenStoreSasSettingName) {

            this.tokenStoreSasSettingName = tokenStoreSasSettingName;
            return this;
        }
        @CustomType.Setter
        public Builder validateNonce(@Nullable Boolean validateNonce) {

            this.validateNonce = validateNonce;
            return this;
        }
        public WindowsFunctionAppSlotAuthSettingsV2Login build() {
            final var _resultValue = new WindowsFunctionAppSlotAuthSettingsV2Login();
            _resultValue.allowedExternalRedirectUrls = allowedExternalRedirectUrls;
            _resultValue.cookieExpirationConvention = cookieExpirationConvention;
            _resultValue.cookieExpirationTime = cookieExpirationTime;
            _resultValue.logoutEndpoint = logoutEndpoint;
            _resultValue.nonceExpirationTime = nonceExpirationTime;
            _resultValue.preserveUrlFragmentsForLogins = preserveUrlFragmentsForLogins;
            _resultValue.tokenRefreshExtensionTime = tokenRefreshExtensionTime;
            _resultValue.tokenStoreEnabled = tokenStoreEnabled;
            _resultValue.tokenStorePath = tokenStorePath;
            _resultValue.tokenStoreSasSettingName = tokenStoreSasSettingName;
            _resultValue.validateNonce = validateNonce;
            return _resultValue;
        }
    }
}
