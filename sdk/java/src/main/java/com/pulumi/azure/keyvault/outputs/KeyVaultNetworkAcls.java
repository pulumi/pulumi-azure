// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.keyvault.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class KeyVaultNetworkAcls {
    /**
     * @return Specifies which traffic can bypass the network rules. Possible values are `AzureServices` and `None`.
     * 
     */
    private final String bypass;
    /**
     * @return The Default Action to use when no rules match from `ip_rules` / `virtual_network_subnet_ids`. Possible values are `Allow` and `Deny`.
     * 
     */
    private final String defaultAction;
    /**
     * @return One or more IP Addresses, or CIDR Blocks which should be able to access the Key Vault.
     * 
     */
    private final @Nullable List<String> ipRules;
    /**
     * @return One or more Subnet IDs which should be able to access this Key Vault.
     * 
     */
    private final @Nullable List<String> virtualNetworkSubnetIds;

    @CustomType.Constructor
    private KeyVaultNetworkAcls(
        @CustomType.Parameter("bypass") String bypass,
        @CustomType.Parameter("defaultAction") String defaultAction,
        @CustomType.Parameter("ipRules") @Nullable List<String> ipRules,
        @CustomType.Parameter("virtualNetworkSubnetIds") @Nullable List<String> virtualNetworkSubnetIds) {
        this.bypass = bypass;
        this.defaultAction = defaultAction;
        this.ipRules = ipRules;
        this.virtualNetworkSubnetIds = virtualNetworkSubnetIds;
    }

    /**
     * @return Specifies which traffic can bypass the network rules. Possible values are `AzureServices` and `None`.
     * 
     */
    public String bypass() {
        return this.bypass;
    }
    /**
     * @return The Default Action to use when no rules match from `ip_rules` / `virtual_network_subnet_ids`. Possible values are `Allow` and `Deny`.
     * 
     */
    public String defaultAction() {
        return this.defaultAction;
    }
    /**
     * @return One or more IP Addresses, or CIDR Blocks which should be able to access the Key Vault.
     * 
     */
    public List<String> ipRules() {
        return this.ipRules == null ? List.of() : this.ipRules;
    }
    /**
     * @return One or more Subnet IDs which should be able to access this Key Vault.
     * 
     */
    public List<String> virtualNetworkSubnetIds() {
        return this.virtualNetworkSubnetIds == null ? List.of() : this.virtualNetworkSubnetIds;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(KeyVaultNetworkAcls defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String bypass;
        private String defaultAction;
        private @Nullable List<String> ipRules;
        private @Nullable List<String> virtualNetworkSubnetIds;

        public Builder() {
    	      // Empty
        }

        public Builder(KeyVaultNetworkAcls defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bypass = defaults.bypass;
    	      this.defaultAction = defaults.defaultAction;
    	      this.ipRules = defaults.ipRules;
    	      this.virtualNetworkSubnetIds = defaults.virtualNetworkSubnetIds;
        }

        public Builder bypass(String bypass) {
            this.bypass = Objects.requireNonNull(bypass);
            return this;
        }
        public Builder defaultAction(String defaultAction) {
            this.defaultAction = Objects.requireNonNull(defaultAction);
            return this;
        }
        public Builder ipRules(@Nullable List<String> ipRules) {
            this.ipRules = ipRules;
            return this;
        }
        public Builder ipRules(String... ipRules) {
            return ipRules(List.of(ipRules));
        }
        public Builder virtualNetworkSubnetIds(@Nullable List<String> virtualNetworkSubnetIds) {
            this.virtualNetworkSubnetIds = virtualNetworkSubnetIds;
            return this;
        }
        public Builder virtualNetworkSubnetIds(String... virtualNetworkSubnetIds) {
            return virtualNetworkSubnetIds(List.of(virtualNetworkSubnetIds));
        }        public KeyVaultNetworkAcls build() {
            return new KeyVaultNetworkAcls(bypass, defaultAction, ipRules, virtualNetworkSubnetIds);
        }
    }
}
