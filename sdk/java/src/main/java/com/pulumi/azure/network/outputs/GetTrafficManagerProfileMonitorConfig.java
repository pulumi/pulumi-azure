// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network.outputs;

import com.pulumi.azure.network.outputs.GetTrafficManagerProfileMonitorConfigCustomHeader;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetTrafficManagerProfileMonitorConfig {
    /**
     * @return One or more `custom_header` blocks as defined below.
     * 
     */
    private final List<GetTrafficManagerProfileMonitorConfigCustomHeader> customHeaders;
    /**
     * @return A list of status code ranges.
     * 
     */
    private final List<String> expectedStatusCodeRanges;
    /**
     * @return The interval used to check the endpoint health from a Traffic Manager probing agent.
     * 
     */
    private final Integer intervalInSeconds;
    /**
     * @return The path used by the monitoring checks.
     * 
     */
    private final String path;
    /**
     * @return The port number used by the monitoring checks.
     * 
     */
    private final Integer port;
    /**
     * @return The protocol used by the monitoring checks.
     * 
     */
    private final String protocol;
    /**
     * @return The amount of time the Traffic Manager probing agent should wait before considering that check a failure when a health check probe is sent to the endpoint.
     * 
     */
    private final Integer timeoutInSeconds;
    /**
     * @return The number of failures a Traffic Manager probing agent tolerates before marking that endpoint as unhealthy.
     * 
     */
    private final Integer toleratedNumberOfFailures;

    @CustomType.Constructor
    private GetTrafficManagerProfileMonitorConfig(
        @CustomType.Parameter("customHeaders") List<GetTrafficManagerProfileMonitorConfigCustomHeader> customHeaders,
        @CustomType.Parameter("expectedStatusCodeRanges") List<String> expectedStatusCodeRanges,
        @CustomType.Parameter("intervalInSeconds") Integer intervalInSeconds,
        @CustomType.Parameter("path") String path,
        @CustomType.Parameter("port") Integer port,
        @CustomType.Parameter("protocol") String protocol,
        @CustomType.Parameter("timeoutInSeconds") Integer timeoutInSeconds,
        @CustomType.Parameter("toleratedNumberOfFailures") Integer toleratedNumberOfFailures) {
        this.customHeaders = customHeaders;
        this.expectedStatusCodeRanges = expectedStatusCodeRanges;
        this.intervalInSeconds = intervalInSeconds;
        this.path = path;
        this.port = port;
        this.protocol = protocol;
        this.timeoutInSeconds = timeoutInSeconds;
        this.toleratedNumberOfFailures = toleratedNumberOfFailures;
    }

    /**
     * @return One or more `custom_header` blocks as defined below.
     * 
     */
    public List<GetTrafficManagerProfileMonitorConfigCustomHeader> customHeaders() {
        return this.customHeaders;
    }
    /**
     * @return A list of status code ranges.
     * 
     */
    public List<String> expectedStatusCodeRanges() {
        return this.expectedStatusCodeRanges;
    }
    /**
     * @return The interval used to check the endpoint health from a Traffic Manager probing agent.
     * 
     */
    public Integer intervalInSeconds() {
        return this.intervalInSeconds;
    }
    /**
     * @return The path used by the monitoring checks.
     * 
     */
    public String path() {
        return this.path;
    }
    /**
     * @return The port number used by the monitoring checks.
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return The protocol used by the monitoring checks.
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return The amount of time the Traffic Manager probing agent should wait before considering that check a failure when a health check probe is sent to the endpoint.
     * 
     */
    public Integer timeoutInSeconds() {
        return this.timeoutInSeconds;
    }
    /**
     * @return The number of failures a Traffic Manager probing agent tolerates before marking that endpoint as unhealthy.
     * 
     */
    public Integer toleratedNumberOfFailures() {
        return this.toleratedNumberOfFailures;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTrafficManagerProfileMonitorConfig defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<GetTrafficManagerProfileMonitorConfigCustomHeader> customHeaders;
        private List<String> expectedStatusCodeRanges;
        private Integer intervalInSeconds;
        private String path;
        private Integer port;
        private String protocol;
        private Integer timeoutInSeconds;
        private Integer toleratedNumberOfFailures;

        public Builder() {
    	      // Empty
        }

        public Builder(GetTrafficManagerProfileMonitorConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.customHeaders = defaults.customHeaders;
    	      this.expectedStatusCodeRanges = defaults.expectedStatusCodeRanges;
    	      this.intervalInSeconds = defaults.intervalInSeconds;
    	      this.path = defaults.path;
    	      this.port = defaults.port;
    	      this.protocol = defaults.protocol;
    	      this.timeoutInSeconds = defaults.timeoutInSeconds;
    	      this.toleratedNumberOfFailures = defaults.toleratedNumberOfFailures;
        }

        public Builder customHeaders(List<GetTrafficManagerProfileMonitorConfigCustomHeader> customHeaders) {
            this.customHeaders = Objects.requireNonNull(customHeaders);
            return this;
        }
        public Builder customHeaders(GetTrafficManagerProfileMonitorConfigCustomHeader... customHeaders) {
            return customHeaders(List.of(customHeaders));
        }
        public Builder expectedStatusCodeRanges(List<String> expectedStatusCodeRanges) {
            this.expectedStatusCodeRanges = Objects.requireNonNull(expectedStatusCodeRanges);
            return this;
        }
        public Builder expectedStatusCodeRanges(String... expectedStatusCodeRanges) {
            return expectedStatusCodeRanges(List.of(expectedStatusCodeRanges));
        }
        public Builder intervalInSeconds(Integer intervalInSeconds) {
            this.intervalInSeconds = Objects.requireNonNull(intervalInSeconds);
            return this;
        }
        public Builder path(String path) {
            this.path = Objects.requireNonNull(path);
            return this;
        }
        public Builder port(Integer port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }
        public Builder protocol(String protocol) {
            this.protocol = Objects.requireNonNull(protocol);
            return this;
        }
        public Builder timeoutInSeconds(Integer timeoutInSeconds) {
            this.timeoutInSeconds = Objects.requireNonNull(timeoutInSeconds);
            return this;
        }
        public Builder toleratedNumberOfFailures(Integer toleratedNumberOfFailures) {
            this.toleratedNumberOfFailures = Objects.requireNonNull(toleratedNumberOfFailures);
            return this;
        }        public GetTrafficManagerProfileMonitorConfig build() {
            return new GetTrafficManagerProfileMonitorConfig(customHeaders, expectedStatusCodeRanges, intervalInSeconds, path, port, protocol, timeoutInSeconds, toleratedNumberOfFailures);
        }
    }
}
