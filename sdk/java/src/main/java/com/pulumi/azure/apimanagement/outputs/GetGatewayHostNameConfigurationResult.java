// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.apimanagement.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetGatewayHostNameConfigurationResult {
    private String apiManagementId;
    /**
     * @return The ID of the certificate used for TLS connection establishment.
     * 
     */
    private String certificateId;
    private String gatewayName;
    /**
     * @return The host name used for the API Management Gateway Host Name Configuration.
     * 
     */
    private String hostName;
    /**
     * @return Whether HTTP/2.0 is supported.
     * 
     */
    private Boolean http2Enabled;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String name;
    /**
     * @return Whether the API Management Gateway requests a client certificate.
     * 
     */
    private Boolean requestClientCertificateEnabled;
    /**
     * @return Whether TLS 1.0 is supported.
     * 
     */
    private Boolean tls10Enabled;
    /**
     * @return Whether TLS 1.1 is supported.
     * 
     */
    private Boolean tls11Enabled;

    private GetGatewayHostNameConfigurationResult() {}
    public String apiManagementId() {
        return this.apiManagementId;
    }
    /**
     * @return The ID of the certificate used for TLS connection establishment.
     * 
     */
    public String certificateId() {
        return this.certificateId;
    }
    public String gatewayName() {
        return this.gatewayName;
    }
    /**
     * @return The host name used for the API Management Gateway Host Name Configuration.
     * 
     */
    public String hostName() {
        return this.hostName;
    }
    /**
     * @return Whether HTTP/2.0 is supported.
     * 
     */
    public Boolean http2Enabled() {
        return this.http2Enabled;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return Whether the API Management Gateway requests a client certificate.
     * 
     */
    public Boolean requestClientCertificateEnabled() {
        return this.requestClientCertificateEnabled;
    }
    /**
     * @return Whether TLS 1.0 is supported.
     * 
     */
    public Boolean tls10Enabled() {
        return this.tls10Enabled;
    }
    /**
     * @return Whether TLS 1.1 is supported.
     * 
     */
    public Boolean tls11Enabled() {
        return this.tls11Enabled;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGatewayHostNameConfigurationResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String apiManagementId;
        private String certificateId;
        private String gatewayName;
        private String hostName;
        private Boolean http2Enabled;
        private String id;
        private String name;
        private Boolean requestClientCertificateEnabled;
        private Boolean tls10Enabled;
        private Boolean tls11Enabled;
        public Builder() {}
        public Builder(GetGatewayHostNameConfigurationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apiManagementId = defaults.apiManagementId;
    	      this.certificateId = defaults.certificateId;
    	      this.gatewayName = defaults.gatewayName;
    	      this.hostName = defaults.hostName;
    	      this.http2Enabled = defaults.http2Enabled;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.requestClientCertificateEnabled = defaults.requestClientCertificateEnabled;
    	      this.tls10Enabled = defaults.tls10Enabled;
    	      this.tls11Enabled = defaults.tls11Enabled;
        }

        @CustomType.Setter
        public Builder apiManagementId(String apiManagementId) {
            if (apiManagementId == null) {
              throw new MissingRequiredPropertyException("GetGatewayHostNameConfigurationResult", "apiManagementId");
            }
            this.apiManagementId = apiManagementId;
            return this;
        }
        @CustomType.Setter
        public Builder certificateId(String certificateId) {
            if (certificateId == null) {
              throw new MissingRequiredPropertyException("GetGatewayHostNameConfigurationResult", "certificateId");
            }
            this.certificateId = certificateId;
            return this;
        }
        @CustomType.Setter
        public Builder gatewayName(String gatewayName) {
            if (gatewayName == null) {
              throw new MissingRequiredPropertyException("GetGatewayHostNameConfigurationResult", "gatewayName");
            }
            this.gatewayName = gatewayName;
            return this;
        }
        @CustomType.Setter
        public Builder hostName(String hostName) {
            if (hostName == null) {
              throw new MissingRequiredPropertyException("GetGatewayHostNameConfigurationResult", "hostName");
            }
            this.hostName = hostName;
            return this;
        }
        @CustomType.Setter
        public Builder http2Enabled(Boolean http2Enabled) {
            if (http2Enabled == null) {
              throw new MissingRequiredPropertyException("GetGatewayHostNameConfigurationResult", "http2Enabled");
            }
            this.http2Enabled = http2Enabled;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetGatewayHostNameConfigurationResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetGatewayHostNameConfigurationResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder requestClientCertificateEnabled(Boolean requestClientCertificateEnabled) {
            if (requestClientCertificateEnabled == null) {
              throw new MissingRequiredPropertyException("GetGatewayHostNameConfigurationResult", "requestClientCertificateEnabled");
            }
            this.requestClientCertificateEnabled = requestClientCertificateEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder tls10Enabled(Boolean tls10Enabled) {
            if (tls10Enabled == null) {
              throw new MissingRequiredPropertyException("GetGatewayHostNameConfigurationResult", "tls10Enabled");
            }
            this.tls10Enabled = tls10Enabled;
            return this;
        }
        @CustomType.Setter
        public Builder tls11Enabled(Boolean tls11Enabled) {
            if (tls11Enabled == null) {
              throw new MissingRequiredPropertyException("GetGatewayHostNameConfigurationResult", "tls11Enabled");
            }
            this.tls11Enabled = tls11Enabled;
            return this;
        }
        public GetGatewayHostNameConfigurationResult build() {
            final var _resultValue = new GetGatewayHostNameConfigurationResult();
            _resultValue.apiManagementId = apiManagementId;
            _resultValue.certificateId = certificateId;
            _resultValue.gatewayName = gatewayName;
            _resultValue.hostName = hostName;
            _resultValue.http2Enabled = http2Enabled;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.requestClientCertificateEnabled = requestClientCertificateEnabled;
            _resultValue.tls10Enabled = tls10Enabled;
            _resultValue.tls11Enabled = tls11Enabled;
            return _resultValue;
        }
    }
}
