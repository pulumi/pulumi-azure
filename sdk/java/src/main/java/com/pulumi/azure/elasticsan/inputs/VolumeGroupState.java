// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.elasticsan.inputs;

import com.pulumi.azure.elasticsan.inputs.VolumeGroupEncryptionArgs;
import com.pulumi.azure.elasticsan.inputs.VolumeGroupIdentityArgs;
import com.pulumi.azure.elasticsan.inputs.VolumeGroupNetworkRuleArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VolumeGroupState extends com.pulumi.resources.ResourceArgs {

    public static final VolumeGroupState Empty = new VolumeGroupState();

    /**
     * Specifies the Elastic SAN ID within which this Elastic SAN Volume Group should exist. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="elasticSanId")
    private @Nullable Output<String> elasticSanId;

    /**
     * @return Specifies the Elastic SAN ID within which this Elastic SAN Volume Group should exist. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> elasticSanId() {
        return Optional.ofNullable(this.elasticSanId);
    }

    /**
     * An `encryption` block as defined below.
     * 
     * &gt; **NOTE:** The `encryption` block can only be set when `encryption_type` is set to `EncryptionAtRestWithCustomerManagedKey`.
     * 
     */
    @Import(name="encryption")
    private @Nullable Output<VolumeGroupEncryptionArgs> encryption;

    /**
     * @return An `encryption` block as defined below.
     * 
     * &gt; **NOTE:** The `encryption` block can only be set when `encryption_type` is set to `EncryptionAtRestWithCustomerManagedKey`.
     * 
     */
    public Optional<Output<VolumeGroupEncryptionArgs>> encryption() {
        return Optional.ofNullable(this.encryption);
    }

    /**
     * Specifies the type of the key used to encrypt the data of the disk. Possible values are `EncryptionAtRestWithCustomerManagedKey` and `EncryptionAtRestWithPlatformKey`. Defaults to `EncryptionAtRestWithPlatformKey`.
     * 
     */
    @Import(name="encryptionType")
    private @Nullable Output<String> encryptionType;

    /**
     * @return Specifies the type of the key used to encrypt the data of the disk. Possible values are `EncryptionAtRestWithCustomerManagedKey` and `EncryptionAtRestWithPlatformKey`. Defaults to `EncryptionAtRestWithPlatformKey`.
     * 
     */
    public Optional<Output<String>> encryptionType() {
        return Optional.ofNullable(this.encryptionType);
    }

    /**
     * An `identity` block as defined below. Specifies the Managed Identity which should be assigned to this Elastic SAN Volume Group.
     * 
     */
    @Import(name="identity")
    private @Nullable Output<VolumeGroupIdentityArgs> identity;

    /**
     * @return An `identity` block as defined below. Specifies the Managed Identity which should be assigned to this Elastic SAN Volume Group.
     * 
     */
    public Optional<Output<VolumeGroupIdentityArgs>> identity() {
        return Optional.ofNullable(this.identity);
    }

    /**
     * Specifies the name of this Elastic SAN Volume Group. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the name of this Elastic SAN Volume Group. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * One or more `network_rule` blocks as defined below.
     * 
     */
    @Import(name="networkRules")
    private @Nullable Output<List<VolumeGroupNetworkRuleArgs>> networkRules;

    /**
     * @return One or more `network_rule` blocks as defined below.
     * 
     */
    public Optional<Output<List<VolumeGroupNetworkRuleArgs>>> networkRules() {
        return Optional.ofNullable(this.networkRules);
    }

    /**
     * Specifies the type of the storage target. The only possible value is `Iscsi`. Defaults to `Iscsi`.
     * 
     */
    @Import(name="protocolType")
    private @Nullable Output<String> protocolType;

    /**
     * @return Specifies the type of the storage target. The only possible value is `Iscsi`. Defaults to `Iscsi`.
     * 
     */
    public Optional<Output<String>> protocolType() {
        return Optional.ofNullable(this.protocolType);
    }

    private VolumeGroupState() {}

    private VolumeGroupState(VolumeGroupState $) {
        this.elasticSanId = $.elasticSanId;
        this.encryption = $.encryption;
        this.encryptionType = $.encryptionType;
        this.identity = $.identity;
        this.name = $.name;
        this.networkRules = $.networkRules;
        this.protocolType = $.protocolType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VolumeGroupState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VolumeGroupState $;

        public Builder() {
            $ = new VolumeGroupState();
        }

        public Builder(VolumeGroupState defaults) {
            $ = new VolumeGroupState(Objects.requireNonNull(defaults));
        }

        /**
         * @param elasticSanId Specifies the Elastic SAN ID within which this Elastic SAN Volume Group should exist. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder elasticSanId(@Nullable Output<String> elasticSanId) {
            $.elasticSanId = elasticSanId;
            return this;
        }

        /**
         * @param elasticSanId Specifies the Elastic SAN ID within which this Elastic SAN Volume Group should exist. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder elasticSanId(String elasticSanId) {
            return elasticSanId(Output.of(elasticSanId));
        }

        /**
         * @param encryption An `encryption` block as defined below.
         * 
         * &gt; **NOTE:** The `encryption` block can only be set when `encryption_type` is set to `EncryptionAtRestWithCustomerManagedKey`.
         * 
         * @return builder
         * 
         */
        public Builder encryption(@Nullable Output<VolumeGroupEncryptionArgs> encryption) {
            $.encryption = encryption;
            return this;
        }

        /**
         * @param encryption An `encryption` block as defined below.
         * 
         * &gt; **NOTE:** The `encryption` block can only be set when `encryption_type` is set to `EncryptionAtRestWithCustomerManagedKey`.
         * 
         * @return builder
         * 
         */
        public Builder encryption(VolumeGroupEncryptionArgs encryption) {
            return encryption(Output.of(encryption));
        }

        /**
         * @param encryptionType Specifies the type of the key used to encrypt the data of the disk. Possible values are `EncryptionAtRestWithCustomerManagedKey` and `EncryptionAtRestWithPlatformKey`. Defaults to `EncryptionAtRestWithPlatformKey`.
         * 
         * @return builder
         * 
         */
        public Builder encryptionType(@Nullable Output<String> encryptionType) {
            $.encryptionType = encryptionType;
            return this;
        }

        /**
         * @param encryptionType Specifies the type of the key used to encrypt the data of the disk. Possible values are `EncryptionAtRestWithCustomerManagedKey` and `EncryptionAtRestWithPlatformKey`. Defaults to `EncryptionAtRestWithPlatformKey`.
         * 
         * @return builder
         * 
         */
        public Builder encryptionType(String encryptionType) {
            return encryptionType(Output.of(encryptionType));
        }

        /**
         * @param identity An `identity` block as defined below. Specifies the Managed Identity which should be assigned to this Elastic SAN Volume Group.
         * 
         * @return builder
         * 
         */
        public Builder identity(@Nullable Output<VolumeGroupIdentityArgs> identity) {
            $.identity = identity;
            return this;
        }

        /**
         * @param identity An `identity` block as defined below. Specifies the Managed Identity which should be assigned to this Elastic SAN Volume Group.
         * 
         * @return builder
         * 
         */
        public Builder identity(VolumeGroupIdentityArgs identity) {
            return identity(Output.of(identity));
        }

        /**
         * @param name Specifies the name of this Elastic SAN Volume Group. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of this Elastic SAN Volume Group. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkRules One or more `network_rule` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder networkRules(@Nullable Output<List<VolumeGroupNetworkRuleArgs>> networkRules) {
            $.networkRules = networkRules;
            return this;
        }

        /**
         * @param networkRules One or more `network_rule` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder networkRules(List<VolumeGroupNetworkRuleArgs> networkRules) {
            return networkRules(Output.of(networkRules));
        }

        /**
         * @param networkRules One or more `network_rule` blocks as defined below.
         * 
         * @return builder
         * 
         */
        public Builder networkRules(VolumeGroupNetworkRuleArgs... networkRules) {
            return networkRules(List.of(networkRules));
        }

        /**
         * @param protocolType Specifies the type of the storage target. The only possible value is `Iscsi`. Defaults to `Iscsi`.
         * 
         * @return builder
         * 
         */
        public Builder protocolType(@Nullable Output<String> protocolType) {
            $.protocolType = protocolType;
            return this;
        }

        /**
         * @param protocolType Specifies the type of the storage target. The only possible value is `Iscsi`. Defaults to `Iscsi`.
         * 
         * @return builder
         * 
         */
        public Builder protocolType(String protocolType) {
            return protocolType(Output.of(protocolType));
        }

        public VolumeGroupState build() {
            return $;
        }
    }

}
