// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.eventhub.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class EventHubRetentionDescription {
    /**
     * @return Specifies the Cleanup Policy for the EventHub. Possible values are `Delete` and `Compact`.
     * 
     */
    private String cleanupPolicy;
    /**
     * @return Specifies the number of hours to retain the events for this Event Hub. The value is only used when `cleanup_policy` is `Delete`.
     * 
     */
    private @Nullable Integer retentionTimeInHours;
    /**
     * @return Specifies the number of hours to retain the tombstones markers of a compacted Event Hub. The value is only used when `cleanup_policy` is `Compact`.
     * 
     */
    private @Nullable Integer tombstoneRetentionTimeInHours;

    private EventHubRetentionDescription() {}
    /**
     * @return Specifies the Cleanup Policy for the EventHub. Possible values are `Delete` and `Compact`.
     * 
     */
    public String cleanupPolicy() {
        return this.cleanupPolicy;
    }
    /**
     * @return Specifies the number of hours to retain the events for this Event Hub. The value is only used when `cleanup_policy` is `Delete`.
     * 
     */
    public Optional<Integer> retentionTimeInHours() {
        return Optional.ofNullable(this.retentionTimeInHours);
    }
    /**
     * @return Specifies the number of hours to retain the tombstones markers of a compacted Event Hub. The value is only used when `cleanup_policy` is `Compact`.
     * 
     */
    public Optional<Integer> tombstoneRetentionTimeInHours() {
        return Optional.ofNullable(this.tombstoneRetentionTimeInHours);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EventHubRetentionDescription defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String cleanupPolicy;
        private @Nullable Integer retentionTimeInHours;
        private @Nullable Integer tombstoneRetentionTimeInHours;
        public Builder() {}
        public Builder(EventHubRetentionDescription defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cleanupPolicy = defaults.cleanupPolicy;
    	      this.retentionTimeInHours = defaults.retentionTimeInHours;
    	      this.tombstoneRetentionTimeInHours = defaults.tombstoneRetentionTimeInHours;
        }

        @CustomType.Setter
        public Builder cleanupPolicy(String cleanupPolicy) {
            if (cleanupPolicy == null) {
              throw new MissingRequiredPropertyException("EventHubRetentionDescription", "cleanupPolicy");
            }
            this.cleanupPolicy = cleanupPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder retentionTimeInHours(@Nullable Integer retentionTimeInHours) {

            this.retentionTimeInHours = retentionTimeInHours;
            return this;
        }
        @CustomType.Setter
        public Builder tombstoneRetentionTimeInHours(@Nullable Integer tombstoneRetentionTimeInHours) {

            this.tombstoneRetentionTimeInHours = tombstoneRetentionTimeInHours;
            return this;
        }
        public EventHubRetentionDescription build() {
            final var _resultValue = new EventHubRetentionDescription();
            _resultValue.cleanupPolicy = cleanupPolicy;
            _resultValue.retentionTimeInHours = retentionTimeInHours;
            _resultValue.tombstoneRetentionTimeInHours = tombstoneRetentionTimeInHours;
            return _resultValue;
        }
    }
}
