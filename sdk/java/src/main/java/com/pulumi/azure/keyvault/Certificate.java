// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.keyvault;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.keyvault.CertificateArgs;
import com.pulumi.azure.keyvault.inputs.CertificateState;
import com.pulumi.azure.keyvault.outputs.CertificateCertificate;
import com.pulumi.azure.keyvault.outputs.CertificateCertificateAttribute;
import com.pulumi.azure.keyvault.outputs.CertificateCertificatePolicy;
import com.pulumi.core.Alias;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a Key Vault Certificate.
 * 
 * ## Example Usage
 * ### Importing a PFX
 * 
 * &gt; **Note:** this example assumed the PFX file is located in the same directory at `certificate-to-import.pfx`.
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var current = Output.of(CoreFunctions.getClientConfig());
 * 
 *         var exampleResourceGroup = new ResourceGroup(&#34;exampleResourceGroup&#34;, ResourceGroupArgs.builder()        
 *             .location(&#34;West Europe&#34;)
 *             .build());
 * 
 *         var exampleKeyVault = new KeyVault(&#34;exampleKeyVault&#34;, KeyVaultArgs.builder()        
 *             .location(exampleResourceGroup.location())
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .tenantId(current.apply(getClientConfigResult -&gt; getClientConfigResult.tenantId()))
 *             .skuName(&#34;premium&#34;)
 *             .accessPolicies(KeyVaultAccessPolicyArgs.builder()
 *                 .tenantId(current.apply(getClientConfigResult -&gt; getClientConfigResult.tenantId()))
 *                 .objectId(current.apply(getClientConfigResult -&gt; getClientConfigResult.objectId()))
 *                 .certificatePermissions(                
 *                     &#34;create&#34;,
 *                     &#34;delete&#34;,
 *                     &#34;deleteissuers&#34;,
 *                     &#34;get&#34;,
 *                     &#34;getissuers&#34;,
 *                     &#34;import&#34;,
 *                     &#34;list&#34;,
 *                     &#34;listissuers&#34;,
 *                     &#34;managecontacts&#34;,
 *                     &#34;manageissuers&#34;,
 *                     &#34;setissuers&#34;,
 *                     &#34;update&#34;)
 *                 .keyPermissions(                
 *                     &#34;backup&#34;,
 *                     &#34;create&#34;,
 *                     &#34;decrypt&#34;,
 *                     &#34;delete&#34;,
 *                     &#34;encrypt&#34;,
 *                     &#34;get&#34;,
 *                     &#34;import&#34;,
 *                     &#34;list&#34;,
 *                     &#34;purge&#34;,
 *                     &#34;recover&#34;,
 *                     &#34;restore&#34;,
 *                     &#34;sign&#34;,
 *                     &#34;unwrapKey&#34;,
 *                     &#34;update&#34;,
 *                     &#34;verify&#34;,
 *                     &#34;wrapKey&#34;)
 *                 .secretPermissions(                
 *                     &#34;backup&#34;,
 *                     &#34;delete&#34;,
 *                     &#34;get&#34;,
 *                     &#34;list&#34;,
 *                     &#34;purge&#34;,
 *                     &#34;recover&#34;,
 *                     &#34;restore&#34;,
 *                     &#34;set&#34;)
 *                 .build())
 *             .build());
 * 
 *         var exampleCertificate = new Certificate(&#34;exampleCertificate&#34;, CertificateArgs.builder()        
 *             .keyVaultId(exampleKeyVault.id())
 *             .certificate(CertificateCertificateArgs.builder()
 *                 .contents(Base64.getEncoder().encodeToString(Files.readAllBytes(Paths.get(&#34;certificate-to-import.pfx&#34;))))
 *                 .password(&#34;&#34;)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Generating a new certificate
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var current = Output.of(CoreFunctions.getClientConfig());
 * 
 *         var exampleResourceGroup = new ResourceGroup(&#34;exampleResourceGroup&#34;, ResourceGroupArgs.builder()        
 *             .location(&#34;West Europe&#34;)
 *             .build());
 * 
 *         var exampleKeyVault = new KeyVault(&#34;exampleKeyVault&#34;, KeyVaultArgs.builder()        
 *             .location(exampleResourceGroup.location())
 *             .resourceGroupName(exampleResourceGroup.name())
 *             .tenantId(current.apply(getClientConfigResult -&gt; getClientConfigResult.tenantId()))
 *             .skuName(&#34;standard&#34;)
 *             .softDeleteRetentionDays(7)
 *             .accessPolicies(KeyVaultAccessPolicyArgs.builder()
 *                 .tenantId(current.apply(getClientConfigResult -&gt; getClientConfigResult.tenantId()))
 *                 .objectId(current.apply(getClientConfigResult -&gt; getClientConfigResult.objectId()))
 *                 .certificatePermissions(                
 *                     &#34;create&#34;,
 *                     &#34;delete&#34;,
 *                     &#34;deleteissuers&#34;,
 *                     &#34;get&#34;,
 *                     &#34;getissuers&#34;,
 *                     &#34;import&#34;,
 *                     &#34;list&#34;,
 *                     &#34;listissuers&#34;,
 *                     &#34;managecontacts&#34;,
 *                     &#34;manageissuers&#34;,
 *                     &#34;purge&#34;,
 *                     &#34;setissuers&#34;,
 *                     &#34;update&#34;)
 *                 .keyPermissions(                
 *                     &#34;backup&#34;,
 *                     &#34;create&#34;,
 *                     &#34;decrypt&#34;,
 *                     &#34;delete&#34;,
 *                     &#34;encrypt&#34;,
 *                     &#34;get&#34;,
 *                     &#34;import&#34;,
 *                     &#34;list&#34;,
 *                     &#34;purge&#34;,
 *                     &#34;recover&#34;,
 *                     &#34;restore&#34;,
 *                     &#34;sign&#34;,
 *                     &#34;unwrapKey&#34;,
 *                     &#34;update&#34;,
 *                     &#34;verify&#34;,
 *                     &#34;wrapKey&#34;)
 *                 .secretPermissions(                
 *                     &#34;backup&#34;,
 *                     &#34;delete&#34;,
 *                     &#34;get&#34;,
 *                     &#34;list&#34;,
 *                     &#34;purge&#34;,
 *                     &#34;recover&#34;,
 *                     &#34;restore&#34;,
 *                     &#34;set&#34;)
 *                 .build())
 *             .build());
 * 
 *         var exampleCertificate = new Certificate(&#34;exampleCertificate&#34;, CertificateArgs.builder()        
 *             .keyVaultId(exampleKeyVault.id())
 *             .certificatePolicy(CertificateCertificatePolicyArgs.builder()
 *                 .issuerParameters(CertificateCertificatePolicyIssuerParametersArgs.builder()
 *                     .name(&#34;Self&#34;)
 *                     .build())
 *                 .keyProperties(CertificateCertificatePolicyKeyPropertiesArgs.builder()
 *                     .exportable(true)
 *                     .keySize(2048)
 *                     .keyType(&#34;RSA&#34;)
 *                     .reuseKey(true)
 *                     .build())
 *                 .lifetimeActions(CertificateCertificatePolicyLifetimeActionArgs.builder()
 *                     .action(CertificateCertificatePolicyLifetimeActionActionArgs.builder()
 *                         .actionType(&#34;AutoRenew&#34;)
 *                         .build())
 *                     .trigger(CertificateCertificatePolicyLifetimeActionTriggerArgs.builder()
 *                         .daysBeforeExpiry(30)
 *                         .build())
 *                     .build())
 *                 .secretProperties(CertificateCertificatePolicySecretPropertiesArgs.builder()
 *                     .contentType(&#34;application/x-pkcs12&#34;)
 *                     .build())
 *                 .x509CertificateProperties(CertificateCertificatePolicyX509CertificatePropertiesArgs.builder()
 *                     .extendedKeyUsages(&#34;1.3.6.1.5.5.7.3.1&#34;)
 *                     .keyUsages(                    
 *                         &#34;cRLSign&#34;,
 *                         &#34;dataEncipherment&#34;,
 *                         &#34;digitalSignature&#34;,
 *                         &#34;keyAgreement&#34;,
 *                         &#34;keyCertSign&#34;,
 *                         &#34;keyEncipherment&#34;)
 *                     .subjectAlternativeNames(CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesArgs.builder()
 *                         .dnsNames(                        
 *                             &#34;internal.contoso.com&#34;,
 *                             &#34;domain.hello.world&#34;)
 *                         .build())
 *                     .subject(&#34;CN=hello-world&#34;)
 *                     .validityInMonths(12)
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Key Vault Certificates can be imported using the `resource id`, e.g.
 * 
 * ```sh
 *  $ pulumi import azure:keyvault/certificate:Certificate example &#34;https://example-keyvault.vault.azure.net/certificates/example/fdf067c93bbb4b22bff4d8b7a9a56217&#34;
 * ```
 * 
 */
@ResourceType(type="azure:keyvault/certificate:Certificate")
public class Certificate extends com.pulumi.resources.CustomResource {
    /**
     * A `certificate` block as defined below, used to Import an existing certificate.
     * 
     */
    @Export(name="certificate", type=CertificateCertificate.class, parameters={})
    private Output</* @Nullable */ CertificateCertificate> certificate;

    /**
     * @return A `certificate` block as defined below, used to Import an existing certificate.
     * 
     */
    public Output<Optional<CertificateCertificate>> certificate() {
        return Codegen.optional(this.certificate);
    }
    /**
     * A `certificate_attribute` block as defined below.
     * 
     */
    @Export(name="certificateAttributes", type=List.class, parameters={CertificateCertificateAttribute.class})
    private Output<List<CertificateCertificateAttribute>> certificateAttributes;

    /**
     * @return A `certificate_attribute` block as defined below.
     * 
     */
    public Output<List<CertificateCertificateAttribute>> certificateAttributes() {
        return this.certificateAttributes;
    }
    /**
     * The raw Key Vault Certificate data represented as a hexadecimal string.
     * 
     */
    @Export(name="certificateData", type=String.class, parameters={})
    private Output<String> certificateData;

    /**
     * @return The raw Key Vault Certificate data represented as a hexadecimal string.
     * 
     */
    public Output<String> certificateData() {
        return this.certificateData;
    }
    /**
     * The Base64 encoded Key Vault Certificate data.
     * 
     */
    @Export(name="certificateDataBase64", type=String.class, parameters={})
    private Output<String> certificateDataBase64;

    /**
     * @return The Base64 encoded Key Vault Certificate data.
     * 
     */
    public Output<String> certificateDataBase64() {
        return this.certificateDataBase64;
    }
    /**
     * A `certificate_policy` block as defined below.
     * 
     */
    @Export(name="certificatePolicy", type=CertificateCertificatePolicy.class, parameters={})
    private Output<CertificateCertificatePolicy> certificatePolicy;

    /**
     * @return A `certificate_policy` block as defined below.
     * 
     */
    public Output<CertificateCertificatePolicy> certificatePolicy() {
        return this.certificatePolicy;
    }
    /**
     * The ID of the Key Vault where the Certificate should be created.
     * 
     */
    @Export(name="keyVaultId", type=String.class, parameters={})
    private Output<String> keyVaultId;

    /**
     * @return The ID of the Key Vault where the Certificate should be created.
     * 
     */
    public Output<String> keyVaultId() {
        return this.keyVaultId;
    }
    /**
     * Specifies the name of the Key Vault Certificate. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Specifies the name of the Key Vault Certificate. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the associated Key Vault Secret.
     * 
     */
    @Export(name="secretId", type=String.class, parameters={})
    private Output<String> secretId;

    /**
     * @return The ID of the associated Key Vault Secret.
     * 
     */
    public Output<String> secretId() {
        return this.secretId;
    }
    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Export(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * The X509 Thumbprint of the Key Vault Certificate represented as a hexadecimal string.
     * 
     */
    @Export(name="thumbprint", type=String.class, parameters={})
    private Output<String> thumbprint;

    /**
     * @return The X509 Thumbprint of the Key Vault Certificate represented as a hexadecimal string.
     * 
     */
    public Output<String> thumbprint() {
        return this.thumbprint;
    }
    /**
     * The current version of the Key Vault Certificate.
     * 
     */
    @Export(name="version", type=String.class, parameters={})
    private Output<String> version;

    /**
     * @return The current version of the Key Vault Certificate.
     * 
     */
    public Output<String> version() {
        return this.version;
    }
    /**
     * The Base ID of the Key Vault Certificate.
     * 
     */
    @Export(name="versionlessId", type=String.class, parameters={})
    private Output<String> versionlessId;

    /**
     * @return The Base ID of the Key Vault Certificate.
     * 
     */
    public Output<String> versionlessId() {
        return this.versionlessId;
    }
    /**
     * The Base ID of the Key Vault Secret.
     * 
     */
    @Export(name="versionlessSecretId", type=String.class, parameters={})
    private Output<String> versionlessSecretId;

    /**
     * @return The Base ID of the Key Vault Secret.
     * 
     */
    public Output<String> versionlessSecretId() {
        return this.versionlessSecretId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Certificate(String name) {
        this(name, CertificateArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Certificate(String name, CertificateArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Certificate(String name, CertificateArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:keyvault/certificate:Certificate", name, args == null ? CertificateArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Certificate(String name, Output<String> id, @Nullable CertificateState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:keyvault/certificate:Certificate", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .aliases(List.of(
                Output.of(Alias.builder().type("azure:keyvault/certifiate:Certifiate").build())
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Certificate get(String name, Output<String> id, @Nullable CertificateState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Certificate(name, id, state, options);
    }
}
