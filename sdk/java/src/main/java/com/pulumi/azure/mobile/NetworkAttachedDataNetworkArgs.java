// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.mobile;

import com.pulumi.azure.mobile.inputs.NetworkAttachedDataNetworkNetworkAddressPortTranslationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkAttachedDataNetworkArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworkAttachedDataNetworkArgs Empty = new NetworkAttachedDataNetworkArgs();

    /**
     * Specifies the DNS servers to signal to UEs to use for this attached data network.
     * 
     */
    @Import(name="dnsAddresses", required=true)
    private Output<List<String>> dnsAddresses;

    /**
     * @return Specifies the DNS servers to signal to UEs to use for this attached data network.
     * 
     */
    public Output<List<String>> dnsAddresses() {
        return this.dnsAddresses;
    }

    /**
     * Specifies the Azure Region where the Mobile Network Attached Data Network should exist. Changing this forces a new Mobile Network Attached Data Network to be created.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Specifies the Azure Region where the Mobile Network Attached Data Network should exist. Changing this forces a new Mobile Network Attached Data Network to be created.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Specifies the name of the `azure.mobile.NetworkDataNetwork` which the Attached Data Network belongs to, Changing this forces a new Mobile Network Attached Data Network to be created.
     * 
     */
    @Import(name="mobileNetworkDataNetworkName", required=true)
    private Output<String> mobileNetworkDataNetworkName;

    /**
     * @return Specifies the name of the `azure.mobile.NetworkDataNetwork` which the Attached Data Network belongs to, Changing this forces a new Mobile Network Attached Data Network to be created.
     * 
     */
    public Output<String> mobileNetworkDataNetworkName() {
        return this.mobileNetworkDataNetworkName;
    }

    /**
     * Specifies the ID of the `azure.mobile.NetworkPacketCoreDataPlane` which the Mobile Network Attached Data Network belongs to. Changing this forces a new Mobile Network Attached Data Network to be created.
     * 
     */
    @Import(name="mobileNetworkPacketCoreDataPlaneId", required=true)
    private Output<String> mobileNetworkPacketCoreDataPlaneId;

    /**
     * @return Specifies the ID of the `azure.mobile.NetworkPacketCoreDataPlane` which the Mobile Network Attached Data Network belongs to. Changing this forces a new Mobile Network Attached Data Network to be created.
     * 
     */
    public Output<String> mobileNetworkPacketCoreDataPlaneId() {
        return this.mobileNetworkPacketCoreDataPlaneId;
    }

    /**
     * A `network_address_port_translation` block as defined below.
     * 
     */
    @Import(name="networkAddressPortTranslation")
    private @Nullable Output<NetworkAttachedDataNetworkNetworkAddressPortTranslationArgs> networkAddressPortTranslation;

    /**
     * @return A `network_address_port_translation` block as defined below.
     * 
     */
    public Optional<Output<NetworkAttachedDataNetworkNetworkAddressPortTranslationArgs>> networkAddressPortTranslation() {
        return Optional.ofNullable(this.networkAddressPortTranslation);
    }

    /**
     * A mapping of tags which should be assigned to the Mobile Network Attached Data Network.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags which should be assigned to the Mobile Network Attached Data Network.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Specifies the user equipment (UE) address pool prefixes for the attached data network from which the packet core instance will dynamically assign IP addresses to UEs. The packet core instance assigns an IP address to a UE when the UE sets up a PDU session. At least one of `user_equipment_address_pool_prefixes` and `user_equipment_static_address_pool_prefix`. If you define both, they must be of the same size.
     * 
     */
    @Import(name="userEquipmentAddressPoolPrefixes")
    private @Nullable Output<List<String>> userEquipmentAddressPoolPrefixes;

    /**
     * @return Specifies the user equipment (UE) address pool prefixes for the attached data network from which the packet core instance will dynamically assign IP addresses to UEs. The packet core instance assigns an IP address to a UE when the UE sets up a PDU session. At least one of `user_equipment_address_pool_prefixes` and `user_equipment_static_address_pool_prefix`. If you define both, they must be of the same size.
     * 
     */
    public Optional<Output<List<String>>> userEquipmentAddressPoolPrefixes() {
        return Optional.ofNullable(this.userEquipmentAddressPoolPrefixes);
    }

    /**
     * Specifies the user equipment (UE) address pool prefixes for the attached data network from which the packet core instance will assign static IP addresses to UEs. The packet core instance assigns an IP address to a UE when the UE sets up a PDU session. The static IP address for a specific UE is set in StaticIPConfiguration on the corresponding SIM resource. At least one of `user_equipment_address_pool_prefix` and `user_equipment_static_address_pool_prefixes`. If you define both, they must be of the same size.
     * 
     * &gt; **Note:** At least one of `user_equipment_address_pool_prefixes` and `user_equipment_static_address_pool_prefixes` must be specified.
     * 
     */
    @Import(name="userEquipmentStaticAddressPoolPrefixes")
    private @Nullable Output<List<String>> userEquipmentStaticAddressPoolPrefixes;

    /**
     * @return Specifies the user equipment (UE) address pool prefixes for the attached data network from which the packet core instance will assign static IP addresses to UEs. The packet core instance assigns an IP address to a UE when the UE sets up a PDU session. The static IP address for a specific UE is set in StaticIPConfiguration on the corresponding SIM resource. At least one of `user_equipment_address_pool_prefix` and `user_equipment_static_address_pool_prefixes`. If you define both, they must be of the same size.
     * 
     * &gt; **Note:** At least one of `user_equipment_address_pool_prefixes` and `user_equipment_static_address_pool_prefixes` must be specified.
     * 
     */
    public Optional<Output<List<String>>> userEquipmentStaticAddressPoolPrefixes() {
        return Optional.ofNullable(this.userEquipmentStaticAddressPoolPrefixes);
    }

    /**
     * The IPv4 address for the user data plane interface. This should match one of the interfaces configured on your Azure Stack Edge device.
     * 
     */
    @Import(name="userPlaneAccessIpv4Address")
    private @Nullable Output<String> userPlaneAccessIpv4Address;

    /**
     * @return The IPv4 address for the user data plane interface. This should match one of the interfaces configured on your Azure Stack Edge device.
     * 
     */
    public Optional<Output<String>> userPlaneAccessIpv4Address() {
        return Optional.ofNullable(this.userPlaneAccessIpv4Address);
    }

    /**
     * The default IPv4 gateway for the user data plane interface. This should match one of the interfaces configured on your Azure Stack Edge device.
     * 
     */
    @Import(name="userPlaneAccessIpv4Gateway")
    private @Nullable Output<String> userPlaneAccessIpv4Gateway;

    /**
     * @return The default IPv4 gateway for the user data plane interface. This should match one of the interfaces configured on your Azure Stack Edge device.
     * 
     */
    public Optional<Output<String>> userPlaneAccessIpv4Gateway() {
        return Optional.ofNullable(this.userPlaneAccessIpv4Gateway);
    }

    /**
     * The IPv4 subnet for the user data plane interface. This should match one of the interfaces configured on your Azure Stack Edge device.
     * 
     */
    @Import(name="userPlaneAccessIpv4Subnet")
    private @Nullable Output<String> userPlaneAccessIpv4Subnet;

    /**
     * @return The IPv4 subnet for the user data plane interface. This should match one of the interfaces configured on your Azure Stack Edge device.
     * 
     */
    public Optional<Output<String>> userPlaneAccessIpv4Subnet() {
        return Optional.ofNullable(this.userPlaneAccessIpv4Subnet);
    }

    /**
     * Specifies the logical name for the user data plane interface. This should match one of the interfaces configured on your Azure Stack Edge device.
     * 
     */
    @Import(name="userPlaneAccessName")
    private @Nullable Output<String> userPlaneAccessName;

    /**
     * @return Specifies the logical name for the user data plane interface. This should match one of the interfaces configured on your Azure Stack Edge device.
     * 
     */
    public Optional<Output<String>> userPlaneAccessName() {
        return Optional.ofNullable(this.userPlaneAccessName);
    }

    private NetworkAttachedDataNetworkArgs() {}

    private NetworkAttachedDataNetworkArgs(NetworkAttachedDataNetworkArgs $) {
        this.dnsAddresses = $.dnsAddresses;
        this.location = $.location;
        this.mobileNetworkDataNetworkName = $.mobileNetworkDataNetworkName;
        this.mobileNetworkPacketCoreDataPlaneId = $.mobileNetworkPacketCoreDataPlaneId;
        this.networkAddressPortTranslation = $.networkAddressPortTranslation;
        this.tags = $.tags;
        this.userEquipmentAddressPoolPrefixes = $.userEquipmentAddressPoolPrefixes;
        this.userEquipmentStaticAddressPoolPrefixes = $.userEquipmentStaticAddressPoolPrefixes;
        this.userPlaneAccessIpv4Address = $.userPlaneAccessIpv4Address;
        this.userPlaneAccessIpv4Gateway = $.userPlaneAccessIpv4Gateway;
        this.userPlaneAccessIpv4Subnet = $.userPlaneAccessIpv4Subnet;
        this.userPlaneAccessName = $.userPlaneAccessName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkAttachedDataNetworkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkAttachedDataNetworkArgs $;

        public Builder() {
            $ = new NetworkAttachedDataNetworkArgs();
        }

        public Builder(NetworkAttachedDataNetworkArgs defaults) {
            $ = new NetworkAttachedDataNetworkArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dnsAddresses Specifies the DNS servers to signal to UEs to use for this attached data network.
         * 
         * @return builder
         * 
         */
        public Builder dnsAddresses(Output<List<String>> dnsAddresses) {
            $.dnsAddresses = dnsAddresses;
            return this;
        }

        /**
         * @param dnsAddresses Specifies the DNS servers to signal to UEs to use for this attached data network.
         * 
         * @return builder
         * 
         */
        public Builder dnsAddresses(List<String> dnsAddresses) {
            return dnsAddresses(Output.of(dnsAddresses));
        }

        /**
         * @param dnsAddresses Specifies the DNS servers to signal to UEs to use for this attached data network.
         * 
         * @return builder
         * 
         */
        public Builder dnsAddresses(String... dnsAddresses) {
            return dnsAddresses(List.of(dnsAddresses));
        }

        /**
         * @param location Specifies the Azure Region where the Mobile Network Attached Data Network should exist. Changing this forces a new Mobile Network Attached Data Network to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Specifies the Azure Region where the Mobile Network Attached Data Network should exist. Changing this forces a new Mobile Network Attached Data Network to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param mobileNetworkDataNetworkName Specifies the name of the `azure.mobile.NetworkDataNetwork` which the Attached Data Network belongs to, Changing this forces a new Mobile Network Attached Data Network to be created.
         * 
         * @return builder
         * 
         */
        public Builder mobileNetworkDataNetworkName(Output<String> mobileNetworkDataNetworkName) {
            $.mobileNetworkDataNetworkName = mobileNetworkDataNetworkName;
            return this;
        }

        /**
         * @param mobileNetworkDataNetworkName Specifies the name of the `azure.mobile.NetworkDataNetwork` which the Attached Data Network belongs to, Changing this forces a new Mobile Network Attached Data Network to be created.
         * 
         * @return builder
         * 
         */
        public Builder mobileNetworkDataNetworkName(String mobileNetworkDataNetworkName) {
            return mobileNetworkDataNetworkName(Output.of(mobileNetworkDataNetworkName));
        }

        /**
         * @param mobileNetworkPacketCoreDataPlaneId Specifies the ID of the `azure.mobile.NetworkPacketCoreDataPlane` which the Mobile Network Attached Data Network belongs to. Changing this forces a new Mobile Network Attached Data Network to be created.
         * 
         * @return builder
         * 
         */
        public Builder mobileNetworkPacketCoreDataPlaneId(Output<String> mobileNetworkPacketCoreDataPlaneId) {
            $.mobileNetworkPacketCoreDataPlaneId = mobileNetworkPacketCoreDataPlaneId;
            return this;
        }

        /**
         * @param mobileNetworkPacketCoreDataPlaneId Specifies the ID of the `azure.mobile.NetworkPacketCoreDataPlane` which the Mobile Network Attached Data Network belongs to. Changing this forces a new Mobile Network Attached Data Network to be created.
         * 
         * @return builder
         * 
         */
        public Builder mobileNetworkPacketCoreDataPlaneId(String mobileNetworkPacketCoreDataPlaneId) {
            return mobileNetworkPacketCoreDataPlaneId(Output.of(mobileNetworkPacketCoreDataPlaneId));
        }

        /**
         * @param networkAddressPortTranslation A `network_address_port_translation` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder networkAddressPortTranslation(@Nullable Output<NetworkAttachedDataNetworkNetworkAddressPortTranslationArgs> networkAddressPortTranslation) {
            $.networkAddressPortTranslation = networkAddressPortTranslation;
            return this;
        }

        /**
         * @param networkAddressPortTranslation A `network_address_port_translation` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder networkAddressPortTranslation(NetworkAttachedDataNetworkNetworkAddressPortTranslationArgs networkAddressPortTranslation) {
            return networkAddressPortTranslation(Output.of(networkAddressPortTranslation));
        }

        /**
         * @param tags A mapping of tags which should be assigned to the Mobile Network Attached Data Network.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags which should be assigned to the Mobile Network Attached Data Network.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param userEquipmentAddressPoolPrefixes Specifies the user equipment (UE) address pool prefixes for the attached data network from which the packet core instance will dynamically assign IP addresses to UEs. The packet core instance assigns an IP address to a UE when the UE sets up a PDU session. At least one of `user_equipment_address_pool_prefixes` and `user_equipment_static_address_pool_prefix`. If you define both, they must be of the same size.
         * 
         * @return builder
         * 
         */
        public Builder userEquipmentAddressPoolPrefixes(@Nullable Output<List<String>> userEquipmentAddressPoolPrefixes) {
            $.userEquipmentAddressPoolPrefixes = userEquipmentAddressPoolPrefixes;
            return this;
        }

        /**
         * @param userEquipmentAddressPoolPrefixes Specifies the user equipment (UE) address pool prefixes for the attached data network from which the packet core instance will dynamically assign IP addresses to UEs. The packet core instance assigns an IP address to a UE when the UE sets up a PDU session. At least one of `user_equipment_address_pool_prefixes` and `user_equipment_static_address_pool_prefix`. If you define both, they must be of the same size.
         * 
         * @return builder
         * 
         */
        public Builder userEquipmentAddressPoolPrefixes(List<String> userEquipmentAddressPoolPrefixes) {
            return userEquipmentAddressPoolPrefixes(Output.of(userEquipmentAddressPoolPrefixes));
        }

        /**
         * @param userEquipmentAddressPoolPrefixes Specifies the user equipment (UE) address pool prefixes for the attached data network from which the packet core instance will dynamically assign IP addresses to UEs. The packet core instance assigns an IP address to a UE when the UE sets up a PDU session. At least one of `user_equipment_address_pool_prefixes` and `user_equipment_static_address_pool_prefix`. If you define both, they must be of the same size.
         * 
         * @return builder
         * 
         */
        public Builder userEquipmentAddressPoolPrefixes(String... userEquipmentAddressPoolPrefixes) {
            return userEquipmentAddressPoolPrefixes(List.of(userEquipmentAddressPoolPrefixes));
        }

        /**
         * @param userEquipmentStaticAddressPoolPrefixes Specifies the user equipment (UE) address pool prefixes for the attached data network from which the packet core instance will assign static IP addresses to UEs. The packet core instance assigns an IP address to a UE when the UE sets up a PDU session. The static IP address for a specific UE is set in StaticIPConfiguration on the corresponding SIM resource. At least one of `user_equipment_address_pool_prefix` and `user_equipment_static_address_pool_prefixes`. If you define both, they must be of the same size.
         * 
         * &gt; **Note:** At least one of `user_equipment_address_pool_prefixes` and `user_equipment_static_address_pool_prefixes` must be specified.
         * 
         * @return builder
         * 
         */
        public Builder userEquipmentStaticAddressPoolPrefixes(@Nullable Output<List<String>> userEquipmentStaticAddressPoolPrefixes) {
            $.userEquipmentStaticAddressPoolPrefixes = userEquipmentStaticAddressPoolPrefixes;
            return this;
        }

        /**
         * @param userEquipmentStaticAddressPoolPrefixes Specifies the user equipment (UE) address pool prefixes for the attached data network from which the packet core instance will assign static IP addresses to UEs. The packet core instance assigns an IP address to a UE when the UE sets up a PDU session. The static IP address for a specific UE is set in StaticIPConfiguration on the corresponding SIM resource. At least one of `user_equipment_address_pool_prefix` and `user_equipment_static_address_pool_prefixes`. If you define both, they must be of the same size.
         * 
         * &gt; **Note:** At least one of `user_equipment_address_pool_prefixes` and `user_equipment_static_address_pool_prefixes` must be specified.
         * 
         * @return builder
         * 
         */
        public Builder userEquipmentStaticAddressPoolPrefixes(List<String> userEquipmentStaticAddressPoolPrefixes) {
            return userEquipmentStaticAddressPoolPrefixes(Output.of(userEquipmentStaticAddressPoolPrefixes));
        }

        /**
         * @param userEquipmentStaticAddressPoolPrefixes Specifies the user equipment (UE) address pool prefixes for the attached data network from which the packet core instance will assign static IP addresses to UEs. The packet core instance assigns an IP address to a UE when the UE sets up a PDU session. The static IP address for a specific UE is set in StaticIPConfiguration on the corresponding SIM resource. At least one of `user_equipment_address_pool_prefix` and `user_equipment_static_address_pool_prefixes`. If you define both, they must be of the same size.
         * 
         * &gt; **Note:** At least one of `user_equipment_address_pool_prefixes` and `user_equipment_static_address_pool_prefixes` must be specified.
         * 
         * @return builder
         * 
         */
        public Builder userEquipmentStaticAddressPoolPrefixes(String... userEquipmentStaticAddressPoolPrefixes) {
            return userEquipmentStaticAddressPoolPrefixes(List.of(userEquipmentStaticAddressPoolPrefixes));
        }

        /**
         * @param userPlaneAccessIpv4Address The IPv4 address for the user data plane interface. This should match one of the interfaces configured on your Azure Stack Edge device.
         * 
         * @return builder
         * 
         */
        public Builder userPlaneAccessIpv4Address(@Nullable Output<String> userPlaneAccessIpv4Address) {
            $.userPlaneAccessIpv4Address = userPlaneAccessIpv4Address;
            return this;
        }

        /**
         * @param userPlaneAccessIpv4Address The IPv4 address for the user data plane interface. This should match one of the interfaces configured on your Azure Stack Edge device.
         * 
         * @return builder
         * 
         */
        public Builder userPlaneAccessIpv4Address(String userPlaneAccessIpv4Address) {
            return userPlaneAccessIpv4Address(Output.of(userPlaneAccessIpv4Address));
        }

        /**
         * @param userPlaneAccessIpv4Gateway The default IPv4 gateway for the user data plane interface. This should match one of the interfaces configured on your Azure Stack Edge device.
         * 
         * @return builder
         * 
         */
        public Builder userPlaneAccessIpv4Gateway(@Nullable Output<String> userPlaneAccessIpv4Gateway) {
            $.userPlaneAccessIpv4Gateway = userPlaneAccessIpv4Gateway;
            return this;
        }

        /**
         * @param userPlaneAccessIpv4Gateway The default IPv4 gateway for the user data plane interface. This should match one of the interfaces configured on your Azure Stack Edge device.
         * 
         * @return builder
         * 
         */
        public Builder userPlaneAccessIpv4Gateway(String userPlaneAccessIpv4Gateway) {
            return userPlaneAccessIpv4Gateway(Output.of(userPlaneAccessIpv4Gateway));
        }

        /**
         * @param userPlaneAccessIpv4Subnet The IPv4 subnet for the user data plane interface. This should match one of the interfaces configured on your Azure Stack Edge device.
         * 
         * @return builder
         * 
         */
        public Builder userPlaneAccessIpv4Subnet(@Nullable Output<String> userPlaneAccessIpv4Subnet) {
            $.userPlaneAccessIpv4Subnet = userPlaneAccessIpv4Subnet;
            return this;
        }

        /**
         * @param userPlaneAccessIpv4Subnet The IPv4 subnet for the user data plane interface. This should match one of the interfaces configured on your Azure Stack Edge device.
         * 
         * @return builder
         * 
         */
        public Builder userPlaneAccessIpv4Subnet(String userPlaneAccessIpv4Subnet) {
            return userPlaneAccessIpv4Subnet(Output.of(userPlaneAccessIpv4Subnet));
        }

        /**
         * @param userPlaneAccessName Specifies the logical name for the user data plane interface. This should match one of the interfaces configured on your Azure Stack Edge device.
         * 
         * @return builder
         * 
         */
        public Builder userPlaneAccessName(@Nullable Output<String> userPlaneAccessName) {
            $.userPlaneAccessName = userPlaneAccessName;
            return this;
        }

        /**
         * @param userPlaneAccessName Specifies the logical name for the user data plane interface. This should match one of the interfaces configured on your Azure Stack Edge device.
         * 
         * @return builder
         * 
         */
        public Builder userPlaneAccessName(String userPlaneAccessName) {
            return userPlaneAccessName(Output.of(userPlaneAccessName));
        }

        public NetworkAttachedDataNetworkArgs build() {
            $.dnsAddresses = Objects.requireNonNull($.dnsAddresses, "expected parameter 'dnsAddresses' to be non-null");
            $.mobileNetworkDataNetworkName = Objects.requireNonNull($.mobileNetworkDataNetworkName, "expected parameter 'mobileNetworkDataNetworkName' to be non-null");
            $.mobileNetworkPacketCoreDataPlaneId = Objects.requireNonNull($.mobileNetworkPacketCoreDataPlaneId, "expected parameter 'mobileNetworkPacketCoreDataPlaneId' to be non-null");
            return $;
        }
    }

}
