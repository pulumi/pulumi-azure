// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.devcenter.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class CatalogCatalogGithubArgs extends com.pulumi.resources.ResourceArgs {

    public static final CatalogCatalogGithubArgs Empty = new CatalogCatalogGithubArgs();

    /**
     * The Git branch of the Dev Center Catalog.
     * 
     */
    @Import(name="branch", required=true)
    private Output<String> branch;

    /**
     * @return The Git branch of the Dev Center Catalog.
     * 
     */
    public Output<String> branch() {
        return this.branch;
    }

    /**
     * A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
     * 
     */
    @Import(name="keyVaultKeyUrl", required=true)
    private Output<String> keyVaultKeyUrl;

    /**
     * @return A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
     * 
     */
    public Output<String> keyVaultKeyUrl() {
        return this.keyVaultKeyUrl;
    }

    /**
     * The folder where the catalog items can be found inside the repository.
     * 
     */
    @Import(name="path", required=true)
    private Output<String> path;

    /**
     * @return The folder where the catalog items can be found inside the repository.
     * 
     */
    public Output<String> path() {
        return this.path;
    }

    /**
     * The Git URI of the Dev Center Catalog.
     * 
     */
    @Import(name="uri", required=true)
    private Output<String> uri;

    /**
     * @return The Git URI of the Dev Center Catalog.
     * 
     */
    public Output<String> uri() {
        return this.uri;
    }

    private CatalogCatalogGithubArgs() {}

    private CatalogCatalogGithubArgs(CatalogCatalogGithubArgs $) {
        this.branch = $.branch;
        this.keyVaultKeyUrl = $.keyVaultKeyUrl;
        this.path = $.path;
        this.uri = $.uri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CatalogCatalogGithubArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CatalogCatalogGithubArgs $;

        public Builder() {
            $ = new CatalogCatalogGithubArgs();
        }

        public Builder(CatalogCatalogGithubArgs defaults) {
            $ = new CatalogCatalogGithubArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param branch The Git branch of the Dev Center Catalog.
         * 
         * @return builder
         * 
         */
        public Builder branch(Output<String> branch) {
            $.branch = branch;
            return this;
        }

        /**
         * @param branch The Git branch of the Dev Center Catalog.
         * 
         * @return builder
         * 
         */
        public Builder branch(String branch) {
            return branch(Output.of(branch));
        }

        /**
         * @param keyVaultKeyUrl A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultKeyUrl(Output<String> keyVaultKeyUrl) {
            $.keyVaultKeyUrl = keyVaultKeyUrl;
            return this;
        }

        /**
         * @param keyVaultKeyUrl A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultKeyUrl(String keyVaultKeyUrl) {
            return keyVaultKeyUrl(Output.of(keyVaultKeyUrl));
        }

        /**
         * @param path The folder where the catalog items can be found inside the repository.
         * 
         * @return builder
         * 
         */
        public Builder path(Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path The folder where the catalog items can be found inside the repository.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param uri The Git URI of the Dev Center Catalog.
         * 
         * @return builder
         * 
         */
        public Builder uri(Output<String> uri) {
            $.uri = uri;
            return this;
        }

        /**
         * @param uri The Git URI of the Dev Center Catalog.
         * 
         * @return builder
         * 
         */
        public Builder uri(String uri) {
            return uri(Output.of(uri));
        }

        public CatalogCatalogGithubArgs build() {
            if ($.branch == null) {
                throw new MissingRequiredPropertyException("CatalogCatalogGithubArgs", "branch");
            }
            if ($.keyVaultKeyUrl == null) {
                throw new MissingRequiredPropertyException("CatalogCatalogGithubArgs", "keyVaultKeyUrl");
            }
            if ($.path == null) {
                throw new MissingRequiredPropertyException("CatalogCatalogGithubArgs", "path");
            }
            if ($.uri == null) {
                throw new MissingRequiredPropertyException("CatalogCatalogGithubArgs", "uri");
            }
            return $;
        }
    }

}
