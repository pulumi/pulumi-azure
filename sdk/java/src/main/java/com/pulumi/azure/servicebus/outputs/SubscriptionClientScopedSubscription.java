// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.servicebus.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SubscriptionClientScopedSubscription {
    /**
     * @return Specifies the Client ID of the application that created the client-scoped subscription.
     * 
     */
    private final @Nullable String clientId;
    /**
     * @return Whether the client scoped subscription is durable. This property can only be controlled from the application side.
     * 
     */
    private final @Nullable Boolean isClientScopedSubscriptionDurable;
    /**
     * @return Whether the client scoped subscription is shareable. Defaults to `true`
     * 
     */
    private final @Nullable Boolean isClientScopedSubscriptionShareable;

    @CustomType.Constructor
    private SubscriptionClientScopedSubscription(
        @CustomType.Parameter("clientId") @Nullable String clientId,
        @CustomType.Parameter("isClientScopedSubscriptionDurable") @Nullable Boolean isClientScopedSubscriptionDurable,
        @CustomType.Parameter("isClientScopedSubscriptionShareable") @Nullable Boolean isClientScopedSubscriptionShareable) {
        this.clientId = clientId;
        this.isClientScopedSubscriptionDurable = isClientScopedSubscriptionDurable;
        this.isClientScopedSubscriptionShareable = isClientScopedSubscriptionShareable;
    }

    /**
     * @return Specifies the Client ID of the application that created the client-scoped subscription.
     * 
     */
    public Optional<String> clientId() {
        return Optional.ofNullable(this.clientId);
    }
    /**
     * @return Whether the client scoped subscription is durable. This property can only be controlled from the application side.
     * 
     */
    public Optional<Boolean> isClientScopedSubscriptionDurable() {
        return Optional.ofNullable(this.isClientScopedSubscriptionDurable);
    }
    /**
     * @return Whether the client scoped subscription is shareable. Defaults to `true`
     * 
     */
    public Optional<Boolean> isClientScopedSubscriptionShareable() {
        return Optional.ofNullable(this.isClientScopedSubscriptionShareable);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SubscriptionClientScopedSubscription defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String clientId;
        private @Nullable Boolean isClientScopedSubscriptionDurable;
        private @Nullable Boolean isClientScopedSubscriptionShareable;

        public Builder() {
    	      // Empty
        }

        public Builder(SubscriptionClientScopedSubscription defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientId = defaults.clientId;
    	      this.isClientScopedSubscriptionDurable = defaults.isClientScopedSubscriptionDurable;
    	      this.isClientScopedSubscriptionShareable = defaults.isClientScopedSubscriptionShareable;
        }

        public Builder clientId(@Nullable String clientId) {
            this.clientId = clientId;
            return this;
        }
        public Builder isClientScopedSubscriptionDurable(@Nullable Boolean isClientScopedSubscriptionDurable) {
            this.isClientScopedSubscriptionDurable = isClientScopedSubscriptionDurable;
            return this;
        }
        public Builder isClientScopedSubscriptionShareable(@Nullable Boolean isClientScopedSubscriptionShareable) {
            this.isClientScopedSubscriptionShareable = isClientScopedSubscriptionShareable;
            return this;
        }        public SubscriptionClientScopedSubscription build() {
            return new SubscriptionClientScopedSubscription(clientId, isClientScopedSubscriptionDurable, isClientScopedSubscriptionShareable);
        }
    }
}
