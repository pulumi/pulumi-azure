// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.apimanagement.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceCertificateArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceCertificateArgs Empty = new ServiceCertificateArgs();

    /**
     * The password for the certificate.
     * 
     */
    @Import(name="certificatePassword")
    private @Nullable Output<String> certificatePassword;

    /**
     * @return The password for the certificate.
     * 
     */
    public Optional<Output<String>> certificatePassword() {
        return Optional.ofNullable(this.certificatePassword);
    }

    /**
     * The Base64 Encoded PFX or Base64 Encoded X.509 Certificate.
     * 
     */
    @Import(name="encodedCertificate", required=true)
    private Output<String> encodedCertificate;

    /**
     * @return The Base64 Encoded PFX or Base64 Encoded X.509 Certificate.
     * 
     */
    public Output<String> encodedCertificate() {
        return this.encodedCertificate;
    }

    /**
     * The expiration date of the certificate in RFC3339 format: `2000-01-02T03:04:05Z`.
     * 
     */
    @Import(name="expiry")
    private @Nullable Output<String> expiry;

    /**
     * @return The expiration date of the certificate in RFC3339 format: `2000-01-02T03:04:05Z`.
     * 
     */
    public Optional<Output<String>> expiry() {
        return Optional.ofNullable(this.expiry);
    }

    /**
     * The name of the Certificate Store where this certificate should be stored. Possible values are `CertificateAuthority` and `Root`.
     * 
     */
    @Import(name="storeName", required=true)
    private Output<String> storeName;

    /**
     * @return The name of the Certificate Store where this certificate should be stored. Possible values are `CertificateAuthority` and `Root`.
     * 
     */
    public Output<String> storeName() {
        return this.storeName;
    }

    /**
     * The subject of the certificate.
     * 
     */
    @Import(name="subject")
    private @Nullable Output<String> subject;

    /**
     * @return The subject of the certificate.
     * 
     */
    public Optional<Output<String>> subject() {
        return Optional.ofNullable(this.subject);
    }

    /**
     * The thumbprint of the certificate.
     * 
     */
    @Import(name="thumbprint")
    private @Nullable Output<String> thumbprint;

    /**
     * @return The thumbprint of the certificate.
     * 
     */
    public Optional<Output<String>> thumbprint() {
        return Optional.ofNullable(this.thumbprint);
    }

    private ServiceCertificateArgs() {}

    private ServiceCertificateArgs(ServiceCertificateArgs $) {
        this.certificatePassword = $.certificatePassword;
        this.encodedCertificate = $.encodedCertificate;
        this.expiry = $.expiry;
        this.storeName = $.storeName;
        this.subject = $.subject;
        this.thumbprint = $.thumbprint;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceCertificateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceCertificateArgs $;

        public Builder() {
            $ = new ServiceCertificateArgs();
        }

        public Builder(ServiceCertificateArgs defaults) {
            $ = new ServiceCertificateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificatePassword The password for the certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificatePassword(@Nullable Output<String> certificatePassword) {
            $.certificatePassword = certificatePassword;
            return this;
        }

        /**
         * @param certificatePassword The password for the certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificatePassword(String certificatePassword) {
            return certificatePassword(Output.of(certificatePassword));
        }

        /**
         * @param encodedCertificate The Base64 Encoded PFX or Base64 Encoded X.509 Certificate.
         * 
         * @return builder
         * 
         */
        public Builder encodedCertificate(Output<String> encodedCertificate) {
            $.encodedCertificate = encodedCertificate;
            return this;
        }

        /**
         * @param encodedCertificate The Base64 Encoded PFX or Base64 Encoded X.509 Certificate.
         * 
         * @return builder
         * 
         */
        public Builder encodedCertificate(String encodedCertificate) {
            return encodedCertificate(Output.of(encodedCertificate));
        }

        /**
         * @param expiry The expiration date of the certificate in RFC3339 format: `2000-01-02T03:04:05Z`.
         * 
         * @return builder
         * 
         */
        public Builder expiry(@Nullable Output<String> expiry) {
            $.expiry = expiry;
            return this;
        }

        /**
         * @param expiry The expiration date of the certificate in RFC3339 format: `2000-01-02T03:04:05Z`.
         * 
         * @return builder
         * 
         */
        public Builder expiry(String expiry) {
            return expiry(Output.of(expiry));
        }

        /**
         * @param storeName The name of the Certificate Store where this certificate should be stored. Possible values are `CertificateAuthority` and `Root`.
         * 
         * @return builder
         * 
         */
        public Builder storeName(Output<String> storeName) {
            $.storeName = storeName;
            return this;
        }

        /**
         * @param storeName The name of the Certificate Store where this certificate should be stored. Possible values are `CertificateAuthority` and `Root`.
         * 
         * @return builder
         * 
         */
        public Builder storeName(String storeName) {
            return storeName(Output.of(storeName));
        }

        /**
         * @param subject The subject of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder subject(@Nullable Output<String> subject) {
            $.subject = subject;
            return this;
        }

        /**
         * @param subject The subject of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder subject(String subject) {
            return subject(Output.of(subject));
        }

        /**
         * @param thumbprint The thumbprint of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder thumbprint(@Nullable Output<String> thumbprint) {
            $.thumbprint = thumbprint;
            return this;
        }

        /**
         * @param thumbprint The thumbprint of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder thumbprint(String thumbprint) {
            return thumbprint(Output.of(thumbprint));
        }

        public ServiceCertificateArgs build() {
            if ($.encodedCertificate == null) {
                throw new MissingRequiredPropertyException("ServiceCertificateArgs", "encodedCertificate");
            }
            if ($.storeName == null) {
                throw new MissingRequiredPropertyException("ServiceCertificateArgs", "storeName");
            }
            return $;
        }
    }

}
