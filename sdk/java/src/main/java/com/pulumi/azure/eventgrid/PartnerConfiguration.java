// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.eventgrid;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.eventgrid.PartnerConfigurationArgs;
import com.pulumi.azure.eventgrid.inputs.PartnerConfigurationState;
import com.pulumi.azure.eventgrid.outputs.PartnerConfigurationPartnerAuthorization;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages an Event Grid Partner Configuration.
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azure.core.ResourceGroup;
 * import com.pulumi.azure.core.ResourceGroupArgs;
 * import com.pulumi.azure.eventgrid.PartnerConfiguration;
 * import com.pulumi.azure.eventgrid.PartnerConfigurationArgs;
 * import com.pulumi.azure.eventgrid.inputs.PartnerConfigurationPartnerAuthorizationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new ResourceGroup("example", ResourceGroupArgs.builder()
 *             .name("example-resources")
 *             .location("West Europe")
 *             .build());
 * 
 *         var examplePartnerConfiguration = new PartnerConfiguration("examplePartnerConfiguration", PartnerConfigurationArgs.builder()
 *             .resourceGroupName(example.name())
 *             .defaultMaximumExpirationTimeInDays(14)
 *             .partnerAuthorizations(PartnerConfigurationPartnerAuthorizationArgs.builder()
 *                 .partnerRegistrationId("804a11ca-ce9b-4158-8e94-3c8dc7a072ec")
 *                 .partnerName("Auth0")
 *                 .authorizationExpirationTimeInUtc("2025-02-05T00:00:00Z")
 *                 .build())
 *             .tags(Map.of("environment", "Production"))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## API Providers
 * 
 * &lt;!-- This section is generated, changes will be overwritten --&gt;
 * This resource uses the following Azure API Providers:
 * 
 * * `Microsoft.EventGrid` - 2025-02-15
 * 
 * ## Import
 * 
 * Event Grid Partner Configurations can be imported using the `resource id`, e.g.
 * 
 * ```sh
 * $ pulumi import azure:eventgrid/partnerConfiguration:PartnerConfiguration example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1
 * ```
 * 
 */
@ResourceType(type="azure:eventgrid/partnerConfiguration:PartnerConfiguration")
public class PartnerConfiguration extends com.pulumi.resources.CustomResource {
    /**
     * Time used to validate the authorization expiration time for each authorized partner. Defaults to `7`.
     * 
     */
    @Export(name="defaultMaximumExpirationTimeInDays", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> defaultMaximumExpirationTimeInDays;

    /**
     * @return Time used to validate the authorization expiration time for each authorized partner. Defaults to `7`.
     * 
     */
    public Output<Optional<Integer>> defaultMaximumExpirationTimeInDays() {
        return Codegen.optional(this.defaultMaximumExpirationTimeInDays);
    }
    /**
     * One or more `partnerAuthorization` blocks as defined below.
     * 
     */
    @Export(name="partnerAuthorizations", refs={List.class,PartnerConfigurationPartnerAuthorization.class}, tree="[0,1]")
    private Output</* @Nullable */ List<PartnerConfigurationPartnerAuthorization>> partnerAuthorizations;

    /**
     * @return One or more `partnerAuthorization` blocks as defined below.
     * 
     */
    public Output<Optional<List<PartnerConfigurationPartnerAuthorization>>> partnerAuthorizations() {
        return Codegen.optional(this.partnerAuthorizations);
    }
    /**
     * The name of the Resource Group where the Event Grid Partner Configuration should exist. Changing this forces a new Event Grid Partner Configuration to be created.
     * 
     */
    @Export(name="resourceGroupName", refs={String.class}, tree="[0]")
    private Output<String> resourceGroupName;

    /**
     * @return The name of the Resource Group where the Event Grid Partner Configuration should exist. Changing this forces a new Event Grid Partner Configuration to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * A mapping of tags which should be assigned to the Event Grid Partner Configuration.
     * 
     */
    @Export(name="tags", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return A mapping of tags which should be assigned to the Event Grid Partner Configuration.
     * 
     */
    public Output<Optional<Map<String,String>>> tags() {
        return Codegen.optional(this.tags);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public PartnerConfiguration(java.lang.String name) {
        this(name, PartnerConfigurationArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public PartnerConfiguration(java.lang.String name, PartnerConfigurationArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public PartnerConfiguration(java.lang.String name, PartnerConfigurationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:eventgrid/partnerConfiguration:PartnerConfiguration", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private PartnerConfiguration(java.lang.String name, Output<java.lang.String> id, @Nullable PartnerConfigurationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:eventgrid/partnerConfiguration:PartnerConfiguration", name, state, makeResourceOptions(options, id), false);
    }

    private static PartnerConfigurationArgs makeArgs(PartnerConfigurationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? PartnerConfigurationArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static PartnerConfiguration get(java.lang.String name, Output<java.lang.String> id, @Nullable PartnerConfigurationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new PartnerConfiguration(name, id, state, options);
    }
}
