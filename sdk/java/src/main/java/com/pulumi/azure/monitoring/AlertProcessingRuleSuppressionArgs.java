// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.monitoring;

import com.pulumi.azure.monitoring.inputs.AlertProcessingRuleSuppressionConditionArgs;
import com.pulumi.azure.monitoring.inputs.AlertProcessingRuleSuppressionScheduleArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AlertProcessingRuleSuppressionArgs extends com.pulumi.resources.ResourceArgs {

    public static final AlertProcessingRuleSuppressionArgs Empty = new AlertProcessingRuleSuppressionArgs();

    /**
     * A `condition` block as defined below.
     * 
     */
    @Import(name="condition")
    private @Nullable Output<AlertProcessingRuleSuppressionConditionArgs> condition;

    /**
     * @return A `condition` block as defined below.
     * 
     */
    public Optional<Output<AlertProcessingRuleSuppressionConditionArgs>> condition() {
        return Optional.ofNullable(this.condition);
    }

    /**
     * Specifies a description for the Alert Processing Rule.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Specifies a description for the Alert Processing Rule.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Should the Alert Processing Rule be enabled? Defaults to `true`.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Should the Alert Processing Rule be enabled? Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The name which should be used for this Alert Processing Rule. Changing this forces a new Alert Processing Rule to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name which should be used for this Alert Processing Rule. Changing this forces a new Alert Processing Rule to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The name of the Resource Group where the Alert Processing Rule should exist. Changing this forces a new Alert Processing Rule to be created.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the Resource Group where the Alert Processing Rule should exist. Changing this forces a new Alert Processing Rule to be created.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * A `schedule` block as defined below.
     * 
     */
    @Import(name="schedule")
    private @Nullable Output<AlertProcessingRuleSuppressionScheduleArgs> schedule;

    /**
     * @return A `schedule` block as defined below.
     * 
     */
    public Optional<Output<AlertProcessingRuleSuppressionScheduleArgs>> schedule() {
        return Optional.ofNullable(this.schedule);
    }

    /**
     * A list of resource IDs which will be the target of Alert Processing Rule.
     * 
     */
    @Import(name="scopes", required=true)
    private Output<List<String>> scopes;

    /**
     * @return A list of resource IDs which will be the target of Alert Processing Rule.
     * 
     */
    public Output<List<String>> scopes() {
        return this.scopes;
    }

    /**
     * A mapping of tags which should be assigned to the Alert Processing Rule.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A mapping of tags which should be assigned to the Alert Processing Rule.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private AlertProcessingRuleSuppressionArgs() {}

    private AlertProcessingRuleSuppressionArgs(AlertProcessingRuleSuppressionArgs $) {
        this.condition = $.condition;
        this.description = $.description;
        this.enabled = $.enabled;
        this.name = $.name;
        this.resourceGroupName = $.resourceGroupName;
        this.schedule = $.schedule;
        this.scopes = $.scopes;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AlertProcessingRuleSuppressionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AlertProcessingRuleSuppressionArgs $;

        public Builder() {
            $ = new AlertProcessingRuleSuppressionArgs();
        }

        public Builder(AlertProcessingRuleSuppressionArgs defaults) {
            $ = new AlertProcessingRuleSuppressionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param condition A `condition` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder condition(@Nullable Output<AlertProcessingRuleSuppressionConditionArgs> condition) {
            $.condition = condition;
            return this;
        }

        /**
         * @param condition A `condition` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder condition(AlertProcessingRuleSuppressionConditionArgs condition) {
            return condition(Output.of(condition));
        }

        /**
         * @param description Specifies a description for the Alert Processing Rule.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Specifies a description for the Alert Processing Rule.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param enabled Should the Alert Processing Rule be enabled? Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Should the Alert Processing Rule be enabled? Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param name The name which should be used for this Alert Processing Rule. Changing this forces a new Alert Processing Rule to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this Alert Processing Rule. Changing this forces a new Alert Processing Rule to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param resourceGroupName The name of the Resource Group where the Alert Processing Rule should exist. Changing this forces a new Alert Processing Rule to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the Resource Group where the Alert Processing Rule should exist. Changing this forces a new Alert Processing Rule to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param schedule A `schedule` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder schedule(@Nullable Output<AlertProcessingRuleSuppressionScheduleArgs> schedule) {
            $.schedule = schedule;
            return this;
        }

        /**
         * @param schedule A `schedule` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder schedule(AlertProcessingRuleSuppressionScheduleArgs schedule) {
            return schedule(Output.of(schedule));
        }

        /**
         * @param scopes A list of resource IDs which will be the target of Alert Processing Rule.
         * 
         * @return builder
         * 
         */
        public Builder scopes(Output<List<String>> scopes) {
            $.scopes = scopes;
            return this;
        }

        /**
         * @param scopes A list of resource IDs which will be the target of Alert Processing Rule.
         * 
         * @return builder
         * 
         */
        public Builder scopes(List<String> scopes) {
            return scopes(Output.of(scopes));
        }

        /**
         * @param scopes A list of resource IDs which will be the target of Alert Processing Rule.
         * 
         * @return builder
         * 
         */
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }

        /**
         * @param tags A mapping of tags which should be assigned to the Alert Processing Rule.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags which should be assigned to the Alert Processing Rule.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public AlertProcessingRuleSuppressionArgs build() {
            if ($.resourceGroupName == null) {
                throw new MissingRequiredPropertyException("AlertProcessingRuleSuppressionArgs", "resourceGroupName");
            }
            if ($.scopes == null) {
                throw new MissingRequiredPropertyException("AlertProcessingRuleSuppressionArgs", "scopes");
            }
            return $;
        }
    }

}
