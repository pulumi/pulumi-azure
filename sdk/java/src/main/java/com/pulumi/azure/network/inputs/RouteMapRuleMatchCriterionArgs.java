// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RouteMapRuleMatchCriterionArgs extends com.pulumi.resources.ResourceArgs {

    public static final RouteMapRuleMatchCriterionArgs Empty = new RouteMapRuleMatchCriterionArgs();

    /**
     * A list of AS paths which this criterion matches.
     * 
     */
    @Import(name="asPaths")
    private @Nullable Output<List<String>> asPaths;

    /**
     * @return A list of AS paths which this criterion matches.
     * 
     */
    public Optional<Output<List<String>>> asPaths() {
        return Optional.ofNullable(this.asPaths);
    }

    /**
     * A list of BGP communities which this criterion matches.
     * 
     */
    @Import(name="communities")
    private @Nullable Output<List<String>> communities;

    /**
     * @return A list of BGP communities which this criterion matches.
     * 
     */
    public Optional<Output<List<String>>> communities() {
        return Optional.ofNullable(this.communities);
    }

    /**
     * The match condition to apply the rule of the Route Map. Possible values are `Contains`, `Equals`, `NotContains`, `NotEquals` and `Unknown`.
     * 
     */
    @Import(name="matchCondition", required=true)
    private Output<String> matchCondition;

    /**
     * @return The match condition to apply the rule of the Route Map. Possible values are `Contains`, `Equals`, `NotContains`, `NotEquals` and `Unknown`.
     * 
     */
    public Output<String> matchCondition() {
        return this.matchCondition;
    }

    /**
     * A list of route prefixes which this criterion matches.
     * 
     */
    @Import(name="routePrefixes")
    private @Nullable Output<List<String>> routePrefixes;

    /**
     * @return A list of route prefixes which this criterion matches.
     * 
     */
    public Optional<Output<List<String>>> routePrefixes() {
        return Optional.ofNullable(this.routePrefixes);
    }

    private RouteMapRuleMatchCriterionArgs() {}

    private RouteMapRuleMatchCriterionArgs(RouteMapRuleMatchCriterionArgs $) {
        this.asPaths = $.asPaths;
        this.communities = $.communities;
        this.matchCondition = $.matchCondition;
        this.routePrefixes = $.routePrefixes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RouteMapRuleMatchCriterionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RouteMapRuleMatchCriterionArgs $;

        public Builder() {
            $ = new RouteMapRuleMatchCriterionArgs();
        }

        public Builder(RouteMapRuleMatchCriterionArgs defaults) {
            $ = new RouteMapRuleMatchCriterionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param asPaths A list of AS paths which this criterion matches.
         * 
         * @return builder
         * 
         */
        public Builder asPaths(@Nullable Output<List<String>> asPaths) {
            $.asPaths = asPaths;
            return this;
        }

        /**
         * @param asPaths A list of AS paths which this criterion matches.
         * 
         * @return builder
         * 
         */
        public Builder asPaths(List<String> asPaths) {
            return asPaths(Output.of(asPaths));
        }

        /**
         * @param asPaths A list of AS paths which this criterion matches.
         * 
         * @return builder
         * 
         */
        public Builder asPaths(String... asPaths) {
            return asPaths(List.of(asPaths));
        }

        /**
         * @param communities A list of BGP communities which this criterion matches.
         * 
         * @return builder
         * 
         */
        public Builder communities(@Nullable Output<List<String>> communities) {
            $.communities = communities;
            return this;
        }

        /**
         * @param communities A list of BGP communities which this criterion matches.
         * 
         * @return builder
         * 
         */
        public Builder communities(List<String> communities) {
            return communities(Output.of(communities));
        }

        /**
         * @param communities A list of BGP communities which this criterion matches.
         * 
         * @return builder
         * 
         */
        public Builder communities(String... communities) {
            return communities(List.of(communities));
        }

        /**
         * @param matchCondition The match condition to apply the rule of the Route Map. Possible values are `Contains`, `Equals`, `NotContains`, `NotEquals` and `Unknown`.
         * 
         * @return builder
         * 
         */
        public Builder matchCondition(Output<String> matchCondition) {
            $.matchCondition = matchCondition;
            return this;
        }

        /**
         * @param matchCondition The match condition to apply the rule of the Route Map. Possible values are `Contains`, `Equals`, `NotContains`, `NotEquals` and `Unknown`.
         * 
         * @return builder
         * 
         */
        public Builder matchCondition(String matchCondition) {
            return matchCondition(Output.of(matchCondition));
        }

        /**
         * @param routePrefixes A list of route prefixes which this criterion matches.
         * 
         * @return builder
         * 
         */
        public Builder routePrefixes(@Nullable Output<List<String>> routePrefixes) {
            $.routePrefixes = routePrefixes;
            return this;
        }

        /**
         * @param routePrefixes A list of route prefixes which this criterion matches.
         * 
         * @return builder
         * 
         */
        public Builder routePrefixes(List<String> routePrefixes) {
            return routePrefixes(Output.of(routePrefixes));
        }

        /**
         * @param routePrefixes A list of route prefixes which this criterion matches.
         * 
         * @return builder
         * 
         */
        public Builder routePrefixes(String... routePrefixes) {
            return routePrefixes(List.of(routePrefixes));
        }

        public RouteMapRuleMatchCriterionArgs build() {
            if ($.matchCondition == null) {
                throw new MissingRequiredPropertyException("RouteMapRuleMatchCriterionArgs", "matchCondition");
            }
            return $;
        }
    }

}
