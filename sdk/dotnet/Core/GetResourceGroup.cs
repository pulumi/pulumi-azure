// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Core
{
    public static class GetResourceGroup
    {
        /// <summary>
        /// Use this data source to access information about an existing Resource Group.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Core.GetResourceGroup.Invoke(new()
        ///     {
        ///         Name = "existing",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getResourceGroupResult =&gt; getResourceGroupResult.Id),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetResourceGroupResult> InvokeAsync(GetResourceGroupArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetResourceGroupResult>("azure:core/getResourceGroup:getResourceGroup", args ?? new GetResourceGroupArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Resource Group.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Core.GetResourceGroup.Invoke(new()
        ///     {
        ///         Name = "existing",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getResourceGroupResult =&gt; getResourceGroupResult.Id),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetResourceGroupResult> Invoke(GetResourceGroupInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetResourceGroupResult>("azure:core/getResourceGroup:getResourceGroup", args ?? new GetResourceGroupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetResourceGroupArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Name of this Resource Group.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetResourceGroupArgs()
        {
        }
        public static new GetResourceGroupArgs Empty => new GetResourceGroupArgs();
    }

    public sealed class GetResourceGroupInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Name of this Resource Group.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetResourceGroupInvokeArgs()
        {
        }
        public static new GetResourceGroupInvokeArgs Empty => new GetResourceGroupInvokeArgs();
    }


    [OutputType]
    public sealed class GetResourceGroupResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The Azure Region where the Resource Group exists.
        /// </summary>
        public readonly string Location;
        public readonly string ManagedBy;
        public readonly string Name;
        /// <summary>
        /// A mapping of tags assigned to the Resource Group.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;

        [OutputConstructor]
        private GetResourceGroupResult(
            string id,

            string location,

            string managedBy,

            string name,

            ImmutableDictionary<string, string> tags)
        {
            Id = id;
            Location = location;
            ManagedBy = managedBy;
            Name = name;
            Tags = tags;
        }
    }
}
