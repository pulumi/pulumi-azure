// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Core
{
    /// <summary>
    /// Manages a Subscription Policy Exemption.
    /// 
    /// ## Import
    /// 
    /// Policy Exemptions can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:core/subscriptionPolicyExemption:SubscriptionPolicyExemption exemption1 /subscriptions/00000000-0000-0000-000000000000/providers/Microsoft.Authorization/policyExemptions/exemption1
    /// ```
    /// </summary>
    [AzureResourceType("azure:core/subscriptionPolicyExemption:SubscriptionPolicyExemption")]
    public partial class SubscriptionPolicyExemption : Pulumi.CustomResource
    {
        /// <summary>
        /// A description to use for this Policy Exemption.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// A friendly display name to use for this Policy Exemption.
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// The category of this policy exemption. Possible values are `Waiver` and `Mitigated`.
        /// </summary>
        [Output("exemptionCategory")]
        public Output<string> ExemptionCategory { get; private set; } = null!;

        /// <summary>
        /// The expiration date and time in UTC ISO 8601 format of this policy exemption.
        /// </summary>
        [Output("expiresOn")]
        public Output<string?> ExpiresOn { get; private set; } = null!;

        /// <summary>
        /// The metadata for this policy exemption. This is a JSON string representing additional metadata that should be stored with the policy exemption.
        /// </summary>
        [Output("metadata")]
        public Output<string> Metadata { get; private set; } = null!;

        /// <summary>
        /// The name of the Policy Exemption. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the Policy Assignment to be exempted at the specified Scope.
        /// </summary>
        [Output("policyAssignmentId")]
        public Output<string> PolicyAssignmentId { get; private set; } = null!;

        /// <summary>
        /// The policy definition reference ID list when the associated policy assignment is an assignment of a policy set definition.
        /// </summary>
        [Output("policyDefinitionReferenceIds")]
        public Output<ImmutableArray<string>> PolicyDefinitionReferenceIds { get; private set; } = null!;

        /// <summary>
        /// The Subscription ID where the Policy Exemption should be applied. Changing this forces a new resource to be created.
        /// </summary>
        [Output("subscriptionId")]
        public Output<string> SubscriptionId { get; private set; } = null!;


        /// <summary>
        /// Create a SubscriptionPolicyExemption resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SubscriptionPolicyExemption(string name, SubscriptionPolicyExemptionArgs args, CustomResourceOptions? options = null)
            : base("azure:core/subscriptionPolicyExemption:SubscriptionPolicyExemption", name, args ?? new SubscriptionPolicyExemptionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SubscriptionPolicyExemption(string name, Input<string> id, SubscriptionPolicyExemptionState? state = null, CustomResourceOptions? options = null)
            : base("azure:core/subscriptionPolicyExemption:SubscriptionPolicyExemption", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SubscriptionPolicyExemption resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SubscriptionPolicyExemption Get(string name, Input<string> id, SubscriptionPolicyExemptionState? state = null, CustomResourceOptions? options = null)
        {
            return new SubscriptionPolicyExemption(name, id, state, options);
        }
    }

    public sealed class SubscriptionPolicyExemptionArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A description to use for this Policy Exemption.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// A friendly display name to use for this Policy Exemption.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The category of this policy exemption. Possible values are `Waiver` and `Mitigated`.
        /// </summary>
        [Input("exemptionCategory", required: true)]
        public Input<string> ExemptionCategory { get; set; } = null!;

        /// <summary>
        /// The expiration date and time in UTC ISO 8601 format of this policy exemption.
        /// </summary>
        [Input("expiresOn")]
        public Input<string>? ExpiresOn { get; set; }

        /// <summary>
        /// The metadata for this policy exemption. This is a JSON string representing additional metadata that should be stored with the policy exemption.
        /// </summary>
        [Input("metadata")]
        public Input<string>? Metadata { get; set; }

        /// <summary>
        /// The name of the Policy Exemption. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the Policy Assignment to be exempted at the specified Scope.
        /// </summary>
        [Input("policyAssignmentId", required: true)]
        public Input<string> PolicyAssignmentId { get; set; } = null!;

        [Input("policyDefinitionReferenceIds")]
        private InputList<string>? _policyDefinitionReferenceIds;

        /// <summary>
        /// The policy definition reference ID list when the associated policy assignment is an assignment of a policy set definition.
        /// </summary>
        public InputList<string> PolicyDefinitionReferenceIds
        {
            get => _policyDefinitionReferenceIds ?? (_policyDefinitionReferenceIds = new InputList<string>());
            set => _policyDefinitionReferenceIds = value;
        }

        /// <summary>
        /// The Subscription ID where the Policy Exemption should be applied. Changing this forces a new resource to be created.
        /// </summary>
        [Input("subscriptionId", required: true)]
        public Input<string> SubscriptionId { get; set; } = null!;

        public SubscriptionPolicyExemptionArgs()
        {
        }
    }

    public sealed class SubscriptionPolicyExemptionState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A description to use for this Policy Exemption.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// A friendly display name to use for this Policy Exemption.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The category of this policy exemption. Possible values are `Waiver` and `Mitigated`.
        /// </summary>
        [Input("exemptionCategory")]
        public Input<string>? ExemptionCategory { get; set; }

        /// <summary>
        /// The expiration date and time in UTC ISO 8601 format of this policy exemption.
        /// </summary>
        [Input("expiresOn")]
        public Input<string>? ExpiresOn { get; set; }

        /// <summary>
        /// The metadata for this policy exemption. This is a JSON string representing additional metadata that should be stored with the policy exemption.
        /// </summary>
        [Input("metadata")]
        public Input<string>? Metadata { get; set; }

        /// <summary>
        /// The name of the Policy Exemption. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the Policy Assignment to be exempted at the specified Scope.
        /// </summary>
        [Input("policyAssignmentId")]
        public Input<string>? PolicyAssignmentId { get; set; }

        [Input("policyDefinitionReferenceIds")]
        private InputList<string>? _policyDefinitionReferenceIds;

        /// <summary>
        /// The policy definition reference ID list when the associated policy assignment is an assignment of a policy set definition.
        /// </summary>
        public InputList<string> PolicyDefinitionReferenceIds
        {
            get => _policyDefinitionReferenceIds ?? (_policyDefinitionReferenceIds = new InputList<string>());
            set => _policyDefinitionReferenceIds = value;
        }

        /// <summary>
        /// The Subscription ID where the Policy Exemption should be applied. Changing this forces a new resource to be created.
        /// </summary>
        [Input("subscriptionId")]
        public Input<string>? SubscriptionId { get; set; }

        public SubscriptionPolicyExemptionState()
        {
        }
    }
}
