// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Core
{
    /// <summary>
    /// Manages a Subscription Template Deployment.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example = new Azure.Core.SubscriptionTemplateDeployment("example", new Azure.Core.SubscriptionTemplateDeploymentArgs
    ///         {
    ///             Location = "West Europe",
    ///             TemplateContent = @" {
    ///    ""$schema"": ""https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"",
    ///    ""contentVersion"": ""1.0.0.0"",
    ///    ""parameters"": {},
    ///    ""variables"": {},
    ///    ""resources"": [
    ///      {
    ///        ""type"": ""Microsoft.Resources/resourceGroups"",
    ///        ""apiVersion"": ""2018-05-01"",
    ///        ""location"": ""West Europe"",
    ///        ""name"": ""some-resource-group"",
    ///        ""properties"": {}
    ///      }
    ///    ]
    ///  }
    ///  
    /// ",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Subscription Template Deployments can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:core/subscriptionTemplateDeployment:SubscriptionTemplateDeployment example /subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Resources/deployments/template1
    /// ```
    /// </summary>
    public partial class SubscriptionTemplateDeployment : Pulumi.CustomResource
    {
        /// <summary>
        /// The Debug Level which should be used for this Subscription Template Deployment. Possible values are `none`, `requestContent`, `responseContent` and `requestContent, responseContent`.
        /// </summary>
        [Output("debugLevel")]
        public Output<string?> DebugLevel { get; private set; } = null!;

        /// <summary>
        /// The Azure Region where the Subscription Template Deployment should exist. Changing this forces a new Subscription Template Deployment to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Subscription Template Deployment. Changing this forces a new Subscription Template Deployment to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The JSON Content of the Outputs of the ARM Template Deployment.
        /// </summary>
        [Output("outputContent")]
        public Output<string> OutputContent { get; private set; } = null!;

        /// <summary>
        /// The contents of the ARM Template parameters file - containing a JSON list of parameters.
        /// </summary>
        [Output("parametersContent")]
        public Output<string> ParametersContent { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags which should be assigned to the Subscription Template Deployment.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The contents of the ARM Template which should be deployed into this Subscription.
        /// </summary>
        [Output("templateContent")]
        public Output<string> TemplateContent { get; private set; } = null!;


        /// <summary>
        /// Create a SubscriptionTemplateDeployment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SubscriptionTemplateDeployment(string name, SubscriptionTemplateDeploymentArgs args, CustomResourceOptions? options = null)
            : base("azure:core/subscriptionTemplateDeployment:SubscriptionTemplateDeployment", name, args ?? new SubscriptionTemplateDeploymentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SubscriptionTemplateDeployment(string name, Input<string> id, SubscriptionTemplateDeploymentState? state = null, CustomResourceOptions? options = null)
            : base("azure:core/subscriptionTemplateDeployment:SubscriptionTemplateDeployment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SubscriptionTemplateDeployment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SubscriptionTemplateDeployment Get(string name, Input<string> id, SubscriptionTemplateDeploymentState? state = null, CustomResourceOptions? options = null)
        {
            return new SubscriptionTemplateDeployment(name, id, state, options);
        }
    }

    public sealed class SubscriptionTemplateDeploymentArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Debug Level which should be used for this Subscription Template Deployment. Possible values are `none`, `requestContent`, `responseContent` and `requestContent, responseContent`.
        /// </summary>
        [Input("debugLevel")]
        public Input<string>? DebugLevel { get; set; }

        /// <summary>
        /// The Azure Region where the Subscription Template Deployment should exist. Changing this forces a new Subscription Template Deployment to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name which should be used for this Subscription Template Deployment. Changing this forces a new Subscription Template Deployment to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The contents of the ARM Template parameters file - containing a JSON list of parameters.
        /// </summary>
        [Input("parametersContent")]
        public Input<string>? ParametersContent { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Subscription Template Deployment.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The contents of the ARM Template which should be deployed into this Subscription.
        /// </summary>
        [Input("templateContent", required: true)]
        public Input<string> TemplateContent { get; set; } = null!;

        public SubscriptionTemplateDeploymentArgs()
        {
        }
    }

    public sealed class SubscriptionTemplateDeploymentState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Debug Level which should be used for this Subscription Template Deployment. Possible values are `none`, `requestContent`, `responseContent` and `requestContent, responseContent`.
        /// </summary>
        [Input("debugLevel")]
        public Input<string>? DebugLevel { get; set; }

        /// <summary>
        /// The Azure Region where the Subscription Template Deployment should exist. Changing this forces a new Subscription Template Deployment to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name which should be used for this Subscription Template Deployment. Changing this forces a new Subscription Template Deployment to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The JSON Content of the Outputs of the ARM Template Deployment.
        /// </summary>
        [Input("outputContent")]
        public Input<string>? OutputContent { get; set; }

        /// <summary>
        /// The contents of the ARM Template parameters file - containing a JSON list of parameters.
        /// </summary>
        [Input("parametersContent")]
        public Input<string>? ParametersContent { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Subscription Template Deployment.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The contents of the ARM Template which should be deployed into this Subscription.
        /// </summary>
        [Input("templateContent")]
        public Input<string>? TemplateContent { get; set; }

        public SubscriptionTemplateDeploymentState()
        {
        }
    }
}
