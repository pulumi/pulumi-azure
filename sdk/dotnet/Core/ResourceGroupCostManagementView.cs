// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Core
{
    /// <summary>
    /// Manages an Azure Cost Management View for a Resource Group.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleResourceGroupCostManagementView = new Azure.Core.ResourceGroupCostManagementView("exampleResourceGroupCostManagementView", new()
    ///     {
    ///         DisplayName = "Cost View per Month",
    ///         ChartType = "StackedColumn",
    ///         Accumulated = false,
    ///         ResourceGroupId = exampleResourceGroup.Id,
    ///         ReportType = "Usage",
    ///         Timeframe = "MonthToDate",
    ///         Dataset = new Azure.Core.Inputs.ResourceGroupCostManagementViewDatasetArgs
    ///         {
    ///             Granularity = "Monthly",
    ///             Aggregations = new[]
    ///             {
    ///                 new Azure.Core.Inputs.ResourceGroupCostManagementViewDatasetAggregationArgs
    ///                 {
    ///                     Name = "totalCost",
    ///                     ColumnName = "Cost",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Cost Management View for a Resource Groups can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:core/resourceGroupCostManagementView:ResourceGroupCostManagementView example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resGroup1/providers/Microsoft.CostManagement/views/costmanagementview
    /// ```
    /// </summary>
    [AzureResourceType("azure:core/resourceGroupCostManagementView:ResourceGroupCostManagementView")]
    public partial class ResourceGroupCostManagementView : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether the costs data in the Cost Management View are accumulated over time. Changing this forces a new Cost Management View for a Resource Group to be created.
        /// </summary>
        [Output("accumulated")]
        public Output<bool> Accumulated { get; private set; } = null!;

        /// <summary>
        /// Chart type of the main view in Cost Analysis. Possible values are `Area`, `GroupedColumn`, `Line`, `StackedColumn` and `Table`.
        /// </summary>
        [Output("chartType")]
        public Output<string> ChartType { get; private set; } = null!;

        /// <summary>
        /// A `dataset` block as defined below.
        /// </summary>
        [Output("dataset")]
        public Output<Outputs.ResourceGroupCostManagementViewDataset> Dataset { get; private set; } = null!;

        /// <summary>
        /// User visible input name of the Cost Management View.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// One or more `kpi` blocks as defined below, to show in Cost Analysis UI.
        /// </summary>
        [Output("kpis")]
        public Output<ImmutableArray<Outputs.ResourceGroupCostManagementViewKpi>> Kpis { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Cost Management View for a Resource Group. Changing this forces a new Cost Management View for a Resource Group to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// One or more `pivot` blocks as defined below, containing the configuration of 3 sub-views in the Cost Analysis UI. Non table views should have three pivots.
        /// </summary>
        [Output("pivots")]
        public Output<ImmutableArray<Outputs.ResourceGroupCostManagementViewPivot>> Pivots { get; private set; } = null!;

        /// <summary>
        /// The type of the report. The only possible value is `Usage`.
        /// </summary>
        [Output("reportType")]
        public Output<string> ReportType { get; private set; } = null!;

        /// <summary>
        /// The ID of the Resource Group this View is scoped to. Changing this forces a new Cost Management View for a Resource Group to be created.
        /// </summary>
        [Output("resourceGroupId")]
        public Output<string> ResourceGroupId { get; private set; } = null!;

        /// <summary>
        /// The time frame for pulling data for the report. Possible values are `Custom`, `MonthToDate`, `WeekToDate` and `YearToDate`.
        /// </summary>
        [Output("timeframe")]
        public Output<string> Timeframe { get; private set; } = null!;


        /// <summary>
        /// Create a ResourceGroupCostManagementView resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ResourceGroupCostManagementView(string name, ResourceGroupCostManagementViewArgs args, CustomResourceOptions? options = null)
            : base("azure:core/resourceGroupCostManagementView:ResourceGroupCostManagementView", name, args ?? new ResourceGroupCostManagementViewArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ResourceGroupCostManagementView(string name, Input<string> id, ResourceGroupCostManagementViewState? state = null, CustomResourceOptions? options = null)
            : base("azure:core/resourceGroupCostManagementView:ResourceGroupCostManagementView", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ResourceGroupCostManagementView resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ResourceGroupCostManagementView Get(string name, Input<string> id, ResourceGroupCostManagementViewState? state = null, CustomResourceOptions? options = null)
        {
            return new ResourceGroupCostManagementView(name, id, state, options);
        }
    }

    public sealed class ResourceGroupCostManagementViewArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether the costs data in the Cost Management View are accumulated over time. Changing this forces a new Cost Management View for a Resource Group to be created.
        /// </summary>
        [Input("accumulated", required: true)]
        public Input<bool> Accumulated { get; set; } = null!;

        /// <summary>
        /// Chart type of the main view in Cost Analysis. Possible values are `Area`, `GroupedColumn`, `Line`, `StackedColumn` and `Table`.
        /// </summary>
        [Input("chartType", required: true)]
        public Input<string> ChartType { get; set; } = null!;

        /// <summary>
        /// A `dataset` block as defined below.
        /// </summary>
        [Input("dataset", required: true)]
        public Input<Inputs.ResourceGroupCostManagementViewDatasetArgs> Dataset { get; set; } = null!;

        /// <summary>
        /// User visible input name of the Cost Management View.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        [Input("kpis")]
        private InputList<Inputs.ResourceGroupCostManagementViewKpiArgs>? _kpis;

        /// <summary>
        /// One or more `kpi` blocks as defined below, to show in Cost Analysis UI.
        /// </summary>
        public InputList<Inputs.ResourceGroupCostManagementViewKpiArgs> Kpis
        {
            get => _kpis ?? (_kpis = new InputList<Inputs.ResourceGroupCostManagementViewKpiArgs>());
            set => _kpis = value;
        }

        /// <summary>
        /// The name which should be used for this Cost Management View for a Resource Group. Changing this forces a new Cost Management View for a Resource Group to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("pivots")]
        private InputList<Inputs.ResourceGroupCostManagementViewPivotArgs>? _pivots;

        /// <summary>
        /// One or more `pivot` blocks as defined below, containing the configuration of 3 sub-views in the Cost Analysis UI. Non table views should have three pivots.
        /// </summary>
        public InputList<Inputs.ResourceGroupCostManagementViewPivotArgs> Pivots
        {
            get => _pivots ?? (_pivots = new InputList<Inputs.ResourceGroupCostManagementViewPivotArgs>());
            set => _pivots = value;
        }

        /// <summary>
        /// The type of the report. The only possible value is `Usage`.
        /// </summary>
        [Input("reportType", required: true)]
        public Input<string> ReportType { get; set; } = null!;

        /// <summary>
        /// The ID of the Resource Group this View is scoped to. Changing this forces a new Cost Management View for a Resource Group to be created.
        /// </summary>
        [Input("resourceGroupId", required: true)]
        public Input<string> ResourceGroupId { get; set; } = null!;

        /// <summary>
        /// The time frame for pulling data for the report. Possible values are `Custom`, `MonthToDate`, `WeekToDate` and `YearToDate`.
        /// </summary>
        [Input("timeframe", required: true)]
        public Input<string> Timeframe { get; set; } = null!;

        public ResourceGroupCostManagementViewArgs()
        {
        }
        public static new ResourceGroupCostManagementViewArgs Empty => new ResourceGroupCostManagementViewArgs();
    }

    public sealed class ResourceGroupCostManagementViewState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether the costs data in the Cost Management View are accumulated over time. Changing this forces a new Cost Management View for a Resource Group to be created.
        /// </summary>
        [Input("accumulated")]
        public Input<bool>? Accumulated { get; set; }

        /// <summary>
        /// Chart type of the main view in Cost Analysis. Possible values are `Area`, `GroupedColumn`, `Line`, `StackedColumn` and `Table`.
        /// </summary>
        [Input("chartType")]
        public Input<string>? ChartType { get; set; }

        /// <summary>
        /// A `dataset` block as defined below.
        /// </summary>
        [Input("dataset")]
        public Input<Inputs.ResourceGroupCostManagementViewDatasetGetArgs>? Dataset { get; set; }

        /// <summary>
        /// User visible input name of the Cost Management View.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("kpis")]
        private InputList<Inputs.ResourceGroupCostManagementViewKpiGetArgs>? _kpis;

        /// <summary>
        /// One or more `kpi` blocks as defined below, to show in Cost Analysis UI.
        /// </summary>
        public InputList<Inputs.ResourceGroupCostManagementViewKpiGetArgs> Kpis
        {
            get => _kpis ?? (_kpis = new InputList<Inputs.ResourceGroupCostManagementViewKpiGetArgs>());
            set => _kpis = value;
        }

        /// <summary>
        /// The name which should be used for this Cost Management View for a Resource Group. Changing this forces a new Cost Management View for a Resource Group to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("pivots")]
        private InputList<Inputs.ResourceGroupCostManagementViewPivotGetArgs>? _pivots;

        /// <summary>
        /// One or more `pivot` blocks as defined below, containing the configuration of 3 sub-views in the Cost Analysis UI. Non table views should have three pivots.
        /// </summary>
        public InputList<Inputs.ResourceGroupCostManagementViewPivotGetArgs> Pivots
        {
            get => _pivots ?? (_pivots = new InputList<Inputs.ResourceGroupCostManagementViewPivotGetArgs>());
            set => _pivots = value;
        }

        /// <summary>
        /// The type of the report. The only possible value is `Usage`.
        /// </summary>
        [Input("reportType")]
        public Input<string>? ReportType { get; set; }

        /// <summary>
        /// The ID of the Resource Group this View is scoped to. Changing this forces a new Cost Management View for a Resource Group to be created.
        /// </summary>
        [Input("resourceGroupId")]
        public Input<string>? ResourceGroupId { get; set; }

        /// <summary>
        /// The time frame for pulling data for the report. Possible values are `Custom`, `MonthToDate`, `WeekToDate` and `YearToDate`.
        /// </summary>
        [Input("timeframe")]
        public Input<string>? Timeframe { get; set; }

        public ResourceGroupCostManagementViewState()
        {
        }
        public static new ResourceGroupCostManagementViewState Empty => new ResourceGroupCostManagementViewState();
    }
}
