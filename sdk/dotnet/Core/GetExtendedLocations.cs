// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Core
{
    public static class GetExtendedLocations
    {
        /// <summary>
        /// This data source return the available Extended Locations for a specific Azure Region.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Azure.Core.GetExtendedLocations.InvokeAsync(new Azure.Core.GetExtendedLocationsArgs
        ///         {
        ///             Location = "West Europe",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetExtendedLocationsResult> InvokeAsync(GetExtendedLocationsArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetExtendedLocationsResult>("azure:core/getExtendedLocations:getExtendedLocations", args ?? new GetExtendedLocationsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source return the available Extended Locations for a specific Azure Region.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Azure.Core.GetExtendedLocations.InvokeAsync(new Azure.Core.GetExtendedLocationsArgs
        ///         {
        ///             Location = "West Europe",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetExtendedLocationsResult> Invoke(GetExtendedLocationsInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetExtendedLocationsResult>("azure:core/getExtendedLocations:getExtendedLocations", args ?? new GetExtendedLocationsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetExtendedLocationsArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Azure location to retrieve the Extended Locations for.
        /// </summary>
        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        public GetExtendedLocationsArgs()
        {
        }
    }

    public sealed class GetExtendedLocationsInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Azure location to retrieve the Extended Locations for.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        public GetExtendedLocationsInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetExtendedLocationsResult
    {
        /// <summary>
        /// The available extended locations for the Azure Location.
        /// </summary>
        public readonly ImmutableArray<string> ExtendedLocations;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Location;

        [OutputConstructor]
        private GetExtendedLocationsResult(
            ImmutableArray<string> extendedLocations,

            string id,

            string location)
        {
            ExtendedLocations = extendedLocations;
            Id = id;
            Location = location;
        }
    }
}
