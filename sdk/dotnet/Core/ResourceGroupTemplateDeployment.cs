// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Core
{
    /// <summary>
    /// Manages a Resource Group Template Deployment.
    /// 
    /// &gt; **Note:** This resource will automatically attempt to delete resources deployed by the ARM Template when it is deleted. This behavior can be disabled in the provider `features` block by setting the `delete_nested_items_during_deletion` field to `false` within the `template_deployment` block.
    /// 
    /// ## Import
    /// 
    /// Resource Group Template Deployments can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:core/resourceGroupTemplateDeployment:ResourceGroupTemplateDeployment example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Resources/deployments/template1
    /// ```
    /// </summary>
    [AzureResourceType("azure:core/resourceGroupTemplateDeployment:ResourceGroupTemplateDeployment")]
    public partial class ResourceGroupTemplateDeployment : Pulumi.CustomResource
    {
        /// <summary>
        /// The Debug Level which should be used for this Resource Group Template Deployment. Possible values are `none`, `requestContent`, `responseContent` and `requestContent, responseContent`.
        /// </summary>
        [Output("debugLevel")]
        public Output<string?> DebugLevel { get; private set; } = null!;

        /// <summary>
        /// The Deployment Mode for this Resource Group Template Deployment. Possible values are `Complete` (where resources in the Resource Group not specified in the ARM Template will be destroyed) and `Incremental` (where resources are additive only).
        /// </summary>
        [Output("deploymentMode")]
        public Output<string> DeploymentMode { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Resource Group Template Deployment. Changing this forces a new Resource Group Template Deployment to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The JSON Content of the Outputs of the ARM Template Deployment.
        /// </summary>
        [Output("outputContent")]
        public Output<string> OutputContent { get; private set; } = null!;

        /// <summary>
        /// The contents of the ARM Template parameters file - containing a JSON list of parameters.
        /// </summary>
        [Output("parametersContent")]
        public Output<string> ParametersContent { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Resource Group Template Deployment should exist. Changing this forces a new Resource Group Template Deployment to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags which should be assigned to the Resource Group Template Deployment.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The contents of the ARM Template which should be deployed into this Resource Group. Cannot be specified with `template_spec_version_id`.
        /// </summary>
        [Output("templateContent")]
        public Output<string> TemplateContent { get; private set; } = null!;

        /// <summary>
        /// The ID of the Template Spec Version to deploy. Cannot be specified with `template_content`.
        /// </summary>
        [Output("templateSpecVersionId")]
        public Output<string?> TemplateSpecVersionId { get; private set; } = null!;


        /// <summary>
        /// Create a ResourceGroupTemplateDeployment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ResourceGroupTemplateDeployment(string name, ResourceGroupTemplateDeploymentArgs args, CustomResourceOptions? options = null)
            : base("azure:core/resourceGroupTemplateDeployment:ResourceGroupTemplateDeployment", name, args ?? new ResourceGroupTemplateDeploymentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ResourceGroupTemplateDeployment(string name, Input<string> id, ResourceGroupTemplateDeploymentState? state = null, CustomResourceOptions? options = null)
            : base("azure:core/resourceGroupTemplateDeployment:ResourceGroupTemplateDeployment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ResourceGroupTemplateDeployment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ResourceGroupTemplateDeployment Get(string name, Input<string> id, ResourceGroupTemplateDeploymentState? state = null, CustomResourceOptions? options = null)
        {
            return new ResourceGroupTemplateDeployment(name, id, state, options);
        }
    }

    public sealed class ResourceGroupTemplateDeploymentArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Debug Level which should be used for this Resource Group Template Deployment. Possible values are `none`, `requestContent`, `responseContent` and `requestContent, responseContent`.
        /// </summary>
        [Input("debugLevel")]
        public Input<string>? DebugLevel { get; set; }

        /// <summary>
        /// The Deployment Mode for this Resource Group Template Deployment. Possible values are `Complete` (where resources in the Resource Group not specified in the ARM Template will be destroyed) and `Incremental` (where resources are additive only).
        /// </summary>
        [Input("deploymentMode", required: true)]
        public Input<string> DeploymentMode { get; set; } = null!;

        /// <summary>
        /// The name which should be used for this Resource Group Template Deployment. Changing this forces a new Resource Group Template Deployment to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The contents of the ARM Template parameters file - containing a JSON list of parameters.
        /// </summary>
        [Input("parametersContent")]
        public Input<string>? ParametersContent { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Resource Group Template Deployment should exist. Changing this forces a new Resource Group Template Deployment to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Resource Group Template Deployment.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The contents of the ARM Template which should be deployed into this Resource Group. Cannot be specified with `template_spec_version_id`.
        /// </summary>
        [Input("templateContent")]
        public Input<string>? TemplateContent { get; set; }

        /// <summary>
        /// The ID of the Template Spec Version to deploy. Cannot be specified with `template_content`.
        /// </summary>
        [Input("templateSpecVersionId")]
        public Input<string>? TemplateSpecVersionId { get; set; }

        public ResourceGroupTemplateDeploymentArgs()
        {
        }
    }

    public sealed class ResourceGroupTemplateDeploymentState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Debug Level which should be used for this Resource Group Template Deployment. Possible values are `none`, `requestContent`, `responseContent` and `requestContent, responseContent`.
        /// </summary>
        [Input("debugLevel")]
        public Input<string>? DebugLevel { get; set; }

        /// <summary>
        /// The Deployment Mode for this Resource Group Template Deployment. Possible values are `Complete` (where resources in the Resource Group not specified in the ARM Template will be destroyed) and `Incremental` (where resources are additive only).
        /// </summary>
        [Input("deploymentMode")]
        public Input<string>? DeploymentMode { get; set; }

        /// <summary>
        /// The name which should be used for this Resource Group Template Deployment. Changing this forces a new Resource Group Template Deployment to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The JSON Content of the Outputs of the ARM Template Deployment.
        /// </summary>
        [Input("outputContent")]
        public Input<string>? OutputContent { get; set; }

        /// <summary>
        /// The contents of the ARM Template parameters file - containing a JSON list of parameters.
        /// </summary>
        [Input("parametersContent")]
        public Input<string>? ParametersContent { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Resource Group Template Deployment should exist. Changing this forces a new Resource Group Template Deployment to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Resource Group Template Deployment.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The contents of the ARM Template which should be deployed into this Resource Group. Cannot be specified with `template_spec_version_id`.
        /// </summary>
        [Input("templateContent")]
        public Input<string>? TemplateContent { get; set; }

        /// <summary>
        /// The ID of the Template Spec Version to deploy. Cannot be specified with `template_content`.
        /// </summary>
        [Input("templateSpecVersionId")]
        public Input<string>? TemplateSpecVersionId { get; set; }

        public ResourceGroupTemplateDeploymentState()
        {
        }
    }
}
