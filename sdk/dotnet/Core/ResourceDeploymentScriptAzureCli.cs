// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Core
{
    /// <summary>
    /// Manages a Resource Deployment Script of Azure Cli.
    /// 
    /// ## Import
    /// 
    /// Resource Deployment Script can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:core/resourceDeploymentScriptAzureCli:ResourceDeploymentScriptAzureCli example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.Resources/deploymentScripts/script1
    /// ```
    /// </summary>
    [AzureResourceType("azure:core/resourceDeploymentScriptAzureCli:ResourceDeploymentScriptAzureCli")]
    public partial class ResourceDeploymentScriptAzureCli : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies the cleanup preference when the script execution gets in a terminal state. Possible values are `Always`, `OnExpiration`, `OnSuccess`. Defaults to `Always`. Changing this forces a new Resource Deployment Script to be created.
        /// </summary>
        [Output("cleanupPreference")]
        public Output<string?> CleanupPreference { get; private set; } = null!;

        /// <summary>
        /// Command line arguments to pass to the script. Changing this forces a new Resource Deployment Script to be created.
        /// </summary>
        [Output("commandLine")]
        public Output<string?> CommandLine { get; private set; } = null!;

        /// <summary>
        /// A `container` block as defined below. Changing this forces a new Resource Deployment Script to be created.
        /// </summary>
        [Output("container")]
        public Output<Outputs.ResourceDeploymentScriptAzureCliContainer?> Container { get; private set; } = null!;

        /// <summary>
        /// An `environment_variable` block as defined below. Changing this forces a new Resource Deployment Script to be created.
        /// </summary>
        [Output("environmentVariables")]
        public Output<ImmutableArray<Outputs.ResourceDeploymentScriptAzureCliEnvironmentVariable>> EnvironmentVariables { get; private set; } = null!;

        /// <summary>
        /// Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID. Changing this forces a new Resource Deployment Script to be created.
        /// </summary>
        [Output("forceUpdateTag")]
        public Output<string?> ForceUpdateTag { get; private set; } = null!;

        /// <summary>
        /// An `identity` block as defined below. Changing this forces a new Resource Deployment Script to be created.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.ResourceDeploymentScriptAzureCliIdentity?> Identity { get; private set; } = null!;

        /// <summary>
        /// Specifies the Azure Region where the Resource Deployment Script should exist. Changing this forces a new Resource Deployment Script to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Specifies the name which should be used for this Resource Deployment Script. The name length must be from 1 to 260 characters. The name can only contain alphanumeric, underscore, parentheses, hyphen and period, and it cannot end with a period. Changing this forces a new Resource Deployment Script to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// List of script outputs.
        /// </summary>
        [Output("outputs")]
        public Output<string> Outputs { get; private set; } = null!;

        /// <summary>
        /// Uri for the script. This is the entry point for the external script. Changing this forces a new Resource Deployment Script to be created.
        /// </summary>
        [Output("primaryScriptUri")]
        public Output<string?> PrimaryScriptUri { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the Resource Group where the Resource Deployment Script should exist. Changing this forces a new Resource Deployment Script to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. The time duration should be between `1` hour and `26` hours (inclusive) and should be specified in ISO 8601 format. Changing this forces a new Resource Deployment Script to be created.
        /// </summary>
        [Output("retentionInterval")]
        public Output<string> RetentionInterval { get; private set; } = null!;

        /// <summary>
        /// Script body. Changing this forces a new Resource Deployment Script to be created.
        /// </summary>
        [Output("scriptContent")]
        public Output<string?> ScriptContent { get; private set; } = null!;

        /// <summary>
        /// A `storage_account` block as defined below. Changing this forces a new Resource Deployment Script to be created.
        /// </summary>
        [Output("storageAccount")]
        public Output<Outputs.ResourceDeploymentScriptAzureCliStorageAccount?> StorageAccount { get; private set; } = null!;

        /// <summary>
        /// Supporting files for the external script. Changing this forces a new Resource Deployment Script to be created.
        /// </summary>
        [Output("supportingScriptUris")]
        public Output<ImmutableArray<string>> SupportingScriptUris { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags which should be assigned to the Resource Deployment Script.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Maximum allowed script execution time specified in ISO 8601 format. Needs to be greater than 0 and smaller than 1 day. Defaults to `P1D`. Changing this forces a new Resource Deployment Script to be created.
        /// </summary>
        [Output("timeout")]
        public Output<string?> Timeout { get; private set; } = null!;

        /// <summary>
        /// Specifies the version of the Azure CLI that should be used in the format `X.Y.Z` (e.g. `2.30.0`). A canonical list of versions [is available from the Microsoft Container Registry API](https://mcr.microsoft.com/v2/azure-cli/tags/list). Changing this forces a new Resource Deployment Script to be created.
        /// </summary>
        [Output("version")]
        public Output<string> Version { get; private set; } = null!;


        /// <summary>
        /// Create a ResourceDeploymentScriptAzureCli resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ResourceDeploymentScriptAzureCli(string name, ResourceDeploymentScriptAzureCliArgs args, CustomResourceOptions? options = null)
            : base("azure:core/resourceDeploymentScriptAzureCli:ResourceDeploymentScriptAzureCli", name, args ?? new ResourceDeploymentScriptAzureCliArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ResourceDeploymentScriptAzureCli(string name, Input<string> id, ResourceDeploymentScriptAzureCliState? state = null, CustomResourceOptions? options = null)
            : base("azure:core/resourceDeploymentScriptAzureCli:ResourceDeploymentScriptAzureCli", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ResourceDeploymentScriptAzureCli resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ResourceDeploymentScriptAzureCli Get(string name, Input<string> id, ResourceDeploymentScriptAzureCliState? state = null, CustomResourceOptions? options = null)
        {
            return new ResourceDeploymentScriptAzureCli(name, id, state, options);
        }
    }

    public sealed class ResourceDeploymentScriptAzureCliArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the cleanup preference when the script execution gets in a terminal state. Possible values are `Always`, `OnExpiration`, `OnSuccess`. Defaults to `Always`. Changing this forces a new Resource Deployment Script to be created.
        /// </summary>
        [Input("cleanupPreference")]
        public Input<string>? CleanupPreference { get; set; }

        /// <summary>
        /// Command line arguments to pass to the script. Changing this forces a new Resource Deployment Script to be created.
        /// </summary>
        [Input("commandLine")]
        public Input<string>? CommandLine { get; set; }

        /// <summary>
        /// A `container` block as defined below. Changing this forces a new Resource Deployment Script to be created.
        /// </summary>
        [Input("container")]
        public Input<Inputs.ResourceDeploymentScriptAzureCliContainerArgs>? Container { get; set; }

        [Input("environmentVariables")]
        private InputList<Inputs.ResourceDeploymentScriptAzureCliEnvironmentVariableArgs>? _environmentVariables;

        /// <summary>
        /// An `environment_variable` block as defined below. Changing this forces a new Resource Deployment Script to be created.
        /// </summary>
        public InputList<Inputs.ResourceDeploymentScriptAzureCliEnvironmentVariableArgs> EnvironmentVariables
        {
            get => _environmentVariables ?? (_environmentVariables = new InputList<Inputs.ResourceDeploymentScriptAzureCliEnvironmentVariableArgs>());
            set => _environmentVariables = value;
        }

        /// <summary>
        /// Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID. Changing this forces a new Resource Deployment Script to be created.
        /// </summary>
        [Input("forceUpdateTag")]
        public Input<string>? ForceUpdateTag { get; set; }

        /// <summary>
        /// An `identity` block as defined below. Changing this forces a new Resource Deployment Script to be created.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.ResourceDeploymentScriptAzureCliIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// Specifies the Azure Region where the Resource Deployment Script should exist. Changing this forces a new Resource Deployment Script to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Specifies the name which should be used for this Resource Deployment Script. The name length must be from 1 to 260 characters. The name can only contain alphanumeric, underscore, parentheses, hyphen and period, and it cannot end with a period. Changing this forces a new Resource Deployment Script to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Uri for the script. This is the entry point for the external script. Changing this forces a new Resource Deployment Script to be created.
        /// </summary>
        [Input("primaryScriptUri")]
        public Input<string>? PrimaryScriptUri { get; set; }

        /// <summary>
        /// Specifies the name of the Resource Group where the Resource Deployment Script should exist. Changing this forces a new Resource Deployment Script to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. The time duration should be between `1` hour and `26` hours (inclusive) and should be specified in ISO 8601 format. Changing this forces a new Resource Deployment Script to be created.
        /// </summary>
        [Input("retentionInterval", required: true)]
        public Input<string> RetentionInterval { get; set; } = null!;

        /// <summary>
        /// Script body. Changing this forces a new Resource Deployment Script to be created.
        /// </summary>
        [Input("scriptContent")]
        public Input<string>? ScriptContent { get; set; }

        /// <summary>
        /// A `storage_account` block as defined below. Changing this forces a new Resource Deployment Script to be created.
        /// </summary>
        [Input("storageAccount")]
        public Input<Inputs.ResourceDeploymentScriptAzureCliStorageAccountArgs>? StorageAccount { get; set; }

        [Input("supportingScriptUris")]
        private InputList<string>? _supportingScriptUris;

        /// <summary>
        /// Supporting files for the external script. Changing this forces a new Resource Deployment Script to be created.
        /// </summary>
        public InputList<string> SupportingScriptUris
        {
            get => _supportingScriptUris ?? (_supportingScriptUris = new InputList<string>());
            set => _supportingScriptUris = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Resource Deployment Script.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Maximum allowed script execution time specified in ISO 8601 format. Needs to be greater than 0 and smaller than 1 day. Defaults to `P1D`. Changing this forces a new Resource Deployment Script to be created.
        /// </summary>
        [Input("timeout")]
        public Input<string>? Timeout { get; set; }

        /// <summary>
        /// Specifies the version of the Azure CLI that should be used in the format `X.Y.Z` (e.g. `2.30.0`). A canonical list of versions [is available from the Microsoft Container Registry API](https://mcr.microsoft.com/v2/azure-cli/tags/list). Changing this forces a new Resource Deployment Script to be created.
        /// </summary>
        [Input("version", required: true)]
        public Input<string> Version { get; set; } = null!;

        public ResourceDeploymentScriptAzureCliArgs()
        {
        }
        public static new ResourceDeploymentScriptAzureCliArgs Empty => new ResourceDeploymentScriptAzureCliArgs();
    }

    public sealed class ResourceDeploymentScriptAzureCliState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the cleanup preference when the script execution gets in a terminal state. Possible values are `Always`, `OnExpiration`, `OnSuccess`. Defaults to `Always`. Changing this forces a new Resource Deployment Script to be created.
        /// </summary>
        [Input("cleanupPreference")]
        public Input<string>? CleanupPreference { get; set; }

        /// <summary>
        /// Command line arguments to pass to the script. Changing this forces a new Resource Deployment Script to be created.
        /// </summary>
        [Input("commandLine")]
        public Input<string>? CommandLine { get; set; }

        /// <summary>
        /// A `container` block as defined below. Changing this forces a new Resource Deployment Script to be created.
        /// </summary>
        [Input("container")]
        public Input<Inputs.ResourceDeploymentScriptAzureCliContainerGetArgs>? Container { get; set; }

        [Input("environmentVariables")]
        private InputList<Inputs.ResourceDeploymentScriptAzureCliEnvironmentVariableGetArgs>? _environmentVariables;

        /// <summary>
        /// An `environment_variable` block as defined below. Changing this forces a new Resource Deployment Script to be created.
        /// </summary>
        public InputList<Inputs.ResourceDeploymentScriptAzureCliEnvironmentVariableGetArgs> EnvironmentVariables
        {
            get => _environmentVariables ?? (_environmentVariables = new InputList<Inputs.ResourceDeploymentScriptAzureCliEnvironmentVariableGetArgs>());
            set => _environmentVariables = value;
        }

        /// <summary>
        /// Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID. Changing this forces a new Resource Deployment Script to be created.
        /// </summary>
        [Input("forceUpdateTag")]
        public Input<string>? ForceUpdateTag { get; set; }

        /// <summary>
        /// An `identity` block as defined below. Changing this forces a new Resource Deployment Script to be created.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.ResourceDeploymentScriptAzureCliIdentityGetArgs>? Identity { get; set; }

        /// <summary>
        /// Specifies the Azure Region where the Resource Deployment Script should exist. Changing this forces a new Resource Deployment Script to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Specifies the name which should be used for this Resource Deployment Script. The name length must be from 1 to 260 characters. The name can only contain alphanumeric, underscore, parentheses, hyphen and period, and it cannot end with a period. Changing this forces a new Resource Deployment Script to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// List of script outputs.
        /// </summary>
        [Input("outputs")]
        public Input<string>? Outputs { get; set; }

        /// <summary>
        /// Uri for the script. This is the entry point for the external script. Changing this forces a new Resource Deployment Script to be created.
        /// </summary>
        [Input("primaryScriptUri")]
        public Input<string>? PrimaryScriptUri { get; set; }

        /// <summary>
        /// Specifies the name of the Resource Group where the Resource Deployment Script should exist. Changing this forces a new Resource Deployment Script to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. The time duration should be between `1` hour and `26` hours (inclusive) and should be specified in ISO 8601 format. Changing this forces a new Resource Deployment Script to be created.
        /// </summary>
        [Input("retentionInterval")]
        public Input<string>? RetentionInterval { get; set; }

        /// <summary>
        /// Script body. Changing this forces a new Resource Deployment Script to be created.
        /// </summary>
        [Input("scriptContent")]
        public Input<string>? ScriptContent { get; set; }

        /// <summary>
        /// A `storage_account` block as defined below. Changing this forces a new Resource Deployment Script to be created.
        /// </summary>
        [Input("storageAccount")]
        public Input<Inputs.ResourceDeploymentScriptAzureCliStorageAccountGetArgs>? StorageAccount { get; set; }

        [Input("supportingScriptUris")]
        private InputList<string>? _supportingScriptUris;

        /// <summary>
        /// Supporting files for the external script. Changing this forces a new Resource Deployment Script to be created.
        /// </summary>
        public InputList<string> SupportingScriptUris
        {
            get => _supportingScriptUris ?? (_supportingScriptUris = new InputList<string>());
            set => _supportingScriptUris = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Resource Deployment Script.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Maximum allowed script execution time specified in ISO 8601 format. Needs to be greater than 0 and smaller than 1 day. Defaults to `P1D`. Changing this forces a new Resource Deployment Script to be created.
        /// </summary>
        [Input("timeout")]
        public Input<string>? Timeout { get; set; }

        /// <summary>
        /// Specifies the version of the Azure CLI that should be used in the format `X.Y.Z` (e.g. `2.30.0`). A canonical list of versions [is available from the Microsoft Container Registry API](https://mcr.microsoft.com/v2/azure-cli/tags/list). Changing this forces a new Resource Deployment Script to be created.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public ResourceDeploymentScriptAzureCliState()
        {
        }
        public static new ResourceDeploymentScriptAzureCliState Empty => new ResourceDeploymentScriptAzureCliState();
    }
}
