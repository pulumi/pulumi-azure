// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Core
{
    /// <summary>
    /// Manages Portal Tenant Configuration.
    /// 
    /// &gt; **Note:** User has to be `Contributor` or `Owner` at scope `/` for managing this resource.
    /// 
    /// &gt; **Note:** The Service Principal with Tenant Admin can be created by `az ad sp create-for-rbac --name "&lt;sp name&gt;" --role="Contributor" --scopes="/"`.
    /// 
    /// &gt; **Note:** The Service Principal can be granted Tenant Admin permission by `az role assignment create --assignee "&lt;app id&gt;" --role "Contributor" --scope "/"`.
    /// 
    /// &gt; **Note:** While assigning the role to the existing/new Service Principal at the Tenant Scope, the user assigning role must already have the `Owner` role assigned at the Tenant Scope.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Core.PortalTenantConfiguration("example", new()
    ///     {
    ///         PrivateMarkdownStorageEnforced = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Portal Tenant Configurations can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:core/portalTenantConfiguration:PortalTenantConfiguration example /providers/Microsoft.Portal/tenantConfigurations/default
    /// ```
    /// </summary>
    [AzureResourceType("azure:core/portalTenantConfiguration:PortalTenantConfiguration")]
    public partial class PortalTenantConfiguration : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Is the private tile markdown storage which used to display custom dynamic and static content enabled?
        /// 
        /// &gt; **Note:** When `private_markdown_storage_enforced` is set to `true`, only external storage configuration (URI) is allowed for Markdown tiles. Inline content configuration will be prohibited.
        /// </summary>
        [Output("privateMarkdownStorageEnforced")]
        public Output<bool> PrivateMarkdownStorageEnforced { get; private set; } = null!;


        /// <summary>
        /// Create a PortalTenantConfiguration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PortalTenantConfiguration(string name, PortalTenantConfigurationArgs args, CustomResourceOptions? options = null)
            : base("azure:core/portalTenantConfiguration:PortalTenantConfiguration", name, args ?? new PortalTenantConfigurationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PortalTenantConfiguration(string name, Input<string> id, PortalTenantConfigurationState? state = null, CustomResourceOptions? options = null)
            : base("azure:core/portalTenantConfiguration:PortalTenantConfiguration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PortalTenantConfiguration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PortalTenantConfiguration Get(string name, Input<string> id, PortalTenantConfigurationState? state = null, CustomResourceOptions? options = null)
        {
            return new PortalTenantConfiguration(name, id, state, options);
        }
    }

    public sealed class PortalTenantConfigurationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Is the private tile markdown storage which used to display custom dynamic and static content enabled?
        /// 
        /// &gt; **Note:** When `private_markdown_storage_enforced` is set to `true`, only external storage configuration (URI) is allowed for Markdown tiles. Inline content configuration will be prohibited.
        /// </summary>
        [Input("privateMarkdownStorageEnforced", required: true)]
        public Input<bool> PrivateMarkdownStorageEnforced { get; set; } = null!;

        public PortalTenantConfigurationArgs()
        {
        }
        public static new PortalTenantConfigurationArgs Empty => new PortalTenantConfigurationArgs();
    }

    public sealed class PortalTenantConfigurationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Is the private tile markdown storage which used to display custom dynamic and static content enabled?
        /// 
        /// &gt; **Note:** When `private_markdown_storage_enforced` is set to `true`, only external storage configuration (URI) is allowed for Markdown tiles. Inline content configuration will be prohibited.
        /// </summary>
        [Input("privateMarkdownStorageEnforced")]
        public Input<bool>? PrivateMarkdownStorageEnforced { get; set; }

        public PortalTenantConfigurationState()
        {
        }
        public static new PortalTenantConfigurationState Empty => new PortalTenantConfigurationState();
    }
}
