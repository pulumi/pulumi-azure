// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Core
{
    /// <summary>
    /// Manages a Subscription Policy Assignment.
    /// 
    /// ## Import
    /// 
    /// Subscription Policy Assignments can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:core/subscriptionPolicyAssignment:SubscriptionPolicyAssignment example /subscriptions/00000000-0000-0000-000000000000/providers/Microsoft.Authorization/policyAssignments/assignment1
    /// ```
    /// </summary>
    [AzureResourceType("azure:core/subscriptionPolicyAssignment:SubscriptionPolicyAssignment")]
    public partial class SubscriptionPolicyAssignment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A description which should be used for this Policy Assignment.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The Display Name for this Policy Assignment.
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Specifies if this Policy should be enforced or not? Defaults to `true`.
        /// </summary>
        [Output("enforce")]
        public Output<bool?> Enforce { get; private set; } = null!;

        /// <summary>
        /// An `identity` block as defined below.
        /// 
        /// &gt; **Note:** The `location` field must also be specified when `identity` is specified.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.SubscriptionPolicyAssignmentIdentity?> Identity { get; private set; } = null!;

        /// <summary>
        /// The Azure Region where the Policy Assignment should exist. Changing this forces a new Policy Assignment to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// A JSON mapping of any Metadata for this Policy.
        /// </summary>
        [Output("metadata")]
        public Output<string> Metadata { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Policy Assignment. Changing this forces a new Policy Assignment to be created. Cannot exceed 64 characters in length.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// One or more `non_compliance_message` blocks as defined below.
        /// </summary>
        [Output("nonComplianceMessages")]
        public Output<ImmutableArray<Outputs.SubscriptionPolicyAssignmentNonComplianceMessage>> NonComplianceMessages { get; private set; } = null!;

        /// <summary>
        /// Specifies a list of Resource Scopes (for example a Subscription, or a Resource Group) within this Management Group which are excluded from this Policy.
        /// </summary>
        [Output("notScopes")]
        public Output<ImmutableArray<string>> NotScopes { get; private set; } = null!;

        /// <summary>
        /// One or more `overrides` blocks as defined below. More detail about `overrides` and `resource_selectors` see [policy assignment structure](https://learn.microsoft.com/en-us/azure/governance/policy/concepts/assignment-structure#resource-selectors-preview)
        /// </summary>
        [Output("overrides")]
        public Output<ImmutableArray<Outputs.SubscriptionPolicyAssignmentOverride>> Overrides { get; private set; } = null!;

        /// <summary>
        /// A JSON mapping of any Parameters for this Policy.
        /// </summary>
        [Output("parameters")]
        public Output<string?> Parameters { get; private set; } = null!;

        /// <summary>
        /// The ID of the Policy Definition or Policy Definition Set. Changing this forces a new Policy Assignment to be created.
        /// </summary>
        [Output("policyDefinitionId")]
        public Output<string> PolicyDefinitionId { get; private set; } = null!;

        /// <summary>
        /// One or more `resource_selectors` blocks as defined below to filter polices by resource properties.
        /// </summary>
        [Output("resourceSelectors")]
        public Output<ImmutableArray<Outputs.SubscriptionPolicyAssignmentResourceSelector>> ResourceSelectors { get; private set; } = null!;

        /// <summary>
        /// The ID of the Subscription where this Policy Assignment should be created. Changing this forces a new Policy Assignment to be created.
        /// </summary>
        [Output("subscriptionId")]
        public Output<string> SubscriptionId { get; private set; } = null!;


        /// <summary>
        /// Create a SubscriptionPolicyAssignment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SubscriptionPolicyAssignment(string name, SubscriptionPolicyAssignmentArgs args, CustomResourceOptions? options = null)
            : base("azure:core/subscriptionPolicyAssignment:SubscriptionPolicyAssignment", name, args ?? new SubscriptionPolicyAssignmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SubscriptionPolicyAssignment(string name, Input<string> id, SubscriptionPolicyAssignmentState? state = null, CustomResourceOptions? options = null)
            : base("azure:core/subscriptionPolicyAssignment:SubscriptionPolicyAssignment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SubscriptionPolicyAssignment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SubscriptionPolicyAssignment Get(string name, Input<string> id, SubscriptionPolicyAssignmentState? state = null, CustomResourceOptions? options = null)
        {
            return new SubscriptionPolicyAssignment(name, id, state, options);
        }
    }

    public sealed class SubscriptionPolicyAssignmentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A description which should be used for this Policy Assignment.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The Display Name for this Policy Assignment.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Specifies if this Policy should be enforced or not? Defaults to `true`.
        /// </summary>
        [Input("enforce")]
        public Input<bool>? Enforce { get; set; }

        /// <summary>
        /// An `identity` block as defined below.
        /// 
        /// &gt; **Note:** The `location` field must also be specified when `identity` is specified.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.SubscriptionPolicyAssignmentIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// The Azure Region where the Policy Assignment should exist. Changing this forces a new Policy Assignment to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// A JSON mapping of any Metadata for this Policy.
        /// </summary>
        [Input("metadata")]
        public Input<string>? Metadata { get; set; }

        /// <summary>
        /// The name which should be used for this Policy Assignment. Changing this forces a new Policy Assignment to be created. Cannot exceed 64 characters in length.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nonComplianceMessages")]
        private InputList<Inputs.SubscriptionPolicyAssignmentNonComplianceMessageArgs>? _nonComplianceMessages;

        /// <summary>
        /// One or more `non_compliance_message` blocks as defined below.
        /// </summary>
        public InputList<Inputs.SubscriptionPolicyAssignmentNonComplianceMessageArgs> NonComplianceMessages
        {
            get => _nonComplianceMessages ?? (_nonComplianceMessages = new InputList<Inputs.SubscriptionPolicyAssignmentNonComplianceMessageArgs>());
            set => _nonComplianceMessages = value;
        }

        [Input("notScopes")]
        private InputList<string>? _notScopes;

        /// <summary>
        /// Specifies a list of Resource Scopes (for example a Subscription, or a Resource Group) within this Management Group which are excluded from this Policy.
        /// </summary>
        public InputList<string> NotScopes
        {
            get => _notScopes ?? (_notScopes = new InputList<string>());
            set => _notScopes = value;
        }

        [Input("overrides")]
        private InputList<Inputs.SubscriptionPolicyAssignmentOverrideArgs>? _overrides;

        /// <summary>
        /// One or more `overrides` blocks as defined below. More detail about `overrides` and `resource_selectors` see [policy assignment structure](https://learn.microsoft.com/en-us/azure/governance/policy/concepts/assignment-structure#resource-selectors-preview)
        /// </summary>
        public InputList<Inputs.SubscriptionPolicyAssignmentOverrideArgs> Overrides
        {
            get => _overrides ?? (_overrides = new InputList<Inputs.SubscriptionPolicyAssignmentOverrideArgs>());
            set => _overrides = value;
        }

        /// <summary>
        /// A JSON mapping of any Parameters for this Policy.
        /// </summary>
        [Input("parameters")]
        public Input<string>? Parameters { get; set; }

        /// <summary>
        /// The ID of the Policy Definition or Policy Definition Set. Changing this forces a new Policy Assignment to be created.
        /// </summary>
        [Input("policyDefinitionId", required: true)]
        public Input<string> PolicyDefinitionId { get; set; } = null!;

        [Input("resourceSelectors")]
        private InputList<Inputs.SubscriptionPolicyAssignmentResourceSelectorArgs>? _resourceSelectors;

        /// <summary>
        /// One or more `resource_selectors` blocks as defined below to filter polices by resource properties.
        /// </summary>
        public InputList<Inputs.SubscriptionPolicyAssignmentResourceSelectorArgs> ResourceSelectors
        {
            get => _resourceSelectors ?? (_resourceSelectors = new InputList<Inputs.SubscriptionPolicyAssignmentResourceSelectorArgs>());
            set => _resourceSelectors = value;
        }

        /// <summary>
        /// The ID of the Subscription where this Policy Assignment should be created. Changing this forces a new Policy Assignment to be created.
        /// </summary>
        [Input("subscriptionId", required: true)]
        public Input<string> SubscriptionId { get; set; } = null!;

        public SubscriptionPolicyAssignmentArgs()
        {
        }
        public static new SubscriptionPolicyAssignmentArgs Empty => new SubscriptionPolicyAssignmentArgs();
    }

    public sealed class SubscriptionPolicyAssignmentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A description which should be used for this Policy Assignment.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The Display Name for this Policy Assignment.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Specifies if this Policy should be enforced or not? Defaults to `true`.
        /// </summary>
        [Input("enforce")]
        public Input<bool>? Enforce { get; set; }

        /// <summary>
        /// An `identity` block as defined below.
        /// 
        /// &gt; **Note:** The `location` field must also be specified when `identity` is specified.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.SubscriptionPolicyAssignmentIdentityGetArgs>? Identity { get; set; }

        /// <summary>
        /// The Azure Region where the Policy Assignment should exist. Changing this forces a new Policy Assignment to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// A JSON mapping of any Metadata for this Policy.
        /// </summary>
        [Input("metadata")]
        public Input<string>? Metadata { get; set; }

        /// <summary>
        /// The name which should be used for this Policy Assignment. Changing this forces a new Policy Assignment to be created. Cannot exceed 64 characters in length.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nonComplianceMessages")]
        private InputList<Inputs.SubscriptionPolicyAssignmentNonComplianceMessageGetArgs>? _nonComplianceMessages;

        /// <summary>
        /// One or more `non_compliance_message` blocks as defined below.
        /// </summary>
        public InputList<Inputs.SubscriptionPolicyAssignmentNonComplianceMessageGetArgs> NonComplianceMessages
        {
            get => _nonComplianceMessages ?? (_nonComplianceMessages = new InputList<Inputs.SubscriptionPolicyAssignmentNonComplianceMessageGetArgs>());
            set => _nonComplianceMessages = value;
        }

        [Input("notScopes")]
        private InputList<string>? _notScopes;

        /// <summary>
        /// Specifies a list of Resource Scopes (for example a Subscription, or a Resource Group) within this Management Group which are excluded from this Policy.
        /// </summary>
        public InputList<string> NotScopes
        {
            get => _notScopes ?? (_notScopes = new InputList<string>());
            set => _notScopes = value;
        }

        [Input("overrides")]
        private InputList<Inputs.SubscriptionPolicyAssignmentOverrideGetArgs>? _overrides;

        /// <summary>
        /// One or more `overrides` blocks as defined below. More detail about `overrides` and `resource_selectors` see [policy assignment structure](https://learn.microsoft.com/en-us/azure/governance/policy/concepts/assignment-structure#resource-selectors-preview)
        /// </summary>
        public InputList<Inputs.SubscriptionPolicyAssignmentOverrideGetArgs> Overrides
        {
            get => _overrides ?? (_overrides = new InputList<Inputs.SubscriptionPolicyAssignmentOverrideGetArgs>());
            set => _overrides = value;
        }

        /// <summary>
        /// A JSON mapping of any Parameters for this Policy.
        /// </summary>
        [Input("parameters")]
        public Input<string>? Parameters { get; set; }

        /// <summary>
        /// The ID of the Policy Definition or Policy Definition Set. Changing this forces a new Policy Assignment to be created.
        /// </summary>
        [Input("policyDefinitionId")]
        public Input<string>? PolicyDefinitionId { get; set; }

        [Input("resourceSelectors")]
        private InputList<Inputs.SubscriptionPolicyAssignmentResourceSelectorGetArgs>? _resourceSelectors;

        /// <summary>
        /// One or more `resource_selectors` blocks as defined below to filter polices by resource properties.
        /// </summary>
        public InputList<Inputs.SubscriptionPolicyAssignmentResourceSelectorGetArgs> ResourceSelectors
        {
            get => _resourceSelectors ?? (_resourceSelectors = new InputList<Inputs.SubscriptionPolicyAssignmentResourceSelectorGetArgs>());
            set => _resourceSelectors = value;
        }

        /// <summary>
        /// The ID of the Subscription where this Policy Assignment should be created. Changing this forces a new Policy Assignment to be created.
        /// </summary>
        [Input("subscriptionId")]
        public Input<string>? SubscriptionId { get; set; }

        public SubscriptionPolicyAssignmentState()
        {
        }
        public static new SubscriptionPolicyAssignmentState Empty => new SubscriptionPolicyAssignmentState();
    }
}
