// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.DataShare
{
    public static class GetDatasetDataLakeGen2
    {
        /// <summary>
        /// Use this data source to access information about an existing Data Share Data Lake Gen2 Dataset.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.DataShare.GetDatasetDataLakeGen2.Invoke(new()
        ///     {
        ///         Name = "example-dsdlg2ds",
        ///         ShareId = "example-share-id",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getDatasetDataLakeGen2Result =&gt; getDatasetDataLakeGen2Result.Id),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetDatasetDataLakeGen2Result> InvokeAsync(GetDatasetDataLakeGen2Args args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDatasetDataLakeGen2Result>("azure:datashare/getDatasetDataLakeGen2:getDatasetDataLakeGen2", args ?? new GetDatasetDataLakeGen2Args(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Data Share Data Lake Gen2 Dataset.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.DataShare.GetDatasetDataLakeGen2.Invoke(new()
        ///     {
        ///         Name = "example-dsdlg2ds",
        ///         ShareId = "example-share-id",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getDatasetDataLakeGen2Result =&gt; getDatasetDataLakeGen2Result.Id),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetDatasetDataLakeGen2Result> Invoke(GetDatasetDataLakeGen2InvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetDatasetDataLakeGen2Result>("azure:datashare/getDatasetDataLakeGen2:getDatasetDataLakeGen2", args ?? new GetDatasetDataLakeGen2InvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDatasetDataLakeGen2Args : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of this Data Share Data Lake Gen2 Dataset.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The resource ID of the Data Share where this Data Share Data Lake Gen2 Dataset should be created.
        /// </summary>
        [Input("shareId", required: true)]
        public string ShareId { get; set; } = null!;

        public GetDatasetDataLakeGen2Args()
        {
        }
        public static new GetDatasetDataLakeGen2Args Empty => new GetDatasetDataLakeGen2Args();
    }

    public sealed class GetDatasetDataLakeGen2InvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of this Data Share Data Lake Gen2 Dataset.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The resource ID of the Data Share where this Data Share Data Lake Gen2 Dataset should be created.
        /// </summary>
        [Input("shareId", required: true)]
        public Input<string> ShareId { get; set; } = null!;

        public GetDatasetDataLakeGen2InvokeArgs()
        {
        }
        public static new GetDatasetDataLakeGen2InvokeArgs Empty => new GetDatasetDataLakeGen2InvokeArgs();
    }


    [OutputType]
    public sealed class GetDatasetDataLakeGen2Result
    {
        /// <summary>
        /// The name of the Data Share Dataset.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// The path of the file in the data lake file system to be shared with the receiver.
        /// </summary>
        public readonly string FilePath;
        /// <summary>
        /// The name of the data lake file system to be shared with the receiver.
        /// </summary>
        public readonly string FileSystemName;
        /// <summary>
        /// The folder path in the data lake file system to be shared with the receiver.
        /// </summary>
        public readonly string FolderPath;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Name;
        public readonly string ShareId;
        /// <summary>
        /// The resource ID of the storage account of the data lake file system to be shared with the receiver.
        /// </summary>
        public readonly string StorageAccountId;

        [OutputConstructor]
        private GetDatasetDataLakeGen2Result(
            string displayName,

            string filePath,

            string fileSystemName,

            string folderPath,

            string id,

            string name,

            string shareId,

            string storageAccountId)
        {
            DisplayName = displayName;
            FilePath = filePath;
            FileSystemName = fileSystemName;
            FolderPath = folderPath;
            Id = id;
            Name = name;
            ShareId = shareId;
            StorageAccountId = storageAccountId;
        }
    }
}
