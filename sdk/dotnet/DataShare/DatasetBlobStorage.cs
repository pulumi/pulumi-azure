// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.DataShare
{
    /// <summary>
    /// Manages a Data Share Blob Storage Dataset.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// using AzureAD = Pulumi.AzureAD;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new Azure.Core.ResourceGroupArgs
    ///         {
    ///             Location = "West Europe",
    ///         });
    ///         var exampleAccount = new Azure.DataShare.Account("exampleAccount", new Azure.DataShare.AccountArgs
    ///         {
    ///             Location = exampleResourceGroup.Location,
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             Identity = new Azure.DataShare.Inputs.AccountIdentityArgs
    ///             {
    ///                 Type = "SystemAssigned",
    ///             },
    ///         });
    ///         var exampleShare = new Azure.DataShare.Share("exampleShare", new Azure.DataShare.ShareArgs
    ///         {
    ///             AccountId = exampleAccount.Id,
    ///             Kind = "CopyBased",
    ///         });
    ///         var exampleStorage_accountAccount = new Azure.Storage.Account("exampleStorage/accountAccount", new Azure.Storage.AccountArgs
    ///         {
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             Location = exampleResourceGroup.Location,
    ///             AccountTier = "Standard",
    ///             AccountReplicationType = "RAGRS",
    ///         });
    ///         var exampleContainer = new Azure.Storage.Container("exampleContainer", new Azure.Storage.ContainerArgs
    ///         {
    ///             StorageAccountName = exampleStorage / accountAccount.Name,
    ///             ContainerAccessType = "container",
    ///         });
    ///         var exampleServicePrincipal = exampleAccount.Name.Apply(name =&gt; AzureAD.GetServicePrincipal.InvokeAsync(new AzureAD.GetServicePrincipalArgs
    ///         {
    ///             DisplayName = name,
    ///         }));
    ///         var exampleAssignment = new Azure.Authorization.Assignment("exampleAssignment", new Azure.Authorization.AssignmentArgs
    ///         {
    ///             Scope = exampleStorage / accountAccount.Id,
    ///             RoleDefinitionName = "Storage Blob Data Reader",
    ///             PrincipalId = exampleServicePrincipal.Apply(exampleServicePrincipal =&gt; exampleServicePrincipal.ObjectId),
    ///         });
    ///         var exampleDatasetBlobStorage = new Azure.DataShare.DatasetBlobStorage("exampleDatasetBlobStorage", new Azure.DataShare.DatasetBlobStorageArgs
    ///         {
    ///             DataShareId = exampleShare.Id,
    ///             ContainerName = exampleContainer.Name,
    ///             StorageAccount = new Azure.DataShare.Inputs.DatasetBlobStorageStorageAccountArgs
    ///             {
    ///                 Name = exampleStorage / accountAccount.Name,
    ///                 ResourceGroupName = exampleStorage / accountAccount.ResourceGroupName,
    ///                 SubscriptionId = "00000000-0000-0000-0000-000000000000",
    ///             },
    ///             FilePath = "myfile.txt",
    ///         }, new CustomResourceOptions
    ///         {
    ///             DependsOn = 
    ///             {
    ///                 exampleAssignment,
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Data Share Blob Storage Datasets can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:datashare/datasetBlobStorage:DatasetBlobStorage example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DataShare/accounts/account1/shares/share1/dataSets/dataSet1
    /// ```
    /// </summary>
    public partial class DatasetBlobStorage : Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the storage account container to be shared with the receiver. Changing this forces a new Data Share Blob Storage Dataset to be created.
        /// </summary>
        [Output("containerName")]
        public Output<string> ContainerName { get; private set; } = null!;

        /// <summary>
        /// The ID of the Data Share in which this Data Share Blob Storage Dataset should be created. Changing this forces a new Data Share Blob Storage Dataset to be created.
        /// </summary>
        [Output("dataShareId")]
        public Output<string> DataShareId { get; private set; } = null!;

        /// <summary>
        /// The name of the Data Share Dataset.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// The path of the file in the storage container to be shared with the receiver. Changing this forces a new Data Share Blob Storage Dataset to be created.
        /// </summary>
        [Output("filePath")]
        public Output<string?> FilePath { get; private set; } = null!;

        /// <summary>
        /// The path of the folder in the storage container to be shared with the receiver. Changing this forces a new Data Share Blob Storage Dataset to be created.
        /// </summary>
        [Output("folderPath")]
        public Output<string?> FolderPath { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Data Share Blob Storage Dataset. Changing this forces a new Data Share Blob Storage Dataset to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A `storage_account` block as defined below.
        /// </summary>
        [Output("storageAccount")]
        public Output<Outputs.DatasetBlobStorageStorageAccount> StorageAccount { get; private set; } = null!;


        /// <summary>
        /// Create a DatasetBlobStorage resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DatasetBlobStorage(string name, DatasetBlobStorageArgs args, CustomResourceOptions? options = null)
            : base("azure:datashare/datasetBlobStorage:DatasetBlobStorage", name, args ?? new DatasetBlobStorageArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DatasetBlobStorage(string name, Input<string> id, DatasetBlobStorageState? state = null, CustomResourceOptions? options = null)
            : base("azure:datashare/datasetBlobStorage:DatasetBlobStorage", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DatasetBlobStorage resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DatasetBlobStorage Get(string name, Input<string> id, DatasetBlobStorageState? state = null, CustomResourceOptions? options = null)
        {
            return new DatasetBlobStorage(name, id, state, options);
        }
    }

    public sealed class DatasetBlobStorageArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the storage account container to be shared with the receiver. Changing this forces a new Data Share Blob Storage Dataset to be created.
        /// </summary>
        [Input("containerName", required: true)]
        public Input<string> ContainerName { get; set; } = null!;

        /// <summary>
        /// The ID of the Data Share in which this Data Share Blob Storage Dataset should be created. Changing this forces a new Data Share Blob Storage Dataset to be created.
        /// </summary>
        [Input("dataShareId", required: true)]
        public Input<string> DataShareId { get; set; } = null!;

        /// <summary>
        /// The path of the file in the storage container to be shared with the receiver. Changing this forces a new Data Share Blob Storage Dataset to be created.
        /// </summary>
        [Input("filePath")]
        public Input<string>? FilePath { get; set; }

        /// <summary>
        /// The path of the folder in the storage container to be shared with the receiver. Changing this forces a new Data Share Blob Storage Dataset to be created.
        /// </summary>
        [Input("folderPath")]
        public Input<string>? FolderPath { get; set; }

        /// <summary>
        /// The name which should be used for this Data Share Blob Storage Dataset. Changing this forces a new Data Share Blob Storage Dataset to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A `storage_account` block as defined below.
        /// </summary>
        [Input("storageAccount", required: true)]
        public Input<Inputs.DatasetBlobStorageStorageAccountArgs> StorageAccount { get; set; } = null!;

        public DatasetBlobStorageArgs()
        {
        }
    }

    public sealed class DatasetBlobStorageState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the storage account container to be shared with the receiver. Changing this forces a new Data Share Blob Storage Dataset to be created.
        /// </summary>
        [Input("containerName")]
        public Input<string>? ContainerName { get; set; }

        /// <summary>
        /// The ID of the Data Share in which this Data Share Blob Storage Dataset should be created. Changing this forces a new Data Share Blob Storage Dataset to be created.
        /// </summary>
        [Input("dataShareId")]
        public Input<string>? DataShareId { get; set; }

        /// <summary>
        /// The name of the Data Share Dataset.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The path of the file in the storage container to be shared with the receiver. Changing this forces a new Data Share Blob Storage Dataset to be created.
        /// </summary>
        [Input("filePath")]
        public Input<string>? FilePath { get; set; }

        /// <summary>
        /// The path of the folder in the storage container to be shared with the receiver. Changing this forces a new Data Share Blob Storage Dataset to be created.
        /// </summary>
        [Input("folderPath")]
        public Input<string>? FolderPath { get; set; }

        /// <summary>
        /// The name which should be used for this Data Share Blob Storage Dataset. Changing this forces a new Data Share Blob Storage Dataset to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A `storage_account` block as defined below.
        /// </summary>
        [Input("storageAccount")]
        public Input<Inputs.DatasetBlobStorageStorageAccountGetArgs>? StorageAccount { get; set; }

        public DatasetBlobStorageState()
        {
        }
    }
}
