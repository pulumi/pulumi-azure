// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi.Utilities;

namespace Pulumi.Azure.DataShare
{
    public static class GetShare
    {
        /// <summary>
        /// Use this data source to access information about an existing Data Share.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var exampleAccount = Output.Create(Azure.DataShare.GetAccount.InvokeAsync(new Azure.DataShare.GetAccountArgs
        ///         {
        ///             Name = "example-account",
        ///             ResourceGroupName = "example-resource-group",
        ///         }));
        ///         var exampleShare = exampleAccount.Apply(exampleAccount =&gt; Output.Create(Azure.DataShare.GetShare.InvokeAsync(new Azure.DataShare.GetShareArgs
        ///         {
        ///             Name = "existing",
        ///             AccountId = exampleAccount.Id,
        ///         })));
        ///         this.Id = exampleShare.Apply(exampleShare =&gt; exampleShare.Id);
        ///     }
        /// 
        ///     [Output("id")]
        ///     public Output&lt;string&gt; Id { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetShareResult> InvokeAsync(GetShareArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetShareResult>("azure:datashare/getShare:getShare", args ?? new GetShareArgs(), options.WithVersion());

        /// <summary>
        /// Use this data source to access information about an existing Data Share.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var exampleAccount = Output.Create(Azure.DataShare.GetAccount.InvokeAsync(new Azure.DataShare.GetAccountArgs
        ///         {
        ///             Name = "example-account",
        ///             ResourceGroupName = "example-resource-group",
        ///         }));
        ///         var exampleShare = exampleAccount.Apply(exampleAccount =&gt; Output.Create(Azure.DataShare.GetShare.InvokeAsync(new Azure.DataShare.GetShareArgs
        ///         {
        ///             Name = "existing",
        ///             AccountId = exampleAccount.Id,
        ///         })));
        ///         this.Id = exampleShare.Apply(exampleShare =&gt; exampleShare.Id);
        ///     }
        /// 
        ///     [Output("id")]
        ///     public Output&lt;string&gt; Id { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetShareResult> Invoke(GetShareInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetShareResult>("azure:datashare/getShare:getShare", args ?? new GetShareInvokeArgs(), options.WithVersion());
    }


    public sealed class GetShareArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the Data Share account in which the Data Share is created.
        /// </summary>
        [Input("accountId", required: true)]
        public string AccountId { get; set; } = null!;

        /// <summary>
        /// The name of this Data Share.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetShareArgs()
        {
        }
    }

    public sealed class GetShareInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the Data Share account in which the Data Share is created.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// The name of this Data Share.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetShareInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetShareResult
    {
        public readonly string AccountId;
        /// <summary>
        /// The description of the Data Share.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The kind of the Data Share.
        /// </summary>
        public readonly string Kind;
        /// <summary>
        /// The name of the snapshot schedule.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// A `snapshot_schedule` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetShareSnapshotScheduleResult> SnapshotSchedules;
        /// <summary>
        /// The terms of the Data Share.
        /// </summary>
        public readonly string Terms;

        [OutputConstructor]
        private GetShareResult(
            string accountId,

            string description,

            string id,

            string kind,

            string name,

            ImmutableArray<Outputs.GetShareSnapshotScheduleResult> snapshotSchedules,

            string terms)
        {
            AccountId = accountId;
            Description = description;
            Id = id;
            Kind = kind;
            Name = name;
            SnapshotSchedules = snapshotSchedules;
            Terms = terms;
        }
    }
}
