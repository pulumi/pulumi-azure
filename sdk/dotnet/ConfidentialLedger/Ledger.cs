// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ConfidentialLedger
{
    /// <summary>
    /// Manages a Confidential Ledger.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var current = Output.Create(Azure.Core.GetClientConfig.InvokeAsync());
    ///         var example = new Azure.Core.ResourceGroup("example", new Azure.Core.ResourceGroupArgs
    ///         {
    ///             Location = "West Europe",
    ///         });
    ///         var ledger = new Azure.ConfidentialLedger.Ledger("ledger", new Azure.ConfidentialLedger.LedgerArgs
    ///         {
    ///             ResourceGroupName = example.Name,
    ///             Location = example.Location,
    ///             LedgerType = "Private",
    ///             AzureadBasedServicePrincipals = 
    ///             {
    ///                 new Azure.ConfidentialLedger.Inputs.LedgerAzureadBasedServicePrincipalArgs
    ///                 {
    ///                     PrincipalId = current.Apply(current =&gt; current.ObjectId),
    ///                     TenantId = current.Apply(current =&gt; current.TenantId),
    ///                     LedgerRoleName = "Administrator",
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Confidential Ledgers can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:confidentialledger/ledger:Ledger example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/example-group/providers/Microsoft.ConfidentialLedger/ledgers/example-ledger
    /// ```
    /// </summary>
    [AzureResourceType("azure:confidentialledger/ledger:Ledger")]
    public partial class Ledger : Pulumi.CustomResource
    {
        [Output("azureadBasedServicePrincipals")]
        public Output<ImmutableArray<Outputs.LedgerAzureadBasedServicePrincipal>> AzureadBasedServicePrincipals { get; private set; } = null!;

        [Output("certificateBasedSecurityPrincipals")]
        public Output<ImmutableArray<Outputs.LedgerCertificateBasedSecurityPrincipal>> CertificateBasedSecurityPrincipals { get; private set; } = null!;

        /// <summary>
        /// The Identity Service Endpoint for this Confidential Ledger.
        /// </summary>
        [Output("identityServiceEndpoint")]
        public Output<string> IdentityServiceEndpoint { get; private set; } = null!;

        /// <summary>
        /// The Endpoint for this Confidential Ledger.
        /// </summary>
        [Output("ledgerEndpoint")]
        public Output<string> LedgerEndpoint { get; private set; } = null!;

        /// <summary>
        /// Specifies the type of Confidential Ledger. Possible values are `Private` and `Public`. Changing this forces a new resource to be created.
        /// </summary>
        [Output("ledgerType")]
        public Output<string> LedgerType { get; private set; } = null!;

        /// <summary>
        /// Specifies the supported Azure location where the Confidential Ledger exists. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the Confidential Ledger. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Confidential Ledger exists. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the Confidential Ledger.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a Ledger resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Ledger(string name, LedgerArgs args, CustomResourceOptions? options = null)
            : base("azure:confidentialledger/ledger:Ledger", name, args ?? new LedgerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Ledger(string name, Input<string> id, LedgerState? state = null, CustomResourceOptions? options = null)
            : base("azure:confidentialledger/ledger:Ledger", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Ledger resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Ledger Get(string name, Input<string> id, LedgerState? state = null, CustomResourceOptions? options = null)
        {
            return new Ledger(name, id, state, options);
        }
    }

    public sealed class LedgerArgs : Pulumi.ResourceArgs
    {
        [Input("azureadBasedServicePrincipals", required: true)]
        private InputList<Inputs.LedgerAzureadBasedServicePrincipalArgs>? _azureadBasedServicePrincipals;
        public InputList<Inputs.LedgerAzureadBasedServicePrincipalArgs> AzureadBasedServicePrincipals
        {
            get => _azureadBasedServicePrincipals ?? (_azureadBasedServicePrincipals = new InputList<Inputs.LedgerAzureadBasedServicePrincipalArgs>());
            set => _azureadBasedServicePrincipals = value;
        }

        [Input("certificateBasedSecurityPrincipals")]
        private InputList<Inputs.LedgerCertificateBasedSecurityPrincipalArgs>? _certificateBasedSecurityPrincipals;
        public InputList<Inputs.LedgerCertificateBasedSecurityPrincipalArgs> CertificateBasedSecurityPrincipals
        {
            get => _certificateBasedSecurityPrincipals ?? (_certificateBasedSecurityPrincipals = new InputList<Inputs.LedgerCertificateBasedSecurityPrincipalArgs>());
            set => _certificateBasedSecurityPrincipals = value;
        }

        /// <summary>
        /// Specifies the type of Confidential Ledger. Possible values are `Private` and `Public`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("ledgerType", required: true)]
        public Input<string> LedgerType { get; set; } = null!;

        /// <summary>
        /// Specifies the supported Azure location where the Confidential Ledger exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Specifies the name of the Confidential Ledger. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Confidential Ledger exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the Confidential Ledger.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public LedgerArgs()
        {
        }
    }

    public sealed class LedgerState : Pulumi.ResourceArgs
    {
        [Input("azureadBasedServicePrincipals")]
        private InputList<Inputs.LedgerAzureadBasedServicePrincipalGetArgs>? _azureadBasedServicePrincipals;
        public InputList<Inputs.LedgerAzureadBasedServicePrincipalGetArgs> AzureadBasedServicePrincipals
        {
            get => _azureadBasedServicePrincipals ?? (_azureadBasedServicePrincipals = new InputList<Inputs.LedgerAzureadBasedServicePrincipalGetArgs>());
            set => _azureadBasedServicePrincipals = value;
        }

        [Input("certificateBasedSecurityPrincipals")]
        private InputList<Inputs.LedgerCertificateBasedSecurityPrincipalGetArgs>? _certificateBasedSecurityPrincipals;
        public InputList<Inputs.LedgerCertificateBasedSecurityPrincipalGetArgs> CertificateBasedSecurityPrincipals
        {
            get => _certificateBasedSecurityPrincipals ?? (_certificateBasedSecurityPrincipals = new InputList<Inputs.LedgerCertificateBasedSecurityPrincipalGetArgs>());
            set => _certificateBasedSecurityPrincipals = value;
        }

        /// <summary>
        /// The Identity Service Endpoint for this Confidential Ledger.
        /// </summary>
        [Input("identityServiceEndpoint")]
        public Input<string>? IdentityServiceEndpoint { get; set; }

        /// <summary>
        /// The Endpoint for this Confidential Ledger.
        /// </summary>
        [Input("ledgerEndpoint")]
        public Input<string>? LedgerEndpoint { get; set; }

        /// <summary>
        /// Specifies the type of Confidential Ledger. Possible values are `Private` and `Public`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("ledgerType")]
        public Input<string>? LedgerType { get; set; }

        /// <summary>
        /// Specifies the supported Azure location where the Confidential Ledger exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Specifies the name of the Confidential Ledger. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Confidential Ledger exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the Confidential Ledger.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public LedgerState()
        {
        }
    }
}
