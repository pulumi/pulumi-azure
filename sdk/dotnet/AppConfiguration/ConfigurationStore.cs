// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.AppConfiguration
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var appconf = new Azure.AppConfiguration.ConfigurationStore("appconf", new()
    ///     {
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///     });
    /// 
    /// });
    /// ```
    /// ### Encryption)
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleUserAssignedIdentity = new Azure.Authorization.UserAssignedIdentity("exampleUserAssignedIdentity", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///     });
    /// 
    ///     var current = Azure.Core.GetClientConfig.Invoke();
    /// 
    ///     var exampleKeyVault = new Azure.KeyVault.KeyVault("exampleKeyVault", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         TenantId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.TenantId),
    ///         SkuName = "standard",
    ///         SoftDeleteRetentionDays = 7,
    ///         PurgeProtectionEnabled = true,
    ///     });
    /// 
    ///     var server = new Azure.KeyVault.AccessPolicy("server", new()
    ///     {
    ///         KeyVaultId = exampleKeyVault.Id,
    ///         TenantId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.TenantId),
    ///         ObjectId = exampleUserAssignedIdentity.PrincipalId,
    ///         KeyPermissions = new[]
    ///         {
    ///             "Get",
    ///             "UnwrapKey",
    ///             "WrapKey",
    ///         },
    ///         SecretPermissions = new[]
    ///         {
    ///             "Get",
    ///         },
    ///     });
    /// 
    ///     var client = new Azure.KeyVault.AccessPolicy("client", new()
    ///     {
    ///         KeyVaultId = exampleKeyVault.Id,
    ///         TenantId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.TenantId),
    ///         ObjectId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.ObjectId),
    ///         KeyPermissions = new[]
    ///         {
    ///             "Get",
    ///             "Create",
    ///             "Delete",
    ///             "List",
    ///             "Restore",
    ///             "Recover",
    ///             "UnwrapKey",
    ///             "WrapKey",
    ///             "Purge",
    ///             "Encrypt",
    ///             "Decrypt",
    ///             "Sign",
    ///             "Verify",
    ///             "GetRotationPolicy",
    ///         },
    ///         SecretPermissions = new[]
    ///         {
    ///             "Get",
    ///         },
    ///     });
    /// 
    ///     var exampleKey = new Azure.KeyVault.Key("exampleKey", new()
    ///     {
    ///         KeyVaultId = exampleKeyVault.Id,
    ///         KeyType = "RSA",
    ///         KeySize = 2048,
    ///         KeyOpts = new[]
    ///         {
    ///             "decrypt",
    ///             "encrypt",
    ///             "sign",
    ///             "unwrapKey",
    ///             "verify",
    ///             "wrapKey",
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             client,
    ///             server,
    ///         },
    ///     });
    /// 
    ///     var exampleConfigurationStore = new Azure.AppConfiguration.ConfigurationStore("exampleConfigurationStore", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         Sku = "standard",
    ///         LocalAuthEnabled = true,
    ///         PublicNetworkAccess = "Enabled",
    ///         PurgeProtectionEnabled = false,
    ///         SoftDeleteRetentionDays = 1,
    ///         Identity = new Azure.AppConfiguration.Inputs.ConfigurationStoreIdentityArgs
    ///         {
    ///             Type = "UserAssigned",
    ///             IdentityIds = new[]
    ///             {
    ///                 exampleUserAssignedIdentity.Id,
    ///             },
    ///         },
    ///         Encryption = new Azure.AppConfiguration.Inputs.ConfigurationStoreEncryptionArgs
    ///         {
    ///             KeyVaultKeyIdentifier = exampleKey.Id,
    ///             IdentityClientId = exampleUserAssignedIdentity.ClientId,
    ///         },
    ///         Replicas = new[]
    ///         {
    ///             new Azure.AppConfiguration.Inputs.ConfigurationStoreReplicaArgs
    ///             {
    ///                 Name = "replica1",
    ///                 Location = "West US",
    ///             },
    ///         },
    ///         Tags = 
    ///         {
    ///             { "environment", "development" },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             client,
    ///             server,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// App Configurations can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:appconfiguration/configurationStore:ConfigurationStore appconf /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.AppConfiguration/configurationStores/appConf1
    /// ```
    /// </summary>
    [AzureResourceType("azure:appconfiguration/configurationStore:ConfigurationStore")]
    public partial class ConfigurationStore : global::Pulumi.CustomResource
    {
        /// <summary>
        /// An `encryption` block as defined below.
        /// </summary>
        [Output("encryption")]
        public Output<Outputs.ConfigurationStoreEncryption?> Encryption { get; private set; } = null!;

        /// <summary>
        /// The URL of the App Configuration Replica.
        /// </summary>
        [Output("endpoint")]
        public Output<string> Endpoint { get; private set; } = null!;

        /// <summary>
        /// An `identity` block as defined below.
        /// 
        /// &gt; **NOTE:** Azure does not allow a downgrade from `standard` to `free`.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.ConfigurationStoreIdentity?> Identity { get; private set; } = null!;

        /// <summary>
        /// Whether local authentication methods is enabled. Defaults to `true`.
        /// </summary>
        [Output("localAuthEnabled")]
        public Output<bool?> LocalAuthEnabled { get; private set; } = null!;

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the App Configuration. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A `primary_read_key` block as defined below containing the primary read access key.
        /// </summary>
        [Output("primaryReadKeys")]
        public Output<ImmutableArray<Outputs.ConfigurationStorePrimaryReadKey>> PrimaryReadKeys { get; private set; } = null!;

        /// <summary>
        /// A `primary_write_key` block as defined below containing the primary write access key.
        /// </summary>
        [Output("primaryWriteKeys")]
        public Output<ImmutableArray<Outputs.ConfigurationStorePrimaryWriteKey>> PrimaryWriteKeys { get; private set; } = null!;

        /// <summary>
        /// The Public Network Access setting of the App Configuration. Possible values are `Enabled` and `Disabled`.
        /// 
        /// &gt; **NOTE:** If `public_network_access` is not specified, the App Configuration will be created as  `Automatic`. However, once a different value is defined, can not be set again as automatic.
        /// </summary>
        [Output("publicNetworkAccess")]
        public Output<string?> PublicNetworkAccess { get; private set; } = null!;

        /// <summary>
        /// Whether Purge Protection is enabled. This field only works for `standard` sku. Defaults to `false`.
        /// 
        /// !&gt; **Note:** Once Purge Protection has been enabled it's not possible to disable it. Deleting the App Configuration with Purge Protection enabled will schedule the App Configuration to be deleted (which will happen by Azure in the configured number of days).
        /// </summary>
        [Output("purgeProtectionEnabled")]
        public Output<bool?> PurgeProtectionEnabled { get; private set; } = null!;

        /// <summary>
        /// One or more `replica` blocks as defined below.
        /// </summary>
        [Output("replicas")]
        public Output<ImmutableArray<Outputs.ConfigurationStoreReplica>> Replicas { get; private set; } = null!;

        /// <summary>
        /// The name of the resource group in which to create the App Configuration. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// A `secondary_read_key` block as defined below containing the secondary read access key.
        /// </summary>
        [Output("secondaryReadKeys")]
        public Output<ImmutableArray<Outputs.ConfigurationStoreSecondaryReadKey>> SecondaryReadKeys { get; private set; } = null!;

        /// <summary>
        /// A `secondary_write_key` block as defined below containing the secondary write access key.
        /// </summary>
        [Output("secondaryWriteKeys")]
        public Output<ImmutableArray<Outputs.ConfigurationStoreSecondaryWriteKey>> SecondaryWriteKeys { get; private set; } = null!;

        /// <summary>
        /// The SKU name of the App Configuration. Possible values are `free` and `standard`. Defaults to `free`.
        /// </summary>
        [Output("sku")]
        public Output<string?> Sku { get; private set; } = null!;

        /// <summary>
        /// The number of days that items should be retained for once soft-deleted. This field only works for `standard` sku. This value can be between `1` and `7` days. Defaults to `7`. Changing this forces a new resource to be created.
        /// 
        /// &gt; **Note:** If Purge Protection is enabled, this field can only be configured one time and cannot be updated.
        /// </summary>
        [Output("softDeleteRetentionDays")]
        public Output<int?> SoftDeleteRetentionDays { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a ConfigurationStore resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ConfigurationStore(string name, ConfigurationStoreArgs args, CustomResourceOptions? options = null)
            : base("azure:appconfiguration/configurationStore:ConfigurationStore", name, args ?? new ConfigurationStoreArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ConfigurationStore(string name, Input<string> id, ConfigurationStoreState? state = null, CustomResourceOptions? options = null)
            : base("azure:appconfiguration/configurationStore:ConfigurationStore", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ConfigurationStore resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ConfigurationStore Get(string name, Input<string> id, ConfigurationStoreState? state = null, CustomResourceOptions? options = null)
        {
            return new ConfigurationStore(name, id, state, options);
        }
    }

    public sealed class ConfigurationStoreArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An `encryption` block as defined below.
        /// </summary>
        [Input("encryption")]
        public Input<Inputs.ConfigurationStoreEncryptionArgs>? Encryption { get; set; }

        /// <summary>
        /// An `identity` block as defined below.
        /// 
        /// &gt; **NOTE:** Azure does not allow a downgrade from `standard` to `free`.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.ConfigurationStoreIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// Whether local authentication methods is enabled. Defaults to `true`.
        /// </summary>
        [Input("localAuthEnabled")]
        public Input<bool>? LocalAuthEnabled { get; set; }

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Specifies the name of the App Configuration. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The Public Network Access setting of the App Configuration. Possible values are `Enabled` and `Disabled`.
        /// 
        /// &gt; **NOTE:** If `public_network_access` is not specified, the App Configuration will be created as  `Automatic`. However, once a different value is defined, can not be set again as automatic.
        /// </summary>
        [Input("publicNetworkAccess")]
        public Input<string>? PublicNetworkAccess { get; set; }

        /// <summary>
        /// Whether Purge Protection is enabled. This field only works for `standard` sku. Defaults to `false`.
        /// 
        /// !&gt; **Note:** Once Purge Protection has been enabled it's not possible to disable it. Deleting the App Configuration with Purge Protection enabled will schedule the App Configuration to be deleted (which will happen by Azure in the configured number of days).
        /// </summary>
        [Input("purgeProtectionEnabled")]
        public Input<bool>? PurgeProtectionEnabled { get; set; }

        [Input("replicas")]
        private InputList<Inputs.ConfigurationStoreReplicaArgs>? _replicas;

        /// <summary>
        /// One or more `replica` blocks as defined below.
        /// </summary>
        public InputList<Inputs.ConfigurationStoreReplicaArgs> Replicas
        {
            get => _replicas ?? (_replicas = new InputList<Inputs.ConfigurationStoreReplicaArgs>());
            set => _replicas = value;
        }

        /// <summary>
        /// The name of the resource group in which to create the App Configuration. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The SKU name of the App Configuration. Possible values are `free` and `standard`. Defaults to `free`.
        /// </summary>
        [Input("sku")]
        public Input<string>? Sku { get; set; }

        /// <summary>
        /// The number of days that items should be retained for once soft-deleted. This field only works for `standard` sku. This value can be between `1` and `7` days. Defaults to `7`. Changing this forces a new resource to be created.
        /// 
        /// &gt; **Note:** If Purge Protection is enabled, this field can only be configured one time and cannot be updated.
        /// </summary>
        [Input("softDeleteRetentionDays")]
        public Input<int>? SoftDeleteRetentionDays { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public ConfigurationStoreArgs()
        {
        }
        public static new ConfigurationStoreArgs Empty => new ConfigurationStoreArgs();
    }

    public sealed class ConfigurationStoreState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An `encryption` block as defined below.
        /// </summary>
        [Input("encryption")]
        public Input<Inputs.ConfigurationStoreEncryptionGetArgs>? Encryption { get; set; }

        /// <summary>
        /// The URL of the App Configuration Replica.
        /// </summary>
        [Input("endpoint")]
        public Input<string>? Endpoint { get; set; }

        /// <summary>
        /// An `identity` block as defined below.
        /// 
        /// &gt; **NOTE:** Azure does not allow a downgrade from `standard` to `free`.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.ConfigurationStoreIdentityGetArgs>? Identity { get; set; }

        /// <summary>
        /// Whether local authentication methods is enabled. Defaults to `true`.
        /// </summary>
        [Input("localAuthEnabled")]
        public Input<bool>? LocalAuthEnabled { get; set; }

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Specifies the name of the App Configuration. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("primaryReadKeys")]
        private InputList<Inputs.ConfigurationStorePrimaryReadKeyGetArgs>? _primaryReadKeys;

        /// <summary>
        /// A `primary_read_key` block as defined below containing the primary read access key.
        /// </summary>
        public InputList<Inputs.ConfigurationStorePrimaryReadKeyGetArgs> PrimaryReadKeys
        {
            get => _primaryReadKeys ?? (_primaryReadKeys = new InputList<Inputs.ConfigurationStorePrimaryReadKeyGetArgs>());
            set => _primaryReadKeys = value;
        }

        [Input("primaryWriteKeys")]
        private InputList<Inputs.ConfigurationStorePrimaryWriteKeyGetArgs>? _primaryWriteKeys;

        /// <summary>
        /// A `primary_write_key` block as defined below containing the primary write access key.
        /// </summary>
        public InputList<Inputs.ConfigurationStorePrimaryWriteKeyGetArgs> PrimaryWriteKeys
        {
            get => _primaryWriteKeys ?? (_primaryWriteKeys = new InputList<Inputs.ConfigurationStorePrimaryWriteKeyGetArgs>());
            set => _primaryWriteKeys = value;
        }

        /// <summary>
        /// The Public Network Access setting of the App Configuration. Possible values are `Enabled` and `Disabled`.
        /// 
        /// &gt; **NOTE:** If `public_network_access` is not specified, the App Configuration will be created as  `Automatic`. However, once a different value is defined, can not be set again as automatic.
        /// </summary>
        [Input("publicNetworkAccess")]
        public Input<string>? PublicNetworkAccess { get; set; }

        /// <summary>
        /// Whether Purge Protection is enabled. This field only works for `standard` sku. Defaults to `false`.
        /// 
        /// !&gt; **Note:** Once Purge Protection has been enabled it's not possible to disable it. Deleting the App Configuration with Purge Protection enabled will schedule the App Configuration to be deleted (which will happen by Azure in the configured number of days).
        /// </summary>
        [Input("purgeProtectionEnabled")]
        public Input<bool>? PurgeProtectionEnabled { get; set; }

        [Input("replicas")]
        private InputList<Inputs.ConfigurationStoreReplicaGetArgs>? _replicas;

        /// <summary>
        /// One or more `replica` blocks as defined below.
        /// </summary>
        public InputList<Inputs.ConfigurationStoreReplicaGetArgs> Replicas
        {
            get => _replicas ?? (_replicas = new InputList<Inputs.ConfigurationStoreReplicaGetArgs>());
            set => _replicas = value;
        }

        /// <summary>
        /// The name of the resource group in which to create the App Configuration. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        [Input("secondaryReadKeys")]
        private InputList<Inputs.ConfigurationStoreSecondaryReadKeyGetArgs>? _secondaryReadKeys;

        /// <summary>
        /// A `secondary_read_key` block as defined below containing the secondary read access key.
        /// </summary>
        public InputList<Inputs.ConfigurationStoreSecondaryReadKeyGetArgs> SecondaryReadKeys
        {
            get => _secondaryReadKeys ?? (_secondaryReadKeys = new InputList<Inputs.ConfigurationStoreSecondaryReadKeyGetArgs>());
            set => _secondaryReadKeys = value;
        }

        [Input("secondaryWriteKeys")]
        private InputList<Inputs.ConfigurationStoreSecondaryWriteKeyGetArgs>? _secondaryWriteKeys;

        /// <summary>
        /// A `secondary_write_key` block as defined below containing the secondary write access key.
        /// </summary>
        public InputList<Inputs.ConfigurationStoreSecondaryWriteKeyGetArgs> SecondaryWriteKeys
        {
            get => _secondaryWriteKeys ?? (_secondaryWriteKeys = new InputList<Inputs.ConfigurationStoreSecondaryWriteKeyGetArgs>());
            set => _secondaryWriteKeys = value;
        }

        /// <summary>
        /// The SKU name of the App Configuration. Possible values are `free` and `standard`. Defaults to `free`.
        /// </summary>
        [Input("sku")]
        public Input<string>? Sku { get; set; }

        /// <summary>
        /// The number of days that items should be retained for once soft-deleted. This field only works for `standard` sku. This value can be between `1` and `7` days. Defaults to `7`. Changing this forces a new resource to be created.
        /// 
        /// &gt; **Note:** If Purge Protection is enabled, this field can only be configured one time and cannot be updated.
        /// </summary>
        [Input("softDeleteRetentionDays")]
        public Input<int>? SoftDeleteRetentionDays { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public ConfigurationStoreState()
        {
        }
        public static new ConfigurationStoreState Empty => new ConfigurationStoreState();
    }
}
