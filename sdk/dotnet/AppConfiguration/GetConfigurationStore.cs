// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.AppConfiguration
{
    public static class GetConfigurationStore
    {
        /// <summary>
        /// Use this data source to access information about an existing App Configuration.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.AppConfiguration.GetConfigurationStore.Invoke(new()
        ///     {
        ///         Name = "existing",
        ///         ResourceGroupName = "existing",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getConfigurationStoreResult =&gt; getConfigurationStoreResult.Id),
        ///     };
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Microsoft.AppConfiguration` - 2024-05-01
        /// </summary>
        public static Task<GetConfigurationStoreResult> InvokeAsync(GetConfigurationStoreArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetConfigurationStoreResult>("azure:appconfiguration/getConfigurationStore:getConfigurationStore", args ?? new GetConfigurationStoreArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing App Configuration.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.AppConfiguration.GetConfigurationStore.Invoke(new()
        ///     {
        ///         Name = "existing",
        ///         ResourceGroupName = "existing",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getConfigurationStoreResult =&gt; getConfigurationStoreResult.Id),
        ///     };
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Microsoft.AppConfiguration` - 2024-05-01
        /// </summary>
        public static Output<GetConfigurationStoreResult> Invoke(GetConfigurationStoreInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetConfigurationStoreResult>("azure:appconfiguration/getConfigurationStore:getConfigurationStore", args ?? new GetConfigurationStoreInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing App Configuration.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.AppConfiguration.GetConfigurationStore.Invoke(new()
        ///     {
        ///         Name = "existing",
        ///         ResourceGroupName = "existing",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getConfigurationStoreResult =&gt; getConfigurationStoreResult.Id),
        ///     };
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Microsoft.AppConfiguration` - 2024-05-01
        /// </summary>
        public static Output<GetConfigurationStoreResult> Invoke(GetConfigurationStoreInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetConfigurationStoreResult>("azure:appconfiguration/getConfigurationStore:getConfigurationStore", args ?? new GetConfigurationStoreInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetConfigurationStoreArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Name of this App Configuration.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the App Configuration exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetConfigurationStoreArgs()
        {
        }
        public static new GetConfigurationStoreArgs Empty => new GetConfigurationStoreArgs();
    }

    public sealed class GetConfigurationStoreInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Name of this App Configuration.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the App Configuration exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetConfigurationStoreInvokeArgs()
        {
        }
        public static new GetConfigurationStoreInvokeArgs Empty => new GetConfigurationStoreInvokeArgs();
    }


    [OutputType]
    public sealed class GetConfigurationStoreResult
    {
        /// <summary>
        /// The data plane proxy authentication mode.
        /// </summary>
        public readonly string DataPlaneProxyAuthenticationMode;
        /// <summary>
        /// Whether data plane proxy private link delegation is enabled.
        /// </summary>
        public readonly bool DataPlaneProxyPrivateLinkDelegationEnabled;
        /// <summary>
        /// An `encryption` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetConfigurationStoreEncryptionResult> Encryptions;
        /// <summary>
        /// The URL of the App Configuration Replica.
        /// </summary>
        public readonly string Endpoint;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetConfigurationStoreIdentityResult> Identities;
        /// <summary>
        /// Whether local authentication methods are enabled.
        /// </summary>
        public readonly bool LocalAuthEnabled;
        /// <summary>
        /// The supported Azure location where the App Configuration Replica exists.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the App Configuration Replica.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// A `primary_read_key` block as defined below containing the primary read access key.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetConfigurationStorePrimaryReadKeyResult> PrimaryReadKeys;
        /// <summary>
        /// A `primary_write_key` block as defined below containing the primary write access key.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetConfigurationStorePrimaryWriteKeyResult> PrimaryWriteKeys;
        /// <summary>
        /// The Public Network Access setting of this App Configuration.
        /// </summary>
        public readonly string PublicNetworkAccess;
        public readonly bool PublicNetworkAccessEnabled;
        /// <summary>
        /// Whether Purge Protection is enabled.
        /// </summary>
        public readonly bool PurgeProtectionEnabled;
        /// <summary>
        /// One or more `replica` blocks as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetConfigurationStoreReplicaResult> Replicas;
        public readonly string ResourceGroupName;
        /// <summary>
        /// A `secondary_read_key` block as defined below containing the secondary read access key.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetConfigurationStoreSecondaryReadKeyResult> SecondaryReadKeys;
        /// <summary>
        /// A `secondary_write_key` block as defined below containing the secondary write access key.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetConfigurationStoreSecondaryWriteKeyResult> SecondaryWriteKeys;
        /// <summary>
        /// The name of the SKU used for this App Configuration.
        /// </summary>
        public readonly string Sku;
        /// <summary>
        /// The number of days that items should be retained for once soft-deleted.
        /// </summary>
        public readonly int SoftDeleteRetentionDays;
        /// <summary>
        /// A mapping of tags assigned to the App Configuration.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;

        [OutputConstructor]
        private GetConfigurationStoreResult(
            string dataPlaneProxyAuthenticationMode,

            bool dataPlaneProxyPrivateLinkDelegationEnabled,

            ImmutableArray<Outputs.GetConfigurationStoreEncryptionResult> encryptions,

            string endpoint,

            string id,

            ImmutableArray<Outputs.GetConfigurationStoreIdentityResult> identities,

            bool localAuthEnabled,

            string location,

            string name,

            ImmutableArray<Outputs.GetConfigurationStorePrimaryReadKeyResult> primaryReadKeys,

            ImmutableArray<Outputs.GetConfigurationStorePrimaryWriteKeyResult> primaryWriteKeys,

            string publicNetworkAccess,

            bool publicNetworkAccessEnabled,

            bool purgeProtectionEnabled,

            ImmutableArray<Outputs.GetConfigurationStoreReplicaResult> replicas,

            string resourceGroupName,

            ImmutableArray<Outputs.GetConfigurationStoreSecondaryReadKeyResult> secondaryReadKeys,

            ImmutableArray<Outputs.GetConfigurationStoreSecondaryWriteKeyResult> secondaryWriteKeys,

            string sku,

            int softDeleteRetentionDays,

            ImmutableDictionary<string, string> tags)
        {
            DataPlaneProxyAuthenticationMode = dataPlaneProxyAuthenticationMode;
            DataPlaneProxyPrivateLinkDelegationEnabled = dataPlaneProxyPrivateLinkDelegationEnabled;
            Encryptions = encryptions;
            Endpoint = endpoint;
            Id = id;
            Identities = identities;
            LocalAuthEnabled = localAuthEnabled;
            Location = location;
            Name = name;
            PrimaryReadKeys = primaryReadKeys;
            PrimaryWriteKeys = primaryWriteKeys;
            PublicNetworkAccess = publicNetworkAccess;
            PublicNetworkAccessEnabled = publicNetworkAccessEnabled;
            PurgeProtectionEnabled = purgeProtectionEnabled;
            Replicas = replicas;
            ResourceGroupName = resourceGroupName;
            SecondaryReadKeys = secondaryReadKeys;
            SecondaryWriteKeys = secondaryWriteKeys;
            Sku = sku;
            SoftDeleteRetentionDays = softDeleteRetentionDays;
            Tags = tags;
        }
    }
}
