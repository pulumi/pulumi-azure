// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.AppConfiguration
{
    /// <summary>
    /// Manages an Azure App Configuration Key.
    /// 
    /// &gt; **Note:** App Configuration Keys are provisioned using a Data Plane API which requires the role `App Configuration Data Owner` on either the App Configuration or a parent scope (such as the Resource Group/Subscription). [More information can be found in the Azure Documentation for App Configuration](https://docs.microsoft.com/azure/azure-app-configuration/concept-enable-rbac#azure-built-in-roles-for-azure-app-configuration).
    /// 
    /// ## Example Usage
    /// ### `Kv` Type
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var appconf = new Azure.AppConfiguration.ConfigurationStore("appconf", new()
    ///     {
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///     });
    /// 
    ///     var current = Azure.Core.GetClientConfig.Invoke();
    /// 
    ///     var appconfDataowner = new Azure.Authorization.Assignment("appconfDataowner", new()
    ///     {
    ///         Scope = appconf.Id,
    ///         RoleDefinitionName = "App Configuration Data Owner",
    ///         PrincipalId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.ObjectId),
    ///     });
    /// 
    ///     var test = new Azure.AppConfiguration.ConfigurationKey("test", new()
    ///     {
    ///         ConfigurationStoreId = appconf.Id,
    ///         Key = "appConfKey1",
    ///         Label = "somelabel",
    ///         Value = "a test",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             appconfDataowner,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### `Vault` Type
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var appconf = new Azure.AppConfiguration.ConfigurationStore("appconf", new()
    ///     {
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///     });
    /// 
    ///     var current = Azure.Core.GetClientConfig.Invoke();
    /// 
    ///     var kv = new Azure.KeyVault.KeyVault("kv", new()
    ///     {
    ///         Location = azurerm_resource_group.Test.Location,
    ///         ResourceGroupName = azurerm_resource_group.Test.Name,
    ///         TenantId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.TenantId),
    ///         SkuName = "premium",
    ///         SoftDeleteRetentionDays = 7,
    ///         AccessPolicies = new[]
    ///         {
    ///             new Azure.KeyVault.Inputs.KeyVaultAccessPolicyArgs
    ///             {
    ///                 TenantId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.TenantId),
    ///                 ObjectId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.ObjectId),
    ///                 KeyPermissions = new[]
    ///                 {
    ///                     "Create",
    ///                     "Get",
    ///                 },
    ///                 SecretPermissions = new[]
    ///                 {
    ///                     "Set",
    ///                     "Get",
    ///                     "Delete",
    ///                     "Purge",
    ///                     "Recover",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var kvs = new Azure.KeyVault.Secret("kvs", new()
    ///     {
    ///         Value = "szechuan",
    ///         KeyVaultId = kv.Id,
    ///     });
    /// 
    ///     var appconfDataowner = new Azure.Authorization.Assignment("appconfDataowner", new()
    ///     {
    ///         Scope = appconf.Id,
    ///         RoleDefinitionName = "App Configuration Data Owner",
    ///         PrincipalId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.ObjectId),
    ///     });
    /// 
    ///     var test = new Azure.AppConfiguration.ConfigurationKey("test", new()
    ///     {
    ///         ConfigurationStoreId = azurerm_app_configuration.Test.Id,
    ///         Key = "key1",
    ///         Type = "vault",
    ///         Label = "label1",
    ///         VaultKeyReference = kvs.VersionlessId,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             appconfDataowner,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// App Configuration Keys can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:appconfiguration/configurationKey:ConfigurationKey test https://appconfname1.azconfig.io/kv/keyName?label=labelName
    /// ```
    /// 
    ///  If you wish to import a key with an empty label then simply leave label's name blank
    /// 
    /// ```sh
    ///  $ pulumi import azure:appconfiguration/configurationKey:ConfigurationKey test https://appconfname1.azconfig.io/kv/keyName?label=
    /// ```
    /// </summary>
    [AzureResourceType("azure:appconfiguration/configurationKey:ConfigurationKey")]
    public partial class ConfigurationKey : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies the id of the App Configuration. Changing this forces a new resource to be created.
        /// </summary>
        [Output("configurationStoreId")]
        public Output<string> ConfigurationStoreId { get; private set; } = null!;

        /// <summary>
        /// The content type of the App Configuration Key. This should only be set when type is set to `kv`.
        /// </summary>
        [Output("contentType")]
        public Output<string> ContentType { get; private set; } = null!;

        /// <summary>
        /// (Optional) The ETag of the key.
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// The name of the App Configuration Key to create. Changing this forces a new resource to be created.
        /// </summary>
        [Output("key")]
        public Output<string> Key { get; private set; } = null!;

        /// <summary>
        /// The label of the App Configuration Key. Changing this forces a new resource to be created.
        /// </summary>
        [Output("label")]
        public Output<string?> Label { get; private set; } = null!;

        /// <summary>
        /// Should this App Configuration Key be Locked to prevent changes?
        /// </summary>
        [Output("locked")]
        public Output<bool?> Locked { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of the App Configuration Key. It can either be `kv` (simple [key/value](https://docs.microsoft.com/azure/azure-app-configuration/concept-key-value)) or `vault` (where the value is a reference to a [Key Vault Secret](https://azure.microsoft.com/en-gb/services/key-vault/). Defaults to `kv`.
        /// </summary>
        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;

        /// <summary>
        /// The value of the App Configuration Key. This should only be set when type is set to `kv`.
        /// </summary>
        [Output("value")]
        public Output<string> Value { get; private set; } = null!;

        /// <summary>
        /// The ID of the vault secret this App Configuration Key refers to, when `type` is set to `vault`.
        /// 
        /// &gt; **NOTE:** When setting the `vault_key_reference` using the `id` will pin the value to specific version of the secret, to reference latest secret value use `versionless_id`
        /// </summary>
        [Output("vaultKeyReference")]
        public Output<string?> VaultKeyReference { get; private set; } = null!;


        /// <summary>
        /// Create a ConfigurationKey resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ConfigurationKey(string name, ConfigurationKeyArgs args, CustomResourceOptions? options = null)
            : base("azure:appconfiguration/configurationKey:ConfigurationKey", name, args ?? new ConfigurationKeyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ConfigurationKey(string name, Input<string> id, ConfigurationKeyState? state = null, CustomResourceOptions? options = null)
            : base("azure:appconfiguration/configurationKey:ConfigurationKey", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ConfigurationKey resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ConfigurationKey Get(string name, Input<string> id, ConfigurationKeyState? state = null, CustomResourceOptions? options = null)
        {
            return new ConfigurationKey(name, id, state, options);
        }
    }

    public sealed class ConfigurationKeyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the id of the App Configuration. Changing this forces a new resource to be created.
        /// </summary>
        [Input("configurationStoreId", required: true)]
        public Input<string> ConfigurationStoreId { get; set; } = null!;

        /// <summary>
        /// The content type of the App Configuration Key. This should only be set when type is set to `kv`.
        /// </summary>
        [Input("contentType")]
        public Input<string>? ContentType { get; set; }

        /// <summary>
        /// (Optional) The ETag of the key.
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        /// <summary>
        /// The name of the App Configuration Key to create. Changing this forces a new resource to be created.
        /// </summary>
        [Input("key", required: true)]
        public Input<string> Key { get; set; } = null!;

        /// <summary>
        /// The label of the App Configuration Key. Changing this forces a new resource to be created.
        /// </summary>
        [Input("label")]
        public Input<string>? Label { get; set; }

        /// <summary>
        /// Should this App Configuration Key be Locked to prevent changes?
        /// </summary>
        [Input("locked")]
        public Input<bool>? Locked { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The type of the App Configuration Key. It can either be `kv` (simple [key/value](https://docs.microsoft.com/azure/azure-app-configuration/concept-key-value)) or `vault` (where the value is a reference to a [Key Vault Secret](https://azure.microsoft.com/en-gb/services/key-vault/). Defaults to `kv`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The value of the App Configuration Key. This should only be set when type is set to `kv`.
        /// </summary>
        [Input("value")]
        public Input<string>? Value { get; set; }

        /// <summary>
        /// The ID of the vault secret this App Configuration Key refers to, when `type` is set to `vault`.
        /// 
        /// &gt; **NOTE:** When setting the `vault_key_reference` using the `id` will pin the value to specific version of the secret, to reference latest secret value use `versionless_id`
        /// </summary>
        [Input("vaultKeyReference")]
        public Input<string>? VaultKeyReference { get; set; }

        public ConfigurationKeyArgs()
        {
        }
        public static new ConfigurationKeyArgs Empty => new ConfigurationKeyArgs();
    }

    public sealed class ConfigurationKeyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the id of the App Configuration. Changing this forces a new resource to be created.
        /// </summary>
        [Input("configurationStoreId")]
        public Input<string>? ConfigurationStoreId { get; set; }

        /// <summary>
        /// The content type of the App Configuration Key. This should only be set when type is set to `kv`.
        /// </summary>
        [Input("contentType")]
        public Input<string>? ContentType { get; set; }

        /// <summary>
        /// (Optional) The ETag of the key.
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        /// <summary>
        /// The name of the App Configuration Key to create. Changing this forces a new resource to be created.
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// The label of the App Configuration Key. Changing this forces a new resource to be created.
        /// </summary>
        [Input("label")]
        public Input<string>? Label { get; set; }

        /// <summary>
        /// Should this App Configuration Key be Locked to prevent changes?
        /// </summary>
        [Input("locked")]
        public Input<bool>? Locked { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The type of the App Configuration Key. It can either be `kv` (simple [key/value](https://docs.microsoft.com/azure/azure-app-configuration/concept-key-value)) or `vault` (where the value is a reference to a [Key Vault Secret](https://azure.microsoft.com/en-gb/services/key-vault/). Defaults to `kv`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The value of the App Configuration Key. This should only be set when type is set to `kv`.
        /// </summary>
        [Input("value")]
        public Input<string>? Value { get; set; }

        /// <summary>
        /// The ID of the vault secret this App Configuration Key refers to, when `type` is set to `vault`.
        /// 
        /// &gt; **NOTE:** When setting the `vault_key_reference` using the `id` will pin the value to specific version of the secret, to reference latest secret value use `versionless_id`
        /// </summary>
        [Input("vaultKeyReference")]
        public Input<string>? VaultKeyReference { get; set; }

        public ConfigurationKeyState()
        {
        }
        public static new ConfigurationKeyState Empty => new ConfigurationKeyState();
    }
}
