// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Waf.Outputs
{

    [OutputType]
    public sealed class PolicyCustomRuleMatchCondition
    {
        /// <summary>
        /// A list of match values. This is **Required** when the `Operator` is not `Any`.
        /// </summary>
        public readonly ImmutableArray<string> MatchValues;
        /// <summary>
        /// One or more `MatchVariables` blocks as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.PolicyCustomRuleMatchConditionMatchVariable> MatchVariables;
        /// <summary>
        /// Describes if this is negate condition or not
        /// </summary>
        public readonly bool? NegationCondition;
        /// <summary>
        /// Describes operator to be matched. Possible values are `Any`, `IPMatch`, `GeoMatch`, `Equal`, `Contains`, `LessThan`, `GreaterThan`, `LessThanOrEqual`, `GreaterThanOrEqual`, `BeginsWith`, `EndsWith` and `Regex`.
        /// </summary>
        public readonly string Operator;
        /// <summary>
        /// A list of transformations to do before the match is attempted. Possible values are `HtmlEntityDecode`, `Lowercase`, `RemoveNulls`, `Trim`, `Uppercase`, `UrlDecode` and `UrlEncode`.
        /// </summary>
        public readonly ImmutableArray<string> Transforms;

        [OutputConstructor]
        private PolicyCustomRuleMatchCondition(
            ImmutableArray<string> matchValues,

            ImmutableArray<Outputs.PolicyCustomRuleMatchConditionMatchVariable> matchVariables,

            bool? negationCondition,

            string @operator,

            ImmutableArray<string> transforms)
        {
            MatchValues = matchValues;
            MatchVariables = matchVariables;
            NegationCondition = negationCondition;
            Operator = @operator;
            Transforms = transforms;
        }
    }
}
