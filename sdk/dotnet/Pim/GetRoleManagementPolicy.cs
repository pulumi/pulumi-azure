// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Pim
{
    public static class GetRoleManagementPolicy
    {
        /// <summary>
        /// Use this data source to get information on a role policy for an Azure Management Group, Subscription, Resource Group or resource.
        /// 
        /// ## Example Usage
        /// 
        /// ### Resource Group
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Core.GetResourceGroup.Invoke(new()
        ///     {
        ///         Name = "example-rg",
        ///     });
        /// 
        ///     var rgContributor = Azure.Authorization.GetRoleDefinition.Invoke(new()
        ///     {
        ///         Name = "Contributor",
        ///         Scope = example.Apply(getResourceGroupResult =&gt; getResourceGroupResult.Id),
        ///     });
        /// 
        ///     var exampleGetRoleManagementPolicy = Azure.Pim.GetRoleManagementPolicy.Invoke(new()
        ///     {
        ///         Scope = test.Id,
        ///         RoleDefinitionId = contributor.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### Management Group
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Management.GetGroup.Invoke(new()
        ///     {
        ///         Name = "example-group",
        ///     });
        /// 
        ///     var mgContributor = Azure.Authorization.GetRoleDefinition.Invoke(new()
        ///     {
        ///         Name = "Contributor",
        ///         Scope = exampleAzurermManagementGroup.Id,
        ///     });
        /// 
        ///     var exampleGetRoleManagementPolicy = Azure.Pim.GetRoleManagementPolicy.Invoke(new()
        ///     {
        ///         Scope = example.Apply(getGroupResult =&gt; getGroupResult.Id),
        ///         RoleDefinitionId = mgContributor.Apply(getRoleDefinitionResult =&gt; getRoleDefinitionResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetRoleManagementPolicyResult> InvokeAsync(GetRoleManagementPolicyArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRoleManagementPolicyResult>("azure:pim/getRoleManagementPolicy:getRoleManagementPolicy", args ?? new GetRoleManagementPolicyArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information on a role policy for an Azure Management Group, Subscription, Resource Group or resource.
        /// 
        /// ## Example Usage
        /// 
        /// ### Resource Group
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Core.GetResourceGroup.Invoke(new()
        ///     {
        ///         Name = "example-rg",
        ///     });
        /// 
        ///     var rgContributor = Azure.Authorization.GetRoleDefinition.Invoke(new()
        ///     {
        ///         Name = "Contributor",
        ///         Scope = example.Apply(getResourceGroupResult =&gt; getResourceGroupResult.Id),
        ///     });
        /// 
        ///     var exampleGetRoleManagementPolicy = Azure.Pim.GetRoleManagementPolicy.Invoke(new()
        ///     {
        ///         Scope = test.Id,
        ///         RoleDefinitionId = contributor.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### Management Group
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Management.GetGroup.Invoke(new()
        ///     {
        ///         Name = "example-group",
        ///     });
        /// 
        ///     var mgContributor = Azure.Authorization.GetRoleDefinition.Invoke(new()
        ///     {
        ///         Name = "Contributor",
        ///         Scope = exampleAzurermManagementGroup.Id,
        ///     });
        /// 
        ///     var exampleGetRoleManagementPolicy = Azure.Pim.GetRoleManagementPolicy.Invoke(new()
        ///     {
        ///         Scope = example.Apply(getGroupResult =&gt; getGroupResult.Id),
        ///         RoleDefinitionId = mgContributor.Apply(getRoleDefinitionResult =&gt; getRoleDefinitionResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRoleManagementPolicyResult> Invoke(GetRoleManagementPolicyInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRoleManagementPolicyResult>("azure:pim/getRoleManagementPolicy:getRoleManagementPolicy", args ?? new GetRoleManagementPolicyInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information on a role policy for an Azure Management Group, Subscription, Resource Group or resource.
        /// 
        /// ## Example Usage
        /// 
        /// ### Resource Group
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Core.GetResourceGroup.Invoke(new()
        ///     {
        ///         Name = "example-rg",
        ///     });
        /// 
        ///     var rgContributor = Azure.Authorization.GetRoleDefinition.Invoke(new()
        ///     {
        ///         Name = "Contributor",
        ///         Scope = example.Apply(getResourceGroupResult =&gt; getResourceGroupResult.Id),
        ///     });
        /// 
        ///     var exampleGetRoleManagementPolicy = Azure.Pim.GetRoleManagementPolicy.Invoke(new()
        ///     {
        ///         Scope = test.Id,
        ///         RoleDefinitionId = contributor.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### Management Group
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Management.GetGroup.Invoke(new()
        ///     {
        ///         Name = "example-group",
        ///     });
        /// 
        ///     var mgContributor = Azure.Authorization.GetRoleDefinition.Invoke(new()
        ///     {
        ///         Name = "Contributor",
        ///         Scope = exampleAzurermManagementGroup.Id,
        ///     });
        /// 
        ///     var exampleGetRoleManagementPolicy = Azure.Pim.GetRoleManagementPolicy.Invoke(new()
        ///     {
        ///         Scope = example.Apply(getGroupResult =&gt; getGroupResult.Id),
        ///         RoleDefinitionId = mgContributor.Apply(getRoleDefinitionResult =&gt; getRoleDefinitionResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRoleManagementPolicyResult> Invoke(GetRoleManagementPolicyInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetRoleManagementPolicyResult>("azure:pim/getRoleManagementPolicy:getRoleManagementPolicy", args ?? new GetRoleManagementPolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRoleManagementPolicyArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The scoped Role Definition ID of the role for which this policy applies.
        /// </summary>
        [Input("roleDefinitionId", required: true)]
        public string RoleDefinitionId { get; set; } = null!;

        /// <summary>
        /// The scope to which this Role Management Policy applies. Can refer to a management group, a subscription, a resource group or a resource.
        /// </summary>
        [Input("scope", required: true)]
        public string Scope { get; set; } = null!;

        public GetRoleManagementPolicyArgs()
        {
        }
        public static new GetRoleManagementPolicyArgs Empty => new GetRoleManagementPolicyArgs();
    }

    public sealed class GetRoleManagementPolicyInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The scoped Role Definition ID of the role for which this policy applies.
        /// </summary>
        [Input("roleDefinitionId", required: true)]
        public Input<string> RoleDefinitionId { get; set; } = null!;

        /// <summary>
        /// The scope to which this Role Management Policy applies. Can refer to a management group, a subscription, a resource group or a resource.
        /// </summary>
        [Input("scope", required: true)]
        public Input<string> Scope { get; set; } = null!;

        public GetRoleManagementPolicyInvokeArgs()
        {
        }
        public static new GetRoleManagementPolicyInvokeArgs Empty => new GetRoleManagementPolicyInvokeArgs();
    }


    [OutputType]
    public sealed class GetRoleManagementPolicyResult
    {
        /// <summary>
        /// An `activation_rules` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRoleManagementPolicyActivationRuleResult> ActivationRules;
        /// <summary>
        /// An `active_assignment_rules` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRoleManagementPolicyActiveAssignmentRuleResult> ActiveAssignmentRules;
        /// <summary>
        /// (String) The description of this policy.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// An `eligible_assignment_rules` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRoleManagementPolicyEligibleAssignmentRuleResult> EligibleAssignmentRules;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// (String) The name of this policy, which is typically a UUID and may change over time.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// A `notification_rules` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRoleManagementPolicyNotificationRuleResult> NotificationRules;
        public readonly string RoleDefinitionId;
        public readonly string Scope;

        [OutputConstructor]
        private GetRoleManagementPolicyResult(
            ImmutableArray<Outputs.GetRoleManagementPolicyActivationRuleResult> activationRules,

            ImmutableArray<Outputs.GetRoleManagementPolicyActiveAssignmentRuleResult> activeAssignmentRules,

            string description,

            ImmutableArray<Outputs.GetRoleManagementPolicyEligibleAssignmentRuleResult> eligibleAssignmentRules,

            string id,

            string name,

            ImmutableArray<Outputs.GetRoleManagementPolicyNotificationRuleResult> notificationRules,

            string roleDefinitionId,

            string scope)
        {
            ActivationRules = activationRules;
            ActiveAssignmentRules = activeAssignmentRules;
            Description = description;
            EligibleAssignmentRules = eligibleAssignmentRules;
            Id = id;
            Name = name;
            NotificationRules = notificationRules;
            RoleDefinitionId = roleDefinitionId;
            Scope = scope;
        }
    }
}
