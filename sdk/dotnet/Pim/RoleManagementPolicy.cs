// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Pim
{
    /// <summary>
    /// Manage a role policy for an Azure Management Group, Subscription, Resource Group or resource.
    /// 
    /// ## Example Usage
    /// 
    /// ### Resource Group
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// using AzureAD = Pulumi.AzureAD;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Name = "example-rg",
    ///         Location = "East US",
    ///     });
    /// 
    ///     var rgContributor = Azure.Authorization.GetRoleDefinition.Invoke(new()
    ///     {
    ///         Name = "Contributor",
    ///         Scope = example.Id,
    ///     });
    /// 
    ///     var approvers = AzureAD.GetGroup.Invoke(new()
    ///     {
    ///         DisplayName = "Example Approver Group",
    ///     });
    /// 
    ///     var exampleRoleManagementPolicy = new Azure.Pim.RoleManagementPolicy("example", new()
    ///     {
    ///         Scope = test.Id,
    ///         RoleDefinitionId = contributor.Id,
    ///         ActiveAssignmentRules = new Azure.Pim.Inputs.RoleManagementPolicyActiveAssignmentRulesArgs
    ///         {
    ///             ExpireAfter = "P365D",
    ///         },
    ///         EligibleAssignmentRules = new Azure.Pim.Inputs.RoleManagementPolicyEligibleAssignmentRulesArgs
    ///         {
    ///             ExpirationRequired = false,
    ///         },
    ///         ActivationRules = new Azure.Pim.Inputs.RoleManagementPolicyActivationRulesArgs
    ///         {
    ///             MaximumDuration = "PT1H",
    ///             RequireApproval = true,
    ///             ApprovalStage = new Azure.Pim.Inputs.RoleManagementPolicyActivationRulesApprovalStageArgs
    ///             {
    ///                 PrimaryApprovers = new[]
    ///                 {
    ///                     new Azure.Pim.Inputs.RoleManagementPolicyActivationRulesApprovalStagePrimaryApproverArgs
    ///                     {
    ///                         ObjectId = approvers.Apply(getGroupResult =&gt; getGroupResult.ObjectId),
    ///                         Type = "Group",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         NotificationRules = new Azure.Pim.Inputs.RoleManagementPolicyNotificationRulesArgs
    ///         {
    ///             EligibleAssignments = new Azure.Pim.Inputs.RoleManagementPolicyNotificationRulesEligibleAssignmentsArgs
    ///             {
    ///                 ApproverNotifications = new Azure.Pim.Inputs.RoleManagementPolicyNotificationRulesEligibleAssignmentsApproverNotificationsArgs
    ///                 {
    ///                     NotificationLevel = "Critical",
    ///                     DefaultRecipients = false,
    ///                     AdditionalRecipients = new[]
    ///                     {
    ///                         "someone@example.com",
    ///                     },
    ///                 },
    ///             },
    ///             EligibleActivations = new Azure.Pim.Inputs.RoleManagementPolicyNotificationRulesEligibleActivationsArgs
    ///             {
    ///                 AssigneeNotifications = new Azure.Pim.Inputs.RoleManagementPolicyNotificationRulesEligibleActivationsAssigneeNotificationsArgs
    ///                 {
    ///                     NotificationLevel = "All",
    ///                     DefaultRecipients = true,
    ///                     AdditionalRecipients = new[]
    ///                     {
    ///                         "someone.else@example.com",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Management Group
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Management.Group("example", new()
    ///     {
    ///         Name = "example-group",
    ///     });
    /// 
    ///     var mgContributor = Azure.Authorization.GetRoleDefinition.Invoke(new()
    ///     {
    ///         Name = "Contributor",
    ///         Scope = example.Id,
    ///     });
    /// 
    ///     var exampleRoleManagementPolicy = new Azure.Pim.RoleManagementPolicy("example", new()
    ///     {
    ///         Scope = example.Id,
    ///         RoleDefinitionId = mgContributor.Apply(getRoleDefinitionResult =&gt; getRoleDefinitionResult.Id),
    ///         EligibleAssignmentRules = new Azure.Pim.Inputs.RoleManagementPolicyEligibleAssignmentRulesArgs
    ///         {
    ///             ExpirationRequired = false,
    ///         },
    ///         ActiveAssignmentRules = new Azure.Pim.Inputs.RoleManagementPolicyActiveAssignmentRulesArgs
    ///         {
    ///             ExpireAfter = "P90D",
    ///         },
    ///         ActivationRules = new Azure.Pim.Inputs.RoleManagementPolicyActivationRulesArgs
    ///         {
    ///             MaximumDuration = "PT1H",
    ///             RequireApproval = true,
    ///         },
    ///         NotificationRules = new Azure.Pim.Inputs.RoleManagementPolicyNotificationRulesArgs
    ///         {
    ///             ActiveAssignments = new Azure.Pim.Inputs.RoleManagementPolicyNotificationRulesActiveAssignmentsArgs
    ///             {
    ///                 AdminNotifications = new Azure.Pim.Inputs.RoleManagementPolicyNotificationRulesActiveAssignmentsAdminNotificationsArgs
    ///                 {
    ///                     NotificationLevel = "Critical",
    ///                     DefaultRecipients = false,
    ///                     AdditionalRecipients = new[]
    ///                     {
    ///                         "someone@example.com",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## API Providers
    /// 
    /// &lt;!-- This section is generated, changes will be overwritten --&gt;
    /// This resource uses the following Azure API Providers:
    /// 
    /// * `Microsoft.Authorization` - 2020-10-01
    /// 
    /// ## Import
    /// 
    /// Because these policies are created automatically by Azure, they will auto-import on first use. They can be imported using the `resource id` of the role definition, combined with the scope id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:pim/roleManagementPolicy:RoleManagementPolicy example "/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Authorization/roleDefinitions/00000000-0000-0000-0000-000000000000|&lt;scope&gt;"
    /// ```
    /// </summary>
    [AzureResourceType("azure:pim/roleManagementPolicy:RoleManagementPolicy")]
    public partial class RoleManagementPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// An `activation_rules` block as defined below.
        /// </summary>
        [Output("activationRules")]
        public Output<Outputs.RoleManagementPolicyActivationRules> ActivationRules { get; private set; } = null!;

        /// <summary>
        /// An `active_assignment_rules` block as defined below.
        /// </summary>
        [Output("activeAssignmentRules")]
        public Output<Outputs.RoleManagementPolicyActiveAssignmentRules> ActiveAssignmentRules { get; private set; } = null!;

        /// <summary>
        /// (String) The description of this policy.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// An `eligible_assignment_rules` block as defined below.
        /// </summary>
        [Output("eligibleAssignmentRules")]
        public Output<Outputs.RoleManagementPolicyEligibleAssignmentRules> EligibleAssignmentRules { get; private set; } = null!;

        /// <summary>
        /// (String) The name of this policy, which is typically a UUID and may change over time.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A `notification_rules` block as defined below.
        /// </summary>
        [Output("notificationRules")]
        public Output<Outputs.RoleManagementPolicyNotificationRules> NotificationRules { get; private set; } = null!;

        /// <summary>
        /// The scoped Role Definition ID of the role for which this policy will apply. Changing this forces a new resource to be created.
        /// </summary>
        [Output("roleDefinitionId")]
        public Output<string> RoleDefinitionId { get; private set; } = null!;

        /// <summary>
        /// The scope to which this Role Management Policy will apply. Can refer to a management group, a subscription, a resource group or a resource. Changing this forces a new resource to be created.
        /// </summary>
        [Output("scope")]
        public Output<string> Scope { get; private set; } = null!;


        /// <summary>
        /// Create a RoleManagementPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RoleManagementPolicy(string name, RoleManagementPolicyArgs args, CustomResourceOptions? options = null)
            : base("azure:pim/roleManagementPolicy:RoleManagementPolicy", name, args ?? new RoleManagementPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RoleManagementPolicy(string name, Input<string> id, RoleManagementPolicyState? state = null, CustomResourceOptions? options = null)
            : base("azure:pim/roleManagementPolicy:RoleManagementPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RoleManagementPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RoleManagementPolicy Get(string name, Input<string> id, RoleManagementPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new RoleManagementPolicy(name, id, state, options);
        }
    }

    public sealed class RoleManagementPolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An `activation_rules` block as defined below.
        /// </summary>
        [Input("activationRules")]
        public Input<Inputs.RoleManagementPolicyActivationRulesArgs>? ActivationRules { get; set; }

        /// <summary>
        /// An `active_assignment_rules` block as defined below.
        /// </summary>
        [Input("activeAssignmentRules")]
        public Input<Inputs.RoleManagementPolicyActiveAssignmentRulesArgs>? ActiveAssignmentRules { get; set; }

        /// <summary>
        /// An `eligible_assignment_rules` block as defined below.
        /// </summary>
        [Input("eligibleAssignmentRules")]
        public Input<Inputs.RoleManagementPolicyEligibleAssignmentRulesArgs>? EligibleAssignmentRules { get; set; }

        /// <summary>
        /// A `notification_rules` block as defined below.
        /// </summary>
        [Input("notificationRules")]
        public Input<Inputs.RoleManagementPolicyNotificationRulesArgs>? NotificationRules { get; set; }

        /// <summary>
        /// The scoped Role Definition ID of the role for which this policy will apply. Changing this forces a new resource to be created.
        /// </summary>
        [Input("roleDefinitionId", required: true)]
        public Input<string> RoleDefinitionId { get; set; } = null!;

        /// <summary>
        /// The scope to which this Role Management Policy will apply. Can refer to a management group, a subscription, a resource group or a resource. Changing this forces a new resource to be created.
        /// </summary>
        [Input("scope", required: true)]
        public Input<string> Scope { get; set; } = null!;

        public RoleManagementPolicyArgs()
        {
        }
        public static new RoleManagementPolicyArgs Empty => new RoleManagementPolicyArgs();
    }

    public sealed class RoleManagementPolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An `activation_rules` block as defined below.
        /// </summary>
        [Input("activationRules")]
        public Input<Inputs.RoleManagementPolicyActivationRulesGetArgs>? ActivationRules { get; set; }

        /// <summary>
        /// An `active_assignment_rules` block as defined below.
        /// </summary>
        [Input("activeAssignmentRules")]
        public Input<Inputs.RoleManagementPolicyActiveAssignmentRulesGetArgs>? ActiveAssignmentRules { get; set; }

        /// <summary>
        /// (String) The description of this policy.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// An `eligible_assignment_rules` block as defined below.
        /// </summary>
        [Input("eligibleAssignmentRules")]
        public Input<Inputs.RoleManagementPolicyEligibleAssignmentRulesGetArgs>? EligibleAssignmentRules { get; set; }

        /// <summary>
        /// (String) The name of this policy, which is typically a UUID and may change over time.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A `notification_rules` block as defined below.
        /// </summary>
        [Input("notificationRules")]
        public Input<Inputs.RoleManagementPolicyNotificationRulesGetArgs>? NotificationRules { get; set; }

        /// <summary>
        /// The scoped Role Definition ID of the role for which this policy will apply. Changing this forces a new resource to be created.
        /// </summary>
        [Input("roleDefinitionId")]
        public Input<string>? RoleDefinitionId { get; set; }

        /// <summary>
        /// The scope to which this Role Management Policy will apply. Can refer to a management group, a subscription, a resource group or a resource. Changing this forces a new resource to be created.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        public RoleManagementPolicyState()
        {
        }
        public static new RoleManagementPolicyState Empty => new RoleManagementPolicyState();
    }
}
