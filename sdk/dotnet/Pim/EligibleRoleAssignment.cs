// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Pim
{
    /// <summary>
    /// Manages a PIM Eligible Role Assignment.
    /// 
    /// ## Example Usage
    /// 
    /// ### Subscription)
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// using Time = Pulumiverse.Time;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var primary = Azure.Core.GetSubscription.Invoke();
    /// 
    ///     var example = Azure.Core.GetClientConfig.Invoke();
    /// 
    ///     var exampleGetRoleDefinition = Azure.Authorization.GetRoleDefinition.Invoke(new()
    ///     {
    ///         Name = "Reader",
    ///     });
    /// 
    ///     var exampleStatic = new Time.Static("example");
    /// 
    ///     var exampleEligibleRoleAssignment = new Azure.Pim.EligibleRoleAssignment("example", new()
    ///     {
    ///         Scope = primary.Apply(getSubscriptionResult =&gt; getSubscriptionResult.Id),
    ///         RoleDefinitionId = Output.Tuple(primary, exampleGetRoleDefinition).Apply(values =&gt;
    ///         {
    ///             var primary = values.Item1;
    ///             var exampleGetRoleDefinition = values.Item2;
    ///             return $"{primary.Apply(getSubscriptionResult =&gt; getSubscriptionResult.Id)}{exampleGetRoleDefinition.Apply(getRoleDefinitionResult =&gt; getRoleDefinitionResult.Id)}";
    ///         }),
    ///         PrincipalId = example.Apply(getClientConfigResult =&gt; getClientConfigResult.ObjectId),
    ///         Schedule = new Azure.Pim.Inputs.EligibleRoleAssignmentScheduleArgs
    ///         {
    ///             StartDateTime = exampleStatic.Rfc3339,
    ///             Expiration = new Azure.Pim.Inputs.EligibleRoleAssignmentScheduleExpirationArgs
    ///             {
    ///                 DurationHours = 8,
    ///             },
    ///         },
    ///         Justification = "Expiration Duration Set",
    ///         Ticket = new Azure.Pim.Inputs.EligibleRoleAssignmentTicketArgs
    ///         {
    ///             Number = "1",
    ///             System = "example ticket system",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Management Group)
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// using Time = Pulumiverse.Time;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = Azure.Core.GetClientConfig.Invoke();
    /// 
    ///     var exampleGetRoleDefinition = Azure.Authorization.GetRoleDefinition.Invoke(new()
    ///     {
    ///         Name = "Reader",
    ///     });
    /// 
    ///     var exampleGroup = new Azure.Management.Group("example", new()
    ///     {
    ///         Name = "Example-Management-Group",
    ///     });
    /// 
    ///     var exampleStatic = new Time.Static("example");
    /// 
    ///     var exampleEligibleRoleAssignment = new Azure.Pim.EligibleRoleAssignment("example", new()
    ///     {
    ///         Scope = exampleGroup.Id,
    ///         RoleDefinitionId = exampleGetRoleDefinition.Apply(getRoleDefinitionResult =&gt; getRoleDefinitionResult.Id),
    ///         PrincipalId = example.Apply(getClientConfigResult =&gt; getClientConfigResult.ObjectId),
    ///         Schedule = new Azure.Pim.Inputs.EligibleRoleAssignmentScheduleArgs
    ///         {
    ///             StartDateTime = exampleStatic.Rfc3339,
    ///             Expiration = new Azure.Pim.Inputs.EligibleRoleAssignmentScheduleExpirationArgs
    ///             {
    ///                 DurationHours = 8,
    ///             },
    ///         },
    ///         Justification = "Expiration Duration Set",
    ///         Ticket = new Azure.Pim.Inputs.EligibleRoleAssignmentTicketArgs
    ///         {
    ///             Number = "1",
    ///             System = "example ticket system",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// PIM Eligible Role Assignments can be imported using the following composite resource ID, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:pim/eligibleRoleAssignment:EligibleRoleAssignment example /subscriptions/00000000-0000-0000-0000-000000000000|/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Authorization/roleDefinitions/00000000-0000-0000-0000-000000000000|00000000-0000-0000-0000-000000000000
    /// ```
    /// </summary>
    [AzureResourceType("azure:pim/eligibleRoleAssignment:EligibleRoleAssignment")]
    public partial class EligibleRoleAssignment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The condition that limits the resources that the role can be assigned to. See the [official conditions documentation](https://learn.microsoft.com/en-us/azure/role-based-access-control/conditions-overview#what-are-role-assignment-conditions) for details. Changing this forces a new resource to be created.
        /// </summary>
        [Output("condition")]
        public Output<string?> Condition { get; private set; } = null!;

        /// <summary>
        /// The version of the condition. Supported values include `2.0`. Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE:** `condition_version` is required when specifying `condition` and vice versa.
        /// </summary>
        [Output("conditionVersion")]
        public Output<string?> ConditionVersion { get; private set; } = null!;

        /// <summary>
        /// The justification of the role assignment. Changing this forces a new resource to be created.
        /// </summary>
        [Output("justification")]
        public Output<string> Justification { get; private set; } = null!;

        /// <summary>
        /// Object ID of the principal for this eligible role assignment. Changing this forces a new resource to be created.
        /// </summary>
        [Output("principalId")]
        public Output<string> PrincipalId { get; private set; } = null!;

        /// <summary>
        /// Type of principal to which the role will be assigned.
        /// </summary>
        [Output("principalType")]
        public Output<string> PrincipalType { get; private set; } = null!;

        /// <summary>
        /// The role definition ID for this eligible role assignment. Changing this forces a new resource to be created.
        /// </summary>
        [Output("roleDefinitionId")]
        public Output<string> RoleDefinitionId { get; private set; } = null!;

        /// <summary>
        /// A `schedule` block as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Output("schedule")]
        public Output<Outputs.EligibleRoleAssignmentSchedule> Schedule { get; private set; } = null!;

        /// <summary>
        /// The scope for this eligible role assignment, should be a valid resource ID. Changing this forces a new resource to be created.
        /// </summary>
        [Output("scope")]
        public Output<string> Scope { get; private set; } = null!;

        /// <summary>
        /// A `ticket` block as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Output("ticket")]
        public Output<Outputs.EligibleRoleAssignmentTicket> Ticket { get; private set; } = null!;


        /// <summary>
        /// Create a EligibleRoleAssignment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EligibleRoleAssignment(string name, EligibleRoleAssignmentArgs args, CustomResourceOptions? options = null)
            : base("azure:pim/eligibleRoleAssignment:EligibleRoleAssignment", name, args ?? new EligibleRoleAssignmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EligibleRoleAssignment(string name, Input<string> id, EligibleRoleAssignmentState? state = null, CustomResourceOptions? options = null)
            : base("azure:pim/eligibleRoleAssignment:EligibleRoleAssignment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EligibleRoleAssignment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EligibleRoleAssignment Get(string name, Input<string> id, EligibleRoleAssignmentState? state = null, CustomResourceOptions? options = null)
        {
            return new EligibleRoleAssignment(name, id, state, options);
        }
    }

    public sealed class EligibleRoleAssignmentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The condition that limits the resources that the role can be assigned to. See the [official conditions documentation](https://learn.microsoft.com/en-us/azure/role-based-access-control/conditions-overview#what-are-role-assignment-conditions) for details. Changing this forces a new resource to be created.
        /// </summary>
        [Input("condition")]
        public Input<string>? Condition { get; set; }

        /// <summary>
        /// The version of the condition. Supported values include `2.0`. Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE:** `condition_version` is required when specifying `condition` and vice versa.
        /// </summary>
        [Input("conditionVersion")]
        public Input<string>? ConditionVersion { get; set; }

        /// <summary>
        /// The justification of the role assignment. Changing this forces a new resource to be created.
        /// </summary>
        [Input("justification")]
        public Input<string>? Justification { get; set; }

        /// <summary>
        /// Object ID of the principal for this eligible role assignment. Changing this forces a new resource to be created.
        /// </summary>
        [Input("principalId", required: true)]
        public Input<string> PrincipalId { get; set; } = null!;

        /// <summary>
        /// The role definition ID for this eligible role assignment. Changing this forces a new resource to be created.
        /// </summary>
        [Input("roleDefinitionId", required: true)]
        public Input<string> RoleDefinitionId { get; set; } = null!;

        /// <summary>
        /// A `schedule` block as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Input("schedule")]
        public Input<Inputs.EligibleRoleAssignmentScheduleArgs>? Schedule { get; set; }

        /// <summary>
        /// The scope for this eligible role assignment, should be a valid resource ID. Changing this forces a new resource to be created.
        /// </summary>
        [Input("scope", required: true)]
        public Input<string> Scope { get; set; } = null!;

        /// <summary>
        /// A `ticket` block as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Input("ticket")]
        public Input<Inputs.EligibleRoleAssignmentTicketArgs>? Ticket { get; set; }

        public EligibleRoleAssignmentArgs()
        {
        }
        public static new EligibleRoleAssignmentArgs Empty => new EligibleRoleAssignmentArgs();
    }

    public sealed class EligibleRoleAssignmentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The condition that limits the resources that the role can be assigned to. See the [official conditions documentation](https://learn.microsoft.com/en-us/azure/role-based-access-control/conditions-overview#what-are-role-assignment-conditions) for details. Changing this forces a new resource to be created.
        /// </summary>
        [Input("condition")]
        public Input<string>? Condition { get; set; }

        /// <summary>
        /// The version of the condition. Supported values include `2.0`. Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE:** `condition_version` is required when specifying `condition` and vice versa.
        /// </summary>
        [Input("conditionVersion")]
        public Input<string>? ConditionVersion { get; set; }

        /// <summary>
        /// The justification of the role assignment. Changing this forces a new resource to be created.
        /// </summary>
        [Input("justification")]
        public Input<string>? Justification { get; set; }

        /// <summary>
        /// Object ID of the principal for this eligible role assignment. Changing this forces a new resource to be created.
        /// </summary>
        [Input("principalId")]
        public Input<string>? PrincipalId { get; set; }

        /// <summary>
        /// Type of principal to which the role will be assigned.
        /// </summary>
        [Input("principalType")]
        public Input<string>? PrincipalType { get; set; }

        /// <summary>
        /// The role definition ID for this eligible role assignment. Changing this forces a new resource to be created.
        /// </summary>
        [Input("roleDefinitionId")]
        public Input<string>? RoleDefinitionId { get; set; }

        /// <summary>
        /// A `schedule` block as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Input("schedule")]
        public Input<Inputs.EligibleRoleAssignmentScheduleGetArgs>? Schedule { get; set; }

        /// <summary>
        /// The scope for this eligible role assignment, should be a valid resource ID. Changing this forces a new resource to be created.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        /// <summary>
        /// A `ticket` block as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Input("ticket")]
        public Input<Inputs.EligibleRoleAssignmentTicketGetArgs>? Ticket { get; set; }

        public EligibleRoleAssignmentState()
        {
        }
        public static new EligibleRoleAssignmentState Empty => new EligibleRoleAssignmentState();
    }
}
