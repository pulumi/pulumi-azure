// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Pim.Outputs
{

    [OutputType]
    public sealed class GetRoleManagementPolicyActivationRuleResult
    {
        /// <summary>
        /// An `ApprovalStage` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRoleManagementPolicyActivationRuleApprovalStageResult> ApprovalStages;
        /// <summary>
        /// (String) The maximum length of time an activated role can be valid, in an ISO8601 Duration format.
        /// </summary>
        public readonly string MaximumDuration;
        /// <summary>
        /// (Boolean) Is approval required for activation.
        /// </summary>
        public readonly bool RequireApproval;
        /// <summary>
        /// (Boolean) Is a justification required to create new assignments.
        /// </summary>
        public readonly bool RequireJustification;
        /// <summary>
        /// (Boolean) Is multi-factor authentication required to create new assignments.
        /// </summary>
        public readonly bool RequireMultifactorAuthentication;
        /// <summary>
        /// (Boolean) Is ticket information required to create new assignments.
        /// </summary>
        public readonly bool RequireTicketInfo;
        /// <summary>
        /// (String) The Entra ID Conditional Access context that must be present for activation.
        /// </summary>
        public readonly string RequiredConditionalAccessAuthenticationContext;

        [OutputConstructor]
        private GetRoleManagementPolicyActivationRuleResult(
            ImmutableArray<Outputs.GetRoleManagementPolicyActivationRuleApprovalStageResult> approvalStages,

            string maximumDuration,

            bool requireApproval,

            bool requireJustification,

            bool requireMultifactorAuthentication,

            bool requireTicketInfo,

            string requiredConditionalAccessAuthenticationContext)
        {
            ApprovalStages = approvalStages;
            MaximumDuration = maximumDuration;
            RequireApproval = requireApproval;
            RequireJustification = requireJustification;
            RequireMultifactorAuthentication = requireMultifactorAuthentication;
            RequireTicketInfo = requireTicketInfo;
            RequiredConditionalAccessAuthenticationContext = requiredConditionalAccessAuthenticationContext;
        }
    }
}
