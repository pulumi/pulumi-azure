// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Pim.Outputs
{

    [OutputType]
    public sealed class RoleManagementPolicyActivationRules
    {
        /// <summary>
        /// An `approval_stage` block as defined below.
        /// </summary>
        public readonly Outputs.RoleManagementPolicyActivationRulesApprovalStage? ApprovalStage;
        /// <summary>
        /// The maximum length of time an activated role can be valid, in an ISO8601 Duration format (e.g. `PT8H`). Valid range is `PT30M` to `PT23H30M`, in 30 minute increments, or `PT1D`.
        /// </summary>
        public readonly string? MaximumDuration;
        /// <summary>
        /// Is approval required for activation. If `true` an `approval_stage` block must be provided.
        /// </summary>
        public readonly bool? RequireApproval;
        /// <summary>
        /// Is a justification required during activation of the role.
        /// </summary>
        public readonly bool? RequireJustification;
        /// <summary>
        /// Is multi-factor authentication required to activate the role. Conflicts with `required_conditional_access_authentication_context`.
        /// </summary>
        public readonly bool? RequireMultifactorAuthentication;
        /// <summary>
        /// Is ticket information requrired during activation of the role.
        /// </summary>
        public readonly bool? RequireTicketInfo;
        /// <summary>
        /// The Entra ID Conditional Access context that must be present for activation. Conflicts with `require_multifactor_authentication`.
        /// </summary>
        public readonly string? RequiredConditionalAccessAuthenticationContext;

        [OutputConstructor]
        private RoleManagementPolicyActivationRules(
            Outputs.RoleManagementPolicyActivationRulesApprovalStage? approvalStage,

            string? maximumDuration,

            bool? requireApproval,

            bool? requireJustification,

            bool? requireMultifactorAuthentication,

            bool? requireTicketInfo,

            string? requiredConditionalAccessAuthenticationContext)
        {
            ApprovalStage = approvalStage;
            MaximumDuration = maximumDuration;
            RequireApproval = requireApproval;
            RequireJustification = requireJustification;
            RequireMultifactorAuthentication = requireMultifactorAuthentication;
            RequireTicketInfo = requireTicketInfo;
            RequiredConditionalAccessAuthenticationContext = requiredConditionalAccessAuthenticationContext;
        }
    }
}
