// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Pim
{
    public static class GetRoleAssignments
    {
        /// <summary>
        /// Use this data source to access information about existing Role Assignments.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("example", new()
        ///     {
        ///         Name = "example",
        ///         Location = "West Europe",
        ///     });
        /// 
        ///     var example = Azure.Pim.GetRoleAssignments.Invoke(new()
        ///     {
        ///         Scope = exampleResourceGroup.Id,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getRoleAssignmentsResult =&gt; getRoleAssignmentsResult.RoleAssignments),
        ///     };
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Microsoft.Authorization`: 2022-04-01
        /// </summary>
        public static Task<GetRoleAssignmentsResult> InvokeAsync(GetRoleAssignmentsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRoleAssignmentsResult>("azure:pim/getRoleAssignments:getRoleAssignments", args ?? new GetRoleAssignmentsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about existing Role Assignments.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("example", new()
        ///     {
        ///         Name = "example",
        ///         Location = "West Europe",
        ///     });
        /// 
        ///     var example = Azure.Pim.GetRoleAssignments.Invoke(new()
        ///     {
        ///         Scope = exampleResourceGroup.Id,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getRoleAssignmentsResult =&gt; getRoleAssignmentsResult.RoleAssignments),
        ///     };
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Microsoft.Authorization`: 2022-04-01
        /// </summary>
        public static Output<GetRoleAssignmentsResult> Invoke(GetRoleAssignmentsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRoleAssignmentsResult>("azure:pim/getRoleAssignments:getRoleAssignments", args ?? new GetRoleAssignmentsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about existing Role Assignments.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("example", new()
        ///     {
        ///         Name = "example",
        ///         Location = "West Europe",
        ///     });
        /// 
        ///     var example = Azure.Pim.GetRoleAssignments.Invoke(new()
        ///     {
        ///         Scope = exampleResourceGroup.Id,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getRoleAssignmentsResult =&gt; getRoleAssignmentsResult.RoleAssignments),
        ///     };
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Microsoft.Authorization`: 2022-04-01
        /// </summary>
        public static Output<GetRoleAssignmentsResult> Invoke(GetRoleAssignmentsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetRoleAssignmentsResult>("azure:pim/getRoleAssignments:getRoleAssignments", args ?? new GetRoleAssignmentsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRoleAssignmentsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Whether to limit the result exactly at the specified scope and not above or below it. Defaults to `false`.
        /// </summary>
        [Input("limitAtScope")]
        public bool? LimitAtScope { get; set; }

        /// <summary>
        /// The principal ID to filter the list of Role Assignments against.
        /// </summary>
        [Input("principalId")]
        public string? PrincipalId { get; set; }

        /// <summary>
        /// The scope at which to list Role Assignments.
        /// </summary>
        [Input("scope", required: true)]
        public string Scope { get; set; } = null!;

        /// <summary>
        /// The tenant ID for cross-tenant requests.
        /// </summary>
        [Input("tenantId")]
        public string? TenantId { get; set; }

        public GetRoleAssignmentsArgs()
        {
        }
        public static new GetRoleAssignmentsArgs Empty => new GetRoleAssignmentsArgs();
    }

    public sealed class GetRoleAssignmentsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Whether to limit the result exactly at the specified scope and not above or below it. Defaults to `false`.
        /// </summary>
        [Input("limitAtScope")]
        public Input<bool>? LimitAtScope { get; set; }

        /// <summary>
        /// The principal ID to filter the list of Role Assignments against.
        /// </summary>
        [Input("principalId")]
        public Input<string>? PrincipalId { get; set; }

        /// <summary>
        /// The scope at which to list Role Assignments.
        /// </summary>
        [Input("scope", required: true)]
        public Input<string> Scope { get; set; } = null!;

        /// <summary>
        /// The tenant ID for cross-tenant requests.
        /// </summary>
        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        public GetRoleAssignmentsInvokeArgs()
        {
        }
        public static new GetRoleAssignmentsInvokeArgs Empty => new GetRoleAssignmentsInvokeArgs();
    }


    [OutputType]
    public sealed class GetRoleAssignmentsResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool? LimitAtScope;
        /// <summary>
        /// The principal ID.
        /// </summary>
        public readonly string? PrincipalId;
        /// <summary>
        /// A `role_assignments` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRoleAssignmentsRoleAssignmentResult> RoleAssignments;
        public readonly string Scope;
        public readonly string? TenantId;

        [OutputConstructor]
        private GetRoleAssignmentsResult(
            string id,

            bool? limitAtScope,

            string? principalId,

            ImmutableArray<Outputs.GetRoleAssignmentsRoleAssignmentResult> roleAssignments,

            string scope,

            string? tenantId)
        {
            Id = id;
            LimitAtScope = limitAtScope;
            PrincipalId = principalId;
            RoleAssignments = roleAssignments;
            Scope = scope;
            TenantId = tenantId;
        }
    }
}
