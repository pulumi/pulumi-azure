// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.KeyVault
{
    /// <summary>
    /// Manages a Key Vault.
    /// 
    /// &gt; **NOTE:** It's possible to define Key Vault Access Policies both within the `azure.keyvault.KeyVault` resource via the `access_policy` block and by using the `azure.keyvault.AccessPolicy` resource. However it's not possible to use both methods to manage Access Policies within a KeyVault, since there'll be conflicts.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/key_vault.html.markdown.
    /// </summary>
    public partial class KeyVault : Pulumi.CustomResource
    {
        /// <summary>
        /// [A list](https://www.terraform.io/docs/configuration/attr-as-blocks.html) of up to 16 objects describing access policies, as described below.
        /// </summary>
        [Output("accessPolicies")]
        public Output<ImmutableArray<Outputs.KeyVaultAccessPolicies>> AccessPolicies { get; private set; } = null!;

        /// <summary>
        /// Boolean flag to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault. Defaults to `false`.
        /// </summary>
        [Output("enabledForDeployment")]
        public Output<bool?> EnabledForDeployment { get; private set; } = null!;

        /// <summary>
        /// Boolean flag to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys. Defaults to `false`.
        /// </summary>
        [Output("enabledForDiskEncryption")]
        public Output<bool?> EnabledForDiskEncryption { get; private set; } = null!;

        /// <summary>
        /// Boolean flag to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault. Defaults to `false`.
        /// </summary>
        [Output("enabledForTemplateDeployment")]
        public Output<bool?> EnabledForTemplateDeployment { get; private set; } = null!;

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the Key Vault. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A `network_acls` block as defined below.
        /// </summary>
        [Output("networkAcls")]
        public Output<Outputs.KeyVaultNetworkAcls?> NetworkAcls { get; private set; } = null!;

        /// <summary>
        /// The name of the resource group in which to create the Key Vault. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// ) A `sku` block as described below.
        /// </summary>
        [Output("sku")]
        public Output<Outputs.KeyVaultSku> Sku { get; private set; } = null!;

        /// <summary>
        /// The Name of the SKU used for this Key Vault. Possible values are `standard` and `premium`.
        /// </summary>
        [Output("skuName")]
        public Output<string> SkuName { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, object>> Tags { get; private set; } = null!;

        /// <summary>
        /// The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
        /// </summary>
        [Output("tenantId")]
        public Output<string> TenantId { get; private set; } = null!;

        /// <summary>
        /// The URI of the Key Vault, used for performing operations on keys and secrets.
        /// </summary>
        [Output("vaultUri")]
        public Output<string> VaultUri { get; private set; } = null!;


        /// <summary>
        /// Create a KeyVault resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public KeyVault(string name, KeyVaultArgs args, CustomResourceOptions? options = null)
            : base("azure:keyvault/keyVault:KeyVault", name, args, MakeResourceOptions(options, ""))
        {
        }

        private KeyVault(string name, Input<string> id, KeyVaultState? state = null, CustomResourceOptions? options = null)
            : base("azure:keyvault/keyVault:KeyVault", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing KeyVault resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static KeyVault Get(string name, Input<string> id, KeyVaultState? state = null, CustomResourceOptions? options = null)
        {
            return new KeyVault(name, id, state, options);
        }
    }

    public sealed class KeyVaultArgs : Pulumi.ResourceArgs
    {
        [Input("accessPolicies")]
        private InputList<Inputs.KeyVaultAccessPoliciesArgs>? _accessPolicies;

        /// <summary>
        /// [A list](https://www.terraform.io/docs/configuration/attr-as-blocks.html) of up to 16 objects describing access policies, as described below.
        /// </summary>
        public InputList<Inputs.KeyVaultAccessPoliciesArgs> AccessPolicies
        {
            get => _accessPolicies ?? (_accessPolicies = new InputList<Inputs.KeyVaultAccessPoliciesArgs>());
            set => _accessPolicies = value;
        }

        /// <summary>
        /// Boolean flag to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault. Defaults to `false`.
        /// </summary>
        [Input("enabledForDeployment")]
        public Input<bool>? EnabledForDeployment { get; set; }

        /// <summary>
        /// Boolean flag to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys. Defaults to `false`.
        /// </summary>
        [Input("enabledForDiskEncryption")]
        public Input<bool>? EnabledForDiskEncryption { get; set; }

        /// <summary>
        /// Boolean flag to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault. Defaults to `false`.
        /// </summary>
        [Input("enabledForTemplateDeployment")]
        public Input<bool>? EnabledForTemplateDeployment { get; set; }

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Specifies the name of the Key Vault. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A `network_acls` block as defined below.
        /// </summary>
        [Input("networkAcls")]
        public Input<Inputs.KeyVaultNetworkAclsArgs>? NetworkAcls { get; set; }

        /// <summary>
        /// The name of the resource group in which to create the Key Vault. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// ) A `sku` block as described below.
        /// </summary>
        [Input("sku")]
        public Input<Inputs.KeyVaultSkuArgs>? Sku { get; set; }

        /// <summary>
        /// The Name of the SKU used for this Key Vault. Possible values are `standard` and `premium`.
        /// </summary>
        [Input("skuName")]
        public Input<string>? SkuName { get; set; }

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        /// <summary>
        /// The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
        /// </summary>
        [Input("tenantId", required: true)]
        public Input<string> TenantId { get; set; } = null!;

        public KeyVaultArgs()
        {
        }
    }

    public sealed class KeyVaultState : Pulumi.ResourceArgs
    {
        [Input("accessPolicies")]
        private InputList<Inputs.KeyVaultAccessPoliciesGetArgs>? _accessPolicies;

        /// <summary>
        /// [A list](https://www.terraform.io/docs/configuration/attr-as-blocks.html) of up to 16 objects describing access policies, as described below.
        /// </summary>
        public InputList<Inputs.KeyVaultAccessPoliciesGetArgs> AccessPolicies
        {
            get => _accessPolicies ?? (_accessPolicies = new InputList<Inputs.KeyVaultAccessPoliciesGetArgs>());
            set => _accessPolicies = value;
        }

        /// <summary>
        /// Boolean flag to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault. Defaults to `false`.
        /// </summary>
        [Input("enabledForDeployment")]
        public Input<bool>? EnabledForDeployment { get; set; }

        /// <summary>
        /// Boolean flag to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys. Defaults to `false`.
        /// </summary>
        [Input("enabledForDiskEncryption")]
        public Input<bool>? EnabledForDiskEncryption { get; set; }

        /// <summary>
        /// Boolean flag to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault. Defaults to `false`.
        /// </summary>
        [Input("enabledForTemplateDeployment")]
        public Input<bool>? EnabledForTemplateDeployment { get; set; }

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Specifies the name of the Key Vault. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A `network_acls` block as defined below.
        /// </summary>
        [Input("networkAcls")]
        public Input<Inputs.KeyVaultNetworkAclsGetArgs>? NetworkAcls { get; set; }

        /// <summary>
        /// The name of the resource group in which to create the Key Vault. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// ) A `sku` block as described below.
        /// </summary>
        [Input("sku")]
        public Input<Inputs.KeyVaultSkuGetArgs>? Sku { get; set; }

        /// <summary>
        /// The Name of the SKU used for this Key Vault. Possible values are `standard` and `premium`.
        /// </summary>
        [Input("skuName")]
        public Input<string>? SkuName { get; set; }

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        /// <summary>
        /// The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
        /// </summary>
        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        /// <summary>
        /// The URI of the Key Vault, used for performing operations on keys and secrets.
        /// </summary>
        [Input("vaultUri")]
        public Input<string>? VaultUri { get; set; }

        public KeyVaultState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class KeyVaultAccessPoliciesArgs : Pulumi.ResourceArgs
    {
        [Input("applicationId")]
        public Input<string>? ApplicationId { get; set; }

        [Input("certificatePermissions")]
        private InputList<string>? _certificatePermissions;
        public InputList<string> CertificatePermissions
        {
            get => _certificatePermissions ?? (_certificatePermissions = new InputList<string>());
            set => _certificatePermissions = value;
        }

        [Input("keyPermissions")]
        private InputList<string>? _keyPermissions;
        public InputList<string> KeyPermissions
        {
            get => _keyPermissions ?? (_keyPermissions = new InputList<string>());
            set => _keyPermissions = value;
        }

        [Input("objectId", required: true)]
        public Input<string> ObjectId { get; set; } = null!;

        [Input("secretPermissions")]
        private InputList<string>? _secretPermissions;
        public InputList<string> SecretPermissions
        {
            get => _secretPermissions ?? (_secretPermissions = new InputList<string>());
            set => _secretPermissions = value;
        }

        [Input("storagePermissions")]
        private InputList<string>? _storagePermissions;
        public InputList<string> StoragePermissions
        {
            get => _storagePermissions ?? (_storagePermissions = new InputList<string>());
            set => _storagePermissions = value;
        }

        /// <summary>
        /// The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
        /// </summary>
        [Input("tenantId", required: true)]
        public Input<string> TenantId { get; set; } = null!;

        public KeyVaultAccessPoliciesArgs()
        {
        }
    }

    public sealed class KeyVaultAccessPoliciesGetArgs : Pulumi.ResourceArgs
    {
        [Input("applicationId")]
        public Input<string>? ApplicationId { get; set; }

        [Input("certificatePermissions")]
        private InputList<string>? _certificatePermissions;
        public InputList<string> CertificatePermissions
        {
            get => _certificatePermissions ?? (_certificatePermissions = new InputList<string>());
            set => _certificatePermissions = value;
        }

        [Input("keyPermissions")]
        private InputList<string>? _keyPermissions;
        public InputList<string> KeyPermissions
        {
            get => _keyPermissions ?? (_keyPermissions = new InputList<string>());
            set => _keyPermissions = value;
        }

        [Input("objectId", required: true)]
        public Input<string> ObjectId { get; set; } = null!;

        [Input("secretPermissions")]
        private InputList<string>? _secretPermissions;
        public InputList<string> SecretPermissions
        {
            get => _secretPermissions ?? (_secretPermissions = new InputList<string>());
            set => _secretPermissions = value;
        }

        [Input("storagePermissions")]
        private InputList<string>? _storagePermissions;
        public InputList<string> StoragePermissions
        {
            get => _storagePermissions ?? (_storagePermissions = new InputList<string>());
            set => _storagePermissions = value;
        }

        /// <summary>
        /// The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
        /// </summary>
        [Input("tenantId", required: true)]
        public Input<string> TenantId { get; set; } = null!;

        public KeyVaultAccessPoliciesGetArgs()
        {
        }
    }

    public sealed class KeyVaultNetworkAclsArgs : Pulumi.ResourceArgs
    {
        [Input("bypass", required: true)]
        public Input<string> Bypass { get; set; } = null!;

        [Input("defaultAction", required: true)]
        public Input<string> DefaultAction { get; set; } = null!;

        [Input("ipRules")]
        private InputList<string>? _ipRules;
        public InputList<string> IpRules
        {
            get => _ipRules ?? (_ipRules = new InputList<string>());
            set => _ipRules = value;
        }

        [Input("virtualNetworkSubnetIds")]
        private InputList<string>? _virtualNetworkSubnetIds;
        public InputList<string> VirtualNetworkSubnetIds
        {
            get => _virtualNetworkSubnetIds ?? (_virtualNetworkSubnetIds = new InputList<string>());
            set => _virtualNetworkSubnetIds = value;
        }

        public KeyVaultNetworkAclsArgs()
        {
        }
    }

    public sealed class KeyVaultNetworkAclsGetArgs : Pulumi.ResourceArgs
    {
        [Input("bypass", required: true)]
        public Input<string> Bypass { get; set; } = null!;

        [Input("defaultAction", required: true)]
        public Input<string> DefaultAction { get; set; } = null!;

        [Input("ipRules")]
        private InputList<string>? _ipRules;
        public InputList<string> IpRules
        {
            get => _ipRules ?? (_ipRules = new InputList<string>());
            set => _ipRules = value;
        }

        [Input("virtualNetworkSubnetIds")]
        private InputList<string>? _virtualNetworkSubnetIds;
        public InputList<string> VirtualNetworkSubnetIds
        {
            get => _virtualNetworkSubnetIds ?? (_virtualNetworkSubnetIds = new InputList<string>());
            set => _virtualNetworkSubnetIds = value;
        }

        public KeyVaultNetworkAclsGetArgs()
        {
        }
    }

    public sealed class KeyVaultSkuArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the name of the Key Vault. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public KeyVaultSkuArgs()
        {
        }
    }

    public sealed class KeyVaultSkuGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the name of the Key Vault. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public KeyVaultSkuGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class KeyVaultAccessPolicies
    {
        public readonly string? ApplicationId;
        public readonly ImmutableArray<string> CertificatePermissions;
        public readonly ImmutableArray<string> KeyPermissions;
        public readonly string ObjectId;
        public readonly ImmutableArray<string> SecretPermissions;
        public readonly ImmutableArray<string> StoragePermissions;
        /// <summary>
        /// The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
        /// </summary>
        public readonly string TenantId;

        [OutputConstructor]
        private KeyVaultAccessPolicies(
            string? applicationId,
            ImmutableArray<string> certificatePermissions,
            ImmutableArray<string> keyPermissions,
            string objectId,
            ImmutableArray<string> secretPermissions,
            ImmutableArray<string> storagePermissions,
            string tenantId)
        {
            ApplicationId = applicationId;
            CertificatePermissions = certificatePermissions;
            KeyPermissions = keyPermissions;
            ObjectId = objectId;
            SecretPermissions = secretPermissions;
            StoragePermissions = storagePermissions;
            TenantId = tenantId;
        }
    }

    [OutputType]
    public sealed class KeyVaultNetworkAcls
    {
        public readonly string Bypass;
        public readonly string DefaultAction;
        public readonly ImmutableArray<string> IpRules;
        public readonly ImmutableArray<string> VirtualNetworkSubnetIds;

        [OutputConstructor]
        private KeyVaultNetworkAcls(
            string bypass,
            string defaultAction,
            ImmutableArray<string> ipRules,
            ImmutableArray<string> virtualNetworkSubnetIds)
        {
            Bypass = bypass;
            DefaultAction = defaultAction;
            IpRules = ipRules;
            VirtualNetworkSubnetIds = virtualNetworkSubnetIds;
        }
    }

    [OutputType]
    public sealed class KeyVaultSku
    {
        /// <summary>
        /// Specifies the name of the Key Vault. Changing this forces a new resource to be created.
        /// </summary>
        public readonly string? Name;

        [OutputConstructor]
        private KeyVaultSku(string? name)
        {
            Name = name;
        }
    }
    }
}
