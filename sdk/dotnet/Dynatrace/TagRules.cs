// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Dynatrace
{
    /// <summary>
    /// Manages Dynatrace tag rules.
    /// 
    /// ## Import
    /// 
    /// Dynatrace tag rules can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:dynatrace/tagRules:TagRules example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Dynatrace.Observability/monitors/monitor1/tagRules/tagRules1
    /// ```
    /// </summary>
    [AzureResourceType("azure:dynatrace/tagRules:TagRules")]
    public partial class TagRules : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Set of rules for sending logs for the Monitor resource. A `log_rule` block as defined below.
        /// </summary>
        [Output("logRule")]
        public Output<Outputs.TagRulesLogRule?> LogRule { get; private set; } = null!;

        /// <summary>
        /// Set of rules for sending metrics for the Monitor resource. A `metric_rule` block as defined below.
        /// </summary>
        [Output("metricRule")]
        public Output<Outputs.TagRulesMetricRule?> MetricRule { get; private set; } = null!;

        /// <summary>
        /// Name of the Dynatrace monitor. Changing this forces a new resource to be created.
        /// </summary>
        [Output("monitorId")]
        public Output<string> MonitorId { get; private set; } = null!;

        /// <summary>
        /// Name of the Dynatrace tag rules. Currently, the only supported value is `default`. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;


        /// <summary>
        /// Create a TagRules resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TagRules(string name, TagRulesArgs args, CustomResourceOptions? options = null)
            : base("azure:dynatrace/tagRules:TagRules", name, args ?? new TagRulesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TagRules(string name, Input<string> id, TagRulesState? state = null, CustomResourceOptions? options = null)
            : base("azure:dynatrace/tagRules:TagRules", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TagRules resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TagRules Get(string name, Input<string> id, TagRulesState? state = null, CustomResourceOptions? options = null)
        {
            return new TagRules(name, id, state, options);
        }
    }

    public sealed class TagRulesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Set of rules for sending logs for the Monitor resource. A `log_rule` block as defined below.
        /// </summary>
        [Input("logRule")]
        public Input<Inputs.TagRulesLogRuleArgs>? LogRule { get; set; }

        /// <summary>
        /// Set of rules for sending metrics for the Monitor resource. A `metric_rule` block as defined below.
        /// </summary>
        [Input("metricRule")]
        public Input<Inputs.TagRulesMetricRuleArgs>? MetricRule { get; set; }

        /// <summary>
        /// Name of the Dynatrace monitor. Changing this forces a new resource to be created.
        /// </summary>
        [Input("monitorId", required: true)]
        public Input<string> MonitorId { get; set; } = null!;

        /// <summary>
        /// Name of the Dynatrace tag rules. Currently, the only supported value is `default`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public TagRulesArgs()
        {
        }
        public static new TagRulesArgs Empty => new TagRulesArgs();
    }

    public sealed class TagRulesState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Set of rules for sending logs for the Monitor resource. A `log_rule` block as defined below.
        /// </summary>
        [Input("logRule")]
        public Input<Inputs.TagRulesLogRuleGetArgs>? LogRule { get; set; }

        /// <summary>
        /// Set of rules for sending metrics for the Monitor resource. A `metric_rule` block as defined below.
        /// </summary>
        [Input("metricRule")]
        public Input<Inputs.TagRulesMetricRuleGetArgs>? MetricRule { get; set; }

        /// <summary>
        /// Name of the Dynatrace monitor. Changing this forces a new resource to be created.
        /// </summary>
        [Input("monitorId")]
        public Input<string>? MonitorId { get; set; }

        /// <summary>
        /// Name of the Dynatrace tag rules. Currently, the only supported value is `default`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public TagRulesState()
        {
        }
        public static new TagRulesState Empty => new TagRulesState();
    }
}
