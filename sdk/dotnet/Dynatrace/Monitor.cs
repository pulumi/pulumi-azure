// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Dynatrace
{
    /// <summary>
    /// Manages a Dynatrace monitor.
    /// 
    /// ## Import
    /// 
    /// Dynatrace monitor can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:dynatrace/monitor:Monitor example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Dynatrace.Observability/monitors/monitor1
    /// ```
    /// </summary>
    [AzureResourceType("azure:dynatrace/monitor:Monitor")]
    public partial class Monitor : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Properties of the Dynatrace environment. An `environment_properties` block as defined below.
        /// </summary>
        [Output("environmentProperties")]
        public Output<ImmutableArray<Outputs.MonitorEnvironmentProperty>> EnvironmentProperties { get; private set; } = null!;

        /// <summary>
        /// The kind of managed identity assigned to this resource.  A `identity` block as defined below.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.MonitorIdentity> Identity { get; private set; } = null!;

        /// <summary>
        /// The Azure Region where the Dynatrace monitor should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Flag specifying the Marketplace Subscription Status of the resource. If payment is not made in time, the resource will go in Suspended state. Possible values are `Active` and `Suspended`.
        /// </summary>
        [Output("marketplaceSubscription")]
        public Output<string> MarketplaceSubscription { get; private set; } = null!;

        /// <summary>
        /// Flag specifying if the resource monitoring is enabled or disabled. Default is `true`.
        /// </summary>
        [Output("monitoringEnabled")]
        public Output<bool?> MonitoringEnabled { get; private set; } = null!;

        /// <summary>
        /// Name of the Dynatrace monitor. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Billing plan information. A `plan` block as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Output("plan")]
        public Output<Outputs.MonitorPlan> Plan { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Dynatrace monitor should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// User's information. A `user` block as defined below. Chainging this forces a new resource to be created.
        /// </summary>
        [Output("user")]
        public Output<Outputs.MonitorUser> User { get; private set; } = null!;


        /// <summary>
        /// Create a Monitor resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Monitor(string name, MonitorArgs args, CustomResourceOptions? options = null)
            : base("azure:dynatrace/monitor:Monitor", name, args ?? new MonitorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Monitor(string name, Input<string> id, MonitorState? state = null, CustomResourceOptions? options = null)
            : base("azure:dynatrace/monitor:Monitor", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Monitor resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Monitor Get(string name, Input<string> id, MonitorState? state = null, CustomResourceOptions? options = null)
        {
            return new Monitor(name, id, state, options);
        }
    }

    public sealed class MonitorArgs : global::Pulumi.ResourceArgs
    {
        [Input("environmentProperties")]
        private InputList<Inputs.MonitorEnvironmentPropertyArgs>? _environmentProperties;

        /// <summary>
        /// Properties of the Dynatrace environment. An `environment_properties` block as defined below.
        /// </summary>
        public InputList<Inputs.MonitorEnvironmentPropertyArgs> EnvironmentProperties
        {
            get => _environmentProperties ?? (_environmentProperties = new InputList<Inputs.MonitorEnvironmentPropertyArgs>());
            set => _environmentProperties = value;
        }

        /// <summary>
        /// The kind of managed identity assigned to this resource.  A `identity` block as defined below.
        /// </summary>
        [Input("identity", required: true)]
        public Input<Inputs.MonitorIdentityArgs> Identity { get; set; } = null!;

        /// <summary>
        /// The Azure Region where the Dynatrace monitor should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Flag specifying the Marketplace Subscription Status of the resource. If payment is not made in time, the resource will go in Suspended state. Possible values are `Active` and `Suspended`.
        /// </summary>
        [Input("marketplaceSubscription", required: true)]
        public Input<string> MarketplaceSubscription { get; set; } = null!;

        /// <summary>
        /// Flag specifying if the resource monitoring is enabled or disabled. Default is `true`.
        /// </summary>
        [Input("monitoringEnabled")]
        public Input<bool>? MonitoringEnabled { get; set; }

        /// <summary>
        /// Name of the Dynatrace monitor. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Billing plan information. A `plan` block as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Input("plan", required: true)]
        public Input<Inputs.MonitorPlanArgs> Plan { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Dynatrace monitor should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// User's information. A `user` block as defined below. Chainging this forces a new resource to be created.
        /// </summary>
        [Input("user", required: true)]
        public Input<Inputs.MonitorUserArgs> User { get; set; } = null!;

        public MonitorArgs()
        {
        }
        public static new MonitorArgs Empty => new MonitorArgs();
    }

    public sealed class MonitorState : global::Pulumi.ResourceArgs
    {
        [Input("environmentProperties")]
        private InputList<Inputs.MonitorEnvironmentPropertyGetArgs>? _environmentProperties;

        /// <summary>
        /// Properties of the Dynatrace environment. An `environment_properties` block as defined below.
        /// </summary>
        public InputList<Inputs.MonitorEnvironmentPropertyGetArgs> EnvironmentProperties
        {
            get => _environmentProperties ?? (_environmentProperties = new InputList<Inputs.MonitorEnvironmentPropertyGetArgs>());
            set => _environmentProperties = value;
        }

        /// <summary>
        /// The kind of managed identity assigned to this resource.  A `identity` block as defined below.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.MonitorIdentityGetArgs>? Identity { get; set; }

        /// <summary>
        /// The Azure Region where the Dynatrace monitor should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Flag specifying the Marketplace Subscription Status of the resource. If payment is not made in time, the resource will go in Suspended state. Possible values are `Active` and `Suspended`.
        /// </summary>
        [Input("marketplaceSubscription")]
        public Input<string>? MarketplaceSubscription { get; set; }

        /// <summary>
        /// Flag specifying if the resource monitoring is enabled or disabled. Default is `true`.
        /// </summary>
        [Input("monitoringEnabled")]
        public Input<bool>? MonitoringEnabled { get; set; }

        /// <summary>
        /// Name of the Dynatrace monitor. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Billing plan information. A `plan` block as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Input("plan")]
        public Input<Inputs.MonitorPlanGetArgs>? Plan { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Dynatrace monitor should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// User's information. A `user` block as defined below. Chainging this forces a new resource to be created.
        /// </summary>
        [Input("user")]
        public Input<Inputs.MonitorUserGetArgs>? User { get; set; }

        public MonitorState()
        {
        }
        public static new MonitorState Empty => new MonitorState();
    }
}
