// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Dynatrace
{
    public static class GetMonitor
    {
        /// <summary>
        /// Use this data source to access information about an existing Dynatrace Monitor.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Dynatrace.GetMonitor.Invoke(new()
        ///     {
        ///         Name = "example-dynatracemonitor",
        ///         ResourceGroupName = "example-resources",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Dynatrace.Observability`: 2023-04-27
        /// </summary>
        public static Task<GetMonitorResult> InvokeAsync(GetMonitorArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMonitorResult>("azure:dynatrace/getMonitor:getMonitor", args ?? new GetMonitorArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Dynatrace Monitor.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Dynatrace.GetMonitor.Invoke(new()
        ///     {
        ///         Name = "example-dynatracemonitor",
        ///         ResourceGroupName = "example-resources",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Dynatrace.Observability`: 2023-04-27
        /// </summary>
        public static Output<GetMonitorResult> Invoke(GetMonitorInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMonitorResult>("azure:dynatrace/getMonitor:getMonitor", args ?? new GetMonitorInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Dynatrace Monitor.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Dynatrace.GetMonitor.Invoke(new()
        ///     {
        ///         Name = "example-dynatracemonitor",
        ///         ResourceGroupName = "example-resources",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Dynatrace.Observability`: 2023-04-27
        /// </summary>
        public static Output<GetMonitorResult> Invoke(GetMonitorInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetMonitorResult>("azure:dynatrace/getMonitor:getMonitor", args ?? new GetMonitorInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMonitorArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the Dynatrace monitor.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Dynatrace monitor should exist.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetMonitorArgs()
        {
        }
        public static new GetMonitorArgs Empty => new GetMonitorArgs();
    }

    public sealed class GetMonitorInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the Dynatrace monitor.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Dynatrace monitor should exist.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetMonitorInvokeArgs()
        {
        }
        public static new GetMonitorInvokeArgs Empty => new GetMonitorInvokeArgs();
    }


    [OutputType]
    public sealed class GetMonitorResult
    {
        public readonly ImmutableArray<Outputs.GetMonitorEnvironmentPropertyResult> EnvironmentProperties;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The kind of managed identity assigned to this resource.  A `identity` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMonitorIdentityResult> Identities;
        /// <summary>
        /// The Azure Region where the Dynatrace monitor should exist.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Flag specifying the Marketplace Subscription Status of the resource. If payment is not made in time, the resource will go in Suspended state.
        /// </summary>
        public readonly string MarketplaceSubscription;
        /// <summary>
        /// Flag specifying if the resource monitoring is enabled or disabled.
        /// </summary>
        public readonly bool MonitoringEnabled;
        public readonly string Name;
        /// <summary>
        /// Plan id as published by Dynatrace.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMonitorPlanResult> Plans;
        public readonly string ResourceGroupName;
        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// User's information. A `user` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMonitorUserResult> Users;

        [OutputConstructor]
        private GetMonitorResult(
            ImmutableArray<Outputs.GetMonitorEnvironmentPropertyResult> environmentProperties,

            string id,

            ImmutableArray<Outputs.GetMonitorIdentityResult> identities,

            string location,

            string marketplaceSubscription,

            bool monitoringEnabled,

            string name,

            ImmutableArray<Outputs.GetMonitorPlanResult> plans,

            string resourceGroupName,

            ImmutableDictionary<string, string> tags,

            ImmutableArray<Outputs.GetMonitorUserResult> users)
        {
            EnvironmentProperties = environmentProperties;
            Id = id;
            Identities = identities;
            Location = location;
            MarketplaceSubscription = marketplaceSubscription;
            MonitoringEnabled = monitoringEnabled;
            Name = name;
            Plans = plans;
            ResourceGroupName = resourceGroupName;
            Tags = tags;
            Users = users;
        }
    }
}
