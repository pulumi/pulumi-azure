// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ChaosStudio
{
    /// <summary>
    /// Manages a Chaos Studio Capability.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleKubernetesCluster = new Azure.ContainerService.KubernetesCluster("exampleKubernetesCluster", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         DnsPrefix = "acctestaksexample",
    ///         DefaultNodePool = new Azure.ContainerService.Inputs.KubernetesClusterDefaultNodePoolArgs
    ///         {
    ///             Name = "example-value",
    ///             NodeCount = "example-value",
    ///             VmSize = "example-value",
    ///         },
    ///         Identity = new Azure.ContainerService.Inputs.KubernetesClusterIdentityArgs
    ///         {
    ///             Type = "example-value",
    ///         },
    ///     });
    /// 
    ///     var exampleTarget = new Azure.ChaosStudio.Target("exampleTarget", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         TargetResourceId = exampleKubernetesCluster.Id,
    ///         TargetType = "example-value",
    ///     });
    /// 
    ///     var exampleCapability = new Azure.ChaosStudio.Capability("exampleCapability", new()
    ///     {
    ///         CapabilityType = "example-value",
    ///         ChaosStudioTargetId = exampleTarget.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing Chaos Studio Target can be imported into Terraform using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:chaosstudio/capability:Capability example /{scope}/providers/Microsoft.Chaos/targets/{targetName}/capabilities/{capabilityName}
    /// ```
    /// 
    ///  * Where `{scope}` is the ID of the Azure Resource under which the Chaos Studio Target exists. For example `/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/some-resource-group`.
    /// 
    ///  * Where `{targetName}` is the name of the Target. For example `targetValue`.
    /// 
    ///  * Where `{capabilityName}` is the name of the Capability. For example `capabilityName`.
    /// </summary>
    [AzureResourceType("azure:chaosstudio/capability:Capability")]
    public partial class Capability : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The capability that should be applied to the Chaos Studio Target. For supported values please see this Chaos Studio [Fault Library](https://learn.microsoft.com/azure/chaos-studio/chaos-studio-fault-library). Changing this forces a new Chaos Studio Capability to be created.
        /// </summary>
        [Output("capabilityType")]
        public Output<string> CapabilityType { get; private set; } = null!;

        /// <summary>
        /// The Chaos Studio Target that the capability should be applied to. Changing this forces a new Chaos Studio Capability to be created.
        /// </summary>
        [Output("chaosStudioTargetId")]
        public Output<string> ChaosStudioTargetId { get; private set; } = null!;

        /// <summary>
        /// The Unique Resource Name of the Capability.
        /// </summary>
        [Output("urn")]
        public Output<string> Urn { get; private set; } = null!;


        /// <summary>
        /// Create a Capability resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Capability(string name, CapabilityArgs args, CustomResourceOptions? options = null)
            : base("azure:chaosstudio/capability:Capability", name, args ?? new CapabilityArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Capability(string name, Input<string> id, CapabilityState? state = null, CustomResourceOptions? options = null)
            : base("azure:chaosstudio/capability:Capability", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Capability resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Capability Get(string name, Input<string> id, CapabilityState? state = null, CustomResourceOptions? options = null)
        {
            return new Capability(name, id, state, options);
        }
    }

    public sealed class CapabilityArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The capability that should be applied to the Chaos Studio Target. For supported values please see this Chaos Studio [Fault Library](https://learn.microsoft.com/azure/chaos-studio/chaos-studio-fault-library). Changing this forces a new Chaos Studio Capability to be created.
        /// </summary>
        [Input("capabilityType", required: true)]
        public Input<string> CapabilityType { get; set; } = null!;

        /// <summary>
        /// The Chaos Studio Target that the capability should be applied to. Changing this forces a new Chaos Studio Capability to be created.
        /// </summary>
        [Input("chaosStudioTargetId", required: true)]
        public Input<string> ChaosStudioTargetId { get; set; } = null!;

        public CapabilityArgs()
        {
        }
        public static new CapabilityArgs Empty => new CapabilityArgs();
    }

    public sealed class CapabilityState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The capability that should be applied to the Chaos Studio Target. For supported values please see this Chaos Studio [Fault Library](https://learn.microsoft.com/azure/chaos-studio/chaos-studio-fault-library). Changing this forces a new Chaos Studio Capability to be created.
        /// </summary>
        [Input("capabilityType")]
        public Input<string>? CapabilityType { get; set; }

        /// <summary>
        /// The Chaos Studio Target that the capability should be applied to. Changing this forces a new Chaos Studio Capability to be created.
        /// </summary>
        [Input("chaosStudioTargetId")]
        public Input<string>? ChaosStudioTargetId { get; set; }

        /// <summary>
        /// The Unique Resource Name of the Capability.
        /// </summary>
        [Input("urn")]
        public Input<string>? Urn { get; set; }

        public CapabilityState()
        {
        }
        public static new CapabilityState Empty => new CapabilityState();
    }
}
