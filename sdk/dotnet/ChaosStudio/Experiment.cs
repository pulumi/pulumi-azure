// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ChaosStudio
{
    /// <summary>
    /// Manages a Chaos Studio Experiment.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Name = "example",
    ///         Location = "westeurope",
    ///     });
    /// 
    ///     var exampleUserAssignedIdentity = new Azure.Authorization.UserAssignedIdentity("example", new()
    ///     {
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///         Name = "example",
    ///     });
    /// 
    ///     var exampleVirtualNetwork = new Azure.Network.VirtualNetwork("example", new()
    ///     {
    ///         Name = "example",
    ///         AddressSpaces = new[]
    ///         {
    ///             "10.0.0.0/16",
    ///         },
    ///         Location = example.Location,
    ///         ResourceGroupName = example.Name,
    ///     });
    /// 
    ///     var exampleSubnet = new Azure.Network.Subnet("example", new()
    ///     {
    ///         Name = "internal",
    ///         ResourceGroupName = example.Name,
    ///         VirtualNetworkName = exampleVirtualNetwork.Name,
    ///         AddressPrefixes = new[]
    ///         {
    ///             "10.0.2.0/24",
    ///         },
    ///     });
    /// 
    ///     var exampleNetworkInterface = new Azure.Network.NetworkInterface("example", new()
    ///     {
    ///         Name = "example",
    ///         Location = example.Location,
    ///         ResourceGroupName = example.Name,
    ///         IpConfigurations = new[]
    ///         {
    ///             new Azure.Network.Inputs.NetworkInterfaceIpConfigurationArgs
    ///             {
    ///                 Name = "example",
    ///                 SubnetId = exampleSubnet.Id,
    ///                 PrivateIpAddressAllocation = "Dynamic",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleLinuxVirtualMachine = new Azure.Compute.LinuxVirtualMachine("example", new()
    ///     {
    ///         Name = "example",
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///         Size = "Standard_F2",
    ///         AdminUsername = "adminuser",
    ///         AdminPassword = "example",
    ///         DisablePasswordAuthentication = false,
    ///         NetworkInterfaceIds = new[]
    ///         {
    ///             exampleNetworkInterface.Id,
    ///         },
    ///         OsDisk = new Azure.Compute.Inputs.LinuxVirtualMachineOsDiskArgs
    ///         {
    ///             Caching = "ReadWrite",
    ///             StorageAccountType = "Standard_LRS",
    ///         },
    ///         SourceImageReference = new Azure.Compute.Inputs.LinuxVirtualMachineSourceImageReferenceArgs
    ///         {
    ///             Publisher = "Canonical",
    ///             Offer = "0001-com-ubuntu-server-jammy",
    ///             Sku = "22_04-lts",
    ///             Version = "latest",
    ///         },
    ///     });
    /// 
    ///     var exampleTarget = new Azure.ChaosStudio.Target("example", new()
    ///     {
    ///         Location = example.Location,
    ///         TargetResourceId = exampleLinuxVirtualMachine.Id,
    ///         TargetType = "Microsoft-VirtualMachine",
    ///     });
    /// 
    ///     var exampleCapability = new Azure.ChaosStudio.Capability("example", new()
    ///     {
    ///         ChaosStudioTargetId = exampleTarget.Id,
    ///         CapabilityType = "Shutdown-1.0",
    ///     });
    /// 
    ///     var exampleExperiment = new Azure.ChaosStudio.Experiment("example", new()
    ///     {
    ///         Location = example.Location,
    ///         Name = "example",
    ///         ResourceGroupName = example.Name,
    ///         Identity = new Azure.ChaosStudio.Inputs.ExperimentIdentityArgs
    ///         {
    ///             Type = "SystemAssigned",
    ///         },
    ///         Selectors = new[]
    ///         {
    ///             new Azure.ChaosStudio.Inputs.ExperimentSelectorArgs
    ///             {
    ///                 Name = "Selector1",
    ///                 ChaosStudioTargetIds = new[]
    ///                 {
    ///                     exampleTarget.Id,
    ///                 },
    ///             },
    ///         },
    ///         Steps = new[]
    ///         {
    ///             new Azure.ChaosStudio.Inputs.ExperimentStepArgs
    ///             {
    ///                 Name = "example",
    ///                 Branches = new[]
    ///                 {
    ///                     new Azure.ChaosStudio.Inputs.ExperimentStepBranchArgs
    ///                     {
    ///                         Name = "example",
    ///                         Actions = new[]
    ///                         {
    ///                             new Azure.ChaosStudio.Inputs.ExperimentStepBranchActionArgs
    ///                             {
    ///                                 Urn = exampleCapability.CapabilityUrn,
    ///                                 SelectorName = "Selector1",
    ///                                 Parameters = 
    ///                                 {
    ///                                     { "abruptShutdown", "false" },
    ///                                 },
    ///                                 ActionType = "continuous",
    ///                                 Duration = "PT10M",
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## API Providers
    /// 
    /// &lt;!-- This section is generated, changes will be overwritten --&gt;
    /// This resource uses the following Azure API Providers:
    /// 
    /// * `Microsoft.Chaos` - 2023-11-01
    /// 
    /// ## Import
    /// 
    /// Chaos Studio Experiments can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:chaosstudio/experiment:Experiment example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Chaos/experiments/experiment1
    /// ```
    /// </summary>
    [AzureResourceType("azure:chaosstudio/experiment:Experiment")]
    public partial class Experiment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A `identity` block as defined below.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.ExperimentIdentity?> Identity { get; private set; } = null!;

        /// <summary>
        /// The Azure Region where the Chaos Studio Experiment should exist. Changing this forces a new Chaos Studio Experiment to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Chaos Studio Experiment. Changing this forces a new Chaos Studio Experiment to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Chaos Studio Experiment should exist. Changing this forces a new Chaos Studio Experiment to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// One or more `selectors` blocks as defined below.
        /// </summary>
        [Output("selectors")]
        public Output<ImmutableArray<Outputs.ExperimentSelector>> Selectors { get; private set; } = null!;

        /// <summary>
        /// One or more `steps` blocks as defined below.
        /// </summary>
        [Output("steps")]
        public Output<ImmutableArray<Outputs.ExperimentStep>> Steps { get; private set; } = null!;


        /// <summary>
        /// Create a Experiment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Experiment(string name, ExperimentArgs args, CustomResourceOptions? options = null)
            : base("azure:chaosstudio/experiment:Experiment", name, args ?? new ExperimentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Experiment(string name, Input<string> id, ExperimentState? state = null, CustomResourceOptions? options = null)
            : base("azure:chaosstudio/experiment:Experiment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Experiment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Experiment Get(string name, Input<string> id, ExperimentState? state = null, CustomResourceOptions? options = null)
        {
            return new Experiment(name, id, state, options);
        }
    }

    public sealed class ExperimentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A `identity` block as defined below.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.ExperimentIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// The Azure Region where the Chaos Studio Experiment should exist. Changing this forces a new Chaos Studio Experiment to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name which should be used for this Chaos Studio Experiment. Changing this forces a new Chaos Studio Experiment to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Chaos Studio Experiment should exist. Changing this forces a new Chaos Studio Experiment to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("selectors", required: true)]
        private InputList<Inputs.ExperimentSelectorArgs>? _selectors;

        /// <summary>
        /// One or more `selectors` blocks as defined below.
        /// </summary>
        public InputList<Inputs.ExperimentSelectorArgs> Selectors
        {
            get => _selectors ?? (_selectors = new InputList<Inputs.ExperimentSelectorArgs>());
            set => _selectors = value;
        }

        [Input("steps", required: true)]
        private InputList<Inputs.ExperimentStepArgs>? _steps;

        /// <summary>
        /// One or more `steps` blocks as defined below.
        /// </summary>
        public InputList<Inputs.ExperimentStepArgs> Steps
        {
            get => _steps ?? (_steps = new InputList<Inputs.ExperimentStepArgs>());
            set => _steps = value;
        }

        public ExperimentArgs()
        {
        }
        public static new ExperimentArgs Empty => new ExperimentArgs();
    }

    public sealed class ExperimentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A `identity` block as defined below.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.ExperimentIdentityGetArgs>? Identity { get; set; }

        /// <summary>
        /// The Azure Region where the Chaos Studio Experiment should exist. Changing this forces a new Chaos Studio Experiment to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name which should be used for this Chaos Studio Experiment. Changing this forces a new Chaos Studio Experiment to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Chaos Studio Experiment should exist. Changing this forces a new Chaos Studio Experiment to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        [Input("selectors")]
        private InputList<Inputs.ExperimentSelectorGetArgs>? _selectors;

        /// <summary>
        /// One or more `selectors` blocks as defined below.
        /// </summary>
        public InputList<Inputs.ExperimentSelectorGetArgs> Selectors
        {
            get => _selectors ?? (_selectors = new InputList<Inputs.ExperimentSelectorGetArgs>());
            set => _selectors = value;
        }

        [Input("steps")]
        private InputList<Inputs.ExperimentStepGetArgs>? _steps;

        /// <summary>
        /// One or more `steps` blocks as defined below.
        /// </summary>
        public InputList<Inputs.ExperimentStepGetArgs> Steps
        {
            get => _steps ?? (_steps = new InputList<Inputs.ExperimentStepGetArgs>());
            set => _steps = value;
        }

        public ExperimentState()
        {
        }
        public static new ExperimentState Empty => new ExperimentState();
    }
}
