// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ChaosStudio.Outputs
{

    [OutputType]
    public sealed class ExperimentStepBranchAction
    {
        /// <summary>
        /// The type of action that should be added to the experiment. Possible values are `Continuous`, `Delay` and `Discrete`.
        /// </summary>
        public readonly string ActionType;
        /// <summary>
        /// An ISO8601 formatted string specifying the duration for a `Delay` or `Continuous` action.
        /// </summary>
        public readonly string? Duration;
        /// <summary>
        /// A key-value map of additional parameters to configure the action. The values that are accepted by this depend on the `Urn` i.e. the capability/fault that is applied. Possible parameter values can be found in this [documentation](https://learn.microsoft.com/azure/chaos-studio/chaos-studio-fault-library)
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Parameters;
        /// <summary>
        /// The name of the Selector to which this action should apply to. This must be specified if the `ActionType` is `Continuous` or `Discrete`.
        /// </summary>
        public readonly string? SelectorName;
        /// <summary>
        /// The Unique Resource Name of the action, this value is provided by the `azure.chaosstudio.Capability` resource e.g. `azurerm_chaos_studio_capability.example.urn`. This must be specified if the `ActionType` is `Continuous` or `Discrete`.
        /// </summary>
        public readonly string? Urn;

        [OutputConstructor]
        private ExperimentStepBranchAction(
            string actionType,

            string? duration,

            ImmutableDictionary<string, string>? parameters,

            string? selectorName,

            string? urn)
        {
            ActionType = actionType;
            Duration = duration;
            Parameters = parameters;
            SelectorName = selectorName;
            Urn = urn;
        }
    }
}
