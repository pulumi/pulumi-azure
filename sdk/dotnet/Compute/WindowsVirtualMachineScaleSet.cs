// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Compute
{
    public partial class WindowsVirtualMachineScaleSet : Pulumi.CustomResource
    {
        /// <summary>
        /// A `additional_capabilities` block as defined below.
        /// </summary>
        [Output("additionalCapabilities")]
        public Output<Outputs.WindowsVirtualMachineScaleSetAdditionalCapabilities?> AdditionalCapabilities { get; private set; } = null!;

        /// <summary>
        /// One or more `additional_unattend_content` blocks as defined below.
        /// </summary>
        [Output("additionalUnattendContents")]
        public Output<ImmutableArray<Outputs.WindowsVirtualMachineScaleSetAdditionalUnattendContents>> AdditionalUnattendContents { get; private set; } = null!;

        /// <summary>
        /// The Password which should be used for the local-administrator on this Virtual Machine. Changing this forces a new resource to be created.
        /// </summary>
        [Output("adminPassword")]
        public Output<string> AdminPassword { get; private set; } = null!;

        /// <summary>
        /// The username of the local administrator on each Virtual Machine Scale Set instance. Changing this forces a new resource to be created.
        /// </summary>
        [Output("adminUsername")]
        public Output<string> AdminUsername { get; private set; } = null!;

        /// <summary>
        /// A `automatic_os_upgrade_policy` block as defined below. This is Required and can only be specified when `upgrade_mode` is set to `Automatic`.
        /// </summary>
        [Output("automaticOsUpgradePolicy")]
        public Output<Outputs.WindowsVirtualMachineScaleSetAutomaticOsUpgradePolicy?> AutomaticOsUpgradePolicy { get; private set; } = null!;

        /// <summary>
        /// A `boot_diagnostics` block as defined below.
        /// </summary>
        [Output("bootDiagnostics")]
        public Output<Outputs.WindowsVirtualMachineScaleSetBootDiagnostics?> BootDiagnostics { get; private set; } = null!;

        /// <summary>
        /// The prefix which should be used for the name of the Virtual Machines in this Scale Set. If unspecified this defaults to the value for the `name` field.
        /// </summary>
        [Output("computerNamePrefix")]
        public Output<string> ComputerNamePrefix { get; private set; } = null!;

        /// <summary>
        /// The Base64-Encoded Custom Data which should be used for this Virtual Machine Scale Set.
        /// </summary>
        [Output("customData")]
        public Output<string?> CustomData { get; private set; } = null!;

        /// <summary>
        /// One or more `data_disk` blocks as defined below.
        /// </summary>
        [Output("dataDisks")]
        public Output<ImmutableArray<Outputs.WindowsVirtualMachineScaleSetDataDisks>> DataDisks { get; private set; } = null!;

        /// <summary>
        /// Should Virtual Machine Extensions be run on Overprovisioned Virtual Machines in the Scale Set? Defaults to `false`.
        /// </summary>
        [Output("doNotRunExtensionsOnOverprovisionedMachines")]
        public Output<bool?> DoNotRunExtensionsOnOverprovisionedMachines { get; private set; } = null!;

        /// <summary>
        /// Are automatic updates enabled for this Virtual Machine? Defaults to `true`.
        /// </summary>
        [Output("enableAutomaticUpdates")]
        public Output<bool?> EnableAutomaticUpdates { get; private set; } = null!;

        /// <summary>
        /// The Policy which should be used Virtual Machines are Evicted from the Scale Set. Changing this forces a new resource to be created.
        /// </summary>
        [Output("evictionPolicy")]
        public Output<string?> EvictionPolicy { get; private set; } = null!;

        /// <summary>
        /// The ID of a Load Balancer Probe which should be used to determine the health of an instance. Changing this forces a new resource to be created. This is Required and can only be specified when `upgrade_mode` is set to `Automatic` or `Rolling`.
        /// </summary>
        [Output("healthProbeId")]
        public Output<string?> HealthProbeId { get; private set; } = null!;

        /// <summary>
        /// A `identity` block as defined below.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.WindowsVirtualMachineScaleSetIdentity?> Identity { get; private set; } = null!;

        /// <summary>
        /// The number of Virtual Machines in the Scale Set.
        /// </summary>
        [Output("instances")]
        public Output<int> Instances { get; private set; } = null!;

        /// <summary>
        /// Specifies the type of on-premise license (also known as [Azure Hybrid Use Benefit](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing)) which should be used for this Virtual Machine Scale Set. Possible values are `None`, `Windows_Client` and `Windows_Server`. Changing this forces a new resource to be created.
        /// </summary>
        [Output("licenseType")]
        public Output<string?> LicenseType { get; private set; } = null!;

        /// <summary>
        /// The Azure location where the Windows Virtual Machine Scale Set should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The maximum price you're willing to pay for each Virtual Machine in this Scale Set, in US Dollars; which must be greater than the current spot price. If this bid price falls below the current spot price the Virtual Machines in the Scale Set will be evicted using the `eviction_policy`. Defaults to `-1`, which means that each Virtual Machine in the Scale Set should not be evicted for price reasons.
        /// </summary>
        [Output("maxBidPrice")]
        public Output<double?> MaxBidPrice { get; private set; } = null!;

        /// <summary>
        /// The name of the Windows Virtual Machine Scale Set. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// One or more `network_interface` blocks as defined below.
        /// </summary>
        [Output("networkInterfaces")]
        public Output<ImmutableArray<Outputs.WindowsVirtualMachineScaleSetNetworkInterfaces>> NetworkInterfaces { get; private set; } = null!;

        /// <summary>
        /// An `os_disk` block as defined below.
        /// </summary>
        [Output("osDisk")]
        public Output<Outputs.WindowsVirtualMachineScaleSetOsDisk> OsDisk { get; private set; } = null!;

        /// <summary>
        /// Should Azure over-provision Virtual Machines in this Scale Set? This means that multiple Virtual Machines will be provisioned and Azure will keep the instances which become available first - which improves provisioning success rates and improves deployment time. You're not billed for these over-provisioned VM's and they don't count towards the Subscription Quota. Defaults to `false`.
        /// </summary>
        [Output("overprovision")]
        public Output<bool?> Overprovision { get; private set; } = null!;

        [Output("plan")]
        public Output<Outputs.WindowsVirtualMachineScaleSetPlan?> Plan { get; private set; } = null!;

        /// <summary>
        /// The Priority of this Virtual Machine Scale Set. Possible values are `Regular` and `Spot`. Defaults to `Regular`. Changing this value forces a new resource.
        /// </summary>
        [Output("priority")]
        public Output<string?> Priority { get; private set; } = null!;

        /// <summary>
        /// Should the Azure VM Agent be provisioned on each Virtual Machine in the Scale Set? Defaults to `true`. Changing this value forces a new resource to be created.
        /// </summary>
        [Output("provisionVmAgent")]
        public Output<bool?> ProvisionVmAgent { get; private set; } = null!;

        /// <summary>
        /// The ID of the Proximity Placement Group in which the Virtual Machine Scale Set should be assigned to. Changing this forces a new resource to be created.
        /// </summary>
        [Output("proximityPlacementGroupId")]
        public Output<string?> ProximityPlacementGroupId { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group in which the Windows Virtual Machine Scale Set should be exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// A `rolling_upgrade_policy` block as defined below. This is Required and can only be specified when `upgrade_mode` is set to `Automatic` or `Rolling`.
        /// </summary>
        [Output("rollingUpgradePolicy")]
        public Output<Outputs.WindowsVirtualMachineScaleSetRollingUpgradePolicy?> RollingUpgradePolicy { get; private set; } = null!;

        /// <summary>
        /// One or more `secret` blocks as defined below.
        /// </summary>
        [Output("secrets")]
        public Output<ImmutableArray<Outputs.WindowsVirtualMachineScaleSetSecrets>> Secrets { get; private set; } = null!;

        /// <summary>
        /// Should this Virtual Machine Scale Set be limited to a Single Placement Group, which means the number of instances will be capped at 100 Virtual Machines. Defaults to `true`.
        /// </summary>
        [Output("singlePlacementGroup")]
        public Output<bool?> SinglePlacementGroup { get; private set; } = null!;

        /// <summary>
        /// The Virtual Machine SKU for the Scale Set, such as `Standard_F2`.
        /// </summary>
        [Output("sku")]
        public Output<string> Sku { get; private set; } = null!;

        /// <summary>
        /// The ID of an Image which each Virtual Machine in this Scale Set should be based on.
        /// </summary>
        [Output("sourceImageId")]
        public Output<string?> SourceImageId { get; private set; } = null!;

        /// <summary>
        /// A `source_image_reference` block as defined below.
        /// </summary>
        [Output("sourceImageReference")]
        public Output<Outputs.WindowsVirtualMachineScaleSetSourceImageReference?> SourceImageReference { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags which should be assigned to this Virtual Machine Scale Set.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Specifies the time zone of the virtual machine, [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/).
        /// </summary>
        [Output("timezone")]
        public Output<string?> Timezone { get; private set; } = null!;

        /// <summary>
        /// The Unique ID for this Windows Virtual Machine Scale Set.
        /// </summary>
        [Output("uniqueId")]
        public Output<string> UniqueId { get; private set; } = null!;

        /// <summary>
        /// Specifies how Upgrades (e.g. changing the Image/SKU) should be performed to Virtual Machine Instances. Possible values are `Automatic`, `Manual` and `Rolling`. Defaults to `Manual`.
        /// </summary>
        [Output("upgradeMode")]
        public Output<string?> UpgradeMode { get; private set; } = null!;

        /// <summary>
        /// One or more `winrm_listener` blocks as defined below.
        /// </summary>
        [Output("winrmListeners")]
        public Output<ImmutableArray<Outputs.WindowsVirtualMachineScaleSetWinrmListeners>> WinrmListeners { get; private set; } = null!;

        /// <summary>
        /// Should the Virtual Machines in this Scale Set be strictly evenly distributed across Availability Zones? Defaults to `false`. Changing this forces a new resource to be created.
        /// </summary>
        [Output("zoneBalance")]
        public Output<bool?> ZoneBalance { get; private set; } = null!;

        /// <summary>
        /// A list of Availability Zones in which the Virtual Machines in this Scale Set should be created in. Changing this forces a new resource to be created.
        /// </summary>
        [Output("zones")]
        public Output<ImmutableArray<string>> Zones { get; private set; } = null!;


        /// <summary>
        /// Create a WindowsVirtualMachineScaleSet resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WindowsVirtualMachineScaleSet(string name, WindowsVirtualMachineScaleSetArgs args, CustomResourceOptions? options = null)
            : base("azure:compute/windowsVirtualMachineScaleSet:WindowsVirtualMachineScaleSet", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private WindowsVirtualMachineScaleSet(string name, Input<string> id, WindowsVirtualMachineScaleSetState? state = null, CustomResourceOptions? options = null)
            : base("azure:compute/windowsVirtualMachineScaleSet:WindowsVirtualMachineScaleSet", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WindowsVirtualMachineScaleSet resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WindowsVirtualMachineScaleSet Get(string name, Input<string> id, WindowsVirtualMachineScaleSetState? state = null, CustomResourceOptions? options = null)
        {
            return new WindowsVirtualMachineScaleSet(name, id, state, options);
        }
    }

    public sealed class WindowsVirtualMachineScaleSetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A `additional_capabilities` block as defined below.
        /// </summary>
        [Input("additionalCapabilities")]
        public Input<Inputs.WindowsVirtualMachineScaleSetAdditionalCapabilitiesArgs>? AdditionalCapabilities { get; set; }

        [Input("additionalUnattendContents")]
        private InputList<Inputs.WindowsVirtualMachineScaleSetAdditionalUnattendContentsArgs>? _additionalUnattendContents;

        /// <summary>
        /// One or more `additional_unattend_content` blocks as defined below.
        /// </summary>
        public InputList<Inputs.WindowsVirtualMachineScaleSetAdditionalUnattendContentsArgs> AdditionalUnattendContents
        {
            get => _additionalUnattendContents ?? (_additionalUnattendContents = new InputList<Inputs.WindowsVirtualMachineScaleSetAdditionalUnattendContentsArgs>());
            set => _additionalUnattendContents = value;
        }

        /// <summary>
        /// The Password which should be used for the local-administrator on this Virtual Machine. Changing this forces a new resource to be created.
        /// </summary>
        [Input("adminPassword", required: true)]
        public Input<string> AdminPassword { get; set; } = null!;

        /// <summary>
        /// The username of the local administrator on each Virtual Machine Scale Set instance. Changing this forces a new resource to be created.
        /// </summary>
        [Input("adminUsername", required: true)]
        public Input<string> AdminUsername { get; set; } = null!;

        /// <summary>
        /// A `automatic_os_upgrade_policy` block as defined below. This is Required and can only be specified when `upgrade_mode` is set to `Automatic`.
        /// </summary>
        [Input("automaticOsUpgradePolicy")]
        public Input<Inputs.WindowsVirtualMachineScaleSetAutomaticOsUpgradePolicyArgs>? AutomaticOsUpgradePolicy { get; set; }

        /// <summary>
        /// A `boot_diagnostics` block as defined below.
        /// </summary>
        [Input("bootDiagnostics")]
        public Input<Inputs.WindowsVirtualMachineScaleSetBootDiagnosticsArgs>? BootDiagnostics { get; set; }

        /// <summary>
        /// The prefix which should be used for the name of the Virtual Machines in this Scale Set. If unspecified this defaults to the value for the `name` field.
        /// </summary>
        [Input("computerNamePrefix")]
        public Input<string>? ComputerNamePrefix { get; set; }

        /// <summary>
        /// The Base64-Encoded Custom Data which should be used for this Virtual Machine Scale Set.
        /// </summary>
        [Input("customData")]
        public Input<string>? CustomData { get; set; }

        [Input("dataDisks")]
        private InputList<Inputs.WindowsVirtualMachineScaleSetDataDisksArgs>? _dataDisks;

        /// <summary>
        /// One or more `data_disk` blocks as defined below.
        /// </summary>
        public InputList<Inputs.WindowsVirtualMachineScaleSetDataDisksArgs> DataDisks
        {
            get => _dataDisks ?? (_dataDisks = new InputList<Inputs.WindowsVirtualMachineScaleSetDataDisksArgs>());
            set => _dataDisks = value;
        }

        /// <summary>
        /// Should Virtual Machine Extensions be run on Overprovisioned Virtual Machines in the Scale Set? Defaults to `false`.
        /// </summary>
        [Input("doNotRunExtensionsOnOverprovisionedMachines")]
        public Input<bool>? DoNotRunExtensionsOnOverprovisionedMachines { get; set; }

        /// <summary>
        /// Are automatic updates enabled for this Virtual Machine? Defaults to `true`.
        /// </summary>
        [Input("enableAutomaticUpdates")]
        public Input<bool>? EnableAutomaticUpdates { get; set; }

        /// <summary>
        /// The Policy which should be used Virtual Machines are Evicted from the Scale Set. Changing this forces a new resource to be created.
        /// </summary>
        [Input("evictionPolicy")]
        public Input<string>? EvictionPolicy { get; set; }

        /// <summary>
        /// The ID of a Load Balancer Probe which should be used to determine the health of an instance. Changing this forces a new resource to be created. This is Required and can only be specified when `upgrade_mode` is set to `Automatic` or `Rolling`.
        /// </summary>
        [Input("healthProbeId")]
        public Input<string>? HealthProbeId { get; set; }

        /// <summary>
        /// A `identity` block as defined below.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.WindowsVirtualMachineScaleSetIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// The number of Virtual Machines in the Scale Set.
        /// </summary>
        [Input("instances", required: true)]
        public Input<int> Instances { get; set; } = null!;

        /// <summary>
        /// Specifies the type of on-premise license (also known as [Azure Hybrid Use Benefit](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing)) which should be used for this Virtual Machine Scale Set. Possible values are `None`, `Windows_Client` and `Windows_Server`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("licenseType")]
        public Input<string>? LicenseType { get; set; }

        /// <summary>
        /// The Azure location where the Windows Virtual Machine Scale Set should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The maximum price you're willing to pay for each Virtual Machine in this Scale Set, in US Dollars; which must be greater than the current spot price. If this bid price falls below the current spot price the Virtual Machines in the Scale Set will be evicted using the `eviction_policy`. Defaults to `-1`, which means that each Virtual Machine in the Scale Set should not be evicted for price reasons.
        /// </summary>
        [Input("maxBidPrice")]
        public Input<double>? MaxBidPrice { get; set; }

        /// <summary>
        /// The name of the Windows Virtual Machine Scale Set. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networkInterfaces", required: true)]
        private InputList<Inputs.WindowsVirtualMachineScaleSetNetworkInterfacesArgs>? _networkInterfaces;

        /// <summary>
        /// One or more `network_interface` blocks as defined below.
        /// </summary>
        public InputList<Inputs.WindowsVirtualMachineScaleSetNetworkInterfacesArgs> NetworkInterfaces
        {
            get => _networkInterfaces ?? (_networkInterfaces = new InputList<Inputs.WindowsVirtualMachineScaleSetNetworkInterfacesArgs>());
            set => _networkInterfaces = value;
        }

        /// <summary>
        /// An `os_disk` block as defined below.
        /// </summary>
        [Input("osDisk", required: true)]
        public Input<Inputs.WindowsVirtualMachineScaleSetOsDiskArgs> OsDisk { get; set; } = null!;

        /// <summary>
        /// Should Azure over-provision Virtual Machines in this Scale Set? This means that multiple Virtual Machines will be provisioned and Azure will keep the instances which become available first - which improves provisioning success rates and improves deployment time. You're not billed for these over-provisioned VM's and they don't count towards the Subscription Quota. Defaults to `false`.
        /// </summary>
        [Input("overprovision")]
        public Input<bool>? Overprovision { get; set; }

        [Input("plan")]
        public Input<Inputs.WindowsVirtualMachineScaleSetPlanArgs>? Plan { get; set; }

        /// <summary>
        /// The Priority of this Virtual Machine Scale Set. Possible values are `Regular` and `Spot`. Defaults to `Regular`. Changing this value forces a new resource.
        /// </summary>
        [Input("priority")]
        public Input<string>? Priority { get; set; }

        /// <summary>
        /// Should the Azure VM Agent be provisioned on each Virtual Machine in the Scale Set? Defaults to `true`. Changing this value forces a new resource to be created.
        /// </summary>
        [Input("provisionVmAgent")]
        public Input<bool>? ProvisionVmAgent { get; set; }

        /// <summary>
        /// The ID of the Proximity Placement Group in which the Virtual Machine Scale Set should be assigned to. Changing this forces a new resource to be created.
        /// </summary>
        [Input("proximityPlacementGroupId")]
        public Input<string>? ProximityPlacementGroupId { get; set; }

        /// <summary>
        /// The name of the Resource Group in which the Windows Virtual Machine Scale Set should be exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// A `rolling_upgrade_policy` block as defined below. This is Required and can only be specified when `upgrade_mode` is set to `Automatic` or `Rolling`.
        /// </summary>
        [Input("rollingUpgradePolicy")]
        public Input<Inputs.WindowsVirtualMachineScaleSetRollingUpgradePolicyArgs>? RollingUpgradePolicy { get; set; }

        [Input("secrets")]
        private InputList<Inputs.WindowsVirtualMachineScaleSetSecretsArgs>? _secrets;

        /// <summary>
        /// One or more `secret` blocks as defined below.
        /// </summary>
        public InputList<Inputs.WindowsVirtualMachineScaleSetSecretsArgs> Secrets
        {
            get => _secrets ?? (_secrets = new InputList<Inputs.WindowsVirtualMachineScaleSetSecretsArgs>());
            set => _secrets = value;
        }

        /// <summary>
        /// Should this Virtual Machine Scale Set be limited to a Single Placement Group, which means the number of instances will be capped at 100 Virtual Machines. Defaults to `true`.
        /// </summary>
        [Input("singlePlacementGroup")]
        public Input<bool>? SinglePlacementGroup { get; set; }

        /// <summary>
        /// The Virtual Machine SKU for the Scale Set, such as `Standard_F2`.
        /// </summary>
        [Input("sku", required: true)]
        public Input<string> Sku { get; set; } = null!;

        /// <summary>
        /// The ID of an Image which each Virtual Machine in this Scale Set should be based on.
        /// </summary>
        [Input("sourceImageId")]
        public Input<string>? SourceImageId { get; set; }

        /// <summary>
        /// A `source_image_reference` block as defined below.
        /// </summary>
        [Input("sourceImageReference")]
        public Input<Inputs.WindowsVirtualMachineScaleSetSourceImageReferenceArgs>? SourceImageReference { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to this Virtual Machine Scale Set.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Specifies the time zone of the virtual machine, [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/).
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        /// <summary>
        /// Specifies how Upgrades (e.g. changing the Image/SKU) should be performed to Virtual Machine Instances. Possible values are `Automatic`, `Manual` and `Rolling`. Defaults to `Manual`.
        /// </summary>
        [Input("upgradeMode")]
        public Input<string>? UpgradeMode { get; set; }

        [Input("winrmListeners")]
        private InputList<Inputs.WindowsVirtualMachineScaleSetWinrmListenersArgs>? _winrmListeners;

        /// <summary>
        /// One or more `winrm_listener` blocks as defined below.
        /// </summary>
        public InputList<Inputs.WindowsVirtualMachineScaleSetWinrmListenersArgs> WinrmListeners
        {
            get => _winrmListeners ?? (_winrmListeners = new InputList<Inputs.WindowsVirtualMachineScaleSetWinrmListenersArgs>());
            set => _winrmListeners = value;
        }

        /// <summary>
        /// Should the Virtual Machines in this Scale Set be strictly evenly distributed across Availability Zones? Defaults to `false`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("zoneBalance")]
        public Input<bool>? ZoneBalance { get; set; }

        [Input("zones")]
        private InputList<string>? _zones;

        /// <summary>
        /// A list of Availability Zones in which the Virtual Machines in this Scale Set should be created in. Changing this forces a new resource to be created.
        /// </summary>
        public InputList<string> Zones
        {
            get => _zones ?? (_zones = new InputList<string>());
            set => _zones = value;
        }

        public WindowsVirtualMachineScaleSetArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineScaleSetState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A `additional_capabilities` block as defined below.
        /// </summary>
        [Input("additionalCapabilities")]
        public Input<Inputs.WindowsVirtualMachineScaleSetAdditionalCapabilitiesGetArgs>? AdditionalCapabilities { get; set; }

        [Input("additionalUnattendContents")]
        private InputList<Inputs.WindowsVirtualMachineScaleSetAdditionalUnattendContentsGetArgs>? _additionalUnattendContents;

        /// <summary>
        /// One or more `additional_unattend_content` blocks as defined below.
        /// </summary>
        public InputList<Inputs.WindowsVirtualMachineScaleSetAdditionalUnattendContentsGetArgs> AdditionalUnattendContents
        {
            get => _additionalUnattendContents ?? (_additionalUnattendContents = new InputList<Inputs.WindowsVirtualMachineScaleSetAdditionalUnattendContentsGetArgs>());
            set => _additionalUnattendContents = value;
        }

        /// <summary>
        /// The Password which should be used for the local-administrator on this Virtual Machine. Changing this forces a new resource to be created.
        /// </summary>
        [Input("adminPassword")]
        public Input<string>? AdminPassword { get; set; }

        /// <summary>
        /// The username of the local administrator on each Virtual Machine Scale Set instance. Changing this forces a new resource to be created.
        /// </summary>
        [Input("adminUsername")]
        public Input<string>? AdminUsername { get; set; }

        /// <summary>
        /// A `automatic_os_upgrade_policy` block as defined below. This is Required and can only be specified when `upgrade_mode` is set to `Automatic`.
        /// </summary>
        [Input("automaticOsUpgradePolicy")]
        public Input<Inputs.WindowsVirtualMachineScaleSetAutomaticOsUpgradePolicyGetArgs>? AutomaticOsUpgradePolicy { get; set; }

        /// <summary>
        /// A `boot_diagnostics` block as defined below.
        /// </summary>
        [Input("bootDiagnostics")]
        public Input<Inputs.WindowsVirtualMachineScaleSetBootDiagnosticsGetArgs>? BootDiagnostics { get; set; }

        /// <summary>
        /// The prefix which should be used for the name of the Virtual Machines in this Scale Set. If unspecified this defaults to the value for the `name` field.
        /// </summary>
        [Input("computerNamePrefix")]
        public Input<string>? ComputerNamePrefix { get; set; }

        /// <summary>
        /// The Base64-Encoded Custom Data which should be used for this Virtual Machine Scale Set.
        /// </summary>
        [Input("customData")]
        public Input<string>? CustomData { get; set; }

        [Input("dataDisks")]
        private InputList<Inputs.WindowsVirtualMachineScaleSetDataDisksGetArgs>? _dataDisks;

        /// <summary>
        /// One or more `data_disk` blocks as defined below.
        /// </summary>
        public InputList<Inputs.WindowsVirtualMachineScaleSetDataDisksGetArgs> DataDisks
        {
            get => _dataDisks ?? (_dataDisks = new InputList<Inputs.WindowsVirtualMachineScaleSetDataDisksGetArgs>());
            set => _dataDisks = value;
        }

        /// <summary>
        /// Should Virtual Machine Extensions be run on Overprovisioned Virtual Machines in the Scale Set? Defaults to `false`.
        /// </summary>
        [Input("doNotRunExtensionsOnOverprovisionedMachines")]
        public Input<bool>? DoNotRunExtensionsOnOverprovisionedMachines { get; set; }

        /// <summary>
        /// Are automatic updates enabled for this Virtual Machine? Defaults to `true`.
        /// </summary>
        [Input("enableAutomaticUpdates")]
        public Input<bool>? EnableAutomaticUpdates { get; set; }

        /// <summary>
        /// The Policy which should be used Virtual Machines are Evicted from the Scale Set. Changing this forces a new resource to be created.
        /// </summary>
        [Input("evictionPolicy")]
        public Input<string>? EvictionPolicy { get; set; }

        /// <summary>
        /// The ID of a Load Balancer Probe which should be used to determine the health of an instance. Changing this forces a new resource to be created. This is Required and can only be specified when `upgrade_mode` is set to `Automatic` or `Rolling`.
        /// </summary>
        [Input("healthProbeId")]
        public Input<string>? HealthProbeId { get; set; }

        /// <summary>
        /// A `identity` block as defined below.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.WindowsVirtualMachineScaleSetIdentityGetArgs>? Identity { get; set; }

        /// <summary>
        /// The number of Virtual Machines in the Scale Set.
        /// </summary>
        [Input("instances")]
        public Input<int>? Instances { get; set; }

        /// <summary>
        /// Specifies the type of on-premise license (also known as [Azure Hybrid Use Benefit](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing)) which should be used for this Virtual Machine Scale Set. Possible values are `None`, `Windows_Client` and `Windows_Server`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("licenseType")]
        public Input<string>? LicenseType { get; set; }

        /// <summary>
        /// The Azure location where the Windows Virtual Machine Scale Set should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The maximum price you're willing to pay for each Virtual Machine in this Scale Set, in US Dollars; which must be greater than the current spot price. If this bid price falls below the current spot price the Virtual Machines in the Scale Set will be evicted using the `eviction_policy`. Defaults to `-1`, which means that each Virtual Machine in the Scale Set should not be evicted for price reasons.
        /// </summary>
        [Input("maxBidPrice")]
        public Input<double>? MaxBidPrice { get; set; }

        /// <summary>
        /// The name of the Windows Virtual Machine Scale Set. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networkInterfaces")]
        private InputList<Inputs.WindowsVirtualMachineScaleSetNetworkInterfacesGetArgs>? _networkInterfaces;

        /// <summary>
        /// One or more `network_interface` blocks as defined below.
        /// </summary>
        public InputList<Inputs.WindowsVirtualMachineScaleSetNetworkInterfacesGetArgs> NetworkInterfaces
        {
            get => _networkInterfaces ?? (_networkInterfaces = new InputList<Inputs.WindowsVirtualMachineScaleSetNetworkInterfacesGetArgs>());
            set => _networkInterfaces = value;
        }

        /// <summary>
        /// An `os_disk` block as defined below.
        /// </summary>
        [Input("osDisk")]
        public Input<Inputs.WindowsVirtualMachineScaleSetOsDiskGetArgs>? OsDisk { get; set; }

        /// <summary>
        /// Should Azure over-provision Virtual Machines in this Scale Set? This means that multiple Virtual Machines will be provisioned and Azure will keep the instances which become available first - which improves provisioning success rates and improves deployment time. You're not billed for these over-provisioned VM's and they don't count towards the Subscription Quota. Defaults to `false`.
        /// </summary>
        [Input("overprovision")]
        public Input<bool>? Overprovision { get; set; }

        [Input("plan")]
        public Input<Inputs.WindowsVirtualMachineScaleSetPlanGetArgs>? Plan { get; set; }

        /// <summary>
        /// The Priority of this Virtual Machine Scale Set. Possible values are `Regular` and `Spot`. Defaults to `Regular`. Changing this value forces a new resource.
        /// </summary>
        [Input("priority")]
        public Input<string>? Priority { get; set; }

        /// <summary>
        /// Should the Azure VM Agent be provisioned on each Virtual Machine in the Scale Set? Defaults to `true`. Changing this value forces a new resource to be created.
        /// </summary>
        [Input("provisionVmAgent")]
        public Input<bool>? ProvisionVmAgent { get; set; }

        /// <summary>
        /// The ID of the Proximity Placement Group in which the Virtual Machine Scale Set should be assigned to. Changing this forces a new resource to be created.
        /// </summary>
        [Input("proximityPlacementGroupId")]
        public Input<string>? ProximityPlacementGroupId { get; set; }

        /// <summary>
        /// The name of the Resource Group in which the Windows Virtual Machine Scale Set should be exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// A `rolling_upgrade_policy` block as defined below. This is Required and can only be specified when `upgrade_mode` is set to `Automatic` or `Rolling`.
        /// </summary>
        [Input("rollingUpgradePolicy")]
        public Input<Inputs.WindowsVirtualMachineScaleSetRollingUpgradePolicyGetArgs>? RollingUpgradePolicy { get; set; }

        [Input("secrets")]
        private InputList<Inputs.WindowsVirtualMachineScaleSetSecretsGetArgs>? _secrets;

        /// <summary>
        /// One or more `secret` blocks as defined below.
        /// </summary>
        public InputList<Inputs.WindowsVirtualMachineScaleSetSecretsGetArgs> Secrets
        {
            get => _secrets ?? (_secrets = new InputList<Inputs.WindowsVirtualMachineScaleSetSecretsGetArgs>());
            set => _secrets = value;
        }

        /// <summary>
        /// Should this Virtual Machine Scale Set be limited to a Single Placement Group, which means the number of instances will be capped at 100 Virtual Machines. Defaults to `true`.
        /// </summary>
        [Input("singlePlacementGroup")]
        public Input<bool>? SinglePlacementGroup { get; set; }

        /// <summary>
        /// The Virtual Machine SKU for the Scale Set, such as `Standard_F2`.
        /// </summary>
        [Input("sku")]
        public Input<string>? Sku { get; set; }

        /// <summary>
        /// The ID of an Image which each Virtual Machine in this Scale Set should be based on.
        /// </summary>
        [Input("sourceImageId")]
        public Input<string>? SourceImageId { get; set; }

        /// <summary>
        /// A `source_image_reference` block as defined below.
        /// </summary>
        [Input("sourceImageReference")]
        public Input<Inputs.WindowsVirtualMachineScaleSetSourceImageReferenceGetArgs>? SourceImageReference { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to this Virtual Machine Scale Set.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Specifies the time zone of the virtual machine, [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/).
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        /// <summary>
        /// The Unique ID for this Windows Virtual Machine Scale Set.
        /// </summary>
        [Input("uniqueId")]
        public Input<string>? UniqueId { get; set; }

        /// <summary>
        /// Specifies how Upgrades (e.g. changing the Image/SKU) should be performed to Virtual Machine Instances. Possible values are `Automatic`, `Manual` and `Rolling`. Defaults to `Manual`.
        /// </summary>
        [Input("upgradeMode")]
        public Input<string>? UpgradeMode { get; set; }

        [Input("winrmListeners")]
        private InputList<Inputs.WindowsVirtualMachineScaleSetWinrmListenersGetArgs>? _winrmListeners;

        /// <summary>
        /// One or more `winrm_listener` blocks as defined below.
        /// </summary>
        public InputList<Inputs.WindowsVirtualMachineScaleSetWinrmListenersGetArgs> WinrmListeners
        {
            get => _winrmListeners ?? (_winrmListeners = new InputList<Inputs.WindowsVirtualMachineScaleSetWinrmListenersGetArgs>());
            set => _winrmListeners = value;
        }

        /// <summary>
        /// Should the Virtual Machines in this Scale Set be strictly evenly distributed across Availability Zones? Defaults to `false`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("zoneBalance")]
        public Input<bool>? ZoneBalance { get; set; }

        [Input("zones")]
        private InputList<string>? _zones;

        /// <summary>
        /// A list of Availability Zones in which the Virtual Machines in this Scale Set should be created in. Changing this forces a new resource to be created.
        /// </summary>
        public InputList<string> Zones
        {
            get => _zones ?? (_zones = new InputList<string>());
            set => _zones = value;
        }

        public WindowsVirtualMachineScaleSetState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class WindowsVirtualMachineScaleSetAdditionalCapabilitiesArgs : Pulumi.ResourceArgs
    {
        [Input("ultraSsdEnabled")]
        public Input<bool>? UltraSsdEnabled { get; set; }

        public WindowsVirtualMachineScaleSetAdditionalCapabilitiesArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineScaleSetAdditionalCapabilitiesGetArgs : Pulumi.ResourceArgs
    {
        [Input("ultraSsdEnabled")]
        public Input<bool>? UltraSsdEnabled { get; set; }

        public WindowsVirtualMachineScaleSetAdditionalCapabilitiesGetArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineScaleSetAdditionalUnattendContentsArgs : Pulumi.ResourceArgs
    {
        [Input("content", required: true)]
        public Input<string> Content { get; set; } = null!;

        [Input("setting", required: true)]
        public Input<string> Setting { get; set; } = null!;

        public WindowsVirtualMachineScaleSetAdditionalUnattendContentsArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineScaleSetAdditionalUnattendContentsGetArgs : Pulumi.ResourceArgs
    {
        [Input("content", required: true)]
        public Input<string> Content { get; set; } = null!;

        [Input("setting", required: true)]
        public Input<string> Setting { get; set; } = null!;

        public WindowsVirtualMachineScaleSetAdditionalUnattendContentsGetArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineScaleSetAutomaticOsUpgradePolicyArgs : Pulumi.ResourceArgs
    {
        [Input("disableAutomaticRollback", required: true)]
        public Input<bool> DisableAutomaticRollback { get; set; } = null!;

        [Input("enableAutomaticOsUpgrade", required: true)]
        public Input<bool> EnableAutomaticOsUpgrade { get; set; } = null!;

        public WindowsVirtualMachineScaleSetAutomaticOsUpgradePolicyArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineScaleSetAutomaticOsUpgradePolicyGetArgs : Pulumi.ResourceArgs
    {
        [Input("disableAutomaticRollback", required: true)]
        public Input<bool> DisableAutomaticRollback { get; set; } = null!;

        [Input("enableAutomaticOsUpgrade", required: true)]
        public Input<bool> EnableAutomaticOsUpgrade { get; set; } = null!;

        public WindowsVirtualMachineScaleSetAutomaticOsUpgradePolicyGetArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineScaleSetBootDiagnosticsArgs : Pulumi.ResourceArgs
    {
        [Input("storageAccountUri", required: true)]
        public Input<string> StorageAccountUri { get; set; } = null!;

        public WindowsVirtualMachineScaleSetBootDiagnosticsArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineScaleSetBootDiagnosticsGetArgs : Pulumi.ResourceArgs
    {
        [Input("storageAccountUri", required: true)]
        public Input<string> StorageAccountUri { get; set; } = null!;

        public WindowsVirtualMachineScaleSetBootDiagnosticsGetArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineScaleSetDataDisksArgs : Pulumi.ResourceArgs
    {
        [Input("caching", required: true)]
        public Input<string> Caching { get; set; } = null!;

        [Input("diskEncryptionSetId")]
        public Input<string>? DiskEncryptionSetId { get; set; }

        [Input("diskSizeGb", required: true)]
        public Input<int> DiskSizeGb { get; set; } = null!;

        [Input("lun", required: true)]
        public Input<int> Lun { get; set; } = null!;

        [Input("storageAccountType", required: true)]
        public Input<string> StorageAccountType { get; set; } = null!;

        [Input("writeAcceleratorEnabled")]
        public Input<bool>? WriteAcceleratorEnabled { get; set; }

        public WindowsVirtualMachineScaleSetDataDisksArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineScaleSetDataDisksGetArgs : Pulumi.ResourceArgs
    {
        [Input("caching", required: true)]
        public Input<string> Caching { get; set; } = null!;

        [Input("diskEncryptionSetId")]
        public Input<string>? DiskEncryptionSetId { get; set; }

        [Input("diskSizeGb", required: true)]
        public Input<int> DiskSizeGb { get; set; } = null!;

        [Input("lun", required: true)]
        public Input<int> Lun { get; set; } = null!;

        [Input("storageAccountType", required: true)]
        public Input<string> StorageAccountType { get; set; } = null!;

        [Input("writeAcceleratorEnabled")]
        public Input<bool>? WriteAcceleratorEnabled { get; set; }

        public WindowsVirtualMachineScaleSetDataDisksGetArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineScaleSetIdentityArgs : Pulumi.ResourceArgs
    {
        [Input("identityIds")]
        private InputList<string>? _identityIds;
        public InputList<string> IdentityIds
        {
            get => _identityIds ?? (_identityIds = new InputList<string>());
            set => _identityIds = value;
        }

        /// <summary>
        /// The ID of the System Managed Service Principal.
        /// </summary>
        [Input("principalId")]
        public Input<string>? PrincipalId { get; set; }

        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public WindowsVirtualMachineScaleSetIdentityArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineScaleSetIdentityGetArgs : Pulumi.ResourceArgs
    {
        [Input("identityIds")]
        private InputList<string>? _identityIds;
        public InputList<string> IdentityIds
        {
            get => _identityIds ?? (_identityIds = new InputList<string>());
            set => _identityIds = value;
        }

        /// <summary>
        /// The ID of the System Managed Service Principal.
        /// </summary>
        [Input("principalId")]
        public Input<string>? PrincipalId { get; set; }

        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public WindowsVirtualMachineScaleSetIdentityGetArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineScaleSetNetworkInterfacesArgs : Pulumi.ResourceArgs
    {
        [Input("dnsServers")]
        private InputList<string>? _dnsServers;
        public InputList<string> DnsServers
        {
            get => _dnsServers ?? (_dnsServers = new InputList<string>());
            set => _dnsServers = value;
        }

        [Input("enableAcceleratedNetworking")]
        public Input<bool>? EnableAcceleratedNetworking { get; set; }

        [Input("enableIpForwarding")]
        public Input<bool>? EnableIpForwarding { get; set; }

        [Input("ipConfigurations", required: true)]
        private InputList<WindowsVirtualMachineScaleSetNetworkInterfacesIpConfigurationsArgs>? _ipConfigurations;
        public InputList<WindowsVirtualMachineScaleSetNetworkInterfacesIpConfigurationsArgs> IpConfigurations
        {
            get => _ipConfigurations ?? (_ipConfigurations = new InputList<WindowsVirtualMachineScaleSetNetworkInterfacesIpConfigurationsArgs>());
            set => _ipConfigurations = value;
        }

        /// <summary>
        /// The name of the Windows Virtual Machine Scale Set. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("networkSecurityGroupId")]
        public Input<string>? NetworkSecurityGroupId { get; set; }

        [Input("primary")]
        public Input<bool>? Primary { get; set; }

        public WindowsVirtualMachineScaleSetNetworkInterfacesArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineScaleSetNetworkInterfacesGetArgs : Pulumi.ResourceArgs
    {
        [Input("dnsServers")]
        private InputList<string>? _dnsServers;
        public InputList<string> DnsServers
        {
            get => _dnsServers ?? (_dnsServers = new InputList<string>());
            set => _dnsServers = value;
        }

        [Input("enableAcceleratedNetworking")]
        public Input<bool>? EnableAcceleratedNetworking { get; set; }

        [Input("enableIpForwarding")]
        public Input<bool>? EnableIpForwarding { get; set; }

        [Input("ipConfigurations", required: true)]
        private InputList<WindowsVirtualMachineScaleSetNetworkInterfacesIpConfigurationsGetArgs>? _ipConfigurations;
        public InputList<WindowsVirtualMachineScaleSetNetworkInterfacesIpConfigurationsGetArgs> IpConfigurations
        {
            get => _ipConfigurations ?? (_ipConfigurations = new InputList<WindowsVirtualMachineScaleSetNetworkInterfacesIpConfigurationsGetArgs>());
            set => _ipConfigurations = value;
        }

        /// <summary>
        /// The name of the Windows Virtual Machine Scale Set. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("networkSecurityGroupId")]
        public Input<string>? NetworkSecurityGroupId { get; set; }

        [Input("primary")]
        public Input<bool>? Primary { get; set; }

        public WindowsVirtualMachineScaleSetNetworkInterfacesGetArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineScaleSetNetworkInterfacesIpConfigurationsArgs : Pulumi.ResourceArgs
    {
        [Input("applicationGatewayBackendAddressPoolIds")]
        private InputList<string>? _applicationGatewayBackendAddressPoolIds;
        public InputList<string> ApplicationGatewayBackendAddressPoolIds
        {
            get => _applicationGatewayBackendAddressPoolIds ?? (_applicationGatewayBackendAddressPoolIds = new InputList<string>());
            set => _applicationGatewayBackendAddressPoolIds = value;
        }

        [Input("applicationSecurityGroupIds")]
        private InputList<string>? _applicationSecurityGroupIds;
        public InputList<string> ApplicationSecurityGroupIds
        {
            get => _applicationSecurityGroupIds ?? (_applicationSecurityGroupIds = new InputList<string>());
            set => _applicationSecurityGroupIds = value;
        }

        [Input("loadBalancerBackendAddressPoolIds")]
        private InputList<string>? _loadBalancerBackendAddressPoolIds;
        public InputList<string> LoadBalancerBackendAddressPoolIds
        {
            get => _loadBalancerBackendAddressPoolIds ?? (_loadBalancerBackendAddressPoolIds = new InputList<string>());
            set => _loadBalancerBackendAddressPoolIds = value;
        }

        [Input("loadBalancerInboundNatRulesIds")]
        private InputList<string>? _loadBalancerInboundNatRulesIds;
        public InputList<string> LoadBalancerInboundNatRulesIds
        {
            get => _loadBalancerInboundNatRulesIds ?? (_loadBalancerInboundNatRulesIds = new InputList<string>());
            set => _loadBalancerInboundNatRulesIds = value;
        }

        /// <summary>
        /// The name of the Windows Virtual Machine Scale Set. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("primary")]
        public Input<bool>? Primary { get; set; }

        [Input("publicIpAddresses")]
        private InputList<WindowsVirtualMachineScaleSetNetworkInterfacesIpConfigurationsPublicIpAddressesArgs>? _publicIpAddresses;
        public InputList<WindowsVirtualMachineScaleSetNetworkInterfacesIpConfigurationsPublicIpAddressesArgs> PublicIpAddresses
        {
            get => _publicIpAddresses ?? (_publicIpAddresses = new InputList<WindowsVirtualMachineScaleSetNetworkInterfacesIpConfigurationsPublicIpAddressesArgs>());
            set => _publicIpAddresses = value;
        }

        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        [Input("version")]
        public Input<string>? Version { get; set; }

        public WindowsVirtualMachineScaleSetNetworkInterfacesIpConfigurationsArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineScaleSetNetworkInterfacesIpConfigurationsGetArgs : Pulumi.ResourceArgs
    {
        [Input("applicationGatewayBackendAddressPoolIds")]
        private InputList<string>? _applicationGatewayBackendAddressPoolIds;
        public InputList<string> ApplicationGatewayBackendAddressPoolIds
        {
            get => _applicationGatewayBackendAddressPoolIds ?? (_applicationGatewayBackendAddressPoolIds = new InputList<string>());
            set => _applicationGatewayBackendAddressPoolIds = value;
        }

        [Input("applicationSecurityGroupIds")]
        private InputList<string>? _applicationSecurityGroupIds;
        public InputList<string> ApplicationSecurityGroupIds
        {
            get => _applicationSecurityGroupIds ?? (_applicationSecurityGroupIds = new InputList<string>());
            set => _applicationSecurityGroupIds = value;
        }

        [Input("loadBalancerBackendAddressPoolIds")]
        private InputList<string>? _loadBalancerBackendAddressPoolIds;
        public InputList<string> LoadBalancerBackendAddressPoolIds
        {
            get => _loadBalancerBackendAddressPoolIds ?? (_loadBalancerBackendAddressPoolIds = new InputList<string>());
            set => _loadBalancerBackendAddressPoolIds = value;
        }

        [Input("loadBalancerInboundNatRulesIds")]
        private InputList<string>? _loadBalancerInboundNatRulesIds;
        public InputList<string> LoadBalancerInboundNatRulesIds
        {
            get => _loadBalancerInboundNatRulesIds ?? (_loadBalancerInboundNatRulesIds = new InputList<string>());
            set => _loadBalancerInboundNatRulesIds = value;
        }

        /// <summary>
        /// The name of the Windows Virtual Machine Scale Set. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("primary")]
        public Input<bool>? Primary { get; set; }

        [Input("publicIpAddresses")]
        private InputList<WindowsVirtualMachineScaleSetNetworkInterfacesIpConfigurationsPublicIpAddressesGetArgs>? _publicIpAddresses;
        public InputList<WindowsVirtualMachineScaleSetNetworkInterfacesIpConfigurationsPublicIpAddressesGetArgs> PublicIpAddresses
        {
            get => _publicIpAddresses ?? (_publicIpAddresses = new InputList<WindowsVirtualMachineScaleSetNetworkInterfacesIpConfigurationsPublicIpAddressesGetArgs>());
            set => _publicIpAddresses = value;
        }

        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        [Input("version")]
        public Input<string>? Version { get; set; }

        public WindowsVirtualMachineScaleSetNetworkInterfacesIpConfigurationsGetArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineScaleSetNetworkInterfacesIpConfigurationsPublicIpAddressesArgs : Pulumi.ResourceArgs
    {
        [Input("domainNameLabel")]
        public Input<string>? DomainNameLabel { get; set; }

        [Input("idleTimeoutInMinutes")]
        public Input<int>? IdleTimeoutInMinutes { get; set; }

        [Input("ipTags")]
        private InputList<WindowsVirtualMachineScaleSetNetworkInterfacesIpConfigurationsPublicIpAddressesIpTagsArgs>? _ipTags;
        public InputList<WindowsVirtualMachineScaleSetNetworkInterfacesIpConfigurationsPublicIpAddressesIpTagsArgs> IpTags
        {
            get => _ipTags ?? (_ipTags = new InputList<WindowsVirtualMachineScaleSetNetworkInterfacesIpConfigurationsPublicIpAddressesIpTagsArgs>());
            set => _ipTags = value;
        }

        /// <summary>
        /// The name of the Windows Virtual Machine Scale Set. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("publicIpPrefixId")]
        public Input<string>? PublicIpPrefixId { get; set; }

        public WindowsVirtualMachineScaleSetNetworkInterfacesIpConfigurationsPublicIpAddressesArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineScaleSetNetworkInterfacesIpConfigurationsPublicIpAddressesGetArgs : Pulumi.ResourceArgs
    {
        [Input("domainNameLabel")]
        public Input<string>? DomainNameLabel { get; set; }

        [Input("idleTimeoutInMinutes")]
        public Input<int>? IdleTimeoutInMinutes { get; set; }

        [Input("ipTags")]
        private InputList<WindowsVirtualMachineScaleSetNetworkInterfacesIpConfigurationsPublicIpAddressesIpTagsGetArgs>? _ipTags;
        public InputList<WindowsVirtualMachineScaleSetNetworkInterfacesIpConfigurationsPublicIpAddressesIpTagsGetArgs> IpTags
        {
            get => _ipTags ?? (_ipTags = new InputList<WindowsVirtualMachineScaleSetNetworkInterfacesIpConfigurationsPublicIpAddressesIpTagsGetArgs>());
            set => _ipTags = value;
        }

        /// <summary>
        /// The name of the Windows Virtual Machine Scale Set. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("publicIpPrefixId")]
        public Input<string>? PublicIpPrefixId { get; set; }

        public WindowsVirtualMachineScaleSetNetworkInterfacesIpConfigurationsPublicIpAddressesGetArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineScaleSetNetworkInterfacesIpConfigurationsPublicIpAddressesIpTagsArgs : Pulumi.ResourceArgs
    {
        [Input("tag", required: true)]
        public Input<string> Tag { get; set; } = null!;

        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public WindowsVirtualMachineScaleSetNetworkInterfacesIpConfigurationsPublicIpAddressesIpTagsArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineScaleSetNetworkInterfacesIpConfigurationsPublicIpAddressesIpTagsGetArgs : Pulumi.ResourceArgs
    {
        [Input("tag", required: true)]
        public Input<string> Tag { get; set; } = null!;

        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public WindowsVirtualMachineScaleSetNetworkInterfacesIpConfigurationsPublicIpAddressesIpTagsGetArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineScaleSetOsDiskArgs : Pulumi.ResourceArgs
    {
        [Input("caching", required: true)]
        public Input<string> Caching { get; set; } = null!;

        [Input("diffDiskSettings")]
        public Input<WindowsVirtualMachineScaleSetOsDiskDiffDiskSettingsArgs>? DiffDiskSettings { get; set; }

        [Input("diskEncryptionSetId")]
        public Input<string>? DiskEncryptionSetId { get; set; }

        [Input("diskSizeGb")]
        public Input<int>? DiskSizeGb { get; set; }

        [Input("storageAccountType", required: true)]
        public Input<string> StorageAccountType { get; set; } = null!;

        [Input("writeAcceleratorEnabled")]
        public Input<bool>? WriteAcceleratorEnabled { get; set; }

        public WindowsVirtualMachineScaleSetOsDiskArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineScaleSetOsDiskDiffDiskSettingsArgs : Pulumi.ResourceArgs
    {
        [Input("option", required: true)]
        public Input<string> Option { get; set; } = null!;

        public WindowsVirtualMachineScaleSetOsDiskDiffDiskSettingsArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineScaleSetOsDiskDiffDiskSettingsGetArgs : Pulumi.ResourceArgs
    {
        [Input("option", required: true)]
        public Input<string> Option { get; set; } = null!;

        public WindowsVirtualMachineScaleSetOsDiskDiffDiskSettingsGetArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineScaleSetOsDiskGetArgs : Pulumi.ResourceArgs
    {
        [Input("caching", required: true)]
        public Input<string> Caching { get; set; } = null!;

        [Input("diffDiskSettings")]
        public Input<WindowsVirtualMachineScaleSetOsDiskDiffDiskSettingsGetArgs>? DiffDiskSettings { get; set; }

        [Input("diskEncryptionSetId")]
        public Input<string>? DiskEncryptionSetId { get; set; }

        [Input("diskSizeGb")]
        public Input<int>? DiskSizeGb { get; set; }

        [Input("storageAccountType", required: true)]
        public Input<string> StorageAccountType { get; set; } = null!;

        [Input("writeAcceleratorEnabled")]
        public Input<bool>? WriteAcceleratorEnabled { get; set; }

        public WindowsVirtualMachineScaleSetOsDiskGetArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineScaleSetPlanArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the Windows Virtual Machine Scale Set. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("product", required: true)]
        public Input<string> Product { get; set; } = null!;

        [Input("publisher", required: true)]
        public Input<string> Publisher { get; set; } = null!;

        public WindowsVirtualMachineScaleSetPlanArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineScaleSetPlanGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the Windows Virtual Machine Scale Set. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("product", required: true)]
        public Input<string> Product { get; set; } = null!;

        [Input("publisher", required: true)]
        public Input<string> Publisher { get; set; } = null!;

        public WindowsVirtualMachineScaleSetPlanGetArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineScaleSetRollingUpgradePolicyArgs : Pulumi.ResourceArgs
    {
        [Input("maxBatchInstancePercent", required: true)]
        public Input<int> MaxBatchInstancePercent { get; set; } = null!;

        [Input("maxUnhealthyInstancePercent", required: true)]
        public Input<int> MaxUnhealthyInstancePercent { get; set; } = null!;

        [Input("maxUnhealthyUpgradedInstancePercent", required: true)]
        public Input<int> MaxUnhealthyUpgradedInstancePercent { get; set; } = null!;

        [Input("pauseTimeBetweenBatches", required: true)]
        public Input<string> PauseTimeBetweenBatches { get; set; } = null!;

        public WindowsVirtualMachineScaleSetRollingUpgradePolicyArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineScaleSetRollingUpgradePolicyGetArgs : Pulumi.ResourceArgs
    {
        [Input("maxBatchInstancePercent", required: true)]
        public Input<int> MaxBatchInstancePercent { get; set; } = null!;

        [Input("maxUnhealthyInstancePercent", required: true)]
        public Input<int> MaxUnhealthyInstancePercent { get; set; } = null!;

        [Input("maxUnhealthyUpgradedInstancePercent", required: true)]
        public Input<int> MaxUnhealthyUpgradedInstancePercent { get; set; } = null!;

        [Input("pauseTimeBetweenBatches", required: true)]
        public Input<string> PauseTimeBetweenBatches { get; set; } = null!;

        public WindowsVirtualMachineScaleSetRollingUpgradePolicyGetArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineScaleSetSecretsArgs : Pulumi.ResourceArgs
    {
        [Input("certificates", required: true)]
        private InputList<WindowsVirtualMachineScaleSetSecretsCertificatesArgs>? _certificates;
        public InputList<WindowsVirtualMachineScaleSetSecretsCertificatesArgs> Certificates
        {
            get => _certificates ?? (_certificates = new InputList<WindowsVirtualMachineScaleSetSecretsCertificatesArgs>());
            set => _certificates = value;
        }

        [Input("keyVaultId", required: true)]
        public Input<string> KeyVaultId { get; set; } = null!;

        public WindowsVirtualMachineScaleSetSecretsArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineScaleSetSecretsCertificatesArgs : Pulumi.ResourceArgs
    {
        [Input("store", required: true)]
        public Input<string> Store { get; set; } = null!;

        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        public WindowsVirtualMachineScaleSetSecretsCertificatesArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineScaleSetSecretsCertificatesGetArgs : Pulumi.ResourceArgs
    {
        [Input("store", required: true)]
        public Input<string> Store { get; set; } = null!;

        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        public WindowsVirtualMachineScaleSetSecretsCertificatesGetArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineScaleSetSecretsGetArgs : Pulumi.ResourceArgs
    {
        [Input("certificates", required: true)]
        private InputList<WindowsVirtualMachineScaleSetSecretsCertificatesGetArgs>? _certificates;
        public InputList<WindowsVirtualMachineScaleSetSecretsCertificatesGetArgs> Certificates
        {
            get => _certificates ?? (_certificates = new InputList<WindowsVirtualMachineScaleSetSecretsCertificatesGetArgs>());
            set => _certificates = value;
        }

        [Input("keyVaultId", required: true)]
        public Input<string> KeyVaultId { get; set; } = null!;

        public WindowsVirtualMachineScaleSetSecretsGetArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineScaleSetSourceImageReferenceArgs : Pulumi.ResourceArgs
    {
        [Input("offer", required: true)]
        public Input<string> Offer { get; set; } = null!;

        [Input("publisher", required: true)]
        public Input<string> Publisher { get; set; } = null!;

        /// <summary>
        /// The Virtual Machine SKU for the Scale Set, such as `Standard_F2`.
        /// </summary>
        [Input("sku", required: true)]
        public Input<string> Sku { get; set; } = null!;

        [Input("version", required: true)]
        public Input<string> Version { get; set; } = null!;

        public WindowsVirtualMachineScaleSetSourceImageReferenceArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineScaleSetSourceImageReferenceGetArgs : Pulumi.ResourceArgs
    {
        [Input("offer", required: true)]
        public Input<string> Offer { get; set; } = null!;

        [Input("publisher", required: true)]
        public Input<string> Publisher { get; set; } = null!;

        /// <summary>
        /// The Virtual Machine SKU for the Scale Set, such as `Standard_F2`.
        /// </summary>
        [Input("sku", required: true)]
        public Input<string> Sku { get; set; } = null!;

        [Input("version", required: true)]
        public Input<string> Version { get; set; } = null!;

        public WindowsVirtualMachineScaleSetSourceImageReferenceGetArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineScaleSetWinrmListenersArgs : Pulumi.ResourceArgs
    {
        [Input("certificateUrl")]
        public Input<string>? CertificateUrl { get; set; }

        [Input("protocol", required: true)]
        public Input<string> Protocol { get; set; } = null!;

        public WindowsVirtualMachineScaleSetWinrmListenersArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineScaleSetWinrmListenersGetArgs : Pulumi.ResourceArgs
    {
        [Input("certificateUrl")]
        public Input<string>? CertificateUrl { get; set; }

        [Input("protocol", required: true)]
        public Input<string> Protocol { get; set; } = null!;

        public WindowsVirtualMachineScaleSetWinrmListenersGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class WindowsVirtualMachineScaleSetAdditionalCapabilities
    {
        public readonly bool? UltraSsdEnabled;

        [OutputConstructor]
        private WindowsVirtualMachineScaleSetAdditionalCapabilities(bool? ultraSsdEnabled)
        {
            UltraSsdEnabled = ultraSsdEnabled;
        }
    }

    [OutputType]
    public sealed class WindowsVirtualMachineScaleSetAdditionalUnattendContents
    {
        public readonly string Content;
        public readonly string Setting;

        [OutputConstructor]
        private WindowsVirtualMachineScaleSetAdditionalUnattendContents(
            string content,
            string setting)
        {
            Content = content;
            Setting = setting;
        }
    }

    [OutputType]
    public sealed class WindowsVirtualMachineScaleSetAutomaticOsUpgradePolicy
    {
        public readonly bool DisableAutomaticRollback;
        public readonly bool EnableAutomaticOsUpgrade;

        [OutputConstructor]
        private WindowsVirtualMachineScaleSetAutomaticOsUpgradePolicy(
            bool disableAutomaticRollback,
            bool enableAutomaticOsUpgrade)
        {
            DisableAutomaticRollback = disableAutomaticRollback;
            EnableAutomaticOsUpgrade = enableAutomaticOsUpgrade;
        }
    }

    [OutputType]
    public sealed class WindowsVirtualMachineScaleSetBootDiagnostics
    {
        public readonly string StorageAccountUri;

        [OutputConstructor]
        private WindowsVirtualMachineScaleSetBootDiagnostics(string storageAccountUri)
        {
            StorageAccountUri = storageAccountUri;
        }
    }

    [OutputType]
    public sealed class WindowsVirtualMachineScaleSetDataDisks
    {
        public readonly string Caching;
        public readonly string? DiskEncryptionSetId;
        public readonly int DiskSizeGb;
        public readonly int Lun;
        public readonly string StorageAccountType;
        public readonly bool? WriteAcceleratorEnabled;

        [OutputConstructor]
        private WindowsVirtualMachineScaleSetDataDisks(
            string caching,
            string? diskEncryptionSetId,
            int diskSizeGb,
            int lun,
            string storageAccountType,
            bool? writeAcceleratorEnabled)
        {
            Caching = caching;
            DiskEncryptionSetId = diskEncryptionSetId;
            DiskSizeGb = diskSizeGb;
            Lun = lun;
            StorageAccountType = storageAccountType;
            WriteAcceleratorEnabled = writeAcceleratorEnabled;
        }
    }

    [OutputType]
    public sealed class WindowsVirtualMachineScaleSetIdentity
    {
        public readonly ImmutableArray<string> IdentityIds;
        /// <summary>
        /// The ID of the System Managed Service Principal.
        /// </summary>
        public readonly string PrincipalId;
        public readonly string Type;

        [OutputConstructor]
        private WindowsVirtualMachineScaleSetIdentity(
            ImmutableArray<string> identityIds,
            string principalId,
            string type)
        {
            IdentityIds = identityIds;
            PrincipalId = principalId;
            Type = type;
        }
    }

    [OutputType]
    public sealed class WindowsVirtualMachineScaleSetNetworkInterfaces
    {
        public readonly ImmutableArray<string> DnsServers;
        public readonly bool? EnableAcceleratedNetworking;
        public readonly bool? EnableIpForwarding;
        public readonly ImmutableArray<WindowsVirtualMachineScaleSetNetworkInterfacesIpConfigurations> IpConfigurations;
        /// <summary>
        /// The name of the Windows Virtual Machine Scale Set. Changing this forces a new resource to be created.
        /// </summary>
        public readonly string Name;
        public readonly string? NetworkSecurityGroupId;
        public readonly bool? Primary;

        [OutputConstructor]
        private WindowsVirtualMachineScaleSetNetworkInterfaces(
            ImmutableArray<string> dnsServers,
            bool? enableAcceleratedNetworking,
            bool? enableIpForwarding,
            ImmutableArray<WindowsVirtualMachineScaleSetNetworkInterfacesIpConfigurations> ipConfigurations,
            string name,
            string? networkSecurityGroupId,
            bool? primary)
        {
            DnsServers = dnsServers;
            EnableAcceleratedNetworking = enableAcceleratedNetworking;
            EnableIpForwarding = enableIpForwarding;
            IpConfigurations = ipConfigurations;
            Name = name;
            NetworkSecurityGroupId = networkSecurityGroupId;
            Primary = primary;
        }
    }

    [OutputType]
    public sealed class WindowsVirtualMachineScaleSetNetworkInterfacesIpConfigurations
    {
        public readonly ImmutableArray<string> ApplicationGatewayBackendAddressPoolIds;
        public readonly ImmutableArray<string> ApplicationSecurityGroupIds;
        public readonly ImmutableArray<string> LoadBalancerBackendAddressPoolIds;
        public readonly ImmutableArray<string> LoadBalancerInboundNatRulesIds;
        /// <summary>
        /// The name of the Windows Virtual Machine Scale Set. Changing this forces a new resource to be created.
        /// </summary>
        public readonly string Name;
        public readonly bool? Primary;
        public readonly ImmutableArray<WindowsVirtualMachineScaleSetNetworkInterfacesIpConfigurationsPublicIpAddresses> PublicIpAddresses;
        public readonly string? SubnetId;
        public readonly string? Version;

        [OutputConstructor]
        private WindowsVirtualMachineScaleSetNetworkInterfacesIpConfigurations(
            ImmutableArray<string> applicationGatewayBackendAddressPoolIds,
            ImmutableArray<string> applicationSecurityGroupIds,
            ImmutableArray<string> loadBalancerBackendAddressPoolIds,
            ImmutableArray<string> loadBalancerInboundNatRulesIds,
            string name,
            bool? primary,
            ImmutableArray<WindowsVirtualMachineScaleSetNetworkInterfacesIpConfigurationsPublicIpAddresses> publicIpAddresses,
            string? subnetId,
            string? version)
        {
            ApplicationGatewayBackendAddressPoolIds = applicationGatewayBackendAddressPoolIds;
            ApplicationSecurityGroupIds = applicationSecurityGroupIds;
            LoadBalancerBackendAddressPoolIds = loadBalancerBackendAddressPoolIds;
            LoadBalancerInboundNatRulesIds = loadBalancerInboundNatRulesIds;
            Name = name;
            Primary = primary;
            PublicIpAddresses = publicIpAddresses;
            SubnetId = subnetId;
            Version = version;
        }
    }

    [OutputType]
    public sealed class WindowsVirtualMachineScaleSetNetworkInterfacesIpConfigurationsPublicIpAddresses
    {
        public readonly string? DomainNameLabel;
        public readonly int IdleTimeoutInMinutes;
        public readonly ImmutableArray<WindowsVirtualMachineScaleSetNetworkInterfacesIpConfigurationsPublicIpAddressesIpTags> IpTags;
        /// <summary>
        /// The name of the Windows Virtual Machine Scale Set. Changing this forces a new resource to be created.
        /// </summary>
        public readonly string Name;
        public readonly string? PublicIpPrefixId;

        [OutputConstructor]
        private WindowsVirtualMachineScaleSetNetworkInterfacesIpConfigurationsPublicIpAddresses(
            string? domainNameLabel,
            int idleTimeoutInMinutes,
            ImmutableArray<WindowsVirtualMachineScaleSetNetworkInterfacesIpConfigurationsPublicIpAddressesIpTags> ipTags,
            string name,
            string? publicIpPrefixId)
        {
            DomainNameLabel = domainNameLabel;
            IdleTimeoutInMinutes = idleTimeoutInMinutes;
            IpTags = ipTags;
            Name = name;
            PublicIpPrefixId = publicIpPrefixId;
        }
    }

    [OutputType]
    public sealed class WindowsVirtualMachineScaleSetNetworkInterfacesIpConfigurationsPublicIpAddressesIpTags
    {
        public readonly string Tag;
        public readonly string Type;

        [OutputConstructor]
        private WindowsVirtualMachineScaleSetNetworkInterfacesIpConfigurationsPublicIpAddressesIpTags(
            string tag,
            string type)
        {
            Tag = tag;
            Type = type;
        }
    }

    [OutputType]
    public sealed class WindowsVirtualMachineScaleSetOsDisk
    {
        public readonly string Caching;
        public readonly WindowsVirtualMachineScaleSetOsDiskDiffDiskSettings? DiffDiskSettings;
        public readonly string? DiskEncryptionSetId;
        public readonly int DiskSizeGb;
        public readonly string StorageAccountType;
        public readonly bool? WriteAcceleratorEnabled;

        [OutputConstructor]
        private WindowsVirtualMachineScaleSetOsDisk(
            string caching,
            WindowsVirtualMachineScaleSetOsDiskDiffDiskSettings? diffDiskSettings,
            string? diskEncryptionSetId,
            int diskSizeGb,
            string storageAccountType,
            bool? writeAcceleratorEnabled)
        {
            Caching = caching;
            DiffDiskSettings = diffDiskSettings;
            DiskEncryptionSetId = diskEncryptionSetId;
            DiskSizeGb = diskSizeGb;
            StorageAccountType = storageAccountType;
            WriteAcceleratorEnabled = writeAcceleratorEnabled;
        }
    }

    [OutputType]
    public sealed class WindowsVirtualMachineScaleSetOsDiskDiffDiskSettings
    {
        public readonly string Option;

        [OutputConstructor]
        private WindowsVirtualMachineScaleSetOsDiskDiffDiskSettings(string option)
        {
            Option = option;
        }
    }

    [OutputType]
    public sealed class WindowsVirtualMachineScaleSetPlan
    {
        /// <summary>
        /// The name of the Windows Virtual Machine Scale Set. Changing this forces a new resource to be created.
        /// </summary>
        public readonly string Name;
        public readonly string Product;
        public readonly string Publisher;

        [OutputConstructor]
        private WindowsVirtualMachineScaleSetPlan(
            string name,
            string product,
            string publisher)
        {
            Name = name;
            Product = product;
            Publisher = publisher;
        }
    }

    [OutputType]
    public sealed class WindowsVirtualMachineScaleSetRollingUpgradePolicy
    {
        public readonly int MaxBatchInstancePercent;
        public readonly int MaxUnhealthyInstancePercent;
        public readonly int MaxUnhealthyUpgradedInstancePercent;
        public readonly string PauseTimeBetweenBatches;

        [OutputConstructor]
        private WindowsVirtualMachineScaleSetRollingUpgradePolicy(
            int maxBatchInstancePercent,
            int maxUnhealthyInstancePercent,
            int maxUnhealthyUpgradedInstancePercent,
            string pauseTimeBetweenBatches)
        {
            MaxBatchInstancePercent = maxBatchInstancePercent;
            MaxUnhealthyInstancePercent = maxUnhealthyInstancePercent;
            MaxUnhealthyUpgradedInstancePercent = maxUnhealthyUpgradedInstancePercent;
            PauseTimeBetweenBatches = pauseTimeBetweenBatches;
        }
    }

    [OutputType]
    public sealed class WindowsVirtualMachineScaleSetSecrets
    {
        public readonly ImmutableArray<WindowsVirtualMachineScaleSetSecretsCertificates> Certificates;
        public readonly string KeyVaultId;

        [OutputConstructor]
        private WindowsVirtualMachineScaleSetSecrets(
            ImmutableArray<WindowsVirtualMachineScaleSetSecretsCertificates> certificates,
            string keyVaultId)
        {
            Certificates = certificates;
            KeyVaultId = keyVaultId;
        }
    }

    [OutputType]
    public sealed class WindowsVirtualMachineScaleSetSecretsCertificates
    {
        public readonly string Store;
        public readonly string Url;

        [OutputConstructor]
        private WindowsVirtualMachineScaleSetSecretsCertificates(
            string store,
            string url)
        {
            Store = store;
            Url = url;
        }
    }

    [OutputType]
    public sealed class WindowsVirtualMachineScaleSetSourceImageReference
    {
        public readonly string Offer;
        public readonly string Publisher;
        /// <summary>
        /// The Virtual Machine SKU for the Scale Set, such as `Standard_F2`.
        /// </summary>
        public readonly string Sku;
        public readonly string Version;

        [OutputConstructor]
        private WindowsVirtualMachineScaleSetSourceImageReference(
            string offer,
            string publisher,
            string sku,
            string version)
        {
            Offer = offer;
            Publisher = publisher;
            Sku = sku;
            Version = version;
        }
    }

    [OutputType]
    public sealed class WindowsVirtualMachineScaleSetWinrmListeners
    {
        public readonly string? CertificateUrl;
        public readonly string Protocol;

        [OutputConstructor]
        private WindowsVirtualMachineScaleSetWinrmListeners(
            string? certificateUrl,
            string protocol)
        {
            CertificateUrl = certificateUrl;
            Protocol = protocol;
        }
    }
    }
}
