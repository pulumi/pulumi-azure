// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Compute
{
    /// <summary>
    /// Manages a Windows Virtual Machine Scale Set.
    /// 
    /// ## Disclaimers
    /// 
    /// &gt; **NOTE:**: All arguments including the administrator login and password will be stored in the raw state as plain-text.
    /// 
    /// &gt; **NOTE:** This provider will automatically update &amp; reimage the nodes in the Scale Set (if Required) during an Update - this behaviour can be configured using the `features` setting within the Provider block.
    /// 
    /// &gt; **NOTE:** This resource does not support Unmanaged Disks. If you need to use Unmanaged Disks you can continue to use the `azure.compute.ScaleSet` resource instead
    /// 
    /// ## Example Usage
    /// 
    /// This example provisions a basic Windows Virtual Machine Scale Set on an internal network.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleVirtualNetwork = new Azure.Network.VirtualNetwork("exampleVirtualNetwork", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         AddressSpaces = new[]
    ///         {
    ///             "10.0.0.0/16",
    ///         },
    ///     });
    /// 
    ///     var @internal = new Azure.Network.Subnet("internal", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         VirtualNetworkName = exampleVirtualNetwork.Name,
    ///         AddressPrefixes = new[]
    ///         {
    ///             "10.0.2.0/24",
    ///         },
    ///     });
    /// 
    ///     var exampleWindowsVirtualMachineScaleSet = new Azure.Compute.WindowsVirtualMachineScaleSet("exampleWindowsVirtualMachineScaleSet", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         Sku = "Standard_F2",
    ///         Instances = 1,
    ///         AdminPassword = "P@55w0rd1234!",
    ///         AdminUsername = "adminuser",
    ///         SourceImageReference = new Azure.Compute.Inputs.WindowsVirtualMachineScaleSetSourceImageReferenceArgs
    ///         {
    ///             Publisher = "MicrosoftWindowsServer",
    ///             Offer = "WindowsServer",
    ///             Sku = "2016-Datacenter-Server-Core",
    ///             Version = "latest",
    ///         },
    ///         OsDisk = new Azure.Compute.Inputs.WindowsVirtualMachineScaleSetOsDiskArgs
    ///         {
    ///             StorageAccountType = "Standard_LRS",
    ///             Caching = "ReadWrite",
    ///         },
    ///         NetworkInterfaces = new[]
    ///         {
    ///             new Azure.Compute.Inputs.WindowsVirtualMachineScaleSetNetworkInterfaceArgs
    ///             {
    ///                 Name = "example",
    ///                 Primary = true,
    ///                 IpConfigurations = new[]
    ///                 {
    ///                     new Azure.Compute.Inputs.WindowsVirtualMachineScaleSetNetworkInterfaceIpConfigurationArgs
    ///                     {
    ///                         Name = "internal",
    ///                         Primary = true,
    ///                         SubnetId = @internal.Id,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Windows Virtual Machine Scale Sets can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:compute/windowsVirtualMachineScaleSet:WindowsVirtualMachineScaleSet example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Compute/virtualMachineScaleSets/scaleset1
    /// ```
    /// </summary>
    [AzureResourceType("azure:compute/windowsVirtualMachineScaleSet:WindowsVirtualMachineScaleSet")]
    public partial class WindowsVirtualMachineScaleSet : global::Pulumi.CustomResource
    {
        /// <summary>
        /// An `additional_capabilities` block as defined below.
        /// </summary>
        [Output("additionalCapabilities")]
        public Output<Outputs.WindowsVirtualMachineScaleSetAdditionalCapabilities?> AdditionalCapabilities { get; private set; } = null!;

        /// <summary>
        /// One or more `additional_unattend_content` blocks as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Output("additionalUnattendContents")]
        public Output<ImmutableArray<Outputs.WindowsVirtualMachineScaleSetAdditionalUnattendContent>> AdditionalUnattendContents { get; private set; } = null!;

        /// <summary>
        /// The Password which should be used for the local-administrator on this Virtual Machine. Changing this forces a new resource to be created.
        /// </summary>
        [Output("adminPassword")]
        public Output<string> AdminPassword { get; private set; } = null!;

        /// <summary>
        /// The username of the local administrator on each Virtual Machine Scale Set instance. Changing this forces a new resource to be created.
        /// </summary>
        [Output("adminUsername")]
        public Output<string> AdminUsername { get; private set; } = null!;

        /// <summary>
        /// An `automatic_instance_repair` block as defined below. To enable the automatic instance repair, this Virtual Machine Scale Set must have a valid `health_probe_id` or an [Application Health Extension](https://docs.microsoft.com/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-health-extension).
        /// 
        /// &gt; **NOTE:** For more information about Automatic Instance Repair, please refer to [this doc](https://docs.microsoft.com/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-automatic-instance-repairs).
        /// </summary>
        [Output("automaticInstanceRepair")]
        public Output<Outputs.WindowsVirtualMachineScaleSetAutomaticInstanceRepair> AutomaticInstanceRepair { get; private set; } = null!;

        /// <summary>
        /// An `automatic_os_upgrade_policy` block as defined below. This can only be specified when `upgrade_mode` is set to either `Automatic` or `Rolling`.
        /// </summary>
        [Output("automaticOsUpgradePolicy")]
        public Output<Outputs.WindowsVirtualMachineScaleSetAutomaticOsUpgradePolicy?> AutomaticOsUpgradePolicy { get; private set; } = null!;

        /// <summary>
        /// A `boot_diagnostics` block as defined below.
        /// </summary>
        [Output("bootDiagnostics")]
        public Output<Outputs.WindowsVirtualMachineScaleSetBootDiagnostics?> BootDiagnostics { get; private set; } = null!;

        /// <summary>
        /// Specifies the ID of the Capacity Reservation Group which the Virtual Machine Scale Set should be allocated to. Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE:** `capacity_reservation_group_id` cannot be used with `proximity_placement_group_id`
        /// 
        /// &gt; **NOTE:** `single_placement_group` must be set to `false` when `capacity_reservation_group_id` is specified.
        /// </summary>
        [Output("capacityReservationGroupId")]
        public Output<string?> CapacityReservationGroupId { get; private set; } = null!;

        /// <summary>
        /// The prefix which should be used for the name of the Virtual Machines in this Scale Set. If unspecified this defaults to the value for the `name` field. If the value of the `name` field is not a valid `computer_name_prefix`, then you must specify `computer_name_prefix`. Changing this forces a new resource to be created.
        /// </summary>
        [Output("computerNamePrefix")]
        public Output<string> ComputerNamePrefix { get; private set; } = null!;

        /// <summary>
        /// The Base64-Encoded Custom Data which should be used for this Virtual Machine Scale Set.
        /// 
        /// &gt; **NOTE:** When Custom Data has been configured, it's not possible to remove it without tainting the Virtual Machine Scale Set, due to a limitation of the Azure API.
        /// </summary>
        [Output("customData")]
        public Output<string?> CustomData { get; private set; } = null!;

        /// <summary>
        /// One or more `data_disk` blocks as defined below.
        /// </summary>
        [Output("dataDisks")]
        public Output<ImmutableArray<Outputs.WindowsVirtualMachineScaleSetDataDisk>> DataDisks { get; private set; } = null!;

        /// <summary>
        /// Should Virtual Machine Extensions be run on Overprovisioned Virtual Machines in the Scale Set? Defaults to `false`.
        /// </summary>
        [Output("doNotRunExtensionsOnOverprovisionedMachines")]
        public Output<bool?> DoNotRunExtensionsOnOverprovisionedMachines { get; private set; } = null!;

        /// <summary>
        /// Specifies the Edge Zone within the Azure Region where this Windows Virtual Machine Scale Set should exist. Changing this forces a new Windows Virtual Machine Scale Set to be created.
        /// </summary>
        [Output("edgeZone")]
        public Output<string?> EdgeZone { get; private set; } = null!;

        /// <summary>
        /// Are automatic updates enabled for this Virtual Machine? Defaults to `true`.
        /// </summary>
        [Output("enableAutomaticUpdates")]
        public Output<bool?> EnableAutomaticUpdates { get; private set; } = null!;

        /// <summary>
        /// Should all of the disks (including the temp disk) attached to this Virtual Machine be encrypted by enabling Encryption at Host?
        /// </summary>
        [Output("encryptionAtHostEnabled")]
        public Output<bool?> EncryptionAtHostEnabled { get; private set; } = null!;

        /// <summary>
        /// Specifies the eviction policy for Virtual Machines in this Scale Set. Possible values are `Deallocate` and `Delete`. Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE:** This can only be configured when `priority` is set to `Spot`.
        /// </summary>
        [Output("evictionPolicy")]
        public Output<string?> EvictionPolicy { get; private set; } = null!;

        /// <summary>
        /// Should extension operations be allowed on the Virtual Machine Scale Set? Possible values are `true` or `false`. Defaults to `true`. Changing this forces a new Windows Virtual Machine Scale Set to be created.
        /// 
        /// &gt; **NOTE:** `extension_operations_enabled` may only be set to `false` if there are no extensions defined in the `extension` field.
        /// </summary>
        [Output("extensionOperationsEnabled")]
        public Output<bool> ExtensionOperationsEnabled { get; private set; } = null!;

        /// <summary>
        /// One or more `extension` blocks as defined below
        /// </summary>
        [Output("extensions")]
        public Output<ImmutableArray<Outputs.WindowsVirtualMachineScaleSetExtension>> Extensions { get; private set; } = null!;

        /// <summary>
        /// Specifies the duration allocated for all extensions to start. The time duration should be between `15` minutes and `120` minutes (inclusive) and should be specified in ISO 8601 format. Defaults to `PT1H30M`.
        /// </summary>
        [Output("extensionsTimeBudget")]
        public Output<string?> ExtensionsTimeBudget { get; private set; } = null!;

        /// <summary>
        /// One or more `gallery_application` blocks as defined below.
        /// </summary>
        [Output("galleryApplication")]
        public Output<ImmutableArray<Outputs.WindowsVirtualMachineScaleSetGalleryApplication>> GalleryApplication { get; private set; } = null!;

        [Output("galleryApplications")]
        public Output<ImmutableArray<Outputs.WindowsVirtualMachineScaleSetGalleryApplication>> GalleryApplications { get; private set; } = null!;

        /// <summary>
        /// The ID of a Load Balancer Probe which should be used to determine the health of an instance. This is Required and can only be specified when `upgrade_mode` is set to `Automatic` or `Rolling`.
        /// </summary>
        [Output("healthProbeId")]
        public Output<string?> HealthProbeId { get; private set; } = null!;

        /// <summary>
        /// Specifies the ID of the dedicated host group that the virtual machine scale set resides in. Changing this forces a new resource to be created.
        /// </summary>
        [Output("hostGroupId")]
        public Output<string?> HostGroupId { get; private set; } = null!;

        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.WindowsVirtualMachineScaleSetIdentity?> Identity { get; private set; } = null!;

        /// <summary>
        /// The number of Virtual Machines in the Scale Set.
        /// 
        /// &gt; **NOTE:** If you're using AutoScaling, you may wish to use [`Ignore Changes` functionality](https://www.pulumi.com/docs/intro/concepts/programming-model/#ignorechanges) to ignore changes to this field.
        /// </summary>
        [Output("instances")]
        public Output<int> Instances { get; private set; } = null!;

        /// <summary>
        /// Specifies the type of on-premise license (also known as [Azure Hybrid Use Benefit](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing)) which should be used for this Virtual Machine Scale Set. Possible values are `None`, `Windows_Client` and `Windows_Server`.
        /// </summary>
        [Output("licenseType")]
        public Output<string?> LicenseType { get; private set; } = null!;

        /// <summary>
        /// The Azure location where the Windows Virtual Machine Scale Set should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The maximum price you're willing to pay for each Virtual Machine in this Scale Set, in US Dollars; which must be greater than the current spot price. If this bid price falls below the current spot price the Virtual Machines in the Scale Set will be evicted using the `eviction_policy`. Defaults to `-1`, which means that each Virtual Machine in the Scale Set should not be evicted for price reasons.
        /// 
        /// &gt; **NOTE:** This can only be configured when `priority` is set to `Spot`.
        /// </summary>
        [Output("maxBidPrice")]
        public Output<double?> MaxBidPrice { get; private set; } = null!;

        /// <summary>
        /// The name of the Windows Virtual Machine Scale Set. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// One or more `network_interface` blocks as defined below.
        /// </summary>
        [Output("networkInterfaces")]
        public Output<ImmutableArray<Outputs.WindowsVirtualMachineScaleSetNetworkInterface>> NetworkInterfaces { get; private set; } = null!;

        /// <summary>
        /// An `os_disk` block as defined below.
        /// </summary>
        [Output("osDisk")]
        public Output<Outputs.WindowsVirtualMachineScaleSetOsDisk> OsDisk { get; private set; } = null!;

        /// <summary>
        /// Should Azure over-provision Virtual Machines in this Scale Set? This means that multiple Virtual Machines will be provisioned and Azure will keep the instances which become available first - which improves provisioning success rates and improves deployment time. You're not billed for these over-provisioned VM's and they don't count towards the Subscription Quota. Defaults to `true`.
        /// </summary>
        [Output("overprovision")]
        public Output<bool?> Overprovision { get; private set; } = null!;

        /// <summary>
        /// A `plan` block as defined below. Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE:** When using an image from Azure Marketplace a `plan` must be specified.
        /// </summary>
        [Output("plan")]
        public Output<Outputs.WindowsVirtualMachineScaleSetPlan?> Plan { get; private set; } = null!;

        /// <summary>
        /// Specifies the number of fault domains that are used by this Linux Virtual Machine Scale Set. Changing this forces a new resource to be created.
        /// </summary>
        [Output("platformFaultDomainCount")]
        public Output<int> PlatformFaultDomainCount { get; private set; } = null!;

        /// <summary>
        /// The Priority of this Virtual Machine Scale Set. Possible values are `Regular` and `Spot`. Defaults to `Regular`. Changing this value forces a new resource.
        /// 
        /// &gt; **NOTE:** When `priority` is set to `Spot` an `eviction_policy` must be specified.
        /// </summary>
        [Output("priority")]
        public Output<string?> Priority { get; private set; } = null!;

        /// <summary>
        /// Should the Azure VM Agent be provisioned on each Virtual Machine in the Scale Set? Defaults to `true`. Changing this value forces a new resource to be created.
        /// </summary>
        [Output("provisionVmAgent")]
        public Output<bool?> ProvisionVmAgent { get; private set; } = null!;

        /// <summary>
        /// The ID of the Proximity Placement Group in which the Virtual Machine Scale Set should be assigned to. Changing this forces a new resource to be created.
        /// </summary>
        [Output("proximityPlacementGroupId")]
        public Output<string?> ProximityPlacementGroupId { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group in which the Windows Virtual Machine Scale Set should be exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// A `rolling_upgrade_policy` block as defined below. This is Required and can only be specified when `upgrade_mode` is set to `Automatic` or `Rolling`. Changing this forces a new resource to be created.
        /// </summary>
        [Output("rollingUpgradePolicy")]
        public Output<Outputs.WindowsVirtualMachineScaleSetRollingUpgradePolicy?> RollingUpgradePolicy { get; private set; } = null!;

        /// <summary>
        /// A `scale_in` block as defined below.
        /// </summary>
        [Output("scaleIn")]
        public Output<Outputs.WindowsVirtualMachineScaleSetScaleIn> ScaleIn { get; private set; } = null!;

        [Output("scaleInPolicy")]
        public Output<string> ScaleInPolicy { get; private set; } = null!;

        /// <summary>
        /// One or more `secret` blocks as defined below.
        /// </summary>
        [Output("secrets")]
        public Output<ImmutableArray<Outputs.WindowsVirtualMachineScaleSetSecret>> Secrets { get; private set; } = null!;

        /// <summary>
        /// Specifies if Secure Boot and Trusted Launch is enabled for the Virtual Machine. Changing this forces a new resource to be created.
        /// </summary>
        [Output("secureBootEnabled")]
        public Output<bool?> SecureBootEnabled { get; private set; } = null!;

        /// <summary>
        /// Should this Virtual Machine Scale Set be limited to a Single Placement Group, which means the number of instances will be capped at 100 Virtual Machines. Defaults to `true`.
        /// </summary>
        [Output("singlePlacementGroup")]
        public Output<bool?> SinglePlacementGroup { get; private set; } = null!;

        /// <summary>
        /// The Virtual Machine SKU for the Scale Set, such as `Standard_F2`.
        /// </summary>
        [Output("sku")]
        public Output<string> Sku { get; private set; } = null!;

        /// <summary>
        /// The ID of an Image which each Virtual Machine in this Scale Set should be based on. Possible Image ID types include `Image ID`, `Shared Image ID`, `Shared Image Version ID`, `Community Gallery Image ID`, `Community Gallery Image Version ID`, `Shared Gallery Image ID` and `Shared Gallery Image Version ID`.
        /// 
        /// &gt; **NOTE:** One of either `source_image_id` or `source_image_reference` must be set.
        /// </summary>
        [Output("sourceImageId")]
        public Output<string?> SourceImageId { get; private set; } = null!;

        /// <summary>
        /// A `source_image_reference` block as defined below.
        /// 
        /// &gt; **NOTE:** One of either `source_image_id` or `source_image_reference` must be set.
        /// </summary>
        [Output("sourceImageReference")]
        public Output<Outputs.WindowsVirtualMachineScaleSetSourceImageReference?> SourceImageReference { get; private set; } = null!;

        /// <summary>
        /// A `spot_restore` block as defined below.
        /// </summary>
        [Output("spotRestore")]
        public Output<Outputs.WindowsVirtualMachineScaleSetSpotRestore> SpotRestore { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags which should be assigned to this Virtual Machine Scale Set.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A `terminate_notification` block as defined below.
        /// 
        /// &gt; **Note:** This property has been deprecated in favour of the `termination_notification` property and will be removed in version 4.0 of the provider.
        /// </summary>
        [Output("terminateNotification")]
        public Output<Outputs.WindowsVirtualMachineScaleSetTerminateNotification> TerminateNotification { get; private set; } = null!;

        /// <summary>
        /// A `termination_notification` block as defined below.
        /// </summary>
        [Output("terminationNotification")]
        public Output<Outputs.WindowsVirtualMachineScaleSetTerminationNotification> TerminationNotification { get; private set; } = null!;

        /// <summary>
        /// Specifies the time zone of the virtual machine, [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/).
        /// </summary>
        [Output("timezone")]
        public Output<string?> Timezone { get; private set; } = null!;

        /// <summary>
        /// The Unique ID for this Windows Virtual Machine Scale Set.
        /// </summary>
        [Output("uniqueId")]
        public Output<string> UniqueId { get; private set; } = null!;

        [Output("upgradeMode")]
        public Output<string?> UpgradeMode { get; private set; } = null!;

        /// <summary>
        /// The Base64-Encoded User Data which should be used for this Virtual Machine Scale Set.
        /// </summary>
        [Output("userData")]
        public Output<string?> UserData { get; private set; } = null!;

        /// <summary>
        /// Specifies if vTPM (Virtual Trusted Platform Module) and Trusted Launch is enabled for the Virtual Machine. Changing this forces a new resource to be created.
        /// </summary>
        [Output("vtpmEnabled")]
        public Output<bool?> VtpmEnabled { get; private set; } = null!;

        /// <summary>
        /// One or more `winrm_listener` blocks as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Output("winrmListeners")]
        public Output<ImmutableArray<Outputs.WindowsVirtualMachineScaleSetWinrmListener>> WinrmListeners { get; private set; } = null!;

        /// <summary>
        /// Should the Virtual Machines in this Scale Set be strictly evenly distributed across Availability Zones? Defaults to `false`. Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE:** This can only be set to `true` when one or more `zones` are configured.
        /// </summary>
        [Output("zoneBalance")]
        public Output<bool?> ZoneBalance { get; private set; } = null!;

        /// <summary>
        /// Specifies a list of Availability Zones in which this Windows Virtual Machine Scale Set should be located. Changing this forces a new Windows Virtual Machine Scale Set to be created.
        /// </summary>
        [Output("zones")]
        public Output<ImmutableArray<string>> Zones { get; private set; } = null!;


        /// <summary>
        /// Create a WindowsVirtualMachineScaleSet resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WindowsVirtualMachineScaleSet(string name, WindowsVirtualMachineScaleSetArgs args, CustomResourceOptions? options = null)
            : base("azure:compute/windowsVirtualMachineScaleSet:WindowsVirtualMachineScaleSet", name, args ?? new WindowsVirtualMachineScaleSetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private WindowsVirtualMachineScaleSet(string name, Input<string> id, WindowsVirtualMachineScaleSetState? state = null, CustomResourceOptions? options = null)
            : base("azure:compute/windowsVirtualMachineScaleSet:WindowsVirtualMachineScaleSet", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "adminPassword",
                    "customData",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WindowsVirtualMachineScaleSet resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WindowsVirtualMachineScaleSet Get(string name, Input<string> id, WindowsVirtualMachineScaleSetState? state = null, CustomResourceOptions? options = null)
        {
            return new WindowsVirtualMachineScaleSet(name, id, state, options);
        }
    }

    public sealed class WindowsVirtualMachineScaleSetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An `additional_capabilities` block as defined below.
        /// </summary>
        [Input("additionalCapabilities")]
        public Input<Inputs.WindowsVirtualMachineScaleSetAdditionalCapabilitiesArgs>? AdditionalCapabilities { get; set; }

        [Input("additionalUnattendContents")]
        private InputList<Inputs.WindowsVirtualMachineScaleSetAdditionalUnattendContentArgs>? _additionalUnattendContents;

        /// <summary>
        /// One or more `additional_unattend_content` blocks as defined below. Changing this forces a new resource to be created.
        /// </summary>
        public InputList<Inputs.WindowsVirtualMachineScaleSetAdditionalUnattendContentArgs> AdditionalUnattendContents
        {
            get => _additionalUnattendContents ?? (_additionalUnattendContents = new InputList<Inputs.WindowsVirtualMachineScaleSetAdditionalUnattendContentArgs>());
            set => _additionalUnattendContents = value;
        }

        [Input("adminPassword", required: true)]
        private Input<string>? _adminPassword;

        /// <summary>
        /// The Password which should be used for the local-administrator on this Virtual Machine. Changing this forces a new resource to be created.
        /// </summary>
        public Input<string>? AdminPassword
        {
            get => _adminPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _adminPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The username of the local administrator on each Virtual Machine Scale Set instance. Changing this forces a new resource to be created.
        /// </summary>
        [Input("adminUsername", required: true)]
        public Input<string> AdminUsername { get; set; } = null!;

        /// <summary>
        /// An `automatic_instance_repair` block as defined below. To enable the automatic instance repair, this Virtual Machine Scale Set must have a valid `health_probe_id` or an [Application Health Extension](https://docs.microsoft.com/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-health-extension).
        /// 
        /// &gt; **NOTE:** For more information about Automatic Instance Repair, please refer to [this doc](https://docs.microsoft.com/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-automatic-instance-repairs).
        /// </summary>
        [Input("automaticInstanceRepair")]
        public Input<Inputs.WindowsVirtualMachineScaleSetAutomaticInstanceRepairArgs>? AutomaticInstanceRepair { get; set; }

        /// <summary>
        /// An `automatic_os_upgrade_policy` block as defined below. This can only be specified when `upgrade_mode` is set to either `Automatic` or `Rolling`.
        /// </summary>
        [Input("automaticOsUpgradePolicy")]
        public Input<Inputs.WindowsVirtualMachineScaleSetAutomaticOsUpgradePolicyArgs>? AutomaticOsUpgradePolicy { get; set; }

        /// <summary>
        /// A `boot_diagnostics` block as defined below.
        /// </summary>
        [Input("bootDiagnostics")]
        public Input<Inputs.WindowsVirtualMachineScaleSetBootDiagnosticsArgs>? BootDiagnostics { get; set; }

        /// <summary>
        /// Specifies the ID of the Capacity Reservation Group which the Virtual Machine Scale Set should be allocated to. Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE:** `capacity_reservation_group_id` cannot be used with `proximity_placement_group_id`
        /// 
        /// &gt; **NOTE:** `single_placement_group` must be set to `false` when `capacity_reservation_group_id` is specified.
        /// </summary>
        [Input("capacityReservationGroupId")]
        public Input<string>? CapacityReservationGroupId { get; set; }

        /// <summary>
        /// The prefix which should be used for the name of the Virtual Machines in this Scale Set. If unspecified this defaults to the value for the `name` field. If the value of the `name` field is not a valid `computer_name_prefix`, then you must specify `computer_name_prefix`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("computerNamePrefix")]
        public Input<string>? ComputerNamePrefix { get; set; }

        [Input("customData")]
        private Input<string>? _customData;

        /// <summary>
        /// The Base64-Encoded Custom Data which should be used for this Virtual Machine Scale Set.
        /// 
        /// &gt; **NOTE:** When Custom Data has been configured, it's not possible to remove it without tainting the Virtual Machine Scale Set, due to a limitation of the Azure API.
        /// </summary>
        public Input<string>? CustomData
        {
            get => _customData;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _customData = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("dataDisks")]
        private InputList<Inputs.WindowsVirtualMachineScaleSetDataDiskArgs>? _dataDisks;

        /// <summary>
        /// One or more `data_disk` blocks as defined below.
        /// </summary>
        public InputList<Inputs.WindowsVirtualMachineScaleSetDataDiskArgs> DataDisks
        {
            get => _dataDisks ?? (_dataDisks = new InputList<Inputs.WindowsVirtualMachineScaleSetDataDiskArgs>());
            set => _dataDisks = value;
        }

        /// <summary>
        /// Should Virtual Machine Extensions be run on Overprovisioned Virtual Machines in the Scale Set? Defaults to `false`.
        /// </summary>
        [Input("doNotRunExtensionsOnOverprovisionedMachines")]
        public Input<bool>? DoNotRunExtensionsOnOverprovisionedMachines { get; set; }

        /// <summary>
        /// Specifies the Edge Zone within the Azure Region where this Windows Virtual Machine Scale Set should exist. Changing this forces a new Windows Virtual Machine Scale Set to be created.
        /// </summary>
        [Input("edgeZone")]
        public Input<string>? EdgeZone { get; set; }

        /// <summary>
        /// Are automatic updates enabled for this Virtual Machine? Defaults to `true`.
        /// </summary>
        [Input("enableAutomaticUpdates")]
        public Input<bool>? EnableAutomaticUpdates { get; set; }

        /// <summary>
        /// Should all of the disks (including the temp disk) attached to this Virtual Machine be encrypted by enabling Encryption at Host?
        /// </summary>
        [Input("encryptionAtHostEnabled")]
        public Input<bool>? EncryptionAtHostEnabled { get; set; }

        /// <summary>
        /// Specifies the eviction policy for Virtual Machines in this Scale Set. Possible values are `Deallocate` and `Delete`. Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE:** This can only be configured when `priority` is set to `Spot`.
        /// </summary>
        [Input("evictionPolicy")]
        public Input<string>? EvictionPolicy { get; set; }

        /// <summary>
        /// Should extension operations be allowed on the Virtual Machine Scale Set? Possible values are `true` or `false`. Defaults to `true`. Changing this forces a new Windows Virtual Machine Scale Set to be created.
        /// 
        /// &gt; **NOTE:** `extension_operations_enabled` may only be set to `false` if there are no extensions defined in the `extension` field.
        /// </summary>
        [Input("extensionOperationsEnabled")]
        public Input<bool>? ExtensionOperationsEnabled { get; set; }

        [Input("extensions")]
        private InputList<Inputs.WindowsVirtualMachineScaleSetExtensionArgs>? _extensions;

        /// <summary>
        /// One or more `extension` blocks as defined below
        /// </summary>
        public InputList<Inputs.WindowsVirtualMachineScaleSetExtensionArgs> Extensions
        {
            get => _extensions ?? (_extensions = new InputList<Inputs.WindowsVirtualMachineScaleSetExtensionArgs>());
            set => _extensions = value;
        }

        /// <summary>
        /// Specifies the duration allocated for all extensions to start. The time duration should be between `15` minutes and `120` minutes (inclusive) and should be specified in ISO 8601 format. Defaults to `PT1H30M`.
        /// </summary>
        [Input("extensionsTimeBudget")]
        public Input<string>? ExtensionsTimeBudget { get; set; }

        [Input("galleryApplication")]
        private InputList<Inputs.WindowsVirtualMachineScaleSetGalleryApplicationArgs>? _galleryApplication;

        /// <summary>
        /// One or more `gallery_application` blocks as defined below.
        /// </summary>
        public InputList<Inputs.WindowsVirtualMachineScaleSetGalleryApplicationArgs> GalleryApplication
        {
            get => _galleryApplication ?? (_galleryApplication = new InputList<Inputs.WindowsVirtualMachineScaleSetGalleryApplicationArgs>());
            set => _galleryApplication = value;
        }

        [Input("galleryApplications")]
        private InputList<Inputs.WindowsVirtualMachineScaleSetGalleryApplicationArgs>? _galleryApplications;
        [Obsolete(@"`gallery_applications` has been renamed to `gallery_application` and will be deprecated in 4.0")]
        public InputList<Inputs.WindowsVirtualMachineScaleSetGalleryApplicationArgs> GalleryApplications
        {
            get => _galleryApplications ?? (_galleryApplications = new InputList<Inputs.WindowsVirtualMachineScaleSetGalleryApplicationArgs>());
            set => _galleryApplications = value;
        }

        /// <summary>
        /// The ID of a Load Balancer Probe which should be used to determine the health of an instance. This is Required and can only be specified when `upgrade_mode` is set to `Automatic` or `Rolling`.
        /// </summary>
        [Input("healthProbeId")]
        public Input<string>? HealthProbeId { get; set; }

        /// <summary>
        /// Specifies the ID of the dedicated host group that the virtual machine scale set resides in. Changing this forces a new resource to be created.
        /// </summary>
        [Input("hostGroupId")]
        public Input<string>? HostGroupId { get; set; }

        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.WindowsVirtualMachineScaleSetIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// The number of Virtual Machines in the Scale Set.
        /// 
        /// &gt; **NOTE:** If you're using AutoScaling, you may wish to use [`Ignore Changes` functionality](https://www.pulumi.com/docs/intro/concepts/programming-model/#ignorechanges) to ignore changes to this field.
        /// </summary>
        [Input("instances", required: true)]
        public Input<int> Instances { get; set; } = null!;

        /// <summary>
        /// Specifies the type of on-premise license (also known as [Azure Hybrid Use Benefit](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing)) which should be used for this Virtual Machine Scale Set. Possible values are `None`, `Windows_Client` and `Windows_Server`.
        /// </summary>
        [Input("licenseType")]
        public Input<string>? LicenseType { get; set; }

        /// <summary>
        /// The Azure location where the Windows Virtual Machine Scale Set should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The maximum price you're willing to pay for each Virtual Machine in this Scale Set, in US Dollars; which must be greater than the current spot price. If this bid price falls below the current spot price the Virtual Machines in the Scale Set will be evicted using the `eviction_policy`. Defaults to `-1`, which means that each Virtual Machine in the Scale Set should not be evicted for price reasons.
        /// 
        /// &gt; **NOTE:** This can only be configured when `priority` is set to `Spot`.
        /// </summary>
        [Input("maxBidPrice")]
        public Input<double>? MaxBidPrice { get; set; }

        /// <summary>
        /// The name of the Windows Virtual Machine Scale Set. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networkInterfaces", required: true)]
        private InputList<Inputs.WindowsVirtualMachineScaleSetNetworkInterfaceArgs>? _networkInterfaces;

        /// <summary>
        /// One or more `network_interface` blocks as defined below.
        /// </summary>
        public InputList<Inputs.WindowsVirtualMachineScaleSetNetworkInterfaceArgs> NetworkInterfaces
        {
            get => _networkInterfaces ?? (_networkInterfaces = new InputList<Inputs.WindowsVirtualMachineScaleSetNetworkInterfaceArgs>());
            set => _networkInterfaces = value;
        }

        /// <summary>
        /// An `os_disk` block as defined below.
        /// </summary>
        [Input("osDisk", required: true)]
        public Input<Inputs.WindowsVirtualMachineScaleSetOsDiskArgs> OsDisk { get; set; } = null!;

        /// <summary>
        /// Should Azure over-provision Virtual Machines in this Scale Set? This means that multiple Virtual Machines will be provisioned and Azure will keep the instances which become available first - which improves provisioning success rates and improves deployment time. You're not billed for these over-provisioned VM's and they don't count towards the Subscription Quota. Defaults to `true`.
        /// </summary>
        [Input("overprovision")]
        public Input<bool>? Overprovision { get; set; }

        /// <summary>
        /// A `plan` block as defined below. Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE:** When using an image from Azure Marketplace a `plan` must be specified.
        /// </summary>
        [Input("plan")]
        public Input<Inputs.WindowsVirtualMachineScaleSetPlanArgs>? Plan { get; set; }

        /// <summary>
        /// Specifies the number of fault domains that are used by this Linux Virtual Machine Scale Set. Changing this forces a new resource to be created.
        /// </summary>
        [Input("platformFaultDomainCount")]
        public Input<int>? PlatformFaultDomainCount { get; set; }

        /// <summary>
        /// The Priority of this Virtual Machine Scale Set. Possible values are `Regular` and `Spot`. Defaults to `Regular`. Changing this value forces a new resource.
        /// 
        /// &gt; **NOTE:** When `priority` is set to `Spot` an `eviction_policy` must be specified.
        /// </summary>
        [Input("priority")]
        public Input<string>? Priority { get; set; }

        /// <summary>
        /// Should the Azure VM Agent be provisioned on each Virtual Machine in the Scale Set? Defaults to `true`. Changing this value forces a new resource to be created.
        /// </summary>
        [Input("provisionVmAgent")]
        public Input<bool>? ProvisionVmAgent { get; set; }

        /// <summary>
        /// The ID of the Proximity Placement Group in which the Virtual Machine Scale Set should be assigned to. Changing this forces a new resource to be created.
        /// </summary>
        [Input("proximityPlacementGroupId")]
        public Input<string>? ProximityPlacementGroupId { get; set; }

        /// <summary>
        /// The name of the Resource Group in which the Windows Virtual Machine Scale Set should be exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// A `rolling_upgrade_policy` block as defined below. This is Required and can only be specified when `upgrade_mode` is set to `Automatic` or `Rolling`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("rollingUpgradePolicy")]
        public Input<Inputs.WindowsVirtualMachineScaleSetRollingUpgradePolicyArgs>? RollingUpgradePolicy { get; set; }

        /// <summary>
        /// A `scale_in` block as defined below.
        /// </summary>
        [Input("scaleIn")]
        public Input<Inputs.WindowsVirtualMachineScaleSetScaleInArgs>? ScaleIn { get; set; }

        [Input("scaleInPolicy")]
        public Input<string>? ScaleInPolicy { get; set; }

        [Input("secrets")]
        private InputList<Inputs.WindowsVirtualMachineScaleSetSecretArgs>? _secrets;

        /// <summary>
        /// One or more `secret` blocks as defined below.
        /// </summary>
        public InputList<Inputs.WindowsVirtualMachineScaleSetSecretArgs> Secrets
        {
            get => _secrets ?? (_secrets = new InputList<Inputs.WindowsVirtualMachineScaleSetSecretArgs>());
            set => _secrets = value;
        }

        /// <summary>
        /// Specifies if Secure Boot and Trusted Launch is enabled for the Virtual Machine. Changing this forces a new resource to be created.
        /// </summary>
        [Input("secureBootEnabled")]
        public Input<bool>? SecureBootEnabled { get; set; }

        /// <summary>
        /// Should this Virtual Machine Scale Set be limited to a Single Placement Group, which means the number of instances will be capped at 100 Virtual Machines. Defaults to `true`.
        /// </summary>
        [Input("singlePlacementGroup")]
        public Input<bool>? SinglePlacementGroup { get; set; }

        /// <summary>
        /// The Virtual Machine SKU for the Scale Set, such as `Standard_F2`.
        /// </summary>
        [Input("sku", required: true)]
        public Input<string> Sku { get; set; } = null!;

        /// <summary>
        /// The ID of an Image which each Virtual Machine in this Scale Set should be based on. Possible Image ID types include `Image ID`, `Shared Image ID`, `Shared Image Version ID`, `Community Gallery Image ID`, `Community Gallery Image Version ID`, `Shared Gallery Image ID` and `Shared Gallery Image Version ID`.
        /// 
        /// &gt; **NOTE:** One of either `source_image_id` or `source_image_reference` must be set.
        /// </summary>
        [Input("sourceImageId")]
        public Input<string>? SourceImageId { get; set; }

        /// <summary>
        /// A `source_image_reference` block as defined below.
        /// 
        /// &gt; **NOTE:** One of either `source_image_id` or `source_image_reference` must be set.
        /// </summary>
        [Input("sourceImageReference")]
        public Input<Inputs.WindowsVirtualMachineScaleSetSourceImageReferenceArgs>? SourceImageReference { get; set; }

        /// <summary>
        /// A `spot_restore` block as defined below.
        /// </summary>
        [Input("spotRestore")]
        public Input<Inputs.WindowsVirtualMachineScaleSetSpotRestoreArgs>? SpotRestore { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to this Virtual Machine Scale Set.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// A `terminate_notification` block as defined below.
        /// 
        /// &gt; **Note:** This property has been deprecated in favour of the `termination_notification` property and will be removed in version 4.0 of the provider.
        /// </summary>
        [Input("terminateNotification")]
        public Input<Inputs.WindowsVirtualMachineScaleSetTerminateNotificationArgs>? TerminateNotification { get; set; }

        /// <summary>
        /// A `termination_notification` block as defined below.
        /// </summary>
        [Input("terminationNotification")]
        public Input<Inputs.WindowsVirtualMachineScaleSetTerminationNotificationArgs>? TerminationNotification { get; set; }

        /// <summary>
        /// Specifies the time zone of the virtual machine, [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/).
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        [Input("upgradeMode")]
        public Input<string>? UpgradeMode { get; set; }

        /// <summary>
        /// The Base64-Encoded User Data which should be used for this Virtual Machine Scale Set.
        /// </summary>
        [Input("userData")]
        public Input<string>? UserData { get; set; }

        /// <summary>
        /// Specifies if vTPM (Virtual Trusted Platform Module) and Trusted Launch is enabled for the Virtual Machine. Changing this forces a new resource to be created.
        /// </summary>
        [Input("vtpmEnabled")]
        public Input<bool>? VtpmEnabled { get; set; }

        [Input("winrmListeners")]
        private InputList<Inputs.WindowsVirtualMachineScaleSetWinrmListenerArgs>? _winrmListeners;

        /// <summary>
        /// One or more `winrm_listener` blocks as defined below. Changing this forces a new resource to be created.
        /// </summary>
        public InputList<Inputs.WindowsVirtualMachineScaleSetWinrmListenerArgs> WinrmListeners
        {
            get => _winrmListeners ?? (_winrmListeners = new InputList<Inputs.WindowsVirtualMachineScaleSetWinrmListenerArgs>());
            set => _winrmListeners = value;
        }

        /// <summary>
        /// Should the Virtual Machines in this Scale Set be strictly evenly distributed across Availability Zones? Defaults to `false`. Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE:** This can only be set to `true` when one or more `zones` are configured.
        /// </summary>
        [Input("zoneBalance")]
        public Input<bool>? ZoneBalance { get; set; }

        [Input("zones")]
        private InputList<string>? _zones;

        /// <summary>
        /// Specifies a list of Availability Zones in which this Windows Virtual Machine Scale Set should be located. Changing this forces a new Windows Virtual Machine Scale Set to be created.
        /// </summary>
        public InputList<string> Zones
        {
            get => _zones ?? (_zones = new InputList<string>());
            set => _zones = value;
        }

        public WindowsVirtualMachineScaleSetArgs()
        {
        }
        public static new WindowsVirtualMachineScaleSetArgs Empty => new WindowsVirtualMachineScaleSetArgs();
    }

    public sealed class WindowsVirtualMachineScaleSetState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An `additional_capabilities` block as defined below.
        /// </summary>
        [Input("additionalCapabilities")]
        public Input<Inputs.WindowsVirtualMachineScaleSetAdditionalCapabilitiesGetArgs>? AdditionalCapabilities { get; set; }

        [Input("additionalUnattendContents")]
        private InputList<Inputs.WindowsVirtualMachineScaleSetAdditionalUnattendContentGetArgs>? _additionalUnattendContents;

        /// <summary>
        /// One or more `additional_unattend_content` blocks as defined below. Changing this forces a new resource to be created.
        /// </summary>
        public InputList<Inputs.WindowsVirtualMachineScaleSetAdditionalUnattendContentGetArgs> AdditionalUnattendContents
        {
            get => _additionalUnattendContents ?? (_additionalUnattendContents = new InputList<Inputs.WindowsVirtualMachineScaleSetAdditionalUnattendContentGetArgs>());
            set => _additionalUnattendContents = value;
        }

        [Input("adminPassword")]
        private Input<string>? _adminPassword;

        /// <summary>
        /// The Password which should be used for the local-administrator on this Virtual Machine. Changing this forces a new resource to be created.
        /// </summary>
        public Input<string>? AdminPassword
        {
            get => _adminPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _adminPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The username of the local administrator on each Virtual Machine Scale Set instance. Changing this forces a new resource to be created.
        /// </summary>
        [Input("adminUsername")]
        public Input<string>? AdminUsername { get; set; }

        /// <summary>
        /// An `automatic_instance_repair` block as defined below. To enable the automatic instance repair, this Virtual Machine Scale Set must have a valid `health_probe_id` or an [Application Health Extension](https://docs.microsoft.com/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-health-extension).
        /// 
        /// &gt; **NOTE:** For more information about Automatic Instance Repair, please refer to [this doc](https://docs.microsoft.com/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-automatic-instance-repairs).
        /// </summary>
        [Input("automaticInstanceRepair")]
        public Input<Inputs.WindowsVirtualMachineScaleSetAutomaticInstanceRepairGetArgs>? AutomaticInstanceRepair { get; set; }

        /// <summary>
        /// An `automatic_os_upgrade_policy` block as defined below. This can only be specified when `upgrade_mode` is set to either `Automatic` or `Rolling`.
        /// </summary>
        [Input("automaticOsUpgradePolicy")]
        public Input<Inputs.WindowsVirtualMachineScaleSetAutomaticOsUpgradePolicyGetArgs>? AutomaticOsUpgradePolicy { get; set; }

        /// <summary>
        /// A `boot_diagnostics` block as defined below.
        /// </summary>
        [Input("bootDiagnostics")]
        public Input<Inputs.WindowsVirtualMachineScaleSetBootDiagnosticsGetArgs>? BootDiagnostics { get; set; }

        /// <summary>
        /// Specifies the ID of the Capacity Reservation Group which the Virtual Machine Scale Set should be allocated to. Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE:** `capacity_reservation_group_id` cannot be used with `proximity_placement_group_id`
        /// 
        /// &gt; **NOTE:** `single_placement_group` must be set to `false` when `capacity_reservation_group_id` is specified.
        /// </summary>
        [Input("capacityReservationGroupId")]
        public Input<string>? CapacityReservationGroupId { get; set; }

        /// <summary>
        /// The prefix which should be used for the name of the Virtual Machines in this Scale Set. If unspecified this defaults to the value for the `name` field. If the value of the `name` field is not a valid `computer_name_prefix`, then you must specify `computer_name_prefix`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("computerNamePrefix")]
        public Input<string>? ComputerNamePrefix { get; set; }

        [Input("customData")]
        private Input<string>? _customData;

        /// <summary>
        /// The Base64-Encoded Custom Data which should be used for this Virtual Machine Scale Set.
        /// 
        /// &gt; **NOTE:** When Custom Data has been configured, it's not possible to remove it without tainting the Virtual Machine Scale Set, due to a limitation of the Azure API.
        /// </summary>
        public Input<string>? CustomData
        {
            get => _customData;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _customData = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("dataDisks")]
        private InputList<Inputs.WindowsVirtualMachineScaleSetDataDiskGetArgs>? _dataDisks;

        /// <summary>
        /// One or more `data_disk` blocks as defined below.
        /// </summary>
        public InputList<Inputs.WindowsVirtualMachineScaleSetDataDiskGetArgs> DataDisks
        {
            get => _dataDisks ?? (_dataDisks = new InputList<Inputs.WindowsVirtualMachineScaleSetDataDiskGetArgs>());
            set => _dataDisks = value;
        }

        /// <summary>
        /// Should Virtual Machine Extensions be run on Overprovisioned Virtual Machines in the Scale Set? Defaults to `false`.
        /// </summary>
        [Input("doNotRunExtensionsOnOverprovisionedMachines")]
        public Input<bool>? DoNotRunExtensionsOnOverprovisionedMachines { get; set; }

        /// <summary>
        /// Specifies the Edge Zone within the Azure Region where this Windows Virtual Machine Scale Set should exist. Changing this forces a new Windows Virtual Machine Scale Set to be created.
        /// </summary>
        [Input("edgeZone")]
        public Input<string>? EdgeZone { get; set; }

        /// <summary>
        /// Are automatic updates enabled for this Virtual Machine? Defaults to `true`.
        /// </summary>
        [Input("enableAutomaticUpdates")]
        public Input<bool>? EnableAutomaticUpdates { get; set; }

        /// <summary>
        /// Should all of the disks (including the temp disk) attached to this Virtual Machine be encrypted by enabling Encryption at Host?
        /// </summary>
        [Input("encryptionAtHostEnabled")]
        public Input<bool>? EncryptionAtHostEnabled { get; set; }

        /// <summary>
        /// Specifies the eviction policy for Virtual Machines in this Scale Set. Possible values are `Deallocate` and `Delete`. Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE:** This can only be configured when `priority` is set to `Spot`.
        /// </summary>
        [Input("evictionPolicy")]
        public Input<string>? EvictionPolicy { get; set; }

        /// <summary>
        /// Should extension operations be allowed on the Virtual Machine Scale Set? Possible values are `true` or `false`. Defaults to `true`. Changing this forces a new Windows Virtual Machine Scale Set to be created.
        /// 
        /// &gt; **NOTE:** `extension_operations_enabled` may only be set to `false` if there are no extensions defined in the `extension` field.
        /// </summary>
        [Input("extensionOperationsEnabled")]
        public Input<bool>? ExtensionOperationsEnabled { get; set; }

        [Input("extensions")]
        private InputList<Inputs.WindowsVirtualMachineScaleSetExtensionGetArgs>? _extensions;

        /// <summary>
        /// One or more `extension` blocks as defined below
        /// </summary>
        public InputList<Inputs.WindowsVirtualMachineScaleSetExtensionGetArgs> Extensions
        {
            get => _extensions ?? (_extensions = new InputList<Inputs.WindowsVirtualMachineScaleSetExtensionGetArgs>());
            set => _extensions = value;
        }

        /// <summary>
        /// Specifies the duration allocated for all extensions to start. The time duration should be between `15` minutes and `120` minutes (inclusive) and should be specified in ISO 8601 format. Defaults to `PT1H30M`.
        /// </summary>
        [Input("extensionsTimeBudget")]
        public Input<string>? ExtensionsTimeBudget { get; set; }

        [Input("galleryApplication")]
        private InputList<Inputs.WindowsVirtualMachineScaleSetGalleryApplicationGetArgs>? _galleryApplication;

        /// <summary>
        /// One or more `gallery_application` blocks as defined below.
        /// </summary>
        public InputList<Inputs.WindowsVirtualMachineScaleSetGalleryApplicationGetArgs> GalleryApplication
        {
            get => _galleryApplication ?? (_galleryApplication = new InputList<Inputs.WindowsVirtualMachineScaleSetGalleryApplicationGetArgs>());
            set => _galleryApplication = value;
        }

        [Input("galleryApplications")]
        private InputList<Inputs.WindowsVirtualMachineScaleSetGalleryApplicationGetArgs>? _galleryApplications;
        [Obsolete(@"`gallery_applications` has been renamed to `gallery_application` and will be deprecated in 4.0")]
        public InputList<Inputs.WindowsVirtualMachineScaleSetGalleryApplicationGetArgs> GalleryApplications
        {
            get => _galleryApplications ?? (_galleryApplications = new InputList<Inputs.WindowsVirtualMachineScaleSetGalleryApplicationGetArgs>());
            set => _galleryApplications = value;
        }

        /// <summary>
        /// The ID of a Load Balancer Probe which should be used to determine the health of an instance. This is Required and can only be specified when `upgrade_mode` is set to `Automatic` or `Rolling`.
        /// </summary>
        [Input("healthProbeId")]
        public Input<string>? HealthProbeId { get; set; }

        /// <summary>
        /// Specifies the ID of the dedicated host group that the virtual machine scale set resides in. Changing this forces a new resource to be created.
        /// </summary>
        [Input("hostGroupId")]
        public Input<string>? HostGroupId { get; set; }

        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.WindowsVirtualMachineScaleSetIdentityGetArgs>? Identity { get; set; }

        /// <summary>
        /// The number of Virtual Machines in the Scale Set.
        /// 
        /// &gt; **NOTE:** If you're using AutoScaling, you may wish to use [`Ignore Changes` functionality](https://www.pulumi.com/docs/intro/concepts/programming-model/#ignorechanges) to ignore changes to this field.
        /// </summary>
        [Input("instances")]
        public Input<int>? Instances { get; set; }

        /// <summary>
        /// Specifies the type of on-premise license (also known as [Azure Hybrid Use Benefit](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing)) which should be used for this Virtual Machine Scale Set. Possible values are `None`, `Windows_Client` and `Windows_Server`.
        /// </summary>
        [Input("licenseType")]
        public Input<string>? LicenseType { get; set; }

        /// <summary>
        /// The Azure location where the Windows Virtual Machine Scale Set should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The maximum price you're willing to pay for each Virtual Machine in this Scale Set, in US Dollars; which must be greater than the current spot price. If this bid price falls below the current spot price the Virtual Machines in the Scale Set will be evicted using the `eviction_policy`. Defaults to `-1`, which means that each Virtual Machine in the Scale Set should not be evicted for price reasons.
        /// 
        /// &gt; **NOTE:** This can only be configured when `priority` is set to `Spot`.
        /// </summary>
        [Input("maxBidPrice")]
        public Input<double>? MaxBidPrice { get; set; }

        /// <summary>
        /// The name of the Windows Virtual Machine Scale Set. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networkInterfaces")]
        private InputList<Inputs.WindowsVirtualMachineScaleSetNetworkInterfaceGetArgs>? _networkInterfaces;

        /// <summary>
        /// One or more `network_interface` blocks as defined below.
        /// </summary>
        public InputList<Inputs.WindowsVirtualMachineScaleSetNetworkInterfaceGetArgs> NetworkInterfaces
        {
            get => _networkInterfaces ?? (_networkInterfaces = new InputList<Inputs.WindowsVirtualMachineScaleSetNetworkInterfaceGetArgs>());
            set => _networkInterfaces = value;
        }

        /// <summary>
        /// An `os_disk` block as defined below.
        /// </summary>
        [Input("osDisk")]
        public Input<Inputs.WindowsVirtualMachineScaleSetOsDiskGetArgs>? OsDisk { get; set; }

        /// <summary>
        /// Should Azure over-provision Virtual Machines in this Scale Set? This means that multiple Virtual Machines will be provisioned and Azure will keep the instances which become available first - which improves provisioning success rates and improves deployment time. You're not billed for these over-provisioned VM's and they don't count towards the Subscription Quota. Defaults to `true`.
        /// </summary>
        [Input("overprovision")]
        public Input<bool>? Overprovision { get; set; }

        /// <summary>
        /// A `plan` block as defined below. Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE:** When using an image from Azure Marketplace a `plan` must be specified.
        /// </summary>
        [Input("plan")]
        public Input<Inputs.WindowsVirtualMachineScaleSetPlanGetArgs>? Plan { get; set; }

        /// <summary>
        /// Specifies the number of fault domains that are used by this Linux Virtual Machine Scale Set. Changing this forces a new resource to be created.
        /// </summary>
        [Input("platformFaultDomainCount")]
        public Input<int>? PlatformFaultDomainCount { get; set; }

        /// <summary>
        /// The Priority of this Virtual Machine Scale Set. Possible values are `Regular` and `Spot`. Defaults to `Regular`. Changing this value forces a new resource.
        /// 
        /// &gt; **NOTE:** When `priority` is set to `Spot` an `eviction_policy` must be specified.
        /// </summary>
        [Input("priority")]
        public Input<string>? Priority { get; set; }

        /// <summary>
        /// Should the Azure VM Agent be provisioned on each Virtual Machine in the Scale Set? Defaults to `true`. Changing this value forces a new resource to be created.
        /// </summary>
        [Input("provisionVmAgent")]
        public Input<bool>? ProvisionVmAgent { get; set; }

        /// <summary>
        /// The ID of the Proximity Placement Group in which the Virtual Machine Scale Set should be assigned to. Changing this forces a new resource to be created.
        /// </summary>
        [Input("proximityPlacementGroupId")]
        public Input<string>? ProximityPlacementGroupId { get; set; }

        /// <summary>
        /// The name of the Resource Group in which the Windows Virtual Machine Scale Set should be exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// A `rolling_upgrade_policy` block as defined below. This is Required and can only be specified when `upgrade_mode` is set to `Automatic` or `Rolling`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("rollingUpgradePolicy")]
        public Input<Inputs.WindowsVirtualMachineScaleSetRollingUpgradePolicyGetArgs>? RollingUpgradePolicy { get; set; }

        /// <summary>
        /// A `scale_in` block as defined below.
        /// </summary>
        [Input("scaleIn")]
        public Input<Inputs.WindowsVirtualMachineScaleSetScaleInGetArgs>? ScaleIn { get; set; }

        [Input("scaleInPolicy")]
        public Input<string>? ScaleInPolicy { get; set; }

        [Input("secrets")]
        private InputList<Inputs.WindowsVirtualMachineScaleSetSecretGetArgs>? _secrets;

        /// <summary>
        /// One or more `secret` blocks as defined below.
        /// </summary>
        public InputList<Inputs.WindowsVirtualMachineScaleSetSecretGetArgs> Secrets
        {
            get => _secrets ?? (_secrets = new InputList<Inputs.WindowsVirtualMachineScaleSetSecretGetArgs>());
            set => _secrets = value;
        }

        /// <summary>
        /// Specifies if Secure Boot and Trusted Launch is enabled for the Virtual Machine. Changing this forces a new resource to be created.
        /// </summary>
        [Input("secureBootEnabled")]
        public Input<bool>? SecureBootEnabled { get; set; }

        /// <summary>
        /// Should this Virtual Machine Scale Set be limited to a Single Placement Group, which means the number of instances will be capped at 100 Virtual Machines. Defaults to `true`.
        /// </summary>
        [Input("singlePlacementGroup")]
        public Input<bool>? SinglePlacementGroup { get; set; }

        /// <summary>
        /// The Virtual Machine SKU for the Scale Set, such as `Standard_F2`.
        /// </summary>
        [Input("sku")]
        public Input<string>? Sku { get; set; }

        /// <summary>
        /// The ID of an Image which each Virtual Machine in this Scale Set should be based on. Possible Image ID types include `Image ID`, `Shared Image ID`, `Shared Image Version ID`, `Community Gallery Image ID`, `Community Gallery Image Version ID`, `Shared Gallery Image ID` and `Shared Gallery Image Version ID`.
        /// 
        /// &gt; **NOTE:** One of either `source_image_id` or `source_image_reference` must be set.
        /// </summary>
        [Input("sourceImageId")]
        public Input<string>? SourceImageId { get; set; }

        /// <summary>
        /// A `source_image_reference` block as defined below.
        /// 
        /// &gt; **NOTE:** One of either `source_image_id` or `source_image_reference` must be set.
        /// </summary>
        [Input("sourceImageReference")]
        public Input<Inputs.WindowsVirtualMachineScaleSetSourceImageReferenceGetArgs>? SourceImageReference { get; set; }

        /// <summary>
        /// A `spot_restore` block as defined below.
        /// </summary>
        [Input("spotRestore")]
        public Input<Inputs.WindowsVirtualMachineScaleSetSpotRestoreGetArgs>? SpotRestore { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to this Virtual Machine Scale Set.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// A `terminate_notification` block as defined below.
        /// 
        /// &gt; **Note:** This property has been deprecated in favour of the `termination_notification` property and will be removed in version 4.0 of the provider.
        /// </summary>
        [Input("terminateNotification")]
        public Input<Inputs.WindowsVirtualMachineScaleSetTerminateNotificationGetArgs>? TerminateNotification { get; set; }

        /// <summary>
        /// A `termination_notification` block as defined below.
        /// </summary>
        [Input("terminationNotification")]
        public Input<Inputs.WindowsVirtualMachineScaleSetTerminationNotificationGetArgs>? TerminationNotification { get; set; }

        /// <summary>
        /// Specifies the time zone of the virtual machine, [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/).
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        /// <summary>
        /// The Unique ID for this Windows Virtual Machine Scale Set.
        /// </summary>
        [Input("uniqueId")]
        public Input<string>? UniqueId { get; set; }

        [Input("upgradeMode")]
        public Input<string>? UpgradeMode { get; set; }

        /// <summary>
        /// The Base64-Encoded User Data which should be used for this Virtual Machine Scale Set.
        /// </summary>
        [Input("userData")]
        public Input<string>? UserData { get; set; }

        /// <summary>
        /// Specifies if vTPM (Virtual Trusted Platform Module) and Trusted Launch is enabled for the Virtual Machine. Changing this forces a new resource to be created.
        /// </summary>
        [Input("vtpmEnabled")]
        public Input<bool>? VtpmEnabled { get; set; }

        [Input("winrmListeners")]
        private InputList<Inputs.WindowsVirtualMachineScaleSetWinrmListenerGetArgs>? _winrmListeners;

        /// <summary>
        /// One or more `winrm_listener` blocks as defined below. Changing this forces a new resource to be created.
        /// </summary>
        public InputList<Inputs.WindowsVirtualMachineScaleSetWinrmListenerGetArgs> WinrmListeners
        {
            get => _winrmListeners ?? (_winrmListeners = new InputList<Inputs.WindowsVirtualMachineScaleSetWinrmListenerGetArgs>());
            set => _winrmListeners = value;
        }

        /// <summary>
        /// Should the Virtual Machines in this Scale Set be strictly evenly distributed across Availability Zones? Defaults to `false`. Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE:** This can only be set to `true` when one or more `zones` are configured.
        /// </summary>
        [Input("zoneBalance")]
        public Input<bool>? ZoneBalance { get; set; }

        [Input("zones")]
        private InputList<string>? _zones;

        /// <summary>
        /// Specifies a list of Availability Zones in which this Windows Virtual Machine Scale Set should be located. Changing this forces a new Windows Virtual Machine Scale Set to be created.
        /// </summary>
        public InputList<string> Zones
        {
            get => _zones ?? (_zones = new InputList<string>());
            set => _zones = value;
        }

        public WindowsVirtualMachineScaleSetState()
        {
        }
        public static new WindowsVirtualMachineScaleSetState Empty => new WindowsVirtualMachineScaleSetState();
    }
}
