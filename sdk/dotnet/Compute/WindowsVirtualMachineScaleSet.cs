// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Compute
{
    /// <summary>
    /// Manages a Windows Virtual Machine Scale Set.
    /// 
    /// ## Disclaimers
    /// 
    /// &gt; **Note** This provider will automatically update &amp; reimage the nodes in the Scale Set (if Required) during an Update - this behaviour can be configured using the `features` configuration within the Provider configuration block.
    /// 
    /// &gt; **Note:** This resource does not support Unmanaged Disks. If you need to use Unmanaged Disks you can continue to use the `azure.compute.ScaleSet` resource instead
    /// 
    /// ## Example Usage
    /// 
    /// This example provisions a basic Windows Virtual Machine Scale Set on an internal network.
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new Azure.Core.ResourceGroupArgs
    ///         {
    ///             Location = "West Europe",
    ///         });
    ///         var exampleVirtualNetwork = new Azure.Network.VirtualNetwork("exampleVirtualNetwork", new Azure.Network.VirtualNetworkArgs
    ///         {
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             Location = exampleResourceGroup.Location,
    ///             AddressSpaces = 
    ///             {
    ///                 "10.0.0.0/16",
    ///             },
    ///         });
    ///         var @internal = new Azure.Network.Subnet("internal", new Azure.Network.SubnetArgs
    ///         {
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             VirtualNetworkName = exampleVirtualNetwork.Name,
    ///             AddressPrefixes = 
    ///             {
    ///                 "10.0.2.0/24",
    ///             },
    ///         });
    ///         var exampleWindowsVirtualMachineScaleSet = new Azure.Compute.WindowsVirtualMachineScaleSet("exampleWindowsVirtualMachineScaleSet", new Azure.Compute.WindowsVirtualMachineScaleSetArgs
    ///         {
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             Location = exampleResourceGroup.Location,
    ///             Sku = "Standard_F2",
    ///             Instances = 1,
    ///             AdminPassword = "P@55w0rd1234!",
    ///             AdminUsername = "adminuser",
    ///             SourceImageReference = new Azure.Compute.Inputs.WindowsVirtualMachineScaleSetSourceImageReferenceArgs
    ///             {
    ///                 Publisher = "MicrosoftWindowsServer",
    ///                 Offer = "WindowsServer",
    ///                 Sku = "2016-Datacenter-Server-Core",
    ///                 Version = "latest",
    ///             },
    ///             OsDisk = new Azure.Compute.Inputs.WindowsVirtualMachineScaleSetOsDiskArgs
    ///             {
    ///                 StorageAccountType = "Standard_LRS",
    ///                 Caching = "ReadWrite",
    ///             },
    ///             NetworkInterfaces = 
    ///             {
    ///                 new Azure.Compute.Inputs.WindowsVirtualMachineScaleSetNetworkInterfaceArgs
    ///                 {
    ///                     Name = "example",
    ///                     Primary = true,
    ///                     IpConfigurations = 
    ///                     {
    ///                         new Azure.Compute.Inputs.WindowsVirtualMachineScaleSetNetworkInterfaceIpConfigurationArgs
    ///                         {
    ///                             Name = "internal",
    ///                             Primary = true,
    ///                             SubnetId = @internal.Id,
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Windows Virtual Machine Scale Sets can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:compute/windowsVirtualMachineScaleSet:WindowsVirtualMachineScaleSet example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/Microsoft.Compute/virtualMachineScaleSets/scaleset1
    /// ```
    /// </summary>
    public partial class WindowsVirtualMachineScaleSet : Pulumi.CustomResource
    {
        /// <summary>
        /// A `additional_capabilities` block as defined below.
        /// </summary>
        [Output("additionalCapabilities")]
        public Output<Outputs.WindowsVirtualMachineScaleSetAdditionalCapabilities?> AdditionalCapabilities { get; private set; } = null!;

        /// <summary>
        /// One or more `additional_unattend_content` blocks as defined below.
        /// </summary>
        [Output("additionalUnattendContents")]
        public Output<ImmutableArray<Outputs.WindowsVirtualMachineScaleSetAdditionalUnattendContent>> AdditionalUnattendContents { get; private set; } = null!;

        /// <summary>
        /// The Password which should be used for the local-administrator on this Virtual Machine. Changing this forces a new resource to be created.
        /// </summary>
        [Output("adminPassword")]
        public Output<string> AdminPassword { get; private set; } = null!;

        /// <summary>
        /// The username of the local administrator on each Virtual Machine Scale Set instance. Changing this forces a new resource to be created.
        /// </summary>
        [Output("adminUsername")]
        public Output<string> AdminUsername { get; private set; } = null!;

        /// <summary>
        /// A `automatic_instance_repair` block as defined below. To enable the automatic instance repair, this Virtual Machine Scale Set must have a valid `health_probe_id` or an [Application Health Extension](https://docs.microsoft.com/en-us/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-health-extension).
        /// </summary>
        [Output("automaticInstanceRepair")]
        public Output<Outputs.WindowsVirtualMachineScaleSetAutomaticInstanceRepair> AutomaticInstanceRepair { get; private set; } = null!;

        /// <summary>
        /// A `automatic_os_upgrade_policy` block as defined below. This can only be specified when `upgrade_mode` is set to `Automatic`.
        /// </summary>
        [Output("automaticOsUpgradePolicy")]
        public Output<Outputs.WindowsVirtualMachineScaleSetAutomaticOsUpgradePolicy?> AutomaticOsUpgradePolicy { get; private set; } = null!;

        /// <summary>
        /// A `boot_diagnostics` block as defined below.
        /// </summary>
        [Output("bootDiagnostics")]
        public Output<Outputs.WindowsVirtualMachineScaleSetBootDiagnostics?> BootDiagnostics { get; private set; } = null!;

        /// <summary>
        /// The prefix which should be used for the name of the Virtual Machines in this Scale Set. If unspecified this defaults to the value for the `name` field. If the value of the `name` field is not a valid `computer_name_prefix`, then you must specify `computer_name_prefix`.
        /// </summary>
        [Output("computerNamePrefix")]
        public Output<string> ComputerNamePrefix { get; private set; } = null!;

        /// <summary>
        /// The Base64-Encoded Custom Data which should be used for this Virtual Machine Scale Set.
        /// </summary>
        [Output("customData")]
        public Output<string?> CustomData { get; private set; } = null!;

        /// <summary>
        /// One or more `data_disk` blocks as defined below.
        /// </summary>
        [Output("dataDisks")]
        public Output<ImmutableArray<Outputs.WindowsVirtualMachineScaleSetDataDisk>> DataDisks { get; private set; } = null!;

        /// <summary>
        /// Should Virtual Machine Extensions be run on Overprovisioned Virtual Machines in the Scale Set? Defaults to `false`.
        /// </summary>
        [Output("doNotRunExtensionsOnOverprovisionedMachines")]
        public Output<bool?> DoNotRunExtensionsOnOverprovisionedMachines { get; private set; } = null!;

        /// <summary>
        /// Are automatic updates enabled for this Virtual Machine? Defaults to `true`.
        /// </summary>
        [Output("enableAutomaticUpdates")]
        public Output<bool?> EnableAutomaticUpdates { get; private set; } = null!;

        /// <summary>
        /// Should all of the disks (including the temp disk) attached to this Virtual Machine be encrypted by enabling Encryption at Host?
        /// </summary>
        [Output("encryptionAtHostEnabled")]
        public Output<bool?> EncryptionAtHostEnabled { get; private set; } = null!;

        /// <summary>
        /// The Policy which should be used Virtual Machines are Evicted from the Scale Set. Changing this forces a new resource to be created.
        /// </summary>
        [Output("evictionPolicy")]
        public Output<string?> EvictionPolicy { get; private set; } = null!;

        /// <summary>
        /// One or more `extension` blocks as defined below
        /// </summary>
        [Output("extensions")]
        public Output<ImmutableArray<Outputs.WindowsVirtualMachineScaleSetExtension>> Extensions { get; private set; } = null!;

        /// <summary>
        /// The ID of a Load Balancer Probe which should be used to determine the health of an instance. Changing this forces a new resource to be created. This is Required and can only be specified when `upgrade_mode` is set to `Automatic` or `Rolling`.
        /// </summary>
        [Output("healthProbeId")]
        public Output<string?> HealthProbeId { get; private set; } = null!;

        /// <summary>
        /// A `identity` block as defined below.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.WindowsVirtualMachineScaleSetIdentity?> Identity { get; private set; } = null!;

        /// <summary>
        /// The number of Virtual Machines in the Scale Set.
        /// </summary>
        [Output("instances")]
        public Output<int> Instances { get; private set; } = null!;

        /// <summary>
        /// Specifies the type of on-premise license (also known as [Azure Hybrid Use Benefit](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing)) which should be used for this Virtual Machine Scale Set. Possible values are `None`, `Windows_Client` and `Windows_Server`. Changing this forces a new resource to be created.
        /// </summary>
        [Output("licenseType")]
        public Output<string?> LicenseType { get; private set; } = null!;

        /// <summary>
        /// The Azure location where the Windows Virtual Machine Scale Set should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The maximum price you're willing to pay for each Virtual Machine in this Scale Set, in US Dollars; which must be greater than the current spot price. If this bid price falls below the current spot price the Virtual Machines in the Scale Set will be evicted using the `eviction_policy`. Defaults to `-1`, which means that each Virtual Machine in the Scale Set should not be evicted for price reasons.
        /// </summary>
        [Output("maxBidPrice")]
        public Output<double?> MaxBidPrice { get; private set; } = null!;

        /// <summary>
        /// The name of the Windows Virtual Machine Scale Set. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// One or more `network_interface` blocks as defined below.
        /// </summary>
        [Output("networkInterfaces")]
        public Output<ImmutableArray<Outputs.WindowsVirtualMachineScaleSetNetworkInterface>> NetworkInterfaces { get; private set; } = null!;

        /// <summary>
        /// An `os_disk` block as defined below.
        /// </summary>
        [Output("osDisk")]
        public Output<Outputs.WindowsVirtualMachineScaleSetOsDisk> OsDisk { get; private set; } = null!;

        /// <summary>
        /// Should Azure over-provision Virtual Machines in this Scale Set? This means that multiple Virtual Machines will be provisioned and Azure will keep the instances which become available first - which improves provisioning success rates and improves deployment time. You're not billed for these over-provisioned VM's and they don't count towards the Subscription Quota. Defaults to `true`.
        /// </summary>
        [Output("overprovision")]
        public Output<bool?> Overprovision { get; private set; } = null!;

        /// <summary>
        /// A `plan` block as documented below.
        /// </summary>
        [Output("plan")]
        public Output<Outputs.WindowsVirtualMachineScaleSetPlan?> Plan { get; private set; } = null!;

        /// <summary>
        /// The Priority of this Virtual Machine Scale Set. Possible values are `Regular` and `Spot`. Defaults to `Regular`. Changing this value forces a new resource.
        /// </summary>
        [Output("priority")]
        public Output<string?> Priority { get; private set; } = null!;

        /// <summary>
        /// Should the Azure VM Agent be provisioned on each Virtual Machine in the Scale Set? Defaults to `true`. Changing this value forces a new resource to be created.
        /// </summary>
        [Output("provisionVmAgent")]
        public Output<bool?> ProvisionVmAgent { get; private set; } = null!;

        /// <summary>
        /// The ID of the Proximity Placement Group in which the Virtual Machine Scale Set should be assigned to. Changing this forces a new resource to be created.
        /// </summary>
        [Output("proximityPlacementGroupId")]
        public Output<string?> ProximityPlacementGroupId { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group in which the Windows Virtual Machine Scale Set should be exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// A `rolling_upgrade_policy` block as defined below. This is Required and can only be specified when `upgrade_mode` is set to `Automatic` or `Rolling`.
        /// </summary>
        [Output("rollingUpgradePolicy")]
        public Output<Outputs.WindowsVirtualMachineScaleSetRollingUpgradePolicy?> RollingUpgradePolicy { get; private set; } = null!;

        /// <summary>
        /// The scale-in policy rule that decides which virtual machines are chosen for removal when a Virtual Machine Scale Set is scaled in. Possible values for the scale-in policy rules are `Default`, `NewestVM` and `OldestVM`, defaults to `Default`. For more information about scale in policy, please [refer to this doc](https://docs.microsoft.com/en-us/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-scale-in-policy).
        /// </summary>
        [Output("scaleInPolicy")]
        public Output<string?> ScaleInPolicy { get; private set; } = null!;

        /// <summary>
        /// One or more `secret` blocks as defined below.
        /// </summary>
        [Output("secrets")]
        public Output<ImmutableArray<Outputs.WindowsVirtualMachineScaleSetSecret>> Secrets { get; private set; } = null!;

        /// <summary>
        /// Should this Virtual Machine Scale Set be limited to a Single Placement Group, which means the number of instances will be capped at 100 Virtual Machines. Defaults to `true`.
        /// </summary>
        [Output("singlePlacementGroup")]
        public Output<bool?> SinglePlacementGroup { get; private set; } = null!;

        /// <summary>
        /// The Virtual Machine SKU for the Scale Set, such as `Standard_F2`.
        /// </summary>
        [Output("sku")]
        public Output<string> Sku { get; private set; } = null!;

        /// <summary>
        /// The ID of an Image which each Virtual Machine in this Scale Set should be based on.
        /// </summary>
        [Output("sourceImageId")]
        public Output<string?> SourceImageId { get; private set; } = null!;

        /// <summary>
        /// A `source_image_reference` block as defined below.
        /// </summary>
        [Output("sourceImageReference")]
        public Output<Outputs.WindowsVirtualMachineScaleSetSourceImageReference?> SourceImageReference { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags which should be assigned to this Virtual Machine Scale Set.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A `terminate_notification` block as defined below.
        /// </summary>
        [Output("terminateNotification")]
        public Output<Outputs.WindowsVirtualMachineScaleSetTerminateNotification> TerminateNotification { get; private set; } = null!;

        /// <summary>
        /// Specifies the time zone of the virtual machine, [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/).
        /// </summary>
        [Output("timezone")]
        public Output<string?> Timezone { get; private set; } = null!;

        /// <summary>
        /// The Unique ID for this Windows Virtual Machine Scale Set.
        /// </summary>
        [Output("uniqueId")]
        public Output<string> UniqueId { get; private set; } = null!;

        /// <summary>
        /// Specifies how Upgrades (e.g. changing the Image/SKU) should be performed to Virtual Machine Instances. Possible values are `Automatic`, `Manual` and `Rolling`. Defaults to `Manual`.
        /// </summary>
        [Output("upgradeMode")]
        public Output<string?> UpgradeMode { get; private set; } = null!;

        /// <summary>
        /// One or more `winrm_listener` blocks as defined below.
        /// </summary>
        [Output("winrmListeners")]
        public Output<ImmutableArray<Outputs.WindowsVirtualMachineScaleSetWinrmListener>> WinrmListeners { get; private set; } = null!;

        /// <summary>
        /// Should the Virtual Machines in this Scale Set be strictly evenly distributed across Availability Zones? Defaults to `false`. Changing this forces a new resource to be created.
        /// </summary>
        [Output("zoneBalance")]
        public Output<bool?> ZoneBalance { get; private set; } = null!;

        /// <summary>
        /// A list of Availability Zones in which the Virtual Machines in this Scale Set should be created in. Changing this forces a new resource to be created.
        /// </summary>
        [Output("zones")]
        public Output<ImmutableArray<string>> Zones { get; private set; } = null!;


        /// <summary>
        /// Create a WindowsVirtualMachineScaleSet resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WindowsVirtualMachineScaleSet(string name, WindowsVirtualMachineScaleSetArgs args, CustomResourceOptions? options = null)
            : base("azure:compute/windowsVirtualMachineScaleSet:WindowsVirtualMachineScaleSet", name, args ?? new WindowsVirtualMachineScaleSetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private WindowsVirtualMachineScaleSet(string name, Input<string> id, WindowsVirtualMachineScaleSetState? state = null, CustomResourceOptions? options = null)
            : base("azure:compute/windowsVirtualMachineScaleSet:WindowsVirtualMachineScaleSet", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WindowsVirtualMachineScaleSet resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WindowsVirtualMachineScaleSet Get(string name, Input<string> id, WindowsVirtualMachineScaleSetState? state = null, CustomResourceOptions? options = null)
        {
            return new WindowsVirtualMachineScaleSet(name, id, state, options);
        }
    }

    public sealed class WindowsVirtualMachineScaleSetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A `additional_capabilities` block as defined below.
        /// </summary>
        [Input("additionalCapabilities")]
        public Input<Inputs.WindowsVirtualMachineScaleSetAdditionalCapabilitiesArgs>? AdditionalCapabilities { get; set; }

        [Input("additionalUnattendContents")]
        private InputList<Inputs.WindowsVirtualMachineScaleSetAdditionalUnattendContentArgs>? _additionalUnattendContents;

        /// <summary>
        /// One or more `additional_unattend_content` blocks as defined below.
        /// </summary>
        public InputList<Inputs.WindowsVirtualMachineScaleSetAdditionalUnattendContentArgs> AdditionalUnattendContents
        {
            get => _additionalUnattendContents ?? (_additionalUnattendContents = new InputList<Inputs.WindowsVirtualMachineScaleSetAdditionalUnattendContentArgs>());
            set => _additionalUnattendContents = value;
        }

        /// <summary>
        /// The Password which should be used for the local-administrator on this Virtual Machine. Changing this forces a new resource to be created.
        /// </summary>
        [Input("adminPassword", required: true)]
        public Input<string> AdminPassword { get; set; } = null!;

        /// <summary>
        /// The username of the local administrator on each Virtual Machine Scale Set instance. Changing this forces a new resource to be created.
        /// </summary>
        [Input("adminUsername", required: true)]
        public Input<string> AdminUsername { get; set; } = null!;

        /// <summary>
        /// A `automatic_instance_repair` block as defined below. To enable the automatic instance repair, this Virtual Machine Scale Set must have a valid `health_probe_id` or an [Application Health Extension](https://docs.microsoft.com/en-us/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-health-extension).
        /// </summary>
        [Input("automaticInstanceRepair")]
        public Input<Inputs.WindowsVirtualMachineScaleSetAutomaticInstanceRepairArgs>? AutomaticInstanceRepair { get; set; }

        /// <summary>
        /// A `automatic_os_upgrade_policy` block as defined below. This can only be specified when `upgrade_mode` is set to `Automatic`.
        /// </summary>
        [Input("automaticOsUpgradePolicy")]
        public Input<Inputs.WindowsVirtualMachineScaleSetAutomaticOsUpgradePolicyArgs>? AutomaticOsUpgradePolicy { get; set; }

        /// <summary>
        /// A `boot_diagnostics` block as defined below.
        /// </summary>
        [Input("bootDiagnostics")]
        public Input<Inputs.WindowsVirtualMachineScaleSetBootDiagnosticsArgs>? BootDiagnostics { get; set; }

        /// <summary>
        /// The prefix which should be used for the name of the Virtual Machines in this Scale Set. If unspecified this defaults to the value for the `name` field. If the value of the `name` field is not a valid `computer_name_prefix`, then you must specify `computer_name_prefix`.
        /// </summary>
        [Input("computerNamePrefix")]
        public Input<string>? ComputerNamePrefix { get; set; }

        /// <summary>
        /// The Base64-Encoded Custom Data which should be used for this Virtual Machine Scale Set.
        /// </summary>
        [Input("customData")]
        public Input<string>? CustomData { get; set; }

        [Input("dataDisks")]
        private InputList<Inputs.WindowsVirtualMachineScaleSetDataDiskArgs>? _dataDisks;

        /// <summary>
        /// One or more `data_disk` blocks as defined below.
        /// </summary>
        public InputList<Inputs.WindowsVirtualMachineScaleSetDataDiskArgs> DataDisks
        {
            get => _dataDisks ?? (_dataDisks = new InputList<Inputs.WindowsVirtualMachineScaleSetDataDiskArgs>());
            set => _dataDisks = value;
        }

        /// <summary>
        /// Should Virtual Machine Extensions be run on Overprovisioned Virtual Machines in the Scale Set? Defaults to `false`.
        /// </summary>
        [Input("doNotRunExtensionsOnOverprovisionedMachines")]
        public Input<bool>? DoNotRunExtensionsOnOverprovisionedMachines { get; set; }

        /// <summary>
        /// Are automatic updates enabled for this Virtual Machine? Defaults to `true`.
        /// </summary>
        [Input("enableAutomaticUpdates")]
        public Input<bool>? EnableAutomaticUpdates { get; set; }

        /// <summary>
        /// Should all of the disks (including the temp disk) attached to this Virtual Machine be encrypted by enabling Encryption at Host?
        /// </summary>
        [Input("encryptionAtHostEnabled")]
        public Input<bool>? EncryptionAtHostEnabled { get; set; }

        /// <summary>
        /// The Policy which should be used Virtual Machines are Evicted from the Scale Set. Changing this forces a new resource to be created.
        /// </summary>
        [Input("evictionPolicy")]
        public Input<string>? EvictionPolicy { get; set; }

        [Input("extensions")]
        private InputList<Inputs.WindowsVirtualMachineScaleSetExtensionArgs>? _extensions;

        /// <summary>
        /// One or more `extension` blocks as defined below
        /// </summary>
        public InputList<Inputs.WindowsVirtualMachineScaleSetExtensionArgs> Extensions
        {
            get => _extensions ?? (_extensions = new InputList<Inputs.WindowsVirtualMachineScaleSetExtensionArgs>());
            set => _extensions = value;
        }

        /// <summary>
        /// The ID of a Load Balancer Probe which should be used to determine the health of an instance. Changing this forces a new resource to be created. This is Required and can only be specified when `upgrade_mode` is set to `Automatic` or `Rolling`.
        /// </summary>
        [Input("healthProbeId")]
        public Input<string>? HealthProbeId { get; set; }

        /// <summary>
        /// A `identity` block as defined below.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.WindowsVirtualMachineScaleSetIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// The number of Virtual Machines in the Scale Set.
        /// </summary>
        [Input("instances", required: true)]
        public Input<int> Instances { get; set; } = null!;

        /// <summary>
        /// Specifies the type of on-premise license (also known as [Azure Hybrid Use Benefit](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing)) which should be used for this Virtual Machine Scale Set. Possible values are `None`, `Windows_Client` and `Windows_Server`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("licenseType")]
        public Input<string>? LicenseType { get; set; }

        /// <summary>
        /// The Azure location where the Windows Virtual Machine Scale Set should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The maximum price you're willing to pay for each Virtual Machine in this Scale Set, in US Dollars; which must be greater than the current spot price. If this bid price falls below the current spot price the Virtual Machines in the Scale Set will be evicted using the `eviction_policy`. Defaults to `-1`, which means that each Virtual Machine in the Scale Set should not be evicted for price reasons.
        /// </summary>
        [Input("maxBidPrice")]
        public Input<double>? MaxBidPrice { get; set; }

        /// <summary>
        /// The name of the Windows Virtual Machine Scale Set. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networkInterfaces", required: true)]
        private InputList<Inputs.WindowsVirtualMachineScaleSetNetworkInterfaceArgs>? _networkInterfaces;

        /// <summary>
        /// One or more `network_interface` blocks as defined below.
        /// </summary>
        public InputList<Inputs.WindowsVirtualMachineScaleSetNetworkInterfaceArgs> NetworkInterfaces
        {
            get => _networkInterfaces ?? (_networkInterfaces = new InputList<Inputs.WindowsVirtualMachineScaleSetNetworkInterfaceArgs>());
            set => _networkInterfaces = value;
        }

        /// <summary>
        /// An `os_disk` block as defined below.
        /// </summary>
        [Input("osDisk", required: true)]
        public Input<Inputs.WindowsVirtualMachineScaleSetOsDiskArgs> OsDisk { get; set; } = null!;

        /// <summary>
        /// Should Azure over-provision Virtual Machines in this Scale Set? This means that multiple Virtual Machines will be provisioned and Azure will keep the instances which become available first - which improves provisioning success rates and improves deployment time. You're not billed for these over-provisioned VM's and they don't count towards the Subscription Quota. Defaults to `true`.
        /// </summary>
        [Input("overprovision")]
        public Input<bool>? Overprovision { get; set; }

        /// <summary>
        /// A `plan` block as documented below.
        /// </summary>
        [Input("plan")]
        public Input<Inputs.WindowsVirtualMachineScaleSetPlanArgs>? Plan { get; set; }

        /// <summary>
        /// The Priority of this Virtual Machine Scale Set. Possible values are `Regular` and `Spot`. Defaults to `Regular`. Changing this value forces a new resource.
        /// </summary>
        [Input("priority")]
        public Input<string>? Priority { get; set; }

        /// <summary>
        /// Should the Azure VM Agent be provisioned on each Virtual Machine in the Scale Set? Defaults to `true`. Changing this value forces a new resource to be created.
        /// </summary>
        [Input("provisionVmAgent")]
        public Input<bool>? ProvisionVmAgent { get; set; }

        /// <summary>
        /// The ID of the Proximity Placement Group in which the Virtual Machine Scale Set should be assigned to. Changing this forces a new resource to be created.
        /// </summary>
        [Input("proximityPlacementGroupId")]
        public Input<string>? ProximityPlacementGroupId { get; set; }

        /// <summary>
        /// The name of the Resource Group in which the Windows Virtual Machine Scale Set should be exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// A `rolling_upgrade_policy` block as defined below. This is Required and can only be specified when `upgrade_mode` is set to `Automatic` or `Rolling`.
        /// </summary>
        [Input("rollingUpgradePolicy")]
        public Input<Inputs.WindowsVirtualMachineScaleSetRollingUpgradePolicyArgs>? RollingUpgradePolicy { get; set; }

        /// <summary>
        /// The scale-in policy rule that decides which virtual machines are chosen for removal when a Virtual Machine Scale Set is scaled in. Possible values for the scale-in policy rules are `Default`, `NewestVM` and `OldestVM`, defaults to `Default`. For more information about scale in policy, please [refer to this doc](https://docs.microsoft.com/en-us/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-scale-in-policy).
        /// </summary>
        [Input("scaleInPolicy")]
        public Input<string>? ScaleInPolicy { get; set; }

        [Input("secrets")]
        private InputList<Inputs.WindowsVirtualMachineScaleSetSecretArgs>? _secrets;

        /// <summary>
        /// One or more `secret` blocks as defined below.
        /// </summary>
        public InputList<Inputs.WindowsVirtualMachineScaleSetSecretArgs> Secrets
        {
            get => _secrets ?? (_secrets = new InputList<Inputs.WindowsVirtualMachineScaleSetSecretArgs>());
            set => _secrets = value;
        }

        /// <summary>
        /// Should this Virtual Machine Scale Set be limited to a Single Placement Group, which means the number of instances will be capped at 100 Virtual Machines. Defaults to `true`.
        /// </summary>
        [Input("singlePlacementGroup")]
        public Input<bool>? SinglePlacementGroup { get; set; }

        /// <summary>
        /// The Virtual Machine SKU for the Scale Set, such as `Standard_F2`.
        /// </summary>
        [Input("sku", required: true)]
        public Input<string> Sku { get; set; } = null!;

        /// <summary>
        /// The ID of an Image which each Virtual Machine in this Scale Set should be based on.
        /// </summary>
        [Input("sourceImageId")]
        public Input<string>? SourceImageId { get; set; }

        /// <summary>
        /// A `source_image_reference` block as defined below.
        /// </summary>
        [Input("sourceImageReference")]
        public Input<Inputs.WindowsVirtualMachineScaleSetSourceImageReferenceArgs>? SourceImageReference { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to this Virtual Machine Scale Set.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// A `terminate_notification` block as defined below.
        /// </summary>
        [Input("terminateNotification")]
        public Input<Inputs.WindowsVirtualMachineScaleSetTerminateNotificationArgs>? TerminateNotification { get; set; }

        /// <summary>
        /// Specifies the time zone of the virtual machine, [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/).
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        /// <summary>
        /// Specifies how Upgrades (e.g. changing the Image/SKU) should be performed to Virtual Machine Instances. Possible values are `Automatic`, `Manual` and `Rolling`. Defaults to `Manual`.
        /// </summary>
        [Input("upgradeMode")]
        public Input<string>? UpgradeMode { get; set; }

        [Input("winrmListeners")]
        private InputList<Inputs.WindowsVirtualMachineScaleSetWinrmListenerArgs>? _winrmListeners;

        /// <summary>
        /// One or more `winrm_listener` blocks as defined below.
        /// </summary>
        public InputList<Inputs.WindowsVirtualMachineScaleSetWinrmListenerArgs> WinrmListeners
        {
            get => _winrmListeners ?? (_winrmListeners = new InputList<Inputs.WindowsVirtualMachineScaleSetWinrmListenerArgs>());
            set => _winrmListeners = value;
        }

        /// <summary>
        /// Should the Virtual Machines in this Scale Set be strictly evenly distributed across Availability Zones? Defaults to `false`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("zoneBalance")]
        public Input<bool>? ZoneBalance { get; set; }

        [Input("zones")]
        private InputList<string>? _zones;

        /// <summary>
        /// A list of Availability Zones in which the Virtual Machines in this Scale Set should be created in. Changing this forces a new resource to be created.
        /// </summary>
        public InputList<string> Zones
        {
            get => _zones ?? (_zones = new InputList<string>());
            set => _zones = value;
        }

        public WindowsVirtualMachineScaleSetArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineScaleSetState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A `additional_capabilities` block as defined below.
        /// </summary>
        [Input("additionalCapabilities")]
        public Input<Inputs.WindowsVirtualMachineScaleSetAdditionalCapabilitiesGetArgs>? AdditionalCapabilities { get; set; }

        [Input("additionalUnattendContents")]
        private InputList<Inputs.WindowsVirtualMachineScaleSetAdditionalUnattendContentGetArgs>? _additionalUnattendContents;

        /// <summary>
        /// One or more `additional_unattend_content` blocks as defined below.
        /// </summary>
        public InputList<Inputs.WindowsVirtualMachineScaleSetAdditionalUnattendContentGetArgs> AdditionalUnattendContents
        {
            get => _additionalUnattendContents ?? (_additionalUnattendContents = new InputList<Inputs.WindowsVirtualMachineScaleSetAdditionalUnattendContentGetArgs>());
            set => _additionalUnattendContents = value;
        }

        /// <summary>
        /// The Password which should be used for the local-administrator on this Virtual Machine. Changing this forces a new resource to be created.
        /// </summary>
        [Input("adminPassword")]
        public Input<string>? AdminPassword { get; set; }

        /// <summary>
        /// The username of the local administrator on each Virtual Machine Scale Set instance. Changing this forces a new resource to be created.
        /// </summary>
        [Input("adminUsername")]
        public Input<string>? AdminUsername { get; set; }

        /// <summary>
        /// A `automatic_instance_repair` block as defined below. To enable the automatic instance repair, this Virtual Machine Scale Set must have a valid `health_probe_id` or an [Application Health Extension](https://docs.microsoft.com/en-us/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-health-extension).
        /// </summary>
        [Input("automaticInstanceRepair")]
        public Input<Inputs.WindowsVirtualMachineScaleSetAutomaticInstanceRepairGetArgs>? AutomaticInstanceRepair { get; set; }

        /// <summary>
        /// A `automatic_os_upgrade_policy` block as defined below. This can only be specified when `upgrade_mode` is set to `Automatic`.
        /// </summary>
        [Input("automaticOsUpgradePolicy")]
        public Input<Inputs.WindowsVirtualMachineScaleSetAutomaticOsUpgradePolicyGetArgs>? AutomaticOsUpgradePolicy { get; set; }

        /// <summary>
        /// A `boot_diagnostics` block as defined below.
        /// </summary>
        [Input("bootDiagnostics")]
        public Input<Inputs.WindowsVirtualMachineScaleSetBootDiagnosticsGetArgs>? BootDiagnostics { get; set; }

        /// <summary>
        /// The prefix which should be used for the name of the Virtual Machines in this Scale Set. If unspecified this defaults to the value for the `name` field. If the value of the `name` field is not a valid `computer_name_prefix`, then you must specify `computer_name_prefix`.
        /// </summary>
        [Input("computerNamePrefix")]
        public Input<string>? ComputerNamePrefix { get; set; }

        /// <summary>
        /// The Base64-Encoded Custom Data which should be used for this Virtual Machine Scale Set.
        /// </summary>
        [Input("customData")]
        public Input<string>? CustomData { get; set; }

        [Input("dataDisks")]
        private InputList<Inputs.WindowsVirtualMachineScaleSetDataDiskGetArgs>? _dataDisks;

        /// <summary>
        /// One or more `data_disk` blocks as defined below.
        /// </summary>
        public InputList<Inputs.WindowsVirtualMachineScaleSetDataDiskGetArgs> DataDisks
        {
            get => _dataDisks ?? (_dataDisks = new InputList<Inputs.WindowsVirtualMachineScaleSetDataDiskGetArgs>());
            set => _dataDisks = value;
        }

        /// <summary>
        /// Should Virtual Machine Extensions be run on Overprovisioned Virtual Machines in the Scale Set? Defaults to `false`.
        /// </summary>
        [Input("doNotRunExtensionsOnOverprovisionedMachines")]
        public Input<bool>? DoNotRunExtensionsOnOverprovisionedMachines { get; set; }

        /// <summary>
        /// Are automatic updates enabled for this Virtual Machine? Defaults to `true`.
        /// </summary>
        [Input("enableAutomaticUpdates")]
        public Input<bool>? EnableAutomaticUpdates { get; set; }

        /// <summary>
        /// Should all of the disks (including the temp disk) attached to this Virtual Machine be encrypted by enabling Encryption at Host?
        /// </summary>
        [Input("encryptionAtHostEnabled")]
        public Input<bool>? EncryptionAtHostEnabled { get; set; }

        /// <summary>
        /// The Policy which should be used Virtual Machines are Evicted from the Scale Set. Changing this forces a new resource to be created.
        /// </summary>
        [Input("evictionPolicy")]
        public Input<string>? EvictionPolicy { get; set; }

        [Input("extensions")]
        private InputList<Inputs.WindowsVirtualMachineScaleSetExtensionGetArgs>? _extensions;

        /// <summary>
        /// One or more `extension` blocks as defined below
        /// </summary>
        public InputList<Inputs.WindowsVirtualMachineScaleSetExtensionGetArgs> Extensions
        {
            get => _extensions ?? (_extensions = new InputList<Inputs.WindowsVirtualMachineScaleSetExtensionGetArgs>());
            set => _extensions = value;
        }

        /// <summary>
        /// The ID of a Load Balancer Probe which should be used to determine the health of an instance. Changing this forces a new resource to be created. This is Required and can only be specified when `upgrade_mode` is set to `Automatic` or `Rolling`.
        /// </summary>
        [Input("healthProbeId")]
        public Input<string>? HealthProbeId { get; set; }

        /// <summary>
        /// A `identity` block as defined below.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.WindowsVirtualMachineScaleSetIdentityGetArgs>? Identity { get; set; }

        /// <summary>
        /// The number of Virtual Machines in the Scale Set.
        /// </summary>
        [Input("instances")]
        public Input<int>? Instances { get; set; }

        /// <summary>
        /// Specifies the type of on-premise license (also known as [Azure Hybrid Use Benefit](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing)) which should be used for this Virtual Machine Scale Set. Possible values are `None`, `Windows_Client` and `Windows_Server`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("licenseType")]
        public Input<string>? LicenseType { get; set; }

        /// <summary>
        /// The Azure location where the Windows Virtual Machine Scale Set should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The maximum price you're willing to pay for each Virtual Machine in this Scale Set, in US Dollars; which must be greater than the current spot price. If this bid price falls below the current spot price the Virtual Machines in the Scale Set will be evicted using the `eviction_policy`. Defaults to `-1`, which means that each Virtual Machine in the Scale Set should not be evicted for price reasons.
        /// </summary>
        [Input("maxBidPrice")]
        public Input<double>? MaxBidPrice { get; set; }

        /// <summary>
        /// The name of the Windows Virtual Machine Scale Set. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networkInterfaces")]
        private InputList<Inputs.WindowsVirtualMachineScaleSetNetworkInterfaceGetArgs>? _networkInterfaces;

        /// <summary>
        /// One or more `network_interface` blocks as defined below.
        /// </summary>
        public InputList<Inputs.WindowsVirtualMachineScaleSetNetworkInterfaceGetArgs> NetworkInterfaces
        {
            get => _networkInterfaces ?? (_networkInterfaces = new InputList<Inputs.WindowsVirtualMachineScaleSetNetworkInterfaceGetArgs>());
            set => _networkInterfaces = value;
        }

        /// <summary>
        /// An `os_disk` block as defined below.
        /// </summary>
        [Input("osDisk")]
        public Input<Inputs.WindowsVirtualMachineScaleSetOsDiskGetArgs>? OsDisk { get; set; }

        /// <summary>
        /// Should Azure over-provision Virtual Machines in this Scale Set? This means that multiple Virtual Machines will be provisioned and Azure will keep the instances which become available first - which improves provisioning success rates and improves deployment time. You're not billed for these over-provisioned VM's and they don't count towards the Subscription Quota. Defaults to `true`.
        /// </summary>
        [Input("overprovision")]
        public Input<bool>? Overprovision { get; set; }

        /// <summary>
        /// A `plan` block as documented below.
        /// </summary>
        [Input("plan")]
        public Input<Inputs.WindowsVirtualMachineScaleSetPlanGetArgs>? Plan { get; set; }

        /// <summary>
        /// The Priority of this Virtual Machine Scale Set. Possible values are `Regular` and `Spot`. Defaults to `Regular`. Changing this value forces a new resource.
        /// </summary>
        [Input("priority")]
        public Input<string>? Priority { get; set; }

        /// <summary>
        /// Should the Azure VM Agent be provisioned on each Virtual Machine in the Scale Set? Defaults to `true`. Changing this value forces a new resource to be created.
        /// </summary>
        [Input("provisionVmAgent")]
        public Input<bool>? ProvisionVmAgent { get; set; }

        /// <summary>
        /// The ID of the Proximity Placement Group in which the Virtual Machine Scale Set should be assigned to. Changing this forces a new resource to be created.
        /// </summary>
        [Input("proximityPlacementGroupId")]
        public Input<string>? ProximityPlacementGroupId { get; set; }

        /// <summary>
        /// The name of the Resource Group in which the Windows Virtual Machine Scale Set should be exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// A `rolling_upgrade_policy` block as defined below. This is Required and can only be specified when `upgrade_mode` is set to `Automatic` or `Rolling`.
        /// </summary>
        [Input("rollingUpgradePolicy")]
        public Input<Inputs.WindowsVirtualMachineScaleSetRollingUpgradePolicyGetArgs>? RollingUpgradePolicy { get; set; }

        /// <summary>
        /// The scale-in policy rule that decides which virtual machines are chosen for removal when a Virtual Machine Scale Set is scaled in. Possible values for the scale-in policy rules are `Default`, `NewestVM` and `OldestVM`, defaults to `Default`. For more information about scale in policy, please [refer to this doc](https://docs.microsoft.com/en-us/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-scale-in-policy).
        /// </summary>
        [Input("scaleInPolicy")]
        public Input<string>? ScaleInPolicy { get; set; }

        [Input("secrets")]
        private InputList<Inputs.WindowsVirtualMachineScaleSetSecretGetArgs>? _secrets;

        /// <summary>
        /// One or more `secret` blocks as defined below.
        /// </summary>
        public InputList<Inputs.WindowsVirtualMachineScaleSetSecretGetArgs> Secrets
        {
            get => _secrets ?? (_secrets = new InputList<Inputs.WindowsVirtualMachineScaleSetSecretGetArgs>());
            set => _secrets = value;
        }

        /// <summary>
        /// Should this Virtual Machine Scale Set be limited to a Single Placement Group, which means the number of instances will be capped at 100 Virtual Machines. Defaults to `true`.
        /// </summary>
        [Input("singlePlacementGroup")]
        public Input<bool>? SinglePlacementGroup { get; set; }

        /// <summary>
        /// The Virtual Machine SKU for the Scale Set, such as `Standard_F2`.
        /// </summary>
        [Input("sku")]
        public Input<string>? Sku { get; set; }

        /// <summary>
        /// The ID of an Image which each Virtual Machine in this Scale Set should be based on.
        /// </summary>
        [Input("sourceImageId")]
        public Input<string>? SourceImageId { get; set; }

        /// <summary>
        /// A `source_image_reference` block as defined below.
        /// </summary>
        [Input("sourceImageReference")]
        public Input<Inputs.WindowsVirtualMachineScaleSetSourceImageReferenceGetArgs>? SourceImageReference { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to this Virtual Machine Scale Set.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// A `terminate_notification` block as defined below.
        /// </summary>
        [Input("terminateNotification")]
        public Input<Inputs.WindowsVirtualMachineScaleSetTerminateNotificationGetArgs>? TerminateNotification { get; set; }

        /// <summary>
        /// Specifies the time zone of the virtual machine, [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/).
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        /// <summary>
        /// The Unique ID for this Windows Virtual Machine Scale Set.
        /// </summary>
        [Input("uniqueId")]
        public Input<string>? UniqueId { get; set; }

        /// <summary>
        /// Specifies how Upgrades (e.g. changing the Image/SKU) should be performed to Virtual Machine Instances. Possible values are `Automatic`, `Manual` and `Rolling`. Defaults to `Manual`.
        /// </summary>
        [Input("upgradeMode")]
        public Input<string>? UpgradeMode { get; set; }

        [Input("winrmListeners")]
        private InputList<Inputs.WindowsVirtualMachineScaleSetWinrmListenerGetArgs>? _winrmListeners;

        /// <summary>
        /// One or more `winrm_listener` blocks as defined below.
        /// </summary>
        public InputList<Inputs.WindowsVirtualMachineScaleSetWinrmListenerGetArgs> WinrmListeners
        {
            get => _winrmListeners ?? (_winrmListeners = new InputList<Inputs.WindowsVirtualMachineScaleSetWinrmListenerGetArgs>());
            set => _winrmListeners = value;
        }

        /// <summary>
        /// Should the Virtual Machines in this Scale Set be strictly evenly distributed across Availability Zones? Defaults to `false`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("zoneBalance")]
        public Input<bool>? ZoneBalance { get; set; }

        [Input("zones")]
        private InputList<string>? _zones;

        /// <summary>
        /// A list of Availability Zones in which the Virtual Machines in this Scale Set should be created in. Changing this forces a new resource to be created.
        /// </summary>
        public InputList<string> Zones
        {
            get => _zones ?? (_zones = new InputList<string>());
            set => _zones = value;
        }

        public WindowsVirtualMachineScaleSetState()
        {
        }
    }
}
