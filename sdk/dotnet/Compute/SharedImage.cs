// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Compute
{
    /// <summary>
    /// Manages a Shared Image within a Shared Image Gallery.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleSharedImageGallery = new Azure.Compute.SharedImageGallery("exampleSharedImageGallery", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         Description = "Shared images and things.",
    ///         Tags = 
    ///         {
    ///             { "Hello", "There" },
    ///             { "World", "Example" },
    ///         },
    ///     });
    /// 
    ///     var exampleSharedImage = new Azure.Compute.SharedImage("exampleSharedImage", new()
    ///     {
    ///         GalleryName = exampleSharedImageGallery.Name,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         OsType = "Linux",
    ///         Identifier = new Azure.Compute.Inputs.SharedImageIdentifierArgs
    ///         {
    ///             Publisher = "PublisherName",
    ///             Offer = "OfferName",
    ///             Sku = "ExampleSku",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Shared Images can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:compute/sharedImage:SharedImage image1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Compute/galleries/gallery1/images/image1
    /// ```
    /// </summary>
    [AzureResourceType("azure:compute/sharedImage:SharedImage")]
    public partial class SharedImage : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies if the Shared Image supports Accelerated Network. Changing this forces a new resource to be created.
        /// </summary>
        [Output("acceleratedNetworkSupportEnabled")]
        public Output<bool?> AcceleratedNetworkSupportEnabled { get; private set; } = null!;

        /// <summary>
        /// CPU architecture supported by an OS. Possible values are `x64` and `Arm64`. Defaults to `x64`. Changing this forces a new resource to be created.
        /// </summary>
        [Output("architecture")]
        public Output<string?> Architecture { get; private set; } = null!;

        /// <summary>
        /// Specifies if Confidential Virtual Machines enabled. It will enable all the features of trusted, with higher confidentiality features for isolate machines or encrypted data. Available for Gen2 machines. Changing this forces a new resource to be created.
        /// 
        /// &gt; **Note:**: Only one of `trusted_launch_supported`, `trusted_launch_enabled`, `confidential_vm_supported` and `confidential_vm_enabled` can be specified.
        /// </summary>
        [Output("confidentialVmEnabled")]
        public Output<bool?> ConfidentialVmEnabled { get; private set; } = null!;

        /// <summary>
        /// Specifies if supports creation of both Confidential virtual machines and Gen2 virtual machines with standard security from a compatible Gen2 OS disk VHD or Gen2 Managed image. Changing this forces a new resource to be created.
        /// </summary>
        [Output("confidentialVmSupported")]
        public Output<bool?> ConfidentialVmSupported { get; private set; } = null!;

        /// <summary>
        /// A description of this Shared Image.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// One or more Disk Types not allowed for the Image. Possible values include `Standard_LRS` and `Premium_LRS`.
        /// </summary>
        [Output("diskTypesNotAlloweds")]
        public Output<ImmutableArray<string>> DiskTypesNotAlloweds { get; private set; } = null!;

        /// <summary>
        /// The end of life date in RFC3339 format of the Image.
        /// </summary>
        [Output("endOfLifeDate")]
        public Output<string?> EndOfLifeDate { get; private set; } = null!;

        /// <summary>
        /// The End User Licence Agreement for the Shared Image. Changing this forces a new resource to be created.
        /// </summary>
        [Output("eula")]
        public Output<string?> Eula { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the Shared Image Gallery in which this Shared Image should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("galleryName")]
        public Output<string> GalleryName { get; private set; } = null!;

        /// <summary>
        /// The generation of HyperV that the Virtual Machine used to create the Shared Image is based on. Possible values are `V1` and `V2`. Defaults to `V1`. Changing this forces a new resource to be created.
        /// </summary>
        [Output("hyperVGeneration")]
        public Output<string?> HyperVGeneration { get; private set; } = null!;

        /// <summary>
        /// An `identifier` block as defined below.
        /// </summary>
        [Output("identifier")]
        public Output<Outputs.SharedImageIdentifier> Identifier { get; private set; } = null!;

        /// <summary>
        /// Specifies the supported Azure location where the Shared Image Gallery exists. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Maximum memory in GB recommended for the Image.
        /// </summary>
        [Output("maxRecommendedMemoryInGb")]
        public Output<int?> MaxRecommendedMemoryInGb { get; private set; } = null!;

        /// <summary>
        /// Maximum count of vCPUs recommended for the Image.
        /// </summary>
        [Output("maxRecommendedVcpuCount")]
        public Output<int?> MaxRecommendedVcpuCount { get; private set; } = null!;

        /// <summary>
        /// Minimum memory in GB recommended for the Image.
        /// </summary>
        [Output("minRecommendedMemoryInGb")]
        public Output<int?> MinRecommendedMemoryInGb { get; private set; } = null!;

        /// <summary>
        /// Minimum count of vCPUs recommended for the Image.
        /// </summary>
        [Output("minRecommendedVcpuCount")]
        public Output<int?> MinRecommendedVcpuCount { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the Shared Image. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The type of Operating System present in this Shared Image. Possible values are `Linux` and `Windows`. Changing this forces a new resource to be created.
        /// </summary>
        [Output("osType")]
        public Output<string> OsType { get; private set; } = null!;

        /// <summary>
        /// The URI containing the Privacy Statement associated with this Shared Image. Changing this forces a new resource to be created.
        /// </summary>
        [Output("privacyStatementUri")]
        public Output<string?> PrivacyStatementUri { get; private set; } = null!;

        /// <summary>
        /// A `purchase_plan` block as defined below.
        /// </summary>
        [Output("purchasePlan")]
        public Output<Outputs.SharedImagePurchasePlan?> PurchasePlan { get; private set; } = null!;

        /// <summary>
        /// The URI containing the Release Notes associated with this Shared Image.
        /// </summary>
        [Output("releaseNoteUri")]
        public Output<string?> ReleaseNoteUri { get; private set; } = null!;

        /// <summary>
        /// The name of the resource group in which the Shared Image Gallery exists. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// Specifies that the Operating System used inside this Image has not been Generalized (for example, `sysprep` on Windows has not been run). Changing this forces a new resource to be created.
        /// 
        /// !&gt; **Note:** It's recommended to Generalize images where possible - Specialized Images reuse the same UUID internally within each Virtual Machine, which can have unintended side-effects.
        /// </summary>
        [Output("specialized")]
        public Output<bool?> Specialized { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the Shared Image.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Specifies if Trusted Launch has to be enabled for the Virtual Machine created from the Shared Image. Changing this forces a new resource to be created.
        /// </summary>
        [Output("trustedLaunchEnabled")]
        public Output<bool?> TrustedLaunchEnabled { get; private set; } = null!;

        /// <summary>
        /// Specifies if supports creation of both Trusted Launch virtual machines and Gen2 virtual machines with standard security created from the Shared Image. Changing this forces a new resource to be created.
        /// </summary>
        [Output("trustedLaunchSupported")]
        public Output<bool?> TrustedLaunchSupported { get; private set; } = null!;


        /// <summary>
        /// Create a SharedImage resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SharedImage(string name, SharedImageArgs args, CustomResourceOptions? options = null)
            : base("azure:compute/sharedImage:SharedImage", name, args ?? new SharedImageArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SharedImage(string name, Input<string> id, SharedImageState? state = null, CustomResourceOptions? options = null)
            : base("azure:compute/sharedImage:SharedImage", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SharedImage resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SharedImage Get(string name, Input<string> id, SharedImageState? state = null, CustomResourceOptions? options = null)
        {
            return new SharedImage(name, id, state, options);
        }
    }

    public sealed class SharedImageArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies if the Shared Image supports Accelerated Network. Changing this forces a new resource to be created.
        /// </summary>
        [Input("acceleratedNetworkSupportEnabled")]
        public Input<bool>? AcceleratedNetworkSupportEnabled { get; set; }

        /// <summary>
        /// CPU architecture supported by an OS. Possible values are `x64` and `Arm64`. Defaults to `x64`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("architecture")]
        public Input<string>? Architecture { get; set; }

        /// <summary>
        /// Specifies if Confidential Virtual Machines enabled. It will enable all the features of trusted, with higher confidentiality features for isolate machines or encrypted data. Available for Gen2 machines. Changing this forces a new resource to be created.
        /// 
        /// &gt; **Note:**: Only one of `trusted_launch_supported`, `trusted_launch_enabled`, `confidential_vm_supported` and `confidential_vm_enabled` can be specified.
        /// </summary>
        [Input("confidentialVmEnabled")]
        public Input<bool>? ConfidentialVmEnabled { get; set; }

        /// <summary>
        /// Specifies if supports creation of both Confidential virtual machines and Gen2 virtual machines with standard security from a compatible Gen2 OS disk VHD or Gen2 Managed image. Changing this forces a new resource to be created.
        /// </summary>
        [Input("confidentialVmSupported")]
        public Input<bool>? ConfidentialVmSupported { get; set; }

        /// <summary>
        /// A description of this Shared Image.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("diskTypesNotAlloweds")]
        private InputList<string>? _diskTypesNotAlloweds;

        /// <summary>
        /// One or more Disk Types not allowed for the Image. Possible values include `Standard_LRS` and `Premium_LRS`.
        /// </summary>
        public InputList<string> DiskTypesNotAlloweds
        {
            get => _diskTypesNotAlloweds ?? (_diskTypesNotAlloweds = new InputList<string>());
            set => _diskTypesNotAlloweds = value;
        }

        /// <summary>
        /// The end of life date in RFC3339 format of the Image.
        /// </summary>
        [Input("endOfLifeDate")]
        public Input<string>? EndOfLifeDate { get; set; }

        /// <summary>
        /// The End User Licence Agreement for the Shared Image. Changing this forces a new resource to be created.
        /// </summary>
        [Input("eula")]
        public Input<string>? Eula { get; set; }

        /// <summary>
        /// Specifies the name of the Shared Image Gallery in which this Shared Image should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("galleryName", required: true)]
        public Input<string> GalleryName { get; set; } = null!;

        /// <summary>
        /// The generation of HyperV that the Virtual Machine used to create the Shared Image is based on. Possible values are `V1` and `V2`. Defaults to `V1`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("hyperVGeneration")]
        public Input<string>? HyperVGeneration { get; set; }

        /// <summary>
        /// An `identifier` block as defined below.
        /// </summary>
        [Input("identifier", required: true)]
        public Input<Inputs.SharedImageIdentifierArgs> Identifier { get; set; } = null!;

        /// <summary>
        /// Specifies the supported Azure location where the Shared Image Gallery exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Maximum memory in GB recommended for the Image.
        /// </summary>
        [Input("maxRecommendedMemoryInGb")]
        public Input<int>? MaxRecommendedMemoryInGb { get; set; }

        /// <summary>
        /// Maximum count of vCPUs recommended for the Image.
        /// </summary>
        [Input("maxRecommendedVcpuCount")]
        public Input<int>? MaxRecommendedVcpuCount { get; set; }

        /// <summary>
        /// Minimum memory in GB recommended for the Image.
        /// </summary>
        [Input("minRecommendedMemoryInGb")]
        public Input<int>? MinRecommendedMemoryInGb { get; set; }

        /// <summary>
        /// Minimum count of vCPUs recommended for the Image.
        /// </summary>
        [Input("minRecommendedVcpuCount")]
        public Input<int>? MinRecommendedVcpuCount { get; set; }

        /// <summary>
        /// Specifies the name of the Shared Image. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The type of Operating System present in this Shared Image. Possible values are `Linux` and `Windows`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("osType", required: true)]
        public Input<string> OsType { get; set; } = null!;

        /// <summary>
        /// The URI containing the Privacy Statement associated with this Shared Image. Changing this forces a new resource to be created.
        /// </summary>
        [Input("privacyStatementUri")]
        public Input<string>? PrivacyStatementUri { get; set; }

        /// <summary>
        /// A `purchase_plan` block as defined below.
        /// </summary>
        [Input("purchasePlan")]
        public Input<Inputs.SharedImagePurchasePlanArgs>? PurchasePlan { get; set; }

        /// <summary>
        /// The URI containing the Release Notes associated with this Shared Image.
        /// </summary>
        [Input("releaseNoteUri")]
        public Input<string>? ReleaseNoteUri { get; set; }

        /// <summary>
        /// The name of the resource group in which the Shared Image Gallery exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Specifies that the Operating System used inside this Image has not been Generalized (for example, `sysprep` on Windows has not been run). Changing this forces a new resource to be created.
        /// 
        /// !&gt; **Note:** It's recommended to Generalize images where possible - Specialized Images reuse the same UUID internally within each Virtual Machine, which can have unintended side-effects.
        /// </summary>
        [Input("specialized")]
        public Input<bool>? Specialized { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the Shared Image.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Specifies if Trusted Launch has to be enabled for the Virtual Machine created from the Shared Image. Changing this forces a new resource to be created.
        /// </summary>
        [Input("trustedLaunchEnabled")]
        public Input<bool>? TrustedLaunchEnabled { get; set; }

        /// <summary>
        /// Specifies if supports creation of both Trusted Launch virtual machines and Gen2 virtual machines with standard security created from the Shared Image. Changing this forces a new resource to be created.
        /// </summary>
        [Input("trustedLaunchSupported")]
        public Input<bool>? TrustedLaunchSupported { get; set; }

        public SharedImageArgs()
        {
        }
        public static new SharedImageArgs Empty => new SharedImageArgs();
    }

    public sealed class SharedImageState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies if the Shared Image supports Accelerated Network. Changing this forces a new resource to be created.
        /// </summary>
        [Input("acceleratedNetworkSupportEnabled")]
        public Input<bool>? AcceleratedNetworkSupportEnabled { get; set; }

        /// <summary>
        /// CPU architecture supported by an OS. Possible values are `x64` and `Arm64`. Defaults to `x64`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("architecture")]
        public Input<string>? Architecture { get; set; }

        /// <summary>
        /// Specifies if Confidential Virtual Machines enabled. It will enable all the features of trusted, with higher confidentiality features for isolate machines or encrypted data. Available for Gen2 machines. Changing this forces a new resource to be created.
        /// 
        /// &gt; **Note:**: Only one of `trusted_launch_supported`, `trusted_launch_enabled`, `confidential_vm_supported` and `confidential_vm_enabled` can be specified.
        /// </summary>
        [Input("confidentialVmEnabled")]
        public Input<bool>? ConfidentialVmEnabled { get; set; }

        /// <summary>
        /// Specifies if supports creation of both Confidential virtual machines and Gen2 virtual machines with standard security from a compatible Gen2 OS disk VHD or Gen2 Managed image. Changing this forces a new resource to be created.
        /// </summary>
        [Input("confidentialVmSupported")]
        public Input<bool>? ConfidentialVmSupported { get; set; }

        /// <summary>
        /// A description of this Shared Image.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("diskTypesNotAlloweds")]
        private InputList<string>? _diskTypesNotAlloweds;

        /// <summary>
        /// One or more Disk Types not allowed for the Image. Possible values include `Standard_LRS` and `Premium_LRS`.
        /// </summary>
        public InputList<string> DiskTypesNotAlloweds
        {
            get => _diskTypesNotAlloweds ?? (_diskTypesNotAlloweds = new InputList<string>());
            set => _diskTypesNotAlloweds = value;
        }

        /// <summary>
        /// The end of life date in RFC3339 format of the Image.
        /// </summary>
        [Input("endOfLifeDate")]
        public Input<string>? EndOfLifeDate { get; set; }

        /// <summary>
        /// The End User Licence Agreement for the Shared Image. Changing this forces a new resource to be created.
        /// </summary>
        [Input("eula")]
        public Input<string>? Eula { get; set; }

        /// <summary>
        /// Specifies the name of the Shared Image Gallery in which this Shared Image should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("galleryName")]
        public Input<string>? GalleryName { get; set; }

        /// <summary>
        /// The generation of HyperV that the Virtual Machine used to create the Shared Image is based on. Possible values are `V1` and `V2`. Defaults to `V1`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("hyperVGeneration")]
        public Input<string>? HyperVGeneration { get; set; }

        /// <summary>
        /// An `identifier` block as defined below.
        /// </summary>
        [Input("identifier")]
        public Input<Inputs.SharedImageIdentifierGetArgs>? Identifier { get; set; }

        /// <summary>
        /// Specifies the supported Azure location where the Shared Image Gallery exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Maximum memory in GB recommended for the Image.
        /// </summary>
        [Input("maxRecommendedMemoryInGb")]
        public Input<int>? MaxRecommendedMemoryInGb { get; set; }

        /// <summary>
        /// Maximum count of vCPUs recommended for the Image.
        /// </summary>
        [Input("maxRecommendedVcpuCount")]
        public Input<int>? MaxRecommendedVcpuCount { get; set; }

        /// <summary>
        /// Minimum memory in GB recommended for the Image.
        /// </summary>
        [Input("minRecommendedMemoryInGb")]
        public Input<int>? MinRecommendedMemoryInGb { get; set; }

        /// <summary>
        /// Minimum count of vCPUs recommended for the Image.
        /// </summary>
        [Input("minRecommendedVcpuCount")]
        public Input<int>? MinRecommendedVcpuCount { get; set; }

        /// <summary>
        /// Specifies the name of the Shared Image. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The type of Operating System present in this Shared Image. Possible values are `Linux` and `Windows`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("osType")]
        public Input<string>? OsType { get; set; }

        /// <summary>
        /// The URI containing the Privacy Statement associated with this Shared Image. Changing this forces a new resource to be created.
        /// </summary>
        [Input("privacyStatementUri")]
        public Input<string>? PrivacyStatementUri { get; set; }

        /// <summary>
        /// A `purchase_plan` block as defined below.
        /// </summary>
        [Input("purchasePlan")]
        public Input<Inputs.SharedImagePurchasePlanGetArgs>? PurchasePlan { get; set; }

        /// <summary>
        /// The URI containing the Release Notes associated with this Shared Image.
        /// </summary>
        [Input("releaseNoteUri")]
        public Input<string>? ReleaseNoteUri { get; set; }

        /// <summary>
        /// The name of the resource group in which the Shared Image Gallery exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// Specifies that the Operating System used inside this Image has not been Generalized (for example, `sysprep` on Windows has not been run). Changing this forces a new resource to be created.
        /// 
        /// !&gt; **Note:** It's recommended to Generalize images where possible - Specialized Images reuse the same UUID internally within each Virtual Machine, which can have unintended side-effects.
        /// </summary>
        [Input("specialized")]
        public Input<bool>? Specialized { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the Shared Image.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Specifies if Trusted Launch has to be enabled for the Virtual Machine created from the Shared Image. Changing this forces a new resource to be created.
        /// </summary>
        [Input("trustedLaunchEnabled")]
        public Input<bool>? TrustedLaunchEnabled { get; set; }

        /// <summary>
        /// Specifies if supports creation of both Trusted Launch virtual machines and Gen2 virtual machines with standard security created from the Shared Image. Changing this forces a new resource to be created.
        /// </summary>
        [Input("trustedLaunchSupported")]
        public Input<bool>? TrustedLaunchSupported { get; set; }

        public SharedImageState()
        {
        }
        public static new SharedImageState Empty => new SharedImageState();
    }
}
