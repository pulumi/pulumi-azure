// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Compute
{
    /// <summary>
    /// Manages a Disk Pool Managed Disk Attachment.
    /// 
    /// !&gt; **Note:** Azure are officially [halting](https://learn.microsoft.com/en-us/azure/azure-vmware/attach-disk-pools-to-azure-vmware-solution-hosts?tabs=azure-cli) the preview of Azure Disk Pools, and it **will not** be made generally available. New customers will not be able to register the Microsoft.StoragePool resource provider on their subscription and deploy new Disk Pools. Existing subscriptions registered with Microsoft.StoragePool may continue to deploy and manage disk pools for the time being.
    /// 
    /// &gt; **Note:** Must be either a premium SSD, standard SSD, or an ultra disk in the same region and availability zone as the disk pool.
    /// 
    /// &gt; **Note:** Ultra disks must have a disk sector size of 512 bytes.
    /// 
    /// &gt; **Note:** Must be a shared disk, with a maxShares value of two or greater.
    /// 
    /// &gt; **Note:** You must provide the StoragePool resource provider RBAC permissions to the disks that will be added to the disk pool.
    /// 
    /// ## Import
    /// 
    /// Disks Pool Managed Disk Attachments can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:compute/diskPoolManagedDiskAttachment:DiskPoolManagedDiskAttachment example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resGroup1/providers/Microsoft.StoragePool/diskPools/storagePool1/managedDisks|/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resGroup1/providers/Microsoft.Compute/disks/disk1
    /// ```
    /// </summary>
    [AzureResourceType("azure:compute/diskPoolManagedDiskAttachment:DiskPoolManagedDiskAttachment")]
    public partial class DiskPoolManagedDiskAttachment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the Disk Pool. Changing this forces a new Disk Pool Managed Disk Attachment to be created.
        /// </summary>
        [Output("diskPoolId")]
        public Output<string> DiskPoolId { get; private set; } = null!;

        /// <summary>
        /// The ID of the Managed Disk. Changing this forces a new Disks Pool Managed Disk Attachment to be created.
        /// </summary>
        [Output("managedDiskId")]
        public Output<string> ManagedDiskId { get; private set; } = null!;


        /// <summary>
        /// Create a DiskPoolManagedDiskAttachment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DiskPoolManagedDiskAttachment(string name, DiskPoolManagedDiskAttachmentArgs args, CustomResourceOptions? options = null)
            : base("azure:compute/diskPoolManagedDiskAttachment:DiskPoolManagedDiskAttachment", name, args ?? new DiskPoolManagedDiskAttachmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DiskPoolManagedDiskAttachment(string name, Input<string> id, DiskPoolManagedDiskAttachmentState? state = null, CustomResourceOptions? options = null)
            : base("azure:compute/diskPoolManagedDiskAttachment:DiskPoolManagedDiskAttachment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DiskPoolManagedDiskAttachment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DiskPoolManagedDiskAttachment Get(string name, Input<string> id, DiskPoolManagedDiskAttachmentState? state = null, CustomResourceOptions? options = null)
        {
            return new DiskPoolManagedDiskAttachment(name, id, state, options);
        }
    }

    public sealed class DiskPoolManagedDiskAttachmentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Disk Pool. Changing this forces a new Disk Pool Managed Disk Attachment to be created.
        /// </summary>
        [Input("diskPoolId", required: true)]
        public Input<string> DiskPoolId { get; set; } = null!;

        /// <summary>
        /// The ID of the Managed Disk. Changing this forces a new Disks Pool Managed Disk Attachment to be created.
        /// </summary>
        [Input("managedDiskId", required: true)]
        public Input<string> ManagedDiskId { get; set; } = null!;

        public DiskPoolManagedDiskAttachmentArgs()
        {
        }
        public static new DiskPoolManagedDiskAttachmentArgs Empty => new DiskPoolManagedDiskAttachmentArgs();
    }

    public sealed class DiskPoolManagedDiskAttachmentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Disk Pool. Changing this forces a new Disk Pool Managed Disk Attachment to be created.
        /// </summary>
        [Input("diskPoolId")]
        public Input<string>? DiskPoolId { get; set; }

        /// <summary>
        /// The ID of the Managed Disk. Changing this forces a new Disks Pool Managed Disk Attachment to be created.
        /// </summary>
        [Input("managedDiskId")]
        public Input<string>? ManagedDiskId { get; set; }

        public DiskPoolManagedDiskAttachmentState()
        {
        }
        public static new DiskPoolManagedDiskAttachmentState Empty => new DiskPoolManagedDiskAttachmentState();
    }
}
