// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Compute.Outputs
{

    [OutputType]
    public sealed class GetManagedDisksDiskResult
    {
        public readonly string CreateOption;
        /// <summary>
        /// The ID of the disk access resource for using private endpoints on disks.
        /// </summary>
        public readonly string DiskAccessId;
        /// <summary>
        /// The ID of the Disk Encryption Set used to encrypt this Managed Disk.
        /// </summary>
        public readonly string DiskEncryptionSetId;
        /// <summary>
        /// The number of IOPS allowed for this disk, where one operation can transfer between 4k and 256k bytes.
        /// </summary>
        public readonly int DiskIopsReadWrite;
        /// <summary>
        /// The bandwidth allowed for this disk.
        /// </summary>
        public readonly int DiskMbpsReadWrite;
        /// <summary>
        /// The size of the Managed Disk in gigabytes.
        /// </summary>
        public readonly int DiskSizeInGb;
        /// <summary>
        /// An `encryption_settings` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetManagedDisksDiskEncryptionSettingResult> EncryptionSettings;
        public readonly string Id;
        /// <summary>
        /// The ID of the source image used for creating this Managed Disk.
        /// </summary>
        public readonly string ImageReferenceId;
        /// <summary>
        /// The Azure location of the Managed Disk.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the Managed Disk.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Policy for accessing the disk via network.
        /// </summary>
        public readonly string NetworkAccessPolicy;
        /// <summary>
        /// The operating system used for this Managed Disk.
        /// </summary>
        public readonly string OsType;
        /// <summary>
        /// The ID of an existing Managed Disk which this Disk was created from.
        /// </summary>
        public readonly string SourceResourceId;
        /// <summary>
        /// The Source URI for this Managed Disk.
        /// </summary>
        public readonly string SourceUri;
        /// <summary>
        /// The ID of the Storage Account where the `source_uri` is located.
        /// </summary>
        public readonly string StorageAccountId;
        /// <summary>
        /// The storage account type for the Managed Disk.
        /// </summary>
        public readonly string StorageAccountType;
        /// <summary>
        /// A mapping of tags assigned to the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// A list of Availability Zones where the Managed Disk exists.
        /// </summary>
        public readonly ImmutableArray<string> Zones;

        [OutputConstructor]
        private GetManagedDisksDiskResult(
            string createOption,

            string diskAccessId,

            string diskEncryptionSetId,

            int diskIopsReadWrite,

            int diskMbpsReadWrite,

            int diskSizeInGb,

            ImmutableArray<Outputs.GetManagedDisksDiskEncryptionSettingResult> encryptionSettings,

            string id,

            string imageReferenceId,

            string location,

            string name,

            string networkAccessPolicy,

            string osType,

            string sourceResourceId,

            string sourceUri,

            string storageAccountId,

            string storageAccountType,

            ImmutableDictionary<string, string> tags,

            ImmutableArray<string> zones)
        {
            CreateOption = createOption;
            DiskAccessId = diskAccessId;
            DiskEncryptionSetId = diskEncryptionSetId;
            DiskIopsReadWrite = diskIopsReadWrite;
            DiskMbpsReadWrite = diskMbpsReadWrite;
            DiskSizeInGb = diskSizeInGb;
            EncryptionSettings = encryptionSettings;
            Id = id;
            ImageReferenceId = imageReferenceId;
            Location = location;
            Name = name;
            NetworkAccessPolicy = networkAccessPolicy;
            OsType = osType;
            SourceResourceId = sourceResourceId;
            SourceUri = sourceUri;
            StorageAccountId = storageAccountId;
            StorageAccountType = storageAccountType;
            Tags = tags;
            Zones = zones;
        }
    }
}
