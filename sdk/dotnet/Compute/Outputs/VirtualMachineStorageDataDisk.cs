// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Compute.Outputs
{

    [OutputType]
    public sealed class VirtualMachineStorageDataDisk
    {
        /// <summary>
        /// Specifies the caching requirements for the Data Disk. Possible values include `None`, `ReadOnly` and `ReadWrite`.
        /// </summary>
        public readonly string? Caching;
        /// <summary>
        /// Specifies how the data disk should be created. Possible values are `Attach`, `FromImage` and `Empty`.
        /// 
        /// &gt; **NOTE:** If using an image that does not have data to be written to the Data Disk, use `Empty` as the create option in order to create the desired disk without any data.
        /// </summary>
        public readonly string CreateOption;
        /// <summary>
        /// Specifies the size of the data disk in gigabytes.
        /// </summary>
        public readonly int? DiskSizeGb;
        /// <summary>
        /// Specifies the logical unit number of the data disk. This needs to be unique within all the Data Disks on the Virtual Machine.
        /// </summary>
        public readonly int Lun;
        /// <summary>
        /// Specifies the ID of an Existing Managed Disk which should be attached to this Virtual Machine. When this field is set `create_option` must be set to `Attach`.
        /// 
        /// The following properties apply when using Unmanaged Disks:
        /// </summary>
        public readonly string? ManagedDiskId;
        /// <summary>
        /// Specifies the type of managed disk to create. Possible values are either `Standard_LRS`, `StandardSSD_LRS`, `Premium_LRS` or `UltraSSD_LRS`.
        /// 
        /// &gt; **Note:** `managed_disk_type` of type `UltraSSD_LRS` is currently in preview and are not available to subscriptions that have not [requested](https://aka.ms/UltraSSDPreviewSignUp) onboarding to `Azure Ultra Disk Storage` preview. `Azure Ultra Disk Storage` is only available in `East US 2`, `North Europe`, and `Southeast Asia` regions. For more information see the `Azure Ultra Disk Storage` [product documentation](https://docs.microsoft.com/azure/virtual-machines/windows/disks-enable-ultra-ssd), [product blog](https://azure.microsoft.com/en-us/blog/announcing-the-general-availability-of-azure-ultra-disk-storage/) and [FAQ](https://docs.microsoft.com/azure/virtual-machines/windows/faq-for-disks#ultra-disks). You must also set `additional_capabilities.ultra_ssd_enabled` to `true`.
        /// </summary>
        public readonly string? ManagedDiskType;
        /// <summary>
        /// The name of the Data Disk.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Specifies the URI of the VHD file backing this Unmanaged Data Disk.
        /// </summary>
        public readonly string? VhdUri;
        /// <summary>
        /// Specifies if Write Accelerator is enabled on the disk. This can only be enabled on `Premium_LRS` managed disks with no caching and [M-Series VMs](https://docs.microsoft.com/azure/virtual-machines/workloads/sap/how-to-enable-write-accelerator). Defaults to `false`.
        /// 
        /// The following properties apply when using Managed Disks:
        /// </summary>
        public readonly bool? WriteAcceleratorEnabled;

        [OutputConstructor]
        private VirtualMachineStorageDataDisk(
            string? caching,

            string createOption,

            int? diskSizeGb,

            int lun,

            string? managedDiskId,

            string? managedDiskType,

            string name,

            string? vhdUri,

            bool? writeAcceleratorEnabled)
        {
            Caching = caching;
            CreateOption = createOption;
            DiskSizeGb = diskSizeGb;
            Lun = lun;
            ManagedDiskId = managedDiskId;
            ManagedDiskType = managedDiskType;
            Name = name;
            VhdUri = vhdUri;
            WriteAcceleratorEnabled = writeAcceleratorEnabled;
        }
    }
}
