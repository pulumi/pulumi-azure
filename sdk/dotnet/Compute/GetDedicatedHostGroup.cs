// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Compute
{
    public static class GetDedicatedHostGroup
    {
        /// <summary>
        /// Use this data source to access information about an existing Dedicated Host Group.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Compute.GetDedicatedHostGroup.Invoke(new()
        ///     {
        ///         Name = "example-dedicated-host-group",
        ///         ResourceGroupName = "example-rg",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getDedicatedHostGroupResult =&gt; getDedicatedHostGroupResult.Id),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetDedicatedHostGroupResult> InvokeAsync(GetDedicatedHostGroupArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDedicatedHostGroupResult>("azure:compute/getDedicatedHostGroup:getDedicatedHostGroup", args ?? new GetDedicatedHostGroupArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Dedicated Host Group.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Compute.GetDedicatedHostGroup.Invoke(new()
        ///     {
        ///         Name = "example-dedicated-host-group",
        ///         ResourceGroupName = "example-rg",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getDedicatedHostGroupResult =&gt; getDedicatedHostGroupResult.Id),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetDedicatedHostGroupResult> Invoke(GetDedicatedHostGroupInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetDedicatedHostGroupResult>("azure:compute/getDedicatedHostGroup:getDedicatedHostGroup", args ?? new GetDedicatedHostGroupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDedicatedHostGroupArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the name of the Dedicated Host Group.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the resource group the Dedicated Host Group is located in.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetDedicatedHostGroupArgs()
        {
        }
        public static new GetDedicatedHostGroupArgs Empty => new GetDedicatedHostGroupArgs();
    }

    public sealed class GetDedicatedHostGroupInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the name of the Dedicated Host Group.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the resource group the Dedicated Host Group is located in.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetDedicatedHostGroupInvokeArgs()
        {
        }
        public static new GetDedicatedHostGroupInvokeArgs Empty => new GetDedicatedHostGroupInvokeArgs();
    }


    [OutputType]
    public sealed class GetDedicatedHostGroupResult
    {
        /// <summary>
        /// Whether virtual machines or virtual machine scale sets be placed automatically on this Dedicated Host Group.
        /// </summary>
        public readonly bool AutomaticPlacementEnabled;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The Azure location where the Dedicated Host Group exists.
        /// </summary>
        public readonly string Location;
        public readonly string Name;
        /// <summary>
        /// The number of fault domains that the Dedicated Host Group spans.
        /// </summary>
        public readonly int PlatformFaultDomainCount;
        public readonly string ResourceGroupName;
        /// <summary>
        /// A mapping of tags assigned to the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// A list of Availability Zones in which this Dedicated Host Group is located.
        /// </summary>
        public readonly ImmutableArray<string> Zones;

        [OutputConstructor]
        private GetDedicatedHostGroupResult(
            bool automaticPlacementEnabled,

            string id,

            string location,

            string name,

            int platformFaultDomainCount,

            string resourceGroupName,

            ImmutableDictionary<string, string> tags,

            ImmutableArray<string> zones)
        {
            AutomaticPlacementEnabled = automaticPlacementEnabled;
            Id = id;
            Location = location;
            Name = name;
            PlatformFaultDomainCount = platformFaultDomainCount;
            ResourceGroupName = resourceGroupName;
            Tags = tags;
            Zones = zones;
        }
    }
}
