// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Compute
{
    /// <summary>
    /// Manages a Virtual Machine.
    /// 
    /// ## Disclaimers
    /// 
    /// &gt; **Note:** The `azure.compute.VirtualMachine` resource has been superseded by the `azure.compute.LinuxVirtualMachine` and `azure.compute.WindowsVirtualMachine` resources. The existing `azure.compute.VirtualMachine` resource will continue to be available throughout the 2.x releases however is in a feature-frozen state to maintain compatibility - new functionality will instead be added to the `azure.compute.LinuxVirtualMachine` and `azure.compute.WindowsVirtualMachine` resources.
    /// 
    /// &gt; **Note:** Data Disks can be attached either directly on the `azure.compute.VirtualMachine` resource, or using the `azure.compute.DataDiskAttachment` resource - but the two cannot be used together. If both are used against the same Virtual Machine, spurious changes will occur.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/virtual_machine.html.markdown.
    /// </summary>
    public partial class VirtualMachine : Pulumi.CustomResource
    {
        /// <summary>
        /// A `additional_capabilities` block.
        /// </summary>
        [Output("additionalCapabilities")]
        public Output<Outputs.VirtualMachineAdditionalCapabilities?> AdditionalCapabilities { get; private set; } = null!;

        /// <summary>
        /// The ID of the Availability Set in which the Virtual Machine should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("availabilitySetId")]
        public Output<string> AvailabilitySetId { get; private set; } = null!;

        /// <summary>
        /// A `boot_diagnostics` block.
        /// </summary>
        [Output("bootDiagnostics")]
        public Output<Outputs.VirtualMachineBootDiagnostics?> BootDiagnostics { get; private set; } = null!;

        /// <summary>
        /// Should the Data Disks (either the Managed Disks / VHD Blobs) be deleted when the Virtual Machine is destroyed? Defaults to `false`.
        /// </summary>
        [Output("deleteDataDisksOnTermination")]
        public Output<bool?> DeleteDataDisksOnTermination { get; private set; } = null!;

        /// <summary>
        /// Should the OS Disk (either the Managed Disk / VHD Blob) be deleted when the Virtual Machine is destroyed? Defaults to `false`.
        /// </summary>
        [Output("deleteOsDiskOnTermination")]
        public Output<bool?> DeleteOsDiskOnTermination { get; private set; } = null!;

        /// <summary>
        /// A `identity` block.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.VirtualMachineIdentity> Identity { get; private set; } = null!;

        /// <summary>
        /// Specifies the BYOL Type for this Virtual Machine. This is only applicable to Windows Virtual Machines. Possible values are `Windows_Client` and `Windows_Server`.
        /// </summary>
        [Output("licenseType")]
        public Output<string> LicenseType { get; private set; } = null!;

        /// <summary>
        /// Specifies the Azure Region where the Virtual Machine exists. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the Virtual Machine. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A list of Network Interface ID's which should be associated with the Virtual Machine.
        /// </summary>
        [Output("networkInterfaceIds")]
        public Output<ImmutableArray<string>> NetworkInterfaceIds { get; private set; } = null!;

        /// <summary>
        /// An `os_profile` block. Required when `create_option` in the `storage_os_disk` block is set to `FromImage`.
        /// </summary>
        [Output("osProfile")]
        public Output<Outputs.VirtualMachineOsProfile?> OsProfile { get; private set; } = null!;

        /// <summary>
        /// A `os_profile_linux_config` block.
        /// </summary>
        [Output("osProfileLinuxConfig")]
        public Output<Outputs.VirtualMachineOsProfileLinuxConfig?> OsProfileLinuxConfig { get; private set; } = null!;

        /// <summary>
        /// One or more `os_profile_secrets` blocks.
        /// </summary>
        [Output("osProfileSecrets")]
        public Output<ImmutableArray<Outputs.VirtualMachineOsProfileSecrets>> OsProfileSecrets { get; private set; } = null!;

        /// <summary>
        /// A `os_profile_windows_config` block.
        /// </summary>
        [Output("osProfileWindowsConfig")]
        public Output<Outputs.VirtualMachineOsProfileWindowsConfig?> OsProfileWindowsConfig { get; private set; } = null!;

        /// <summary>
        /// A `plan` block.
        /// </summary>
        [Output("plan")]
        public Output<Outputs.VirtualMachinePlan?> Plan { get; private set; } = null!;

        /// <summary>
        /// The ID of the Network Interface (which must be attached to the Virtual Machine) which should be the Primary Network Interface for this Virtual Machine.
        /// </summary>
        [Output("primaryNetworkInterfaceId")]
        public Output<string?> PrimaryNetworkInterfaceId { get; private set; } = null!;

        /// <summary>
        /// The ID of the Proximity Placement Group to which this Virtual Machine should be assigned. Changing this forces a new resource to be created
        /// </summary>
        [Output("proximityPlacementGroupId")]
        public Output<string?> ProximityPlacementGroupId { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the Resource Group in which the Virtual Machine should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// One or more `storage_data_disk` blocks.
        /// </summary>
        [Output("storageDataDisks")]
        public Output<ImmutableArray<Outputs.VirtualMachineStorageDataDisks>> StorageDataDisks { get; private set; } = null!;

        /// <summary>
        /// A `storage_image_reference` block.
        /// </summary>
        [Output("storageImageReference")]
        public Output<Outputs.VirtualMachineStorageImageReference> StorageImageReference { get; private set; } = null!;

        /// <summary>
        /// A `storage_os_disk` block.
        /// </summary>
        [Output("storageOsDisk")]
        public Output<Outputs.VirtualMachineStorageOsDisk> StorageOsDisk { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the Virtual Machine.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Specifies the [size of the Virtual Machine](https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-size-specs/).
        /// </summary>
        [Output("vmSize")]
        public Output<string> VmSize { get; private set; } = null!;

        /// <summary>
        /// A list of a single item of the Availability Zone which the Virtual Machine should be allocated in.
        /// </summary>
        [Output("zones")]
        public Output<string?> Zones { get; private set; } = null!;


        /// <summary>
        /// Create a VirtualMachine resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VirtualMachine(string name, VirtualMachineArgs args, CustomResourceOptions? options = null)
            : base("azure:compute/virtualMachine:VirtualMachine", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private VirtualMachine(string name, Input<string> id, VirtualMachineState? state = null, CustomResourceOptions? options = null)
            : base("azure:compute/virtualMachine:VirtualMachine", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VirtualMachine resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VirtualMachine Get(string name, Input<string> id, VirtualMachineState? state = null, CustomResourceOptions? options = null)
        {
            return new VirtualMachine(name, id, state, options);
        }
    }

    public sealed class VirtualMachineArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A `additional_capabilities` block.
        /// </summary>
        [Input("additionalCapabilities")]
        public Input<Inputs.VirtualMachineAdditionalCapabilitiesArgs>? AdditionalCapabilities { get; set; }

        /// <summary>
        /// The ID of the Availability Set in which the Virtual Machine should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("availabilitySetId")]
        public Input<string>? AvailabilitySetId { get; set; }

        /// <summary>
        /// A `boot_diagnostics` block.
        /// </summary>
        [Input("bootDiagnostics")]
        public Input<Inputs.VirtualMachineBootDiagnosticsArgs>? BootDiagnostics { get; set; }

        /// <summary>
        /// Should the Data Disks (either the Managed Disks / VHD Blobs) be deleted when the Virtual Machine is destroyed? Defaults to `false`.
        /// </summary>
        [Input("deleteDataDisksOnTermination")]
        public Input<bool>? DeleteDataDisksOnTermination { get; set; }

        /// <summary>
        /// Should the OS Disk (either the Managed Disk / VHD Blob) be deleted when the Virtual Machine is destroyed? Defaults to `false`.
        /// </summary>
        [Input("deleteOsDiskOnTermination")]
        public Input<bool>? DeleteOsDiskOnTermination { get; set; }

        /// <summary>
        /// A `identity` block.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.VirtualMachineIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// Specifies the BYOL Type for this Virtual Machine. This is only applicable to Windows Virtual Machines. Possible values are `Windows_Client` and `Windows_Server`.
        /// </summary>
        [Input("licenseType")]
        public Input<string>? LicenseType { get; set; }

        /// <summary>
        /// Specifies the Azure Region where the Virtual Machine exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Specifies the name of the Virtual Machine. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networkInterfaceIds", required: true)]
        private InputList<string>? _networkInterfaceIds;

        /// <summary>
        /// A list of Network Interface ID's which should be associated with the Virtual Machine.
        /// </summary>
        public InputList<string> NetworkInterfaceIds
        {
            get => _networkInterfaceIds ?? (_networkInterfaceIds = new InputList<string>());
            set => _networkInterfaceIds = value;
        }

        /// <summary>
        /// An `os_profile` block. Required when `create_option` in the `storage_os_disk` block is set to `FromImage`.
        /// </summary>
        [Input("osProfile")]
        public Input<Inputs.VirtualMachineOsProfileArgs>? OsProfile { get; set; }

        /// <summary>
        /// A `os_profile_linux_config` block.
        /// </summary>
        [Input("osProfileLinuxConfig")]
        public Input<Inputs.VirtualMachineOsProfileLinuxConfigArgs>? OsProfileLinuxConfig { get; set; }

        [Input("osProfileSecrets")]
        private InputList<Inputs.VirtualMachineOsProfileSecretsArgs>? _osProfileSecrets;

        /// <summary>
        /// One or more `os_profile_secrets` blocks.
        /// </summary>
        public InputList<Inputs.VirtualMachineOsProfileSecretsArgs> OsProfileSecrets
        {
            get => _osProfileSecrets ?? (_osProfileSecrets = new InputList<Inputs.VirtualMachineOsProfileSecretsArgs>());
            set => _osProfileSecrets = value;
        }

        /// <summary>
        /// A `os_profile_windows_config` block.
        /// </summary>
        [Input("osProfileWindowsConfig")]
        public Input<Inputs.VirtualMachineOsProfileWindowsConfigArgs>? OsProfileWindowsConfig { get; set; }

        /// <summary>
        /// A `plan` block.
        /// </summary>
        [Input("plan")]
        public Input<Inputs.VirtualMachinePlanArgs>? Plan { get; set; }

        /// <summary>
        /// The ID of the Network Interface (which must be attached to the Virtual Machine) which should be the Primary Network Interface for this Virtual Machine.
        /// </summary>
        [Input("primaryNetworkInterfaceId")]
        public Input<string>? PrimaryNetworkInterfaceId { get; set; }

        /// <summary>
        /// The ID of the Proximity Placement Group to which this Virtual Machine should be assigned. Changing this forces a new resource to be created
        /// </summary>
        [Input("proximityPlacementGroupId")]
        public Input<string>? ProximityPlacementGroupId { get; set; }

        /// <summary>
        /// Specifies the name of the Resource Group in which the Virtual Machine should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("storageDataDisks")]
        private InputList<Inputs.VirtualMachineStorageDataDisksArgs>? _storageDataDisks;

        /// <summary>
        /// One or more `storage_data_disk` blocks.
        /// </summary>
        public InputList<Inputs.VirtualMachineStorageDataDisksArgs> StorageDataDisks
        {
            get => _storageDataDisks ?? (_storageDataDisks = new InputList<Inputs.VirtualMachineStorageDataDisksArgs>());
            set => _storageDataDisks = value;
        }

        /// <summary>
        /// A `storage_image_reference` block.
        /// </summary>
        [Input("storageImageReference")]
        public Input<Inputs.VirtualMachineStorageImageReferenceArgs>? StorageImageReference { get; set; }

        /// <summary>
        /// A `storage_os_disk` block.
        /// </summary>
        [Input("storageOsDisk", required: true)]
        public Input<Inputs.VirtualMachineStorageOsDiskArgs> StorageOsDisk { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the Virtual Machine.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Specifies the [size of the Virtual Machine](https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-size-specs/).
        /// </summary>
        [Input("vmSize", required: true)]
        public Input<string> VmSize { get; set; } = null!;

        /// <summary>
        /// A list of a single item of the Availability Zone which the Virtual Machine should be allocated in.
        /// </summary>
        [Input("zones")]
        public Input<string>? Zones { get; set; }

        public VirtualMachineArgs()
        {
        }
    }

    public sealed class VirtualMachineState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A `additional_capabilities` block.
        /// </summary>
        [Input("additionalCapabilities")]
        public Input<Inputs.VirtualMachineAdditionalCapabilitiesGetArgs>? AdditionalCapabilities { get; set; }

        /// <summary>
        /// The ID of the Availability Set in which the Virtual Machine should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("availabilitySetId")]
        public Input<string>? AvailabilitySetId { get; set; }

        /// <summary>
        /// A `boot_diagnostics` block.
        /// </summary>
        [Input("bootDiagnostics")]
        public Input<Inputs.VirtualMachineBootDiagnosticsGetArgs>? BootDiagnostics { get; set; }

        /// <summary>
        /// Should the Data Disks (either the Managed Disks / VHD Blobs) be deleted when the Virtual Machine is destroyed? Defaults to `false`.
        /// </summary>
        [Input("deleteDataDisksOnTermination")]
        public Input<bool>? DeleteDataDisksOnTermination { get; set; }

        /// <summary>
        /// Should the OS Disk (either the Managed Disk / VHD Blob) be deleted when the Virtual Machine is destroyed? Defaults to `false`.
        /// </summary>
        [Input("deleteOsDiskOnTermination")]
        public Input<bool>? DeleteOsDiskOnTermination { get; set; }

        /// <summary>
        /// A `identity` block.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.VirtualMachineIdentityGetArgs>? Identity { get; set; }

        /// <summary>
        /// Specifies the BYOL Type for this Virtual Machine. This is only applicable to Windows Virtual Machines. Possible values are `Windows_Client` and `Windows_Server`.
        /// </summary>
        [Input("licenseType")]
        public Input<string>? LicenseType { get; set; }

        /// <summary>
        /// Specifies the Azure Region where the Virtual Machine exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Specifies the name of the Virtual Machine. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networkInterfaceIds")]
        private InputList<string>? _networkInterfaceIds;

        /// <summary>
        /// A list of Network Interface ID's which should be associated with the Virtual Machine.
        /// </summary>
        public InputList<string> NetworkInterfaceIds
        {
            get => _networkInterfaceIds ?? (_networkInterfaceIds = new InputList<string>());
            set => _networkInterfaceIds = value;
        }

        /// <summary>
        /// An `os_profile` block. Required when `create_option` in the `storage_os_disk` block is set to `FromImage`.
        /// </summary>
        [Input("osProfile")]
        public Input<Inputs.VirtualMachineOsProfileGetArgs>? OsProfile { get; set; }

        /// <summary>
        /// A `os_profile_linux_config` block.
        /// </summary>
        [Input("osProfileLinuxConfig")]
        public Input<Inputs.VirtualMachineOsProfileLinuxConfigGetArgs>? OsProfileLinuxConfig { get; set; }

        [Input("osProfileSecrets")]
        private InputList<Inputs.VirtualMachineOsProfileSecretsGetArgs>? _osProfileSecrets;

        /// <summary>
        /// One or more `os_profile_secrets` blocks.
        /// </summary>
        public InputList<Inputs.VirtualMachineOsProfileSecretsGetArgs> OsProfileSecrets
        {
            get => _osProfileSecrets ?? (_osProfileSecrets = new InputList<Inputs.VirtualMachineOsProfileSecretsGetArgs>());
            set => _osProfileSecrets = value;
        }

        /// <summary>
        /// A `os_profile_windows_config` block.
        /// </summary>
        [Input("osProfileWindowsConfig")]
        public Input<Inputs.VirtualMachineOsProfileWindowsConfigGetArgs>? OsProfileWindowsConfig { get; set; }

        /// <summary>
        /// A `plan` block.
        /// </summary>
        [Input("plan")]
        public Input<Inputs.VirtualMachinePlanGetArgs>? Plan { get; set; }

        /// <summary>
        /// The ID of the Network Interface (which must be attached to the Virtual Machine) which should be the Primary Network Interface for this Virtual Machine.
        /// </summary>
        [Input("primaryNetworkInterfaceId")]
        public Input<string>? PrimaryNetworkInterfaceId { get; set; }

        /// <summary>
        /// The ID of the Proximity Placement Group to which this Virtual Machine should be assigned. Changing this forces a new resource to be created
        /// </summary>
        [Input("proximityPlacementGroupId")]
        public Input<string>? ProximityPlacementGroupId { get; set; }

        /// <summary>
        /// Specifies the name of the Resource Group in which the Virtual Machine should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        [Input("storageDataDisks")]
        private InputList<Inputs.VirtualMachineStorageDataDisksGetArgs>? _storageDataDisks;

        /// <summary>
        /// One or more `storage_data_disk` blocks.
        /// </summary>
        public InputList<Inputs.VirtualMachineStorageDataDisksGetArgs> StorageDataDisks
        {
            get => _storageDataDisks ?? (_storageDataDisks = new InputList<Inputs.VirtualMachineStorageDataDisksGetArgs>());
            set => _storageDataDisks = value;
        }

        /// <summary>
        /// A `storage_image_reference` block.
        /// </summary>
        [Input("storageImageReference")]
        public Input<Inputs.VirtualMachineStorageImageReferenceGetArgs>? StorageImageReference { get; set; }

        /// <summary>
        /// A `storage_os_disk` block.
        /// </summary>
        [Input("storageOsDisk")]
        public Input<Inputs.VirtualMachineStorageOsDiskGetArgs>? StorageOsDisk { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the Virtual Machine.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Specifies the [size of the Virtual Machine](https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-size-specs/).
        /// </summary>
        [Input("vmSize")]
        public Input<string>? VmSize { get; set; }

        /// <summary>
        /// A list of a single item of the Availability Zone which the Virtual Machine should be allocated in.
        /// </summary>
        [Input("zones")]
        public Input<string>? Zones { get; set; }

        public VirtualMachineState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class VirtualMachineAdditionalCapabilitiesArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Should Ultra SSD disk be enabled for this Virtual Machine?
        /// </summary>
        [Input("ultraSsdEnabled", required: true)]
        public Input<bool> UltraSsdEnabled { get; set; } = null!;

        public VirtualMachineAdditionalCapabilitiesArgs()
        {
        }
    }

    public sealed class VirtualMachineAdditionalCapabilitiesGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Should Ultra SSD disk be enabled for this Virtual Machine?
        /// </summary>
        [Input("ultraSsdEnabled", required: true)]
        public Input<bool> UltraSsdEnabled { get; set; } = null!;

        public VirtualMachineAdditionalCapabilitiesGetArgs()
        {
        }
    }

    public sealed class VirtualMachineBootDiagnosticsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Should Boot Diagnostics be enabled for this Virtual Machine?
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// The Storage Account's Blob Endpoint which should hold the virtual machine's diagnostic files.
        /// </summary>
        [Input("storageUri", required: true)]
        public Input<string> StorageUri { get; set; } = null!;

        public VirtualMachineBootDiagnosticsArgs()
        {
        }
    }

    public sealed class VirtualMachineBootDiagnosticsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Should Boot Diagnostics be enabled for this Virtual Machine?
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// The Storage Account's Blob Endpoint which should hold the virtual machine's diagnostic files.
        /// </summary>
        [Input("storageUri", required: true)]
        public Input<string> StorageUri { get; set; } = null!;

        public VirtualMachineBootDiagnosticsGetArgs()
        {
        }
    }

    public sealed class VirtualMachineIdentityArgs : Pulumi.ResourceArgs
    {
        [Input("identityIds")]
        private InputList<string>? _identityIds;

        /// <summary>
        /// Specifies a list of user managed identity ids to be assigned to the VM. Required if `type` is `UserAssigned`.
        /// </summary>
        public InputList<string> IdentityIds
        {
            get => _identityIds ?? (_identityIds = new InputList<string>());
            set => _identityIds = value;
        }

        /// <summary>
        /// The Principal ID for the Service Principal associated with the Managed Service Identity of this Virtual Machine.
        /// </summary>
        [Input("principalId")]
        public Input<string>? PrincipalId { get; set; }

        /// <summary>
        /// The Managed Service Identity Type of this Virtual Machine. Possible values are `SystemAssigned` (where Azure will generate a Service Principal for you), `UserAssigned` (where you can specify the Service Principal ID's) to be used by this Virtual Machine using the `identity_ids` field, and `SystemAssigned, UserAssigned` which assigns both a system managed identity as well as the specified user assigned identities.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public VirtualMachineIdentityArgs()
        {
        }
    }

    public sealed class VirtualMachineIdentityGetArgs : Pulumi.ResourceArgs
    {
        [Input("identityIds")]
        private InputList<string>? _identityIds;

        /// <summary>
        /// Specifies a list of user managed identity ids to be assigned to the VM. Required if `type` is `UserAssigned`.
        /// </summary>
        public InputList<string> IdentityIds
        {
            get => _identityIds ?? (_identityIds = new InputList<string>());
            set => _identityIds = value;
        }

        /// <summary>
        /// The Principal ID for the Service Principal associated with the Managed Service Identity of this Virtual Machine.
        /// </summary>
        [Input("principalId")]
        public Input<string>? PrincipalId { get; set; }

        /// <summary>
        /// The Managed Service Identity Type of this Virtual Machine. Possible values are `SystemAssigned` (where Azure will generate a Service Principal for you), `UserAssigned` (where you can specify the Service Principal ID's) to be used by this Virtual Machine using the `identity_ids` field, and `SystemAssigned, UserAssigned` which assigns both a system managed identity as well as the specified user assigned identities.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public VirtualMachineIdentityGetArgs()
        {
        }
    }

    public sealed class VirtualMachineOsProfileArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The password associated with the local administrator account.
        /// </summary>
        [Input("adminPassword")]
        public Input<string>? AdminPassword { get; set; }

        /// <summary>
        /// Specifies the name of the local administrator account.
        /// </summary>
        [Input("adminUsername", required: true)]
        public Input<string> AdminUsername { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the Virtual Machine.
        /// </summary>
        [Input("computerName", required: true)]
        public Input<string> ComputerName { get; set; } = null!;

        /// <summary>
        /// Specifies custom data to supply to the machine. On Linux-based systems, this can be used as a cloud-init script. On other systems, this will be copied as a file on disk. Internally, this provider will base64 encode this value before sending it to the API. The maximum length of the binary array is 65535 bytes.
        /// </summary>
        [Input("customData")]
        public Input<string>? CustomData { get; set; }

        public VirtualMachineOsProfileArgs()
        {
        }
    }

    public sealed class VirtualMachineOsProfileGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The password associated with the local administrator account.
        /// </summary>
        [Input("adminPassword")]
        public Input<string>? AdminPassword { get; set; }

        /// <summary>
        /// Specifies the name of the local administrator account.
        /// </summary>
        [Input("adminUsername", required: true)]
        public Input<string> AdminUsername { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the Virtual Machine.
        /// </summary>
        [Input("computerName", required: true)]
        public Input<string> ComputerName { get; set; } = null!;

        /// <summary>
        /// Specifies custom data to supply to the machine. On Linux-based systems, this can be used as a cloud-init script. On other systems, this will be copied as a file on disk. Internally, this provider will base64 encode this value before sending it to the API. The maximum length of the binary array is 65535 bytes.
        /// </summary>
        [Input("customData")]
        public Input<string>? CustomData { get; set; }

        public VirtualMachineOsProfileGetArgs()
        {
        }
    }

    public sealed class VirtualMachineOsProfileLinuxConfigArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies whether password authentication should be disabled. If set to `false`, an `admin_password` must be specified.
        /// </summary>
        [Input("disablePasswordAuthentication", required: true)]
        public Input<bool> DisablePasswordAuthentication { get; set; } = null!;

        [Input("sshKeys")]
        private InputList<VirtualMachineOsProfileLinuxConfigSshKeysArgs>? _sshKeys;

        /// <summary>
        /// One or more `ssh_keys` blocks. This field is required if `disable_password_authentication` is set to `true`.
        /// </summary>
        public InputList<VirtualMachineOsProfileLinuxConfigSshKeysArgs> SshKeys
        {
            get => _sshKeys ?? (_sshKeys = new InputList<VirtualMachineOsProfileLinuxConfigSshKeysArgs>());
            set => _sshKeys = value;
        }

        public VirtualMachineOsProfileLinuxConfigArgs()
        {
        }
    }

    public sealed class VirtualMachineOsProfileLinuxConfigGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies whether password authentication should be disabled. If set to `false`, an `admin_password` must be specified.
        /// </summary>
        [Input("disablePasswordAuthentication", required: true)]
        public Input<bool> DisablePasswordAuthentication { get; set; } = null!;

        [Input("sshKeys")]
        private InputList<VirtualMachineOsProfileLinuxConfigSshKeysGetArgs>? _sshKeys;

        /// <summary>
        /// One or more `ssh_keys` blocks. This field is required if `disable_password_authentication` is set to `true`.
        /// </summary>
        public InputList<VirtualMachineOsProfileLinuxConfigSshKeysGetArgs> SshKeys
        {
            get => _sshKeys ?? (_sshKeys = new InputList<VirtualMachineOsProfileLinuxConfigSshKeysGetArgs>());
            set => _sshKeys = value;
        }

        public VirtualMachineOsProfileLinuxConfigGetArgs()
        {
        }
    }

    public sealed class VirtualMachineOsProfileLinuxConfigSshKeysArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Public SSH Key which should be written to the `path` defined above.
        /// </summary>
        [Input("keyData", required: true)]
        public Input<string> KeyData { get; set; } = null!;

        /// <summary>
        /// The path of the destination file on the virtual machine
        /// </summary>
        [Input("path", required: true)]
        public Input<string> Path { get; set; } = null!;

        public VirtualMachineOsProfileLinuxConfigSshKeysArgs()
        {
        }
    }

    public sealed class VirtualMachineOsProfileLinuxConfigSshKeysGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Public SSH Key which should be written to the `path` defined above.
        /// </summary>
        [Input("keyData", required: true)]
        public Input<string> KeyData { get; set; } = null!;

        /// <summary>
        /// The path of the destination file on the virtual machine
        /// </summary>
        [Input("path", required: true)]
        public Input<string> Path { get; set; } = null!;

        public VirtualMachineOsProfileLinuxConfigSshKeysGetArgs()
        {
        }
    }

    public sealed class VirtualMachineOsProfileSecretsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the ID of the Key Vault to use.
        /// </summary>
        [Input("sourceVaultId", required: true)]
        public Input<string> SourceVaultId { get; set; } = null!;

        [Input("vaultCertificates")]
        private InputList<VirtualMachineOsProfileSecretsVaultCertificatesArgs>? _vaultCertificates;

        /// <summary>
        /// One or more `vault_certificates` blocks.
        /// </summary>
        public InputList<VirtualMachineOsProfileSecretsVaultCertificatesArgs> VaultCertificates
        {
            get => _vaultCertificates ?? (_vaultCertificates = new InputList<VirtualMachineOsProfileSecretsVaultCertificatesArgs>());
            set => _vaultCertificates = value;
        }

        public VirtualMachineOsProfileSecretsArgs()
        {
        }
    }

    public sealed class VirtualMachineOsProfileSecretsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the ID of the Key Vault to use.
        /// </summary>
        [Input("sourceVaultId", required: true)]
        public Input<string> SourceVaultId { get; set; } = null!;

        [Input("vaultCertificates")]
        private InputList<VirtualMachineOsProfileSecretsVaultCertificatesGetArgs>? _vaultCertificates;

        /// <summary>
        /// One or more `vault_certificates` blocks.
        /// </summary>
        public InputList<VirtualMachineOsProfileSecretsVaultCertificatesGetArgs> VaultCertificates
        {
            get => _vaultCertificates ?? (_vaultCertificates = new InputList<VirtualMachineOsProfileSecretsVaultCertificatesGetArgs>());
            set => _vaultCertificates = value;
        }

        public VirtualMachineOsProfileSecretsGetArgs()
        {
        }
    }

    public sealed class VirtualMachineOsProfileSecretsVaultCertificatesArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the certificate store on the Virtual Machine where the certificate should be added to, such as `My`.
        /// </summary>
        [Input("certificateStore")]
        public Input<string>? CertificateStore { get; set; }

        /// <summary>
        /// The ID of the Key Vault Secret. Stored secret is the Base64 encoding of a JSON Object that which is encoded in UTF-8 of which the contents need to be:
        /// </summary>
        [Input("certificateUrl", required: true)]
        public Input<string> CertificateUrl { get; set; } = null!;

        public VirtualMachineOsProfileSecretsVaultCertificatesArgs()
        {
        }
    }

    public sealed class VirtualMachineOsProfileSecretsVaultCertificatesGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the certificate store on the Virtual Machine where the certificate should be added to, such as `My`.
        /// </summary>
        [Input("certificateStore")]
        public Input<string>? CertificateStore { get; set; }

        /// <summary>
        /// The ID of the Key Vault Secret. Stored secret is the Base64 encoding of a JSON Object that which is encoded in UTF-8 of which the contents need to be:
        /// </summary>
        [Input("certificateUrl", required: true)]
        public Input<string> CertificateUrl { get; set; } = null!;

        public VirtualMachineOsProfileSecretsVaultCertificatesGetArgs()
        {
        }
    }

    public sealed class VirtualMachineOsProfileWindowsConfigAdditionalUnattendConfigsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the name of the component to configure with the added content. The only allowable value is `Microsoft-Windows-Shell-Setup`.
        /// </summary>
        [Input("component", required: true)]
        public Input<string> Component { get; set; } = null!;

        /// <summary>
        /// Specifies the base-64 encoded XML formatted content that is added to the unattend.xml file for the specified path and component.
        /// </summary>
        [Input("content", required: true)]
        public Input<string> Content { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the pass that the content applies to. The only allowable value is `oobeSystem`.
        /// </summary>
        [Input("pass", required: true)]
        public Input<string> Pass { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the setting to which the content applies. Possible values are: `FirstLogonCommands` and `AutoLogon`.
        /// </summary>
        [Input("settingName", required: true)]
        public Input<string> SettingName { get; set; } = null!;

        public VirtualMachineOsProfileWindowsConfigAdditionalUnattendConfigsArgs()
        {
        }
    }

    public sealed class VirtualMachineOsProfileWindowsConfigAdditionalUnattendConfigsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the name of the component to configure with the added content. The only allowable value is `Microsoft-Windows-Shell-Setup`.
        /// </summary>
        [Input("component", required: true)]
        public Input<string> Component { get; set; } = null!;

        /// <summary>
        /// Specifies the base-64 encoded XML formatted content that is added to the unattend.xml file for the specified path and component.
        /// </summary>
        [Input("content", required: true)]
        public Input<string> Content { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the pass that the content applies to. The only allowable value is `oobeSystem`.
        /// </summary>
        [Input("pass", required: true)]
        public Input<string> Pass { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the setting to which the content applies. Possible values are: `FirstLogonCommands` and `AutoLogon`.
        /// </summary>
        [Input("settingName", required: true)]
        public Input<string> SettingName { get; set; } = null!;

        public VirtualMachineOsProfileWindowsConfigAdditionalUnattendConfigsGetArgs()
        {
        }
    }

    public sealed class VirtualMachineOsProfileWindowsConfigArgs : Pulumi.ResourceArgs
    {
        [Input("additionalUnattendConfigs")]
        private InputList<VirtualMachineOsProfileWindowsConfigAdditionalUnattendConfigsArgs>? _additionalUnattendConfigs;

        /// <summary>
        /// A `additional_unattend_config` block.
        /// </summary>
        public InputList<VirtualMachineOsProfileWindowsConfigAdditionalUnattendConfigsArgs> AdditionalUnattendConfigs
        {
            get => _additionalUnattendConfigs ?? (_additionalUnattendConfigs = new InputList<VirtualMachineOsProfileWindowsConfigAdditionalUnattendConfigsArgs>());
            set => _additionalUnattendConfigs = value;
        }

        /// <summary>
        /// Are automatic updates enabled on this Virtual Machine? Defaults to `false.`
        /// </summary>
        [Input("enableAutomaticUpgrades")]
        public Input<bool>? EnableAutomaticUpgrades { get; set; }

        /// <summary>
        /// Should the Azure Virtual Machine Guest Agent be installed on this Virtual Machine? Defaults to `false`.
        /// </summary>
        [Input("provisionVmAgent")]
        public Input<bool>? ProvisionVmAgent { get; set; }

        /// <summary>
        /// Specifies the time zone of the virtual machine, [the possible values are defined here](http://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/).
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        [Input("winrms")]
        private InputList<VirtualMachineOsProfileWindowsConfigWinrmsArgs>? _winrms;

        /// <summary>
        /// One or more `winrm` block.
        /// </summary>
        public InputList<VirtualMachineOsProfileWindowsConfigWinrmsArgs> Winrms
        {
            get => _winrms ?? (_winrms = new InputList<VirtualMachineOsProfileWindowsConfigWinrmsArgs>());
            set => _winrms = value;
        }

        public VirtualMachineOsProfileWindowsConfigArgs()
        {
        }
    }

    public sealed class VirtualMachineOsProfileWindowsConfigGetArgs : Pulumi.ResourceArgs
    {
        [Input("additionalUnattendConfigs")]
        private InputList<VirtualMachineOsProfileWindowsConfigAdditionalUnattendConfigsGetArgs>? _additionalUnattendConfigs;

        /// <summary>
        /// A `additional_unattend_config` block.
        /// </summary>
        public InputList<VirtualMachineOsProfileWindowsConfigAdditionalUnattendConfigsGetArgs> AdditionalUnattendConfigs
        {
            get => _additionalUnattendConfigs ?? (_additionalUnattendConfigs = new InputList<VirtualMachineOsProfileWindowsConfigAdditionalUnattendConfigsGetArgs>());
            set => _additionalUnattendConfigs = value;
        }

        /// <summary>
        /// Are automatic updates enabled on this Virtual Machine? Defaults to `false.`
        /// </summary>
        [Input("enableAutomaticUpgrades")]
        public Input<bool>? EnableAutomaticUpgrades { get; set; }

        /// <summary>
        /// Should the Azure Virtual Machine Guest Agent be installed on this Virtual Machine? Defaults to `false`.
        /// </summary>
        [Input("provisionVmAgent")]
        public Input<bool>? ProvisionVmAgent { get; set; }

        /// <summary>
        /// Specifies the time zone of the virtual machine, [the possible values are defined here](http://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/).
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        [Input("winrms")]
        private InputList<VirtualMachineOsProfileWindowsConfigWinrmsGetArgs>? _winrms;

        /// <summary>
        /// One or more `winrm` block.
        /// </summary>
        public InputList<VirtualMachineOsProfileWindowsConfigWinrmsGetArgs> Winrms
        {
            get => _winrms ?? (_winrms = new InputList<VirtualMachineOsProfileWindowsConfigWinrmsGetArgs>());
            set => _winrms = value;
        }

        public VirtualMachineOsProfileWindowsConfigGetArgs()
        {
        }
    }

    public sealed class VirtualMachineOsProfileWindowsConfigWinrmsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Key Vault Secret which contains the encrypted Certificate which should be installed on the Virtual Machine. This certificate must also be specified in the `vault_certificates` block within the `os_profile_secrets` block.
        /// </summary>
        [Input("certificateUrl")]
        public Input<string>? CertificateUrl { get; set; }

        /// <summary>
        /// Specifies the protocol of listener. Possible values are `HTTP` or `HTTPS`.
        /// </summary>
        [Input("protocol", required: true)]
        public Input<string> Protocol { get; set; } = null!;

        public VirtualMachineOsProfileWindowsConfigWinrmsArgs()
        {
        }
    }

    public sealed class VirtualMachineOsProfileWindowsConfigWinrmsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Key Vault Secret which contains the encrypted Certificate which should be installed on the Virtual Machine. This certificate must also be specified in the `vault_certificates` block within the `os_profile_secrets` block.
        /// </summary>
        [Input("certificateUrl")]
        public Input<string>? CertificateUrl { get; set; }

        /// <summary>
        /// Specifies the protocol of listener. Possible values are `HTTP` or `HTTPS`.
        /// </summary>
        [Input("protocol", required: true)]
        public Input<string> Protocol { get; set; } = null!;

        public VirtualMachineOsProfileWindowsConfigWinrmsGetArgs()
        {
        }
    }

    public sealed class VirtualMachinePlanArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the name of the image from the marketplace.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Specifies the product of the image from the marketplace.
        /// </summary>
        [Input("product", required: true)]
        public Input<string> Product { get; set; } = null!;

        /// <summary>
        /// Specifies the publisher of the image.
        /// </summary>
        [Input("publisher", required: true)]
        public Input<string> Publisher { get; set; } = null!;

        public VirtualMachinePlanArgs()
        {
        }
    }

    public sealed class VirtualMachinePlanGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the name of the image from the marketplace.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Specifies the product of the image from the marketplace.
        /// </summary>
        [Input("product", required: true)]
        public Input<string> Product { get; set; } = null!;

        /// <summary>
        /// Specifies the publisher of the image.
        /// </summary>
        [Input("publisher", required: true)]
        public Input<string> Publisher { get; set; } = null!;

        public VirtualMachinePlanGetArgs()
        {
        }
    }

    public sealed class VirtualMachineStorageDataDisksArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the caching requirements for the Data Disk. Possible values include `None`, `ReadOnly` and `ReadWrite`.
        /// </summary>
        [Input("caching")]
        public Input<string>? Caching { get; set; }

        /// <summary>
        /// Specifies how the data disk should be created. Possible values are `Attach`, `FromImage` and `Empty`.
        /// </summary>
        [Input("createOption", required: true)]
        public Input<string> CreateOption { get; set; } = null!;

        /// <summary>
        /// Specifies the size of the data disk in gigabytes.
        /// </summary>
        [Input("diskSizeGb")]
        public Input<int>? DiskSizeGb { get; set; }

        /// <summary>
        /// Specifies the logical unit number of the data disk. This needs to be unique within all the Data Disks on the Virtual Machine.
        /// </summary>
        [Input("lun", required: true)]
        public Input<int> Lun { get; set; } = null!;

        /// <summary>
        /// Specifies the ID of an Existing Managed Disk which should be attached to this Virtual Machine. When this field is set `create_option` must be set to `Attach`.
        /// </summary>
        [Input("managedDiskId")]
        public Input<string>? ManagedDiskId { get; set; }

        /// <summary>
        /// Specifies the type of managed disk to create. Possible values are either `Standard_LRS`, `StandardSSD_LRS`, `Premium_LRS` or `UltraSSD_LRS`.
        /// </summary>
        [Input("managedDiskType")]
        public Input<string>? ManagedDiskType { get; set; }

        /// <summary>
        /// The name of the Data Disk.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Specifies the URI of the VHD file backing this Unmanaged Data Disk. Changing this forces a new resource to be created.
        /// </summary>
        [Input("vhdUri")]
        public Input<string>? VhdUri { get; set; }

        /// <summary>
        /// Specifies if Write Accelerator is enabled on the disk. This can only be enabled on `Premium_LRS` managed disks with no caching and [M-Series VMs](https://docs.microsoft.com/en-us/azure/virtual-machines/workloads/sap/how-to-enable-write-accelerator). Defaults to `false`.
        /// </summary>
        [Input("writeAcceleratorEnabled")]
        public Input<bool>? WriteAcceleratorEnabled { get; set; }

        public VirtualMachineStorageDataDisksArgs()
        {
        }
    }

    public sealed class VirtualMachineStorageDataDisksGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the caching requirements for the Data Disk. Possible values include `None`, `ReadOnly` and `ReadWrite`.
        /// </summary>
        [Input("caching")]
        public Input<string>? Caching { get; set; }

        /// <summary>
        /// Specifies how the data disk should be created. Possible values are `Attach`, `FromImage` and `Empty`.
        /// </summary>
        [Input("createOption", required: true)]
        public Input<string> CreateOption { get; set; } = null!;

        /// <summary>
        /// Specifies the size of the data disk in gigabytes.
        /// </summary>
        [Input("diskSizeGb")]
        public Input<int>? DiskSizeGb { get; set; }

        /// <summary>
        /// Specifies the logical unit number of the data disk. This needs to be unique within all the Data Disks on the Virtual Machine.
        /// </summary>
        [Input("lun", required: true)]
        public Input<int> Lun { get; set; } = null!;

        /// <summary>
        /// Specifies the ID of an Existing Managed Disk which should be attached to this Virtual Machine. When this field is set `create_option` must be set to `Attach`.
        /// </summary>
        [Input("managedDiskId")]
        public Input<string>? ManagedDiskId { get; set; }

        /// <summary>
        /// Specifies the type of managed disk to create. Possible values are either `Standard_LRS`, `StandardSSD_LRS`, `Premium_LRS` or `UltraSSD_LRS`.
        /// </summary>
        [Input("managedDiskType")]
        public Input<string>? ManagedDiskType { get; set; }

        /// <summary>
        /// The name of the Data Disk.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Specifies the URI of the VHD file backing this Unmanaged Data Disk. Changing this forces a new resource to be created.
        /// </summary>
        [Input("vhdUri")]
        public Input<string>? VhdUri { get; set; }

        /// <summary>
        /// Specifies if Write Accelerator is enabled on the disk. This can only be enabled on `Premium_LRS` managed disks with no caching and [M-Series VMs](https://docs.microsoft.com/en-us/azure/virtual-machines/workloads/sap/how-to-enable-write-accelerator). Defaults to `false`.
        /// </summary>
        [Input("writeAcceleratorEnabled")]
        public Input<bool>? WriteAcceleratorEnabled { get; set; }

        public VirtualMachineStorageDataDisksGetArgs()
        {
        }
    }

    public sealed class VirtualMachineStorageImageReferenceArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the ID of the Custom Image which the Virtual Machine should be created from. Changing this forces a new resource to be created.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Specifies the offer of the image used to create the virtual machine. Changing this forces a new resource to be created.
        /// </summary>
        [Input("offer")]
        public Input<string>? Offer { get; set; }

        /// <summary>
        /// Specifies the publisher of the image used to create the virtual machine. Changing this forces a new resource to be created.
        /// </summary>
        [Input("publisher")]
        public Input<string>? Publisher { get; set; }

        /// <summary>
        /// Specifies the SKU of the image used to create the virtual machine. Changing this forces a new resource to be created.
        /// </summary>
        [Input("sku")]
        public Input<string>? Sku { get; set; }

        /// <summary>
        /// Specifies the version of the image used to create the virtual machine. Changing this forces a new resource to be created.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public VirtualMachineStorageImageReferenceArgs()
        {
        }
    }

    public sealed class VirtualMachineStorageImageReferenceGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the ID of the Custom Image which the Virtual Machine should be created from. Changing this forces a new resource to be created.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Specifies the offer of the image used to create the virtual machine. Changing this forces a new resource to be created.
        /// </summary>
        [Input("offer")]
        public Input<string>? Offer { get; set; }

        /// <summary>
        /// Specifies the publisher of the image used to create the virtual machine. Changing this forces a new resource to be created.
        /// </summary>
        [Input("publisher")]
        public Input<string>? Publisher { get; set; }

        /// <summary>
        /// Specifies the SKU of the image used to create the virtual machine. Changing this forces a new resource to be created.
        /// </summary>
        [Input("sku")]
        public Input<string>? Sku { get; set; }

        /// <summary>
        /// Specifies the version of the image used to create the virtual machine. Changing this forces a new resource to be created.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public VirtualMachineStorageImageReferenceGetArgs()
        {
        }
    }

    public sealed class VirtualMachineStorageOsDiskArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the caching requirements for the OS Disk. Possible values include `None`, `ReadOnly` and `ReadWrite`.
        /// </summary>
        [Input("caching")]
        public Input<string>? Caching { get; set; }

        /// <summary>
        /// Specifies how the OS Disk should be created. Possible values are `Attach` (managed disks only) and `FromImage`.
        /// </summary>
        [Input("createOption", required: true)]
        public Input<string> CreateOption { get; set; } = null!;

        /// <summary>
        /// Specifies the size of the OS Disk in gigabytes.
        /// </summary>
        [Input("diskSizeGb")]
        public Input<int>? DiskSizeGb { get; set; }

        /// <summary>
        /// Specifies the Image URI in the format `publisherName:offer:skus:version`. This field can also specify the [VHD uri](https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-linux-cli-deploy-templates/#create-a-custom-vm-image) of a custom VM image to clone. When cloning a Custom (Unmanaged) Disk Image the `os_type` field must be set.
        /// </summary>
        [Input("imageUri")]
        public Input<string>? ImageUri { get; set; }

        /// <summary>
        /// Specifies the ID of an existing Managed Disk which should be attached as the OS Disk of this Virtual Machine. If this is set then the `create_option` must be set to `Attach`.
        /// </summary>
        [Input("managedDiskId")]
        public Input<string>? ManagedDiskId { get; set; }

        /// <summary>
        /// Specifies the type of Managed Disk which should be created. Possible values are `Standard_LRS`, `StandardSSD_LRS` or `Premium_LRS`.
        /// </summary>
        [Input("managedDiskType")]
        public Input<string>? ManagedDiskType { get; set; }

        /// <summary>
        /// Specifies the name of the OS Disk.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Specifies the Operating System on the OS Disk. Possible values are `Linux` and `Windows`.
        /// </summary>
        [Input("osType")]
        public Input<string>? OsType { get; set; }

        /// <summary>
        /// Specifies the URI of the VHD file backing this Unmanaged OS Disk. Changing this forces a new resource to be created.
        /// </summary>
        [Input("vhdUri")]
        public Input<string>? VhdUri { get; set; }

        /// <summary>
        /// Specifies if Write Accelerator is enabled on the disk. This can only be enabled on `Premium_LRS` managed disks with no caching and [M-Series VMs](https://docs.microsoft.com/en-us/azure/virtual-machines/workloads/sap/how-to-enable-write-accelerator). Defaults to `false`.
        /// </summary>
        [Input("writeAcceleratorEnabled")]
        public Input<bool>? WriteAcceleratorEnabled { get; set; }

        public VirtualMachineStorageOsDiskArgs()
        {
        }
    }

    public sealed class VirtualMachineStorageOsDiskGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the caching requirements for the OS Disk. Possible values include `None`, `ReadOnly` and `ReadWrite`.
        /// </summary>
        [Input("caching")]
        public Input<string>? Caching { get; set; }

        /// <summary>
        /// Specifies how the OS Disk should be created. Possible values are `Attach` (managed disks only) and `FromImage`.
        /// </summary>
        [Input("createOption", required: true)]
        public Input<string> CreateOption { get; set; } = null!;

        /// <summary>
        /// Specifies the size of the OS Disk in gigabytes.
        /// </summary>
        [Input("diskSizeGb")]
        public Input<int>? DiskSizeGb { get; set; }

        /// <summary>
        /// Specifies the Image URI in the format `publisherName:offer:skus:version`. This field can also specify the [VHD uri](https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-linux-cli-deploy-templates/#create-a-custom-vm-image) of a custom VM image to clone. When cloning a Custom (Unmanaged) Disk Image the `os_type` field must be set.
        /// </summary>
        [Input("imageUri")]
        public Input<string>? ImageUri { get; set; }

        /// <summary>
        /// Specifies the ID of an existing Managed Disk which should be attached as the OS Disk of this Virtual Machine. If this is set then the `create_option` must be set to `Attach`.
        /// </summary>
        [Input("managedDiskId")]
        public Input<string>? ManagedDiskId { get; set; }

        /// <summary>
        /// Specifies the type of Managed Disk which should be created. Possible values are `Standard_LRS`, `StandardSSD_LRS` or `Premium_LRS`.
        /// </summary>
        [Input("managedDiskType")]
        public Input<string>? ManagedDiskType { get; set; }

        /// <summary>
        /// Specifies the name of the OS Disk.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Specifies the Operating System on the OS Disk. Possible values are `Linux` and `Windows`.
        /// </summary>
        [Input("osType")]
        public Input<string>? OsType { get; set; }

        /// <summary>
        /// Specifies the URI of the VHD file backing this Unmanaged OS Disk. Changing this forces a new resource to be created.
        /// </summary>
        [Input("vhdUri")]
        public Input<string>? VhdUri { get; set; }

        /// <summary>
        /// Specifies if Write Accelerator is enabled on the disk. This can only be enabled on `Premium_LRS` managed disks with no caching and [M-Series VMs](https://docs.microsoft.com/en-us/azure/virtual-machines/workloads/sap/how-to-enable-write-accelerator). Defaults to `false`.
        /// </summary>
        [Input("writeAcceleratorEnabled")]
        public Input<bool>? WriteAcceleratorEnabled { get; set; }

        public VirtualMachineStorageOsDiskGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class VirtualMachineAdditionalCapabilities
    {
        /// <summary>
        /// Should Ultra SSD disk be enabled for this Virtual Machine?
        /// </summary>
        public readonly bool UltraSsdEnabled;

        [OutputConstructor]
        private VirtualMachineAdditionalCapabilities(bool ultraSsdEnabled)
        {
            UltraSsdEnabled = ultraSsdEnabled;
        }
    }

    [OutputType]
    public sealed class VirtualMachineBootDiagnostics
    {
        /// <summary>
        /// Should Boot Diagnostics be enabled for this Virtual Machine?
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// The Storage Account's Blob Endpoint which should hold the virtual machine's diagnostic files.
        /// </summary>
        public readonly string StorageUri;

        [OutputConstructor]
        private VirtualMachineBootDiagnostics(
            bool enabled,
            string storageUri)
        {
            Enabled = enabled;
            StorageUri = storageUri;
        }
    }

    [OutputType]
    public sealed class VirtualMachineIdentity
    {
        /// <summary>
        /// Specifies a list of user managed identity ids to be assigned to the VM. Required if `type` is `UserAssigned`.
        /// </summary>
        public readonly ImmutableArray<string> IdentityIds;
        /// <summary>
        /// The Principal ID for the Service Principal associated with the Managed Service Identity of this Virtual Machine.
        /// </summary>
        public readonly string PrincipalId;
        /// <summary>
        /// The Managed Service Identity Type of this Virtual Machine. Possible values are `SystemAssigned` (where Azure will generate a Service Principal for you), `UserAssigned` (where you can specify the Service Principal ID's) to be used by this Virtual Machine using the `identity_ids` field, and `SystemAssigned, UserAssigned` which assigns both a system managed identity as well as the specified user assigned identities.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private VirtualMachineIdentity(
            ImmutableArray<string> identityIds,
            string principalId,
            string type)
        {
            IdentityIds = identityIds;
            PrincipalId = principalId;
            Type = type;
        }
    }

    [OutputType]
    public sealed class VirtualMachineOsProfile
    {
        /// <summary>
        /// The password associated with the local administrator account.
        /// </summary>
        public readonly string? AdminPassword;
        /// <summary>
        /// Specifies the name of the local administrator account.
        /// </summary>
        public readonly string AdminUsername;
        /// <summary>
        /// Specifies the name of the Virtual Machine.
        /// </summary>
        public readonly string ComputerName;
        /// <summary>
        /// Specifies custom data to supply to the machine. On Linux-based systems, this can be used as a cloud-init script. On other systems, this will be copied as a file on disk. Internally, this provider will base64 encode this value before sending it to the API. The maximum length of the binary array is 65535 bytes.
        /// </summary>
        public readonly string CustomData;

        [OutputConstructor]
        private VirtualMachineOsProfile(
            string? adminPassword,
            string adminUsername,
            string computerName,
            string customData)
        {
            AdminPassword = adminPassword;
            AdminUsername = adminUsername;
            ComputerName = computerName;
            CustomData = customData;
        }
    }

    [OutputType]
    public sealed class VirtualMachineOsProfileLinuxConfig
    {
        /// <summary>
        /// Specifies whether password authentication should be disabled. If set to `false`, an `admin_password` must be specified.
        /// </summary>
        public readonly bool DisablePasswordAuthentication;
        /// <summary>
        /// One or more `ssh_keys` blocks. This field is required if `disable_password_authentication` is set to `true`.
        /// </summary>
        public readonly ImmutableArray<VirtualMachineOsProfileLinuxConfigSshKeys> SshKeys;

        [OutputConstructor]
        private VirtualMachineOsProfileLinuxConfig(
            bool disablePasswordAuthentication,
            ImmutableArray<VirtualMachineOsProfileLinuxConfigSshKeys> sshKeys)
        {
            DisablePasswordAuthentication = disablePasswordAuthentication;
            SshKeys = sshKeys;
        }
    }

    [OutputType]
    public sealed class VirtualMachineOsProfileLinuxConfigSshKeys
    {
        /// <summary>
        /// The Public SSH Key which should be written to the `path` defined above.
        /// </summary>
        public readonly string KeyData;
        /// <summary>
        /// The path of the destination file on the virtual machine
        /// </summary>
        public readonly string Path;

        [OutputConstructor]
        private VirtualMachineOsProfileLinuxConfigSshKeys(
            string keyData,
            string path)
        {
            KeyData = keyData;
            Path = path;
        }
    }

    [OutputType]
    public sealed class VirtualMachineOsProfileSecrets
    {
        /// <summary>
        /// Specifies the ID of the Key Vault to use.
        /// </summary>
        public readonly string SourceVaultId;
        /// <summary>
        /// One or more `vault_certificates` blocks.
        /// </summary>
        public readonly ImmutableArray<VirtualMachineOsProfileSecretsVaultCertificates> VaultCertificates;

        [OutputConstructor]
        private VirtualMachineOsProfileSecrets(
            string sourceVaultId,
            ImmutableArray<VirtualMachineOsProfileSecretsVaultCertificates> vaultCertificates)
        {
            SourceVaultId = sourceVaultId;
            VaultCertificates = vaultCertificates;
        }
    }

    [OutputType]
    public sealed class VirtualMachineOsProfileSecretsVaultCertificates
    {
        /// <summary>
        /// Specifies the certificate store on the Virtual Machine where the certificate should be added to, such as `My`.
        /// </summary>
        public readonly string? CertificateStore;
        /// <summary>
        /// The ID of the Key Vault Secret. Stored secret is the Base64 encoding of a JSON Object that which is encoded in UTF-8 of which the contents need to be:
        /// </summary>
        public readonly string CertificateUrl;

        [OutputConstructor]
        private VirtualMachineOsProfileSecretsVaultCertificates(
            string? certificateStore,
            string certificateUrl)
        {
            CertificateStore = certificateStore;
            CertificateUrl = certificateUrl;
        }
    }

    [OutputType]
    public sealed class VirtualMachineOsProfileWindowsConfig
    {
        /// <summary>
        /// A `additional_unattend_config` block.
        /// </summary>
        public readonly ImmutableArray<VirtualMachineOsProfileWindowsConfigAdditionalUnattendConfigs> AdditionalUnattendConfigs;
        /// <summary>
        /// Are automatic updates enabled on this Virtual Machine? Defaults to `false.`
        /// </summary>
        public readonly bool? EnableAutomaticUpgrades;
        /// <summary>
        /// Should the Azure Virtual Machine Guest Agent be installed on this Virtual Machine? Defaults to `false`.
        /// </summary>
        public readonly bool? ProvisionVmAgent;
        /// <summary>
        /// Specifies the time zone of the virtual machine, [the possible values are defined here](http://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/).
        /// </summary>
        public readonly string? Timezone;
        /// <summary>
        /// One or more `winrm` block.
        /// </summary>
        public readonly ImmutableArray<VirtualMachineOsProfileWindowsConfigWinrms> Winrms;

        [OutputConstructor]
        private VirtualMachineOsProfileWindowsConfig(
            ImmutableArray<VirtualMachineOsProfileWindowsConfigAdditionalUnattendConfigs> additionalUnattendConfigs,
            bool? enableAutomaticUpgrades,
            bool? provisionVmAgent,
            string? timezone,
            ImmutableArray<VirtualMachineOsProfileWindowsConfigWinrms> winrms)
        {
            AdditionalUnattendConfigs = additionalUnattendConfigs;
            EnableAutomaticUpgrades = enableAutomaticUpgrades;
            ProvisionVmAgent = provisionVmAgent;
            Timezone = timezone;
            Winrms = winrms;
        }
    }

    [OutputType]
    public sealed class VirtualMachineOsProfileWindowsConfigAdditionalUnattendConfigs
    {
        /// <summary>
        /// Specifies the name of the component to configure with the added content. The only allowable value is `Microsoft-Windows-Shell-Setup`.
        /// </summary>
        public readonly string Component;
        /// <summary>
        /// Specifies the base-64 encoded XML formatted content that is added to the unattend.xml file for the specified path and component.
        /// </summary>
        public readonly string Content;
        /// <summary>
        /// Specifies the name of the pass that the content applies to. The only allowable value is `oobeSystem`.
        /// </summary>
        public readonly string Pass;
        /// <summary>
        /// Specifies the name of the setting to which the content applies. Possible values are: `FirstLogonCommands` and `AutoLogon`.
        /// </summary>
        public readonly string SettingName;

        [OutputConstructor]
        private VirtualMachineOsProfileWindowsConfigAdditionalUnattendConfigs(
            string component,
            string content,
            string pass,
            string settingName)
        {
            Component = component;
            Content = content;
            Pass = pass;
            SettingName = settingName;
        }
    }

    [OutputType]
    public sealed class VirtualMachineOsProfileWindowsConfigWinrms
    {
        /// <summary>
        /// The ID of the Key Vault Secret which contains the encrypted Certificate which should be installed on the Virtual Machine. This certificate must also be specified in the `vault_certificates` block within the `os_profile_secrets` block.
        /// </summary>
        public readonly string? CertificateUrl;
        /// <summary>
        /// Specifies the protocol of listener. Possible values are `HTTP` or `HTTPS`.
        /// </summary>
        public readonly string Protocol;

        [OutputConstructor]
        private VirtualMachineOsProfileWindowsConfigWinrms(
            string? certificateUrl,
            string protocol)
        {
            CertificateUrl = certificateUrl;
            Protocol = protocol;
        }
    }

    [OutputType]
    public sealed class VirtualMachinePlan
    {
        /// <summary>
        /// Specifies the name of the image from the marketplace.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Specifies the product of the image from the marketplace.
        /// </summary>
        public readonly string Product;
        /// <summary>
        /// Specifies the publisher of the image.
        /// </summary>
        public readonly string Publisher;

        [OutputConstructor]
        private VirtualMachinePlan(
            string name,
            string product,
            string publisher)
        {
            Name = name;
            Product = product;
            Publisher = publisher;
        }
    }

    [OutputType]
    public sealed class VirtualMachineStorageDataDisks
    {
        /// <summary>
        /// Specifies the caching requirements for the Data Disk. Possible values include `None`, `ReadOnly` and `ReadWrite`.
        /// </summary>
        public readonly string Caching;
        /// <summary>
        /// Specifies how the data disk should be created. Possible values are `Attach`, `FromImage` and `Empty`.
        /// </summary>
        public readonly string CreateOption;
        /// <summary>
        /// Specifies the size of the data disk in gigabytes.
        /// </summary>
        public readonly int DiskSizeGb;
        /// <summary>
        /// Specifies the logical unit number of the data disk. This needs to be unique within all the Data Disks on the Virtual Machine.
        /// </summary>
        public readonly int Lun;
        /// <summary>
        /// Specifies the ID of an Existing Managed Disk which should be attached to this Virtual Machine. When this field is set `create_option` must be set to `Attach`.
        /// </summary>
        public readonly string ManagedDiskId;
        /// <summary>
        /// Specifies the type of managed disk to create. Possible values are either `Standard_LRS`, `StandardSSD_LRS`, `Premium_LRS` or `UltraSSD_LRS`.
        /// </summary>
        public readonly string ManagedDiskType;
        /// <summary>
        /// The name of the Data Disk.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Specifies the URI of the VHD file backing this Unmanaged Data Disk. Changing this forces a new resource to be created.
        /// </summary>
        public readonly string? VhdUri;
        /// <summary>
        /// Specifies if Write Accelerator is enabled on the disk. This can only be enabled on `Premium_LRS` managed disks with no caching and [M-Series VMs](https://docs.microsoft.com/en-us/azure/virtual-machines/workloads/sap/how-to-enable-write-accelerator). Defaults to `false`.
        /// </summary>
        public readonly bool? WriteAcceleratorEnabled;

        [OutputConstructor]
        private VirtualMachineStorageDataDisks(
            string caching,
            string createOption,
            int diskSizeGb,
            int lun,
            string managedDiskId,
            string managedDiskType,
            string name,
            string? vhdUri,
            bool? writeAcceleratorEnabled)
        {
            Caching = caching;
            CreateOption = createOption;
            DiskSizeGb = diskSizeGb;
            Lun = lun;
            ManagedDiskId = managedDiskId;
            ManagedDiskType = managedDiskType;
            Name = name;
            VhdUri = vhdUri;
            WriteAcceleratorEnabled = writeAcceleratorEnabled;
        }
    }

    [OutputType]
    public sealed class VirtualMachineStorageImageReference
    {
        /// <summary>
        /// Specifies the ID of the Custom Image which the Virtual Machine should be created from. Changing this forces a new resource to be created.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// Specifies the offer of the image used to create the virtual machine. Changing this forces a new resource to be created.
        /// </summary>
        public readonly string? Offer;
        /// <summary>
        /// Specifies the publisher of the image used to create the virtual machine. Changing this forces a new resource to be created.
        /// </summary>
        public readonly string? Publisher;
        /// <summary>
        /// Specifies the SKU of the image used to create the virtual machine. Changing this forces a new resource to be created.
        /// </summary>
        public readonly string? Sku;
        /// <summary>
        /// Specifies the version of the image used to create the virtual machine. Changing this forces a new resource to be created.
        /// </summary>
        public readonly string Version;

        [OutputConstructor]
        private VirtualMachineStorageImageReference(
            string? id,
            string? offer,
            string? publisher,
            string? sku,
            string version)
        {
            Id = id;
            Offer = offer;
            Publisher = publisher;
            Sku = sku;
            Version = version;
        }
    }

    [OutputType]
    public sealed class VirtualMachineStorageOsDisk
    {
        /// <summary>
        /// Specifies the caching requirements for the OS Disk. Possible values include `None`, `ReadOnly` and `ReadWrite`.
        /// </summary>
        public readonly string Caching;
        /// <summary>
        /// Specifies how the OS Disk should be created. Possible values are `Attach` (managed disks only) and `FromImage`.
        /// </summary>
        public readonly string CreateOption;
        /// <summary>
        /// Specifies the size of the OS Disk in gigabytes.
        /// </summary>
        public readonly int DiskSizeGb;
        /// <summary>
        /// Specifies the Image URI in the format `publisherName:offer:skus:version`. This field can also specify the [VHD uri](https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-linux-cli-deploy-templates/#create-a-custom-vm-image) of a custom VM image to clone. When cloning a Custom (Unmanaged) Disk Image the `os_type` field must be set.
        /// </summary>
        public readonly string? ImageUri;
        /// <summary>
        /// Specifies the ID of an existing Managed Disk which should be attached as the OS Disk of this Virtual Machine. If this is set then the `create_option` must be set to `Attach`.
        /// </summary>
        public readonly string ManagedDiskId;
        /// <summary>
        /// Specifies the type of Managed Disk which should be created. Possible values are `Standard_LRS`, `StandardSSD_LRS` or `Premium_LRS`.
        /// </summary>
        public readonly string ManagedDiskType;
        /// <summary>
        /// Specifies the name of the OS Disk.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Specifies the Operating System on the OS Disk. Possible values are `Linux` and `Windows`.
        /// </summary>
        public readonly string OsType;
        /// <summary>
        /// Specifies the URI of the VHD file backing this Unmanaged OS Disk. Changing this forces a new resource to be created.
        /// </summary>
        public readonly string? VhdUri;
        /// <summary>
        /// Specifies if Write Accelerator is enabled on the disk. This can only be enabled on `Premium_LRS` managed disks with no caching and [M-Series VMs](https://docs.microsoft.com/en-us/azure/virtual-machines/workloads/sap/how-to-enable-write-accelerator). Defaults to `false`.
        /// </summary>
        public readonly bool? WriteAcceleratorEnabled;

        [OutputConstructor]
        private VirtualMachineStorageOsDisk(
            string caching,
            string createOption,
            int diskSizeGb,
            string? imageUri,
            string managedDiskId,
            string managedDiskType,
            string name,
            string osType,
            string? vhdUri,
            bool? writeAcceleratorEnabled)
        {
            Caching = caching;
            CreateOption = createOption;
            DiskSizeGb = diskSizeGb;
            ImageUri = imageUri;
            ManagedDiskId = managedDiskId;
            ManagedDiskType = managedDiskType;
            Name = name;
            OsType = osType;
            VhdUri = vhdUri;
            WriteAcceleratorEnabled = writeAcceleratorEnabled;
        }
    }
    }
}
