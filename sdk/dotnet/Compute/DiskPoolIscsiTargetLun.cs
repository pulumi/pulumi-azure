// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Compute
{
    /// <summary>
    /// Manages an iSCSI Target lun.
    /// 
    /// !&gt; **Note:** Azure are officially [halting](https://learn.microsoft.com/en-us/azure/azure-vmware/attach-disk-pools-to-azure-vmware-solution-hosts?tabs=azure-cli) the preview of Azure Disk Pools, and it **will not** be made generally available. New customers will not be able to register the Microsoft.StoragePool resource provider on their subscription and deploy new Disk Pools. Existing subscriptions registered with Microsoft.StoragePool may continue to deploy and manage disk pools for the time being.
    /// 
    /// ## Import
    /// 
    /// iSCSI Target Luns can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:compute/diskPoolIscsiTargetLun:DiskPoolIscsiTargetLun example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/example-resource-group/providers/Microsoft.StoragePool/diskPools/diskPoolValue/iscsiTargets/iscsiTargetValue/lun|/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Compute/disks/disk1
    /// ```
    /// </summary>
    [AzureResourceType("azure:compute/diskPoolIscsiTargetLun:DiskPoolIscsiTargetLun")]
    public partial class DiskPoolIscsiTargetLun : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the `azure.compute.DiskPoolManagedDiskAttachment`. Changing this forces a new iSCSI Target LUN to be created.
        /// </summary>
        [Output("diskPoolManagedDiskAttachmentId")]
        public Output<string> DiskPoolManagedDiskAttachmentId { get; private set; } = null!;

        /// <summary>
        /// The ID of the iSCSI Target. Changing this forces a new iSCSI Target LUN to be created.
        /// </summary>
        [Output("iscsiTargetId")]
        public Output<string> IscsiTargetId { get; private set; } = null!;

        /// <summary>
        /// The Logical Unit Number of the iSCSI Target LUN.
        /// </summary>
        [Output("lun")]
        public Output<int> Lun { get; private set; } = null!;

        /// <summary>
        /// User defined name for iSCSI LUN. Supported characters include uppercase letters, lowercase letters, numbers, periods, underscores or hyphens. Name should end with an alphanumeric character. The length must be between `1` and `90`. Changing this forces a new iSCSI Target LUN to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;


        /// <summary>
        /// Create a DiskPoolIscsiTargetLun resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DiskPoolIscsiTargetLun(string name, DiskPoolIscsiTargetLunArgs args, CustomResourceOptions? options = null)
            : base("azure:compute/diskPoolIscsiTargetLun:DiskPoolIscsiTargetLun", name, args ?? new DiskPoolIscsiTargetLunArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DiskPoolIscsiTargetLun(string name, Input<string> id, DiskPoolIscsiTargetLunState? state = null, CustomResourceOptions? options = null)
            : base("azure:compute/diskPoolIscsiTargetLun:DiskPoolIscsiTargetLun", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DiskPoolIscsiTargetLun resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DiskPoolIscsiTargetLun Get(string name, Input<string> id, DiskPoolIscsiTargetLunState? state = null, CustomResourceOptions? options = null)
        {
            return new DiskPoolIscsiTargetLun(name, id, state, options);
        }
    }

    public sealed class DiskPoolIscsiTargetLunArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the `azure.compute.DiskPoolManagedDiskAttachment`. Changing this forces a new iSCSI Target LUN to be created.
        /// </summary>
        [Input("diskPoolManagedDiskAttachmentId", required: true)]
        public Input<string> DiskPoolManagedDiskAttachmentId { get; set; } = null!;

        /// <summary>
        /// The ID of the iSCSI Target. Changing this forces a new iSCSI Target LUN to be created.
        /// </summary>
        [Input("iscsiTargetId", required: true)]
        public Input<string> IscsiTargetId { get; set; } = null!;

        /// <summary>
        /// User defined name for iSCSI LUN. Supported characters include uppercase letters, lowercase letters, numbers, periods, underscores or hyphens. Name should end with an alphanumeric character. The length must be between `1` and `90`. Changing this forces a new iSCSI Target LUN to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public DiskPoolIscsiTargetLunArgs()
        {
        }
        public static new DiskPoolIscsiTargetLunArgs Empty => new DiskPoolIscsiTargetLunArgs();
    }

    public sealed class DiskPoolIscsiTargetLunState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the `azure.compute.DiskPoolManagedDiskAttachment`. Changing this forces a new iSCSI Target LUN to be created.
        /// </summary>
        [Input("diskPoolManagedDiskAttachmentId")]
        public Input<string>? DiskPoolManagedDiskAttachmentId { get; set; }

        /// <summary>
        /// The ID of the iSCSI Target. Changing this forces a new iSCSI Target LUN to be created.
        /// </summary>
        [Input("iscsiTargetId")]
        public Input<string>? IscsiTargetId { get; set; }

        /// <summary>
        /// The Logical Unit Number of the iSCSI Target LUN.
        /// </summary>
        [Input("lun")]
        public Input<int>? Lun { get; set; }

        /// <summary>
        /// User defined name for iSCSI LUN. Supported characters include uppercase letters, lowercase letters, numbers, periods, underscores or hyphens. Name should end with an alphanumeric character. The length must be between `1` and `90`. Changing this forces a new iSCSI Target LUN to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public DiskPoolIscsiTargetLunState()
        {
        }
        public static new DiskPoolIscsiTargetLunState Empty => new DiskPoolIscsiTargetLunState();
    }
}
