// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi.Utilities;

namespace Pulumi.Azure.Compute
{
    public static class GetSharedImageVersion
    {
        /// <summary>
        /// Use this data source to access information about an existing Version of a Shared Image within a Shared Image Gallery.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Azure.Compute.GetSharedImageVersion.InvokeAsync(new Azure.Compute.GetSharedImageVersionArgs
        ///         {
        ///             GalleryName = "my-image-gallery",
        ///             ImageName = "my-image",
        ///             Name = "1.0.0",
        ///             ResourceGroupName = "example-resources",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetSharedImageVersionResult> InvokeAsync(GetSharedImageVersionArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetSharedImageVersionResult>("azure:compute/getSharedImageVersion:getSharedImageVersion", args ?? new GetSharedImageVersionArgs(), options.WithVersion());

        /// <summary>
        /// Use this data source to access information about an existing Version of a Shared Image within a Shared Image Gallery.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Azure.Compute.GetSharedImageVersion.InvokeAsync(new Azure.Compute.GetSharedImageVersionArgs
        ///         {
        ///             GalleryName = "my-image-gallery",
        ///             ImageName = "my-image",
        ///             Name = "1.0.0",
        ///             ResourceGroupName = "example-resources",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetSharedImageVersionResult> Invoke(GetSharedImageVersionInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetSharedImageVersionResult>("azure:compute/getSharedImageVersion:getSharedImageVersion", args ?? new GetSharedImageVersionInvokeArgs(), options.WithVersion());
    }


    public sealed class GetSharedImageVersionArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Shared Image Gallery in which the Shared Image exists.
        /// </summary>
        [Input("galleryName", required: true)]
        public string GalleryName { get; set; } = null!;

        /// <summary>
        /// The name of the Shared Image in which this Version exists.
        /// </summary>
        [Input("imageName", required: true)]
        public string ImageName { get; set; } = null!;

        /// <summary>
        /// The name of the Image Version.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group in which the Shared Image Gallery exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Sort available versions taking SemVer versioning scheme into account. Defaults to `false`.
        /// </summary>
        [Input("sortVersionsBySemver")]
        public bool? SortVersionsBySemver { get; set; }

        public GetSharedImageVersionArgs()
        {
        }
    }

    public sealed class GetSharedImageVersionInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Shared Image Gallery in which the Shared Image exists.
        /// </summary>
        [Input("galleryName", required: true)]
        public Input<string> GalleryName { get; set; } = null!;

        /// <summary>
        /// The name of the Shared Image in which this Version exists.
        /// </summary>
        [Input("imageName", required: true)]
        public Input<string> ImageName { get; set; } = null!;

        /// <summary>
        /// The name of the Image Version.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group in which the Shared Image Gallery exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Sort available versions taking SemVer versioning scheme into account. Defaults to `false`.
        /// </summary>
        [Input("sortVersionsBySemver")]
        public Input<bool>? SortVersionsBySemver { get; set; }

        public GetSharedImageVersionInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetSharedImageVersionResult
    {
        /// <summary>
        /// Is this Image Version excluded from the `latest` filter?
        /// </summary>
        public readonly bool ExcludeFromLatest;
        public readonly string GalleryName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string ImageName;
        /// <summary>
        /// The supported Azure location where the Shared Image Gallery exists.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The ID of the Managed Image which was the source of this Shared Image Version.
        /// </summary>
        public readonly string ManagedImageId;
        /// <summary>
        /// The Azure Region in which this Image Version exists.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The size of the OS disk snapshot (in Gigabytes) which was the source of this Shared Image Version.
        /// </summary>
        public readonly int OsDiskImageSizeGb;
        /// <summary>
        /// The ID of the OS disk snapshot which was the source of this Shared Image Version.
        /// </summary>
        public readonly string OsDiskSnapshotId;
        public readonly string ResourceGroupName;
        public readonly bool? SortVersionsBySemver;
        /// <summary>
        /// A mapping of tags assigned to the Shared Image.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// One or more `target_region` blocks as documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSharedImageVersionTargetRegionResult> TargetRegions;

        [OutputConstructor]
        private GetSharedImageVersionResult(
            bool excludeFromLatest,

            string galleryName,

            string id,

            string imageName,

            string location,

            string managedImageId,

            string name,

            int osDiskImageSizeGb,

            string osDiskSnapshotId,

            string resourceGroupName,

            bool? sortVersionsBySemver,

            ImmutableDictionary<string, string> tags,

            ImmutableArray<Outputs.GetSharedImageVersionTargetRegionResult> targetRegions)
        {
            ExcludeFromLatest = excludeFromLatest;
            GalleryName = galleryName;
            Id = id;
            ImageName = imageName;
            Location = location;
            ManagedImageId = managedImageId;
            Name = name;
            OsDiskImageSizeGb = osDiskImageSizeGb;
            OsDiskSnapshotId = osDiskSnapshotId;
            ResourceGroupName = resourceGroupName;
            SortVersionsBySemver = sortVersionsBySemver;
            Tags = tags;
            TargetRegions = targetRegions;
        }
    }
}
