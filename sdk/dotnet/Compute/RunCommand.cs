// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Compute
{
    /// <summary>
    /// Manages a Virtual Machine Run Command.
    /// 
    /// ## Import
    /// 
    /// An existing Virtual Machine Run Command can be imported into Terraform using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:compute/runCommand:RunCommand example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Compute/virtualMachines/vm1/runCommands/rc1
    /// ```
    /// </summary>
    [AzureResourceType("azure:compute/runCommand:RunCommand")]
    public partial class RunCommand : global::Pulumi.CustomResource
    {
        /// <summary>
        /// An `error_blob_managed_identity` block as defined below. User-assigned managed Identity that has access to errorBlobUri storage blob.
        /// </summary>
        [Output("errorBlobManagedIdentity")]
        public Output<Outputs.RunCommandErrorBlobManagedIdentity?> ErrorBlobManagedIdentity { get; private set; } = null!;

        /// <summary>
        /// Specifies the Azure storage blob where script error stream will be uploaded.
        /// </summary>
        [Output("errorBlobUri")]
        public Output<string?> ErrorBlobUri { get; private set; } = null!;

        [Output("instanceViews")]
        public Output<ImmutableArray<Outputs.RunCommandInstanceView>> InstanceViews { get; private set; } = null!;

        /// <summary>
        /// The Azure Region where the Virtual Machine Run Command should exist. Changing this forces a new Virtual Machine Run Command to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of this Virtual Machine Run Command. Changing this forces a new Virtual Machine Run Command to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// An `output_blob_managed_identity` block as defined below. User-assigned managed Identity that has access to outputBlobUri storage blob.
        /// </summary>
        [Output("outputBlobManagedIdentity")]
        public Output<Outputs.RunCommandOutputBlobManagedIdentity?> OutputBlobManagedIdentity { get; private set; } = null!;

        /// <summary>
        /// Specifies the Azure storage blob where script output stream will be uploaded. It can be basic blob URI with SAS token.
        /// </summary>
        [Output("outputBlobUri")]
        public Output<string?> OutputBlobUri { get; private set; } = null!;

        /// <summary>
        /// A list of `parameter` blocks as defined below. The parameters used by the script.
        /// </summary>
        [Output("parameters")]
        public Output<ImmutableArray<Outputs.RunCommandParameter>> Parameters { get; private set; } = null!;

        /// <summary>
        /// A list of `protected_parameter` blocks as defined below. The protected parameters used by the script.
        /// </summary>
        [Output("protectedParameters")]
        public Output<ImmutableArray<Outputs.RunCommandProtectedParameter>> ProtectedParameters { get; private set; } = null!;

        /// <summary>
        /// Specifies the user account password on the VM when executing the Virtual Machine Run Command.
        /// </summary>
        [Output("runAsPassword")]
        public Output<string?> RunAsPassword { get; private set; } = null!;

        /// <summary>
        /// Specifies the user account on the VM when executing the Virtual Machine Run Command.
        /// </summary>
        [Output("runAsUser")]
        public Output<string?> RunAsUser { get; private set; } = null!;

        /// <summary>
        /// A `source` block as defined below. The source of the run command script.
        /// </summary>
        [Output("source")]
        public Output<Outputs.RunCommandSource> Source { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags which should be assigned to the Virtual Machine Run Command.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Specifies the Virtual Machine ID within which this Virtual Machine Run Command should exist. Changing this forces a new Virtual Machine Run Command to be created.
        /// </summary>
        [Output("virtualMachineId")]
        public Output<string> VirtualMachineId { get; private set; } = null!;


        /// <summary>
        /// Create a RunCommand resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RunCommand(string name, RunCommandArgs args, CustomResourceOptions? options = null)
            : base("azure:compute/runCommand:RunCommand", name, args ?? new RunCommandArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RunCommand(string name, Input<string> id, RunCommandState? state = null, CustomResourceOptions? options = null)
            : base("azure:compute/runCommand:RunCommand", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "errorBlobManagedIdentity",
                    "outputBlobManagedIdentity",
                    "protectedParameters",
                    "runAsPassword",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RunCommand resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RunCommand Get(string name, Input<string> id, RunCommandState? state = null, CustomResourceOptions? options = null)
        {
            return new RunCommand(name, id, state, options);
        }
    }

    public sealed class RunCommandArgs : global::Pulumi.ResourceArgs
    {
        [Input("errorBlobManagedIdentity")]
        private Input<Inputs.RunCommandErrorBlobManagedIdentityArgs>? _errorBlobManagedIdentity;

        /// <summary>
        /// An `error_blob_managed_identity` block as defined below. User-assigned managed Identity that has access to errorBlobUri storage blob.
        /// </summary>
        public Input<Inputs.RunCommandErrorBlobManagedIdentityArgs>? ErrorBlobManagedIdentity
        {
            get => _errorBlobManagedIdentity;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _errorBlobManagedIdentity = Output.Tuple<Input<Inputs.RunCommandErrorBlobManagedIdentityArgs>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Specifies the Azure storage blob where script error stream will be uploaded.
        /// </summary>
        [Input("errorBlobUri")]
        public Input<string>? ErrorBlobUri { get; set; }

        /// <summary>
        /// The Azure Region where the Virtual Machine Run Command should exist. Changing this forces a new Virtual Machine Run Command to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Specifies the name of this Virtual Machine Run Command. Changing this forces a new Virtual Machine Run Command to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("outputBlobManagedIdentity")]
        private Input<Inputs.RunCommandOutputBlobManagedIdentityArgs>? _outputBlobManagedIdentity;

        /// <summary>
        /// An `output_blob_managed_identity` block as defined below. User-assigned managed Identity that has access to outputBlobUri storage blob.
        /// </summary>
        public Input<Inputs.RunCommandOutputBlobManagedIdentityArgs>? OutputBlobManagedIdentity
        {
            get => _outputBlobManagedIdentity;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _outputBlobManagedIdentity = Output.Tuple<Input<Inputs.RunCommandOutputBlobManagedIdentityArgs>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Specifies the Azure storage blob where script output stream will be uploaded. It can be basic blob URI with SAS token.
        /// </summary>
        [Input("outputBlobUri")]
        public Input<string>? OutputBlobUri { get; set; }

        [Input("parameters")]
        private InputList<Inputs.RunCommandParameterArgs>? _parameters;

        /// <summary>
        /// A list of `parameter` blocks as defined below. The parameters used by the script.
        /// </summary>
        public InputList<Inputs.RunCommandParameterArgs> Parameters
        {
            get => _parameters ?? (_parameters = new InputList<Inputs.RunCommandParameterArgs>());
            set => _parameters = value;
        }

        [Input("protectedParameters")]
        private InputList<Inputs.RunCommandProtectedParameterArgs>? _protectedParameters;

        /// <summary>
        /// A list of `protected_parameter` blocks as defined below. The protected parameters used by the script.
        /// </summary>
        public InputList<Inputs.RunCommandProtectedParameterArgs> ProtectedParameters
        {
            get => _protectedParameters ?? (_protectedParameters = new InputList<Inputs.RunCommandProtectedParameterArgs>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableArray.Create<Inputs.RunCommandProtectedParameterArgs>());
                _protectedParameters = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        [Input("runAsPassword")]
        private Input<string>? _runAsPassword;

        /// <summary>
        /// Specifies the user account password on the VM when executing the Virtual Machine Run Command.
        /// </summary>
        public Input<string>? RunAsPassword
        {
            get => _runAsPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _runAsPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Specifies the user account on the VM when executing the Virtual Machine Run Command.
        /// </summary>
        [Input("runAsUser")]
        public Input<string>? RunAsUser { get; set; }

        /// <summary>
        /// A `source` block as defined below. The source of the run command script.
        /// </summary>
        [Input("source", required: true)]
        public Input<Inputs.RunCommandSourceArgs> Source { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Virtual Machine Run Command.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Specifies the Virtual Machine ID within which this Virtual Machine Run Command should exist. Changing this forces a new Virtual Machine Run Command to be created.
        /// </summary>
        [Input("virtualMachineId", required: true)]
        public Input<string> VirtualMachineId { get; set; } = null!;

        public RunCommandArgs()
        {
        }
        public static new RunCommandArgs Empty => new RunCommandArgs();
    }

    public sealed class RunCommandState : global::Pulumi.ResourceArgs
    {
        [Input("errorBlobManagedIdentity")]
        private Input<Inputs.RunCommandErrorBlobManagedIdentityGetArgs>? _errorBlobManagedIdentity;

        /// <summary>
        /// An `error_blob_managed_identity` block as defined below. User-assigned managed Identity that has access to errorBlobUri storage blob.
        /// </summary>
        public Input<Inputs.RunCommandErrorBlobManagedIdentityGetArgs>? ErrorBlobManagedIdentity
        {
            get => _errorBlobManagedIdentity;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _errorBlobManagedIdentity = Output.Tuple<Input<Inputs.RunCommandErrorBlobManagedIdentityGetArgs>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Specifies the Azure storage blob where script error stream will be uploaded.
        /// </summary>
        [Input("errorBlobUri")]
        public Input<string>? ErrorBlobUri { get; set; }

        [Input("instanceViews")]
        private InputList<Inputs.RunCommandInstanceViewGetArgs>? _instanceViews;
        public InputList<Inputs.RunCommandInstanceViewGetArgs> InstanceViews
        {
            get => _instanceViews ?? (_instanceViews = new InputList<Inputs.RunCommandInstanceViewGetArgs>());
            set => _instanceViews = value;
        }

        /// <summary>
        /// The Azure Region where the Virtual Machine Run Command should exist. Changing this forces a new Virtual Machine Run Command to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Specifies the name of this Virtual Machine Run Command. Changing this forces a new Virtual Machine Run Command to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("outputBlobManagedIdentity")]
        private Input<Inputs.RunCommandOutputBlobManagedIdentityGetArgs>? _outputBlobManagedIdentity;

        /// <summary>
        /// An `output_blob_managed_identity` block as defined below. User-assigned managed Identity that has access to outputBlobUri storage blob.
        /// </summary>
        public Input<Inputs.RunCommandOutputBlobManagedIdentityGetArgs>? OutputBlobManagedIdentity
        {
            get => _outputBlobManagedIdentity;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _outputBlobManagedIdentity = Output.Tuple<Input<Inputs.RunCommandOutputBlobManagedIdentityGetArgs>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Specifies the Azure storage blob where script output stream will be uploaded. It can be basic blob URI with SAS token.
        /// </summary>
        [Input("outputBlobUri")]
        public Input<string>? OutputBlobUri { get; set; }

        [Input("parameters")]
        private InputList<Inputs.RunCommandParameterGetArgs>? _parameters;

        /// <summary>
        /// A list of `parameter` blocks as defined below. The parameters used by the script.
        /// </summary>
        public InputList<Inputs.RunCommandParameterGetArgs> Parameters
        {
            get => _parameters ?? (_parameters = new InputList<Inputs.RunCommandParameterGetArgs>());
            set => _parameters = value;
        }

        [Input("protectedParameters")]
        private InputList<Inputs.RunCommandProtectedParameterGetArgs>? _protectedParameters;

        /// <summary>
        /// A list of `protected_parameter` blocks as defined below. The protected parameters used by the script.
        /// </summary>
        public InputList<Inputs.RunCommandProtectedParameterGetArgs> ProtectedParameters
        {
            get => _protectedParameters ?? (_protectedParameters = new InputList<Inputs.RunCommandProtectedParameterGetArgs>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableArray.Create<Inputs.RunCommandProtectedParameterGetArgs>());
                _protectedParameters = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        [Input("runAsPassword")]
        private Input<string>? _runAsPassword;

        /// <summary>
        /// Specifies the user account password on the VM when executing the Virtual Machine Run Command.
        /// </summary>
        public Input<string>? RunAsPassword
        {
            get => _runAsPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _runAsPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Specifies the user account on the VM when executing the Virtual Machine Run Command.
        /// </summary>
        [Input("runAsUser")]
        public Input<string>? RunAsUser { get; set; }

        /// <summary>
        /// A `source` block as defined below. The source of the run command script.
        /// </summary>
        [Input("source")]
        public Input<Inputs.RunCommandSourceGetArgs>? Source { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Virtual Machine Run Command.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Specifies the Virtual Machine ID within which this Virtual Machine Run Command should exist. Changing this forces a new Virtual Machine Run Command to be created.
        /// </summary>
        [Input("virtualMachineId")]
        public Input<string>? VirtualMachineId { get; set; }

        public RunCommandState()
        {
        }
        public static new RunCommandState Empty => new RunCommandState();
    }
}
