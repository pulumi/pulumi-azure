// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Compute
{
    public static class GetSharedImage
    {
        /// <summary>
        /// Use this data source to access information about an existing Shared Image within a Shared Image Gallery.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Compute.GetSharedImage.Invoke(new()
        ///     {
        ///         Name = "my-image",
        ///         GalleryName = "my-image-gallery",
        ///         ResourceGroupName = "example-resources",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Microsoft.Compute`: 2022-03-03
        /// </summary>
        public static Task<GetSharedImageResult> InvokeAsync(GetSharedImageArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSharedImageResult>("azure:compute/getSharedImage:getSharedImage", args ?? new GetSharedImageArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Shared Image within a Shared Image Gallery.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Compute.GetSharedImage.Invoke(new()
        ///     {
        ///         Name = "my-image",
        ///         GalleryName = "my-image-gallery",
        ///         ResourceGroupName = "example-resources",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Microsoft.Compute`: 2022-03-03
        /// </summary>
        public static Output<GetSharedImageResult> Invoke(GetSharedImageInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSharedImageResult>("azure:compute/getSharedImage:getSharedImage", args ?? new GetSharedImageInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Shared Image within a Shared Image Gallery.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Compute.GetSharedImage.Invoke(new()
        ///     {
        ///         Name = "my-image",
        ///         GalleryName = "my-image-gallery",
        ///         ResourceGroupName = "example-resources",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Microsoft.Compute`: 2022-03-03
        /// </summary>
        public static Output<GetSharedImageResult> Invoke(GetSharedImageInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSharedImageResult>("azure:compute/getSharedImage:getSharedImage", args ?? new GetSharedImageInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSharedImageArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Shared Image Gallery in which the Shared Image exists.
        /// </summary>
        [Input("galleryName", required: true)]
        public string GalleryName { get; set; } = null!;

        /// <summary>
        /// The name of the Shared Image.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group in which the Shared Image Gallery exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetSharedImageArgs()
        {
        }
        public static new GetSharedImageArgs Empty => new GetSharedImageArgs();
    }

    public sealed class GetSharedImageInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Shared Image Gallery in which the Shared Image exists.
        /// </summary>
        [Input("galleryName", required: true)]
        public Input<string> GalleryName { get; set; } = null!;

        /// <summary>
        /// The name of the Shared Image.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group in which the Shared Image Gallery exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetSharedImageInvokeArgs()
        {
        }
        public static new GetSharedImageInvokeArgs Empty => new GetSharedImageInvokeArgs();
    }


    [OutputType]
    public sealed class GetSharedImageResult
    {
        /// <summary>
        /// Specifies if the Shared Image supports Accelerated Network.
        /// </summary>
        public readonly bool AcceleratedNetworkSupportEnabled;
        public readonly string Architecture;
        /// <summary>
        /// Specifies if Confidential Virtual Machines enabled. It will enable all the features of trusted, with higher confidentiality features for isolate machines or encrypted data. Available for Gen2 machines.
        /// </summary>
        public readonly bool ConfidentialVmEnabled;
        /// <summary>
        /// Specifies if supports creation of both Confidential virtual machines and Gen2 virtual machines with standard security from a compatible Gen2 OS disk VHD or Gen2 Managed image.
        /// </summary>
        public readonly bool ConfidentialVmSupported;
        /// <summary>
        /// The description of this Shared Image.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The End User Licence Agreement for the Shared Image.
        /// </summary>
        public readonly string Eula;
        public readonly string GalleryName;
        /// <summary>
        /// Specifies if the Shared Image supports hibernation.
        /// </summary>
        public readonly bool HibernationEnabled;
        /// <summary>
        /// The generation of HyperV that the Virtual Machine used to create the Shared Image is based on.
        /// </summary>
        public readonly string HyperVGeneration;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// An `identifier` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSharedImageIdentifierResult> Identifiers;
        /// <summary>
        /// The supported Azure location where the Shared Image Gallery exists.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// (Required) The Purchase Plan Name for this Shared Image.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The type of Operating System present in this Shared Image.
        /// </summary>
        public readonly string OsType;
        /// <summary>
        /// The URI containing the Privacy Statement for this Shared Image.
        /// </summary>
        public readonly string PrivacyStatementUri;
        /// <summary>
        /// (Optional) A `purchase_plan` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSharedImagePurchasePlanResult> PurchasePlans;
        /// <summary>
        /// The URI containing the Release Notes for this Shared Image.
        /// </summary>
        public readonly string ReleaseNoteUri;
        public readonly string ResourceGroupName;
        /// <summary>
        /// Specifies that the Operating System used inside this Image has not been Generalized (for example, `sysprep` on Windows has not been run).
        /// </summary>
        public readonly bool Specialized;
        /// <summary>
        /// A mapping of tags assigned to the Shared Image.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// Specifies if Trusted Launch has to be enabled for the Virtual Machine created from the Shared Image.
        /// </summary>
        public readonly bool TrustedLaunchEnabled;
        /// <summary>
        /// Specifies if supports creation of both Trusted Launch virtual machines and Gen2 virtual machines with standard security created from the Shared Image.
        /// </summary>
        public readonly bool TrustedLaunchSupported;

        [OutputConstructor]
        private GetSharedImageResult(
            bool acceleratedNetworkSupportEnabled,

            string architecture,

            bool confidentialVmEnabled,

            bool confidentialVmSupported,

            string description,

            string eula,

            string galleryName,

            bool hibernationEnabled,

            string hyperVGeneration,

            string id,

            ImmutableArray<Outputs.GetSharedImageIdentifierResult> identifiers,

            string location,

            string name,

            string osType,

            string privacyStatementUri,

            ImmutableArray<Outputs.GetSharedImagePurchasePlanResult> purchasePlans,

            string releaseNoteUri,

            string resourceGroupName,

            bool specialized,

            ImmutableDictionary<string, string> tags,

            bool trustedLaunchEnabled,

            bool trustedLaunchSupported)
        {
            AcceleratedNetworkSupportEnabled = acceleratedNetworkSupportEnabled;
            Architecture = architecture;
            ConfidentialVmEnabled = confidentialVmEnabled;
            ConfidentialVmSupported = confidentialVmSupported;
            Description = description;
            Eula = eula;
            GalleryName = galleryName;
            HibernationEnabled = hibernationEnabled;
            HyperVGeneration = hyperVGeneration;
            Id = id;
            Identifiers = identifiers;
            Location = location;
            Name = name;
            OsType = osType;
            PrivacyStatementUri = privacyStatementUri;
            PurchasePlans = purchasePlans;
            ReleaseNoteUri = releaseNoteUri;
            ResourceGroupName = resourceGroupName;
            Specialized = specialized;
            Tags = tags;
            TrustedLaunchEnabled = trustedLaunchEnabled;
            TrustedLaunchSupported = trustedLaunchSupported;
        }
    }
}
