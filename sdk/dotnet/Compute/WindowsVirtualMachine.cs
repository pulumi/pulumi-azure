// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Compute
{
    /// <summary>
    /// Manages a Windows Virtual Machine.
    /// 
    /// ## Disclaimers
    /// 
    /// &gt; **Note** This provider will automatically remove the OS Disk by default - this behaviour can be configured using the `features` configuration within the Provider configuration block.
    /// 
    /// &gt; **Note** This resource does not support Unmanaged Disks. If you need to use Unmanaged Disks you can continue to use the `azure.compute.VirtualMachine` resource instead.
    /// 
    /// &gt; **Note** This resource does not support attaching existing OS Disks. You can instead capture an image of the OS Disk or continue to use the `azure.compute.VirtualMachine` resource instead.
    /// 
    /// &gt; In this release there's a known issue where the `public_ip_address` and `public_ip_addresses` fields may not be fully populated for Dynamic Public IP's.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/windows_virtual_machine.html.markdown.
    /// </summary>
    public partial class WindowsVirtualMachine : Pulumi.CustomResource
    {
        /// <summary>
        /// A `additional_capabilities` block as defined below.
        /// </summary>
        [Output("additionalCapabilities")]
        public Output<Outputs.WindowsVirtualMachineAdditionalCapabilities?> AdditionalCapabilities { get; private set; } = null!;

        /// <summary>
        /// One or more `additional_unattend_content` blocks as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Output("additionalUnattendContents")]
        public Output<ImmutableArray<Outputs.WindowsVirtualMachineAdditionalUnattendContents>> AdditionalUnattendContents { get; private set; } = null!;

        /// <summary>
        /// The Password which should be used for the local-administrator on this Virtual Machine. Changing this forces a new resource to be created.
        /// </summary>
        [Output("adminPassword")]
        public Output<string> AdminPassword { get; private set; } = null!;

        /// <summary>
        /// The username of the local administrator used for the Virtual Machine. Changing this forces a new resource to be created.
        /// </summary>
        [Output("adminUsername")]
        public Output<string> AdminUsername { get; private set; } = null!;

        /// <summary>
        /// Should Extension Operations be allowed on this Virtual Machine? Changing this forces a new resource to be created.
        /// </summary>
        [Output("allowExtensionOperations")]
        public Output<bool?> AllowExtensionOperations { get; private set; } = null!;

        /// <summary>
        /// Specifies the ID of the Availability Set in which the Virtual Machine should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("availabilitySetId")]
        public Output<string?> AvailabilitySetId { get; private set; } = null!;

        /// <summary>
        /// A `boot_diagnostics` block as defined below.
        /// </summary>
        [Output("bootDiagnostics")]
        public Output<Outputs.WindowsVirtualMachineBootDiagnostics?> BootDiagnostics { get; private set; } = null!;

        /// <summary>
        /// Specifies the Hostname which should be used for this Virtual Machine. If unspecified this defaults to the value for the `name` field. Changing this forces a new resource to be created.
        /// </summary>
        [Output("computerName")]
        public Output<string> ComputerName { get; private set; } = null!;

        /// <summary>
        /// The Base64-Encoded Custom Data which should be used for this Virtual Machine. Changing this forces a new resource to be created.
        /// </summary>
        [Output("customData")]
        public Output<string?> CustomData { get; private set; } = null!;

        /// <summary>
        /// The ID of a Dedicated Host where this machine should be run on. Changing this forces a new resource to be created.
        /// </summary>
        [Output("dedicatedHostId")]
        public Output<string?> DedicatedHostId { get; private set; } = null!;

        /// <summary>
        /// Specifies if Automatic Updates are Enabled for the Windows Virtual Machine. Changing this forces a new resource to be created.
        /// </summary>
        [Output("enableAutomaticUpdates")]
        public Output<bool?> EnableAutomaticUpdates { get; private set; } = null!;

        /// <summary>
        /// Specifies what should happen when the Virtual Machine is evicted for price reasons when using a Spot instance. At this time the only supported value is `Deallocate`. Changing this forces a new resource to be created.
        /// </summary>
        [Output("evictionPolicy")]
        public Output<string?> EvictionPolicy { get; private set; } = null!;

        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.WindowsVirtualMachineIdentity?> Identity { get; private set; } = null!;

        /// <summary>
        /// Specifies the type of on-premise license (also known as [Azure Hybrid Use Benefit](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing)) which should be used for this Virtual Machine. Possible values are `None`, `Windows_Client` and `Windows_Server`. Changing this forces a new resource to be created.
        /// </summary>
        [Output("licenseType")]
        public Output<string?> LicenseType { get; private set; } = null!;

        /// <summary>
        /// The Azure location where the Windows Virtual Machine should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The maximum price you're willing to pay for this Virtual Machine, in US Dollars; which must be greater than the current spot price. If this bid price falls below the current spot price the Virtual Machine will be evicted using the `eviction_policy`. Defaults to `-1`, which means that the Virtual Machine should not be evicted for price reasons.
        /// </summary>
        [Output("maxBidPrice")]
        public Output<double?> MaxBidPrice { get; private set; } = null!;

        /// <summary>
        /// The name of the Windows Virtual Machine. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// . A list of Network Interface ID's which should be attached to this Virtual Machine. The first Network Interface ID in this list will be the Primary Network Interface on the Virtual Machine.
        /// </summary>
        [Output("networkInterfaceIds")]
        public Output<ImmutableArray<string>> NetworkInterfaceIds { get; private set; } = null!;

        /// <summary>
        /// A `os_disk` block as defined below.
        /// </summary>
        [Output("osDisk")]
        public Output<Outputs.WindowsVirtualMachineOsDisk> OsDisk { get; private set; } = null!;

        /// <summary>
        /// A `plan` block as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Output("plan")]
        public Output<Outputs.WindowsVirtualMachinePlan?> Plan { get; private set; } = null!;

        [Output("priority")]
        public Output<string?> Priority { get; private set; } = null!;

        /// <summary>
        /// The Primary Private IP Address assigned to this Virtual Machine.
        /// </summary>
        [Output("privateIpAddress")]
        public Output<string> PrivateIpAddress { get; private set; } = null!;

        /// <summary>
        /// A list of Private IP Addresses assigned to this Virtual Machine.
        /// </summary>
        [Output("privateIpAddresses")]
        public Output<ImmutableArray<string>> PrivateIpAddresses { get; private set; } = null!;

        /// <summary>
        /// Should the Azure VM Agent be provisioned on this Virtual Machine? Defaults to `true`. Changing this forces a new resource to be created.
        /// </summary>
        [Output("provisionVmAgent")]
        public Output<bool?> ProvisionVmAgent { get; private set; } = null!;

        /// <summary>
        /// The ID of the Proximity Placement Group which the Virtual Machine should be assigned to. Changing this forces a new resource to be created.
        /// </summary>
        [Output("proximityPlacementGroupId")]
        public Output<string?> ProximityPlacementGroupId { get; private set; } = null!;

        /// <summary>
        /// The Primary Public IP Address assigned to this Virtual Machine.
        /// </summary>
        [Output("publicIpAddress")]
        public Output<string> PublicIpAddress { get; private set; } = null!;

        /// <summary>
        /// A list of the Public IP Addresses assigned to this Virtual Machine.
        /// </summary>
        [Output("publicIpAddresses")]
        public Output<ImmutableArray<string>> PublicIpAddresses { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group in which the Windows Virtual Machine should be exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// One or more `secret` blocks as defined below.
        /// </summary>
        [Output("secrets")]
        public Output<ImmutableArray<Outputs.WindowsVirtualMachineSecrets>> Secrets { get; private set; } = null!;

        /// <summary>
        /// The SKU which should be used for this Virtual Machine, such as `Standard_F2`.
        /// </summary>
        [Output("size")]
        public Output<string> Size { get; private set; } = null!;

        /// <summary>
        /// The ID of the Image which this Virtual Machine should be created from. Changing this forces a new resource to be created.
        /// </summary>
        [Output("sourceImageId")]
        public Output<string?> SourceImageId { get; private set; } = null!;

        /// <summary>
        /// A `source_image_reference` block as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Output("sourceImageReference")]
        public Output<Outputs.WindowsVirtualMachineSourceImageReference?> SourceImageReference { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags which should be assigned to this Virtual Machine.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Specifies the Time Zone which should be used by the Virtual Machine, [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/).
        /// </summary>
        [Output("timezone")]
        public Output<string?> Timezone { get; private set; } = null!;

        /// <summary>
        /// A 128-bit identifier which uniquely identifies this Virtual Machine.
        /// </summary>
        [Output("virtualMachineId")]
        public Output<string> VirtualMachineId { get; private set; } = null!;

        /// <summary>
        /// One or more `winrm_listener` blocks as defined below.
        /// </summary>
        [Output("winrmListeners")]
        public Output<ImmutableArray<Outputs.WindowsVirtualMachineWinrmListeners>> WinrmListeners { get; private set; } = null!;

        /// <summary>
        /// The Zone in which this Virtual Machine should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Output("zone")]
        public Output<string?> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a WindowsVirtualMachine resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WindowsVirtualMachine(string name, WindowsVirtualMachineArgs args, CustomResourceOptions? options = null)
            : base("azure:compute/windowsVirtualMachine:WindowsVirtualMachine", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private WindowsVirtualMachine(string name, Input<string> id, WindowsVirtualMachineState? state = null, CustomResourceOptions? options = null)
            : base("azure:compute/windowsVirtualMachine:WindowsVirtualMachine", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WindowsVirtualMachine resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WindowsVirtualMachine Get(string name, Input<string> id, WindowsVirtualMachineState? state = null, CustomResourceOptions? options = null)
        {
            return new WindowsVirtualMachine(name, id, state, options);
        }
    }

    public sealed class WindowsVirtualMachineArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A `additional_capabilities` block as defined below.
        /// </summary>
        [Input("additionalCapabilities")]
        public Input<Inputs.WindowsVirtualMachineAdditionalCapabilitiesArgs>? AdditionalCapabilities { get; set; }

        [Input("additionalUnattendContents")]
        private InputList<Inputs.WindowsVirtualMachineAdditionalUnattendContentsArgs>? _additionalUnattendContents;

        /// <summary>
        /// One or more `additional_unattend_content` blocks as defined below. Changing this forces a new resource to be created.
        /// </summary>
        public InputList<Inputs.WindowsVirtualMachineAdditionalUnattendContentsArgs> AdditionalUnattendContents
        {
            get => _additionalUnattendContents ?? (_additionalUnattendContents = new InputList<Inputs.WindowsVirtualMachineAdditionalUnattendContentsArgs>());
            set => _additionalUnattendContents = value;
        }

        /// <summary>
        /// The Password which should be used for the local-administrator on this Virtual Machine. Changing this forces a new resource to be created.
        /// </summary>
        [Input("adminPassword", required: true)]
        public Input<string> AdminPassword { get; set; } = null!;

        /// <summary>
        /// The username of the local administrator used for the Virtual Machine. Changing this forces a new resource to be created.
        /// </summary>
        [Input("adminUsername", required: true)]
        public Input<string> AdminUsername { get; set; } = null!;

        /// <summary>
        /// Should Extension Operations be allowed on this Virtual Machine? Changing this forces a new resource to be created.
        /// </summary>
        [Input("allowExtensionOperations")]
        public Input<bool>? AllowExtensionOperations { get; set; }

        /// <summary>
        /// Specifies the ID of the Availability Set in which the Virtual Machine should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("availabilitySetId")]
        public Input<string>? AvailabilitySetId { get; set; }

        /// <summary>
        /// A `boot_diagnostics` block as defined below.
        /// </summary>
        [Input("bootDiagnostics")]
        public Input<Inputs.WindowsVirtualMachineBootDiagnosticsArgs>? BootDiagnostics { get; set; }

        /// <summary>
        /// Specifies the Hostname which should be used for this Virtual Machine. If unspecified this defaults to the value for the `name` field. Changing this forces a new resource to be created.
        /// </summary>
        [Input("computerName")]
        public Input<string>? ComputerName { get; set; }

        /// <summary>
        /// The Base64-Encoded Custom Data which should be used for this Virtual Machine. Changing this forces a new resource to be created.
        /// </summary>
        [Input("customData")]
        public Input<string>? CustomData { get; set; }

        /// <summary>
        /// The ID of a Dedicated Host where this machine should be run on. Changing this forces a new resource to be created.
        /// </summary>
        [Input("dedicatedHostId")]
        public Input<string>? DedicatedHostId { get; set; }

        /// <summary>
        /// Specifies if Automatic Updates are Enabled for the Windows Virtual Machine. Changing this forces a new resource to be created.
        /// </summary>
        [Input("enableAutomaticUpdates")]
        public Input<bool>? EnableAutomaticUpdates { get; set; }

        /// <summary>
        /// Specifies what should happen when the Virtual Machine is evicted for price reasons when using a Spot instance. At this time the only supported value is `Deallocate`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("evictionPolicy")]
        public Input<string>? EvictionPolicy { get; set; }

        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.WindowsVirtualMachineIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// Specifies the type of on-premise license (also known as [Azure Hybrid Use Benefit](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing)) which should be used for this Virtual Machine. Possible values are `None`, `Windows_Client` and `Windows_Server`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("licenseType")]
        public Input<string>? LicenseType { get; set; }

        /// <summary>
        /// The Azure location where the Windows Virtual Machine should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The maximum price you're willing to pay for this Virtual Machine, in US Dollars; which must be greater than the current spot price. If this bid price falls below the current spot price the Virtual Machine will be evicted using the `eviction_policy`. Defaults to `-1`, which means that the Virtual Machine should not be evicted for price reasons.
        /// </summary>
        [Input("maxBidPrice")]
        public Input<double>? MaxBidPrice { get; set; }

        /// <summary>
        /// The name of the Windows Virtual Machine. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networkInterfaceIds", required: true)]
        private InputList<string>? _networkInterfaceIds;

        /// <summary>
        /// . A list of Network Interface ID's which should be attached to this Virtual Machine. The first Network Interface ID in this list will be the Primary Network Interface on the Virtual Machine.
        /// </summary>
        public InputList<string> NetworkInterfaceIds
        {
            get => _networkInterfaceIds ?? (_networkInterfaceIds = new InputList<string>());
            set => _networkInterfaceIds = value;
        }

        /// <summary>
        /// A `os_disk` block as defined below.
        /// </summary>
        [Input("osDisk", required: true)]
        public Input<Inputs.WindowsVirtualMachineOsDiskArgs> OsDisk { get; set; } = null!;

        /// <summary>
        /// A `plan` block as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Input("plan")]
        public Input<Inputs.WindowsVirtualMachinePlanArgs>? Plan { get; set; }

        [Input("priority")]
        public Input<string>? Priority { get; set; }

        /// <summary>
        /// Should the Azure VM Agent be provisioned on this Virtual Machine? Defaults to `true`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("provisionVmAgent")]
        public Input<bool>? ProvisionVmAgent { get; set; }

        /// <summary>
        /// The ID of the Proximity Placement Group which the Virtual Machine should be assigned to. Changing this forces a new resource to be created.
        /// </summary>
        [Input("proximityPlacementGroupId")]
        public Input<string>? ProximityPlacementGroupId { get; set; }

        /// <summary>
        /// The name of the Resource Group in which the Windows Virtual Machine should be exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("secrets")]
        private InputList<Inputs.WindowsVirtualMachineSecretsArgs>? _secrets;

        /// <summary>
        /// One or more `secret` blocks as defined below.
        /// </summary>
        public InputList<Inputs.WindowsVirtualMachineSecretsArgs> Secrets
        {
            get => _secrets ?? (_secrets = new InputList<Inputs.WindowsVirtualMachineSecretsArgs>());
            set => _secrets = value;
        }

        /// <summary>
        /// The SKU which should be used for this Virtual Machine, such as `Standard_F2`.
        /// </summary>
        [Input("size", required: true)]
        public Input<string> Size { get; set; } = null!;

        /// <summary>
        /// The ID of the Image which this Virtual Machine should be created from. Changing this forces a new resource to be created.
        /// </summary>
        [Input("sourceImageId")]
        public Input<string>? SourceImageId { get; set; }

        /// <summary>
        /// A `source_image_reference` block as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Input("sourceImageReference")]
        public Input<Inputs.WindowsVirtualMachineSourceImageReferenceArgs>? SourceImageReference { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to this Virtual Machine.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Specifies the Time Zone which should be used by the Virtual Machine, [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/).
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        [Input("winrmListeners")]
        private InputList<Inputs.WindowsVirtualMachineWinrmListenersArgs>? _winrmListeners;

        /// <summary>
        /// One or more `winrm_listener` blocks as defined below.
        /// </summary>
        public InputList<Inputs.WindowsVirtualMachineWinrmListenersArgs> WinrmListeners
        {
            get => _winrmListeners ?? (_winrmListeners = new InputList<Inputs.WindowsVirtualMachineWinrmListenersArgs>());
            set => _winrmListeners = value;
        }

        /// <summary>
        /// The Zone in which this Virtual Machine should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public WindowsVirtualMachineArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A `additional_capabilities` block as defined below.
        /// </summary>
        [Input("additionalCapabilities")]
        public Input<Inputs.WindowsVirtualMachineAdditionalCapabilitiesGetArgs>? AdditionalCapabilities { get; set; }

        [Input("additionalUnattendContents")]
        private InputList<Inputs.WindowsVirtualMachineAdditionalUnattendContentsGetArgs>? _additionalUnattendContents;

        /// <summary>
        /// One or more `additional_unattend_content` blocks as defined below. Changing this forces a new resource to be created.
        /// </summary>
        public InputList<Inputs.WindowsVirtualMachineAdditionalUnattendContentsGetArgs> AdditionalUnattendContents
        {
            get => _additionalUnattendContents ?? (_additionalUnattendContents = new InputList<Inputs.WindowsVirtualMachineAdditionalUnattendContentsGetArgs>());
            set => _additionalUnattendContents = value;
        }

        /// <summary>
        /// The Password which should be used for the local-administrator on this Virtual Machine. Changing this forces a new resource to be created.
        /// </summary>
        [Input("adminPassword")]
        public Input<string>? AdminPassword { get; set; }

        /// <summary>
        /// The username of the local administrator used for the Virtual Machine. Changing this forces a new resource to be created.
        /// </summary>
        [Input("adminUsername")]
        public Input<string>? AdminUsername { get; set; }

        /// <summary>
        /// Should Extension Operations be allowed on this Virtual Machine? Changing this forces a new resource to be created.
        /// </summary>
        [Input("allowExtensionOperations")]
        public Input<bool>? AllowExtensionOperations { get; set; }

        /// <summary>
        /// Specifies the ID of the Availability Set in which the Virtual Machine should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("availabilitySetId")]
        public Input<string>? AvailabilitySetId { get; set; }

        /// <summary>
        /// A `boot_diagnostics` block as defined below.
        /// </summary>
        [Input("bootDiagnostics")]
        public Input<Inputs.WindowsVirtualMachineBootDiagnosticsGetArgs>? BootDiagnostics { get; set; }

        /// <summary>
        /// Specifies the Hostname which should be used for this Virtual Machine. If unspecified this defaults to the value for the `name` field. Changing this forces a new resource to be created.
        /// </summary>
        [Input("computerName")]
        public Input<string>? ComputerName { get; set; }

        /// <summary>
        /// The Base64-Encoded Custom Data which should be used for this Virtual Machine. Changing this forces a new resource to be created.
        /// </summary>
        [Input("customData")]
        public Input<string>? CustomData { get; set; }

        /// <summary>
        /// The ID of a Dedicated Host where this machine should be run on. Changing this forces a new resource to be created.
        /// </summary>
        [Input("dedicatedHostId")]
        public Input<string>? DedicatedHostId { get; set; }

        /// <summary>
        /// Specifies if Automatic Updates are Enabled for the Windows Virtual Machine. Changing this forces a new resource to be created.
        /// </summary>
        [Input("enableAutomaticUpdates")]
        public Input<bool>? EnableAutomaticUpdates { get; set; }

        /// <summary>
        /// Specifies what should happen when the Virtual Machine is evicted for price reasons when using a Spot instance. At this time the only supported value is `Deallocate`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("evictionPolicy")]
        public Input<string>? EvictionPolicy { get; set; }

        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.WindowsVirtualMachineIdentityGetArgs>? Identity { get; set; }

        /// <summary>
        /// Specifies the type of on-premise license (also known as [Azure Hybrid Use Benefit](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing)) which should be used for this Virtual Machine. Possible values are `None`, `Windows_Client` and `Windows_Server`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("licenseType")]
        public Input<string>? LicenseType { get; set; }

        /// <summary>
        /// The Azure location where the Windows Virtual Machine should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The maximum price you're willing to pay for this Virtual Machine, in US Dollars; which must be greater than the current spot price. If this bid price falls below the current spot price the Virtual Machine will be evicted using the `eviction_policy`. Defaults to `-1`, which means that the Virtual Machine should not be evicted for price reasons.
        /// </summary>
        [Input("maxBidPrice")]
        public Input<double>? MaxBidPrice { get; set; }

        /// <summary>
        /// The name of the Windows Virtual Machine. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networkInterfaceIds")]
        private InputList<string>? _networkInterfaceIds;

        /// <summary>
        /// . A list of Network Interface ID's which should be attached to this Virtual Machine. The first Network Interface ID in this list will be the Primary Network Interface on the Virtual Machine.
        /// </summary>
        public InputList<string> NetworkInterfaceIds
        {
            get => _networkInterfaceIds ?? (_networkInterfaceIds = new InputList<string>());
            set => _networkInterfaceIds = value;
        }

        /// <summary>
        /// A `os_disk` block as defined below.
        /// </summary>
        [Input("osDisk")]
        public Input<Inputs.WindowsVirtualMachineOsDiskGetArgs>? OsDisk { get; set; }

        /// <summary>
        /// A `plan` block as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Input("plan")]
        public Input<Inputs.WindowsVirtualMachinePlanGetArgs>? Plan { get; set; }

        [Input("priority")]
        public Input<string>? Priority { get; set; }

        /// <summary>
        /// The Primary Private IP Address assigned to this Virtual Machine.
        /// </summary>
        [Input("privateIpAddress")]
        public Input<string>? PrivateIpAddress { get; set; }

        [Input("privateIpAddresses")]
        private InputList<string>? _privateIpAddresses;

        /// <summary>
        /// A list of Private IP Addresses assigned to this Virtual Machine.
        /// </summary>
        public InputList<string> PrivateIpAddresses
        {
            get => _privateIpAddresses ?? (_privateIpAddresses = new InputList<string>());
            set => _privateIpAddresses = value;
        }

        /// <summary>
        /// Should the Azure VM Agent be provisioned on this Virtual Machine? Defaults to `true`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("provisionVmAgent")]
        public Input<bool>? ProvisionVmAgent { get; set; }

        /// <summary>
        /// The ID of the Proximity Placement Group which the Virtual Machine should be assigned to. Changing this forces a new resource to be created.
        /// </summary>
        [Input("proximityPlacementGroupId")]
        public Input<string>? ProximityPlacementGroupId { get; set; }

        /// <summary>
        /// The Primary Public IP Address assigned to this Virtual Machine.
        /// </summary>
        [Input("publicIpAddress")]
        public Input<string>? PublicIpAddress { get; set; }

        [Input("publicIpAddresses")]
        private InputList<string>? _publicIpAddresses;

        /// <summary>
        /// A list of the Public IP Addresses assigned to this Virtual Machine.
        /// </summary>
        public InputList<string> PublicIpAddresses
        {
            get => _publicIpAddresses ?? (_publicIpAddresses = new InputList<string>());
            set => _publicIpAddresses = value;
        }

        /// <summary>
        /// The name of the Resource Group in which the Windows Virtual Machine should be exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        [Input("secrets")]
        private InputList<Inputs.WindowsVirtualMachineSecretsGetArgs>? _secrets;

        /// <summary>
        /// One or more `secret` blocks as defined below.
        /// </summary>
        public InputList<Inputs.WindowsVirtualMachineSecretsGetArgs> Secrets
        {
            get => _secrets ?? (_secrets = new InputList<Inputs.WindowsVirtualMachineSecretsGetArgs>());
            set => _secrets = value;
        }

        /// <summary>
        /// The SKU which should be used for this Virtual Machine, such as `Standard_F2`.
        /// </summary>
        [Input("size")]
        public Input<string>? Size { get; set; }

        /// <summary>
        /// The ID of the Image which this Virtual Machine should be created from. Changing this forces a new resource to be created.
        /// </summary>
        [Input("sourceImageId")]
        public Input<string>? SourceImageId { get; set; }

        /// <summary>
        /// A `source_image_reference` block as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Input("sourceImageReference")]
        public Input<Inputs.WindowsVirtualMachineSourceImageReferenceGetArgs>? SourceImageReference { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to this Virtual Machine.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Specifies the Time Zone which should be used by the Virtual Machine, [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/).
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        /// <summary>
        /// A 128-bit identifier which uniquely identifies this Virtual Machine.
        /// </summary>
        [Input("virtualMachineId")]
        public Input<string>? VirtualMachineId { get; set; }

        [Input("winrmListeners")]
        private InputList<Inputs.WindowsVirtualMachineWinrmListenersGetArgs>? _winrmListeners;

        /// <summary>
        /// One or more `winrm_listener` blocks as defined below.
        /// </summary>
        public InputList<Inputs.WindowsVirtualMachineWinrmListenersGetArgs> WinrmListeners
        {
            get => _winrmListeners ?? (_winrmListeners = new InputList<Inputs.WindowsVirtualMachineWinrmListenersGetArgs>());
            set => _winrmListeners = value;
        }

        /// <summary>
        /// The Zone in which this Virtual Machine should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public WindowsVirtualMachineState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class WindowsVirtualMachineAdditionalCapabilitiesArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Should the capacity to enable Data Disks of the `UltraSSD_LRS` storage account type be supported on this Virtual Machine? Defaults to `false`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("ultraSsdEnabled")]
        public Input<bool>? UltraSsdEnabled { get; set; }

        public WindowsVirtualMachineAdditionalCapabilitiesArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineAdditionalCapabilitiesGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Should the capacity to enable Data Disks of the `UltraSSD_LRS` storage account type be supported on this Virtual Machine? Defaults to `false`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("ultraSsdEnabled")]
        public Input<bool>? UltraSsdEnabled { get; set; }

        public WindowsVirtualMachineAdditionalCapabilitiesGetArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineAdditionalUnattendContentsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The XML formatted content that is added to the unattend.xml file for the specified path and component. Changing this forces a new resource to be created.
        /// </summary>
        [Input("content", required: true)]
        public Input<string> Content { get; set; } = null!;

        /// <summary>
        /// The name of the setting to which the content applies. Possible values are `AutoLogon` and `FirstLogonCommands`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("setting", required: true)]
        public Input<string> Setting { get; set; } = null!;

        public WindowsVirtualMachineAdditionalUnattendContentsArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineAdditionalUnattendContentsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The XML formatted content that is added to the unattend.xml file for the specified path and component. Changing this forces a new resource to be created.
        /// </summary>
        [Input("content", required: true)]
        public Input<string> Content { get; set; } = null!;

        /// <summary>
        /// The name of the setting to which the content applies. Possible values are `AutoLogon` and `FirstLogonCommands`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("setting", required: true)]
        public Input<string> Setting { get; set; } = null!;

        public WindowsVirtualMachineAdditionalUnattendContentsGetArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineBootDiagnosticsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Primary/Secondary Endpoint for the Azure Storage Account which should be used to store Boot Diagnostics, including Console Output and Screenshots from the Hypervisor.
        /// </summary>
        [Input("storageAccountUri", required: true)]
        public Input<string> StorageAccountUri { get; set; } = null!;

        public WindowsVirtualMachineBootDiagnosticsArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineBootDiagnosticsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Primary/Secondary Endpoint for the Azure Storage Account which should be used to store Boot Diagnostics, including Console Output and Screenshots from the Hypervisor.
        /// </summary>
        [Input("storageAccountUri", required: true)]
        public Input<string> StorageAccountUri { get; set; } = null!;

        public WindowsVirtualMachineBootDiagnosticsGetArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineIdentityArgs : Pulumi.ResourceArgs
    {
        [Input("identityIds")]
        private InputList<string>? _identityIds;

        /// <summary>
        /// A list of User Managed Identity ID's which should be assigned to the Windows Virtual Machine.
        /// </summary>
        public InputList<string> IdentityIds
        {
            get => _identityIds ?? (_identityIds = new InputList<string>());
            set => _identityIds = value;
        }

        /// <summary>
        /// The ID of the System Managed Service Principal.
        /// </summary>
        [Input("principalId")]
        public Input<string>? PrincipalId { get; set; }

        /// <summary>
        /// The type of Managed Identity which should be assigned to the Windows Virtual Machine. Possible values are `SystemAssigned`, `UserAssigned` and `SystemAssigned, UserAssigned`.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public WindowsVirtualMachineIdentityArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineIdentityGetArgs : Pulumi.ResourceArgs
    {
        [Input("identityIds")]
        private InputList<string>? _identityIds;

        /// <summary>
        /// A list of User Managed Identity ID's which should be assigned to the Windows Virtual Machine.
        /// </summary>
        public InputList<string> IdentityIds
        {
            get => _identityIds ?? (_identityIds = new InputList<string>());
            set => _identityIds = value;
        }

        /// <summary>
        /// The ID of the System Managed Service Principal.
        /// </summary>
        [Input("principalId")]
        public Input<string>? PrincipalId { get; set; }

        /// <summary>
        /// The type of Managed Identity which should be assigned to the Windows Virtual Machine. Possible values are `SystemAssigned`, `UserAssigned` and `SystemAssigned, UserAssigned`.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public WindowsVirtualMachineIdentityGetArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineOsDiskArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Type of Caching which should be used for the Internal OS Disk. Possible values are `None`, `ReadOnly` and `ReadWrite`.
        /// </summary>
        [Input("caching", required: true)]
        public Input<string> Caching { get; set; } = null!;

        /// <summary>
        /// A `diff_disk_settings` block as defined above.
        /// </summary>
        [Input("diffDiskSettings")]
        public Input<WindowsVirtualMachineOsDiskDiffDiskSettingsArgs>? DiffDiskSettings { get; set; }

        /// <summary>
        /// The ID of the Disk Encryption Set which should be used to Encrypt this OS Disk.
        /// </summary>
        [Input("diskEncryptionSetId")]
        public Input<string>? DiskEncryptionSetId { get; set; }

        /// <summary>
        /// The Size of the Internal OS Disk in GB, if you wish to vary from the size used in the image this Virtual Machine is sourced from.
        /// </summary>
        [Input("diskSizeGb")]
        public Input<int>? DiskSizeGb { get; set; }

        /// <summary>
        /// The name which should be used for the Internal OS Disk. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The Type of Storage Account which should back this the Internal OS Disk. Possible values are `Standard_LRS`, `StandardSSD_LRS` and `Premium_LRS`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("storageAccountType", required: true)]
        public Input<string> StorageAccountType { get; set; } = null!;

        /// <summary>
        /// Should Write Accelerator be Enabled for this OS Disk? Defaults to `false`.
        /// </summary>
        [Input("writeAcceleratorEnabled")]
        public Input<bool>? WriteAcceleratorEnabled { get; set; }

        public WindowsVirtualMachineOsDiskArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineOsDiskDiffDiskSettingsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the Ephemeral Disk Settings for the OS Disk. At this time the only possible value is `Local`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("option", required: true)]
        public Input<string> Option { get; set; } = null!;

        public WindowsVirtualMachineOsDiskDiffDiskSettingsArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineOsDiskDiffDiskSettingsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the Ephemeral Disk Settings for the OS Disk. At this time the only possible value is `Local`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("option", required: true)]
        public Input<string> Option { get; set; } = null!;

        public WindowsVirtualMachineOsDiskDiffDiskSettingsGetArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineOsDiskGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Type of Caching which should be used for the Internal OS Disk. Possible values are `None`, `ReadOnly` and `ReadWrite`.
        /// </summary>
        [Input("caching", required: true)]
        public Input<string> Caching { get; set; } = null!;

        /// <summary>
        /// A `diff_disk_settings` block as defined above.
        /// </summary>
        [Input("diffDiskSettings")]
        public Input<WindowsVirtualMachineOsDiskDiffDiskSettingsGetArgs>? DiffDiskSettings { get; set; }

        /// <summary>
        /// The ID of the Disk Encryption Set which should be used to Encrypt this OS Disk.
        /// </summary>
        [Input("diskEncryptionSetId")]
        public Input<string>? DiskEncryptionSetId { get; set; }

        /// <summary>
        /// The Size of the Internal OS Disk in GB, if you wish to vary from the size used in the image this Virtual Machine is sourced from.
        /// </summary>
        [Input("diskSizeGb")]
        public Input<int>? DiskSizeGb { get; set; }

        /// <summary>
        /// The name which should be used for the Internal OS Disk. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The Type of Storage Account which should back this the Internal OS Disk. Possible values are `Standard_LRS`, `StandardSSD_LRS` and `Premium_LRS`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("storageAccountType", required: true)]
        public Input<string> StorageAccountType { get; set; } = null!;

        /// <summary>
        /// Should Write Accelerator be Enabled for this OS Disk? Defaults to `false`.
        /// </summary>
        [Input("writeAcceleratorEnabled")]
        public Input<bool>? WriteAcceleratorEnabled { get; set; }

        public WindowsVirtualMachineOsDiskGetArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachinePlanArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the Name of the Marketplace Image this Virtual Machine should be created from. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Specifies the Product of the Marketplace Image this Virtual Machine should be created from. Changing this forces a new resource to be created.
        /// </summary>
        [Input("product", required: true)]
        public Input<string> Product { get; set; } = null!;

        /// <summary>
        /// Specifies the Publisher of the Marketplace Image this Virtual Machine should be created from. Changing this forces a new resource to be created.
        /// </summary>
        [Input("publisher", required: true)]
        public Input<string> Publisher { get; set; } = null!;

        public WindowsVirtualMachinePlanArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachinePlanGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the Name of the Marketplace Image this Virtual Machine should be created from. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Specifies the Product of the Marketplace Image this Virtual Machine should be created from. Changing this forces a new resource to be created.
        /// </summary>
        [Input("product", required: true)]
        public Input<string> Product { get; set; } = null!;

        /// <summary>
        /// Specifies the Publisher of the Marketplace Image this Virtual Machine should be created from. Changing this forces a new resource to be created.
        /// </summary>
        [Input("publisher", required: true)]
        public Input<string> Publisher { get; set; } = null!;

        public WindowsVirtualMachinePlanGetArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineSecretsArgs : Pulumi.ResourceArgs
    {
        [Input("certificates", required: true)]
        private InputList<WindowsVirtualMachineSecretsCertificatesArgs>? _certificates;

        /// <summary>
        /// One or more `certificate` blocks as defined above.
        /// </summary>
        public InputList<WindowsVirtualMachineSecretsCertificatesArgs> Certificates
        {
            get => _certificates ?? (_certificates = new InputList<WindowsVirtualMachineSecretsCertificatesArgs>());
            set => _certificates = value;
        }

        /// <summary>
        /// The ID of the Key Vault from which all Secrets should be sourced.
        /// </summary>
        [Input("keyVaultId", required: true)]
        public Input<string> KeyVaultId { get; set; } = null!;

        public WindowsVirtualMachineSecretsArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineSecretsCertificatesArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The certificate store on the Virtual Machine where the certificate should be added.
        /// </summary>
        [Input("store", required: true)]
        public Input<string> Store { get; set; } = null!;

        /// <summary>
        /// The Secret URL of a Key Vault Certificate.
        /// </summary>
        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        public WindowsVirtualMachineSecretsCertificatesArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineSecretsCertificatesGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The certificate store on the Virtual Machine where the certificate should be added.
        /// </summary>
        [Input("store", required: true)]
        public Input<string> Store { get; set; } = null!;

        /// <summary>
        /// The Secret URL of a Key Vault Certificate.
        /// </summary>
        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        public WindowsVirtualMachineSecretsCertificatesGetArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineSecretsGetArgs : Pulumi.ResourceArgs
    {
        [Input("certificates", required: true)]
        private InputList<WindowsVirtualMachineSecretsCertificatesGetArgs>? _certificates;

        /// <summary>
        /// One or more `certificate` blocks as defined above.
        /// </summary>
        public InputList<WindowsVirtualMachineSecretsCertificatesGetArgs> Certificates
        {
            get => _certificates ?? (_certificates = new InputList<WindowsVirtualMachineSecretsCertificatesGetArgs>());
            set => _certificates = value;
        }

        /// <summary>
        /// The ID of the Key Vault from which all Secrets should be sourced.
        /// </summary>
        [Input("keyVaultId", required: true)]
        public Input<string> KeyVaultId { get; set; } = null!;

        public WindowsVirtualMachineSecretsGetArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineSourceImageReferenceArgs : Pulumi.ResourceArgs
    {
        [Input("offer", required: true)]
        public Input<string> Offer { get; set; } = null!;

        /// <summary>
        /// Specifies the Publisher of the Marketplace Image this Virtual Machine should be created from. Changing this forces a new resource to be created.
        /// </summary>
        [Input("publisher", required: true)]
        public Input<string> Publisher { get; set; } = null!;

        [Input("sku", required: true)]
        public Input<string> Sku { get; set; } = null!;

        [Input("version", required: true)]
        public Input<string> Version { get; set; } = null!;

        public WindowsVirtualMachineSourceImageReferenceArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineSourceImageReferenceGetArgs : Pulumi.ResourceArgs
    {
        [Input("offer", required: true)]
        public Input<string> Offer { get; set; } = null!;

        /// <summary>
        /// Specifies the Publisher of the Marketplace Image this Virtual Machine should be created from. Changing this forces a new resource to be created.
        /// </summary>
        [Input("publisher", required: true)]
        public Input<string> Publisher { get; set; } = null!;

        [Input("sku", required: true)]
        public Input<string> Sku { get; set; } = null!;

        [Input("version", required: true)]
        public Input<string> Version { get; set; } = null!;

        public WindowsVirtualMachineSourceImageReferenceGetArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineWinrmListenersArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Secret URL of a Key Vault Certificate, which must be specified when `protocol` is set to `Https`.
        /// </summary>
        [Input("certificateUrl")]
        public Input<string>? CertificateUrl { get; set; }

        [Input("protocol", required: true)]
        public Input<string> Protocol { get; set; } = null!;

        public WindowsVirtualMachineWinrmListenersArgs()
        {
        }
    }

    public sealed class WindowsVirtualMachineWinrmListenersGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Secret URL of a Key Vault Certificate, which must be specified when `protocol` is set to `Https`.
        /// </summary>
        [Input("certificateUrl")]
        public Input<string>? CertificateUrl { get; set; }

        [Input("protocol", required: true)]
        public Input<string> Protocol { get; set; } = null!;

        public WindowsVirtualMachineWinrmListenersGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class WindowsVirtualMachineAdditionalCapabilities
    {
        /// <summary>
        /// Should the capacity to enable Data Disks of the `UltraSSD_LRS` storage account type be supported on this Virtual Machine? Defaults to `false`. Changing this forces a new resource to be created.
        /// </summary>
        public readonly bool? UltraSsdEnabled;

        [OutputConstructor]
        private WindowsVirtualMachineAdditionalCapabilities(bool? ultraSsdEnabled)
        {
            UltraSsdEnabled = ultraSsdEnabled;
        }
    }

    [OutputType]
    public sealed class WindowsVirtualMachineAdditionalUnattendContents
    {
        /// <summary>
        /// The XML formatted content that is added to the unattend.xml file for the specified path and component. Changing this forces a new resource to be created.
        /// </summary>
        public readonly string Content;
        /// <summary>
        /// The name of the setting to which the content applies. Possible values are `AutoLogon` and `FirstLogonCommands`. Changing this forces a new resource to be created.
        /// </summary>
        public readonly string Setting;

        [OutputConstructor]
        private WindowsVirtualMachineAdditionalUnattendContents(
            string content,
            string setting)
        {
            Content = content;
            Setting = setting;
        }
    }

    [OutputType]
    public sealed class WindowsVirtualMachineBootDiagnostics
    {
        /// <summary>
        /// The Primary/Secondary Endpoint for the Azure Storage Account which should be used to store Boot Diagnostics, including Console Output and Screenshots from the Hypervisor.
        /// </summary>
        public readonly string StorageAccountUri;

        [OutputConstructor]
        private WindowsVirtualMachineBootDiagnostics(string storageAccountUri)
        {
            StorageAccountUri = storageAccountUri;
        }
    }

    [OutputType]
    public sealed class WindowsVirtualMachineIdentity
    {
        /// <summary>
        /// A list of User Managed Identity ID's which should be assigned to the Windows Virtual Machine.
        /// </summary>
        public readonly ImmutableArray<string> IdentityIds;
        /// <summary>
        /// The ID of the System Managed Service Principal.
        /// </summary>
        public readonly string PrincipalId;
        /// <summary>
        /// The type of Managed Identity which should be assigned to the Windows Virtual Machine. Possible values are `SystemAssigned`, `UserAssigned` and `SystemAssigned, UserAssigned`.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private WindowsVirtualMachineIdentity(
            ImmutableArray<string> identityIds,
            string principalId,
            string type)
        {
            IdentityIds = identityIds;
            PrincipalId = principalId;
            Type = type;
        }
    }

    [OutputType]
    public sealed class WindowsVirtualMachineOsDisk
    {
        /// <summary>
        /// The Type of Caching which should be used for the Internal OS Disk. Possible values are `None`, `ReadOnly` and `ReadWrite`.
        /// </summary>
        public readonly string Caching;
        /// <summary>
        /// A `diff_disk_settings` block as defined above.
        /// </summary>
        public readonly WindowsVirtualMachineOsDiskDiffDiskSettings? DiffDiskSettings;
        /// <summary>
        /// The ID of the Disk Encryption Set which should be used to Encrypt this OS Disk.
        /// </summary>
        public readonly string? DiskEncryptionSetId;
        /// <summary>
        /// The Size of the Internal OS Disk in GB, if you wish to vary from the size used in the image this Virtual Machine is sourced from.
        /// </summary>
        public readonly int DiskSizeGb;
        /// <summary>
        /// The name which should be used for the Internal OS Disk. Changing this forces a new resource to be created.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The Type of Storage Account which should back this the Internal OS Disk. Possible values are `Standard_LRS`, `StandardSSD_LRS` and `Premium_LRS`. Changing this forces a new resource to be created.
        /// </summary>
        public readonly string StorageAccountType;
        /// <summary>
        /// Should Write Accelerator be Enabled for this OS Disk? Defaults to `false`.
        /// </summary>
        public readonly bool? WriteAcceleratorEnabled;

        [OutputConstructor]
        private WindowsVirtualMachineOsDisk(
            string caching,
            WindowsVirtualMachineOsDiskDiffDiskSettings? diffDiskSettings,
            string? diskEncryptionSetId,
            int diskSizeGb,
            string name,
            string storageAccountType,
            bool? writeAcceleratorEnabled)
        {
            Caching = caching;
            DiffDiskSettings = diffDiskSettings;
            DiskEncryptionSetId = diskEncryptionSetId;
            DiskSizeGb = diskSizeGb;
            Name = name;
            StorageAccountType = storageAccountType;
            WriteAcceleratorEnabled = writeAcceleratorEnabled;
        }
    }

    [OutputType]
    public sealed class WindowsVirtualMachineOsDiskDiffDiskSettings
    {
        /// <summary>
        /// Specifies the Ephemeral Disk Settings for the OS Disk. At this time the only possible value is `Local`. Changing this forces a new resource to be created.
        /// </summary>
        public readonly string Option;

        [OutputConstructor]
        private WindowsVirtualMachineOsDiskDiffDiskSettings(string option)
        {
            Option = option;
        }
    }

    [OutputType]
    public sealed class WindowsVirtualMachinePlan
    {
        /// <summary>
        /// Specifies the Name of the Marketplace Image this Virtual Machine should be created from. Changing this forces a new resource to be created.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Specifies the Product of the Marketplace Image this Virtual Machine should be created from. Changing this forces a new resource to be created.
        /// </summary>
        public readonly string Product;
        /// <summary>
        /// Specifies the Publisher of the Marketplace Image this Virtual Machine should be created from. Changing this forces a new resource to be created.
        /// </summary>
        public readonly string Publisher;

        [OutputConstructor]
        private WindowsVirtualMachinePlan(
            string name,
            string product,
            string publisher)
        {
            Name = name;
            Product = product;
            Publisher = publisher;
        }
    }

    [OutputType]
    public sealed class WindowsVirtualMachineSecrets
    {
        /// <summary>
        /// One or more `certificate` blocks as defined above.
        /// </summary>
        public readonly ImmutableArray<WindowsVirtualMachineSecretsCertificates> Certificates;
        /// <summary>
        /// The ID of the Key Vault from which all Secrets should be sourced.
        /// </summary>
        public readonly string KeyVaultId;

        [OutputConstructor]
        private WindowsVirtualMachineSecrets(
            ImmutableArray<WindowsVirtualMachineSecretsCertificates> certificates,
            string keyVaultId)
        {
            Certificates = certificates;
            KeyVaultId = keyVaultId;
        }
    }

    [OutputType]
    public sealed class WindowsVirtualMachineSecretsCertificates
    {
        /// <summary>
        /// The certificate store on the Virtual Machine where the certificate should be added.
        /// </summary>
        public readonly string Store;
        /// <summary>
        /// The Secret URL of a Key Vault Certificate.
        /// </summary>
        public readonly string Url;

        [OutputConstructor]
        private WindowsVirtualMachineSecretsCertificates(
            string store,
            string url)
        {
            Store = store;
            Url = url;
        }
    }

    [OutputType]
    public sealed class WindowsVirtualMachineSourceImageReference
    {
        public readonly string Offer;
        /// <summary>
        /// Specifies the Publisher of the Marketplace Image this Virtual Machine should be created from. Changing this forces a new resource to be created.
        /// </summary>
        public readonly string Publisher;
        public readonly string Sku;
        public readonly string Version;

        [OutputConstructor]
        private WindowsVirtualMachineSourceImageReference(
            string offer,
            string publisher,
            string sku,
            string version)
        {
            Offer = offer;
            Publisher = publisher;
            Sku = sku;
            Version = version;
        }
    }

    [OutputType]
    public sealed class WindowsVirtualMachineWinrmListeners
    {
        /// <summary>
        /// The Secret URL of a Key Vault Certificate, which must be specified when `protocol` is set to `Https`.
        /// </summary>
        public readonly string? CertificateUrl;
        public readonly string Protocol;

        [OutputConstructor]
        private WindowsVirtualMachineWinrmListeners(
            string? certificateUrl,
            string protocol)
        {
            CertificateUrl = certificateUrl;
            Protocol = protocol;
        }
    }
    }
}
