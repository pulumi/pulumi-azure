// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Compute
{
    /// <summary>
    /// Manages a Disk SAS Token.
    /// 
    /// Use this resource to obtain a Shared Access Signature (SAS Token) for an existing Managed Disk.
    /// 
    /// Shared access signatures allow fine-grained, ephemeral access control to various aspects of Managed Disk similar to blob/storage account container.
    /// 
    /// With the help of this resource, data from the disk can be copied from managed disk to a storage blob or to some other system without the need of azcopy.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testResourceGroup = new Azure.Core.ResourceGroup("testResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var testManagedDisk = new Azure.Compute.ManagedDisk("testManagedDisk", new()
    ///     {
    ///         Location = testResourceGroup.Location,
    ///         ResourceGroupName = testResourceGroup.Name,
    ///         StorageAccountType = "Standard_LRS",
    ///         CreateOption = "Empty",
    ///         DiskSizeGb = 1,
    ///     });
    /// 
    ///     var testManagedDiskSasToken = new Azure.Compute.ManagedDiskSasToken("testManagedDiskSasToken", new()
    ///     {
    ///         ManagedDiskId = testManagedDisk.Id,
    ///         DurationInSeconds = 300,
    ///         AccessLevel = "Read",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Disk SAS Token can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:compute/managedDiskSasToken:ManagedDiskSasToken example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Compute/disks/manageddisk1
    /// ```
    /// </summary>
    [AzureResourceType("azure:compute/managedDiskSasToken:ManagedDiskSasToken")]
    public partial class ManagedDiskSasToken : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The level of access required on the disk. Supported are Read, Write.
        /// </summary>
        [Output("accessLevel")]
        public Output<string> AccessLevel { get; private set; } = null!;

        /// <summary>
        /// The duration for which the export should be allowed. Should be between 30 &amp; 4294967295 seconds.
        /// </summary>
        [Output("durationInSeconds")]
        public Output<int> DurationInSeconds { get; private set; } = null!;

        /// <summary>
        /// The ID of an existing Managed Disk which should be exported. Changing this forces a new resource to be created.
        /// </summary>
        [Output("managedDiskId")]
        public Output<string> ManagedDiskId { get; private set; } = null!;

        /// <summary>
        /// The computed Shared Access Signature (SAS) of the Managed Disk.
        /// </summary>
        [Output("sasUrl")]
        public Output<string> SasUrl { get; private set; } = null!;


        /// <summary>
        /// Create a ManagedDiskSasToken resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ManagedDiskSasToken(string name, ManagedDiskSasTokenArgs args, CustomResourceOptions? options = null)
            : base("azure:compute/managedDiskSasToken:ManagedDiskSasToken", name, args ?? new ManagedDiskSasTokenArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ManagedDiskSasToken(string name, Input<string> id, ManagedDiskSasTokenState? state = null, CustomResourceOptions? options = null)
            : base("azure:compute/managedDiskSasToken:ManagedDiskSasToken", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "sasUrl",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ManagedDiskSasToken resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ManagedDiskSasToken Get(string name, Input<string> id, ManagedDiskSasTokenState? state = null, CustomResourceOptions? options = null)
        {
            return new ManagedDiskSasToken(name, id, state, options);
        }
    }

    public sealed class ManagedDiskSasTokenArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The level of access required on the disk. Supported are Read, Write.
        /// </summary>
        [Input("accessLevel", required: true)]
        public Input<string> AccessLevel { get; set; } = null!;

        /// <summary>
        /// The duration for which the export should be allowed. Should be between 30 &amp; 4294967295 seconds.
        /// </summary>
        [Input("durationInSeconds", required: true)]
        public Input<int> DurationInSeconds { get; set; } = null!;

        /// <summary>
        /// The ID of an existing Managed Disk which should be exported. Changing this forces a new resource to be created.
        /// </summary>
        [Input("managedDiskId", required: true)]
        public Input<string> ManagedDiskId { get; set; } = null!;

        public ManagedDiskSasTokenArgs()
        {
        }
        public static new ManagedDiskSasTokenArgs Empty => new ManagedDiskSasTokenArgs();
    }

    public sealed class ManagedDiskSasTokenState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The level of access required on the disk. Supported are Read, Write.
        /// </summary>
        [Input("accessLevel")]
        public Input<string>? AccessLevel { get; set; }

        /// <summary>
        /// The duration for which the export should be allowed. Should be between 30 &amp; 4294967295 seconds.
        /// </summary>
        [Input("durationInSeconds")]
        public Input<int>? DurationInSeconds { get; set; }

        /// <summary>
        /// The ID of an existing Managed Disk which should be exported. Changing this forces a new resource to be created.
        /// </summary>
        [Input("managedDiskId")]
        public Input<string>? ManagedDiskId { get; set; }

        [Input("sasUrl")]
        private Input<string>? _sasUrl;

        /// <summary>
        /// The computed Shared Access Signature (SAS) of the Managed Disk.
        /// </summary>
        public Input<string>? SasUrl
        {
            get => _sasUrl;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _sasUrl = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public ManagedDiskSasTokenState()
        {
        }
        public static new ManagedDiskSasTokenState Empty => new ManagedDiskSasTokenState();
    }
}
