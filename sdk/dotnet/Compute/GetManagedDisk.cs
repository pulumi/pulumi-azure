// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Compute
{
    public static partial class Invokes
    {
        /// <summary>
        /// Use this data source to access information about an existing Managed Disk.
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/d/managed_disk.html.markdown.
        /// </summary>
        public static Task<GetManagedDiskResult> GetManagedDisk(GetManagedDiskArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetManagedDiskResult>("azure:compute/getManagedDisk:getManagedDisk", args, options.WithVersion());
    }

    public sealed class GetManagedDiskArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the name of the Managed Disk.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<object>? _tags;
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        [Input("zones")]
        private InputList<string>? _zones;
        public InputList<string> Zones
        {
            get => _zones ?? (_zones = new InputList<string>());
            set => _zones = value;
        }

        public GetManagedDiskArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetManagedDiskResult
    {
        public readonly string CreateOption;
        /// <summary>
        /// The number of IOPS allowed for this disk. One operation can transfer between 4k and 256k bytes.
        /// </summary>
        public readonly int DiskIopsReadWrite;
        /// <summary>
        /// The bandwidth allowed for this disk. 
        /// </summary>
        public readonly int DiskMbpsReadWrite;
        /// <summary>
        /// The size of the managed disk in gigabytes.
        /// </summary>
        public readonly int DiskSizeGb;
        public readonly string Name;
        /// <summary>
        /// The operating system for managed disk. Valid values are `Linux` or `Windows`
        /// </summary>
        public readonly string OsType;
        public readonly string ResourceGroupName;
        /// <summary>
        /// ID of an existing managed disk that the current resource was created from.
        /// </summary>
        public readonly string SourceResourceId;
        /// <summary>
        /// The source URI for the managed disk
        /// </summary>
        public readonly string SourceUri;
        /// <summary>
        /// The storage account type for the managed disk.
        /// </summary>
        public readonly string StorageAccountType;
        /// <summary>
        /// A mapping of tags assigned to the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, object> Tags;
        /// <summary>
        /// A collection containing the availability zone the managed disk is allocated in.
        /// </summary>
        public readonly ImmutableArray<string> Zones;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetManagedDiskResult(
            string createOption,
            int diskIopsReadWrite,
            int diskMbpsReadWrite,
            int diskSizeGb,
            string name,
            string osType,
            string resourceGroupName,
            string sourceResourceId,
            string sourceUri,
            string storageAccountType,
            ImmutableDictionary<string, object> tags,
            ImmutableArray<string> zones,
            string id)
        {
            CreateOption = createOption;
            DiskIopsReadWrite = diskIopsReadWrite;
            DiskMbpsReadWrite = diskMbpsReadWrite;
            DiskSizeGb = diskSizeGb;
            Name = name;
            OsType = osType;
            ResourceGroupName = resourceGroupName;
            SourceResourceId = sourceResourceId;
            SourceUri = sourceUri;
            StorageAccountType = storageAccountType;
            Tags = tags;
            Zones = zones;
            Id = id;
        }
    }
}
