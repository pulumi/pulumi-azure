// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Compute
{
    public static class GetManagedDisk
    {
        /// <summary>
        /// Use this data source to access information about an existing Managed Disk.
        /// </summary>
        public static Task<GetManagedDiskResult> InvokeAsync(GetManagedDiskArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetManagedDiskResult>("azure:compute/getManagedDisk:getManagedDisk", args ?? new GetManagedDiskArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Managed Disk.
        /// </summary>
        public static Output<GetManagedDiskResult> Invoke(GetManagedDiskInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetManagedDiskResult>("azure:compute/getManagedDisk:getManagedDisk", args ?? new GetManagedDiskInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetManagedDiskArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the name of the Managed Disk.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the Resource Group where this Managed Disk exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetManagedDiskArgs()
        {
        }
        public static new GetManagedDiskArgs Empty => new GetManagedDiskArgs();
    }

    public sealed class GetManagedDiskInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the name of the Managed Disk.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the Resource Group where this Managed Disk exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetManagedDiskInvokeArgs()
        {
        }
        public static new GetManagedDiskInvokeArgs Empty => new GetManagedDiskInvokeArgs();
    }


    [OutputType]
    public sealed class GetManagedDiskResult
    {
        public readonly string CreateOption;
        /// <summary>
        /// The ID of the disk access resource for using private endpoints on disks.
        /// </summary>
        public readonly string DiskAccessId;
        /// <summary>
        /// The ID of the Disk Encryption Set used to encrypt this Managed Disk.
        /// </summary>
        public readonly string DiskEncryptionSetId;
        /// <summary>
        /// The number of IOPS allowed for this disk, where one operation can transfer between 4k and 256k bytes.
        /// </summary>
        public readonly int DiskIopsReadWrite;
        /// <summary>
        /// The bandwidth allowed for this disk.
        /// </summary>
        public readonly int DiskMbpsReadWrite;
        /// <summary>
        /// The size of the Managed Disk in gigabytes.
        /// </summary>
        public readonly int DiskSizeGb;
        /// <summary>
        /// A `encryption_settings` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetManagedDiskEncryptionSettingResult> EncryptionSettings;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The ID of the source image used for creating this Managed Disk.
        /// </summary>
        public readonly string ImageReferenceId;
        public readonly string Name;
        /// <summary>
        /// Policy for accessing the disk via network.
        /// </summary>
        public readonly string NetworkAccessPolicy;
        /// <summary>
        /// The operating system used for this Managed Disk.
        /// </summary>
        public readonly string OsType;
        public readonly string ResourceGroupName;
        /// <summary>
        /// The ID of an existing Managed Disk which this Disk was created from.
        /// </summary>
        public readonly string SourceResourceId;
        /// <summary>
        /// The Source URI for this Managed Disk.
        /// </summary>
        public readonly string SourceUri;
        /// <summary>
        /// The ID of the Storage Account where the `source_uri` is located.
        /// </summary>
        public readonly string StorageAccountId;
        /// <summary>
        /// The storage account type for the Managed Disk.
        /// </summary>
        public readonly string StorageAccountType;
        /// <summary>
        /// A mapping of tags assigned to the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// A list of Availability Zones where the Managed Disk exists.
        /// </summary>
        public readonly ImmutableArray<string> Zones;

        [OutputConstructor]
        private GetManagedDiskResult(
            string createOption,

            string diskAccessId,

            string diskEncryptionSetId,

            int diskIopsReadWrite,

            int diskMbpsReadWrite,

            int diskSizeGb,

            ImmutableArray<Outputs.GetManagedDiskEncryptionSettingResult> encryptionSettings,

            string id,

            string imageReferenceId,

            string name,

            string networkAccessPolicy,

            string osType,

            string resourceGroupName,

            string sourceResourceId,

            string sourceUri,

            string storageAccountId,

            string storageAccountType,

            ImmutableDictionary<string, string> tags,

            ImmutableArray<string> zones)
        {
            CreateOption = createOption;
            DiskAccessId = diskAccessId;
            DiskEncryptionSetId = diskEncryptionSetId;
            DiskIopsReadWrite = diskIopsReadWrite;
            DiskMbpsReadWrite = diskMbpsReadWrite;
            DiskSizeGb = diskSizeGb;
            EncryptionSettings = encryptionSettings;
            Id = id;
            ImageReferenceId = imageReferenceId;
            Name = name;
            NetworkAccessPolicy = networkAccessPolicy;
            OsType = osType;
            ResourceGroupName = resourceGroupName;
            SourceResourceId = sourceResourceId;
            SourceUri = sourceUri;
            StorageAccountId = storageAccountId;
            StorageAccountType = storageAccountType;
            Tags = tags;
            Zones = zones;
        }
    }
}
