// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Compute
{
    public static partial class Invokes
    {
        /// <summary>
        /// Use this data source to access information about an existing Managed Disk.
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/d/managed_disk.html.markdown.
        /// </summary>
        public static Task<GetManagedDiskResult> GetManagedDisk(GetManagedDiskArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetManagedDiskResult>("azure:compute/getManagedDisk:getManagedDisk", args ?? InvokeArgs.Empty, options.WithVersion());
    }

    public sealed class GetManagedDiskArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the name of the Managed Disk.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the Resource Group where this Managed Disk exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private Dictionary<string, string>? _tags;
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        [Input("zones")]
        private List<string>? _zones;
        public List<string> Zones
        {
            get => _zones ?? (_zones = new List<string>());
            set => _zones = value;
        }

        public GetManagedDiskArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetManagedDiskResult
    {
        public readonly string CreateOption;
        /// <summary>
        /// The ID of the Disk Encryption Set used to encrypt this Managed Disk.
        /// </summary>
        public readonly string DiskEncryptionSetId;
        /// <summary>
        /// The number of IOPS allowed for this disk, where one operation can transfer between 4k and 256k bytes.
        /// </summary>
        public readonly int DiskIopsReadWrite;
        /// <summary>
        /// The bandwidth allowed for this disk.
        /// </summary>
        public readonly int DiskMbpsReadWrite;
        /// <summary>
        /// The size of the Managed Disk in gigabytes.
        /// </summary>
        public readonly int DiskSizeGb;
        public readonly string Name;
        /// <summary>
        /// The operating system used for this Managed Disk.
        /// </summary>
        public readonly string OsType;
        public readonly string ResourceGroupName;
        /// <summary>
        /// The ID of an existing Managed Disk which this Disk was created from.
        /// </summary>
        public readonly string SourceResourceId;
        /// <summary>
        /// The Source URI for this Managed Disk.
        /// </summary>
        public readonly string SourceUri;
        /// <summary>
        /// The ID of the Storage Account where the `source_uri` is located.
        /// </summary>
        public readonly string StorageAccountId;
        /// <summary>
        /// The storage account type for the Managed Disk.
        /// </summary>
        public readonly string StorageAccountType;
        /// <summary>
        /// A mapping of tags assigned to the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// A list of Availability Zones where the Managed Disk exists.
        /// </summary>
        public readonly ImmutableArray<string> Zones;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetManagedDiskResult(
            string createOption,
            string diskEncryptionSetId,
            int diskIopsReadWrite,
            int diskMbpsReadWrite,
            int diskSizeGb,
            string name,
            string osType,
            string resourceGroupName,
            string sourceResourceId,
            string sourceUri,
            string storageAccountId,
            string storageAccountType,
            ImmutableDictionary<string, string> tags,
            ImmutableArray<string> zones,
            string id)
        {
            CreateOption = createOption;
            DiskEncryptionSetId = diskEncryptionSetId;
            DiskIopsReadWrite = diskIopsReadWrite;
            DiskMbpsReadWrite = diskMbpsReadWrite;
            DiskSizeGb = diskSizeGb;
            Name = name;
            OsType = osType;
            ResourceGroupName = resourceGroupName;
            SourceResourceId = sourceResourceId;
            SourceUri = sourceUri;
            StorageAccountId = storageAccountId;
            StorageAccountType = storageAccountType;
            Tags = tags;
            Zones = zones;
            Id = id;
        }
    }
}
