// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Compute
{
    public static class GetManagedDisk
    {
        /// <summary>
        /// Use this data source to access information about an existing Managed Disk.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var existing = Output.Create(Azure.Compute.GetManagedDisk.InvokeAsync(new Azure.Compute.GetManagedDiskArgs
        ///         {
        ///             Name = "example-datadisk",
        ///             ResourceGroupName = "example-resources",
        ///         }));
        ///         this.Id = existing.Apply(existing =&gt; existing.Id);
        ///     }
        /// 
        ///     [Output("id")]
        ///     public Output&lt;string&gt; Id { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetManagedDiskResult> InvokeAsync(GetManagedDiskArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetManagedDiskResult>("azure:compute/getManagedDisk:getManagedDisk", args ?? new GetManagedDiskArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Managed Disk.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var existing = Output.Create(Azure.Compute.GetManagedDisk.InvokeAsync(new Azure.Compute.GetManagedDiskArgs
        ///         {
        ///             Name = "example-datadisk",
        ///             ResourceGroupName = "example-resources",
        ///         }));
        ///         this.Id = existing.Apply(existing =&gt; existing.Id);
        ///     }
        /// 
        ///     [Output("id")]
        ///     public Output&lt;string&gt; Id { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetManagedDiskResult> Invoke(GetManagedDiskInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetManagedDiskResult>("azure:compute/getManagedDisk:getManagedDisk", args ?? new GetManagedDiskInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetManagedDiskArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the name of the Managed Disk.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the Resource Group where this Managed Disk exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// A mapping of tags assigned to the resource.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetManagedDiskArgs()
        {
        }
    }

    public sealed class GetManagedDiskInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the name of the Managed Disk.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the Resource Group where this Managed Disk exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags assigned to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetManagedDiskInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetManagedDiskResult
    {
        public readonly string CreateOption;
        /// <summary>
        /// The ID of the Disk Encryption Set used to encrypt this Managed Disk.
        /// </summary>
        public readonly string DiskEncryptionSetId;
        /// <summary>
        /// The number of IOPS allowed for this disk, where one operation can transfer between 4k and 256k bytes.
        /// </summary>
        public readonly int DiskIopsReadWrite;
        /// <summary>
        /// The bandwidth allowed for this disk.
        /// </summary>
        public readonly int DiskMbpsReadWrite;
        /// <summary>
        /// The size of the Managed Disk in gigabytes.
        /// </summary>
        public readonly int DiskSizeGb;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The ID of the source image used for creating this Managed Disk.
        /// </summary>
        public readonly string ImageReferenceId;
        public readonly string Name;
        /// <summary>
        /// The operating system used for this Managed Disk.
        /// </summary>
        public readonly string OsType;
        public readonly string ResourceGroupName;
        /// <summary>
        /// The ID of an existing Managed Disk which this Disk was created from.
        /// </summary>
        public readonly string SourceResourceId;
        /// <summary>
        /// The Source URI for this Managed Disk.
        /// </summary>
        public readonly string SourceUri;
        /// <summary>
        /// The ID of the Storage Account where the `source_uri` is located.
        /// </summary>
        public readonly string StorageAccountId;
        /// <summary>
        /// The storage account type for the Managed Disk.
        /// </summary>
        public readonly string StorageAccountType;
        /// <summary>
        /// A mapping of tags assigned to the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// A list of Availability Zones where the Managed Disk exists.
        /// </summary>
        public readonly ImmutableArray<string> Zones;

        [OutputConstructor]
        private GetManagedDiskResult(
            string createOption,

            string diskEncryptionSetId,

            int diskIopsReadWrite,

            int diskMbpsReadWrite,

            int diskSizeGb,

            string id,

            string imageReferenceId,

            string name,

            string osType,

            string resourceGroupName,

            string sourceResourceId,

            string sourceUri,

            string storageAccountId,

            string storageAccountType,

            ImmutableDictionary<string, string>? tags,

            ImmutableArray<string> zones)
        {
            CreateOption = createOption;
            DiskEncryptionSetId = diskEncryptionSetId;
            DiskIopsReadWrite = diskIopsReadWrite;
            DiskMbpsReadWrite = diskMbpsReadWrite;
            DiskSizeGb = diskSizeGb;
            Id = id;
            ImageReferenceId = imageReferenceId;
            Name = name;
            OsType = osType;
            ResourceGroupName = resourceGroupName;
            SourceResourceId = sourceResourceId;
            SourceUri = sourceUri;
            StorageAccountId = storageAccountId;
            StorageAccountType = storageAccountType;
            Tags = tags;
            Zones = zones;
        }
    }
}
