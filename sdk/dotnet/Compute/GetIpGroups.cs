// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Compute
{
    [Obsolete(@"azure.compute/getipgroups.getIpGroups has been deprecated in favor of azure.network/getipgroups.getIpGroups")]
    public static class GetIpGroups
    {
        /// <summary>
        /// Use this data source to access information about existing IP Groups.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Network.GetIpGroups.Invoke(new()
        ///     {
        ///         Name = "existing",
        ///         ResourceGroupName = "existing",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getIpGroupsResult =&gt; getIpGroupsResult.Id),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetIpGroupsResult> InvokeAsync(GetIpGroupsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetIpGroupsResult>("azure:compute/getIpGroups:getIpGroups", args ?? new GetIpGroupsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about existing IP Groups.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Network.GetIpGroups.Invoke(new()
        ///     {
        ///         Name = "existing",
        ///         ResourceGroupName = "existing",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getIpGroupsResult =&gt; getIpGroupsResult.Id),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetIpGroupsResult> Invoke(GetIpGroupsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetIpGroupsResult>("azure:compute/getIpGroups:getIpGroups", args ?? new GetIpGroupsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIpGroupsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A substring to match some number of IP Groups.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the IP Groups exist.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetIpGroupsArgs()
        {
        }
        public static new GetIpGroupsArgs Empty => new GetIpGroupsArgs();
    }

    public sealed class GetIpGroupsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A substring to match some number of IP Groups.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the IP Groups exist.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetIpGroupsInvokeArgs()
        {
        }
        public static new GetIpGroupsInvokeArgs Empty => new GetIpGroupsInvokeArgs();
    }


    [OutputType]
    public sealed class GetIpGroupsResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A list of IP Group IDs.
        /// </summary>
        public readonly ImmutableArray<string> Ids;
        public readonly string Location;
        public readonly string Name;
        /// <summary>
        /// A list of IP Group Names.
        /// </summary>
        public readonly ImmutableArray<string> Names;
        public readonly string ResourceGroupName;
        public readonly ImmutableDictionary<string, string> Tags;

        [OutputConstructor]
        private GetIpGroupsResult(
            string id,

            ImmutableArray<string> ids,

            string location,

            string name,

            ImmutableArray<string> names,

            string resourceGroupName,

            ImmutableDictionary<string, string> tags)
        {
            Id = id;
            Ids = ids;
            Location = location;
            Name = name;
            Names = names;
            ResourceGroupName = resourceGroupName;
            Tags = tags;
        }
    }
}
