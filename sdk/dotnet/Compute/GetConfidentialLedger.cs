// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Compute
{
    public static class GetConfidentialLedger
    {
        /// <summary>
        /// Gets information about an existing Confidential Ledger.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var current = Azure.Compute.GetConfidentialLedger.Invoke(new()
        ///     {
        ///         Name = "example-ledger",
        ///         ResourceGroupName = "example-resources",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["ledgerEndpoint"] = current.Apply(getConfidentialLedgerResult =&gt; getConfidentialLedgerResult.LedgerEndpoint),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetConfidentialLedgerResult> InvokeAsync(GetConfidentialLedgerArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetConfidentialLedgerResult>("azure:compute/getConfidentialLedger:getConfidentialLedger", args ?? new GetConfidentialLedgerArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about an existing Confidential Ledger.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var current = Azure.Compute.GetConfidentialLedger.Invoke(new()
        ///     {
        ///         Name = "example-ledger",
        ///         ResourceGroupName = "example-resources",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["ledgerEndpoint"] = current.Apply(getConfidentialLedgerResult =&gt; getConfidentialLedgerResult.LedgerEndpoint),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetConfidentialLedgerResult> Invoke(GetConfidentialLedgerInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetConfidentialLedgerResult>("azure:compute/getConfidentialLedger:getConfidentialLedger", args ?? new GetConfidentialLedgerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetConfidentialLedgerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the name of this Confidential Ledger.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the Resource Group where this Confidential Ledger exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetConfidentialLedgerArgs()
        {
        }
        public static new GetConfidentialLedgerArgs Empty => new GetConfidentialLedgerArgs();
    }

    public sealed class GetConfidentialLedgerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the name of this Confidential Ledger.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the Resource Group where this Confidential Ledger exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetConfidentialLedgerInvokeArgs()
        {
        }
        public static new GetConfidentialLedgerInvokeArgs Empty => new GetConfidentialLedgerInvokeArgs();
    }


    [OutputType]
    public sealed class GetConfidentialLedgerResult
    {
        public readonly ImmutableArray<Outputs.GetConfidentialLedgerAzureadBasedServicePrincipalResult> AzureadBasedServicePrincipals;
        public readonly ImmutableArray<Outputs.GetConfidentialLedgerCertificateBasedSecurityPrincipalResult> CertificateBasedSecurityPrincipals;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The Identity Service Endpoint for this Confidential Ledger.
        /// </summary>
        public readonly string IdentityServiceEndpoint;
        /// <summary>
        /// The Endpoint for this Confidential Ledger.
        /// </summary>
        public readonly string LedgerEndpoint;
        /// <summary>
        /// The type of Confidential Ledger.
        /// </summary>
        public readonly string LedgerType;
        /// <summary>
        /// The supported Azure location where the Confidential Ledger exists.
        /// </summary>
        public readonly string Location;
        public readonly string Name;
        public readonly string ResourceGroupName;
        /// <summary>
        /// A mapping of tags to assign to the Confidential Ledger.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;

        [OutputConstructor]
        private GetConfidentialLedgerResult(
            ImmutableArray<Outputs.GetConfidentialLedgerAzureadBasedServicePrincipalResult> azureadBasedServicePrincipals,

            ImmutableArray<Outputs.GetConfidentialLedgerCertificateBasedSecurityPrincipalResult> certificateBasedSecurityPrincipals,

            string id,

            string identityServiceEndpoint,

            string ledgerEndpoint,

            string ledgerType,

            string location,

            string name,

            string resourceGroupName,

            ImmutableDictionary<string, string> tags)
        {
            AzureadBasedServicePrincipals = azureadBasedServicePrincipals;
            CertificateBasedSecurityPrincipals = certificateBasedSecurityPrincipals;
            Id = id;
            IdentityServiceEndpoint = identityServiceEndpoint;
            LedgerEndpoint = ledgerEndpoint;
            LedgerType = ledgerType;
            Location = location;
            Name = name;
            ResourceGroupName = resourceGroupName;
            Tags = tags;
        }
    }
}
