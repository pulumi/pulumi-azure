// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Compute
{
    /// <summary>
    /// Manages a virtual machine scale set.
    /// 
    /// ##Â Disclaimers
    /// 
    /// &gt; **Note:** The `azure.compute.ScaleSet` resource has been superseded by the `azure.compute.LinuxVirtualMachineScaleSet` and `azure.compute.WindowsVirtualMachineScaleSet` resources. The existing `azure.compute.ScaleSet` resource will continue to be available throughout the 2.x releases however is in a feature-frozen state to maintain compatibility - new functionality will instead be added to the `azure.compute.LinuxVirtualMachineScaleSet` and `azure.compute.WindowsVirtualMachineScaleSet` resources.
    /// 
    /// ## Example Usage
    /// ### With Managed Disks (Recommended)
    /// 
    /// ```csharp
    /// using System.IO;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new Azure.Core.ResourceGroupArgs
    ///         {
    ///             Location = "West US 2",
    ///         });
    ///         var exampleVirtualNetwork = new Azure.Network.VirtualNetwork("exampleVirtualNetwork", new Azure.Network.VirtualNetworkArgs
    ///         {
    ///             AddressSpaces = 
    ///             {
    ///                 "10.0.0.0/16",
    ///             },
    ///             Location = exampleResourceGroup.Location,
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///         });
    ///         var exampleSubnet = new Azure.Network.Subnet("exampleSubnet", new Azure.Network.SubnetArgs
    ///         {
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             VirtualNetworkName = exampleVirtualNetwork.Name,
    ///             AddressPrefixes = 
    ///             {
    ///                 "10.0.2.0/24",
    ///             },
    ///         });
    ///         var examplePublicIp = new Azure.Network.PublicIp("examplePublicIp", new Azure.Network.PublicIpArgs
    ///         {
    ///             Location = exampleResourceGroup.Location,
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             AllocationMethod = "Static",
    ///             DomainNameLabel = exampleResourceGroup.Name,
    ///             Tags = 
    ///             {
    ///                 { "environment", "staging" },
    ///             },
    ///         });
    ///         var exampleLoadBalancer = new Azure.Lb.LoadBalancer("exampleLoadBalancer", new Azure.Lb.LoadBalancerArgs
    ///         {
    ///             Location = exampleResourceGroup.Location,
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             FrontendIpConfigurations = 
    ///             {
    ///                 new Azure.Lb.Inputs.LoadBalancerFrontendIpConfigurationArgs
    ///                 {
    ///                     Name = "PublicIPAddress",
    ///                     PublicIpAddressId = examplePublicIp.Id,
    ///                 },
    ///             },
    ///         });
    ///         var bpepool = new Azure.Lb.BackendAddressPool("bpepool", new Azure.Lb.BackendAddressPoolArgs
    ///         {
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             LoadbalancerId = exampleLoadBalancer.Id,
    ///         });
    ///         var lbnatpool = new Azure.Lb.NatPool("lbnatpool", new Azure.Lb.NatPoolArgs
    ///         {
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             LoadbalancerId = exampleLoadBalancer.Id,
    ///             Protocol = "Tcp",
    ///             FrontendPortStart = 50000,
    ///             FrontendPortEnd = 50119,
    ///             BackendPort = 22,
    ///             FrontendIpConfigurationName = "PublicIPAddress",
    ///         });
    ///         var exampleProbe = new Azure.Lb.Probe("exampleProbe", new Azure.Lb.ProbeArgs
    ///         {
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             LoadbalancerId = exampleLoadBalancer.Id,
    ///             Protocol = "Http",
    ///             RequestPath = "/health",
    ///             Port = 8080,
    ///         });
    ///         var exampleScaleSet = new Azure.Compute.ScaleSet("exampleScaleSet", new Azure.Compute.ScaleSetArgs
    ///         {
    ///             Location = exampleResourceGroup.Location,
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             AutomaticOsUpgrade = true,
    ///             UpgradePolicyMode = "Rolling",
    ///             RollingUpgradePolicy = new Azure.Compute.Inputs.ScaleSetRollingUpgradePolicyArgs
    ///             {
    ///                 MaxBatchInstancePercent = 20,
    ///                 MaxUnhealthyInstancePercent = 20,
    ///                 MaxUnhealthyUpgradedInstancePercent = 5,
    ///                 PauseTimeBetweenBatches = "PT0S",
    ///             },
    ///             HealthProbeId = exampleProbe.Id,
    ///             Sku = new Azure.Compute.Inputs.ScaleSetSkuArgs
    ///             {
    ///                 Name = "Standard_F2",
    ///                 Tier = "Standard",
    ///                 Capacity = 2,
    ///             },
    ///             StorageProfileImageReference = new Azure.Compute.Inputs.ScaleSetStorageProfileImageReferenceArgs
    ///             {
    ///                 Publisher = "Canonical",
    ///                 Offer = "UbuntuServer",
    ///                 Sku = "16.04-LTS",
    ///                 Version = "latest",
    ///             },
    ///             StorageProfileOsDisk = new Azure.Compute.Inputs.ScaleSetStorageProfileOsDiskArgs
    ///             {
    ///                 Name = "",
    ///                 Caching = "ReadWrite",
    ///                 CreateOption = "FromImage",
    ///                 ManagedDiskType = "Standard_LRS",
    ///             },
    ///             StorageProfileDataDisks = 
    ///             {
    ///                 new Azure.Compute.Inputs.ScaleSetStorageProfileDataDiskArgs
    ///                 {
    ///                     Lun = 0,
    ///                     Caching = "ReadWrite",
    ///                     CreateOption = "Empty",
    ///                     DiskSizeGb = 10,
    ///                 },
    ///             },
    ///             OsProfile = new Azure.Compute.Inputs.ScaleSetOsProfileArgs
    ///             {
    ///                 ComputerNamePrefix = "testvm",
    ///                 AdminUsername = "myadmin",
    ///             },
    ///             OsProfileLinuxConfig = new Azure.Compute.Inputs.ScaleSetOsProfileLinuxConfigArgs
    ///             {
    ///                 DisablePasswordAuthentication = true,
    ///                 SshKeys = 
    ///                 {
    ///                     new Azure.Compute.Inputs.ScaleSetOsProfileLinuxConfigSshKeyArgs
    ///                     {
    ///                         Path = "/home/myadmin/.ssh/authorized_keys",
    ///                         KeyData = File.ReadAllText("~/.ssh/demo_key.pub"),
    ///                     },
    ///                 },
    ///             },
    ///             NetworkProfiles = 
    ///             {
    ///                 new Azure.Compute.Inputs.ScaleSetNetworkProfileArgs
    ///                 {
    ///                     Name = "mynetworkprofile",
    ///                     Primary = true,
    ///                     IpConfigurations = 
    ///                     {
    ///                         new Azure.Compute.Inputs.ScaleSetNetworkProfileIpConfigurationArgs
    ///                         {
    ///                             Name = "TestIPConfiguration",
    ///                             Primary = true,
    ///                             SubnetId = exampleSubnet.Id,
    ///                             LoadBalancerBackendAddressPoolIds = 
    ///                             {
    ///                                 bpepool.Id,
    ///                             },
    ///                             LoadBalancerInboundNatRulesIds = 
    ///                             {
    ///                                 lbnatpool.Id,
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             Tags = 
    ///             {
    ///                 { "environment", "staging" },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### With Unmanaged Disks
    /// 
    /// ```csharp
    /// using System.IO;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new Azure.Core.ResourceGroupArgs
    ///         {
    ///             Location = "West US",
    ///         });
    ///         var exampleVirtualNetwork = new Azure.Network.VirtualNetwork("exampleVirtualNetwork", new Azure.Network.VirtualNetworkArgs
    ///         {
    ///             AddressSpaces = 
    ///             {
    ///                 "10.0.0.0/16",
    ///             },
    ///             Location = "West US",
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///         });
    ///         var exampleSubnet = new Azure.Network.Subnet("exampleSubnet", new Azure.Network.SubnetArgs
    ///         {
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             VirtualNetworkName = exampleVirtualNetwork.Name,
    ///             AddressPrefixes = 
    ///             {
    ///                 "10.0.2.0/24",
    ///             },
    ///         });
    ///         var exampleAccount = new Azure.Storage.Account("exampleAccount", new Azure.Storage.AccountArgs
    ///         {
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             Location = "westus",
    ///             AccountTier = "Standard",
    ///             AccountReplicationType = "LRS",
    ///             Tags = 
    ///             {
    ///                 { "environment", "staging" },
    ///             },
    ///         });
    ///         var exampleContainer = new Azure.Storage.Container("exampleContainer", new Azure.Storage.ContainerArgs
    ///         {
    ///             StorageAccountName = exampleAccount.Name,
    ///             ContainerAccessType = "private",
    ///         });
    ///         var exampleScaleSet = new Azure.Compute.ScaleSet("exampleScaleSet", new Azure.Compute.ScaleSetArgs
    ///         {
    ///             Location = "West US",
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             UpgradePolicyMode = "Manual",
    ///             Sku = new Azure.Compute.Inputs.ScaleSetSkuArgs
    ///             {
    ///                 Name = "Standard_F2",
    ///                 Tier = "Standard",
    ///                 Capacity = 2,
    ///             },
    ///             OsProfile = new Azure.Compute.Inputs.ScaleSetOsProfileArgs
    ///             {
    ///                 ComputerNamePrefix = "testvm",
    ///                 AdminUsername = "myadmin",
    ///             },
    ///             OsProfileLinuxConfig = new Azure.Compute.Inputs.ScaleSetOsProfileLinuxConfigArgs
    ///             {
    ///                 DisablePasswordAuthentication = true,
    ///                 SshKeys = 
    ///                 {
    ///                     new Azure.Compute.Inputs.ScaleSetOsProfileLinuxConfigSshKeyArgs
    ///                     {
    ///                         Path = "/home/myadmin/.ssh/authorized_keys",
    ///                         KeyData = File.ReadAllText("~/.ssh/demo_key.pub"),
    ///                     },
    ///                 },
    ///             },
    ///             NetworkProfiles = 
    ///             {
    ///                 new Azure.Compute.Inputs.ScaleSetNetworkProfileArgs
    ///                 {
    ///                     Name = "TestNetworkProfile",
    ///                     Primary = true,
    ///                     IpConfigurations = 
    ///                     {
    ///                         new Azure.Compute.Inputs.ScaleSetNetworkProfileIpConfigurationArgs
    ///                         {
    ///                             Name = "TestIPConfiguration",
    ///                             Primary = true,
    ///                             SubnetId = exampleSubnet.Id,
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             StorageProfileOsDisk = new Azure.Compute.Inputs.ScaleSetStorageProfileOsDiskArgs
    ///             {
    ///                 Name = "osDiskProfile",
    ///                 Caching = "ReadWrite",
    ///                 CreateOption = "FromImage",
    ///                 VhdContainers = 
    ///                 {
    ///                     Output.Tuple(exampleAccount.PrimaryBlobEndpoint, exampleContainer.Name).Apply(values =&gt;
    ///                     {
    ///                         var primaryBlobEndpoint = values.Item1;
    ///                         var name = values.Item2;
    ///                         return $"{primaryBlobEndpoint}{name}";
    ///                     }),
    ///                 },
    ///             },
    ///             StorageProfileImageReference = new Azure.Compute.Inputs.ScaleSetStorageProfileImageReferenceArgs
    ///             {
    ///                 Publisher = "Canonical",
    ///                 Offer = "UbuntuServer",
    ///                 Sku = "16.04-LTS",
    ///                 Version = "latest",
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ## Example of storage_profile_image_reference with id
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var exampleImage = new Azure.Compute.Image("exampleImage", new Azure.Compute.ImageArgs
    ///         {
    ///         });
    ///         // ...
    ///         var exampleScaleSet = new Azure.Compute.ScaleSet("exampleScaleSet", new Azure.Compute.ScaleSetArgs
    ///         {
    ///             StorageProfileImageReference = new Azure.Compute.Inputs.ScaleSetStorageProfileImageReferenceArgs
    ///             {
    ///                 Id = exampleImage.Id,
    ///             },
    ///         });
    ///         // ...
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Virtual Machine Scale Sets can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:compute/scaleSet:ScaleSet scaleset1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Compute/virtualMachineScaleSets/scaleset1
    /// ```
    /// </summary>
    public partial class ScaleSet : Pulumi.CustomResource
    {
        /// <summary>
        /// Automatic OS patches can be applied by Azure to your scaleset. This is particularly useful when `upgrade_policy_mode` is set to `Rolling`. Defaults to `false`.
        /// </summary>
        [Output("automaticOsUpgrade")]
        public Output<bool?> AutomaticOsUpgrade { get; private set; } = null!;

        /// <summary>
        /// A boot diagnostics profile block as referenced below.
        /// </summary>
        [Output("bootDiagnostics")]
        public Output<Outputs.ScaleSetBootDiagnostics?> BootDiagnostics { get; private set; } = null!;

        /// <summary>
        /// Specifies the eviction policy for Virtual Machines in this Scale Set. Possible values are `Deallocate` and `Delete`.
        /// </summary>
        [Output("evictionPolicy")]
        public Output<string?> EvictionPolicy { get; private set; } = null!;

        /// <summary>
        /// Can be specified multiple times to add extension profiles to the scale set. Each `extension` block supports the fields documented below.
        /// </summary>
        [Output("extensions")]
        public Output<ImmutableArray<Outputs.ScaleSetExtension>> Extensions { get; private set; } = null!;

        /// <summary>
        /// Specifies the identifier for the load balancer health probe. Required when using `Rolling` as your `upgrade_policy_mode`.
        /// </summary>
        [Output("healthProbeId")]
        public Output<string?> HealthProbeId { get; private set; } = null!;

        [Output("identity")]
        public Output<Outputs.ScaleSetIdentity> Identity { get; private set; } = null!;

        /// <summary>
        /// Specifies the Windows OS license type. If supplied, the only allowed values are `Windows_Client` and `Windows_Server`.
        /// </summary>
        [Output("licenseType")]
        public Output<string> LicenseType { get; private set; } = null!;

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the virtual machine scale set resource. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A collection of network profile block as documented below.
        /// </summary>
        [Output("networkProfiles")]
        public Output<ImmutableArray<Outputs.ScaleSetNetworkProfile>> NetworkProfiles { get; private set; } = null!;

        /// <summary>
        /// A Virtual Machine OS Profile block as documented below.
        /// </summary>
        [Output("osProfile")]
        public Output<Outputs.ScaleSetOsProfile> OsProfile { get; private set; } = null!;

        /// <summary>
        /// A Linux config block as documented below.
        /// </summary>
        [Output("osProfileLinuxConfig")]
        public Output<Outputs.ScaleSetOsProfileLinuxConfig> OsProfileLinuxConfig { get; private set; } = null!;

        /// <summary>
        /// A collection of Secret blocks as documented below.
        /// </summary>
        [Output("osProfileSecrets")]
        public Output<ImmutableArray<Outputs.ScaleSetOsProfileSecret>> OsProfileSecrets { get; private set; } = null!;

        /// <summary>
        /// A Windows config block as documented below.
        /// </summary>
        [Output("osProfileWindowsConfig")]
        public Output<Outputs.ScaleSetOsProfileWindowsConfig?> OsProfileWindowsConfig { get; private set; } = null!;

        /// <summary>
        /// Specifies whether the virtual machine scale set should be overprovisioned. Defaults to `true`.
        /// </summary>
        [Output("overprovision")]
        public Output<bool?> Overprovision { get; private set; } = null!;

        /// <summary>
        /// A plan block as documented below.
        /// </summary>
        [Output("plan")]
        public Output<Outputs.ScaleSetPlan?> Plan { get; private set; } = null!;

        /// <summary>
        /// Specifies the priority for the Virtual Machines in the Scale Set. Defaults to `Regular`. Possible values are `Low` and `Regular`.
        /// </summary>
        [Output("priority")]
        public Output<string?> Priority { get; private set; } = null!;

        /// <summary>
        /// The ID of the Proximity Placement Group to which this Virtual Machine should be assigned. Changing this forces a new resource to be created
        /// </summary>
        [Output("proximityPlacementGroupId")]
        public Output<string?> ProximityPlacementGroupId { get; private set; } = null!;

        /// <summary>
        /// The name of the resource group in which to create the virtual machine scale set. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// A `rolling_upgrade_policy` block as defined below. This is only applicable when the `upgrade_policy_mode` is `Rolling`.
        /// </summary>
        [Output("rollingUpgradePolicy")]
        public Output<Outputs.ScaleSetRollingUpgradePolicy?> RollingUpgradePolicy { get; private set; } = null!;

        /// <summary>
        /// Specifies whether the scale set is limited to a single placement group with a maximum size of 100 virtual machines. If set to false, managed disks must be used. Default is true. Changing this forces a new resource to be created. See [documentation](http://docs.microsoft.com/en-us/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-placement-groups) for more information.
        /// </summary>
        [Output("singlePlacementGroup")]
        public Output<bool?> SinglePlacementGroup { get; private set; } = null!;

        /// <summary>
        /// A sku block as documented below.
        /// </summary>
        [Output("sku")]
        public Output<Outputs.ScaleSetSku> Sku { get; private set; } = null!;

        /// <summary>
        /// A storage profile data disk block as documented below
        /// </summary>
        [Output("storageProfileDataDisks")]
        public Output<ImmutableArray<Outputs.ScaleSetStorageProfileDataDisk>> StorageProfileDataDisks { get; private set; } = null!;

        /// <summary>
        /// A storage profile image reference block as documented below.
        /// </summary>
        [Output("storageProfileImageReference")]
        public Output<Outputs.ScaleSetStorageProfileImageReference> StorageProfileImageReference { get; private set; } = null!;

        /// <summary>
        /// A storage profile os disk block as documented below
        /// </summary>
        [Output("storageProfileOsDisk")]
        public Output<Outputs.ScaleSetStorageProfileOsDisk> StorageProfileOsDisk { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Specifies the mode of an upgrade to virtual machines in the scale set. Possible values, `Rolling`, `Manual`, or `Automatic`. When choosing `Rolling`, you will need to set a health probe.
        /// </summary>
        [Output("upgradePolicyMode")]
        public Output<string> UpgradePolicyMode { get; private set; } = null!;

        /// <summary>
        /// A collection of availability zones to spread the Virtual Machines over.
        /// </summary>
        [Output("zones")]
        public Output<ImmutableArray<string>> Zones { get; private set; } = null!;


        /// <summary>
        /// Create a ScaleSet resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ScaleSet(string name, ScaleSetArgs args, CustomResourceOptions? options = null)
            : base("azure:compute/scaleSet:ScaleSet", name, args ?? new ScaleSetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ScaleSet(string name, Input<string> id, ScaleSetState? state = null, CustomResourceOptions? options = null)
            : base("azure:compute/scaleSet:ScaleSet", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ScaleSet resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ScaleSet Get(string name, Input<string> id, ScaleSetState? state = null, CustomResourceOptions? options = null)
        {
            return new ScaleSet(name, id, state, options);
        }
    }

    public sealed class ScaleSetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Automatic OS patches can be applied by Azure to your scaleset. This is particularly useful when `upgrade_policy_mode` is set to `Rolling`. Defaults to `false`.
        /// </summary>
        [Input("automaticOsUpgrade")]
        public Input<bool>? AutomaticOsUpgrade { get; set; }

        /// <summary>
        /// A boot diagnostics profile block as referenced below.
        /// </summary>
        [Input("bootDiagnostics")]
        public Input<Inputs.ScaleSetBootDiagnosticsArgs>? BootDiagnostics { get; set; }

        /// <summary>
        /// Specifies the eviction policy for Virtual Machines in this Scale Set. Possible values are `Deallocate` and `Delete`.
        /// </summary>
        [Input("evictionPolicy")]
        public Input<string>? EvictionPolicy { get; set; }

        [Input("extensions")]
        private InputList<Inputs.ScaleSetExtensionArgs>? _extensions;

        /// <summary>
        /// Can be specified multiple times to add extension profiles to the scale set. Each `extension` block supports the fields documented below.
        /// </summary>
        public InputList<Inputs.ScaleSetExtensionArgs> Extensions
        {
            get => _extensions ?? (_extensions = new InputList<Inputs.ScaleSetExtensionArgs>());
            set => _extensions = value;
        }

        /// <summary>
        /// Specifies the identifier for the load balancer health probe. Required when using `Rolling` as your `upgrade_policy_mode`.
        /// </summary>
        [Input("healthProbeId")]
        public Input<string>? HealthProbeId { get; set; }

        [Input("identity")]
        public Input<Inputs.ScaleSetIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// Specifies the Windows OS license type. If supplied, the only allowed values are `Windows_Client` and `Windows_Server`.
        /// </summary>
        [Input("licenseType")]
        public Input<string>? LicenseType { get; set; }

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Specifies the name of the virtual machine scale set resource. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networkProfiles", required: true)]
        private InputList<Inputs.ScaleSetNetworkProfileArgs>? _networkProfiles;

        /// <summary>
        /// A collection of network profile block as documented below.
        /// </summary>
        public InputList<Inputs.ScaleSetNetworkProfileArgs> NetworkProfiles
        {
            get => _networkProfiles ?? (_networkProfiles = new InputList<Inputs.ScaleSetNetworkProfileArgs>());
            set => _networkProfiles = value;
        }

        /// <summary>
        /// A Virtual Machine OS Profile block as documented below.
        /// </summary>
        [Input("osProfile", required: true)]
        public Input<Inputs.ScaleSetOsProfileArgs> OsProfile { get; set; } = null!;

        /// <summary>
        /// A Linux config block as documented below.
        /// </summary>
        [Input("osProfileLinuxConfig")]
        public Input<Inputs.ScaleSetOsProfileLinuxConfigArgs>? OsProfileLinuxConfig { get; set; }

        [Input("osProfileSecrets")]
        private InputList<Inputs.ScaleSetOsProfileSecretArgs>? _osProfileSecrets;

        /// <summary>
        /// A collection of Secret blocks as documented below.
        /// </summary>
        public InputList<Inputs.ScaleSetOsProfileSecretArgs> OsProfileSecrets
        {
            get => _osProfileSecrets ?? (_osProfileSecrets = new InputList<Inputs.ScaleSetOsProfileSecretArgs>());
            set => _osProfileSecrets = value;
        }

        /// <summary>
        /// A Windows config block as documented below.
        /// </summary>
        [Input("osProfileWindowsConfig")]
        public Input<Inputs.ScaleSetOsProfileWindowsConfigArgs>? OsProfileWindowsConfig { get; set; }

        /// <summary>
        /// Specifies whether the virtual machine scale set should be overprovisioned. Defaults to `true`.
        /// </summary>
        [Input("overprovision")]
        public Input<bool>? Overprovision { get; set; }

        /// <summary>
        /// A plan block as documented below.
        /// </summary>
        [Input("plan")]
        public Input<Inputs.ScaleSetPlanArgs>? Plan { get; set; }

        /// <summary>
        /// Specifies the priority for the Virtual Machines in the Scale Set. Defaults to `Regular`. Possible values are `Low` and `Regular`.
        /// </summary>
        [Input("priority")]
        public Input<string>? Priority { get; set; }

        /// <summary>
        /// The ID of the Proximity Placement Group to which this Virtual Machine should be assigned. Changing this forces a new resource to be created
        /// </summary>
        [Input("proximityPlacementGroupId")]
        public Input<string>? ProximityPlacementGroupId { get; set; }

        /// <summary>
        /// The name of the resource group in which to create the virtual machine scale set. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// A `rolling_upgrade_policy` block as defined below. This is only applicable when the `upgrade_policy_mode` is `Rolling`.
        /// </summary>
        [Input("rollingUpgradePolicy")]
        public Input<Inputs.ScaleSetRollingUpgradePolicyArgs>? RollingUpgradePolicy { get; set; }

        /// <summary>
        /// Specifies whether the scale set is limited to a single placement group with a maximum size of 100 virtual machines. If set to false, managed disks must be used. Default is true. Changing this forces a new resource to be created. See [documentation](http://docs.microsoft.com/en-us/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-placement-groups) for more information.
        /// </summary>
        [Input("singlePlacementGroup")]
        public Input<bool>? SinglePlacementGroup { get; set; }

        /// <summary>
        /// A sku block as documented below.
        /// </summary>
        [Input("sku", required: true)]
        public Input<Inputs.ScaleSetSkuArgs> Sku { get; set; } = null!;

        [Input("storageProfileDataDisks")]
        private InputList<Inputs.ScaleSetStorageProfileDataDiskArgs>? _storageProfileDataDisks;

        /// <summary>
        /// A storage profile data disk block as documented below
        /// </summary>
        public InputList<Inputs.ScaleSetStorageProfileDataDiskArgs> StorageProfileDataDisks
        {
            get => _storageProfileDataDisks ?? (_storageProfileDataDisks = new InputList<Inputs.ScaleSetStorageProfileDataDiskArgs>());
            set => _storageProfileDataDisks = value;
        }

        /// <summary>
        /// A storage profile image reference block as documented below.
        /// </summary>
        [Input("storageProfileImageReference")]
        public Input<Inputs.ScaleSetStorageProfileImageReferenceArgs>? StorageProfileImageReference { get; set; }

        /// <summary>
        /// A storage profile os disk block as documented below
        /// </summary>
        [Input("storageProfileOsDisk", required: true)]
        public Input<Inputs.ScaleSetStorageProfileOsDiskArgs> StorageProfileOsDisk { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Specifies the mode of an upgrade to virtual machines in the scale set. Possible values, `Rolling`, `Manual`, or `Automatic`. When choosing `Rolling`, you will need to set a health probe.
        /// </summary>
        [Input("upgradePolicyMode", required: true)]
        public Input<string> UpgradePolicyMode { get; set; } = null!;

        [Input("zones")]
        private InputList<string>? _zones;

        /// <summary>
        /// A collection of availability zones to spread the Virtual Machines over.
        /// </summary>
        public InputList<string> Zones
        {
            get => _zones ?? (_zones = new InputList<string>());
            set => _zones = value;
        }

        public ScaleSetArgs()
        {
        }
    }

    public sealed class ScaleSetState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Automatic OS patches can be applied by Azure to your scaleset. This is particularly useful when `upgrade_policy_mode` is set to `Rolling`. Defaults to `false`.
        /// </summary>
        [Input("automaticOsUpgrade")]
        public Input<bool>? AutomaticOsUpgrade { get; set; }

        /// <summary>
        /// A boot diagnostics profile block as referenced below.
        /// </summary>
        [Input("bootDiagnostics")]
        public Input<Inputs.ScaleSetBootDiagnosticsGetArgs>? BootDiagnostics { get; set; }

        /// <summary>
        /// Specifies the eviction policy for Virtual Machines in this Scale Set. Possible values are `Deallocate` and `Delete`.
        /// </summary>
        [Input("evictionPolicy")]
        public Input<string>? EvictionPolicy { get; set; }

        [Input("extensions")]
        private InputList<Inputs.ScaleSetExtensionGetArgs>? _extensions;

        /// <summary>
        /// Can be specified multiple times to add extension profiles to the scale set. Each `extension` block supports the fields documented below.
        /// </summary>
        public InputList<Inputs.ScaleSetExtensionGetArgs> Extensions
        {
            get => _extensions ?? (_extensions = new InputList<Inputs.ScaleSetExtensionGetArgs>());
            set => _extensions = value;
        }

        /// <summary>
        /// Specifies the identifier for the load balancer health probe. Required when using `Rolling` as your `upgrade_policy_mode`.
        /// </summary>
        [Input("healthProbeId")]
        public Input<string>? HealthProbeId { get; set; }

        [Input("identity")]
        public Input<Inputs.ScaleSetIdentityGetArgs>? Identity { get; set; }

        /// <summary>
        /// Specifies the Windows OS license type. If supplied, the only allowed values are `Windows_Client` and `Windows_Server`.
        /// </summary>
        [Input("licenseType")]
        public Input<string>? LicenseType { get; set; }

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Specifies the name of the virtual machine scale set resource. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networkProfiles")]
        private InputList<Inputs.ScaleSetNetworkProfileGetArgs>? _networkProfiles;

        /// <summary>
        /// A collection of network profile block as documented below.
        /// </summary>
        public InputList<Inputs.ScaleSetNetworkProfileGetArgs> NetworkProfiles
        {
            get => _networkProfiles ?? (_networkProfiles = new InputList<Inputs.ScaleSetNetworkProfileGetArgs>());
            set => _networkProfiles = value;
        }

        /// <summary>
        /// A Virtual Machine OS Profile block as documented below.
        /// </summary>
        [Input("osProfile")]
        public Input<Inputs.ScaleSetOsProfileGetArgs>? OsProfile { get; set; }

        /// <summary>
        /// A Linux config block as documented below.
        /// </summary>
        [Input("osProfileLinuxConfig")]
        public Input<Inputs.ScaleSetOsProfileLinuxConfigGetArgs>? OsProfileLinuxConfig { get; set; }

        [Input("osProfileSecrets")]
        private InputList<Inputs.ScaleSetOsProfileSecretGetArgs>? _osProfileSecrets;

        /// <summary>
        /// A collection of Secret blocks as documented below.
        /// </summary>
        public InputList<Inputs.ScaleSetOsProfileSecretGetArgs> OsProfileSecrets
        {
            get => _osProfileSecrets ?? (_osProfileSecrets = new InputList<Inputs.ScaleSetOsProfileSecretGetArgs>());
            set => _osProfileSecrets = value;
        }

        /// <summary>
        /// A Windows config block as documented below.
        /// </summary>
        [Input("osProfileWindowsConfig")]
        public Input<Inputs.ScaleSetOsProfileWindowsConfigGetArgs>? OsProfileWindowsConfig { get; set; }

        /// <summary>
        /// Specifies whether the virtual machine scale set should be overprovisioned. Defaults to `true`.
        /// </summary>
        [Input("overprovision")]
        public Input<bool>? Overprovision { get; set; }

        /// <summary>
        /// A plan block as documented below.
        /// </summary>
        [Input("plan")]
        public Input<Inputs.ScaleSetPlanGetArgs>? Plan { get; set; }

        /// <summary>
        /// Specifies the priority for the Virtual Machines in the Scale Set. Defaults to `Regular`. Possible values are `Low` and `Regular`.
        /// </summary>
        [Input("priority")]
        public Input<string>? Priority { get; set; }

        /// <summary>
        /// The ID of the Proximity Placement Group to which this Virtual Machine should be assigned. Changing this forces a new resource to be created
        /// </summary>
        [Input("proximityPlacementGroupId")]
        public Input<string>? ProximityPlacementGroupId { get; set; }

        /// <summary>
        /// The name of the resource group in which to create the virtual machine scale set. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// A `rolling_upgrade_policy` block as defined below. This is only applicable when the `upgrade_policy_mode` is `Rolling`.
        /// </summary>
        [Input("rollingUpgradePolicy")]
        public Input<Inputs.ScaleSetRollingUpgradePolicyGetArgs>? RollingUpgradePolicy { get; set; }

        /// <summary>
        /// Specifies whether the scale set is limited to a single placement group with a maximum size of 100 virtual machines. If set to false, managed disks must be used. Default is true. Changing this forces a new resource to be created. See [documentation](http://docs.microsoft.com/en-us/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-placement-groups) for more information.
        /// </summary>
        [Input("singlePlacementGroup")]
        public Input<bool>? SinglePlacementGroup { get; set; }

        /// <summary>
        /// A sku block as documented below.
        /// </summary>
        [Input("sku")]
        public Input<Inputs.ScaleSetSkuGetArgs>? Sku { get; set; }

        [Input("storageProfileDataDisks")]
        private InputList<Inputs.ScaleSetStorageProfileDataDiskGetArgs>? _storageProfileDataDisks;

        /// <summary>
        /// A storage profile data disk block as documented below
        /// </summary>
        public InputList<Inputs.ScaleSetStorageProfileDataDiskGetArgs> StorageProfileDataDisks
        {
            get => _storageProfileDataDisks ?? (_storageProfileDataDisks = new InputList<Inputs.ScaleSetStorageProfileDataDiskGetArgs>());
            set => _storageProfileDataDisks = value;
        }

        /// <summary>
        /// A storage profile image reference block as documented below.
        /// </summary>
        [Input("storageProfileImageReference")]
        public Input<Inputs.ScaleSetStorageProfileImageReferenceGetArgs>? StorageProfileImageReference { get; set; }

        /// <summary>
        /// A storage profile os disk block as documented below
        /// </summary>
        [Input("storageProfileOsDisk")]
        public Input<Inputs.ScaleSetStorageProfileOsDiskGetArgs>? StorageProfileOsDisk { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Specifies the mode of an upgrade to virtual machines in the scale set. Possible values, `Rolling`, `Manual`, or `Automatic`. When choosing `Rolling`, you will need to set a health probe.
        /// </summary>
        [Input("upgradePolicyMode")]
        public Input<string>? UpgradePolicyMode { get; set; }

        [Input("zones")]
        private InputList<string>? _zones;

        /// <summary>
        /// A collection of availability zones to spread the Virtual Machines over.
        /// </summary>
        public InputList<string> Zones
        {
            get => _zones ?? (_zones = new InputList<string>());
            set => _zones = value;
        }

        public ScaleSetState()
        {
        }
    }
}
