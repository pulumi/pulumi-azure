// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Compute
{
    public static class GetSnapshot
    {
        /// <summary>
        /// Use this data source to access information about an existing Snapshot.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Compute.GetSnapshot.Invoke(new()
        ///     {
        ///         Name = "my-snapshot",
        ///         ResourceGroupName = "my-resource-group",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetSnapshotResult> InvokeAsync(GetSnapshotArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSnapshotResult>("azure:compute/getSnapshot:getSnapshot", args ?? new GetSnapshotArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Snapshot.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Compute.GetSnapshot.Invoke(new()
        ///     {
        ///         Name = "my-snapshot",
        ///         ResourceGroupName = "my-resource-group",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetSnapshotResult> Invoke(GetSnapshotInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSnapshotResult>("azure:compute/getSnapshot:getSnapshot", args ?? new GetSnapshotInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSnapshotArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the name of the Snapshot.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the resource group the Snapshot is located in.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetSnapshotArgs()
        {
        }
        public static new GetSnapshotArgs Empty => new GetSnapshotArgs();
    }

    public sealed class GetSnapshotInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the name of the Snapshot.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the resource group the Snapshot is located in.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetSnapshotInvokeArgs()
        {
        }
        public static new GetSnapshotInvokeArgs Empty => new GetSnapshotInvokeArgs();
    }


    [OutputType]
    public sealed class GetSnapshotResult
    {
        public readonly string CreationOption;
        /// <summary>
        /// The size of the Snapshotted Disk in GB.
        /// </summary>
        public readonly int DiskSizeGb;
        public readonly ImmutableArray<Outputs.GetSnapshotEncryptionSettingResult> EncryptionSettings;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Name;
        public readonly string OsType;
        public readonly string ResourceGroupName;
        /// <summary>
        /// The reference to an existing snapshot.
        /// </summary>
        public readonly string SourceResourceId;
        /// <summary>
        /// The URI to a Managed or Unmanaged Disk.
        /// </summary>
        public readonly string SourceUri;
        /// <summary>
        /// The ID of an storage account.
        /// </summary>
        public readonly string StorageAccountId;
        public readonly string TimeCreated;
        /// <summary>
        /// Whether Trusted Launch is enabled for the Snapshot.
        /// </summary>
        public readonly bool TrustedLaunchEnabled;

        [OutputConstructor]
        private GetSnapshotResult(
            string creationOption,

            int diskSizeGb,

            ImmutableArray<Outputs.GetSnapshotEncryptionSettingResult> encryptionSettings,

            string id,

            string name,

            string osType,

            string resourceGroupName,

            string sourceResourceId,

            string sourceUri,

            string storageAccountId,

            string timeCreated,

            bool trustedLaunchEnabled)
        {
            CreationOption = creationOption;
            DiskSizeGb = diskSizeGb;
            EncryptionSettings = encryptionSettings;
            Id = id;
            Name = name;
            OsType = osType;
            ResourceGroupName = resourceGroupName;
            SourceResourceId = sourceResourceId;
            SourceUri = sourceUri;
            StorageAccountId = storageAccountId;
            TimeCreated = timeCreated;
            TrustedLaunchEnabled = trustedLaunchEnabled;
        }
    }
}
