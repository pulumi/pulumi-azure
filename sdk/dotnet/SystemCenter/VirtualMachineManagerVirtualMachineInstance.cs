// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.SystemCenter
{
    /// <summary>
    /// Manages a System Center Virtual Machine Manager Virtual Machine Instance.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Name = "example-resources",
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleArcMachine = new Azure.ArcMachine.ArcMachine("example", new()
    ///     {
    ///         Name = "example-arcmachine",
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         Kind = "SCVMM",
    ///     });
    /// 
    ///     var exampleVirtualMachineManagerServer = new Azure.SystemCenter.VirtualMachineManagerServer("example", new()
    ///     {
    ///         Name = "example-scvmmms",
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         CustomLocationId = "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.ExtendedLocation/customLocations/customLocation1",
    ///         Fqdn = "example.labtest",
    ///         Username = "testUser",
    ///         Password = "H@Sh1CoR3!",
    ///     });
    /// 
    ///     var example = Azure.SystemCenter.GetVirtualMachineManagerInventoryItems.Invoke(new()
    ///     {
    ///         InventoryType = "Cloud",
    ///         SystemCenterVirtualMachineManagerServerId = exampleVirtualMachineManagerServer.Id,
    ///     });
    /// 
    ///     var exampleVirtualMachineManagerCloud = new Azure.SystemCenter.VirtualMachineManagerCloud("example", new()
    ///     {
    ///         Name = "example-scvmmc",
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         CustomLocationId = exampleVirtualMachineManagerServer.CustomLocationId,
    ///         SystemCenterVirtualMachineManagerServerInventoryItemId = example.Apply(getVirtualMachineManagerInventoryItemsResult =&gt; getVirtualMachineManagerInventoryItemsResult.InventoryItems[0]?.Id),
    ///     });
    /// 
    ///     var example2 = Azure.SystemCenter.GetVirtualMachineManagerInventoryItems.Invoke(new()
    ///     {
    ///         InventoryType = "VirtualMachineTemplate",
    ///         SystemCenterVirtualMachineManagerServerId = exampleVirtualMachineManagerServer.Id,
    ///     });
    /// 
    ///     var exampleVirtualMachineManagerVirtualMachineTemplate = new Azure.SystemCenter.VirtualMachineManagerVirtualMachineTemplate("example", new()
    ///     {
    ///         Name = "example-scvmmvmt",
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         CustomLocationId = exampleVirtualMachineManagerServer.CustomLocationId,
    ///         SystemCenterVirtualMachineManagerServerInventoryItemId = example2.Apply(getVirtualMachineManagerInventoryItemsResult =&gt; getVirtualMachineManagerInventoryItemsResult.InventoryItems[0]?.Id),
    ///     });
    /// 
    ///     var exampleVirtualMachineManagerVirtualMachineInstance = new Azure.SystemCenter.VirtualMachineManagerVirtualMachineInstance("example", new()
    ///     {
    ///         ScopedResourceId = exampleArcMachine.Id,
    ///         CustomLocationId = exampleVirtualMachineManagerServer.CustomLocationId,
    ///         Infrastructure = new Azure.SystemCenter.Inputs.VirtualMachineManagerVirtualMachineInstanceInfrastructureArgs
    ///         {
    ///             SystemCenterVirtualMachineManagerCloudId = exampleVirtualMachineManagerCloud.Id,
    ///             SystemCenterVirtualMachineManagerTemplateId = exampleVirtualMachineManagerVirtualMachineTemplate.Id,
    ///             SystemCenterVirtualMachineManagerVirtualMachineServerId = exampleVirtualMachineManagerServer.Id,
    ///         },
    ///         OperatingSystem = new Azure.SystemCenter.Inputs.VirtualMachineManagerVirtualMachineInstanceOperatingSystemArgs
    ///         {
    ///             ComputerName = "testComputer",
    ///         },
    ///         Hardware = new Azure.SystemCenter.Inputs.VirtualMachineManagerVirtualMachineInstanceHardwareArgs
    ///         {
    ///             CpuCount = 1,
    ///             MemoryInMb = 1024,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## API Providers
    /// 
    /// &lt;!-- This section is generated, changes will be overwritten --&gt;
    /// This resource uses the following Azure API Providers:
    /// 
    /// * `Microsoft.ScVmm` - 2023-10-07
    /// 
    /// ## Import
    /// 
    /// System Center Virtual Machine Manager Virtual Machine Instances can be imported into Pulumi using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:systemcenter/virtualMachineManagerVirtualMachineInstance:VirtualMachineManagerVirtualMachineInstance example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resGroup1/providers/Microsoft.HybridCompute/machines/machine1/providers/Microsoft.ScVmm/virtualMachineInstances/default
    /// ```
    /// </summary>
    [AzureResourceType("azure:systemcenter/virtualMachineManagerVirtualMachineInstance:VirtualMachineManagerVirtualMachineInstance")]
    public partial class VirtualMachineManagerVirtualMachineInstance : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the Custom Location for the System Center Virtual Machine Manager Virtual Machine Instance. Changing this forces a new resource to be created.
        /// </summary>
        [Output("customLocationId")]
        public Output<string> CustomLocationId { get; private set; } = null!;

        /// <summary>
        /// A `hardware` block as defined below. Changing this forces a new resource to be created.
        /// 
        /// &gt; **Note:** This resource will be restarted while updating `hardware`.
        /// </summary>
        [Output("hardware")]
        public Output<Outputs.VirtualMachineManagerVirtualMachineInstanceHardware?> Hardware { get; private set; } = null!;

        /// <summary>
        /// An `infrastructure` block as defined below.
        /// </summary>
        [Output("infrastructure")]
        public Output<Outputs.VirtualMachineManagerVirtualMachineInstanceInfrastructure> Infrastructure { get; private set; } = null!;

        /// <summary>
        /// A `network_interface` block as defined below.
        /// 
        /// &gt; **Note:** This resource will be restarted while updating `network_interface`.
        /// </summary>
        [Output("networkInterfaces")]
        public Output<ImmutableArray<Outputs.VirtualMachineManagerVirtualMachineInstanceNetworkInterface>> NetworkInterfaces { get; private set; } = null!;

        /// <summary>
        /// An `operating_system` block as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Output("operatingSystem")]
        public Output<Outputs.VirtualMachineManagerVirtualMachineInstanceOperatingSystem?> OperatingSystem { get; private set; } = null!;

        /// <summary>
        /// The ID of the Hybrid Compute Machine where this System Center Virtual Machine Manager Virtual Machine Instance is stored. Changing this forces a new resource to be created.
        /// </summary>
        [Output("scopedResourceId")]
        public Output<string> ScopedResourceId { get; private set; } = null!;

        /// <summary>
        /// A `storage_disk` block as defined below.
        /// 
        /// &gt; **Note:** This resource will be restarted while updating `storage_disk`.
        /// </summary>
        [Output("storageDisks")]
        public Output<ImmutableArray<Outputs.VirtualMachineManagerVirtualMachineInstanceStorageDisk>> StorageDisks { get; private set; } = null!;

        /// <summary>
        /// A list of IDs of System Center Virtual Machine Manager Availability Set.
        /// </summary>
        [Output("systemCenterVirtualMachineManagerAvailabilitySetIds")]
        public Output<ImmutableArray<string>> SystemCenterVirtualMachineManagerAvailabilitySetIds { get; private set; } = null!;


        /// <summary>
        /// Create a VirtualMachineManagerVirtualMachineInstance resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VirtualMachineManagerVirtualMachineInstance(string name, VirtualMachineManagerVirtualMachineInstanceArgs args, CustomResourceOptions? options = null)
            : base("azure:systemcenter/virtualMachineManagerVirtualMachineInstance:VirtualMachineManagerVirtualMachineInstance", name, args ?? new VirtualMachineManagerVirtualMachineInstanceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VirtualMachineManagerVirtualMachineInstance(string name, Input<string> id, VirtualMachineManagerVirtualMachineInstanceState? state = null, CustomResourceOptions? options = null)
            : base("azure:systemcenter/virtualMachineManagerVirtualMachineInstance:VirtualMachineManagerVirtualMachineInstance", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VirtualMachineManagerVirtualMachineInstance resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VirtualMachineManagerVirtualMachineInstance Get(string name, Input<string> id, VirtualMachineManagerVirtualMachineInstanceState? state = null, CustomResourceOptions? options = null)
        {
            return new VirtualMachineManagerVirtualMachineInstance(name, id, state, options);
        }
    }

    public sealed class VirtualMachineManagerVirtualMachineInstanceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Custom Location for the System Center Virtual Machine Manager Virtual Machine Instance. Changing this forces a new resource to be created.
        /// </summary>
        [Input("customLocationId", required: true)]
        public Input<string> CustomLocationId { get; set; } = null!;

        /// <summary>
        /// A `hardware` block as defined below. Changing this forces a new resource to be created.
        /// 
        /// &gt; **Note:** This resource will be restarted while updating `hardware`.
        /// </summary>
        [Input("hardware")]
        public Input<Inputs.VirtualMachineManagerVirtualMachineInstanceHardwareArgs>? Hardware { get; set; }

        /// <summary>
        /// An `infrastructure` block as defined below.
        /// </summary>
        [Input("infrastructure", required: true)]
        public Input<Inputs.VirtualMachineManagerVirtualMachineInstanceInfrastructureArgs> Infrastructure { get; set; } = null!;

        [Input("networkInterfaces")]
        private InputList<Inputs.VirtualMachineManagerVirtualMachineInstanceNetworkInterfaceArgs>? _networkInterfaces;

        /// <summary>
        /// A `network_interface` block as defined below.
        /// 
        /// &gt; **Note:** This resource will be restarted while updating `network_interface`.
        /// </summary>
        public InputList<Inputs.VirtualMachineManagerVirtualMachineInstanceNetworkInterfaceArgs> NetworkInterfaces
        {
            get => _networkInterfaces ?? (_networkInterfaces = new InputList<Inputs.VirtualMachineManagerVirtualMachineInstanceNetworkInterfaceArgs>());
            set => _networkInterfaces = value;
        }

        /// <summary>
        /// An `operating_system` block as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Input("operatingSystem")]
        public Input<Inputs.VirtualMachineManagerVirtualMachineInstanceOperatingSystemArgs>? OperatingSystem { get; set; }

        /// <summary>
        /// The ID of the Hybrid Compute Machine where this System Center Virtual Machine Manager Virtual Machine Instance is stored. Changing this forces a new resource to be created.
        /// </summary>
        [Input("scopedResourceId", required: true)]
        public Input<string> ScopedResourceId { get; set; } = null!;

        [Input("storageDisks")]
        private InputList<Inputs.VirtualMachineManagerVirtualMachineInstanceStorageDiskArgs>? _storageDisks;

        /// <summary>
        /// A `storage_disk` block as defined below.
        /// 
        /// &gt; **Note:** This resource will be restarted while updating `storage_disk`.
        /// </summary>
        public InputList<Inputs.VirtualMachineManagerVirtualMachineInstanceStorageDiskArgs> StorageDisks
        {
            get => _storageDisks ?? (_storageDisks = new InputList<Inputs.VirtualMachineManagerVirtualMachineInstanceStorageDiskArgs>());
            set => _storageDisks = value;
        }

        [Input("systemCenterVirtualMachineManagerAvailabilitySetIds")]
        private InputList<string>? _systemCenterVirtualMachineManagerAvailabilitySetIds;

        /// <summary>
        /// A list of IDs of System Center Virtual Machine Manager Availability Set.
        /// </summary>
        public InputList<string> SystemCenterVirtualMachineManagerAvailabilitySetIds
        {
            get => _systemCenterVirtualMachineManagerAvailabilitySetIds ?? (_systemCenterVirtualMachineManagerAvailabilitySetIds = new InputList<string>());
            set => _systemCenterVirtualMachineManagerAvailabilitySetIds = value;
        }

        public VirtualMachineManagerVirtualMachineInstanceArgs()
        {
        }
        public static new VirtualMachineManagerVirtualMachineInstanceArgs Empty => new VirtualMachineManagerVirtualMachineInstanceArgs();
    }

    public sealed class VirtualMachineManagerVirtualMachineInstanceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Custom Location for the System Center Virtual Machine Manager Virtual Machine Instance. Changing this forces a new resource to be created.
        /// </summary>
        [Input("customLocationId")]
        public Input<string>? CustomLocationId { get; set; }

        /// <summary>
        /// A `hardware` block as defined below. Changing this forces a new resource to be created.
        /// 
        /// &gt; **Note:** This resource will be restarted while updating `hardware`.
        /// </summary>
        [Input("hardware")]
        public Input<Inputs.VirtualMachineManagerVirtualMachineInstanceHardwareGetArgs>? Hardware { get; set; }

        /// <summary>
        /// An `infrastructure` block as defined below.
        /// </summary>
        [Input("infrastructure")]
        public Input<Inputs.VirtualMachineManagerVirtualMachineInstanceInfrastructureGetArgs>? Infrastructure { get; set; }

        [Input("networkInterfaces")]
        private InputList<Inputs.VirtualMachineManagerVirtualMachineInstanceNetworkInterfaceGetArgs>? _networkInterfaces;

        /// <summary>
        /// A `network_interface` block as defined below.
        /// 
        /// &gt; **Note:** This resource will be restarted while updating `network_interface`.
        /// </summary>
        public InputList<Inputs.VirtualMachineManagerVirtualMachineInstanceNetworkInterfaceGetArgs> NetworkInterfaces
        {
            get => _networkInterfaces ?? (_networkInterfaces = new InputList<Inputs.VirtualMachineManagerVirtualMachineInstanceNetworkInterfaceGetArgs>());
            set => _networkInterfaces = value;
        }

        /// <summary>
        /// An `operating_system` block as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Input("operatingSystem")]
        public Input<Inputs.VirtualMachineManagerVirtualMachineInstanceOperatingSystemGetArgs>? OperatingSystem { get; set; }

        /// <summary>
        /// The ID of the Hybrid Compute Machine where this System Center Virtual Machine Manager Virtual Machine Instance is stored. Changing this forces a new resource to be created.
        /// </summary>
        [Input("scopedResourceId")]
        public Input<string>? ScopedResourceId { get; set; }

        [Input("storageDisks")]
        private InputList<Inputs.VirtualMachineManagerVirtualMachineInstanceStorageDiskGetArgs>? _storageDisks;

        /// <summary>
        /// A `storage_disk` block as defined below.
        /// 
        /// &gt; **Note:** This resource will be restarted while updating `storage_disk`.
        /// </summary>
        public InputList<Inputs.VirtualMachineManagerVirtualMachineInstanceStorageDiskGetArgs> StorageDisks
        {
            get => _storageDisks ?? (_storageDisks = new InputList<Inputs.VirtualMachineManagerVirtualMachineInstanceStorageDiskGetArgs>());
            set => _storageDisks = value;
        }

        [Input("systemCenterVirtualMachineManagerAvailabilitySetIds")]
        private InputList<string>? _systemCenterVirtualMachineManagerAvailabilitySetIds;

        /// <summary>
        /// A list of IDs of System Center Virtual Machine Manager Availability Set.
        /// </summary>
        public InputList<string> SystemCenterVirtualMachineManagerAvailabilitySetIds
        {
            get => _systemCenterVirtualMachineManagerAvailabilitySetIds ?? (_systemCenterVirtualMachineManagerAvailabilitySetIds = new InputList<string>());
            set => _systemCenterVirtualMachineManagerAvailabilitySetIds = value;
        }

        public VirtualMachineManagerVirtualMachineInstanceState()
        {
        }
        public static new VirtualMachineManagerVirtualMachineInstanceState Empty => new VirtualMachineManagerVirtualMachineInstanceState();
    }
}
