// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.SignalR.Inputs
{

    public sealed class ServiceUpstreamEndpointArgs : global::Pulumi.ResourceArgs
    {
        [Input("categoryPatterns", required: true)]
        private InputList<string>? _categoryPatterns;

        /// <summary>
        /// The categories to match on, or `*` for all.
        /// </summary>
        public InputList<string> CategoryPatterns
        {
            get => _categoryPatterns ?? (_categoryPatterns = new InputList<string>());
            set => _categoryPatterns = value;
        }

        [Input("eventPatterns", required: true)]
        private InputList<string>? _eventPatterns;

        /// <summary>
        /// The events to match on, or `*` for all.
        /// </summary>
        public InputList<string> EventPatterns
        {
            get => _eventPatterns ?? (_eventPatterns = new InputList<string>());
            set => _eventPatterns = value;
        }

        [Input("hubPatterns", required: true)]
        private InputList<string>? _hubPatterns;

        /// <summary>
        /// The hubs to match on, or `*` for all.
        /// </summary>
        public InputList<string> HubPatterns
        {
            get => _hubPatterns ?? (_hubPatterns = new InputList<string>());
            set => _hubPatterns = value;
        }

        /// <summary>
        /// The upstream URL Template. This can be a url or a template such as `http://host.com/{hub}/api/{category}/{event}`.
        /// </summary>
        [Input("urlTemplate", required: true)]
        public Input<string> UrlTemplate { get; set; } = null!;

        /// <summary>
        /// Specifies the Managed Identity IDs to be assigned to this signalR upstream setting by using resource uuid as both system assigned and user assigned identity is supported.
        /// </summary>
        [Input("userAssignedIdentityId")]
        public Input<string>? UserAssignedIdentityId { get; set; }

        public ServiceUpstreamEndpointArgs()
        {
        }
        public static new ServiceUpstreamEndpointArgs Empty => new ServiceUpstreamEndpointArgs();
    }
}
