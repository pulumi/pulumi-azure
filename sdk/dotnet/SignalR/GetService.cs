// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.SignalR
{
    public static class GetService
    {
        /// <summary>
        /// Use this data source to access information about an existing Azure SignalR service.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.SignalR.GetService.Invoke(new()
        ///     {
        ///         Name = "test-signalr",
        ///         ResourceGroupName = "signalr-resource-group",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetServiceResult> InvokeAsync(GetServiceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServiceResult>("azure:signalr/getService:getService", args ?? new GetServiceArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Azure SignalR service.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.SignalR.GetService.Invoke(new()
        ///     {
        ///         Name = "test-signalr",
        ///         ResourceGroupName = "signalr-resource-group",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetServiceResult> Invoke(GetServiceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServiceResult>("azure:signalr/getService:getService", args ?? new GetServiceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServiceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the name of the SignalR service.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the resource group the SignalR service is located in.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetServiceArgs()
        {
        }
        public static new GetServiceArgs Empty => new GetServiceArgs();
    }

    public sealed class GetServiceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the name of the SignalR service.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the resource group the SignalR service is located in.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetServiceInvokeArgs()
        {
        }
        public static new GetServiceInvokeArgs Empty => new GetServiceInvokeArgs();
    }


    [OutputType]
    public sealed class GetServiceResult
    {
        /// <summary>
        /// Is aad auth enabled for this SignalR service?
        /// </summary>
        public readonly bool AadAuthEnabled;
        /// <summary>
        /// The FQDN of the SignalR service.
        /// </summary>
        public readonly string Hostname;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The publicly accessible IP of the SignalR service.
        /// </summary>
        public readonly string IpAddress;
        /// <summary>
        /// Is local auth enable for this SignalR serviced?
        /// </summary>
        public readonly bool LocalAuthEnabled;
        /// <summary>
        /// Specifies the supported Azure location where the SignalR service exists.
        /// </summary>
        public readonly string Location;
        public readonly string Name;
        /// <summary>
        /// The primary access key of the SignalR service.
        /// </summary>
        public readonly string PrimaryAccessKey;
        /// <summary>
        /// The primary connection string of the SignalR service.
        /// </summary>
        public readonly string PrimaryConnectionString;
        /// <summary>
        /// Is public network access enabled for this SignalR service?
        /// </summary>
        public readonly bool PublicNetworkAccessEnabled;
        /// <summary>
        /// The publicly accessible port of the SignalR service which is designed for browser/client use.
        /// </summary>
        public readonly int PublicPort;
        public readonly string ResourceGroupName;
        /// <summary>
        /// The secondary access key of the SignalR service.
        /// </summary>
        public readonly string SecondaryAccessKey;
        /// <summary>
        /// The secondary connection string of the SignalR service.
        /// </summary>
        public readonly string SecondaryConnectionString;
        /// <summary>
        /// The publicly accessible port of the SignalR service which is designed for customer server side use.
        /// </summary>
        public readonly int ServerPort;
        /// <summary>
        /// The serverless connection timeout of this SignalR service.
        /// </summary>
        public readonly int ServerlessConnectionTimeoutInSeconds;
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// Is tls client cert enabled for this SignalR service?
        /// </summary>
        public readonly bool TlsClientCertEnabled;

        [OutputConstructor]
        private GetServiceResult(
            bool aadAuthEnabled,

            string hostname,

            string id,

            string ipAddress,

            bool localAuthEnabled,

            string location,

            string name,

            string primaryAccessKey,

            string primaryConnectionString,

            bool publicNetworkAccessEnabled,

            int publicPort,

            string resourceGroupName,

            string secondaryAccessKey,

            string secondaryConnectionString,

            int serverPort,

            int serverlessConnectionTimeoutInSeconds,

            ImmutableDictionary<string, string> tags,

            bool tlsClientCertEnabled)
        {
            AadAuthEnabled = aadAuthEnabled;
            Hostname = hostname;
            Id = id;
            IpAddress = ipAddress;
            LocalAuthEnabled = localAuthEnabled;
            Location = location;
            Name = name;
            PrimaryAccessKey = primaryAccessKey;
            PrimaryConnectionString = primaryConnectionString;
            PublicNetworkAccessEnabled = publicNetworkAccessEnabled;
            PublicPort = publicPort;
            ResourceGroupName = resourceGroupName;
            SecondaryAccessKey = secondaryAccessKey;
            SecondaryConnectionString = secondaryConnectionString;
            ServerPort = serverPort;
            ServerlessConnectionTimeoutInSeconds = serverlessConnectionTimeoutInSeconds;
            Tags = tags;
            TlsClientCertEnabled = tlsClientCertEnabled;
        }
    }
}
