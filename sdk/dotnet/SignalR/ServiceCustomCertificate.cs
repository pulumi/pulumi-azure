// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.SignalR
{
    /// <summary>
    /// Manages an Azure SignalR Custom Certificate.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System;
    /// using System.Collections.Generic;
    /// using System.IO;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// 	
    /// string ReadFileBase64(string path) 
    /// {
    ///     return Convert.ToBase64String(Encoding.UTF8.GetBytes(File.ReadAllText(path)));
    /// }
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var current = Azure.Core.GetClientConfig.Invoke();
    /// 
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleService = new Azure.SignalR.Service("exampleService", new()
    ///     {
    ///         Location = azurerm_resource_group.Test.Location,
    ///         ResourceGroupName = azurerm_resource_group.Test.Name,
    ///         Sku = new Azure.SignalR.Inputs.ServiceSkuArgs
    ///         {
    ///             Name = "Premium_P1",
    ///             Capacity = 1,
    ///         },
    ///         Identity = new Azure.SignalR.Inputs.ServiceIdentityArgs
    ///         {
    ///             Type = "SystemAssigned",
    ///         },
    ///     });
    /// 
    ///     var exampleKeyVault = new Azure.KeyVault.KeyVault("exampleKeyVault", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         TenantId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.TenantId),
    ///         SkuName = "premium",
    ///         AccessPolicies = new[]
    ///         {
    ///             new Azure.KeyVault.Inputs.KeyVaultAccessPolicyArgs
    ///             {
    ///                 TenantId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.TenantId),
    ///                 ObjectId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.ObjectId),
    ///                 CertificatePermissions = new[]
    ///                 {
    ///                     "Create",
    ///                     "Get",
    ///                     "List",
    ///                 },
    ///                 SecretPermissions = new[]
    ///                 {
    ///                     "Get",
    ///                     "List",
    ///                 },
    ///             },
    ///             new Azure.KeyVault.Inputs.KeyVaultAccessPolicyArgs
    ///             {
    ///                 TenantId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.TenantId),
    ///                 ObjectId = azurerm_signalr_service.Test.Identity[0].Principal_id,
    ///                 CertificatePermissions = new[]
    ///                 {
    ///                     "Create",
    ///                     "Get",
    ///                     "List",
    ///                 },
    ///                 SecretPermissions = new[]
    ///                 {
    ///                     "Get",
    ///                     "List",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleCertificate = new Azure.KeyVault.Certificate("exampleCertificate", new()
    ///     {
    ///         KeyVaultId = exampleKeyVault.Id,
    ///         KeyVaultCertificate = new Azure.KeyVault.Inputs.CertificateCertificateArgs
    ///         {
    ///             Contents = ReadFileBase64("certificate-to-import.pfx"),
    ///             Password = "",
    ///         },
    ///     });
    /// 
    ///     var test = new Azure.SignalR.ServiceCustomCertificate("test", new()
    ///     {
    ///         SignalrServiceId = exampleService.Id,
    ///         CustomCertificateId = exampleCertificate.Id,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             azurerm_key_vault_access_policy.Example,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Custom Certificate for a SignalR service can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:signalr/serviceCustomCertificate:ServiceCustomCertificate example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.SignalRService/signalR/signalr1/customCertificates/cert1
    /// ```
    /// </summary>
    [AzureResourceType("azure:signalr/serviceCustomCertificate:ServiceCustomCertificate")]
    public partial class ServiceCustomCertificate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The certificate version of the SignalR Custom Certificate service.
        /// </summary>
        [Output("certificateVersion")]
        public Output<string> CertificateVersion { get; private set; } = null!;

        /// <summary>
        /// The certificate id of the SignalR Custom Certificate service. Changing this forces a new resource to be created.
        /// 
        /// &gt; **Note:** Self assigned certificate is not supported and the provisioning status will fail.
        /// </summary>
        [Output("customCertificateId")]
        public Output<string> CustomCertificateId { get; private set; } = null!;

        /// <summary>
        /// The name of the SignalR Custom Certificate. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The SignalR ID of the SignalR Custom Certificate. Changing this forces a new resource to be created.
        /// 
        /// &gt; **Note:** Custom Certificate is only available for SignalR Premium tier. Please enable managed identity in the corresponding SignalR Service and give the managed identity access to the key vault, the required permission is Get Certificate and Secret.
        /// </summary>
        [Output("signalrServiceId")]
        public Output<string> SignalrServiceId { get; private set; } = null!;


        /// <summary>
        /// Create a ServiceCustomCertificate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServiceCustomCertificate(string name, ServiceCustomCertificateArgs args, CustomResourceOptions? options = null)
            : base("azure:signalr/serviceCustomCertificate:ServiceCustomCertificate", name, args ?? new ServiceCustomCertificateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServiceCustomCertificate(string name, Input<string> id, ServiceCustomCertificateState? state = null, CustomResourceOptions? options = null)
            : base("azure:signalr/serviceCustomCertificate:ServiceCustomCertificate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServiceCustomCertificate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServiceCustomCertificate Get(string name, Input<string> id, ServiceCustomCertificateState? state = null, CustomResourceOptions? options = null)
        {
            return new ServiceCustomCertificate(name, id, state, options);
        }
    }

    public sealed class ServiceCustomCertificateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The certificate id of the SignalR Custom Certificate service. Changing this forces a new resource to be created.
        /// 
        /// &gt; **Note:** Self assigned certificate is not supported and the provisioning status will fail.
        /// </summary>
        [Input("customCertificateId", required: true)]
        public Input<string> CustomCertificateId { get; set; } = null!;

        /// <summary>
        /// The name of the SignalR Custom Certificate. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The SignalR ID of the SignalR Custom Certificate. Changing this forces a new resource to be created.
        /// 
        /// &gt; **Note:** Custom Certificate is only available for SignalR Premium tier. Please enable managed identity in the corresponding SignalR Service and give the managed identity access to the key vault, the required permission is Get Certificate and Secret.
        /// </summary>
        [Input("signalrServiceId", required: true)]
        public Input<string> SignalrServiceId { get; set; } = null!;

        public ServiceCustomCertificateArgs()
        {
        }
        public static new ServiceCustomCertificateArgs Empty => new ServiceCustomCertificateArgs();
    }

    public sealed class ServiceCustomCertificateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The certificate version of the SignalR Custom Certificate service.
        /// </summary>
        [Input("certificateVersion")]
        public Input<string>? CertificateVersion { get; set; }

        /// <summary>
        /// The certificate id of the SignalR Custom Certificate service. Changing this forces a new resource to be created.
        /// 
        /// &gt; **Note:** Self assigned certificate is not supported and the provisioning status will fail.
        /// </summary>
        [Input("customCertificateId")]
        public Input<string>? CustomCertificateId { get; set; }

        /// <summary>
        /// The name of the SignalR Custom Certificate. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The SignalR ID of the SignalR Custom Certificate. Changing this forces a new resource to be created.
        /// 
        /// &gt; **Note:** Custom Certificate is only available for SignalR Premium tier. Please enable managed identity in the corresponding SignalR Service and give the managed identity access to the key vault, the required permission is Get Certificate and Secret.
        /// </summary>
        [Input("signalrServiceId")]
        public Input<string>? SignalrServiceId { get; set; }

        public ServiceCustomCertificateState()
        {
        }
        public static new ServiceCustomCertificateState Empty => new ServiceCustomCertificateState();
    }
}
