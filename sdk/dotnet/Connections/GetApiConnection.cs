// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Connections
{
    public static class GetApiConnection
    {
        /// <summary>
        /// Use this data source to access information about an existing API Connection.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Connections.GetApiConnection.Invoke(new()
        ///     {
        ///         Name = "example-connection",
        ///         ResourceGroupName = "example-resources",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["connectionId"] = example.Apply(getApiConnectionResult =&gt; getApiConnectionResult.Id),
        ///         ["connectionName"] = example.Apply(getApiConnectionResult =&gt; getApiConnectionResult.Name),
        ///         ["managedApiId"] = example.Apply(getApiConnectionResult =&gt; getApiConnectionResult.ManagedApiId),
        ///     };
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Microsoft.Web` - 2016-06-01
        /// </summary>
        public static Task<GetApiConnectionResult> InvokeAsync(GetApiConnectionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetApiConnectionResult>("azure:connections/getApiConnection:getApiConnection", args ?? new GetApiConnectionArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing API Connection.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Connections.GetApiConnection.Invoke(new()
        ///     {
        ///         Name = "example-connection",
        ///         ResourceGroupName = "example-resources",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["connectionId"] = example.Apply(getApiConnectionResult =&gt; getApiConnectionResult.Id),
        ///         ["connectionName"] = example.Apply(getApiConnectionResult =&gt; getApiConnectionResult.Name),
        ///         ["managedApiId"] = example.Apply(getApiConnectionResult =&gt; getApiConnectionResult.ManagedApiId),
        ///     };
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Microsoft.Web` - 2016-06-01
        /// </summary>
        public static Output<GetApiConnectionResult> Invoke(GetApiConnectionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetApiConnectionResult>("azure:connections/getApiConnection:getApiConnection", args ?? new GetApiConnectionInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing API Connection.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Connections.GetApiConnection.Invoke(new()
        ///     {
        ///         Name = "example-connection",
        ///         ResourceGroupName = "example-resources",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["connectionId"] = example.Apply(getApiConnectionResult =&gt; getApiConnectionResult.Id),
        ///         ["connectionName"] = example.Apply(getApiConnectionResult =&gt; getApiConnectionResult.Name),
        ///         ["managedApiId"] = example.Apply(getApiConnectionResult =&gt; getApiConnectionResult.ManagedApiId),
        ///     };
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Microsoft.Web` - 2016-06-01
        /// </summary>
        public static Output<GetApiConnectionResult> Invoke(GetApiConnectionInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetApiConnectionResult>("azure:connections/getApiConnection:getApiConnection", args ?? new GetApiConnectionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetApiConnectionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the API Connection.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the API Connection exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetApiConnectionArgs()
        {
        }
        public static new GetApiConnectionArgs Empty => new GetApiConnectionArgs();
    }

    public sealed class GetApiConnectionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the API Connection.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the API Connection exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetApiConnectionInvokeArgs()
        {
        }
        public static new GetApiConnectionInvokeArgs Empty => new GetApiConnectionInvokeArgs();
    }


    [OutputType]
    public sealed class GetApiConnectionResult
    {
        /// <summary>
        /// The display name of the API Connection.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The Azure Region where the API Connection exists.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The ID of the Managed API that this connection is linked to.
        /// </summary>
        public readonly string ManagedApiId;
        public readonly string Name;
        /// <summary>
        /// A mapping of parameter names to their values for the API Connection.
        /// </summary>
        public readonly ImmutableDictionary<string, string> ParameterValues;
        public readonly string ResourceGroupName;
        /// <summary>
        /// A mapping of tags assigned to the API Connection.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;

        [OutputConstructor]
        private GetApiConnectionResult(
            string displayName,

            string id,

            string location,

            string managedApiId,

            string name,

            ImmutableDictionary<string, string> parameterValues,

            string resourceGroupName,

            ImmutableDictionary<string, string> tags)
        {
            DisplayName = displayName;
            Id = id;
            Location = location;
            ManagedApiId = managedApiId;
            Name = name;
            ParameterValues = parameterValues;
            ResourceGroupName = resourceGroupName;
            Tags = tags;
        }
    }
}
