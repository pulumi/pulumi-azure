// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Cognitive
{
    /// <summary>
    /// Manages a Cognitive Services Account RAI Policy.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Name = "example-resources",
    ///         Location = "East US",
    ///     });
    /// 
    ///     var exampleAccount = new Azure.Cognitive.Account("example", new()
    ///     {
    ///         Name = "example-account",
    ///         Location = example.Location,
    ///         ResourceGroupName = example.Name,
    ///         Kind = "OpenAI",
    ///         SkuName = "S0",
    ///     });
    /// 
    ///     var exampleAccountRaiPolicy = new Azure.Cognitive.AccountRaiPolicy("example", new()
    ///     {
    ///         Name = "example-rai-policy",
    ///         CognitiveAccountId = exampleAccount.Id,
    ///         BasePolicyName = "Microsoft.Default",
    ///         ContentFilters = new[]
    ///         {
    ///             new Azure.Cognitive.Inputs.AccountRaiPolicyContentFilterArgs
    ///             {
    ///                 Name = "Hate",
    ///                 FilterEnabled = true,
    ///                 BlockEnabled = true,
    ///                 SeverityThreshold = "High",
    ///                 Source = "Prompt",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## API Providers
    /// 
    /// &lt;!-- This section is generated, changes will be overwritten --&gt;
    /// This resource uses the following Azure API Providers:
    /// 
    /// * `Microsoft.CognitiveServices`: 2024-10-01
    /// 
    /// ## Import
    /// 
    /// Cognitive Service Account RAI Policies can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:cognitive/accountRaiPolicy:AccountRaiPolicy policy1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.CognitiveServices/accounts/account1/raiPolicies/policy1
    /// ```
    /// </summary>
    [AzureResourceType("azure:cognitive/accountRaiPolicy:AccountRaiPolicy")]
    public partial class AccountRaiPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the base policy to use for this RAI Policy. Changing this forces a new resource to be created.
        /// </summary>
        [Output("basePolicyName")]
        public Output<string> BasePolicyName { get; private set; } = null!;

        /// <summary>
        /// The ID of the Cognitive Service Account to which this RAI Policy should be associated. Changing this forces a new resource to be created.
        /// </summary>
        [Output("cognitiveAccountId")]
        public Output<string> CognitiveAccountId { get; private set; } = null!;

        /// <summary>
        /// A `content_filter` block as defined below.
        /// </summary>
        [Output("contentFilters")]
        public Output<ImmutableArray<Outputs.AccountRaiPolicyContentFilter>> ContentFilters { get; private set; } = null!;

        /// <summary>
        /// The mode of the RAI Policy. Possible values are `Default`, `Deferred`, `Blocking` or `Asynchronous_filter`.
        /// </summary>
        [Output("mode")]
        public Output<string?> Mode { get; private set; } = null!;

        /// <summary>
        /// The name of the Cognitive Service Account RAI Policy. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a AccountRaiPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AccountRaiPolicy(string name, AccountRaiPolicyArgs args, CustomResourceOptions? options = null)
            : base("azure:cognitive/accountRaiPolicy:AccountRaiPolicy", name, args ?? new AccountRaiPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AccountRaiPolicy(string name, Input<string> id, AccountRaiPolicyState? state = null, CustomResourceOptions? options = null)
            : base("azure:cognitive/accountRaiPolicy:AccountRaiPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AccountRaiPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AccountRaiPolicy Get(string name, Input<string> id, AccountRaiPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new AccountRaiPolicy(name, id, state, options);
        }
    }

    public sealed class AccountRaiPolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the base policy to use for this RAI Policy. Changing this forces a new resource to be created.
        /// </summary>
        [Input("basePolicyName", required: true)]
        public Input<string> BasePolicyName { get; set; } = null!;

        /// <summary>
        /// The ID of the Cognitive Service Account to which this RAI Policy should be associated. Changing this forces a new resource to be created.
        /// </summary>
        [Input("cognitiveAccountId", required: true)]
        public Input<string> CognitiveAccountId { get; set; } = null!;

        [Input("contentFilters", required: true)]
        private InputList<Inputs.AccountRaiPolicyContentFilterArgs>? _contentFilters;

        /// <summary>
        /// A `content_filter` block as defined below.
        /// </summary>
        public InputList<Inputs.AccountRaiPolicyContentFilterArgs> ContentFilters
        {
            get => _contentFilters ?? (_contentFilters = new InputList<Inputs.AccountRaiPolicyContentFilterArgs>());
            set => _contentFilters = value;
        }

        /// <summary>
        /// The mode of the RAI Policy. Possible values are `Default`, `Deferred`, `Blocking` or `Asynchronous_filter`.
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// The name of the Cognitive Service Account RAI Policy. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public AccountRaiPolicyArgs()
        {
        }
        public static new AccountRaiPolicyArgs Empty => new AccountRaiPolicyArgs();
    }

    public sealed class AccountRaiPolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the base policy to use for this RAI Policy. Changing this forces a new resource to be created.
        /// </summary>
        [Input("basePolicyName")]
        public Input<string>? BasePolicyName { get; set; }

        /// <summary>
        /// The ID of the Cognitive Service Account to which this RAI Policy should be associated. Changing this forces a new resource to be created.
        /// </summary>
        [Input("cognitiveAccountId")]
        public Input<string>? CognitiveAccountId { get; set; }

        [Input("contentFilters")]
        private InputList<Inputs.AccountRaiPolicyContentFilterGetArgs>? _contentFilters;

        /// <summary>
        /// A `content_filter` block as defined below.
        /// </summary>
        public InputList<Inputs.AccountRaiPolicyContentFilterGetArgs> ContentFilters
        {
            get => _contentFilters ?? (_contentFilters = new InputList<Inputs.AccountRaiPolicyContentFilterGetArgs>());
            set => _contentFilters = value;
        }

        /// <summary>
        /// The mode of the RAI Policy. Possible values are `Default`, `Deferred`, `Blocking` or `Asynchronous_filter`.
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// The name of the Cognitive Service Account RAI Policy. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public AccountRaiPolicyState()
        {
        }
        public static new AccountRaiPolicyState Empty => new AccountRaiPolicyState();
    }
}
