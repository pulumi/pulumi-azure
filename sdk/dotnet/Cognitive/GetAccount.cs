// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Cognitive
{
    public static class GetAccount
    {
        /// <summary>
        /// Use this data source to access information about an existing Cognitive Services Account.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Azure.Cognitive.GetAccount.Invoke(new()
        ///     {
        ///         Name = "example-account",
        ///         ResourceGroupName = "cognitive_account_rg",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["primaryAccessKey"] = test.Apply(getAccountResult =&gt; getAccountResult.PrimaryAccessKey),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetAccountResult> InvokeAsync(GetAccountArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAccountResult>("azure:cognitive/getAccount:getAccount", args ?? new GetAccountArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Cognitive Services Account.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Azure.Cognitive.GetAccount.Invoke(new()
        ///     {
        ///         Name = "example-account",
        ///         ResourceGroupName = "cognitive_account_rg",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["primaryAccessKey"] = test.Apply(getAccountResult =&gt; getAccountResult.PrimaryAccessKey),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetAccountResult> Invoke(GetAccountInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAccountResult>("azure:cognitive/getAccount:getAccount", args ?? new GetAccountInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAccountArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the name of the Cognitive Services Account.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the resource group where the Cognitive Services Account resides.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// A mapping of tags to assigned to the resource.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetAccountArgs()
        {
        }
        public static new GetAccountArgs Empty => new GetAccountArgs();
    }

    public sealed class GetAccountInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the name of the Cognitive Services Account.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the resource group where the Cognitive Services Account resides.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assigned to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetAccountInvokeArgs()
        {
        }
        public static new GetAccountInvokeArgs Empty => new GetAccountInvokeArgs();
    }


    [OutputType]
    public sealed class GetAccountResult
    {
        /// <summary>
        /// The endpoint of the Cognitive Services Account
        /// </summary>
        public readonly string Endpoint;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A `identity` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAccountIdentityResult> Identities;
        /// <summary>
        /// The kind of the Cognitive Services Account
        /// </summary>
        public readonly string Kind;
        /// <summary>
        /// The Azure location where the Cognitive Services Account exists
        /// </summary>
        public readonly string Location;
        public readonly string Name;
        /// <summary>
        /// The primary access key of the Cognitive Services Account
        /// </summary>
        public readonly string PrimaryAccessKey;
        /// <summary>
        /// If `kind` is `QnAMaker` the link to the QNA runtime.
        /// </summary>
        public readonly string QnaRuntimeEndpoint;
        public readonly string ResourceGroupName;
        /// <summary>
        /// The secondary access key of the Cognitive Services Account
        /// </summary>
        public readonly string SecondaryAccessKey;
        /// <summary>
        /// The SKU name of the Cognitive Services Account
        /// </summary>
        public readonly string SkuName;
        /// <summary>
        /// A mapping of tags to assigned to the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;

        [OutputConstructor]
        private GetAccountResult(
            string endpoint,

            string id,

            ImmutableArray<Outputs.GetAccountIdentityResult> identities,

            string kind,

            string location,

            string name,

            string primaryAccessKey,

            string qnaRuntimeEndpoint,

            string resourceGroupName,

            string secondaryAccessKey,

            string skuName,

            ImmutableDictionary<string, string>? tags)
        {
            Endpoint = endpoint;
            Id = id;
            Identities = identities;
            Kind = kind;
            Location = location;
            Name = name;
            PrimaryAccessKey = primaryAccessKey;
            QnaRuntimeEndpoint = qnaRuntimeEndpoint;
            ResourceGroupName = resourceGroupName;
            SecondaryAccessKey = secondaryAccessKey;
            SkuName = skuName;
            Tags = tags;
        }
    }
}
