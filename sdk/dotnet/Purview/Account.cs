// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Purview
{
    /// <summary>
    /// Manages a Purview Account.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleAccount = new Azure.Purview.Account("exampleAccount", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         Identity = new Azure.Purview.Inputs.AccountIdentityArgs
    ///         {
    ///             Type = "SystemAssigned",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Purview Accounts can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:purview/account:Account example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Purview/accounts/account1
    /// ```
    /// </summary>
    [AzureResourceType("azure:purview/account:Account")]
    public partial class Account : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Atlas Kafka endpoint primary connection string.
        /// </summary>
        [Output("atlasKafkaEndpointPrimaryConnectionString")]
        public Output<string> AtlasKafkaEndpointPrimaryConnectionString { get; private set; } = null!;

        /// <summary>
        /// Atlas Kafka endpoint secondary connection string.
        /// </summary>
        [Output("atlasKafkaEndpointSecondaryConnectionString")]
        public Output<string> AtlasKafkaEndpointSecondaryConnectionString { get; private set; } = null!;

        /// <summary>
        /// Catalog endpoint.
        /// </summary>
        [Output("catalogEndpoint")]
        public Output<string> CatalogEndpoint { get; private set; } = null!;

        /// <summary>
        /// Guardian endpoint.
        /// </summary>
        [Output("guardianEndpoint")]
        public Output<string> GuardianEndpoint { get; private set; } = null!;

        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.AccountIdentity> Identity { get; private set; } = null!;

        /// <summary>
        /// The Azure Region where the Purview Account should exist. Changing this forces a new Purview Account to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for the new Resource Group where Purview Account creates the managed resources. Changing this forces a new Purview Account to be created.
        /// 
        /// &gt; **Note:** `managed_resource_group_name` must be a new Resource Group
        /// </summary>
        [Output("managedResourceGroupName")]
        public Output<string> ManagedResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// A `managed_resources` block as defined below.
        /// </summary>
        [Output("managedResources")]
        public Output<ImmutableArray<Outputs.AccountManagedResource>> ManagedResources { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Purview Account. Changing this forces a new Purview Account to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Should the Purview Account be visible to the public network? Defaults to `true`.
        /// </summary>
        [Output("publicNetworkEnabled")]
        public Output<bool?> PublicNetworkEnabled { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Purview Account should exist. Changing this forces a new Purview Account to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// Scan endpoint.
        /// </summary>
        [Output("scanEndpoint")]
        public Output<string> ScanEndpoint { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags which should be assigned to the Purview Account.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a Account resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Account(string name, AccountArgs args, CustomResourceOptions? options = null)
            : base("azure:purview/account:Account", name, args ?? new AccountArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Account(string name, Input<string> id, AccountState? state = null, CustomResourceOptions? options = null)
            : base("azure:purview/account:Account", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "atlasKafkaEndpointPrimaryConnectionString",
                    "atlasKafkaEndpointSecondaryConnectionString",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Account resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Account Get(string name, Input<string> id, AccountState? state = null, CustomResourceOptions? options = null)
        {
            return new Account(name, id, state, options);
        }
    }

    public sealed class AccountArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        [Input("identity", required: true)]
        public Input<Inputs.AccountIdentityArgs> Identity { get; set; } = null!;

        /// <summary>
        /// The Azure Region where the Purview Account should exist. Changing this forces a new Purview Account to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name which should be used for the new Resource Group where Purview Account creates the managed resources. Changing this forces a new Purview Account to be created.
        /// 
        /// &gt; **Note:** `managed_resource_group_name` must be a new Resource Group
        /// </summary>
        [Input("managedResourceGroupName")]
        public Input<string>? ManagedResourceGroupName { get; set; }

        /// <summary>
        /// The name which should be used for this Purview Account. Changing this forces a new Purview Account to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Should the Purview Account be visible to the public network? Defaults to `true`.
        /// </summary>
        [Input("publicNetworkEnabled")]
        public Input<bool>? PublicNetworkEnabled { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Purview Account should exist. Changing this forces a new Purview Account to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Purview Account.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public AccountArgs()
        {
        }
        public static new AccountArgs Empty => new AccountArgs();
    }

    public sealed class AccountState : global::Pulumi.ResourceArgs
    {
        [Input("atlasKafkaEndpointPrimaryConnectionString")]
        private Input<string>? _atlasKafkaEndpointPrimaryConnectionString;

        /// <summary>
        /// Atlas Kafka endpoint primary connection string.
        /// </summary>
        public Input<string>? AtlasKafkaEndpointPrimaryConnectionString
        {
            get => _atlasKafkaEndpointPrimaryConnectionString;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _atlasKafkaEndpointPrimaryConnectionString = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("atlasKafkaEndpointSecondaryConnectionString")]
        private Input<string>? _atlasKafkaEndpointSecondaryConnectionString;

        /// <summary>
        /// Atlas Kafka endpoint secondary connection string.
        /// </summary>
        public Input<string>? AtlasKafkaEndpointSecondaryConnectionString
        {
            get => _atlasKafkaEndpointSecondaryConnectionString;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _atlasKafkaEndpointSecondaryConnectionString = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Catalog endpoint.
        /// </summary>
        [Input("catalogEndpoint")]
        public Input<string>? CatalogEndpoint { get; set; }

        /// <summary>
        /// Guardian endpoint.
        /// </summary>
        [Input("guardianEndpoint")]
        public Input<string>? GuardianEndpoint { get; set; }

        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.AccountIdentityGetArgs>? Identity { get; set; }

        /// <summary>
        /// The Azure Region where the Purview Account should exist. Changing this forces a new Purview Account to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name which should be used for the new Resource Group where Purview Account creates the managed resources. Changing this forces a new Purview Account to be created.
        /// 
        /// &gt; **Note:** `managed_resource_group_name` must be a new Resource Group
        /// </summary>
        [Input("managedResourceGroupName")]
        public Input<string>? ManagedResourceGroupName { get; set; }

        [Input("managedResources")]
        private InputList<Inputs.AccountManagedResourceGetArgs>? _managedResources;

        /// <summary>
        /// A `managed_resources` block as defined below.
        /// </summary>
        public InputList<Inputs.AccountManagedResourceGetArgs> ManagedResources
        {
            get => _managedResources ?? (_managedResources = new InputList<Inputs.AccountManagedResourceGetArgs>());
            set => _managedResources = value;
        }

        /// <summary>
        /// The name which should be used for this Purview Account. Changing this forces a new Purview Account to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Should the Purview Account be visible to the public network? Defaults to `true`.
        /// </summary>
        [Input("publicNetworkEnabled")]
        public Input<bool>? PublicNetworkEnabled { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Purview Account should exist. Changing this forces a new Purview Account to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// Scan endpoint.
        /// </summary>
        [Input("scanEndpoint")]
        public Input<string>? ScanEndpoint { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Purview Account.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public AccountState()
        {
        }
        public static new AccountState Empty => new AccountState();
    }
}
