// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.NetApp
{
    /// <summary>
    /// Manages a NetApp Volume.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/netapp_volume.html.markdown.
    /// </summary>
    public partial class Volume : Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the NetApp account in which the NetApp Pool should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Output("accountName")]
        public Output<string> AccountName { get; private set; } = null!;

        /// <summary>
        /// One or more `export_policy_rule` block defined below.
        /// </summary>
        [Output("exportPolicyRules")]
        public Output<ImmutableArray<Outputs.VolumeExportPolicyRules>> ExportPolicyRules { get; private set; } = null!;

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the NetApp Volume. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the NetApp pool in which the NetApp Volume should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Output("poolName")]
        public Output<string> PoolName { get; private set; } = null!;

        /// <summary>
        /// The target volume protocol expressed as a list. Supported single value include `CIFS`, `NFSv3`, or `NFSv4.1`. If argument is not defined it will default to `NFSv3`. Changing this forces a new resource to be created and data will be lost.
        /// </summary>
        [Output("protocols")]
        public Output<ImmutableArray<string>> Protocols { get; private set; } = null!;

        /// <summary>
        /// The name of the resource group where the NetApp Volume should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// The target performance of the file system. Valid values include `Premium`, `Standard`, or `Ultra`.
        /// </summary>
        [Output("serviceLevel")]
        public Output<string> ServiceLevel { get; private set; } = null!;

        /// <summary>
        /// The maximum Storage Quota allowed for a file system in Gigabytes.
        /// </summary>
        [Output("storageQuotaInGb")]
        public Output<int> StorageQuotaInGb { get; private set; } = null!;

        /// <summary>
        /// The ID of the Subnet the NetApp Volume resides in, which must have the `Microsoft.NetApp/volumes` delegation. Changing this forces a new resource to be created.
        /// </summary>
        [Output("subnetId")]
        public Output<string> SubnetId { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A unique file path for the volume. Used when creating mount targets. Changing this forces a new resource to be created.
        /// </summary>
        [Output("volumePath")]
        public Output<string> VolumePath { get; private set; } = null!;


        /// <summary>
        /// Create a Volume resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Volume(string name, VolumeArgs args, CustomResourceOptions? options = null)
            : base("azure:netapp/volume:Volume", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private Volume(string name, Input<string> id, VolumeState? state = null, CustomResourceOptions? options = null)
            : base("azure:netapp/volume:Volume", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Volume resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Volume Get(string name, Input<string> id, VolumeState? state = null, CustomResourceOptions? options = null)
        {
            return new Volume(name, id, state, options);
        }
    }

    public sealed class VolumeArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the NetApp account in which the NetApp Pool should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        [Input("exportPolicyRules")]
        private InputList<Inputs.VolumeExportPolicyRulesArgs>? _exportPolicyRules;

        /// <summary>
        /// One or more `export_policy_rule` block defined below.
        /// </summary>
        public InputList<Inputs.VolumeExportPolicyRulesArgs> ExportPolicyRules
        {
            get => _exportPolicyRules ?? (_exportPolicyRules = new InputList<Inputs.VolumeExportPolicyRulesArgs>());
            set => _exportPolicyRules = value;
        }

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the NetApp Volume. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the NetApp pool in which the NetApp Volume should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("poolName", required: true)]
        public Input<string> PoolName { get; set; } = null!;

        [Input("protocols")]
        private InputList<string>? _protocols;

        /// <summary>
        /// The target volume protocol expressed as a list. Supported single value include `CIFS`, `NFSv3`, or `NFSv4.1`. If argument is not defined it will default to `NFSv3`. Changing this forces a new resource to be created and data will be lost.
        /// </summary>
        public InputList<string> Protocols
        {
            get => _protocols ?? (_protocols = new InputList<string>());
            set => _protocols = value;
        }

        /// <summary>
        /// The name of the resource group where the NetApp Volume should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The target performance of the file system. Valid values include `Premium`, `Standard`, or `Ultra`.
        /// </summary>
        [Input("serviceLevel", required: true)]
        public Input<string> ServiceLevel { get; set; } = null!;

        /// <summary>
        /// The maximum Storage Quota allowed for a file system in Gigabytes.
        /// </summary>
        [Input("storageQuotaInGb", required: true)]
        public Input<int> StorageQuotaInGb { get; set; } = null!;

        /// <summary>
        /// The ID of the Subnet the NetApp Volume resides in, which must have the `Microsoft.NetApp/volumes` delegation. Changing this forces a new resource to be created.
        /// </summary>
        [Input("subnetId", required: true)]
        public Input<string> SubnetId { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// A unique file path for the volume. Used when creating mount targets. Changing this forces a new resource to be created.
        /// </summary>
        [Input("volumePath", required: true)]
        public Input<string> VolumePath { get; set; } = null!;

        public VolumeArgs()
        {
        }
    }

    public sealed class VolumeState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the NetApp account in which the NetApp Pool should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("accountName")]
        public Input<string>? AccountName { get; set; }

        [Input("exportPolicyRules")]
        private InputList<Inputs.VolumeExportPolicyRulesGetArgs>? _exportPolicyRules;

        /// <summary>
        /// One or more `export_policy_rule` block defined below.
        /// </summary>
        public InputList<Inputs.VolumeExportPolicyRulesGetArgs> ExportPolicyRules
        {
            get => _exportPolicyRules ?? (_exportPolicyRules = new InputList<Inputs.VolumeExportPolicyRulesGetArgs>());
            set => _exportPolicyRules = value;
        }

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the NetApp Volume. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the NetApp pool in which the NetApp Volume should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("poolName")]
        public Input<string>? PoolName { get; set; }

        [Input("protocols")]
        private InputList<string>? _protocols;

        /// <summary>
        /// The target volume protocol expressed as a list. Supported single value include `CIFS`, `NFSv3`, or `NFSv4.1`. If argument is not defined it will default to `NFSv3`. Changing this forces a new resource to be created and data will be lost.
        /// </summary>
        public InputList<string> Protocols
        {
            get => _protocols ?? (_protocols = new InputList<string>());
            set => _protocols = value;
        }

        /// <summary>
        /// The name of the resource group where the NetApp Volume should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// The target performance of the file system. Valid values include `Premium`, `Standard`, or `Ultra`.
        /// </summary>
        [Input("serviceLevel")]
        public Input<string>? ServiceLevel { get; set; }

        /// <summary>
        /// The maximum Storage Quota allowed for a file system in Gigabytes.
        /// </summary>
        [Input("storageQuotaInGb")]
        public Input<int>? StorageQuotaInGb { get; set; }

        /// <summary>
        /// The ID of the Subnet the NetApp Volume resides in, which must have the `Microsoft.NetApp/volumes` delegation. Changing this forces a new resource to be created.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// A unique file path for the volume. Used when creating mount targets. Changing this forces a new resource to be created.
        /// </summary>
        [Input("volumePath")]
        public Input<string>? VolumePath { get; set; }

        public VolumeState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class VolumeExportPolicyRulesArgs : Pulumi.ResourceArgs
    {
        [Input("allowedClients", required: true)]
        private InputList<string>? _allowedClients;

        /// <summary>
        /// A list of allowed clients IPv4 addresses.
        /// </summary>
        public InputList<string> AllowedClients
        {
            get => _allowedClients ?? (_allowedClients = new InputList<string>());
            set => _allowedClients = value;
        }

        /// <summary>
        /// Is the CIFS protocol allowed?
        /// </summary>
        [Input("cifsEnabled")]
        public Input<bool>? CifsEnabled { get; set; }

        /// <summary>
        /// Is the NFSv3 protocol allowed?
        /// </summary>
        [Input("nfsv3Enabled")]
        public Input<bool>? Nfsv3Enabled { get; set; }

        /// <summary>
        /// Is the NFSv4 protocol allowed?
        /// </summary>
        [Input("nfsv4Enabled")]
        public Input<bool>? Nfsv4Enabled { get; set; }

        /// <summary>
        /// A list of allowed protocols. Valid values include `CIFS`, `NFSv3`, or `NFSv4.1`. Only one value is supported at this time. This replaces the previous arguments: `cifs_enabled`, `nfsv3_enabled` and `nfsv4_enabled`.
        /// </summary>
        [Input("protocolsEnabled")]
        public Input<string>? ProtocolsEnabled { get; set; }

        /// <summary>
        /// The index number of the rule.
        /// </summary>
        [Input("ruleIndex", required: true)]
        public Input<int> RuleIndex { get; set; } = null!;

        /// <summary>
        /// Is the file system on unix read only?
        /// </summary>
        [Input("unixReadOnly")]
        public Input<bool>? UnixReadOnly { get; set; }

        /// <summary>
        /// Is the file system on unix read and write?
        /// </summary>
        [Input("unixReadWrite")]
        public Input<bool>? UnixReadWrite { get; set; }

        public VolumeExportPolicyRulesArgs()
        {
        }
    }

    public sealed class VolumeExportPolicyRulesGetArgs : Pulumi.ResourceArgs
    {
        [Input("allowedClients", required: true)]
        private InputList<string>? _allowedClients;

        /// <summary>
        /// A list of allowed clients IPv4 addresses.
        /// </summary>
        public InputList<string> AllowedClients
        {
            get => _allowedClients ?? (_allowedClients = new InputList<string>());
            set => _allowedClients = value;
        }

        /// <summary>
        /// Is the CIFS protocol allowed?
        /// </summary>
        [Input("cifsEnabled")]
        public Input<bool>? CifsEnabled { get; set; }

        /// <summary>
        /// Is the NFSv3 protocol allowed?
        /// </summary>
        [Input("nfsv3Enabled")]
        public Input<bool>? Nfsv3Enabled { get; set; }

        /// <summary>
        /// Is the NFSv4 protocol allowed?
        /// </summary>
        [Input("nfsv4Enabled")]
        public Input<bool>? Nfsv4Enabled { get; set; }

        /// <summary>
        /// A list of allowed protocols. Valid values include `CIFS`, `NFSv3`, or `NFSv4.1`. Only one value is supported at this time. This replaces the previous arguments: `cifs_enabled`, `nfsv3_enabled` and `nfsv4_enabled`.
        /// </summary>
        [Input("protocolsEnabled")]
        public Input<string>? ProtocolsEnabled { get; set; }

        /// <summary>
        /// The index number of the rule.
        /// </summary>
        [Input("ruleIndex", required: true)]
        public Input<int> RuleIndex { get; set; } = null!;

        /// <summary>
        /// Is the file system on unix read only?
        /// </summary>
        [Input("unixReadOnly")]
        public Input<bool>? UnixReadOnly { get; set; }

        /// <summary>
        /// Is the file system on unix read and write?
        /// </summary>
        [Input("unixReadWrite")]
        public Input<bool>? UnixReadWrite { get; set; }

        public VolumeExportPolicyRulesGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class VolumeExportPolicyRules
    {
        /// <summary>
        /// A list of allowed clients IPv4 addresses.
        /// </summary>
        public readonly ImmutableArray<string> AllowedClients;
        /// <summary>
        /// Is the CIFS protocol allowed?
        /// </summary>
        public readonly bool CifsEnabled;
        /// <summary>
        /// Is the NFSv3 protocol allowed?
        /// </summary>
        public readonly bool Nfsv3Enabled;
        /// <summary>
        /// Is the NFSv4 protocol allowed?
        /// </summary>
        public readonly bool Nfsv4Enabled;
        /// <summary>
        /// A list of allowed protocols. Valid values include `CIFS`, `NFSv3`, or `NFSv4.1`. Only one value is supported at this time. This replaces the previous arguments: `cifs_enabled`, `nfsv3_enabled` and `nfsv4_enabled`.
        /// </summary>
        public readonly string ProtocolsEnabled;
        /// <summary>
        /// The index number of the rule.
        /// </summary>
        public readonly int RuleIndex;
        /// <summary>
        /// Is the file system on unix read only?
        /// </summary>
        public readonly bool? UnixReadOnly;
        /// <summary>
        /// Is the file system on unix read and write?
        /// </summary>
        public readonly bool? UnixReadWrite;

        [OutputConstructor]
        private VolumeExportPolicyRules(
            ImmutableArray<string> allowedClients,
            bool cifsEnabled,
            bool nfsv3Enabled,
            bool nfsv4Enabled,
            string protocolsEnabled,
            int ruleIndex,
            bool? unixReadOnly,
            bool? unixReadWrite)
        {
            AllowedClients = allowedClients;
            CifsEnabled = cifsEnabled;
            Nfsv3Enabled = nfsv3Enabled;
            Nfsv4Enabled = nfsv4Enabled;
            ProtocolsEnabled = protocolsEnabled;
            RuleIndex = ruleIndex;
            UnixReadOnly = unixReadOnly;
            UnixReadWrite = unixReadWrite;
        }
    }
    }
}
