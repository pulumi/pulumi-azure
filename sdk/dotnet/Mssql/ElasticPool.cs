// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.MSSql
{
    /// <summary>
    /// Allows you to manage an Azure SQL Elastic Pool via the `2017-10-01-preview` API which allows for `vCore` and `DTU` based configurations.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/mssql_elasticpool.html.markdown.
    /// </summary>
    public partial class ElasticPool : Pulumi.CustomResource
    {
        [Output("elasticPoolProperties")]
        public Output<Outputs.ElasticPoolElasticPoolProperties> ElasticPoolProperties { get; private set; } = null!;

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The max data size of the elastic pool in bytes. Conflicts with `max_size_gb`.
        /// </summary>
        [Output("maxSizeBytes")]
        public Output<int> MaxSizeBytes { get; private set; } = null!;

        /// <summary>
        /// The max data size of the elastic pool in gigabytes. Conflicts with `max_size_bytes`. 
        /// </summary>
        [Output("maxSizeGb")]
        public Output<double> MaxSizeGb { get; private set; } = null!;

        /// <summary>
        /// Specifies the SKU Name for this Elasticpool. The name of the SKU, will be either `vCore` based `tier` + `family` pattern (e.g. GP_Gen4, BC_Gen5) or the `DTU` based `BasicPool`, `StandardPool`, or `PremiumPool` pattern. 
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A `per_database_settings` block as defined below.
        /// </summary>
        [Output("perDatabaseSettings")]
        public Output<Outputs.ElasticPoolPerDatabaseSettings> PerDatabaseSettings { get; private set; } = null!;

        /// <summary>
        /// The name of the resource group in which to create the elastic pool. This must be the same as the resource group of the underlying SQL server.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// The name of the SQL Server on which to create the elastic pool. Changing this forces a new resource to be created.
        /// </summary>
        [Output("serverName")]
        public Output<string> ServerName { get; private set; } = null!;

        /// <summary>
        /// A `sku` block as defined below.
        /// </summary>
        [Output("sku")]
        public Output<Outputs.ElasticPoolSku> Sku { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, object>> Tags { get; private set; } = null!;

        /// <summary>
        /// Whether or not this elastic pool is zone redundant. `tier` needs to be `Premium` for `DTU` based  or `BusinessCritical` for `vCore` based `sku`. Defaults to `false`.
        /// </summary>
        [Output("zoneRedundant")]
        public Output<bool?> ZoneRedundant { get; private set; } = null!;


        /// <summary>
        /// Create a ElasticPool resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ElasticPool(string name, ElasticPoolArgs args, CustomResourceOptions? options = null)
            : base("azure:mssql/elasticPool:ElasticPool", name, args, MakeResourceOptions(options, ""))
        {
        }

        private ElasticPool(string name, Input<string> id, ElasticPoolState? state = null, CustomResourceOptions? options = null)
            : base("azure:mssql/elasticPool:ElasticPool", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ElasticPool resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ElasticPool Get(string name, Input<string> id, ElasticPoolState? state = null, CustomResourceOptions? options = null)
        {
            return new ElasticPool(name, id, state, options);
        }
    }

    public sealed class ElasticPoolArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The max data size of the elastic pool in bytes. Conflicts with `max_size_gb`.
        /// </summary>
        [Input("maxSizeBytes")]
        public Input<int>? MaxSizeBytes { get; set; }

        /// <summary>
        /// The max data size of the elastic pool in gigabytes. Conflicts with `max_size_bytes`. 
        /// </summary>
        [Input("maxSizeGb")]
        public Input<double>? MaxSizeGb { get; set; }

        /// <summary>
        /// Specifies the SKU Name for this Elasticpool. The name of the SKU, will be either `vCore` based `tier` + `family` pattern (e.g. GP_Gen4, BC_Gen5) or the `DTU` based `BasicPool`, `StandardPool`, or `PremiumPool` pattern. 
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A `per_database_settings` block as defined below.
        /// </summary>
        [Input("perDatabaseSettings", required: true)]
        public Input<Inputs.ElasticPoolPerDatabaseSettingsArgs> PerDatabaseSettings { get; set; } = null!;

        /// <summary>
        /// The name of the resource group in which to create the elastic pool. This must be the same as the resource group of the underlying SQL server.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the SQL Server on which to create the elastic pool. Changing this forces a new resource to be created.
        /// </summary>
        [Input("serverName", required: true)]
        public Input<string> ServerName { get; set; } = null!;

        /// <summary>
        /// A `sku` block as defined below.
        /// </summary>
        [Input("sku", required: true)]
        public Input<Inputs.ElasticPoolSkuArgs> Sku { get; set; } = null!;

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        /// <summary>
        /// Whether or not this elastic pool is zone redundant. `tier` needs to be `Premium` for `DTU` based  or `BusinessCritical` for `vCore` based `sku`. Defaults to `false`.
        /// </summary>
        [Input("zoneRedundant")]
        public Input<bool>? ZoneRedundant { get; set; }

        public ElasticPoolArgs()
        {
        }
    }

    public sealed class ElasticPoolState : Pulumi.ResourceArgs
    {
        [Input("elasticPoolProperties")]
        public Input<Inputs.ElasticPoolElasticPoolPropertiesGetArgs>? ElasticPoolProperties { get; set; }

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The max data size of the elastic pool in bytes. Conflicts with `max_size_gb`.
        /// </summary>
        [Input("maxSizeBytes")]
        public Input<int>? MaxSizeBytes { get; set; }

        /// <summary>
        /// The max data size of the elastic pool in gigabytes. Conflicts with `max_size_bytes`. 
        /// </summary>
        [Input("maxSizeGb")]
        public Input<double>? MaxSizeGb { get; set; }

        /// <summary>
        /// Specifies the SKU Name for this Elasticpool. The name of the SKU, will be either `vCore` based `tier` + `family` pattern (e.g. GP_Gen4, BC_Gen5) or the `DTU` based `BasicPool`, `StandardPool`, or `PremiumPool` pattern. 
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A `per_database_settings` block as defined below.
        /// </summary>
        [Input("perDatabaseSettings")]
        public Input<Inputs.ElasticPoolPerDatabaseSettingsGetArgs>? PerDatabaseSettings { get; set; }

        /// <summary>
        /// The name of the resource group in which to create the elastic pool. This must be the same as the resource group of the underlying SQL server.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// The name of the SQL Server on which to create the elastic pool. Changing this forces a new resource to be created.
        /// </summary>
        [Input("serverName")]
        public Input<string>? ServerName { get; set; }

        /// <summary>
        /// A `sku` block as defined below.
        /// </summary>
        [Input("sku")]
        public Input<Inputs.ElasticPoolSkuGetArgs>? Sku { get; set; }

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        /// <summary>
        /// Whether or not this elastic pool is zone redundant. `tier` needs to be `Premium` for `DTU` based  or `BusinessCritical` for `vCore` based `sku`. Defaults to `false`.
        /// </summary>
        [Input("zoneRedundant")]
        public Input<bool>? ZoneRedundant { get; set; }

        public ElasticPoolState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class ElasticPoolElasticPoolPropertiesGetArgs : Pulumi.ResourceArgs
    {
        [Input("creationDate")]
        public Input<string>? CreationDate { get; set; }

        [Input("licenseType")]
        public Input<string>? LicenseType { get; set; }

        /// <summary>
        /// The max data size of the elastic pool in bytes. Conflicts with `max_size_gb`.
        /// </summary>
        [Input("maxSizeBytes")]
        public Input<int>? MaxSizeBytes { get; set; }

        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Whether or not this elastic pool is zone redundant. `tier` needs to be `Premium` for `DTU` based  or `BusinessCritical` for `vCore` based `sku`. Defaults to `false`.
        /// </summary>
        [Input("zoneRedundant")]
        public Input<bool>? ZoneRedundant { get; set; }

        public ElasticPoolElasticPoolPropertiesGetArgs()
        {
        }
    }

    public sealed class ElasticPoolPerDatabaseSettingsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The maximum capacity any one database can consume.
        /// </summary>
        [Input("maxCapacity", required: true)]
        public Input<double> MaxCapacity { get; set; } = null!;

        /// <summary>
        /// The minimum capacity all databases are guaranteed.
        /// </summary>
        [Input("minCapacity", required: true)]
        public Input<double> MinCapacity { get; set; } = null!;

        public ElasticPoolPerDatabaseSettingsArgs()
        {
        }
    }

    public sealed class ElasticPoolPerDatabaseSettingsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The maximum capacity any one database can consume.
        /// </summary>
        [Input("maxCapacity", required: true)]
        public Input<double> MaxCapacity { get; set; } = null!;

        /// <summary>
        /// The minimum capacity all databases are guaranteed.
        /// </summary>
        [Input("minCapacity", required: true)]
        public Input<double> MinCapacity { get; set; } = null!;

        public ElasticPoolPerDatabaseSettingsGetArgs()
        {
        }
    }

    public sealed class ElasticPoolSkuArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The scale up/out capacity, representing server's compute units. For more information see the documentation for your Elasticpool configuration: [vCore-based](https://docs.microsoft.com/en-us/azure/sql-database/sql-database-vcore-resource-limits-elastic-pools) or [DTU-based](https://docs.microsoft.com/en-us/azure/sql-database/sql-database-dtu-resource-limits-elastic-pools).
        /// </summary>
        [Input("capacity", required: true)]
        public Input<int> Capacity { get; set; } = null!;

        /// <summary>
        /// The `family` of hardware `Gen4` or `Gen5`.
        /// </summary>
        [Input("family")]
        public Input<string>? Family { get; set; }

        /// <summary>
        /// Specifies the SKU Name for this Elasticpool. The name of the SKU, will be either `vCore` based `tier` + `family` pattern (e.g. GP_Gen4, BC_Gen5) or the `DTU` based `BasicPool`, `StandardPool`, or `PremiumPool` pattern. 
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The tier of the particular SKU. Possible values are `GeneralPurpose`, `BusinessCritical`, `Basic`, `Standard`, or `Premium`. For more information see the documentation for your Elasticpool configuration: [vCore-based](https://docs.microsoft.com/en-us/azure/sql-database/sql-database-vcore-resource-limits-elastic-pools) or [DTU-based](https://docs.microsoft.com/en-us/azure/sql-database/sql-database-dtu-resource-limits-elastic-pools).
        /// </summary>
        [Input("tier", required: true)]
        public Input<string> Tier { get; set; } = null!;

        public ElasticPoolSkuArgs()
        {
        }
    }

    public sealed class ElasticPoolSkuGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The scale up/out capacity, representing server's compute units. For more information see the documentation for your Elasticpool configuration: [vCore-based](https://docs.microsoft.com/en-us/azure/sql-database/sql-database-vcore-resource-limits-elastic-pools) or [DTU-based](https://docs.microsoft.com/en-us/azure/sql-database/sql-database-dtu-resource-limits-elastic-pools).
        /// </summary>
        [Input("capacity", required: true)]
        public Input<int> Capacity { get; set; } = null!;

        /// <summary>
        /// The `family` of hardware `Gen4` or `Gen5`.
        /// </summary>
        [Input("family")]
        public Input<string>? Family { get; set; }

        /// <summary>
        /// Specifies the SKU Name for this Elasticpool. The name of the SKU, will be either `vCore` based `tier` + `family` pattern (e.g. GP_Gen4, BC_Gen5) or the `DTU` based `BasicPool`, `StandardPool`, or `PremiumPool` pattern. 
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The tier of the particular SKU. Possible values are `GeneralPurpose`, `BusinessCritical`, `Basic`, `Standard`, or `Premium`. For more information see the documentation for your Elasticpool configuration: [vCore-based](https://docs.microsoft.com/en-us/azure/sql-database/sql-database-vcore-resource-limits-elastic-pools) or [DTU-based](https://docs.microsoft.com/en-us/azure/sql-database/sql-database-dtu-resource-limits-elastic-pools).
        /// </summary>
        [Input("tier", required: true)]
        public Input<string> Tier { get; set; } = null!;

        public ElasticPoolSkuGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class ElasticPoolElasticPoolProperties
    {
        public readonly string CreationDate;
        public readonly string LicenseType;
        /// <summary>
        /// The max data size of the elastic pool in bytes. Conflicts with `max_size_gb`.
        /// </summary>
        public readonly int MaxSizeBytes;
        public readonly string State;
        /// <summary>
        /// Whether or not this elastic pool is zone redundant. `tier` needs to be `Premium` for `DTU` based  or `BusinessCritical` for `vCore` based `sku`. Defaults to `false`.
        /// </summary>
        public readonly bool ZoneRedundant;

        [OutputConstructor]
        private ElasticPoolElasticPoolProperties(
            string creationDate,
            string licenseType,
            int maxSizeBytes,
            string state,
            bool zoneRedundant)
        {
            CreationDate = creationDate;
            LicenseType = licenseType;
            MaxSizeBytes = maxSizeBytes;
            State = state;
            ZoneRedundant = zoneRedundant;
        }
    }

    [OutputType]
    public sealed class ElasticPoolPerDatabaseSettings
    {
        /// <summary>
        /// The maximum capacity any one database can consume.
        /// </summary>
        public readonly double MaxCapacity;
        /// <summary>
        /// The minimum capacity all databases are guaranteed.
        /// </summary>
        public readonly double MinCapacity;

        [OutputConstructor]
        private ElasticPoolPerDatabaseSettings(
            double maxCapacity,
            double minCapacity)
        {
            MaxCapacity = maxCapacity;
            MinCapacity = minCapacity;
        }
    }

    [OutputType]
    public sealed class ElasticPoolSku
    {
        /// <summary>
        /// The scale up/out capacity, representing server's compute units. For more information see the documentation for your Elasticpool configuration: [vCore-based](https://docs.microsoft.com/en-us/azure/sql-database/sql-database-vcore-resource-limits-elastic-pools) or [DTU-based](https://docs.microsoft.com/en-us/azure/sql-database/sql-database-dtu-resource-limits-elastic-pools).
        /// </summary>
        public readonly int Capacity;
        /// <summary>
        /// The `family` of hardware `Gen4` or `Gen5`.
        /// </summary>
        public readonly string? Family;
        /// <summary>
        /// Specifies the SKU Name for this Elasticpool. The name of the SKU, will be either `vCore` based `tier` + `family` pattern (e.g. GP_Gen4, BC_Gen5) or the `DTU` based `BasicPool`, `StandardPool`, or `PremiumPool` pattern. 
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The tier of the particular SKU. Possible values are `GeneralPurpose`, `BusinessCritical`, `Basic`, `Standard`, or `Premium`. For more information see the documentation for your Elasticpool configuration: [vCore-based](https://docs.microsoft.com/en-us/azure/sql-database/sql-database-vcore-resource-limits-elastic-pools) or [DTU-based](https://docs.microsoft.com/en-us/azure/sql-database/sql-database-dtu-resource-limits-elastic-pools).
        /// </summary>
        public readonly string Tier;

        [OutputConstructor]
        private ElasticPoolSku(
            int capacity,
            string? family,
            string name,
            string tier)
        {
            Capacity = capacity;
            Family = family;
            Name = name;
            Tier = tier;
        }
    }
    }
}
