// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Lab
{
    /// <summary>
    /// Manages a Lab Service Lab.
    /// 
    /// ## Import
    /// 
    /// Lab Service Labs can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:lab/lab:Lab example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.LabServices/labs/lab1
    /// ```
    /// </summary>
    [AzureResourceType("azure:lab/lab:Lab")]
    public partial class Lab : global::Pulumi.CustomResource
    {
        /// <summary>
        /// An `auto_shutdown` block as defined below.
        /// </summary>
        [Output("autoShutdown")]
        public Output<Outputs.LabAutoShutdown?> AutoShutdown { get; private set; } = null!;

        /// <summary>
        /// A `connection_setting` block as defined below.
        /// </summary>
        [Output("connectionSetting")]
        public Output<Outputs.LabConnectionSetting?> ConnectionSetting { get; private set; } = null!;

        /// <summary>
        /// The description of the Lab Service Lab.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The resource ID of the Lab Plan that is used during resource creation to provide defaults and acts as a permission container when creating a Lab Service Lab via `labs.azure.com`.
        /// </summary>
        [Output("labPlanId")]
        public Output<string?> LabPlanId { get; private set; } = null!;

        /// <summary>
        /// The Azure Region where the Lab Service Lab should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Lab Service Lab. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A `network` block as defined below.
        /// </summary>
        [Output("network")]
        public Output<Outputs.LabNetwork?> Network { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Lab Service Lab should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// A `roster` block as defined below.
        /// </summary>
        [Output("roster")]
        public Output<Outputs.LabRoster?> Roster { get; private set; } = null!;

        /// <summary>
        /// A `security` block as defined below.
        /// </summary>
        [Output("security")]
        public Output<Outputs.LabSecurity> Security { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags which should be assigned to the Lab Service Lab.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The title of the Lab Service Lab.
        /// </summary>
        [Output("title")]
        public Output<string> Title { get; private set; } = null!;

        /// <summary>
        /// A `virtual_machine` block as defined below.
        /// </summary>
        [Output("virtualMachine")]
        public Output<Outputs.LabVirtualMachine> VirtualMachine { get; private set; } = null!;


        /// <summary>
        /// Create a Lab resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Lab(string name, LabArgs args, CustomResourceOptions? options = null)
            : base("azure:lab/lab:Lab", name, args ?? new LabArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Lab(string name, Input<string> id, LabState? state = null, CustomResourceOptions? options = null)
            : base("azure:lab/lab:Lab", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Lab resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Lab Get(string name, Input<string> id, LabState? state = null, CustomResourceOptions? options = null)
        {
            return new Lab(name, id, state, options);
        }
    }

    public sealed class LabArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An `auto_shutdown` block as defined below.
        /// </summary>
        [Input("autoShutdown")]
        public Input<Inputs.LabAutoShutdownArgs>? AutoShutdown { get; set; }

        /// <summary>
        /// A `connection_setting` block as defined below.
        /// </summary>
        [Input("connectionSetting")]
        public Input<Inputs.LabConnectionSettingArgs>? ConnectionSetting { get; set; }

        /// <summary>
        /// The description of the Lab Service Lab.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The resource ID of the Lab Plan that is used during resource creation to provide defaults and acts as a permission container when creating a Lab Service Lab via `labs.azure.com`.
        /// </summary>
        [Input("labPlanId")]
        public Input<string>? LabPlanId { get; set; }

        /// <summary>
        /// The Azure Region where the Lab Service Lab should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name which should be used for this Lab Service Lab. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A `network` block as defined below.
        /// </summary>
        [Input("network")]
        public Input<Inputs.LabNetworkArgs>? Network { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Lab Service Lab should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// A `roster` block as defined below.
        /// </summary>
        [Input("roster")]
        public Input<Inputs.LabRosterArgs>? Roster { get; set; }

        /// <summary>
        /// A `security` block as defined below.
        /// </summary>
        [Input("security", required: true)]
        public Input<Inputs.LabSecurityArgs> Security { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Lab Service Lab.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The title of the Lab Service Lab.
        /// </summary>
        [Input("title", required: true)]
        public Input<string> Title { get; set; } = null!;

        /// <summary>
        /// A `virtual_machine` block as defined below.
        /// </summary>
        [Input("virtualMachine", required: true)]
        public Input<Inputs.LabVirtualMachineArgs> VirtualMachine { get; set; } = null!;

        public LabArgs()
        {
        }
        public static new LabArgs Empty => new LabArgs();
    }

    public sealed class LabState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An `auto_shutdown` block as defined below.
        /// </summary>
        [Input("autoShutdown")]
        public Input<Inputs.LabAutoShutdownGetArgs>? AutoShutdown { get; set; }

        /// <summary>
        /// A `connection_setting` block as defined below.
        /// </summary>
        [Input("connectionSetting")]
        public Input<Inputs.LabConnectionSettingGetArgs>? ConnectionSetting { get; set; }

        /// <summary>
        /// The description of the Lab Service Lab.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The resource ID of the Lab Plan that is used during resource creation to provide defaults and acts as a permission container when creating a Lab Service Lab via `labs.azure.com`.
        /// </summary>
        [Input("labPlanId")]
        public Input<string>? LabPlanId { get; set; }

        /// <summary>
        /// The Azure Region where the Lab Service Lab should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name which should be used for this Lab Service Lab. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A `network` block as defined below.
        /// </summary>
        [Input("network")]
        public Input<Inputs.LabNetworkGetArgs>? Network { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Lab Service Lab should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// A `roster` block as defined below.
        /// </summary>
        [Input("roster")]
        public Input<Inputs.LabRosterGetArgs>? Roster { get; set; }

        /// <summary>
        /// A `security` block as defined below.
        /// </summary>
        [Input("security")]
        public Input<Inputs.LabSecurityGetArgs>? Security { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Lab Service Lab.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The title of the Lab Service Lab.
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        /// <summary>
        /// A `virtual_machine` block as defined below.
        /// </summary>
        [Input("virtualMachine")]
        public Input<Inputs.LabVirtualMachineGetArgs>? VirtualMachine { get; set; }

        public LabState()
        {
        }
        public static new LabState Empty => new LabState();
    }
}
