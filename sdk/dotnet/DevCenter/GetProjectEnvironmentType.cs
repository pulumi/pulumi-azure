// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.DevCenter
{
    public static class GetProjectEnvironmentType
    {
        /// <summary>
        /// Use this data source to access information about an existing Dev Center Project Environment Type.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.DevCenter.GetProjectEnvironmentType.Invoke(new()
        ///     {
        ///         Name = exampleAzurermDevCenterProjectEnvironmentType.Name,
        ///         DevCenterProjectId = exampleAzurermDevCenterProjectEnvironmentType.DevCenterProjectId,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getProjectEnvironmentTypeResult =&gt; getProjectEnvironmentTypeResult.Id),
        ///     };
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Microsoft.DevCenter` - 2025-02-01
        /// </summary>
        public static Task<GetProjectEnvironmentTypeResult> InvokeAsync(GetProjectEnvironmentTypeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetProjectEnvironmentTypeResult>("azure:devcenter/getProjectEnvironmentType:getProjectEnvironmentType", args ?? new GetProjectEnvironmentTypeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Dev Center Project Environment Type.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.DevCenter.GetProjectEnvironmentType.Invoke(new()
        ///     {
        ///         Name = exampleAzurermDevCenterProjectEnvironmentType.Name,
        ///         DevCenterProjectId = exampleAzurermDevCenterProjectEnvironmentType.DevCenterProjectId,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getProjectEnvironmentTypeResult =&gt; getProjectEnvironmentTypeResult.Id),
        ///     };
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Microsoft.DevCenter` - 2025-02-01
        /// </summary>
        public static Output<GetProjectEnvironmentTypeResult> Invoke(GetProjectEnvironmentTypeInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetProjectEnvironmentTypeResult>("azure:devcenter/getProjectEnvironmentType:getProjectEnvironmentType", args ?? new GetProjectEnvironmentTypeInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Dev Center Project Environment Type.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.DevCenter.GetProjectEnvironmentType.Invoke(new()
        ///     {
        ///         Name = exampleAzurermDevCenterProjectEnvironmentType.Name,
        ///         DevCenterProjectId = exampleAzurermDevCenterProjectEnvironmentType.DevCenterProjectId,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getProjectEnvironmentTypeResult =&gt; getProjectEnvironmentTypeResult.Id),
        ///     };
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Microsoft.DevCenter` - 2025-02-01
        /// </summary>
        public static Output<GetProjectEnvironmentTypeResult> Invoke(GetProjectEnvironmentTypeInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetProjectEnvironmentTypeResult>("azure:devcenter/getProjectEnvironmentType:getProjectEnvironmentType", args ?? new GetProjectEnvironmentTypeInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetProjectEnvironmentTypeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the associated Dev Center Project.
        /// </summary>
        [Input("devCenterProjectId", required: true)]
        public string DevCenterProjectId { get; set; } = null!;

        /// <summary>
        /// The name of this Dev Center Project Environment Type.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetProjectEnvironmentTypeArgs()
        {
        }
        public static new GetProjectEnvironmentTypeArgs Empty => new GetProjectEnvironmentTypeArgs();
    }

    public sealed class GetProjectEnvironmentTypeInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the associated Dev Center Project.
        /// </summary>
        [Input("devCenterProjectId", required: true)]
        public Input<string> DevCenterProjectId { get; set; } = null!;

        /// <summary>
        /// The name of this Dev Center Project Environment Type.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetProjectEnvironmentTypeInvokeArgs()
        {
        }
        public static new GetProjectEnvironmentTypeInvokeArgs Empty => new GetProjectEnvironmentTypeInvokeArgs();
    }


    [OutputType]
    public sealed class GetProjectEnvironmentTypeResult
    {
        /// <summary>
        /// A list of roles assigned to the environment creator.
        /// </summary>
        public readonly ImmutableArray<string> CreatorRoleAssignmentRoles;
        /// <summary>
        /// The ID of the subscription that the Environment Type is mapped to.
        /// </summary>
        public readonly string DeploymentTargetId;
        public readonly string DevCenterProjectId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// An `Identity` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProjectEnvironmentTypeIdentityResult> Identities;
        /// <summary>
        /// The Azure Region where the Dev Center Project Environment Type exists.
        /// </summary>
        public readonly string Location;
        public readonly string Name;
        /// <summary>
        /// A mapping of tags assigned to the Dev Center Project Environment Type.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// A `UserRoleAssignment` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProjectEnvironmentTypeUserRoleAssignmentResult> UserRoleAssignments;

        [OutputConstructor]
        private GetProjectEnvironmentTypeResult(
            ImmutableArray<string> creatorRoleAssignmentRoles,

            string deploymentTargetId,

            string devCenterProjectId,

            string id,

            ImmutableArray<Outputs.GetProjectEnvironmentTypeIdentityResult> identities,

            string location,

            string name,

            ImmutableDictionary<string, string> tags,

            ImmutableArray<Outputs.GetProjectEnvironmentTypeUserRoleAssignmentResult> userRoleAssignments)
        {
            CreatorRoleAssignmentRoles = creatorRoleAssignmentRoles;
            DeploymentTargetId = deploymentTargetId;
            DevCenterProjectId = devCenterProjectId;
            Id = id;
            Identities = identities;
            Location = location;
            Name = name;
            Tags = tags;
            UserRoleAssignments = userRoleAssignments;
        }
    }
}
