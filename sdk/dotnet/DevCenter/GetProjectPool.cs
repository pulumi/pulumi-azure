// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.DevCenter
{
    public static class GetProjectPool
    {
        /// <summary>
        /// Use this data source to access information about an existing Dev Center Project Pool.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.DevCenter.GetProjectPool.Invoke(new()
        ///     {
        ///         Name = exampleAzurermDevCenterProjectPool.Name,
        ///         DevCenterProjectId = exampleAzurermDevCenterProjectPool.DevCenterProjectId,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getProjectPoolResult =&gt; getProjectPoolResult.Id),
        ///     };
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Microsoft.DevCenter` - 2025-02-01
        /// </summary>
        public static Task<GetProjectPoolResult> InvokeAsync(GetProjectPoolArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetProjectPoolResult>("azure:devcenter/getProjectPool:getProjectPool", args ?? new GetProjectPoolArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Dev Center Project Pool.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.DevCenter.GetProjectPool.Invoke(new()
        ///     {
        ///         Name = exampleAzurermDevCenterProjectPool.Name,
        ///         DevCenterProjectId = exampleAzurermDevCenterProjectPool.DevCenterProjectId,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getProjectPoolResult =&gt; getProjectPoolResult.Id),
        ///     };
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Microsoft.DevCenter` - 2025-02-01
        /// </summary>
        public static Output<GetProjectPoolResult> Invoke(GetProjectPoolInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetProjectPoolResult>("azure:devcenter/getProjectPool:getProjectPool", args ?? new GetProjectPoolInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Dev Center Project Pool.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.DevCenter.GetProjectPool.Invoke(new()
        ///     {
        ///         Name = exampleAzurermDevCenterProjectPool.Name,
        ///         DevCenterProjectId = exampleAzurermDevCenterProjectPool.DevCenterProjectId,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getProjectPoolResult =&gt; getProjectPoolResult.Id),
        ///     };
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Microsoft.DevCenter` - 2025-02-01
        /// </summary>
        public static Output<GetProjectPoolResult> Invoke(GetProjectPoolInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetProjectPoolResult>("azure:devcenter/getProjectPool:getProjectPool", args ?? new GetProjectPoolInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetProjectPoolArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the associated Dev Center Project.
        /// </summary>
        [Input("devCenterProjectId", required: true)]
        public string DevCenterProjectId { get; set; } = null!;

        /// <summary>
        /// The name of this Dev Center Project Pool.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetProjectPoolArgs()
        {
        }
        public static new GetProjectPoolArgs Empty => new GetProjectPoolArgs();
    }

    public sealed class GetProjectPoolInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the associated Dev Center Project.
        /// </summary>
        [Input("devCenterProjectId", required: true)]
        public Input<string> DevCenterProjectId { get; set; } = null!;

        /// <summary>
        /// The name of this Dev Center Project Pool.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetProjectPoolInvokeArgs()
        {
        }
        public static new GetProjectPoolInvokeArgs Empty => new GetProjectPoolInvokeArgs();
    }


    [OutputType]
    public sealed class GetProjectPoolResult
    {
        /// <summary>
        /// The name of the Dev Center Dev Box Definition.
        /// </summary>
        public readonly string DevBoxDefinitionName;
        /// <summary>
        /// The name of the Dev Center Attached Network in parent Project of the Dev Center Project Pool.
        /// </summary>
        public readonly string DevCenterAttachedNetworkName;
        public readonly string DevCenterProjectId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Specifies whether owners of Dev Boxes in the Dev Center Project Pool are added as local administrators on the Dev Box.
        /// </summary>
        public readonly bool LocalAdministratorEnabled;
        /// <summary>
        /// The Azure Region where the Dev Center Project Pool exists.
        /// </summary>
        public readonly string Location;
        public readonly string Name;
        /// <summary>
        /// Specifies whether Dev Boxes in the Pool will have SSO enabled or disabled.
        /// </summary>
        public readonly bool SingleSignOnEnabled;
        /// <summary>
        /// The specified time in minutes to wait before stopping a Dev Center Dev Box once disconnect is detected.
        /// </summary>
        public readonly int StopOnDisconnectGracePeriodMinutes;
        /// <summary>
        /// A mapping of tags assigned to the Dev Center Project Pool.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;

        [OutputConstructor]
        private GetProjectPoolResult(
            string devBoxDefinitionName,

            string devCenterAttachedNetworkName,

            string devCenterProjectId,

            string id,

            bool localAdministratorEnabled,

            string location,

            string name,

            bool singleSignOnEnabled,

            int stopOnDisconnectGracePeriodMinutes,

            ImmutableDictionary<string, string> tags)
        {
            DevBoxDefinitionName = devBoxDefinitionName;
            DevCenterAttachedNetworkName = devCenterAttachedNetworkName;
            DevCenterProjectId = devCenterProjectId;
            Id = id;
            LocalAdministratorEnabled = localAdministratorEnabled;
            Location = location;
            Name = name;
            SingleSignOnEnabled = singleSignOnEnabled;
            StopOnDisconnectGracePeriodMinutes = stopOnDisconnectGracePeriodMinutes;
            Tags = tags;
        }
    }
}
