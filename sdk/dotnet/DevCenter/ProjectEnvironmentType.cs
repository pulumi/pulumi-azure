// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.DevCenter
{
    /// <summary>
    /// Manages a Dev Center Project Environment Type.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var current = Azure.Core.GetClientConfig.Invoke();
    /// 
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Name = "example-resources",
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleDevCenter = new Azure.DevCenter.DevCenter("example", new()
    ///     {
    ///         Name = "example-dc",
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///         Identity = new Azure.DevCenter.Inputs.DevCenterIdentityArgs
    ///         {
    ///             Type = "SystemAssigned",
    ///         },
    ///     });
    /// 
    ///     var exampleEnvironmentType = new Azure.DevCenter.EnvironmentType("example", new()
    ///     {
    ///         Name = "example-et",
    ///         DevCenterId = exampleDevCenter.Id,
    ///     });
    /// 
    ///     var exampleProject = new Azure.DevCenter.Project("example", new()
    ///     {
    ///         Name = "example-dcp",
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///         DevCenterId = exampleDevCenter.Id,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             exampleEnvironmentType,
    ///         },
    ///     });
    /// 
    ///     var exampleProjectEnvironmentType = new Azure.DevCenter.ProjectEnvironmentType("example", new()
    ///     {
    ///         Name = "example-et",
    ///         Location = example.Location,
    ///         DevCenterProjectId = exampleProject.Id,
    ///         DeploymentTargetId = $"/subscriptions/{current.Apply(getClientConfigResult =&gt; getClientConfigResult.SubscriptionId)}",
    ///         Identity = new Azure.DevCenter.Inputs.ProjectEnvironmentTypeIdentityArgs
    ///         {
    ///             Type = "SystemAssigned",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## API Providers
    /// 
    /// &lt;!-- This section is generated, changes will be overwritten --&gt;
    /// This resource uses the following Azure API Providers:
    /// 
    /// * `Microsoft.DevCenter` - 2025-02-01
    /// 
    /// ## Import
    /// 
    /// An existing Dev Center Project Environment Type can be imported into Pulumi using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:devcenter/projectEnvironmentType:ProjectEnvironmentType example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DevCenter/projects/project1/environmentTypes/et1
    /// ```
    /// </summary>
    [AzureResourceType("azure:devcenter/projectEnvironmentType:ProjectEnvironmentType")]
    public partial class ProjectEnvironmentType : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A list of roles to assign to the environment creator.
        /// </summary>
        [Output("creatorRoleAssignmentRoles")]
        public Output<ImmutableArray<string>> CreatorRoleAssignmentRoles { get; private set; } = null!;

        /// <summary>
        /// The ID of the subscription that the Environment Type will be mapped to. The environment's resources will be deployed into this subscription.
        /// </summary>
        [Output("deploymentTargetId")]
        public Output<string> DeploymentTargetId { get; private set; } = null!;

        /// <summary>
        /// The ID of the associated Dev Center Project. Changing this forces a new resource to be created.
        /// </summary>
        [Output("devCenterProjectId")]
        public Output<string> DevCenterProjectId { get; private set; } = null!;

        /// <summary>
        /// An `Identity` block as defined below.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.ProjectEnvironmentTypeIdentity> Identity { get; private set; } = null!;

        /// <summary>
        /// The Azure Region where the Dev Center Project Environment Type should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of this Dev Center Project Environment Type. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags which should be assigned to the Dev Center Project Environment Type.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A `UserRoleAssignment` block as defined below.
        /// </summary>
        [Output("userRoleAssignments")]
        public Output<ImmutableArray<Outputs.ProjectEnvironmentTypeUserRoleAssignment>> UserRoleAssignments { get; private set; } = null!;


        /// <summary>
        /// Create a ProjectEnvironmentType resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProjectEnvironmentType(string name, ProjectEnvironmentTypeArgs args, CustomResourceOptions? options = null)
            : base("azure:devcenter/projectEnvironmentType:ProjectEnvironmentType", name, args ?? new ProjectEnvironmentTypeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ProjectEnvironmentType(string name, Input<string> id, ProjectEnvironmentTypeState? state = null, CustomResourceOptions? options = null)
            : base("azure:devcenter/projectEnvironmentType:ProjectEnvironmentType", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProjectEnvironmentType resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProjectEnvironmentType Get(string name, Input<string> id, ProjectEnvironmentTypeState? state = null, CustomResourceOptions? options = null)
        {
            return new ProjectEnvironmentType(name, id, state, options);
        }
    }

    public sealed class ProjectEnvironmentTypeArgs : global::Pulumi.ResourceArgs
    {
        [Input("creatorRoleAssignmentRoles")]
        private InputList<string>? _creatorRoleAssignmentRoles;

        /// <summary>
        /// A list of roles to assign to the environment creator.
        /// </summary>
        public InputList<string> CreatorRoleAssignmentRoles
        {
            get => _creatorRoleAssignmentRoles ?? (_creatorRoleAssignmentRoles = new InputList<string>());
            set => _creatorRoleAssignmentRoles = value;
        }

        /// <summary>
        /// The ID of the subscription that the Environment Type will be mapped to. The environment's resources will be deployed into this subscription.
        /// </summary>
        [Input("deploymentTargetId", required: true)]
        public Input<string> DeploymentTargetId { get; set; } = null!;

        /// <summary>
        /// The ID of the associated Dev Center Project. Changing this forces a new resource to be created.
        /// </summary>
        [Input("devCenterProjectId", required: true)]
        public Input<string> DevCenterProjectId { get; set; } = null!;

        /// <summary>
        /// An `Identity` block as defined below.
        /// </summary>
        [Input("identity", required: true)]
        public Input<Inputs.ProjectEnvironmentTypeIdentityArgs> Identity { get; set; } = null!;

        /// <summary>
        /// The Azure Region where the Dev Center Project Environment Type should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Specifies the name of this Dev Center Project Environment Type. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Dev Center Project Environment Type.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("userRoleAssignments")]
        private InputList<Inputs.ProjectEnvironmentTypeUserRoleAssignmentArgs>? _userRoleAssignments;

        /// <summary>
        /// A `UserRoleAssignment` block as defined below.
        /// </summary>
        public InputList<Inputs.ProjectEnvironmentTypeUserRoleAssignmentArgs> UserRoleAssignments
        {
            get => _userRoleAssignments ?? (_userRoleAssignments = new InputList<Inputs.ProjectEnvironmentTypeUserRoleAssignmentArgs>());
            set => _userRoleAssignments = value;
        }

        public ProjectEnvironmentTypeArgs()
        {
        }
        public static new ProjectEnvironmentTypeArgs Empty => new ProjectEnvironmentTypeArgs();
    }

    public sealed class ProjectEnvironmentTypeState : global::Pulumi.ResourceArgs
    {
        [Input("creatorRoleAssignmentRoles")]
        private InputList<string>? _creatorRoleAssignmentRoles;

        /// <summary>
        /// A list of roles to assign to the environment creator.
        /// </summary>
        public InputList<string> CreatorRoleAssignmentRoles
        {
            get => _creatorRoleAssignmentRoles ?? (_creatorRoleAssignmentRoles = new InputList<string>());
            set => _creatorRoleAssignmentRoles = value;
        }

        /// <summary>
        /// The ID of the subscription that the Environment Type will be mapped to. The environment's resources will be deployed into this subscription.
        /// </summary>
        [Input("deploymentTargetId")]
        public Input<string>? DeploymentTargetId { get; set; }

        /// <summary>
        /// The ID of the associated Dev Center Project. Changing this forces a new resource to be created.
        /// </summary>
        [Input("devCenterProjectId")]
        public Input<string>? DevCenterProjectId { get; set; }

        /// <summary>
        /// An `Identity` block as defined below.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.ProjectEnvironmentTypeIdentityGetArgs>? Identity { get; set; }

        /// <summary>
        /// The Azure Region where the Dev Center Project Environment Type should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Specifies the name of this Dev Center Project Environment Type. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Dev Center Project Environment Type.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("userRoleAssignments")]
        private InputList<Inputs.ProjectEnvironmentTypeUserRoleAssignmentGetArgs>? _userRoleAssignments;

        /// <summary>
        /// A `UserRoleAssignment` block as defined below.
        /// </summary>
        public InputList<Inputs.ProjectEnvironmentTypeUserRoleAssignmentGetArgs> UserRoleAssignments
        {
            get => _userRoleAssignments ?? (_userRoleAssignments = new InputList<Inputs.ProjectEnvironmentTypeUserRoleAssignmentGetArgs>());
            set => _userRoleAssignments = value;
        }

        public ProjectEnvironmentTypeState()
        {
        }
        public static new ProjectEnvironmentTypeState Empty => new ProjectEnvironmentTypeState();
    }
}
