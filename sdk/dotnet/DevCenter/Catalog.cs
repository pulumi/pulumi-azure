// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.DevCenter
{
    [AzureResourceType("azure:devcenter/catalog:Catalog")]
    public partial class Catalog : global::Pulumi.CustomResource
    {
        [Output("catalogAdogit")]
        public Output<Outputs.CatalogCatalogAdogit?> CatalogAdogit { get; private set; } = null!;

        [Output("catalogGithub")]
        public Output<Outputs.CatalogCatalogGithub?> CatalogGithub { get; private set; } = null!;

        [Output("devCenterId")]
        public Output<string> DevCenterId { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;


        /// <summary>
        /// Create a Catalog resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Catalog(string name, CatalogArgs args, CustomResourceOptions? options = null)
            : base("azure:devcenter/catalog:Catalog", name, args ?? new CatalogArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Catalog(string name, Input<string> id, CatalogState? state = null, CustomResourceOptions? options = null)
            : base("azure:devcenter/catalog:Catalog", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Catalog resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Catalog Get(string name, Input<string> id, CatalogState? state = null, CustomResourceOptions? options = null)
        {
            return new Catalog(name, id, state, options);
        }
    }

    public sealed class CatalogArgs : global::Pulumi.ResourceArgs
    {
        [Input("catalogAdogit")]
        public Input<Inputs.CatalogCatalogAdogitArgs>? CatalogAdogit { get; set; }

        [Input("catalogGithub")]
        public Input<Inputs.CatalogCatalogGithubArgs>? CatalogGithub { get; set; }

        [Input("devCenterId", required: true)]
        public Input<string> DevCenterId { get; set; } = null!;

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public CatalogArgs()
        {
        }
        public static new CatalogArgs Empty => new CatalogArgs();
    }

    public sealed class CatalogState : global::Pulumi.ResourceArgs
    {
        [Input("catalogAdogit")]
        public Input<Inputs.CatalogCatalogAdogitGetArgs>? CatalogAdogit { get; set; }

        [Input("catalogGithub")]
        public Input<Inputs.CatalogCatalogGithubGetArgs>? CatalogGithub { get; set; }

        [Input("devCenterId")]
        public Input<string>? DevCenterId { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        public CatalogState()
        {
        }
        public static new CatalogState Empty => new CatalogState();
    }
}
