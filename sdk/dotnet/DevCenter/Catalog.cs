// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.DevCenter
{
    /// <summary>
    /// Manages a Dev Center Catalog.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Name = "example-resources",
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleDevCenter = new Azure.DevCenter.DevCenter("example", new()
    ///     {
    ///         Location = example.Location,
    ///         Name = "example",
    ///         ResourceGroupName = example.Name,
    ///         Identity = new Azure.DevCenter.Inputs.DevCenterIdentityArgs
    ///         {
    ///             Type = "SystemAssigned",
    ///         },
    ///     });
    /// 
    ///     var exampleCatalog = new Azure.DevCenter.Catalog("example", new()
    ///     {
    ///         Name = "example",
    ///         ResourceGroupName = testAzurermResourceGroup.Name,
    ///         DevCenterId = test.Id,
    ///         CatalogGithub = new Azure.DevCenter.Inputs.CatalogCatalogGithubArgs
    ///         {
    ///             Branch = "foo",
    ///             Path = "",
    ///             Uri = "example URI",
    ///             KeyVaultKeyUrl = "secret",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## API Providers
    /// 
    /// &lt;!-- This section is generated, changes will be overwritten --&gt;
    /// This resource uses the following Azure API Providers:
    /// 
    /// * `Microsoft.DevCenter` - 2025-02-01
    /// 
    /// ## Import
    /// 
    /// An existing Dev Center Catalog can be imported into Pulumi using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:devcenter/catalog:Catalog example /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/devCenters/{devCenterName}/catalogs/{catalogName}
    /// ```
    /// 
    /// * Where `{subscriptionId}` is the ID of the Azure Subscription where the Dev Center exists. For example `12345678-1234-9876-4563-123456789012`.
    /// 
    /// * Where `{resourceGroupName}` is the name of Resource Group where this Dev Center exists. For example `example-resource-group`.
    /// 
    /// * Where `{devCenterName}` is the name of the Dev Center. For example `devCenterValue`.
    /// 
    /// * Where `{catalogName}` is the name of the Dev Center Catalog. For example `catalogValue`.
    /// </summary>
    [AzureResourceType("azure:devcenter/catalog:Catalog")]
    public partial class Catalog : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A `catalog_adogit` block as defined below.
        /// </summary>
        [Output("catalogAdogit")]
        public Output<Outputs.CatalogCatalogAdogit?> CatalogAdogit { get; private set; } = null!;

        /// <summary>
        /// A `catalog_github` block as defined below.
        /// </summary>
        [Output("catalogGithub")]
        public Output<Outputs.CatalogCatalogGithub?> CatalogGithub { get; private set; } = null!;

        /// <summary>
        /// Specifies the Dev Center Id within which this Dev Center Catalog should exist. Changing this forces a new Dev Center Catalog to be created.
        /// </summary>
        [Output("devCenterId")]
        public Output<string> DevCenterId { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of this Dev Center Catalog. Changing this forces a new Dev Center to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the Resource Group within which this Dev Center Catalog should exist. Changing this forces a new Dev Center to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;


        /// <summary>
        /// Create a Catalog resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Catalog(string name, CatalogArgs args, CustomResourceOptions? options = null)
            : base("azure:devcenter/catalog:Catalog", name, args ?? new CatalogArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Catalog(string name, Input<string> id, CatalogState? state = null, CustomResourceOptions? options = null)
            : base("azure:devcenter/catalog:Catalog", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Catalog resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Catalog Get(string name, Input<string> id, CatalogState? state = null, CustomResourceOptions? options = null)
        {
            return new Catalog(name, id, state, options);
        }
    }

    public sealed class CatalogArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A `catalog_adogit` block as defined below.
        /// </summary>
        [Input("catalogAdogit")]
        public Input<Inputs.CatalogCatalogAdogitArgs>? CatalogAdogit { get; set; }

        /// <summary>
        /// A `catalog_github` block as defined below.
        /// </summary>
        [Input("catalogGithub")]
        public Input<Inputs.CatalogCatalogGithubArgs>? CatalogGithub { get; set; }

        /// <summary>
        /// Specifies the Dev Center Id within which this Dev Center Catalog should exist. Changing this forces a new Dev Center Catalog to be created.
        /// </summary>
        [Input("devCenterId", required: true)]
        public Input<string> DevCenterId { get; set; } = null!;

        /// <summary>
        /// Specifies the name of this Dev Center Catalog. Changing this forces a new Dev Center to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the name of the Resource Group within which this Dev Center Catalog should exist. Changing this forces a new Dev Center to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public CatalogArgs()
        {
        }
        public static new CatalogArgs Empty => new CatalogArgs();
    }

    public sealed class CatalogState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A `catalog_adogit` block as defined below.
        /// </summary>
        [Input("catalogAdogit")]
        public Input<Inputs.CatalogCatalogAdogitGetArgs>? CatalogAdogit { get; set; }

        /// <summary>
        /// A `catalog_github` block as defined below.
        /// </summary>
        [Input("catalogGithub")]
        public Input<Inputs.CatalogCatalogGithubGetArgs>? CatalogGithub { get; set; }

        /// <summary>
        /// Specifies the Dev Center Id within which this Dev Center Catalog should exist. Changing this forces a new Dev Center Catalog to be created.
        /// </summary>
        [Input("devCenterId")]
        public Input<string>? DevCenterId { get; set; }

        /// <summary>
        /// Specifies the name of this Dev Center Catalog. Changing this forces a new Dev Center to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the name of the Resource Group within which this Dev Center Catalog should exist. Changing this forces a new Dev Center to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        public CatalogState()
        {
        }
        public static new CatalogState Empty => new CatalogState();
    }
}
