// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.DevCenter
{
    /// <summary>
    /// Manages a Dev Center.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Name = "example-resources",
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleUserAssignedIdentity = new Azure.Authorization.UserAssignedIdentity("example", new()
    ///     {
    ///         Name = "example",
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///     });
    /// 
    ///     var exampleDevCenter = new Azure.DevCenter.DevCenter("example", new()
    ///     {
    ///         Location = example.Location,
    ///         Name = "example",
    ///         ResourceGroupName = example.Name,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Blocks Reference
    /// 
    /// ### `Identity` Block
    /// 
    /// The `Identity` block supports the following arguments:
    /// 
    /// * `Type` - (Required) Specifies the type of Managed Identity that should be assigned to this Dev Center. Possible values are `SystemAssigned`, `SystemAssigned, UserAssigned` and `UserAssigned`.
    /// * `IdentityIds` - (Optional) A list of the User Assigned Identity IDs that should be assigned to this Dev Center.
    /// 
    /// In addition to the arguments defined above, the `Identity` block exports the following attributes:
    /// 
    /// * `PrincipalId` - The Principal ID for the System-Assigned Managed Identity assigned to this Dev Center.
    /// * `TenantId` - The Tenant ID for the System-Assigned Managed Identity assigned to this Dev Center.
    /// 
    /// ## API Providers
    /// 
    /// &lt;!-- This section is generated, changes will be overwritten --&gt;
    /// This resource uses the following Azure API Providers:
    /// 
    /// * `Microsoft.DevCenter` - 2025-02-01
    /// 
    /// ## Import
    /// 
    /// An existing Dev Center can be imported into Pulumi using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:devcenter/devCenter:DevCenter example /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/devCenters/{devCenterName}
    /// ```
    /// 
    /// * Where `{subscriptionId}` is the ID of the Azure Subscription where the Dev Center exists. For example `12345678-1234-9876-4563-123456789012`.
    /// 
    /// * Where `{resourceGroupName}` is the name of Resource Group where this Dev Center exists. For example `example-resource-group`.
    /// 
    /// * Where `{devCenterName}` is the name of the Dev Center. For example `devCenterValue`.
    /// </summary>
    [AzureResourceType("azure:devcenter/devCenter:DevCenter")]
    public partial class DevCenter : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The URI of the Dev Center.
        /// </summary>
        [Output("devCenterUri")]
        public Output<string> DevCenterUri { get; private set; } = null!;

        /// <summary>
        /// An `Identity` block as defined below. Specifies the Managed Identity which should be assigned to this Dev Center.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.DevCenterIdentity?> Identity { get; private set; } = null!;

        /// <summary>
        /// The Azure Region where the Dev Center should exist. Changing this forces a new Dev Center to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of this Dev Center. Changing this forces a new Dev Center to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Whether the project catalogs associated with projects in this Dev Center are allowed to sync catalog items. Defaults to `False`.
        /// </summary>
        [Output("projectCatalogItemSyncEnabled")]
        public Output<bool?> ProjectCatalogItemSyncEnabled { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the Resource Group within which this Dev Center should exist. Changing this forces a new Dev Center to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags which should be assigned to the Dev Center.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a DevCenter resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DevCenter(string name, DevCenterArgs args, CustomResourceOptions? options = null)
            : base("azure:devcenter/devCenter:DevCenter", name, args ?? new DevCenterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DevCenter(string name, Input<string> id, DevCenterState? state = null, CustomResourceOptions? options = null)
            : base("azure:devcenter/devCenter:DevCenter", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DevCenter resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DevCenter Get(string name, Input<string> id, DevCenterState? state = null, CustomResourceOptions? options = null)
        {
            return new DevCenter(name, id, state, options);
        }
    }

    public sealed class DevCenterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An `Identity` block as defined below. Specifies the Managed Identity which should be assigned to this Dev Center.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.DevCenterIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// The Azure Region where the Dev Center should exist. Changing this forces a new Dev Center to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Specifies the name of this Dev Center. Changing this forces a new Dev Center to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Whether the project catalogs associated with projects in this Dev Center are allowed to sync catalog items. Defaults to `False`.
        /// </summary>
        [Input("projectCatalogItemSyncEnabled")]
        public Input<bool>? ProjectCatalogItemSyncEnabled { get; set; }

        /// <summary>
        /// Specifies the name of the Resource Group within which this Dev Center should exist. Changing this forces a new Dev Center to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Dev Center.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public DevCenterArgs()
        {
        }
        public static new DevCenterArgs Empty => new DevCenterArgs();
    }

    public sealed class DevCenterState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The URI of the Dev Center.
        /// </summary>
        [Input("devCenterUri")]
        public Input<string>? DevCenterUri { get; set; }

        /// <summary>
        /// An `Identity` block as defined below. Specifies the Managed Identity which should be assigned to this Dev Center.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.DevCenterIdentityGetArgs>? Identity { get; set; }

        /// <summary>
        /// The Azure Region where the Dev Center should exist. Changing this forces a new Dev Center to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Specifies the name of this Dev Center. Changing this forces a new Dev Center to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Whether the project catalogs associated with projects in this Dev Center are allowed to sync catalog items. Defaults to `False`.
        /// </summary>
        [Input("projectCatalogItemSyncEnabled")]
        public Input<bool>? ProjectCatalogItemSyncEnabled { get; set; }

        /// <summary>
        /// Specifies the name of the Resource Group within which this Dev Center should exist. Changing this forces a new Dev Center to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Dev Center.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public DevCenterState()
        {
        }
        public static new DevCenterState Empty => new DevCenterState();
    }
}
