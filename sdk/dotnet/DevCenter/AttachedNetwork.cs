// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.DevCenter
{
    /// <summary>
    /// Manages a Dev Center Attached Network.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Name = "example-dcan",
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleVirtualNetwork = new Azure.Network.VirtualNetwork("example", new()
    ///     {
    ///         Name = "example-vnet",
    ///         AddressSpaces = new[]
    ///         {
    ///             "10.0.0.0/16",
    ///         },
    ///         Location = example.Location,
    ///         ResourceGroupName = example.Name,
    ///     });
    /// 
    ///     var exampleSubnet = new Azure.Network.Subnet("example", new()
    ///     {
    ///         Name = "internal",
    ///         ResourceGroupName = example.Name,
    ///         VirtualNetworkName = exampleVirtualNetwork.Name,
    ///         AddressPrefixes = new[]
    ///         {
    ///             "10.0.2.0/24",
    ///         },
    ///     });
    /// 
    ///     var exampleDevCenter = new Azure.DevCenter.DevCenter("example", new()
    ///     {
    ///         Name = "example-dc",
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///         Identity = new Azure.DevCenter.Inputs.DevCenterIdentityArgs
    ///         {
    ///             Type = "SystemAssigned",
    ///         },
    ///     });
    /// 
    ///     var exampleNetworkConnection = new Azure.DevCenter.NetworkConnection("example", new()
    ///     {
    ///         Name = "example-dcnc",
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///         DomainJoinType = "AzureADJoin",
    ///         SubnetId = exampleSubnet.Id,
    ///     });
    /// 
    ///     var exampleAttachedNetwork = new Azure.DevCenter.AttachedNetwork("example", new()
    ///     {
    ///         Name = "example-dcet",
    ///         DevCenterId = exampleDevCenter.Id,
    ///         NetworkConnectionId = exampleNetworkConnection.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## API Providers
    /// 
    /// &lt;!-- This section is generated, changes will be overwritten --&gt;
    /// This resource uses the following Azure API Providers:
    /// 
    /// * `Microsoft.DevCenter`: 2025-02-01
    /// 
    /// ## Import
    /// 
    /// An existing Dev Center Attached Network can be imported into Pulumi using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:devcenter/attachedNetwork:AttachedNetwork example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DevCenter/devCenters/dc1/attachedNetworks/et1
    /// ```
    /// </summary>
    [AzureResourceType("azure:devcenter/attachedNetwork:AttachedNetwork")]
    public partial class AttachedNetwork : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the associated Dev Center. Changing this forces a new resource to be created.
        /// </summary>
        [Output("devCenterId")]
        public Output<string> DevCenterId { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of this Dev Center Attached Network. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the Dev Center Network Connection you want to attach. Changing this forces a new resource to be created.
        /// </summary>
        [Output("networkConnectionId")]
        public Output<string> NetworkConnectionId { get; private set; } = null!;


        /// <summary>
        /// Create a AttachedNetwork resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AttachedNetwork(string name, AttachedNetworkArgs args, CustomResourceOptions? options = null)
            : base("azure:devcenter/attachedNetwork:AttachedNetwork", name, args ?? new AttachedNetworkArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AttachedNetwork(string name, Input<string> id, AttachedNetworkState? state = null, CustomResourceOptions? options = null)
            : base("azure:devcenter/attachedNetwork:AttachedNetwork", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AttachedNetwork resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AttachedNetwork Get(string name, Input<string> id, AttachedNetworkState? state = null, CustomResourceOptions? options = null)
        {
            return new AttachedNetwork(name, id, state, options);
        }
    }

    public sealed class AttachedNetworkArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the associated Dev Center. Changing this forces a new resource to be created.
        /// </summary>
        [Input("devCenterId", required: true)]
        public Input<string> DevCenterId { get; set; } = null!;

        /// <summary>
        /// Specifies the name of this Dev Center Attached Network. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the Dev Center Network Connection you want to attach. Changing this forces a new resource to be created.
        /// </summary>
        [Input("networkConnectionId", required: true)]
        public Input<string> NetworkConnectionId { get; set; } = null!;

        public AttachedNetworkArgs()
        {
        }
        public static new AttachedNetworkArgs Empty => new AttachedNetworkArgs();
    }

    public sealed class AttachedNetworkState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the associated Dev Center. Changing this forces a new resource to be created.
        /// </summary>
        [Input("devCenterId")]
        public Input<string>? DevCenterId { get; set; }

        /// <summary>
        /// Specifies the name of this Dev Center Attached Network. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the Dev Center Network Connection you want to attach. Changing this forces a new resource to be created.
        /// </summary>
        [Input("networkConnectionId")]
        public Input<string>? NetworkConnectionId { get; set; }

        public AttachedNetworkState()
        {
        }
        public static new AttachedNetworkState Empty => new AttachedNetworkState();
    }
}
