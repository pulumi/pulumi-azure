// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.DevCenter
{
    /// <summary>
    /// Manages a Dev Center Project Pool.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Name = "example-resources",
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleDevCenter = new Azure.DevCenter.DevCenter("example", new()
    ///     {
    ///         Name = "example-dc",
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///         Identity = new Azure.DevCenter.Inputs.DevCenterIdentityArgs
    ///         {
    ///             Type = "SystemAssigned",
    ///         },
    ///     });
    /// 
    ///     var exampleVirtualNetwork = new Azure.Network.VirtualNetwork("example", new()
    ///     {
    ///         Name = "example-vnet",
    ///         AddressSpaces = new[]
    ///         {
    ///             "10.0.0.0/16",
    ///         },
    ///         Location = example.Location,
    ///         ResourceGroupName = example.Name,
    ///     });
    /// 
    ///     var exampleSubnet = new Azure.Network.Subnet("example", new()
    ///     {
    ///         Name = "internal",
    ///         ResourceGroupName = example.Name,
    ///         VirtualNetworkName = exampleVirtualNetwork.Name,
    ///         AddressPrefixes = new[]
    ///         {
    ///             "10.0.2.0/24",
    ///         },
    ///     });
    /// 
    ///     var exampleNetworkConnection = new Azure.DevCenter.NetworkConnection("example", new()
    ///     {
    ///         Name = "example-dcnc",
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///         SubnetId = exampleSubnet.Id,
    ///         DomainJoinType = "AzureADJoin",
    ///     });
    /// 
    ///     var exampleAttachedNetwork = new Azure.DevCenter.AttachedNetwork("example", new()
    ///     {
    ///         Name = "example-dcet",
    ///         DevCenterId = exampleDevCenter.Id,
    ///         NetworkConnectionId = exampleNetworkConnection.Id,
    ///     });
    /// 
    ///     var exampleProject = new Azure.DevCenter.Project("example", new()
    ///     {
    ///         Name = "example-dcp",
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///         DevCenterId = exampleDevCenter.Id,
    ///     });
    /// 
    ///     var exampleDevBoxDefinition = new Azure.DevCenter.DevBoxDefinition("example", new()
    ///     {
    ///         Name = "example-dcet",
    ///         Location = example.Location,
    ///         DevCenterId = exampleDevCenter.Id,
    ///         ImageReferenceId = exampleDevCenter.Id.Apply(id =&gt; $"{id}/galleries/default/images/microsoftvisualstudio_visualstudioplustools_vs-2022-ent-general-win10-m365-gen2"),
    ///         SkuName = "general_i_8c32gb256ssd_v2",
    ///     });
    /// 
    ///     var exampleProjectPool = new Azure.DevCenter.ProjectPool("example", new()
    ///     {
    ///         Name = "example-dcpl",
    ///         Location = example.Location,
    ///         DevCenterProjectId = exampleProject.Id,
    ///         DevBoxDefinitionName = exampleDevBoxDefinition.Name,
    ///         LocalAdministratorEnabled = true,
    ///         DevCenterAttachedNetworkName = exampleAttachedNetwork.Name,
    ///         StopOnDisconnectGracePeriodMinutes = 60,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## API Providers
    /// 
    /// &lt;!-- This section is generated, changes will be overwritten --&gt;
    /// This resource uses the following Azure API Providers:
    /// 
    /// * `Microsoft.DevCenter` - 2025-02-01
    /// 
    /// ## Import
    /// 
    /// An existing Dev Center Project Pool can be imported into Pulumi using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:devcenter/projectPool:ProjectPool example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DevCenter/projects/project1/pools/pool1
    /// ```
    /// </summary>
    [AzureResourceType("azure:devcenter/projectPool:ProjectPool")]
    public partial class ProjectPool : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the Dev Center Dev Box Definition.
        /// </summary>
        [Output("devBoxDefinitionName")]
        public Output<string> DevBoxDefinitionName { get; private set; } = null!;

        /// <summary>
        /// The name of the Dev Center Attached Network in parent Project of the Dev Center Project Pool.
        /// </summary>
        [Output("devCenterAttachedNetworkName")]
        public Output<string> DevCenterAttachedNetworkName { get; private set; } = null!;

        /// <summary>
        /// The ID of the associated Dev Center Project. Changing this forces a new resource to be created.
        /// </summary>
        [Output("devCenterProjectId")]
        public Output<string> DevCenterProjectId { get; private set; } = null!;

        /// <summary>
        /// Specifies whether owners of Dev Boxes in the Dev Center Project Pool are added as local administrators on the Dev Box.
        /// </summary>
        [Output("localAdministratorEnabled")]
        public Output<bool> LocalAdministratorEnabled { get; private set; } = null!;

        /// <summary>
        /// The Azure Region where the Dev Center Project Pool should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// A list of the regions of the managed Virtual Network. When specified, the Dev Center Project Pool will use a Microsoft managed network.
        /// 
        /// &gt; **Note:** Currently only one region can be specified for `managed_virtual_network_regions`.
        /// </summary>
        [Output("managedVirtualNetworkRegions")]
        public Output<string?> ManagedVirtualNetworkRegions { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of this Dev Center Project Pool. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Specifies whether Dev Boxes in the Pool will have SSO enabled or disabled. Defaults to `false`.
        /// </summary>
        [Output("singleSignOnEnabled")]
        public Output<bool?> SingleSignOnEnabled { get; private set; } = null!;

        /// <summary>
        /// The specified time in minutes to wait before stopping a Dev Center Dev Box once disconnect is detected. Possible values are between `60` and `480`.
        /// </summary>
        [Output("stopOnDisconnectGracePeriodMinutes")]
        public Output<int?> StopOnDisconnectGracePeriodMinutes { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags which should be assigned to the Dev Center Project Pool.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a ProjectPool resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProjectPool(string name, ProjectPoolArgs args, CustomResourceOptions? options = null)
            : base("azure:devcenter/projectPool:ProjectPool", name, args ?? new ProjectPoolArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ProjectPool(string name, Input<string> id, ProjectPoolState? state = null, CustomResourceOptions? options = null)
            : base("azure:devcenter/projectPool:ProjectPool", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProjectPool resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProjectPool Get(string name, Input<string> id, ProjectPoolState? state = null, CustomResourceOptions? options = null)
        {
            return new ProjectPool(name, id, state, options);
        }
    }

    public sealed class ProjectPoolArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the Dev Center Dev Box Definition.
        /// </summary>
        [Input("devBoxDefinitionName", required: true)]
        public Input<string> DevBoxDefinitionName { get; set; } = null!;

        /// <summary>
        /// The name of the Dev Center Attached Network in parent Project of the Dev Center Project Pool.
        /// </summary>
        [Input("devCenterAttachedNetworkName", required: true)]
        public Input<string> DevCenterAttachedNetworkName { get; set; } = null!;

        /// <summary>
        /// The ID of the associated Dev Center Project. Changing this forces a new resource to be created.
        /// </summary>
        [Input("devCenterProjectId", required: true)]
        public Input<string> DevCenterProjectId { get; set; } = null!;

        /// <summary>
        /// Specifies whether owners of Dev Boxes in the Dev Center Project Pool are added as local administrators on the Dev Box.
        /// </summary>
        [Input("localAdministratorEnabled", required: true)]
        public Input<bool> LocalAdministratorEnabled { get; set; } = null!;

        /// <summary>
        /// The Azure Region where the Dev Center Project Pool should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// A list of the regions of the managed Virtual Network. When specified, the Dev Center Project Pool will use a Microsoft managed network.
        /// 
        /// &gt; **Note:** Currently only one region can be specified for `managed_virtual_network_regions`.
        /// </summary>
        [Input("managedVirtualNetworkRegions")]
        public Input<string>? ManagedVirtualNetworkRegions { get; set; }

        /// <summary>
        /// Specifies the name of this Dev Center Project Pool. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies whether Dev Boxes in the Pool will have SSO enabled or disabled. Defaults to `false`.
        /// </summary>
        [Input("singleSignOnEnabled")]
        public Input<bool>? SingleSignOnEnabled { get; set; }

        /// <summary>
        /// The specified time in minutes to wait before stopping a Dev Center Dev Box once disconnect is detected. Possible values are between `60` and `480`.
        /// </summary>
        [Input("stopOnDisconnectGracePeriodMinutes")]
        public Input<int>? StopOnDisconnectGracePeriodMinutes { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Dev Center Project Pool.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public ProjectPoolArgs()
        {
        }
        public static new ProjectPoolArgs Empty => new ProjectPoolArgs();
    }

    public sealed class ProjectPoolState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the Dev Center Dev Box Definition.
        /// </summary>
        [Input("devBoxDefinitionName")]
        public Input<string>? DevBoxDefinitionName { get; set; }

        /// <summary>
        /// The name of the Dev Center Attached Network in parent Project of the Dev Center Project Pool.
        /// </summary>
        [Input("devCenterAttachedNetworkName")]
        public Input<string>? DevCenterAttachedNetworkName { get; set; }

        /// <summary>
        /// The ID of the associated Dev Center Project. Changing this forces a new resource to be created.
        /// </summary>
        [Input("devCenterProjectId")]
        public Input<string>? DevCenterProjectId { get; set; }

        /// <summary>
        /// Specifies whether owners of Dev Boxes in the Dev Center Project Pool are added as local administrators on the Dev Box.
        /// </summary>
        [Input("localAdministratorEnabled")]
        public Input<bool>? LocalAdministratorEnabled { get; set; }

        /// <summary>
        /// The Azure Region where the Dev Center Project Pool should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// A list of the regions of the managed Virtual Network. When specified, the Dev Center Project Pool will use a Microsoft managed network.
        /// 
        /// &gt; **Note:** Currently only one region can be specified for `managed_virtual_network_regions`.
        /// </summary>
        [Input("managedVirtualNetworkRegions")]
        public Input<string>? ManagedVirtualNetworkRegions { get; set; }

        /// <summary>
        /// Specifies the name of this Dev Center Project Pool. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies whether Dev Boxes in the Pool will have SSO enabled or disabled. Defaults to `false`.
        /// </summary>
        [Input("singleSignOnEnabled")]
        public Input<bool>? SingleSignOnEnabled { get; set; }

        /// <summary>
        /// The specified time in minutes to wait before stopping a Dev Center Dev Box once disconnect is detected. Possible values are between `60` and `480`.
        /// </summary>
        [Input("stopOnDisconnectGracePeriodMinutes")]
        public Input<int>? StopOnDisconnectGracePeriodMinutes { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Dev Center Project Pool.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public ProjectPoolState()
        {
        }
        public static new ProjectPoolState Empty => new ProjectPoolState();
    }
}
