// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.DevCenter
{
    /// <summary>
    /// Manages a Dev Center Environment Type.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Name = "example-resources",
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleDevCenter = new Azure.DevCenter.DevCenter("example", new()
    ///     {
    ///         Name = "example-dc",
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///         Identity = new Azure.DevCenter.Inputs.DevCenterIdentityArgs
    ///         {
    ///             Type = "SystemAssigned",
    ///         },
    ///     });
    /// 
    ///     var exampleEnvironmentType = new Azure.DevCenter.EnvironmentType("example", new()
    ///     {
    ///         Name = "example-dcet",
    ///         DevCenterId = exampleDevCenter.Id,
    ///         Tags = 
    ///         {
    ///             { "Env", "Test" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing Dev Center Environment Type can be imported into Terraform using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:devcenter/environmentType:EnvironmentType example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DevCenter/devCenters/dc1/environmentTypes/et1
    /// ```
    /// </summary>
    [AzureResourceType("azure:devcenter/environmentType:EnvironmentType")]
    public partial class EnvironmentType : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the associated Dev Center. Changing this forces a new resource to be created.
        /// </summary>
        [Output("devCenterId")]
        public Output<string> DevCenterId { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of this Dev Center Environment Type. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags which should be assigned to the Dev Center Environment Type.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a EnvironmentType resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EnvironmentType(string name, EnvironmentTypeArgs args, CustomResourceOptions? options = null)
            : base("azure:devcenter/environmentType:EnvironmentType", name, args ?? new EnvironmentTypeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EnvironmentType(string name, Input<string> id, EnvironmentTypeState? state = null, CustomResourceOptions? options = null)
            : base("azure:devcenter/environmentType:EnvironmentType", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EnvironmentType resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EnvironmentType Get(string name, Input<string> id, EnvironmentTypeState? state = null, CustomResourceOptions? options = null)
        {
            return new EnvironmentType(name, id, state, options);
        }
    }

    public sealed class EnvironmentTypeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the associated Dev Center. Changing this forces a new resource to be created.
        /// </summary>
        [Input("devCenterId", required: true)]
        public Input<string> DevCenterId { get; set; } = null!;

        /// <summary>
        /// Specifies the name of this Dev Center Environment Type. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Dev Center Environment Type.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public EnvironmentTypeArgs()
        {
        }
        public static new EnvironmentTypeArgs Empty => new EnvironmentTypeArgs();
    }

    public sealed class EnvironmentTypeState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the associated Dev Center. Changing this forces a new resource to be created.
        /// </summary>
        [Input("devCenterId")]
        public Input<string>? DevCenterId { get; set; }

        /// <summary>
        /// Specifies the name of this Dev Center Environment Type. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Dev Center Environment Type.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public EnvironmentTypeState()
        {
        }
        public static new EnvironmentTypeState Empty => new EnvironmentTypeState();
    }
}
