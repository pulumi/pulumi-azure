// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.WebPubSub.Inputs
{

    public sealed class HubEventHandlerGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An `Auth` block as defined below.
        /// </summary>
        [Input("auth")]
        public Input<Inputs.HubEventHandlerAuthGetArgs>? Auth { get; set; }

        [Input("systemEvents")]
        private InputList<string>? _systemEvents;

        /// <summary>
        /// Specifies the list of system events. Supported values are `Connect`, `Connected` and `Disconnected`.
        /// </summary>
        public InputList<string> SystemEvents
        {
            get => _systemEvents ?? (_systemEvents = new InputList<string>());
            set => _systemEvents = value;
        }

        /// <summary>
        /// The Event Handler URL Template. Two predefined parameters `{hub}` and `{event}` are available to use in the template. The value of the EventHandler URL is dynamically calculated when the client request comes in. Example: `http://example.com/api/{hub}/{event}`.
        /// </summary>
        [Input("urlTemplate", required: true)]
        public Input<string> UrlTemplate { get; set; } = null!;

        /// <summary>
        /// Specifies the matching event names. There are 3 kind of patterns supported: * `*` matches any event name * `,` Combine multiple events with `,` for example `event1,event2`, it matches event `Event1` and `Event2` * The single event name, for example `Event1`, it matches `Event1`.
        /// </summary>
        [Input("userEventPattern")]
        public Input<string>? UserEventPattern { get; set; }

        public HubEventHandlerGetArgs()
        {
        }
        public static new HubEventHandlerGetArgs Empty => new HubEventHandlerGetArgs();
    }
}
