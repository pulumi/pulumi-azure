// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.WebPubSub.Outputs
{

    [OutputType]
    public sealed class HubEventHandler
    {
        /// <summary>
        /// An `Auth` block as defined below.
        /// </summary>
        public readonly Outputs.HubEventHandlerAuth? Auth;
        /// <summary>
        /// Specifies the list of system events. Supported values are `Connect`, `Connected` and `Disconnected`.
        /// </summary>
        public readonly ImmutableArray<string> SystemEvents;
        /// <summary>
        /// The Event Handler URL Template. Two predefined parameters `{hub}` and `{event}` are available to use in the template. The value of the EventHandler URL is dynamically calculated when the client request comes in. Example: `http://example.com/api/{hub}/{event}`.
        /// </summary>
        public readonly string UrlTemplate;
        /// <summary>
        /// Specifies the matching event names. There are 3 kind of patterns supported: * `*` matches any event name * `,` Combine multiple events with `,` for example `event1,event2`, it matches event `Event1` and `Event2` * The single event name, for example `Event1`, it matches `Event1`.
        /// </summary>
        public readonly string? UserEventPattern;

        [OutputConstructor]
        private HubEventHandler(
            Outputs.HubEventHandlerAuth? auth,

            ImmutableArray<string> systemEvents,

            string urlTemplate,

            string? userEventPattern)
        {
            Auth = auth;
            SystemEvents = systemEvents;
            UrlTemplate = urlTemplate;
            UserEventPattern = userEventPattern;
        }
    }
}
