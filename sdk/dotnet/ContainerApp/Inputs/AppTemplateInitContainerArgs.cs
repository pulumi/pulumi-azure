// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ContainerApp.Inputs
{

    public sealed class AppTemplateInitContainerArgs : global::Pulumi.ResourceArgs
    {
        [Input("args")]
        private InputList<string>? _args;

        /// <summary>
        /// A list of extra arguments to pass to the container.
        /// </summary>
        public InputList<string> Args
        {
            get => _args ?? (_args = new InputList<string>());
            set => _args = value;
        }

        [Input("commands")]
        private InputList<string>? _commands;

        /// <summary>
        /// A command to pass to the container to override the default. This is provided as a list of command line elements without spaces.
        /// </summary>
        public InputList<string> Commands
        {
            get => _commands ?? (_commands = new InputList<string>());
            set => _commands = value;
        }

        /// <summary>
        /// The amount of vCPU to allocate to the container.
        /// 
        /// &gt; **Note:** When using a Consumption plan, the `Cpu` and `Memory` properties must add up to one of the combinations found in the Microsoft provided documentation, for more information see [vCPU and memory allocation requirements](https://learn.microsoft.com/azure/container-apps/containers#allocations)
        /// </summary>
        [Input("cpu")]
        public Input<double>? Cpu { get; set; }

        [Input("envs")]
        private InputList<Inputs.AppTemplateInitContainerEnvArgs>? _envs;

        /// <summary>
        /// One or more `Env` blocks as detailed below.
        /// </summary>
        public InputList<Inputs.AppTemplateInitContainerEnvArgs> Envs
        {
            get => _envs ?? (_envs = new InputList<Inputs.AppTemplateInitContainerEnvArgs>());
            set => _envs = value;
        }

        /// <summary>
        /// The amount of ephemeral storage available to the Container App.
        /// 
        /// &gt; **Note:** `EphemeralStorage` is currently in preview and not configurable at this time.
        /// </summary>
        [Input("ephemeralStorage")]
        public Input<string>? EphemeralStorage { get; set; }

        /// <summary>
        /// The image to use to create the container.
        /// </summary>
        [Input("image", required: true)]
        public Input<string> Image { get; set; } = null!;

        /// <summary>
        /// The amount of memory to allocate to the container.
        /// 
        /// &gt; **Note:** When using a Consumption plan, the `Cpu` and `Memory` properties must add up to one of the combinations found in the Microsoft provided documentation, for more information see [vCPU and memory allocation requirements](https://learn.microsoft.com/azure/container-apps/containers#allocations)
        /// </summary>
        [Input("memory")]
        public Input<string>? Memory { get; set; }

        /// <summary>
        /// The name of the container
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("volumeMounts")]
        private InputList<Inputs.AppTemplateInitContainerVolumeMountArgs>? _volumeMounts;

        /// <summary>
        /// A `VolumeMounts` block as detailed below.
        /// </summary>
        public InputList<Inputs.AppTemplateInitContainerVolumeMountArgs> VolumeMounts
        {
            get => _volumeMounts ?? (_volumeMounts = new InputList<Inputs.AppTemplateInitContainerVolumeMountArgs>());
            set => _volumeMounts = value;
        }

        public AppTemplateInitContainerArgs()
        {
        }
        public static new AppTemplateInitContainerArgs Empty => new AppTemplateInitContainerArgs();
    }
}
