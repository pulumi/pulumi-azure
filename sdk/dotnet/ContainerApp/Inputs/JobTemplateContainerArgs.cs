// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ContainerApp.Inputs
{

    public sealed class JobTemplateContainerArgs : global::Pulumi.ResourceArgs
    {
        [Input("args")]
        private InputList<string>? _args;

        /// <summary>
        /// A list of extra arguments to pass to the container.
        /// </summary>
        public InputList<string> Args
        {
            get => _args ?? (_args = new InputList<string>());
            set => _args = value;
        }

        [Input("commands")]
        private InputList<string>? _commands;

        /// <summary>
        /// A command to pass to the container to override the default. This is provided as a list of command line elements without spaces.
        /// </summary>
        public InputList<string> Commands
        {
            get => _commands ?? (_commands = new InputList<string>());
            set => _commands = value;
        }

        /// <summary>
        /// The amount of vCPU to allocate to the container.
        /// 
        /// &gt; **Note:** When using a Consumption plan, the `cpu` and `memory` properties must add up to one of the combinations found in the Microsoft provided documentation, for more information see [vCPU and memory allocation requirements](https://learn.microsoft.com/azure/container-apps/containers#allocations)
        /// </summary>
        [Input("cpu", required: true)]
        public Input<double> Cpu { get; set; } = null!;

        [Input("envs")]
        private InputList<Inputs.JobTemplateContainerEnvArgs>? _envs;

        /// <summary>
        /// One or more `env` blocks as detailed below.
        /// </summary>
        public InputList<Inputs.JobTemplateContainerEnvArgs> Envs
        {
            get => _envs ?? (_envs = new InputList<Inputs.JobTemplateContainerEnvArgs>());
            set => _envs = value;
        }

        /// <summary>
        /// The amount of ephemeral storage available to the Container App.
        /// 
        /// &gt; **Note:** `ephemeral_storage` is currently in preview and not configurable at this time.
        /// </summary>
        [Input("ephemeralStorage")]
        public Input<string>? EphemeralStorage { get; set; }

        /// <summary>
        /// The image to use to create the container.
        /// </summary>
        [Input("image", required: true)]
        public Input<string> Image { get; set; } = null!;

        [Input("livenessProbes")]
        private InputList<Inputs.JobTemplateContainerLivenessProbeArgs>? _livenessProbes;

        /// <summary>
        /// A `liveness_probe` block as detailed below.
        /// </summary>
        public InputList<Inputs.JobTemplateContainerLivenessProbeArgs> LivenessProbes
        {
            get => _livenessProbes ?? (_livenessProbes = new InputList<Inputs.JobTemplateContainerLivenessProbeArgs>());
            set => _livenessProbes = value;
        }

        /// <summary>
        /// The amount of memory to allocate to the container.
        /// 
        /// &gt; **Note:** When using a Consumption plan, the `cpu` and `memory` properties must add up to one of the combinations found in the Microsoft provided documentation, for more information see [vCPU and memory allocation requirements](https://learn.microsoft.com/azure/container-apps/containers#allocations)
        /// </summary>
        [Input("memory", required: true)]
        public Input<string> Memory { get; set; } = null!;

        /// <summary>
        /// The name of the container.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("readinessProbes")]
        private InputList<Inputs.JobTemplateContainerReadinessProbeArgs>? _readinessProbes;

        /// <summary>
        /// A `readiness_probe` block as detailed below.
        /// </summary>
        public InputList<Inputs.JobTemplateContainerReadinessProbeArgs> ReadinessProbes
        {
            get => _readinessProbes ?? (_readinessProbes = new InputList<Inputs.JobTemplateContainerReadinessProbeArgs>());
            set => _readinessProbes = value;
        }

        [Input("startupProbes")]
        private InputList<Inputs.JobTemplateContainerStartupProbeArgs>? _startupProbes;

        /// <summary>
        /// A `startup_probe` block as detailed below.
        /// </summary>
        public InputList<Inputs.JobTemplateContainerStartupProbeArgs> StartupProbes
        {
            get => _startupProbes ?? (_startupProbes = new InputList<Inputs.JobTemplateContainerStartupProbeArgs>());
            set => _startupProbes = value;
        }

        [Input("volumeMounts")]
        private InputList<Inputs.JobTemplateContainerVolumeMountArgs>? _volumeMounts;

        /// <summary>
        /// A `volume_mounts` block as detailed below.
        /// </summary>
        public InputList<Inputs.JobTemplateContainerVolumeMountArgs> VolumeMounts
        {
            get => _volumeMounts ?? (_volumeMounts = new InputList<Inputs.JobTemplateContainerVolumeMountArgs>());
            set => _volumeMounts = value;
        }

        public JobTemplateContainerArgs()
        {
        }
        public static new JobTemplateContainerArgs Empty => new JobTemplateContainerArgs();
    }
}
