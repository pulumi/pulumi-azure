// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ContainerApp.Inputs
{

    public sealed class AppIngressGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Should this ingress allow insecure connections?
        /// </summary>
        [Input("allowInsecureConnections")]
        public Input<bool>? AllowInsecureConnections { get; set; }

        /// <summary>
        /// The client certificate mode for the Ingress. Possible values are `Require`, `Accept`, and `Ignore`.
        /// </summary>
        [Input("clientCertificateMode")]
        public Input<string>? ClientCertificateMode { get; set; }

        /// <summary>
        /// A `Cors` block as defined below.
        /// </summary>
        [Input("cors")]
        public Input<Inputs.AppIngressCorsGetArgs>? Cors { get; set; }

        [Input("customDomains")]
        private InputList<Inputs.AppIngressCustomDomainGetArgs>? _customDomains;

        /// <summary>
        /// One or more `CustomDomain` block as detailed below.
        /// </summary>
        public InputList<Inputs.AppIngressCustomDomainGetArgs> CustomDomains
        {
            get => _customDomains ?? (_customDomains = new InputList<Inputs.AppIngressCustomDomainGetArgs>());
            set => _customDomains = value;
        }

        /// <summary>
        /// The exposed port on the container for the Ingress traffic.
        /// 
        /// &gt; **Note:** `ExposedPort` can only be specified when `Transport` is set to `Tcp`.
        /// </summary>
        [Input("exposedPort")]
        public Input<int>? ExposedPort { get; set; }

        /// <summary>
        /// Are connections to this Ingress from outside the Container App Environment enabled? Defaults to `False`.
        /// </summary>
        [Input("externalEnabled")]
        public Input<bool>? ExternalEnabled { get; set; }

        /// <summary>
        /// The FQDN of the ingress.
        /// </summary>
        [Input("fqdn")]
        public Input<string>? Fqdn { get; set; }

        [Input("ipSecurityRestrictions")]
        private InputList<Inputs.AppIngressIpSecurityRestrictionGetArgs>? _ipSecurityRestrictions;

        /// <summary>
        /// One or more `IpSecurityRestriction` blocks for IP-filtering rules as defined below.
        /// </summary>
        public InputList<Inputs.AppIngressIpSecurityRestrictionGetArgs> IpSecurityRestrictions
        {
            get => _ipSecurityRestrictions ?? (_ipSecurityRestrictions = new InputList<Inputs.AppIngressIpSecurityRestrictionGetArgs>());
            set => _ipSecurityRestrictions = value;
        }

        /// <summary>
        /// The target port on the container for the Ingress traffic.
        /// </summary>
        [Input("targetPort", required: true)]
        public Input<int> TargetPort { get; set; } = null!;

        [Input("trafficWeights", required: true)]
        private InputList<Inputs.AppIngressTrafficWeightGetArgs>? _trafficWeights;

        /// <summary>
        /// One or more `TrafficWeight` blocks as detailed below.
        /// </summary>
        public InputList<Inputs.AppIngressTrafficWeightGetArgs> TrafficWeights
        {
            get => _trafficWeights ?? (_trafficWeights = new InputList<Inputs.AppIngressTrafficWeightGetArgs>());
            set => _trafficWeights = value;
        }

        /// <summary>
        /// The transport method for the Ingress. Possible values are `Auto`, `Http`, `Http2` and `Tcp`. Defaults to `Auto`.
        /// 
        /// &gt; **Note:** if `Transport` is set to `Tcp`, `ExposedPort` and `TargetPort` should be set at the same time.
        /// </summary>
        [Input("transport")]
        public Input<string>? Transport { get; set; }

        public AppIngressGetArgs()
        {
        }
        public static new AppIngressGetArgs Empty => new AppIngressGetArgs();
    }
}
