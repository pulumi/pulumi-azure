// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ContainerApp.Inputs
{

    public sealed class JobTemplateInitContainerGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("args")]
        private InputList<string>? _args;

        /// <summary>
        /// A list of extra arguments to pass to the container.
        /// </summary>
        public InputList<string> Args
        {
            get => _args ?? (_args = new InputList<string>());
            set => _args = value;
        }

        [Input("commands")]
        private InputList<string>? _commands;

        /// <summary>
        /// A command to pass to the container to override the default. This is provided as a list of command line elements without spaces.
        /// </summary>
        public InputList<string> Commands
        {
            get => _commands ?? (_commands = new InputList<string>());
            set => _commands = value;
        }

        /// <summary>
        /// The amount of vCPU to allocate to the container. Possible values include `0.25`, `0.5`, `0.75`, `1.0`, `1.25`, `1.5`, `1.75`, and `2.0`.
        /// 
        /// &gt; **Note:** `cpu` and `memory` must be specified in `0.25'/'0.5Gi` combination increments. e.g. `1.0` / `2.0` or `0.5` / `1.0`
        /// </summary>
        [Input("cpu")]
        public Input<double>? Cpu { get; set; }

        [Input("envs")]
        private InputList<Inputs.JobTemplateInitContainerEnvGetArgs>? _envs;

        /// <summary>
        /// One or more `env` blocks as detailed below.
        /// </summary>
        public InputList<Inputs.JobTemplateInitContainerEnvGetArgs> Envs
        {
            get => _envs ?? (_envs = new InputList<Inputs.JobTemplateInitContainerEnvGetArgs>());
            set => _envs = value;
        }

        /// <summary>
        /// The amount of ephemeral storage available to the Container App.
        /// 
        /// &gt; **Note:** `ephemeral_storage` is currently in preview and not configurable at this time.
        /// </summary>
        [Input("ephemeralStorage")]
        public Input<string>? EphemeralStorage { get; set; }

        /// <summary>
        /// The image to use to create the container.
        /// </summary>
        [Input("image", required: true)]
        public Input<string> Image { get; set; } = null!;

        /// <summary>
        /// The amount of memory to allocate to the container. Possible values are `0.5Gi`, `1Gi`, `1.5Gi`, `2Gi`, `2.5Gi`, `3Gi`, `3.5Gi` and `4Gi`.
        /// 
        /// &gt; **Note:** `cpu` and `memory` must be specified in `0.25'/'0.5Gi` combination increments. e.g. `1.25` / `2.5Gi` or `0.75` / `1.5Gi`
        /// </summary>
        [Input("memory")]
        public Input<string>? Memory { get; set; }

        /// <summary>
        /// The name of the container.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("volumeMounts")]
        private InputList<Inputs.JobTemplateInitContainerVolumeMountGetArgs>? _volumeMounts;

        /// <summary>
        /// A `volume_mounts` block as detailed below.
        /// </summary>
        public InputList<Inputs.JobTemplateInitContainerVolumeMountGetArgs> VolumeMounts
        {
            get => _volumeMounts ?? (_volumeMounts = new InputList<Inputs.JobTemplateInitContainerVolumeMountGetArgs>());
            set => _volumeMounts = value;
        }

        public JobTemplateInitContainerGetArgs()
        {
        }
        public static new JobTemplateInitContainerGetArgs Empty => new JobTemplateInitContainerGetArgs();
    }
}
