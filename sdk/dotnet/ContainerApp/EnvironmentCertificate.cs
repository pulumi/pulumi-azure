// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ContainerApp
{
    /// <summary>
    /// Manages a Container App Environment Certificate.
    /// 
    /// ## Import
    /// 
    /// A Container App Environment Certificate can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:containerapp/environmentCertificate:EnvironmentCertificate example "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resGroup1/providers/Microsoft.App/managedEnvironments/certificates/mycertificate"
    /// ```
    /// </summary>
    [AzureResourceType("azure:containerapp/environmentCertificate:EnvironmentCertificate")]
    public partial class EnvironmentCertificate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Certificate Private Key as a base64 encoded PFX or PEM. Changing this forces a new resource to be created.
        /// </summary>
        [Output("certificateBlobBase64")]
        public Output<string> CertificateBlobBase64 { get; private set; } = null!;

        /// <summary>
        /// The password for the Certificate. Changing this forces a new resource to be created.
        /// </summary>
        [Output("certificatePassword")]
        public Output<string> CertificatePassword { get; private set; } = null!;

        /// <summary>
        /// The Container App Managed Environment ID to configure this Certificate on. Changing this forces a new resource to be created.
        /// </summary>
        [Output("containerAppEnvironmentId")]
        public Output<string> ContainerAppEnvironmentId { get; private set; } = null!;

        /// <summary>
        /// The expiration date for the Certificate.
        /// </summary>
        [Output("expirationDate")]
        public Output<string> ExpirationDate { get; private set; } = null!;

        /// <summary>
        /// The date of issue for the Certificate.
        /// </summary>
        [Output("issueDate")]
        public Output<string> IssueDate { get; private set; } = null!;

        /// <summary>
        /// The Certificate Issuer.
        /// </summary>
        [Output("issuer")]
        public Output<string> Issuer { get; private set; } = null!;

        /// <summary>
        /// The name of the Container Apps Environment Certificate. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The Subject Name for the Certificate.
        /// </summary>
        [Output("subjectName")]
        public Output<string> SubjectName { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The Thumbprint of the Certificate.
        /// </summary>
        [Output("thumbprint")]
        public Output<string> Thumbprint { get; private set; } = null!;


        /// <summary>
        /// Create a EnvironmentCertificate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EnvironmentCertificate(string name, EnvironmentCertificateArgs args, CustomResourceOptions? options = null)
            : base("azure:containerapp/environmentCertificate:EnvironmentCertificate", name, args ?? new EnvironmentCertificateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EnvironmentCertificate(string name, Input<string> id, EnvironmentCertificateState? state = null, CustomResourceOptions? options = null)
            : base("azure:containerapp/environmentCertificate:EnvironmentCertificate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "certificatePassword",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EnvironmentCertificate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EnvironmentCertificate Get(string name, Input<string> id, EnvironmentCertificateState? state = null, CustomResourceOptions? options = null)
        {
            return new EnvironmentCertificate(name, id, state, options);
        }
    }

    public sealed class EnvironmentCertificateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Certificate Private Key as a base64 encoded PFX or PEM. Changing this forces a new resource to be created.
        /// </summary>
        [Input("certificateBlobBase64", required: true)]
        public Input<string> CertificateBlobBase64 { get; set; } = null!;

        [Input("certificatePassword", required: true)]
        private Input<string>? _certificatePassword;

        /// <summary>
        /// The password for the Certificate. Changing this forces a new resource to be created.
        /// </summary>
        public Input<string>? CertificatePassword
        {
            get => _certificatePassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _certificatePassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The Container App Managed Environment ID to configure this Certificate on. Changing this forces a new resource to be created.
        /// </summary>
        [Input("containerAppEnvironmentId", required: true)]
        public Input<string> ContainerAppEnvironmentId { get; set; } = null!;

        /// <summary>
        /// The name of the Container Apps Environment Certificate. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public EnvironmentCertificateArgs()
        {
        }
        public static new EnvironmentCertificateArgs Empty => new EnvironmentCertificateArgs();
    }

    public sealed class EnvironmentCertificateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Certificate Private Key as a base64 encoded PFX or PEM. Changing this forces a new resource to be created.
        /// </summary>
        [Input("certificateBlobBase64")]
        public Input<string>? CertificateBlobBase64 { get; set; }

        [Input("certificatePassword")]
        private Input<string>? _certificatePassword;

        /// <summary>
        /// The password for the Certificate. Changing this forces a new resource to be created.
        /// </summary>
        public Input<string>? CertificatePassword
        {
            get => _certificatePassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _certificatePassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The Container App Managed Environment ID to configure this Certificate on. Changing this forces a new resource to be created.
        /// </summary>
        [Input("containerAppEnvironmentId")]
        public Input<string>? ContainerAppEnvironmentId { get; set; }

        /// <summary>
        /// The expiration date for the Certificate.
        /// </summary>
        [Input("expirationDate")]
        public Input<string>? ExpirationDate { get; set; }

        /// <summary>
        /// The date of issue for the Certificate.
        /// </summary>
        [Input("issueDate")]
        public Input<string>? IssueDate { get; set; }

        /// <summary>
        /// The Certificate Issuer.
        /// </summary>
        [Input("issuer")]
        public Input<string>? Issuer { get; set; }

        /// <summary>
        /// The name of the Container Apps Environment Certificate. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The Subject Name for the Certificate.
        /// </summary>
        [Input("subjectName")]
        public Input<string>? SubjectName { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The Thumbprint of the Certificate.
        /// </summary>
        [Input("thumbprint")]
        public Input<string>? Thumbprint { get; set; }

        public EnvironmentCertificateState()
        {
        }
        public static new EnvironmentCertificateState Empty => new EnvironmentCertificateState();
    }
}
