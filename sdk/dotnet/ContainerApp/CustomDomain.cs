// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ContainerApp
{
    /// <summary>
    /// Manages a Container App Custom Domain.
    /// 
    /// ### Managed Certificate
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// using Std = Pulumi.Std;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.ContainerApp.CustomDomain("example", new()
    ///     {
    ///         Name = Std.Trimprefix.Invoke(new()
    ///         {
    ///             Input = api.Fqdn,
    ///             Prefix = "asuid.",
    ///         }).Apply(invoke =&gt; Std.Trimsuffix.Invoke(new()
    ///         {
    ///             Input = invoke.Result,
    ///             Suffix = ".",
    ///         })).Apply(invoke =&gt; invoke.Result),
    ///         ContainerAppId = exampleAzurermContainerApp.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## API Providers
    /// 
    /// &lt;!-- This section is generated, changes will be overwritten --&gt;
    /// This resource uses the following Azure API Providers:
    /// 
    /// * `Microsoft.App`: 2025-01-01
    /// 
    /// ## Import
    /// 
    /// A Container App Custom Domain can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:containerapp/customDomain:CustomDomain example "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resGroup1/providers/Microsoft.App/containerApps/myContainerApp/customDomainName/mycustomdomain.example.com"
    /// ```
    /// </summary>
    [AzureResourceType("azure:containerapp/customDomain:CustomDomain")]
    public partial class CustomDomain : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Binding type. Possible values include `Disabled` and `SniEnabled`.
        /// </summary>
        [Output("certificateBindingType")]
        public Output<string?> CertificateBindingType { get; private set; } = null!;

        /// <summary>
        /// The ID of the Container App Environment Certificate to use. Changing this forces a new resource to be created.
        /// 
        /// &gt; **Note:** Omit this value if you wish to use an Azure Managed certificate. You must create the relevant DNS verification steps before this process will be successful.
        /// </summary>
        [Output("containerAppEnvironmentCertificateId")]
        public Output<string?> ContainerAppEnvironmentCertificateId { get; private set; } = null!;

        /// <summary>
        /// The ID of the Container App Environment Managed Certificate to use.
        /// </summary>
        [Output("containerAppEnvironmentManagedCertificateId")]
        public Output<string> ContainerAppEnvironmentManagedCertificateId { get; private set; } = null!;

        /// <summary>
        /// The ID of the Container App to which this Custom Domain should be bound. Changing this forces a new resource to be created.
        /// </summary>
        [Output("containerAppId")]
        public Output<string> ContainerAppId { get; private set; } = null!;

        /// <summary>
        /// The fully qualified name of the Custom Domain. Must be the CN or a named SAN in the certificate specified by the `container_app_environment_certificate_id`. Changing this forces a new resource to be created.
        /// 
        /// &gt; **Note:** The Custom Domain verification TXT record requires a prefix of `asuid.`, however, this must be trimmed from the `name` property here. See the [official docs](https://learn.microsoft.com/en-us/azure/container-apps/custom-domains-certificates) for more information.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;


        /// <summary>
        /// Create a CustomDomain resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CustomDomain(string name, CustomDomainArgs args, CustomResourceOptions? options = null)
            : base("azure:containerapp/customDomain:CustomDomain", name, args ?? new CustomDomainArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CustomDomain(string name, Input<string> id, CustomDomainState? state = null, CustomResourceOptions? options = null)
            : base("azure:containerapp/customDomain:CustomDomain", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CustomDomain resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CustomDomain Get(string name, Input<string> id, CustomDomainState? state = null, CustomResourceOptions? options = null)
        {
            return new CustomDomain(name, id, state, options);
        }
    }

    public sealed class CustomDomainArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Binding type. Possible values include `Disabled` and `SniEnabled`.
        /// </summary>
        [Input("certificateBindingType")]
        public Input<string>? CertificateBindingType { get; set; }

        /// <summary>
        /// The ID of the Container App Environment Certificate to use. Changing this forces a new resource to be created.
        /// 
        /// &gt; **Note:** Omit this value if you wish to use an Azure Managed certificate. You must create the relevant DNS verification steps before this process will be successful.
        /// </summary>
        [Input("containerAppEnvironmentCertificateId")]
        public Input<string>? ContainerAppEnvironmentCertificateId { get; set; }

        /// <summary>
        /// The ID of the Container App to which this Custom Domain should be bound. Changing this forces a new resource to be created.
        /// </summary>
        [Input("containerAppId", required: true)]
        public Input<string> ContainerAppId { get; set; } = null!;

        /// <summary>
        /// The fully qualified name of the Custom Domain. Must be the CN or a named SAN in the certificate specified by the `container_app_environment_certificate_id`. Changing this forces a new resource to be created.
        /// 
        /// &gt; **Note:** The Custom Domain verification TXT record requires a prefix of `asuid.`, however, this must be trimmed from the `name` property here. See the [official docs](https://learn.microsoft.com/en-us/azure/container-apps/custom-domains-certificates) for more information.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public CustomDomainArgs()
        {
        }
        public static new CustomDomainArgs Empty => new CustomDomainArgs();
    }

    public sealed class CustomDomainState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Binding type. Possible values include `Disabled` and `SniEnabled`.
        /// </summary>
        [Input("certificateBindingType")]
        public Input<string>? CertificateBindingType { get; set; }

        /// <summary>
        /// The ID of the Container App Environment Certificate to use. Changing this forces a new resource to be created.
        /// 
        /// &gt; **Note:** Omit this value if you wish to use an Azure Managed certificate. You must create the relevant DNS verification steps before this process will be successful.
        /// </summary>
        [Input("containerAppEnvironmentCertificateId")]
        public Input<string>? ContainerAppEnvironmentCertificateId { get; set; }

        /// <summary>
        /// The ID of the Container App Environment Managed Certificate to use.
        /// </summary>
        [Input("containerAppEnvironmentManagedCertificateId")]
        public Input<string>? ContainerAppEnvironmentManagedCertificateId { get; set; }

        /// <summary>
        /// The ID of the Container App to which this Custom Domain should be bound. Changing this forces a new resource to be created.
        /// </summary>
        [Input("containerAppId")]
        public Input<string>? ContainerAppId { get; set; }

        /// <summary>
        /// The fully qualified name of the Custom Domain. Must be the CN or a named SAN in the certificate specified by the `container_app_environment_certificate_id`. Changing this forces a new resource to be created.
        /// 
        /// &gt; **Note:** The Custom Domain verification TXT record requires a prefix of `asuid.`, however, this must be trimmed from the `name` property here. See the [official docs](https://learn.microsoft.com/en-us/azure/container-apps/custom-domains-certificates) for more information.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public CustomDomainState()
        {
        }
        public static new CustomDomainState Empty => new CustomDomainState();
    }
}
