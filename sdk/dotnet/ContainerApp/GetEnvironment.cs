// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ContainerApp
{
    public static class GetEnvironment
    {
        /// <summary>
        /// Use this data source to access information about an existing Container App Environment.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.ContainerApp.GetEnvironment.Invoke(new()
        ///     {
        ///         Name = "example-environment",
        ///         ResourceGroupName = "example-resources",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetEnvironmentResult> InvokeAsync(GetEnvironmentArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEnvironmentResult>("azure:containerapp/getEnvironment:getEnvironment", args ?? new GetEnvironmentArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Container App Environment.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.ContainerApp.GetEnvironment.Invoke(new()
        ///     {
        ///         Name = "example-environment",
        ///         ResourceGroupName = "example-resources",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetEnvironmentResult> Invoke(GetEnvironmentInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEnvironmentResult>("azure:containerapp/getEnvironment:getEnvironment", args ?? new GetEnvironmentInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEnvironmentArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Container Apps Managed Environment.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group where this Container App Environment exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetEnvironmentArgs()
        {
        }
        public static new GetEnvironmentArgs Empty => new GetEnvironmentArgs();
    }

    public sealed class GetEnvironmentInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Container Apps Managed Environment.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group where this Container App Environment exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetEnvironmentInvokeArgs()
        {
        }
        public static new GetEnvironmentInvokeArgs Empty => new GetEnvironmentInvokeArgs();
    }


    [OutputType]
    public sealed class GetEnvironmentResult
    {
        /// <summary>
        /// The default publicly resolvable name of this Container App Environment. This is generated at creation time to be globally unique.
        /// </summary>
        public readonly string DefaultDomain;
        /// <summary>
        /// The network addressing in which the Container Apps in this Container App Environment will reside in CIDR notation.
        /// </summary>
        public readonly string DockerBridgeCidr;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The ID of the Subnet in use by the Container Apps Control Plane.
        /// </summary>
        public readonly string InfrastructureSubnetId;
        /// <summary>
        /// Does the Container App Environment operate in Internal Load Balancing Mode?
        /// </summary>
        public readonly bool InternalLoadBalancerEnabled;
        /// <summary>
        /// The Azure Location where this Container App Environment exists.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the Log Analytics Workspace this Container Apps Managed Environment is linked to.
        /// </summary>
        public readonly string LogAnalyticsWorkspaceName;
        public readonly string Name;
        /// <summary>
        /// The IP range, in CIDR notation, that is reserved for environment infrastructure IP addresses.
        /// </summary>
        public readonly string PlatformReservedCidr;
        /// <summary>
        /// The IP address from the IP range defined by `platform_reserved_cidr` that is reserved for the internal DNS server.
        /// </summary>
        public readonly string PlatformReservedDnsIpAddress;
        public readonly string ResourceGroupName;
        /// <summary>
        /// The Static IP address of the Environment.
        /// </summary>
        public readonly string StaticIpAddress;
        /// <summary>
        /// A mapping of tags assigned to the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;

        [OutputConstructor]
        private GetEnvironmentResult(
            string defaultDomain,

            string dockerBridgeCidr,

            string id,

            string infrastructureSubnetId,

            bool internalLoadBalancerEnabled,

            string location,

            string logAnalyticsWorkspaceName,

            string name,

            string platformReservedCidr,

            string platformReservedDnsIpAddress,

            string resourceGroupName,

            string staticIpAddress,

            ImmutableDictionary<string, string> tags)
        {
            DefaultDomain = defaultDomain;
            DockerBridgeCidr = dockerBridgeCidr;
            Id = id;
            InfrastructureSubnetId = infrastructureSubnetId;
            InternalLoadBalancerEnabled = internalLoadBalancerEnabled;
            Location = location;
            LogAnalyticsWorkspaceName = logAnalyticsWorkspaceName;
            Name = name;
            PlatformReservedCidr = platformReservedCidr;
            PlatformReservedDnsIpAddress = platformReservedDnsIpAddress;
            ResourceGroupName = resourceGroupName;
            StaticIpAddress = staticIpAddress;
            Tags = tags;
        }
    }
}
