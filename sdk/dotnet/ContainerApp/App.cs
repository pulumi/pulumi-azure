// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ContainerApp
{
    /// <summary>
    /// Manages a Container App.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleAnalyticsWorkspace = new Azure.OperationalInsights.AnalyticsWorkspace("exampleAnalyticsWorkspace", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Sku = "PerGB2018",
    ///         RetentionInDays = 30,
    ///     });
    /// 
    ///     var exampleEnvironment = new Azure.ContainerApp.Environment("exampleEnvironment", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         LogAnalyticsWorkspaceId = exampleAnalyticsWorkspace.Id,
    ///     });
    /// 
    ///     var exampleApp = new Azure.ContainerApp.App("exampleApp", new()
    ///     {
    ///         ContainerAppEnvironmentId = exampleEnvironment.Id,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         RevisionMode = "Single",
    ///         Template = new Azure.ContainerApp.Inputs.AppTemplateArgs
    ///         {
    ///             Containers = new[]
    ///             {
    ///                 new Azure.ContainerApp.Inputs.AppTemplateContainerArgs
    ///                 {
    ///                     Name = "examplecontainerapp",
    ///                     Image = "mcr.microsoft.com/azuredocs/containerapps-helloworld:latest",
    ///                     Cpu = 0.25,
    ///                     Memory = "0.5Gi",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// A Container App can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:containerapp/app:App example "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resGroup1/providers/Microsoft.App/containerApps/myContainerApp"
    /// ```
    /// </summary>
    [AzureResourceType("azure:containerapp/app:App")]
    public partial class App : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the Container App Environment within which this Container App should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("containerAppEnvironmentId")]
        public Output<string> ContainerAppEnvironmentId { get; private set; } = null!;

        /// <summary>
        /// The ID of the Custom Domain Verification for this Container App.
        /// </summary>
        [Output("customDomainVerificationId")]
        public Output<string> CustomDomainVerificationId { get; private set; } = null!;

        /// <summary>
        /// A `dapr` block as detailed below.
        /// </summary>
        [Output("dapr")]
        public Output<Outputs.AppDapr?> Dapr { get; private set; } = null!;

        /// <summary>
        /// An `identity` block as detailed below.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.AppIdentity?> Identity { get; private set; } = null!;

        /// <summary>
        /// An `ingress` block as detailed below.
        /// </summary>
        [Output("ingress")]
        public Output<Outputs.AppIngress?> Ingress { get; private set; } = null!;

        /// <summary>
        /// The FQDN of the Latest Revision of the Container App.
        /// </summary>
        [Output("latestRevisionFqdn")]
        public Output<string> LatestRevisionFqdn { get; private set; } = null!;

        /// <summary>
        /// The name of the latest Container Revision.
        /// </summary>
        [Output("latestRevisionName")]
        public Output<string> LatestRevisionName { get; private set; } = null!;

        /// <summary>
        /// The location this Container App is deployed in. This is the same as the Environment in which it is deployed.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name for this Container App. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A list of the Public IP Addresses which the Container App uses for outbound network access.
        /// </summary>
        [Output("outboundIpAddresses")]
        public Output<ImmutableArray<string>> OutboundIpAddresses { get; private set; } = null!;

        /// <summary>
        /// A `registry` block as detailed below.
        /// </summary>
        [Output("registries")]
        public Output<ImmutableArray<Outputs.AppRegistry>> Registries { get; private set; } = null!;

        /// <summary>
        /// The name of the resource group in which the Container App Environment is to be created. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// The revisions operational mode for the Container App. Possible values include `Single` and `Multiple`. In `Single` mode, a single revision is in operation at any given time. In `Multiple` mode, more than one revision can be active at a time and can be configured with load distribution via the `traffic_weight` block in the `ingress` configuration.
        /// </summary>
        [Output("revisionMode")]
        public Output<string> RevisionMode { get; private set; } = null!;

        /// <summary>
        /// One or more `secret` block as detailed below.
        /// </summary>
        [Output("secrets")]
        public Output<ImmutableArray<Outputs.AppSecret>> Secrets { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the Container App.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A `template` block as detailed below.
        /// </summary>
        [Output("template")]
        public Output<Outputs.AppTemplate> Template { get; private set; } = null!;

        /// <summary>
        /// The name of the Workload Profile in the Container App Environment to place this Container App.
        /// 
        /// &gt; **Note:** Omit this value to use the default `Consumption` Workload Profile.
        /// </summary>
        [Output("workloadProfileName")]
        public Output<string?> WorkloadProfileName { get; private set; } = null!;


        /// <summary>
        /// Create a App resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public App(string name, AppArgs args, CustomResourceOptions? options = null)
            : base("azure:containerapp/app:App", name, args ?? new AppArgs(), MakeResourceOptions(options, ""))
        {
        }

        private App(string name, Input<string> id, AppState? state = null, CustomResourceOptions? options = null)
            : base("azure:containerapp/app:App", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "customDomainVerificationId",
                    "secrets",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing App resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static App Get(string name, Input<string> id, AppState? state = null, CustomResourceOptions? options = null)
        {
            return new App(name, id, state, options);
        }
    }

    public sealed class AppArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Container App Environment within which this Container App should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("containerAppEnvironmentId", required: true)]
        public Input<string> ContainerAppEnvironmentId { get; set; } = null!;

        /// <summary>
        /// A `dapr` block as detailed below.
        /// </summary>
        [Input("dapr")]
        public Input<Inputs.AppDaprArgs>? Dapr { get; set; }

        /// <summary>
        /// An `identity` block as detailed below.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.AppIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// An `ingress` block as detailed below.
        /// </summary>
        [Input("ingress")]
        public Input<Inputs.AppIngressArgs>? Ingress { get; set; }

        /// <summary>
        /// The name for this Container App. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("registries")]
        private InputList<Inputs.AppRegistryArgs>? _registries;

        /// <summary>
        /// A `registry` block as detailed below.
        /// </summary>
        public InputList<Inputs.AppRegistryArgs> Registries
        {
            get => _registries ?? (_registries = new InputList<Inputs.AppRegistryArgs>());
            set => _registries = value;
        }

        /// <summary>
        /// The name of the resource group in which the Container App Environment is to be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The revisions operational mode for the Container App. Possible values include `Single` and `Multiple`. In `Single` mode, a single revision is in operation at any given time. In `Multiple` mode, more than one revision can be active at a time and can be configured with load distribution via the `traffic_weight` block in the `ingress` configuration.
        /// </summary>
        [Input("revisionMode", required: true)]
        public Input<string> RevisionMode { get; set; } = null!;

        [Input("secrets")]
        private InputList<Inputs.AppSecretArgs>? _secrets;

        /// <summary>
        /// One or more `secret` block as detailed below.
        /// </summary>
        public InputList<Inputs.AppSecretArgs> Secrets
        {
            get => _secrets ?? (_secrets = new InputList<Inputs.AppSecretArgs>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableArray.Create<Inputs.AppSecretArgs>());
                _secrets = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the Container App.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// A `template` block as detailed below.
        /// </summary>
        [Input("template", required: true)]
        public Input<Inputs.AppTemplateArgs> Template { get; set; } = null!;

        /// <summary>
        /// The name of the Workload Profile in the Container App Environment to place this Container App.
        /// 
        /// &gt; **Note:** Omit this value to use the default `Consumption` Workload Profile.
        /// </summary>
        [Input("workloadProfileName")]
        public Input<string>? WorkloadProfileName { get; set; }

        public AppArgs()
        {
        }
        public static new AppArgs Empty => new AppArgs();
    }

    public sealed class AppState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Container App Environment within which this Container App should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("containerAppEnvironmentId")]
        public Input<string>? ContainerAppEnvironmentId { get; set; }

        [Input("customDomainVerificationId")]
        private Input<string>? _customDomainVerificationId;

        /// <summary>
        /// The ID of the Custom Domain Verification for this Container App.
        /// </summary>
        public Input<string>? CustomDomainVerificationId
        {
            get => _customDomainVerificationId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _customDomainVerificationId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// A `dapr` block as detailed below.
        /// </summary>
        [Input("dapr")]
        public Input<Inputs.AppDaprGetArgs>? Dapr { get; set; }

        /// <summary>
        /// An `identity` block as detailed below.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.AppIdentityGetArgs>? Identity { get; set; }

        /// <summary>
        /// An `ingress` block as detailed below.
        /// </summary>
        [Input("ingress")]
        public Input<Inputs.AppIngressGetArgs>? Ingress { get; set; }

        /// <summary>
        /// The FQDN of the Latest Revision of the Container App.
        /// </summary>
        [Input("latestRevisionFqdn")]
        public Input<string>? LatestRevisionFqdn { get; set; }

        /// <summary>
        /// The name of the latest Container Revision.
        /// </summary>
        [Input("latestRevisionName")]
        public Input<string>? LatestRevisionName { get; set; }

        /// <summary>
        /// The location this Container App is deployed in. This is the same as the Environment in which it is deployed.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name for this Container App. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("outboundIpAddresses")]
        private InputList<string>? _outboundIpAddresses;

        /// <summary>
        /// A list of the Public IP Addresses which the Container App uses for outbound network access.
        /// </summary>
        public InputList<string> OutboundIpAddresses
        {
            get => _outboundIpAddresses ?? (_outboundIpAddresses = new InputList<string>());
            set => _outboundIpAddresses = value;
        }

        [Input("registries")]
        private InputList<Inputs.AppRegistryGetArgs>? _registries;

        /// <summary>
        /// A `registry` block as detailed below.
        /// </summary>
        public InputList<Inputs.AppRegistryGetArgs> Registries
        {
            get => _registries ?? (_registries = new InputList<Inputs.AppRegistryGetArgs>());
            set => _registries = value;
        }

        /// <summary>
        /// The name of the resource group in which the Container App Environment is to be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// The revisions operational mode for the Container App. Possible values include `Single` and `Multiple`. In `Single` mode, a single revision is in operation at any given time. In `Multiple` mode, more than one revision can be active at a time and can be configured with load distribution via the `traffic_weight` block in the `ingress` configuration.
        /// </summary>
        [Input("revisionMode")]
        public Input<string>? RevisionMode { get; set; }

        [Input("secrets")]
        private InputList<Inputs.AppSecretGetArgs>? _secrets;

        /// <summary>
        /// One or more `secret` block as detailed below.
        /// </summary>
        public InputList<Inputs.AppSecretGetArgs> Secrets
        {
            get => _secrets ?? (_secrets = new InputList<Inputs.AppSecretGetArgs>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableArray.Create<Inputs.AppSecretGetArgs>());
                _secrets = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the Container App.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// A `template` block as detailed below.
        /// </summary>
        [Input("template")]
        public Input<Inputs.AppTemplateGetArgs>? Template { get; set; }

        /// <summary>
        /// The name of the Workload Profile in the Container App Environment to place this Container App.
        /// 
        /// &gt; **Note:** Omit this value to use the default `Consumption` Workload Profile.
        /// </summary>
        [Input("workloadProfileName")]
        public Input<string>? WorkloadProfileName { get; set; }

        public AppState()
        {
        }
        public static new AppState Empty => new AppState();
    }
}
