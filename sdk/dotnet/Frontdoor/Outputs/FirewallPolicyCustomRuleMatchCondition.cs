// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.FrontDoor.Outputs
{

    [OutputType]
    public sealed class FirewallPolicyCustomRuleMatchCondition
    {
        /// <summary>
        /// Up to `100` possible values to match.
        /// </summary>
        public readonly ImmutableArray<string> MatchValues;
        /// <summary>
        /// The request variable to compare with. Possible values are `Cookies`, `PostArgs`, `QueryString`, `RemoteAddr`, `RequestBody`, `RequestHeader`, `RequestMethod`, or `RequestUri`.
        /// </summary>
        public readonly string MatchVariable;
        /// <summary>
        /// Should the result of the condition be negated.
        /// </summary>
        public readonly bool? NegationCondition;
        /// <summary>
        /// Comparison type to use for matching with the variable value. Possible values are `Any`, `BeginsWith`, `Contains`, `EndsWith`, `Equal`, `GeoMatch`, `GreaterThan`, `GreaterThanOrEqual`, `IPMatch`, `LessThan`, `LessThanOrEqual` or `RegEx`.
        /// </summary>
        public readonly string Operator;
        /// <summary>
        /// Match against a specific key if the `match_variable` is `QueryString`, `PostArgs`, `RequestHeader` or `Cookies`.
        /// </summary>
        public readonly string? Selector;
        /// <summary>
        /// Up to `5` transforms to apply. Possible values are `Lowercase`, `RemoveNulls`, `Trim`, `Uppercase`, `URLDecode` or`URLEncode`.
        /// </summary>
        public readonly ImmutableArray<string> Transforms;

        [OutputConstructor]
        private FirewallPolicyCustomRuleMatchCondition(
            ImmutableArray<string> matchValues,

            string matchVariable,

            bool? negationCondition,

            string @operator,

            string? selector,

            ImmutableArray<string> transforms)
        {
            MatchValues = matchValues;
            MatchVariable = matchVariable;
            NegationCondition = negationCondition;
            Operator = @operator;
            Selector = selector;
            Transforms = transforms;
        }
    }
}
