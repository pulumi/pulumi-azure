// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.FrontDoor
{
    /// <summary>
    /// Manages an Azure Front Door instance.
    /// 
    /// Azure Front Door Service is Microsoft's highly available and scalable web application acceleration platform and global HTTP(s) load balancer. It provides built-in DDoS protection and application layer security and caching. Front Door enables you to build applications that maximize and automate high-availability and performance for your end-users. Use Front Door with Azure services including Web/Mobile Apps, Cloud Services and Virtual Machines â€“ or combine it with on-premises services for hybrid deployments and smooth cloud migration.
    /// 
    /// Below are some of the key scenarios that Azure Front Door Service addresses:
    /// * Use Front Door to improve application scale and availability with instant multi-region failover
    /// * Use Front Door to improve application performance with SSL offload and routing requests to the fastest available application backend.
    /// * Use Front Door for application layer security and DDoS protection for your application.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/frontdoor.html.markdown.
    /// </summary>
    public partial class Frontdoor : Pulumi.CustomResource
    {
        /// <summary>
        /// A `backend_pool` block as defined below.
        /// </summary>
        [Output("backendPools")]
        public Output<ImmutableArray<Outputs.FrontdoorBackendPools>> BackendPools { get; private set; } = null!;

        /// <summary>
        /// A `backend_pool_health_probe` block as defined below.
        /// </summary>
        [Output("backendPoolHealthProbes")]
        public Output<ImmutableArray<Outputs.FrontdoorBackendPoolHealthProbes>> BackendPoolHealthProbes { get; private set; } = null!;

        /// <summary>
        /// A `backend_pool_load_balancing` block as defined below.
        /// </summary>
        [Output("backendPoolLoadBalancings")]
        public Output<ImmutableArray<Outputs.FrontdoorBackendPoolLoadBalancings>> BackendPoolLoadBalancings { get; private set; } = null!;

        /// <summary>
        /// The host that each frontendEndpoint must CNAME to.
        /// </summary>
        [Output("cname")]
        public Output<string> Cname { get; private set; } = null!;

        /// <summary>
        /// Enforce certificate name check on `HTTPS` requests to all backend pools, this setting will have no effect on `HTTP` requests. Permitted values are `true` or `false`.
        /// </summary>
        [Output("enforceBackendPoolsCertificateNameCheck")]
        public Output<bool> EnforceBackendPoolsCertificateNameCheck { get; private set; } = null!;

        /// <summary>
        /// A friendly name for the Front Door service.
        /// </summary>
        [Output("friendlyName")]
        public Output<string?> FriendlyName { get; private set; } = null!;

        /// <summary>
        /// A `frontend_endpoint` block as defined below.
        /// </summary>
        [Output("frontendEndpoints")]
        public Output<ImmutableArray<Outputs.FrontdoorFrontendEndpoints>> FrontendEndpoints { get; private set; } = null!;

        /// <summary>
        /// Should the Front Door Load Balancer be Enabled? Defaults to `true`.
        /// </summary>
        [Output("loadBalancerEnabled")]
        public Output<bool?> LoadBalancerEnabled { get; private set; } = null!;

        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the Front Door service. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the Resource Group in which the Front Door service should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// A `routing_rule` block as defined below.
        /// </summary>
        [Output("routingRules")]
        public Output<ImmutableArray<Outputs.FrontdoorRoutingRules>> RoutingRules { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a Frontdoor resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Frontdoor(string name, FrontdoorArgs args, CustomResourceOptions? options = null)
            : base("azure:frontdoor/frontdoor:Frontdoor", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private Frontdoor(string name, Input<string> id, FrontdoorState? state = null, CustomResourceOptions? options = null)
            : base("azure:frontdoor/frontdoor:Frontdoor", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Frontdoor resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Frontdoor Get(string name, Input<string> id, FrontdoorState? state = null, CustomResourceOptions? options = null)
        {
            return new Frontdoor(name, id, state, options);
        }
    }

    public sealed class FrontdoorArgs : Pulumi.ResourceArgs
    {
        [Input("backendPools", required: true)]
        private InputList<Inputs.FrontdoorBackendPoolsArgs>? _backendPools;

        /// <summary>
        /// A `backend_pool` block as defined below.
        /// </summary>
        public InputList<Inputs.FrontdoorBackendPoolsArgs> BackendPools
        {
            get => _backendPools ?? (_backendPools = new InputList<Inputs.FrontdoorBackendPoolsArgs>());
            set => _backendPools = value;
        }

        [Input("backendPoolHealthProbes", required: true)]
        private InputList<Inputs.FrontdoorBackendPoolHealthProbesArgs>? _backendPoolHealthProbes;

        /// <summary>
        /// A `backend_pool_health_probe` block as defined below.
        /// </summary>
        public InputList<Inputs.FrontdoorBackendPoolHealthProbesArgs> BackendPoolHealthProbes
        {
            get => _backendPoolHealthProbes ?? (_backendPoolHealthProbes = new InputList<Inputs.FrontdoorBackendPoolHealthProbesArgs>());
            set => _backendPoolHealthProbes = value;
        }

        [Input("backendPoolLoadBalancings", required: true)]
        private InputList<Inputs.FrontdoorBackendPoolLoadBalancingsArgs>? _backendPoolLoadBalancings;

        /// <summary>
        /// A `backend_pool_load_balancing` block as defined below.
        /// </summary>
        public InputList<Inputs.FrontdoorBackendPoolLoadBalancingsArgs> BackendPoolLoadBalancings
        {
            get => _backendPoolLoadBalancings ?? (_backendPoolLoadBalancings = new InputList<Inputs.FrontdoorBackendPoolLoadBalancingsArgs>());
            set => _backendPoolLoadBalancings = value;
        }

        /// <summary>
        /// Enforce certificate name check on `HTTPS` requests to all backend pools, this setting will have no effect on `HTTP` requests. Permitted values are `true` or `false`.
        /// </summary>
        [Input("enforceBackendPoolsCertificateNameCheck", required: true)]
        public Input<bool> EnforceBackendPoolsCertificateNameCheck { get; set; } = null!;

        /// <summary>
        /// A friendly name for the Front Door service.
        /// </summary>
        [Input("friendlyName")]
        public Input<string>? FriendlyName { get; set; }

        [Input("frontendEndpoints", required: true)]
        private InputList<Inputs.FrontdoorFrontendEndpointsArgs>? _frontendEndpoints;

        /// <summary>
        /// A `frontend_endpoint` block as defined below.
        /// </summary>
        public InputList<Inputs.FrontdoorFrontendEndpointsArgs> FrontendEndpoints
        {
            get => _frontendEndpoints ?? (_frontendEndpoints = new InputList<Inputs.FrontdoorFrontendEndpointsArgs>());
            set => _frontendEndpoints = value;
        }

        /// <summary>
        /// Should the Front Door Load Balancer be Enabled? Defaults to `true`.
        /// </summary>
        [Input("loadBalancerEnabled")]
        public Input<bool>? LoadBalancerEnabled { get; set; }

        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Specifies the name of the Front Door service. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the name of the Resource Group in which the Front Door service should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("routingRules", required: true)]
        private InputList<Inputs.FrontdoorRoutingRulesArgs>? _routingRules;

        /// <summary>
        /// A `routing_rule` block as defined below.
        /// </summary>
        public InputList<Inputs.FrontdoorRoutingRulesArgs> RoutingRules
        {
            get => _routingRules ?? (_routingRules = new InputList<Inputs.FrontdoorRoutingRulesArgs>());
            set => _routingRules = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public FrontdoorArgs()
        {
        }
    }

    public sealed class FrontdoorState : Pulumi.ResourceArgs
    {
        [Input("backendPools")]
        private InputList<Inputs.FrontdoorBackendPoolsGetArgs>? _backendPools;

        /// <summary>
        /// A `backend_pool` block as defined below.
        /// </summary>
        public InputList<Inputs.FrontdoorBackendPoolsGetArgs> BackendPools
        {
            get => _backendPools ?? (_backendPools = new InputList<Inputs.FrontdoorBackendPoolsGetArgs>());
            set => _backendPools = value;
        }

        [Input("backendPoolHealthProbes")]
        private InputList<Inputs.FrontdoorBackendPoolHealthProbesGetArgs>? _backendPoolHealthProbes;

        /// <summary>
        /// A `backend_pool_health_probe` block as defined below.
        /// </summary>
        public InputList<Inputs.FrontdoorBackendPoolHealthProbesGetArgs> BackendPoolHealthProbes
        {
            get => _backendPoolHealthProbes ?? (_backendPoolHealthProbes = new InputList<Inputs.FrontdoorBackendPoolHealthProbesGetArgs>());
            set => _backendPoolHealthProbes = value;
        }

        [Input("backendPoolLoadBalancings")]
        private InputList<Inputs.FrontdoorBackendPoolLoadBalancingsGetArgs>? _backendPoolLoadBalancings;

        /// <summary>
        /// A `backend_pool_load_balancing` block as defined below.
        /// </summary>
        public InputList<Inputs.FrontdoorBackendPoolLoadBalancingsGetArgs> BackendPoolLoadBalancings
        {
            get => _backendPoolLoadBalancings ?? (_backendPoolLoadBalancings = new InputList<Inputs.FrontdoorBackendPoolLoadBalancingsGetArgs>());
            set => _backendPoolLoadBalancings = value;
        }

        /// <summary>
        /// The host that each frontendEndpoint must CNAME to.
        /// </summary>
        [Input("cname")]
        public Input<string>? Cname { get; set; }

        /// <summary>
        /// Enforce certificate name check on `HTTPS` requests to all backend pools, this setting will have no effect on `HTTP` requests. Permitted values are `true` or `false`.
        /// </summary>
        [Input("enforceBackendPoolsCertificateNameCheck")]
        public Input<bool>? EnforceBackendPoolsCertificateNameCheck { get; set; }

        /// <summary>
        /// A friendly name for the Front Door service.
        /// </summary>
        [Input("friendlyName")]
        public Input<string>? FriendlyName { get; set; }

        [Input("frontendEndpoints")]
        private InputList<Inputs.FrontdoorFrontendEndpointsGetArgs>? _frontendEndpoints;

        /// <summary>
        /// A `frontend_endpoint` block as defined below.
        /// </summary>
        public InputList<Inputs.FrontdoorFrontendEndpointsGetArgs> FrontendEndpoints
        {
            get => _frontendEndpoints ?? (_frontendEndpoints = new InputList<Inputs.FrontdoorFrontendEndpointsGetArgs>());
            set => _frontendEndpoints = value;
        }

        /// <summary>
        /// Should the Front Door Load Balancer be Enabled? Defaults to `true`.
        /// </summary>
        [Input("loadBalancerEnabled")]
        public Input<bool>? LoadBalancerEnabled { get; set; }

        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Specifies the name of the Front Door service. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the name of the Resource Group in which the Front Door service should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        [Input("routingRules")]
        private InputList<Inputs.FrontdoorRoutingRulesGetArgs>? _routingRules;

        /// <summary>
        /// A `routing_rule` block as defined below.
        /// </summary>
        public InputList<Inputs.FrontdoorRoutingRulesGetArgs> RoutingRules
        {
            get => _routingRules ?? (_routingRules = new InputList<Inputs.FrontdoorRoutingRulesGetArgs>());
            set => _routingRules = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public FrontdoorState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class FrontdoorBackendPoolHealthProbesArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Is this health probe enabled? Dafaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The ID of the FrontDoor.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The number of seconds between each Health Probe. Defaults to `120`.
        /// </summary>
        [Input("intervalInSeconds")]
        public Input<int>? IntervalInSeconds { get; set; }

        /// <summary>
        /// Specifies the name of the Health Probe.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The path to use for the Health Probe. Default is `/`.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// Specifies HTTP method the health probe uses when querying the backend pool instances. Possible values include: `Get` and `Head`. Defaults to `Get`.
        /// </summary>
        [Input("probeMethod")]
        public Input<string>? ProbeMethod { get; set; }

        /// <summary>
        /// Protocol scheme to use for the Health Probe. Defaults to `Http`.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        public FrontdoorBackendPoolHealthProbesArgs()
        {
        }
    }

    public sealed class FrontdoorBackendPoolHealthProbesGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Is this health probe enabled? Dafaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The ID of the FrontDoor.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The number of seconds between each Health Probe. Defaults to `120`.
        /// </summary>
        [Input("intervalInSeconds")]
        public Input<int>? IntervalInSeconds { get; set; }

        /// <summary>
        /// Specifies the name of the Health Probe.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The path to use for the Health Probe. Default is `/`.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// Specifies HTTP method the health probe uses when querying the backend pool instances. Possible values include: `Get` and `Head`. Defaults to `Get`.
        /// </summary>
        [Input("probeMethod")]
        public Input<string>? ProbeMethod { get; set; }

        /// <summary>
        /// Protocol scheme to use for the Health Probe. Defaults to `Http`.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        public FrontdoorBackendPoolHealthProbesGetArgs()
        {
        }
    }

    public sealed class FrontdoorBackendPoolLoadBalancingsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The additional latency in milliseconds for probes to fall into the lowest latency bucket. Defaults to `0`.
        /// </summary>
        [Input("additionalLatencyMilliseconds")]
        public Input<int>? AdditionalLatencyMilliseconds { get; set; }

        /// <summary>
        /// The ID of the FrontDoor.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Specifies the name of the Load Balancer.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The number of samples to consider for load balancing decisions. Defaults to `4`.
        /// </summary>
        [Input("sampleSize")]
        public Input<int>? SampleSize { get; set; }

        /// <summary>
        /// The number of samples within the sample period that must succeed. Defaults to `2`.
        /// </summary>
        [Input("successfulSamplesRequired")]
        public Input<int>? SuccessfulSamplesRequired { get; set; }

        public FrontdoorBackendPoolLoadBalancingsArgs()
        {
        }
    }

    public sealed class FrontdoorBackendPoolLoadBalancingsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The additional latency in milliseconds for probes to fall into the lowest latency bucket. Defaults to `0`.
        /// </summary>
        [Input("additionalLatencyMilliseconds")]
        public Input<int>? AdditionalLatencyMilliseconds { get; set; }

        /// <summary>
        /// The ID of the FrontDoor.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Specifies the name of the Load Balancer.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The number of samples to consider for load balancing decisions. Defaults to `4`.
        /// </summary>
        [Input("sampleSize")]
        public Input<int>? SampleSize { get; set; }

        /// <summary>
        /// The number of samples within the sample period that must succeed. Defaults to `2`.
        /// </summary>
        [Input("successfulSamplesRequired")]
        public Input<int>? SuccessfulSamplesRequired { get; set; }

        public FrontdoorBackendPoolLoadBalancingsGetArgs()
        {
        }
    }

    public sealed class FrontdoorBackendPoolsArgs : Pulumi.ResourceArgs
    {
        [Input("backends", required: true)]
        private InputList<FrontdoorBackendPoolsBackendsArgs>? _backends;

        /// <summary>
        /// A `backend` block as defined below.
        /// </summary>
        public InputList<FrontdoorBackendPoolsBackendsArgs> Backends
        {
            get => _backends ?? (_backends = new InputList<FrontdoorBackendPoolsBackendsArgs>());
            set => _backends = value;
        }

        /// <summary>
        /// Specifies the name of the `backend_pool_health_probe` block whithin this resource to use for this `Backend Pool`.
        /// </summary>
        [Input("healthProbeName", required: true)]
        public Input<string> HealthProbeName { get; set; } = null!;

        /// <summary>
        /// The ID of the FrontDoor.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Specifies the name of the `backend_pool_load_balancing` block within this resource to use for this `Backend Pool`.
        /// </summary>
        [Input("loadBalancingName", required: true)]
        public Input<string> LoadBalancingName { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the Backend Pool.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public FrontdoorBackendPoolsArgs()
        {
        }
    }

    public sealed class FrontdoorBackendPoolsBackendsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Location of the backend (IP address or FQDN)
        /// </summary>
        [Input("address", required: true)]
        public Input<string> Address { get; set; } = null!;

        /// <summary>
        /// Specifies if the backend is enabled or not. Valid options are `true` or `false`. Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The value to use as the host header sent to the backend.
        /// </summary>
        [Input("hostHeader", required: true)]
        public Input<string> HostHeader { get; set; } = null!;

        /// <summary>
        /// The HTTP TCP port number. Possible values are between `1` - `65535`.
        /// </summary>
        [Input("httpPort", required: true)]
        public Input<int> HttpPort { get; set; } = null!;

        /// <summary>
        /// The HTTPS TCP port number. Possible values are between `1` - `65535`.
        /// </summary>
        [Input("httpsPort", required: true)]
        public Input<int> HttpsPort { get; set; } = null!;

        /// <summary>
        /// Priority to use for load balancing. Higher priorities will not be used for load balancing if any lower priority backend is healthy. Defaults to `1`.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// Weight of this endpoint for load balancing purposes. Defaults to `50`.
        /// </summary>
        [Input("weight")]
        public Input<int>? Weight { get; set; }

        public FrontdoorBackendPoolsBackendsArgs()
        {
        }
    }

    public sealed class FrontdoorBackendPoolsBackendsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Location of the backend (IP address or FQDN)
        /// </summary>
        [Input("address", required: true)]
        public Input<string> Address { get; set; } = null!;

        /// <summary>
        /// Specifies if the backend is enabled or not. Valid options are `true` or `false`. Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The value to use as the host header sent to the backend.
        /// </summary>
        [Input("hostHeader", required: true)]
        public Input<string> HostHeader { get; set; } = null!;

        /// <summary>
        /// The HTTP TCP port number. Possible values are between `1` - `65535`.
        /// </summary>
        [Input("httpPort", required: true)]
        public Input<int> HttpPort { get; set; } = null!;

        /// <summary>
        /// The HTTPS TCP port number. Possible values are between `1` - `65535`.
        /// </summary>
        [Input("httpsPort", required: true)]
        public Input<int> HttpsPort { get; set; } = null!;

        /// <summary>
        /// Priority to use for load balancing. Higher priorities will not be used for load balancing if any lower priority backend is healthy. Defaults to `1`.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// Weight of this endpoint for load balancing purposes. Defaults to `50`.
        /// </summary>
        [Input("weight")]
        public Input<int>? Weight { get; set; }

        public FrontdoorBackendPoolsBackendsGetArgs()
        {
        }
    }

    public sealed class FrontdoorBackendPoolsGetArgs : Pulumi.ResourceArgs
    {
        [Input("backends", required: true)]
        private InputList<FrontdoorBackendPoolsBackendsGetArgs>? _backends;

        /// <summary>
        /// A `backend` block as defined below.
        /// </summary>
        public InputList<FrontdoorBackendPoolsBackendsGetArgs> Backends
        {
            get => _backends ?? (_backends = new InputList<FrontdoorBackendPoolsBackendsGetArgs>());
            set => _backends = value;
        }

        /// <summary>
        /// Specifies the name of the `backend_pool_health_probe` block whithin this resource to use for this `Backend Pool`.
        /// </summary>
        [Input("healthProbeName", required: true)]
        public Input<string> HealthProbeName { get; set; } = null!;

        /// <summary>
        /// The ID of the FrontDoor.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Specifies the name of the `backend_pool_load_balancing` block within this resource to use for this `Backend Pool`.
        /// </summary>
        [Input("loadBalancingName", required: true)]
        public Input<string> LoadBalancingName { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the Backend Pool.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public FrontdoorBackendPoolsGetArgs()
        {
        }
    }

    public sealed class FrontdoorFrontendEndpointsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A `custom_https_configuration` block as defined below.
        /// </summary>
        [Input("customHttpsConfiguration")]
        public Input<FrontdoorFrontendEndpointsCustomHttpsConfigurationArgs>? CustomHttpsConfiguration { get; set; }

        /// <summary>
        /// Should the HTTPS protocol be enabled for a custom domain associated with the Front Door?
        /// </summary>
        [Input("customHttpsProvisioningEnabled", required: true)]
        public Input<bool> CustomHttpsProvisioningEnabled { get; set; } = null!;

        /// <summary>
        /// Specifies the host name of the `frontend_endpoint`. Must be a domain name.
        /// </summary>
        [Input("hostName", required: true)]
        public Input<string> HostName { get; set; } = null!;

        /// <summary>
        /// The ID of the FrontDoor.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Specifies the name of the `frontend_endpoint`.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Whether to allow session affinity on this host. Valid options are `true` or `false` Defaults to `false`.
        /// </summary>
        [Input("sessionAffinityEnabled")]
        public Input<bool>? SessionAffinityEnabled { get; set; }

        /// <summary>
        /// The TTL to use in seconds for session affinity, if applicable. Defaults to `0`.
        /// </summary>
        [Input("sessionAffinityTtlSeconds")]
        public Input<int>? SessionAffinityTtlSeconds { get; set; }

        /// <summary>
        /// Defines the Web Application Firewall policy `ID` for each host.
        /// </summary>
        [Input("webApplicationFirewallPolicyLinkId")]
        public Input<string>? WebApplicationFirewallPolicyLinkId { get; set; }

        public FrontdoorFrontendEndpointsArgs()
        {
        }
    }

    public sealed class FrontdoorFrontendEndpointsCustomHttpsConfigurationArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the Key Vault secret representing the full certificate PFX.
        /// </summary>
        [Input("azureKeyVaultCertificateSecretName")]
        public Input<string>? AzureKeyVaultCertificateSecretName { get; set; }

        /// <summary>
        /// The version of the Key Vault secret representing the full certificate PFX.
        /// </summary>
        [Input("azureKeyVaultCertificateSecretVersion")]
        public Input<string>? AzureKeyVaultCertificateSecretVersion { get; set; }

        /// <summary>
        /// The ID of the Key Vault containing the SSL certificate.
        /// </summary>
        [Input("azureKeyVaultCertificateVaultId")]
        public Input<string>? AzureKeyVaultCertificateVaultId { get; set; }

        /// <summary>
        /// Certificate source to encrypted `HTTPS` traffic with. Allowed values are `FrontDoor` or `AzureKeyVault`. Defaults to `FrontDoor`.
        /// </summary>
        [Input("certificateSource")]
        public Input<string>? CertificateSource { get; set; }

        /// <summary>
        /// Minimum client TLS version supported.
        /// </summary>
        [Input("minimumTlsVersion")]
        public Input<string>? MinimumTlsVersion { get; set; }

        /// <summary>
        /// Provisioning state of the Front Door.
        /// </summary>
        [Input("provisioningState")]
        public Input<string>? ProvisioningState { get; set; }

        /// <summary>
        /// Provisioning substate of the Front Door
        /// </summary>
        [Input("provisioningSubstate")]
        public Input<string>? ProvisioningSubstate { get; set; }

        public FrontdoorFrontendEndpointsCustomHttpsConfigurationArgs()
        {
        }
    }

    public sealed class FrontdoorFrontendEndpointsCustomHttpsConfigurationGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the Key Vault secret representing the full certificate PFX.
        /// </summary>
        [Input("azureKeyVaultCertificateSecretName")]
        public Input<string>? AzureKeyVaultCertificateSecretName { get; set; }

        /// <summary>
        /// The version of the Key Vault secret representing the full certificate PFX.
        /// </summary>
        [Input("azureKeyVaultCertificateSecretVersion")]
        public Input<string>? AzureKeyVaultCertificateSecretVersion { get; set; }

        /// <summary>
        /// The ID of the Key Vault containing the SSL certificate.
        /// </summary>
        [Input("azureKeyVaultCertificateVaultId")]
        public Input<string>? AzureKeyVaultCertificateVaultId { get; set; }

        /// <summary>
        /// Certificate source to encrypted `HTTPS` traffic with. Allowed values are `FrontDoor` or `AzureKeyVault`. Defaults to `FrontDoor`.
        /// </summary>
        [Input("certificateSource")]
        public Input<string>? CertificateSource { get; set; }

        /// <summary>
        /// Minimum client TLS version supported.
        /// </summary>
        [Input("minimumTlsVersion")]
        public Input<string>? MinimumTlsVersion { get; set; }

        /// <summary>
        /// Provisioning state of the Front Door.
        /// </summary>
        [Input("provisioningState")]
        public Input<string>? ProvisioningState { get; set; }

        /// <summary>
        /// Provisioning substate of the Front Door
        /// </summary>
        [Input("provisioningSubstate")]
        public Input<string>? ProvisioningSubstate { get; set; }

        public FrontdoorFrontendEndpointsCustomHttpsConfigurationGetArgs()
        {
        }
    }

    public sealed class FrontdoorFrontendEndpointsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A `custom_https_configuration` block as defined below.
        /// </summary>
        [Input("customHttpsConfiguration")]
        public Input<FrontdoorFrontendEndpointsCustomHttpsConfigurationGetArgs>? CustomHttpsConfiguration { get; set; }

        /// <summary>
        /// Should the HTTPS protocol be enabled for a custom domain associated with the Front Door?
        /// </summary>
        [Input("customHttpsProvisioningEnabled", required: true)]
        public Input<bool> CustomHttpsProvisioningEnabled { get; set; } = null!;

        /// <summary>
        /// Specifies the host name of the `frontend_endpoint`. Must be a domain name.
        /// </summary>
        [Input("hostName", required: true)]
        public Input<string> HostName { get; set; } = null!;

        /// <summary>
        /// The ID of the FrontDoor.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Specifies the name of the `frontend_endpoint`.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Whether to allow session affinity on this host. Valid options are `true` or `false` Defaults to `false`.
        /// </summary>
        [Input("sessionAffinityEnabled")]
        public Input<bool>? SessionAffinityEnabled { get; set; }

        /// <summary>
        /// The TTL to use in seconds for session affinity, if applicable. Defaults to `0`.
        /// </summary>
        [Input("sessionAffinityTtlSeconds")]
        public Input<int>? SessionAffinityTtlSeconds { get; set; }

        /// <summary>
        /// Defines the Web Application Firewall policy `ID` for each host.
        /// </summary>
        [Input("webApplicationFirewallPolicyLinkId")]
        public Input<string>? WebApplicationFirewallPolicyLinkId { get; set; }

        public FrontdoorFrontendEndpointsGetArgs()
        {
        }
    }

    public sealed class FrontdoorRoutingRulesArgs : Pulumi.ResourceArgs
    {
        [Input("acceptedProtocols", required: true)]
        private InputList<string>? _acceptedProtocols;

        /// <summary>
        /// Protocol schemes to match for the Backend Routing Rule. Defaults to `Http`.
        /// </summary>
        public InputList<string> AcceptedProtocols
        {
            get => _acceptedProtocols ?? (_acceptedProtocols = new InputList<string>());
            set => _acceptedProtocols = value;
        }

        /// <summary>
        /// `Enable` or `Disable` use of this Backend Routing Rule. Permitted values are `true` or `false`. Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// A `forwarding_configuration` block as defined below.
        /// </summary>
        [Input("forwardingConfiguration")]
        public Input<FrontdoorRoutingRulesForwardingConfigurationArgs>? ForwardingConfiguration { get; set; }

        [Input("frontendEndpoints", required: true)]
        private InputList<string>? _frontendEndpoints;

        /// <summary>
        /// The names of the `frontend_endpoint` blocks whithin this resource to associate with this `routing_rule`.
        /// </summary>
        public InputList<string> FrontendEndpoints
        {
            get => _frontendEndpoints ?? (_frontendEndpoints = new InputList<string>());
            set => _frontendEndpoints = value;
        }

        /// <summary>
        /// The ID of the FrontDoor.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Specifies the name of the Routing Rule.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("patternsToMatches", required: true)]
        private InputList<string>? _patternsToMatches;

        /// <summary>
        /// The route patterns for the Backend Routing Rule. Defaults to `/*`.
        /// </summary>
        public InputList<string> PatternsToMatches
        {
            get => _patternsToMatches ?? (_patternsToMatches = new InputList<string>());
            set => _patternsToMatches = value;
        }

        /// <summary>
        /// A `redirect_configuration` block as defined below.
        /// </summary>
        [Input("redirectConfiguration")]
        public Input<FrontdoorRoutingRulesRedirectConfigurationArgs>? RedirectConfiguration { get; set; }

        public FrontdoorRoutingRulesArgs()
        {
        }
    }

    public sealed class FrontdoorRoutingRulesForwardingConfigurationArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the name of the Backend Pool to forward the incoming traffic to.
        /// </summary>
        [Input("backendPoolName", required: true)]
        public Input<string> BackendPoolName { get; set; } = null!;

        /// <summary>
        /// Specifies whether to Enable caching or not. Valid options are `true` or `false`. Defaults to `false`.
        /// </summary>
        [Input("cacheEnabled")]
        public Input<bool>? CacheEnabled { get; set; }

        /// <summary>
        /// Defines cache behavior in releation to query string parameters. Valid options are `StripAll` or `StripNone`. Defaults to `StripAll`.
        /// </summary>
        [Input("cacheQueryParameterStripDirective")]
        public Input<string>? CacheQueryParameterStripDirective { get; set; }

        /// <summary>
        /// Whether to use dynamic compression when caching. Valid options are `true` or `false`. Defaults to `false`.
        /// </summary>
        [Input("cacheUseDynamicCompression")]
        public Input<bool>? CacheUseDynamicCompression { get; set; }

        /// <summary>
        /// Path to use when constructing the request to forward to the backend. This functions as a URL Rewrite. Default behavior preserves the URL path.
        /// </summary>
        [Input("customForwardingPath")]
        public Input<string>? CustomForwardingPath { get; set; }

        /// <summary>
        /// Protocol to use when redirecting. Valid options are `HttpOnly`, `HttpsOnly`, or `MatchRequest`. Defaults to `HttpsOnly`.
        /// </summary>
        [Input("forwardingProtocol")]
        public Input<string>? ForwardingProtocol { get; set; }

        public FrontdoorRoutingRulesForwardingConfigurationArgs()
        {
        }
    }

    public sealed class FrontdoorRoutingRulesForwardingConfigurationGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the name of the Backend Pool to forward the incoming traffic to.
        /// </summary>
        [Input("backendPoolName", required: true)]
        public Input<string> BackendPoolName { get; set; } = null!;

        /// <summary>
        /// Specifies whether to Enable caching or not. Valid options are `true` or `false`. Defaults to `false`.
        /// </summary>
        [Input("cacheEnabled")]
        public Input<bool>? CacheEnabled { get; set; }

        /// <summary>
        /// Defines cache behavior in releation to query string parameters. Valid options are `StripAll` or `StripNone`. Defaults to `StripAll`.
        /// </summary>
        [Input("cacheQueryParameterStripDirective")]
        public Input<string>? CacheQueryParameterStripDirective { get; set; }

        /// <summary>
        /// Whether to use dynamic compression when caching. Valid options are `true` or `false`. Defaults to `false`.
        /// </summary>
        [Input("cacheUseDynamicCompression")]
        public Input<bool>? CacheUseDynamicCompression { get; set; }

        /// <summary>
        /// Path to use when constructing the request to forward to the backend. This functions as a URL Rewrite. Default behavior preserves the URL path.
        /// </summary>
        [Input("customForwardingPath")]
        public Input<string>? CustomForwardingPath { get; set; }

        /// <summary>
        /// Protocol to use when redirecting. Valid options are `HttpOnly`, `HttpsOnly`, or `MatchRequest`. Defaults to `HttpsOnly`.
        /// </summary>
        [Input("forwardingProtocol")]
        public Input<string>? ForwardingProtocol { get; set; }

        public FrontdoorRoutingRulesForwardingConfigurationGetArgs()
        {
        }
    }

    public sealed class FrontdoorRoutingRulesGetArgs : Pulumi.ResourceArgs
    {
        [Input("acceptedProtocols", required: true)]
        private InputList<string>? _acceptedProtocols;

        /// <summary>
        /// Protocol schemes to match for the Backend Routing Rule. Defaults to `Http`.
        /// </summary>
        public InputList<string> AcceptedProtocols
        {
            get => _acceptedProtocols ?? (_acceptedProtocols = new InputList<string>());
            set => _acceptedProtocols = value;
        }

        /// <summary>
        /// `Enable` or `Disable` use of this Backend Routing Rule. Permitted values are `true` or `false`. Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// A `forwarding_configuration` block as defined below.
        /// </summary>
        [Input("forwardingConfiguration")]
        public Input<FrontdoorRoutingRulesForwardingConfigurationGetArgs>? ForwardingConfiguration { get; set; }

        [Input("frontendEndpoints", required: true)]
        private InputList<string>? _frontendEndpoints;

        /// <summary>
        /// The names of the `frontend_endpoint` blocks whithin this resource to associate with this `routing_rule`.
        /// </summary>
        public InputList<string> FrontendEndpoints
        {
            get => _frontendEndpoints ?? (_frontendEndpoints = new InputList<string>());
            set => _frontendEndpoints = value;
        }

        /// <summary>
        /// The ID of the FrontDoor.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Specifies the name of the Routing Rule.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("patternsToMatches", required: true)]
        private InputList<string>? _patternsToMatches;

        /// <summary>
        /// The route patterns for the Backend Routing Rule. Defaults to `/*`.
        /// </summary>
        public InputList<string> PatternsToMatches
        {
            get => _patternsToMatches ?? (_patternsToMatches = new InputList<string>());
            set => _patternsToMatches = value;
        }

        /// <summary>
        /// A `redirect_configuration` block as defined below.
        /// </summary>
        [Input("redirectConfiguration")]
        public Input<FrontdoorRoutingRulesRedirectConfigurationGetArgs>? RedirectConfiguration { get; set; }

        public FrontdoorRoutingRulesGetArgs()
        {
        }
    }

    public sealed class FrontdoorRoutingRulesRedirectConfigurationArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The destination fragment in the portion of URL after '#'. Set this to add a fragment to the redirect URL.
        /// </summary>
        [Input("customFragment")]
        public Input<string>? CustomFragment { get; set; }

        /// <summary>
        /// Set this to change the URL for the redirection.
        /// </summary>
        [Input("customHost")]
        public Input<string>? CustomHost { get; set; }

        /// <summary>
        /// The path to retain as per the incoming request, or update in the URL for the redirection.
        /// </summary>
        [Input("customPath")]
        public Input<string>? CustomPath { get; set; }

        /// <summary>
        /// Replace any existing query string from the incoming request URL.
        /// </summary>
        [Input("customQueryString")]
        public Input<string>? CustomQueryString { get; set; }

        /// <summary>
        /// Protocol to use when redirecting. Valid options are `HttpOnly`, `HttpsOnly`, or `MatchRequest`. Defaults to `MatchRequest`
        /// </summary>
        [Input("redirectProtocol", required: true)]
        public Input<string> RedirectProtocol { get; set; } = null!;

        /// <summary>
        /// Status code for the redirect. Valida options are `Moved`, `Found`, `TemporaryRedirect`, `PermanentRedirect`. Defaults to `Found`
        /// </summary>
        [Input("redirectType", required: true)]
        public Input<string> RedirectType { get; set; } = null!;

        public FrontdoorRoutingRulesRedirectConfigurationArgs()
        {
        }
    }

    public sealed class FrontdoorRoutingRulesRedirectConfigurationGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The destination fragment in the portion of URL after '#'. Set this to add a fragment to the redirect URL.
        /// </summary>
        [Input("customFragment")]
        public Input<string>? CustomFragment { get; set; }

        /// <summary>
        /// Set this to change the URL for the redirection.
        /// </summary>
        [Input("customHost")]
        public Input<string>? CustomHost { get; set; }

        /// <summary>
        /// The path to retain as per the incoming request, or update in the URL for the redirection.
        /// </summary>
        [Input("customPath")]
        public Input<string>? CustomPath { get; set; }

        /// <summary>
        /// Replace any existing query string from the incoming request URL.
        /// </summary>
        [Input("customQueryString")]
        public Input<string>? CustomQueryString { get; set; }

        /// <summary>
        /// Protocol to use when redirecting. Valid options are `HttpOnly`, `HttpsOnly`, or `MatchRequest`. Defaults to `MatchRequest`
        /// </summary>
        [Input("redirectProtocol", required: true)]
        public Input<string> RedirectProtocol { get; set; } = null!;

        /// <summary>
        /// Status code for the redirect. Valida options are `Moved`, `Found`, `TemporaryRedirect`, `PermanentRedirect`. Defaults to `Found`
        /// </summary>
        [Input("redirectType", required: true)]
        public Input<string> RedirectType { get; set; } = null!;

        public FrontdoorRoutingRulesRedirectConfigurationGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class FrontdoorBackendPoolHealthProbes
    {
        /// <summary>
        /// Is this health probe enabled? Dafaults to `true`.
        /// </summary>
        public readonly bool? Enabled;
        /// <summary>
        /// The ID of the FrontDoor.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The number of seconds between each Health Probe. Defaults to `120`.
        /// </summary>
        public readonly int? IntervalInSeconds;
        /// <summary>
        /// Specifies the name of the Health Probe.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The path to use for the Health Probe. Default is `/`.
        /// </summary>
        public readonly string? Path;
        /// <summary>
        /// Specifies HTTP method the health probe uses when querying the backend pool instances. Possible values include: `Get` and `Head`. Defaults to `Get`.
        /// </summary>
        public readonly string? ProbeMethod;
        /// <summary>
        /// Protocol scheme to use for the Health Probe. Defaults to `Http`.
        /// </summary>
        public readonly string? Protocol;

        [OutputConstructor]
        private FrontdoorBackendPoolHealthProbes(
            bool? enabled,
            string id,
            int? intervalInSeconds,
            string name,
            string? path,
            string? probeMethod,
            string? protocol)
        {
            Enabled = enabled;
            Id = id;
            IntervalInSeconds = intervalInSeconds;
            Name = name;
            Path = path;
            ProbeMethod = probeMethod;
            Protocol = protocol;
        }
    }

    [OutputType]
    public sealed class FrontdoorBackendPoolLoadBalancings
    {
        /// <summary>
        /// The additional latency in milliseconds for probes to fall into the lowest latency bucket. Defaults to `0`.
        /// </summary>
        public readonly int? AdditionalLatencyMilliseconds;
        /// <summary>
        /// The ID of the FrontDoor.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Specifies the name of the Load Balancer.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The number of samples to consider for load balancing decisions. Defaults to `4`.
        /// </summary>
        public readonly int? SampleSize;
        /// <summary>
        /// The number of samples within the sample period that must succeed. Defaults to `2`.
        /// </summary>
        public readonly int? SuccessfulSamplesRequired;

        [OutputConstructor]
        private FrontdoorBackendPoolLoadBalancings(
            int? additionalLatencyMilliseconds,
            string id,
            string name,
            int? sampleSize,
            int? successfulSamplesRequired)
        {
            AdditionalLatencyMilliseconds = additionalLatencyMilliseconds;
            Id = id;
            Name = name;
            SampleSize = sampleSize;
            SuccessfulSamplesRequired = successfulSamplesRequired;
        }
    }

    [OutputType]
    public sealed class FrontdoorBackendPools
    {
        /// <summary>
        /// A `backend` block as defined below.
        /// </summary>
        public readonly ImmutableArray<FrontdoorBackendPoolsBackends> Backends;
        /// <summary>
        /// Specifies the name of the `backend_pool_health_probe` block whithin this resource to use for this `Backend Pool`.
        /// </summary>
        public readonly string HealthProbeName;
        /// <summary>
        /// The ID of the FrontDoor.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Specifies the name of the `backend_pool_load_balancing` block within this resource to use for this `Backend Pool`.
        /// </summary>
        public readonly string LoadBalancingName;
        /// <summary>
        /// Specifies the name of the Backend Pool.
        /// </summary>
        public readonly string Name;

        [OutputConstructor]
        private FrontdoorBackendPools(
            ImmutableArray<FrontdoorBackendPoolsBackends> backends,
            string healthProbeName,
            string id,
            string loadBalancingName,
            string name)
        {
            Backends = backends;
            HealthProbeName = healthProbeName;
            Id = id;
            LoadBalancingName = loadBalancingName;
            Name = name;
        }
    }

    [OutputType]
    public sealed class FrontdoorBackendPoolsBackends
    {
        /// <summary>
        /// Location of the backend (IP address or FQDN)
        /// </summary>
        public readonly string Address;
        /// <summary>
        /// Specifies if the backend is enabled or not. Valid options are `true` or `false`. Defaults to `true`.
        /// </summary>
        public readonly bool? Enabled;
        /// <summary>
        /// The value to use as the host header sent to the backend.
        /// </summary>
        public readonly string HostHeader;
        /// <summary>
        /// The HTTP TCP port number. Possible values are between `1` - `65535`.
        /// </summary>
        public readonly int HttpPort;
        /// <summary>
        /// The HTTPS TCP port number. Possible values are between `1` - `65535`.
        /// </summary>
        public readonly int HttpsPort;
        /// <summary>
        /// Priority to use for load balancing. Higher priorities will not be used for load balancing if any lower priority backend is healthy. Defaults to `1`.
        /// </summary>
        public readonly int? Priority;
        /// <summary>
        /// Weight of this endpoint for load balancing purposes. Defaults to `50`.
        /// </summary>
        public readonly int? Weight;

        [OutputConstructor]
        private FrontdoorBackendPoolsBackends(
            string address,
            bool? enabled,
            string hostHeader,
            int httpPort,
            int httpsPort,
            int? priority,
            int? weight)
        {
            Address = address;
            Enabled = enabled;
            HostHeader = hostHeader;
            HttpPort = httpPort;
            HttpsPort = httpsPort;
            Priority = priority;
            Weight = weight;
        }
    }

    [OutputType]
    public sealed class FrontdoorFrontendEndpoints
    {
        /// <summary>
        /// A `custom_https_configuration` block as defined below.
        /// </summary>
        public readonly FrontdoorFrontendEndpointsCustomHttpsConfiguration? CustomHttpsConfiguration;
        /// <summary>
        /// Should the HTTPS protocol be enabled for a custom domain associated with the Front Door?
        /// </summary>
        public readonly bool CustomHttpsProvisioningEnabled;
        /// <summary>
        /// Specifies the host name of the `frontend_endpoint`. Must be a domain name.
        /// </summary>
        public readonly string HostName;
        /// <summary>
        /// The ID of the FrontDoor.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Specifies the name of the `frontend_endpoint`.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Whether to allow session affinity on this host. Valid options are `true` or `false` Defaults to `false`.
        /// </summary>
        public readonly bool? SessionAffinityEnabled;
        /// <summary>
        /// The TTL to use in seconds for session affinity, if applicable. Defaults to `0`.
        /// </summary>
        public readonly int? SessionAffinityTtlSeconds;
        /// <summary>
        /// Defines the Web Application Firewall policy `ID` for each host.
        /// </summary>
        public readonly string? WebApplicationFirewallPolicyLinkId;

        [OutputConstructor]
        private FrontdoorFrontendEndpoints(
            FrontdoorFrontendEndpointsCustomHttpsConfiguration? customHttpsConfiguration,
            bool customHttpsProvisioningEnabled,
            string hostName,
            string id,
            string name,
            bool? sessionAffinityEnabled,
            int? sessionAffinityTtlSeconds,
            string? webApplicationFirewallPolicyLinkId)
        {
            CustomHttpsConfiguration = customHttpsConfiguration;
            CustomHttpsProvisioningEnabled = customHttpsProvisioningEnabled;
            HostName = hostName;
            Id = id;
            Name = name;
            SessionAffinityEnabled = sessionAffinityEnabled;
            SessionAffinityTtlSeconds = sessionAffinityTtlSeconds;
            WebApplicationFirewallPolicyLinkId = webApplicationFirewallPolicyLinkId;
        }
    }

    [OutputType]
    public sealed class FrontdoorFrontendEndpointsCustomHttpsConfiguration
    {
        /// <summary>
        /// The name of the Key Vault secret representing the full certificate PFX.
        /// </summary>
        public readonly string? AzureKeyVaultCertificateSecretName;
        /// <summary>
        /// The version of the Key Vault secret representing the full certificate PFX.
        /// </summary>
        public readonly string? AzureKeyVaultCertificateSecretVersion;
        /// <summary>
        /// The ID of the Key Vault containing the SSL certificate.
        /// </summary>
        public readonly string? AzureKeyVaultCertificateVaultId;
        /// <summary>
        /// Certificate source to encrypted `HTTPS` traffic with. Allowed values are `FrontDoor` or `AzureKeyVault`. Defaults to `FrontDoor`.
        /// </summary>
        public readonly string? CertificateSource;
        /// <summary>
        /// Minimum client TLS version supported.
        /// </summary>
        public readonly string MinimumTlsVersion;
        /// <summary>
        /// Provisioning state of the Front Door.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Provisioning substate of the Front Door
        /// </summary>
        public readonly string ProvisioningSubstate;

        [OutputConstructor]
        private FrontdoorFrontendEndpointsCustomHttpsConfiguration(
            string? azureKeyVaultCertificateSecretName,
            string? azureKeyVaultCertificateSecretVersion,
            string? azureKeyVaultCertificateVaultId,
            string? certificateSource,
            string minimumTlsVersion,
            string provisioningState,
            string provisioningSubstate)
        {
            AzureKeyVaultCertificateSecretName = azureKeyVaultCertificateSecretName;
            AzureKeyVaultCertificateSecretVersion = azureKeyVaultCertificateSecretVersion;
            AzureKeyVaultCertificateVaultId = azureKeyVaultCertificateVaultId;
            CertificateSource = certificateSource;
            MinimumTlsVersion = minimumTlsVersion;
            ProvisioningState = provisioningState;
            ProvisioningSubstate = provisioningSubstate;
        }
    }

    [OutputType]
    public sealed class FrontdoorRoutingRules
    {
        /// <summary>
        /// Protocol schemes to match for the Backend Routing Rule. Defaults to `Http`.
        /// </summary>
        public readonly ImmutableArray<string> AcceptedProtocols;
        /// <summary>
        /// `Enable` or `Disable` use of this Backend Routing Rule. Permitted values are `true` or `false`. Defaults to `true`.
        /// </summary>
        public readonly bool? Enabled;
        /// <summary>
        /// A `forwarding_configuration` block as defined below.
        /// </summary>
        public readonly FrontdoorRoutingRulesForwardingConfiguration? ForwardingConfiguration;
        /// <summary>
        /// The names of the `frontend_endpoint` blocks whithin this resource to associate with this `routing_rule`.
        /// </summary>
        public readonly ImmutableArray<string> FrontendEndpoints;
        /// <summary>
        /// The ID of the FrontDoor.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Specifies the name of the Routing Rule.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The route patterns for the Backend Routing Rule. Defaults to `/*`.
        /// </summary>
        public readonly ImmutableArray<string> PatternsToMatches;
        /// <summary>
        /// A `redirect_configuration` block as defined below.
        /// </summary>
        public readonly FrontdoorRoutingRulesRedirectConfiguration? RedirectConfiguration;

        [OutputConstructor]
        private FrontdoorRoutingRules(
            ImmutableArray<string> acceptedProtocols,
            bool? enabled,
            FrontdoorRoutingRulesForwardingConfiguration? forwardingConfiguration,
            ImmutableArray<string> frontendEndpoints,
            string id,
            string name,
            ImmutableArray<string> patternsToMatches,
            FrontdoorRoutingRulesRedirectConfiguration? redirectConfiguration)
        {
            AcceptedProtocols = acceptedProtocols;
            Enabled = enabled;
            ForwardingConfiguration = forwardingConfiguration;
            FrontendEndpoints = frontendEndpoints;
            Id = id;
            Name = name;
            PatternsToMatches = patternsToMatches;
            RedirectConfiguration = redirectConfiguration;
        }
    }

    [OutputType]
    public sealed class FrontdoorRoutingRulesForwardingConfiguration
    {
        /// <summary>
        /// Specifies the name of the Backend Pool to forward the incoming traffic to.
        /// </summary>
        public readonly string BackendPoolName;
        /// <summary>
        /// Specifies whether to Enable caching or not. Valid options are `true` or `false`. Defaults to `false`.
        /// </summary>
        public readonly bool? CacheEnabled;
        /// <summary>
        /// Defines cache behavior in releation to query string parameters. Valid options are `StripAll` or `StripNone`. Defaults to `StripAll`.
        /// </summary>
        public readonly string? CacheQueryParameterStripDirective;
        /// <summary>
        /// Whether to use dynamic compression when caching. Valid options are `true` or `false`. Defaults to `false`.
        /// </summary>
        public readonly bool? CacheUseDynamicCompression;
        /// <summary>
        /// Path to use when constructing the request to forward to the backend. This functions as a URL Rewrite. Default behavior preserves the URL path.
        /// </summary>
        public readonly string? CustomForwardingPath;
        /// <summary>
        /// Protocol to use when redirecting. Valid options are `HttpOnly`, `HttpsOnly`, or `MatchRequest`. Defaults to `HttpsOnly`.
        /// </summary>
        public readonly string? ForwardingProtocol;

        [OutputConstructor]
        private FrontdoorRoutingRulesForwardingConfiguration(
            string backendPoolName,
            bool? cacheEnabled,
            string? cacheQueryParameterStripDirective,
            bool? cacheUseDynamicCompression,
            string? customForwardingPath,
            string? forwardingProtocol)
        {
            BackendPoolName = backendPoolName;
            CacheEnabled = cacheEnabled;
            CacheQueryParameterStripDirective = cacheQueryParameterStripDirective;
            CacheUseDynamicCompression = cacheUseDynamicCompression;
            CustomForwardingPath = customForwardingPath;
            ForwardingProtocol = forwardingProtocol;
        }
    }

    [OutputType]
    public sealed class FrontdoorRoutingRulesRedirectConfiguration
    {
        /// <summary>
        /// The destination fragment in the portion of URL after '#'. Set this to add a fragment to the redirect URL.
        /// </summary>
        public readonly string? CustomFragment;
        /// <summary>
        /// Set this to change the URL for the redirection.
        /// </summary>
        public readonly string? CustomHost;
        /// <summary>
        /// The path to retain as per the incoming request, or update in the URL for the redirection.
        /// </summary>
        public readonly string? CustomPath;
        /// <summary>
        /// Replace any existing query string from the incoming request URL.
        /// </summary>
        public readonly string? CustomQueryString;
        /// <summary>
        /// Protocol to use when redirecting. Valid options are `HttpOnly`, `HttpsOnly`, or `MatchRequest`. Defaults to `MatchRequest`
        /// </summary>
        public readonly string RedirectProtocol;
        /// <summary>
        /// Status code for the redirect. Valida options are `Moved`, `Found`, `TemporaryRedirect`, `PermanentRedirect`. Defaults to `Found`
        /// </summary>
        public readonly string RedirectType;

        [OutputConstructor]
        private FrontdoorRoutingRulesRedirectConfiguration(
            string? customFragment,
            string? customHost,
            string? customPath,
            string? customQueryString,
            string redirectProtocol,
            string redirectType)
        {
            CustomFragment = customFragment;
            CustomHost = customHost;
            CustomPath = customPath;
            CustomQueryString = customQueryString;
            RedirectProtocol = redirectProtocol;
            RedirectType = redirectType;
        }
    }
    }
}
