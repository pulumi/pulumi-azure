// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.FrontDoor
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleFrontdoor = new Azure.FrontDoor.Frontdoor("exampleFrontdoor", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         RoutingRules = new[]
    ///         {
    ///             new Azure.FrontDoor.Inputs.FrontdoorRoutingRuleArgs
    ///             {
    ///                 Name = "exampleRoutingRule1",
    ///                 AcceptedProtocols = new[]
    ///                 {
    ///                     "Http",
    ///                     "Https",
    ///                 },
    ///                 PatternsToMatches = new[]
    ///                 {
    ///                     "/*",
    ///                 },
    ///                 FrontendEndpoints = new[]
    ///                 {
    ///                     "exampleFrontendEndpoint1",
    ///                 },
    ///                 ForwardingConfiguration = new Azure.FrontDoor.Inputs.FrontdoorRoutingRuleForwardingConfigurationArgs
    ///                 {
    ///                     ForwardingProtocol = "MatchRequest",
    ///                     BackendPoolName = "exampleBackendBing",
    ///                 },
    ///             },
    ///         },
    ///         BackendPoolLoadBalancings = new[]
    ///         {
    ///             new Azure.FrontDoor.Inputs.FrontdoorBackendPoolLoadBalancingArgs
    ///             {
    ///                 Name = "exampleLoadBalancingSettings1",
    ///             },
    ///         },
    ///         BackendPoolHealthProbes = new[]
    ///         {
    ///             new Azure.FrontDoor.Inputs.FrontdoorBackendPoolHealthProbeArgs
    ///             {
    ///                 Name = "exampleHealthProbeSetting1",
    ///             },
    ///         },
    ///         BackendPools = new[]
    ///         {
    ///             new Azure.FrontDoor.Inputs.FrontdoorBackendPoolArgs
    ///             {
    ///                 Name = "exampleBackendBing",
    ///                 Backends = new[]
    ///                 {
    ///                     new Azure.FrontDoor.Inputs.FrontdoorBackendPoolBackendArgs
    ///                     {
    ///                         HostHeader = "www.bing.com",
    ///                         Address = "www.bing.com",
    ///                         HttpPort = 80,
    ///                         HttpsPort = 443,
    ///                     },
    ///                 },
    ///                 LoadBalancingName = "exampleLoadBalancingSettings1",
    ///                 HealthProbeName = "exampleHealthProbeSetting1",
    ///             },
    ///         },
    ///         FrontendEndpoints = new[]
    ///         {
    ///             new Azure.FrontDoor.Inputs.FrontdoorFrontendEndpointArgs
    ///             {
    ///                 Name = "exampleFrontendEndpoint1",
    ///                 HostName = "example-FrontDoor.azurefd.net",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Front Doors can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:frontdoor/frontdoor:Frontdoor example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/frontDoors/frontdoor1
    /// ```
    /// </summary>
    [AzureResourceType("azure:frontdoor/frontdoor:Frontdoor")]
    public partial class Frontdoor : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A `backend_pool_health_probe` block as defined below.
        /// </summary>
        [Output("backendPoolHealthProbes")]
        public Output<ImmutableArray<Outputs.FrontdoorBackendPoolHealthProbe>> BackendPoolHealthProbes { get; private set; } = null!;

        /// <summary>
        /// A map/dictionary of Backend Pool Health Probe Names (key) to the Backend Pool Health Probe ID (value)
        /// </summary>
        [Output("backendPoolHealthProbesMap")]
        public Output<ImmutableDictionary<string, string>> BackendPoolHealthProbesMap { get; private set; } = null!;

        /// <summary>
        /// A map/dictionary of Backend Pool Load Balancing Setting Names (key) to the Backend Pool Load Balancing Setting ID (value)
        /// </summary>
        [Output("backendPoolLoadBalancingSettingsMap")]
        public Output<ImmutableDictionary<string, string>> BackendPoolLoadBalancingSettingsMap { get; private set; } = null!;

        /// <summary>
        /// A `backend_pool_load_balancing` block as defined below.
        /// </summary>
        [Output("backendPoolLoadBalancings")]
        public Output<ImmutableArray<Outputs.FrontdoorBackendPoolLoadBalancing>> BackendPoolLoadBalancings { get; private set; } = null!;

        /// <summary>
        /// A `backend_pool_settings` block as defined below.
        /// </summary>
        [Output("backendPoolSettings")]
        public Output<ImmutableArray<Outputs.FrontdoorBackendPoolSetting>> BackendPoolSettings { get; private set; } = null!;

        /// <summary>
        /// A `backend_pool` block as defined below.
        /// </summary>
        [Output("backendPools")]
        public Output<ImmutableArray<Outputs.FrontdoorBackendPool>> BackendPools { get; private set; } = null!;

        /// <summary>
        /// A map/dictionary of Backend Pool Names (key) to the Backend Pool ID (value)
        /// </summary>
        [Output("backendPoolsMap")]
        public Output<ImmutableDictionary<string, string>> BackendPoolsMap { get; private set; } = null!;

        /// <summary>
        /// The host that each frontendEndpoint must CNAME to.
        /// </summary>
        [Output("cname")]
        public Output<string> Cname { get; private set; } = null!;

        [Output("explicitResourceOrders")]
        public Output<ImmutableArray<Outputs.FrontdoorExplicitResourceOrder>> ExplicitResourceOrders { get; private set; } = null!;

        /// <summary>
        /// A friendly name for the Front Door service.
        /// </summary>
        [Output("friendlyName")]
        public Output<string?> FriendlyName { get; private set; } = null!;

        /// <summary>
        /// A `frontend_endpoint` block as defined below.
        /// </summary>
        [Output("frontendEndpoints")]
        public Output<ImmutableArray<Outputs.FrontdoorFrontendEndpoint>> FrontendEndpoints { get; private set; } = null!;

        /// <summary>
        /// The names of the `frontend_endpoint` blocks within this resource to associate with this `routing_rule`.
        /// </summary>
        [Output("frontendEndpointsMap")]
        public Output<ImmutableDictionary<string, string>> FrontendEndpointsMap { get; private set; } = null!;

        /// <summary>
        /// The unique ID of the Front Door which is embedded into the incoming headers `X-Azure-FDID` attribute and maybe used to filter traffic sent by the Front Door to your backend.
        /// </summary>
        [Output("headerFrontdoorId")]
        public Output<string> HeaderFrontdoorId { get; private set; } = null!;

        /// <summary>
        /// Should the Front Door Load Balancer be Enabled? Defaults to `true`.
        /// </summary>
        [Output("loadBalancerEnabled")]
        public Output<bool?> LoadBalancerEnabled { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the Front Door service. Must be globally unique. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the Resource Group in which the Front Door service should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// A `routing_rule` block as defined below.
        /// </summary>
        [Output("routingRules")]
        public Output<ImmutableArray<Outputs.FrontdoorRoutingRule>> RoutingRules { get; private set; } = null!;

        /// <summary>
        /// A map/dictionary of Routing Rule Names (key) to the Routing Rule ID (value)
        /// </summary>
        [Output("routingRulesMap")]
        public Output<ImmutableDictionary<string, string>> RoutingRulesMap { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a Frontdoor resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Frontdoor(string name, FrontdoorArgs args, CustomResourceOptions? options = null)
            : base("azure:frontdoor/frontdoor:Frontdoor", name, args ?? new FrontdoorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Frontdoor(string name, Input<string> id, FrontdoorState? state = null, CustomResourceOptions? options = null)
            : base("azure:frontdoor/frontdoor:Frontdoor", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Frontdoor resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Frontdoor Get(string name, Input<string> id, FrontdoorState? state = null, CustomResourceOptions? options = null)
        {
            return new Frontdoor(name, id, state, options);
        }
    }

    public sealed class FrontdoorArgs : global::Pulumi.ResourceArgs
    {
        [Input("backendPoolHealthProbes", required: true)]
        private InputList<Inputs.FrontdoorBackendPoolHealthProbeArgs>? _backendPoolHealthProbes;

        /// <summary>
        /// A `backend_pool_health_probe` block as defined below.
        /// </summary>
        public InputList<Inputs.FrontdoorBackendPoolHealthProbeArgs> BackendPoolHealthProbes
        {
            get => _backendPoolHealthProbes ?? (_backendPoolHealthProbes = new InputList<Inputs.FrontdoorBackendPoolHealthProbeArgs>());
            set => _backendPoolHealthProbes = value;
        }

        [Input("backendPoolLoadBalancings", required: true)]
        private InputList<Inputs.FrontdoorBackendPoolLoadBalancingArgs>? _backendPoolLoadBalancings;

        /// <summary>
        /// A `backend_pool_load_balancing` block as defined below.
        /// </summary>
        public InputList<Inputs.FrontdoorBackendPoolLoadBalancingArgs> BackendPoolLoadBalancings
        {
            get => _backendPoolLoadBalancings ?? (_backendPoolLoadBalancings = new InputList<Inputs.FrontdoorBackendPoolLoadBalancingArgs>());
            set => _backendPoolLoadBalancings = value;
        }

        [Input("backendPoolSettings")]
        private InputList<Inputs.FrontdoorBackendPoolSettingArgs>? _backendPoolSettings;

        /// <summary>
        /// A `backend_pool_settings` block as defined below.
        /// </summary>
        public InputList<Inputs.FrontdoorBackendPoolSettingArgs> BackendPoolSettings
        {
            get => _backendPoolSettings ?? (_backendPoolSettings = new InputList<Inputs.FrontdoorBackendPoolSettingArgs>());
            set => _backendPoolSettings = value;
        }

        [Input("backendPools", required: true)]
        private InputList<Inputs.FrontdoorBackendPoolArgs>? _backendPools;

        /// <summary>
        /// A `backend_pool` block as defined below.
        /// </summary>
        public InputList<Inputs.FrontdoorBackendPoolArgs> BackendPools
        {
            get => _backendPools ?? (_backendPools = new InputList<Inputs.FrontdoorBackendPoolArgs>());
            set => _backendPools = value;
        }

        /// <summary>
        /// A friendly name for the Front Door service.
        /// </summary>
        [Input("friendlyName")]
        public Input<string>? FriendlyName { get; set; }

        [Input("frontendEndpoints", required: true)]
        private InputList<Inputs.FrontdoorFrontendEndpointArgs>? _frontendEndpoints;

        /// <summary>
        /// A `frontend_endpoint` block as defined below.
        /// </summary>
        public InputList<Inputs.FrontdoorFrontendEndpointArgs> FrontendEndpoints
        {
            get => _frontendEndpoints ?? (_frontendEndpoints = new InputList<Inputs.FrontdoorFrontendEndpointArgs>());
            set => _frontendEndpoints = value;
        }

        /// <summary>
        /// Should the Front Door Load Balancer be Enabled? Defaults to `true`.
        /// </summary>
        [Input("loadBalancerEnabled")]
        public Input<bool>? LoadBalancerEnabled { get; set; }

        /// <summary>
        /// Specifies the name of the Front Door service. Must be globally unique. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the name of the Resource Group in which the Front Door service should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("routingRules", required: true)]
        private InputList<Inputs.FrontdoorRoutingRuleArgs>? _routingRules;

        /// <summary>
        /// A `routing_rule` block as defined below.
        /// </summary>
        public InputList<Inputs.FrontdoorRoutingRuleArgs> RoutingRules
        {
            get => _routingRules ?? (_routingRules = new InputList<Inputs.FrontdoorRoutingRuleArgs>());
            set => _routingRules = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public FrontdoorArgs()
        {
        }
        public static new FrontdoorArgs Empty => new FrontdoorArgs();
    }

    public sealed class FrontdoorState : global::Pulumi.ResourceArgs
    {
        [Input("backendPoolHealthProbes")]
        private InputList<Inputs.FrontdoorBackendPoolHealthProbeGetArgs>? _backendPoolHealthProbes;

        /// <summary>
        /// A `backend_pool_health_probe` block as defined below.
        /// </summary>
        public InputList<Inputs.FrontdoorBackendPoolHealthProbeGetArgs> BackendPoolHealthProbes
        {
            get => _backendPoolHealthProbes ?? (_backendPoolHealthProbes = new InputList<Inputs.FrontdoorBackendPoolHealthProbeGetArgs>());
            set => _backendPoolHealthProbes = value;
        }

        [Input("backendPoolHealthProbesMap")]
        private InputMap<string>? _backendPoolHealthProbesMap;

        /// <summary>
        /// A map/dictionary of Backend Pool Health Probe Names (key) to the Backend Pool Health Probe ID (value)
        /// </summary>
        public InputMap<string> BackendPoolHealthProbesMap
        {
            get => _backendPoolHealthProbesMap ?? (_backendPoolHealthProbesMap = new InputMap<string>());
            set => _backendPoolHealthProbesMap = value;
        }

        [Input("backendPoolLoadBalancingSettingsMap")]
        private InputMap<string>? _backendPoolLoadBalancingSettingsMap;

        /// <summary>
        /// A map/dictionary of Backend Pool Load Balancing Setting Names (key) to the Backend Pool Load Balancing Setting ID (value)
        /// </summary>
        public InputMap<string> BackendPoolLoadBalancingSettingsMap
        {
            get => _backendPoolLoadBalancingSettingsMap ?? (_backendPoolLoadBalancingSettingsMap = new InputMap<string>());
            set => _backendPoolLoadBalancingSettingsMap = value;
        }

        [Input("backendPoolLoadBalancings")]
        private InputList<Inputs.FrontdoorBackendPoolLoadBalancingGetArgs>? _backendPoolLoadBalancings;

        /// <summary>
        /// A `backend_pool_load_balancing` block as defined below.
        /// </summary>
        public InputList<Inputs.FrontdoorBackendPoolLoadBalancingGetArgs> BackendPoolLoadBalancings
        {
            get => _backendPoolLoadBalancings ?? (_backendPoolLoadBalancings = new InputList<Inputs.FrontdoorBackendPoolLoadBalancingGetArgs>());
            set => _backendPoolLoadBalancings = value;
        }

        [Input("backendPoolSettings")]
        private InputList<Inputs.FrontdoorBackendPoolSettingGetArgs>? _backendPoolSettings;

        /// <summary>
        /// A `backend_pool_settings` block as defined below.
        /// </summary>
        public InputList<Inputs.FrontdoorBackendPoolSettingGetArgs> BackendPoolSettings
        {
            get => _backendPoolSettings ?? (_backendPoolSettings = new InputList<Inputs.FrontdoorBackendPoolSettingGetArgs>());
            set => _backendPoolSettings = value;
        }

        [Input("backendPools")]
        private InputList<Inputs.FrontdoorBackendPoolGetArgs>? _backendPools;

        /// <summary>
        /// A `backend_pool` block as defined below.
        /// </summary>
        public InputList<Inputs.FrontdoorBackendPoolGetArgs> BackendPools
        {
            get => _backendPools ?? (_backendPools = new InputList<Inputs.FrontdoorBackendPoolGetArgs>());
            set => _backendPools = value;
        }

        [Input("backendPoolsMap")]
        private InputMap<string>? _backendPoolsMap;

        /// <summary>
        /// A map/dictionary of Backend Pool Names (key) to the Backend Pool ID (value)
        /// </summary>
        public InputMap<string> BackendPoolsMap
        {
            get => _backendPoolsMap ?? (_backendPoolsMap = new InputMap<string>());
            set => _backendPoolsMap = value;
        }

        /// <summary>
        /// The host that each frontendEndpoint must CNAME to.
        /// </summary>
        [Input("cname")]
        public Input<string>? Cname { get; set; }

        [Input("explicitResourceOrders")]
        private InputList<Inputs.FrontdoorExplicitResourceOrderGetArgs>? _explicitResourceOrders;
        public InputList<Inputs.FrontdoorExplicitResourceOrderGetArgs> ExplicitResourceOrders
        {
            get => _explicitResourceOrders ?? (_explicitResourceOrders = new InputList<Inputs.FrontdoorExplicitResourceOrderGetArgs>());
            set => _explicitResourceOrders = value;
        }

        /// <summary>
        /// A friendly name for the Front Door service.
        /// </summary>
        [Input("friendlyName")]
        public Input<string>? FriendlyName { get; set; }

        [Input("frontendEndpoints")]
        private InputList<Inputs.FrontdoorFrontendEndpointGetArgs>? _frontendEndpoints;

        /// <summary>
        /// A `frontend_endpoint` block as defined below.
        /// </summary>
        public InputList<Inputs.FrontdoorFrontendEndpointGetArgs> FrontendEndpoints
        {
            get => _frontendEndpoints ?? (_frontendEndpoints = new InputList<Inputs.FrontdoorFrontendEndpointGetArgs>());
            set => _frontendEndpoints = value;
        }

        [Input("frontendEndpointsMap")]
        private InputMap<string>? _frontendEndpointsMap;

        /// <summary>
        /// The names of the `frontend_endpoint` blocks within this resource to associate with this `routing_rule`.
        /// </summary>
        public InputMap<string> FrontendEndpointsMap
        {
            get => _frontendEndpointsMap ?? (_frontendEndpointsMap = new InputMap<string>());
            set => _frontendEndpointsMap = value;
        }

        /// <summary>
        /// The unique ID of the Front Door which is embedded into the incoming headers `X-Azure-FDID` attribute and maybe used to filter traffic sent by the Front Door to your backend.
        /// </summary>
        [Input("headerFrontdoorId")]
        public Input<string>? HeaderFrontdoorId { get; set; }

        /// <summary>
        /// Should the Front Door Load Balancer be Enabled? Defaults to `true`.
        /// </summary>
        [Input("loadBalancerEnabled")]
        public Input<bool>? LoadBalancerEnabled { get; set; }

        /// <summary>
        /// Specifies the name of the Front Door service. Must be globally unique. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the name of the Resource Group in which the Front Door service should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        [Input("routingRules")]
        private InputList<Inputs.FrontdoorRoutingRuleGetArgs>? _routingRules;

        /// <summary>
        /// A `routing_rule` block as defined below.
        /// </summary>
        public InputList<Inputs.FrontdoorRoutingRuleGetArgs> RoutingRules
        {
            get => _routingRules ?? (_routingRules = new InputList<Inputs.FrontdoorRoutingRuleGetArgs>());
            set => _routingRules = value;
        }

        [Input("routingRulesMap")]
        private InputMap<string>? _routingRulesMap;

        /// <summary>
        /// A map/dictionary of Routing Rule Names (key) to the Routing Rule ID (value)
        /// </summary>
        public InputMap<string> RoutingRulesMap
        {
            get => _routingRulesMap ?? (_routingRulesMap = new InputMap<string>());
            set => _routingRulesMap = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public FrontdoorState()
        {
        }
        public static new FrontdoorState Empty => new FrontdoorState();
    }
}
