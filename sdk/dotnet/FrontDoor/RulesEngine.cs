// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.FrontDoor
{
    /// <summary>
    /// !&gt; **IMPORTANT** This deploys an Azure Front Door (classic) resource which has been deprecated and will receive security updates only. Please migrate your existing Azure Front Door (classic) deployments to the new Azure Front Door (standard/premium) resources. For your convenience, the service team has exposed a `Front Door Classic` to `Front Door Standard/Premium` [migration tool](https://learn.microsoft.com/azure/frontdoor/tier-migration) to allow you to migrate your existing `Front Door Classic` instances to the new `Front Door Standard/Premium` product tiers.
    /// 
    /// Manages an Azure Front Door (classic) Rules Engine configuration and rules.
    /// 
    /// ## Import
    /// 
    /// Azure Front Door Rules Engine's can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:frontdoor/rulesEngine:RulesEngine example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resGroup1/providers/Microsoft.Network/frontdoors/frontdoor1/rulesEngines/rule1
    /// ```
    /// </summary>
    [AzureResourceType("azure:frontdoor/rulesEngine:RulesEngine")]
    public partial class RulesEngine : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether this Rules engine configuration is enabled? Defaults to `true`.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// The name of the Front Door instance. Changing this forces a new resource to be created.
        /// </summary>
        [Output("frontdoorName")]
        public Output<string> FrontdoorName { get; private set; } = null!;

        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the Rules engine configuration. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the resource group. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// A `rule` block as defined below.
        /// </summary>
        [Output("rules")]
        public Output<ImmutableArray<Outputs.RulesEngineRule>> Rules { get; private set; } = null!;


        /// <summary>
        /// Create a RulesEngine resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RulesEngine(string name, RulesEngineArgs args, CustomResourceOptions? options = null)
            : base("azure:frontdoor/rulesEngine:RulesEngine", name, args ?? new RulesEngineArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RulesEngine(string name, Input<string> id, RulesEngineState? state = null, CustomResourceOptions? options = null)
            : base("azure:frontdoor/rulesEngine:RulesEngine", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RulesEngine resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RulesEngine Get(string name, Input<string> id, RulesEngineState? state = null, CustomResourceOptions? options = null)
        {
            return new RulesEngine(name, id, state, options);
        }
    }

    public sealed class RulesEngineArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether this Rules engine configuration is enabled? Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The name of the Front Door instance. Changing this forces a new resource to be created.
        /// </summary>
        [Input("frontdoorName", required: true)]
        public Input<string> FrontdoorName { get; set; } = null!;

        /// <summary>
        /// The name of the Rules engine configuration. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the resource group. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("rules")]
        private InputList<Inputs.RulesEngineRuleArgs>? _rules;

        /// <summary>
        /// A `rule` block as defined below.
        /// </summary>
        public InputList<Inputs.RulesEngineRuleArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.RulesEngineRuleArgs>());
            set => _rules = value;
        }

        public RulesEngineArgs()
        {
        }
        public static new RulesEngineArgs Empty => new RulesEngineArgs();
    }

    public sealed class RulesEngineState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether this Rules engine configuration is enabled? Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The name of the Front Door instance. Changing this forces a new resource to be created.
        /// </summary>
        [Input("frontdoorName")]
        public Input<string>? FrontdoorName { get; set; }

        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the Rules engine configuration. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the resource group. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        [Input("rules")]
        private InputList<Inputs.RulesEngineRuleGetArgs>? _rules;

        /// <summary>
        /// A `rule` block as defined below.
        /// </summary>
        public InputList<Inputs.RulesEngineRuleGetArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.RulesEngineRuleGetArgs>());
            set => _rules = value;
        }

        public RulesEngineState()
        {
        }
        public static new RulesEngineState Empty => new RulesEngineState();
    }
}
