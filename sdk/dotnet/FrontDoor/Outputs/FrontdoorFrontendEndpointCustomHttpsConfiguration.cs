// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.FrontDoor.Outputs
{

    [OutputType]
    public sealed class FrontdoorFrontendEndpointCustomHttpsConfiguration
    {
        /// <summary>
        /// The name of the Key Vault secret representing the full certificate PFX.
        /// </summary>
        public readonly string? AzureKeyVaultCertificateSecretName;
        /// <summary>
        /// The version of the Key Vault secret representing the full certificate PFX.
        /// </summary>
        public readonly string? AzureKeyVaultCertificateSecretVersion;
        /// <summary>
        /// The ID of the Key Vault containing the SSL certificate.
        /// </summary>
        public readonly string? AzureKeyVaultCertificateVaultId;
        /// <summary>
        /// Certificate source to encrypted `HTTPS` traffic with. Allowed values are `FrontDoor` or `AzureKeyVault`. Defaults to `FrontDoor`.
        /// </summary>
        public readonly string? CertificateSource;
        /// <summary>
        /// Minimum client TLS version supported.
        /// </summary>
        public readonly string? MinimumTlsVersion;
        /// <summary>
        /// Provisioning state of the Front Door.
        /// </summary>
        public readonly string? ProvisioningState;
        /// <summary>
        /// Provisioning substate of the Front Door
        /// </summary>
        public readonly string? ProvisioningSubstate;

        [OutputConstructor]
        private FrontdoorFrontendEndpointCustomHttpsConfiguration(
            string? azureKeyVaultCertificateSecretName,

            string? azureKeyVaultCertificateSecretVersion,

            string? azureKeyVaultCertificateVaultId,

            string? certificateSource,

            string? minimumTlsVersion,

            string? provisioningState,

            string? provisioningSubstate)
        {
            AzureKeyVaultCertificateSecretName = azureKeyVaultCertificateSecretName;
            AzureKeyVaultCertificateSecretVersion = azureKeyVaultCertificateSecretVersion;
            AzureKeyVaultCertificateVaultId = azureKeyVaultCertificateVaultId;
            CertificateSource = certificateSource;
            MinimumTlsVersion = minimumTlsVersion;
            ProvisioningState = provisioningState;
            ProvisioningSubstate = provisioningSubstate;
        }
    }
}
