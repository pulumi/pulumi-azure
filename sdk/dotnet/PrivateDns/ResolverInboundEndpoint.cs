// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.PrivateDns
{
    /// <summary>
    /// Manages a Private DNS Resolver Inbound Endpoint.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleVirtualNetwork = new Azure.Network.VirtualNetwork("exampleVirtualNetwork", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         AddressSpaces = new[]
    ///         {
    ///             "10.0.0.0/16",
    ///         },
    ///     });
    /// 
    ///     var test = new Azure.PrivateDns.Resolver("test", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         VirtualNetworkId = exampleVirtualNetwork.Id,
    ///     });
    /// 
    ///     var exampleSubnet = new Azure.Network.Subnet("exampleSubnet", new()
    ///     {
    ///         ResourceGroupName = azurerm_resource_group.Test.Name,
    ///         VirtualNetworkName = azurerm_virtual_network.Test.Name,
    ///         AddressPrefixes = new[]
    ///         {
    ///             "10.0.0.0/28",
    ///         },
    ///         Delegations = new[]
    ///         {
    ///             new Azure.Network.Inputs.SubnetDelegationArgs
    ///             {
    ///                 Name = "Microsoft.Network.dnsResolvers",
    ///                 ServiceDelegation = new Azure.Network.Inputs.SubnetDelegationServiceDelegationArgs
    ///                 {
    ///                     Actions = new[]
    ///                     {
    ///                         "Microsoft.Network/virtualNetworks/subnets/join/action",
    ///                     },
    ///                     Name = "Microsoft.Network/dnsResolvers",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleResolverInboundEndpoint = new Azure.PrivateDns.ResolverInboundEndpoint("exampleResolverInboundEndpoint", new()
    ///     {
    ///         PrivateDnsResolverId = azurerm_private_dns_resolver.Example.Id,
    ///         Location = azurerm_private_dns_resolver.Example.Location,
    ///         IpConfigurations = new[]
    ///         {
    ///             new Azure.PrivateDns.Inputs.ResolverInboundEndpointIpConfigurationArgs
    ///             {
    ///                 PrivateIpAllocationMethod = "Dynamic",
    ///                 SubnetId = exampleSubnet.Id,
    ///             },
    ///         },
    ///         Tags = 
    ///         {
    ///             { "key", "value" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Private DNS Resolver Inbound Endpoint can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:privatedns/resolverInboundEndpoint:ResolverInboundEndpoint example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.Network/dnsResolvers/dnsResolver1/inboundEndpoints/inboundEndpoint1
    /// ```
    /// </summary>
    [AzureResourceType("azure:privatedns/resolverInboundEndpoint:ResolverInboundEndpoint")]
    public partial class ResolverInboundEndpoint : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Can be specified multiple times to define multiple IP configurations. Each `ip_configurations` block as defined below.
        /// </summary>
        [Output("ipConfigurations")]
        public Output<ImmutableArray<Outputs.ResolverInboundEndpointIpConfiguration>> IpConfigurations { get; private set; } = null!;

        /// <summary>
        /// Specifies the Azure Region where the Private DNS Resolver Inbound Endpoint should exist. Changing this forces a new Private DNS Resolver Inbound Endpoint to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Specifies the name which should be used for this Private DNS Resolver Inbound Endpoint. Changing this forces a new Private DNS Resolver Inbound Endpoint to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Specifies the ID of the Private DNS Resolver Inbound Endpoint. Changing this forces a new Private DNS Resolver Inbound Endpoint to be created.
        /// </summary>
        [Output("privateDnsResolverId")]
        public Output<string> PrivateDnsResolverId { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags which should be assigned to the Private DNS Resolver Inbound Endpoint.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a ResolverInboundEndpoint resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ResolverInboundEndpoint(string name, ResolverInboundEndpointArgs args, CustomResourceOptions? options = null)
            : base("azure:privatedns/resolverInboundEndpoint:ResolverInboundEndpoint", name, args ?? new ResolverInboundEndpointArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ResolverInboundEndpoint(string name, Input<string> id, ResolverInboundEndpointState? state = null, CustomResourceOptions? options = null)
            : base("azure:privatedns/resolverInboundEndpoint:ResolverInboundEndpoint", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ResolverInboundEndpoint resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ResolverInboundEndpoint Get(string name, Input<string> id, ResolverInboundEndpointState? state = null, CustomResourceOptions? options = null)
        {
            return new ResolverInboundEndpoint(name, id, state, options);
        }
    }

    public sealed class ResolverInboundEndpointArgs : global::Pulumi.ResourceArgs
    {
        [Input("ipConfigurations", required: true)]
        private InputList<Inputs.ResolverInboundEndpointIpConfigurationArgs>? _ipConfigurations;

        /// <summary>
        /// Can be specified multiple times to define multiple IP configurations. Each `ip_configurations` block as defined below.
        /// </summary>
        public InputList<Inputs.ResolverInboundEndpointIpConfigurationArgs> IpConfigurations
        {
            get => _ipConfigurations ?? (_ipConfigurations = new InputList<Inputs.ResolverInboundEndpointIpConfigurationArgs>());
            set => _ipConfigurations = value;
        }

        /// <summary>
        /// Specifies the Azure Region where the Private DNS Resolver Inbound Endpoint should exist. Changing this forces a new Private DNS Resolver Inbound Endpoint to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Specifies the name which should be used for this Private DNS Resolver Inbound Endpoint. Changing this forces a new Private DNS Resolver Inbound Endpoint to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the ID of the Private DNS Resolver Inbound Endpoint. Changing this forces a new Private DNS Resolver Inbound Endpoint to be created.
        /// </summary>
        [Input("privateDnsResolverId", required: true)]
        public Input<string> PrivateDnsResolverId { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Private DNS Resolver Inbound Endpoint.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public ResolverInboundEndpointArgs()
        {
        }
        public static new ResolverInboundEndpointArgs Empty => new ResolverInboundEndpointArgs();
    }

    public sealed class ResolverInboundEndpointState : global::Pulumi.ResourceArgs
    {
        [Input("ipConfigurations")]
        private InputList<Inputs.ResolverInboundEndpointIpConfigurationGetArgs>? _ipConfigurations;

        /// <summary>
        /// Can be specified multiple times to define multiple IP configurations. Each `ip_configurations` block as defined below.
        /// </summary>
        public InputList<Inputs.ResolverInboundEndpointIpConfigurationGetArgs> IpConfigurations
        {
            get => _ipConfigurations ?? (_ipConfigurations = new InputList<Inputs.ResolverInboundEndpointIpConfigurationGetArgs>());
            set => _ipConfigurations = value;
        }

        /// <summary>
        /// Specifies the Azure Region where the Private DNS Resolver Inbound Endpoint should exist. Changing this forces a new Private DNS Resolver Inbound Endpoint to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Specifies the name which should be used for this Private DNS Resolver Inbound Endpoint. Changing this forces a new Private DNS Resolver Inbound Endpoint to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the ID of the Private DNS Resolver Inbound Endpoint. Changing this forces a new Private DNS Resolver Inbound Endpoint to be created.
        /// </summary>
        [Input("privateDnsResolverId")]
        public Input<string>? PrivateDnsResolverId { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Private DNS Resolver Inbound Endpoint.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public ResolverInboundEndpointState()
        {
        }
        public static new ResolverInboundEndpointState Empty => new ResolverInboundEndpointState();
    }
}
