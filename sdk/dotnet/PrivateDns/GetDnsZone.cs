// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.PrivateDns
{
    public static class GetDnsZone
    {
        /// <summary>
        /// Use this data source to access information about an existing Private DNS Zone.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.PrivateDns.GetDnsZone.Invoke(new()
        ///     {
        ///         Name = "contoso.internal",
        ///         ResourceGroupName = "contoso-dns",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["privateDnsZoneId"] = example.Apply(getDnsZoneResult =&gt; getDnsZoneResult.Id),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetDnsZoneResult> InvokeAsync(GetDnsZoneArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDnsZoneResult>("azure:privatedns/getDnsZone:getDnsZone", args ?? new GetDnsZoneArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Private DNS Zone.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.PrivateDns.GetDnsZone.Invoke(new()
        ///     {
        ///         Name = "contoso.internal",
        ///         ResourceGroupName = "contoso-dns",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["privateDnsZoneId"] = example.Apply(getDnsZoneResult =&gt; getDnsZoneResult.Id),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetDnsZoneResult> Invoke(GetDnsZoneInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDnsZoneResult>("azure:privatedns/getDnsZone:getDnsZone", args ?? new GetDnsZoneInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDnsZoneArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Private DNS Zone.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The Name of the Resource Group where the Private DNS Zone exists.
        /// If the Name of the Resource Group is not provided, the first Private DNS Zone from the list of Private
        /// DNS Zones in your subscription that matches `name` will be returned.
        /// </summary>
        [Input("resourceGroupName")]
        public string? ResourceGroupName { get; set; }

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// A mapping of tags for the zone.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetDnsZoneArgs()
        {
        }
        public static new GetDnsZoneArgs Empty => new GetDnsZoneArgs();
    }

    public sealed class GetDnsZoneInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Private DNS Zone.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The Name of the Resource Group where the Private DNS Zone exists.
        /// If the Name of the Resource Group is not provided, the first Private DNS Zone from the list of Private
        /// DNS Zones in your subscription that matches `name` will be returned.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags for the zone.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetDnsZoneInvokeArgs()
        {
        }
        public static new GetDnsZoneInvokeArgs Empty => new GetDnsZoneInvokeArgs();
    }


    [OutputType]
    public sealed class GetDnsZoneResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Maximum number of recordsets that can be created in this Private Zone.
        /// </summary>
        public readonly int MaxNumberOfRecordSets;
        /// <summary>
        /// Maximum number of Virtual Networks that can be linked to this Private Zone.
        /// </summary>
        public readonly int MaxNumberOfVirtualNetworkLinks;
        /// <summary>
        /// Maximum number of Virtual Networks that can be linked to this Private Zone with registration enabled.
        /// </summary>
        public readonly int MaxNumberOfVirtualNetworkLinksWithRegistration;
        public readonly string Name;
        /// <summary>
        /// The number of recordsets currently in the zone.
        /// </summary>
        public readonly int NumberOfRecordSets;
        public readonly string ResourceGroupName;
        /// <summary>
        /// A mapping of tags for the zone.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;

        [OutputConstructor]
        private GetDnsZoneResult(
            string id,

            int maxNumberOfRecordSets,

            int maxNumberOfVirtualNetworkLinks,

            int maxNumberOfVirtualNetworkLinksWithRegistration,

            string name,

            int numberOfRecordSets,

            string resourceGroupName,

            ImmutableDictionary<string, string>? tags)
        {
            Id = id;
            MaxNumberOfRecordSets = maxNumberOfRecordSets;
            MaxNumberOfVirtualNetworkLinks = maxNumberOfVirtualNetworkLinks;
            MaxNumberOfVirtualNetworkLinksWithRegistration = maxNumberOfVirtualNetworkLinksWithRegistration;
            Name = name;
            NumberOfRecordSets = numberOfRecordSets;
            ResourceGroupName = resourceGroupName;
            Tags = tags;
        }
    }
}
