// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.PrivateDns
{
    public static class GetResolverVirtualNetworkLink
    {
        /// <summary>
        /// Gets information about an existing Private DNS Resolver Virtual Network Link.
        /// </summary>
        public static Task<GetResolverVirtualNetworkLinkResult> InvokeAsync(GetResolverVirtualNetworkLinkArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetResolverVirtualNetworkLinkResult>("azure:privatedns/getResolverVirtualNetworkLink:getResolverVirtualNetworkLink", args ?? new GetResolverVirtualNetworkLinkArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about an existing Private DNS Resolver Virtual Network Link.
        /// </summary>
        public static Output<GetResolverVirtualNetworkLinkResult> Invoke(GetResolverVirtualNetworkLinkInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetResolverVirtualNetworkLinkResult>("azure:privatedns/getResolverVirtualNetworkLink:getResolverVirtualNetworkLink", args ?? new GetResolverVirtualNetworkLinkInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetResolverVirtualNetworkLinkArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the Private DNS Resolver DNS Forwarding Ruleset.
        /// </summary>
        [Input("dnsForwardingRulesetId", required: true)]
        public string DnsForwardingRulesetId { get; set; } = null!;

        /// <summary>
        /// Name of the Private DNS Resolver Virtual Network Link.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetResolverVirtualNetworkLinkArgs()
        {
        }
        public static new GetResolverVirtualNetworkLinkArgs Empty => new GetResolverVirtualNetworkLinkArgs();
    }

    public sealed class GetResolverVirtualNetworkLinkInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the Private DNS Resolver DNS Forwarding Ruleset.
        /// </summary>
        [Input("dnsForwardingRulesetId", required: true)]
        public Input<string> DnsForwardingRulesetId { get; set; } = null!;

        /// <summary>
        /// Name of the Private DNS Resolver Virtual Network Link.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetResolverVirtualNetworkLinkInvokeArgs()
        {
        }
        public static new GetResolverVirtualNetworkLinkInvokeArgs Empty => new GetResolverVirtualNetworkLinkInvokeArgs();
    }


    [OutputType]
    public sealed class GetResolverVirtualNetworkLinkResult
    {
        public readonly string DnsForwardingRulesetId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The metadata attached to the Private DNS Resolver Virtual Network Link.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Metadata;
        public readonly string Name;
        /// <summary>
        /// The ID of the Virtual Network that is linked to the Private DNS Resolver Virtual Network Link.
        /// </summary>
        public readonly string VirtualNetworkId;

        [OutputConstructor]
        private GetResolverVirtualNetworkLinkResult(
            string dnsForwardingRulesetId,

            string id,

            ImmutableDictionary<string, string> metadata,

            string name,

            string virtualNetworkId)
        {
            DnsForwardingRulesetId = dnsForwardingRulesetId;
            Id = id;
            Metadata = metadata;
            Name = name;
            VirtualNetworkId = virtualNetworkId;
        }
    }
}
