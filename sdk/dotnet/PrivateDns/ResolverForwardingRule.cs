// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.PrivateDns
{
    /// <summary>
    /// Manages a Private DNS Resolver Forwarding Rule.
    /// 
    /// ## Import
    /// 
    /// Private DNS Resolver Forwarding Rules can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:privatedns/resolverForwardingRule:ResolverForwardingRule example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.Network/dnsForwardingRulesets/dnsForwardingRuleset1/forwardingRules/forwardingRule1
    /// ```
    /// </summary>
    [AzureResourceType("azure:privatedns/resolverForwardingRule:ResolverForwardingRule")]
    public partial class ResolverForwardingRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies the ID of the Private DNS Resolver Forwarding Ruleset. Changing this forces a new Private DNS Resolver Forwarding Rule to be created.
        /// </summary>
        [Output("dnsForwardingRulesetId")]
        public Output<string> DnsForwardingRulesetId { get; private set; } = null!;

        /// <summary>
        /// Specifies the domain name for the Private DNS Resolver Forwarding Rule. Changing this forces a new Private DNS Resolver Forwarding Rule to be created.
        /// </summary>
        [Output("domainName")]
        public Output<string> DomainName { get; private set; } = null!;

        /// <summary>
        /// Specifies the state of the Private DNS Resolver Forwarding Rule. Defaults to `true`.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// Metadata attached to the Private DNS Resolver Forwarding Rule.
        /// </summary>
        [Output("metadata")]
        public Output<ImmutableDictionary<string, string>?> Metadata { get; private set; } = null!;

        /// <summary>
        /// Specifies the name which should be used for this Private DNS Resolver Forwarding Rule. Changing this forces a new Private DNS Resolver Forwarding Rule to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Can be specified multiple times to define multiple target DNS servers. Each `target_dns_servers` block as defined below.
        /// </summary>
        [Output("targetDnsServers")]
        public Output<ImmutableArray<Outputs.ResolverForwardingRuleTargetDnsServer>> TargetDnsServers { get; private set; } = null!;


        /// <summary>
        /// Create a ResolverForwardingRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ResolverForwardingRule(string name, ResolverForwardingRuleArgs args, CustomResourceOptions? options = null)
            : base("azure:privatedns/resolverForwardingRule:ResolverForwardingRule", name, args ?? new ResolverForwardingRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ResolverForwardingRule(string name, Input<string> id, ResolverForwardingRuleState? state = null, CustomResourceOptions? options = null)
            : base("azure:privatedns/resolverForwardingRule:ResolverForwardingRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ResolverForwardingRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ResolverForwardingRule Get(string name, Input<string> id, ResolverForwardingRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new ResolverForwardingRule(name, id, state, options);
        }
    }

    public sealed class ResolverForwardingRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the ID of the Private DNS Resolver Forwarding Ruleset. Changing this forces a new Private DNS Resolver Forwarding Rule to be created.
        /// </summary>
        [Input("dnsForwardingRulesetId", required: true)]
        public Input<string> DnsForwardingRulesetId { get; set; } = null!;

        /// <summary>
        /// Specifies the domain name for the Private DNS Resolver Forwarding Rule. Changing this forces a new Private DNS Resolver Forwarding Rule to be created.
        /// </summary>
        [Input("domainName", required: true)]
        public Input<string> DomainName { get; set; } = null!;

        /// <summary>
        /// Specifies the state of the Private DNS Resolver Forwarding Rule. Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// Metadata attached to the Private DNS Resolver Forwarding Rule.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// Specifies the name which should be used for this Private DNS Resolver Forwarding Rule. Changing this forces a new Private DNS Resolver Forwarding Rule to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("targetDnsServers", required: true)]
        private InputList<Inputs.ResolverForwardingRuleTargetDnsServerArgs>? _targetDnsServers;

        /// <summary>
        /// Can be specified multiple times to define multiple target DNS servers. Each `target_dns_servers` block as defined below.
        /// </summary>
        public InputList<Inputs.ResolverForwardingRuleTargetDnsServerArgs> TargetDnsServers
        {
            get => _targetDnsServers ?? (_targetDnsServers = new InputList<Inputs.ResolverForwardingRuleTargetDnsServerArgs>());
            set => _targetDnsServers = value;
        }

        public ResolverForwardingRuleArgs()
        {
        }
        public static new ResolverForwardingRuleArgs Empty => new ResolverForwardingRuleArgs();
    }

    public sealed class ResolverForwardingRuleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the ID of the Private DNS Resolver Forwarding Ruleset. Changing this forces a new Private DNS Resolver Forwarding Rule to be created.
        /// </summary>
        [Input("dnsForwardingRulesetId")]
        public Input<string>? DnsForwardingRulesetId { get; set; }

        /// <summary>
        /// Specifies the domain name for the Private DNS Resolver Forwarding Rule. Changing this forces a new Private DNS Resolver Forwarding Rule to be created.
        /// </summary>
        [Input("domainName")]
        public Input<string>? DomainName { get; set; }

        /// <summary>
        /// Specifies the state of the Private DNS Resolver Forwarding Rule. Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// Metadata attached to the Private DNS Resolver Forwarding Rule.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// Specifies the name which should be used for this Private DNS Resolver Forwarding Rule. Changing this forces a new Private DNS Resolver Forwarding Rule to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("targetDnsServers")]
        private InputList<Inputs.ResolverForwardingRuleTargetDnsServerGetArgs>? _targetDnsServers;

        /// <summary>
        /// Can be specified multiple times to define multiple target DNS servers. Each `target_dns_servers` block as defined below.
        /// </summary>
        public InputList<Inputs.ResolverForwardingRuleTargetDnsServerGetArgs> TargetDnsServers
        {
            get => _targetDnsServers ?? (_targetDnsServers = new InputList<Inputs.ResolverForwardingRuleTargetDnsServerGetArgs>());
            set => _targetDnsServers = value;
        }

        public ResolverForwardingRuleState()
        {
        }
        public static new ResolverForwardingRuleState Empty => new ResolverForwardingRuleState();
    }
}
