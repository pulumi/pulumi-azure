// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Batch
{
    /// <summary>
    /// Manages an Azure Batch pool.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/batch_pool.html.markdown.
    /// </summary>
    public partial class Pool : Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies the name of the Batch account in which the pool will be created. Changing this forces a new resource to be created.
        /// </summary>
        [Output("accountName")]
        public Output<string> AccountName { get; private set; } = null!;

        /// <summary>
        /// A `auto_scale` block that describes the scale settings when using auto scale.
        /// </summary>
        [Output("autoScale")]
        public Output<Outputs.PoolAutoScale?> AutoScale { get; private set; } = null!;

        /// <summary>
        /// One or more `certificate` blocks that describe the certificates to be installed on each compute node in the pool.
        /// </summary>
        [Output("certificates")]
        public Output<ImmutableArray<Outputs.PoolCertificates>> Certificates { get; private set; } = null!;

        /// <summary>
        /// The container configuration used in the pool's VMs.
        /// </summary>
        [Output("containerConfiguration")]
        public Output<Outputs.PoolContainerConfiguration?> ContainerConfiguration { get; private set; } = null!;

        /// <summary>
        /// Specifies the display name of the Batch pool.
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// A `fixed_scale` block that describes the scale settings when using fixed scale.
        /// </summary>
        [Output("fixedScale")]
        public Output<Outputs.PoolFixedScale?> FixedScale { get; private set; } = null!;

        /// <summary>
        /// Specifies the maximum number of tasks that can run concurrently on a single compute node in the pool. Defaults to `1`. Changing this forces a new resource to be created.
        /// </summary>
        [Output("maxTasksPerNode")]
        public Output<int?> MaxTasksPerNode { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the Batch pool. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Specifies the Sku of the node agents that will be created in the Batch pool.
        /// </summary>
        [Output("nodeAgentSkuId")]
        public Output<string> NodeAgentSkuId { get; private set; } = null!;

        /// <summary>
        /// The name of the resource group in which to create the Batch pool. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// A `start_task` block that describes the start task settings for the Batch pool.
        /// </summary>
        [Output("startTask")]
        public Output<Outputs.PoolStartTask?> StartTask { get; private set; } = null!;

        [Output("stopPendingResizeOperation")]
        public Output<bool?> StopPendingResizeOperation { get; private set; } = null!;

        /// <summary>
        /// A `storage_image_reference` for the virtual machines that will compose the Batch pool.
        /// </summary>
        [Output("storageImageReference")]
        public Output<Outputs.PoolStorageImageReference> StorageImageReference { get; private set; } = null!;

        /// <summary>
        /// Specifies the size of the VM created in the Batch pool.
        /// </summary>
        [Output("vmSize")]
        public Output<string> VmSize { get; private set; } = null!;


        /// <summary>
        /// Create a Pool resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Pool(string name, PoolArgs args, CustomResourceOptions? options = null)
            : base("azure:batch/pool:Pool", name, args, MakeResourceOptions(options, ""))
        {
        }

        private Pool(string name, Input<string> id, PoolState? state = null, CustomResourceOptions? options = null)
            : base("azure:batch/pool:Pool", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Pool resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Pool Get(string name, Input<string> id, PoolState? state = null, CustomResourceOptions? options = null)
        {
            return new Pool(name, id, state, options);
        }
    }

    public sealed class PoolArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the name of the Batch account in which the pool will be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// A `auto_scale` block that describes the scale settings when using auto scale.
        /// </summary>
        [Input("autoScale")]
        public Input<Inputs.PoolAutoScaleArgs>? AutoScale { get; set; }

        [Input("certificates")]
        private InputList<Inputs.PoolCertificatesArgs>? _certificates;

        /// <summary>
        /// One or more `certificate` blocks that describe the certificates to be installed on each compute node in the pool.
        /// </summary>
        public InputList<Inputs.PoolCertificatesArgs> Certificates
        {
            get => _certificates ?? (_certificates = new InputList<Inputs.PoolCertificatesArgs>());
            set => _certificates = value;
        }

        /// <summary>
        /// The container configuration used in the pool's VMs.
        /// </summary>
        [Input("containerConfiguration")]
        public Input<Inputs.PoolContainerConfigurationArgs>? ContainerConfiguration { get; set; }

        /// <summary>
        /// Specifies the display name of the Batch pool.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// A `fixed_scale` block that describes the scale settings when using fixed scale.
        /// </summary>
        [Input("fixedScale")]
        public Input<Inputs.PoolFixedScaleArgs>? FixedScale { get; set; }

        /// <summary>
        /// Specifies the maximum number of tasks that can run concurrently on a single compute node in the pool. Defaults to `1`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("maxTasksPerNode")]
        public Input<int>? MaxTasksPerNode { get; set; }

        /// <summary>
        /// Specifies the name of the Batch pool. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the Sku of the node agents that will be created in the Batch pool.
        /// </summary>
        [Input("nodeAgentSkuId", required: true)]
        public Input<string> NodeAgentSkuId { get; set; } = null!;

        /// <summary>
        /// The name of the resource group in which to create the Batch pool. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// A `start_task` block that describes the start task settings for the Batch pool.
        /// </summary>
        [Input("startTask")]
        public Input<Inputs.PoolStartTaskArgs>? StartTask { get; set; }

        [Input("stopPendingResizeOperation")]
        public Input<bool>? StopPendingResizeOperation { get; set; }

        /// <summary>
        /// A `storage_image_reference` for the virtual machines that will compose the Batch pool.
        /// </summary>
        [Input("storageImageReference", required: true)]
        public Input<Inputs.PoolStorageImageReferenceArgs> StorageImageReference { get; set; } = null!;

        /// <summary>
        /// Specifies the size of the VM created in the Batch pool.
        /// </summary>
        [Input("vmSize", required: true)]
        public Input<string> VmSize { get; set; } = null!;

        public PoolArgs()
        {
        }
    }

    public sealed class PoolState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the name of the Batch account in which the pool will be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("accountName")]
        public Input<string>? AccountName { get; set; }

        /// <summary>
        /// A `auto_scale` block that describes the scale settings when using auto scale.
        /// </summary>
        [Input("autoScale")]
        public Input<Inputs.PoolAutoScaleGetArgs>? AutoScale { get; set; }

        [Input("certificates")]
        private InputList<Inputs.PoolCertificatesGetArgs>? _certificates;

        /// <summary>
        /// One or more `certificate` blocks that describe the certificates to be installed on each compute node in the pool.
        /// </summary>
        public InputList<Inputs.PoolCertificatesGetArgs> Certificates
        {
            get => _certificates ?? (_certificates = new InputList<Inputs.PoolCertificatesGetArgs>());
            set => _certificates = value;
        }

        /// <summary>
        /// The container configuration used in the pool's VMs.
        /// </summary>
        [Input("containerConfiguration")]
        public Input<Inputs.PoolContainerConfigurationGetArgs>? ContainerConfiguration { get; set; }

        /// <summary>
        /// Specifies the display name of the Batch pool.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// A `fixed_scale` block that describes the scale settings when using fixed scale.
        /// </summary>
        [Input("fixedScale")]
        public Input<Inputs.PoolFixedScaleGetArgs>? FixedScale { get; set; }

        /// <summary>
        /// Specifies the maximum number of tasks that can run concurrently on a single compute node in the pool. Defaults to `1`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("maxTasksPerNode")]
        public Input<int>? MaxTasksPerNode { get; set; }

        /// <summary>
        /// Specifies the name of the Batch pool. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the Sku of the node agents that will be created in the Batch pool.
        /// </summary>
        [Input("nodeAgentSkuId")]
        public Input<string>? NodeAgentSkuId { get; set; }

        /// <summary>
        /// The name of the resource group in which to create the Batch pool. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// A `start_task` block that describes the start task settings for the Batch pool.
        /// </summary>
        [Input("startTask")]
        public Input<Inputs.PoolStartTaskGetArgs>? StartTask { get; set; }

        [Input("stopPendingResizeOperation")]
        public Input<bool>? StopPendingResizeOperation { get; set; }

        /// <summary>
        /// A `storage_image_reference` for the virtual machines that will compose the Batch pool.
        /// </summary>
        [Input("storageImageReference")]
        public Input<Inputs.PoolStorageImageReferenceGetArgs>? StorageImageReference { get; set; }

        /// <summary>
        /// Specifies the size of the VM created in the Batch pool.
        /// </summary>
        [Input("vmSize")]
        public Input<string>? VmSize { get; set; }

        public PoolState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class PoolAutoScaleArgs : Pulumi.ResourceArgs
    {
        [Input("evaluationInterval")]
        public Input<string>? EvaluationInterval { get; set; }

        [Input("formula", required: true)]
        public Input<string> Formula { get; set; } = null!;

        public PoolAutoScaleArgs()
        {
        }
    }

    public sealed class PoolAutoScaleGetArgs : Pulumi.ResourceArgs
    {
        [Input("evaluationInterval")]
        public Input<string>? EvaluationInterval { get; set; }

        [Input("formula", required: true)]
        public Input<string> Formula { get; set; } = null!;

        public PoolAutoScaleGetArgs()
        {
        }
    }

    public sealed class PoolCertificatesArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Batch pool ID.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        [Input("storeLocation", required: true)]
        public Input<string> StoreLocation { get; set; } = null!;

        [Input("storeName")]
        public Input<string>? StoreName { get; set; }

        [Input("visibilities")]
        private InputList<string>? _visibilities;
        public InputList<string> Visibilities
        {
            get => _visibilities ?? (_visibilities = new InputList<string>());
            set => _visibilities = value;
        }

        public PoolCertificatesArgs()
        {
        }
    }

    public sealed class PoolCertificatesGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Batch pool ID.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        [Input("storeLocation", required: true)]
        public Input<string> StoreLocation { get; set; } = null!;

        [Input("storeName")]
        public Input<string>? StoreName { get; set; }

        [Input("visibilities")]
        private InputList<string>? _visibilities;
        public InputList<string> Visibilities
        {
            get => _visibilities ?? (_visibilities = new InputList<string>());
            set => _visibilities = value;
        }

        public PoolCertificatesGetArgs()
        {
        }
    }

    public sealed class PoolContainerConfigurationArgs : Pulumi.ResourceArgs
    {
        [Input("containerRegistries")]
        private InputList<PoolContainerConfigurationContainerRegistriesArgs>? _containerRegistries;
        public InputList<PoolContainerConfigurationContainerRegistriesArgs> ContainerRegistries
        {
            get => _containerRegistries ?? (_containerRegistries = new InputList<PoolContainerConfigurationContainerRegistriesArgs>());
            set => _containerRegistries = value;
        }

        [Input("type")]
        public Input<string>? Type { get; set; }

        public PoolContainerConfigurationArgs()
        {
        }
    }

    public sealed class PoolContainerConfigurationContainerRegistriesArgs : Pulumi.ResourceArgs
    {
        [Input("password", required: true)]
        public Input<string> Password { get; set; } = null!;

        [Input("registryServer", required: true)]
        public Input<string> RegistryServer { get; set; } = null!;

        [Input("userName", required: true)]
        public Input<string> UserName { get; set; } = null!;

        public PoolContainerConfigurationContainerRegistriesArgs()
        {
        }
    }

    public sealed class PoolContainerConfigurationContainerRegistriesGetArgs : Pulumi.ResourceArgs
    {
        [Input("password", required: true)]
        public Input<string> Password { get; set; } = null!;

        [Input("registryServer", required: true)]
        public Input<string> RegistryServer { get; set; } = null!;

        [Input("userName", required: true)]
        public Input<string> UserName { get; set; } = null!;

        public PoolContainerConfigurationContainerRegistriesGetArgs()
        {
        }
    }

    public sealed class PoolContainerConfigurationGetArgs : Pulumi.ResourceArgs
    {
        [Input("containerRegistries")]
        private InputList<PoolContainerConfigurationContainerRegistriesGetArgs>? _containerRegistries;
        public InputList<PoolContainerConfigurationContainerRegistriesGetArgs> ContainerRegistries
        {
            get => _containerRegistries ?? (_containerRegistries = new InputList<PoolContainerConfigurationContainerRegistriesGetArgs>());
            set => _containerRegistries = value;
        }

        [Input("type")]
        public Input<string>? Type { get; set; }

        public PoolContainerConfigurationGetArgs()
        {
        }
    }

    public sealed class PoolFixedScaleArgs : Pulumi.ResourceArgs
    {
        [Input("resizeTimeout")]
        public Input<string>? ResizeTimeout { get; set; }

        [Input("targetDedicatedNodes")]
        public Input<int>? TargetDedicatedNodes { get; set; }

        [Input("targetLowPriorityNodes")]
        public Input<int>? TargetLowPriorityNodes { get; set; }

        public PoolFixedScaleArgs()
        {
        }
    }

    public sealed class PoolFixedScaleGetArgs : Pulumi.ResourceArgs
    {
        [Input("resizeTimeout")]
        public Input<string>? ResizeTimeout { get; set; }

        [Input("targetDedicatedNodes")]
        public Input<int>? TargetDedicatedNodes { get; set; }

        [Input("targetLowPriorityNodes")]
        public Input<int>? TargetLowPriorityNodes { get; set; }

        public PoolFixedScaleGetArgs()
        {
        }
    }

    public sealed class PoolStartTaskArgs : Pulumi.ResourceArgs
    {
        [Input("commandLine", required: true)]
        public Input<string> CommandLine { get; set; } = null!;

        [Input("environment")]
        private InputMap<string>? _environment;
        public InputMap<string> Environment
        {
            get => _environment ?? (_environment = new InputMap<string>());
            set => _environment = value;
        }

        [Input("maxTaskRetryCount")]
        public Input<int>? MaxTaskRetryCount { get; set; }

        [Input("resourceFiles")]
        private InputList<PoolStartTaskResourceFilesArgs>? _resourceFiles;
        public InputList<PoolStartTaskResourceFilesArgs> ResourceFiles
        {
            get => _resourceFiles ?? (_resourceFiles = new InputList<PoolStartTaskResourceFilesArgs>());
            set => _resourceFiles = value;
        }

        [Input("userIdentity", required: true)]
        public Input<PoolStartTaskUserIdentityArgs> UserIdentity { get; set; } = null!;

        [Input("waitForSuccess")]
        public Input<bool>? WaitForSuccess { get; set; }

        public PoolStartTaskArgs()
        {
        }
    }

    public sealed class PoolStartTaskGetArgs : Pulumi.ResourceArgs
    {
        [Input("commandLine", required: true)]
        public Input<string> CommandLine { get; set; } = null!;

        [Input("environment")]
        private InputMap<string>? _environment;
        public InputMap<string> Environment
        {
            get => _environment ?? (_environment = new InputMap<string>());
            set => _environment = value;
        }

        [Input("maxTaskRetryCount")]
        public Input<int>? MaxTaskRetryCount { get; set; }

        [Input("resourceFiles")]
        private InputList<PoolStartTaskResourceFilesGetArgs>? _resourceFiles;
        public InputList<PoolStartTaskResourceFilesGetArgs> ResourceFiles
        {
            get => _resourceFiles ?? (_resourceFiles = new InputList<PoolStartTaskResourceFilesGetArgs>());
            set => _resourceFiles = value;
        }

        [Input("userIdentity", required: true)]
        public Input<PoolStartTaskUserIdentityGetArgs> UserIdentity { get; set; } = null!;

        [Input("waitForSuccess")]
        public Input<bool>? WaitForSuccess { get; set; }

        public PoolStartTaskGetArgs()
        {
        }
    }

    public sealed class PoolStartTaskResourceFilesArgs : Pulumi.ResourceArgs
    {
        [Input("autoStorageContainerName")]
        public Input<string>? AutoStorageContainerName { get; set; }

        [Input("blobPrefix")]
        public Input<string>? BlobPrefix { get; set; }

        [Input("fileMode")]
        public Input<string>? FileMode { get; set; }

        [Input("filePath")]
        public Input<string>? FilePath { get; set; }

        [Input("httpUrl")]
        public Input<string>? HttpUrl { get; set; }

        [Input("storageContainerUrl")]
        public Input<string>? StorageContainerUrl { get; set; }

        public PoolStartTaskResourceFilesArgs()
        {
        }
    }

    public sealed class PoolStartTaskResourceFilesGetArgs : Pulumi.ResourceArgs
    {
        [Input("autoStorageContainerName")]
        public Input<string>? AutoStorageContainerName { get; set; }

        [Input("blobPrefix")]
        public Input<string>? BlobPrefix { get; set; }

        [Input("fileMode")]
        public Input<string>? FileMode { get; set; }

        [Input("filePath")]
        public Input<string>? FilePath { get; set; }

        [Input("httpUrl")]
        public Input<string>? HttpUrl { get; set; }

        [Input("storageContainerUrl")]
        public Input<string>? StorageContainerUrl { get; set; }

        public PoolStartTaskResourceFilesGetArgs()
        {
        }
    }

    public sealed class PoolStartTaskUserIdentityArgs : Pulumi.ResourceArgs
    {
        [Input("autoUser")]
        public Input<PoolStartTaskUserIdentityAutoUserArgs>? AutoUser { get; set; }

        [Input("userName")]
        public Input<string>? UserName { get; set; }

        public PoolStartTaskUserIdentityArgs()
        {
        }
    }

    public sealed class PoolStartTaskUserIdentityAutoUserArgs : Pulumi.ResourceArgs
    {
        [Input("elevationLevel")]
        public Input<string>? ElevationLevel { get; set; }

        [Input("scope")]
        public Input<string>? Scope { get; set; }

        public PoolStartTaskUserIdentityAutoUserArgs()
        {
        }
    }

    public sealed class PoolStartTaskUserIdentityAutoUserGetArgs : Pulumi.ResourceArgs
    {
        [Input("elevationLevel")]
        public Input<string>? ElevationLevel { get; set; }

        [Input("scope")]
        public Input<string>? Scope { get; set; }

        public PoolStartTaskUserIdentityAutoUserGetArgs()
        {
        }
    }

    public sealed class PoolStartTaskUserIdentityGetArgs : Pulumi.ResourceArgs
    {
        [Input("autoUser")]
        public Input<PoolStartTaskUserIdentityAutoUserGetArgs>? AutoUser { get; set; }

        [Input("userName")]
        public Input<string>? UserName { get; set; }

        public PoolStartTaskUserIdentityGetArgs()
        {
        }
    }

    public sealed class PoolStorageImageReferenceArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Batch pool ID.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("offer")]
        public Input<string>? Offer { get; set; }

        [Input("publisher")]
        public Input<string>? Publisher { get; set; }

        [Input("sku")]
        public Input<string>? Sku { get; set; }

        [Input("version")]
        public Input<string>? Version { get; set; }

        public PoolStorageImageReferenceArgs()
        {
        }
    }

    public sealed class PoolStorageImageReferenceGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Batch pool ID.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("offer")]
        public Input<string>? Offer { get; set; }

        [Input("publisher")]
        public Input<string>? Publisher { get; set; }

        [Input("sku")]
        public Input<string>? Sku { get; set; }

        [Input("version")]
        public Input<string>? Version { get; set; }

        public PoolStorageImageReferenceGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class PoolAutoScale
    {
        public readonly string? EvaluationInterval;
        public readonly string Formula;

        [OutputConstructor]
        private PoolAutoScale(
            string? evaluationInterval,
            string formula)
        {
            EvaluationInterval = evaluationInterval;
            Formula = formula;
        }
    }

    [OutputType]
    public sealed class PoolCertificates
    {
        /// <summary>
        /// The Batch pool ID.
        /// </summary>
        public readonly string Id;
        public readonly string StoreLocation;
        public readonly string? StoreName;
        public readonly ImmutableArray<string> Visibilities;

        [OutputConstructor]
        private PoolCertificates(
            string id,
            string storeLocation,
            string? storeName,
            ImmutableArray<string> visibilities)
        {
            Id = id;
            StoreLocation = storeLocation;
            StoreName = storeName;
            Visibilities = visibilities;
        }
    }

    [OutputType]
    public sealed class PoolContainerConfiguration
    {
        public readonly ImmutableArray<PoolContainerConfigurationContainerRegistries> ContainerRegistries;
        public readonly string? Type;

        [OutputConstructor]
        private PoolContainerConfiguration(
            ImmutableArray<PoolContainerConfigurationContainerRegistries> containerRegistries,
            string? type)
        {
            ContainerRegistries = containerRegistries;
            Type = type;
        }
    }

    [OutputType]
    public sealed class PoolContainerConfigurationContainerRegistries
    {
        public readonly string Password;
        public readonly string RegistryServer;
        public readonly string UserName;

        [OutputConstructor]
        private PoolContainerConfigurationContainerRegistries(
            string password,
            string registryServer,
            string userName)
        {
            Password = password;
            RegistryServer = registryServer;
            UserName = userName;
        }
    }

    [OutputType]
    public sealed class PoolFixedScale
    {
        public readonly string? ResizeTimeout;
        public readonly int? TargetDedicatedNodes;
        public readonly int? TargetLowPriorityNodes;

        [OutputConstructor]
        private PoolFixedScale(
            string? resizeTimeout,
            int? targetDedicatedNodes,
            int? targetLowPriorityNodes)
        {
            ResizeTimeout = resizeTimeout;
            TargetDedicatedNodes = targetDedicatedNodes;
            TargetLowPriorityNodes = targetLowPriorityNodes;
        }
    }

    [OutputType]
    public sealed class PoolStartTask
    {
        public readonly string CommandLine;
        public readonly ImmutableDictionary<string, string>? Environment;
        public readonly int? MaxTaskRetryCount;
        public readonly ImmutableArray<PoolStartTaskResourceFiles> ResourceFiles;
        public readonly PoolStartTaskUserIdentity UserIdentity;
        public readonly bool? WaitForSuccess;

        [OutputConstructor]
        private PoolStartTask(
            string commandLine,
            ImmutableDictionary<string, string>? environment,
            int? maxTaskRetryCount,
            ImmutableArray<PoolStartTaskResourceFiles> resourceFiles,
            PoolStartTaskUserIdentity userIdentity,
            bool? waitForSuccess)
        {
            CommandLine = commandLine;
            Environment = environment;
            MaxTaskRetryCount = maxTaskRetryCount;
            ResourceFiles = resourceFiles;
            UserIdentity = userIdentity;
            WaitForSuccess = waitForSuccess;
        }
    }

    [OutputType]
    public sealed class PoolStartTaskResourceFiles
    {
        public readonly string? AutoStorageContainerName;
        public readonly string? BlobPrefix;
        public readonly string? FileMode;
        public readonly string? FilePath;
        public readonly string? HttpUrl;
        public readonly string? StorageContainerUrl;

        [OutputConstructor]
        private PoolStartTaskResourceFiles(
            string? autoStorageContainerName,
            string? blobPrefix,
            string? fileMode,
            string? filePath,
            string? httpUrl,
            string? storageContainerUrl)
        {
            AutoStorageContainerName = autoStorageContainerName;
            BlobPrefix = blobPrefix;
            FileMode = fileMode;
            FilePath = filePath;
            HttpUrl = httpUrl;
            StorageContainerUrl = storageContainerUrl;
        }
    }

    [OutputType]
    public sealed class PoolStartTaskUserIdentity
    {
        public readonly PoolStartTaskUserIdentityAutoUser? AutoUser;
        public readonly string? UserName;

        [OutputConstructor]
        private PoolStartTaskUserIdentity(
            PoolStartTaskUserIdentityAutoUser? autoUser,
            string? userName)
        {
            AutoUser = autoUser;
            UserName = userName;
        }
    }

    [OutputType]
    public sealed class PoolStartTaskUserIdentityAutoUser
    {
        public readonly string? ElevationLevel;
        public readonly string? Scope;

        [OutputConstructor]
        private PoolStartTaskUserIdentityAutoUser(
            string? elevationLevel,
            string? scope)
        {
            ElevationLevel = elevationLevel;
            Scope = scope;
        }
    }

    [OutputType]
    public sealed class PoolStorageImageReference
    {
        /// <summary>
        /// The Batch pool ID.
        /// </summary>
        public readonly string? Id;
        public readonly string? Offer;
        public readonly string? Publisher;
        public readonly string? Sku;
        public readonly string? Version;

        [OutputConstructor]
        private PoolStorageImageReference(
            string? id,
            string? offer,
            string? publisher,
            string? sku,
            string? version)
        {
            Id = id;
            Offer = offer;
            Publisher = publisher;
            Sku = sku;
            Version = version;
        }
    }
    }
}
