// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Batch
{
    /// <summary>
    /// Manages an Azure Batch pool.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System;
    /// using System.Collections.Generic;
    /// using System.IO;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// 	
    /// string ReadFileBase64(string path) 
    /// {
    ///     return Convert.ToBase64String(Encoding.UTF8.GetBytes(File.ReadAllText(path)));
    /// }
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleAccount = new Azure.Storage.Account("exampleAccount", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         AccountTier = "Standard",
    ///         AccountReplicationType = "LRS",
    ///     });
    /// 
    ///     var exampleBatch_accountAccount = new Azure.Batch.Account("exampleBatch/accountAccount", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         PoolAllocationMode = "BatchService",
    ///         StorageAccountId = exampleAccount.Id,
    ///         StorageAccountAuthenticationMode = "StorageKeys",
    ///         Tags = 
    ///         {
    ///             { "env", "test" },
    ///         },
    ///     });
    /// 
    ///     var exampleCertificate = new Azure.Batch.Certificate("exampleCertificate", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         AccountName = exampleBatch / accountAccount.Name,
    ///         BatchCertificate = ReadFileBase64("certificate.cer"),
    ///         Format = "Cer",
    ///         Thumbprint = "312d31a79fa0cef49c00f769afc2b73e9f4edf34",
    ///         ThumbprintAlgorithm = "SHA1",
    ///     });
    /// 
    ///     var examplePool = new Azure.Batch.Pool("examplePool", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         AccountName = exampleBatch / accountAccount.Name,
    ///         DisplayName = "Test Acc Pool Auto",
    ///         VmSize = "Standard_A1",
    ///         NodeAgentSkuId = "batch.node.ubuntu 20.04",
    ///         AutoScale = new Azure.Batch.Inputs.PoolAutoScaleArgs
    ///         {
    ///             EvaluationInterval = "PT15M",
    ///             Formula = @"      startingNumberOfVMs = 1;
    ///       maxNumberofVMs = 25;
    ///       pendingTaskSamplePercent = $PendingTasks.GetSamplePercent(180 * TimeInterval_Second);
    ///       pendingTaskSamples = pendingTaskSamplePercent &lt; 70 ? startingNumberOfVMs : avg($PendingTasks.GetSample(180 *   TimeInterval_Second));
    ///       $TargetDedicatedNodes=min(maxNumberofVMs, pendingTaskSamples);
    /// ",
    ///         },
    ///         StorageImageReference = new Azure.Batch.Inputs.PoolStorageImageReferenceArgs
    ///         {
    ///             Publisher = "microsoft-azure-batch",
    ///             Offer = "ubuntu-server-container",
    ///             Sku = "20-04-lts",
    ///             Version = "latest",
    ///         },
    ///         ContainerConfiguration = new Azure.Batch.Inputs.PoolContainerConfigurationArgs
    ///         {
    ///             Type = "DockerCompatible",
    ///             ContainerRegistries = new[]
    ///             {
    ///                 new Azure.Batch.Inputs.PoolContainerConfigurationContainerRegistryArgs
    ///                 {
    ///                     RegistryServer = "docker.io",
    ///                     UserName = "login",
    ///                     Password = "apassword",
    ///                 },
    ///             },
    ///         },
    ///         StartTask = new Azure.Batch.Inputs.PoolStartTaskArgs
    ///         {
    ///             CommandLine = "echo 'Hello World from $env'",
    ///             TaskRetryMaximum = 1,
    ///             WaitForSuccess = true,
    ///             CommonEnvironmentProperties = 
    ///             {
    ///                 { "env", "TEST" },
    ///             },
    ///             UserIdentity = new Azure.Batch.Inputs.PoolStartTaskUserIdentityArgs
    ///             {
    ///                 AutoUser = new Azure.Batch.Inputs.PoolStartTaskUserIdentityAutoUserArgs
    ///                 {
    ///                     ElevationLevel = "NonAdmin",
    ///                     Scope = "Task",
    ///                 },
    ///             },
    ///         },
    ///         Certificates = new[]
    ///         {
    ///             new Azure.Batch.Inputs.PoolCertificateArgs
    ///             {
    ///                 Id = exampleCertificate.Id,
    ///                 StoreLocation = "CurrentUser",
    ///                 Visibilities = new[]
    ///                 {
    ///                     "StartTask",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Batch Pools can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:batch/pool:Pool example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup1/providers/Microsoft.Batch/batchAccounts/myBatchAccount1/pools/myBatchPool1
    /// ```
    /// </summary>
    [AzureResourceType("azure:batch/pool:Pool")]
    public partial class Pool : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies the name of the Batch account in which the pool will be created. Changing this forces a new resource to be created.
        /// </summary>
        [Output("accountName")]
        public Output<string> AccountName { get; private set; } = null!;

        /// <summary>
        /// A `auto_scale` block that describes the scale settings when using auto scale as defined below.
        /// </summary>
        [Output("autoScale")]
        public Output<Outputs.PoolAutoScale?> AutoScale { get; private set; } = null!;

        /// <summary>
        /// One or more `certificate` blocks that describe the certificates to be installed on each compute node in the pool as defined below.
        /// </summary>
        [Output("certificates")]
        public Output<ImmutableArray<Outputs.PoolCertificate>> Certificates { get; private set; } = null!;

        /// <summary>
        /// The container configuration used in the pool's VMs. One `container_configuration` block as defined below.
        /// </summary>
        [Output("containerConfiguration")]
        public Output<Outputs.PoolContainerConfiguration?> ContainerConfiguration { get; private set; } = null!;

        /// <summary>
        /// A `data_disks` block describes the data disk settings as defined below.
        /// </summary>
        [Output("dataDisks")]
        public Output<ImmutableArray<Outputs.PoolDataDisk>> DataDisks { get; private set; } = null!;

        /// <summary>
        /// A `disk_encryption` block, as defined below, describes the disk encryption configuration applied on compute nodes in the pool. Disk encryption configuration is not supported on Linux pool created with Virtual Machine Image or Shared Image Gallery Image.
        /// </summary>
        [Output("diskEncryptions")]
        public Output<ImmutableArray<Outputs.PoolDiskEncryption>> DiskEncryptions { get; private set; } = null!;

        /// <summary>
        /// Specifies the display name of the Batch pool. Changing this forces a new resource to be created.
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// An `extensions` block as defined below.
        /// </summary>
        [Output("extensions")]
        public Output<ImmutableArray<Outputs.PoolExtension>> Extensions { get; private set; } = null!;

        /// <summary>
        /// A `fixed_scale` block that describes the scale settings when using fixed scale as defined below.
        /// </summary>
        [Output("fixedScale")]
        public Output<Outputs.PoolFixedScale?> FixedScale { get; private set; } = null!;

        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.PoolIdentity?> Identity { get; private set; } = null!;

        /// <summary>
        /// Whether the pool permits direct communication between nodes. This imposes restrictions on which nodes can be assigned to the pool. Enabling this value can reduce the chance of the requested number of nodes to be allocated in the pool. Values allowed are `Disabled` and `Enabled`. Defaults to `Enabled`.
        /// </summary>
        [Output("interNodeCommunication")]
        public Output<string?> InterNodeCommunication { get; private set; } = null!;

        /// <summary>
        /// The type of on-premises license to be used when deploying the operating system. This only applies to images that contain the Windows operating system, and should only be used when you hold valid on-premises licenses for the nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are: "Windows_Server" - The on-premises license is for Windows Server. "Windows_Client" - The on-premises license is for Windows Client.
        /// </summary>
        [Output("licenseType")]
        public Output<string?> LicenseType { get; private set; } = null!;

        /// <summary>
        /// Specifies the maximum number of tasks that can run concurrently on a single compute node in the pool. Defaults to `1`. Changing this forces a new resource to be created.
        /// </summary>
        [Output("maxTasksPerNode")]
        public Output<int?> MaxTasksPerNode { get; private set; } = null!;

        /// <summary>
        /// A map of custom batch pool metadata.
        /// </summary>
        [Output("metadata")]
        public Output<ImmutableDictionary<string, string>?> Metadata { get; private set; } = null!;

        /// <summary>
        /// A `mount` block defined as below.
        /// </summary>
        [Output("mounts")]
        public Output<ImmutableArray<Outputs.PoolMount>> Mounts { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the Batch pool. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A `network_configuration` block that describes the network configurations for the Batch pool as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Output("networkConfiguration")]
        public Output<Outputs.PoolNetworkConfiguration?> NetworkConfiguration { get; private set; } = null!;

        /// <summary>
        /// Specifies the SKU of the node agents that will be created in the Batch pool. Changing this forces a new resource to be created.
        /// </summary>
        [Output("nodeAgentSkuId")]
        public Output<string> NodeAgentSkuId { get; private set; } = null!;

        /// <summary>
        /// A `node_placement` block that describes the placement policy for allocating nodes in the pool as defined below.
        /// </summary>
        [Output("nodePlacements")]
        public Output<ImmutableArray<Outputs.PoolNodePlacement>> NodePlacements { get; private set; } = null!;

        /// <summary>
        /// Specifies the ephemeral disk placement for operating system disk for all VMs in the pool. This property can be used by user in the request to choose which location the operating system should be in. e.g., cache disk space for Ephemeral OS disk provisioning. For more information on Ephemeral OS disk size requirements, please refer to Ephemeral OS disk size requirements for Windows VMs at &lt;https://docs.microsoft.com/en-us/azure/virtual-machines/windows/ephemeral-os-disks#size-requirements&gt; and Linux VMs at &lt;https://docs.microsoft.com/en-us/azure/virtual-machines/linux/ephemeral-os-disks#size-requirements&gt;. The only possible value is `CacheDisk`.
        /// </summary>
        [Output("osDiskPlacement")]
        public Output<string?> OsDiskPlacement { get; private set; } = null!;

        /// <summary>
        /// The name of the resource group in which to create the Batch pool. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// A `start_task` block that describes the start task settings for the Batch pool as defined below.
        /// </summary>
        [Output("startTask")]
        public Output<Outputs.PoolStartTask?> StartTask { get; private set; } = null!;

        /// <summary>
        /// Whether to stop if there is a pending resize operation on this pool.
        /// </summary>
        [Output("stopPendingResizeOperation")]
        public Output<bool?> StopPendingResizeOperation { get; private set; } = null!;

        /// <summary>
        /// A `storage_image_reference` block for the virtual machines that will compose the Batch pool as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Output("storageImageReference")]
        public Output<Outputs.PoolStorageImageReference> StorageImageReference { get; private set; } = null!;

        /// <summary>
        /// The desired node communication mode for the pool. Possible values are `Classic`, `Default` and `Simplified`.
        /// </summary>
        [Output("targetNodeCommunicationMode")]
        public Output<string?> TargetNodeCommunicationMode { get; private set; } = null!;

        /// <summary>
        /// A `task_scheduling_policy` block that describes how tasks are distributed across compute nodes in a pool as defined below. If not specified, the default is spread as defined below.
        /// </summary>
        [Output("taskSchedulingPolicies")]
        public Output<ImmutableArray<Outputs.PoolTaskSchedulingPolicy>> TaskSchedulingPolicies { get; private set; } = null!;

        /// <summary>
        /// A `user_accounts` block that describes the list of user accounts to be created on each node in the pool as defined below.
        /// </summary>
        [Output("userAccounts")]
        public Output<ImmutableArray<Outputs.PoolUserAccount>> UserAccounts { get; private set; } = null!;

        /// <summary>
        /// Specifies the size of the VM created in the Batch pool. Changing this forces a new resource to be created.
        /// </summary>
        [Output("vmSize")]
        public Output<string> VmSize { get; private set; } = null!;

        /// <summary>
        /// A `windows` block that describes the Windows configuration in the pool as defined below.
        /// 
        /// &gt; **NOTE:** For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable `AZ_BATCH_CERTIFICATES_DIR` is supplied to the task to query for this location. For certificates with visibility of `remoteUser`, a `certs` directory is created in the user's home directory (e.g., `/home/{user-name}/certs`) and certificates are placed in that directory.
        /// 
        /// &gt; **Please Note:** `fixed_scale` and `auto_scale` blocks cannot be used both at the same time.
        /// </summary>
        [Output("windows")]
        public Output<ImmutableArray<Outputs.PoolWindow>> Windows { get; private set; } = null!;


        /// <summary>
        /// Create a Pool resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Pool(string name, PoolArgs args, CustomResourceOptions? options = null)
            : base("azure:batch/pool:Pool", name, args ?? new PoolArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Pool(string name, Input<string> id, PoolState? state = null, CustomResourceOptions? options = null)
            : base("azure:batch/pool:Pool", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Pool resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Pool Get(string name, Input<string> id, PoolState? state = null, CustomResourceOptions? options = null)
        {
            return new Pool(name, id, state, options);
        }
    }

    public sealed class PoolArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the name of the Batch account in which the pool will be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// A `auto_scale` block that describes the scale settings when using auto scale as defined below.
        /// </summary>
        [Input("autoScale")]
        public Input<Inputs.PoolAutoScaleArgs>? AutoScale { get; set; }

        [Input("certificates")]
        private InputList<Inputs.PoolCertificateArgs>? _certificates;

        /// <summary>
        /// One or more `certificate` blocks that describe the certificates to be installed on each compute node in the pool as defined below.
        /// </summary>
        public InputList<Inputs.PoolCertificateArgs> Certificates
        {
            get => _certificates ?? (_certificates = new InputList<Inputs.PoolCertificateArgs>());
            set => _certificates = value;
        }

        /// <summary>
        /// The container configuration used in the pool's VMs. One `container_configuration` block as defined below.
        /// </summary>
        [Input("containerConfiguration")]
        public Input<Inputs.PoolContainerConfigurationArgs>? ContainerConfiguration { get; set; }

        [Input("dataDisks")]
        private InputList<Inputs.PoolDataDiskArgs>? _dataDisks;

        /// <summary>
        /// A `data_disks` block describes the data disk settings as defined below.
        /// </summary>
        public InputList<Inputs.PoolDataDiskArgs> DataDisks
        {
            get => _dataDisks ?? (_dataDisks = new InputList<Inputs.PoolDataDiskArgs>());
            set => _dataDisks = value;
        }

        [Input("diskEncryptions")]
        private InputList<Inputs.PoolDiskEncryptionArgs>? _diskEncryptions;

        /// <summary>
        /// A `disk_encryption` block, as defined below, describes the disk encryption configuration applied on compute nodes in the pool. Disk encryption configuration is not supported on Linux pool created with Virtual Machine Image or Shared Image Gallery Image.
        /// </summary>
        public InputList<Inputs.PoolDiskEncryptionArgs> DiskEncryptions
        {
            get => _diskEncryptions ?? (_diskEncryptions = new InputList<Inputs.PoolDiskEncryptionArgs>());
            set => _diskEncryptions = value;
        }

        /// <summary>
        /// Specifies the display name of the Batch pool. Changing this forces a new resource to be created.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("extensions")]
        private InputList<Inputs.PoolExtensionArgs>? _extensions;

        /// <summary>
        /// An `extensions` block as defined below.
        /// </summary>
        public InputList<Inputs.PoolExtensionArgs> Extensions
        {
            get => _extensions ?? (_extensions = new InputList<Inputs.PoolExtensionArgs>());
            set => _extensions = value;
        }

        /// <summary>
        /// A `fixed_scale` block that describes the scale settings when using fixed scale as defined below.
        /// </summary>
        [Input("fixedScale")]
        public Input<Inputs.PoolFixedScaleArgs>? FixedScale { get; set; }

        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.PoolIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// Whether the pool permits direct communication between nodes. This imposes restrictions on which nodes can be assigned to the pool. Enabling this value can reduce the chance of the requested number of nodes to be allocated in the pool. Values allowed are `Disabled` and `Enabled`. Defaults to `Enabled`.
        /// </summary>
        [Input("interNodeCommunication")]
        public Input<string>? InterNodeCommunication { get; set; }

        /// <summary>
        /// The type of on-premises license to be used when deploying the operating system. This only applies to images that contain the Windows operating system, and should only be used when you hold valid on-premises licenses for the nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are: "Windows_Server" - The on-premises license is for Windows Server. "Windows_Client" - The on-premises license is for Windows Client.
        /// </summary>
        [Input("licenseType")]
        public Input<string>? LicenseType { get; set; }

        /// <summary>
        /// Specifies the maximum number of tasks that can run concurrently on a single compute node in the pool. Defaults to `1`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("maxTasksPerNode")]
        public Input<int>? MaxTasksPerNode { get; set; }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// A map of custom batch pool metadata.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        [Input("mounts")]
        private InputList<Inputs.PoolMountArgs>? _mounts;

        /// <summary>
        /// A `mount` block defined as below.
        /// </summary>
        public InputList<Inputs.PoolMountArgs> Mounts
        {
            get => _mounts ?? (_mounts = new InputList<Inputs.PoolMountArgs>());
            set => _mounts = value;
        }

        /// <summary>
        /// Specifies the name of the Batch pool. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A `network_configuration` block that describes the network configurations for the Batch pool as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Input("networkConfiguration")]
        public Input<Inputs.PoolNetworkConfigurationArgs>? NetworkConfiguration { get; set; }

        /// <summary>
        /// Specifies the SKU of the node agents that will be created in the Batch pool. Changing this forces a new resource to be created.
        /// </summary>
        [Input("nodeAgentSkuId", required: true)]
        public Input<string> NodeAgentSkuId { get; set; } = null!;

        [Input("nodePlacements")]
        private InputList<Inputs.PoolNodePlacementArgs>? _nodePlacements;

        /// <summary>
        /// A `node_placement` block that describes the placement policy for allocating nodes in the pool as defined below.
        /// </summary>
        public InputList<Inputs.PoolNodePlacementArgs> NodePlacements
        {
            get => _nodePlacements ?? (_nodePlacements = new InputList<Inputs.PoolNodePlacementArgs>());
            set => _nodePlacements = value;
        }

        /// <summary>
        /// Specifies the ephemeral disk placement for operating system disk for all VMs in the pool. This property can be used by user in the request to choose which location the operating system should be in. e.g., cache disk space for Ephemeral OS disk provisioning. For more information on Ephemeral OS disk size requirements, please refer to Ephemeral OS disk size requirements for Windows VMs at &lt;https://docs.microsoft.com/en-us/azure/virtual-machines/windows/ephemeral-os-disks#size-requirements&gt; and Linux VMs at &lt;https://docs.microsoft.com/en-us/azure/virtual-machines/linux/ephemeral-os-disks#size-requirements&gt;. The only possible value is `CacheDisk`.
        /// </summary>
        [Input("osDiskPlacement")]
        public Input<string>? OsDiskPlacement { get; set; }

        /// <summary>
        /// The name of the resource group in which to create the Batch pool. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// A `start_task` block that describes the start task settings for the Batch pool as defined below.
        /// </summary>
        [Input("startTask")]
        public Input<Inputs.PoolStartTaskArgs>? StartTask { get; set; }

        /// <summary>
        /// Whether to stop if there is a pending resize operation on this pool.
        /// </summary>
        [Input("stopPendingResizeOperation")]
        public Input<bool>? StopPendingResizeOperation { get; set; }

        /// <summary>
        /// A `storage_image_reference` block for the virtual machines that will compose the Batch pool as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Input("storageImageReference", required: true)]
        public Input<Inputs.PoolStorageImageReferenceArgs> StorageImageReference { get; set; } = null!;

        /// <summary>
        /// The desired node communication mode for the pool. Possible values are `Classic`, `Default` and `Simplified`.
        /// </summary>
        [Input("targetNodeCommunicationMode")]
        public Input<string>? TargetNodeCommunicationMode { get; set; }

        [Input("taskSchedulingPolicies")]
        private InputList<Inputs.PoolTaskSchedulingPolicyArgs>? _taskSchedulingPolicies;

        /// <summary>
        /// A `task_scheduling_policy` block that describes how tasks are distributed across compute nodes in a pool as defined below. If not specified, the default is spread as defined below.
        /// </summary>
        public InputList<Inputs.PoolTaskSchedulingPolicyArgs> TaskSchedulingPolicies
        {
            get => _taskSchedulingPolicies ?? (_taskSchedulingPolicies = new InputList<Inputs.PoolTaskSchedulingPolicyArgs>());
            set => _taskSchedulingPolicies = value;
        }

        [Input("userAccounts")]
        private InputList<Inputs.PoolUserAccountArgs>? _userAccounts;

        /// <summary>
        /// A `user_accounts` block that describes the list of user accounts to be created on each node in the pool as defined below.
        /// </summary>
        public InputList<Inputs.PoolUserAccountArgs> UserAccounts
        {
            get => _userAccounts ?? (_userAccounts = new InputList<Inputs.PoolUserAccountArgs>());
            set => _userAccounts = value;
        }

        /// <summary>
        /// Specifies the size of the VM created in the Batch pool. Changing this forces a new resource to be created.
        /// </summary>
        [Input("vmSize", required: true)]
        public Input<string> VmSize { get; set; } = null!;

        [Input("windows")]
        private InputList<Inputs.PoolWindowArgs>? _windows;

        /// <summary>
        /// A `windows` block that describes the Windows configuration in the pool as defined below.
        /// 
        /// &gt; **NOTE:** For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable `AZ_BATCH_CERTIFICATES_DIR` is supplied to the task to query for this location. For certificates with visibility of `remoteUser`, a `certs` directory is created in the user's home directory (e.g., `/home/{user-name}/certs`) and certificates are placed in that directory.
        /// 
        /// &gt; **Please Note:** `fixed_scale` and `auto_scale` blocks cannot be used both at the same time.
        /// </summary>
        public InputList<Inputs.PoolWindowArgs> Windows
        {
            get => _windows ?? (_windows = new InputList<Inputs.PoolWindowArgs>());
            set => _windows = value;
        }

        public PoolArgs()
        {
        }
        public static new PoolArgs Empty => new PoolArgs();
    }

    public sealed class PoolState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the name of the Batch account in which the pool will be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("accountName")]
        public Input<string>? AccountName { get; set; }

        /// <summary>
        /// A `auto_scale` block that describes the scale settings when using auto scale as defined below.
        /// </summary>
        [Input("autoScale")]
        public Input<Inputs.PoolAutoScaleGetArgs>? AutoScale { get; set; }

        [Input("certificates")]
        private InputList<Inputs.PoolCertificateGetArgs>? _certificates;

        /// <summary>
        /// One or more `certificate` blocks that describe the certificates to be installed on each compute node in the pool as defined below.
        /// </summary>
        public InputList<Inputs.PoolCertificateGetArgs> Certificates
        {
            get => _certificates ?? (_certificates = new InputList<Inputs.PoolCertificateGetArgs>());
            set => _certificates = value;
        }

        /// <summary>
        /// The container configuration used in the pool's VMs. One `container_configuration` block as defined below.
        /// </summary>
        [Input("containerConfiguration")]
        public Input<Inputs.PoolContainerConfigurationGetArgs>? ContainerConfiguration { get; set; }

        [Input("dataDisks")]
        private InputList<Inputs.PoolDataDiskGetArgs>? _dataDisks;

        /// <summary>
        /// A `data_disks` block describes the data disk settings as defined below.
        /// </summary>
        public InputList<Inputs.PoolDataDiskGetArgs> DataDisks
        {
            get => _dataDisks ?? (_dataDisks = new InputList<Inputs.PoolDataDiskGetArgs>());
            set => _dataDisks = value;
        }

        [Input("diskEncryptions")]
        private InputList<Inputs.PoolDiskEncryptionGetArgs>? _diskEncryptions;

        /// <summary>
        /// A `disk_encryption` block, as defined below, describes the disk encryption configuration applied on compute nodes in the pool. Disk encryption configuration is not supported on Linux pool created with Virtual Machine Image or Shared Image Gallery Image.
        /// </summary>
        public InputList<Inputs.PoolDiskEncryptionGetArgs> DiskEncryptions
        {
            get => _diskEncryptions ?? (_diskEncryptions = new InputList<Inputs.PoolDiskEncryptionGetArgs>());
            set => _diskEncryptions = value;
        }

        /// <summary>
        /// Specifies the display name of the Batch pool. Changing this forces a new resource to be created.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("extensions")]
        private InputList<Inputs.PoolExtensionGetArgs>? _extensions;

        /// <summary>
        /// An `extensions` block as defined below.
        /// </summary>
        public InputList<Inputs.PoolExtensionGetArgs> Extensions
        {
            get => _extensions ?? (_extensions = new InputList<Inputs.PoolExtensionGetArgs>());
            set => _extensions = value;
        }

        /// <summary>
        /// A `fixed_scale` block that describes the scale settings when using fixed scale as defined below.
        /// </summary>
        [Input("fixedScale")]
        public Input<Inputs.PoolFixedScaleGetArgs>? FixedScale { get; set; }

        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.PoolIdentityGetArgs>? Identity { get; set; }

        /// <summary>
        /// Whether the pool permits direct communication between nodes. This imposes restrictions on which nodes can be assigned to the pool. Enabling this value can reduce the chance of the requested number of nodes to be allocated in the pool. Values allowed are `Disabled` and `Enabled`. Defaults to `Enabled`.
        /// </summary>
        [Input("interNodeCommunication")]
        public Input<string>? InterNodeCommunication { get; set; }

        /// <summary>
        /// The type of on-premises license to be used when deploying the operating system. This only applies to images that contain the Windows operating system, and should only be used when you hold valid on-premises licenses for the nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are: "Windows_Server" - The on-premises license is for Windows Server. "Windows_Client" - The on-premises license is for Windows Client.
        /// </summary>
        [Input("licenseType")]
        public Input<string>? LicenseType { get; set; }

        /// <summary>
        /// Specifies the maximum number of tasks that can run concurrently on a single compute node in the pool. Defaults to `1`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("maxTasksPerNode")]
        public Input<int>? MaxTasksPerNode { get; set; }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// A map of custom batch pool metadata.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        [Input("mounts")]
        private InputList<Inputs.PoolMountGetArgs>? _mounts;

        /// <summary>
        /// A `mount` block defined as below.
        /// </summary>
        public InputList<Inputs.PoolMountGetArgs> Mounts
        {
            get => _mounts ?? (_mounts = new InputList<Inputs.PoolMountGetArgs>());
            set => _mounts = value;
        }

        /// <summary>
        /// Specifies the name of the Batch pool. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A `network_configuration` block that describes the network configurations for the Batch pool as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Input("networkConfiguration")]
        public Input<Inputs.PoolNetworkConfigurationGetArgs>? NetworkConfiguration { get; set; }

        /// <summary>
        /// Specifies the SKU of the node agents that will be created in the Batch pool. Changing this forces a new resource to be created.
        /// </summary>
        [Input("nodeAgentSkuId")]
        public Input<string>? NodeAgentSkuId { get; set; }

        [Input("nodePlacements")]
        private InputList<Inputs.PoolNodePlacementGetArgs>? _nodePlacements;

        /// <summary>
        /// A `node_placement` block that describes the placement policy for allocating nodes in the pool as defined below.
        /// </summary>
        public InputList<Inputs.PoolNodePlacementGetArgs> NodePlacements
        {
            get => _nodePlacements ?? (_nodePlacements = new InputList<Inputs.PoolNodePlacementGetArgs>());
            set => _nodePlacements = value;
        }

        /// <summary>
        /// Specifies the ephemeral disk placement for operating system disk for all VMs in the pool. This property can be used by user in the request to choose which location the operating system should be in. e.g., cache disk space for Ephemeral OS disk provisioning. For more information on Ephemeral OS disk size requirements, please refer to Ephemeral OS disk size requirements for Windows VMs at &lt;https://docs.microsoft.com/en-us/azure/virtual-machines/windows/ephemeral-os-disks#size-requirements&gt; and Linux VMs at &lt;https://docs.microsoft.com/en-us/azure/virtual-machines/linux/ephemeral-os-disks#size-requirements&gt;. The only possible value is `CacheDisk`.
        /// </summary>
        [Input("osDiskPlacement")]
        public Input<string>? OsDiskPlacement { get; set; }

        /// <summary>
        /// The name of the resource group in which to create the Batch pool. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// A `start_task` block that describes the start task settings for the Batch pool as defined below.
        /// </summary>
        [Input("startTask")]
        public Input<Inputs.PoolStartTaskGetArgs>? StartTask { get; set; }

        /// <summary>
        /// Whether to stop if there is a pending resize operation on this pool.
        /// </summary>
        [Input("stopPendingResizeOperation")]
        public Input<bool>? StopPendingResizeOperation { get; set; }

        /// <summary>
        /// A `storage_image_reference` block for the virtual machines that will compose the Batch pool as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Input("storageImageReference")]
        public Input<Inputs.PoolStorageImageReferenceGetArgs>? StorageImageReference { get; set; }

        /// <summary>
        /// The desired node communication mode for the pool. Possible values are `Classic`, `Default` and `Simplified`.
        /// </summary>
        [Input("targetNodeCommunicationMode")]
        public Input<string>? TargetNodeCommunicationMode { get; set; }

        [Input("taskSchedulingPolicies")]
        private InputList<Inputs.PoolTaskSchedulingPolicyGetArgs>? _taskSchedulingPolicies;

        /// <summary>
        /// A `task_scheduling_policy` block that describes how tasks are distributed across compute nodes in a pool as defined below. If not specified, the default is spread as defined below.
        /// </summary>
        public InputList<Inputs.PoolTaskSchedulingPolicyGetArgs> TaskSchedulingPolicies
        {
            get => _taskSchedulingPolicies ?? (_taskSchedulingPolicies = new InputList<Inputs.PoolTaskSchedulingPolicyGetArgs>());
            set => _taskSchedulingPolicies = value;
        }

        [Input("userAccounts")]
        private InputList<Inputs.PoolUserAccountGetArgs>? _userAccounts;

        /// <summary>
        /// A `user_accounts` block that describes the list of user accounts to be created on each node in the pool as defined below.
        /// </summary>
        public InputList<Inputs.PoolUserAccountGetArgs> UserAccounts
        {
            get => _userAccounts ?? (_userAccounts = new InputList<Inputs.PoolUserAccountGetArgs>());
            set => _userAccounts = value;
        }

        /// <summary>
        /// Specifies the size of the VM created in the Batch pool. Changing this forces a new resource to be created.
        /// </summary>
        [Input("vmSize")]
        public Input<string>? VmSize { get; set; }

        [Input("windows")]
        private InputList<Inputs.PoolWindowGetArgs>? _windows;

        /// <summary>
        /// A `windows` block that describes the Windows configuration in the pool as defined below.
        /// 
        /// &gt; **NOTE:** For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable `AZ_BATCH_CERTIFICATES_DIR` is supplied to the task to query for this location. For certificates with visibility of `remoteUser`, a `certs` directory is created in the user's home directory (e.g., `/home/{user-name}/certs`) and certificates are placed in that directory.
        /// 
        /// &gt; **Please Note:** `fixed_scale` and `auto_scale` blocks cannot be used both at the same time.
        /// </summary>
        public InputList<Inputs.PoolWindowGetArgs> Windows
        {
            get => _windows ?? (_windows = new InputList<Inputs.PoolWindowGetArgs>());
            set => _windows = value;
        }

        public PoolState()
        {
        }
        public static new PoolState Empty => new PoolState();
    }
}
