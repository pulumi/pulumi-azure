// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Batch
{
    /// <summary>
    /// Manages an Azure Batch pool.
    /// 
    /// ## Import
    /// 
    /// Batch Pools can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:batch/pool:Pool example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup1/providers/Microsoft.Batch/batchAccounts/myBatchAccount1/pools/myBatchPool1
    /// ```
    /// </summary>
    public partial class Pool : Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies the name of the Batch account in which the pool will be created. Changing this forces a new resource to be created.
        /// </summary>
        [Output("accountName")]
        public Output<string> AccountName { get; private set; } = null!;

        /// <summary>
        /// A `auto_scale` block that describes the scale settings when using auto scale.
        /// </summary>
        [Output("autoScale")]
        public Output<Outputs.PoolAutoScale?> AutoScale { get; private set; } = null!;

        /// <summary>
        /// One or more `certificate` blocks that describe the certificates to be installed on each compute node in the pool.
        /// </summary>
        [Output("certificates")]
        public Output<ImmutableArray<Outputs.PoolCertificate>> Certificates { get; private set; } = null!;

        /// <summary>
        /// The container configuration used in the pool's VMs.
        /// </summary>
        [Output("containerConfiguration")]
        public Output<Outputs.PoolContainerConfiguration?> ContainerConfiguration { get; private set; } = null!;

        /// <summary>
        /// Specifies the display name of the Batch pool.
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// A `fixed_scale` block that describes the scale settings when using fixed scale.
        /// </summary>
        [Output("fixedScale")]
        public Output<Outputs.PoolFixedScale?> FixedScale { get; private set; } = null!;

        /// <summary>
        /// Specifies the maximum number of tasks that can run concurrently on a single compute node in the pool. Defaults to `1`. Changing this forces a new resource to be created.
        /// </summary>
        [Output("maxTasksPerNode")]
        public Output<int?> MaxTasksPerNode { get; private set; } = null!;

        /// <summary>
        /// A map of custom batch pool metadata.
        /// </summary>
        [Output("metadata")]
        public Output<ImmutableDictionary<string, string>?> Metadata { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the Batch pool. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A `network_configuration` block that describes the network configurations for the Batch pool.
        /// </summary>
        [Output("networkConfiguration")]
        public Output<Outputs.PoolNetworkConfiguration?> NetworkConfiguration { get; private set; } = null!;

        /// <summary>
        /// Specifies the Sku of the node agents that will be created in the Batch pool.
        /// </summary>
        [Output("nodeAgentSkuId")]
        public Output<string> NodeAgentSkuId { get; private set; } = null!;

        /// <summary>
        /// The name of the resource group in which to create the Batch pool. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// A `start_task` block that describes the start task settings for the Batch pool.
        /// </summary>
        [Output("startTask")]
        public Output<Outputs.PoolStartTask?> StartTask { get; private set; } = null!;

        [Output("stopPendingResizeOperation")]
        public Output<bool?> StopPendingResizeOperation { get; private set; } = null!;

        /// <summary>
        /// A `storage_image_reference` for the virtual machines that will compose the Batch pool.
        /// </summary>
        [Output("storageImageReference")]
        public Output<Outputs.PoolStorageImageReference> StorageImageReference { get; private set; } = null!;

        /// <summary>
        /// Specifies the size of the VM created in the Batch pool.
        /// </summary>
        [Output("vmSize")]
        public Output<string> VmSize { get; private set; } = null!;


        /// <summary>
        /// Create a Pool resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Pool(string name, PoolArgs args, CustomResourceOptions? options = null)
            : base("azure:batch/pool:Pool", name, args ?? new PoolArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Pool(string name, Input<string> id, PoolState? state = null, CustomResourceOptions? options = null)
            : base("azure:batch/pool:Pool", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Pool resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Pool Get(string name, Input<string> id, PoolState? state = null, CustomResourceOptions? options = null)
        {
            return new Pool(name, id, state, options);
        }
    }

    public sealed class PoolArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the name of the Batch account in which the pool will be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// A `auto_scale` block that describes the scale settings when using auto scale.
        /// </summary>
        [Input("autoScale")]
        public Input<Inputs.PoolAutoScaleArgs>? AutoScale { get; set; }

        [Input("certificates")]
        private InputList<Inputs.PoolCertificateArgs>? _certificates;

        /// <summary>
        /// One or more `certificate` blocks that describe the certificates to be installed on each compute node in the pool.
        /// </summary>
        public InputList<Inputs.PoolCertificateArgs> Certificates
        {
            get => _certificates ?? (_certificates = new InputList<Inputs.PoolCertificateArgs>());
            set => _certificates = value;
        }

        /// <summary>
        /// The container configuration used in the pool's VMs.
        /// </summary>
        [Input("containerConfiguration")]
        public Input<Inputs.PoolContainerConfigurationArgs>? ContainerConfiguration { get; set; }

        /// <summary>
        /// Specifies the display name of the Batch pool.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// A `fixed_scale` block that describes the scale settings when using fixed scale.
        /// </summary>
        [Input("fixedScale")]
        public Input<Inputs.PoolFixedScaleArgs>? FixedScale { get; set; }

        /// <summary>
        /// Specifies the maximum number of tasks that can run concurrently on a single compute node in the pool. Defaults to `1`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("maxTasksPerNode")]
        public Input<int>? MaxTasksPerNode { get; set; }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// A map of custom batch pool metadata.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// Specifies the name of the Batch pool. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A `network_configuration` block that describes the network configurations for the Batch pool.
        /// </summary>
        [Input("networkConfiguration")]
        public Input<Inputs.PoolNetworkConfigurationArgs>? NetworkConfiguration { get; set; }

        /// <summary>
        /// Specifies the Sku of the node agents that will be created in the Batch pool.
        /// </summary>
        [Input("nodeAgentSkuId", required: true)]
        public Input<string> NodeAgentSkuId { get; set; } = null!;

        /// <summary>
        /// The name of the resource group in which to create the Batch pool. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// A `start_task` block that describes the start task settings for the Batch pool.
        /// </summary>
        [Input("startTask")]
        public Input<Inputs.PoolStartTaskArgs>? StartTask { get; set; }

        [Input("stopPendingResizeOperation")]
        public Input<bool>? StopPendingResizeOperation { get; set; }

        /// <summary>
        /// A `storage_image_reference` for the virtual machines that will compose the Batch pool.
        /// </summary>
        [Input("storageImageReference", required: true)]
        public Input<Inputs.PoolStorageImageReferenceArgs> StorageImageReference { get; set; } = null!;

        /// <summary>
        /// Specifies the size of the VM created in the Batch pool.
        /// </summary>
        [Input("vmSize", required: true)]
        public Input<string> VmSize { get; set; } = null!;

        public PoolArgs()
        {
        }
    }

    public sealed class PoolState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the name of the Batch account in which the pool will be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("accountName")]
        public Input<string>? AccountName { get; set; }

        /// <summary>
        /// A `auto_scale` block that describes the scale settings when using auto scale.
        /// </summary>
        [Input("autoScale")]
        public Input<Inputs.PoolAutoScaleGetArgs>? AutoScale { get; set; }

        [Input("certificates")]
        private InputList<Inputs.PoolCertificateGetArgs>? _certificates;

        /// <summary>
        /// One or more `certificate` blocks that describe the certificates to be installed on each compute node in the pool.
        /// </summary>
        public InputList<Inputs.PoolCertificateGetArgs> Certificates
        {
            get => _certificates ?? (_certificates = new InputList<Inputs.PoolCertificateGetArgs>());
            set => _certificates = value;
        }

        /// <summary>
        /// The container configuration used in the pool's VMs.
        /// </summary>
        [Input("containerConfiguration")]
        public Input<Inputs.PoolContainerConfigurationGetArgs>? ContainerConfiguration { get; set; }

        /// <summary>
        /// Specifies the display name of the Batch pool.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// A `fixed_scale` block that describes the scale settings when using fixed scale.
        /// </summary>
        [Input("fixedScale")]
        public Input<Inputs.PoolFixedScaleGetArgs>? FixedScale { get; set; }

        /// <summary>
        /// Specifies the maximum number of tasks that can run concurrently on a single compute node in the pool. Defaults to `1`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("maxTasksPerNode")]
        public Input<int>? MaxTasksPerNode { get; set; }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// A map of custom batch pool metadata.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// Specifies the name of the Batch pool. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A `network_configuration` block that describes the network configurations for the Batch pool.
        /// </summary>
        [Input("networkConfiguration")]
        public Input<Inputs.PoolNetworkConfigurationGetArgs>? NetworkConfiguration { get; set; }

        /// <summary>
        /// Specifies the Sku of the node agents that will be created in the Batch pool.
        /// </summary>
        [Input("nodeAgentSkuId")]
        public Input<string>? NodeAgentSkuId { get; set; }

        /// <summary>
        /// The name of the resource group in which to create the Batch pool. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// A `start_task` block that describes the start task settings for the Batch pool.
        /// </summary>
        [Input("startTask")]
        public Input<Inputs.PoolStartTaskGetArgs>? StartTask { get; set; }

        [Input("stopPendingResizeOperation")]
        public Input<bool>? StopPendingResizeOperation { get; set; }

        /// <summary>
        /// A `storage_image_reference` for the virtual machines that will compose the Batch pool.
        /// </summary>
        [Input("storageImageReference")]
        public Input<Inputs.PoolStorageImageReferenceGetArgs>? StorageImageReference { get; set; }

        /// <summary>
        /// Specifies the size of the VM created in the Batch pool.
        /// </summary>
        [Input("vmSize")]
        public Input<string>? VmSize { get; set; }

        public PoolState()
        {
        }
    }
}
