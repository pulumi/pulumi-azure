// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Batch
{
    public static class GetPool
    {
        /// <summary>
        /// Use this data source to access information about an existing Batch pool
        /// </summary>
        public static Task<GetPoolResult> InvokeAsync(GetPoolArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPoolResult>("azure:batch/getPool:getPool", args ?? new GetPoolArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Batch pool
        /// </summary>
        public static Output<GetPoolResult> Invoke(GetPoolInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPoolResult>("azure:batch/getPool:getPool", args ?? new GetPoolInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPoolArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Azure Storage Account name.
        /// </summary>
        [Input("accountName", required: true)]
        public string AccountName { get; set; } = null!;

        /// <summary>
        /// The name of the user account.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetPoolArgs()
        {
        }
        public static new GetPoolArgs Empty => new GetPoolArgs();
    }

    public sealed class GetPoolInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Azure Storage Account name.
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// The name of the user account.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetPoolInvokeArgs()
        {
        }
        public static new GetPoolInvokeArgs Empty => new GetPoolInvokeArgs();
    }


    [OutputType]
    public sealed class GetPoolResult
    {
        /// <summary>
        /// The Azure Storage Account name.
        /// </summary>
        public readonly string AccountName;
        /// <summary>
        /// A `auto_scale` block that describes the scale settings when using auto scale.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPoolAutoScaleResult> AutoScales;
        /// <summary>
        /// One or more `certificate` blocks that describe the certificates installed on each compute node in the pool.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPoolCertificateResult> Certificates;
        /// <summary>
        /// The container configuration used in the pool's VMs.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPoolContainerConfigurationResult> ContainerConfigurations;
        /// <summary>
        /// A `data_disks` block describes the data disk settings.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPoolDataDiskResult> DataDisks;
        /// <summary>
        /// A `disk_encryption` block describes the disk encryption configuration applied on compute nodes in the pool.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPoolDiskEncryptionResult> DiskEncryptions;
        public readonly string DisplayName;
        /// <summary>
        /// An `extensions` block describes the extension settings
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPoolExtensionResult> Extensions;
        /// <summary>
        /// A `fixed_scale` block that describes the scale settings when using fixed scale.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPoolFixedScaleResult> FixedScales;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Whether the pool permits direct communication between nodes. This imposes restrictions on which nodes can be assigned to the pool. Enabling this value can reduce the chance of the requested number of nodes to be allocated in the pool.
        /// </summary>
        public readonly string InterNodeCommunication;
        /// <summary>
        /// The type of on-premises license to be used when deploying the operating system.
        /// </summary>
        public readonly string LicenseType;
        /// <summary>
        /// The maximum number of tasks that can run concurrently on a single compute node in the pool.
        /// </summary>
        public readonly int MaxTasksPerNode;
        public readonly ImmutableDictionary<string, string> Metadata;
        /// <summary>
        /// A `mount` block that describes mount configuration.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPoolMountResult> Mounts;
        /// <summary>
        /// The name of the user account.
        /// </summary>
        public readonly string Name;
        public readonly ImmutableArray<Outputs.GetPoolNetworkConfigurationResult> NetworkConfigurations;
        /// <summary>
        /// The SKU of the node agents in the Batch pool.
        /// </summary>
        public readonly string NodeAgentSkuId;
        /// <summary>
        /// A `node_placement` block that describes the placement policy for allocating nodes in the pool.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPoolNodePlacementResult> NodePlacements;
        /// <summary>
        /// Specifies the ephemeral disk placement for operating system disk for all VMs in the pool.
        /// </summary>
        public readonly string OsDiskPlacement;
        public readonly string ResourceGroupName;
        /// <summary>
        /// A `start_task` block that describes the start task settings for the Batch pool.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPoolStartTaskResult> StartTasks;
        /// <summary>
        /// The reference of the storage image used by the nodes in the Batch pool.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPoolStorageImageReferenceResult> StorageImageReferences;
        /// <summary>
        /// A `task_scheduling_policy` block that describes how tasks are distributed across compute nodes in a pool.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPoolTaskSchedulingPolicyResult> TaskSchedulingPolicies;
        /// <summary>
        /// A `user_accounts` block that describes the list of user accounts to be created on each node in the pool.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPoolUserAccountResult> UserAccounts;
        /// <summary>
        /// The size of the VM created in the Batch pool.
        /// </summary>
        public readonly string VmSize;
        /// <summary>
        /// A `windows` block that describes the Windows configuration in the pool.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPoolWindowResult> Windows;

        [OutputConstructor]
        private GetPoolResult(
            string accountName,

            ImmutableArray<Outputs.GetPoolAutoScaleResult> autoScales,

            ImmutableArray<Outputs.GetPoolCertificateResult> certificates,

            ImmutableArray<Outputs.GetPoolContainerConfigurationResult> containerConfigurations,

            ImmutableArray<Outputs.GetPoolDataDiskResult> dataDisks,

            ImmutableArray<Outputs.GetPoolDiskEncryptionResult> diskEncryptions,

            string displayName,

            ImmutableArray<Outputs.GetPoolExtensionResult> extensions,

            ImmutableArray<Outputs.GetPoolFixedScaleResult> fixedScales,

            string id,

            string interNodeCommunication,

            string licenseType,

            int maxTasksPerNode,

            ImmutableDictionary<string, string> metadata,

            ImmutableArray<Outputs.GetPoolMountResult> mounts,

            string name,

            ImmutableArray<Outputs.GetPoolNetworkConfigurationResult> networkConfigurations,

            string nodeAgentSkuId,

            ImmutableArray<Outputs.GetPoolNodePlacementResult> nodePlacements,

            string osDiskPlacement,

            string resourceGroupName,

            ImmutableArray<Outputs.GetPoolStartTaskResult> startTasks,

            ImmutableArray<Outputs.GetPoolStorageImageReferenceResult> storageImageReferences,

            ImmutableArray<Outputs.GetPoolTaskSchedulingPolicyResult> taskSchedulingPolicies,

            ImmutableArray<Outputs.GetPoolUserAccountResult> userAccounts,

            string vmSize,

            ImmutableArray<Outputs.GetPoolWindowResult> windows)
        {
            AccountName = accountName;
            AutoScales = autoScales;
            Certificates = certificates;
            ContainerConfigurations = containerConfigurations;
            DataDisks = dataDisks;
            DiskEncryptions = diskEncryptions;
            DisplayName = displayName;
            Extensions = extensions;
            FixedScales = fixedScales;
            Id = id;
            InterNodeCommunication = interNodeCommunication;
            LicenseType = licenseType;
            MaxTasksPerNode = maxTasksPerNode;
            Metadata = metadata;
            Mounts = mounts;
            Name = name;
            NetworkConfigurations = networkConfigurations;
            NodeAgentSkuId = nodeAgentSkuId;
            NodePlacements = nodePlacements;
            OsDiskPlacement = osDiskPlacement;
            ResourceGroupName = resourceGroupName;
            StartTasks = startTasks;
            StorageImageReferences = storageImageReferences;
            TaskSchedulingPolicies = taskSchedulingPolicies;
            UserAccounts = userAccounts;
            VmSize = vmSize;
            Windows = windows;
        }
    }
}
