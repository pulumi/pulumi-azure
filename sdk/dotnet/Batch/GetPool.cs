// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Batch
{
    public static class GetPool
    {
        /// <summary>
        /// Use this data source to access information about an existing Batch pool
        /// 
        /// {{% examples %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetPoolResult> InvokeAsync(GetPoolArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetPoolResult>("azure:batch/getPool:getPool", args ?? new GetPoolArgs(), options.WithVersion());
    }


    public sealed class GetPoolArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Batch account.
        /// </summary>
        [Input("accountName", required: true)]
        public string AccountName { get; set; } = null!;

        [Input("certificates")]
        private List<Inputs.GetPoolCertificateArgs>? _certificates;

        /// <summary>
        /// One or more `certificate` blocks that describe the certificates installed on each compute node in the pool.
        /// </summary>
        public List<Inputs.GetPoolCertificateArgs> Certificates
        {
            get => _certificates ?? (_certificates = new List<Inputs.GetPoolCertificateArgs>());
            set => _certificates = value;
        }

        /// <summary>
        /// The name of the endpoint.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        [Input("networkConfiguration")]
        public Inputs.GetPoolNetworkConfigurationArgs? NetworkConfiguration { get; set; }

        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// A `start_task` block that describes the start task settings for the Batch pool.
        /// </summary>
        [Input("startTask")]
        public Inputs.GetPoolStartTaskArgs? StartTask { get; set; }

        public GetPoolArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetPoolResult
    {
        /// <summary>
        /// The name of the Batch account.
        /// </summary>
        public readonly string AccountName;
        /// <summary>
        /// A `auto_scale` block that describes the scale settings when using auto scale.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPoolAutoScaleResult> AutoScales;
        /// <summary>
        /// One or more `certificate` blocks that describe the certificates installed on each compute node in the pool.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPoolCertificateResult> Certificates;
        /// <summary>
        /// The container configuration used in the pool's VMs.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPoolContainerConfigurationResult> ContainerConfigurations;
        public readonly string DisplayName;
        /// <summary>
        /// A `fixed_scale` block that describes the scale settings when using fixed scale.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPoolFixedScaleResult> FixedScales;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The maximum number of tasks that can run concurrently on a single compute node in the pool.
        /// </summary>
        public readonly int MaxTasksPerNode;
        public readonly ImmutableDictionary<string, string> Metadata;
        /// <summary>
        /// The name of the endpoint.
        /// </summary>
        public readonly string Name;
        public readonly Outputs.GetPoolNetworkConfigurationResult NetworkConfiguration;
        /// <summary>
        /// The Sku of the node agents in the Batch pool.
        /// </summary>
        public readonly string NodeAgentSkuId;
        public readonly string ResourceGroupName;
        /// <summary>
        /// A `start_task` block that describes the start task settings for the Batch pool.
        /// </summary>
        public readonly Outputs.GetPoolStartTaskResult? StartTask;
        /// <summary>
        /// The reference of the storage image used by the nodes in the Batch pool.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPoolStorageImageReferenceResult> StorageImageReferences;
        /// <summary>
        /// The size of the VM created in the Batch pool.
        /// </summary>
        public readonly string VmSize;

        [OutputConstructor]
        private GetPoolResult(
            string accountName,

            ImmutableArray<Outputs.GetPoolAutoScaleResult> autoScales,

            ImmutableArray<Outputs.GetPoolCertificateResult> certificates,

            ImmutableArray<Outputs.GetPoolContainerConfigurationResult> containerConfigurations,

            string displayName,

            ImmutableArray<Outputs.GetPoolFixedScaleResult> fixedScales,

            string id,

            int maxTasksPerNode,

            ImmutableDictionary<string, string> metadata,

            string name,

            Outputs.GetPoolNetworkConfigurationResult networkConfiguration,

            string nodeAgentSkuId,

            string resourceGroupName,

            Outputs.GetPoolStartTaskResult? startTask,

            ImmutableArray<Outputs.GetPoolStorageImageReferenceResult> storageImageReferences,

            string vmSize)
        {
            AccountName = accountName;
            AutoScales = autoScales;
            Certificates = certificates;
            ContainerConfigurations = containerConfigurations;
            DisplayName = displayName;
            FixedScales = fixedScales;
            Id = id;
            MaxTasksPerNode = maxTasksPerNode;
            Metadata = metadata;
            Name = name;
            NetworkConfiguration = networkConfiguration;
            NodeAgentSkuId = nodeAgentSkuId;
            ResourceGroupName = resourceGroupName;
            StartTask = startTask;
            StorageImageReferences = storageImageReferences;
            VmSize = vmSize;
        }
    }
}
