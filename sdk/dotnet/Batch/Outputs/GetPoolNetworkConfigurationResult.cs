// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Batch.Outputs
{

    [OutputType]
    public sealed class GetPoolNetworkConfigurationResult
    {
        public readonly bool AcceleratedNetworkingEnabled;
        /// <summary>
        /// The scope of dynamic vnet assignment.
        /// </summary>
        public readonly string DynamicVnetAssignmentScope;
        /// <summary>
        /// The inbound NAT pools that are used to address specific ports on the individual compute node externally.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPoolNetworkConfigurationEndpointConfigurationResult> EndpointConfigurations;
        /// <summary>
        /// Type of public IP address provisioning.
        /// </summary>
        public readonly string PublicAddressProvisioningType;
        /// <summary>
        /// A list of public IP ids that will be allocated to nodes.
        /// </summary>
        public readonly ImmutableArray<string> PublicIps;
        /// <summary>
        /// The ARM resource identifier of the virtual network subnet which the compute nodes of the pool are joined too.
        /// </summary>
        public readonly string SubnetId;

        [OutputConstructor]
        private GetPoolNetworkConfigurationResult(
            bool acceleratedNetworkingEnabled,

            string dynamicVnetAssignmentScope,

            ImmutableArray<Outputs.GetPoolNetworkConfigurationEndpointConfigurationResult> endpointConfigurations,

            string publicAddressProvisioningType,

            ImmutableArray<string> publicIps,

            string subnetId)
        {
            AcceleratedNetworkingEnabled = acceleratedNetworkingEnabled;
            DynamicVnetAssignmentScope = dynamicVnetAssignmentScope;
            EndpointConfigurations = endpointConfigurations;
            PublicAddressProvisioningType = publicAddressProvisioningType;
            PublicIps = publicIps;
            SubnetId = subnetId;
        }
    }
}
