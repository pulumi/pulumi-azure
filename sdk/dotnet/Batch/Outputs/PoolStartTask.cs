// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Batch.Outputs
{

    [OutputType]
    public sealed class PoolStartTask
    {
        /// <summary>
        /// The command line executed by the start task.
        /// </summary>
        public readonly string CommandLine;
        /// <summary>
        /// A map of strings (key,value) that represents the environment variables to set in the start task.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? CommonEnvironmentProperties;
        /// <summary>
        /// A `container` block is the settings for the container under which the start task runs as defined below. When this is specified, all directories recursively below the `AZ_BATCH_NODE_ROOT_DIR` (the root of Azure Batch directories on the node) are mapped into the container, all task environment variables are mapped into the container, and the task command line is executed in the container.
        /// </summary>
        public readonly ImmutableArray<Outputs.PoolStartTaskContainer> Containers;
        /// <summary>
        /// One or more `resource_file` blocks that describe the files to be downloaded to a compute node as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.PoolStartTaskResourceFile> ResourceFiles;
        /// <summary>
        /// The number of retry count.
        /// </summary>
        public readonly int? TaskRetryMaximum;
        /// <summary>
        /// A `user_identity` block that describes the user identity under which the start task runs as defined below.
        /// </summary>
        public readonly Outputs.PoolStartTaskUserIdentity UserIdentity;
        /// <summary>
        /// A flag that indicates if the Batch pool should wait for the start task to be completed. Default to `false`.
        /// </summary>
        public readonly bool? WaitForSuccess;

        [OutputConstructor]
        private PoolStartTask(
            string commandLine,

            ImmutableDictionary<string, string>? commonEnvironmentProperties,

            ImmutableArray<Outputs.PoolStartTaskContainer> containers,

            ImmutableArray<Outputs.PoolStartTaskResourceFile> resourceFiles,

            int? taskRetryMaximum,

            Outputs.PoolStartTaskUserIdentity userIdentity,

            bool? waitForSuccess)
        {
            CommandLine = commandLine;
            CommonEnvironmentProperties = commonEnvironmentProperties;
            Containers = containers;
            ResourceFiles = resourceFiles;
            TaskRetryMaximum = taskRetryMaximum;
            UserIdentity = userIdentity;
            WaitForSuccess = waitForSuccess;
        }
    }
}
