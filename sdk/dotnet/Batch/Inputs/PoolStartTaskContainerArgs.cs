// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Batch.Inputs
{

    public sealed class PoolStartTaskContainerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The image to use to create the container in which the task will run. This is the full image reference, as would be specified to "docker pull". If no tag is provided as part of the image name, the tag ":latest" is used as a default.
        /// </summary>
        [Input("imageName", required: true)]
        public Input<string> ImageName { get; set; } = null!;

        [Input("registries")]
        private InputList<Inputs.PoolStartTaskContainerRegistryArgs>? _registries;

        /// <summary>
        /// The `container_registries` block defined as below.
        /// </summary>
        public InputList<Inputs.PoolStartTaskContainerRegistryArgs> Registries
        {
            get => _registries ?? (_registries = new InputList<Inputs.PoolStartTaskContainerRegistryArgs>());
            set => _registries = value;
        }

        /// <summary>
        /// Additional options to the container create command. These additional options are supplied as arguments to the "docker create" command, in addition to those controlled by the Batch Service.
        /// </summary>
        [Input("runOptions")]
        public Input<string>? RunOptions { get; set; }

        /// <summary>
        /// A flag to indicate where the container task working directory is. Possible values are `TaskWorkingDirectory` and `ContainerImageDefault`.
        /// </summary>
        [Input("workingDirectory")]
        public Input<string>? WorkingDirectory { get; set; }

        public PoolStartTaskContainerArgs()
        {
        }
        public static new PoolStartTaskContainerArgs Empty => new PoolStartTaskContainerArgs();
    }
}
