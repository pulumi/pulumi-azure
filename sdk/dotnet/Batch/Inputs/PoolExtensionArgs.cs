// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Batch.Inputs
{

    public sealed class PoolExtensionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.
        /// </summary>
        [Input("autoUpgradeMinorVersion")]
        public Input<bool>? AutoUpgradeMinorVersion { get; set; }

        /// <summary>
        /// Indicates whether the extension should be automatically upgraded by the platform if there is a newer version available. Supported values are `true` and `false`.
        /// 
        /// &gt; **NOTE:** When `automatic_upgrade_enabled` is set to `true`, the `type_handler_version` is automatically updated by the Azure platform when a new version is available and any change in `type_handler_version` should be manually ignored by user.
        /// </summary>
        [Input("automaticUpgradeEnabled")]
        public Input<bool>? AutomaticUpgradeEnabled { get; set; }

        /// <summary>
        /// The name of the virtual machine extension.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("protectedSettings")]
        private Input<string>? _protectedSettings;

        /// <summary>
        /// The extension can contain either `protected_settings` or `provision_after_extensions` or no protected settings at all.
        /// </summary>
        public Input<string>? ProtectedSettings
        {
            get => _protectedSettings;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _protectedSettings = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("provisionAfterExtensions")]
        private InputList<string>? _provisionAfterExtensions;

        /// <summary>
        /// The collection of extension names. Collection of extension names after which this extension needs to be provisioned.
        /// </summary>
        public InputList<string> ProvisionAfterExtensions
        {
            get => _provisionAfterExtensions ?? (_provisionAfterExtensions = new InputList<string>());
            set => _provisionAfterExtensions = value;
        }

        /// <summary>
        /// The name of the extension handler publisher.The name of the extension handler publisher.
        /// </summary>
        [Input("publisher", required: true)]
        public Input<string> Publisher { get; set; } = null!;

        /// <summary>
        /// JSON formatted public settings for the extension.
        /// </summary>
        [Input("settingsJson")]
        public Input<string>? SettingsJson { get; set; }

        /// <summary>
        /// The type of the extensions.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// The version of script handler.
        /// </summary>
        [Input("typeHandlerVersion")]
        public Input<string>? TypeHandlerVersion { get; set; }

        public PoolExtensionArgs()
        {
        }
        public static new PoolExtensionArgs Empty => new PoolExtensionArgs();
    }
}
