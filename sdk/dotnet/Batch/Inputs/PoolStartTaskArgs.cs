// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Batch.Inputs
{

    public sealed class PoolStartTaskArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The command line executed by the start task.
        /// </summary>
        [Input("commandLine", required: true)]
        public Input<string> CommandLine { get; set; } = null!;

        [Input("environment")]
        private InputMap<string>? _environment;

        /// <summary>
        /// A map of strings (key,value) that represents the environment variables to set in the start task.
        /// </summary>
        public InputMap<string> Environment
        {
            get => _environment ?? (_environment = new InputMap<string>());
            set => _environment = value;
        }

        /// <summary>
        /// The number of retry count. Defaults to `1`.
        /// </summary>
        [Input("maxTaskRetryCount")]
        public Input<int>? MaxTaskRetryCount { get; set; }

        [Input("resourceFiles")]
        private InputList<Inputs.PoolStartTaskResourceFileArgs>? _resourceFiles;

        /// <summary>
        /// One or more `resource_file` blocks that describe the files to be downloaded to a compute node.
        /// </summary>
        public InputList<Inputs.PoolStartTaskResourceFileArgs> ResourceFiles
        {
            get => _resourceFiles ?? (_resourceFiles = new InputList<Inputs.PoolStartTaskResourceFileArgs>());
            set => _resourceFiles = value;
        }

        /// <summary>
        /// A `user_identity` block that describes the user identity under which the start task runs.
        /// </summary>
        [Input("userIdentity", required: true)]
        public Input<Inputs.PoolStartTaskUserIdentityArgs> UserIdentity { get; set; } = null!;

        /// <summary>
        /// A flag that indicates if the Batch pool should wait for the start task to be completed. Default to `false`.
        /// </summary>
        [Input("waitForSuccess")]
        public Input<bool>? WaitForSuccess { get; set; }

        public PoolStartTaskArgs()
        {
        }
    }
}
