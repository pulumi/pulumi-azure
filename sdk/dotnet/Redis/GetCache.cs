// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Redis
{
    public static partial class Invokes
    {
        /// <summary>
        /// Use this data source to access information about an existing Redis Cache
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/d/redis_cache.html.markdown.
        /// </summary>
        public static Task<GetCacheResult> GetCache(GetCacheArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetCacheResult>("azure:redis/getCache:getCache", args, options.WithVersion());
    }

    public sealed class GetCacheArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the Redis cache
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of the resource group the Redis cache instance is located in.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("zones")]
        private InputList<string>? _zones;
        public InputList<string> Zones
        {
            get => _zones ?? (_zones = new InputList<string>());
            set => _zones = value;
        }

        public GetCacheArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetCacheResult
    {
        /// <summary>
        /// The size of the Redis Cache deployed.
        /// </summary>
        public readonly int Capacity;
        /// <summary>
        /// Whether the SSL port is enabled.
        /// </summary>
        public readonly bool EnableNonSslPort;
        /// <summary>
        /// The SKU family/pricing group used. Possible values are `C` (for Basic/Standard SKU family) and `P` (for `Premium`)
        /// </summary>
        public readonly string Family;
        /// <summary>
        /// The Hostname of the Redis Instance
        /// </summary>
        public readonly string Hostname;
        /// <summary>
        /// The location of the Redis Cache.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The minimum TLS version.
        /// </summary>
        public readonly string MinimumTlsVersion;
        public readonly string Name;
        /// <summary>
        /// A list of `patch_schedule` blocks as defined below - only available for Premium SKU's.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCachePatchSchedulesResult> PatchSchedules;
        /// <summary>
        /// The non-SSL Port of the Redis Instance
        /// </summary>
        public readonly int Port;
        /// <summary>
        /// The Primary Access Key for the Redis Instance
        /// </summary>
        public readonly string PrimaryAccessKey;
        public readonly string PrivateStaticIpAddress;
        /// <summary>
        /// A `redis_configuration` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCacheRedisConfigurationsResult> RedisConfigurations;
        public readonly string ResourceGroupName;
        /// <summary>
        /// The Secondary Access Key for the Redis Instance
        /// </summary>
        public readonly string SecondaryAccessKey;
        public readonly int ShardCount;
        /// <summary>
        /// The SKU of Redis used. Possible values are `Basic`, `Standard` and `Premium`.
        /// </summary>
        public readonly string SkuName;
        /// <summary>
        /// The SSL Port of the Redis Instance
        /// </summary>
        public readonly int SslPort;
        public readonly string SubnetId;
        public readonly ImmutableDictionary<string, string> Tags;
        public readonly ImmutableArray<string> Zones;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetCacheResult(
            int capacity,
            bool enableNonSslPort,
            string family,
            string hostname,
            string location,
            string minimumTlsVersion,
            string name,
            ImmutableArray<Outputs.GetCachePatchSchedulesResult> patchSchedules,
            int port,
            string primaryAccessKey,
            string privateStaticIpAddress,
            ImmutableArray<Outputs.GetCacheRedisConfigurationsResult> redisConfigurations,
            string resourceGroupName,
            string secondaryAccessKey,
            int shardCount,
            string skuName,
            int sslPort,
            string subnetId,
            ImmutableDictionary<string, string> tags,
            ImmutableArray<string> zones,
            string id)
        {
            Capacity = capacity;
            EnableNonSslPort = enableNonSslPort;
            Family = family;
            Hostname = hostname;
            Location = location;
            MinimumTlsVersion = minimumTlsVersion;
            Name = name;
            PatchSchedules = patchSchedules;
            Port = port;
            PrimaryAccessKey = primaryAccessKey;
            PrivateStaticIpAddress = privateStaticIpAddress;
            RedisConfigurations = redisConfigurations;
            ResourceGroupName = resourceGroupName;
            SecondaryAccessKey = secondaryAccessKey;
            ShardCount = shardCount;
            SkuName = skuName;
            SslPort = sslPort;
            SubnetId = subnetId;
            Tags = tags;
            Zones = zones;
            Id = id;
        }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class GetCachePatchSchedulesResult
    {
        /// <summary>
        /// the Weekday name for the patch item
        /// </summary>
        public readonly string DayOfWeek;
        /// <summary>
        /// The Start Hour for maintenance in UTC
        /// </summary>
        public readonly int StartHourUtc;

        [OutputConstructor]
        private GetCachePatchSchedulesResult(
            string dayOfWeek,
            int startHourUtc)
        {
            DayOfWeek = dayOfWeek;
            StartHourUtc = startHourUtc;
        }
    }

    [OutputType]
    public sealed class GetCacheRedisConfigurationsResult
    {
        public readonly bool AofBackupEnabled;
        public readonly string AofStorageConnectionString0;
        public readonly string AofStorageConnectionString1;
        /// <summary>
        /// Specifies if authentication is enabled
        /// </summary>
        public readonly bool EnableAuthentication;
        public readonly int Maxclients;
        /// <summary>
        /// Value in megabytes reserved to accommodate for memory fragmentation.
        /// </summary>
        public readonly int MaxfragmentationmemoryReserved;
        /// <summary>
        /// The max-memory delta for this Redis instance.
        /// </summary>
        public readonly int MaxmemoryDelta;
        /// <summary>
        /// How Redis will select what to remove when `maxmemory` is reached.
        /// </summary>
        public readonly string MaxmemoryPolicy;
        /// <summary>
        /// The value in megabytes reserved for non-cache usage e.g. failover
        /// </summary>
        public readonly int MaxmemoryReserved;
        public readonly string NotifyKeyspaceEvents;
        /// <summary>
        /// Is Backup Enabled? Only supported on Premium SKU's.
        /// </summary>
        public readonly bool RdbBackupEnabled;
        /// <summary>
        /// The Backup Frequency in Minutes. Only supported on Premium SKU's.
        /// </summary>
        public readonly int RdbBackupFrequency;
        /// <summary>
        /// The maximum number of snapshots that can be created as a backup.
        /// </summary>
        public readonly int RdbBackupMaxSnapshotCount;
        /// <summary>
        /// The Connection String to the Storage Account. Only supported for Premium SKU's.
        /// </summary>
        public readonly string RdbStorageConnectionString;

        [OutputConstructor]
        private GetCacheRedisConfigurationsResult(
            bool aofBackupEnabled,
            string aofStorageConnectionString0,
            string aofStorageConnectionString1,
            bool enableAuthentication,
            int maxclients,
            int maxfragmentationmemoryReserved,
            int maxmemoryDelta,
            string maxmemoryPolicy,
            int maxmemoryReserved,
            string notifyKeyspaceEvents,
            bool rdbBackupEnabled,
            int rdbBackupFrequency,
            int rdbBackupMaxSnapshotCount,
            string rdbStorageConnectionString)
        {
            AofBackupEnabled = aofBackupEnabled;
            AofStorageConnectionString0 = aofStorageConnectionString0;
            AofStorageConnectionString1 = aofStorageConnectionString1;
            EnableAuthentication = enableAuthentication;
            Maxclients = maxclients;
            MaxfragmentationmemoryReserved = maxfragmentationmemoryReserved;
            MaxmemoryDelta = maxmemoryDelta;
            MaxmemoryPolicy = maxmemoryPolicy;
            MaxmemoryReserved = maxmemoryReserved;
            NotifyKeyspaceEvents = notifyKeyspaceEvents;
            RdbBackupEnabled = rdbBackupEnabled;
            RdbBackupFrequency = rdbBackupFrequency;
            RdbBackupMaxSnapshotCount = rdbBackupMaxSnapshotCount;
            RdbStorageConnectionString = rdbStorageConnectionString;
        }
    }
    }
}
