// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Redis
{
    public static class GetCache
    {
        /// <summary>
        /// Use this data source to access information about an existing Redis Cache
        /// </summary>
        public static Task<GetCacheResult> InvokeAsync(GetCacheArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetCacheResult>("azure:redis/getCache:getCache", args ?? new GetCacheArgs(), options.WithVersion());
    }


    public sealed class GetCacheArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Redis cache
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the resource group the Redis cache instance is located in.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        [Input("zones")]
        private List<string>? _zones;
        public List<string> Zones
        {
            get => _zones ?? (_zones = new List<string>());
            set => _zones = value;
        }

        public GetCacheArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetCacheResult
    {
        /// <summary>
        /// The size of the Redis Cache deployed.
        /// </summary>
        public readonly int Capacity;
        /// <summary>
        /// Whether the SSL port is enabled.
        /// </summary>
        public readonly bool EnableNonSslPort;
        /// <summary>
        /// The SKU family/pricing group used. Possible values are `C` (for Basic/Standard SKU family) and `P` (for `Premium`)
        /// </summary>
        public readonly string Family;
        /// <summary>
        /// The Hostname of the Redis Instance
        /// </summary>
        public readonly string Hostname;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The location of the Redis Cache.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The minimum TLS version.
        /// </summary>
        public readonly string MinimumTlsVersion;
        public readonly string Name;
        /// <summary>
        /// A list of `patch_schedule` blocks as defined below - only available for Premium SKU's.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCachePatchScheduleResult> PatchSchedules;
        /// <summary>
        /// The non-SSL Port of the Redis Instance
        /// </summary>
        public readonly int Port;
        /// <summary>
        /// The Primary Access Key for the Redis Instance
        /// </summary>
        public readonly string PrimaryAccessKey;
        /// <summary>
        /// The primary connection string of the Redis Instance.
        /// </summary>
        public readonly string PrimaryConnectionString;
        public readonly string PrivateStaticIpAddress;
        /// <summary>
        /// A `redis_configuration` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCacheRedisConfigurationResult> RedisConfigurations;
        public readonly string ResourceGroupName;
        /// <summary>
        /// The Secondary Access Key for the Redis Instance
        /// </summary>
        public readonly string SecondaryAccessKey;
        /// <summary>
        /// The secondary connection string of the Redis Instance.
        /// </summary>
        public readonly string SecondaryConnectionString;
        public readonly int ShardCount;
        /// <summary>
        /// The SKU of Redis used. Possible values are `Basic`, `Standard` and `Premium`.
        /// </summary>
        public readonly string SkuName;
        /// <summary>
        /// The SSL Port of the Redis Instance
        /// </summary>
        public readonly int SslPort;
        public readonly string SubnetId;
        public readonly ImmutableDictionary<string, string> Tags;
        public readonly ImmutableArray<string> Zones;

        [OutputConstructor]
        private GetCacheResult(
            int capacity,

            bool enableNonSslPort,

            string family,

            string hostname,

            string id,

            string location,

            string minimumTlsVersion,

            string name,

            ImmutableArray<Outputs.GetCachePatchScheduleResult> patchSchedules,

            int port,

            string primaryAccessKey,

            string primaryConnectionString,

            string privateStaticIpAddress,

            ImmutableArray<Outputs.GetCacheRedisConfigurationResult> redisConfigurations,

            string resourceGroupName,

            string secondaryAccessKey,

            string secondaryConnectionString,

            int shardCount,

            string skuName,

            int sslPort,

            string subnetId,

            ImmutableDictionary<string, string> tags,

            ImmutableArray<string> zones)
        {
            Capacity = capacity;
            EnableNonSslPort = enableNonSslPort;
            Family = family;
            Hostname = hostname;
            Id = id;
            Location = location;
            MinimumTlsVersion = minimumTlsVersion;
            Name = name;
            PatchSchedules = patchSchedules;
            Port = port;
            PrimaryAccessKey = primaryAccessKey;
            PrimaryConnectionString = primaryConnectionString;
            PrivateStaticIpAddress = privateStaticIpAddress;
            RedisConfigurations = redisConfigurations;
            ResourceGroupName = resourceGroupName;
            SecondaryAccessKey = secondaryAccessKey;
            SecondaryConnectionString = secondaryConnectionString;
            ShardCount = shardCount;
            SkuName = skuName;
            SslPort = sslPort;
            SubnetId = subnetId;
            Tags = tags;
            Zones = zones;
        }
    }
}
