// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Redis
{
    /// <summary>
    /// Manages a Redis Cache Access Policy Assignment
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = Azure.Core.GetClientConfig.Invoke();
    /// 
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Name = "example-resources",
    ///         Location = "East US",
    ///     });
    /// 
    ///     var exampleCache = new Azure.Redis.Cache("example", new()
    ///     {
    ///         Name = "example",
    ///         Location = example.Location,
    ///         ResourceGroupName = example.Name,
    ///         Capacity = 1,
    ///         Family = "P",
    ///         SkuName = "Premium",
    ///         EnableNonSslPort = false,
    ///         RedisConfiguration = new Azure.Redis.Inputs.CacheRedisConfigurationArgs
    ///         {
    ///             MaxmemoryReserved = 2,
    ///             MaxmemoryDelta = 2,
    ///             MaxmemoryPolicy = "allkeys-lru",
    ///         },
    ///     });
    /// 
    ///     var exampleCacheAccessPolicyAssignment = new Azure.Redis.CacheAccessPolicyAssignment("example", new()
    ///     {
    ///         Name = "example",
    ///         RedisCacheId = exampleCache.Id,
    ///         AccessPolicyName = "Data Contributor",
    ///         ObjectId = test.Apply(getClientConfigResult =&gt; getClientConfigResult.ObjectId),
    ///         ObjectIdAlias = "ServicePrincipal",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// Redis Cache Policy Assignment can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:redis/cacheAccessPolicyAssignment:CacheAccessPolicyAssignment example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Cache/redis/cache1/accessPolicyAssignments/assignment1
    /// ```
    /// </summary>
    [AzureResourceType("azure:redis/cacheAccessPolicyAssignment:CacheAccessPolicyAssignment")]
    public partial class CacheAccessPolicyAssignment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the Access Policy to be assigned. Changing this forces a new Redis Cache Access Policy Assignment to be created.
        /// </summary>
        [Output("accessPolicyName")]
        public Output<string> AccessPolicyName { get; private set; } = null!;

        /// <summary>
        /// The name of the Redis Cache Access Policy Assignment. Changing this forces a new Redis Cache Access Policy Assignment to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The principal ID to be assigned the Access Policy. Changing this forces a new Redis Cache Access Policy Assignment to be created.
        /// </summary>
        [Output("objectId")]
        public Output<string> ObjectId { get; private set; } = null!;

        /// <summary>
        /// The alias of the principal ID. User-friendly name for object ID. Also represents username for token based authentication. Changing this forces a new Redis Cache Access Policy Assignment to be created.
        /// </summary>
        [Output("objectIdAlias")]
        public Output<string> ObjectIdAlias { get; private set; } = null!;

        /// <summary>
        /// The ID of the Redis Cache. Changing this forces a new Redis Cache Access Policy Assignment to be created.
        /// </summary>
        [Output("redisCacheId")]
        public Output<string> RedisCacheId { get; private set; } = null!;


        /// <summary>
        /// Create a CacheAccessPolicyAssignment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CacheAccessPolicyAssignment(string name, CacheAccessPolicyAssignmentArgs args, CustomResourceOptions? options = null)
            : base("azure:redis/cacheAccessPolicyAssignment:CacheAccessPolicyAssignment", name, args ?? new CacheAccessPolicyAssignmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CacheAccessPolicyAssignment(string name, Input<string> id, CacheAccessPolicyAssignmentState? state = null, CustomResourceOptions? options = null)
            : base("azure:redis/cacheAccessPolicyAssignment:CacheAccessPolicyAssignment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CacheAccessPolicyAssignment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CacheAccessPolicyAssignment Get(string name, Input<string> id, CacheAccessPolicyAssignmentState? state = null, CustomResourceOptions? options = null)
        {
            return new CacheAccessPolicyAssignment(name, id, state, options);
        }
    }

    public sealed class CacheAccessPolicyAssignmentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the Access Policy to be assigned. Changing this forces a new Redis Cache Access Policy Assignment to be created.
        /// </summary>
        [Input("accessPolicyName", required: true)]
        public Input<string> AccessPolicyName { get; set; } = null!;

        /// <summary>
        /// The name of the Redis Cache Access Policy Assignment. Changing this forces a new Redis Cache Access Policy Assignment to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The principal ID to be assigned the Access Policy. Changing this forces a new Redis Cache Access Policy Assignment to be created.
        /// </summary>
        [Input("objectId", required: true)]
        public Input<string> ObjectId { get; set; } = null!;

        /// <summary>
        /// The alias of the principal ID. User-friendly name for object ID. Also represents username for token based authentication. Changing this forces a new Redis Cache Access Policy Assignment to be created.
        /// </summary>
        [Input("objectIdAlias", required: true)]
        public Input<string> ObjectIdAlias { get; set; } = null!;

        /// <summary>
        /// The ID of the Redis Cache. Changing this forces a new Redis Cache Access Policy Assignment to be created.
        /// </summary>
        [Input("redisCacheId", required: true)]
        public Input<string> RedisCacheId { get; set; } = null!;

        public CacheAccessPolicyAssignmentArgs()
        {
        }
        public static new CacheAccessPolicyAssignmentArgs Empty => new CacheAccessPolicyAssignmentArgs();
    }

    public sealed class CacheAccessPolicyAssignmentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the Access Policy to be assigned. Changing this forces a new Redis Cache Access Policy Assignment to be created.
        /// </summary>
        [Input("accessPolicyName")]
        public Input<string>? AccessPolicyName { get; set; }

        /// <summary>
        /// The name of the Redis Cache Access Policy Assignment. Changing this forces a new Redis Cache Access Policy Assignment to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The principal ID to be assigned the Access Policy. Changing this forces a new Redis Cache Access Policy Assignment to be created.
        /// </summary>
        [Input("objectId")]
        public Input<string>? ObjectId { get; set; }

        /// <summary>
        /// The alias of the principal ID. User-friendly name for object ID. Also represents username for token based authentication. Changing this forces a new Redis Cache Access Policy Assignment to be created.
        /// </summary>
        [Input("objectIdAlias")]
        public Input<string>? ObjectIdAlias { get; set; }

        /// <summary>
        /// The ID of the Redis Cache. Changing this forces a new Redis Cache Access Policy Assignment to be created.
        /// </summary>
        [Input("redisCacheId")]
        public Input<string>? RedisCacheId { get; set; }

        public CacheAccessPolicyAssignmentState()
        {
        }
        public static new CacheAccessPolicyAssignmentState Empty => new CacheAccessPolicyAssignmentState();
    }
}
