// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Redis
{
    /// <summary>
    /// Manages a Redis Enterprise Database.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleEnterpriseCluster = new Azure.Redis.EnterpriseCluster("exampleEnterpriseCluster", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         SkuName = "Enterprise_E20-4",
    ///     });
    /// 
    ///     var example1 = new Azure.Redis.EnterpriseCluster("example1", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         SkuName = "Enterprise_E20-4",
    ///     });
    /// 
    ///     var exampleEnterpriseDatabase = new Azure.Redis.EnterpriseDatabase("exampleEnterpriseDatabase", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         ClusterId = exampleEnterpriseCluster.Id,
    ///         ClientProtocol = "Encrypted",
    ///         ClusteringPolicy = "EnterpriseCluster",
    ///         EvictionPolicy = "NoEviction",
    ///         Port = 10000,
    ///         LinkedDatabaseIds = new[]
    ///         {
    ///             exampleEnterpriseCluster.Id.Apply(id =&gt; $"{id}/databases/default"),
    ///             example1.Id.Apply(id =&gt; $"{id}/databases/default"),
    ///         },
    ///         LinkedDatabaseGroupNickname = "tftestGeoGroup",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Redis Enterprise Databases can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:redis/enterpriseDatabase:EnterpriseDatabase example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Cache/redisEnterprise/cluster1/databases/database1
    /// ```
    /// </summary>
    [AzureResourceType("azure:redis/enterpriseDatabase:EnterpriseDatabase")]
    public partial class EnterpriseDatabase : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies whether redis clients can connect using TLS-encrypted or plaintext redis protocols. Possible values are `Encrypted` and `Plaintext`. Defaults to `Encrypted`. Changing this forces a new Redis Enterprise Database to be created.
        /// </summary>
        [Output("clientProtocol")]
        public Output<string?> ClientProtocol { get; private set; } = null!;

        /// <summary>
        /// The resource id of the Redis Enterprise Cluster to deploy this Redis Enterprise Database. Changing this forces a new Redis Enterprise Database to be created.
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// Clustering policy Specified at create time. Possible values are `EnterpriseCluster` and `OSSCluster`. Defaults to `OSSCluster`. Changing this forces a new Redis Enterprise Database to be created.
        /// </summary>
        [Output("clusteringPolicy")]
        public Output<string?> ClusteringPolicy { get; private set; } = null!;

        /// <summary>
        /// Redis eviction policy possible values are `AllKeysLFU`, `AllKeysLRU`, `AllKeysRandom`, `VolatileLRU`, `VolatileLFU`, `VolatileTTL`, `VolatileRandom` and `NoEviction`. Changing this forces a new Redis Enterprise Database to be created. Defaults to `VolatileLRU`.
        /// </summary>
        [Output("evictionPolicy")]
        public Output<string?> EvictionPolicy { get; private set; } = null!;

        /// <summary>
        /// Nickname of the group of linked databases. Changing this force a new Redis Enterprise Geo Database to be created.
        /// </summary>
        [Output("linkedDatabaseGroupNickname")]
        public Output<string?> LinkedDatabaseGroupNickname { get; private set; } = null!;

        /// <summary>
        /// A list of database resources to link with this database with a maximum of 5.
        /// 
        /// &gt; **NOTE:** Only the newly created databases can be added to an existing geo-replication group. Existing regular databases or recreated databases cannot be added to the existing geo-replication group. Any linked database be removed from the list will be forcefully unlinked.The only recommended operation is to delete after force-unlink and the recommended scenario of force-unlink is region outrage. The database cannot be linked again after force-unlink.
        /// </summary>
        [Output("linkedDatabaseIds")]
        public Output<ImmutableArray<string>> LinkedDatabaseIds { get; private set; } = null!;

        /// <summary>
        /// A `module` block as defined below. Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE:** Only `RediSearch` and `RedisJSON` modules are allowed with geo-replication
        /// </summary>
        [Output("modules")]
        public Output<ImmutableArray<Outputs.EnterpriseDatabaseModule>> Modules { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Redis Enterprise Database. Currently the acceptable value for this argument is `default`. Defaults to `default`. Changing this forces a new Redis Enterprise Database to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// TCP port of the database endpoint. Specified at create time. Defaults to an available port. Changing this forces a new Redis Enterprise Database to be created. Defaults to `10000`.
        /// </summary>
        [Output("port")]
        public Output<int?> Port { get; private set; } = null!;

        /// <summary>
        /// The Primary Access Key for the Redis Enterprise Database Instance.
        /// </summary>
        [Output("primaryAccessKey")]
        public Output<string> PrimaryAccessKey { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Redis Enterprise Database should exist. Changing this forces a new Redis Enterprise Database to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// The Secondary Access Key for the Redis Enterprise Database Instance.
        /// </summary>
        [Output("secondaryAccessKey")]
        public Output<string> SecondaryAccessKey { get; private set; } = null!;


        /// <summary>
        /// Create a EnterpriseDatabase resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EnterpriseDatabase(string name, EnterpriseDatabaseArgs args, CustomResourceOptions? options = null)
            : base("azure:redis/enterpriseDatabase:EnterpriseDatabase", name, args ?? new EnterpriseDatabaseArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EnterpriseDatabase(string name, Input<string> id, EnterpriseDatabaseState? state = null, CustomResourceOptions? options = null)
            : base("azure:redis/enterpriseDatabase:EnterpriseDatabase", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "primaryAccessKey",
                    "secondaryAccessKey",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EnterpriseDatabase resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EnterpriseDatabase Get(string name, Input<string> id, EnterpriseDatabaseState? state = null, CustomResourceOptions? options = null)
        {
            return new EnterpriseDatabase(name, id, state, options);
        }
    }

    public sealed class EnterpriseDatabaseArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies whether redis clients can connect using TLS-encrypted or plaintext redis protocols. Possible values are `Encrypted` and `Plaintext`. Defaults to `Encrypted`. Changing this forces a new Redis Enterprise Database to be created.
        /// </summary>
        [Input("clientProtocol")]
        public Input<string>? ClientProtocol { get; set; }

        /// <summary>
        /// The resource id of the Redis Enterprise Cluster to deploy this Redis Enterprise Database. Changing this forces a new Redis Enterprise Database to be created.
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        /// <summary>
        /// Clustering policy Specified at create time. Possible values are `EnterpriseCluster` and `OSSCluster`. Defaults to `OSSCluster`. Changing this forces a new Redis Enterprise Database to be created.
        /// </summary>
        [Input("clusteringPolicy")]
        public Input<string>? ClusteringPolicy { get; set; }

        /// <summary>
        /// Redis eviction policy possible values are `AllKeysLFU`, `AllKeysLRU`, `AllKeysRandom`, `VolatileLRU`, `VolatileLFU`, `VolatileTTL`, `VolatileRandom` and `NoEviction`. Changing this forces a new Redis Enterprise Database to be created. Defaults to `VolatileLRU`.
        /// </summary>
        [Input("evictionPolicy")]
        public Input<string>? EvictionPolicy { get; set; }

        /// <summary>
        /// Nickname of the group of linked databases. Changing this force a new Redis Enterprise Geo Database to be created.
        /// </summary>
        [Input("linkedDatabaseGroupNickname")]
        public Input<string>? LinkedDatabaseGroupNickname { get; set; }

        [Input("linkedDatabaseIds")]
        private InputList<string>? _linkedDatabaseIds;

        /// <summary>
        /// A list of database resources to link with this database with a maximum of 5.
        /// 
        /// &gt; **NOTE:** Only the newly created databases can be added to an existing geo-replication group. Existing regular databases or recreated databases cannot be added to the existing geo-replication group. Any linked database be removed from the list will be forcefully unlinked.The only recommended operation is to delete after force-unlink and the recommended scenario of force-unlink is region outrage. The database cannot be linked again after force-unlink.
        /// </summary>
        public InputList<string> LinkedDatabaseIds
        {
            get => _linkedDatabaseIds ?? (_linkedDatabaseIds = new InputList<string>());
            set => _linkedDatabaseIds = value;
        }

        [Input("modules")]
        private InputList<Inputs.EnterpriseDatabaseModuleArgs>? _modules;

        /// <summary>
        /// A `module` block as defined below. Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE:** Only `RediSearch` and `RedisJSON` modules are allowed with geo-replication
        /// </summary>
        public InputList<Inputs.EnterpriseDatabaseModuleArgs> Modules
        {
            get => _modules ?? (_modules = new InputList<Inputs.EnterpriseDatabaseModuleArgs>());
            set => _modules = value;
        }

        /// <summary>
        /// The name which should be used for this Redis Enterprise Database. Currently the acceptable value for this argument is `default`. Defaults to `default`. Changing this forces a new Redis Enterprise Database to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// TCP port of the database endpoint. Specified at create time. Defaults to an available port. Changing this forces a new Redis Enterprise Database to be created. Defaults to `10000`.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Redis Enterprise Database should exist. Changing this forces a new Redis Enterprise Database to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        public EnterpriseDatabaseArgs()
        {
        }
        public static new EnterpriseDatabaseArgs Empty => new EnterpriseDatabaseArgs();
    }

    public sealed class EnterpriseDatabaseState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies whether redis clients can connect using TLS-encrypted or plaintext redis protocols. Possible values are `Encrypted` and `Plaintext`. Defaults to `Encrypted`. Changing this forces a new Redis Enterprise Database to be created.
        /// </summary>
        [Input("clientProtocol")]
        public Input<string>? ClientProtocol { get; set; }

        /// <summary>
        /// The resource id of the Redis Enterprise Cluster to deploy this Redis Enterprise Database. Changing this forces a new Redis Enterprise Database to be created.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// Clustering policy Specified at create time. Possible values are `EnterpriseCluster` and `OSSCluster`. Defaults to `OSSCluster`. Changing this forces a new Redis Enterprise Database to be created.
        /// </summary>
        [Input("clusteringPolicy")]
        public Input<string>? ClusteringPolicy { get; set; }

        /// <summary>
        /// Redis eviction policy possible values are `AllKeysLFU`, `AllKeysLRU`, `AllKeysRandom`, `VolatileLRU`, `VolatileLFU`, `VolatileTTL`, `VolatileRandom` and `NoEviction`. Changing this forces a new Redis Enterprise Database to be created. Defaults to `VolatileLRU`.
        /// </summary>
        [Input("evictionPolicy")]
        public Input<string>? EvictionPolicy { get; set; }

        /// <summary>
        /// Nickname of the group of linked databases. Changing this force a new Redis Enterprise Geo Database to be created.
        /// </summary>
        [Input("linkedDatabaseGroupNickname")]
        public Input<string>? LinkedDatabaseGroupNickname { get; set; }

        [Input("linkedDatabaseIds")]
        private InputList<string>? _linkedDatabaseIds;

        /// <summary>
        /// A list of database resources to link with this database with a maximum of 5.
        /// 
        /// &gt; **NOTE:** Only the newly created databases can be added to an existing geo-replication group. Existing regular databases or recreated databases cannot be added to the existing geo-replication group. Any linked database be removed from the list will be forcefully unlinked.The only recommended operation is to delete after force-unlink and the recommended scenario of force-unlink is region outrage. The database cannot be linked again after force-unlink.
        /// </summary>
        public InputList<string> LinkedDatabaseIds
        {
            get => _linkedDatabaseIds ?? (_linkedDatabaseIds = new InputList<string>());
            set => _linkedDatabaseIds = value;
        }

        [Input("modules")]
        private InputList<Inputs.EnterpriseDatabaseModuleGetArgs>? _modules;

        /// <summary>
        /// A `module` block as defined below. Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE:** Only `RediSearch` and `RedisJSON` modules are allowed with geo-replication
        /// </summary>
        public InputList<Inputs.EnterpriseDatabaseModuleGetArgs> Modules
        {
            get => _modules ?? (_modules = new InputList<Inputs.EnterpriseDatabaseModuleGetArgs>());
            set => _modules = value;
        }

        /// <summary>
        /// The name which should be used for this Redis Enterprise Database. Currently the acceptable value for this argument is `default`. Defaults to `default`. Changing this forces a new Redis Enterprise Database to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// TCP port of the database endpoint. Specified at create time. Defaults to an available port. Changing this forces a new Redis Enterprise Database to be created. Defaults to `10000`.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        [Input("primaryAccessKey")]
        private Input<string>? _primaryAccessKey;

        /// <summary>
        /// The Primary Access Key for the Redis Enterprise Database Instance.
        /// </summary>
        public Input<string>? PrimaryAccessKey
        {
            get => _primaryAccessKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _primaryAccessKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The name of the Resource Group where the Redis Enterprise Database should exist. Changing this forces a new Redis Enterprise Database to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        [Input("secondaryAccessKey")]
        private Input<string>? _secondaryAccessKey;

        /// <summary>
        /// The Secondary Access Key for the Redis Enterprise Database Instance.
        /// </summary>
        public Input<string>? SecondaryAccessKey
        {
            get => _secondaryAccessKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secondaryAccessKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public EnterpriseDatabaseState()
        {
        }
        public static new EnterpriseDatabaseState Empty => new EnterpriseDatabaseState();
    }
}
