// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Redis
{
    public static class GetEnterpriseDatabase
    {
        /// <summary>
        /// Use this data source to access information about an existing Redis Enterprise Database
        /// 
        /// ## Example Usage
        /// 
        /// 
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Microsoft.Cache` - 2024-10-01
        /// </summary>
        public static Task<GetEnterpriseDatabaseResult> InvokeAsync(GetEnterpriseDatabaseArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEnterpriseDatabaseResult>("azure:redis/getEnterpriseDatabase:getEnterpriseDatabase", args ?? new GetEnterpriseDatabaseArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Redis Enterprise Database
        /// 
        /// ## Example Usage
        /// 
        /// 
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Microsoft.Cache` - 2024-10-01
        /// </summary>
        public static Output<GetEnterpriseDatabaseResult> Invoke(GetEnterpriseDatabaseInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEnterpriseDatabaseResult>("azure:redis/getEnterpriseDatabase:getEnterpriseDatabase", args ?? new GetEnterpriseDatabaseInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Redis Enterprise Database
        /// 
        /// ## Example Usage
        /// 
        /// 
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Microsoft.Cache` - 2024-10-01
        /// </summary>
        public static Output<GetEnterpriseDatabaseResult> Invoke(GetEnterpriseDatabaseInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetEnterpriseDatabaseResult>("azure:redis/getEnterpriseDatabase:getEnterpriseDatabase", args ?? new GetEnterpriseDatabaseInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEnterpriseDatabaseArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The resource ID of Redis Enterprise Cluster which hosts the Redis Enterprise Database instance.
        /// </summary>
        [Input("clusterId", required: true)]
        public string ClusterId { get; set; } = null!;

        /// <summary>
        /// The name of the Redis Enterprise Database.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetEnterpriseDatabaseArgs()
        {
        }
        public static new GetEnterpriseDatabaseArgs Empty => new GetEnterpriseDatabaseArgs();
    }

    public sealed class GetEnterpriseDatabaseInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The resource ID of Redis Enterprise Cluster which hosts the Redis Enterprise Database instance.
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        /// <summary>
        /// The name of the Redis Enterprise Database.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetEnterpriseDatabaseInvokeArgs()
        {
        }
        public static new GetEnterpriseDatabaseInvokeArgs Empty => new GetEnterpriseDatabaseInvokeArgs();
    }


    [OutputType]
    public sealed class GetEnterpriseDatabaseResult
    {
        /// <summary>
        /// The Redis Enterprise Cluster ID that is hosting the Redis Enterprise Database.
        /// </summary>
        public readonly string ClusterId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The Linked Database Group Nickname for the Redis Enterprise Database instance.
        /// </summary>
        public readonly string LinkedDatabaseGroupNickname;
        /// <summary>
        /// The Linked Database list for the Redis Enterprise Database instance.
        /// </summary>
        public readonly ImmutableArray<string> LinkedDatabaseIds;
        /// <summary>
        /// The Redis Enterprise Database name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The Primary Access Key for the Redis Enterprise Database instance.
        /// </summary>
        public readonly string PrimaryAccessKey;
        /// <summary>
        /// The Secondary Access Key for the Redis Enterprise Database instance.
        /// </summary>
        public readonly string SecondaryAccessKey;

        [OutputConstructor]
        private GetEnterpriseDatabaseResult(
            string clusterId,

            string id,

            string linkedDatabaseGroupNickname,

            ImmutableArray<string> linkedDatabaseIds,

            string name,

            string primaryAccessKey,

            string secondaryAccessKey)
        {
            ClusterId = clusterId;
            Id = id;
            LinkedDatabaseGroupNickname = linkedDatabaseGroupNickname;
            LinkedDatabaseIds = linkedDatabaseIds;
            Name = name;
            PrimaryAccessKey = primaryAccessKey;
            SecondaryAccessKey = secondaryAccessKey;
        }
    }
}
