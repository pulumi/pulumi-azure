// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Redis
{
    /// <summary>
    /// Manages a Firewall Rule associated with a Redis Cache.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// using Random = Pulumi.Random;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var server = new Random.RandomId("server", new Random.RandomIdArgs
    ///         {
    ///             Keepers = 
    ///             {
    ///                 { "azi_id", 1 },
    ///             },
    ///             ByteLength = 8,
    ///         });
    ///         var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new Azure.Core.ResourceGroupArgs
    ///         {
    ///             Location = "West Europe",
    ///         });
    ///         var exampleCache = new Azure.Redis.Cache("exampleCache", new Azure.Redis.CacheArgs
    ///         {
    ///             Location = exampleResourceGroup.Location,
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             Capacity = 1,
    ///             Family = "P",
    ///             SkuName = "Premium",
    ///             EnableNonSslPort = false,
    ///             RedisConfiguration = new Azure.Redis.Inputs.CacheRedisConfigurationArgs
    ///             {
    ///                 Maxclients = 256,
    ///                 MaxmemoryReserved = 2,
    ///                 MaxmemoryDelta = 2,
    ///                 MaxmemoryPolicy = "allkeys-lru",
    ///             },
    ///         });
    ///         var exampleFirewallRule = new Azure.Redis.FirewallRule("exampleFirewallRule", new Azure.Redis.FirewallRuleArgs
    ///         {
    ///             RedisCacheName = exampleCache.Name,
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             StartIp = "1.2.3.4",
    ///             EndIp = "2.3.4.5",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Redis Firewall Rules can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:redis/firewallRule:FirewallRule rule1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Cache/Redis/cache1/firewallRules/rule1
    /// ```
    /// </summary>
    public partial class FirewallRule : Pulumi.CustomResource
    {
        /// <summary>
        /// The highest IP address included in the range.
        /// </summary>
        [Output("endIp")]
        public Output<string> EndIp { get; private set; } = null!;

        /// <summary>
        /// The name of the Firewall Rule. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the Redis Cache. Changing this forces a new resource to be created.
        /// </summary>
        [Output("redisCacheName")]
        public Output<string> RedisCacheName { get; private set; } = null!;

        /// <summary>
        /// The name of the resource group in which this Redis Cache exists.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// The lowest IP address included in the range
        /// </summary>
        [Output("startIp")]
        public Output<string> StartIp { get; private set; } = null!;


        /// <summary>
        /// Create a FirewallRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FirewallRule(string name, FirewallRuleArgs args, CustomResourceOptions? options = null)
            : base("azure:redis/firewallRule:FirewallRule", name, args ?? new FirewallRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FirewallRule(string name, Input<string> id, FirewallRuleState? state = null, CustomResourceOptions? options = null)
            : base("azure:redis/firewallRule:FirewallRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FirewallRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FirewallRule Get(string name, Input<string> id, FirewallRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new FirewallRule(name, id, state, options);
        }
    }

    public sealed class FirewallRuleArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The highest IP address included in the range.
        /// </summary>
        [Input("endIp", required: true)]
        public Input<string> EndIp { get; set; } = null!;

        /// <summary>
        /// The name of the Firewall Rule. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the Redis Cache. Changing this forces a new resource to be created.
        /// </summary>
        [Input("redisCacheName", required: true)]
        public Input<string> RedisCacheName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group in which this Redis Cache exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The lowest IP address included in the range
        /// </summary>
        [Input("startIp", required: true)]
        public Input<string> StartIp { get; set; } = null!;

        public FirewallRuleArgs()
        {
        }
    }

    public sealed class FirewallRuleState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The highest IP address included in the range.
        /// </summary>
        [Input("endIp")]
        public Input<string>? EndIp { get; set; }

        /// <summary>
        /// The name of the Firewall Rule. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the Redis Cache. Changing this forces a new resource to be created.
        /// </summary>
        [Input("redisCacheName")]
        public Input<string>? RedisCacheName { get; set; }

        /// <summary>
        /// The name of the resource group in which this Redis Cache exists.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// The lowest IP address included in the range
        /// </summary>
        [Input("startIp")]
        public Input<string>? StartIp { get; set; }

        public FirewallRuleState()
        {
        }
    }
}
