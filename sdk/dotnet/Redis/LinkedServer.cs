// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Redis
{
    /// <summary>
    /// Manages a Redis Linked Server (ie Geo Location)
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example_primaryResourceGroup = new Azure.Core.ResourceGroup("example-primaryResourceGroup", new Azure.Core.ResourceGroupArgs
    ///         {
    ///             Location = "East US",
    ///         });
    ///         var example_primaryCache = new Azure.Redis.Cache("example-primaryCache", new Azure.Redis.CacheArgs
    ///         {
    ///             Location = example_primaryResourceGroup.Location,
    ///             ResourceGroupName = example_primaryResourceGroup.Name,
    ///             Capacity = 1,
    ///             Family = "P",
    ///             SkuName = "Premium",
    ///             EnableNonSslPort = false,
    ///             RedisConfiguration = new Azure.Redis.Inputs.CacheRedisConfigurationArgs
    ///             {
    ///                 MaxmemoryReserved = 2,
    ///                 MaxmemoryDelta = 2,
    ///                 MaxmemoryPolicy = "allkeys-lru",
    ///             },
    ///         });
    ///         var example_secondaryResourceGroup = new Azure.Core.ResourceGroup("example-secondaryResourceGroup", new Azure.Core.ResourceGroupArgs
    ///         {
    ///             Location = "West US",
    ///         });
    ///         var example_secondaryCache = new Azure.Redis.Cache("example-secondaryCache", new Azure.Redis.CacheArgs
    ///         {
    ///             Location = example_secondaryResourceGroup.Location,
    ///             ResourceGroupName = example_secondaryResourceGroup.Name,
    ///             Capacity = 1,
    ///             Family = "P",
    ///             SkuName = "Premium",
    ///             EnableNonSslPort = false,
    ///             RedisConfiguration = new Azure.Redis.Inputs.CacheRedisConfigurationArgs
    ///             {
    ///                 MaxmemoryReserved = 2,
    ///                 MaxmemoryDelta = 2,
    ///                 MaxmemoryPolicy = "allkeys-lru",
    ///             },
    ///         });
    ///         var example_link = new Azure.Redis.LinkedServer("example-link", new Azure.Redis.LinkedServerArgs
    ///         {
    ///             TargetRedisCacheName = example_primaryCache.Name,
    ///             ResourceGroupName = example_primaryCache.ResourceGroupName,
    ///             LinkedRedisCacheId = example_secondaryCache.Id,
    ///             LinkedRedisCacheLocation = example_secondaryCache.Location,
    ///             ServerRole = "Secondary",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Rediss can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:redis/linkedServer:LinkedServer example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Cache/Redis/cache1/linkedServers/cache2
    /// ```
    /// </summary>
    public partial class LinkedServer : Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the linked Redis cache. Changing this forces a new Redis to be created.
        /// </summary>
        [Output("linkedRedisCacheId")]
        public Output<string> LinkedRedisCacheId { get; private set; } = null!;

        /// <summary>
        /// The location of the linked Redis cache. Changing this forces a new Redis to be created.
        /// </summary>
        [Output("linkedRedisCacheLocation")]
        public Output<string> LinkedRedisCacheLocation { get; private set; } = null!;

        /// <summary>
        /// The name of the linked server.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Redis caches exists. Changing this forces a new Redis to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// The role of the linked Redis cache (eg "Secondary"). Changing this forces a new Redis to be created.
        /// </summary>
        [Output("serverRole")]
        public Output<string> ServerRole { get; private set; } = null!;

        /// <summary>
        /// The name of Redis cache to link with. Changing this forces a new Redis to be created. (eg The primary role)
        /// </summary>
        [Output("targetRedisCacheName")]
        public Output<string> TargetRedisCacheName { get; private set; } = null!;


        /// <summary>
        /// Create a LinkedServer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LinkedServer(string name, LinkedServerArgs args, CustomResourceOptions? options = null)
            : base("azure:redis/linkedServer:LinkedServer", name, args ?? new LinkedServerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LinkedServer(string name, Input<string> id, LinkedServerState? state = null, CustomResourceOptions? options = null)
            : base("azure:redis/linkedServer:LinkedServer", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LinkedServer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LinkedServer Get(string name, Input<string> id, LinkedServerState? state = null, CustomResourceOptions? options = null)
        {
            return new LinkedServer(name, id, state, options);
        }
    }

    public sealed class LinkedServerArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the linked Redis cache. Changing this forces a new Redis to be created.
        /// </summary>
        [Input("linkedRedisCacheId", required: true)]
        public Input<string> LinkedRedisCacheId { get; set; } = null!;

        /// <summary>
        /// The location of the linked Redis cache. Changing this forces a new Redis to be created.
        /// </summary>
        [Input("linkedRedisCacheLocation", required: true)]
        public Input<string> LinkedRedisCacheLocation { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Redis caches exists. Changing this forces a new Redis to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The role of the linked Redis cache (eg "Secondary"). Changing this forces a new Redis to be created.
        /// </summary>
        [Input("serverRole", required: true)]
        public Input<string> ServerRole { get; set; } = null!;

        /// <summary>
        /// The name of Redis cache to link with. Changing this forces a new Redis to be created. (eg The primary role)
        /// </summary>
        [Input("targetRedisCacheName", required: true)]
        public Input<string> TargetRedisCacheName { get; set; } = null!;

        public LinkedServerArgs()
        {
        }
    }

    public sealed class LinkedServerState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the linked Redis cache. Changing this forces a new Redis to be created.
        /// </summary>
        [Input("linkedRedisCacheId")]
        public Input<string>? LinkedRedisCacheId { get; set; }

        /// <summary>
        /// The location of the linked Redis cache. Changing this forces a new Redis to be created.
        /// </summary>
        [Input("linkedRedisCacheLocation")]
        public Input<string>? LinkedRedisCacheLocation { get; set; }

        /// <summary>
        /// The name of the linked server.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Redis caches exists. Changing this forces a new Redis to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// The role of the linked Redis cache (eg "Secondary"). Changing this forces a new Redis to be created.
        /// </summary>
        [Input("serverRole")]
        public Input<string>? ServerRole { get; set; }

        /// <summary>
        /// The name of Redis cache to link with. Changing this forces a new Redis to be created. (eg The primary role)
        /// </summary>
        [Input("targetRedisCacheName")]
        public Input<string>? TargetRedisCacheName { get; set; }

        public LinkedServerState()
        {
        }
    }
}
