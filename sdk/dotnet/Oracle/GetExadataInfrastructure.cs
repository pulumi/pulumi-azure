// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Oracle
{
    public static class GetExadataInfrastructure
    {
        /// <summary>
        /// Use this data source to access information about an existing Cloud Exadata Infrastructure.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Oracle.GetExadataInfrastructure.Invoke(new()
        ///     {
        ///         Name = "existing",
        ///         ResourceGroupName = "existing",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getExadataInfrastructureResult =&gt; getExadataInfrastructureResult.Id),
        ///     };
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Oracle.Database` - 2025-03-01
        /// </summary>
        public static Task<GetExadataInfrastructureResult> InvokeAsync(GetExadataInfrastructureArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetExadataInfrastructureResult>("azure:oracle/getExadataInfrastructure:getExadataInfrastructure", args ?? new GetExadataInfrastructureArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Cloud Exadata Infrastructure.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Oracle.GetExadataInfrastructure.Invoke(new()
        ///     {
        ///         Name = "existing",
        ///         ResourceGroupName = "existing",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getExadataInfrastructureResult =&gt; getExadataInfrastructureResult.Id),
        ///     };
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Oracle.Database` - 2025-03-01
        /// </summary>
        public static Output<GetExadataInfrastructureResult> Invoke(GetExadataInfrastructureInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetExadataInfrastructureResult>("azure:oracle/getExadataInfrastructure:getExadataInfrastructure", args ?? new GetExadataInfrastructureInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Cloud Exadata Infrastructure.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Oracle.GetExadataInfrastructure.Invoke(new()
        ///     {
        ///         Name = "existing",
        ///         ResourceGroupName = "existing",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getExadataInfrastructureResult =&gt; getExadataInfrastructureResult.Id),
        ///     };
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Oracle.Database` - 2025-03-01
        /// </summary>
        public static Output<GetExadataInfrastructureResult> Invoke(GetExadataInfrastructureInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetExadataInfrastructureResult>("azure:oracle/getExadataInfrastructure:getExadataInfrastructure", args ?? new GetExadataInfrastructureInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetExadataInfrastructureArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of this Cloud Exadata Infrastructure.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Cloud Exadata Infrastructure exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetExadataInfrastructureArgs()
        {
        }
        public static new GetExadataInfrastructureArgs Empty => new GetExadataInfrastructureArgs();
    }

    public sealed class GetExadataInfrastructureInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of this Cloud Exadata Infrastructure.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Cloud Exadata Infrastructure exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetExadataInfrastructureInvokeArgs()
        {
        }
        public static new GetExadataInfrastructureInvokeArgs Empty => new GetExadataInfrastructureInvokeArgs();
    }


    [OutputType]
    public sealed class GetExadataInfrastructureResult
    {
        /// <summary>
        /// The requested number of additional storage servers activated for the Cloud Exadata Infrastructure.
        /// </summary>
        public readonly int ActivatedStorageCount;
        /// <summary>
        /// The requested number of additional storage servers for the Cloud Exadata Infrastructure.
        /// </summary>
        public readonly int AdditionalStorageCount;
        /// <summary>
        /// The available storage can be allocated to the Cloud Exadata Infrastructure resource, in gigabytes (GB).
        /// </summary>
        public readonly int AvailableStorageSizeInGbs;
        /// <summary>
        /// The number of compute servers for the Cloud Exadata Infrastructure.
        /// </summary>
        public readonly int ComputeCount;
        /// <summary>
        /// The compute model of the Exadata Infrastructure.
        /// </summary>
        public readonly string ComputeModel;
        /// <summary>
        /// The total number of CPU cores allocated.
        /// </summary>
        public readonly int CpuCount;
        /// <summary>
        /// A `CustomerContacts` block as defined below.
        /// </summary>
        public readonly ImmutableArray<string> CustomerContacts;
        /// <summary>
        /// The data storage size in terabytes of the DATA disk group.
        /// </summary>
        public readonly double DataStorageSizeInTbs;
        /// <summary>
        /// The database server model type of the cloud Exadata infrastructure resource.
        /// </summary>
        public readonly string DatabaseServerType;
        /// <summary>
        /// The local node storage allocated in GBs.
        /// </summary>
        public readonly int DbNodeStorageSizeInGbs;
        /// <summary>
        /// The software version of the database servers (dom0) in the Cloud Exadata Infrastructure.
        /// </summary>
        public readonly string DbServerVersion;
        /// <summary>
        /// A `DefinedFileSystemConfiguration` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetExadataInfrastructureDefinedFileSystemConfigurationResult> DefinedFileSystemConfigurations;
        /// <summary>
        /// The user-friendly name for the Cloud Exadata Infrastructure resource. The name does not need to be unique.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// A `EstimatedPatchingTime` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetExadataInfrastructureEstimatedPatchingTimeResult> EstimatedPatchingTimes;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The [OCID](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm) of the last maintenance run.
        /// </summary>
        public readonly string LastMaintenanceRunId;
        /// <summary>
        /// Additional information about the current lifecycle state.
        /// </summary>
        public readonly string LifecycleDetails;
        /// <summary>
        /// Cloud Exadata Infrastructure lifecycle state.
        /// </summary>
        public readonly string LifecycleState;
        /// <summary>
        /// The Azure Region where the Cloud Exadata Infrastructure exists.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// A `MaintenanceWindow` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetExadataInfrastructureMaintenanceWindowResult> MaintenanceWindows;
        /// <summary>
        /// The total number of CPU cores available.
        /// </summary>
        public readonly int MaxCpuCount;
        /// <summary>
        /// The total available DATA disk group size.
        /// </summary>
        public readonly double MaxDataStorageInTbs;
        /// <summary>
        /// The total local node storage available in GBs.
        /// </summary>
        public readonly int MaxDbNodeStorageSizeInGbs;
        /// <summary>
        /// The total memory available in GBs.
        /// </summary>
        public readonly int MaxMemoryInGbs;
        /// <summary>
        /// The memory allocated in GBs.
        /// </summary>
        public readonly int MemorySizeInGbs;
        /// <summary>
        /// The monthly software version of the database servers (dom0) in the Cloud Exadata Infrastructure.
        /// </summary>
        public readonly string MonthlyDbServerVersion;
        /// <summary>
        /// The monthly software version of the storage servers (cells) in the Cloud Exadata Infrastructure.
        /// </summary>
        public readonly string MonthlyStorageServerVersion;
        public readonly string Name;
        /// <summary>
        /// The [OCID](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm) of the next maintenance run.
        /// </summary>
        public readonly string NextMaintenanceRunId;
        /// <summary>
        /// The URL of the resource in the OCI console.
        /// </summary>
        public readonly string OciUrl;
        /// <summary>
        /// The [OCID](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm) of the Cloud Exadata Infrastructure.
        /// </summary>
        public readonly string Ocid;
        public readonly string ResourceGroupName;
        /// <summary>
        /// The model name of the Cloud Exadata Infrastructure resource.
        /// </summary>
        public readonly string Shape;
        /// <summary>
        /// The number of storage servers for the Cloud Exadata Infrastructure.
        /// </summary>
        public readonly int StorageCount;
        /// <summary>
        /// The storage server model type of the cloud Exadata infrastructure resource.
        /// </summary>
        public readonly string StorageServerType;
        /// <summary>
        /// The software version of the storage servers (cells) in the Cloud Exadata Infrastructure.
        /// </summary>
        public readonly string StorageServerVersion;
        /// <summary>
        /// A mapping of tags assigned to the Cloud Exadata Infrastructure.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// The date and time the Cloud Exadata Infrastructure resource was created.
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// The total storage allocated to the Cloud Exadata Infrastructure resource, in gigabytes (GB).
        /// </summary>
        public readonly int TotalStorageSizeInGbs;
        /// <summary>
        /// The Cloud Exadata Infrastructure Azure zones.
        /// </summary>
        public readonly ImmutableArray<string> Zones;

        [OutputConstructor]
        private GetExadataInfrastructureResult(
            int activatedStorageCount,

            int additionalStorageCount,

            int availableStorageSizeInGbs,

            int computeCount,

            string computeModel,

            int cpuCount,

            ImmutableArray<string> customerContacts,

            double dataStorageSizeInTbs,

            string databaseServerType,

            int dbNodeStorageSizeInGbs,

            string dbServerVersion,

            ImmutableArray<Outputs.GetExadataInfrastructureDefinedFileSystemConfigurationResult> definedFileSystemConfigurations,

            string displayName,

            ImmutableArray<Outputs.GetExadataInfrastructureEstimatedPatchingTimeResult> estimatedPatchingTimes,

            string id,

            string lastMaintenanceRunId,

            string lifecycleDetails,

            string lifecycleState,

            string location,

            ImmutableArray<Outputs.GetExadataInfrastructureMaintenanceWindowResult> maintenanceWindows,

            int maxCpuCount,

            double maxDataStorageInTbs,

            int maxDbNodeStorageSizeInGbs,

            int maxMemoryInGbs,

            int memorySizeInGbs,

            string monthlyDbServerVersion,

            string monthlyStorageServerVersion,

            string name,

            string nextMaintenanceRunId,

            string ociUrl,

            string ocid,

            string resourceGroupName,

            string shape,

            int storageCount,

            string storageServerType,

            string storageServerVersion,

            ImmutableDictionary<string, string> tags,

            string timeCreated,

            int totalStorageSizeInGbs,

            ImmutableArray<string> zones)
        {
            ActivatedStorageCount = activatedStorageCount;
            AdditionalStorageCount = additionalStorageCount;
            AvailableStorageSizeInGbs = availableStorageSizeInGbs;
            ComputeCount = computeCount;
            ComputeModel = computeModel;
            CpuCount = cpuCount;
            CustomerContacts = customerContacts;
            DataStorageSizeInTbs = dataStorageSizeInTbs;
            DatabaseServerType = databaseServerType;
            DbNodeStorageSizeInGbs = dbNodeStorageSizeInGbs;
            DbServerVersion = dbServerVersion;
            DefinedFileSystemConfigurations = definedFileSystemConfigurations;
            DisplayName = displayName;
            EstimatedPatchingTimes = estimatedPatchingTimes;
            Id = id;
            LastMaintenanceRunId = lastMaintenanceRunId;
            LifecycleDetails = lifecycleDetails;
            LifecycleState = lifecycleState;
            Location = location;
            MaintenanceWindows = maintenanceWindows;
            MaxCpuCount = maxCpuCount;
            MaxDataStorageInTbs = maxDataStorageInTbs;
            MaxDbNodeStorageSizeInGbs = maxDbNodeStorageSizeInGbs;
            MaxMemoryInGbs = maxMemoryInGbs;
            MemorySizeInGbs = memorySizeInGbs;
            MonthlyDbServerVersion = monthlyDbServerVersion;
            MonthlyStorageServerVersion = monthlyStorageServerVersion;
            Name = name;
            NextMaintenanceRunId = nextMaintenanceRunId;
            OciUrl = ociUrl;
            Ocid = ocid;
            ResourceGroupName = resourceGroupName;
            Shape = shape;
            StorageCount = storageCount;
            StorageServerType = storageServerType;
            StorageServerVersion = storageServerVersion;
            Tags = tags;
            TimeCreated = timeCreated;
            TotalStorageSizeInGbs = totalStorageSizeInGbs;
            Zones = zones;
        }
    }
}
