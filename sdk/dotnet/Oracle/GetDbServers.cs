// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Oracle
{
    public static class GetDbServers
    {
        /// <summary>
        /// Use this data source to access information about existing DB Servers.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Oracle.GetDbServers.Invoke(new()
        ///     {
        ///         ResourceGroupName = "existing",
        ///         CloudExadataInfrastructureName = "existing",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getDbServersResult =&gt; getDbServersResult.Id),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetDbServersResult> InvokeAsync(GetDbServersArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDbServersResult>("azure:oracle/getDbServers:getDbServers", args ?? new GetDbServersArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about existing DB Servers.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Oracle.GetDbServers.Invoke(new()
        ///     {
        ///         ResourceGroupName = "existing",
        ///         CloudExadataInfrastructureName = "existing",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getDbServersResult =&gt; getDbServersResult.Id),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetDbServersResult> Invoke(GetDbServersInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDbServersResult>("azure:oracle/getDbServers:getDbServers", args ?? new GetDbServersInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about existing DB Servers.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Oracle.GetDbServers.Invoke(new()
        ///     {
        ///         ResourceGroupName = "existing",
        ///         CloudExadataInfrastructureName = "existing",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getDbServersResult =&gt; getDbServersResult.Id),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetDbServersResult> Invoke(GetDbServersInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetDbServersResult>("azure:oracle/getDbServers:getDbServers", args ?? new GetDbServersInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDbServersArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Cloud Exadata Infrastructure.
        /// </summary>
        [Input("cloudExadataInfrastructureName", required: true)]
        public string CloudExadataInfrastructureName { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the DB Server exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetDbServersArgs()
        {
        }
        public static new GetDbServersArgs Empty => new GetDbServersArgs();
    }

    public sealed class GetDbServersInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Cloud Exadata Infrastructure.
        /// </summary>
        [Input("cloudExadataInfrastructureName", required: true)]
        public Input<string> CloudExadataInfrastructureName { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the DB Server exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetDbServersInvokeArgs()
        {
        }
        public static new GetDbServersInvokeArgs Empty => new GetDbServersInvokeArgs();
    }


    [OutputType]
    public sealed class GetDbServersResult
    {
        public readonly string CloudExadataInfrastructureName;
        /// <summary>
        /// A `db_servers` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDbServersDbServerResult> DbServers;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string ResourceGroupName;

        [OutputConstructor]
        private GetDbServersResult(
            string cloudExadataInfrastructureName,

            ImmutableArray<Outputs.GetDbServersDbServerResult> dbServers,

            string id,

            string resourceGroupName)
        {
            CloudExadataInfrastructureName = cloudExadataInfrastructureName;
            DbServers = dbServers;
            Id = id;
            ResourceGroupName = resourceGroupName;
        }
    }
}
