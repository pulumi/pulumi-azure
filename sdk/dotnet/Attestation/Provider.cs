// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Attestation
{
    /// <summary>
    /// Manages an Attestation Provider.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.IO;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleProvider = new Azure.Attestation.Provider("exampleProvider", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         PolicySigningCertificateData = File.ReadAllText("./example/cert.pem"),
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Attestation Providers can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:attestation/provider:Provider example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Attestation/attestationProviders/provider1
    /// ```
    /// </summary>
    [AzureResourceType("azure:attestation/provider:Provider")]
    public partial class Provider : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The URI of the Attestation Service.
        /// </summary>
        [Output("attestationUri")]
        public Output<string> AttestationUri { get; private set; } = null!;

        /// <summary>
        /// The Azure Region where the Attestation Provider should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Attestation Provider. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Specifies the base64 URI Encoded RFC 7519 JWT that should be used for the Attestation Policy.
        /// </summary>
        [Output("openEnclavePolicyBase64")]
        public Output<string?> OpenEnclavePolicyBase64 { get; private set; } = null!;

        [Output("policies")]
        public Output<ImmutableArray<Outputs.ProviderPolicy>> Policies { get; private set; } = null!;

        /// <summary>
        /// A valid X.509 certificate (Section 4 of [RFC4648](https://tools.ietf.org/html/rfc4648)). Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE:** If the `policy_signing_certificate_data` argument contains more than one valid X.509 certificate only the first certificate will be used.
        /// </summary>
        [Output("policySigningCertificateData")]
        public Output<string?> PolicySigningCertificateData { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the attestation provider should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// Specifies the base64 URI Encoded RFC 7519 JWT that should be used for the Attestation Policy.
        /// 
        /// &gt; [More information on the JWT Policies can be found in this article on `learn.microsoft.com`](https://learn.microsoft.com/azure/attestation/author-sign-policy).
        /// </summary>
        [Output("sevSnpPolicyBase64")]
        public Output<string?> SevSnpPolicyBase64 { get; private set; } = null!;

        /// <summary>
        /// Specifies the base64 URI Encoded RFC 7519 JWT that should be used for the Attestation Policy.
        /// </summary>
        [Output("sgxEnclavePolicyBase64")]
        public Output<string?> SgxEnclavePolicyBase64 { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags which should be assigned to the Attestation Provider.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Specifies the base64 URI Encoded RFC 7519 JWT that should be used for the Attestation Policy.
        /// </summary>
        [Output("tpmPolicyBase64")]
        public Output<string?> TpmPolicyBase64 { get; private set; } = null!;

        /// <summary>
        /// Trust model used for the Attestation Service.
        /// </summary>
        [Output("trustModel")]
        public Output<string> TrustModel { get; private set; } = null!;


        /// <summary>
        /// Create a Provider resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Provider(string name, ProviderArgs args, CustomResourceOptions? options = null)
            : base("azure:attestation/provider:Provider", name, args ?? new ProviderArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Provider(string name, Input<string> id, ProviderState? state = null, CustomResourceOptions? options = null)
            : base("azure:attestation/provider:Provider", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Provider resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Provider Get(string name, Input<string> id, ProviderState? state = null, CustomResourceOptions? options = null)
        {
            return new Provider(name, id, state, options);
        }
    }

    public sealed class ProviderArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Azure Region where the Attestation Provider should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name which should be used for this Attestation Provider. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the base64 URI Encoded RFC 7519 JWT that should be used for the Attestation Policy.
        /// </summary>
        [Input("openEnclavePolicyBase64")]
        public Input<string>? OpenEnclavePolicyBase64 { get; set; }

        [Input("policies")]
        private InputList<Inputs.ProviderPolicyArgs>? _policies;
        [Obsolete(@"This field is no longer used and will be removed in v4.0 of the Azure Provider - use `open_enclave_policy_base64`, `sgx_enclave_policy_base64`, `tpm_policy_base64` and `sev_snp_policy_base64` instead.")]
        public InputList<Inputs.ProviderPolicyArgs> Policies
        {
            get => _policies ?? (_policies = new InputList<Inputs.ProviderPolicyArgs>());
            set => _policies = value;
        }

        /// <summary>
        /// A valid X.509 certificate (Section 4 of [RFC4648](https://tools.ietf.org/html/rfc4648)). Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE:** If the `policy_signing_certificate_data` argument contains more than one valid X.509 certificate only the first certificate will be used.
        /// </summary>
        [Input("policySigningCertificateData")]
        public Input<string>? PolicySigningCertificateData { get; set; }

        /// <summary>
        /// The name of the Resource Group where the attestation provider should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Specifies the base64 URI Encoded RFC 7519 JWT that should be used for the Attestation Policy.
        /// 
        /// &gt; [More information on the JWT Policies can be found in this article on `learn.microsoft.com`](https://learn.microsoft.com/azure/attestation/author-sign-policy).
        /// </summary>
        [Input("sevSnpPolicyBase64")]
        public Input<string>? SevSnpPolicyBase64 { get; set; }

        /// <summary>
        /// Specifies the base64 URI Encoded RFC 7519 JWT that should be used for the Attestation Policy.
        /// </summary>
        [Input("sgxEnclavePolicyBase64")]
        public Input<string>? SgxEnclavePolicyBase64 { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Attestation Provider.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Specifies the base64 URI Encoded RFC 7519 JWT that should be used for the Attestation Policy.
        /// </summary>
        [Input("tpmPolicyBase64")]
        public Input<string>? TpmPolicyBase64 { get; set; }

        public ProviderArgs()
        {
        }
        public static new ProviderArgs Empty => new ProviderArgs();
    }

    public sealed class ProviderState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The URI of the Attestation Service.
        /// </summary>
        [Input("attestationUri")]
        public Input<string>? AttestationUri { get; set; }

        /// <summary>
        /// The Azure Region where the Attestation Provider should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name which should be used for this Attestation Provider. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the base64 URI Encoded RFC 7519 JWT that should be used for the Attestation Policy.
        /// </summary>
        [Input("openEnclavePolicyBase64")]
        public Input<string>? OpenEnclavePolicyBase64 { get; set; }

        [Input("policies")]
        private InputList<Inputs.ProviderPolicyGetArgs>? _policies;
        [Obsolete(@"This field is no longer used and will be removed in v4.0 of the Azure Provider - use `open_enclave_policy_base64`, `sgx_enclave_policy_base64`, `tpm_policy_base64` and `sev_snp_policy_base64` instead.")]
        public InputList<Inputs.ProviderPolicyGetArgs> Policies
        {
            get => _policies ?? (_policies = new InputList<Inputs.ProviderPolicyGetArgs>());
            set => _policies = value;
        }

        /// <summary>
        /// A valid X.509 certificate (Section 4 of [RFC4648](https://tools.ietf.org/html/rfc4648)). Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE:** If the `policy_signing_certificate_data` argument contains more than one valid X.509 certificate only the first certificate will be used.
        /// </summary>
        [Input("policySigningCertificateData")]
        public Input<string>? PolicySigningCertificateData { get; set; }

        /// <summary>
        /// The name of the Resource Group where the attestation provider should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// Specifies the base64 URI Encoded RFC 7519 JWT that should be used for the Attestation Policy.
        /// 
        /// &gt; [More information on the JWT Policies can be found in this article on `learn.microsoft.com`](https://learn.microsoft.com/azure/attestation/author-sign-policy).
        /// </summary>
        [Input("sevSnpPolicyBase64")]
        public Input<string>? SevSnpPolicyBase64 { get; set; }

        /// <summary>
        /// Specifies the base64 URI Encoded RFC 7519 JWT that should be used for the Attestation Policy.
        /// </summary>
        [Input("sgxEnclavePolicyBase64")]
        public Input<string>? SgxEnclavePolicyBase64 { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Attestation Provider.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Specifies the base64 URI Encoded RFC 7519 JWT that should be used for the Attestation Policy.
        /// </summary>
        [Input("tpmPolicyBase64")]
        public Input<string>? TpmPolicyBase64 { get; set; }

        /// <summary>
        /// Trust model used for the Attestation Service.
        /// </summary>
        [Input("trustModel")]
        public Input<string>? TrustModel { get; set; }

        public ProviderState()
        {
        }
        public static new ProviderState Empty => new ProviderState();
    }
}
