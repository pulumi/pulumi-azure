// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Portal
{
    /// <summary>
    /// Manages a shared dashboard in the Azure Portal.
    /// 
    /// !&gt; **Note:** The `azure.portal.Dashboard` resource is deprecated in version 3.0 of the AzureRM provider and will be removed in version 4.0. Please use the `azure.portal.PortalDashboard` resource instead.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var mdContent = config.Get("mdContent") ?? "# Hello all :)";
    ///     var videoLink = config.Get("videoLink") ?? "https://www.youtube.com/watch?v=......";
    ///     var current = Azure.Core.GetSubscription.Invoke();
    /// 
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var my_board = new Azure.Portal.Dashboard("my-board", new()
    ///     {
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///         Tags = 
    ///         {
    ///             { "source", "managed" },
    ///         },
    ///         DashboardProperties = @$"{{
    ///    ""lenses"": {{
    ///         ""0"": {{
    ///             ""order"": 0,
    ///             ""parts"": {{
    ///                 ""0"": {{
    ///                     ""position"": {{
    ///                         ""x"": 0,
    ///                         ""y"": 0,
    ///                         ""rowSpan"": 2,
    ///                         ""colSpan"": 3
    ///                     }},
    ///                     ""metadata"": {{
    ///                         ""inputs"": [],
    ///                         ""type"": ""Extension/HubsExtension/PartType/MarkdownPart"",
    ///                         ""settings"": {{
    ///                             ""content"": {{
    ///                                 ""settings"": {{
    ///                                     ""content"": ""{mdContent}"",
    ///                                     ""subtitle"": """",
    ///                                     ""title"": """"
    ///                                 }}
    ///                             }}
    ///                         }}
    ///                     }}
    ///                 }},               
    ///                 ""1"": {{
    ///                     ""position"": {{
    ///                         ""x"": 5,
    ///                         ""y"": 0,
    ///                         ""rowSpan"": 4,
    ///                         ""colSpan"": 6
    ///                     }},
    ///                     ""metadata"": {{
    ///                         ""inputs"": [],
    ///                         ""type"": ""Extension/HubsExtension/PartType/VideoPart"",
    ///                         ""settings"": {{
    ///                             ""content"": {{
    ///                                 ""settings"": {{
    ///                                     ""title"": ""Important Information"",
    ///                                     ""subtitle"": """",
    ///                                     ""src"": ""{videoLink}"",
    ///                                     ""autoplay"": true
    ///                                 }}
    ///                             }}
    ///                         }}
    ///                     }}
    ///                 }},
    ///                 ""2"": {{
    ///                     ""position"": {{
    ///                         ""x"": 0,
    ///                         ""y"": 4,
    ///                         ""rowSpan"": 4,
    ///                         ""colSpan"": 6
    ///                     }},
    ///                     ""metadata"": {{
    ///                         ""inputs"": [
    ///                             {{
    ///                                 ""name"": ""ComponentId"",
    ///                                 ""value"": ""/subscriptions/{current.Apply(getSubscriptionResult =&gt; getSubscriptionResult.SubscriptionId)}/resourceGroups/myRG/providers/microsoft.insights/components/myWebApp""
    ///                             }}
    ///                         ],
    ///                         ""type"": ""Extension/AppInsightsExtension/PartType/AppMapGalPt"",
    ///                         ""settings"": {{}},
    ///                         ""asset"": {{
    ///                             ""idInputName"": ""ComponentId"",
    ///                             ""type"": ""ApplicationInsights""
    ///                         }}
    ///                     }}
    ///                 }}              
    ///             }}
    ///         }}
    ///     }},
    ///     ""metadata"": {{
    ///         ""model"": {{
    ///             ""timeRange"": {{
    ///                 ""value"": {{
    ///                     ""relative"": {{
    ///                         ""duration"": 24,
    ///                         ""timeUnit"": 1
    ///                     }}
    ///                 }},
    ///                 ""type"": ""MsPortalFx.Composition.Configuration.ValueTypes.TimeRange""
    ///             }},
    ///             ""filterLocale"": {{
    ///                 ""value"": ""en-us""
    ///             }},
    ///             ""filters"": {{
    ///                 ""value"": {{
    ///                     ""MsPortalFx_TimeRange"": {{
    ///                         ""model"": {{
    ///                             ""format"": ""utc"",
    ///                             ""granularity"": ""auto"",
    ///                             ""relative"": ""24h""
    ///                         }},
    ///                         ""displayCache"": {{
    ///                             ""name"": ""UTC Time"",
    ///                             ""value"": ""Past 24 hours""
    ///                         }},
    ///                         ""filteredPartIds"": [
    ///                             ""StartboardPart-UnboundPart-ae44fef5-76b8-46b0-86f0-2b3f47bad1c7""
    ///                         ]
    ///                     }}
    ///                 }}
    ///             }}
    ///         }}
    ///     }}
    /// }}
    /// ",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// It is recommended to follow the steps outlined
    /// [here](https://docs.microsoft.com/azure/azure-portal/azure-portal-dashboards-create-programmatically#fetch-the-json-representation-of-the-dashboard) to create a Dashboard in the Portal and extract the relevant JSON to use in this resource. From the extracted JSON, the contents of the `properties: {}` object can used. Variables can be injected as needed - see above example.
    /// 
    /// ## Import
    /// 
    /// Dashboards can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:portal/dashboard:Dashboard my-board /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Portal/dashboards/00000000-0000-0000-0000-000000000000
    /// ```
    /// 
    ///  Note the URI in the above sample can be found using the Resource Explorer tool in the Azure Portal.
    /// </summary>
    [AzureResourceType("azure:portal/dashboard:Dashboard")]
    public partial class Dashboard : global::Pulumi.CustomResource
    {
        /// <summary>
        /// JSON data representing dashboard body. See above for details on how to obtain this from the Portal.
        /// </summary>
        [Output("dashboardProperties")]
        public Output<string> DashboardProperties { get; private set; } = null!;

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the Shared Dashboard. Changing this forces a new resource to be created.
        /// 
        /// &gt; **Note**: You can specify a tag with the key `hidden-title` to set a more user-friendly title for this Dashboard.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the resource group in which to create the dashboard. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a Dashboard resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Dashboard(string name, DashboardArgs args, CustomResourceOptions? options = null)
            : base("azure:portal/dashboard:Dashboard", name, args ?? new DashboardArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Dashboard(string name, Input<string> id, DashboardState? state = null, CustomResourceOptions? options = null)
            : base("azure:portal/dashboard:Dashboard", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure:dashboard/dashboard:Dashboard" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Dashboard resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Dashboard Get(string name, Input<string> id, DashboardState? state = null, CustomResourceOptions? options = null)
        {
            return new Dashboard(name, id, state, options);
        }
    }

    public sealed class DashboardArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// JSON data representing dashboard body. See above for details on how to obtain this from the Portal.
        /// </summary>
        [Input("dashboardProperties")]
        public Input<string>? DashboardProperties { get; set; }

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Specifies the name of the Shared Dashboard. Changing this forces a new resource to be created.
        /// 
        /// &gt; **Note**: You can specify a tag with the key `hidden-title` to set a more user-friendly title for this Dashboard.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the resource group in which to create the dashboard. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public DashboardArgs()
        {
        }
        public static new DashboardArgs Empty => new DashboardArgs();
    }

    public sealed class DashboardState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// JSON data representing dashboard body. See above for details on how to obtain this from the Portal.
        /// </summary>
        [Input("dashboardProperties")]
        public Input<string>? DashboardProperties { get; set; }

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Specifies the name of the Shared Dashboard. Changing this forces a new resource to be created.
        /// 
        /// &gt; **Note**: You can specify a tag with the key `hidden-title` to set a more user-friendly title for this Dashboard.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the resource group in which to create the dashboard. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public DashboardState()
        {
        }
        public static new DashboardState Empty => new DashboardState();
    }
}
