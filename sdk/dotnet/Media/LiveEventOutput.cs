// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Media
{
    /// <summary>
    /// Manages a Azure Media Live Event Output.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleAccount = new Azure.Storage.Account("exampleAccount", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         AccountTier = "Standard",
    ///         AccountReplicationType = "GRS",
    ///     });
    /// 
    ///     var exampleServiceAccount = new Azure.Media.ServiceAccount("exampleServiceAccount", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         StorageAccounts = new[]
    ///         {
    ///             new Azure.Media.Inputs.ServiceAccountStorageAccountArgs
    ///             {
    ///                 Id = exampleAccount.Id,
    ///                 IsPrimary = true,
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleAsset = new Azure.Media.Asset("exampleAsset", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         MediaServicesAccountName = exampleServiceAccount.Name,
    ///     });
    /// 
    ///     var exampleLiveEvent = new Azure.Media.LiveEvent("exampleLiveEvent", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         MediaServicesAccountName = exampleServiceAccount.Name,
    ///         Description = "My Event Description",
    ///         Input = new Azure.Media.Inputs.LiveEventInputArgs
    ///         {
    ///             StreamingProtocol = "RTMP",
    ///             KeyFrameIntervalDuration = "PT6S",
    ///             IpAccessControlAllows = new[]
    ///             {
    ///                 new Azure.Media.Inputs.LiveEventInputIpAccessControlAllowArgs
    ///                 {
    ///                     Name = "AllowAll",
    ///                     Address = "0.0.0.0",
    ///                     SubnetPrefixLength = 0,
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleLiveEventOutput = new Azure.Media.LiveEventOutput("exampleLiveEventOutput", new()
    ///     {
    ///         LiveEventId = exampleLiveEvent.Id,
    ///         ArchiveWindowDuration = "PT5M",
    ///         AssetName = exampleAsset.Name,
    ///         Description = "Test live output 1",
    ///         ManifestName = "testmanifest",
    ///         OutputSnapTimeInSeconds = 0,
    ///         HlsFragmentsPerTsSegment = 5,
    ///         RewindWindowDuration = "PT5M",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Live Outputs can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:media/liveEventOutput:LiveEventOutput example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Media/mediaServices/account1/liveEvents/event1/liveOutputs/output1
    /// ```
    /// </summary>
    [AzureResourceType("azure:media/liveEventOutput:LiveEventOutput")]
    public partial class LiveEventOutput : global::Pulumi.CustomResource
    {
        /// <summary>
        /// `ISO 8601` time between 1 minute to 25 hours to indicate the maximum content length that can be archived in the asset for this live output. This also sets the maximum content length for the rewind window. For example, use `PT1H30M` to indicate 1 hour and 30 minutes of archive window. Changing this forces a new Live Output to be created.
        /// </summary>
        [Output("archiveWindowDuration")]
        public Output<string> ArchiveWindowDuration { get; private set; } = null!;

        /// <summary>
        /// The asset that the live output will write to. Changing this forces a new Live Output to be created.
        /// </summary>
        [Output("assetName")]
        public Output<string> AssetName { get; private set; } = null!;

        /// <summary>
        /// The description of the live output. Changing this forces a new Live Output to be created.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The number of fragments in an HTTP Live Streaming (HLS) TS segment in the output of the live event. This value does not affect the packing ratio for HLS CMAF output. Changing this forces a new Live Output to be created.
        /// </summary>
        [Output("hlsFragmentsPerTsSegment")]
        public Output<int?> HlsFragmentsPerTsSegment { get; private set; } = null!;

        /// <summary>
        /// The id of the live event. Changing this forces a new Live Output to be created.
        /// </summary>
        [Output("liveEventId")]
        public Output<string> LiveEventId { get; private set; } = null!;

        /// <summary>
        /// The manifest file name. If not provided, the service will generate one automatically. Changing this forces a new Live Output to be created.
        /// </summary>
        [Output("manifestName")]
        public Output<string> ManifestName { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Live Event Output. Changing this forces a new Live Output to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The initial timestamp that the live output will start at, any content before this value will not be archived. Changing this forces a new Live Output to be created.
        /// </summary>
        [Output("outputSnapTimeInSeconds")]
        public Output<int?> OutputSnapTimeInSeconds { get; private set; } = null!;

        /// <summary>
        /// `ISO 8601` time between 1 minute to the duration of `archive_window_duration` to control seek-able window length during Live. The service won't use this property once LiveOutput stops. The archived VOD will have full content with original ArchiveWindowLength. For example, use `PT1H30M` to indicate 1 hour and 30 minutes of rewind window length. Service will use implicit default value 30m only if Live Event enables LL. Changing this forces a new Live Output to be created.
        /// </summary>
        [Output("rewindWindowDuration")]
        public Output<string?> RewindWindowDuration { get; private set; } = null!;


        /// <summary>
        /// Create a LiveEventOutput resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LiveEventOutput(string name, LiveEventOutputArgs args, CustomResourceOptions? options = null)
            : base("azure:media/liveEventOutput:LiveEventOutput", name, args ?? new LiveEventOutputArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LiveEventOutput(string name, Input<string> id, LiveEventOutputState? state = null, CustomResourceOptions? options = null)
            : base("azure:media/liveEventOutput:LiveEventOutput", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LiveEventOutput resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LiveEventOutput Get(string name, Input<string> id, LiveEventOutputState? state = null, CustomResourceOptions? options = null)
        {
            return new LiveEventOutput(name, id, state, options);
        }
    }

    public sealed class LiveEventOutputArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// `ISO 8601` time between 1 minute to 25 hours to indicate the maximum content length that can be archived in the asset for this live output. This also sets the maximum content length for the rewind window. For example, use `PT1H30M` to indicate 1 hour and 30 minutes of archive window. Changing this forces a new Live Output to be created.
        /// </summary>
        [Input("archiveWindowDuration", required: true)]
        public Input<string> ArchiveWindowDuration { get; set; } = null!;

        /// <summary>
        /// The asset that the live output will write to. Changing this forces a new Live Output to be created.
        /// </summary>
        [Input("assetName", required: true)]
        public Input<string> AssetName { get; set; } = null!;

        /// <summary>
        /// The description of the live output. Changing this forces a new Live Output to be created.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The number of fragments in an HTTP Live Streaming (HLS) TS segment in the output of the live event. This value does not affect the packing ratio for HLS CMAF output. Changing this forces a new Live Output to be created.
        /// </summary>
        [Input("hlsFragmentsPerTsSegment")]
        public Input<int>? HlsFragmentsPerTsSegment { get; set; }

        /// <summary>
        /// The id of the live event. Changing this forces a new Live Output to be created.
        /// </summary>
        [Input("liveEventId", required: true)]
        public Input<string> LiveEventId { get; set; } = null!;

        /// <summary>
        /// The manifest file name. If not provided, the service will generate one automatically. Changing this forces a new Live Output to be created.
        /// </summary>
        [Input("manifestName")]
        public Input<string>? ManifestName { get; set; }

        /// <summary>
        /// The name which should be used for this Live Event Output. Changing this forces a new Live Output to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The initial timestamp that the live output will start at, any content before this value will not be archived. Changing this forces a new Live Output to be created.
        /// </summary>
        [Input("outputSnapTimeInSeconds")]
        public Input<int>? OutputSnapTimeInSeconds { get; set; }

        /// <summary>
        /// `ISO 8601` time between 1 minute to the duration of `archive_window_duration` to control seek-able window length during Live. The service won't use this property once LiveOutput stops. The archived VOD will have full content with original ArchiveWindowLength. For example, use `PT1H30M` to indicate 1 hour and 30 minutes of rewind window length. Service will use implicit default value 30m only if Live Event enables LL. Changing this forces a new Live Output to be created.
        /// </summary>
        [Input("rewindWindowDuration")]
        public Input<string>? RewindWindowDuration { get; set; }

        public LiveEventOutputArgs()
        {
        }
        public static new LiveEventOutputArgs Empty => new LiveEventOutputArgs();
    }

    public sealed class LiveEventOutputState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// `ISO 8601` time between 1 minute to 25 hours to indicate the maximum content length that can be archived in the asset for this live output. This also sets the maximum content length for the rewind window. For example, use `PT1H30M` to indicate 1 hour and 30 minutes of archive window. Changing this forces a new Live Output to be created.
        /// </summary>
        [Input("archiveWindowDuration")]
        public Input<string>? ArchiveWindowDuration { get; set; }

        /// <summary>
        /// The asset that the live output will write to. Changing this forces a new Live Output to be created.
        /// </summary>
        [Input("assetName")]
        public Input<string>? AssetName { get; set; }

        /// <summary>
        /// The description of the live output. Changing this forces a new Live Output to be created.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The number of fragments in an HTTP Live Streaming (HLS) TS segment in the output of the live event. This value does not affect the packing ratio for HLS CMAF output. Changing this forces a new Live Output to be created.
        /// </summary>
        [Input("hlsFragmentsPerTsSegment")]
        public Input<int>? HlsFragmentsPerTsSegment { get; set; }

        /// <summary>
        /// The id of the live event. Changing this forces a new Live Output to be created.
        /// </summary>
        [Input("liveEventId")]
        public Input<string>? LiveEventId { get; set; }

        /// <summary>
        /// The manifest file name. If not provided, the service will generate one automatically. Changing this forces a new Live Output to be created.
        /// </summary>
        [Input("manifestName")]
        public Input<string>? ManifestName { get; set; }

        /// <summary>
        /// The name which should be used for this Live Event Output. Changing this forces a new Live Output to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The initial timestamp that the live output will start at, any content before this value will not be archived. Changing this forces a new Live Output to be created.
        /// </summary>
        [Input("outputSnapTimeInSeconds")]
        public Input<int>? OutputSnapTimeInSeconds { get; set; }

        /// <summary>
        /// `ISO 8601` time between 1 minute to the duration of `archive_window_duration` to control seek-able window length during Live. The service won't use this property once LiveOutput stops. The archived VOD will have full content with original ArchiveWindowLength. For example, use `PT1H30M` to indicate 1 hour and 30 minutes of rewind window length. Service will use implicit default value 30m only if Live Event enables LL. Changing this forces a new Live Output to be created.
        /// </summary>
        [Input("rewindWindowDuration")]
        public Input<string>? RewindWindowDuration { get; set; }

        public LiveEventOutputState()
        {
        }
        public static new LiveEventOutputState Empty => new LiveEventOutputState();
    }
}
