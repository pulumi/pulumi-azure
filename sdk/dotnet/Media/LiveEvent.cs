// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Media
{
    /// <summary>
    /// Manages a Live Event.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleAccount = new Azure.Storage.Account("exampleAccount", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         AccountTier = "Standard",
    ///         AccountReplicationType = "GRS",
    ///     });
    /// 
    ///     var exampleServiceAccount = new Azure.Media.ServiceAccount("exampleServiceAccount", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         StorageAccounts = new[]
    ///         {
    ///             new Azure.Media.Inputs.ServiceAccountStorageAccountArgs
    ///             {
    ///                 Id = exampleAccount.Id,
    ///                 IsPrimary = true,
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleLiveEvent = new Azure.Media.LiveEvent("exampleLiveEvent", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         MediaServicesAccountName = exampleServiceAccount.Name,
    ///         Description = "My Event Description",
    ///         Input = new Azure.Media.Inputs.LiveEventInputArgs
    ///         {
    ///             StreamingProtocol = "RTMP",
    ///             IpAccessControlAllows = new[]
    ///             {
    ///                 new Azure.Media.Inputs.LiveEventInputIpAccessControlAllowArgs
    ///                 {
    ///                     Name = "AllowAll",
    ///                     Address = "0.0.0.0",
    ///                     SubnetPrefixLength = 0,
    ///                 },
    ///             },
    ///         },
    ///         Encoding = new Azure.Media.Inputs.LiveEventEncodingArgs
    ///         {
    ///             Type = "Standard",
    ///             PresetName = "Default720p",
    ///             StretchMode = "AutoFit",
    ///             KeyFrameInterval = "PT2S",
    ///         },
    ///         Preview = new Azure.Media.Inputs.LiveEventPreviewArgs
    ///         {
    ///             IpAccessControlAllows = new[]
    ///             {
    ///                 new Azure.Media.Inputs.LiveEventPreviewIpAccessControlAllowArgs
    ///                 {
    ///                     Name = "AllowAll",
    ///                     Address = "0.0.0.0",
    ///                     SubnetPrefixLength = 0,
    ///                 },
    ///             },
    ///         },
    ///         StreamOptions = new[]
    ///         {
    ///             "LowLatency",
    ///         },
    ///         UseStaticHostname = true,
    ///         HostnamePrefix = "special-event",
    ///         TranscriptionLanguages = new[]
    ///         {
    ///             "en-US",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Live Events can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:media/liveEvent:LiveEvent example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resGroup1/providers/Microsoft.Media/mediaServices/account1/liveEvents/event1
    /// ```
    /// </summary>
    [AzureResourceType("azure:media/liveEvent:LiveEvent")]
    public partial class LiveEvent : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The flag indicates if the resource should be automatically started on creation. Changing this forces a new resource to be created.
        /// </summary>
        [Output("autoStartEnabled")]
        public Output<bool?> AutoStartEnabled { get; private set; } = null!;

        /// <summary>
        /// A `cross_site_access_policy` block as defined below.
        /// </summary>
        [Output("crossSiteAccessPolicy")]
        public Output<Outputs.LiveEventCrossSiteAccessPolicy?> CrossSiteAccessPolicy { get; private set; } = null!;

        /// <summary>
        /// A description for the live event.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// A `encoding` block as defined below.
        /// </summary>
        [Output("encoding")]
        public Output<Outputs.LiveEventEncoding?> Encoding { get; private set; } = null!;

        /// <summary>
        /// When `use_static_hostname` is set to true, the `hostname_prefix` specifies the first part of the hostname assigned to the live event preview and ingest endpoints. The final hostname would be a combination of this prefix, the media service account name and a short code for the Azure Media Services data center.
        /// </summary>
        [Output("hostnamePrefix")]
        public Output<string?> HostnamePrefix { get; private set; } = null!;

        /// <summary>
        /// A `input` block as defined below.
        /// </summary>
        [Output("input")]
        public Output<Outputs.LiveEventInput> Input { get; private set; } = null!;

        /// <summary>
        /// The Azure Region where the Live Event should exist. Changing this forces a new Live Event to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The Media Services account name. Changing this forces a new Live Event to be created.
        /// </summary>
        [Output("mediaServicesAccountName")]
        public Output<string> MediaServicesAccountName { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Live Event. Changing this forces a new Live Event to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A `preview` block as defined below.
        /// </summary>
        [Output("preview")]
        public Output<Outputs.LiveEventPreview> Preview { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Live Event should exist. Changing this forces a new Live Event to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// A list of options to use for the LiveEvent. Possible values are `Default`, `LowLatency`, `LowLatencyV2`. Please see more at this [document](https://learn.microsoft.com/en-us/azure/media-services/latest/live-event-latency-reference#lowlatency-and-lowlatencyv2-options). Changing this forces a new resource to be created.
        /// </summary>
        [Output("streamOptions")]
        public Output<ImmutableArray<string>> StreamOptions { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags which should be assigned to the Live Event.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Specifies a list of languages (locale) to be used for speech-to-text transcription â€“ it should match the spoken language in the audio track. The value should be in `BCP-47` format (e.g: `en-US`). [See the Microsoft Documentation for more information about the live transcription feature and the list of supported languages](https://go.microsoft.com/fwlink/?linkid=2133742 ).
        /// </summary>
        [Output("transcriptionLanguages")]
        public Output<ImmutableArray<string>> TranscriptionLanguages { get; private set; } = null!;

        /// <summary>
        /// Specifies whether a static hostname would be assigned to the live event preview and ingest endpoints. Changing this forces a new Live Event to be created.
        /// </summary>
        [Output("useStaticHostname")]
        public Output<bool?> UseStaticHostname { get; private set; } = null!;


        /// <summary>
        /// Create a LiveEvent resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LiveEvent(string name, LiveEventArgs args, CustomResourceOptions? options = null)
            : base("azure:media/liveEvent:LiveEvent", name, args ?? new LiveEventArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LiveEvent(string name, Input<string> id, LiveEventState? state = null, CustomResourceOptions? options = null)
            : base("azure:media/liveEvent:LiveEvent", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LiveEvent resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LiveEvent Get(string name, Input<string> id, LiveEventState? state = null, CustomResourceOptions? options = null)
        {
            return new LiveEvent(name, id, state, options);
        }
    }

    public sealed class LiveEventArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The flag indicates if the resource should be automatically started on creation. Changing this forces a new resource to be created.
        /// </summary>
        [Input("autoStartEnabled")]
        public Input<bool>? AutoStartEnabled { get; set; }

        /// <summary>
        /// A `cross_site_access_policy` block as defined below.
        /// </summary>
        [Input("crossSiteAccessPolicy")]
        public Input<Inputs.LiveEventCrossSiteAccessPolicyArgs>? CrossSiteAccessPolicy { get; set; }

        /// <summary>
        /// A description for the live event.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// A `encoding` block as defined below.
        /// </summary>
        [Input("encoding")]
        public Input<Inputs.LiveEventEncodingArgs>? Encoding { get; set; }

        /// <summary>
        /// When `use_static_hostname` is set to true, the `hostname_prefix` specifies the first part of the hostname assigned to the live event preview and ingest endpoints. The final hostname would be a combination of this prefix, the media service account name and a short code for the Azure Media Services data center.
        /// </summary>
        [Input("hostnamePrefix")]
        public Input<string>? HostnamePrefix { get; set; }

        /// <summary>
        /// A `input` block as defined below.
        /// </summary>
        [Input("input", required: true)]
        public Input<Inputs.LiveEventInputArgs> Input { get; set; } = null!;

        /// <summary>
        /// The Azure Region where the Live Event should exist. Changing this forces a new Live Event to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The Media Services account name. Changing this forces a new Live Event to be created.
        /// </summary>
        [Input("mediaServicesAccountName", required: true)]
        public Input<string> MediaServicesAccountName { get; set; } = null!;

        /// <summary>
        /// The name which should be used for this Live Event. Changing this forces a new Live Event to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A `preview` block as defined below.
        /// </summary>
        [Input("preview")]
        public Input<Inputs.LiveEventPreviewArgs>? Preview { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Live Event should exist. Changing this forces a new Live Event to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("streamOptions")]
        private InputList<string>? _streamOptions;

        /// <summary>
        /// A list of options to use for the LiveEvent. Possible values are `Default`, `LowLatency`, `LowLatencyV2`. Please see more at this [document](https://learn.microsoft.com/en-us/azure/media-services/latest/live-event-latency-reference#lowlatency-and-lowlatencyv2-options). Changing this forces a new resource to be created.
        /// </summary>
        public InputList<string> StreamOptions
        {
            get => _streamOptions ?? (_streamOptions = new InputList<string>());
            set => _streamOptions = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Live Event.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("transcriptionLanguages")]
        private InputList<string>? _transcriptionLanguages;

        /// <summary>
        /// Specifies a list of languages (locale) to be used for speech-to-text transcription â€“ it should match the spoken language in the audio track. The value should be in `BCP-47` format (e.g: `en-US`). [See the Microsoft Documentation for more information about the live transcription feature and the list of supported languages](https://go.microsoft.com/fwlink/?linkid=2133742 ).
        /// </summary>
        public InputList<string> TranscriptionLanguages
        {
            get => _transcriptionLanguages ?? (_transcriptionLanguages = new InputList<string>());
            set => _transcriptionLanguages = value;
        }

        /// <summary>
        /// Specifies whether a static hostname would be assigned to the live event preview and ingest endpoints. Changing this forces a new Live Event to be created.
        /// </summary>
        [Input("useStaticHostname")]
        public Input<bool>? UseStaticHostname { get; set; }

        public LiveEventArgs()
        {
        }
        public static new LiveEventArgs Empty => new LiveEventArgs();
    }

    public sealed class LiveEventState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The flag indicates if the resource should be automatically started on creation. Changing this forces a new resource to be created.
        /// </summary>
        [Input("autoStartEnabled")]
        public Input<bool>? AutoStartEnabled { get; set; }

        /// <summary>
        /// A `cross_site_access_policy` block as defined below.
        /// </summary>
        [Input("crossSiteAccessPolicy")]
        public Input<Inputs.LiveEventCrossSiteAccessPolicyGetArgs>? CrossSiteAccessPolicy { get; set; }

        /// <summary>
        /// A description for the live event.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// A `encoding` block as defined below.
        /// </summary>
        [Input("encoding")]
        public Input<Inputs.LiveEventEncodingGetArgs>? Encoding { get; set; }

        /// <summary>
        /// When `use_static_hostname` is set to true, the `hostname_prefix` specifies the first part of the hostname assigned to the live event preview and ingest endpoints. The final hostname would be a combination of this prefix, the media service account name and a short code for the Azure Media Services data center.
        /// </summary>
        [Input("hostnamePrefix")]
        public Input<string>? HostnamePrefix { get; set; }

        /// <summary>
        /// A `input` block as defined below.
        /// </summary>
        [Input("input")]
        public Input<Inputs.LiveEventInputGetArgs>? Input { get; set; }

        /// <summary>
        /// The Azure Region where the Live Event should exist. Changing this forces a new Live Event to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The Media Services account name. Changing this forces a new Live Event to be created.
        /// </summary>
        [Input("mediaServicesAccountName")]
        public Input<string>? MediaServicesAccountName { get; set; }

        /// <summary>
        /// The name which should be used for this Live Event. Changing this forces a new Live Event to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A `preview` block as defined below.
        /// </summary>
        [Input("preview")]
        public Input<Inputs.LiveEventPreviewGetArgs>? Preview { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Live Event should exist. Changing this forces a new Live Event to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        [Input("streamOptions")]
        private InputList<string>? _streamOptions;

        /// <summary>
        /// A list of options to use for the LiveEvent. Possible values are `Default`, `LowLatency`, `LowLatencyV2`. Please see more at this [document](https://learn.microsoft.com/en-us/azure/media-services/latest/live-event-latency-reference#lowlatency-and-lowlatencyv2-options). Changing this forces a new resource to be created.
        /// </summary>
        public InputList<string> StreamOptions
        {
            get => _streamOptions ?? (_streamOptions = new InputList<string>());
            set => _streamOptions = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Live Event.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("transcriptionLanguages")]
        private InputList<string>? _transcriptionLanguages;

        /// <summary>
        /// Specifies a list of languages (locale) to be used for speech-to-text transcription â€“ it should match the spoken language in the audio track. The value should be in `BCP-47` format (e.g: `en-US`). [See the Microsoft Documentation for more information about the live transcription feature and the list of supported languages](https://go.microsoft.com/fwlink/?linkid=2133742 ).
        /// </summary>
        public InputList<string> TranscriptionLanguages
        {
            get => _transcriptionLanguages ?? (_transcriptionLanguages = new InputList<string>());
            set => _transcriptionLanguages = value;
        }

        /// <summary>
        /// Specifies whether a static hostname would be assigned to the live event preview and ingest endpoints. Changing this forces a new Live Event to be created.
        /// </summary>
        [Input("useStaticHostname")]
        public Input<bool>? UseStaticHostname { get; set; }

        public LiveEventState()
        {
        }
        public static new LiveEventState Empty => new LiveEventState();
    }
}
