// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Media
{
    /// <summary>
    /// Manages an Azure Media Asset Filter.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleAccount = new Azure.Storage.Account("exampleAccount", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         AccountTier = "Standard",
    ///         AccountReplicationType = "GRS",
    ///     });
    /// 
    ///     var exampleServiceAccount = new Azure.Media.ServiceAccount("exampleServiceAccount", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         StorageAccounts = new[]
    ///         {
    ///             new Azure.Media.Inputs.ServiceAccountStorageAccountArgs
    ///             {
    ///                 Id = exampleAccount.Id,
    ///                 IsPrimary = true,
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleAsset = new Azure.Media.Asset("exampleAsset", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         MediaServicesAccountName = exampleServiceAccount.Name,
    ///         Description = "Asset description",
    ///     });
    /// 
    ///     var exampleAssetFilter = new Azure.Media.AssetFilter("exampleAssetFilter", new()
    ///     {
    ///         AssetId = exampleAsset.Id,
    ///         FirstQualityBitrate = 128000,
    ///         PresentationTimeRange = new Azure.Media.Inputs.AssetFilterPresentationTimeRangeArgs
    ///         {
    ///             StartInUnits = 0,
    ///             EndInUnits = 15,
    ///             PresentationWindowInUnits = 90,
    ///             LiveBackoffInUnits = 0,
    ///             UnitTimescaleInMiliseconds = 1000,
    ///             ForceEnd = false,
    ///         },
    ///         TrackSelections = new[]
    ///         {
    ///             new Azure.Media.Inputs.AssetFilterTrackSelectionArgs
    ///             {
    ///                 Conditions = new[]
    ///                 {
    ///                     new Azure.Media.Inputs.AssetFilterTrackSelectionConditionArgs
    ///                     {
    ///                         Property = "Type",
    ///                         Operation = "Equal",
    ///                         Value = "Audio",
    ///                     },
    ///                     new Azure.Media.Inputs.AssetFilterTrackSelectionConditionArgs
    ///                     {
    ///                         Property = "Language",
    ///                         Operation = "NotEqual",
    ///                         Value = "en",
    ///                     },
    ///                     new Azure.Media.Inputs.AssetFilterTrackSelectionConditionArgs
    ///                     {
    ///                         Property = "FourCC",
    ///                         Operation = "NotEqual",
    ///                         Value = "EC-3",
    ///                     },
    ///                 },
    ///             },
    ///             new Azure.Media.Inputs.AssetFilterTrackSelectionArgs
    ///             {
    ///                 Conditions = new[]
    ///                 {
    ///                     new Azure.Media.Inputs.AssetFilterTrackSelectionConditionArgs
    ///                     {
    ///                         Property = "Type",
    ///                         Operation = "Equal",
    ///                         Value = "Video",
    ///                     },
    ///                     new Azure.Media.Inputs.AssetFilterTrackSelectionConditionArgs
    ///                     {
    ///                         Property = "Bitrate",
    ///                         Operation = "Equal",
    ///                         Value = "3000000-5000000",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Asset Filters can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:media/assetFilter:AssetFilter example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Media/mediaServices/account1/assets/asset1/assetFilters/filter1
    /// ```
    /// </summary>
    [AzureResourceType("azure:media/assetFilter:AssetFilter")]
    public partial class AssetFilter : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Asset ID for which the Asset Filter should be created. Changing this forces a new Asset Filter to be created.
        /// </summary>
        [Output("assetId")]
        public Output<string> AssetId { get; private set; } = null!;

        /// <summary>
        /// The first quality bitrate. Sets the first video track to appear in the Live Streaming playlist to allow HLS native players to start downloading from this quality level at the beginning.
        /// </summary>
        [Output("firstQualityBitrate")]
        public Output<int?> FirstQualityBitrate { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Asset Filter. Changing this forces a new Asset Filter to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A `presentation_time_range` block as defined below.
        /// </summary>
        [Output("presentationTimeRange")]
        public Output<Outputs.AssetFilterPresentationTimeRange?> PresentationTimeRange { get; private set; } = null!;

        /// <summary>
        /// One or more `track_selection` blocks as defined below.
        /// </summary>
        [Output("trackSelections")]
        public Output<ImmutableArray<Outputs.AssetFilterTrackSelection>> TrackSelections { get; private set; } = null!;


        /// <summary>
        /// Create a AssetFilter resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AssetFilter(string name, AssetFilterArgs args, CustomResourceOptions? options = null)
            : base("azure:media/assetFilter:AssetFilter", name, args ?? new AssetFilterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AssetFilter(string name, Input<string> id, AssetFilterState? state = null, CustomResourceOptions? options = null)
            : base("azure:media/assetFilter:AssetFilter", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AssetFilter resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AssetFilter Get(string name, Input<string> id, AssetFilterState? state = null, CustomResourceOptions? options = null)
        {
            return new AssetFilter(name, id, state, options);
        }
    }

    public sealed class AssetFilterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Asset ID for which the Asset Filter should be created. Changing this forces a new Asset Filter to be created.
        /// </summary>
        [Input("assetId", required: true)]
        public Input<string> AssetId { get; set; } = null!;

        /// <summary>
        /// The first quality bitrate. Sets the first video track to appear in the Live Streaming playlist to allow HLS native players to start downloading from this quality level at the beginning.
        /// </summary>
        [Input("firstQualityBitrate")]
        public Input<int>? FirstQualityBitrate { get; set; }

        /// <summary>
        /// The name which should be used for this Asset Filter. Changing this forces a new Asset Filter to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A `presentation_time_range` block as defined below.
        /// </summary>
        [Input("presentationTimeRange")]
        public Input<Inputs.AssetFilterPresentationTimeRangeArgs>? PresentationTimeRange { get; set; }

        [Input("trackSelections")]
        private InputList<Inputs.AssetFilterTrackSelectionArgs>? _trackSelections;

        /// <summary>
        /// One or more `track_selection` blocks as defined below.
        /// </summary>
        public InputList<Inputs.AssetFilterTrackSelectionArgs> TrackSelections
        {
            get => _trackSelections ?? (_trackSelections = new InputList<Inputs.AssetFilterTrackSelectionArgs>());
            set => _trackSelections = value;
        }

        public AssetFilterArgs()
        {
        }
        public static new AssetFilterArgs Empty => new AssetFilterArgs();
    }

    public sealed class AssetFilterState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Asset ID for which the Asset Filter should be created. Changing this forces a new Asset Filter to be created.
        /// </summary>
        [Input("assetId")]
        public Input<string>? AssetId { get; set; }

        /// <summary>
        /// The first quality bitrate. Sets the first video track to appear in the Live Streaming playlist to allow HLS native players to start downloading from this quality level at the beginning.
        /// </summary>
        [Input("firstQualityBitrate")]
        public Input<int>? FirstQualityBitrate { get; set; }

        /// <summary>
        /// The name which should be used for this Asset Filter. Changing this forces a new Asset Filter to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A `presentation_time_range` block as defined below.
        /// </summary>
        [Input("presentationTimeRange")]
        public Input<Inputs.AssetFilterPresentationTimeRangeGetArgs>? PresentationTimeRange { get; set; }

        [Input("trackSelections")]
        private InputList<Inputs.AssetFilterTrackSelectionGetArgs>? _trackSelections;

        /// <summary>
        /// One or more `track_selection` blocks as defined below.
        /// </summary>
        public InputList<Inputs.AssetFilterTrackSelectionGetArgs> TrackSelections
        {
            get => _trackSelections ?? (_trackSelections = new InputList<Inputs.AssetFilterTrackSelectionGetArgs>());
            set => _trackSelections = value;
        }

        public AssetFilterState()
        {
        }
        public static new AssetFilterState Empty => new AssetFilterState();
    }
}
