// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Media
{
    /// <summary>
    /// Manages a Content Key Policy.
    /// 
    /// ## Import
    /// 
    /// Content Key Policy can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:media/contentKeyPolicy:ContentKeyPolicy example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Media/mediaServices/account1/contentKeyPolicies/policy1
    /// ```
    /// </summary>
    [AzureResourceType("azure:media/contentKeyPolicy:ContentKeyPolicy")]
    public partial class ContentKeyPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A description for the Policy.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The Media Services account name. Changing this forces a new Content Key Policy to be created.
        /// </summary>
        [Output("mediaServicesAccountName")]
        public Output<string> MediaServicesAccountName { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Content Key Policy. Changing this forces a new Content Key Policy to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// One or more `policy_option` blocks as defined below.
        /// </summary>
        [Output("policyOptions")]
        public Output<ImmutableArray<Outputs.ContentKeyPolicyPolicyOption>> PolicyOptions { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Content Key Policy should exist. Changing this forces a new Content Key Policy to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;


        /// <summary>
        /// Create a ContentKeyPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ContentKeyPolicy(string name, ContentKeyPolicyArgs args, CustomResourceOptions? options = null)
            : base("azure:media/contentKeyPolicy:ContentKeyPolicy", name, args ?? new ContentKeyPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ContentKeyPolicy(string name, Input<string> id, ContentKeyPolicyState? state = null, CustomResourceOptions? options = null)
            : base("azure:media/contentKeyPolicy:ContentKeyPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ContentKeyPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ContentKeyPolicy Get(string name, Input<string> id, ContentKeyPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new ContentKeyPolicy(name, id, state, options);
        }
    }

    public sealed class ContentKeyPolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A description for the Policy.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The Media Services account name. Changing this forces a new Content Key Policy to be created.
        /// </summary>
        [Input("mediaServicesAccountName", required: true)]
        public Input<string> MediaServicesAccountName { get; set; } = null!;

        /// <summary>
        /// The name which should be used for this Content Key Policy. Changing this forces a new Content Key Policy to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("policyOptions", required: true)]
        private InputList<Inputs.ContentKeyPolicyPolicyOptionArgs>? _policyOptions;

        /// <summary>
        /// One or more `policy_option` blocks as defined below.
        /// </summary>
        public InputList<Inputs.ContentKeyPolicyPolicyOptionArgs> PolicyOptions
        {
            get => _policyOptions ?? (_policyOptions = new InputList<Inputs.ContentKeyPolicyPolicyOptionArgs>());
            set => _policyOptions = value;
        }

        /// <summary>
        /// The name of the Resource Group where the Content Key Policy should exist. Changing this forces a new Content Key Policy to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public ContentKeyPolicyArgs()
        {
        }
        public static new ContentKeyPolicyArgs Empty => new ContentKeyPolicyArgs();
    }

    public sealed class ContentKeyPolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A description for the Policy.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The Media Services account name. Changing this forces a new Content Key Policy to be created.
        /// </summary>
        [Input("mediaServicesAccountName")]
        public Input<string>? MediaServicesAccountName { get; set; }

        /// <summary>
        /// The name which should be used for this Content Key Policy. Changing this forces a new Content Key Policy to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("policyOptions")]
        private InputList<Inputs.ContentKeyPolicyPolicyOptionGetArgs>? _policyOptions;

        /// <summary>
        /// One or more `policy_option` blocks as defined below.
        /// </summary>
        public InputList<Inputs.ContentKeyPolicyPolicyOptionGetArgs> PolicyOptions
        {
            get => _policyOptions ?? (_policyOptions = new InputList<Inputs.ContentKeyPolicyPolicyOptionGetArgs>());
            set => _policyOptions = value;
        }

        /// <summary>
        /// The name of the Resource Group where the Content Key Policy should exist. Changing this forces a new Content Key Policy to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        public ContentKeyPolicyState()
        {
        }
        public static new ContentKeyPolicyState Empty => new ContentKeyPolicyState();
    }
}
