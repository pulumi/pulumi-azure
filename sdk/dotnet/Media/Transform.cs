// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Media
{
    /// <summary>
    /// Manages a Transform.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleAccount = new Azure.Storage.Account("exampleAccount", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         AccountTier = "Standard",
    ///         AccountReplicationType = "GRS",
    ///     });
    /// 
    ///     var exampleServiceAccount = new Azure.Media.ServiceAccount("exampleServiceAccount", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         StorageAccounts = new[]
    ///         {
    ///             new Azure.Media.Inputs.ServiceAccountStorageAccountArgs
    ///             {
    ///                 Id = exampleAccount.Id,
    ///                 IsPrimary = true,
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleTransform = new Azure.Media.Transform("exampleTransform", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         MediaServicesAccountName = exampleServiceAccount.Name,
    ///         Description = "My transform description",
    ///         Outputs = new[]
    ///         {
    ///             new Azure.Media.Inputs.TransformOutputArgs
    ///             {
    ///                 RelativePriority = "Normal",
    ///                 OnErrorAction = "ContinueJob",
    ///                 BuiltinPreset = new Azure.Media.Inputs.TransformOutputBuiltinPresetArgs
    ///                 {
    ///                     PresetName = "AACGoodQualityAudio",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### With Multiple Outputs
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleAccount = new Azure.Storage.Account("exampleAccount", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         AccountTier = "Standard",
    ///         AccountReplicationType = "GRS",
    ///     });
    /// 
    ///     var exampleServiceAccount = new Azure.Media.ServiceAccount("exampleServiceAccount", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         StorageAccounts = new[]
    ///         {
    ///             new Azure.Media.Inputs.ServiceAccountStorageAccountArgs
    ///             {
    ///                 Id = exampleAccount.Id,
    ///                 IsPrimary = true,
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleTransform = new Azure.Media.Transform("exampleTransform", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         MediaServicesAccountName = exampleServiceAccount.Name,
    ///         Description = "My transform description",
    ///         Outputs = new[]
    ///         {
    ///             new Azure.Media.Inputs.TransformOutputArgs
    ///             {
    ///                 RelativePriority = "Normal",
    ///                 OnErrorAction = "ContinueJob",
    ///                 BuiltinPreset = new Azure.Media.Inputs.TransformOutputBuiltinPresetArgs
    ///                 {
    ///                     PresetName = "AACGoodQualityAudio",
    ///                     PresetConfiguration = new Azure.Media.Inputs.TransformOutputBuiltinPresetPresetConfigurationArgs
    ///                     {
    ///                         Complexity = "Balanced",
    ///                         InterleaveOutput = "NonInterleavedOutput",
    ///                         KeyFrameIntervalInSeconds = 123122.5,
    ///                         MaxBitrateBps = 300000,
    ///                         MaxHeight = 480,
    ///                         MaxLayers = 14,
    ///                         MinBitrateBps = 200000,
    ///                         MinHeight = 360,
    ///                     },
    ///                 },
    ///             },
    ///             new Azure.Media.Inputs.TransformOutputArgs
    ///             {
    ///                 RelativePriority = "Low",
    ///                 OnErrorAction = "ContinueJob",
    ///                 AudioAnalyzerPreset = new Azure.Media.Inputs.TransformOutputAudioAnalyzerPresetArgs
    ///                 {
    ///                     AudioLanguage = "en-US",
    ///                     AudioAnalysisMode = "Basic",
    ///                     ExperimentalOptions = 
    ///                     {
    ///                         { "env", "test" },
    ///                     },
    ///                 },
    ///             },
    ///             new Azure.Media.Inputs.TransformOutputArgs
    ///             {
    ///                 RelativePriority = "Low",
    ///                 OnErrorAction = "StopProcessingJob",
    ///                 FaceDetectorPreset = new Azure.Media.Inputs.TransformOutputFaceDetectorPresetArgs
    ///                 {
    ///                     AnalysisResolution = "StandardDefinition",
    ///                     BlurType = "Med",
    ///                     FaceRedactorMode = "Combined",
    ///                     ExperimentalOptions = 
    ///                     {
    ///                         { "env", "test" },
    ///                     },
    ///                 },
    ///             },
    ///             new Azure.Media.Inputs.TransformOutputArgs
    ///             {
    ///                 RelativePriority = "Normal",
    ///                 OnErrorAction = "StopProcessingJob",
    ///                 VideoAnalyzerPreset = new Azure.Media.Inputs.TransformOutputVideoAnalyzerPresetArgs
    ///                 {
    ///                     AudioLanguage = "en-US",
    ///                     AudioAnalysisMode = "Basic",
    ///                     InsightsType = "AllInsights",
    ///                     ExperimentalOptions = 
    ///                     {
    ///                         { "env", "test" },
    ///                     },
    ///                 },
    ///             },
    ///             new Azure.Media.Inputs.TransformOutputArgs
    ///             {
    ///                 RelativePriority = "Low",
    ///                 OnErrorAction = "ContinueJob",
    ///                 CustomPreset = new Azure.Media.Inputs.TransformOutputCustomPresetArgs
    ///                 {
    ///                     Codecs = new[]
    ///                     {
    ///                         new Azure.Media.Inputs.TransformOutputCustomPresetCodecArgs
    ///                         {
    ///                             AacAudio = new Azure.Media.Inputs.TransformOutputCustomPresetCodecAacAudioArgs
    ///                             {
    ///                                 Bitrate = 128000,
    ///                                 Channels = 2,
    ///                                 SamplingRate = 48000,
    ///                                 Profile = "AacLc",
    ///                             },
    ///                         },
    ///                         new Azure.Media.Inputs.TransformOutputCustomPresetCodecArgs
    ///                         {
    ///                             CopyAudio = new Azure.Media.Inputs.TransformOutputCustomPresetCodecCopyAudioArgs
    ///                             {
    ///                                 Label = "test",
    ///                             },
    ///                         },
    ///                         new Azure.Media.Inputs.TransformOutputCustomPresetCodecArgs
    ///                         {
    ///                             CopyVideo = new Azure.Media.Inputs.TransformOutputCustomPresetCodecCopyVideoArgs
    ///                             {
    ///                                 Label = "test",
    ///                             },
    ///                         },
    ///                         new Azure.Media.Inputs.TransformOutputCustomPresetCodecArgs
    ///                         {
    ///                             H264Video = new Azure.Media.Inputs.TransformOutputCustomPresetCodecH264VideoArgs
    ///                             {
    ///                                 KeyFrameInterval = "PT1S",
    ///                                 StretchMode = "AutoSize",
    ///                                 SyncMode = "Auto",
    ///                                 SceneChangeDetectionEnabled = false,
    ///                                 RateControlMode = "ABR",
    ///                                 Complexity = "Quality",
    ///                                 Layers = new[]
    ///                                 {
    ///                                     new Azure.Media.Inputs.TransformOutputCustomPresetCodecH264VideoLayerArgs
    ///                                     {
    ///                                         Width = "64",
    ///                                         Height = "64",
    ///                                         Bitrate = 1045000,
    ///                                         MaxBitrate = 1045000,
    ///                                         BFrames = 3,
    ///                                         Slices = 0,
    ///                                         AdaptiveBFrameEnabled = true,
    ///                                         Profile = "Auto",
    ///                                         Level = "auto",
    ///                                         BufferWindow = "PT5S",
    ///                                         ReferenceFrames = 4,
    ///                                         Crf = 23,
    ///                                         EntropyMode = "Cabac",
    ///                                     },
    ///                                     new Azure.Media.Inputs.TransformOutputCustomPresetCodecH264VideoLayerArgs
    ///                                     {
    ///                                         Width = "64",
    ///                                         Height = "64",
    ///                                         Bitrate = 1000,
    ///                                         MaxBitrate = 1000,
    ///                                         BFrames = 3,
    ///                                         FrameRate = "32",
    ///                                         Slices = 1,
    ///                                         AdaptiveBFrameEnabled = true,
    ///                                         Profile = "High444",
    ///                                         Level = "auto",
    ///                                         BufferWindow = "PT5S",
    ///                                         ReferenceFrames = 4,
    ///                                         Crf = 23,
    ///                                         EntropyMode = "Cavlc",
    ///                                     },
    ///                                 },
    ///                             },
    ///                         },
    ///                         new Azure.Media.Inputs.TransformOutputCustomPresetCodecArgs
    ///                         {
    ///                             H265Video = new Azure.Media.Inputs.TransformOutputCustomPresetCodecH265VideoArgs
    ///                             {
    ///                                 KeyFrameInterval = "PT2S",
    ///                                 StretchMode = "AutoSize",
    ///                                 SyncMode = "Auto",
    ///                                 SceneChangeDetectionEnabled = false,
    ///                                 Complexity = "Speed",
    ///                                 Layers = new[]
    ///                                 {
    ///                                     new Azure.Media.Inputs.TransformOutputCustomPresetCodecH265VideoLayerArgs
    ///                                     {
    ///                                         Width = "64",
    ///                                         Height = "64",
    ///                                         Bitrate = 1045000,
    ///                                         MaxBitrate = 1045000,
    ///                                         BFrames = 3,
    ///                                         Slices = 5,
    ///                                         AdaptiveBFrameEnabled = true,
    ///                                         Profile = "Auto",
    ///                                         Label = "test",
    ///                                         Level = "auto",
    ///                                         BufferWindow = "PT5S",
    ///                                         FrameRate = "32",
    ///                                         ReferenceFrames = 4,
    ///                                         Crf = 23,
    ///                                     },
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                     Formats = new[]
    ///                     {
    ///                         new Azure.Media.Inputs.TransformOutputCustomPresetFormatArgs
    ///                         {
    ///                             Mp4 = new Azure.Media.Inputs.TransformOutputCustomPresetFormatMp4Args
    ///                             {
    ///                                 FilenamePattern = "test{Bitrate}",
    ///                                 OutputFiles = new[]
    ///                                 {
    ///                                     new Azure.Media.Inputs.TransformOutputCustomPresetFormatMp4OutputFileArgs
    ///                                     {
    ///                                         Labels = new[]
    ///                                         {
    ///                                             "test",
    ///                                             "ppe",
    ///                                         },
    ///                                     },
    ///                                 },
    ///                             },
    ///                         },
    ///                         new Azure.Media.Inputs.TransformOutputCustomPresetFormatArgs
    ///                         {
    ///                             TransportStream = new Azure.Media.Inputs.TransformOutputCustomPresetFormatTransportStreamArgs
    ///                             {
    ///                                 FilenamePattern = "test{Bitrate}",
    ///                                 OutputFiles = new[]
    ///                                 {
    ///                                     new Azure.Media.Inputs.TransformOutputCustomPresetFormatTransportStreamOutputFileArgs
    ///                                     {
    ///                                         Labels = new[]
    ///                                         {
    ///                                             "prod",
    ///                                         },
    ///                                     },
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                     Filter = new Azure.Media.Inputs.TransformOutputCustomPresetFilterArgs
    ///                     {
    ///                         CropRectangle = new Azure.Media.Inputs.TransformOutputCustomPresetFilterCropRectangleArgs
    ///                         {
    ///                             Height = "240",
    ///                             Left = "30",
    ///                             Top = "360",
    ///                             Width = "70",
    ///                         },
    ///                         Deinterlace = new Azure.Media.Inputs.TransformOutputCustomPresetFilterDeinterlaceArgs
    ///                         {
    ///                             Parity = "TopFieldFirst",
    ///                             Mode = "AutoPixelAdaptive",
    ///                         },
    ///                         FadeIn = new Azure.Media.Inputs.TransformOutputCustomPresetFilterFadeInArgs
    ///                         {
    ///                             Duration = "PT5S",
    ///                             FadeColor = "0xFF0000",
    ///                             Start = "10",
    ///                         },
    ///                         FadeOut = new Azure.Media.Inputs.TransformOutputCustomPresetFilterFadeOutArgs
    ///                         {
    ///                             Duration = "90%%",
    ///                             FadeColor = "#FF0C7B",
    ///                             Start = "10%%",
    ///                         },
    ///                         Rotation = "Auto",
    ///                         Overlays = new[]
    ///                         {
    ///                             new Azure.Media.Inputs.TransformOutputCustomPresetFilterOverlayArgs
    ///                             {
    ///                                 Audio = new Azure.Media.Inputs.TransformOutputCustomPresetFilterOverlayAudioArgs
    ///                                 {
    ///                                     InputLabel = "label.jpg",
    ///                                     Start = "PT5S",
    ///                                     End = "PT30S",
    ///                                     FadeInDuration = "PT1S",
    ///                                     FadeOutDuration = "PT2S",
    ///                                     AudioGainLevel = 1,
    ///                                 },
    ///                             },
    ///                             new Azure.Media.Inputs.TransformOutputCustomPresetFilterOverlayArgs
    ///                             {
    ///                                 Video = new Azure.Media.Inputs.TransformOutputCustomPresetFilterOverlayVideoArgs
    ///                                 {
    ///                                     InputLabel = "label.jpg",
    ///                                     Start = "PT5S",
    ///                                     End = "PT30S",
    ///                                     FadeInDuration = "PT1S",
    ///                                     FadeOutDuration = "PT2S",
    ///                                     AudioGainLevel = 1,
    ///                                     Opacity = 1,
    ///                                     Position = new Azure.Media.Inputs.TransformOutputCustomPresetFilterOverlayVideoPositionArgs
    ///                                     {
    ///                                         Height = "180",
    ///                                         Left = "20",
    ///                                         Top = "240",
    ///                                         Width = "140",
    ///                                     },
    ///                                     CropRectangle = new Azure.Media.Inputs.TransformOutputCustomPresetFilterOverlayVideoCropRectangleArgs
    ///                                     {
    ///                                         Height = "240",
    ///                                         Left = "30",
    ///                                         Top = "360",
    ///                                         Width = "70",
    ///                                     },
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Transforms can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:media/transform:Transform example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Media/mediaServices/media1/transforms/transform1
    /// ```
    /// </summary>
    [AzureResourceType("azure:media/transform:Transform")]
    public partial class Transform : global::Pulumi.CustomResource
    {
        /// <summary>
        /// An optional verbose description of the Transform.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The Media Services account name. Changing this forces a new Transform to be created.
        /// </summary>
        [Output("mediaServicesAccountName")]
        public Output<string> MediaServicesAccountName { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Transform. Changing this forces a new Transform to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// One or more `output` blocks as defined below. At least one `output` must be defined.
        /// </summary>
        [Output("outputs")]
        public Output<ImmutableArray<Outputs.TransformOutput>> Outputs { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Transform should exist. Changing this forces a new Transform to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;


        /// <summary>
        /// Create a Transform resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Transform(string name, TransformArgs args, CustomResourceOptions? options = null)
            : base("azure:media/transform:Transform", name, args ?? new TransformArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Transform(string name, Input<string> id, TransformState? state = null, CustomResourceOptions? options = null)
            : base("azure:media/transform:Transform", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Transform resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Transform Get(string name, Input<string> id, TransformState? state = null, CustomResourceOptions? options = null)
        {
            return new Transform(name, id, state, options);
        }
    }

    public sealed class TransformArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An optional verbose description of the Transform.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The Media Services account name. Changing this forces a new Transform to be created.
        /// </summary>
        [Input("mediaServicesAccountName", required: true)]
        public Input<string> MediaServicesAccountName { get; set; } = null!;

        /// <summary>
        /// The name which should be used for this Transform. Changing this forces a new Transform to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("outputs")]
        private InputList<Inputs.TransformOutputArgs>? _outputs;

        /// <summary>
        /// One or more `output` blocks as defined below. At least one `output` must be defined.
        /// </summary>
        public InputList<Inputs.TransformOutputArgs> Outputs
        {
            get => _outputs ?? (_outputs = new InputList<Inputs.TransformOutputArgs>());
            set => _outputs = value;
        }

        /// <summary>
        /// The name of the Resource Group where the Transform should exist. Changing this forces a new Transform to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public TransformArgs()
        {
        }
        public static new TransformArgs Empty => new TransformArgs();
    }

    public sealed class TransformState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An optional verbose description of the Transform.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The Media Services account name. Changing this forces a new Transform to be created.
        /// </summary>
        [Input("mediaServicesAccountName")]
        public Input<string>? MediaServicesAccountName { get; set; }

        /// <summary>
        /// The name which should be used for this Transform. Changing this forces a new Transform to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("outputs")]
        private InputList<Inputs.TransformOutputGetArgs>? _outputs;

        /// <summary>
        /// One or more `output` blocks as defined below. At least one `output` must be defined.
        /// </summary>
        public InputList<Inputs.TransformOutputGetArgs> Outputs
        {
            get => _outputs ?? (_outputs = new InputList<Inputs.TransformOutputGetArgs>());
            set => _outputs = value;
        }

        /// <summary>
        /// The name of the Resource Group where the Transform should exist. Changing this forces a new Transform to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        public TransformState()
        {
        }
        public static new TransformState Empty => new TransformState();
    }
}
