// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Media
{
    /// <summary>
    /// Manages a Transform.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Core.ResourceGroup.ResourceGroup("example", new()
    ///     {
    ///         Name = "media-resources",
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleAccount = new Azure.Storage.Account.Account("example", new()
    ///     {
    ///         Name = "examplestoracc",
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///         AccountTier = "Standard",
    ///         AccountReplicationType = "GRS",
    ///     });
    /// 
    ///     var exampleServiceAccount = new Azure.Media.ServiceAccount.ServiceAccount("example", new()
    ///     {
    ///         Name = "examplemediaacc",
    ///         Location = example.Location,
    ///         ResourceGroupName = example.Name,
    ///         StorageAccounts = new[]
    ///         {
    ///             
    ///             {
    ///                 { "id", exampleAccount.Id },
    ///                 { "isPrimary", true },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleTransform = new Azure.Media.Transform.Transform("example", new()
    ///     {
    ///         Name = "transform1",
    ///         ResourceGroupName = example.Name,
    ///         MediaServicesAccountName = exampleServiceAccount.Name,
    ///         Description = "My transform description",
    ///         Outputs = new[]
    ///         {
    ///             
    ///             {
    ///                 { "relativePriority", "Normal" },
    ///                 { "onErrorAction", "ContinueJob" },
    ///                 { "builtinPreset", 
    ///                 {
    ///                     { "presetName", "AACGoodQualityAudio" },
    ///                 } },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### With Multiple Outputs
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Core.ResourceGroup.ResourceGroup("example", new()
    ///     {
    ///         Name = "media-resources",
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleAccount = new Azure.Storage.Account.Account("example", new()
    ///     {
    ///         Name = "examplestoracc",
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///         AccountTier = "Standard",
    ///         AccountReplicationType = "GRS",
    ///     });
    /// 
    ///     var exampleServiceAccount = new Azure.Media.ServiceAccount.ServiceAccount("example", new()
    ///     {
    ///         Name = "examplemediaacc",
    ///         Location = example.Location,
    ///         ResourceGroupName = example.Name,
    ///         StorageAccounts = new[]
    ///         {
    ///             
    ///             {
    ///                 { "id", exampleAccount.Id },
    ///                 { "isPrimary", true },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleTransform = new Azure.Media.Transform.Transform("example", new()
    ///     {
    ///         Name = "transform1",
    ///         ResourceGroupName = example.Name,
    ///         MediaServicesAccountName = exampleServiceAccount.Name,
    ///         Description = "My transform description",
    ///         Outputs = new[]
    ///         {
    ///             
    ///             {
    ///                 { "relativePriority", "Normal" },
    ///                 { "onErrorAction", "ContinueJob" },
    ///                 { "builtinPreset", 
    ///                 {
    ///                     { "presetName", "AACGoodQualityAudio" },
    ///                     { "presetConfiguration", 
    ///                     {
    ///                         { "complexity", "Balanced" },
    ///                         { "interleaveOutput", "NonInterleavedOutput" },
    ///                         { "keyFrameIntervalInSeconds", 123122.5 },
    ///                         { "maxBitrateBps", 300000 },
    ///                         { "maxHeight", 480 },
    ///                         { "maxLayers", 14 },
    ///                         { "minBitrateBps", 200000 },
    ///                         { "minHeight", 360 },
    ///                     } },
    ///                 } },
    ///             },
    ///             
    ///             {
    ///                 { "relativePriority", "Low" },
    ///                 { "onErrorAction", "ContinueJob" },
    ///                 { "audioAnalyzerPreset", 
    ///                 {
    ///                     { "audioLanguage", "en-US" },
    ///                     { "audioAnalysisMode", "Basic" },
    ///                     { "experimentalOptions", 
    ///                     {
    ///                         { "env", "test" },
    ///                     } },
    ///                 } },
    ///             },
    ///             
    ///             {
    ///                 { "relativePriority", "Low" },
    ///                 { "onErrorAction", "StopProcessingJob" },
    ///                 { "faceDetectorPreset", 
    ///                 {
    ///                     { "analysisResolution", "StandardDefinition" },
    ///                     { "blurType", "Med" },
    ///                     { "faceRedactorMode", "Combined" },
    ///                     { "experimentalOptions", 
    ///                     {
    ///                         { "env", "test" },
    ///                     } },
    ///                 } },
    ///             },
    ///             
    ///             {
    ///                 { "relativePriority", "Normal" },
    ///                 { "onErrorAction", "StopProcessingJob" },
    ///                 { "videoAnalyzerPreset", 
    ///                 {
    ///                     { "audioLanguage", "en-US" },
    ///                     { "audioAnalysisMode", "Basic" },
    ///                     { "insightsType", "AllInsights" },
    ///                     { "experimentalOptions", 
    ///                     {
    ///                         { "env", "test" },
    ///                     } },
    ///                 } },
    ///             },
    ///             
    ///             {
    ///                 { "relativePriority", "Low" },
    ///                 { "onErrorAction", "ContinueJob" },
    ///                 { "customPreset", 
    ///                 {
    ///                     { "codecs", new[]
    ///                     {
    ///                         
    ///                         {
    ///                             { "aacAudio", 
    ///                             {
    ///                                 { "bitrate", 128000 },
    ///                                 { "channels", 2 },
    ///                                 { "samplingRate", 48000 },
    ///                                 { "profile", "AacLc" },
    ///                             } },
    ///                         },
    ///                         
    ///                         {
    ///                             { "copyAudio", 
    ///                             {
    ///                                 { "label", "test" },
    ///                             } },
    ///                         },
    ///                         
    ///                         {
    ///                             { "copyVideo", 
    ///                             {
    ///                                 { "label", "test" },
    ///                             } },
    ///                         },
    ///                         
    ///                         {
    ///                             { "h264Video", 
    ///                             {
    ///                                 { "keyFrameInterval", "PT1S" },
    ///                                 { "stretchMode", "AutoSize" },
    ///                                 { "syncMode", "Auto" },
    ///                                 { "sceneChangeDetectionEnabled", false },
    ///                                 { "rateControlMode", "ABR" },
    ///                                 { "complexity", "Quality" },
    ///                                 { "layers", new[]
    ///                                 {
    ///                                     
    ///                                     {
    ///                                         { "width", "64" },
    ///                                         { "height", "64" },
    ///                                         { "bitrate", 1045000 },
    ///                                         { "maxBitrate", 1045000 },
    ///                                         { "bFrames", 3 },
    ///                                         { "slices", 0 },
    ///                                         { "adaptiveBFrameEnabled", true },
    ///                                         { "profile", "Auto" },
    ///                                         { "level", "auto" },
    ///                                         { "bufferWindow", "PT5S" },
    ///                                         { "referenceFrames", 4 },
    ///                                         { "crf", 23 },
    ///                                         { "entropyMode", "Cabac" },
    ///                                     },
    ///                                     
    ///                                     {
    ///                                         { "width", "64" },
    ///                                         { "height", "64" },
    ///                                         { "bitrate", 1000 },
    ///                                         { "maxBitrate", 1000 },
    ///                                         { "bFrames", 3 },
    ///                                         { "frameRate", "32" },
    ///                                         { "slices", 1 },
    ///                                         { "adaptiveBFrameEnabled", true },
    ///                                         { "profile", "High444" },
    ///                                         { "level", "auto" },
    ///                                         { "bufferWindow", "PT5S" },
    ///                                         { "referenceFrames", 4 },
    ///                                         { "crf", 23 },
    ///                                         { "entropyMode", "Cavlc" },
    ///                                     },
    ///                                 } },
    ///                             } },
    ///                         },
    ///                         
    ///                         {
    ///                             { "h265Video", 
    ///                             {
    ///                                 { "keyFrameInterval", "PT2S" },
    ///                                 { "stretchMode", "AutoSize" },
    ///                                 { "syncMode", "Auto" },
    ///                                 { "sceneChangeDetectionEnabled", false },
    ///                                 { "complexity", "Speed" },
    ///                                 { "layers", new[]
    ///                                 {
    ///                                     
    ///                                     {
    ///                                         { "width", "64" },
    ///                                         { "height", "64" },
    ///                                         { "bitrate", 1045000 },
    ///                                         { "maxBitrate", 1045000 },
    ///                                         { "bFrames", 3 },
    ///                                         { "slices", 5 },
    ///                                         { "adaptiveBFrameEnabled", true },
    ///                                         { "profile", "Auto" },
    ///                                         { "label", "test" },
    ///                                         { "level", "auto" },
    ///                                         { "bufferWindow", "PT5S" },
    ///                                         { "frameRate", "32" },
    ///                                         { "referenceFrames", 4 },
    ///                                         { "crf", 23 },
    ///                                     },
    ///                                 } },
    ///                             } },
    ///                         },
    ///                         
    ///                         {
    ///                             { "jpgImage", 
    ///                             {
    ///                                 { "stretchMode", "AutoSize" },
    ///                                 { "syncMode", "Auto" },
    ///                                 { "start", "10" },
    ///                                 { "range", "100%%" },
    ///                                 { "spriteColumn", 1 },
    ///                                 { "step", "10" },
    ///                                 { "layers", new[]
    ///                                 {
    ///                                     
    ///                                     {
    ///                                         { "quality", 70 },
    ///                                         { "height", "180" },
    ///                                         { "label", "test" },
    ///                                         { "width", "120" },
    ///                                     },
    ///                                 } },
    ///                             } },
    ///                         },
    ///                         
    ///                         {
    ///                             { "pngImage", 
    ///                             {
    ///                                 { "stretchMode", "AutoSize" },
    ///                                 { "syncMode", "Auto" },
    ///                                 { "start", "{Best}" },
    ///                                 { "range", "80" },
    ///                                 { "step", "10" },
    ///                                 { "layers", new[]
    ///                                 {
    ///                                     
    ///                                     {
    ///                                         { "height", "180" },
    ///                                         { "label", "test" },
    ///                                         { "width", "120" },
    ///                                     },
    ///                                 } },
    ///                             } },
    ///                         },
    ///                     } },
    ///                     { "formats", new[]
    ///                     {
    ///                         
    ///                         {
    ///                             { "jpg", 
    ///                             {
    ///                                 { "filenamePattern", "test{Basename}" },
    ///                             } },
    ///                         },
    ///                         
    ///                         {
    ///                             { "mp4", 
    ///                             {
    ///                                 { "filenamePattern", "test{Bitrate}" },
    ///                                 { "outputFiles", new[]
    ///                                 {
    ///                                     
    ///                                     {
    ///                                         { "labels", new[]
    ///                                         {
    ///                                             "test",
    ///                                             "ppe",
    ///                                         } },
    ///                                     },
    ///                                 } },
    ///                             } },
    ///                         },
    ///                         
    ///                         {
    ///                             { "png", 
    ///                             {
    ///                                 { "filenamePattern", "test{Basename}" },
    ///                             } },
    ///                         },
    ///                         
    ///                         {
    ///                             { "transportStream", 
    ///                             {
    ///                                 { "filenamePattern", "test{Bitrate}" },
    ///                                 { "outputFiles", new[]
    ///                                 {
    ///                                     
    ///                                     {
    ///                                         { "labels", new[]
    ///                                         {
    ///                                             "prod",
    ///                                         } },
    ///                                     },
    ///                                 } },
    ///                             } },
    ///                         },
    ///                     } },
    ///                     { "filter", 
    ///                     {
    ///                         { "cropRectangle", 
    ///                         {
    ///                             { "height", "240" },
    ///                             { "left", "30" },
    ///                             { "top", "360" },
    ///                             { "width", "70" },
    ///                         } },
    ///                         { "deinterlace", 
    ///                         {
    ///                             { "parity", "TopFieldFirst" },
    ///                             { "mode", "AutoPixelAdaptive" },
    ///                         } },
    ///                         { "fadeIn", 
    ///                         {
    ///                             { "duration", "PT5S" },
    ///                             { "fadeColor", "0xFF0000" },
    ///                             { "start", "10" },
    ///                         } },
    ///                         { "fadeOut", 
    ///                         {
    ///                             { "duration", "90%%" },
    ///                             { "fadeColor", "#FF0C7B" },
    ///                             { "start", "10%%" },
    ///                         } },
    ///                         { "rotation", "Auto" },
    ///                         { "overlays", new[]
    ///                         {
    ///                             
    ///                             {
    ///                                 { "audio", 
    ///                                 {
    ///                                     { "inputLabel", "label.jpg" },
    ///                                     { "start", "PT5S" },
    ///                                     { "end", "PT30S" },
    ///                                     { "fadeInDuration", "PT1S" },
    ///                                     { "fadeOutDuration", "PT2S" },
    ///                                     { "audioGainLevel", 1 },
    ///                                 } },
    ///                             },
    ///                             
    ///                             {
    ///                                 { "video", 
    ///                                 {
    ///                                     { "inputLabel", "label.jpg" },
    ///                                     { "start", "PT5S" },
    ///                                     { "end", "PT30S" },
    ///                                     { "fadeInDuration", "PT1S" },
    ///                                     { "fadeOutDuration", "PT2S" },
    ///                                     { "audioGainLevel", 1 },
    ///                                     { "opacity", 1 },
    ///                                     { "position", 
    ///                                     {
    ///                                         { "height", "180" },
    ///                                         { "left", "20" },
    ///                                         { "top", "240" },
    ///                                         { "width", "140" },
    ///                                     } },
    ///                                     { "cropRectangle", 
    ///                                     {
    ///                                         { "height", "240" },
    ///                                         { "left", "30" },
    ///                                         { "top", "360" },
    ///                                         { "width", "70" },
    ///                                     } },
    ///                                 } },
    ///                             },
    ///                         } },
    ///                     } },
    ///                 } },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Transforms can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:media/transform:Transform example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Media/mediaServices/media1/transforms/transform1
    /// ```
    /// </summary>
    [AzureResourceType("azure:media/transform:Transform")]
    public partial class Transform : global::Pulumi.CustomResource
    {
        /// <summary>
        /// An optional verbose description of the Transform.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The Media Services account name. Changing this forces a new Transform to be created.
        /// </summary>
        [Output("mediaServicesAccountName")]
        public Output<string> MediaServicesAccountName { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Transform. Changing this forces a new Transform to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// One or more `output` blocks as defined below. At least one `output` must be defined.
        /// </summary>
        [Output("outputs")]
        public Output<ImmutableArray<Outputs.TransformOutput>> Outputs { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Transform should exist. Changing this forces a new Transform to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;


        /// <summary>
        /// Create a Transform resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Transform(string name, TransformArgs args, CustomResourceOptions? options = null)
            : base("azure:media/transform:Transform", name, args ?? new TransformArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Transform(string name, Input<string> id, TransformState? state = null, CustomResourceOptions? options = null)
            : base("azure:media/transform:Transform", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Transform resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Transform Get(string name, Input<string> id, TransformState? state = null, CustomResourceOptions? options = null)
        {
            return new Transform(name, id, state, options);
        }
    }

    public sealed class TransformArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An optional verbose description of the Transform.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The Media Services account name. Changing this forces a new Transform to be created.
        /// </summary>
        [Input("mediaServicesAccountName", required: true)]
        public Input<string> MediaServicesAccountName { get; set; } = null!;

        /// <summary>
        /// The name which should be used for this Transform. Changing this forces a new Transform to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("outputs")]
        private InputList<Inputs.TransformOutputArgs>? _outputs;

        /// <summary>
        /// One or more `output` blocks as defined below. At least one `output` must be defined.
        /// </summary>
        public InputList<Inputs.TransformOutputArgs> Outputs
        {
            get => _outputs ?? (_outputs = new InputList<Inputs.TransformOutputArgs>());
            set => _outputs = value;
        }

        /// <summary>
        /// The name of the Resource Group where the Transform should exist. Changing this forces a new Transform to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public TransformArgs()
        {
        }
        public static new TransformArgs Empty => new TransformArgs();
    }

    public sealed class TransformState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An optional verbose description of the Transform.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The Media Services account name. Changing this forces a new Transform to be created.
        /// </summary>
        [Input("mediaServicesAccountName")]
        public Input<string>? MediaServicesAccountName { get; set; }

        /// <summary>
        /// The name which should be used for this Transform. Changing this forces a new Transform to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("outputs")]
        private InputList<Inputs.TransformOutputGetArgs>? _outputs;

        /// <summary>
        /// One or more `output` blocks as defined below. At least one `output` must be defined.
        /// </summary>
        public InputList<Inputs.TransformOutputGetArgs> Outputs
        {
            get => _outputs ?? (_outputs = new InputList<Inputs.TransformOutputGetArgs>());
            set => _outputs = value;
        }

        /// <summary>
        /// The name of the Resource Group where the Transform should exist. Changing this forces a new Transform to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        public TransformState()
        {
        }
        public static new TransformState Empty => new TransformState();
    }
}
