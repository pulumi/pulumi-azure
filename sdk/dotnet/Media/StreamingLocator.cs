// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Media
{
    /// <summary>
    /// Manages a Media Streaming Locator.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new Azure.Core.ResourceGroupArgs
    ///         {
    ///             Location = "West Europe",
    ///         });
    ///         var exampleAccount = new Azure.Storage.Account("exampleAccount", new Azure.Storage.AccountArgs
    ///         {
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             Location = exampleResourceGroup.Location,
    ///             AccountTier = "Standard",
    ///             AccountReplicationType = "GRS",
    ///         });
    ///         var exampleServiceAccount = new Azure.Media.ServiceAccount("exampleServiceAccount", new Azure.Media.ServiceAccountArgs
    ///         {
    ///             Location = exampleResourceGroup.Location,
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             StorageAccounts = 
    ///             {
    ///                 new Azure.Media.Inputs.ServiceAccountStorageAccountArgs
    ///                 {
    ///                     Id = exampleAccount.Id,
    ///                     IsPrimary = true,
    ///                 },
    ///             },
    ///         });
    ///         var exampleAsset = new Azure.Media.Asset("exampleAsset", new Azure.Media.AssetArgs
    ///         {
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             MediaServicesAccountName = exampleServiceAccount.Name,
    ///             Description = "Asset description",
    ///         });
    ///         var exampleStreamingLocator = new Azure.Media.StreamingLocator("exampleStreamingLocator", new Azure.Media.StreamingLocatorArgs
    ///         {
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             MediaServicesAccountName = exampleServiceAccount.Name,
    ///             AssetName = exampleAsset.Name,
    ///             StreamingPolicyName = "Predefined_ClearStreamingOnly",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Streaming Locators can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:media/streamingLocator:StreamingLocator example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Media/mediaservices/account1/streaminglocators/locator1
    /// ```
    /// </summary>
    [AzureResourceType("azure:media/streamingLocator:StreamingLocator")]
    public partial class StreamingLocator : Pulumi.CustomResource
    {
        /// <summary>
        /// Alternative Media ID of this Streaming Locator. Changing this forces a new Streaming Locator to be created.
        /// </summary>
        [Output("alternativeMediaId")]
        public Output<string?> AlternativeMediaId { get; private set; } = null!;

        /// <summary>
        /// Asset Name. Changing this forces a new Streaming Locator to be created.
        /// </summary>
        [Output("assetName")]
        public Output<string> AssetName { get; private set; } = null!;

        /// <summary>
        /// One or more `content_key` blocks as defined below. Changing this forces a new Streaming Locator to be created.
        /// </summary>
        [Output("contentKeys")]
        public Output<ImmutableArray<Outputs.StreamingLocatorContentKey>> ContentKeys { get; private set; } = null!;

        /// <summary>
        /// Name of the default Content Key Policy used by this Streaming Locator.Changing this forces a new Streaming Locator to be created.
        /// </summary>
        [Output("defaultContentKeyPolicyName")]
        public Output<string?> DefaultContentKeyPolicyName { get; private set; } = null!;

        /// <summary>
        /// The end time of the Streaming Locator. Changing this forces a new Streaming Locator to be created.
        /// </summary>
        [Output("endTime")]
        public Output<string> EndTime { get; private set; } = null!;

        /// <summary>
        /// The Media Services account name. Changing this forces a new Streaming Locator to be created.
        /// </summary>
        [Output("mediaServicesAccountName")]
        public Output<string> MediaServicesAccountName { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Streaming Locator. Changing this forces a new Streaming Locator to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Streaming Locator should exist. Changing this forces a new Streaming Locator to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// The start time of the Streaming Locator. Changing this forces a new Streaming Locator to be created.
        /// </summary>
        [Output("startTime")]
        public Output<string?> StartTime { get; private set; } = null!;

        /// <summary>
        /// The ID of the Streaming Locator. Changing this forces a new Streaming Locator to be created.
        /// </summary>
        [Output("streamingLocatorId")]
        public Output<string> StreamingLocatorId { get; private set; } = null!;

        /// <summary>
        /// Name of the Streaming Policy used by this Streaming Locator. Either specify the name of Streaming Policy you created or use one of the predefined Streaming Policies. The predefined Streaming Policies available are: `Predefined_DownloadOnly`, `Predefined_ClearStreamingOnly`, `Predefined_DownloadAndClearStreaming`, `Predefined_ClearKey`, `Predefined_MultiDrmCencStreaming` and `Predefined_MultiDrmStreaming`. Changing this forces a new Streaming Locator to be created.
        /// </summary>
        [Output("streamingPolicyName")]
        public Output<string> StreamingPolicyName { get; private set; } = null!;


        /// <summary>
        /// Create a StreamingLocator resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public StreamingLocator(string name, StreamingLocatorArgs args, CustomResourceOptions? options = null)
            : base("azure:media/streamingLocator:StreamingLocator", name, args ?? new StreamingLocatorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private StreamingLocator(string name, Input<string> id, StreamingLocatorState? state = null, CustomResourceOptions? options = null)
            : base("azure:media/streamingLocator:StreamingLocator", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing StreamingLocator resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static StreamingLocator Get(string name, Input<string> id, StreamingLocatorState? state = null, CustomResourceOptions? options = null)
        {
            return new StreamingLocator(name, id, state, options);
        }
    }

    public sealed class StreamingLocatorArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Alternative Media ID of this Streaming Locator. Changing this forces a new Streaming Locator to be created.
        /// </summary>
        [Input("alternativeMediaId")]
        public Input<string>? AlternativeMediaId { get; set; }

        /// <summary>
        /// Asset Name. Changing this forces a new Streaming Locator to be created.
        /// </summary>
        [Input("assetName", required: true)]
        public Input<string> AssetName { get; set; } = null!;

        [Input("contentKeys")]
        private InputList<Inputs.StreamingLocatorContentKeyArgs>? _contentKeys;

        /// <summary>
        /// One or more `content_key` blocks as defined below. Changing this forces a new Streaming Locator to be created.
        /// </summary>
        public InputList<Inputs.StreamingLocatorContentKeyArgs> ContentKeys
        {
            get => _contentKeys ?? (_contentKeys = new InputList<Inputs.StreamingLocatorContentKeyArgs>());
            set => _contentKeys = value;
        }

        /// <summary>
        /// Name of the default Content Key Policy used by this Streaming Locator.Changing this forces a new Streaming Locator to be created.
        /// </summary>
        [Input("defaultContentKeyPolicyName")]
        public Input<string>? DefaultContentKeyPolicyName { get; set; }

        /// <summary>
        /// The end time of the Streaming Locator. Changing this forces a new Streaming Locator to be created.
        /// </summary>
        [Input("endTime")]
        public Input<string>? EndTime { get; set; }

        /// <summary>
        /// The Media Services account name. Changing this forces a new Streaming Locator to be created.
        /// </summary>
        [Input("mediaServicesAccountName", required: true)]
        public Input<string> MediaServicesAccountName { get; set; } = null!;

        /// <summary>
        /// The name which should be used for this Streaming Locator. Changing this forces a new Streaming Locator to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Streaming Locator should exist. Changing this forces a new Streaming Locator to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The start time of the Streaming Locator. Changing this forces a new Streaming Locator to be created.
        /// </summary>
        [Input("startTime")]
        public Input<string>? StartTime { get; set; }

        /// <summary>
        /// The ID of the Streaming Locator. Changing this forces a new Streaming Locator to be created.
        /// </summary>
        [Input("streamingLocatorId")]
        public Input<string>? StreamingLocatorId { get; set; }

        /// <summary>
        /// Name of the Streaming Policy used by this Streaming Locator. Either specify the name of Streaming Policy you created or use one of the predefined Streaming Policies. The predefined Streaming Policies available are: `Predefined_DownloadOnly`, `Predefined_ClearStreamingOnly`, `Predefined_DownloadAndClearStreaming`, `Predefined_ClearKey`, `Predefined_MultiDrmCencStreaming` and `Predefined_MultiDrmStreaming`. Changing this forces a new Streaming Locator to be created.
        /// </summary>
        [Input("streamingPolicyName", required: true)]
        public Input<string> StreamingPolicyName { get; set; } = null!;

        public StreamingLocatorArgs()
        {
        }
    }

    public sealed class StreamingLocatorState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Alternative Media ID of this Streaming Locator. Changing this forces a new Streaming Locator to be created.
        /// </summary>
        [Input("alternativeMediaId")]
        public Input<string>? AlternativeMediaId { get; set; }

        /// <summary>
        /// Asset Name. Changing this forces a new Streaming Locator to be created.
        /// </summary>
        [Input("assetName")]
        public Input<string>? AssetName { get; set; }

        [Input("contentKeys")]
        private InputList<Inputs.StreamingLocatorContentKeyGetArgs>? _contentKeys;

        /// <summary>
        /// One or more `content_key` blocks as defined below. Changing this forces a new Streaming Locator to be created.
        /// </summary>
        public InputList<Inputs.StreamingLocatorContentKeyGetArgs> ContentKeys
        {
            get => _contentKeys ?? (_contentKeys = new InputList<Inputs.StreamingLocatorContentKeyGetArgs>());
            set => _contentKeys = value;
        }

        /// <summary>
        /// Name of the default Content Key Policy used by this Streaming Locator.Changing this forces a new Streaming Locator to be created.
        /// </summary>
        [Input("defaultContentKeyPolicyName")]
        public Input<string>? DefaultContentKeyPolicyName { get; set; }

        /// <summary>
        /// The end time of the Streaming Locator. Changing this forces a new Streaming Locator to be created.
        /// </summary>
        [Input("endTime")]
        public Input<string>? EndTime { get; set; }

        /// <summary>
        /// The Media Services account name. Changing this forces a new Streaming Locator to be created.
        /// </summary>
        [Input("mediaServicesAccountName")]
        public Input<string>? MediaServicesAccountName { get; set; }

        /// <summary>
        /// The name which should be used for this Streaming Locator. Changing this forces a new Streaming Locator to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Streaming Locator should exist. Changing this forces a new Streaming Locator to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// The start time of the Streaming Locator. Changing this forces a new Streaming Locator to be created.
        /// </summary>
        [Input("startTime")]
        public Input<string>? StartTime { get; set; }

        /// <summary>
        /// The ID of the Streaming Locator. Changing this forces a new Streaming Locator to be created.
        /// </summary>
        [Input("streamingLocatorId")]
        public Input<string>? StreamingLocatorId { get; set; }

        /// <summary>
        /// Name of the Streaming Policy used by this Streaming Locator. Either specify the name of Streaming Policy you created or use one of the predefined Streaming Policies. The predefined Streaming Policies available are: `Predefined_DownloadOnly`, `Predefined_ClearStreamingOnly`, `Predefined_DownloadAndClearStreaming`, `Predefined_ClearKey`, `Predefined_MultiDrmCencStreaming` and `Predefined_MultiDrmStreaming`. Changing this forces a new Streaming Locator to be created.
        /// </summary>
        [Input("streamingPolicyName")]
        public Input<string>? StreamingPolicyName { get; set; }

        public StreamingLocatorState()
        {
        }
    }
}
