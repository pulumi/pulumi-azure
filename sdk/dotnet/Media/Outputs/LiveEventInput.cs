// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Media.Outputs
{

    [OutputType]
    public sealed class LiveEventInput
    {
        /// <summary>
        /// A UUID in string form to uniquely identify the stream. If omitted, the service will generate a unique value. Changing this forces a new value to be created.
        /// </summary>
        public readonly string? AccessToken;
        public readonly ImmutableArray<Outputs.LiveEventInputEndpoint> Endpoints;
        /// <summary>
        /// One or more `ip_access_control_allow` blocks as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.LiveEventInputIpAccessControlAllow> IpAccessControlAllows;
        /// <summary>
        /// ISO 8601 time duration of the key frame interval duration of the input. This value sets the `EXT-X-TARGETDURATION` property in the HLS output. For example, use PT2S to indicate 2 seconds. This field cannot be set when `type` is set to `Encoding`.
        /// </summary>
        public readonly string? KeyFrameIntervalDuration;
        /// <summary>
        /// The input protocol for the live event. Allowed values are `FragmentedMP4` and `RTMP`. Changing this forces a new resource to be created.
        /// </summary>
        public readonly string? StreamingProtocol;

        [OutputConstructor]
        private LiveEventInput(
            string? accessToken,

            ImmutableArray<Outputs.LiveEventInputEndpoint> endpoints,

            ImmutableArray<Outputs.LiveEventInputIpAccessControlAllow> ipAccessControlAllows,

            string? keyFrameIntervalDuration,

            string? streamingProtocol)
        {
            AccessToken = accessToken;
            Endpoints = endpoints;
            IpAccessControlAllows = ipAccessControlAllows;
            KeyFrameIntervalDuration = keyFrameIntervalDuration;
            StreamingProtocol = streamingProtocol;
        }
    }
}
