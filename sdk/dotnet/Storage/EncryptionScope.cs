// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Storage
{
    /// <summary>
    /// Manages a Storage Encryption Scope.
    /// 
    /// &gt; **Note:** Storage Encryption Scopes are in Preview [more information can be found here](https://docs.microsoft.com/azure/storage/blobs/encryption-scope-manage).
    /// 
    /// ## Import
    /// 
    /// Storage Encryption Scopes can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:storage/encryptionScope:EncryptionScope example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Storage/storageAccounts/account1/encryptionScopes/scope1
    /// ```
    /// </summary>
    [AzureResourceType("azure:storage/encryptionScope:EncryptionScope")]
    public partial class EncryptionScope : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Is a secondary layer of encryption with Platform Managed Keys for data applied? Changing this forces a new resource to be created.
        /// </summary>
        [Output("infrastructureEncryptionRequired")]
        public Output<bool?> InfrastructureEncryptionRequired { get; private set; } = null!;

        /// <summary>
        /// The ID of the Key Vault Key. Required when `source` is `Microsoft.KeyVault`.
        /// </summary>
        [Output("keyVaultKeyId")]
        public Output<string?> KeyVaultKeyId { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Storage Encryption Scope. Changing this forces a new Storage Encryption Scope to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The source of the Storage Encryption Scope. Possible values are `Microsoft.KeyVault` and `Microsoft.Storage`.
        /// </summary>
        [Output("source")]
        public Output<string> Source { get; private set; } = null!;

        /// <summary>
        /// The ID of the Storage Account where this Storage Encryption Scope is created. Changing this forces a new Storage Encryption Scope to be created.
        /// </summary>
        [Output("storageAccountId")]
        public Output<string> StorageAccountId { get; private set; } = null!;


        /// <summary>
        /// Create a EncryptionScope resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EncryptionScope(string name, EncryptionScopeArgs args, CustomResourceOptions? options = null)
            : base("azure:storage/encryptionScope:EncryptionScope", name, args ?? new EncryptionScopeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EncryptionScope(string name, Input<string> id, EncryptionScopeState? state = null, CustomResourceOptions? options = null)
            : base("azure:storage/encryptionScope:EncryptionScope", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EncryptionScope resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EncryptionScope Get(string name, Input<string> id, EncryptionScopeState? state = null, CustomResourceOptions? options = null)
        {
            return new EncryptionScope(name, id, state, options);
        }
    }

    public sealed class EncryptionScopeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Is a secondary layer of encryption with Platform Managed Keys for data applied? Changing this forces a new resource to be created.
        /// </summary>
        [Input("infrastructureEncryptionRequired")]
        public Input<bool>? InfrastructureEncryptionRequired { get; set; }

        /// <summary>
        /// The ID of the Key Vault Key. Required when `source` is `Microsoft.KeyVault`.
        /// </summary>
        [Input("keyVaultKeyId")]
        public Input<string>? KeyVaultKeyId { get; set; }

        /// <summary>
        /// The name which should be used for this Storage Encryption Scope. Changing this forces a new Storage Encryption Scope to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The source of the Storage Encryption Scope. Possible values are `Microsoft.KeyVault` and `Microsoft.Storage`.
        /// </summary>
        [Input("source", required: true)]
        public Input<string> Source { get; set; } = null!;

        /// <summary>
        /// The ID of the Storage Account where this Storage Encryption Scope is created. Changing this forces a new Storage Encryption Scope to be created.
        /// </summary>
        [Input("storageAccountId", required: true)]
        public Input<string> StorageAccountId { get; set; } = null!;

        public EncryptionScopeArgs()
        {
        }
        public static new EncryptionScopeArgs Empty => new EncryptionScopeArgs();
    }

    public sealed class EncryptionScopeState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Is a secondary layer of encryption with Platform Managed Keys for data applied? Changing this forces a new resource to be created.
        /// </summary>
        [Input("infrastructureEncryptionRequired")]
        public Input<bool>? InfrastructureEncryptionRequired { get; set; }

        /// <summary>
        /// The ID of the Key Vault Key. Required when `source` is `Microsoft.KeyVault`.
        /// </summary>
        [Input("keyVaultKeyId")]
        public Input<string>? KeyVaultKeyId { get; set; }

        /// <summary>
        /// The name which should be used for this Storage Encryption Scope. Changing this forces a new Storage Encryption Scope to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The source of the Storage Encryption Scope. Possible values are `Microsoft.KeyVault` and `Microsoft.Storage`.
        /// </summary>
        [Input("source")]
        public Input<string>? Source { get; set; }

        /// <summary>
        /// The ID of the Storage Account where this Storage Encryption Scope is created. Changing this forces a new Storage Encryption Scope to be created.
        /// </summary>
        [Input("storageAccountId")]
        public Input<string>? StorageAccountId { get; set; }

        public EncryptionScopeState()
        {
        }
        public static new EncryptionScopeState Empty => new EncryptionScopeState();
    }
}
