// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Storage
{
    /// <summary>
    /// Manages a Data Lake Gen2 Path in a File System within an Azure Storage Account.
    /// 
    /// &gt; **NOTE:** This Resource requires using Azure Active Directory to connect to Azure Storage, which in turn requires the `Storage` specific roles - which are not granted by default.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new Azure.Core.ResourceGroupArgs
    ///         {
    ///             Location = "West Europe",
    ///         });
    ///         var exampleAccount = new Azure.Storage.Account("exampleAccount", new Azure.Storage.AccountArgs
    ///         {
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             Location = exampleResourceGroup.Location,
    ///             AccountTier = "Standard",
    ///             AccountReplicationType = "LRS",
    ///             AccountKind = "StorageV2",
    ///             IsHnsEnabled = true,
    ///         });
    ///         var exampleDataLakeGen2Filesystem = new Azure.Storage.DataLakeGen2Filesystem("exampleDataLakeGen2Filesystem", new Azure.Storage.DataLakeGen2FilesystemArgs
    ///         {
    ///             StorageAccountId = exampleAccount.Id,
    ///         });
    ///         var exampleDataLakeGen2Path = new Azure.Storage.DataLakeGen2Path("exampleDataLakeGen2Path", new Azure.Storage.DataLakeGen2PathArgs
    ///         {
    ///             Path = "example",
    ///             FilesystemName = exampleDataLakeGen2Filesystem.Name,
    ///             StorageAccountId = exampleAccount.Id,
    ///             Resource = "directory",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Data Lake Gen2 Paths can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:storage/dataLakeGen2Path:DataLakeGen2Path example https://account1.dfs.core.windows.net/fileSystem1/path
    /// ```
    /// </summary>
    [AzureResourceType("azure:storage/dataLakeGen2Path:DataLakeGen2Path")]
    public partial class DataLakeGen2Path : Pulumi.CustomResource
    {
        /// <summary>
        /// One or more `ace` blocks as defined below to specify the entries for the ACL for the path.
        /// </summary>
        [Output("aces")]
        public Output<ImmutableArray<Outputs.DataLakeGen2PathAce>> Aces { get; private set; } = null!;

        /// <summary>
        /// The name of the Data Lake Gen2 File System which should be created within the Storage Account. Must be unique within the storage account the queue is located. Changing this forces a new resource to be created.
        /// </summary>
        [Output("filesystemName")]
        public Output<string> FilesystemName { get; private set; } = null!;

        /// <summary>
        /// Specifies the Object ID of the Azure Active Directory Group to make the owning group.
        /// </summary>
        [Output("group")]
        public Output<string> Group { get; private set; } = null!;

        /// <summary>
        /// Specifies the Object ID of the Azure Active Directory User to make the owning user.
        /// </summary>
        [Output("owner")]
        public Output<string> Owner { get; private set; } = null!;

        /// <summary>
        /// The path which should be created within the Data Lake Gen2 File System in the Storage Account. Changing this forces a new resource to be created.
        /// </summary>
        [Output("path")]
        public Output<string> Path { get; private set; } = null!;

        /// <summary>
        /// Specifies the type for path to create. Currently only `directory` is supported.
        /// </summary>
        [Output("resource")]
        public Output<string> Resource { get; private set; } = null!;

        /// <summary>
        /// Specifies the ID of the Storage Account in which the Data Lake Gen2 File System should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("storageAccountId")]
        public Output<string> StorageAccountId { get; private set; } = null!;


        /// <summary>
        /// Create a DataLakeGen2Path resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DataLakeGen2Path(string name, DataLakeGen2PathArgs args, CustomResourceOptions? options = null)
            : base("azure:storage/dataLakeGen2Path:DataLakeGen2Path", name, args ?? new DataLakeGen2PathArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DataLakeGen2Path(string name, Input<string> id, DataLakeGen2PathState? state = null, CustomResourceOptions? options = null)
            : base("azure:storage/dataLakeGen2Path:DataLakeGen2Path", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DataLakeGen2Path resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DataLakeGen2Path Get(string name, Input<string> id, DataLakeGen2PathState? state = null, CustomResourceOptions? options = null)
        {
            return new DataLakeGen2Path(name, id, state, options);
        }
    }

    public sealed class DataLakeGen2PathArgs : Pulumi.ResourceArgs
    {
        [Input("aces")]
        private InputList<Inputs.DataLakeGen2PathAceArgs>? _aces;

        /// <summary>
        /// One or more `ace` blocks as defined below to specify the entries for the ACL for the path.
        /// </summary>
        public InputList<Inputs.DataLakeGen2PathAceArgs> Aces
        {
            get => _aces ?? (_aces = new InputList<Inputs.DataLakeGen2PathAceArgs>());
            set => _aces = value;
        }

        /// <summary>
        /// The name of the Data Lake Gen2 File System which should be created within the Storage Account. Must be unique within the storage account the queue is located. Changing this forces a new resource to be created.
        /// </summary>
        [Input("filesystemName", required: true)]
        public Input<string> FilesystemName { get; set; } = null!;

        /// <summary>
        /// Specifies the Object ID of the Azure Active Directory Group to make the owning group.
        /// </summary>
        [Input("group")]
        public Input<string>? Group { get; set; }

        /// <summary>
        /// Specifies the Object ID of the Azure Active Directory User to make the owning user.
        /// </summary>
        [Input("owner")]
        public Input<string>? Owner { get; set; }

        /// <summary>
        /// The path which should be created within the Data Lake Gen2 File System in the Storage Account. Changing this forces a new resource to be created.
        /// </summary>
        [Input("path", required: true)]
        public Input<string> Path { get; set; } = null!;

        /// <summary>
        /// Specifies the type for path to create. Currently only `directory` is supported.
        /// </summary>
        [Input("resource", required: true)]
        public Input<string> Resource { get; set; } = null!;

        /// <summary>
        /// Specifies the ID of the Storage Account in which the Data Lake Gen2 File System should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("storageAccountId", required: true)]
        public Input<string> StorageAccountId { get; set; } = null!;

        public DataLakeGen2PathArgs()
        {
        }
    }

    public sealed class DataLakeGen2PathState : Pulumi.ResourceArgs
    {
        [Input("aces")]
        private InputList<Inputs.DataLakeGen2PathAceGetArgs>? _aces;

        /// <summary>
        /// One or more `ace` blocks as defined below to specify the entries for the ACL for the path.
        /// </summary>
        public InputList<Inputs.DataLakeGen2PathAceGetArgs> Aces
        {
            get => _aces ?? (_aces = new InputList<Inputs.DataLakeGen2PathAceGetArgs>());
            set => _aces = value;
        }

        /// <summary>
        /// The name of the Data Lake Gen2 File System which should be created within the Storage Account. Must be unique within the storage account the queue is located. Changing this forces a new resource to be created.
        /// </summary>
        [Input("filesystemName")]
        public Input<string>? FilesystemName { get; set; }

        /// <summary>
        /// Specifies the Object ID of the Azure Active Directory Group to make the owning group.
        /// </summary>
        [Input("group")]
        public Input<string>? Group { get; set; }

        /// <summary>
        /// Specifies the Object ID of the Azure Active Directory User to make the owning user.
        /// </summary>
        [Input("owner")]
        public Input<string>? Owner { get; set; }

        /// <summary>
        /// The path which should be created within the Data Lake Gen2 File System in the Storage Account. Changing this forces a new resource to be created.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// Specifies the type for path to create. Currently only `directory` is supported.
        /// </summary>
        [Input("resource")]
        public Input<string>? Resource { get; set; }

        /// <summary>
        /// Specifies the ID of the Storage Account in which the Data Lake Gen2 File System should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("storageAccountId")]
        public Input<string>? StorageAccountId { get; set; }

        public DataLakeGen2PathState()
        {
        }
    }
}
