// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Storage
{
    public static class GetBlob
    {
        /// <summary>
        /// Use this data source to access information about an existing Storage Blob.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Storage.GetBlob.Invoke(new()
        ///     {
        ///         Name = "example-blob-name",
        ///         StorageAccountName = "example-storage-account-name",
        ///         StorageContainerName = "example-storage-container-name",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetBlobResult> InvokeAsync(GetBlobArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetBlobResult>("azure:storage/getBlob:getBlob", args ?? new GetBlobArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Storage Blob.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Storage.GetBlob.Invoke(new()
        ///     {
        ///         Name = "example-blob-name",
        ///         StorageAccountName = "example-storage-account-name",
        ///         StorageContainerName = "example-storage-container-name",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetBlobResult> Invoke(GetBlobInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetBlobResult>("azure:storage/getBlob:getBlob", args ?? new GetBlobInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBlobArgs : global::Pulumi.InvokeArgs
    {
        [Input("metadata")]
        private Dictionary<string, string>? _metadata;

        /// <summary>
        /// A map of custom blob metadata.
        /// </summary>
        public Dictionary<string, string> Metadata
        {
            get => _metadata ?? (_metadata = new Dictionary<string, string>());
            set => _metadata = value;
        }

        /// <summary>
        /// The name of the Blob.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the Storage Account where the Container exists.
        /// </summary>
        [Input("storageAccountName", required: true)]
        public string StorageAccountName { get; set; } = null!;

        /// <summary>
        /// The name of the Storage Container where the Blob exists.
        /// </summary>
        [Input("storageContainerName", required: true)]
        public string StorageContainerName { get; set; } = null!;

        public GetBlobArgs()
        {
        }
        public static new GetBlobArgs Empty => new GetBlobArgs();
    }

    public sealed class GetBlobInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// A map of custom blob metadata.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// The name of the Blob.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of the Storage Account where the Container exists.
        /// </summary>
        [Input("storageAccountName", required: true)]
        public Input<string> StorageAccountName { get; set; } = null!;

        /// <summary>
        /// The name of the Storage Container where the Blob exists.
        /// </summary>
        [Input("storageContainerName", required: true)]
        public Input<string> StorageContainerName { get; set; } = null!;

        public GetBlobInvokeArgs()
        {
        }
        public static new GetBlobInvokeArgs Empty => new GetBlobInvokeArgs();
    }


    [OutputType]
    public sealed class GetBlobResult
    {
        /// <summary>
        /// The access tier of the storage blob.
        /// </summary>
        public readonly string AccessTier;
        /// <summary>
        /// The MD5 sum of the blob contents.
        /// </summary>
        public readonly string ContentMd5;
        /// <summary>
        /// The content type of the storage blob.
        /// </summary>
        public readonly string ContentType;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A map of custom blob metadata.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Metadata;
        public readonly string Name;
        public readonly string StorageAccountName;
        public readonly string StorageContainerName;
        /// <summary>
        /// The type of the storage blob
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The URL of the storage blob.
        /// </summary>
        public readonly string Url;

        [OutputConstructor]
        private GetBlobResult(
            string accessTier,

            string contentMd5,

            string contentType,

            string id,

            ImmutableDictionary<string, string> metadata,

            string name,

            string storageAccountName,

            string storageContainerName,

            string type,

            string url)
        {
            AccessTier = accessTier;
            ContentMd5 = contentMd5;
            ContentType = contentType;
            Id = id;
            Metadata = metadata;
            Name = name;
            StorageAccountName = storageAccountName;
            StorageContainerName = storageContainerName;
            Type = type;
            Url = url;
        }
    }
}
