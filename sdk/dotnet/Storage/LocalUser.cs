// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Storage
{
    /// <summary>
    /// Manages a Storage Account Local User.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "WestEurope",
    ///     });
    /// 
    ///     var exampleAccount = new Azure.Storage.Account("exampleAccount", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         AccountKind = "StorageV2",
    ///         AccountTier = "Standard",
    ///         AccountReplicationType = "LRS",
    ///         IsHnsEnabled = true,
    ///     });
    /// 
    ///     var exampleContainer = new Azure.Storage.Container("exampleContainer", new()
    ///     {
    ///         StorageAccountName = exampleAccount.Name,
    ///     });
    /// 
    ///     var exampleLocalUser = new Azure.Storage.LocalUser("exampleLocalUser", new()
    ///     {
    ///         StorageAccountId = exampleAccount.Id,
    ///         SshKeyEnabled = true,
    ///         SshPasswordEnabled = true,
    ///         HomeDirectory = "example_path",
    ///         SshAuthorizedKeys = new[]
    ///         {
    ///             new Azure.Storage.Inputs.LocalUserSshAuthorizedKeyArgs
    ///             {
    ///                 Description = "key1",
    ///                 Key = local.First_public_key,
    ///             },
    ///             new Azure.Storage.Inputs.LocalUserSshAuthorizedKeyArgs
    ///             {
    ///                 Description = "key2",
    ///                 Key = local.Second_public_key,
    ///             },
    ///         },
    ///         PermissionScopes = new[]
    ///         {
    ///             new Azure.Storage.Inputs.LocalUserPermissionScopeArgs
    ///             {
    ///                 Permissions = new Azure.Storage.Inputs.LocalUserPermissionScopePermissionsArgs
    ///                 {
    ///                     Read = true,
    ///                     Create = true,
    ///                 },
    ///                 Service = "blob",
    ///                 ResourceName = exampleContainer.Name,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Storage Account Local Users can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:storage/localUser:LocalUser example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Storage/storageAccounts/storageAccount1/localUsers/user1
    /// ```
    /// </summary>
    [AzureResourceType("azure:storage/localUser:LocalUser")]
    public partial class LocalUser : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The home directory of the Storage Account Local User.
        /// </summary>
        [Output("homeDirectory")]
        public Output<string?> HomeDirectory { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Storage Account Local User. Changing this forces a new Storage Account Local User to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The value of the password, which is only available when `ssh_password_enabled` is set to `true`.
        /// </summary>
        [Output("password")]
        public Output<string> Password { get; private set; } = null!;

        /// <summary>
        /// One or more `permission_scope` blocks as defined below.
        /// </summary>
        [Output("permissionScopes")]
        public Output<ImmutableArray<Outputs.LocalUserPermissionScope>> PermissionScopes { get; private set; } = null!;

        /// <summary>
        /// The unique Security Identifier of this Storage Account Local User.
        /// </summary>
        [Output("sid")]
        public Output<string> Sid { get; private set; } = null!;

        /// <summary>
        /// One or more `ssh_authorized_key` blocks as defined below.
        /// </summary>
        [Output("sshAuthorizedKeys")]
        public Output<ImmutableArray<Outputs.LocalUserSshAuthorizedKey>> SshAuthorizedKeys { get; private set; } = null!;

        /// <summary>
        /// Specifies whether SSH Key Authentication is enabled. Defaults to `false`.
        /// </summary>
        [Output("sshKeyEnabled")]
        public Output<bool?> SshKeyEnabled { get; private set; } = null!;

        /// <summary>
        /// Specifies whether SSH Password Authentication is enabled. Defaults to `false`.
        /// </summary>
        [Output("sshPasswordEnabled")]
        public Output<bool?> SshPasswordEnabled { get; private set; } = null!;

        /// <summary>
        /// The ID of the Storage Account that this Storage Account Local User resides in. Changing this forces a new Storage Account Local User to be created.
        /// </summary>
        [Output("storageAccountId")]
        public Output<string> StorageAccountId { get; private set; } = null!;


        /// <summary>
        /// Create a LocalUser resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LocalUser(string name, LocalUserArgs args, CustomResourceOptions? options = null)
            : base("azure:storage/localUser:LocalUser", name, args ?? new LocalUserArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LocalUser(string name, Input<string> id, LocalUserState? state = null, CustomResourceOptions? options = null)
            : base("azure:storage/localUser:LocalUser", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "password",
                    "sid",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LocalUser resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LocalUser Get(string name, Input<string> id, LocalUserState? state = null, CustomResourceOptions? options = null)
        {
            return new LocalUser(name, id, state, options);
        }
    }

    public sealed class LocalUserArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The home directory of the Storage Account Local User.
        /// </summary>
        [Input("homeDirectory")]
        public Input<string>? HomeDirectory { get; set; }

        /// <summary>
        /// The name which should be used for this Storage Account Local User. Changing this forces a new Storage Account Local User to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("permissionScopes")]
        private InputList<Inputs.LocalUserPermissionScopeArgs>? _permissionScopes;

        /// <summary>
        /// One or more `permission_scope` blocks as defined below.
        /// </summary>
        public InputList<Inputs.LocalUserPermissionScopeArgs> PermissionScopes
        {
            get => _permissionScopes ?? (_permissionScopes = new InputList<Inputs.LocalUserPermissionScopeArgs>());
            set => _permissionScopes = value;
        }

        [Input("sshAuthorizedKeys")]
        private InputList<Inputs.LocalUserSshAuthorizedKeyArgs>? _sshAuthorizedKeys;

        /// <summary>
        /// One or more `ssh_authorized_key` blocks as defined below.
        /// </summary>
        public InputList<Inputs.LocalUserSshAuthorizedKeyArgs> SshAuthorizedKeys
        {
            get => _sshAuthorizedKeys ?? (_sshAuthorizedKeys = new InputList<Inputs.LocalUserSshAuthorizedKeyArgs>());
            set => _sshAuthorizedKeys = value;
        }

        /// <summary>
        /// Specifies whether SSH Key Authentication is enabled. Defaults to `false`.
        /// </summary>
        [Input("sshKeyEnabled")]
        public Input<bool>? SshKeyEnabled { get; set; }

        /// <summary>
        /// Specifies whether SSH Password Authentication is enabled. Defaults to `false`.
        /// </summary>
        [Input("sshPasswordEnabled")]
        public Input<bool>? SshPasswordEnabled { get; set; }

        /// <summary>
        /// The ID of the Storage Account that this Storage Account Local User resides in. Changing this forces a new Storage Account Local User to be created.
        /// </summary>
        [Input("storageAccountId", required: true)]
        public Input<string> StorageAccountId { get; set; } = null!;

        public LocalUserArgs()
        {
        }
        public static new LocalUserArgs Empty => new LocalUserArgs();
    }

    public sealed class LocalUserState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The home directory of the Storage Account Local User.
        /// </summary>
        [Input("homeDirectory")]
        public Input<string>? HomeDirectory { get; set; }

        /// <summary>
        /// The name which should be used for this Storage Account Local User. Changing this forces a new Storage Account Local User to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The value of the password, which is only available when `ssh_password_enabled` is set to `true`.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("permissionScopes")]
        private InputList<Inputs.LocalUserPermissionScopeGetArgs>? _permissionScopes;

        /// <summary>
        /// One or more `permission_scope` blocks as defined below.
        /// </summary>
        public InputList<Inputs.LocalUserPermissionScopeGetArgs> PermissionScopes
        {
            get => _permissionScopes ?? (_permissionScopes = new InputList<Inputs.LocalUserPermissionScopeGetArgs>());
            set => _permissionScopes = value;
        }

        [Input("sid")]
        private Input<string>? _sid;

        /// <summary>
        /// The unique Security Identifier of this Storage Account Local User.
        /// </summary>
        public Input<string>? Sid
        {
            get => _sid;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _sid = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("sshAuthorizedKeys")]
        private InputList<Inputs.LocalUserSshAuthorizedKeyGetArgs>? _sshAuthorizedKeys;

        /// <summary>
        /// One or more `ssh_authorized_key` blocks as defined below.
        /// </summary>
        public InputList<Inputs.LocalUserSshAuthorizedKeyGetArgs> SshAuthorizedKeys
        {
            get => _sshAuthorizedKeys ?? (_sshAuthorizedKeys = new InputList<Inputs.LocalUserSshAuthorizedKeyGetArgs>());
            set => _sshAuthorizedKeys = value;
        }

        /// <summary>
        /// Specifies whether SSH Key Authentication is enabled. Defaults to `false`.
        /// </summary>
        [Input("sshKeyEnabled")]
        public Input<bool>? SshKeyEnabled { get; set; }

        /// <summary>
        /// Specifies whether SSH Password Authentication is enabled. Defaults to `false`.
        /// </summary>
        [Input("sshPasswordEnabled")]
        public Input<bool>? SshPasswordEnabled { get; set; }

        /// <summary>
        /// The ID of the Storage Account that this Storage Account Local User resides in. Changing this forces a new Storage Account Local User to be created.
        /// </summary>
        [Input("storageAccountId")]
        public Input<string>? StorageAccountId { get; set; }

        public LocalUserState()
        {
        }
        public static new LocalUserState Empty => new LocalUserState();
    }
}
