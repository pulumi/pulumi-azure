// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Storage
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Name = "azuretest",
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleAccount = new Azure.Storage.Account("example", new()
    ///     {
    ///         Name = "azureteststorage",
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///         AccountTier = "Standard",
    ///         AccountReplicationType = "LRS",
    ///     });
    /// 
    ///     var exampleShare = new Azure.Storage.Share("example", new()
    ///     {
    ///         Name = "sharename",
    ///         StorageAccountName = exampleAccount.Name,
    ///         Quota = 50,
    ///     });
    /// 
    ///     var exampleShareDirectory = new Azure.Storage.ShareDirectory("example", new()
    ///     {
    ///         Name = "example",
    ///         StorageShareId = exampleShare.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Directories within an Azure Storage File Share can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:storage/shareDirectory:ShareDirectory example https://tomdevsa20.file.core.windows.net/share1/directory1
    /// ```
    /// </summary>
    [AzureResourceType("azure:storage/shareDirectory:ShareDirectory")]
    public partial class ShareDirectory : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A mapping of metadata to assign to this Directory.
        /// </summary>
        [Output("metadata")]
        public Output<ImmutableDictionary<string, string>?> Metadata { get; private set; } = null!;

        /// <summary>
        /// The name (or path) of the Directory that should be created within this File Share. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The Storage Share ID in which this file will be placed into. Changing this forces a new resource to be created.
        /// </summary>
        [Output("storageShareId")]
        public Output<string> StorageShareId { get; private set; } = null!;


        /// <summary>
        /// Create a ShareDirectory resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ShareDirectory(string name, ShareDirectoryArgs args, CustomResourceOptions? options = null)
            : base("azure:storage/shareDirectory:ShareDirectory", name, args ?? new ShareDirectoryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ShareDirectory(string name, Input<string> id, ShareDirectoryState? state = null, CustomResourceOptions? options = null)
            : base("azure:storage/shareDirectory:ShareDirectory", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ShareDirectory resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ShareDirectory Get(string name, Input<string> id, ShareDirectoryState? state = null, CustomResourceOptions? options = null)
        {
            return new ShareDirectory(name, id, state, options);
        }
    }

    public sealed class ShareDirectoryArgs : global::Pulumi.ResourceArgs
    {
        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// A mapping of metadata to assign to this Directory.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// The name (or path) of the Directory that should be created within this File Share. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The Storage Share ID in which this file will be placed into. Changing this forces a new resource to be created.
        /// </summary>
        [Input("storageShareId", required: true)]
        public Input<string> StorageShareId { get; set; } = null!;

        public ShareDirectoryArgs()
        {
        }
        public static new ShareDirectoryArgs Empty => new ShareDirectoryArgs();
    }

    public sealed class ShareDirectoryState : global::Pulumi.ResourceArgs
    {
        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// A mapping of metadata to assign to this Directory.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// The name (or path) of the Directory that should be created within this File Share. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The Storage Share ID in which this file will be placed into. Changing this forces a new resource to be created.
        /// </summary>
        [Input("storageShareId")]
        public Input<string>? StorageShareId { get; set; }

        public ShareDirectoryState()
        {
        }
        public static new ShareDirectoryState Empty => new ShareDirectoryState();
    }
}
