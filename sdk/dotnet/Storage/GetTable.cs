// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Storage
{
    public static class GetTable
    {
        /// <summary>
        /// Use this data source to access information about an existing Storage Table.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Storage.GetTable.Invoke(new()
        ///     {
        ///         Name = "example-table-name",
        ///         StorageAccountName = "example-storage-account-name",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetTableResult> InvokeAsync(GetTableArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTableResult>("azure:storage/getTable:getTable", args ?? new GetTableArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Storage Table.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Storage.GetTable.Invoke(new()
        ///     {
        ///         Name = "example-table-name",
        ///         StorageAccountName = "example-storage-account-name",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetTableResult> Invoke(GetTableInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTableResult>("azure:storage/getTable:getTable", args ?? new GetTableInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Storage Table.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Storage.GetTable.Invoke(new()
        ///     {
        ///         Name = "example-table-name",
        ///         StorageAccountName = "example-storage-account-name",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetTableResult> Invoke(GetTableInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetTableResult>("azure:storage/getTable:getTable", args ?? new GetTableInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTableArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Table.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the Storage Account where the Table exists.
        /// </summary>
        [Input("storageAccountName", required: true)]
        public string StorageAccountName { get; set; } = null!;

        public GetTableArgs()
        {
        }
        public static new GetTableArgs Empty => new GetTableArgs();
    }

    public sealed class GetTableInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Table.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of the Storage Account where the Table exists.
        /// </summary>
        [Input("storageAccountName", required: true)]
        public Input<string> StorageAccountName { get; set; } = null!;

        public GetTableInvokeArgs()
        {
        }
        public static new GetTableInvokeArgs Empty => new GetTableInvokeArgs();
    }


    [OutputType]
    public sealed class GetTableResult
    {
        /// <summary>
        /// A mapping of ACLs for this Table.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTableAclResult> Acls;
        /// <summary>
        /// The ID of the Storage Table.
        /// </summary>
        public readonly string Id;
        public readonly string Name;
        /// <summary>
        /// The Resource Manager ID of this Storage Table.
        /// </summary>
        public readonly string ResourceManagerId;
        public readonly string StorageAccountName;

        [OutputConstructor]
        private GetTableResult(
            ImmutableArray<Outputs.GetTableAclResult> acls,

            string id,

            string name,

            string resourceManagerId,

            string storageAccountName)
        {
            Acls = acls;
            Id = id;
            Name = name;
            ResourceManagerId = resourceManagerId;
            StorageAccountName = storageAccountName;
        }
    }
}
