// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Storage
{
    public static class GetStorageContainer
    {
        /// <summary>
        /// Use this data source to access information about an existing Storage Container.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Storage.GetAccount.Invoke(new()
        ///     {
        ///         Name = "exampleaccount",
        ///         ResourceGroupName = "examples",
        ///     });
        /// 
        ///     var exampleGetStorageContainer = Azure.Storage.GetStorageContainer.Invoke(new()
        ///     {
        ///         Name = "example-container-name",
        ///         StorageAccountId = example.Apply(getAccountResult =&gt; getAccountResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Microsoft.Storage` - 2023-05-01
        /// </summary>
        public static Task<GetStorageContainerResult> InvokeAsync(GetStorageContainerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetStorageContainerResult>("azure:storage/getStorageContainer:getStorageContainer", args ?? new GetStorageContainerArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Storage Container.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Storage.GetAccount.Invoke(new()
        ///     {
        ///         Name = "exampleaccount",
        ///         ResourceGroupName = "examples",
        ///     });
        /// 
        ///     var exampleGetStorageContainer = Azure.Storage.GetStorageContainer.Invoke(new()
        ///     {
        ///         Name = "example-container-name",
        ///         StorageAccountId = example.Apply(getAccountResult =&gt; getAccountResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Microsoft.Storage` - 2023-05-01
        /// </summary>
        public static Output<GetStorageContainerResult> Invoke(GetStorageContainerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetStorageContainerResult>("azure:storage/getStorageContainer:getStorageContainer", args ?? new GetStorageContainerInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Storage Container.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Storage.GetAccount.Invoke(new()
        ///     {
        ///         Name = "exampleaccount",
        ///         ResourceGroupName = "examples",
        ///     });
        /// 
        ///     var exampleGetStorageContainer = Azure.Storage.GetStorageContainer.Invoke(new()
        ///     {
        ///         Name = "example-container-name",
        ///         StorageAccountId = example.Apply(getAccountResult =&gt; getAccountResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Microsoft.Storage` - 2023-05-01
        /// </summary>
        public static Output<GetStorageContainerResult> Invoke(GetStorageContainerInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetStorageContainerResult>("azure:storage/getStorageContainer:getStorageContainer", args ?? new GetStorageContainerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetStorageContainerArgs : global::Pulumi.InvokeArgs
    {
        [Input("metadata")]
        private Dictionary<string, string>? _metadata;

        /// <summary>
        /// A mapping of MetaData for this Container.
        /// </summary>
        public Dictionary<string, string> Metadata
        {
            get => _metadata ?? (_metadata = new Dictionary<string, string>());
            set => _metadata = value;
        }

        /// <summary>
        /// The name of the Container.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The id of the Storage Account where the Container exists. This property will become Required in version 5.0 of the Provider.
        /// 
        /// &gt; **Note:** One of `StorageAccountName` or `StorageAccountId` must be specified. When specifying `StorageAccountId` the resource will use the Resource Manager API, rather than the Data Plane API.
        /// </summary>
        [Input("storageAccountId")]
        public string? StorageAccountId { get; set; }

        /// <summary>
        /// The name of the Storage Account where the Container exists. This property is deprecated in favour of `StorageAccountId`.
        /// </summary>
        [Input("storageAccountName")]
        public string? StorageAccountName { get; set; }

        public GetStorageContainerArgs()
        {
        }
        public static new GetStorageContainerArgs Empty => new GetStorageContainerArgs();
    }

    public sealed class GetStorageContainerInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// A mapping of MetaData for this Container.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// The name of the Container.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The id of the Storage Account where the Container exists. This property will become Required in version 5.0 of the Provider.
        /// 
        /// &gt; **Note:** One of `StorageAccountName` or `StorageAccountId` must be specified. When specifying `StorageAccountId` the resource will use the Resource Manager API, rather than the Data Plane API.
        /// </summary>
        [Input("storageAccountId")]
        public Input<string>? StorageAccountId { get; set; }

        /// <summary>
        /// The name of the Storage Account where the Container exists. This property is deprecated in favour of `StorageAccountId`.
        /// </summary>
        [Input("storageAccountName")]
        public Input<string>? StorageAccountName { get; set; }

        public GetStorageContainerInvokeArgs()
        {
        }
        public static new GetStorageContainerInvokeArgs Empty => new GetStorageContainerInvokeArgs();
    }


    [OutputType]
    public sealed class GetStorageContainerResult
    {
        /// <summary>
        /// The Access Level configured for this Container.
        /// </summary>
        public readonly string ContainerAccessType;
        /// <summary>
        /// The default encryption scope in use for blobs uploaded to this container.
        /// </summary>
        public readonly string DefaultEncryptionScope;
        /// <summary>
        /// Whether blobs are allowed to override the default encryption scope for this container.
        /// </summary>
        public readonly bool EncryptionScopeOverrideEnabled;
        /// <summary>
        /// Is there an Immutability Policy configured on this Storage Container?
        /// </summary>
        public readonly bool HasImmutabilityPolicy;
        /// <summary>
        /// Is there a Legal Hold configured on this Storage Container?
        /// </summary>
        public readonly bool HasLegalHold;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A mapping of MetaData for this Container.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Metadata;
        public readonly string Name;
        public readonly string ResourceManagerId;
        public readonly string? StorageAccountId;
        public readonly string? StorageAccountName;

        [OutputConstructor]
        private GetStorageContainerResult(
            string containerAccessType,

            string defaultEncryptionScope,

            bool encryptionScopeOverrideEnabled,

            bool hasImmutabilityPolicy,

            bool hasLegalHold,

            string id,

            ImmutableDictionary<string, string> metadata,

            string name,

            string resourceManagerId,

            string? storageAccountId,

            string? storageAccountName)
        {
            ContainerAccessType = containerAccessType;
            DefaultEncryptionScope = defaultEncryptionScope;
            EncryptionScopeOverrideEnabled = encryptionScopeOverrideEnabled;
            HasImmutabilityPolicy = hasImmutabilityPolicy;
            HasLegalHold = hasLegalHold;
            Id = id;
            Metadata = metadata;
            Name = name;
            ResourceManagerId = resourceManagerId;
            StorageAccountId = storageAccountId;
            StorageAccountName = storageAccountName;
        }
    }
}
