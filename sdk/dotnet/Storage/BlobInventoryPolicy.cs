// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Storage
{
    /// <summary>
    /// Manages a Storage Blob Inventory Policy.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleAccount = new Azure.Storage.Account("exampleAccount", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         AccountTier = "Standard",
    ///         AccountReplicationType = "LRS",
    ///         BlobProperties = new Azure.Storage.Inputs.AccountBlobPropertiesArgs
    ///         {
    ///             VersioningEnabled = true,
    ///         },
    ///     });
    /// 
    ///     var exampleContainer = new Azure.Storage.Container("exampleContainer", new()
    ///     {
    ///         StorageAccountName = exampleAccount.Name,
    ///         ContainerAccessType = "private",
    ///     });
    /// 
    ///     var exampleBlobInventoryPolicy = new Azure.Storage.BlobInventoryPolicy("exampleBlobInventoryPolicy", new()
    ///     {
    ///         StorageAccountId = exampleAccount.Id,
    ///         Rules = new[]
    ///         {
    ///             new Azure.Storage.Inputs.BlobInventoryPolicyRuleArgs
    ///             {
    ///                 Name = "rule1",
    ///                 StorageContainerName = exampleContainer.Name,
    ///                 Format = "Csv",
    ///                 Schedule = "Daily",
    ///                 Scope = "Container",
    ///                 SchemaFields = new[]
    ///                 {
    ///                     "Name",
    ///                     "Last-Modified",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Storage Blob Inventory Policies can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:storage/blobInventoryPolicy:BlobInventoryPolicy example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Storage/storageAccounts/storageAccount1/inventoryPolicies/inventoryPolicy1
    /// ```
    /// </summary>
    [AzureResourceType("azure:storage/blobInventoryPolicy:BlobInventoryPolicy")]
    public partial class BlobInventoryPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// One or more `rules` blocks as defined below.
        /// </summary>
        [Output("rules")]
        public Output<ImmutableArray<Outputs.BlobInventoryPolicyRule>> Rules { get; private set; } = null!;

        /// <summary>
        /// The ID of the storage account to apply this Blob Inventory Policy to. Changing this forces a new Storage Blob Inventory Policy to be created.
        /// </summary>
        [Output("storageAccountId")]
        public Output<string> StorageAccountId { get; private set; } = null!;


        /// <summary>
        /// Create a BlobInventoryPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BlobInventoryPolicy(string name, BlobInventoryPolicyArgs args, CustomResourceOptions? options = null)
            : base("azure:storage/blobInventoryPolicy:BlobInventoryPolicy", name, args ?? new BlobInventoryPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private BlobInventoryPolicy(string name, Input<string> id, BlobInventoryPolicyState? state = null, CustomResourceOptions? options = null)
            : base("azure:storage/blobInventoryPolicy:BlobInventoryPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BlobInventoryPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BlobInventoryPolicy Get(string name, Input<string> id, BlobInventoryPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new BlobInventoryPolicy(name, id, state, options);
        }
    }

    public sealed class BlobInventoryPolicyArgs : global::Pulumi.ResourceArgs
    {
        [Input("rules", required: true)]
        private InputList<Inputs.BlobInventoryPolicyRuleArgs>? _rules;

        /// <summary>
        /// One or more `rules` blocks as defined below.
        /// </summary>
        public InputList<Inputs.BlobInventoryPolicyRuleArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.BlobInventoryPolicyRuleArgs>());
            set => _rules = value;
        }

        /// <summary>
        /// The ID of the storage account to apply this Blob Inventory Policy to. Changing this forces a new Storage Blob Inventory Policy to be created.
        /// </summary>
        [Input("storageAccountId", required: true)]
        public Input<string> StorageAccountId { get; set; } = null!;

        public BlobInventoryPolicyArgs()
        {
        }
        public static new BlobInventoryPolicyArgs Empty => new BlobInventoryPolicyArgs();
    }

    public sealed class BlobInventoryPolicyState : global::Pulumi.ResourceArgs
    {
        [Input("rules")]
        private InputList<Inputs.BlobInventoryPolicyRuleGetArgs>? _rules;

        /// <summary>
        /// One or more `rules` blocks as defined below.
        /// </summary>
        public InputList<Inputs.BlobInventoryPolicyRuleGetArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.BlobInventoryPolicyRuleGetArgs>());
            set => _rules = value;
        }

        /// <summary>
        /// The ID of the storage account to apply this Blob Inventory Policy to. Changing this forces a new Storage Blob Inventory Policy to be created.
        /// </summary>
        [Input("storageAccountId")]
        public Input<string>? StorageAccountId { get; set; }

        public BlobInventoryPolicyState()
        {
        }
        public static new BlobInventoryPolicyState Empty => new BlobInventoryPolicyState();
    }
}
