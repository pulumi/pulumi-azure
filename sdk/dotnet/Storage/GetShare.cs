// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Storage
{
    public static class GetShare
    {
        /// <summary>
        /// Use this data source to access information about an existing File Share.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Storage.GetShare.Invoke(new()
        ///     {
        ///         Name = "existing",
        ///         StorageAccountName = "existing",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getShareResult =&gt; getShareResult.Id),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetShareResult> InvokeAsync(GetShareArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetShareResult>("azure:storage/getShare:getShare", args ?? new GetShareArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing File Share.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Storage.GetShare.Invoke(new()
        ///     {
        ///         Name = "existing",
        ///         StorageAccountName = "existing",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getShareResult =&gt; getShareResult.Id),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetShareResult> Invoke(GetShareInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetShareResult>("azure:storage/getShare:getShare", args ?? new GetShareInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetShareArgs : global::Pulumi.InvokeArgs
    {
        [Input("acls")]
        private List<Inputs.GetShareAclArgs>? _acls;

        /// <summary>
        /// One or more acl blocks as defined below.
        /// </summary>
        public List<Inputs.GetShareAclArgs> Acls
        {
            get => _acls ?? (_acls = new List<Inputs.GetShareAclArgs>());
            set => _acls = value;
        }

        [Input("metadata")]
        private Dictionary<string, string>? _metadata;

        /// <summary>
        /// A map of custom file share metadata.
        /// </summary>
        public Dictionary<string, string> Metadata
        {
            get => _metadata ?? (_metadata = new Dictionary<string, string>());
            set => _metadata = value;
        }

        /// <summary>
        /// The name of the share.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the storage account.
        /// </summary>
        [Input("storageAccountName", required: true)]
        public string StorageAccountName { get; set; } = null!;

        public GetShareArgs()
        {
        }
        public static new GetShareArgs Empty => new GetShareArgs();
    }

    public sealed class GetShareInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("acls")]
        private InputList<Inputs.GetShareAclInputArgs>? _acls;

        /// <summary>
        /// One or more acl blocks as defined below.
        /// </summary>
        public InputList<Inputs.GetShareAclInputArgs> Acls
        {
            get => _acls ?? (_acls = new InputList<Inputs.GetShareAclInputArgs>());
            set => _acls = value;
        }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// A map of custom file share metadata.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// The name of the share.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of the storage account.
        /// </summary>
        [Input("storageAccountName", required: true)]
        public Input<string> StorageAccountName { get; set; } = null!;

        public GetShareInvokeArgs()
        {
        }
        public static new GetShareInvokeArgs Empty => new GetShareInvokeArgs();
    }


    [OutputType]
    public sealed class GetShareResult
    {
        /// <summary>
        /// One or more acl blocks as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetShareAclResult> Acls;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A map of custom file share metadata.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Metadata;
        public readonly string Name;
        /// <summary>
        /// The quota of the File Share in GB.
        /// </summary>
        public readonly int Quota;
        public readonly string ResourceManagerId;
        public readonly string StorageAccountName;

        [OutputConstructor]
        private GetShareResult(
            ImmutableArray<Outputs.GetShareAclResult> acls,

            string id,

            ImmutableDictionary<string, string> metadata,

            string name,

            int quota,

            string resourceManagerId,

            string storageAccountName)
        {
            Acls = acls;
            Id = id;
            Metadata = metadata;
            Name = name;
            Quota = quota;
            ResourceManagerId = resourceManagerId;
            StorageAccountName = storageAccountName;
        }
    }
}
