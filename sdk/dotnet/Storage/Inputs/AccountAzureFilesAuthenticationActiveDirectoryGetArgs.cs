// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Storage.Inputs
{

    public sealed class AccountAzureFilesAuthenticationActiveDirectoryGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the domain GUID.
        /// </summary>
        [Input("domainGuid", required: true)]
        public Input<string> DomainGuid { get; set; } = null!;

        /// <summary>
        /// Specifies the primary domain that the AD DNS server is authoritative for.
        /// </summary>
        [Input("domainName", required: true)]
        public Input<string> DomainName { get; set; } = null!;

        /// <summary>
        /// Specifies the security identifier (SID). This is required when `directory_type` is set to `AD`.
        /// </summary>
        [Input("domainSid")]
        public Input<string>? DomainSid { get; set; }

        /// <summary>
        /// Specifies the Active Directory forest. This is required when `directory_type` is set to `AD`.
        /// </summary>
        [Input("forestName")]
        public Input<string>? ForestName { get; set; }

        /// <summary>
        /// Specifies the NetBIOS domain name. This is required when `directory_type` is set to `AD`.
        /// </summary>
        [Input("netbiosDomainName")]
        public Input<string>? NetbiosDomainName { get; set; }

        /// <summary>
        /// Specifies the security identifier (SID) for Azure Storage. This is required when `directory_type` is set to `AD`.
        /// </summary>
        [Input("storageSid")]
        public Input<string>? StorageSid { get; set; }

        public AccountAzureFilesAuthenticationActiveDirectoryGetArgs()
        {
        }
        public static new AccountAzureFilesAuthenticationActiveDirectoryGetArgs Empty => new AccountAzureFilesAuthenticationActiveDirectoryGetArgs();
    }
}
