// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Storage
{
    public static class GetContainers
    {
        /// <summary>
        /// Use this data source to access information about the existing Storage Containers within a Storage Account.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Storage.GetContainers.Invoke(new()
        ///     {
        ///         StorageAccountId = "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Storage/storageAccounts/sa1",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["containerId"] = example.Apply(getContainersResult =&gt; getContainersResult.Containers[0]?.ResourceManagerId),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetContainersResult> InvokeAsync(GetContainersArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetContainersResult>("azure:storage/getContainers:getContainers", args ?? new GetContainersArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about the existing Storage Containers within a Storage Account.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Storage.GetContainers.Invoke(new()
        ///     {
        ///         StorageAccountId = "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Storage/storageAccounts/sa1",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["containerId"] = example.Apply(getContainersResult =&gt; getContainersResult.Containers[0]?.ResourceManagerId),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetContainersResult> Invoke(GetContainersInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetContainersResult>("azure:storage/getContainers:getContainers", args ?? new GetContainersInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetContainersArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A prefix match used for the Storage Container `name` field.
        /// </summary>
        [Input("namePrefix")]
        public string? NamePrefix { get; set; }

        /// <summary>
        /// The ID of the Storage Account that the Storage Containers reside in.
        /// </summary>
        [Input("storageAccountId", required: true)]
        public string StorageAccountId { get; set; } = null!;

        public GetContainersArgs()
        {
        }
        public static new GetContainersArgs Empty => new GetContainersArgs();
    }

    public sealed class GetContainersInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A prefix match used for the Storage Container `name` field.
        /// </summary>
        [Input("namePrefix")]
        public Input<string>? NamePrefix { get; set; }

        /// <summary>
        /// The ID of the Storage Account that the Storage Containers reside in.
        /// </summary>
        [Input("storageAccountId", required: true)]
        public Input<string> StorageAccountId { get; set; } = null!;

        public GetContainersInvokeArgs()
        {
        }
        public static new GetContainersInvokeArgs Empty => new GetContainersInvokeArgs();
    }


    [OutputType]
    public sealed class GetContainersResult
    {
        /// <summary>
        /// A `containers` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetContainersContainerResult> Containers;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? NamePrefix;
        public readonly string StorageAccountId;

        [OutputConstructor]
        private GetContainersResult(
            ImmutableArray<Outputs.GetContainersContainerResult> containers,

            string id,

            string? namePrefix,

            string storageAccountId)
        {
            Containers = containers;
            Id = id;
            NamePrefix = namePrefix;
            StorageAccountId = storageAccountId;
        }
    }
}
