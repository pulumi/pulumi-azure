// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Storage
{
    /// <summary>
    /// Manages a Storage Sync Server Endpoint.
    /// 
    /// &gt; **NOTE:** The parent `azure.storage.SyncGroup` must have an `azure.storage.SyncCloudEndpoint` available before an `azure.storage.SyncServerEndpoint` resource can be created.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Name = "example-resources",
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleSync = new Azure.Storage.Sync("example", new()
    ///     {
    ///         Name = "example-storage-sync",
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///     });
    /// 
    ///     var exampleSyncGroup = new Azure.Storage.SyncGroup("example", new()
    ///     {
    ///         Name = "example-storage-sync-group",
    ///         StorageSyncId = exampleSync.Id,
    ///     });
    /// 
    ///     var exampleAccount = new Azure.Storage.Account("example", new()
    ///     {
    ///         Name = "example-storage-account",
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///         AccountTier = "Standard",
    ///         AccountReplicationType = "LRS",
    ///     });
    /// 
    ///     var exampleShare = new Azure.Storage.Share("example", new()
    ///     {
    ///         Name = "example-storage-share",
    ///         StorageAccountName = exampleAccount.Name,
    ///         Quota = 1,
    ///         Acls = new[]
    ///         {
    ///             new Azure.Storage.Inputs.ShareAclArgs
    ///             {
    ///                 Id = "GhostedRecall",
    ///                 AccessPolicies = new[]
    ///                 {
    ///                     new Azure.Storage.Inputs.ShareAclAccessPolicyArgs
    ///                     {
    ///                         Permissions = "r",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleSyncCloudEndpoint = new Azure.Storage.SyncCloudEndpoint("example", new()
    ///     {
    ///         Name = "example-ss-ce",
    ///         StorageSyncGroupId = exampleSyncGroup.Id,
    ///         FileShareName = exampleShare.Name,
    ///         StorageAccountId = exampleAccount.Id,
    ///     });
    /// 
    ///     var exampleSyncServerEndpoint = new Azure.Storage.SyncServerEndpoint("example", new()
    ///     {
    ///         Name = "example-storage-sync-server-endpoint",
    ///         StorageSyncGroupId = exampleSyncGroup.Id,
    ///         RegisteredServerId = exampleSync.RegisteredServers.Apply(registeredServers =&gt; registeredServers[0]),
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             exampleSyncCloudEndpoint,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Storage Sync Server Endpoints can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:storage/syncServerEndpoint:SyncServerEndpoint example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.StorageSync/storageSyncServices/sync1/syncGroups/syncGroup1/serverEndpoints/endpoint1
    /// ```
    /// </summary>
    [AzureResourceType("azure:storage/syncServerEndpoint:SyncServerEndpoint")]
    public partial class SyncServerEndpoint : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Is Cloud Tiering Enabled? Defaults to `false`.
        /// </summary>
        [Output("cloudTieringEnabled")]
        public Output<bool?> CloudTieringEnabled { get; private set; } = null!;

        /// <summary>
        /// Specifies how the server initially downloads the Azure file share data. Valid Values includes `NamespaceThenModifiedFiles`, `NamespaceOnly`, and `AvoidTieredFiles`. Defaults to `NamespaceThenModifiedFiles`.
        /// </summary>
        [Output("initialDownloadPolicy")]
        public Output<string?> InitialDownloadPolicy { get; private set; } = null!;

        /// <summary>
        /// Specifies how to handle the local cache. Valid Values include `UpdateLocallyCachedFiles` and `DownloadNewAndModifiedFiles`. Defaults to `UpdateLocallyCachedFiles`.
        /// </summary>
        [Output("localCacheMode")]
        public Output<string?> LocalCacheMode { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Storage Sync. Changing this forces a new Storage Sync Server Endpoint to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the Registered Server that will be associate with the Storage Sync Server Endpoint. Changing this forces a new Storage Sync Server Endpoint to be created.
        /// 
        /// &gt; **NOTE:** The target server must already be registered with the parent `azure.storage.Sync` prior to creating this endpoint. For more information on registering a server see the [Microsoft documentation](https://learn.microsoft.com/azure/storage/file-sync/file-sync-server-registration)
        /// </summary>
        [Output("registeredServerId")]
        public Output<string> RegisteredServerId { get; private set; } = null!;

        /// <summary>
        /// The path on the Windows Server to be synced to the Azure file share. Changing this forces a new Storage Sync Server Endpoint to be created.
        /// </summary>
        [Output("serverLocalPath")]
        public Output<string> ServerLocalPath { get; private set; } = null!;

        /// <summary>
        /// The ID of the Storage Sync Group where the Storage Sync Server Endpoint should exist. Changing this forces a new Storage Sync Server Endpoint to be created.
        /// </summary>
        [Output("storageSyncGroupId")]
        public Output<string> StorageSyncGroupId { get; private set; } = null!;

        /// <summary>
        /// Files older than the specified age will be tiered to the cloud.
        /// </summary>
        [Output("tierFilesOlderThanDays")]
        public Output<int?> TierFilesOlderThanDays { get; private set; } = null!;

        /// <summary>
        /// What percentage of free space on the volume should be preserved? Defaults to `20`.
        /// </summary>
        [Output("volumeFreeSpacePercent")]
        public Output<int?> VolumeFreeSpacePercent { get; private set; } = null!;


        /// <summary>
        /// Create a SyncServerEndpoint resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SyncServerEndpoint(string name, SyncServerEndpointArgs args, CustomResourceOptions? options = null)
            : base("azure:storage/syncServerEndpoint:SyncServerEndpoint", name, args ?? new SyncServerEndpointArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SyncServerEndpoint(string name, Input<string> id, SyncServerEndpointState? state = null, CustomResourceOptions? options = null)
            : base("azure:storage/syncServerEndpoint:SyncServerEndpoint", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SyncServerEndpoint resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SyncServerEndpoint Get(string name, Input<string> id, SyncServerEndpointState? state = null, CustomResourceOptions? options = null)
        {
            return new SyncServerEndpoint(name, id, state, options);
        }
    }

    public sealed class SyncServerEndpointArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Is Cloud Tiering Enabled? Defaults to `false`.
        /// </summary>
        [Input("cloudTieringEnabled")]
        public Input<bool>? CloudTieringEnabled { get; set; }

        /// <summary>
        /// Specifies how the server initially downloads the Azure file share data. Valid Values includes `NamespaceThenModifiedFiles`, `NamespaceOnly`, and `AvoidTieredFiles`. Defaults to `NamespaceThenModifiedFiles`.
        /// </summary>
        [Input("initialDownloadPolicy")]
        public Input<string>? InitialDownloadPolicy { get; set; }

        /// <summary>
        /// Specifies how to handle the local cache. Valid Values include `UpdateLocallyCachedFiles` and `DownloadNewAndModifiedFiles`. Defaults to `UpdateLocallyCachedFiles`.
        /// </summary>
        [Input("localCacheMode")]
        public Input<string>? LocalCacheMode { get; set; }

        /// <summary>
        /// The name which should be used for this Storage Sync. Changing this forces a new Storage Sync Server Endpoint to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the Registered Server that will be associate with the Storage Sync Server Endpoint. Changing this forces a new Storage Sync Server Endpoint to be created.
        /// 
        /// &gt; **NOTE:** The target server must already be registered with the parent `azure.storage.Sync` prior to creating this endpoint. For more information on registering a server see the [Microsoft documentation](https://learn.microsoft.com/azure/storage/file-sync/file-sync-server-registration)
        /// </summary>
        [Input("registeredServerId", required: true)]
        public Input<string> RegisteredServerId { get; set; } = null!;

        /// <summary>
        /// The path on the Windows Server to be synced to the Azure file share. Changing this forces a new Storage Sync Server Endpoint to be created.
        /// </summary>
        [Input("serverLocalPath", required: true)]
        public Input<string> ServerLocalPath { get; set; } = null!;

        /// <summary>
        /// The ID of the Storage Sync Group where the Storage Sync Server Endpoint should exist. Changing this forces a new Storage Sync Server Endpoint to be created.
        /// </summary>
        [Input("storageSyncGroupId", required: true)]
        public Input<string> StorageSyncGroupId { get; set; } = null!;

        /// <summary>
        /// Files older than the specified age will be tiered to the cloud.
        /// </summary>
        [Input("tierFilesOlderThanDays")]
        public Input<int>? TierFilesOlderThanDays { get; set; }

        /// <summary>
        /// What percentage of free space on the volume should be preserved? Defaults to `20`.
        /// </summary>
        [Input("volumeFreeSpacePercent")]
        public Input<int>? VolumeFreeSpacePercent { get; set; }

        public SyncServerEndpointArgs()
        {
        }
        public static new SyncServerEndpointArgs Empty => new SyncServerEndpointArgs();
    }

    public sealed class SyncServerEndpointState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Is Cloud Tiering Enabled? Defaults to `false`.
        /// </summary>
        [Input("cloudTieringEnabled")]
        public Input<bool>? CloudTieringEnabled { get; set; }

        /// <summary>
        /// Specifies how the server initially downloads the Azure file share data. Valid Values includes `NamespaceThenModifiedFiles`, `NamespaceOnly`, and `AvoidTieredFiles`. Defaults to `NamespaceThenModifiedFiles`.
        /// </summary>
        [Input("initialDownloadPolicy")]
        public Input<string>? InitialDownloadPolicy { get; set; }

        /// <summary>
        /// Specifies how to handle the local cache. Valid Values include `UpdateLocallyCachedFiles` and `DownloadNewAndModifiedFiles`. Defaults to `UpdateLocallyCachedFiles`.
        /// </summary>
        [Input("localCacheMode")]
        public Input<string>? LocalCacheMode { get; set; }

        /// <summary>
        /// The name which should be used for this Storage Sync. Changing this forces a new Storage Sync Server Endpoint to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the Registered Server that will be associate with the Storage Sync Server Endpoint. Changing this forces a new Storage Sync Server Endpoint to be created.
        /// 
        /// &gt; **NOTE:** The target server must already be registered with the parent `azure.storage.Sync` prior to creating this endpoint. For more information on registering a server see the [Microsoft documentation](https://learn.microsoft.com/azure/storage/file-sync/file-sync-server-registration)
        /// </summary>
        [Input("registeredServerId")]
        public Input<string>? RegisteredServerId { get; set; }

        /// <summary>
        /// The path on the Windows Server to be synced to the Azure file share. Changing this forces a new Storage Sync Server Endpoint to be created.
        /// </summary>
        [Input("serverLocalPath")]
        public Input<string>? ServerLocalPath { get; set; }

        /// <summary>
        /// The ID of the Storage Sync Group where the Storage Sync Server Endpoint should exist. Changing this forces a new Storage Sync Server Endpoint to be created.
        /// </summary>
        [Input("storageSyncGroupId")]
        public Input<string>? StorageSyncGroupId { get; set; }

        /// <summary>
        /// Files older than the specified age will be tiered to the cloud.
        /// </summary>
        [Input("tierFilesOlderThanDays")]
        public Input<int>? TierFilesOlderThanDays { get; set; }

        /// <summary>
        /// What percentage of free space on the volume should be preserved? Defaults to `20`.
        /// </summary>
        [Input("volumeFreeSpacePercent")]
        public Input<int>? VolumeFreeSpacePercent { get; set; }

        public SyncServerEndpointState()
        {
        }
        public static new SyncServerEndpointState Empty => new SyncServerEndpointState();
    }
}
