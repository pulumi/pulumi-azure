// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Storage
{
    public static partial class Invokes
    {
        /// <summary>
        /// Use this data source to access information about an existing Storage Account.
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/d/storage_account.html.markdown.
        /// </summary>
        [Obsolete("Use GetAccount.InvokeAsync() instead")]
        public static Task<GetAccountResult> GetAccount(GetAccountArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetAccountResult>("azure:storage/getAccount:getAccount", args ?? InvokeArgs.Empty, options.WithVersion());
    }
    public static class GetAccount
    {
        /// <summary>
        /// Use this data source to access information about an existing Storage Account.
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/d/storage_account.html.markdown.
        /// </summary>
        public static Task<GetAccountResult> InvokeAsync(GetAccountArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetAccountResult>("azure:storage/getAccount:getAccount", args ?? InvokeArgs.Empty, options.WithVersion());
    }

    public sealed class GetAccountArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the name of the Storage Account
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the resource group the Storage Account is located in.
        /// </summary>
        [Input("resourceGroupName")]
        public string? ResourceGroupName { get; set; }

        public GetAccountArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetAccountResult
    {
        /// <summary>
        /// The access tier for `BlobStorage` accounts.
        /// </summary>
        public readonly string AccessTier;
        /// <summary>
        /// The Kind of account.
        /// </summary>
        public readonly string AccountKind;
        /// <summary>
        /// The type of replication used for this storage account.
        /// </summary>
        public readonly string AccountReplicationType;
        /// <summary>
        /// The Tier of this storage account.
        /// </summary>
        public readonly string AccountTier;
        /// <summary>
        /// A `custom_domain` block as documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAccountCustomDomainsResult> CustomDomains;
        /// <summary>
        /// Is traffic only allowed via HTTPS? See [here](https://docs.microsoft.com/en-us/azure/storage/storage-require-secure-transfer/)
        /// for more information.
        /// </summary>
        public readonly bool EnableHttpsTrafficOnly;
        /// <summary>
        /// Is Hierarchical Namespace enabled?
        /// </summary>
        public readonly bool IsHnsEnabled;
        /// <summary>
        /// The Azure location where the Storage Account exists
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The Custom Domain Name used for the Storage Account.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The primary access key for the Storage Account.
        /// </summary>
        public readonly string PrimaryAccessKey;
        /// <summary>
        /// The connection string associated with the primary blob location
        /// </summary>
        public readonly string PrimaryBlobConnectionString;
        /// <summary>
        /// The endpoint URL for blob storage in the primary location.
        /// </summary>
        public readonly string PrimaryBlobEndpoint;
        /// <summary>
        /// The hostname with port if applicable for blob storage in the primary location.
        /// </summary>
        public readonly string PrimaryBlobHost;
        /// <summary>
        /// The connection string associated with the primary location
        /// </summary>
        public readonly string PrimaryConnectionString;
        /// <summary>
        /// The endpoint URL for DFS storage in the primary location.
        /// </summary>
        public readonly string PrimaryDfsEndpoint;
        /// <summary>
        /// The hostname with port if applicable for DFS storage in the primary location.
        /// </summary>
        public readonly string PrimaryDfsHost;
        /// <summary>
        /// The endpoint URL for file storage in the primary location.
        /// </summary>
        public readonly string PrimaryFileEndpoint;
        /// <summary>
        /// The hostname with port if applicable for file storage in the primary location.
        /// </summary>
        public readonly string PrimaryFileHost;
        /// <summary>
        /// The primary location of the Storage Account.
        /// </summary>
        public readonly string PrimaryLocation;
        /// <summary>
        /// The endpoint URL for queue storage in the primary location.
        /// </summary>
        public readonly string PrimaryQueueEndpoint;
        /// <summary>
        /// The hostname with port if applicable for queue storage in the primary location.
        /// </summary>
        public readonly string PrimaryQueueHost;
        /// <summary>
        /// The endpoint URL for table storage in the primary location.
        /// </summary>
        public readonly string PrimaryTableEndpoint;
        /// <summary>
        /// The hostname with port if applicable for table storage in the primary location.
        /// </summary>
        public readonly string PrimaryTableHost;
        /// <summary>
        /// The endpoint URL for web storage in the primary location.
        /// </summary>
        public readonly string PrimaryWebEndpoint;
        /// <summary>
        /// The hostname with port if applicable for web storage in the primary location.
        /// </summary>
        public readonly string PrimaryWebHost;
        public readonly string ResourceGroupName;
        /// <summary>
        /// The secondary access key for the Storage Account.
        /// </summary>
        public readonly string SecondaryAccessKey;
        /// <summary>
        /// The connection string associated with the secondary blob location
        /// </summary>
        public readonly string SecondaryBlobConnectionString;
        /// <summary>
        /// The endpoint URL for blob storage in the secondary location.
        /// </summary>
        public readonly string SecondaryBlobEndpoint;
        /// <summary>
        /// The hostname with port if applicable for blob storage in the secondary location.
        /// </summary>
        public readonly string SecondaryBlobHost;
        /// <summary>
        /// The connection string associated with the secondary location
        /// </summary>
        public readonly string SecondaryConnectionString;
        /// <summary>
        /// The endpoint URL for DFS storage in the secondary location.
        /// </summary>
        public readonly string SecondaryDfsEndpoint;
        /// <summary>
        /// The hostname with port if applicable for DFS storage in the secondary location.
        /// </summary>
        public readonly string SecondaryDfsHost;
        /// <summary>
        /// The endpoint URL for file storage in the secondary location.
        /// </summary>
        public readonly string SecondaryFileEndpoint;
        /// <summary>
        /// The hostname with port if applicable for file storage in the secondary location.
        /// </summary>
        public readonly string SecondaryFileHost;
        /// <summary>
        /// The secondary location of the Storage Account.
        /// </summary>
        public readonly string SecondaryLocation;
        /// <summary>
        /// The endpoint URL for queue storage in the secondary location.
        /// </summary>
        public readonly string SecondaryQueueEndpoint;
        /// <summary>
        /// The hostname with port if applicable for queue storage in the secondary location.
        /// </summary>
        public readonly string SecondaryQueueHost;
        /// <summary>
        /// The endpoint URL for table storage in the secondary location.
        /// </summary>
        public readonly string SecondaryTableEndpoint;
        /// <summary>
        /// The hostname with port if applicable for table storage in the secondary location.
        /// </summary>
        public readonly string SecondaryTableHost;
        /// <summary>
        /// The endpoint URL for web storage in the secondary location.
        /// </summary>
        public readonly string SecondaryWebEndpoint;
        /// <summary>
        /// The hostname with port if applicable for web storage in the secondary location.
        /// </summary>
        public readonly string SecondaryWebHost;
        /// <summary>
        /// A mapping of tags to assigned to the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetAccountResult(
            string accessTier,
            string accountKind,
            string accountReplicationType,
            string accountTier,
            ImmutableArray<Outputs.GetAccountCustomDomainsResult> customDomains,
            bool enableHttpsTrafficOnly,
            bool isHnsEnabled,
            string location,
            string name,
            string primaryAccessKey,
            string primaryBlobConnectionString,
            string primaryBlobEndpoint,
            string primaryBlobHost,
            string primaryConnectionString,
            string primaryDfsEndpoint,
            string primaryDfsHost,
            string primaryFileEndpoint,
            string primaryFileHost,
            string primaryLocation,
            string primaryQueueEndpoint,
            string primaryQueueHost,
            string primaryTableEndpoint,
            string primaryTableHost,
            string primaryWebEndpoint,
            string primaryWebHost,
            string resourceGroupName,
            string secondaryAccessKey,
            string secondaryBlobConnectionString,
            string secondaryBlobEndpoint,
            string secondaryBlobHost,
            string secondaryConnectionString,
            string secondaryDfsEndpoint,
            string secondaryDfsHost,
            string secondaryFileEndpoint,
            string secondaryFileHost,
            string secondaryLocation,
            string secondaryQueueEndpoint,
            string secondaryQueueHost,
            string secondaryTableEndpoint,
            string secondaryTableHost,
            string secondaryWebEndpoint,
            string secondaryWebHost,
            ImmutableDictionary<string, string> tags,
            string id)
        {
            AccessTier = accessTier;
            AccountKind = accountKind;
            AccountReplicationType = accountReplicationType;
            AccountTier = accountTier;
            CustomDomains = customDomains;
            EnableHttpsTrafficOnly = enableHttpsTrafficOnly;
            IsHnsEnabled = isHnsEnabled;
            Location = location;
            Name = name;
            PrimaryAccessKey = primaryAccessKey;
            PrimaryBlobConnectionString = primaryBlobConnectionString;
            PrimaryBlobEndpoint = primaryBlobEndpoint;
            PrimaryBlobHost = primaryBlobHost;
            PrimaryConnectionString = primaryConnectionString;
            PrimaryDfsEndpoint = primaryDfsEndpoint;
            PrimaryDfsHost = primaryDfsHost;
            PrimaryFileEndpoint = primaryFileEndpoint;
            PrimaryFileHost = primaryFileHost;
            PrimaryLocation = primaryLocation;
            PrimaryQueueEndpoint = primaryQueueEndpoint;
            PrimaryQueueHost = primaryQueueHost;
            PrimaryTableEndpoint = primaryTableEndpoint;
            PrimaryTableHost = primaryTableHost;
            PrimaryWebEndpoint = primaryWebEndpoint;
            PrimaryWebHost = primaryWebHost;
            ResourceGroupName = resourceGroupName;
            SecondaryAccessKey = secondaryAccessKey;
            SecondaryBlobConnectionString = secondaryBlobConnectionString;
            SecondaryBlobEndpoint = secondaryBlobEndpoint;
            SecondaryBlobHost = secondaryBlobHost;
            SecondaryConnectionString = secondaryConnectionString;
            SecondaryDfsEndpoint = secondaryDfsEndpoint;
            SecondaryDfsHost = secondaryDfsHost;
            SecondaryFileEndpoint = secondaryFileEndpoint;
            SecondaryFileHost = secondaryFileHost;
            SecondaryLocation = secondaryLocation;
            SecondaryQueueEndpoint = secondaryQueueEndpoint;
            SecondaryQueueHost = secondaryQueueHost;
            SecondaryTableEndpoint = secondaryTableEndpoint;
            SecondaryTableHost = secondaryTableHost;
            SecondaryWebEndpoint = secondaryWebEndpoint;
            SecondaryWebHost = secondaryWebHost;
            Tags = tags;
            Id = id;
        }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class GetAccountCustomDomainsResult
    {
        /// <summary>
        /// Specifies the name of the Storage Account
        /// </summary>
        public readonly string Name;

        [OutputConstructor]
        private GetAccountCustomDomainsResult(string name)
        {
            Name = name;
        }
    }
    }
}
