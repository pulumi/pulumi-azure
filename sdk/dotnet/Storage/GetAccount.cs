// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Storage
{
    public static class GetAccount
    {
        /// <summary>
        /// Use this data source to access information about an existing Storage Account.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Storage.GetAccount.Invoke(new()
        ///     {
        ///         Name = "packerimages",
        ///         ResourceGroupName = "packer-storage",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["storageAccountTier"] = example.Apply(getAccountResult =&gt; getAccountResult.AccountTier),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetAccountResult> InvokeAsync(GetAccountArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAccountResult>("azure:storage/getAccount:getAccount", args ?? new GetAccountArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Storage Account.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Storage.GetAccount.Invoke(new()
        ///     {
        ///         Name = "packerimages",
        ///         ResourceGroupName = "packer-storage",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["storageAccountTier"] = example.Apply(getAccountResult =&gt; getAccountResult.AccountTier),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetAccountResult> Invoke(GetAccountInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAccountResult>("azure:storage/getAccount:getAccount", args ?? new GetAccountInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAccountArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The minimum supported TLS version for this storage account.
        /// </summary>
        [Input("minTlsVersion")]
        public string? MinTlsVersion { get; set; }

        /// <summary>
        /// Specifies the name of the Storage Account
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the resource group the Storage Account is located in.
        /// </summary>
        [Input("resourceGroupName")]
        public string? ResourceGroupName { get; set; }

        public GetAccountArgs()
        {
        }
        public static new GetAccountArgs Empty => new GetAccountArgs();
    }

    public sealed class GetAccountInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The minimum supported TLS version for this storage account.
        /// </summary>
        [Input("minTlsVersion")]
        public Input<string>? MinTlsVersion { get; set; }

        /// <summary>
        /// Specifies the name of the Storage Account
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the resource group the Storage Account is located in.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        public GetAccountInvokeArgs()
        {
        }
        public static new GetAccountInvokeArgs Empty => new GetAccountInvokeArgs();
    }


    [OutputType]
    public sealed class GetAccountResult
    {
        /// <summary>
        /// The access tier for `BlobStorage` accounts.
        /// </summary>
        public readonly string AccessTier;
        /// <summary>
        /// The Kind of account.
        /// </summary>
        public readonly string AccountKind;
        /// <summary>
        /// The type of replication used for this storage account.
        /// </summary>
        public readonly string AccountReplicationType;
        /// <summary>
        /// The Tier of this storage account.
        /// </summary>
        public readonly string AccountTier;
        /// <summary>
        /// Can nested items in the storage account opt into allowing public access?
        /// </summary>
        public readonly bool AllowNestedItemsToBePublic;
        /// <summary>
        /// A `azure_files_authentication` block as documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAccountAzureFilesAuthenticationResult> AzureFilesAuthentications;
        /// <summary>
        /// supports the following:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAccountCustomDomainResult> CustomDomains;
        /// <summary>
        /// Is traffic only allowed via HTTPS? See [here](https://docs.microsoft.com/azure/storage/storage-require-secure-transfer/)
        /// for more information.
        /// </summary>
        public readonly bool EnableHttpsTrafficOnly;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// An `identity` block as documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAccountIdentityResult> Identities;
        /// <summary>
        /// Is infrastructure encryption enabled? See [here](https://docs.microsoft.com/azure/storage/common/infrastructure-encryption-enable/)
        /// for more information.
        /// </summary>
        public readonly bool InfrastructureEncryptionEnabled;
        /// <summary>
        /// Is Hierarchical Namespace enabled?
        /// </summary>
        public readonly bool IsHnsEnabled;
        /// <summary>
        /// The Azure location where the Storage Account exists
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The minimum supported TLS version for this storage account.
        /// </summary>
        public readonly string? MinTlsVersion;
        /// <summary>
        /// The Custom Domain Name used for the Storage Account.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Is NFSv3 protocol enabled?
        /// </summary>
        public readonly bool Nfsv3Enabled;
        /// <summary>
        /// The primary access key for the Storage Account.
        /// </summary>
        public readonly string PrimaryAccessKey;
        /// <summary>
        /// The connection string associated with the primary blob location
        /// </summary>
        public readonly string PrimaryBlobConnectionString;
        /// <summary>
        /// The endpoint URL for blob storage in the primary location.
        /// </summary>
        public readonly string PrimaryBlobEndpoint;
        /// <summary>
        /// The hostname with port if applicable for blob storage in the primary location.
        /// </summary>
        public readonly string PrimaryBlobHost;
        /// <summary>
        /// The internet routing endpoint URL for blob storage in the primary location.
        /// </summary>
        public readonly string PrimaryBlobInternetEndpoint;
        /// <summary>
        /// The internet routing hostname with port if applicable for blob storage in the primary location.
        /// </summary>
        public readonly string PrimaryBlobInternetHost;
        /// <summary>
        /// The microsoft routing endpoint URL for blob storage in the primary location.
        /// </summary>
        public readonly string PrimaryBlobMicrosoftEndpoint;
        /// <summary>
        /// The microsoft routing hostname with port if applicable for blob storage in the primary location.
        /// </summary>
        public readonly string PrimaryBlobMicrosoftHost;
        /// <summary>
        /// The connection string associated with the primary location
        /// </summary>
        public readonly string PrimaryConnectionString;
        /// <summary>
        /// The endpoint URL for DFS storage in the primary location.
        /// </summary>
        public readonly string PrimaryDfsEndpoint;
        /// <summary>
        /// The hostname with port if applicable for DFS storage in the primary location.
        /// </summary>
        public readonly string PrimaryDfsHost;
        /// <summary>
        /// The internet routing endpoint URL for DFS storage in the primary location.
        /// </summary>
        public readonly string PrimaryDfsInternetEndpoint;
        /// <summary>
        /// The internet routing hostname with port if applicable for DFS storage in the primary location.
        /// </summary>
        public readonly string PrimaryDfsInternetHost;
        /// <summary>
        /// The microsoft routing endpoint URL for DFS storage in the primary location.
        /// </summary>
        public readonly string PrimaryDfsMicrosoftEndpoint;
        /// <summary>
        /// The microsoft routing hostname with port if applicable for DFS storage in the primary location.
        /// </summary>
        public readonly string PrimaryDfsMicrosoftHost;
        /// <summary>
        /// The endpoint URL for file storage in the primary location.
        /// </summary>
        public readonly string PrimaryFileEndpoint;
        /// <summary>
        /// The hostname with port if applicable for file storage in the primary location.
        /// </summary>
        public readonly string PrimaryFileHost;
        /// <summary>
        /// The internet routing endpoint URL for file storage in the primary location.
        /// </summary>
        public readonly string PrimaryFileInternetEndpoint;
        /// <summary>
        /// The internet routing hostname with port if applicable for file storage in the primary location.
        /// </summary>
        public readonly string PrimaryFileInternetHost;
        /// <summary>
        /// The microsoft routing endpoint URL for file storage in the primary location.
        /// </summary>
        public readonly string PrimaryFileMicrosoftEndpoint;
        /// <summary>
        /// The microsoft routing hostname with port if applicable for file storage in the primary location.
        /// </summary>
        public readonly string PrimaryFileMicrosoftHost;
        /// <summary>
        /// The primary location of the Storage Account.
        /// </summary>
        public readonly string PrimaryLocation;
        /// <summary>
        /// The endpoint URL for queue storage in the primary location.
        /// </summary>
        public readonly string PrimaryQueueEndpoint;
        /// <summary>
        /// The hostname with port if applicable for queue storage in the primary location.
        /// </summary>
        public readonly string PrimaryQueueHost;
        /// <summary>
        /// The microsoft routing endpoint URL for queue storage in the primary location.
        /// </summary>
        public readonly string PrimaryQueueMicrosoftEndpoint;
        /// <summary>
        /// The microsoft routing hostname with port if applicable for queue storage in the primary location.
        /// </summary>
        public readonly string PrimaryQueueMicrosoftHost;
        /// <summary>
        /// The endpoint URL for table storage in the primary location.
        /// </summary>
        public readonly string PrimaryTableEndpoint;
        /// <summary>
        /// The hostname with port if applicable for table storage in the primary location.
        /// </summary>
        public readonly string PrimaryTableHost;
        /// <summary>
        /// The microsoft routing endpoint URL for table storage in the primary location.
        /// </summary>
        public readonly string PrimaryTableMicrosoftEndpoint;
        /// <summary>
        /// The microsoft routing hostname with port if applicable for table storage in the primary location.
        /// </summary>
        public readonly string PrimaryTableMicrosoftHost;
        /// <summary>
        /// The endpoint URL for web storage in the primary location.
        /// </summary>
        public readonly string PrimaryWebEndpoint;
        /// <summary>
        /// The hostname with port if applicable for web storage in the primary location.
        /// </summary>
        public readonly string PrimaryWebHost;
        /// <summary>
        /// The internet routing endpoint URL for web storage in the primary location.
        /// </summary>
        public readonly string PrimaryWebInternetEndpoint;
        /// <summary>
        /// The internet routing hostname with port if applicable for web storage in the primary location.
        /// </summary>
        public readonly string PrimaryWebInternetHost;
        /// <summary>
        /// The microsoft routing endpoint URL for web storage in the primary location.
        /// </summary>
        public readonly string PrimaryWebMicrosoftEndpoint;
        /// <summary>
        /// The microsoft routing hostname with port if applicable for web storage in the primary location.
        /// </summary>
        public readonly string PrimaryWebMicrosoftHost;
        /// <summary>
        /// The encryption key type of the queue.
        /// </summary>
        public readonly string QueueEncryptionKeyType;
        public readonly string? ResourceGroupName;
        /// <summary>
        /// The secondary access key for the Storage Account.
        /// </summary>
        public readonly string SecondaryAccessKey;
        /// <summary>
        /// The connection string associated with the secondary blob location
        /// </summary>
        public readonly string SecondaryBlobConnectionString;
        /// <summary>
        /// The endpoint URL for blob storage in the secondary location.
        /// </summary>
        public readonly string SecondaryBlobEndpoint;
        /// <summary>
        /// The hostname with port if applicable for blob storage in the secondary location.
        /// </summary>
        public readonly string SecondaryBlobHost;
        /// <summary>
        /// The internet routing endpoint URL for blob storage in the secondary location.
        /// </summary>
        public readonly string SecondaryBlobInternetEndpoint;
        /// <summary>
        /// The internet routing hostname with port if applicable for blob storage in the secondary location.
        /// </summary>
        public readonly string SecondaryBlobInternetHost;
        /// <summary>
        /// The microsoft routing endpoint URL for blob storage in the secondary location.
        /// </summary>
        public readonly string SecondaryBlobMicrosoftEndpoint;
        /// <summary>
        /// The microsoft routing hostname with port if applicable for blob storage in the secondary location.
        /// </summary>
        public readonly string SecondaryBlobMicrosoftHost;
        /// <summary>
        /// The connection string associated with the secondary location
        /// </summary>
        public readonly string SecondaryConnectionString;
        /// <summary>
        /// The endpoint URL for DFS storage in the secondary location.
        /// </summary>
        public readonly string SecondaryDfsEndpoint;
        /// <summary>
        /// The hostname with port if applicable for DFS storage in the secondary location.
        /// </summary>
        public readonly string SecondaryDfsHost;
        /// <summary>
        /// The internet routing endpoint URL for DFS storage in the secondary location.
        /// </summary>
        public readonly string SecondaryDfsInternetEndpoint;
        /// <summary>
        /// The internet routing hostname with port if applicable for DFS storage in the secondary location.
        /// </summary>
        public readonly string SecondaryDfsInternetHost;
        /// <summary>
        /// The microsoft routing endpoint URL for DFS storage in the secondary location.
        /// </summary>
        public readonly string SecondaryDfsMicrosoftEndpoint;
        /// <summary>
        /// The microsoft routing hostname with port if applicable for DFS storage in the secondary location.
        /// </summary>
        public readonly string SecondaryDfsMicrosoftHost;
        /// <summary>
        /// The endpoint URL for file storage in the secondary location.
        /// </summary>
        public readonly string SecondaryFileEndpoint;
        /// <summary>
        /// The hostname with port if applicable for file storage in the secondary location.
        /// </summary>
        public readonly string SecondaryFileHost;
        /// <summary>
        /// The internet routing endpoint URL for file storage in the secondary location.
        /// </summary>
        public readonly string SecondaryFileInternetEndpoint;
        /// <summary>
        /// The internet routing hostname with port if applicable for file storage in the secondary location.
        /// </summary>
        public readonly string SecondaryFileInternetHost;
        /// <summary>
        /// The microsoft routing endpoint URL for file storage in the secondary location.
        /// </summary>
        public readonly string SecondaryFileMicrosoftEndpoint;
        /// <summary>
        /// The microsoft routing hostname with port if applicable for file storage in the secondary location.
        /// </summary>
        public readonly string SecondaryFileMicrosoftHost;
        /// <summary>
        /// The secondary location of the Storage Account.
        /// </summary>
        public readonly string SecondaryLocation;
        /// <summary>
        /// The endpoint URL for queue storage in the secondary location.
        /// </summary>
        public readonly string SecondaryQueueEndpoint;
        /// <summary>
        /// The hostname with port if applicable for queue storage in the secondary location.
        /// </summary>
        public readonly string SecondaryQueueHost;
        /// <summary>
        /// The microsoft routing endpoint URL for queue storage in the secondary location.
        /// </summary>
        public readonly string SecondaryQueueMicrosoftEndpoint;
        /// <summary>
        /// The microsoft routing hostname with port if applicable for queue storage in the secondary location.
        /// </summary>
        public readonly string SecondaryQueueMicrosoftHost;
        /// <summary>
        /// The endpoint URL for table storage in the secondary location.
        /// </summary>
        public readonly string SecondaryTableEndpoint;
        /// <summary>
        /// The hostname with port if applicable for table storage in the secondary location.
        /// </summary>
        public readonly string SecondaryTableHost;
        /// <summary>
        /// The microsoft routing endpoint URL for table storage in the secondary location.
        /// </summary>
        public readonly string SecondaryTableMicrosoftEndpoint;
        /// <summary>
        /// The microsoft routing hostname with port if applicable for table storage in the secondary location.
        /// </summary>
        public readonly string SecondaryTableMicrosoftHost;
        /// <summary>
        /// The endpoint URL for web storage in the secondary location.
        /// </summary>
        public readonly string SecondaryWebEndpoint;
        /// <summary>
        /// The hostname with port if applicable for web storage in the secondary location.
        /// </summary>
        public readonly string SecondaryWebHost;
        /// <summary>
        /// The internet routing endpoint URL for web storage in the secondary location.
        /// </summary>
        public readonly string SecondaryWebInternetEndpoint;
        /// <summary>
        /// The internet routing hostname with port if applicable for web storage in the secondary location.
        /// </summary>
        public readonly string SecondaryWebInternetHost;
        /// <summary>
        /// The microsoft routing endpoint URL for web storage in the secondary location.
        /// </summary>
        public readonly string SecondaryWebMicrosoftEndpoint;
        /// <summary>
        /// The microsoft routing hostname with port if applicable for web storage in the secondary location.
        /// </summary>
        public readonly string SecondaryWebMicrosoftHost;
        /// <summary>
        /// The encryption key type of the table.
        /// </summary>
        public readonly string TableEncryptionKeyType;
        /// <summary>
        /// A mapping of tags to assigned to the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;

        [OutputConstructor]
        private GetAccountResult(
            string accessTier,

            string accountKind,

            string accountReplicationType,

            string accountTier,

            bool allowNestedItemsToBePublic,

            ImmutableArray<Outputs.GetAccountAzureFilesAuthenticationResult> azureFilesAuthentications,

            ImmutableArray<Outputs.GetAccountCustomDomainResult> customDomains,

            bool enableHttpsTrafficOnly,

            string id,

            ImmutableArray<Outputs.GetAccountIdentityResult> identities,

            bool infrastructureEncryptionEnabled,

            bool isHnsEnabled,

            string location,

            string? minTlsVersion,

            string name,

            bool nfsv3Enabled,

            string primaryAccessKey,

            string primaryBlobConnectionString,

            string primaryBlobEndpoint,

            string primaryBlobHost,

            string primaryBlobInternetEndpoint,

            string primaryBlobInternetHost,

            string primaryBlobMicrosoftEndpoint,

            string primaryBlobMicrosoftHost,

            string primaryConnectionString,

            string primaryDfsEndpoint,

            string primaryDfsHost,

            string primaryDfsInternetEndpoint,

            string primaryDfsInternetHost,

            string primaryDfsMicrosoftEndpoint,

            string primaryDfsMicrosoftHost,

            string primaryFileEndpoint,

            string primaryFileHost,

            string primaryFileInternetEndpoint,

            string primaryFileInternetHost,

            string primaryFileMicrosoftEndpoint,

            string primaryFileMicrosoftHost,

            string primaryLocation,

            string primaryQueueEndpoint,

            string primaryQueueHost,

            string primaryQueueMicrosoftEndpoint,

            string primaryQueueMicrosoftHost,

            string primaryTableEndpoint,

            string primaryTableHost,

            string primaryTableMicrosoftEndpoint,

            string primaryTableMicrosoftHost,

            string primaryWebEndpoint,

            string primaryWebHost,

            string primaryWebInternetEndpoint,

            string primaryWebInternetHost,

            string primaryWebMicrosoftEndpoint,

            string primaryWebMicrosoftHost,

            string queueEncryptionKeyType,

            string? resourceGroupName,

            string secondaryAccessKey,

            string secondaryBlobConnectionString,

            string secondaryBlobEndpoint,

            string secondaryBlobHost,

            string secondaryBlobInternetEndpoint,

            string secondaryBlobInternetHost,

            string secondaryBlobMicrosoftEndpoint,

            string secondaryBlobMicrosoftHost,

            string secondaryConnectionString,

            string secondaryDfsEndpoint,

            string secondaryDfsHost,

            string secondaryDfsInternetEndpoint,

            string secondaryDfsInternetHost,

            string secondaryDfsMicrosoftEndpoint,

            string secondaryDfsMicrosoftHost,

            string secondaryFileEndpoint,

            string secondaryFileHost,

            string secondaryFileInternetEndpoint,

            string secondaryFileInternetHost,

            string secondaryFileMicrosoftEndpoint,

            string secondaryFileMicrosoftHost,

            string secondaryLocation,

            string secondaryQueueEndpoint,

            string secondaryQueueHost,

            string secondaryQueueMicrosoftEndpoint,

            string secondaryQueueMicrosoftHost,

            string secondaryTableEndpoint,

            string secondaryTableHost,

            string secondaryTableMicrosoftEndpoint,

            string secondaryTableMicrosoftHost,

            string secondaryWebEndpoint,

            string secondaryWebHost,

            string secondaryWebInternetEndpoint,

            string secondaryWebInternetHost,

            string secondaryWebMicrosoftEndpoint,

            string secondaryWebMicrosoftHost,

            string tableEncryptionKeyType,

            ImmutableDictionary<string, string> tags)
        {
            AccessTier = accessTier;
            AccountKind = accountKind;
            AccountReplicationType = accountReplicationType;
            AccountTier = accountTier;
            AllowNestedItemsToBePublic = allowNestedItemsToBePublic;
            AzureFilesAuthentications = azureFilesAuthentications;
            CustomDomains = customDomains;
            EnableHttpsTrafficOnly = enableHttpsTrafficOnly;
            Id = id;
            Identities = identities;
            InfrastructureEncryptionEnabled = infrastructureEncryptionEnabled;
            IsHnsEnabled = isHnsEnabled;
            Location = location;
            MinTlsVersion = minTlsVersion;
            Name = name;
            Nfsv3Enabled = nfsv3Enabled;
            PrimaryAccessKey = primaryAccessKey;
            PrimaryBlobConnectionString = primaryBlobConnectionString;
            PrimaryBlobEndpoint = primaryBlobEndpoint;
            PrimaryBlobHost = primaryBlobHost;
            PrimaryBlobInternetEndpoint = primaryBlobInternetEndpoint;
            PrimaryBlobInternetHost = primaryBlobInternetHost;
            PrimaryBlobMicrosoftEndpoint = primaryBlobMicrosoftEndpoint;
            PrimaryBlobMicrosoftHost = primaryBlobMicrosoftHost;
            PrimaryConnectionString = primaryConnectionString;
            PrimaryDfsEndpoint = primaryDfsEndpoint;
            PrimaryDfsHost = primaryDfsHost;
            PrimaryDfsInternetEndpoint = primaryDfsInternetEndpoint;
            PrimaryDfsInternetHost = primaryDfsInternetHost;
            PrimaryDfsMicrosoftEndpoint = primaryDfsMicrosoftEndpoint;
            PrimaryDfsMicrosoftHost = primaryDfsMicrosoftHost;
            PrimaryFileEndpoint = primaryFileEndpoint;
            PrimaryFileHost = primaryFileHost;
            PrimaryFileInternetEndpoint = primaryFileInternetEndpoint;
            PrimaryFileInternetHost = primaryFileInternetHost;
            PrimaryFileMicrosoftEndpoint = primaryFileMicrosoftEndpoint;
            PrimaryFileMicrosoftHost = primaryFileMicrosoftHost;
            PrimaryLocation = primaryLocation;
            PrimaryQueueEndpoint = primaryQueueEndpoint;
            PrimaryQueueHost = primaryQueueHost;
            PrimaryQueueMicrosoftEndpoint = primaryQueueMicrosoftEndpoint;
            PrimaryQueueMicrosoftHost = primaryQueueMicrosoftHost;
            PrimaryTableEndpoint = primaryTableEndpoint;
            PrimaryTableHost = primaryTableHost;
            PrimaryTableMicrosoftEndpoint = primaryTableMicrosoftEndpoint;
            PrimaryTableMicrosoftHost = primaryTableMicrosoftHost;
            PrimaryWebEndpoint = primaryWebEndpoint;
            PrimaryWebHost = primaryWebHost;
            PrimaryWebInternetEndpoint = primaryWebInternetEndpoint;
            PrimaryWebInternetHost = primaryWebInternetHost;
            PrimaryWebMicrosoftEndpoint = primaryWebMicrosoftEndpoint;
            PrimaryWebMicrosoftHost = primaryWebMicrosoftHost;
            QueueEncryptionKeyType = queueEncryptionKeyType;
            ResourceGroupName = resourceGroupName;
            SecondaryAccessKey = secondaryAccessKey;
            SecondaryBlobConnectionString = secondaryBlobConnectionString;
            SecondaryBlobEndpoint = secondaryBlobEndpoint;
            SecondaryBlobHost = secondaryBlobHost;
            SecondaryBlobInternetEndpoint = secondaryBlobInternetEndpoint;
            SecondaryBlobInternetHost = secondaryBlobInternetHost;
            SecondaryBlobMicrosoftEndpoint = secondaryBlobMicrosoftEndpoint;
            SecondaryBlobMicrosoftHost = secondaryBlobMicrosoftHost;
            SecondaryConnectionString = secondaryConnectionString;
            SecondaryDfsEndpoint = secondaryDfsEndpoint;
            SecondaryDfsHost = secondaryDfsHost;
            SecondaryDfsInternetEndpoint = secondaryDfsInternetEndpoint;
            SecondaryDfsInternetHost = secondaryDfsInternetHost;
            SecondaryDfsMicrosoftEndpoint = secondaryDfsMicrosoftEndpoint;
            SecondaryDfsMicrosoftHost = secondaryDfsMicrosoftHost;
            SecondaryFileEndpoint = secondaryFileEndpoint;
            SecondaryFileHost = secondaryFileHost;
            SecondaryFileInternetEndpoint = secondaryFileInternetEndpoint;
            SecondaryFileInternetHost = secondaryFileInternetHost;
            SecondaryFileMicrosoftEndpoint = secondaryFileMicrosoftEndpoint;
            SecondaryFileMicrosoftHost = secondaryFileMicrosoftHost;
            SecondaryLocation = secondaryLocation;
            SecondaryQueueEndpoint = secondaryQueueEndpoint;
            SecondaryQueueHost = secondaryQueueHost;
            SecondaryQueueMicrosoftEndpoint = secondaryQueueMicrosoftEndpoint;
            SecondaryQueueMicrosoftHost = secondaryQueueMicrosoftHost;
            SecondaryTableEndpoint = secondaryTableEndpoint;
            SecondaryTableHost = secondaryTableHost;
            SecondaryTableMicrosoftEndpoint = secondaryTableMicrosoftEndpoint;
            SecondaryTableMicrosoftHost = secondaryTableMicrosoftHost;
            SecondaryWebEndpoint = secondaryWebEndpoint;
            SecondaryWebHost = secondaryWebHost;
            SecondaryWebInternetEndpoint = secondaryWebInternetEndpoint;
            SecondaryWebInternetHost = secondaryWebInternetHost;
            SecondaryWebMicrosoftEndpoint = secondaryWebMicrosoftEndpoint;
            SecondaryWebMicrosoftHost = secondaryWebMicrosoftHost;
            TableEncryptionKeyType = tableEncryptionKeyType;
            Tags = tags;
        }
    }
}
