// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Storage
{
    /// <summary>
    /// Manages a File within an Azure Storage File Share.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new Azure.Core.ResourceGroupArgs
    ///         {
    ///             Location = "West Europe",
    ///         });
    ///         var exampleAccount = new Azure.Storage.Account("exampleAccount", new Azure.Storage.AccountArgs
    ///         {
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             Location = exampleResourceGroup.Location,
    ///             AccountTier = "Standard",
    ///             AccountReplicationType = "LRS",
    ///         });
    ///         var exampleShare = new Azure.Storage.Share("exampleShare", new Azure.Storage.ShareArgs
    ///         {
    ///             StorageAccountName = exampleAccount.Name,
    ///             Quota = 50,
    ///         });
    ///         var exampleShareFile = new Azure.Storage.ShareFile("exampleShareFile", new Azure.Storage.ShareFileArgs
    ///         {
    ///             StorageShareId = exampleShare.Id,
    ///             Source = "some-local-file.zip",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Directories within an Azure Storage File Share can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:storage/shareFile:ShareFile example https://account1.file.core.windows.net/share1/file1
    /// ```
    /// </summary>
    [AzureResourceType("azure:storage/shareFile:ShareFile")]
    public partial class ShareFile : Pulumi.CustomResource
    {
        /// <summary>
        /// Sets the file’s Content-Disposition header.
        /// </summary>
        [Output("contentDisposition")]
        public Output<string?> ContentDisposition { get; private set; } = null!;

        /// <summary>
        /// Specifies which content encodings have been applied to the file.
        /// </summary>
        [Output("contentEncoding")]
        public Output<string?> ContentEncoding { get; private set; } = null!;

        /// <summary>
        /// The MD5 sum of the file contents. Changing this forces a new resource to be created.
        /// </summary>
        [Output("contentMd5")]
        public Output<string?> ContentMd5 { get; private set; } = null!;

        /// <summary>
        /// The content type of the share file. Defaults to `application/octet-stream`.
        /// </summary>
        [Output("contentType")]
        public Output<string?> ContentType { get; private set; } = null!;

        /// <summary>
        /// A mapping of metadata to assign to this file.
        /// </summary>
        [Output("metadata")]
        public Output<ImmutableDictionary<string, string>?> Metadata { get; private set; } = null!;

        /// <summary>
        /// The name (or path) of the File that should be created within this File Share. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The storage share directory that you would like the file placed into. Changing this forces a new resource to be created.
        /// </summary>
        [Output("path")]
        public Output<string?> Path { get; private set; } = null!;

        /// <summary>
        /// An absolute path to a file on the local system.
        /// </summary>
        [Output("source")]
        public Output<string?> Source { get; private set; } = null!;

        /// <summary>
        /// The Storage Share ID in which this file will be placed into. Changing this forces a new resource to be created.
        /// </summary>
        [Output("storageShareId")]
        public Output<string> StorageShareId { get; private set; } = null!;


        /// <summary>
        /// Create a ShareFile resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ShareFile(string name, ShareFileArgs args, CustomResourceOptions? options = null)
            : base("azure:storage/shareFile:ShareFile", name, args ?? new ShareFileArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ShareFile(string name, Input<string> id, ShareFileState? state = null, CustomResourceOptions? options = null)
            : base("azure:storage/shareFile:ShareFile", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ShareFile resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ShareFile Get(string name, Input<string> id, ShareFileState? state = null, CustomResourceOptions? options = null)
        {
            return new ShareFile(name, id, state, options);
        }
    }

    public sealed class ShareFileArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Sets the file’s Content-Disposition header.
        /// </summary>
        [Input("contentDisposition")]
        public Input<string>? ContentDisposition { get; set; }

        /// <summary>
        /// Specifies which content encodings have been applied to the file.
        /// </summary>
        [Input("contentEncoding")]
        public Input<string>? ContentEncoding { get; set; }

        /// <summary>
        /// The MD5 sum of the file contents. Changing this forces a new resource to be created.
        /// </summary>
        [Input("contentMd5")]
        public Input<string>? ContentMd5 { get; set; }

        /// <summary>
        /// The content type of the share file. Defaults to `application/octet-stream`.
        /// </summary>
        [Input("contentType")]
        public Input<string>? ContentType { get; set; }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// A mapping of metadata to assign to this file.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// The name (or path) of the File that should be created within this File Share. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The storage share directory that you would like the file placed into. Changing this forces a new resource to be created.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// An absolute path to a file on the local system.
        /// </summary>
        [Input("source")]
        public Input<string>? Source { get; set; }

        /// <summary>
        /// The Storage Share ID in which this file will be placed into. Changing this forces a new resource to be created.
        /// </summary>
        [Input("storageShareId", required: true)]
        public Input<string> StorageShareId { get; set; } = null!;

        public ShareFileArgs()
        {
        }
    }

    public sealed class ShareFileState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Sets the file’s Content-Disposition header.
        /// </summary>
        [Input("contentDisposition")]
        public Input<string>? ContentDisposition { get; set; }

        /// <summary>
        /// Specifies which content encodings have been applied to the file.
        /// </summary>
        [Input("contentEncoding")]
        public Input<string>? ContentEncoding { get; set; }

        /// <summary>
        /// The MD5 sum of the file contents. Changing this forces a new resource to be created.
        /// </summary>
        [Input("contentMd5")]
        public Input<string>? ContentMd5 { get; set; }

        /// <summary>
        /// The content type of the share file. Defaults to `application/octet-stream`.
        /// </summary>
        [Input("contentType")]
        public Input<string>? ContentType { get; set; }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// A mapping of metadata to assign to this file.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// The name (or path) of the File that should be created within this File Share. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The storage share directory that you would like the file placed into. Changing this forces a new resource to be created.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// An absolute path to a file on the local system.
        /// </summary>
        [Input("source")]
        public Input<string>? Source { get; set; }

        /// <summary>
        /// The Storage Share ID in which this file will be placed into. Changing this forces a new resource to be created.
        /// </summary>
        [Input("storageShareId")]
        public Input<string>? StorageShareId { get; set; }

        public ShareFileState()
        {
        }
    }
}
