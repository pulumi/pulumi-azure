// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Automation
{
    /// <summary>
    /// Manages an Automation Software Update Configuration.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Name = "example-rg",
    ///         Location = "East US",
    ///     });
    /// 
    ///     var exampleAccount = new Azure.Automation.Account("example", new()
    ///     {
    ///         Name = "example",
    ///         Location = example.Location,
    ///         ResourceGroupName = example.Name,
    ///         SkuName = "Basic",
    ///     });
    /// 
    ///     var exampleRunBook = new Azure.Automation.RunBook("example", new()
    ///     {
    ///         Name = "Get-AzureVMTutorial",
    ///         Location = example.Location,
    ///         ResourceGroupName = example.Name,
    ///         AutomationAccountName = exampleAccount.Name,
    ///         LogVerbose = true,
    ///         LogProgress = true,
    ///         Description = "This is a example runbook for terraform acceptance example",
    ///         RunbookType = "Python3",
    ///         Content = @"# Some example content
    /// # for Terraform acceptance example
    /// ",
    ///         Tags = 
    ///         {
    ///             { "ENV", "runbook_test" },
    ///         },
    ///     });
    /// 
    ///     var exampleSoftwareUpdateConfiguration = new Azure.Automation.SoftwareUpdateConfiguration("example", new()
    ///     {
    ///         Name = "example",
    ///         AutomationAccountId = exampleAccount.Id,
    ///         Linux = new Azure.Automation.Inputs.SoftwareUpdateConfigurationLinuxArgs
    ///         {
    ///             ClassificationsIncludeds = "Security",
    ///             ExcludedPackages = new[]
    ///             {
    ///                 "apt",
    ///             },
    ///             IncludedPackages = new[]
    ///             {
    ///                 "vim",
    ///             },
    ///             Reboot = "IfRequired",
    ///         },
    ///         PreTask = new Azure.Automation.Inputs.SoftwareUpdateConfigurationPreTaskArgs
    ///         {
    ///             Source = exampleRunBook.Name,
    ///             Parameters = 
    ///             {
    ///                 { "COMPUTER_NAME", "Foo" },
    ///             },
    ///         },
    ///         Duration = "PT2H2M2S",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## API Providers
    /// 
    /// &lt;!-- This section is generated, changes will be overwritten --&gt;
    /// This resource uses the following Azure API Providers:
    /// 
    /// * `Microsoft.Automation`: 2019-06-01
    /// 
    /// ## Import
    /// 
    /// Automations Software Update Configuration can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:automation/softwareUpdateConfiguration:SoftwareUpdateConfiguration example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.Automation/automationAccounts/account1/softwareUpdateConfigurations/suc1
    /// ```
    /// </summary>
    [AzureResourceType("azure:automation/softwareUpdateConfiguration:SoftwareUpdateConfiguration")]
    public partial class SoftwareUpdateConfiguration : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of Automation Account to manage this Source Control. Changing this forces a new Automation Source Control to be created.
        /// </summary>
        [Output("automationAccountId")]
        public Output<string> AutomationAccountId { get; private set; } = null!;

        /// <summary>
        /// Maximum time allowed for the software update configuration run. using format `PT[n]H[n]M[n]S` as per ISO8601. Defaults to `PT2H`.
        /// </summary>
        [Output("duration")]
        public Output<string?> Duration { get; private set; } = null!;

        /// <summary>
        /// The Error code when failed.
        /// </summary>
        [Output("errorCode")]
        public Output<string> ErrorCode { get; private set; } = null!;

        /// <summary>
        /// The Error message indicating why the operation failed.
        /// </summary>
        [Output("errorMessage")]
        public Output<string> ErrorMessage { get; private set; } = null!;

        /// <summary>
        /// A `linux` block as defined below.
        /// </summary>
        [Output("linux")]
        public Output<Outputs.SoftwareUpdateConfigurationLinux?> Linux { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Automation. Changing this forces a new Automation to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Specifies a list of names of non-Azure machines for the software update configuration.
        /// </summary>
        [Output("nonAzureComputerNames")]
        public Output<ImmutableArray<string>> NonAzureComputerNames { get; private set; } = null!;

        /// <summary>
        /// A `post_task` blocks as defined below.
        /// </summary>
        [Output("postTask")]
        public Output<Outputs.SoftwareUpdateConfigurationPostTask?> PostTask { get; private set; } = null!;

        /// <summary>
        /// A `pre_task` blocks as defined below.
        /// </summary>
        [Output("preTask")]
        public Output<Outputs.SoftwareUpdateConfigurationPreTask?> PreTask { get; private set; } = null!;

        /// <summary>
        /// A `schedule` blocks as defined below.
        /// </summary>
        [Output("schedule")]
        public Output<Outputs.SoftwareUpdateConfigurationSchedule> Schedule { get; private set; } = null!;

        /// <summary>
        /// A `target` blocks as defined below.
        /// </summary>
        [Output("target")]
        public Output<Outputs.SoftwareUpdateConfigurationTarget?> Target { get; private set; } = null!;

        /// <summary>
        /// Specifies a list of Azure Resource IDs of azure virtual machines.
        /// </summary>
        [Output("virtualMachineIds")]
        public Output<ImmutableArray<string>> VirtualMachineIds { get; private set; } = null!;

        /// <summary>
        /// A `windows` block as defined below.
        /// 
        /// &gt; **Note:** One of `linux` or `windows` must be specified.
        /// </summary>
        [Output("windows")]
        public Output<Outputs.SoftwareUpdateConfigurationWindows?> Windows { get; private set; } = null!;


        /// <summary>
        /// Create a SoftwareUpdateConfiguration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SoftwareUpdateConfiguration(string name, SoftwareUpdateConfigurationArgs args, CustomResourceOptions? options = null)
            : base("azure:automation/softwareUpdateConfiguration:SoftwareUpdateConfiguration", name, args ?? new SoftwareUpdateConfigurationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SoftwareUpdateConfiguration(string name, Input<string> id, SoftwareUpdateConfigurationState? state = null, CustomResourceOptions? options = null)
            : base("azure:automation/softwareUpdateConfiguration:SoftwareUpdateConfiguration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SoftwareUpdateConfiguration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SoftwareUpdateConfiguration Get(string name, Input<string> id, SoftwareUpdateConfigurationState? state = null, CustomResourceOptions? options = null)
        {
            return new SoftwareUpdateConfiguration(name, id, state, options);
        }
    }

    public sealed class SoftwareUpdateConfigurationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of Automation Account to manage this Source Control. Changing this forces a new Automation Source Control to be created.
        /// </summary>
        [Input("automationAccountId", required: true)]
        public Input<string> AutomationAccountId { get; set; } = null!;

        /// <summary>
        /// Maximum time allowed for the software update configuration run. using format `PT[n]H[n]M[n]S` as per ISO8601. Defaults to `PT2H`.
        /// </summary>
        [Input("duration")]
        public Input<string>? Duration { get; set; }

        /// <summary>
        /// A `linux` block as defined below.
        /// </summary>
        [Input("linux")]
        public Input<Inputs.SoftwareUpdateConfigurationLinuxArgs>? Linux { get; set; }

        /// <summary>
        /// The name which should be used for this Automation. Changing this forces a new Automation to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nonAzureComputerNames")]
        private InputList<string>? _nonAzureComputerNames;

        /// <summary>
        /// Specifies a list of names of non-Azure machines for the software update configuration.
        /// </summary>
        public InputList<string> NonAzureComputerNames
        {
            get => _nonAzureComputerNames ?? (_nonAzureComputerNames = new InputList<string>());
            set => _nonAzureComputerNames = value;
        }

        /// <summary>
        /// A `post_task` blocks as defined below.
        /// </summary>
        [Input("postTask")]
        public Input<Inputs.SoftwareUpdateConfigurationPostTaskArgs>? PostTask { get; set; }

        /// <summary>
        /// A `pre_task` blocks as defined below.
        /// </summary>
        [Input("preTask")]
        public Input<Inputs.SoftwareUpdateConfigurationPreTaskArgs>? PreTask { get; set; }

        /// <summary>
        /// A `schedule` blocks as defined below.
        /// </summary>
        [Input("schedule", required: true)]
        public Input<Inputs.SoftwareUpdateConfigurationScheduleArgs> Schedule { get; set; } = null!;

        /// <summary>
        /// A `target` blocks as defined below.
        /// </summary>
        [Input("target")]
        public Input<Inputs.SoftwareUpdateConfigurationTargetArgs>? Target { get; set; }

        [Input("virtualMachineIds")]
        private InputList<string>? _virtualMachineIds;

        /// <summary>
        /// Specifies a list of Azure Resource IDs of azure virtual machines.
        /// </summary>
        public InputList<string> VirtualMachineIds
        {
            get => _virtualMachineIds ?? (_virtualMachineIds = new InputList<string>());
            set => _virtualMachineIds = value;
        }

        /// <summary>
        /// A `windows` block as defined below.
        /// 
        /// &gt; **Note:** One of `linux` or `windows` must be specified.
        /// </summary>
        [Input("windows")]
        public Input<Inputs.SoftwareUpdateConfigurationWindowsArgs>? Windows { get; set; }

        public SoftwareUpdateConfigurationArgs()
        {
        }
        public static new SoftwareUpdateConfigurationArgs Empty => new SoftwareUpdateConfigurationArgs();
    }

    public sealed class SoftwareUpdateConfigurationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of Automation Account to manage this Source Control. Changing this forces a new Automation Source Control to be created.
        /// </summary>
        [Input("automationAccountId")]
        public Input<string>? AutomationAccountId { get; set; }

        /// <summary>
        /// Maximum time allowed for the software update configuration run. using format `PT[n]H[n]M[n]S` as per ISO8601. Defaults to `PT2H`.
        /// </summary>
        [Input("duration")]
        public Input<string>? Duration { get; set; }

        /// <summary>
        /// The Error code when failed.
        /// </summary>
        [Input("errorCode")]
        public Input<string>? ErrorCode { get; set; }

        /// <summary>
        /// The Error message indicating why the operation failed.
        /// </summary>
        [Input("errorMessage")]
        public Input<string>? ErrorMessage { get; set; }

        /// <summary>
        /// A `linux` block as defined below.
        /// </summary>
        [Input("linux")]
        public Input<Inputs.SoftwareUpdateConfigurationLinuxGetArgs>? Linux { get; set; }

        /// <summary>
        /// The name which should be used for this Automation. Changing this forces a new Automation to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nonAzureComputerNames")]
        private InputList<string>? _nonAzureComputerNames;

        /// <summary>
        /// Specifies a list of names of non-Azure machines for the software update configuration.
        /// </summary>
        public InputList<string> NonAzureComputerNames
        {
            get => _nonAzureComputerNames ?? (_nonAzureComputerNames = new InputList<string>());
            set => _nonAzureComputerNames = value;
        }

        /// <summary>
        /// A `post_task` blocks as defined below.
        /// </summary>
        [Input("postTask")]
        public Input<Inputs.SoftwareUpdateConfigurationPostTaskGetArgs>? PostTask { get; set; }

        /// <summary>
        /// A `pre_task` blocks as defined below.
        /// </summary>
        [Input("preTask")]
        public Input<Inputs.SoftwareUpdateConfigurationPreTaskGetArgs>? PreTask { get; set; }

        /// <summary>
        /// A `schedule` blocks as defined below.
        /// </summary>
        [Input("schedule")]
        public Input<Inputs.SoftwareUpdateConfigurationScheduleGetArgs>? Schedule { get; set; }

        /// <summary>
        /// A `target` blocks as defined below.
        /// </summary>
        [Input("target")]
        public Input<Inputs.SoftwareUpdateConfigurationTargetGetArgs>? Target { get; set; }

        [Input("virtualMachineIds")]
        private InputList<string>? _virtualMachineIds;

        /// <summary>
        /// Specifies a list of Azure Resource IDs of azure virtual machines.
        /// </summary>
        public InputList<string> VirtualMachineIds
        {
            get => _virtualMachineIds ?? (_virtualMachineIds = new InputList<string>());
            set => _virtualMachineIds = value;
        }

        /// <summary>
        /// A `windows` block as defined below.
        /// 
        /// &gt; **Note:** One of `linux` or `windows` must be specified.
        /// </summary>
        [Input("windows")]
        public Input<Inputs.SoftwareUpdateConfigurationWindowsGetArgs>? Windows { get; set; }

        public SoftwareUpdateConfigurationState()
        {
        }
        public static new SoftwareUpdateConfigurationState Empty => new SoftwareUpdateConfigurationState();
    }
}
