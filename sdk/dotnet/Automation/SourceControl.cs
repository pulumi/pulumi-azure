// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Automation
{
    /// <summary>
    /// Manages an Automation Source Control.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Automation.SourceControl("example", new()
    ///     {
    ///         AutomationAccountId = azurerm_automation_account.Test.Id,
    ///         FolderPath = "runbook",
    ///         Security = new Azure.Automation.Inputs.SourceControlSecurityArgs
    ///         {
    ///             Token = "ghp_xxx",
    ///             TokenType = "PersonalAccessToken",
    ///         },
    ///         RepositoryUrl = "https://github.com/foo/bat.git",
    ///         SourceControlType = "GitHub",
    ///         Branch = "main",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Automations can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:automation/sourceControl:SourceControl example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.Automation/automationAccounts/account1/sourcecontrols/sc1
    /// ```
    /// </summary>
    [AzureResourceType("azure:automation/sourceControl:SourceControl")]
    public partial class SourceControl : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether auto async the Source Control.
        /// </summary>
        [Output("automaticSync")]
        public Output<bool?> AutomaticSync { get; private set; } = null!;

        /// <summary>
        /// The ID of Automation Account to manage this Source Control. Changing this forces a new Automation Source Control to be created.
        /// </summary>
        [Output("automationAccountId")]
        public Output<string> AutomationAccountId { get; private set; } = null!;

        /// <summary>
        /// Specify the repo branch of the Source Control. Empty value is valid only for `VsoTfvc`.
        /// </summary>
        [Output("branch")]
        public Output<string?> Branch { get; private set; } = null!;

        /// <summary>
        /// A short description of the Source Control.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The folder path of the source control. This Path must be relative.
        /// </summary>
        [Output("folderPath")]
        public Output<string> FolderPath { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Automation Source Control. Changing this forces a new Automation Source Control to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Whether auto publish the Source Control.
        /// </summary>
        [Output("publishRunbookEnabled")]
        public Output<bool?> PublishRunbookEnabled { get; private set; } = null!;

        /// <summary>
        /// The Repository URL of the source control.
        /// </summary>
        [Output("repositoryUrl")]
        public Output<string> RepositoryUrl { get; private set; } = null!;

        /// <summary>
        /// A `security` block as defined below.
        /// </summary>
        [Output("security")]
        public Output<Outputs.SourceControlSecurity> Security { get; private set; } = null!;

        /// <summary>
        /// The source type of Source Control, possible vaules are `VsoGit`, `VsoTfvc` and `GitHub`, and the value is case sensitive.
        /// </summary>
        [Output("sourceControlType")]
        public Output<string> SourceControlType { get; private set; } = null!;


        /// <summary>
        /// Create a SourceControl resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SourceControl(string name, SourceControlArgs args, CustomResourceOptions? options = null)
            : base("azure:automation/sourceControl:SourceControl", name, args ?? new SourceControlArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SourceControl(string name, Input<string> id, SourceControlState? state = null, CustomResourceOptions? options = null)
            : base("azure:automation/sourceControl:SourceControl", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SourceControl resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SourceControl Get(string name, Input<string> id, SourceControlState? state = null, CustomResourceOptions? options = null)
        {
            return new SourceControl(name, id, state, options);
        }
    }

    public sealed class SourceControlArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether auto async the Source Control.
        /// </summary>
        [Input("automaticSync")]
        public Input<bool>? AutomaticSync { get; set; }

        /// <summary>
        /// The ID of Automation Account to manage this Source Control. Changing this forces a new Automation Source Control to be created.
        /// </summary>
        [Input("automationAccountId", required: true)]
        public Input<string> AutomationAccountId { get; set; } = null!;

        /// <summary>
        /// Specify the repo branch of the Source Control. Empty value is valid only for `VsoTfvc`.
        /// </summary>
        [Input("branch")]
        public Input<string>? Branch { get; set; }

        /// <summary>
        /// A short description of the Source Control.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The folder path of the source control. This Path must be relative.
        /// </summary>
        [Input("folderPath", required: true)]
        public Input<string> FolderPath { get; set; } = null!;

        /// <summary>
        /// The name which should be used for this Automation Source Control. Changing this forces a new Automation Source Control to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Whether auto publish the Source Control.
        /// </summary>
        [Input("publishRunbookEnabled")]
        public Input<bool>? PublishRunbookEnabled { get; set; }

        /// <summary>
        /// The Repository URL of the source control.
        /// </summary>
        [Input("repositoryUrl", required: true)]
        public Input<string> RepositoryUrl { get; set; } = null!;

        /// <summary>
        /// A `security` block as defined below.
        /// </summary>
        [Input("security", required: true)]
        public Input<Inputs.SourceControlSecurityArgs> Security { get; set; } = null!;

        /// <summary>
        /// The source type of Source Control, possible vaules are `VsoGit`, `VsoTfvc` and `GitHub`, and the value is case sensitive.
        /// </summary>
        [Input("sourceControlType", required: true)]
        public Input<string> SourceControlType { get; set; } = null!;

        public SourceControlArgs()
        {
        }
        public static new SourceControlArgs Empty => new SourceControlArgs();
    }

    public sealed class SourceControlState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether auto async the Source Control.
        /// </summary>
        [Input("automaticSync")]
        public Input<bool>? AutomaticSync { get; set; }

        /// <summary>
        /// The ID of Automation Account to manage this Source Control. Changing this forces a new Automation Source Control to be created.
        /// </summary>
        [Input("automationAccountId")]
        public Input<string>? AutomationAccountId { get; set; }

        /// <summary>
        /// Specify the repo branch of the Source Control. Empty value is valid only for `VsoTfvc`.
        /// </summary>
        [Input("branch")]
        public Input<string>? Branch { get; set; }

        /// <summary>
        /// A short description of the Source Control.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The folder path of the source control. This Path must be relative.
        /// </summary>
        [Input("folderPath")]
        public Input<string>? FolderPath { get; set; }

        /// <summary>
        /// The name which should be used for this Automation Source Control. Changing this forces a new Automation Source Control to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Whether auto publish the Source Control.
        /// </summary>
        [Input("publishRunbookEnabled")]
        public Input<bool>? PublishRunbookEnabled { get; set; }

        /// <summary>
        /// The Repository URL of the source control.
        /// </summary>
        [Input("repositoryUrl")]
        public Input<string>? RepositoryUrl { get; set; }

        /// <summary>
        /// A `security` block as defined below.
        /// </summary>
        [Input("security")]
        public Input<Inputs.SourceControlSecurityGetArgs>? Security { get; set; }

        /// <summary>
        /// The source type of Source Control, possible vaules are `VsoGit`, `VsoTfvc` and `GitHub`, and the value is case sensitive.
        /// </summary>
        [Input("sourceControlType")]
        public Input<string>? SourceControlType { get; set; }

        public SourceControlState()
        {
        }
        public static new SourceControlState Empty => new SourceControlState();
    }
}
