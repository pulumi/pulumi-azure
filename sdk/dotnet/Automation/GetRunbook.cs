// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Automation
{
    public static class GetRunbook
    {
        /// <summary>
        /// Use this data source to access information about an existing Automation Runbook.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Automation.GetRunbook.Invoke(new()
        ///     {
        ///         Name = "existing-runbook",
        ///         ResourceGroupName = "existing",
        ///         AutomationAccountName = "existing-automation",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getRunbookResult =&gt; getRunbookResult.Id),
        ///     };
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Microsoft.Automation`: 2023-11-01
        /// </summary>
        public static Task<GetRunbookResult> InvokeAsync(GetRunbookArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRunbookResult>("azure:automation/getRunbook:getRunbook", args ?? new GetRunbookArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Automation Runbook.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Automation.GetRunbook.Invoke(new()
        ///     {
        ///         Name = "existing-runbook",
        ///         ResourceGroupName = "existing",
        ///         AutomationAccountName = "existing-automation",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getRunbookResult =&gt; getRunbookResult.Id),
        ///     };
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Microsoft.Automation`: 2023-11-01
        /// </summary>
        public static Output<GetRunbookResult> Invoke(GetRunbookInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRunbookResult>("azure:automation/getRunbook:getRunbook", args ?? new GetRunbookInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Automation Runbook.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Automation.GetRunbook.Invoke(new()
        ///     {
        ///         Name = "existing-runbook",
        ///         ResourceGroupName = "existing",
        ///         AutomationAccountName = "existing-automation",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getRunbookResult =&gt; getRunbookResult.Id),
        ///     };
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Microsoft.Automation`: 2023-11-01
        /// </summary>
        public static Output<GetRunbookResult> Invoke(GetRunbookInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetRunbookResult>("azure:automation/getRunbook:getRunbook", args ?? new GetRunbookInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRunbookArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Automation Account the runbook belongs to.
        /// </summary>
        [Input("automationAccountName", required: true)]
        public string AutomationAccountName { get; set; } = null!;

        /// <summary>
        /// The name of the Automation Runbook.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Automation exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetRunbookArgs()
        {
        }
        public static new GetRunbookArgs Empty => new GetRunbookArgs();
    }

    public sealed class GetRunbookInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Automation Account the runbook belongs to.
        /// </summary>
        [Input("automationAccountName", required: true)]
        public Input<string> AutomationAccountName { get; set; } = null!;

        /// <summary>
        /// The name of the Automation Runbook.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Automation exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetRunbookInvokeArgs()
        {
        }
        public static new GetRunbookInvokeArgs Empty => new GetRunbookInvokeArgs();
    }


    [OutputType]
    public sealed class GetRunbookResult
    {
        public readonly string AutomationAccountName;
        /// <summary>
        /// The content of the Runbook.
        /// </summary>
        public readonly string Content;
        /// <summary>
        /// The description of the Runbook.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The Azure Region where the Runbook exists.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The activity-level tracing of the Runbook.
        /// </summary>
        public readonly int LogActivityTraceLevel;
        /// <summary>
        /// The Progress log option of the Runbook.
        /// </summary>
        public readonly bool LogProgress;
        /// <summary>
        /// The Verbose log option of the Runbook.
        /// </summary>
        public readonly bool LogVerbose;
        public readonly string Name;
        public readonly string ResourceGroupName;
        /// <summary>
        /// The type of Runbook.
        /// </summary>
        public readonly string RunbookType;
        /// <summary>
        /// A mapping of tags assigned to the Runbook.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;

        [OutputConstructor]
        private GetRunbookResult(
            string automationAccountName,

            string content,

            string description,

            string id,

            string location,

            int logActivityTraceLevel,

            bool logProgress,

            bool logVerbose,

            string name,

            string resourceGroupName,

            string runbookType,

            ImmutableDictionary<string, string> tags)
        {
            AutomationAccountName = automationAccountName;
            Content = content;
            Description = description;
            Id = id;
            Location = location;
            LogActivityTraceLevel = logActivityTraceLevel;
            LogProgress = logProgress;
            LogVerbose = logVerbose;
            Name = name;
            ResourceGroupName = resourceGroupName;
            RunbookType = runbookType;
            Tags = tags;
        }
    }
}
