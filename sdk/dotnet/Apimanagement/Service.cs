// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ApiManagement
{
    /// <summary>
    /// Manages an API Management Service.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/api_management.html.markdown.
    /// </summary>
    public partial class Service : Pulumi.CustomResource
    {
        /// <summary>
        /// One or more `additional_location` blocks as defined below.
        /// </summary>
        [Output("additionalLocations")]
        public Output<ImmutableArray<Outputs.ServiceAdditionalLocations>> AdditionalLocations { get; private set; } = null!;

        /// <summary>
        /// One or more (up to 10) `certificate` blocks as defined below.
        /// </summary>
        [Output("certificates")]
        public Output<ImmutableArray<Outputs.ServiceCertificates>> Certificates { get; private set; } = null!;

        /// <summary>
        /// The URL of the Regional Gateway for the API Management Service in the specified region.
        /// </summary>
        [Output("gatewayRegionalUrl")]
        public Output<string> GatewayRegionalUrl { get; private set; } = null!;

        /// <summary>
        /// The URL of the Gateway for the API Management Service.
        /// </summary>
        [Output("gatewayUrl")]
        public Output<string> GatewayUrl { get; private set; } = null!;

        /// <summary>
        /// A `hostname_configuration` block as defined below.
        /// </summary>
        [Output("hostnameConfiguration")]
        public Output<Outputs.ServiceHostnameConfiguration> HostnameConfiguration { get; private set; } = null!;

        /// <summary>
        /// An `identity` block is documented below.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.ServiceIdentity?> Identity { get; private set; } = null!;

        /// <summary>
        /// The Azure location where the API Management Service exists. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The URL for the Management API associated with this API Management service.
        /// </summary>
        [Output("managementApiUrl")]
        public Output<string> ManagementApiUrl { get; private set; } = null!;

        /// <summary>
        /// The name of the API Management Service. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Email address from which the notification will be sent.
        /// </summary>
        [Output("notificationSenderEmail")]
        public Output<string> NotificationSenderEmail { get; private set; } = null!;

        /// <summary>
        /// A `policy` block as defined below.
        /// </summary>
        [Output("policy")]
        public Output<Outputs.ServicePolicy> Policy { get; private set; } = null!;

        /// <summary>
        /// The URL for the Publisher Portal associated with this API Management service.
        /// </summary>
        [Output("portalUrl")]
        public Output<string> PortalUrl { get; private set; } = null!;

        /// <summary>
        /// A `protocols` block as defined below.
        /// </summary>
        [Output("protocols")]
        public Output<Outputs.ServiceProtocols> Protocols { get; private set; } = null!;

        /// <summary>
        /// Public Static Load Balanced IP addresses of the API Management service in the additional location. Available only for Basic, Standard and Premium SKU.
        /// </summary>
        [Output("publicIpAddresses")]
        public Output<ImmutableArray<string>> PublicIpAddresses { get; private set; } = null!;

        /// <summary>
        /// The email of publisher/company.
        /// </summary>
        [Output("publisherEmail")]
        public Output<string> PublisherEmail { get; private set; } = null!;

        /// <summary>
        /// The name of publisher/company.
        /// </summary>
        [Output("publisherName")]
        public Output<string> PublisherName { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group in which the API Management Service should be exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// The URL for the SCM (Source Code Management) Endpoint associated with this API Management service.
        /// </summary>
        [Output("scmUrl")]
        public Output<string> ScmUrl { get; private set; } = null!;

        /// <summary>
        /// A `security` block as defined below.
        /// </summary>
        [Output("security")]
        public Output<Outputs.ServiceSecurity> Security { get; private set; } = null!;

        /// <summary>
        /// A `sign_in` block as defined below.
        /// </summary>
        [Output("signIn")]
        public Output<Outputs.ServiceSignIn> SignIn { get; private set; } = null!;

        /// <summary>
        /// A `sign_up` block as defined below.
        /// </summary>
        [Output("signUp")]
        public Output<Outputs.ServiceSignUp> SignUp { get; private set; } = null!;

        /// <summary>
        /// `sku_name` is a string consisting of two parts separated by an underscore(\_). The fist part is the `name`, valid values include: `Developer`, `Basic`, `Standard` and `Premium`. The second part is the `capacity` (e.g. the number of deployed units of the `sku`), which must be a positive `integer` (e.g. `Developer_1`).
        /// </summary>
        [Output("skuName")]
        public Output<string> SkuName { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags assigned to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a Service resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Service(string name, ServiceArgs args, CustomResourceOptions? options = null)
            : base("azure:apimanagement/service:Service", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private Service(string name, Input<string> id, ServiceState? state = null, CustomResourceOptions? options = null)
            : base("azure:apimanagement/service:Service", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Service resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Service Get(string name, Input<string> id, ServiceState? state = null, CustomResourceOptions? options = null)
        {
            return new Service(name, id, state, options);
        }
    }

    public sealed class ServiceArgs : Pulumi.ResourceArgs
    {
        [Input("additionalLocations")]
        private InputList<Inputs.ServiceAdditionalLocationsArgs>? _additionalLocations;

        /// <summary>
        /// One or more `additional_location` blocks as defined below.
        /// </summary>
        public InputList<Inputs.ServiceAdditionalLocationsArgs> AdditionalLocations
        {
            get => _additionalLocations ?? (_additionalLocations = new InputList<Inputs.ServiceAdditionalLocationsArgs>());
            set => _additionalLocations = value;
        }

        [Input("certificates")]
        private InputList<Inputs.ServiceCertificatesArgs>? _certificates;

        /// <summary>
        /// One or more (up to 10) `certificate` blocks as defined below.
        /// </summary>
        public InputList<Inputs.ServiceCertificatesArgs> Certificates
        {
            get => _certificates ?? (_certificates = new InputList<Inputs.ServiceCertificatesArgs>());
            set => _certificates = value;
        }

        /// <summary>
        /// A `hostname_configuration` block as defined below.
        /// </summary>
        [Input("hostnameConfiguration")]
        public Input<Inputs.ServiceHostnameConfigurationArgs>? HostnameConfiguration { get; set; }

        /// <summary>
        /// An `identity` block is documented below.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.ServiceIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// The Azure location where the API Management Service exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the API Management Service. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Email address from which the notification will be sent.
        /// </summary>
        [Input("notificationSenderEmail")]
        public Input<string>? NotificationSenderEmail { get; set; }

        /// <summary>
        /// A `policy` block as defined below.
        /// </summary>
        [Input("policy")]
        public Input<Inputs.ServicePolicyArgs>? Policy { get; set; }

        /// <summary>
        /// A `protocols` block as defined below.
        /// </summary>
        [Input("protocols")]
        public Input<Inputs.ServiceProtocolsArgs>? Protocols { get; set; }

        /// <summary>
        /// The email of publisher/company.
        /// </summary>
        [Input("publisherEmail", required: true)]
        public Input<string> PublisherEmail { get; set; } = null!;

        /// <summary>
        /// The name of publisher/company.
        /// </summary>
        [Input("publisherName", required: true)]
        public Input<string> PublisherName { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group in which the API Management Service should be exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// A `security` block as defined below.
        /// </summary>
        [Input("security")]
        public Input<Inputs.ServiceSecurityArgs>? Security { get; set; }

        /// <summary>
        /// A `sign_in` block as defined below.
        /// </summary>
        [Input("signIn")]
        public Input<Inputs.ServiceSignInArgs>? SignIn { get; set; }

        /// <summary>
        /// A `sign_up` block as defined below.
        /// </summary>
        [Input("signUp")]
        public Input<Inputs.ServiceSignUpArgs>? SignUp { get; set; }

        /// <summary>
        /// `sku_name` is a string consisting of two parts separated by an underscore(\_). The fist part is the `name`, valid values include: `Developer`, `Basic`, `Standard` and `Premium`. The second part is the `capacity` (e.g. the number of deployed units of the `sku`), which must be a positive `integer` (e.g. `Developer_1`).
        /// </summary>
        [Input("skuName", required: true)]
        public Input<string> SkuName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags assigned to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public ServiceArgs()
        {
        }
    }

    public sealed class ServiceState : Pulumi.ResourceArgs
    {
        [Input("additionalLocations")]
        private InputList<Inputs.ServiceAdditionalLocationsGetArgs>? _additionalLocations;

        /// <summary>
        /// One or more `additional_location` blocks as defined below.
        /// </summary>
        public InputList<Inputs.ServiceAdditionalLocationsGetArgs> AdditionalLocations
        {
            get => _additionalLocations ?? (_additionalLocations = new InputList<Inputs.ServiceAdditionalLocationsGetArgs>());
            set => _additionalLocations = value;
        }

        [Input("certificates")]
        private InputList<Inputs.ServiceCertificatesGetArgs>? _certificates;

        /// <summary>
        /// One or more (up to 10) `certificate` blocks as defined below.
        /// </summary>
        public InputList<Inputs.ServiceCertificatesGetArgs> Certificates
        {
            get => _certificates ?? (_certificates = new InputList<Inputs.ServiceCertificatesGetArgs>());
            set => _certificates = value;
        }

        /// <summary>
        /// The URL of the Regional Gateway for the API Management Service in the specified region.
        /// </summary>
        [Input("gatewayRegionalUrl")]
        public Input<string>? GatewayRegionalUrl { get; set; }

        /// <summary>
        /// The URL of the Gateway for the API Management Service.
        /// </summary>
        [Input("gatewayUrl")]
        public Input<string>? GatewayUrl { get; set; }

        /// <summary>
        /// A `hostname_configuration` block as defined below.
        /// </summary>
        [Input("hostnameConfiguration")]
        public Input<Inputs.ServiceHostnameConfigurationGetArgs>? HostnameConfiguration { get; set; }

        /// <summary>
        /// An `identity` block is documented below.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.ServiceIdentityGetArgs>? Identity { get; set; }

        /// <summary>
        /// The Azure location where the API Management Service exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The URL for the Management API associated with this API Management service.
        /// </summary>
        [Input("managementApiUrl")]
        public Input<string>? ManagementApiUrl { get; set; }

        /// <summary>
        /// The name of the API Management Service. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Email address from which the notification will be sent.
        /// </summary>
        [Input("notificationSenderEmail")]
        public Input<string>? NotificationSenderEmail { get; set; }

        /// <summary>
        /// A `policy` block as defined below.
        /// </summary>
        [Input("policy")]
        public Input<Inputs.ServicePolicyGetArgs>? Policy { get; set; }

        /// <summary>
        /// The URL for the Publisher Portal associated with this API Management service.
        /// </summary>
        [Input("portalUrl")]
        public Input<string>? PortalUrl { get; set; }

        /// <summary>
        /// A `protocols` block as defined below.
        /// </summary>
        [Input("protocols")]
        public Input<Inputs.ServiceProtocolsGetArgs>? Protocols { get; set; }

        [Input("publicIpAddresses")]
        private InputList<string>? _publicIpAddresses;

        /// <summary>
        /// Public Static Load Balanced IP addresses of the API Management service in the additional location. Available only for Basic, Standard and Premium SKU.
        /// </summary>
        public InputList<string> PublicIpAddresses
        {
            get => _publicIpAddresses ?? (_publicIpAddresses = new InputList<string>());
            set => _publicIpAddresses = value;
        }

        /// <summary>
        /// The email of publisher/company.
        /// </summary>
        [Input("publisherEmail")]
        public Input<string>? PublisherEmail { get; set; }

        /// <summary>
        /// The name of publisher/company.
        /// </summary>
        [Input("publisherName")]
        public Input<string>? PublisherName { get; set; }

        /// <summary>
        /// The name of the Resource Group in which the API Management Service should be exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// The URL for the SCM (Source Code Management) Endpoint associated with this API Management service.
        /// </summary>
        [Input("scmUrl")]
        public Input<string>? ScmUrl { get; set; }

        /// <summary>
        /// A `security` block as defined below.
        /// </summary>
        [Input("security")]
        public Input<Inputs.ServiceSecurityGetArgs>? Security { get; set; }

        /// <summary>
        /// A `sign_in` block as defined below.
        /// </summary>
        [Input("signIn")]
        public Input<Inputs.ServiceSignInGetArgs>? SignIn { get; set; }

        /// <summary>
        /// A `sign_up` block as defined below.
        /// </summary>
        [Input("signUp")]
        public Input<Inputs.ServiceSignUpGetArgs>? SignUp { get; set; }

        /// <summary>
        /// `sku_name` is a string consisting of two parts separated by an underscore(\_). The fist part is the `name`, valid values include: `Developer`, `Basic`, `Standard` and `Premium`. The second part is the `capacity` (e.g. the number of deployed units of the `sku`), which must be a positive `integer` (e.g. `Developer_1`).
        /// </summary>
        [Input("skuName")]
        public Input<string>? SkuName { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags assigned to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public ServiceState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class ServiceAdditionalLocationsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The URL of the Regional Gateway for the API Management Service in the specified region.
        /// </summary>
        [Input("gatewayRegionalUrl")]
        public Input<string>? GatewayRegionalUrl { get; set; }

        /// <summary>
        /// The Azure location where the API Management Service exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("publicIpAddresses")]
        private InputList<string>? _publicIpAddresses;

        /// <summary>
        /// Public Static Load Balanced IP addresses of the API Management service in the additional location. Available only for Basic, Standard and Premium SKU.
        /// </summary>
        public InputList<string> PublicIpAddresses
        {
            get => _publicIpAddresses ?? (_publicIpAddresses = new InputList<string>());
            set => _publicIpAddresses = value;
        }

        public ServiceAdditionalLocationsArgs()
        {
        }
    }

    public sealed class ServiceAdditionalLocationsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The URL of the Regional Gateway for the API Management Service in the specified region.
        /// </summary>
        [Input("gatewayRegionalUrl")]
        public Input<string>? GatewayRegionalUrl { get; set; }

        /// <summary>
        /// The Azure location where the API Management Service exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("publicIpAddresses")]
        private InputList<string>? _publicIpAddresses;

        /// <summary>
        /// Public Static Load Balanced IP addresses of the API Management service in the additional location. Available only for Basic, Standard and Premium SKU.
        /// </summary>
        public InputList<string> PublicIpAddresses
        {
            get => _publicIpAddresses ?? (_publicIpAddresses = new InputList<string>());
            set => _publicIpAddresses = value;
        }

        public ServiceAdditionalLocationsGetArgs()
        {
        }
    }

    public sealed class ServiceCertificatesArgs : Pulumi.ResourceArgs
    {
        [Input("certificatePassword", required: true)]
        public Input<string> CertificatePassword { get; set; } = null!;

        [Input("encodedCertificate", required: true)]
        public Input<string> EncodedCertificate { get; set; } = null!;

        [Input("storeName", required: true)]
        public Input<string> StoreName { get; set; } = null!;

        public ServiceCertificatesArgs()
        {
        }
    }

    public sealed class ServiceCertificatesGetArgs : Pulumi.ResourceArgs
    {
        [Input("certificatePassword", required: true)]
        public Input<string> CertificatePassword { get; set; } = null!;

        [Input("encodedCertificate", required: true)]
        public Input<string> EncodedCertificate { get; set; } = null!;

        [Input("storeName", required: true)]
        public Input<string> StoreName { get; set; } = null!;

        public ServiceCertificatesGetArgs()
        {
        }
    }

    public sealed class ServiceHostnameConfigurationArgs : Pulumi.ResourceArgs
    {
        [Input("managements")]
        private InputList<ServiceHostnameConfigurationManagementsArgs>? _managements;
        public InputList<ServiceHostnameConfigurationManagementsArgs> Managements
        {
            get => _managements ?? (_managements = new InputList<ServiceHostnameConfigurationManagementsArgs>());
            set => _managements = value;
        }

        [Input("portals")]
        private InputList<ServiceHostnameConfigurationPortalsArgs>? _portals;
        public InputList<ServiceHostnameConfigurationPortalsArgs> Portals
        {
            get => _portals ?? (_portals = new InputList<ServiceHostnameConfigurationPortalsArgs>());
            set => _portals = value;
        }

        [Input("proxies")]
        private InputList<ServiceHostnameConfigurationProxiesArgs>? _proxies;
        public InputList<ServiceHostnameConfigurationProxiesArgs> Proxies
        {
            get => _proxies ?? (_proxies = new InputList<ServiceHostnameConfigurationProxiesArgs>());
            set => _proxies = value;
        }

        [Input("scms")]
        private InputList<ServiceHostnameConfigurationScmsArgs>? _scms;
        public InputList<ServiceHostnameConfigurationScmsArgs> Scms
        {
            get => _scms ?? (_scms = new InputList<ServiceHostnameConfigurationScmsArgs>());
            set => _scms = value;
        }

        public ServiceHostnameConfigurationArgs()
        {
        }
    }

    public sealed class ServiceHostnameConfigurationGetArgs : Pulumi.ResourceArgs
    {
        [Input("managements")]
        private InputList<ServiceHostnameConfigurationManagementsGetArgs>? _managements;
        public InputList<ServiceHostnameConfigurationManagementsGetArgs> Managements
        {
            get => _managements ?? (_managements = new InputList<ServiceHostnameConfigurationManagementsGetArgs>());
            set => _managements = value;
        }

        [Input("portals")]
        private InputList<ServiceHostnameConfigurationPortalsGetArgs>? _portals;
        public InputList<ServiceHostnameConfigurationPortalsGetArgs> Portals
        {
            get => _portals ?? (_portals = new InputList<ServiceHostnameConfigurationPortalsGetArgs>());
            set => _portals = value;
        }

        [Input("proxies")]
        private InputList<ServiceHostnameConfigurationProxiesGetArgs>? _proxies;
        public InputList<ServiceHostnameConfigurationProxiesGetArgs> Proxies
        {
            get => _proxies ?? (_proxies = new InputList<ServiceHostnameConfigurationProxiesGetArgs>());
            set => _proxies = value;
        }

        [Input("scms")]
        private InputList<ServiceHostnameConfigurationScmsGetArgs>? _scms;
        public InputList<ServiceHostnameConfigurationScmsGetArgs> Scms
        {
            get => _scms ?? (_scms = new InputList<ServiceHostnameConfigurationScmsGetArgs>());
            set => _scms = value;
        }

        public ServiceHostnameConfigurationGetArgs()
        {
        }
    }

    public sealed class ServiceHostnameConfigurationManagementsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// One or more (up to 10) `certificate` blocks as defined below.
        /// </summary>
        [Input("certificate")]
        public Input<string>? Certificate { get; set; }

        [Input("certificatePassword")]
        public Input<string>? CertificatePassword { get; set; }

        [Input("hostName", required: true)]
        public Input<string> HostName { get; set; } = null!;

        [Input("keyVaultId")]
        public Input<string>? KeyVaultId { get; set; }

        [Input("negotiateClientCertificate")]
        public Input<bool>? NegotiateClientCertificate { get; set; }

        public ServiceHostnameConfigurationManagementsArgs()
        {
        }
    }

    public sealed class ServiceHostnameConfigurationManagementsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// One or more (up to 10) `certificate` blocks as defined below.
        /// </summary>
        [Input("certificate")]
        public Input<string>? Certificate { get; set; }

        [Input("certificatePassword")]
        public Input<string>? CertificatePassword { get; set; }

        [Input("hostName", required: true)]
        public Input<string> HostName { get; set; } = null!;

        [Input("keyVaultId")]
        public Input<string>? KeyVaultId { get; set; }

        [Input("negotiateClientCertificate")]
        public Input<bool>? NegotiateClientCertificate { get; set; }

        public ServiceHostnameConfigurationManagementsGetArgs()
        {
        }
    }

    public sealed class ServiceHostnameConfigurationPortalsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// One or more (up to 10) `certificate` blocks as defined below.
        /// </summary>
        [Input("certificate")]
        public Input<string>? Certificate { get; set; }

        [Input("certificatePassword")]
        public Input<string>? CertificatePassword { get; set; }

        [Input("hostName", required: true)]
        public Input<string> HostName { get; set; } = null!;

        [Input("keyVaultId")]
        public Input<string>? KeyVaultId { get; set; }

        [Input("negotiateClientCertificate")]
        public Input<bool>? NegotiateClientCertificate { get; set; }

        public ServiceHostnameConfigurationPortalsArgs()
        {
        }
    }

    public sealed class ServiceHostnameConfigurationPortalsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// One or more (up to 10) `certificate` blocks as defined below.
        /// </summary>
        [Input("certificate")]
        public Input<string>? Certificate { get; set; }

        [Input("certificatePassword")]
        public Input<string>? CertificatePassword { get; set; }

        [Input("hostName", required: true)]
        public Input<string> HostName { get; set; } = null!;

        [Input("keyVaultId")]
        public Input<string>? KeyVaultId { get; set; }

        [Input("negotiateClientCertificate")]
        public Input<bool>? NegotiateClientCertificate { get; set; }

        public ServiceHostnameConfigurationPortalsGetArgs()
        {
        }
    }

    public sealed class ServiceHostnameConfigurationProxiesArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// One or more (up to 10) `certificate` blocks as defined below.
        /// </summary>
        [Input("certificate")]
        public Input<string>? Certificate { get; set; }

        [Input("certificatePassword")]
        public Input<string>? CertificatePassword { get; set; }

        [Input("defaultSslBinding")]
        public Input<bool>? DefaultSslBinding { get; set; }

        [Input("hostName", required: true)]
        public Input<string> HostName { get; set; } = null!;

        [Input("keyVaultId")]
        public Input<string>? KeyVaultId { get; set; }

        [Input("negotiateClientCertificate")]
        public Input<bool>? NegotiateClientCertificate { get; set; }

        public ServiceHostnameConfigurationProxiesArgs()
        {
        }
    }

    public sealed class ServiceHostnameConfigurationProxiesGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// One or more (up to 10) `certificate` blocks as defined below.
        /// </summary>
        [Input("certificate")]
        public Input<string>? Certificate { get; set; }

        [Input("certificatePassword")]
        public Input<string>? CertificatePassword { get; set; }

        [Input("defaultSslBinding")]
        public Input<bool>? DefaultSslBinding { get; set; }

        [Input("hostName", required: true)]
        public Input<string> HostName { get; set; } = null!;

        [Input("keyVaultId")]
        public Input<string>? KeyVaultId { get; set; }

        [Input("negotiateClientCertificate")]
        public Input<bool>? NegotiateClientCertificate { get; set; }

        public ServiceHostnameConfigurationProxiesGetArgs()
        {
        }
    }

    public sealed class ServiceHostnameConfigurationScmsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// One or more (up to 10) `certificate` blocks as defined below.
        /// </summary>
        [Input("certificate")]
        public Input<string>? Certificate { get; set; }

        [Input("certificatePassword")]
        public Input<string>? CertificatePassword { get; set; }

        [Input("hostName", required: true)]
        public Input<string> HostName { get; set; } = null!;

        [Input("keyVaultId")]
        public Input<string>? KeyVaultId { get; set; }

        [Input("negotiateClientCertificate")]
        public Input<bool>? NegotiateClientCertificate { get; set; }

        public ServiceHostnameConfigurationScmsArgs()
        {
        }
    }

    public sealed class ServiceHostnameConfigurationScmsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// One or more (up to 10) `certificate` blocks as defined below.
        /// </summary>
        [Input("certificate")]
        public Input<string>? Certificate { get; set; }

        [Input("certificatePassword")]
        public Input<string>? CertificatePassword { get; set; }

        [Input("hostName", required: true)]
        public Input<string> HostName { get; set; } = null!;

        [Input("keyVaultId")]
        public Input<string>? KeyVaultId { get; set; }

        [Input("negotiateClientCertificate")]
        public Input<bool>? NegotiateClientCertificate { get; set; }

        public ServiceHostnameConfigurationScmsGetArgs()
        {
        }
    }

    public sealed class ServiceIdentityArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Principal ID associated with this Managed Service Identity.
        /// </summary>
        [Input("principalId")]
        public Input<string>? PrincipalId { get; set; }

        /// <summary>
        /// The Tenant ID associated with this Managed Service Identity.
        /// </summary>
        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public ServiceIdentityArgs()
        {
        }
    }

    public sealed class ServiceIdentityGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Principal ID associated with this Managed Service Identity.
        /// </summary>
        [Input("principalId")]
        public Input<string>? PrincipalId { get; set; }

        /// <summary>
        /// The Tenant ID associated with this Managed Service Identity.
        /// </summary>
        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public ServiceIdentityGetArgs()
        {
        }
    }

    public sealed class ServicePolicyArgs : Pulumi.ResourceArgs
    {
        [Input("xmlContent")]
        public Input<string>? XmlContent { get; set; }

        [Input("xmlLink")]
        public Input<string>? XmlLink { get; set; }

        public ServicePolicyArgs()
        {
        }
    }

    public sealed class ServicePolicyGetArgs : Pulumi.ResourceArgs
    {
        [Input("xmlContent")]
        public Input<string>? XmlContent { get; set; }

        [Input("xmlLink")]
        public Input<string>? XmlLink { get; set; }

        public ServicePolicyGetArgs()
        {
        }
    }

    public sealed class ServiceProtocolsArgs : Pulumi.ResourceArgs
    {
        [Input("enableHttp2")]
        public Input<bool>? EnableHttp2 { get; set; }

        public ServiceProtocolsArgs()
        {
        }
    }

    public sealed class ServiceProtocolsGetArgs : Pulumi.ResourceArgs
    {
        [Input("enableHttp2")]
        public Input<bool>? EnableHttp2 { get; set; }

        public ServiceProtocolsGetArgs()
        {
        }
    }

    public sealed class ServiceSecurityArgs : Pulumi.ResourceArgs
    {
        [Input("enableBackendSsl30")]
        public Input<bool>? EnableBackendSsl30 { get; set; }

        [Input("enableBackendTls10")]
        public Input<bool>? EnableBackendTls10 { get; set; }

        [Input("enableBackendTls11")]
        public Input<bool>? EnableBackendTls11 { get; set; }

        [Input("enableFrontendSsl30")]
        public Input<bool>? EnableFrontendSsl30 { get; set; }

        [Input("enableFrontendTls10")]
        public Input<bool>? EnableFrontendTls10 { get; set; }

        [Input("enableFrontendTls11")]
        public Input<bool>? EnableFrontendTls11 { get; set; }

        [Input("enableTripleDesCiphers")]
        public Input<bool>? EnableTripleDesCiphers { get; set; }

        public ServiceSecurityArgs()
        {
        }
    }

    public sealed class ServiceSecurityGetArgs : Pulumi.ResourceArgs
    {
        [Input("enableBackendSsl30")]
        public Input<bool>? EnableBackendSsl30 { get; set; }

        [Input("enableBackendTls10")]
        public Input<bool>? EnableBackendTls10 { get; set; }

        [Input("enableBackendTls11")]
        public Input<bool>? EnableBackendTls11 { get; set; }

        [Input("enableFrontendSsl30")]
        public Input<bool>? EnableFrontendSsl30 { get; set; }

        [Input("enableFrontendTls10")]
        public Input<bool>? EnableFrontendTls10 { get; set; }

        [Input("enableFrontendTls11")]
        public Input<bool>? EnableFrontendTls11 { get; set; }

        [Input("enableTripleDesCiphers")]
        public Input<bool>? EnableTripleDesCiphers { get; set; }

        public ServiceSecurityGetArgs()
        {
        }
    }

    public sealed class ServiceSignInArgs : Pulumi.ResourceArgs
    {
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        public ServiceSignInArgs()
        {
        }
    }

    public sealed class ServiceSignInGetArgs : Pulumi.ResourceArgs
    {
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        public ServiceSignInGetArgs()
        {
        }
    }

    public sealed class ServiceSignUpArgs : Pulumi.ResourceArgs
    {
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        [Input("termsOfService", required: true)]
        public Input<ServiceSignUpTermsOfServiceArgs> TermsOfService { get; set; } = null!;

        public ServiceSignUpArgs()
        {
        }
    }

    public sealed class ServiceSignUpGetArgs : Pulumi.ResourceArgs
    {
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        [Input("termsOfService", required: true)]
        public Input<ServiceSignUpTermsOfServiceGetArgs> TermsOfService { get; set; } = null!;

        public ServiceSignUpGetArgs()
        {
        }
    }

    public sealed class ServiceSignUpTermsOfServiceArgs : Pulumi.ResourceArgs
    {
        [Input("consentRequired", required: true)]
        public Input<bool> ConsentRequired { get; set; } = null!;

        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        [Input("text")]
        public Input<string>? Text { get; set; }

        public ServiceSignUpTermsOfServiceArgs()
        {
        }
    }

    public sealed class ServiceSignUpTermsOfServiceGetArgs : Pulumi.ResourceArgs
    {
        [Input("consentRequired", required: true)]
        public Input<bool> ConsentRequired { get; set; } = null!;

        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        [Input("text")]
        public Input<string>? Text { get; set; }

        public ServiceSignUpTermsOfServiceGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class ServiceAdditionalLocations
    {
        /// <summary>
        /// The URL of the Regional Gateway for the API Management Service in the specified region.
        /// </summary>
        public readonly string GatewayRegionalUrl;
        /// <summary>
        /// The Azure location where the API Management Service exists. Changing this forces a new resource to be created.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Public Static Load Balanced IP addresses of the API Management service in the additional location. Available only for Basic, Standard and Premium SKU.
        /// </summary>
        public readonly ImmutableArray<string> PublicIpAddresses;

        [OutputConstructor]
        private ServiceAdditionalLocations(
            string gatewayRegionalUrl,
            string location,
            ImmutableArray<string> publicIpAddresses)
        {
            GatewayRegionalUrl = gatewayRegionalUrl;
            Location = location;
            PublicIpAddresses = publicIpAddresses;
        }
    }

    [OutputType]
    public sealed class ServiceCertificates
    {
        public readonly string CertificatePassword;
        public readonly string EncodedCertificate;
        public readonly string StoreName;

        [OutputConstructor]
        private ServiceCertificates(
            string certificatePassword,
            string encodedCertificate,
            string storeName)
        {
            CertificatePassword = certificatePassword;
            EncodedCertificate = encodedCertificate;
            StoreName = storeName;
        }
    }

    [OutputType]
    public sealed class ServiceHostnameConfiguration
    {
        public readonly ImmutableArray<ServiceHostnameConfigurationManagements> Managements;
        public readonly ImmutableArray<ServiceHostnameConfigurationPortals> Portals;
        public readonly ImmutableArray<ServiceHostnameConfigurationProxies> Proxies;
        public readonly ImmutableArray<ServiceHostnameConfigurationScms> Scms;

        [OutputConstructor]
        private ServiceHostnameConfiguration(
            ImmutableArray<ServiceHostnameConfigurationManagements> managements,
            ImmutableArray<ServiceHostnameConfigurationPortals> portals,
            ImmutableArray<ServiceHostnameConfigurationProxies> proxies,
            ImmutableArray<ServiceHostnameConfigurationScms> scms)
        {
            Managements = managements;
            Portals = portals;
            Proxies = proxies;
            Scms = scms;
        }
    }

    [OutputType]
    public sealed class ServiceHostnameConfigurationManagements
    {
        /// <summary>
        /// One or more (up to 10) `certificate` blocks as defined below.
        /// </summary>
        public readonly string? Certificate;
        public readonly string? CertificatePassword;
        public readonly string HostName;
        public readonly string? KeyVaultId;
        public readonly bool? NegotiateClientCertificate;

        [OutputConstructor]
        private ServiceHostnameConfigurationManagements(
            string? certificate,
            string? certificatePassword,
            string hostName,
            string? keyVaultId,
            bool? negotiateClientCertificate)
        {
            Certificate = certificate;
            CertificatePassword = certificatePassword;
            HostName = hostName;
            KeyVaultId = keyVaultId;
            NegotiateClientCertificate = negotiateClientCertificate;
        }
    }

    [OutputType]
    public sealed class ServiceHostnameConfigurationPortals
    {
        /// <summary>
        /// One or more (up to 10) `certificate` blocks as defined below.
        /// </summary>
        public readonly string? Certificate;
        public readonly string? CertificatePassword;
        public readonly string HostName;
        public readonly string? KeyVaultId;
        public readonly bool? NegotiateClientCertificate;

        [OutputConstructor]
        private ServiceHostnameConfigurationPortals(
            string? certificate,
            string? certificatePassword,
            string hostName,
            string? keyVaultId,
            bool? negotiateClientCertificate)
        {
            Certificate = certificate;
            CertificatePassword = certificatePassword;
            HostName = hostName;
            KeyVaultId = keyVaultId;
            NegotiateClientCertificate = negotiateClientCertificate;
        }
    }

    [OutputType]
    public sealed class ServiceHostnameConfigurationProxies
    {
        /// <summary>
        /// One or more (up to 10) `certificate` blocks as defined below.
        /// </summary>
        public readonly string? Certificate;
        public readonly string? CertificatePassword;
        public readonly bool DefaultSslBinding;
        public readonly string HostName;
        public readonly string? KeyVaultId;
        public readonly bool? NegotiateClientCertificate;

        [OutputConstructor]
        private ServiceHostnameConfigurationProxies(
            string? certificate,
            string? certificatePassword,
            bool defaultSslBinding,
            string hostName,
            string? keyVaultId,
            bool? negotiateClientCertificate)
        {
            Certificate = certificate;
            CertificatePassword = certificatePassword;
            DefaultSslBinding = defaultSslBinding;
            HostName = hostName;
            KeyVaultId = keyVaultId;
            NegotiateClientCertificate = negotiateClientCertificate;
        }
    }

    [OutputType]
    public sealed class ServiceHostnameConfigurationScms
    {
        /// <summary>
        /// One or more (up to 10) `certificate` blocks as defined below.
        /// </summary>
        public readonly string? Certificate;
        public readonly string? CertificatePassword;
        public readonly string HostName;
        public readonly string? KeyVaultId;
        public readonly bool? NegotiateClientCertificate;

        [OutputConstructor]
        private ServiceHostnameConfigurationScms(
            string? certificate,
            string? certificatePassword,
            string hostName,
            string? keyVaultId,
            bool? negotiateClientCertificate)
        {
            Certificate = certificate;
            CertificatePassword = certificatePassword;
            HostName = hostName;
            KeyVaultId = keyVaultId;
            NegotiateClientCertificate = negotiateClientCertificate;
        }
    }

    [OutputType]
    public sealed class ServiceIdentity
    {
        /// <summary>
        /// The Principal ID associated with this Managed Service Identity.
        /// </summary>
        public readonly string PrincipalId;
        /// <summary>
        /// The Tenant ID associated with this Managed Service Identity.
        /// </summary>
        public readonly string TenantId;
        public readonly string Type;

        [OutputConstructor]
        private ServiceIdentity(
            string principalId,
            string tenantId,
            string type)
        {
            PrincipalId = principalId;
            TenantId = tenantId;
            Type = type;
        }
    }

    [OutputType]
    public sealed class ServicePolicy
    {
        public readonly string XmlContent;
        public readonly string? XmlLink;

        [OutputConstructor]
        private ServicePolicy(
            string xmlContent,
            string? xmlLink)
        {
            XmlContent = xmlContent;
            XmlLink = xmlLink;
        }
    }

    [OutputType]
    public sealed class ServiceProtocols
    {
        public readonly bool? EnableHttp2;

        [OutputConstructor]
        private ServiceProtocols(bool? enableHttp2)
        {
            EnableHttp2 = enableHttp2;
        }
    }

    [OutputType]
    public sealed class ServiceSecurity
    {
        public readonly bool? EnableBackendSsl30;
        public readonly bool? EnableBackendTls10;
        public readonly bool? EnableBackendTls11;
        public readonly bool? EnableFrontendSsl30;
        public readonly bool? EnableFrontendTls10;
        public readonly bool? EnableFrontendTls11;
        public readonly bool? EnableTripleDesCiphers;

        [OutputConstructor]
        private ServiceSecurity(
            bool? enableBackendSsl30,
            bool? enableBackendTls10,
            bool? enableBackendTls11,
            bool? enableFrontendSsl30,
            bool? enableFrontendTls10,
            bool? enableFrontendTls11,
            bool? enableTripleDesCiphers)
        {
            EnableBackendSsl30 = enableBackendSsl30;
            EnableBackendTls10 = enableBackendTls10;
            EnableBackendTls11 = enableBackendTls11;
            EnableFrontendSsl30 = enableFrontendSsl30;
            EnableFrontendTls10 = enableFrontendTls10;
            EnableFrontendTls11 = enableFrontendTls11;
            EnableTripleDesCiphers = enableTripleDesCiphers;
        }
    }

    [OutputType]
    public sealed class ServiceSignIn
    {
        public readonly bool Enabled;

        [OutputConstructor]
        private ServiceSignIn(bool enabled)
        {
            Enabled = enabled;
        }
    }

    [OutputType]
    public sealed class ServiceSignUp
    {
        public readonly bool Enabled;
        public readonly ServiceSignUpTermsOfService TermsOfService;

        [OutputConstructor]
        private ServiceSignUp(
            bool enabled,
            ServiceSignUpTermsOfService termsOfService)
        {
            Enabled = enabled;
            TermsOfService = termsOfService;
        }
    }

    [OutputType]
    public sealed class ServiceSignUpTermsOfService
    {
        public readonly bool ConsentRequired;
        public readonly bool Enabled;
        public readonly string? Text;

        [OutputConstructor]
        private ServiceSignUpTermsOfService(
            bool consentRequired,
            bool enabled,
            string? text)
        {
            ConsentRequired = consentRequired;
            Enabled = enabled;
            Text = text;
        }
    }
    }
}
