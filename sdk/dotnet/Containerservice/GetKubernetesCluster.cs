// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ContainerService
{
    public static class GetKubernetesCluster
    {
        /// <summary>
        /// Use this data source to access information about an existing Managed Kubernetes Cluster (AKS).
        /// 
        /// {{% examples %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetKubernetesClusterResult> InvokeAsync(GetKubernetesClusterArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetKubernetesClusterResult>("azure:containerservice/getKubernetesCluster:getKubernetesCluster", args ?? new GetKubernetesClusterArgs(), options.WithVersion());
    }


    public sealed class GetKubernetesClusterArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the managed Kubernetes Cluster.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group in which the managed Kubernetes Cluster exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetKubernetesClusterArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetKubernetesClusterResult
    {
        /// <summary>
        /// A `addon_profile` block as documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKubernetesClusterAddonProfileResult> AddonProfiles;
        /// <summary>
        /// An `agent_pool_profile` block as documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKubernetesClusterAgentPoolProfileResult> AgentPoolProfiles;
        /// <summary>
        /// The IP ranges to whitelist for incoming traffic to the masters.
        /// </summary>
        public readonly ImmutableArray<string> ApiServerAuthorizedIpRanges;
        /// <summary>
        /// The DNS Prefix of the managed Kubernetes cluster.
        /// </summary>
        public readonly string DnsPrefix;
        /// <summary>
        /// The FQDN of the Azure Kubernetes Managed Cluster.
        /// </summary>
        public readonly string Fqdn;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Raw Kubernetes config for the admin account to be used by [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/) and other compatible tools. This is only available when Role Based Access Control with Azure Active Directory is enabled.
        /// </summary>
        public readonly string KubeAdminConfigRaw;
        /// <summary>
        /// A `kube_admin_config` block as defined below. This is only available when Role Based Access Control with Azure Active Directory is enabled.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKubernetesClusterKubeAdminConfigResult> KubeAdminConfigs;
        /// <summary>
        /// Base64 encoded Kubernetes configuration.
        /// </summary>
        public readonly string KubeConfigRaw;
        /// <summary>
        /// A `kube_config` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKubernetesClusterKubeConfigResult> KubeConfigs;
        /// <summary>
        /// The version of Kubernetes used on the managed Kubernetes Cluster.
        /// </summary>
        public readonly string KubernetesVersion;
        /// <summary>
        /// A `linux_profile` block as documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKubernetesClusterLinuxProfileResult> LinuxProfiles;
        /// <summary>
        /// The Azure Region in which the managed Kubernetes Cluster exists.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name assigned to this pool of agents.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// A `network_profile` block as documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKubernetesClusterNetworkProfileResult> NetworkProfiles;
        /// <summary>
        /// Auto-generated Resource Group containing AKS Cluster resources.
        /// </summary>
        public readonly string NodeResourceGroup;
        /// <summary>
        /// The FQDN of this Kubernetes Cluster when private link has been enabled. This name is only resolvable inside the Virtual Network where the Azure Kubernetes Service is located                   
        /// </summary>
        public readonly string PrivateFqdn;
        /// <summary>
        /// Does this Kubernetes Cluster have the Kubernetes API exposed via Private Link?                           
        /// </summary>
        public readonly bool PrivateLinkEnabled;
        public readonly string ResourceGroupName;
        /// <summary>
        /// A `role_based_access_control` block as documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKubernetesClusterRoleBasedAccessControlResult> RoleBasedAccessControls;
        /// <summary>
        /// A `service_principal` block as documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKubernetesClusterServicePrincipalResult> ServicePrincipals;
        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// A `windows_profile` block as documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKubernetesClusterWindowsProfileResult> WindowsProfiles;

        [OutputConstructor]
        private GetKubernetesClusterResult(
            ImmutableArray<Outputs.GetKubernetesClusterAddonProfileResult> addonProfiles,

            ImmutableArray<Outputs.GetKubernetesClusterAgentPoolProfileResult> agentPoolProfiles,

            ImmutableArray<string> apiServerAuthorizedIpRanges,

            string dnsPrefix,

            string fqdn,

            string id,

            string kubeAdminConfigRaw,

            ImmutableArray<Outputs.GetKubernetesClusterKubeAdminConfigResult> kubeAdminConfigs,

            string kubeConfigRaw,

            ImmutableArray<Outputs.GetKubernetesClusterKubeConfigResult> kubeConfigs,

            string kubernetesVersion,

            ImmutableArray<Outputs.GetKubernetesClusterLinuxProfileResult> linuxProfiles,

            string location,

            string name,

            ImmutableArray<Outputs.GetKubernetesClusterNetworkProfileResult> networkProfiles,

            string nodeResourceGroup,

            string privateFqdn,

            bool privateLinkEnabled,

            string resourceGroupName,

            ImmutableArray<Outputs.GetKubernetesClusterRoleBasedAccessControlResult> roleBasedAccessControls,

            ImmutableArray<Outputs.GetKubernetesClusterServicePrincipalResult> servicePrincipals,

            ImmutableDictionary<string, string> tags,

            ImmutableArray<Outputs.GetKubernetesClusterWindowsProfileResult> windowsProfiles)
        {
            AddonProfiles = addonProfiles;
            AgentPoolProfiles = agentPoolProfiles;
            ApiServerAuthorizedIpRanges = apiServerAuthorizedIpRanges;
            DnsPrefix = dnsPrefix;
            Fqdn = fqdn;
            Id = id;
            KubeAdminConfigRaw = kubeAdminConfigRaw;
            KubeAdminConfigs = kubeAdminConfigs;
            KubeConfigRaw = kubeConfigRaw;
            KubeConfigs = kubeConfigs;
            KubernetesVersion = kubernetesVersion;
            LinuxProfiles = linuxProfiles;
            Location = location;
            Name = name;
            NetworkProfiles = networkProfiles;
            NodeResourceGroup = nodeResourceGroup;
            PrivateFqdn = privateFqdn;
            PrivateLinkEnabled = privateLinkEnabled;
            ResourceGroupName = resourceGroupName;
            RoleBasedAccessControls = roleBasedAccessControls;
            ServicePrincipals = servicePrincipals;
            Tags = tags;
            WindowsProfiles = windowsProfiles;
        }
    }
}
