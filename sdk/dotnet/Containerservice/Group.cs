// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ContainerService
{
    /// <summary>
    /// Manages as an Azure Container Group instance.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/container_group.html.markdown.
    /// </summary>
    public partial class Group : Pulumi.CustomResource
    {
        /// <summary>
        /// The definition of a container that is part of the group as documented in the `container` block below. Changing this forces a new resource to be created.
        /// </summary>
        [Output("containers")]
        public Output<ImmutableArray<Outputs.GroupContainers>> Containers { get; private set; } = null!;

        /// <summary>
        /// A `diagnostics` block as documented below.
        /// </summary>
        [Output("diagnostics")]
        public Output<Outputs.GroupDiagnostics?> Diagnostics { get; private set; } = null!;

        /// <summary>
        /// The DNS label/name for the container groups IP. Changing this forces a new resource to be created.
        /// </summary>
        [Output("dnsNameLabel")]
        public Output<string?> DnsNameLabel { get; private set; } = null!;

        /// <summary>
        /// The FQDN of the container group derived from `dns_name_label`.
        /// </summary>
        [Output("fqdn")]
        public Output<string> Fqdn { get; private set; } = null!;

        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.GroupIdentity> Identity { get; private set; } = null!;

        /// <summary>
        /// A `image_registry_credential` block as documented below. Changing this forces a new resource to be created.
        /// </summary>
        [Output("imageRegistryCredentials")]
        public Output<ImmutableArray<Outputs.GroupImageRegistryCredentials>> ImageRegistryCredentials { get; private set; } = null!;

        /// <summary>
        /// The IP address allocated to the container group.
        /// </summary>
        [Output("ipAddress")]
        public Output<string> IpAddress { get; private set; } = null!;

        /// <summary>
        /// Specifies the ip address type of the container. `Public` or `Private`. Changing this forces a new resource to be created. If set to `Private`, `network_profile_id` also needs to be set.
        /// </summary>
        [Output("ipAddressType")]
        public Output<string?> IpAddressType { get; private set; } = null!;

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the Container Group. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Network profile ID for deploying to virtual network.
        /// </summary>
        [Output("networkProfileId")]
        public Output<string?> NetworkProfileId { get; private set; } = null!;

        /// <summary>
        /// The OS for the container group. Allowed values are `Linux` and `Windows`. Changing this forces a new resource to be created.
        /// </summary>
        [Output("osType")]
        public Output<string> OsType { get; private set; } = null!;

        /// <summary>
        /// The name of the resource group in which to create the Container Group. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// Restart policy for the container group. Allowed values are `Always`, `Never`, `OnFailure`. Defaults to `Always`. Changing this forces a new resource to be created.
        /// </summary>
        [Output("restartPolicy")]
        public Output<string?> RestartPolicy { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource. Changing this forces a new resource to be created.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a Group resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Group(string name, GroupArgs args, CustomResourceOptions? options = null)
            : base("azure:containerservice/group:Group", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private Group(string name, Input<string> id, GroupState? state = null, CustomResourceOptions? options = null)
            : base("azure:containerservice/group:Group", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Group resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Group Get(string name, Input<string> id, GroupState? state = null, CustomResourceOptions? options = null)
        {
            return new Group(name, id, state, options);
        }
    }

    public sealed class GroupArgs : Pulumi.ResourceArgs
    {
        [Input("containers", required: true)]
        private InputList<Inputs.GroupContainersArgs>? _containers;

        /// <summary>
        /// The definition of a container that is part of the group as documented in the `container` block below. Changing this forces a new resource to be created.
        /// </summary>
        public InputList<Inputs.GroupContainersArgs> Containers
        {
            get => _containers ?? (_containers = new InputList<Inputs.GroupContainersArgs>());
            set => _containers = value;
        }

        /// <summary>
        /// A `diagnostics` block as documented below.
        /// </summary>
        [Input("diagnostics")]
        public Input<Inputs.GroupDiagnosticsArgs>? Diagnostics { get; set; }

        /// <summary>
        /// The DNS label/name for the container groups IP. Changing this forces a new resource to be created.
        /// </summary>
        [Input("dnsNameLabel")]
        public Input<string>? DnsNameLabel { get; set; }

        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.GroupIdentityArgs>? Identity { get; set; }

        [Input("imageRegistryCredentials")]
        private InputList<Inputs.GroupImageRegistryCredentialsArgs>? _imageRegistryCredentials;

        /// <summary>
        /// A `image_registry_credential` block as documented below. Changing this forces a new resource to be created.
        /// </summary>
        public InputList<Inputs.GroupImageRegistryCredentialsArgs> ImageRegistryCredentials
        {
            get => _imageRegistryCredentials ?? (_imageRegistryCredentials = new InputList<Inputs.GroupImageRegistryCredentialsArgs>());
            set => _imageRegistryCredentials = value;
        }

        /// <summary>
        /// Specifies the ip address type of the container. `Public` or `Private`. Changing this forces a new resource to be created. If set to `Private`, `network_profile_id` also needs to be set.
        /// </summary>
        [Input("ipAddressType")]
        public Input<string>? IpAddressType { get; set; }

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Specifies the name of the Container Group. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Network profile ID for deploying to virtual network.
        /// </summary>
        [Input("networkProfileId")]
        public Input<string>? NetworkProfileId { get; set; }

        /// <summary>
        /// The OS for the container group. Allowed values are `Linux` and `Windows`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("osType", required: true)]
        public Input<string> OsType { get; set; } = null!;

        /// <summary>
        /// The name of the resource group in which to create the Container Group. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Restart policy for the container group. Allowed values are `Always`, `Never`, `OnFailure`. Defaults to `Always`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("restartPolicy")]
        public Input<string>? RestartPolicy { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource. Changing this forces a new resource to be created.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GroupArgs()
        {
        }
    }

    public sealed class GroupState : Pulumi.ResourceArgs
    {
        [Input("containers")]
        private InputList<Inputs.GroupContainersGetArgs>? _containers;

        /// <summary>
        /// The definition of a container that is part of the group as documented in the `container` block below. Changing this forces a new resource to be created.
        /// </summary>
        public InputList<Inputs.GroupContainersGetArgs> Containers
        {
            get => _containers ?? (_containers = new InputList<Inputs.GroupContainersGetArgs>());
            set => _containers = value;
        }

        /// <summary>
        /// A `diagnostics` block as documented below.
        /// </summary>
        [Input("diagnostics")]
        public Input<Inputs.GroupDiagnosticsGetArgs>? Diagnostics { get; set; }

        /// <summary>
        /// The DNS label/name for the container groups IP. Changing this forces a new resource to be created.
        /// </summary>
        [Input("dnsNameLabel")]
        public Input<string>? DnsNameLabel { get; set; }

        /// <summary>
        /// The FQDN of the container group derived from `dns_name_label`.
        /// </summary>
        [Input("fqdn")]
        public Input<string>? Fqdn { get; set; }

        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.GroupIdentityGetArgs>? Identity { get; set; }

        [Input("imageRegistryCredentials")]
        private InputList<Inputs.GroupImageRegistryCredentialsGetArgs>? _imageRegistryCredentials;

        /// <summary>
        /// A `image_registry_credential` block as documented below. Changing this forces a new resource to be created.
        /// </summary>
        public InputList<Inputs.GroupImageRegistryCredentialsGetArgs> ImageRegistryCredentials
        {
            get => _imageRegistryCredentials ?? (_imageRegistryCredentials = new InputList<Inputs.GroupImageRegistryCredentialsGetArgs>());
            set => _imageRegistryCredentials = value;
        }

        /// <summary>
        /// The IP address allocated to the container group.
        /// </summary>
        [Input("ipAddress")]
        public Input<string>? IpAddress { get; set; }

        /// <summary>
        /// Specifies the ip address type of the container. `Public` or `Private`. Changing this forces a new resource to be created. If set to `Private`, `network_profile_id` also needs to be set.
        /// </summary>
        [Input("ipAddressType")]
        public Input<string>? IpAddressType { get; set; }

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Specifies the name of the Container Group. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Network profile ID for deploying to virtual network.
        /// </summary>
        [Input("networkProfileId")]
        public Input<string>? NetworkProfileId { get; set; }

        /// <summary>
        /// The OS for the container group. Allowed values are `Linux` and `Windows`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("osType")]
        public Input<string>? OsType { get; set; }

        /// <summary>
        /// The name of the resource group in which to create the Container Group. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// Restart policy for the container group. Allowed values are `Always`, `Never`, `OnFailure`. Defaults to `Always`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("restartPolicy")]
        public Input<string>? RestartPolicy { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource. Changing this forces a new resource to be created.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GroupState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class GroupContainersArgs : Pulumi.ResourceArgs
    {
        [Input("commands")]
        private InputList<string>? _commands;
        public InputList<string> Commands
        {
            get => _commands ?? (_commands = new InputList<string>());
            set => _commands = value;
        }

        [Input("cpu", required: true)]
        public Input<double> Cpu { get; set; } = null!;

        [Input("environmentVariables")]
        private InputMap<string>? _environmentVariables;
        public InputMap<string> EnvironmentVariables
        {
            get => _environmentVariables ?? (_environmentVariables = new InputMap<string>());
            set => _environmentVariables = value;
        }

        [Input("gpu")]
        public Input<GroupContainersGpuArgs>? Gpu { get; set; }

        [Input("image", required: true)]
        public Input<string> Image { get; set; } = null!;

        [Input("livenessProbe")]
        public Input<GroupContainersLivenessProbeArgs>? LivenessProbe { get; set; }

        [Input("memory", required: true)]
        public Input<double> Memory { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the Container Group. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("ports")]
        private InputList<GroupContainersPortsArgs>? _ports;
        public InputList<GroupContainersPortsArgs> Ports
        {
            get => _ports ?? (_ports = new InputList<GroupContainersPortsArgs>());
            set => _ports = value;
        }

        [Input("readinessProbe")]
        public Input<GroupContainersReadinessProbeArgs>? ReadinessProbe { get; set; }

        [Input("secureEnvironmentVariables")]
        private InputMap<string>? _secureEnvironmentVariables;
        public InputMap<string> SecureEnvironmentVariables
        {
            get => _secureEnvironmentVariables ?? (_secureEnvironmentVariables = new InputMap<string>());
            set => _secureEnvironmentVariables = value;
        }

        [Input("volumes")]
        private InputList<GroupContainersVolumesArgs>? _volumes;
        public InputList<GroupContainersVolumesArgs> Volumes
        {
            get => _volumes ?? (_volumes = new InputList<GroupContainersVolumesArgs>());
            set => _volumes = value;
        }

        public GroupContainersArgs()
        {
        }
    }

    public sealed class GroupContainersGetArgs : Pulumi.ResourceArgs
    {
        [Input("commands")]
        private InputList<string>? _commands;
        public InputList<string> Commands
        {
            get => _commands ?? (_commands = new InputList<string>());
            set => _commands = value;
        }

        [Input("cpu", required: true)]
        public Input<double> Cpu { get; set; } = null!;

        [Input("environmentVariables")]
        private InputMap<string>? _environmentVariables;
        public InputMap<string> EnvironmentVariables
        {
            get => _environmentVariables ?? (_environmentVariables = new InputMap<string>());
            set => _environmentVariables = value;
        }

        [Input("gpu")]
        public Input<GroupContainersGpuGetArgs>? Gpu { get; set; }

        [Input("image", required: true)]
        public Input<string> Image { get; set; } = null!;

        [Input("livenessProbe")]
        public Input<GroupContainersLivenessProbeGetArgs>? LivenessProbe { get; set; }

        [Input("memory", required: true)]
        public Input<double> Memory { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the Container Group. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("ports")]
        private InputList<GroupContainersPortsGetArgs>? _ports;
        public InputList<GroupContainersPortsGetArgs> Ports
        {
            get => _ports ?? (_ports = new InputList<GroupContainersPortsGetArgs>());
            set => _ports = value;
        }

        [Input("readinessProbe")]
        public Input<GroupContainersReadinessProbeGetArgs>? ReadinessProbe { get; set; }

        [Input("secureEnvironmentVariables")]
        private InputMap<string>? _secureEnvironmentVariables;
        public InputMap<string> SecureEnvironmentVariables
        {
            get => _secureEnvironmentVariables ?? (_secureEnvironmentVariables = new InputMap<string>());
            set => _secureEnvironmentVariables = value;
        }

        [Input("volumes")]
        private InputList<GroupContainersVolumesGetArgs>? _volumes;
        public InputList<GroupContainersVolumesGetArgs> Volumes
        {
            get => _volumes ?? (_volumes = new InputList<GroupContainersVolumesGetArgs>());
            set => _volumes = value;
        }

        public GroupContainersGetArgs()
        {
        }
    }

    public sealed class GroupContainersGpuArgs : Pulumi.ResourceArgs
    {
        [Input("count")]
        public Input<int>? Count { get; set; }

        [Input("sku")]
        public Input<string>? Sku { get; set; }

        public GroupContainersGpuArgs()
        {
        }
    }

    public sealed class GroupContainersGpuGetArgs : Pulumi.ResourceArgs
    {
        [Input("count")]
        public Input<int>? Count { get; set; }

        [Input("sku")]
        public Input<string>? Sku { get; set; }

        public GroupContainersGpuGetArgs()
        {
        }
    }

    public sealed class GroupContainersLivenessProbeArgs : Pulumi.ResourceArgs
    {
        [Input("execs")]
        private InputList<string>? _execs;
        public InputList<string> Execs
        {
            get => _execs ?? (_execs = new InputList<string>());
            set => _execs = value;
        }

        [Input("failureThreshold")]
        public Input<int>? FailureThreshold { get; set; }

        [Input("httpGets")]
        private InputList<GroupContainersLivenessProbeHttpGetsArgs>? _httpGets;
        public InputList<GroupContainersLivenessProbeHttpGetsArgs> HttpGets
        {
            get => _httpGets ?? (_httpGets = new InputList<GroupContainersLivenessProbeHttpGetsArgs>());
            set => _httpGets = value;
        }

        [Input("initialDelaySeconds")]
        public Input<int>? InitialDelaySeconds { get; set; }

        [Input("periodSeconds")]
        public Input<int>? PeriodSeconds { get; set; }

        [Input("successThreshold")]
        public Input<int>? SuccessThreshold { get; set; }

        [Input("timeoutSeconds")]
        public Input<int>? TimeoutSeconds { get; set; }

        public GroupContainersLivenessProbeArgs()
        {
        }
    }

    public sealed class GroupContainersLivenessProbeGetArgs : Pulumi.ResourceArgs
    {
        [Input("execs")]
        private InputList<string>? _execs;
        public InputList<string> Execs
        {
            get => _execs ?? (_execs = new InputList<string>());
            set => _execs = value;
        }

        [Input("failureThreshold")]
        public Input<int>? FailureThreshold { get; set; }

        [Input("httpGets")]
        private InputList<GroupContainersLivenessProbeHttpGetsGetArgs>? _httpGets;
        public InputList<GroupContainersLivenessProbeHttpGetsGetArgs> HttpGets
        {
            get => _httpGets ?? (_httpGets = new InputList<GroupContainersLivenessProbeHttpGetsGetArgs>());
            set => _httpGets = value;
        }

        [Input("initialDelaySeconds")]
        public Input<int>? InitialDelaySeconds { get; set; }

        [Input("periodSeconds")]
        public Input<int>? PeriodSeconds { get; set; }

        [Input("successThreshold")]
        public Input<int>? SuccessThreshold { get; set; }

        [Input("timeoutSeconds")]
        public Input<int>? TimeoutSeconds { get; set; }

        public GroupContainersLivenessProbeGetArgs()
        {
        }
    }

    public sealed class GroupContainersLivenessProbeHttpGetsArgs : Pulumi.ResourceArgs
    {
        [Input("path")]
        public Input<string>? Path { get; set; }

        [Input("port")]
        public Input<int>? Port { get; set; }

        [Input("scheme")]
        public Input<string>? Scheme { get; set; }

        public GroupContainersLivenessProbeHttpGetsArgs()
        {
        }
    }

    public sealed class GroupContainersLivenessProbeHttpGetsGetArgs : Pulumi.ResourceArgs
    {
        [Input("path")]
        public Input<string>? Path { get; set; }

        [Input("port")]
        public Input<int>? Port { get; set; }

        [Input("scheme")]
        public Input<string>? Scheme { get; set; }

        public GroupContainersLivenessProbeHttpGetsGetArgs()
        {
        }
    }

    public sealed class GroupContainersPortsArgs : Pulumi.ResourceArgs
    {
        [Input("port")]
        public Input<int>? Port { get; set; }

        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        public GroupContainersPortsArgs()
        {
        }
    }

    public sealed class GroupContainersPortsGetArgs : Pulumi.ResourceArgs
    {
        [Input("port")]
        public Input<int>? Port { get; set; }

        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        public GroupContainersPortsGetArgs()
        {
        }
    }

    public sealed class GroupContainersReadinessProbeArgs : Pulumi.ResourceArgs
    {
        [Input("execs")]
        private InputList<string>? _execs;
        public InputList<string> Execs
        {
            get => _execs ?? (_execs = new InputList<string>());
            set => _execs = value;
        }

        [Input("failureThreshold")]
        public Input<int>? FailureThreshold { get; set; }

        [Input("httpGets")]
        private InputList<GroupContainersReadinessProbeHttpGetsArgs>? _httpGets;
        public InputList<GroupContainersReadinessProbeHttpGetsArgs> HttpGets
        {
            get => _httpGets ?? (_httpGets = new InputList<GroupContainersReadinessProbeHttpGetsArgs>());
            set => _httpGets = value;
        }

        [Input("initialDelaySeconds")]
        public Input<int>? InitialDelaySeconds { get; set; }

        [Input("periodSeconds")]
        public Input<int>? PeriodSeconds { get; set; }

        [Input("successThreshold")]
        public Input<int>? SuccessThreshold { get; set; }

        [Input("timeoutSeconds")]
        public Input<int>? TimeoutSeconds { get; set; }

        public GroupContainersReadinessProbeArgs()
        {
        }
    }

    public sealed class GroupContainersReadinessProbeGetArgs : Pulumi.ResourceArgs
    {
        [Input("execs")]
        private InputList<string>? _execs;
        public InputList<string> Execs
        {
            get => _execs ?? (_execs = new InputList<string>());
            set => _execs = value;
        }

        [Input("failureThreshold")]
        public Input<int>? FailureThreshold { get; set; }

        [Input("httpGets")]
        private InputList<GroupContainersReadinessProbeHttpGetsGetArgs>? _httpGets;
        public InputList<GroupContainersReadinessProbeHttpGetsGetArgs> HttpGets
        {
            get => _httpGets ?? (_httpGets = new InputList<GroupContainersReadinessProbeHttpGetsGetArgs>());
            set => _httpGets = value;
        }

        [Input("initialDelaySeconds")]
        public Input<int>? InitialDelaySeconds { get; set; }

        [Input("periodSeconds")]
        public Input<int>? PeriodSeconds { get; set; }

        [Input("successThreshold")]
        public Input<int>? SuccessThreshold { get; set; }

        [Input("timeoutSeconds")]
        public Input<int>? TimeoutSeconds { get; set; }

        public GroupContainersReadinessProbeGetArgs()
        {
        }
    }

    public sealed class GroupContainersReadinessProbeHttpGetsArgs : Pulumi.ResourceArgs
    {
        [Input("path")]
        public Input<string>? Path { get; set; }

        [Input("port")]
        public Input<int>? Port { get; set; }

        [Input("scheme")]
        public Input<string>? Scheme { get; set; }

        public GroupContainersReadinessProbeHttpGetsArgs()
        {
        }
    }

    public sealed class GroupContainersReadinessProbeHttpGetsGetArgs : Pulumi.ResourceArgs
    {
        [Input("path")]
        public Input<string>? Path { get; set; }

        [Input("port")]
        public Input<int>? Port { get; set; }

        [Input("scheme")]
        public Input<string>? Scheme { get; set; }

        public GroupContainersReadinessProbeHttpGetsGetArgs()
        {
        }
    }

    public sealed class GroupContainersVolumesArgs : Pulumi.ResourceArgs
    {
        [Input("mountPath", required: true)]
        public Input<string> MountPath { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the Container Group. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("readOnly")]
        public Input<bool>? ReadOnly { get; set; }

        [Input("shareName", required: true)]
        public Input<string> ShareName { get; set; } = null!;

        [Input("storageAccountKey", required: true)]
        public Input<string> StorageAccountKey { get; set; } = null!;

        [Input("storageAccountName", required: true)]
        public Input<string> StorageAccountName { get; set; } = null!;

        public GroupContainersVolumesArgs()
        {
        }
    }

    public sealed class GroupContainersVolumesGetArgs : Pulumi.ResourceArgs
    {
        [Input("mountPath", required: true)]
        public Input<string> MountPath { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the Container Group. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("readOnly")]
        public Input<bool>? ReadOnly { get; set; }

        [Input("shareName", required: true)]
        public Input<string> ShareName { get; set; } = null!;

        [Input("storageAccountKey", required: true)]
        public Input<string> StorageAccountKey { get; set; } = null!;

        [Input("storageAccountName", required: true)]
        public Input<string> StorageAccountName { get; set; } = null!;

        public GroupContainersVolumesGetArgs()
        {
        }
    }

    public sealed class GroupDiagnosticsArgs : Pulumi.ResourceArgs
    {
        [Input("logAnalytics", required: true)]
        public Input<GroupDiagnosticsLogAnalyticsArgs> LogAnalytics { get; set; } = null!;

        public GroupDiagnosticsArgs()
        {
        }
    }

    public sealed class GroupDiagnosticsGetArgs : Pulumi.ResourceArgs
    {
        [Input("logAnalytics", required: true)]
        public Input<GroupDiagnosticsLogAnalyticsGetArgs> LogAnalytics { get; set; } = null!;

        public GroupDiagnosticsGetArgs()
        {
        }
    }

    public sealed class GroupDiagnosticsLogAnalyticsArgs : Pulumi.ResourceArgs
    {
        [Input("logType")]
        public Input<string>? LogType { get; set; }

        [Input("metadata")]
        private InputMap<string>? _metadata;
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        [Input("workspaceId", required: true)]
        public Input<string> WorkspaceId { get; set; } = null!;

        [Input("workspaceKey", required: true)]
        public Input<string> WorkspaceKey { get; set; } = null!;

        public GroupDiagnosticsLogAnalyticsArgs()
        {
        }
    }

    public sealed class GroupDiagnosticsLogAnalyticsGetArgs : Pulumi.ResourceArgs
    {
        [Input("logType")]
        public Input<string>? LogType { get; set; }

        [Input("metadata")]
        private InputMap<string>? _metadata;
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        [Input("workspaceId", required: true)]
        public Input<string> WorkspaceId { get; set; } = null!;

        [Input("workspaceKey", required: true)]
        public Input<string> WorkspaceKey { get; set; } = null!;

        public GroupDiagnosticsLogAnalyticsGetArgs()
        {
        }
    }

    public sealed class GroupIdentityArgs : Pulumi.ResourceArgs
    {
        [Input("identityIds")]
        private InputList<string>? _identityIds;
        public InputList<string> IdentityIds
        {
            get => _identityIds ?? (_identityIds = new InputList<string>());
            set => _identityIds = value;
        }

        [Input("principalId")]
        public Input<string>? PrincipalId { get; set; }

        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public GroupIdentityArgs()
        {
        }
    }

    public sealed class GroupIdentityGetArgs : Pulumi.ResourceArgs
    {
        [Input("identityIds")]
        private InputList<string>? _identityIds;
        public InputList<string> IdentityIds
        {
            get => _identityIds ?? (_identityIds = new InputList<string>());
            set => _identityIds = value;
        }

        [Input("principalId")]
        public Input<string>? PrincipalId { get; set; }

        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public GroupIdentityGetArgs()
        {
        }
    }

    public sealed class GroupImageRegistryCredentialsArgs : Pulumi.ResourceArgs
    {
        [Input("password", required: true)]
        public Input<string> Password { get; set; } = null!;

        [Input("server", required: true)]
        public Input<string> Server { get; set; } = null!;

        [Input("username", required: true)]
        public Input<string> Username { get; set; } = null!;

        public GroupImageRegistryCredentialsArgs()
        {
        }
    }

    public sealed class GroupImageRegistryCredentialsGetArgs : Pulumi.ResourceArgs
    {
        [Input("password", required: true)]
        public Input<string> Password { get; set; } = null!;

        [Input("server", required: true)]
        public Input<string> Server { get; set; } = null!;

        [Input("username", required: true)]
        public Input<string> Username { get; set; } = null!;

        public GroupImageRegistryCredentialsGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class GroupContainers
    {
        public readonly ImmutableArray<string> Commands;
        public readonly double Cpu;
        public readonly ImmutableDictionary<string, string>? EnvironmentVariables;
        public readonly GroupContainersGpu? Gpu;
        public readonly string Image;
        public readonly GroupContainersLivenessProbe? LivenessProbe;
        public readonly double Memory;
        /// <summary>
        /// Specifies the name of the Container Group. Changing this forces a new resource to be created.
        /// </summary>
        public readonly string Name;
        public readonly ImmutableArray<GroupContainersPorts> Ports;
        public readonly GroupContainersReadinessProbe? ReadinessProbe;
        public readonly ImmutableDictionary<string, string>? SecureEnvironmentVariables;
        public readonly ImmutableArray<GroupContainersVolumes> Volumes;

        [OutputConstructor]
        private GroupContainers(
            ImmutableArray<string> commands,
            double cpu,
            ImmutableDictionary<string, string>? environmentVariables,
            GroupContainersGpu? gpu,
            string image,
            GroupContainersLivenessProbe? livenessProbe,
            double memory,
            string name,
            ImmutableArray<GroupContainersPorts> ports,
            GroupContainersReadinessProbe? readinessProbe,
            ImmutableDictionary<string, string>? secureEnvironmentVariables,
            ImmutableArray<GroupContainersVolumes> volumes)
        {
            Commands = commands;
            Cpu = cpu;
            EnvironmentVariables = environmentVariables;
            Gpu = gpu;
            Image = image;
            LivenessProbe = livenessProbe;
            Memory = memory;
            Name = name;
            Ports = ports;
            ReadinessProbe = readinessProbe;
            SecureEnvironmentVariables = secureEnvironmentVariables;
            Volumes = volumes;
        }
    }

    [OutputType]
    public sealed class GroupContainersGpu
    {
        public readonly int? Count;
        public readonly string? Sku;

        [OutputConstructor]
        private GroupContainersGpu(
            int? count,
            string? sku)
        {
            Count = count;
            Sku = sku;
        }
    }

    [OutputType]
    public sealed class GroupContainersLivenessProbe
    {
        public readonly ImmutableArray<string> Execs;
        public readonly int? FailureThreshold;
        public readonly ImmutableArray<GroupContainersLivenessProbeHttpGets> HttpGets;
        public readonly int? InitialDelaySeconds;
        public readonly int? PeriodSeconds;
        public readonly int? SuccessThreshold;
        public readonly int? TimeoutSeconds;

        [OutputConstructor]
        private GroupContainersLivenessProbe(
            ImmutableArray<string> execs,
            int? failureThreshold,
            ImmutableArray<GroupContainersLivenessProbeHttpGets> httpGets,
            int? initialDelaySeconds,
            int? periodSeconds,
            int? successThreshold,
            int? timeoutSeconds)
        {
            Execs = execs;
            FailureThreshold = failureThreshold;
            HttpGets = httpGets;
            InitialDelaySeconds = initialDelaySeconds;
            PeriodSeconds = periodSeconds;
            SuccessThreshold = successThreshold;
            TimeoutSeconds = timeoutSeconds;
        }
    }

    [OutputType]
    public sealed class GroupContainersLivenessProbeHttpGets
    {
        public readonly string? Path;
        public readonly int? Port;
        public readonly string? Scheme;

        [OutputConstructor]
        private GroupContainersLivenessProbeHttpGets(
            string? path,
            int? port,
            string? scheme)
        {
            Path = path;
            Port = port;
            Scheme = scheme;
        }
    }

    [OutputType]
    public sealed class GroupContainersPorts
    {
        public readonly int? Port;
        public readonly string? Protocol;

        [OutputConstructor]
        private GroupContainersPorts(
            int? port,
            string? protocol)
        {
            Port = port;
            Protocol = protocol;
        }
    }

    [OutputType]
    public sealed class GroupContainersReadinessProbe
    {
        public readonly ImmutableArray<string> Execs;
        public readonly int? FailureThreshold;
        public readonly ImmutableArray<GroupContainersReadinessProbeHttpGets> HttpGets;
        public readonly int? InitialDelaySeconds;
        public readonly int? PeriodSeconds;
        public readonly int? SuccessThreshold;
        public readonly int? TimeoutSeconds;

        [OutputConstructor]
        private GroupContainersReadinessProbe(
            ImmutableArray<string> execs,
            int? failureThreshold,
            ImmutableArray<GroupContainersReadinessProbeHttpGets> httpGets,
            int? initialDelaySeconds,
            int? periodSeconds,
            int? successThreshold,
            int? timeoutSeconds)
        {
            Execs = execs;
            FailureThreshold = failureThreshold;
            HttpGets = httpGets;
            InitialDelaySeconds = initialDelaySeconds;
            PeriodSeconds = periodSeconds;
            SuccessThreshold = successThreshold;
            TimeoutSeconds = timeoutSeconds;
        }
    }

    [OutputType]
    public sealed class GroupContainersReadinessProbeHttpGets
    {
        public readonly string? Path;
        public readonly int? Port;
        public readonly string? Scheme;

        [OutputConstructor]
        private GroupContainersReadinessProbeHttpGets(
            string? path,
            int? port,
            string? scheme)
        {
            Path = path;
            Port = port;
            Scheme = scheme;
        }
    }

    [OutputType]
    public sealed class GroupContainersVolumes
    {
        public readonly string MountPath;
        /// <summary>
        /// Specifies the name of the Container Group. Changing this forces a new resource to be created.
        /// </summary>
        public readonly string Name;
        public readonly bool? ReadOnly;
        public readonly string ShareName;
        public readonly string StorageAccountKey;
        public readonly string StorageAccountName;

        [OutputConstructor]
        private GroupContainersVolumes(
            string mountPath,
            string name,
            bool? readOnly,
            string shareName,
            string storageAccountKey,
            string storageAccountName)
        {
            MountPath = mountPath;
            Name = name;
            ReadOnly = readOnly;
            ShareName = shareName;
            StorageAccountKey = storageAccountKey;
            StorageAccountName = storageAccountName;
        }
    }

    [OutputType]
    public sealed class GroupDiagnostics
    {
        public readonly GroupDiagnosticsLogAnalytics LogAnalytics;

        [OutputConstructor]
        private GroupDiagnostics(GroupDiagnosticsLogAnalytics logAnalytics)
        {
            LogAnalytics = logAnalytics;
        }
    }

    [OutputType]
    public sealed class GroupDiagnosticsLogAnalytics
    {
        public readonly string? LogType;
        public readonly ImmutableDictionary<string, string>? Metadata;
        public readonly string WorkspaceId;
        public readonly string WorkspaceKey;

        [OutputConstructor]
        private GroupDiagnosticsLogAnalytics(
            string? logType,
            ImmutableDictionary<string, string>? metadata,
            string workspaceId,
            string workspaceKey)
        {
            LogType = logType;
            Metadata = metadata;
            WorkspaceId = workspaceId;
            WorkspaceKey = workspaceKey;
        }
    }

    [OutputType]
    public sealed class GroupIdentity
    {
        public readonly ImmutableArray<string> IdentityIds;
        public readonly string PrincipalId;
        public readonly string Type;

        [OutputConstructor]
        private GroupIdentity(
            ImmutableArray<string> identityIds,
            string principalId,
            string type)
        {
            IdentityIds = identityIds;
            PrincipalId = principalId;
            Type = type;
        }
    }

    [OutputType]
    public sealed class GroupImageRegistryCredentials
    {
        public readonly string Password;
        public readonly string Server;
        public readonly string Username;

        [OutputConstructor]
        private GroupImageRegistryCredentials(
            string password,
            string server,
            string username)
        {
            Password = password;
            Server = server;
            Username = username;
        }
    }
    }
}
