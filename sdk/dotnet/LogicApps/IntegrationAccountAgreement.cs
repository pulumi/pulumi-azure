// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.LogicApps
{
    /// <summary>
    /// Manages a Logic App Integration Account Agreement.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.IO;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var testIntegrationAccount = new Azure.LogicApps.IntegrationAccount("testIntegrationAccount", new()
    ///     {
    ///         Location = example.Location,
    ///         ResourceGroupName = example.Name,
    ///         SkuName = "Standard",
    ///     });
    /// 
    ///     var host = new Azure.LogicApps.IntegrationAccountPartner("host", new()
    ///     {
    ///         ResourceGroupName = example.Name,
    ///         IntegrationAccountName = testIntegrationAccount.Name,
    ///         BusinessIdentities = new[]
    ///         {
    ///             new Azure.LogicApps.Inputs.IntegrationAccountPartnerBusinessIdentityArgs
    ///             {
    ///                 Qualifier = "AS2Identity",
    ///                 Value = "FabrikamNY",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var guest = new Azure.LogicApps.IntegrationAccountPartner("guest", new()
    ///     {
    ///         ResourceGroupName = example.Name,
    ///         IntegrationAccountName = testIntegrationAccount.Name,
    ///         BusinessIdentities = new[]
    ///         {
    ///             new Azure.LogicApps.Inputs.IntegrationAccountPartnerBusinessIdentityArgs
    ///             {
    ///                 Qualifier = "AS2Identity",
    ///                 Value = "FabrikamDC",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var testIntegrationAccountAgreement = new Azure.LogicApps.IntegrationAccountAgreement("testIntegrationAccountAgreement", new()
    ///     {
    ///         ResourceGroupName = example.Name,
    ///         IntegrationAccountName = testIntegrationAccount.Name,
    ///         AgreementType = "AS2",
    ///         HostPartnerName = host.Name,
    ///         GuestPartnerName = guest.Name,
    ///         Content = File.ReadAllText("testdata/integration_account_agreement_content_as2.json"),
    ///         HostIdentity = new Azure.LogicApps.Inputs.IntegrationAccountAgreementHostIdentityArgs
    ///         {
    ///             Qualifier = "AS2Identity",
    ///             Value = "FabrikamNY",
    ///         },
    ///         GuestIdentity = new Azure.LogicApps.Inputs.IntegrationAccountAgreementGuestIdentityArgs
    ///         {
    ///             Qualifier = "AS2Identity",
    ///             Value = "FabrikamDC",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Logic App Integration Account Agreements can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:logicapps/integrationAccountAgreement:IntegrationAccountAgreement example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Logic/integrationAccounts/account1/agreements/agreement1
    /// ```
    /// </summary>
    [AzureResourceType("azure:logicapps/integrationAccountAgreement:IntegrationAccountAgreement")]
    public partial class IntegrationAccountAgreement : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The type of the Logic App Integration Account Agreement. Possible values are `AS2`, `X12` and `Edifact`.
        /// </summary>
        [Output("agreementType")]
        public Output<string> AgreementType { get; private set; } = null!;

        /// <summary>
        /// The content of the Logic App Integration Account Agreement.
        /// </summary>
        [Output("content")]
        public Output<string> Content { get; private set; } = null!;

        /// <summary>
        /// A `guest_identity` block as documented below.
        /// </summary>
        [Output("guestIdentity")]
        public Output<Outputs.IntegrationAccountAgreementGuestIdentity> GuestIdentity { get; private set; } = null!;

        /// <summary>
        /// The name of the guest Logic App Integration Account Partner.
        /// </summary>
        [Output("guestPartnerName")]
        public Output<string> GuestPartnerName { get; private set; } = null!;

        /// <summary>
        /// A `host_identity` block as documented below.
        /// </summary>
        [Output("hostIdentity")]
        public Output<Outputs.IntegrationAccountAgreementHostIdentity> HostIdentity { get; private set; } = null!;

        /// <summary>
        /// The name of the host Logic App Integration Account Partner.
        /// </summary>
        [Output("hostPartnerName")]
        public Output<string> HostPartnerName { get; private set; } = null!;

        /// <summary>
        /// The name of the Logic App Integration Account. Changing this forces a new resource to be created.
        /// </summary>
        [Output("integrationAccountName")]
        public Output<string> IntegrationAccountName { get; private set; } = null!;

        /// <summary>
        /// The metadata of the Logic App Integration Account Agreement.
        /// </summary>
        [Output("metadata")]
        public Output<ImmutableDictionary<string, string>?> Metadata { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Logic App Integration Account Agreement. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Logic App Integration Account Agreement should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;


        /// <summary>
        /// Create a IntegrationAccountAgreement resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IntegrationAccountAgreement(string name, IntegrationAccountAgreementArgs args, CustomResourceOptions? options = null)
            : base("azure:logicapps/integrationAccountAgreement:IntegrationAccountAgreement", name, args ?? new IntegrationAccountAgreementArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IntegrationAccountAgreement(string name, Input<string> id, IntegrationAccountAgreementState? state = null, CustomResourceOptions? options = null)
            : base("azure:logicapps/integrationAccountAgreement:IntegrationAccountAgreement", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IntegrationAccountAgreement resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IntegrationAccountAgreement Get(string name, Input<string> id, IntegrationAccountAgreementState? state = null, CustomResourceOptions? options = null)
        {
            return new IntegrationAccountAgreement(name, id, state, options);
        }
    }

    public sealed class IntegrationAccountAgreementArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The type of the Logic App Integration Account Agreement. Possible values are `AS2`, `X12` and `Edifact`.
        /// </summary>
        [Input("agreementType", required: true)]
        public Input<string> AgreementType { get; set; } = null!;

        /// <summary>
        /// The content of the Logic App Integration Account Agreement.
        /// </summary>
        [Input("content", required: true)]
        public Input<string> Content { get; set; } = null!;

        /// <summary>
        /// A `guest_identity` block as documented below.
        /// </summary>
        [Input("guestIdentity", required: true)]
        public Input<Inputs.IntegrationAccountAgreementGuestIdentityArgs> GuestIdentity { get; set; } = null!;

        /// <summary>
        /// The name of the guest Logic App Integration Account Partner.
        /// </summary>
        [Input("guestPartnerName", required: true)]
        public Input<string> GuestPartnerName { get; set; } = null!;

        /// <summary>
        /// A `host_identity` block as documented below.
        /// </summary>
        [Input("hostIdentity", required: true)]
        public Input<Inputs.IntegrationAccountAgreementHostIdentityArgs> HostIdentity { get; set; } = null!;

        /// <summary>
        /// The name of the host Logic App Integration Account Partner.
        /// </summary>
        [Input("hostPartnerName", required: true)]
        public Input<string> HostPartnerName { get; set; } = null!;

        /// <summary>
        /// The name of the Logic App Integration Account. Changing this forces a new resource to be created.
        /// </summary>
        [Input("integrationAccountName", required: true)]
        public Input<string> IntegrationAccountName { get; set; } = null!;

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// The metadata of the Logic App Integration Account Agreement.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// The name which should be used for this Logic App Integration Account Agreement. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Logic App Integration Account Agreement should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public IntegrationAccountAgreementArgs()
        {
        }
        public static new IntegrationAccountAgreementArgs Empty => new IntegrationAccountAgreementArgs();
    }

    public sealed class IntegrationAccountAgreementState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The type of the Logic App Integration Account Agreement. Possible values are `AS2`, `X12` and `Edifact`.
        /// </summary>
        [Input("agreementType")]
        public Input<string>? AgreementType { get; set; }

        /// <summary>
        /// The content of the Logic App Integration Account Agreement.
        /// </summary>
        [Input("content")]
        public Input<string>? Content { get; set; }

        /// <summary>
        /// A `guest_identity` block as documented below.
        /// </summary>
        [Input("guestIdentity")]
        public Input<Inputs.IntegrationAccountAgreementGuestIdentityGetArgs>? GuestIdentity { get; set; }

        /// <summary>
        /// The name of the guest Logic App Integration Account Partner.
        /// </summary>
        [Input("guestPartnerName")]
        public Input<string>? GuestPartnerName { get; set; }

        /// <summary>
        /// A `host_identity` block as documented below.
        /// </summary>
        [Input("hostIdentity")]
        public Input<Inputs.IntegrationAccountAgreementHostIdentityGetArgs>? HostIdentity { get; set; }

        /// <summary>
        /// The name of the host Logic App Integration Account Partner.
        /// </summary>
        [Input("hostPartnerName")]
        public Input<string>? HostPartnerName { get; set; }

        /// <summary>
        /// The name of the Logic App Integration Account. Changing this forces a new resource to be created.
        /// </summary>
        [Input("integrationAccountName")]
        public Input<string>? IntegrationAccountName { get; set; }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// The metadata of the Logic App Integration Account Agreement.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// The name which should be used for this Logic App Integration Account Agreement. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Logic App Integration Account Agreement should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        public IntegrationAccountAgreementState()
        {
        }
        public static new IntegrationAccountAgreementState Empty => new IntegrationAccountAgreementState();
    }
}
