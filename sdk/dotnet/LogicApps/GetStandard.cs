// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.LogicApps
{
    public static class GetStandard
    {
        /// <summary>
        /// Use this data source to access information about an existing Logic App Standard instance.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Azure.LogicApps.GetStandard.InvokeAsync(new Azure.LogicApps.GetStandardArgs
        ///         {
        ///             Name = "logicappstd",
        ///             ResourceGroupName = "example-rg",
        ///         }));
        ///         this.Id = example.Apply(example =&gt; example.Id);
        ///     }
        /// 
        ///     [Output("id")]
        ///     public Output&lt;string&gt; Id { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetStandardResult> InvokeAsync(GetStandardArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetStandardResult>("azure:logicapps/getStandard:getStandard", args ?? new GetStandardArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Logic App Standard instance.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Azure.LogicApps.GetStandard.InvokeAsync(new Azure.LogicApps.GetStandardArgs
        ///         {
        ///             Name = "logicappstd",
        ///             ResourceGroupName = "example-rg",
        ///         }));
        ///         this.Id = example.Apply(example =&gt; example.Id);
        ///     }
        /// 
        ///     [Output("id")]
        ///     public Output&lt;string&gt; Id { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetStandardResult> Invoke(GetStandardInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetStandardResult>("azure:logicapps/getStandard:getStandard", args ?? new GetStandardInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetStandardArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of this Logic App.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Logic App exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        [Input("siteConfig")]
        public Inputs.GetStandardSiteConfigArgs? SiteConfig { get; set; }

        [Input("tags")]
        private Dictionary<string, string>? _tags;
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetStandardArgs()
        {
        }
    }

    public sealed class GetStandardInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of this Logic App.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Logic App exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("siteConfig")]
        public Input<Inputs.GetStandardSiteConfigInputArgs>? SiteConfig { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetStandardInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetStandardResult
    {
        public readonly string AppServicePlanId;
        public readonly ImmutableDictionary<string, string> AppSettings;
        public readonly string BundleVersion;
        public readonly bool ClientAffinityEnabled;
        public readonly string ClientCertificateMode;
        public readonly ImmutableArray<Outputs.GetStandardConnectionStringResult> ConnectionStrings;
        public readonly string CustomDomainVerificationId;
        public readonly string DefaultHostname;
        public readonly bool Enabled;
        public readonly bool HttpsOnly;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetStandardIdentityResult> Identities;
        public readonly string Kind;
        /// <summary>
        /// The Azure location where the Logic App Standard exists.
        /// </summary>
        public readonly string Location;
        public readonly string Name;
        public readonly string OutboundIpAddresses;
        public readonly string PossibleOutboundIpAddresses;
        public readonly string ResourceGroupName;
        public readonly Outputs.GetStandardSiteConfigResult SiteConfig;
        public readonly ImmutableArray<Outputs.GetStandardSiteCredentialResult> SiteCredentials;
        public readonly string StorageAccountAccessKey;
        public readonly string StorageAccountName;
        public readonly string StorageAccountShareName;
        public readonly ImmutableDictionary<string, string>? Tags;
        public readonly bool UseExtensionBundle;
        public readonly string Version;

        [OutputConstructor]
        private GetStandardResult(
            string appServicePlanId,

            ImmutableDictionary<string, string> appSettings,

            string bundleVersion,

            bool clientAffinityEnabled,

            string clientCertificateMode,

            ImmutableArray<Outputs.GetStandardConnectionStringResult> connectionStrings,

            string customDomainVerificationId,

            string defaultHostname,

            bool enabled,

            bool httpsOnly,

            string id,

            ImmutableArray<Outputs.GetStandardIdentityResult> identities,

            string kind,

            string location,

            string name,

            string outboundIpAddresses,

            string possibleOutboundIpAddresses,

            string resourceGroupName,

            Outputs.GetStandardSiteConfigResult siteConfig,

            ImmutableArray<Outputs.GetStandardSiteCredentialResult> siteCredentials,

            string storageAccountAccessKey,

            string storageAccountName,

            string storageAccountShareName,

            ImmutableDictionary<string, string>? tags,

            bool useExtensionBundle,

            string version)
        {
            AppServicePlanId = appServicePlanId;
            AppSettings = appSettings;
            BundleVersion = bundleVersion;
            ClientAffinityEnabled = clientAffinityEnabled;
            ClientCertificateMode = clientCertificateMode;
            ConnectionStrings = connectionStrings;
            CustomDomainVerificationId = customDomainVerificationId;
            DefaultHostname = defaultHostname;
            Enabled = enabled;
            HttpsOnly = httpsOnly;
            Id = id;
            Identities = identities;
            Kind = kind;
            Location = location;
            Name = name;
            OutboundIpAddresses = outboundIpAddresses;
            PossibleOutboundIpAddresses = possibleOutboundIpAddresses;
            ResourceGroupName = resourceGroupName;
            SiteConfig = siteConfig;
            SiteCredentials = siteCredentials;
            StorageAccountAccessKey = storageAccountAccessKey;
            StorageAccountName = storageAccountName;
            StorageAccountShareName = storageAccountShareName;
            Tags = tags;
            UseExtensionBundle = useExtensionBundle;
            Version = version;
        }
    }
}
