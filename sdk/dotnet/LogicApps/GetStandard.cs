// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.LogicApps
{
    public static class GetStandard
    {
        /// <summary>
        /// Use this data source to access information about an existing Logic App Standard instance.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.LogicApps.GetStandard.Invoke(new()
        ///     {
        ///         Name = "example-logic-app",
        ///         ResourceGroupName = "example-rg",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getStandardResult =&gt; getStandardResult.Id),
        ///     };
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Microsoft.Web`: 2023-12-01
        /// </summary>
        public static Task<GetStandardResult> InvokeAsync(GetStandardArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetStandardResult>("azure:logicapps/getStandard:getStandard", args ?? new GetStandardArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Logic App Standard instance.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.LogicApps.GetStandard.Invoke(new()
        ///     {
        ///         Name = "example-logic-app",
        ///         ResourceGroupName = "example-rg",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getStandardResult =&gt; getStandardResult.Id),
        ///     };
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Microsoft.Web`: 2023-12-01
        /// </summary>
        public static Output<GetStandardResult> Invoke(GetStandardInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetStandardResult>("azure:logicapps/getStandard:getStandard", args ?? new GetStandardInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Logic App Standard instance.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.LogicApps.GetStandard.Invoke(new()
        ///     {
        ///         Name = "example-logic-app",
        ///         ResourceGroupName = "example-rg",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getStandardResult =&gt; getStandardResult.Id),
        ///     };
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Microsoft.Web`: 2023-12-01
        /// </summary>
        public static Output<GetStandardResult> Invoke(GetStandardInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetStandardResult>("azure:logicapps/getStandard:getStandard", args ?? new GetStandardInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetStandardArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Logic App.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Logic App exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// A `site_config` object as defined below.
        /// </summary>
        [Input("siteConfig")]
        public Inputs.GetStandardSiteConfigArgs? SiteConfig { get; set; }

        public GetStandardArgs()
        {
        }
        public static new GetStandardArgs Empty => new GetStandardArgs();
    }

    public sealed class GetStandardInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Logic App.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Logic App exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// A `site_config` object as defined below.
        /// </summary>
        [Input("siteConfig")]
        public Input<Inputs.GetStandardSiteConfigInputArgs>? SiteConfig { get; set; }

        public GetStandardInvokeArgs()
        {
        }
        public static new GetStandardInvokeArgs Empty => new GetStandardInvokeArgs();
    }


    [OutputType]
    public sealed class GetStandardResult
    {
        /// <summary>
        /// The ID of the App Service Plan.
        /// </summary>
        public readonly string AppServicePlanId;
        /// <summary>
        /// A map of key-value pairs for [App Settings](https://docs.microsoft.com/azure/azure-functions/functions-app-settings) and custom values.
        /// </summary>
        public readonly ImmutableDictionary<string, string> AppSettings;
        /// <summary>
        /// Controls the allowed range for bundle versions.
        /// </summary>
        public readonly string BundleVersion;
        /// <summary>
        /// Should the Logic App send session affinity cookies, which route client requests in the same session to the same instance.
        /// </summary>
        public readonly bool ClientAffinityEnabled;
        /// <summary>
        /// The mode of the Logic App's client certificates requirement for incoming requests.
        /// </summary>
        public readonly string ClientCertificateMode;
        /// <summary>
        /// A `connection_string` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetStandardConnectionStringResult> ConnectionStrings;
        /// <summary>
        /// The custom domain verification of the Logic App.
        /// </summary>
        public readonly string CustomDomainVerificationId;
        /// <summary>
        /// The default hostname of the Logic App.
        /// </summary>
        public readonly string DefaultHostname;
        /// <summary>
        /// Whether the Logic App is enabled.
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// Whether the default FTP basic authentication publishing profile is enabled.
        /// </summary>
        public readonly bool FtpPublishBasicAuthenticationEnabled;
        /// <summary>
        /// Whether the Logic App can only be accessed via HTTPS.
        /// </summary>
        public readonly bool HttpsOnly;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetStandardIdentityResult> Identities;
        /// <summary>
        /// The kind of the Logic App.
        /// </summary>
        public readonly string Kind;
        /// <summary>
        /// The Azure location where the Logic App Standard exists.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name for this IP Restriction.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The outbound IP addresses of the Logic App.
        /// </summary>
        public readonly string OutboundIpAddresses;
        /// <summary>
        /// The possible outbound IP addresses of the Logic App.
        /// </summary>
        public readonly string PossibleOutboundIpAddresses;
        /// <summary>
        /// Whether Public Network Access should be enabled or not.
        /// </summary>
        public readonly string PublicNetworkAccess;
        public readonly string ResourceGroupName;
        /// <summary>
        /// Whether the default SCM basic authentication publishing profile is enabled.
        /// </summary>
        public readonly bool ScmPublishBasicAuthenticationEnabled;
        /// <summary>
        /// A `site_config` object as defined below.
        /// </summary>
        public readonly Outputs.GetStandardSiteConfigResult SiteConfig;
        /// <summary>
        /// A `site_credential` block as defined below, which contains the site-level credentials used to publish to this Logic App.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetStandardSiteCredentialResult> SiteCredentials;
        /// <summary>
        /// The access key which will be used to access the backend storage account for the Logic App.
        /// </summary>
        public readonly string StorageAccountAccessKey;
        /// <summary>
        /// The backend storage account name which will be used by this Logic App (e.g. for Stateful workflows data).
        /// </summary>
        public readonly string StorageAccountName;
        /// <summary>
        /// The name of the share used by the logic app.
        /// </summary>
        public readonly string StorageAccountShareName;
        /// <summary>
        /// A mapping of tags assigned to the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// Whether the logic app should use the bundled extension package.
        /// </summary>
        public readonly bool UseExtensionBundle;
        /// <summary>
        /// The runtime version associated with the Logic App.
        /// </summary>
        public readonly string Version;
        /// <summary>
        /// The Virtual Network Subnet ID used for this IP Restriction.
        /// </summary>
        public readonly string VirtualNetworkSubnetId;

        [OutputConstructor]
        private GetStandardResult(
            string appServicePlanId,

            ImmutableDictionary<string, string> appSettings,

            string bundleVersion,

            bool clientAffinityEnabled,

            string clientCertificateMode,

            ImmutableArray<Outputs.GetStandardConnectionStringResult> connectionStrings,

            string customDomainVerificationId,

            string defaultHostname,

            bool enabled,

            bool ftpPublishBasicAuthenticationEnabled,

            bool httpsOnly,

            string id,

            ImmutableArray<Outputs.GetStandardIdentityResult> identities,

            string kind,

            string location,

            string name,

            string outboundIpAddresses,

            string possibleOutboundIpAddresses,

            string publicNetworkAccess,

            string resourceGroupName,

            bool scmPublishBasicAuthenticationEnabled,

            Outputs.GetStandardSiteConfigResult siteConfig,

            ImmutableArray<Outputs.GetStandardSiteCredentialResult> siteCredentials,

            string storageAccountAccessKey,

            string storageAccountName,

            string storageAccountShareName,

            ImmutableDictionary<string, string> tags,

            bool useExtensionBundle,

            string version,

            string virtualNetworkSubnetId)
        {
            AppServicePlanId = appServicePlanId;
            AppSettings = appSettings;
            BundleVersion = bundleVersion;
            ClientAffinityEnabled = clientAffinityEnabled;
            ClientCertificateMode = clientCertificateMode;
            ConnectionStrings = connectionStrings;
            CustomDomainVerificationId = customDomainVerificationId;
            DefaultHostname = defaultHostname;
            Enabled = enabled;
            FtpPublishBasicAuthenticationEnabled = ftpPublishBasicAuthenticationEnabled;
            HttpsOnly = httpsOnly;
            Id = id;
            Identities = identities;
            Kind = kind;
            Location = location;
            Name = name;
            OutboundIpAddresses = outboundIpAddresses;
            PossibleOutboundIpAddresses = possibleOutboundIpAddresses;
            PublicNetworkAccess = publicNetworkAccess;
            ResourceGroupName = resourceGroupName;
            ScmPublishBasicAuthenticationEnabled = scmPublishBasicAuthenticationEnabled;
            SiteConfig = siteConfig;
            SiteCredentials = siteCredentials;
            StorageAccountAccessKey = storageAccountAccessKey;
            StorageAccountName = storageAccountName;
            StorageAccountShareName = storageAccountShareName;
            Tags = tags;
            UseExtensionBundle = useExtensionBundle;
            Version = version;
            VirtualNetworkSubnetId = virtualNetworkSubnetId;
        }
    }
}
