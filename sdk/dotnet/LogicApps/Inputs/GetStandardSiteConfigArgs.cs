// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.LogicApps.Inputs
{

    public sealed class GetStandardSiteConfigInputArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Should the Logic App be loaded at all times?
        /// </summary>
        [Input("alwaysOn")]
        public Input<bool>? AlwaysOn { get; set; }

        /// <summary>
        /// The number of workers this Logic App can scale out to. Only applicable to apps on the Consumption and Premium plan.
        /// </summary>
        [Input("appScaleLimit", required: true)]
        public Input<int> AppScaleLimit { get; set; } = null!;

        /// <summary>
        /// The Auto-swap slot name.
        /// </summary>
        [Input("autoSwapSlotName", required: true)]
        public Input<string> AutoSwapSlotName { get; set; } = null!;

        /// <summary>
        /// A `cors` block as defined below.
        /// </summary>
        [Input("cors", required: true)]
        public Input<Inputs.GetStandardSiteConfigCorsInputArgs> Cors { get; set; } = null!;

        /// <summary>
        /// The version of the .NET framework's CLR used in this Logic App.
        /// </summary>
        [Input("dotnetFrameworkVersion")]
        public Input<string>? DotnetFrameworkVersion { get; set; }

        /// <summary>
        /// The number of minimum instances for this Logic App Only affects apps on the Premium plan.
        /// </summary>
        [Input("elasticInstanceMinimum", required: true)]
        public Input<int> ElasticInstanceMinimum { get; set; } = null!;

        /// <summary>
        /// The state of FTP / FTPS service for this Logic App.
        /// </summary>
        [Input("ftpsState", required: true)]
        public Input<string> FtpsState { get; set; } = null!;

        /// <summary>
        /// Path which will be checked for this Logic App health.
        /// </summary>
        [Input("healthCheckPath")]
        public Input<string>? HealthCheckPath { get; set; }

        /// <summary>
        /// Specifies whether the HTTP2 protocol should be enabled.
        /// </summary>
        [Input("http2Enabled")]
        public Input<bool>? Http2Enabled { get; set; }

        [Input("ipRestrictions", required: true)]
        private InputList<Inputs.GetStandardSiteConfigIpRestrictionInputArgs>? _ipRestrictions;

        /// <summary>
        /// A list of `ip_restriction` objects representing IP restrictions as defined below.
        /// </summary>
        public InputList<Inputs.GetStandardSiteConfigIpRestrictionInputArgs> IpRestrictions
        {
            get => _ipRestrictions ?? (_ipRestrictions = new InputList<Inputs.GetStandardSiteConfigIpRestrictionInputArgs>());
            set => _ipRestrictions = value;
        }

        /// <summary>
        /// Linux App Framework and version for the Logic App.
        /// </summary>
        [Input("linuxFxVersion", required: true)]
        public Input<string> LinuxFxVersion { get; set; } = null!;

        /// <summary>
        /// The minimum supported TLS version for the Logic App.
        /// </summary>
        [Input("minTlsVersion", required: true)]
        public Input<string> MinTlsVersion { get; set; } = null!;

        /// <summary>
        /// The number of pre-warmed instances for this Logic App Only affects apps on the Premium plan.
        /// </summary>
        [Input("preWarmedInstanceCount", required: true)]
        public Input<int> PreWarmedInstanceCount { get; set; } = null!;

        [Input("publicNetworkAccessEnabled", required: true)]
        public Input<bool> PublicNetworkAccessEnabled { get; set; } = null!;

        /// <summary>
        /// Should Runtime Scale Monitoring be enabled?. Only applicable to apps on the Premium plan.
        /// </summary>
        [Input("runtimeScaleMonitoringEnabled")]
        public Input<bool>? RuntimeScaleMonitoringEnabled { get; set; }

        [Input("scmIpRestrictions", required: true)]
        private InputList<Inputs.GetStandardSiteConfigScmIpRestrictionInputArgs>? _scmIpRestrictions;

        /// <summary>
        /// A list of `scm_ip_restriction` objects representing SCM IP restrictions as defined below.
        /// </summary>
        public InputList<Inputs.GetStandardSiteConfigScmIpRestrictionInputArgs> ScmIpRestrictions
        {
            get => _scmIpRestrictions ?? (_scmIpRestrictions = new InputList<Inputs.GetStandardSiteConfigScmIpRestrictionInputArgs>());
            set => _scmIpRestrictions = value;
        }

        /// <summary>
        /// The minimum version of TLS required for SSL requests to the SCM site.
        /// </summary>
        [Input("scmMinTlsVersion", required: true)]
        public Input<string> ScmMinTlsVersion { get; set; } = null!;

        /// <summary>
        /// The type of Source Control used by the Logic App in use by the Windows Function App.
        /// </summary>
        [Input("scmType", required: true)]
        public Input<string> ScmType { get; set; } = null!;

        /// <summary>
        /// Should the Logic App `ip_restriction` configuration be used for the SCM too.
        /// </summary>
        [Input("scmUseMainIpRestriction")]
        public Input<bool>? ScmUseMainIpRestriction { get; set; }

        /// <summary>
        /// Should the Logic App run in 32 bit mode, rather than 64 bit mode?
        /// </summary>
        [Input("use32BitWorkerProcess")]
        public Input<bool>? Use32BitWorkerProcess { get; set; }

        /// <summary>
        /// Should all outbound traffic to have Virtual Network Security Groups and User Defined Routes applied.
        /// </summary>
        [Input("vnetRouteAllEnabled", required: true)]
        public Input<bool> VnetRouteAllEnabled { get; set; } = null!;

        /// <summary>
        /// Should WebSockets be enabled?
        /// </summary>
        [Input("websocketsEnabled")]
        public Input<bool>? WebsocketsEnabled { get; set; }

        public GetStandardSiteConfigInputArgs()
        {
        }
        public static new GetStandardSiteConfigInputArgs Empty => new GetStandardSiteConfigInputArgs();
    }
}
