// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.LogicApps
{
    /// <summary>
    /// Manages a Logic App Integration Account Batch Configuration.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleIntegrationAccount = new Azure.LogicApps.IntegrationAccount("exampleIntegrationAccount", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         SkuName = "Standard",
    ///     });
    /// 
    ///     var exampleIntegrationAccountBatchConfiguration = new Azure.LogicApps.IntegrationAccountBatchConfiguration("exampleIntegrationAccountBatchConfiguration", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         IntegrationAccountName = exampleIntegrationAccount.Name,
    ///         BatchGroupName = "TestBatchGroup",
    ///         ReleaseCriteria = new Azure.LogicApps.Inputs.IntegrationAccountBatchConfigurationReleaseCriteriaArgs
    ///         {
    ///             MessageCount = 80,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Logic App Integration Account Batch Configurations can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:logicapps/integrationAccountBatchConfiguration:IntegrationAccountBatchConfiguration example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Logic/integrationAccounts/account1/batchConfigurations/batchConfiguration1
    /// ```
    /// </summary>
    [AzureResourceType("azure:logicapps/integrationAccountBatchConfiguration:IntegrationAccountBatchConfiguration")]
    public partial class IntegrationAccountBatchConfiguration : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The batch group name of the Logic App Integration Batch Configuration. Changing this forces a new resource to be created.
        /// </summary>
        [Output("batchGroupName")]
        public Output<string> BatchGroupName { get; private set; } = null!;

        /// <summary>
        /// The name of the Logic App Integration Account. Changing this forces a new resource to be created.
        /// </summary>
        [Output("integrationAccountName")]
        public Output<string> IntegrationAccountName { get; private set; } = null!;

        /// <summary>
        /// A JSON mapping of any Metadata for this Logic App Integration Account Batch Configuration.
        /// </summary>
        [Output("metadata")]
        public Output<ImmutableDictionary<string, string>?> Metadata { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Logic App Integration Account Batch Configuration. Only Alphanumeric characters allowed. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A `release_criteria` block as documented below, which is used to select the criteria to meet before processing each batch.
        /// </summary>
        [Output("releaseCriteria")]
        public Output<Outputs.IntegrationAccountBatchConfigurationReleaseCriteria> ReleaseCriteria { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Logic App Integration Account Batch Configuration should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;


        /// <summary>
        /// Create a IntegrationAccountBatchConfiguration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IntegrationAccountBatchConfiguration(string name, IntegrationAccountBatchConfigurationArgs args, CustomResourceOptions? options = null)
            : base("azure:logicapps/integrationAccountBatchConfiguration:IntegrationAccountBatchConfiguration", name, args ?? new IntegrationAccountBatchConfigurationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IntegrationAccountBatchConfiguration(string name, Input<string> id, IntegrationAccountBatchConfigurationState? state = null, CustomResourceOptions? options = null)
            : base("azure:logicapps/integrationAccountBatchConfiguration:IntegrationAccountBatchConfiguration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IntegrationAccountBatchConfiguration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IntegrationAccountBatchConfiguration Get(string name, Input<string> id, IntegrationAccountBatchConfigurationState? state = null, CustomResourceOptions? options = null)
        {
            return new IntegrationAccountBatchConfiguration(name, id, state, options);
        }
    }

    public sealed class IntegrationAccountBatchConfigurationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The batch group name of the Logic App Integration Batch Configuration. Changing this forces a new resource to be created.
        /// </summary>
        [Input("batchGroupName", required: true)]
        public Input<string> BatchGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the Logic App Integration Account. Changing this forces a new resource to be created.
        /// </summary>
        [Input("integrationAccountName", required: true)]
        public Input<string> IntegrationAccountName { get; set; } = null!;

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// A JSON mapping of any Metadata for this Logic App Integration Account Batch Configuration.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// The name which should be used for this Logic App Integration Account Batch Configuration. Only Alphanumeric characters allowed. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A `release_criteria` block as documented below, which is used to select the criteria to meet before processing each batch.
        /// </summary>
        [Input("releaseCriteria", required: true)]
        public Input<Inputs.IntegrationAccountBatchConfigurationReleaseCriteriaArgs> ReleaseCriteria { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Logic App Integration Account Batch Configuration should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public IntegrationAccountBatchConfigurationArgs()
        {
        }
        public static new IntegrationAccountBatchConfigurationArgs Empty => new IntegrationAccountBatchConfigurationArgs();
    }

    public sealed class IntegrationAccountBatchConfigurationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The batch group name of the Logic App Integration Batch Configuration. Changing this forces a new resource to be created.
        /// </summary>
        [Input("batchGroupName")]
        public Input<string>? BatchGroupName { get; set; }

        /// <summary>
        /// The name of the Logic App Integration Account. Changing this forces a new resource to be created.
        /// </summary>
        [Input("integrationAccountName")]
        public Input<string>? IntegrationAccountName { get; set; }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// A JSON mapping of any Metadata for this Logic App Integration Account Batch Configuration.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// The name which should be used for this Logic App Integration Account Batch Configuration. Only Alphanumeric characters allowed. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A `release_criteria` block as documented below, which is used to select the criteria to meet before processing each batch.
        /// </summary>
        [Input("releaseCriteria")]
        public Input<Inputs.IntegrationAccountBatchConfigurationReleaseCriteriaGetArgs>? ReleaseCriteria { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Logic App Integration Account Batch Configuration should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        public IntegrationAccountBatchConfigurationState()
        {
        }
        public static new IntegrationAccountBatchConfigurationState Empty => new IntegrationAccountBatchConfigurationState();
    }
}
