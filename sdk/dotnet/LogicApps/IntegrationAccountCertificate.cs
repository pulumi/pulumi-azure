// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.LogicApps
{
    /// <summary>
    /// Manages a Logic App Integration Account Certificate.
    /// 
    /// ## Import
    /// 
    /// Logic App Integration Account Certificates can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:logicapps/integrationAccountCertificate:IntegrationAccountCertificate example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Logic/integrationAccounts/account1/certificates/certificate1
    /// ```
    /// </summary>
    [AzureResourceType("azure:logicapps/integrationAccountCertificate:IntegrationAccountCertificate")]
    public partial class IntegrationAccountCertificate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the Logic App Integration Account. Changing this forces a new Logic App Integration Account Certificate to be created.
        /// </summary>
        [Output("integrationAccountName")]
        public Output<string> IntegrationAccountName { get; private set; } = null!;

        /// <summary>
        /// A `key_vault_key` block as documented below.
        /// </summary>
        [Output("keyVaultKey")]
        public Output<Outputs.IntegrationAccountCertificateKeyVaultKey?> KeyVaultKey { get; private set; } = null!;

        /// <summary>
        /// A JSON mapping of any Metadata for this Logic App Integration Account Certificate.
        /// </summary>
        [Output("metadata")]
        public Output<string?> Metadata { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Logic App Integration Account Certificate. Changing this forces a new Logic App Integration Account Certificate to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The public certificate for the Logic App Integration Account Certificate.
        /// </summary>
        [Output("publicCertificate")]
        public Output<string?> PublicCertificate { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Logic App Integration Account Certificate should exist. Changing this forces a new Logic App Integration Account Certificate to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;


        /// <summary>
        /// Create a IntegrationAccountCertificate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IntegrationAccountCertificate(string name, IntegrationAccountCertificateArgs args, CustomResourceOptions? options = null)
            : base("azure:logicapps/integrationAccountCertificate:IntegrationAccountCertificate", name, args ?? new IntegrationAccountCertificateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IntegrationAccountCertificate(string name, Input<string> id, IntegrationAccountCertificateState? state = null, CustomResourceOptions? options = null)
            : base("azure:logicapps/integrationAccountCertificate:IntegrationAccountCertificate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IntegrationAccountCertificate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IntegrationAccountCertificate Get(string name, Input<string> id, IntegrationAccountCertificateState? state = null, CustomResourceOptions? options = null)
        {
            return new IntegrationAccountCertificate(name, id, state, options);
        }
    }

    public sealed class IntegrationAccountCertificateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the Logic App Integration Account. Changing this forces a new Logic App Integration Account Certificate to be created.
        /// </summary>
        [Input("integrationAccountName", required: true)]
        public Input<string> IntegrationAccountName { get; set; } = null!;

        /// <summary>
        /// A `key_vault_key` block as documented below.
        /// </summary>
        [Input("keyVaultKey")]
        public Input<Inputs.IntegrationAccountCertificateKeyVaultKeyArgs>? KeyVaultKey { get; set; }

        /// <summary>
        /// A JSON mapping of any Metadata for this Logic App Integration Account Certificate.
        /// </summary>
        [Input("metadata")]
        public Input<string>? Metadata { get; set; }

        /// <summary>
        /// The name which should be used for this Logic App Integration Account Certificate. Changing this forces a new Logic App Integration Account Certificate to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The public certificate for the Logic App Integration Account Certificate.
        /// </summary>
        [Input("publicCertificate")]
        public Input<string>? PublicCertificate { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Logic App Integration Account Certificate should exist. Changing this forces a new Logic App Integration Account Certificate to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public IntegrationAccountCertificateArgs()
        {
        }
        public static new IntegrationAccountCertificateArgs Empty => new IntegrationAccountCertificateArgs();
    }

    public sealed class IntegrationAccountCertificateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the Logic App Integration Account. Changing this forces a new Logic App Integration Account Certificate to be created.
        /// </summary>
        [Input("integrationAccountName")]
        public Input<string>? IntegrationAccountName { get; set; }

        /// <summary>
        /// A `key_vault_key` block as documented below.
        /// </summary>
        [Input("keyVaultKey")]
        public Input<Inputs.IntegrationAccountCertificateKeyVaultKeyGetArgs>? KeyVaultKey { get; set; }

        /// <summary>
        /// A JSON mapping of any Metadata for this Logic App Integration Account Certificate.
        /// </summary>
        [Input("metadata")]
        public Input<string>? Metadata { get; set; }

        /// <summary>
        /// The name which should be used for this Logic App Integration Account Certificate. Changing this forces a new Logic App Integration Account Certificate to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The public certificate for the Logic App Integration Account Certificate.
        /// </summary>
        [Input("publicCertificate")]
        public Input<string>? PublicCertificate { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Logic App Integration Account Certificate should exist. Changing this forces a new Logic App Integration Account Certificate to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        public IntegrationAccountCertificateState()
        {
        }
        public static new IntegrationAccountCertificateState Empty => new IntegrationAccountCertificateState();
    }
}
