// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.LogicApps
{
    public static class GetWorkflow
    {
        /// <summary>
        /// Use this data source to access information about an existing Logic App Workflow.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.LogicApps.GetWorkflow.Invoke(new()
        ///     {
        ///         Name = "workflow1",
        ///         ResourceGroupName = "my-resource-group",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["accessEndpoint"] = example.Apply(getWorkflowResult =&gt; getWorkflowResult.AccessEndpoint),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetWorkflowResult> InvokeAsync(GetWorkflowArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetWorkflowResult>("azure:logicapps/getWorkflow:getWorkflow", args ?? new GetWorkflowArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Logic App Workflow.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.LogicApps.GetWorkflow.Invoke(new()
        ///     {
        ///         Name = "workflow1",
        ///         ResourceGroupName = "my-resource-group",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["accessEndpoint"] = example.Apply(getWorkflowResult =&gt; getWorkflowResult.AccessEndpoint),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetWorkflowResult> Invoke(GetWorkflowInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetWorkflowResult>("azure:logicapps/getWorkflow:getWorkflow", args ?? new GetWorkflowInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetWorkflowArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Logic App Workflow.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group in which the Logic App Workflow exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetWorkflowArgs()
        {
        }
        public static new GetWorkflowArgs Empty => new GetWorkflowArgs();
    }

    public sealed class GetWorkflowInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Logic App Workflow.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group in which the Logic App Workflow exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetWorkflowInvokeArgs()
        {
        }
        public static new GetWorkflowInvokeArgs Empty => new GetWorkflowInvokeArgs();
    }


    [OutputType]
    public sealed class GetWorkflowResult
    {
        /// <summary>
        /// The Access Endpoint for the Logic App Workflow
        /// </summary>
        public readonly string AccessEndpoint;
        /// <summary>
        /// The list of access endpoint IP addresses of connector.
        /// </summary>
        public readonly ImmutableArray<string> ConnectorEndpointIpAddresses;
        /// <summary>
        /// The list of outgoing IP addresses of connector.
        /// </summary>
        public readonly ImmutableArray<string> ConnectorOutboundIpAddresses;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetWorkflowIdentityResult> Identities;
        /// <summary>
        /// The Azure location where the Logic App Workflow exists.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The ID of the integration account linked by this Logic App Workflow.
        /// </summary>
        public readonly string LogicAppIntegrationAccountId;
        public readonly string Name;
        /// <summary>
        /// A map of Key-Value pairs.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Parameters;
        public readonly string ResourceGroupName;
        /// <summary>
        /// A mapping of tags assigned to the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// The list of access endpoint IP addresses of workflow.
        /// </summary>
        public readonly ImmutableArray<string> WorkflowEndpointIpAddresses;
        /// <summary>
        /// The list of outgoing IP addresses of workflow.
        /// </summary>
        public readonly ImmutableArray<string> WorkflowOutboundIpAddresses;
        /// <summary>
        /// The Schema used for this Logic App Workflow.
        /// </summary>
        public readonly string WorkflowSchema;
        /// <summary>
        /// The version of the Schema used for this Logic App Workflow. Defaults to `1.0.0.0`.
        /// </summary>
        public readonly string WorkflowVersion;

        [OutputConstructor]
        private GetWorkflowResult(
            string accessEndpoint,

            ImmutableArray<string> connectorEndpointIpAddresses,

            ImmutableArray<string> connectorOutboundIpAddresses,

            string id,

            ImmutableArray<Outputs.GetWorkflowIdentityResult> identities,

            string location,

            string logicAppIntegrationAccountId,

            string name,

            ImmutableDictionary<string, string> parameters,

            string resourceGroupName,

            ImmutableDictionary<string, string> tags,

            ImmutableArray<string> workflowEndpointIpAddresses,

            ImmutableArray<string> workflowOutboundIpAddresses,

            string workflowSchema,

            string workflowVersion)
        {
            AccessEndpoint = accessEndpoint;
            ConnectorEndpointIpAddresses = connectorEndpointIpAddresses;
            ConnectorOutboundIpAddresses = connectorOutboundIpAddresses;
            Id = id;
            Identities = identities;
            Location = location;
            LogicAppIntegrationAccountId = logicAppIntegrationAccountId;
            Name = name;
            Parameters = parameters;
            ResourceGroupName = resourceGroupName;
            Tags = tags;
            WorkflowEndpointIpAddresses = workflowEndpointIpAddresses;
            WorkflowOutboundIpAddresses = workflowOutboundIpAddresses;
            WorkflowSchema = workflowSchema;
            WorkflowVersion = workflowVersion;
        }
    }
}
