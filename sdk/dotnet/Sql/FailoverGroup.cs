// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Sql
{
    /// <summary>
    /// Create a failover group of databases on a collection of Azure SQL servers.
    /// 
    /// &gt; **Note:** The `azure.sql.FailoverGroup` resource is deprecated in version 3.0 of the AzureRM provider and will be removed in version 4.0. Please use the `azure.mssql.FailoverGroup` resource instead.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var primary = new Azure.Sql.SqlServer("primary", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         Version = "12.0",
    ///         AdministratorLogin = "sqladmin",
    ///         AdministratorLoginPassword = "pa$$w0rd",
    ///     });
    /// 
    ///     var secondary = new Azure.Sql.SqlServer("secondary", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         Version = "12.0",
    ///         AdministratorLogin = "sqladmin",
    ///         AdministratorLoginPassword = "pa$$w0rd",
    ///     });
    /// 
    ///     var db1 = new Azure.Sql.Database("db1", new()
    ///     {
    ///         ResourceGroupName = primary.ResourceGroupName,
    ///         Location = primary.Location,
    ///         ServerName = primary.Name,
    ///     });
    /// 
    ///     var exampleFailoverGroup = new Azure.Sql.FailoverGroup("exampleFailoverGroup", new()
    ///     {
    ///         ResourceGroupName = primary.ResourceGroupName,
    ///         ServerName = primary.Name,
    ///         Databases = new[]
    ///         {
    ///             db1.Id,
    ///         },
    ///         PartnerServers = new[]
    ///         {
    ///             new Azure.Sql.Inputs.FailoverGroupPartnerServerArgs
    ///             {
    ///                 Id = secondary.Id,
    ///             },
    ///         },
    ///         ReadWriteEndpointFailoverPolicy = new Azure.Sql.Inputs.FailoverGroupReadWriteEndpointFailoverPolicyArgs
    ///         {
    ///             Mode = "Automatic",
    ///             GraceMinutes = 60,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// SQL Failover Groups can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:sql/failoverGroup:FailoverGroup example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myresourcegroup/providers/Microsoft.Sql/servers/myserver/failoverGroups/group1
    /// ```
    /// </summary>
    [AzureResourceType("azure:sql/failoverGroup:FailoverGroup")]
    public partial class FailoverGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A list of database ids to add to the failover group
        /// 
        /// &gt; **NOTE:** The failover group will create a secondary database for each database listed in `databases`. If the secondary databases need to be managed through this provider, they should be defined as resources and a dependency added to the failover group to ensure the secondary databases are created first.
        /// </summary>
        [Output("databases")]
        public Output<ImmutableArray<string>> Databases { get; private set; } = null!;

        /// <summary>
        /// the location of the failover group.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the failover group. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A list of `partner_servers` blocks as documented below.
        /// </summary>
        [Output("partnerServers")]
        public Output<ImmutableArray<Outputs.FailoverGroupPartnerServer>> PartnerServers { get; private set; } = null!;

        /// <summary>
        /// A `read_write_endpoint_failover_policy` block as documented below.
        /// </summary>
        [Output("readWriteEndpointFailoverPolicy")]
        public Output<Outputs.FailoverGroupReadWriteEndpointFailoverPolicy> ReadWriteEndpointFailoverPolicy { get; private set; } = null!;

        /// <summary>
        /// A `readonly_endpoint_failover_policy` block as documented below.
        /// </summary>
        [Output("readonlyEndpointFailoverPolicy")]
        public Output<Outputs.FailoverGroupReadonlyEndpointFailoverPolicy> ReadonlyEndpointFailoverPolicy { get; private set; } = null!;

        /// <summary>
        /// The name of the resource group containing the SQL server Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// local replication role of the failover group instance.
        /// </summary>
        [Output("role")]
        public Output<string> Role { get; private set; } = null!;

        /// <summary>
        /// The name of the primary SQL server. Changing this forces a new resource to be created.
        /// </summary>
        [Output("serverName")]
        public Output<string> ServerName { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a FailoverGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FailoverGroup(string name, FailoverGroupArgs args, CustomResourceOptions? options = null)
            : base("azure:sql/failoverGroup:FailoverGroup", name, args ?? new FailoverGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FailoverGroup(string name, Input<string> id, FailoverGroupState? state = null, CustomResourceOptions? options = null)
            : base("azure:sql/failoverGroup:FailoverGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FailoverGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FailoverGroup Get(string name, Input<string> id, FailoverGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new FailoverGroup(name, id, state, options);
        }
    }

    public sealed class FailoverGroupArgs : global::Pulumi.ResourceArgs
    {
        [Input("databases")]
        private InputList<string>? _databases;

        /// <summary>
        /// A list of database ids to add to the failover group
        /// 
        /// &gt; **NOTE:** The failover group will create a secondary database for each database listed in `databases`. If the secondary databases need to be managed through this provider, they should be defined as resources and a dependency added to the failover group to ensure the secondary databases are created first.
        /// </summary>
        public InputList<string> Databases
        {
            get => _databases ?? (_databases = new InputList<string>());
            set => _databases = value;
        }

        /// <summary>
        /// The name of the failover group. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("partnerServers", required: true)]
        private InputList<Inputs.FailoverGroupPartnerServerArgs>? _partnerServers;

        /// <summary>
        /// A list of `partner_servers` blocks as documented below.
        /// </summary>
        public InputList<Inputs.FailoverGroupPartnerServerArgs> PartnerServers
        {
            get => _partnerServers ?? (_partnerServers = new InputList<Inputs.FailoverGroupPartnerServerArgs>());
            set => _partnerServers = value;
        }

        /// <summary>
        /// A `read_write_endpoint_failover_policy` block as documented below.
        /// </summary>
        [Input("readWriteEndpointFailoverPolicy", required: true)]
        public Input<Inputs.FailoverGroupReadWriteEndpointFailoverPolicyArgs> ReadWriteEndpointFailoverPolicy { get; set; } = null!;

        /// <summary>
        /// A `readonly_endpoint_failover_policy` block as documented below.
        /// </summary>
        [Input("readonlyEndpointFailoverPolicy")]
        public Input<Inputs.FailoverGroupReadonlyEndpointFailoverPolicyArgs>? ReadonlyEndpointFailoverPolicy { get; set; }

        /// <summary>
        /// The name of the resource group containing the SQL server Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the primary SQL server. Changing this forces a new resource to be created.
        /// </summary>
        [Input("serverName", required: true)]
        public Input<string> ServerName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public FailoverGroupArgs()
        {
        }
        public static new FailoverGroupArgs Empty => new FailoverGroupArgs();
    }

    public sealed class FailoverGroupState : global::Pulumi.ResourceArgs
    {
        [Input("databases")]
        private InputList<string>? _databases;

        /// <summary>
        /// A list of database ids to add to the failover group
        /// 
        /// &gt; **NOTE:** The failover group will create a secondary database for each database listed in `databases`. If the secondary databases need to be managed through this provider, they should be defined as resources and a dependency added to the failover group to ensure the secondary databases are created first.
        /// </summary>
        public InputList<string> Databases
        {
            get => _databases ?? (_databases = new InputList<string>());
            set => _databases = value;
        }

        /// <summary>
        /// the location of the failover group.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the failover group. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("partnerServers")]
        private InputList<Inputs.FailoverGroupPartnerServerGetArgs>? _partnerServers;

        /// <summary>
        /// A list of `partner_servers` blocks as documented below.
        /// </summary>
        public InputList<Inputs.FailoverGroupPartnerServerGetArgs> PartnerServers
        {
            get => _partnerServers ?? (_partnerServers = new InputList<Inputs.FailoverGroupPartnerServerGetArgs>());
            set => _partnerServers = value;
        }

        /// <summary>
        /// A `read_write_endpoint_failover_policy` block as documented below.
        /// </summary>
        [Input("readWriteEndpointFailoverPolicy")]
        public Input<Inputs.FailoverGroupReadWriteEndpointFailoverPolicyGetArgs>? ReadWriteEndpointFailoverPolicy { get; set; }

        /// <summary>
        /// A `readonly_endpoint_failover_policy` block as documented below.
        /// </summary>
        [Input("readonlyEndpointFailoverPolicy")]
        public Input<Inputs.FailoverGroupReadonlyEndpointFailoverPolicyGetArgs>? ReadonlyEndpointFailoverPolicy { get; set; }

        /// <summary>
        /// The name of the resource group containing the SQL server Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// local replication role of the failover group instance.
        /// </summary>
        [Input("role")]
        public Input<string>? Role { get; set; }

        /// <summary>
        /// The name of the primary SQL server. Changing this forces a new resource to be created.
        /// </summary>
        [Input("serverName")]
        public Input<string>? ServerName { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public FailoverGroupState()
        {
        }
        public static new FailoverGroupState Empty => new FailoverGroupState();
    }
}
