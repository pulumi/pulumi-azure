// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Sql
{
    /// <summary>
    /// Create a failover group of databases on a collection of Azure SQL servers.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/sql_failover_group.html.markdown.
    /// </summary>
    public partial class FailoverGroup : Pulumi.CustomResource
    {
        /// <summary>
        /// A list of database ids to add to the failover group
        /// </summary>
        [Output("databases")]
        public Output<ImmutableArray<string>> Databases { get; private set; } = null!;

        /// <summary>
        /// the location of the failover group.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the failover group. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A list of secondary servers as documented below
        /// </summary>
        [Output("partnerServers")]
        public Output<ImmutableArray<Outputs.FailoverGroupPartnerServers>> PartnerServers { get; private set; } = null!;

        /// <summary>
        /// A read/write policy as documented below
        /// </summary>
        [Output("readWriteEndpointFailoverPolicy")]
        public Output<Outputs.FailoverGroupReadWriteEndpointFailoverPolicy> ReadWriteEndpointFailoverPolicy { get; private set; } = null!;

        /// <summary>
        /// a read-only policy as documented below
        /// </summary>
        [Output("readonlyEndpointFailoverPolicy")]
        public Output<Outputs.FailoverGroupReadonlyEndpointFailoverPolicy> ReadonlyEndpointFailoverPolicy { get; private set; } = null!;

        /// <summary>
        /// The name of the resource group containing the SQL server
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// local replication role of the failover group instance.
        /// </summary>
        [Output("role")]
        public Output<string> Role { get; private set; } = null!;

        /// <summary>
        /// The name of the primary SQL server. Changing this forces a new resource to be created.
        /// </summary>
        [Output("serverName")]
        public Output<string> ServerName { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, object>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a FailoverGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FailoverGroup(string name, FailoverGroupArgs args, CustomResourceOptions? options = null)
            : base("azure:sql/failoverGroup:FailoverGroup", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private FailoverGroup(string name, Input<string> id, FailoverGroupState? state = null, CustomResourceOptions? options = null)
            : base("azure:sql/failoverGroup:FailoverGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FailoverGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FailoverGroup Get(string name, Input<string> id, FailoverGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new FailoverGroup(name, id, state, options);
        }
    }

    public sealed class FailoverGroupArgs : Pulumi.ResourceArgs
    {
        [Input("databases")]
        private InputList<string>? _databases;

        /// <summary>
        /// A list of database ids to add to the failover group
        /// </summary>
        public InputList<string> Databases
        {
            get => _databases ?? (_databases = new InputList<string>());
            set => _databases = value;
        }

        /// <summary>
        /// The name of the failover group. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("partnerServers", required: true)]
        private InputList<Inputs.FailoverGroupPartnerServersArgs>? _partnerServers;

        /// <summary>
        /// A list of secondary servers as documented below
        /// </summary>
        public InputList<Inputs.FailoverGroupPartnerServersArgs> PartnerServers
        {
            get => _partnerServers ?? (_partnerServers = new InputList<Inputs.FailoverGroupPartnerServersArgs>());
            set => _partnerServers = value;
        }

        /// <summary>
        /// A read/write policy as documented below
        /// </summary>
        [Input("readWriteEndpointFailoverPolicy", required: true)]
        public Input<Inputs.FailoverGroupReadWriteEndpointFailoverPolicyArgs> ReadWriteEndpointFailoverPolicy { get; set; } = null!;

        /// <summary>
        /// a read-only policy as documented below
        /// </summary>
        [Input("readonlyEndpointFailoverPolicy")]
        public Input<Inputs.FailoverGroupReadonlyEndpointFailoverPolicyArgs>? ReadonlyEndpointFailoverPolicy { get; set; }

        /// <summary>
        /// The name of the resource group containing the SQL server
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the primary SQL server. Changing this forces a new resource to be created.
        /// </summary>
        [Input("serverName", required: true)]
        public Input<string> ServerName { get; set; } = null!;

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        public FailoverGroupArgs()
        {
        }
    }

    public sealed class FailoverGroupState : Pulumi.ResourceArgs
    {
        [Input("databases")]
        private InputList<string>? _databases;

        /// <summary>
        /// A list of database ids to add to the failover group
        /// </summary>
        public InputList<string> Databases
        {
            get => _databases ?? (_databases = new InputList<string>());
            set => _databases = value;
        }

        /// <summary>
        /// the location of the failover group.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the failover group. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("partnerServers")]
        private InputList<Inputs.FailoverGroupPartnerServersGetArgs>? _partnerServers;

        /// <summary>
        /// A list of secondary servers as documented below
        /// </summary>
        public InputList<Inputs.FailoverGroupPartnerServersGetArgs> PartnerServers
        {
            get => _partnerServers ?? (_partnerServers = new InputList<Inputs.FailoverGroupPartnerServersGetArgs>());
            set => _partnerServers = value;
        }

        /// <summary>
        /// A read/write policy as documented below
        /// </summary>
        [Input("readWriteEndpointFailoverPolicy")]
        public Input<Inputs.FailoverGroupReadWriteEndpointFailoverPolicyGetArgs>? ReadWriteEndpointFailoverPolicy { get; set; }

        /// <summary>
        /// a read-only policy as documented below
        /// </summary>
        [Input("readonlyEndpointFailoverPolicy")]
        public Input<Inputs.FailoverGroupReadonlyEndpointFailoverPolicyGetArgs>? ReadonlyEndpointFailoverPolicy { get; set; }

        /// <summary>
        /// The name of the resource group containing the SQL server
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// local replication role of the failover group instance.
        /// </summary>
        [Input("role")]
        public Input<string>? Role { get; set; }

        /// <summary>
        /// The name of the primary SQL server. Changing this forces a new resource to be created.
        /// </summary>
        [Input("serverName")]
        public Input<string>? ServerName { get; set; }

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        public FailoverGroupState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class FailoverGroupPartnerServersArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// the SQL server ID
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        /// <summary>
        /// the location of the failover group.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// local replication role of the failover group instance.
        /// </summary>
        [Input("role")]
        public Input<string>? Role { get; set; }

        public FailoverGroupPartnerServersArgs()
        {
        }
    }

    public sealed class FailoverGroupPartnerServersGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// the SQL server ID
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        /// <summary>
        /// the location of the failover group.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// local replication role of the failover group instance.
        /// </summary>
        [Input("role")]
        public Input<string>? Role { get; set; }

        public FailoverGroupPartnerServersGetArgs()
        {
        }
    }

    public sealed class FailoverGroupReadWriteEndpointFailoverPolicyArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Applies only if `mode` is `Automatic`. The grace period in minutes before failover with data loss is attempted
        /// </summary>
        [Input("graceMinutes")]
        public Input<int>? GraceMinutes { get; set; }

        /// <summary>
        /// Failover policy for the read-only endpoint. Possible values are `Enabled`, and `Disabled`
        /// </summary>
        [Input("mode", required: true)]
        public Input<string> Mode { get; set; } = null!;

        public FailoverGroupReadWriteEndpointFailoverPolicyArgs()
        {
        }
    }

    public sealed class FailoverGroupReadWriteEndpointFailoverPolicyGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Applies only if `mode` is `Automatic`. The grace period in minutes before failover with data loss is attempted
        /// </summary>
        [Input("graceMinutes")]
        public Input<int>? GraceMinutes { get; set; }

        /// <summary>
        /// Failover policy for the read-only endpoint. Possible values are `Enabled`, and `Disabled`
        /// </summary>
        [Input("mode", required: true)]
        public Input<string> Mode { get; set; } = null!;

        public FailoverGroupReadWriteEndpointFailoverPolicyGetArgs()
        {
        }
    }

    public sealed class FailoverGroupReadonlyEndpointFailoverPolicyArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Failover policy for the read-only endpoint. Possible values are `Enabled`, and `Disabled`
        /// </summary>
        [Input("mode", required: true)]
        public Input<string> Mode { get; set; } = null!;

        public FailoverGroupReadonlyEndpointFailoverPolicyArgs()
        {
        }
    }

    public sealed class FailoverGroupReadonlyEndpointFailoverPolicyGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Failover policy for the read-only endpoint. Possible values are `Enabled`, and `Disabled`
        /// </summary>
        [Input("mode", required: true)]
        public Input<string> Mode { get; set; } = null!;

        public FailoverGroupReadonlyEndpointFailoverPolicyGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class FailoverGroupPartnerServers
    {
        /// <summary>
        /// the SQL server ID
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// the location of the failover group.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// local replication role of the failover group instance.
        /// </summary>
        public readonly string Role;

        [OutputConstructor]
        private FailoverGroupPartnerServers(
            string id,
            string location,
            string role)
        {
            Id = id;
            Location = location;
            Role = role;
        }
    }

    [OutputType]
    public sealed class FailoverGroupReadWriteEndpointFailoverPolicy
    {
        /// <summary>
        /// Applies only if `mode` is `Automatic`. The grace period in minutes before failover with data loss is attempted
        /// </summary>
        public readonly int? GraceMinutes;
        /// <summary>
        /// Failover policy for the read-only endpoint. Possible values are `Enabled`, and `Disabled`
        /// </summary>
        public readonly string Mode;

        [OutputConstructor]
        private FailoverGroupReadWriteEndpointFailoverPolicy(
            int? graceMinutes,
            string mode)
        {
            GraceMinutes = graceMinutes;
            Mode = mode;
        }
    }

    [OutputType]
    public sealed class FailoverGroupReadonlyEndpointFailoverPolicy
    {
        /// <summary>
        /// Failover policy for the read-only endpoint. Possible values are `Enabled`, and `Disabled`
        /// </summary>
        public readonly string Mode;

        [OutputConstructor]
        private FailoverGroupReadonlyEndpointFailoverPolicy(string mode)
        {
            Mode = mode;
        }
    }
    }
}
