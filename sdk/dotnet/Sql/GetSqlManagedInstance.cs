// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Sql
{
    public static class GetSqlManagedInstance
    {
        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Azure.Sql.GetSqlManagedInstance.InvokeAsync(new Azure.Sql.GetSqlManagedInstanceArgs
        ///         {
        ///             Name = "example_mi",
        ///             ResourceGroupName = "example-resources",
        ///         }));
        ///         this.SqlInstanceId = example.Apply(example =&gt; example.Id);
        ///     }
        /// 
        ///     [Output("sqlInstanceId")]
        ///     public Output&lt;string&gt; SqlInstanceId { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetSqlManagedInstanceResult> InvokeAsync(GetSqlManagedInstanceArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetSqlManagedInstanceResult>("azure:sql/getSqlManagedInstance:getSqlManagedInstance", args ?? new GetSqlManagedInstanceArgs(), options.WithDefaults());

        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Azure.Sql.GetSqlManagedInstance.InvokeAsync(new Azure.Sql.GetSqlManagedInstanceArgs
        ///         {
        ///             Name = "example_mi",
        ///             ResourceGroupName = "example-resources",
        ///         }));
        ///         this.SqlInstanceId = example.Apply(example =&gt; example.Id);
        ///     }
        /// 
        ///     [Output("sqlInstanceId")]
        ///     public Output&lt;string&gt; SqlInstanceId { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetSqlManagedInstanceResult> Invoke(GetSqlManagedInstanceInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetSqlManagedInstanceResult>("azure:sql/getSqlManagedInstance:getSqlManagedInstance", args ?? new GetSqlManagedInstanceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSqlManagedInstanceArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the SQL Managed Instance.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group in which the SQL Managed Instance exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// A mapping of tags assigned to the resource.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetSqlManagedInstanceArgs()
        {
        }
    }

    public sealed class GetSqlManagedInstanceInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the SQL Managed Instance.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group in which the SQL Managed Instance exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags assigned to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetSqlManagedInstanceInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetSqlManagedInstanceResult
    {
        /// <summary>
        /// The administrator login name for the new server.
        /// </summary>
        public readonly string AdministratorLogin;
        /// <summary>
        /// Specifies how the SQL Managed Instance is collated.
        /// </summary>
        public readonly string Collation;
        /// <summary>
        /// The ID of the Managed Instance which is sharing the DNS zone.
        /// </summary>
        public readonly string DnsZonePartnerId;
        /// <summary>
        /// The fully qualified domain name of the Azure Managed SQL Instance.
        /// </summary>
        public readonly string Fqdn;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSqlManagedInstanceIdentityResult> Identities;
        /// <summary>
        /// Type of license the Managed Instance uses.
        /// </summary>
        public readonly string LicenseType;
        /// <summary>
        /// Location where the resource exists.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The Minimum TLS Version.
        /// </summary>
        public readonly string MinimumTlsVersion;
        public readonly string Name;
        /// <summary>
        /// How the SQL Managed Instance is accessed.
        /// </summary>
        public readonly string ProxyOverride;
        /// <summary>
        /// Is the public data endpoint enabled?
        /// </summary>
        public readonly bool PublicDataEndpointEnabled;
        public readonly string ResourceGroupName;
        /// <summary>
        /// SKU Name for the SQL Managed Instance.
        /// </summary>
        public readonly string SkuName;
        /// <summary>
        /// Storage account type used to store backups for this SQL Managed Instance.
        /// </summary>
        public readonly string StorageAccountType;
        /// <summary>
        /// Maximum storage space for your instance.
        /// </summary>
        public readonly int StorageSizeInGb;
        /// <summary>
        /// The subnet resource id that the SQL Managed Instance is associated with.
        /// </summary>
        public readonly string SubnetId;
        /// <summary>
        /// A mapping of tags assigned to the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The TimeZone ID that the SQL Managed Instance is operating in.
        /// </summary>
        public readonly string TimezoneId;
        /// <summary>
        /// Number of cores assigned to your instance.
        /// </summary>
        public readonly int Vcores;

        [OutputConstructor]
        private GetSqlManagedInstanceResult(
            string administratorLogin,

            string collation,

            string dnsZonePartnerId,

            string fqdn,

            string id,

            ImmutableArray<Outputs.GetSqlManagedInstanceIdentityResult> identities,

            string licenseType,

            string location,

            string minimumTlsVersion,

            string name,

            string proxyOverride,

            bool publicDataEndpointEnabled,

            string resourceGroupName,

            string skuName,

            string storageAccountType,

            int storageSizeInGb,

            string subnetId,

            ImmutableDictionary<string, string>? tags,

            string timezoneId,

            int vcores)
        {
            AdministratorLogin = administratorLogin;
            Collation = collation;
            DnsZonePartnerId = dnsZonePartnerId;
            Fqdn = fqdn;
            Id = id;
            Identities = identities;
            LicenseType = licenseType;
            Location = location;
            MinimumTlsVersion = minimumTlsVersion;
            Name = name;
            ProxyOverride = proxyOverride;
            PublicDataEndpointEnabled = publicDataEndpointEnabled;
            ResourceGroupName = resourceGroupName;
            SkuName = skuName;
            StorageAccountType = storageAccountType;
            StorageSizeInGb = storageSizeInGb;
            SubnetId = subnetId;
            Tags = tags;
            TimezoneId = timezoneId;
            Vcores = vcores;
        }
    }
}
