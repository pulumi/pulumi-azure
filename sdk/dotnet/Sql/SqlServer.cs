// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Sql
{
    /// <summary>
    /// Manages a SQL Azure Database Server.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/sql_server.html.markdown.
    /// </summary>
    public partial class SqlServer : Pulumi.CustomResource
    {
        /// <summary>
        /// The administrator login name for the new server. Changing this forces a new resource to be created.
        /// </summary>
        [Output("administratorLogin")]
        public Output<string> AdministratorLogin { get; private set; } = null!;

        /// <summary>
        /// The password associated with the `administrator_login` user. Needs to comply with Azure's [Password Policy](https://msdn.microsoft.com/library/ms161959.aspx)
        /// </summary>
        [Output("administratorLoginPassword")]
        public Output<string> AdministratorLoginPassword { get; private set; } = null!;

        /// <summary>
        /// A `extended_auditing_policy` block as defined below.
        /// </summary>
        [Output("extendedAuditingPolicy")]
        public Output<Outputs.SqlServerExtendedAuditingPolicy?> ExtendedAuditingPolicy { get; private set; } = null!;

        /// <summary>
        /// The fully qualified domain name of the Azure SQL Server (e.g. myServerName.database.windows.net)
        /// </summary>
        [Output("fullyQualifiedDomainName")]
        public Output<string> FullyQualifiedDomainName { get; private set; } = null!;

        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.SqlServerIdentity?> Identity { get; private set; } = null!;

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the SQL Server. This needs to be globally unique within Azure.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the resource group in which to create the SQL Server.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The version for the new server. Valid values are: 2.0 (for v11 server) and 12.0 (for v12 server).
        /// </summary>
        [Output("version")]
        public Output<string> Version { get; private set; } = null!;


        /// <summary>
        /// Create a SqlServer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SqlServer(string name, SqlServerArgs args, CustomResourceOptions? options = null)
            : base("azure:sql/sqlServer:SqlServer", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private SqlServer(string name, Input<string> id, SqlServerState? state = null, CustomResourceOptions? options = null)
            : base("azure:sql/sqlServer:SqlServer", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SqlServer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SqlServer Get(string name, Input<string> id, SqlServerState? state = null, CustomResourceOptions? options = null)
        {
            return new SqlServer(name, id, state, options);
        }
    }

    public sealed class SqlServerArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The administrator login name for the new server. Changing this forces a new resource to be created.
        /// </summary>
        [Input("administratorLogin", required: true)]
        public Input<string> AdministratorLogin { get; set; } = null!;

        /// <summary>
        /// The password associated with the `administrator_login` user. Needs to comply with Azure's [Password Policy](https://msdn.microsoft.com/library/ms161959.aspx)
        /// </summary>
        [Input("administratorLoginPassword", required: true)]
        public Input<string> AdministratorLoginPassword { get; set; } = null!;

        /// <summary>
        /// A `extended_auditing_policy` block as defined below.
        /// </summary>
        [Input("extendedAuditingPolicy")]
        public Input<Inputs.SqlServerExtendedAuditingPolicyArgs>? ExtendedAuditingPolicy { get; set; }

        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.SqlServerIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the SQL Server. This needs to be globally unique within Azure.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the resource group in which to create the SQL Server.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The version for the new server. Valid values are: 2.0 (for v11 server) and 12.0 (for v12 server).
        /// </summary>
        [Input("version", required: true)]
        public Input<string> Version { get; set; } = null!;

        public SqlServerArgs()
        {
        }
    }

    public sealed class SqlServerState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The administrator login name for the new server. Changing this forces a new resource to be created.
        /// </summary>
        [Input("administratorLogin")]
        public Input<string>? AdministratorLogin { get; set; }

        /// <summary>
        /// The password associated with the `administrator_login` user. Needs to comply with Azure's [Password Policy](https://msdn.microsoft.com/library/ms161959.aspx)
        /// </summary>
        [Input("administratorLoginPassword")]
        public Input<string>? AdministratorLoginPassword { get; set; }

        /// <summary>
        /// A `extended_auditing_policy` block as defined below.
        /// </summary>
        [Input("extendedAuditingPolicy")]
        public Input<Inputs.SqlServerExtendedAuditingPolicyGetArgs>? ExtendedAuditingPolicy { get; set; }

        /// <summary>
        /// The fully qualified domain name of the Azure SQL Server (e.g. myServerName.database.windows.net)
        /// </summary>
        [Input("fullyQualifiedDomainName")]
        public Input<string>? FullyQualifiedDomainName { get; set; }

        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.SqlServerIdentityGetArgs>? Identity { get; set; }

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the SQL Server. This needs to be globally unique within Azure.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the resource group in which to create the SQL Server.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The version for the new server. Valid values are: 2.0 (for v11 server) and 12.0 (for v12 server).
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public SqlServerState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class SqlServerExtendedAuditingPolicyArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Optional) Specifies the number of days to retain logs for in the storage account.
        /// </summary>
        [Input("retentionInDays")]
        public Input<int>? RetentionInDays { get; set; }

        /// <summary>
        /// (Required)  Specifies the access key to use for the auditing storage account.
        /// </summary>
        [Input("storageAccountAccessKey", required: true)]
        public Input<string> StorageAccountAccessKey { get; set; } = null!;

        /// <summary>
        /// (Optional) Specifies whether `storage_account_access_key` value is the storage's secondary key.
        /// </summary>
        [Input("storageAccountAccessKeyIsSecondary")]
        public Input<bool>? StorageAccountAccessKeyIsSecondary { get; set; }

        /// <summary>
        /// (Required) Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net).
        /// </summary>
        [Input("storageEndpoint", required: true)]
        public Input<string> StorageEndpoint { get; set; } = null!;

        public SqlServerExtendedAuditingPolicyArgs()
        {
        }
    }

    public sealed class SqlServerExtendedAuditingPolicyGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Optional) Specifies the number of days to retain logs for in the storage account.
        /// </summary>
        [Input("retentionInDays")]
        public Input<int>? RetentionInDays { get; set; }

        /// <summary>
        /// (Required)  Specifies the access key to use for the auditing storage account.
        /// </summary>
        [Input("storageAccountAccessKey", required: true)]
        public Input<string> StorageAccountAccessKey { get; set; } = null!;

        /// <summary>
        /// (Optional) Specifies whether `storage_account_access_key` value is the storage's secondary key.
        /// </summary>
        [Input("storageAccountAccessKeyIsSecondary")]
        public Input<bool>? StorageAccountAccessKeyIsSecondary { get; set; }

        /// <summary>
        /// (Required) Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net).
        /// </summary>
        [Input("storageEndpoint", required: true)]
        public Input<string> StorageEndpoint { get; set; } = null!;

        public SqlServerExtendedAuditingPolicyGetArgs()
        {
        }
    }

    public sealed class SqlServerIdentityArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Principal ID for the Service Principal associated with the Identity of this SQL Server.
        /// </summary>
        [Input("principalId")]
        public Input<string>? PrincipalId { get; set; }

        /// <summary>
        /// The Tenant ID for the Service Principal associated with the Identity of this SQL Server.
        /// </summary>
        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        /// <summary>
        /// Specifies the identity type of the SQL Server. At this time the only allowed value is `SystemAssigned`.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public SqlServerIdentityArgs()
        {
        }
    }

    public sealed class SqlServerIdentityGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Principal ID for the Service Principal associated with the Identity of this SQL Server.
        /// </summary>
        [Input("principalId")]
        public Input<string>? PrincipalId { get; set; }

        /// <summary>
        /// The Tenant ID for the Service Principal associated with the Identity of this SQL Server.
        /// </summary>
        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        /// <summary>
        /// Specifies the identity type of the SQL Server. At this time the only allowed value is `SystemAssigned`.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public SqlServerIdentityGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class SqlServerExtendedAuditingPolicy
    {
        /// <summary>
        /// (Optional) Specifies the number of days to retain logs for in the storage account.
        /// </summary>
        public readonly int? RetentionInDays;
        /// <summary>
        /// (Required)  Specifies the access key to use for the auditing storage account.
        /// </summary>
        public readonly string StorageAccountAccessKey;
        /// <summary>
        /// (Optional) Specifies whether `storage_account_access_key` value is the storage's secondary key.
        /// </summary>
        public readonly bool? StorageAccountAccessKeyIsSecondary;
        /// <summary>
        /// (Required) Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net).
        /// </summary>
        public readonly string StorageEndpoint;

        [OutputConstructor]
        private SqlServerExtendedAuditingPolicy(
            int? retentionInDays,
            string storageAccountAccessKey,
            bool? storageAccountAccessKeyIsSecondary,
            string storageEndpoint)
        {
            RetentionInDays = retentionInDays;
            StorageAccountAccessKey = storageAccountAccessKey;
            StorageAccountAccessKeyIsSecondary = storageAccountAccessKeyIsSecondary;
            StorageEndpoint = storageEndpoint;
        }
    }

    [OutputType]
    public sealed class SqlServerIdentity
    {
        /// <summary>
        /// The Principal ID for the Service Principal associated with the Identity of this SQL Server.
        /// </summary>
        public readonly string PrincipalId;
        /// <summary>
        /// The Tenant ID for the Service Principal associated with the Identity of this SQL Server.
        /// </summary>
        public readonly string TenantId;
        /// <summary>
        /// Specifies the identity type of the SQL Server. At this time the only allowed value is `SystemAssigned`.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private SqlServerIdentity(
            string principalId,
            string tenantId,
            string type)
        {
            PrincipalId = principalId;
            TenantId = tenantId;
            Type = type;
        }
    }
    }
}
