// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Sql.Outputs
{

    [OutputType]
    public sealed class SqlServerExtendedAuditingPolicy
    {
        /// <summary>
        /// (Optional) Enable audit events to Azure Monitor? To enable server audit events to Azure Monitor, please enable its primary database audit events to Azure Monitor.
        /// </summary>
        public readonly bool? LogMonitoringEnabled;
        /// <summary>
        /// (Optional) Specifies the number of days to retain logs for in the storage account.
        /// </summary>
        public readonly int? RetentionInDays;
        /// <summary>
        /// (Optional)  Specifies the access key to use for the auditing storage account.
        /// </summary>
        public readonly string? StorageAccountAccessKey;
        /// <summary>
        /// (Optional) Specifies whether `storage_account_access_key` value is the storage's secondary key.
        /// </summary>
        public readonly bool? StorageAccountAccessKeyIsSecondary;
        /// <summary>
        /// (Optional) Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net).
        /// </summary>
        public readonly string? StorageEndpoint;

        [OutputConstructor]
        private SqlServerExtendedAuditingPolicy(
            bool? logMonitoringEnabled,

            int? retentionInDays,

            string? storageAccountAccessKey,

            bool? storageAccountAccessKeyIsSecondary,

            string? storageEndpoint)
        {
            LogMonitoringEnabled = logMonitoringEnabled;
            RetentionInDays = retentionInDays;
            StorageAccountAccessKey = storageAccountAccessKey;
            StorageAccountAccessKeyIsSecondary = storageAccountAccessKeyIsSecondary;
            StorageEndpoint = storageEndpoint;
        }
    }
}
