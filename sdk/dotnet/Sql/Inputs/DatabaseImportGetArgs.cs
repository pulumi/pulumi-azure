// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Sql.Inputs
{

    public sealed class DatabaseImportGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the name of the SQL administrator.
        /// </summary>
        [Input("administratorLogin", required: true)]
        public Input<string> AdministratorLogin { get; set; } = null!;

        [Input("administratorLoginPassword", required: true)]
        private Input<string>? _administratorLoginPassword;

        /// <summary>
        /// Specifies the password of the SQL administrator.
        /// </summary>
        public Input<string>? AdministratorLoginPassword
        {
            get => _administratorLoginPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _administratorLoginPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Specifies the type of authentication used to access the server. Valid values are `SQL` or `ADPassword`.
        /// </summary>
        [Input("authenticationType", required: true)]
        public Input<string> AuthenticationType { get; set; } = null!;

        /// <summary>
        /// Specifies the type of import operation being performed. The only allowable value is `Import`. Defaults to `Import`.
        /// </summary>
        [Input("operationMode")]
        public Input<string>? OperationMode { get; set; }

        [Input("storageKey", required: true)]
        private Input<string>? _storageKey;

        /// <summary>
        /// Specifies the access key for the storage account.
        /// </summary>
        public Input<string>? StorageKey
        {
            get => _storageKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _storageKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Specifies the type of access key for the storage account. Valid values are `StorageAccessKey` or `SharedAccessKey`.
        /// </summary>
        [Input("storageKeyType", required: true)]
        public Input<string> StorageKeyType { get; set; } = null!;

        /// <summary>
        /// Specifies the blob URI of the .bacpac file.
        /// </summary>
        [Input("storageUri", required: true)]
        public Input<string> StorageUri { get; set; } = null!;

        public DatabaseImportGetArgs()
        {
        }
        public static new DatabaseImportGetArgs Empty => new DatabaseImportGetArgs();
    }
}
