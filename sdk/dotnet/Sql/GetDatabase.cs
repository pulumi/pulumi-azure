// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Sql
{
    public static partial class Invokes
    {
        /// <summary>
        /// Use this data source to access information about an existing SQL Azure Database.
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/d/sql_database.html.markdown.
        /// </summary>
        [Obsolete("Use GetDatabase.InvokeAsync() instead")]
        public static Task<GetDatabaseResult> GetDatabase(GetDatabaseArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDatabaseResult>("azure:sql/getDatabase:getDatabase", args ?? InvokeArgs.Empty, options.WithVersion());
    }
    public static class GetDatabase
    {
        /// <summary>
        /// Use this data source to access information about an existing SQL Azure Database.
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/d/sql_database.html.markdown.
        /// </summary>
        public static Task<GetDatabaseResult> InvokeAsync(GetDatabaseArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDatabaseResult>("azure:sql/getDatabase:getDatabase", args ?? InvokeArgs.Empty, options.WithVersion());
    }

    public sealed class GetDatabaseArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the SQL Database.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the Resource Group where the Azure SQL Database exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the SQL Server.
        /// </summary>
        [Input("serverName", required: true)]
        public string ServerName { get; set; } = null!;

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// A mapping of tags assigned to the resource.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetDatabaseArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetDatabaseResult
    {
        /// <summary>
        /// The name of the collation. 
        /// </summary>
        public readonly string Collation;
        /// <summary>
        /// The default secondary location of the SQL Database.
        /// </summary>
        public readonly string DefaultSecondaryLocation;
        /// <summary>
        /// The edition of the database.
        /// </summary>
        public readonly string Edition;
        /// <summary>
        /// The name of the elastic database pool the database belongs to.
        /// </summary>
        public readonly string ElasticPoolName;
        /// <summary>
        /// The ID of the failover group the database belongs to.
        /// </summary>
        public readonly string FailoverGroupId;
        /// <summary>
        /// The location of the Resource Group in which the SQL Server exists.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the database.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Indicate if read-only connections will be redirected to a high-available replica.
        /// </summary>
        public readonly bool ReadScale;
        /// <summary>
        /// The name of the resource group in which the database resides. This will always be the same resource group as the Database Server.
        /// </summary>
        public readonly string ResourceGroupName;
        /// <summary>
        /// The name of the SQL Server on which to create the database.
        /// </summary>
        public readonly string ServerName;
        /// <summary>
        /// A mapping of tags assigned to the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetDatabaseResult(
            string collation,
            string defaultSecondaryLocation,
            string edition,
            string elasticPoolName,
            string failoverGroupId,
            string location,
            string name,
            bool readScale,
            string resourceGroupName,
            string serverName,
            ImmutableDictionary<string, string>? tags,
            string id)
        {
            Collation = collation;
            DefaultSecondaryLocation = defaultSecondaryLocation;
            Edition = edition;
            ElasticPoolName = elasticPoolName;
            FailoverGroupId = failoverGroupId;
            Location = location;
            Name = name;
            ReadScale = readScale;
            ResourceGroupName = resourceGroupName;
            ServerName = serverName;
            Tags = tags;
            Id = id;
        }
    }
}
