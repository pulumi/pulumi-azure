// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.DomainServices
{
    /// <summary>
    /// Manages a Replica Set for an Active Directory Domain Service.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// using AzureAD = Pulumi.AzureAD;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var primaryResourceGroup = new Azure.Core.ResourceGroup("primaryResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var primaryVirtualNetwork = new Azure.Network.VirtualNetwork("primaryVirtualNetwork", new()
    ///     {
    ///         Location = primaryResourceGroup.Location,
    ///         ResourceGroupName = primaryResourceGroup.Name,
    ///         AddressSpaces = new[]
    ///         {
    ///             "10.0.1.0/16",
    ///         },
    ///     });
    /// 
    ///     var primarySubnet = new Azure.Network.Subnet("primarySubnet", new()
    ///     {
    ///         ResourceGroupName = primaryResourceGroup.Name,
    ///         VirtualNetworkName = primaryVirtualNetwork.Name,
    ///         AddressPrefixes = new[]
    ///         {
    ///             "10.0.1.0/24",
    ///         },
    ///     });
    /// 
    ///     var primaryNetworkSecurityGroup = new Azure.Network.NetworkSecurityGroup("primaryNetworkSecurityGroup", new()
    ///     {
    ///         Location = primaryResourceGroup.Location,
    ///         ResourceGroupName = primaryResourceGroup.Name,
    ///         SecurityRules = new[]
    ///         {
    ///             new Azure.Network.Inputs.NetworkSecurityGroupSecurityRuleArgs
    ///             {
    ///                 Name = "AllowSyncWithAzureAD",
    ///                 Priority = 101,
    ///                 Direction = "Inbound",
    ///                 Access = "Allow",
    ///                 Protocol = "Tcp",
    ///                 SourcePortRange = "*",
    ///                 DestinationPortRange = "443",
    ///                 SourceAddressPrefix = "AzureActiveDirectoryDomainServices",
    ///                 DestinationAddressPrefix = "*",
    ///             },
    ///             new Azure.Network.Inputs.NetworkSecurityGroupSecurityRuleArgs
    ///             {
    ///                 Name = "AllowRD",
    ///                 Priority = 201,
    ///                 Direction = "Inbound",
    ///                 Access = "Allow",
    ///                 Protocol = "Tcp",
    ///                 SourcePortRange = "*",
    ///                 DestinationPortRange = "3389",
    ///                 SourceAddressPrefix = "CorpNetSaw",
    ///                 DestinationAddressPrefix = "*",
    ///             },
    ///             new Azure.Network.Inputs.NetworkSecurityGroupSecurityRuleArgs
    ///             {
    ///                 Name = "AllowPSRemoting",
    ///                 Priority = 301,
    ///                 Direction = "Inbound",
    ///                 Access = "Allow",
    ///                 Protocol = "Tcp",
    ///                 SourcePortRange = "*",
    ///                 DestinationPortRange = "5986",
    ///                 SourceAddressPrefix = "AzureActiveDirectoryDomainServices",
    ///                 DestinationAddressPrefix = "*",
    ///             },
    ///             new Azure.Network.Inputs.NetworkSecurityGroupSecurityRuleArgs
    ///             {
    ///                 Name = "AllowLDAPS",
    ///                 Priority = 401,
    ///                 Direction = "Inbound",
    ///                 Access = "Allow",
    ///                 Protocol = "Tcp",
    ///                 SourcePortRange = "*",
    ///                 DestinationPortRange = "636",
    ///                 SourceAddressPrefix = "*",
    ///                 DestinationAddressPrefix = "*",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var primarySubnetNetworkSecurityGroupAssociation = new Azure.Network.SubnetNetworkSecurityGroupAssociation("primarySubnetNetworkSecurityGroupAssociation", new()
    ///     {
    ///         SubnetId = primarySubnet.Id,
    ///         NetworkSecurityGroupId = primaryNetworkSecurityGroup.Id,
    ///     });
    /// 
    ///     var dcAdmins = new AzureAD.Group("dcAdmins", new()
    ///     {
    ///         DisplayName = "aad-dc-administrators",
    ///         SecurityEnabled = true,
    ///     });
    /// 
    ///     var adminUser = new AzureAD.User("adminUser", new()
    ///     {
    ///         UserPrincipalName = "dc-admin@hashicorp-example.net",
    ///         DisplayName = "DC Administrator",
    ///         Password = "Pa55w0Rd!!1",
    ///     });
    /// 
    ///     var adminGroupMember = new AzureAD.GroupMember("adminGroupMember", new()
    ///     {
    ///         GroupObjectId = dcAdmins.ObjectId,
    ///         MemberObjectId = adminUser.ObjectId,
    ///     });
    /// 
    ///     var exampleServicePrincipal = new AzureAD.ServicePrincipal("exampleServicePrincipal", new()
    ///     {
    ///         ApplicationId = "2565bd9d-da50-47d4-8b85-4c97f669dc36",
    ///     });
    /// 
    ///     // published app for domain services
    ///     var aadds = new Azure.Core.ResourceGroup("aadds", new()
    ///     {
    ///         Location = "westeurope",
    ///     });
    /// 
    ///     var exampleService = new Azure.DomainServices.Service("exampleService", new()
    ///     {
    ///         Location = aadds.Location,
    ///         ResourceGroupName = aadds.Name,
    ///         DomainName = "widgetslogin.net",
    ///         Sku = "Enterprise",
    ///         FilteredSyncEnabled = false,
    ///         InitialReplicaSet = new Azure.DomainServices.Inputs.ServiceInitialReplicaSetArgs
    ///         {
    ///             Location = primaryVirtualNetwork.Location,
    ///             SubnetId = primarySubnet.Id,
    ///         },
    ///         Notifications = new Azure.DomainServices.Inputs.ServiceNotificationsArgs
    ///         {
    ///             AdditionalRecipients = new[]
    ///             {
    ///                 "notifyA@example.net",
    ///                 "notifyB@example.org",
    ///             },
    ///             NotifyDcAdmins = true,
    ///             NotifyGlobalAdmins = true,
    ///         },
    ///         Security = new Azure.DomainServices.Inputs.ServiceSecurityArgs
    ///         {
    ///             SyncKerberosPasswords = true,
    ///             SyncNtlmPasswords = true,
    ///             SyncOnPremPasswords = true,
    ///         },
    ///         Tags = 
    ///         {
    ///             { "Environment", "prod" },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             exampleServicePrincipal,
    ///             primarySubnetNetworkSecurityGroupAssociation,
    ///         },
    ///     });
    /// 
    ///     var replicaResourceGroup = new Azure.Core.ResourceGroup("replicaResourceGroup", new()
    ///     {
    ///         Location = "North Europe",
    ///     });
    /// 
    ///     var replicaVirtualNetwork = new Azure.Network.VirtualNetwork("replicaVirtualNetwork", new()
    ///     {
    ///         Location = replicaResourceGroup.Location,
    ///         ResourceGroupName = replicaResourceGroup.Name,
    ///         AddressSpaces = new[]
    ///         {
    ///             "10.20.0.0/16",
    ///         },
    ///     });
    /// 
    ///     var aaddsReplicaSubnet = new Azure.Network.Subnet("aaddsReplicaSubnet", new()
    ///     {
    ///         ResourceGroupName = replicaResourceGroup.Name,
    ///         VirtualNetworkName = replicaVirtualNetwork.Name,
    ///         AddressPrefixes = new[]
    ///         {
    ///             "10.20.0.0/24",
    ///         },
    ///     });
    /// 
    ///     var aaddsReplicaNetworkSecurityGroup = new Azure.Network.NetworkSecurityGroup("aaddsReplicaNetworkSecurityGroup", new()
    ///     {
    ///         Location = replicaResourceGroup.Location,
    ///         ResourceGroupName = replicaResourceGroup.Name,
    ///         SecurityRules = new[]
    ///         {
    ///             new Azure.Network.Inputs.NetworkSecurityGroupSecurityRuleArgs
    ///             {
    ///                 Name = "AllowSyncWithAzureAD",
    ///                 Priority = 101,
    ///                 Direction = "Inbound",
    ///                 Access = "Allow",
    ///                 Protocol = "Tcp",
    ///                 SourcePortRange = "*",
    ///                 DestinationPortRange = "443",
    ///                 SourceAddressPrefix = "AzureActiveDirectoryDomainServices",
    ///                 DestinationAddressPrefix = "*",
    ///             },
    ///             new Azure.Network.Inputs.NetworkSecurityGroupSecurityRuleArgs
    ///             {
    ///                 Name = "AllowRD",
    ///                 Priority = 201,
    ///                 Direction = "Inbound",
    ///                 Access = "Allow",
    ///                 Protocol = "Tcp",
    ///                 SourcePortRange = "*",
    ///                 DestinationPortRange = "3389",
    ///                 SourceAddressPrefix = "CorpNetSaw",
    ///                 DestinationAddressPrefix = "*",
    ///             },
    ///             new Azure.Network.Inputs.NetworkSecurityGroupSecurityRuleArgs
    ///             {
    ///                 Name = "AllowPSRemoting",
    ///                 Priority = 301,
    ///                 Direction = "Inbound",
    ///                 Access = "Allow",
    ///                 Protocol = "Tcp",
    ///                 SourcePortRange = "*",
    ///                 DestinationPortRange = "5986",
    ///                 SourceAddressPrefix = "AzureActiveDirectoryDomainServices",
    ///                 DestinationAddressPrefix = "*",
    ///             },
    ///             new Azure.Network.Inputs.NetworkSecurityGroupSecurityRuleArgs
    ///             {
    ///                 Name = "AllowLDAPS",
    ///                 Priority = 401,
    ///                 Direction = "Inbound",
    ///                 Access = "Allow",
    ///                 Protocol = "Tcp",
    ///                 SourcePortRange = "*",
    ///                 DestinationPortRange = "636",
    ///                 SourceAddressPrefix = "*",
    ///                 DestinationAddressPrefix = "*",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var replicaSubnetNetworkSecurityGroupAssociation = new Azure.Network.SubnetNetworkSecurityGroupAssociation("replicaSubnetNetworkSecurityGroupAssociation", new()
    ///     {
    ///         SubnetId = aaddsReplicaSubnet.Id,
    ///         NetworkSecurityGroupId = aaddsReplicaNetworkSecurityGroup.Id,
    ///     });
    /// 
    ///     var primaryReplica = new Azure.Network.VirtualNetworkPeering("primaryReplica", new()
    ///     {
    ///         ResourceGroupName = primaryVirtualNetwork.ResourceGroupName,
    ///         VirtualNetworkName = primaryVirtualNetwork.Name,
    ///         RemoteVirtualNetworkId = replicaVirtualNetwork.Id,
    ///         AllowForwardedTraffic = true,
    ///         AllowGatewayTransit = false,
    ///         AllowVirtualNetworkAccess = true,
    ///         UseRemoteGateways = false,
    ///     });
    /// 
    ///     var replicaPrimary = new Azure.Network.VirtualNetworkPeering("replicaPrimary", new()
    ///     {
    ///         ResourceGroupName = replicaVirtualNetwork.ResourceGroupName,
    ///         VirtualNetworkName = replicaVirtualNetwork.Name,
    ///         RemoteVirtualNetworkId = primaryVirtualNetwork.Id,
    ///         AllowForwardedTraffic = true,
    ///         AllowGatewayTransit = false,
    ///         AllowVirtualNetworkAccess = true,
    ///         UseRemoteGateways = false,
    ///     });
    /// 
    ///     var replicaVirtualNetworkDnsServers = new Azure.Network.VirtualNetworkDnsServers("replicaVirtualNetworkDnsServers", new()
    ///     {
    ///         VirtualNetworkId = replicaVirtualNetwork.Id,
    ///         DnsServers = exampleService.InitialReplicaSet.Apply(initialReplicaSet =&gt; initialReplicaSet.DomainControllerIpAddresses),
    ///     });
    /// 
    ///     var replicaReplicaSet = new Azure.DomainServices.ReplicaSet("replicaReplicaSet", new()
    ///     {
    ///         DomainServiceId = exampleService.Id,
    ///         Location = replicaResourceGroup.Location,
    ///         SubnetId = aaddsReplicaSubnet.Id,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             replicaSubnetNetworkSecurityGroupAssociation,
    ///             primaryReplica,
    ///             replicaPrimary,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Domain Service Replica Sets can be imported using the resource ID of the parent Domain Service and the Replica Set ID, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:domainservices/replicaSet:ReplicaSet example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.AAD/domainServices/instance1/replicaSets/00000000-0000-0000-0000-000000000000
    /// ```
    /// </summary>
    [AzureResourceType("azure:domainservices/replicaSet:ReplicaSet")]
    public partial class ReplicaSet : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A list of subnet IP addresses for the domain controllers in this Replica Set, typically two.
        /// </summary>
        [Output("domainControllerIpAddresses")]
        public Output<ImmutableArray<string>> DomainControllerIpAddresses { get; private set; } = null!;

        /// <summary>
        /// The ID of the Domain Service for which to create this Replica Set. Changing this forces a new resource to be created.
        /// </summary>
        [Output("domainServiceId")]
        public Output<string> DomainServiceId { get; private set; } = null!;

        /// <summary>
        /// The publicly routable IP address for the domain controllers in this Replica Set.
        /// </summary>
        [Output("externalAccessIpAddress")]
        public Output<string> ExternalAccessIpAddress { get; private set; } = null!;

        /// <summary>
        /// The Azure location where this Replica Set should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The current service status for the replica set.
        /// </summary>
        [Output("serviceStatus")]
        public Output<string> ServiceStatus { get; private set; } = null!;

        /// <summary>
        /// The ID of the subnet in which to place this Replica Set. Changing this forces a new resource to be created.
        /// </summary>
        [Output("subnetId")]
        public Output<string> SubnetId { get; private set; } = null!;


        /// <summary>
        /// Create a ReplicaSet resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ReplicaSet(string name, ReplicaSetArgs args, CustomResourceOptions? options = null)
            : base("azure:domainservices/replicaSet:ReplicaSet", name, args ?? new ReplicaSetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ReplicaSet(string name, Input<string> id, ReplicaSetState? state = null, CustomResourceOptions? options = null)
            : base("azure:domainservices/replicaSet:ReplicaSet", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ReplicaSet resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ReplicaSet Get(string name, Input<string> id, ReplicaSetState? state = null, CustomResourceOptions? options = null)
        {
            return new ReplicaSet(name, id, state, options);
        }
    }

    public sealed class ReplicaSetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Domain Service for which to create this Replica Set. Changing this forces a new resource to be created.
        /// </summary>
        [Input("domainServiceId", required: true)]
        public Input<string> DomainServiceId { get; set; } = null!;

        /// <summary>
        /// The Azure location where this Replica Set should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The ID of the subnet in which to place this Replica Set. Changing this forces a new resource to be created.
        /// </summary>
        [Input("subnetId", required: true)]
        public Input<string> SubnetId { get; set; } = null!;

        public ReplicaSetArgs()
        {
        }
        public static new ReplicaSetArgs Empty => new ReplicaSetArgs();
    }

    public sealed class ReplicaSetState : global::Pulumi.ResourceArgs
    {
        [Input("domainControllerIpAddresses")]
        private InputList<string>? _domainControllerIpAddresses;

        /// <summary>
        /// A list of subnet IP addresses for the domain controllers in this Replica Set, typically two.
        /// </summary>
        public InputList<string> DomainControllerIpAddresses
        {
            get => _domainControllerIpAddresses ?? (_domainControllerIpAddresses = new InputList<string>());
            set => _domainControllerIpAddresses = value;
        }

        /// <summary>
        /// The ID of the Domain Service for which to create this Replica Set. Changing this forces a new resource to be created.
        /// </summary>
        [Input("domainServiceId")]
        public Input<string>? DomainServiceId { get; set; }

        /// <summary>
        /// The publicly routable IP address for the domain controllers in this Replica Set.
        /// </summary>
        [Input("externalAccessIpAddress")]
        public Input<string>? ExternalAccessIpAddress { get; set; }

        /// <summary>
        /// The Azure location where this Replica Set should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The current service status for the replica set.
        /// </summary>
        [Input("serviceStatus")]
        public Input<string>? ServiceStatus { get; set; }

        /// <summary>
        /// The ID of the subnet in which to place this Replica Set. Changing this forces a new resource to be created.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        public ReplicaSetState()
        {
        }
        public static new ReplicaSetState Empty => new ReplicaSetState();
    }
}
