// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.DomainServices.Inputs
{

    public sealed class ServiceSecureLdapGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("certificateExpiry")]
        public Input<string>? CertificateExpiry { get; set; }

        [Input("certificateThumbprint")]
        public Input<string>? CertificateThumbprint { get; set; }

        /// <summary>
        /// Whether to enable secure LDAP for the managed domain. Defaults to `false`. For more information, please see [official documentation on enabling LDAPS](https://docs.microsoft.com/azure/active-directory-domain-services/tutorial-configure-ldaps), paying particular attention to the section on network security to avoid unnecessarily exposing your service to Internet-borne bruteforce attacks.
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// Whether to enable external access to LDAPS over the Internet. Defaults to `false`.
        /// </summary>
        [Input("externalAccessEnabled")]
        public Input<bool>? ExternalAccessEnabled { get; set; }

        [Input("pfxCertificate", required: true)]
        private Input<string>? _pfxCertificate;

        /// <summary>
        /// The certificate/private key to use for LDAPS, as a base64-encoded TripleDES-SHA1 encrypted PKCS#12 bundle (PFX file).
        /// </summary>
        public Input<string>? PfxCertificate
        {
            get => _pfxCertificate;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _pfxCertificate = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("pfxCertificatePassword", required: true)]
        private Input<string>? _pfxCertificatePassword;

        /// <summary>
        /// The password to use for decrypting the PKCS#12 bundle (PFX file).
        /// </summary>
        public Input<string>? PfxCertificatePassword
        {
            get => _pfxCertificatePassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _pfxCertificatePassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("publicCertificate")]
        public Input<string>? PublicCertificate { get; set; }

        public ServiceSecureLdapGetArgs()
        {
        }
        public static new ServiceSecureLdapGetArgs Empty => new ServiceSecureLdapGetArgs();
    }
}
