// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.DomainServices
{
    public static class GetService
    {
        /// <summary>
        /// Gets information about an Active Directory Domain Service.
        /// 
        /// &gt; **Supported Modes:** At present this data source only supports **User Forest** mode and _not_ **Resource Forest** mode. [Read more](https://docs.microsoft.com/azure/active-directory-domain-services/concepts-resource-forest) about the different operation modes for this service.
        /// </summary>
        public static Task<GetServiceResult> InvokeAsync(GetServiceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServiceResult>("azure:domainservices/getService:getService", args ?? new GetServiceArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about an Active Directory Domain Service.
        /// 
        /// &gt; **Supported Modes:** At present this data source only supports **User Forest** mode and _not_ **Resource Forest** mode. [Read more](https://docs.microsoft.com/azure/active-directory-domain-services/concepts-resource-forest) about the different operation modes for this service.
        /// </summary>
        public static Output<GetServiceResult> Invoke(GetServiceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServiceResult>("azure:domainservices/getService:getService", args ?? new GetServiceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServiceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The display name for your managed Active Directory Domain Service resource. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group in which the Domain Service should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// A mapping of tags assigned to the resource.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetServiceArgs()
        {
        }
        public static new GetServiceArgs Empty => new GetServiceArgs();
    }

    public sealed class GetServiceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The display name for your managed Active Directory Domain Service resource. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group in which the Domain Service should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags assigned to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetServiceInvokeArgs()
        {
        }
        public static new GetServiceInvokeArgs Empty => new GetServiceInvokeArgs();
    }


    [OutputType]
    public sealed class GetServiceResult
    {
        /// <summary>
        /// A unique ID for the managed domain deployment.
        /// </summary>
        public readonly string DeploymentId;
        /// <summary>
        /// The forest type used by the managed domain. One of `ResourceTrusting`, for a _Resource Forest_, or blank, for a _User Forest_.
        /// </summary>
        public readonly string DomainConfigurationType;
        /// <summary>
        /// The Active Directory domain of the Domain Service. See [official documentation](https://docs.microsoft.com/azure/active-directory-domain-services/tutorial-create-instance#create-a-managed-domain) for constraints and recommendations.
        /// </summary>
        public readonly string DomainName;
        /// <summary>
        /// Whether group-based filtered sync (also called scoped synchronisation) is enabled.
        /// </summary>
        public readonly bool FilteredSyncEnabled;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The Azure location in which the replica set resides.
        /// </summary>
        public readonly string Location;
        public readonly string Name;
        /// <summary>
        /// A `notifications` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceNotificationResult> Notifications;
        /// <summary>
        /// One or more `replica_set` blocks as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceReplicaSetResult> ReplicaSets;
        public readonly string ResourceGroupName;
        public readonly string ResourceId;
        /// <summary>
        /// A `secure_ldap` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceSecureLdapResult> SecureLdaps;
        /// <summary>
        /// A `security` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceSecurityResult> Securities;
        /// <summary>
        /// The SKU of the Domain Service resource. One of `Standard`, `Enterprise` or `Premium`.
        /// </summary>
        public readonly string Sku;
        public readonly string SyncOwner;
        /// <summary>
        /// A mapping of tags assigned to the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        public readonly string TenantId;
        public readonly int Version;

        [OutputConstructor]
        private GetServiceResult(
            string deploymentId,

            string domainConfigurationType,

            string domainName,

            bool filteredSyncEnabled,

            string id,

            string location,

            string name,

            ImmutableArray<Outputs.GetServiceNotificationResult> notifications,

            ImmutableArray<Outputs.GetServiceReplicaSetResult> replicaSets,

            string resourceGroupName,

            string resourceId,

            ImmutableArray<Outputs.GetServiceSecureLdapResult> secureLdaps,

            ImmutableArray<Outputs.GetServiceSecurityResult> securities,

            string sku,

            string syncOwner,

            ImmutableDictionary<string, string>? tags,

            string tenantId,

            int version)
        {
            DeploymentId = deploymentId;
            DomainConfigurationType = domainConfigurationType;
            DomainName = domainName;
            FilteredSyncEnabled = filteredSyncEnabled;
            Id = id;
            Location = location;
            Name = name;
            Notifications = notifications;
            ReplicaSets = replicaSets;
            ResourceGroupName = resourceGroupName;
            ResourceId = resourceId;
            SecureLdaps = secureLdaps;
            Securities = securities;
            Sku = sku;
            SyncOwner = syncOwner;
            Tags = tags;
            TenantId = tenantId;
            Version = version;
        }
    }
}
