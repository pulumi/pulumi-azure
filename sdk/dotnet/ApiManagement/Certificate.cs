// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ApiManagement
{
    /// <summary>
    /// Manages an Certificate within an API Management Service.
    /// 
    /// ## Example Usage
    /// ### With Base64 Certificate)
    /// 
    /// ```csharp
    /// using System;
    /// using System.Collections.Generic;
    /// using System.IO;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// 	
    /// string ReadFileBase64(string path) 
    /// {
    ///     return Convert.ToBase64String(Encoding.UTF8.GetBytes(File.ReadAllText(path)));
    /// }
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleService = new Azure.ApiManagement.Service("exampleService", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         PublisherName = "My Company",
    ///         PublisherEmail = "company@exmaple.com",
    ///         SkuName = "Developer_1",
    ///     });
    /// 
    ///     var exampleCertificate = new Azure.ApiManagement.Certificate("exampleCertificate", new()
    ///     {
    ///         ApiManagementName = exampleService.Name,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Data = ReadFileBase64("example.pfx"),
    ///     });
    /// 
    /// });
    /// ```
    /// ### With Key Vault Certificate)
    /// 
    /// ```csharp
    /// using System;
    /// using System.Collections.Generic;
    /// using System.IO;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// 	
    /// string ReadFileBase64(string path) 
    /// {
    ///     return Convert.ToBase64String(Encoding.UTF8.GetBytes(File.ReadAllText(path)));
    /// }
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var current = Azure.Core.GetClientConfig.Invoke();
    /// 
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleService = new Azure.ApiManagement.Service("exampleService", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         PublisherName = "My Company",
    ///         PublisherEmail = "company@terraform.io",
    ///         SkuName = "Developer_1",
    ///         Identity = new Azure.ApiManagement.Inputs.ServiceIdentityArgs
    ///         {
    ///             Type = "SystemAssigned",
    ///         },
    ///     });
    /// 
    ///     var exampleKeyVault = new Azure.KeyVault.KeyVault("exampleKeyVault", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         TenantId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.TenantId),
    ///         SkuName = "standard",
    ///     });
    /// 
    ///     var exampleAccessPolicy = new Azure.KeyVault.AccessPolicy("exampleAccessPolicy", new()
    ///     {
    ///         KeyVaultId = exampleKeyVault.Id,
    ///         TenantId = exampleService.Identity.Apply(identity =&gt; identity?.TenantId),
    ///         ObjectId = exampleService.Identity.Apply(identity =&gt; identity?.PrincipalId),
    ///         SecretPermissions = new[]
    ///         {
    ///             "Get",
    ///         },
    ///         CertificatePermissions = new[]
    ///         {
    ///             "Get",
    ///         },
    ///     });
    /// 
    ///     var exampleCertificate = new Azure.KeyVault.Certificate("exampleCertificate", new()
    ///     {
    ///         KeyVaultId = exampleKeyVault.Id,
    ///         KeyVaultCertificate = new Azure.KeyVault.Inputs.CertificateCertificateArgs
    ///         {
    ///             Contents = ReadFileBase64("example_cert.pfx"),
    ///             Password = "terraform",
    ///         },
    ///         CertificatePolicy = new Azure.KeyVault.Inputs.CertificateCertificatePolicyArgs
    ///         {
    ///             IssuerParameters = new Azure.KeyVault.Inputs.CertificateCertificatePolicyIssuerParametersArgs
    ///             {
    ///                 Name = "Self",
    ///             },
    ///             KeyProperties = new Azure.KeyVault.Inputs.CertificateCertificatePolicyKeyPropertiesArgs
    ///             {
    ///                 Exportable = true,
    ///                 KeySize = 2048,
    ///                 KeyType = "RSA",
    ///                 ReuseKey = false,
    ///             },
    ///             SecretProperties = new Azure.KeyVault.Inputs.CertificateCertificatePolicySecretPropertiesArgs
    ///             {
    ///                 ContentType = "application/x-pkcs12",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleApimanagement_certificateCertificate = new Azure.ApiManagement.Certificate("exampleApimanagement/certificateCertificate", new()
    ///     {
    ///         ApiManagementName = exampleService.Name,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         KeyVaultSecretId = exampleCertificate.SecretId,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// API Management Certificates can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:apimanagement/certificate:Certificate example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.ApiManagement/service/instance1/certificates/certificate1
    /// ```
    /// </summary>
    [AzureResourceType("azure:apimanagement/certificate:Certificate")]
    public partial class Certificate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Name of the API Management Service where this Service should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Output("apiManagementName")]
        public Output<string> ApiManagementName { get; private set; } = null!;

        /// <summary>
        /// The base-64 encoded certificate data, which must be a PFX file.
        /// </summary>
        [Output("data")]
        public Output<string?> Data { get; private set; } = null!;

        /// <summary>
        /// The Expiration Date of this Certificate, formatted as an RFC3339 string.
        /// </summary>
        [Output("expiration")]
        public Output<string> Expiration { get; private set; } = null!;

        /// <summary>
        /// The Client ID of the User Assigned Managed Identity to use for retrieving certificate.
        /// 
        /// &gt; **NOTE:** If not specified, will use System Assigned identity of the API Management Service.
        /// </summary>
        [Output("keyVaultIdentityClientId")]
        public Output<string?> KeyVaultIdentityClientId { get; private set; } = null!;

        /// <summary>
        /// The ID of the Key Vault Secret containing the SSL Certificate, which must be of the type `application/x-pkcs12`.
        /// 
        /// &gt; **NOTE:** Setting this field requires the `identity` block to be specified in API Management Service, since this identity is used to retrieve the Key Vault Certificate. Possible values are versioned or versionless secret ID. Auto-updating the Certificate from the Key Vault requires that Secret version isn't specified.
        /// </summary>
        [Output("keyVaultSecretId")]
        public Output<string?> KeyVaultSecretId { get; private set; } = null!;

        /// <summary>
        /// The name of the API Management Certificate. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The password used for this certificate.
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        /// <summary>
        /// The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE:** Either `data` or `key_vault_secret_id` must be specified - but not both.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// The Subject of this Certificate.
        /// </summary>
        [Output("subject")]
        public Output<string> Subject { get; private set; } = null!;

        /// <summary>
        /// The Thumbprint of this Certificate.
        /// </summary>
        [Output("thumbprint")]
        public Output<string> Thumbprint { get; private set; } = null!;


        /// <summary>
        /// Create a Certificate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Certificate(string name, CertificateArgs args, CustomResourceOptions? options = null)
            : base("azure:apimanagement/certificate:Certificate", name, args ?? new CertificateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Certificate(string name, Input<string> id, CertificateState? state = null, CustomResourceOptions? options = null)
            : base("azure:apimanagement/certificate:Certificate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "data",
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Certificate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Certificate Get(string name, Input<string> id, CertificateState? state = null, CustomResourceOptions? options = null)
        {
            return new Certificate(name, id, state, options);
        }
    }

    public sealed class CertificateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Name of the API Management Service where this Service should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("apiManagementName", required: true)]
        public Input<string> ApiManagementName { get; set; } = null!;

        [Input("data")]
        private Input<string>? _data;

        /// <summary>
        /// The base-64 encoded certificate data, which must be a PFX file.
        /// </summary>
        public Input<string>? Data
        {
            get => _data;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _data = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The Client ID of the User Assigned Managed Identity to use for retrieving certificate.
        /// 
        /// &gt; **NOTE:** If not specified, will use System Assigned identity of the API Management Service.
        /// </summary>
        [Input("keyVaultIdentityClientId")]
        public Input<string>? KeyVaultIdentityClientId { get; set; }

        /// <summary>
        /// The ID of the Key Vault Secret containing the SSL Certificate, which must be of the type `application/x-pkcs12`.
        /// 
        /// &gt; **NOTE:** Setting this field requires the `identity` block to be specified in API Management Service, since this identity is used to retrieve the Key Vault Certificate. Possible values are versioned or versionless secret ID. Auto-updating the Certificate from the Key Vault requires that Secret version isn't specified.
        /// </summary>
        [Input("keyVaultSecretId")]
        public Input<string>? KeyVaultSecretId { get; set; }

        /// <summary>
        /// The name of the API Management Certificate. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The password used for this certificate.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE:** Either `data` or `key_vault_secret_id` must be specified - but not both.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public CertificateArgs()
        {
        }
        public static new CertificateArgs Empty => new CertificateArgs();
    }

    public sealed class CertificateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Name of the API Management Service where this Service should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("apiManagementName")]
        public Input<string>? ApiManagementName { get; set; }

        [Input("data")]
        private Input<string>? _data;

        /// <summary>
        /// The base-64 encoded certificate data, which must be a PFX file.
        /// </summary>
        public Input<string>? Data
        {
            get => _data;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _data = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The Expiration Date of this Certificate, formatted as an RFC3339 string.
        /// </summary>
        [Input("expiration")]
        public Input<string>? Expiration { get; set; }

        /// <summary>
        /// The Client ID of the User Assigned Managed Identity to use for retrieving certificate.
        /// 
        /// &gt; **NOTE:** If not specified, will use System Assigned identity of the API Management Service.
        /// </summary>
        [Input("keyVaultIdentityClientId")]
        public Input<string>? KeyVaultIdentityClientId { get; set; }

        /// <summary>
        /// The ID of the Key Vault Secret containing the SSL Certificate, which must be of the type `application/x-pkcs12`.
        /// 
        /// &gt; **NOTE:** Setting this field requires the `identity` block to be specified in API Management Service, since this identity is used to retrieve the Key Vault Certificate. Possible values are versioned or versionless secret ID. Auto-updating the Certificate from the Key Vault requires that Secret version isn't specified.
        /// </summary>
        [Input("keyVaultSecretId")]
        public Input<string>? KeyVaultSecretId { get; set; }

        /// <summary>
        /// The name of the API Management Certificate. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The password used for this certificate.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE:** Either `data` or `key_vault_secret_id` must be specified - but not both.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// The Subject of this Certificate.
        /// </summary>
        [Input("subject")]
        public Input<string>? Subject { get; set; }

        /// <summary>
        /// The Thumbprint of this Certificate.
        /// </summary>
        [Input("thumbprint")]
        public Input<string>? Thumbprint { get; set; }

        public CertificateState()
        {
        }
        public static new CertificateState Empty => new CertificateState();
    }
}
