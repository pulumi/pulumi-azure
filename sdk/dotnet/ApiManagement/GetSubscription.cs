// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ApiManagement
{
    public static class GetSubscription
    {
        /// <summary>
        /// Use this data source to access information about an existing API Management Subscription.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.ApiManagement.GetSubscription.Invoke(new()
        ///     {
        ///         ApiManagementId = "example-apim",
        ///         SubscriptionId = "example-subscription-id",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getSubscriptionResult =&gt; getSubscriptionResult.SubscriptionId),
        ///     };
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Microsoft.ApiManagement`: 2022-08-01
        /// </summary>
        public static Task<GetSubscriptionResult> InvokeAsync(GetSubscriptionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSubscriptionResult>("azure:apimanagement/getSubscription:getSubscription", args ?? new GetSubscriptionArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing API Management Subscription.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.ApiManagement.GetSubscription.Invoke(new()
        ///     {
        ///         ApiManagementId = "example-apim",
        ///         SubscriptionId = "example-subscription-id",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getSubscriptionResult =&gt; getSubscriptionResult.SubscriptionId),
        ///     };
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Microsoft.ApiManagement`: 2022-08-01
        /// </summary>
        public static Output<GetSubscriptionResult> Invoke(GetSubscriptionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSubscriptionResult>("azure:apimanagement/getSubscription:getSubscription", args ?? new GetSubscriptionInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing API Management Subscription.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.ApiManagement.GetSubscription.Invoke(new()
        ///     {
        ///         ApiManagementId = "example-apim",
        ///         SubscriptionId = "example-subscription-id",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getSubscriptionResult =&gt; getSubscriptionResult.SubscriptionId),
        ///     };
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Microsoft.ApiManagement`: 2022-08-01
        /// </summary>
        public static Output<GetSubscriptionResult> Invoke(GetSubscriptionInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSubscriptionResult>("azure:apimanagement/getSubscription:getSubscription", args ?? new GetSubscriptionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSubscriptionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the API Management Service in which this Subscription exists.
        /// </summary>
        [Input("apiManagementId", required: true)]
        public string ApiManagementId { get; set; } = null!;

        /// <summary>
        /// The Identifier for the API Management Subscription.
        /// </summary>
        [Input("subscriptionId", required: true)]
        public string SubscriptionId { get; set; } = null!;

        public GetSubscriptionArgs()
        {
        }
        public static new GetSubscriptionArgs Empty => new GetSubscriptionArgs();
    }

    public sealed class GetSubscriptionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the API Management Service in which this Subscription exists.
        /// </summary>
        [Input("apiManagementId", required: true)]
        public Input<string> ApiManagementId { get; set; } = null!;

        /// <summary>
        /// The Identifier for the API Management Subscription.
        /// </summary>
        [Input("subscriptionId", required: true)]
        public Input<string> SubscriptionId { get; set; } = null!;

        public GetSubscriptionInvokeArgs()
        {
        }
        public static new GetSubscriptionInvokeArgs Empty => new GetSubscriptionInvokeArgs();
    }


    [OutputType]
    public sealed class GetSubscriptionResult
    {
        /// <summary>
        /// Indicates whether tracing is enabled.
        /// </summary>
        public readonly bool AllowTracing;
        /// <summary>
        /// The ID of the API assigned to this Subscription.
        /// </summary>
        public readonly string ApiId;
        public readonly string ApiManagementId;
        /// <summary>
        /// The display name of this Subscription.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The primary key for this subscription.
        /// </summary>
        public readonly string PrimaryKey;
        /// <summary>
        /// The ID of the Product assigned to this Subscription.
        /// </summary>
        public readonly string ProductId;
        /// <summary>
        /// The secondary key for this subscription.
        /// </summary>
        public readonly string SecondaryKey;
        /// <summary>
        /// The state of this Subscription.
        /// </summary>
        public readonly string State;
        public readonly string SubscriptionId;
        /// <summary>
        /// The ID of the User assigned to this Subscription.
        /// </summary>
        public readonly string UserId;

        [OutputConstructor]
        private GetSubscriptionResult(
            bool allowTracing,

            string apiId,

            string apiManagementId,

            string displayName,

            string id,

            string primaryKey,

            string productId,

            string secondaryKey,

            string state,

            string subscriptionId,

            string userId)
        {
            AllowTracing = allowTracing;
            ApiId = apiId;
            ApiManagementId = apiManagementId;
            DisplayName = displayName;
            Id = id;
            PrimaryKey = primaryKey;
            ProductId = productId;
            SecondaryKey = secondaryKey;
            State = state;
            SubscriptionId = subscriptionId;
            UserId = userId;
        }
    }
}
