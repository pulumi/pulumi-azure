// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ApiManagement
{
    /// <summary>
    /// Manages an API Management Service Diagnostic.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleInsights = new Azure.AppInsights.Insights("exampleInsights", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         ApplicationType = "web",
    ///     });
    /// 
    ///     var exampleService = new Azure.ApiManagement.Service("exampleService", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         PublisherName = "My Company",
    ///         PublisherEmail = "company@mycompany.io",
    ///         SkuName = "Developer_1",
    ///     });
    /// 
    ///     var exampleLogger = new Azure.ApiManagement.Logger("exampleLogger", new()
    ///     {
    ///         ApiManagementName = exampleService.Name,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         ApplicationInsights = new Azure.ApiManagement.Inputs.LoggerApplicationInsightsArgs
    ///         {
    ///             InstrumentationKey = exampleInsights.InstrumentationKey,
    ///         },
    ///     });
    /// 
    ///     var exampleDiagnostic = new Azure.ApiManagement.Diagnostic("exampleDiagnostic", new()
    ///     {
    ///         Identifier = "applicationinsights",
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         ApiManagementName = exampleService.Name,
    ///         ApiManagementLoggerId = exampleLogger.Id,
    ///         SamplingPercentage = 5,
    ///         AlwaysLogErrors = true,
    ///         LogClientIp = true,
    ///         Verbosity = "verbose",
    ///         HttpCorrelationProtocol = "W3C",
    ///         FrontendRequest = new Azure.ApiManagement.Inputs.DiagnosticFrontendRequestArgs
    ///         {
    ///             BodyBytes = 32,
    ///             HeadersToLogs = new[]
    ///             {
    ///                 "content-type",
    ///                 "accept",
    ///                 "origin",
    ///             },
    ///         },
    ///         FrontendResponse = new Azure.ApiManagement.Inputs.DiagnosticFrontendResponseArgs
    ///         {
    ///             BodyBytes = 32,
    ///             HeadersToLogs = new[]
    ///             {
    ///                 "content-type",
    ///                 "content-length",
    ///                 "origin",
    ///             },
    ///         },
    ///         BackendRequest = new Azure.ApiManagement.Inputs.DiagnosticBackendRequestArgs
    ///         {
    ///             BodyBytes = 32,
    ///             HeadersToLogs = new[]
    ///             {
    ///                 "content-type",
    ///                 "accept",
    ///                 "origin",
    ///             },
    ///         },
    ///         BackendResponse = new Azure.ApiManagement.Inputs.DiagnosticBackendResponseArgs
    ///         {
    ///             BodyBytes = 32,
    ///             HeadersToLogs = new[]
    ///             {
    ///                 "content-type",
    ///                 "content-length",
    ///                 "origin",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// API Management Diagnostics can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:apimanagement/diagnostic:Diagnostic example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.ApiManagement/service/instance1/diagnostics/applicationinsights
    /// ```
    /// </summary>
    [AzureResourceType("azure:apimanagement/diagnostic:Diagnostic")]
    public partial class Diagnostic : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Always log errors. Send telemetry if there is an erroneous condition, regardless of sampling settings.
        /// </summary>
        [Output("alwaysLogErrors")]
        public Output<bool> AlwaysLogErrors { get; private set; } = null!;

        /// <summary>
        /// The id of the target API Management Logger where the API Management Diagnostic should be saved.
        /// </summary>
        [Output("apiManagementLoggerId")]
        public Output<string> ApiManagementLoggerId { get; private set; } = null!;

        /// <summary>
        /// The Name of the API Management Service where this Diagnostic should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Output("apiManagementName")]
        public Output<string> ApiManagementName { get; private set; } = null!;

        /// <summary>
        /// A `backend_request` block as defined below.
        /// </summary>
        [Output("backendRequest")]
        public Output<Outputs.DiagnosticBackendRequest> BackendRequest { get; private set; } = null!;

        /// <summary>
        /// A `backend_response` block as defined below.
        /// </summary>
        [Output("backendResponse")]
        public Output<Outputs.DiagnosticBackendResponse> BackendResponse { get; private set; } = null!;

        /// <summary>
        /// A `frontend_request` block as defined below.
        /// </summary>
        [Output("frontendRequest")]
        public Output<Outputs.DiagnosticFrontendRequest> FrontendRequest { get; private set; } = null!;

        /// <summary>
        /// A `frontend_response` block as defined below.
        /// </summary>
        [Output("frontendResponse")]
        public Output<Outputs.DiagnosticFrontendResponse> FrontendResponse { get; private set; } = null!;

        /// <summary>
        /// The HTTP Correlation Protocol to use. Possible values are `None`, `Legacy` or `W3C`.
        /// </summary>
        [Output("httpCorrelationProtocol")]
        public Output<string> HttpCorrelationProtocol { get; private set; } = null!;

        /// <summary>
        /// The diagnostic identifier for the API Management Service. At this time the only supported value is `applicationinsights`. Changing this forces a new resource to be created.
        /// </summary>
        [Output("identifier")]
        public Output<string> Identifier { get; private set; } = null!;

        /// <summary>
        /// Log client IP address.
        /// </summary>
        [Output("logClientIp")]
        public Output<bool> LogClientIp { get; private set; } = null!;

        /// <summary>
        /// The format of the Operation Name for Application Insights telemetries. Possible values are `Name`, and `Url`. Defaults to `Name`.
        /// </summary>
        [Output("operationNameFormat")]
        public Output<string?> OperationNameFormat { get; private set; } = null!;

        /// <summary>
        /// The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// Sampling (%). For high traffic APIs, please read this [documentation](https://docs.microsoft.com/azure/api-management/api-management-howto-app-insights#performance-implications-and-log-sampling) to understand performance implications and log sampling. Valid values are between `0.0` and `100.0`.
        /// </summary>
        [Output("samplingPercentage")]
        public Output<double> SamplingPercentage { get; private set; } = null!;

        /// <summary>
        /// Logging verbosity. Possible values are `verbose`, `information` or `error`.
        /// </summary>
        [Output("verbosity")]
        public Output<string> Verbosity { get; private set; } = null!;


        /// <summary>
        /// Create a Diagnostic resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Diagnostic(string name, DiagnosticArgs args, CustomResourceOptions? options = null)
            : base("azure:apimanagement/diagnostic:Diagnostic", name, args ?? new DiagnosticArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Diagnostic(string name, Input<string> id, DiagnosticState? state = null, CustomResourceOptions? options = null)
            : base("azure:apimanagement/diagnostic:Diagnostic", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Diagnostic resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Diagnostic Get(string name, Input<string> id, DiagnosticState? state = null, CustomResourceOptions? options = null)
        {
            return new Diagnostic(name, id, state, options);
        }
    }

    public sealed class DiagnosticArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Always log errors. Send telemetry if there is an erroneous condition, regardless of sampling settings.
        /// </summary>
        [Input("alwaysLogErrors")]
        public Input<bool>? AlwaysLogErrors { get; set; }

        /// <summary>
        /// The id of the target API Management Logger where the API Management Diagnostic should be saved.
        /// </summary>
        [Input("apiManagementLoggerId", required: true)]
        public Input<string> ApiManagementLoggerId { get; set; } = null!;

        /// <summary>
        /// The Name of the API Management Service where this Diagnostic should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("apiManagementName", required: true)]
        public Input<string> ApiManagementName { get; set; } = null!;

        /// <summary>
        /// A `backend_request` block as defined below.
        /// </summary>
        [Input("backendRequest")]
        public Input<Inputs.DiagnosticBackendRequestArgs>? BackendRequest { get; set; }

        /// <summary>
        /// A `backend_response` block as defined below.
        /// </summary>
        [Input("backendResponse")]
        public Input<Inputs.DiagnosticBackendResponseArgs>? BackendResponse { get; set; }

        /// <summary>
        /// A `frontend_request` block as defined below.
        /// </summary>
        [Input("frontendRequest")]
        public Input<Inputs.DiagnosticFrontendRequestArgs>? FrontendRequest { get; set; }

        /// <summary>
        /// A `frontend_response` block as defined below.
        /// </summary>
        [Input("frontendResponse")]
        public Input<Inputs.DiagnosticFrontendResponseArgs>? FrontendResponse { get; set; }

        /// <summary>
        /// The HTTP Correlation Protocol to use. Possible values are `None`, `Legacy` or `W3C`.
        /// </summary>
        [Input("httpCorrelationProtocol")]
        public Input<string>? HttpCorrelationProtocol { get; set; }

        /// <summary>
        /// The diagnostic identifier for the API Management Service. At this time the only supported value is `applicationinsights`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// Log client IP address.
        /// </summary>
        [Input("logClientIp")]
        public Input<bool>? LogClientIp { get; set; }

        /// <summary>
        /// The format of the Operation Name for Application Insights telemetries. Possible values are `Name`, and `Url`. Defaults to `Name`.
        /// </summary>
        [Input("operationNameFormat")]
        public Input<string>? OperationNameFormat { get; set; }

        /// <summary>
        /// The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Sampling (%). For high traffic APIs, please read this [documentation](https://docs.microsoft.com/azure/api-management/api-management-howto-app-insights#performance-implications-and-log-sampling) to understand performance implications and log sampling. Valid values are between `0.0` and `100.0`.
        /// </summary>
        [Input("samplingPercentage")]
        public Input<double>? SamplingPercentage { get; set; }

        /// <summary>
        /// Logging verbosity. Possible values are `verbose`, `information` or `error`.
        /// </summary>
        [Input("verbosity")]
        public Input<string>? Verbosity { get; set; }

        public DiagnosticArgs()
        {
        }
        public static new DiagnosticArgs Empty => new DiagnosticArgs();
    }

    public sealed class DiagnosticState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Always log errors. Send telemetry if there is an erroneous condition, regardless of sampling settings.
        /// </summary>
        [Input("alwaysLogErrors")]
        public Input<bool>? AlwaysLogErrors { get; set; }

        /// <summary>
        /// The id of the target API Management Logger where the API Management Diagnostic should be saved.
        /// </summary>
        [Input("apiManagementLoggerId")]
        public Input<string>? ApiManagementLoggerId { get; set; }

        /// <summary>
        /// The Name of the API Management Service where this Diagnostic should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("apiManagementName")]
        public Input<string>? ApiManagementName { get; set; }

        /// <summary>
        /// A `backend_request` block as defined below.
        /// </summary>
        [Input("backendRequest")]
        public Input<Inputs.DiagnosticBackendRequestGetArgs>? BackendRequest { get; set; }

        /// <summary>
        /// A `backend_response` block as defined below.
        /// </summary>
        [Input("backendResponse")]
        public Input<Inputs.DiagnosticBackendResponseGetArgs>? BackendResponse { get; set; }

        /// <summary>
        /// A `frontend_request` block as defined below.
        /// </summary>
        [Input("frontendRequest")]
        public Input<Inputs.DiagnosticFrontendRequestGetArgs>? FrontendRequest { get; set; }

        /// <summary>
        /// A `frontend_response` block as defined below.
        /// </summary>
        [Input("frontendResponse")]
        public Input<Inputs.DiagnosticFrontendResponseGetArgs>? FrontendResponse { get; set; }

        /// <summary>
        /// The HTTP Correlation Protocol to use. Possible values are `None`, `Legacy` or `W3C`.
        /// </summary>
        [Input("httpCorrelationProtocol")]
        public Input<string>? HttpCorrelationProtocol { get; set; }

        /// <summary>
        /// The diagnostic identifier for the API Management Service. At this time the only supported value is `applicationinsights`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        /// <summary>
        /// Log client IP address.
        /// </summary>
        [Input("logClientIp")]
        public Input<bool>? LogClientIp { get; set; }

        /// <summary>
        /// The format of the Operation Name for Application Insights telemetries. Possible values are `Name`, and `Url`. Defaults to `Name`.
        /// </summary>
        [Input("operationNameFormat")]
        public Input<string>? OperationNameFormat { get; set; }

        /// <summary>
        /// The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// Sampling (%). For high traffic APIs, please read this [documentation](https://docs.microsoft.com/azure/api-management/api-management-howto-app-insights#performance-implications-and-log-sampling) to understand performance implications and log sampling. Valid values are between `0.0` and `100.0`.
        /// </summary>
        [Input("samplingPercentage")]
        public Input<double>? SamplingPercentage { get; set; }

        /// <summary>
        /// Logging verbosity. Possible values are `verbose`, `information` or `error`.
        /// </summary>
        [Input("verbosity")]
        public Input<string>? Verbosity { get; set; }

        public DiagnosticState()
        {
        }
        public static new DiagnosticState Empty => new DiagnosticState();
    }
}
