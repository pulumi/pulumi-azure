// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ApiManagement.Outputs
{

    [OutputType]
    public sealed class ServiceHostnameConfigurationProxy
    {
        /// <summary>
        /// One or more (up to 10) `certificate` blocks as defined below.`certificate` - (Optional) The Base64 Encoded Certificate.`certificate` - (Optional) The Base64 Encoded Certificate.
        /// </summary>
        public readonly string? Certificate;
        /// <summary>
        /// The password associated with the certificate provided above.
        /// 
        /// &gt; **NOTE:** Either `key_vault_id` or `certificate` and `certificate_password` must be specified.`certificate_password` - (Optional) The password associated with the certificate provided above.
        /// 
        /// &gt; **NOTE:** Either `key_vault_id` or `certificate` and `certificate_password` must be specified.
        /// </summary>
        public readonly string? CertificatePassword;
        /// <summary>
        /// The source of the certificate.
        /// </summary>
        public readonly string? CertificateSource;
        /// <summary>
        /// The status of the certificate.
        /// </summary>
        public readonly string? CertificateStatus;
        /// <summary>
        /// Is the certificate associated with this Hostname the Default SSL Certificate? This is used when an SNI header isn't specified by a client. Defaults to `false`.
        /// </summary>
        public readonly bool? DefaultSslBinding;
        /// <summary>
        /// The expiration date of the certificate in RFC3339 format: `2000-01-02T03:04:05Z`.
        /// </summary>
        public readonly string? Expiry;
        /// <summary>
        /// The Hostname to use for the Management API.
        /// </summary>
        public readonly string HostName;
        /// <summary>
        /// The ID of the Key Vault Secret containing the SSL Certificate, which must be should be of the type `application/x-pkcs12`.
        /// 
        /// &gt; **NOTE:** Setting this field requires the `identity` block to be specified, since this identity is used for to retrieve the Key Vault Certificate. Auto-updating the Certificate from the Key Vault requires the Secret version isn't specified.
        /// </summary>
        public readonly string? KeyVaultId;
        /// <summary>
        /// Should Client Certificate Negotiation be enabled for this Hostname? Defaults to `false`.`negotiate_client_certificate` - (Optional) Should Client Certificate Negotiation be enabled for this Hostname? Defaults to `false`.
        /// </summary>
        public readonly bool? NegotiateClientCertificate;
        /// <summary>
        /// System or User Assigned Managed identity clientId as generated by Azure AD, which has `GET` access to the keyVault containing the SSL certificate.
        /// 
        /// &gt; **NOTE:** If a User Assigned Managed identity is specified for `ssl_keyvault_identity_client_id` then this identity must be associated to the `azure.apimanagement.Service` within an `identity` block.
        /// 
        /// 
        /// `ssl_keyvault_identity_client_id` - (Optional) The Managed Identity Client ID to use to access the Key Vault. This Identity must be specified in the `identity` block to be used.
        /// </summary>
        public readonly string? SslKeyvaultIdentityClientId;
        /// <summary>
        /// The subject of the certificate.
        /// </summary>
        public readonly string? Subject;
        /// <summary>
        /// The thumbprint of the certificate.
        /// </summary>
        public readonly string? Thumbprint;

        [OutputConstructor]
        private ServiceHostnameConfigurationProxy(
            string? certificate,

            string? certificatePassword,

            string? certificateSource,

            string? certificateStatus,

            bool? defaultSslBinding,

            string? expiry,

            string hostName,

            string? keyVaultId,

            bool? negotiateClientCertificate,

            string? sslKeyvaultIdentityClientId,

            string? subject,

            string? thumbprint)
        {
            Certificate = certificate;
            CertificatePassword = certificatePassword;
            CertificateSource = certificateSource;
            CertificateStatus = certificateStatus;
            DefaultSslBinding = defaultSslBinding;
            Expiry = expiry;
            HostName = hostName;
            KeyVaultId = keyVaultId;
            NegotiateClientCertificate = negotiateClientCertificate;
            SslKeyvaultIdentityClientId = sslKeyvaultIdentityClientId;
            Subject = subject;
            Thumbprint = thumbprint;
        }
    }
}
