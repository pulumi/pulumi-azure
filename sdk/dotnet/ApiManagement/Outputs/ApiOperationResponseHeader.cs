// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ApiManagement.Outputs
{

    [OutputType]
    public sealed class ApiOperationResponseHeader
    {
        /// <summary>
        /// The default value for this Header.
        /// </summary>
        public readonly string? DefaultValue;
        /// <summary>
        /// A description of this Header.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// One or more `example` blocks as defined above.
        /// </summary>
        public readonly ImmutableArray<Outputs.ApiOperationResponseHeaderExample> Examples;
        /// <summary>
        /// The Name of this Header.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Is this Header Required?
        /// </summary>
        public readonly bool Required;
        /// <summary>
        /// The name of the Schema.
        /// </summary>
        public readonly string? SchemaId;
        /// <summary>
        /// The Type of this Header, such as a `string`.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The type name defined by the Schema.
        /// </summary>
        public readonly string? TypeName;
        /// <summary>
        /// One or more acceptable values for this Header.
        /// </summary>
        public readonly ImmutableArray<string> Values;

        [OutputConstructor]
        private ApiOperationResponseHeader(
            string? defaultValue,

            string? description,

            ImmutableArray<Outputs.ApiOperationResponseHeaderExample> examples,

            string name,

            bool required,

            string? schemaId,

            string type,

            string? typeName,

            ImmutableArray<string> values)
        {
            DefaultValue = defaultValue;
            Description = description;
            Examples = examples;
            Name = name;
            Required = required;
            SchemaId = schemaId;
            Type = type;
            TypeName = typeName;
            Values = values;
        }
    }
}
