// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ApiManagement
{
    /// <summary>
    /// Manages a API Management Email Template.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleService = new Azure.ApiManagement.Service("exampleService", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         PublisherName = "My Company",
    ///         PublisherEmail = "company@terraform.io",
    ///         SkuName = "Developer_1",
    ///     });
    /// 
    ///     var exampleEmailTemplate = new Azure.ApiManagement.EmailTemplate("exampleEmailTemplate", new()
    ///     {
    ///         TemplateName = "ConfirmSignUpIdentityDefault",
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         ApiManagementName = exampleService.Name,
    ///         Subject = "Customized confirmation email for your new $OrganizationName API account",
    ///         Body = @"&lt;!DOCTYPE html &gt;
    /// &lt;html&gt;
    /// &lt;head&gt;
    ///   &lt;meta charset=""UTF-8"" /&gt;
    ///   &lt;title&gt;Customized Letter Title&lt;/title&gt;
    /// &lt;/head&gt;
    /// &lt;body&gt;
    ///   &lt;p style=""font-size:12pt;font-family:'Segoe UI'""&gt;Dear $DevFirstName $DevLastName,&lt;/p&gt;
    /// &lt;/body&gt;
    /// &lt;/html&gt;
    /// ",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// API Management Email Templates can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:apimanagement/emailTemplate:EmailTemplate example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.ApiManagement/service/instance1/templates/template1
    /// ```
    /// </summary>
    [AzureResourceType("azure:apimanagement/emailTemplate:EmailTemplate")]
    public partial class EmailTemplate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the API Management Service in which the Email Template should exist. Changing this forces a new API Management Email Template to be created.
        /// </summary>
        [Output("apiManagementName")]
        public Output<string> ApiManagementName { get; private set; } = null!;

        /// <summary>
        /// The body of the Email. Its format has to be a well-formed HTML document.
        /// 
        /// &gt; **NOTE:** In `subject` and `body` predefined parameters can be used. The available parameters depend on the template. Schema to use a parameter: `$` followed by the `parameter.name` - `$&lt;parameter.name&gt;`. The available parameters can be seen in the Notification templates section of the API-Management Service instance within the Azure Portal.
        /// </summary>
        [Output("body")]
        public Output<string> Body { get; private set; } = null!;

        /// <summary>
        /// The description of the Email Template.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the API Management Email Template should exist. Changing this forces a new API Management Email Template to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// The subject of the Email.
        /// </summary>
        [Output("subject")]
        public Output<string> Subject { get; private set; } = null!;

        /// <summary>
        /// The name of the Email Template. Possible values are `AccountClosedDeveloper`, `ApplicationApprovedNotificationMessage`, `ConfirmSignUpIdentityDefault`, `EmailChangeIdentityDefault`, `InviteUserNotificationMessage`, `NewCommentNotificationMessage`, `NewDeveloperNotificationMessage`, `NewIssueNotificationMessage`, `PasswordResetByAdminNotificationMessage`, `PasswordResetIdentityDefault`, `PurchaseDeveloperNotificationMessage`, `QuotaLimitApproachingDeveloperNotificationMessage`, `RejectDeveloperNotificationMessage`, `RequestDeveloperNotificationMessage`. Changing this forces a new API Management Email Template to be created.
        /// </summary>
        [Output("templateName")]
        public Output<string> TemplateName { get; private set; } = null!;

        /// <summary>
        /// The title of the Email Template.
        /// </summary>
        [Output("title")]
        public Output<string> Title { get; private set; } = null!;


        /// <summary>
        /// Create a EmailTemplate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EmailTemplate(string name, EmailTemplateArgs args, CustomResourceOptions? options = null)
            : base("azure:apimanagement/emailTemplate:EmailTemplate", name, args ?? new EmailTemplateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EmailTemplate(string name, Input<string> id, EmailTemplateState? state = null, CustomResourceOptions? options = null)
            : base("azure:apimanagement/emailTemplate:EmailTemplate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EmailTemplate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EmailTemplate Get(string name, Input<string> id, EmailTemplateState? state = null, CustomResourceOptions? options = null)
        {
            return new EmailTemplate(name, id, state, options);
        }
    }

    public sealed class EmailTemplateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the API Management Service in which the Email Template should exist. Changing this forces a new API Management Email Template to be created.
        /// </summary>
        [Input("apiManagementName", required: true)]
        public Input<string> ApiManagementName { get; set; } = null!;

        /// <summary>
        /// The body of the Email. Its format has to be a well-formed HTML document.
        /// 
        /// &gt; **NOTE:** In `subject` and `body` predefined parameters can be used. The available parameters depend on the template. Schema to use a parameter: `$` followed by the `parameter.name` - `$&lt;parameter.name&gt;`. The available parameters can be seen in the Notification templates section of the API-Management Service instance within the Azure Portal.
        /// </summary>
        [Input("body", required: true)]
        public Input<string> Body { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the API Management Email Template should exist. Changing this forces a new API Management Email Template to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The subject of the Email.
        /// </summary>
        [Input("subject", required: true)]
        public Input<string> Subject { get; set; } = null!;

        /// <summary>
        /// The name of the Email Template. Possible values are `AccountClosedDeveloper`, `ApplicationApprovedNotificationMessage`, `ConfirmSignUpIdentityDefault`, `EmailChangeIdentityDefault`, `InviteUserNotificationMessage`, `NewCommentNotificationMessage`, `NewDeveloperNotificationMessage`, `NewIssueNotificationMessage`, `PasswordResetByAdminNotificationMessage`, `PasswordResetIdentityDefault`, `PurchaseDeveloperNotificationMessage`, `QuotaLimitApproachingDeveloperNotificationMessage`, `RejectDeveloperNotificationMessage`, `RequestDeveloperNotificationMessage`. Changing this forces a new API Management Email Template to be created.
        /// </summary>
        [Input("templateName", required: true)]
        public Input<string> TemplateName { get; set; } = null!;

        public EmailTemplateArgs()
        {
        }
        public static new EmailTemplateArgs Empty => new EmailTemplateArgs();
    }

    public sealed class EmailTemplateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the API Management Service in which the Email Template should exist. Changing this forces a new API Management Email Template to be created.
        /// </summary>
        [Input("apiManagementName")]
        public Input<string>? ApiManagementName { get; set; }

        /// <summary>
        /// The body of the Email. Its format has to be a well-formed HTML document.
        /// 
        /// &gt; **NOTE:** In `subject` and `body` predefined parameters can be used. The available parameters depend on the template. Schema to use a parameter: `$` followed by the `parameter.name` - `$&lt;parameter.name&gt;`. The available parameters can be seen in the Notification templates section of the API-Management Service instance within the Azure Portal.
        /// </summary>
        [Input("body")]
        public Input<string>? Body { get; set; }

        /// <summary>
        /// The description of the Email Template.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the Resource Group where the API Management Email Template should exist. Changing this forces a new API Management Email Template to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// The subject of the Email.
        /// </summary>
        [Input("subject")]
        public Input<string>? Subject { get; set; }

        /// <summary>
        /// The name of the Email Template. Possible values are `AccountClosedDeveloper`, `ApplicationApprovedNotificationMessage`, `ConfirmSignUpIdentityDefault`, `EmailChangeIdentityDefault`, `InviteUserNotificationMessage`, `NewCommentNotificationMessage`, `NewDeveloperNotificationMessage`, `NewIssueNotificationMessage`, `PasswordResetByAdminNotificationMessage`, `PasswordResetIdentityDefault`, `PurchaseDeveloperNotificationMessage`, `QuotaLimitApproachingDeveloperNotificationMessage`, `RejectDeveloperNotificationMessage`, `RequestDeveloperNotificationMessage`. Changing this forces a new API Management Email Template to be created.
        /// </summary>
        [Input("templateName")]
        public Input<string>? TemplateName { get; set; }

        /// <summary>
        /// The title of the Email Template.
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        public EmailTemplateState()
        {
        }
        public static new EmailTemplateState Empty => new EmailTemplateState();
    }
}
