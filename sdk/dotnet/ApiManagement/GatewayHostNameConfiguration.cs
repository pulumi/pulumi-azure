// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ApiManagement
{
    /// <summary>
    /// Manages an API Management Gateway Host Name Configuration.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System;
    /// using System.Collections.Generic;
    /// using System.IO;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// 	
    /// string ReadFileBase64(string path) 
    /// {
    ///     return Convert.ToBase64String(Encoding.UTF8.GetBytes(File.ReadAllText(path)));
    /// }
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleService = new Azure.ApiManagement.Service("exampleService", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         PublisherName = "pub1",
    ///         PublisherEmail = "pub1@email.com",
    ///         SkuName = "Consumption_0",
    ///     });
    /// 
    ///     var exampleGateway = new Azure.ApiManagement.Gateway("exampleGateway", new()
    ///     {
    ///         ApiManagementId = exampleService.Id,
    ///         Description = "Example API Management gateway",
    ///         LocationData = new Azure.ApiManagement.Inputs.GatewayLocationDataArgs
    ///         {
    ///             Name = "example name",
    ///             City = "example city",
    ///             District = "example district",
    ///             Region = "example region",
    ///         },
    ///     });
    /// 
    ///     var exampleCertificate = new Azure.ApiManagement.Certificate("exampleCertificate", new()
    ///     {
    ///         ApiManagementName = exampleService.Name,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Data = ReadFileBase64("example.pfx"),
    ///     });
    /// 
    ///     var exampleGatewayHostNameConfiguration = new Azure.ApiManagement.GatewayHostNameConfiguration("exampleGatewayHostNameConfiguration", new()
    ///     {
    ///         ApiManagementId = exampleService.Id,
    ///         GatewayName = exampleGateway.Name,
    ///         CertificateId = exampleCertificate.Id,
    ///         HostName = "example-host-name",
    ///         RequestClientCertificateEnabled = true,
    ///         Http2Enabled = true,
    ///         Tls10Enabled = true,
    ///         Tls11Enabled = false,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// API Management Gateway Host Name Configuration can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:apimanagement/gatewayHostNameConfiguration:GatewayHostNameConfiguration example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.ApiManagement/service/service1/gateways/gateway1/hostnameConfigurations/hc1
    /// ```
    /// </summary>
    [AzureResourceType("azure:apimanagement/gatewayHostNameConfiguration:GatewayHostNameConfiguration")]
    public partial class GatewayHostNameConfiguration : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the API Management Service. Changing this forces a new resource to be created.
        /// </summary>
        [Output("apiManagementId")]
        public Output<string> ApiManagementId { get; private set; } = null!;

        /// <summary>
        /// The certificate ID to be used for TLS connection establishment.
        /// </summary>
        [Output("certificateId")]
        public Output<string> CertificateId { get; private set; } = null!;

        /// <summary>
        /// The name of the API Management Gateway. Changing this forces a new resource to be created.
        /// </summary>
        [Output("gatewayName")]
        public Output<string> GatewayName { get; private set; } = null!;

        /// <summary>
        /// The host name to use for the API Management Gateway Host Name Configuration.
        /// </summary>
        [Output("hostName")]
        public Output<string> HostName { get; private set; } = null!;

        /// <summary>
        /// Whether HTTP/2.0 is supported. Defaults to `true`.
        /// </summary>
        [Output("http2Enabled")]
        public Output<bool?> Http2Enabled { get; private set; } = null!;

        /// <summary>
        /// The name of the API Management Gateway Host Name Configuration. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Whether the API Management Gateway requests a client certificate.
        /// </summary>
        [Output("requestClientCertificateEnabled")]
        public Output<bool?> RequestClientCertificateEnabled { get; private set; } = null!;

        /// <summary>
        /// Whether TLS 1.0 is supported.
        /// </summary>
        [Output("tls10Enabled")]
        public Output<bool?> Tls10Enabled { get; private set; } = null!;

        /// <summary>
        /// Whether TLS 1.1 is supported.
        /// </summary>
        [Output("tls11Enabled")]
        public Output<bool?> Tls11Enabled { get; private set; } = null!;


        /// <summary>
        /// Create a GatewayHostNameConfiguration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GatewayHostNameConfiguration(string name, GatewayHostNameConfigurationArgs args, CustomResourceOptions? options = null)
            : base("azure:apimanagement/gatewayHostNameConfiguration:GatewayHostNameConfiguration", name, args ?? new GatewayHostNameConfigurationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GatewayHostNameConfiguration(string name, Input<string> id, GatewayHostNameConfigurationState? state = null, CustomResourceOptions? options = null)
            : base("azure:apimanagement/gatewayHostNameConfiguration:GatewayHostNameConfiguration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GatewayHostNameConfiguration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GatewayHostNameConfiguration Get(string name, Input<string> id, GatewayHostNameConfigurationState? state = null, CustomResourceOptions? options = null)
        {
            return new GatewayHostNameConfiguration(name, id, state, options);
        }
    }

    public sealed class GatewayHostNameConfigurationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the API Management Service. Changing this forces a new resource to be created.
        /// </summary>
        [Input("apiManagementId", required: true)]
        public Input<string> ApiManagementId { get; set; } = null!;

        /// <summary>
        /// The certificate ID to be used for TLS connection establishment.
        /// </summary>
        [Input("certificateId", required: true)]
        public Input<string> CertificateId { get; set; } = null!;

        /// <summary>
        /// The name of the API Management Gateway. Changing this forces a new resource to be created.
        /// </summary>
        [Input("gatewayName", required: true)]
        public Input<string> GatewayName { get; set; } = null!;

        /// <summary>
        /// The host name to use for the API Management Gateway Host Name Configuration.
        /// </summary>
        [Input("hostName", required: true)]
        public Input<string> HostName { get; set; } = null!;

        /// <summary>
        /// Whether HTTP/2.0 is supported. Defaults to `true`.
        /// </summary>
        [Input("http2Enabled")]
        public Input<bool>? Http2Enabled { get; set; }

        /// <summary>
        /// The name of the API Management Gateway Host Name Configuration. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Whether the API Management Gateway requests a client certificate.
        /// </summary>
        [Input("requestClientCertificateEnabled")]
        public Input<bool>? RequestClientCertificateEnabled { get; set; }

        /// <summary>
        /// Whether TLS 1.0 is supported.
        /// </summary>
        [Input("tls10Enabled")]
        public Input<bool>? Tls10Enabled { get; set; }

        /// <summary>
        /// Whether TLS 1.1 is supported.
        /// </summary>
        [Input("tls11Enabled")]
        public Input<bool>? Tls11Enabled { get; set; }

        public GatewayHostNameConfigurationArgs()
        {
        }
        public static new GatewayHostNameConfigurationArgs Empty => new GatewayHostNameConfigurationArgs();
    }

    public sealed class GatewayHostNameConfigurationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the API Management Service. Changing this forces a new resource to be created.
        /// </summary>
        [Input("apiManagementId")]
        public Input<string>? ApiManagementId { get; set; }

        /// <summary>
        /// The certificate ID to be used for TLS connection establishment.
        /// </summary>
        [Input("certificateId")]
        public Input<string>? CertificateId { get; set; }

        /// <summary>
        /// The name of the API Management Gateway. Changing this forces a new resource to be created.
        /// </summary>
        [Input("gatewayName")]
        public Input<string>? GatewayName { get; set; }

        /// <summary>
        /// The host name to use for the API Management Gateway Host Name Configuration.
        /// </summary>
        [Input("hostName")]
        public Input<string>? HostName { get; set; }

        /// <summary>
        /// Whether HTTP/2.0 is supported. Defaults to `true`.
        /// </summary>
        [Input("http2Enabled")]
        public Input<bool>? Http2Enabled { get; set; }

        /// <summary>
        /// The name of the API Management Gateway Host Name Configuration. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Whether the API Management Gateway requests a client certificate.
        /// </summary>
        [Input("requestClientCertificateEnabled")]
        public Input<bool>? RequestClientCertificateEnabled { get; set; }

        /// <summary>
        /// Whether TLS 1.0 is supported.
        /// </summary>
        [Input("tls10Enabled")]
        public Input<bool>? Tls10Enabled { get; set; }

        /// <summary>
        /// Whether TLS 1.1 is supported.
        /// </summary>
        [Input("tls11Enabled")]
        public Input<bool>? Tls11Enabled { get; set; }

        public GatewayHostNameConfigurationState()
        {
        }
        public static new GatewayHostNameConfigurationState Empty => new GatewayHostNameConfigurationState();
    }
}
