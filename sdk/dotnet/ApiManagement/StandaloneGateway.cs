// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ApiManagement
{
    /// <summary>
    /// Manages an Azure API Management Standalone Gateway.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Name = "example-resources",
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleVirtualNetwork = new Azure.Network.VirtualNetwork("example", new()
    ///     {
    ///         Name = "example-network",
    ///         Location = example.Location,
    ///         ResourceGroupName = example.Name,
    ///         AddressSpaces = new[]
    ///         {
    ///             "10.0.0.0/16",
    ///         },
    ///     });
    /// 
    ///     var exampleSubnet = new Azure.Network.Subnet("example", new()
    ///     {
    ///         Name = "example-subnet",
    ///         ResourceGroupName = example.Name,
    ///         VirtualNetworkName = exampleVirtualNetwork.Name,
    ///         AddressPrefixes = new[]
    ///         {
    ///             "10.0.1.0/24",
    ///         },
    ///         Delegations = new[]
    ///         {
    ///             new Azure.Network.Inputs.SubnetDelegationArgs
    ///             {
    ///                 Name = "apim-delegation",
    ///                 ServiceDelegation = new Azure.Network.Inputs.SubnetDelegationServiceDelegationArgs
    ///                 {
    ///                     Name = "Microsoft.Web/serverFarms",
    ///                     Actions = new[]
    ///                     {
    ///                         "Microsoft.Network/virtualNetworks/subnets/action",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleStandaloneGateway = new Azure.ApiManagement.StandaloneGateway("example", new()
    ///     {
    ///         Name = "example-gateway-flexible",
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///         VirtualNetworkType = "External",
    ///         BackendSubnetId = exampleSubnet.Id,
    ///         Sku = new Azure.ApiManagement.Inputs.StandaloneGatewaySkuArgs
    ///         {
    ///             Capacity = 1,
    ///             Name = "WorkspaceGatewayPremium",
    ///         },
    ///         Tags = 
    ///         {
    ///             { "Hello", "World" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## API Providers
    /// 
    /// &lt;!-- This section is generated, changes will be overwritten --&gt;
    /// This resource uses the following Azure API Providers:
    /// 
    /// * `Microsoft.ApiManagement` - 2024-05-01
    /// 
    /// ## Import
    /// 
    /// API Management Standalone Gateway can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:apimanagement/standaloneGateway:StandaloneGateway example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.ApiManagement/gateways/gateway1
    /// ```
    /// </summary>
    [AzureResourceType("azure:apimanagement/standaloneGateway:StandaloneGateway")]
    public partial class StandaloneGateway : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies the subnet ID in which the backend systems are hosted. Changing this forces a new resource to be created.
        /// </summary>
        [Output("backendSubnetId")]
        public Output<string?> BackendSubnetId { get; private set; } = null!;

        /// <summary>
        /// Specifies the Azure Region where the API Management Standalone Gateway should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Specifies the name which should be used for this API Management Standalone Gateway. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the Resource Group where the API Management Standalone Gateway should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// A `sku` block as defined below.
        /// </summary>
        [Output("sku")]
        public Output<Outputs.StandaloneGatewaySku> Sku { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags which should be assigned to the API Management Standalone Gateway. Changing this forces a new resource to be created.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Specifies the type of VPN in which API Management gateway needs to be configured. Possible values are `External` and `Internal`. Changing this forces a new resource to be created.
        /// </summary>
        [Output("virtualNetworkType")]
        public Output<string?> VirtualNetworkType { get; private set; } = null!;


        /// <summary>
        /// Create a StandaloneGateway resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public StandaloneGateway(string name, StandaloneGatewayArgs args, CustomResourceOptions? options = null)
            : base("azure:apimanagement/standaloneGateway:StandaloneGateway", name, args ?? new StandaloneGatewayArgs(), MakeResourceOptions(options, ""))
        {
        }

        private StandaloneGateway(string name, Input<string> id, StandaloneGatewayState? state = null, CustomResourceOptions? options = null)
            : base("azure:apimanagement/standaloneGateway:StandaloneGateway", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing StandaloneGateway resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static StandaloneGateway Get(string name, Input<string> id, StandaloneGatewayState? state = null, CustomResourceOptions? options = null)
        {
            return new StandaloneGateway(name, id, state, options);
        }
    }

    public sealed class StandaloneGatewayArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the subnet ID in which the backend systems are hosted. Changing this forces a new resource to be created.
        /// </summary>
        [Input("backendSubnetId")]
        public Input<string>? BackendSubnetId { get; set; }

        /// <summary>
        /// Specifies the Azure Region where the API Management Standalone Gateway should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Specifies the name which should be used for this API Management Standalone Gateway. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the name of the Resource Group where the API Management Standalone Gateway should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// A `sku` block as defined below.
        /// </summary>
        [Input("sku", required: true)]
        public Input<Inputs.StandaloneGatewaySkuArgs> Sku { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the API Management Standalone Gateway. Changing this forces a new resource to be created.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Specifies the type of VPN in which API Management gateway needs to be configured. Possible values are `External` and `Internal`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("virtualNetworkType")]
        public Input<string>? VirtualNetworkType { get; set; }

        public StandaloneGatewayArgs()
        {
        }
        public static new StandaloneGatewayArgs Empty => new StandaloneGatewayArgs();
    }

    public sealed class StandaloneGatewayState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the subnet ID in which the backend systems are hosted. Changing this forces a new resource to be created.
        /// </summary>
        [Input("backendSubnetId")]
        public Input<string>? BackendSubnetId { get; set; }

        /// <summary>
        /// Specifies the Azure Region where the API Management Standalone Gateway should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Specifies the name which should be used for this API Management Standalone Gateway. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the name of the Resource Group where the API Management Standalone Gateway should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// A `sku` block as defined below.
        /// </summary>
        [Input("sku")]
        public Input<Inputs.StandaloneGatewaySkuGetArgs>? Sku { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the API Management Standalone Gateway. Changing this forces a new resource to be created.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Specifies the type of VPN in which API Management gateway needs to be configured. Possible values are `External` and `Internal`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("virtualNetworkType")]
        public Input<string>? VirtualNetworkType { get; set; }

        public StandaloneGatewayState()
        {
        }
        public static new StandaloneGatewayState Empty => new StandaloneGatewayState();
    }
}
