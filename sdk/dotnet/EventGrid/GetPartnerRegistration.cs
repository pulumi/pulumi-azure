// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.EventGrid
{
    public static class GetPartnerRegistration
    {
        /// <summary>
        /// Use this data source to access information about an existing EventGrid Partner Registration
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.EventGrid.GetPartnerRegistration.Invoke(new()
        ///     {
        ///         Name = "my-eventgrid-partner-registration",
        ///         ResourceGroupName = "example-resources",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["eventgridPartnerRegistrationId"] = example.Apply(getPartnerRegistrationResult =&gt; getPartnerRegistrationResult.PartnerRegistrationId),
        ///     };
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Microsoft.EventGrid` - 2022-06-15
        /// </summary>
        public static Task<GetPartnerRegistrationResult> InvokeAsync(GetPartnerRegistrationArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPartnerRegistrationResult>("azure:eventgrid/getPartnerRegistration:getPartnerRegistration", args ?? new GetPartnerRegistrationArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing EventGrid Partner Registration
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.EventGrid.GetPartnerRegistration.Invoke(new()
        ///     {
        ///         Name = "my-eventgrid-partner-registration",
        ///         ResourceGroupName = "example-resources",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["eventgridPartnerRegistrationId"] = example.Apply(getPartnerRegistrationResult =&gt; getPartnerRegistrationResult.PartnerRegistrationId),
        ///     };
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Microsoft.EventGrid` - 2022-06-15
        /// </summary>
        public static Output<GetPartnerRegistrationResult> Invoke(GetPartnerRegistrationInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPartnerRegistrationResult>("azure:eventgrid/getPartnerRegistration:getPartnerRegistration", args ?? new GetPartnerRegistrationInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing EventGrid Partner Registration
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.EventGrid.GetPartnerRegistration.Invoke(new()
        ///     {
        ///         Name = "my-eventgrid-partner-registration",
        ///         ResourceGroupName = "example-resources",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["eventgridPartnerRegistrationId"] = example.Apply(getPartnerRegistrationResult =&gt; getPartnerRegistrationResult.PartnerRegistrationId),
        ///     };
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Microsoft.EventGrid` - 2022-06-15
        /// </summary>
        public static Output<GetPartnerRegistrationResult> Invoke(GetPartnerRegistrationInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetPartnerRegistrationResult>("azure:eventgrid/getPartnerRegistration:getPartnerRegistration", args ?? new GetPartnerRegistrationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPartnerRegistrationArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the EventGrid Partner Registration resource.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the resource group in which the EventGrid Partner Registration exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetPartnerRegistrationArgs()
        {
        }
        public static new GetPartnerRegistrationArgs Empty => new GetPartnerRegistrationArgs();
    }

    public sealed class GetPartnerRegistrationInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the EventGrid Partner Registration resource.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of the resource group in which the EventGrid Partner Registration exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetPartnerRegistrationInvokeArgs()
        {
        }
        public static new GetPartnerRegistrationInvokeArgs Empty => new GetPartnerRegistrationInvokeArgs();
    }


    [OutputType]
    public sealed class GetPartnerRegistrationResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Name;
        /// <summary>
        /// The immutable id of the corresponding partner registration.
        /// </summary>
        public readonly string PartnerRegistrationId;
        public readonly string ResourceGroupName;
        /// <summary>
        /// A mapping of tags which are assigned to the EventGrid Partner Registration.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;

        [OutputConstructor]
        private GetPartnerRegistrationResult(
            string id,

            string name,

            string partnerRegistrationId,

            string resourceGroupName,

            ImmutableDictionary<string, string> tags)
        {
            Id = id;
            Name = name;
            PartnerRegistrationId = partnerRegistrationId;
            ResourceGroupName = resourceGroupName;
            Tags = tags;
        }
    }
}
