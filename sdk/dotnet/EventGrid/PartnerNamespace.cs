// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.EventGrid
{
    /// <summary>
    /// Manages an Event Grid Partner Namespace.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Name = "example-resources",
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var examplePartnerRegistration = new Azure.EventGrid.PartnerRegistration("example", new()
    ///     {
    ///         Name = "example-partner-registration",
    ///         ResourceGroupName = example.Name,
    ///     });
    /// 
    ///     var examplePartnerNamespace = new Azure.EventGrid.PartnerNamespace("example", new()
    ///     {
    ///         Name = "example-partner-namespace",
    ///         Location = example.Location,
    ///         ResourceGroupName = example.Name,
    ///         PartnerRegistrationId = examplePartnerRegistration.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## API Providers
    /// 
    /// &lt;!-- This section is generated, changes will be overwritten --&gt;
    /// This resource uses the following Azure API Providers:
    /// 
    /// * `Microsoft.EventGrid` - 2025-02-15
    /// 
    /// ## Import
    /// 
    /// Event Grid Partner Namespaces can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:eventgrid/partnerNamespace:PartnerNamespace example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example/providers/Microsoft.EventGrid/partnerNamespaces/example
    /// ```
    /// </summary>
    [AzureResourceType("azure:eventgrid/partnerNamespace:PartnerNamespace")]
    public partial class PartnerNamespace : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The endpoint for the Event Grid Partner Namespace.
        /// </summary>
        [Output("endpoint")]
        public Output<string> Endpoint { get; private set; } = null!;

        /// <summary>
        /// One or more `inbound_ip_rule` blocks as defined below.
        /// </summary>
        [Output("inboundIpRules")]
        public Output<ImmutableArray<Outputs.PartnerNamespaceInboundIpRule>> InboundIpRules { get; private set; } = null!;

        /// <summary>
        /// Whether local authentication methods are enabled for the Event Grid Partner Namespace. Defaults to `true`.
        /// </summary>
        [Output("localAuthenticationEnabled")]
        public Output<bool?> LocalAuthenticationEnabled { get; private set; } = null!;

        /// <summary>
        /// Specifies the Azure Region where the Event Grid Partner Namespace exists. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Event Grid Partner Namespace. Changing this forces a new Event Grid Partner Namespace to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The resource Id of the Event Grid Partner Registration that this namespace is associated with. Changing this forces a new Event Grid Partner Namespace to be created.
        /// </summary>
        [Output("partnerRegistrationId")]
        public Output<string> PartnerRegistrationId { get; private set; } = null!;

        /// <summary>
        /// The partner topic routing mode. Possible values are `ChannelNameHeader` and `SourceEventAttribute`. Defaults to `ChannelNameHeader`. Changing this forces a new Event Grid Partner Namespace to be created.
        /// </summary>
        [Output("partnerTopicRoutingMode")]
        public Output<string?> PartnerTopicRoutingMode { get; private set; } = null!;

        /// <summary>
        /// Whether or not public network access is allowed for this server. Possible values are `Enabled` and `Disabled`. Defaults to `Enabled`.
        /// </summary>
        [Output("publicNetworkAccess")]
        public Output<string?> PublicNetworkAccess { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Event Grid Partner Namespace should exist. Changing this forces a new Event Grid Partner Namespace to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags which should be assigned to the Event Grid Partner Namespace.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a PartnerNamespace resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PartnerNamespace(string name, PartnerNamespaceArgs args, CustomResourceOptions? options = null)
            : base("azure:eventgrid/partnerNamespace:PartnerNamespace", name, args ?? new PartnerNamespaceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PartnerNamespace(string name, Input<string> id, PartnerNamespaceState? state = null, CustomResourceOptions? options = null)
            : base("azure:eventgrid/partnerNamespace:PartnerNamespace", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PartnerNamespace resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PartnerNamespace Get(string name, Input<string> id, PartnerNamespaceState? state = null, CustomResourceOptions? options = null)
        {
            return new PartnerNamespace(name, id, state, options);
        }
    }

    public sealed class PartnerNamespaceArgs : global::Pulumi.ResourceArgs
    {
        [Input("inboundIpRules")]
        private InputList<Inputs.PartnerNamespaceInboundIpRuleArgs>? _inboundIpRules;

        /// <summary>
        /// One or more `inbound_ip_rule` blocks as defined below.
        /// </summary>
        public InputList<Inputs.PartnerNamespaceInboundIpRuleArgs> InboundIpRules
        {
            get => _inboundIpRules ?? (_inboundIpRules = new InputList<Inputs.PartnerNamespaceInboundIpRuleArgs>());
            set => _inboundIpRules = value;
        }

        /// <summary>
        /// Whether local authentication methods are enabled for the Event Grid Partner Namespace. Defaults to `true`.
        /// </summary>
        [Input("localAuthenticationEnabled")]
        public Input<bool>? LocalAuthenticationEnabled { get; set; }

        /// <summary>
        /// Specifies the Azure Region where the Event Grid Partner Namespace exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name which should be used for this Event Grid Partner Namespace. Changing this forces a new Event Grid Partner Namespace to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The resource Id of the Event Grid Partner Registration that this namespace is associated with. Changing this forces a new Event Grid Partner Namespace to be created.
        /// </summary>
        [Input("partnerRegistrationId", required: true)]
        public Input<string> PartnerRegistrationId { get; set; } = null!;

        /// <summary>
        /// The partner topic routing mode. Possible values are `ChannelNameHeader` and `SourceEventAttribute`. Defaults to `ChannelNameHeader`. Changing this forces a new Event Grid Partner Namespace to be created.
        /// </summary>
        [Input("partnerTopicRoutingMode")]
        public Input<string>? PartnerTopicRoutingMode { get; set; }

        /// <summary>
        /// Whether or not public network access is allowed for this server. Possible values are `Enabled` and `Disabled`. Defaults to `Enabled`.
        /// </summary>
        [Input("publicNetworkAccess")]
        public Input<string>? PublicNetworkAccess { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Event Grid Partner Namespace should exist. Changing this forces a new Event Grid Partner Namespace to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Event Grid Partner Namespace.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public PartnerNamespaceArgs()
        {
        }
        public static new PartnerNamespaceArgs Empty => new PartnerNamespaceArgs();
    }

    public sealed class PartnerNamespaceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The endpoint for the Event Grid Partner Namespace.
        /// </summary>
        [Input("endpoint")]
        public Input<string>? Endpoint { get; set; }

        [Input("inboundIpRules")]
        private InputList<Inputs.PartnerNamespaceInboundIpRuleGetArgs>? _inboundIpRules;

        /// <summary>
        /// One or more `inbound_ip_rule` blocks as defined below.
        /// </summary>
        public InputList<Inputs.PartnerNamespaceInboundIpRuleGetArgs> InboundIpRules
        {
            get => _inboundIpRules ?? (_inboundIpRules = new InputList<Inputs.PartnerNamespaceInboundIpRuleGetArgs>());
            set => _inboundIpRules = value;
        }

        /// <summary>
        /// Whether local authentication methods are enabled for the Event Grid Partner Namespace. Defaults to `true`.
        /// </summary>
        [Input("localAuthenticationEnabled")]
        public Input<bool>? LocalAuthenticationEnabled { get; set; }

        /// <summary>
        /// Specifies the Azure Region where the Event Grid Partner Namespace exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name which should be used for this Event Grid Partner Namespace. Changing this forces a new Event Grid Partner Namespace to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The resource Id of the Event Grid Partner Registration that this namespace is associated with. Changing this forces a new Event Grid Partner Namespace to be created.
        /// </summary>
        [Input("partnerRegistrationId")]
        public Input<string>? PartnerRegistrationId { get; set; }

        /// <summary>
        /// The partner topic routing mode. Possible values are `ChannelNameHeader` and `SourceEventAttribute`. Defaults to `ChannelNameHeader`. Changing this forces a new Event Grid Partner Namespace to be created.
        /// </summary>
        [Input("partnerTopicRoutingMode")]
        public Input<string>? PartnerTopicRoutingMode { get; set; }

        /// <summary>
        /// Whether or not public network access is allowed for this server. Possible values are `Enabled` and `Disabled`. Defaults to `Enabled`.
        /// </summary>
        [Input("publicNetworkAccess")]
        public Input<string>? PublicNetworkAccess { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Event Grid Partner Namespace should exist. Changing this forces a new Event Grid Partner Namespace to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Event Grid Partner Namespace.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public PartnerNamespaceState()
        {
        }
        public static new PartnerNamespaceState Empty => new PartnerNamespaceState();
    }
}
