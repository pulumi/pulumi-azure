// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.EventGrid
{
    /// <summary>
    /// Manages an EventGrid Partner Registration.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Name = "example-resources",
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var examplePartnerRegistration = new Azure.EventGrid.PartnerRegistration("example", new()
    ///     {
    ///         Name = "example-partner-registration",
    ///         ResourceGroupName = example.Name,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## API Providers
    /// 
    /// &lt;!-- This section is generated, changes will be overwritten --&gt;
    /// This resource uses the following Azure API Providers:
    /// 
    /// * `Microsoft.EventGrid` - 2025-02-15
    /// 
    /// ## Import
    /// 
    /// EventGrid Partner Registrations can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:eventgrid/partnerRegistration:PartnerRegistration example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example/providers/Microsoft.EventGrid/partnerRegistrations/example
    /// ```
    /// </summary>
    [AzureResourceType("azure:eventgrid/partnerRegistration:PartnerRegistration")]
    public partial class PartnerRegistration : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name which should be used for this EventGrid Partner Registration. Changing this forces a new EventGrid Partner Registration to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The immutable id of the corresponding partner registration.
        /// </summary>
        [Output("partnerRegistrationId")]
        public Output<string> PartnerRegistrationId { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the EventGrid Partner Registration should exist. Changing this forces a new EventGrid Partner Registration to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags which should be assigned to the EventGrid Partner Registration.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a PartnerRegistration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PartnerRegistration(string name, PartnerRegistrationArgs args, CustomResourceOptions? options = null)
            : base("azure:eventgrid/partnerRegistration:PartnerRegistration", name, args ?? new PartnerRegistrationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PartnerRegistration(string name, Input<string> id, PartnerRegistrationState? state = null, CustomResourceOptions? options = null)
            : base("azure:eventgrid/partnerRegistration:PartnerRegistration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PartnerRegistration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PartnerRegistration Get(string name, Input<string> id, PartnerRegistrationState? state = null, CustomResourceOptions? options = null)
        {
            return new PartnerRegistration(name, id, state, options);
        }
    }

    public sealed class PartnerRegistrationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name which should be used for this EventGrid Partner Registration. Changing this forces a new EventGrid Partner Registration to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the Resource Group where the EventGrid Partner Registration should exist. Changing this forces a new EventGrid Partner Registration to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the EventGrid Partner Registration.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public PartnerRegistrationArgs()
        {
        }
        public static new PartnerRegistrationArgs Empty => new PartnerRegistrationArgs();
    }

    public sealed class PartnerRegistrationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name which should be used for this EventGrid Partner Registration. Changing this forces a new EventGrid Partner Registration to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The immutable id of the corresponding partner registration.
        /// </summary>
        [Input("partnerRegistrationId")]
        public Input<string>? PartnerRegistrationId { get; set; }

        /// <summary>
        /// The name of the Resource Group where the EventGrid Partner Registration should exist. Changing this forces a new EventGrid Partner Registration to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the EventGrid Partner Registration.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public PartnerRegistrationState()
        {
        }
        public static new PartnerRegistrationState Empty => new PartnerRegistrationState();
    }
}
