// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.EventGrid
{
    /// <summary>
    /// Manages an EventGrid Event Subscription
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleAccount = new Azure.Storage.Account("exampleAccount", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         AccountTier = "Standard",
    ///         AccountReplicationType = "LRS",
    ///         Tags = 
    ///         {
    ///             { "environment", "staging" },
    ///         },
    ///     });
    /// 
    ///     var exampleQueue = new Azure.Storage.Queue("exampleQueue", new()
    ///     {
    ///         StorageAccountName = exampleAccount.Name,
    ///     });
    /// 
    ///     var exampleEventSubscription = new Azure.EventGrid.EventSubscription("exampleEventSubscription", new()
    ///     {
    ///         Scope = exampleResourceGroup.Id,
    ///         StorageQueueEndpoint = new Azure.EventGrid.Inputs.EventSubscriptionStorageQueueEndpointArgs
    ///         {
    ///             StorageAccountId = exampleAccount.Id,
    ///             QueueName = exampleQueue.Name,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// EventGrid Event Subscription's can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:eventgrid/eventSubscription:EventSubscription eventSubscription1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.EventGrid/topics/topic1/providers/Microsoft.EventGrid/eventSubscriptions/eventSubscription1
    /// ```
    /// </summary>
    [AzureResourceType("azure:eventgrid/eventSubscription:EventSubscription")]
    public partial class EventSubscription : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A `advanced_filter` block as defined below.
        /// </summary>
        [Output("advancedFilter")]
        public Output<Outputs.EventSubscriptionAdvancedFilter?> AdvancedFilter { get; private set; } = null!;

        /// <summary>
        /// Specifies whether advanced filters should be evaluated against an array of values instead of expecting a singular value. Defaults to `false`.
        /// </summary>
        [Output("advancedFilteringOnArraysEnabled")]
        public Output<bool?> AdvancedFilteringOnArraysEnabled { get; private set; } = null!;

        /// <summary>
        /// An `azure_function_endpoint` block as defined below.
        /// </summary>
        [Output("azureFunctionEndpoint")]
        public Output<Outputs.EventSubscriptionAzureFunctionEndpoint?> AzureFunctionEndpoint { get; private set; } = null!;

        /// <summary>
        /// A `dead_letter_identity` block as defined below.
        /// 
        /// &gt; **Note:** `storage_blob_dead_letter_destination` must be specified when a `dead_letter_identity` is specified
        /// </summary>
        [Output("deadLetterIdentity")]
        public Output<Outputs.EventSubscriptionDeadLetterIdentity?> DeadLetterIdentity { get; private set; } = null!;

        /// <summary>
        /// A `delivery_identity` block as defined below.
        /// </summary>
        [Output("deliveryIdentity")]
        public Output<Outputs.EventSubscriptionDeliveryIdentity?> DeliveryIdentity { get; private set; } = null!;

        /// <summary>
        /// One or more `delivery_property` blocks as defined below.
        /// </summary>
        [Output("deliveryProperties")]
        public Output<ImmutableArray<Outputs.EventSubscriptionDeliveryProperty>> DeliveryProperties { get; private set; } = null!;

        /// <summary>
        /// Specifies the event delivery schema for the event subscription. Possible values include: `EventGridSchema`, `CloudEventSchemaV1_0`, `CustomInputSchema`. Defaults to `EventGridSchema`. Changing this forces a new resource to be created.
        /// </summary>
        [Output("eventDeliverySchema")]
        public Output<string?> EventDeliverySchema { get; private set; } = null!;

        /// <summary>
        /// Specifies the id where the Event Hub is located.
        /// </summary>
        [Output("eventhubEndpointId")]
        public Output<string> EventhubEndpointId { get; private set; } = null!;

        /// <summary>
        /// Specifies the expiration time of the event subscription (Datetime Format `RFC 3339`).
        /// </summary>
        [Output("expirationTimeUtc")]
        public Output<string?> ExpirationTimeUtc { get; private set; } = null!;

        /// <summary>
        /// Specifies the id where the Hybrid Connection is located.
        /// </summary>
        [Output("hybridConnectionEndpointId")]
        public Output<string> HybridConnectionEndpointId { get; private set; } = null!;

        /// <summary>
        /// A list of applicable event types that need to be part of the event subscription.
        /// </summary>
        [Output("includedEventTypes")]
        public Output<ImmutableArray<string>> IncludedEventTypes { get; private set; } = null!;

        /// <summary>
        /// A list of labels to assign to the event subscription.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableArray<string>> Labels { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the EventGrid Event Subscription resource. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A `retry_policy` block as defined below.
        /// </summary>
        [Output("retryPolicy")]
        public Output<Outputs.EventSubscriptionRetryPolicy> RetryPolicy { get; private set; } = null!;

        /// <summary>
        /// Specifies the scope at which the EventGrid Event Subscription should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Output("scope")]
        public Output<string> Scope { get; private set; } = null!;

        /// <summary>
        /// Specifies the id where the Service Bus Queue is located.
        /// </summary>
        [Output("serviceBusQueueEndpointId")]
        public Output<string?> ServiceBusQueueEndpointId { get; private set; } = null!;

        /// <summary>
        /// Specifies the id where the Service Bus Topic is located.
        /// </summary>
        [Output("serviceBusTopicEndpointId")]
        public Output<string?> ServiceBusTopicEndpointId { get; private set; } = null!;

        /// <summary>
        /// A `storage_blob_dead_letter_destination` block as defined below.
        /// </summary>
        [Output("storageBlobDeadLetterDestination")]
        public Output<Outputs.EventSubscriptionStorageBlobDeadLetterDestination?> StorageBlobDeadLetterDestination { get; private set; } = null!;

        /// <summary>
        /// A `storage_queue_endpoint` block as defined below.
        /// </summary>
        [Output("storageQueueEndpoint")]
        public Output<Outputs.EventSubscriptionStorageQueueEndpoint?> StorageQueueEndpoint { get; private set; } = null!;

        /// <summary>
        /// A `subject_filter` block as defined below.
        /// </summary>
        [Output("subjectFilter")]
        public Output<Outputs.EventSubscriptionSubjectFilter?> SubjectFilter { get; private set; } = null!;

        /// <summary>
        /// A `webhook_endpoint` block as defined below.
        /// 
        /// &gt; **NOTE:** One of `eventhub_endpoint_id`, `hybrid_connection_endpoint_id`, `service_bus_queue_endpoint_id`, `service_bus_topic_endpoint_id`, `storage_queue_endpoint`, `webhook_endpoint` or `azure_function_endpoint` must be specified.
        /// </summary>
        [Output("webhookEndpoint")]
        public Output<Outputs.EventSubscriptionWebhookEndpoint?> WebhookEndpoint { get; private set; } = null!;


        /// <summary>
        /// Create a EventSubscription resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EventSubscription(string name, EventSubscriptionArgs args, CustomResourceOptions? options = null)
            : base("azure:eventgrid/eventSubscription:EventSubscription", name, args ?? new EventSubscriptionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EventSubscription(string name, Input<string> id, EventSubscriptionState? state = null, CustomResourceOptions? options = null)
            : base("azure:eventgrid/eventSubscription:EventSubscription", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure:eventhub/eventSubscription:EventSubscription" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EventSubscription resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EventSubscription Get(string name, Input<string> id, EventSubscriptionState? state = null, CustomResourceOptions? options = null)
        {
            return new EventSubscription(name, id, state, options);
        }
    }

    public sealed class EventSubscriptionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A `advanced_filter` block as defined below.
        /// </summary>
        [Input("advancedFilter")]
        public Input<Inputs.EventSubscriptionAdvancedFilterArgs>? AdvancedFilter { get; set; }

        /// <summary>
        /// Specifies whether advanced filters should be evaluated against an array of values instead of expecting a singular value. Defaults to `false`.
        /// </summary>
        [Input("advancedFilteringOnArraysEnabled")]
        public Input<bool>? AdvancedFilteringOnArraysEnabled { get; set; }

        /// <summary>
        /// An `azure_function_endpoint` block as defined below.
        /// </summary>
        [Input("azureFunctionEndpoint")]
        public Input<Inputs.EventSubscriptionAzureFunctionEndpointArgs>? AzureFunctionEndpoint { get; set; }

        /// <summary>
        /// A `dead_letter_identity` block as defined below.
        /// 
        /// &gt; **Note:** `storage_blob_dead_letter_destination` must be specified when a `dead_letter_identity` is specified
        /// </summary>
        [Input("deadLetterIdentity")]
        public Input<Inputs.EventSubscriptionDeadLetterIdentityArgs>? DeadLetterIdentity { get; set; }

        /// <summary>
        /// A `delivery_identity` block as defined below.
        /// </summary>
        [Input("deliveryIdentity")]
        public Input<Inputs.EventSubscriptionDeliveryIdentityArgs>? DeliveryIdentity { get; set; }

        [Input("deliveryProperties")]
        private InputList<Inputs.EventSubscriptionDeliveryPropertyArgs>? _deliveryProperties;

        /// <summary>
        /// One or more `delivery_property` blocks as defined below.
        /// </summary>
        public InputList<Inputs.EventSubscriptionDeliveryPropertyArgs> DeliveryProperties
        {
            get => _deliveryProperties ?? (_deliveryProperties = new InputList<Inputs.EventSubscriptionDeliveryPropertyArgs>());
            set => _deliveryProperties = value;
        }

        /// <summary>
        /// Specifies the event delivery schema for the event subscription. Possible values include: `EventGridSchema`, `CloudEventSchemaV1_0`, `CustomInputSchema`. Defaults to `EventGridSchema`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("eventDeliverySchema")]
        public Input<string>? EventDeliverySchema { get; set; }

        /// <summary>
        /// Specifies the id where the Event Hub is located.
        /// </summary>
        [Input("eventhubEndpointId")]
        public Input<string>? EventhubEndpointId { get; set; }

        /// <summary>
        /// Specifies the expiration time of the event subscription (Datetime Format `RFC 3339`).
        /// </summary>
        [Input("expirationTimeUtc")]
        public Input<string>? ExpirationTimeUtc { get; set; }

        /// <summary>
        /// Specifies the id where the Hybrid Connection is located.
        /// </summary>
        [Input("hybridConnectionEndpointId")]
        public Input<string>? HybridConnectionEndpointId { get; set; }

        [Input("includedEventTypes")]
        private InputList<string>? _includedEventTypes;

        /// <summary>
        /// A list of applicable event types that need to be part of the event subscription.
        /// </summary>
        public InputList<string> IncludedEventTypes
        {
            get => _includedEventTypes ?? (_includedEventTypes = new InputList<string>());
            set => _includedEventTypes = value;
        }

        [Input("labels")]
        private InputList<string>? _labels;

        /// <summary>
        /// A list of labels to assign to the event subscription.
        /// </summary>
        public InputList<string> Labels
        {
            get => _labels ?? (_labels = new InputList<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Specifies the name of the EventGrid Event Subscription resource. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A `retry_policy` block as defined below.
        /// </summary>
        [Input("retryPolicy")]
        public Input<Inputs.EventSubscriptionRetryPolicyArgs>? RetryPolicy { get; set; }

        /// <summary>
        /// Specifies the scope at which the EventGrid Event Subscription should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("scope", required: true)]
        public Input<string> Scope { get; set; } = null!;

        /// <summary>
        /// Specifies the id where the Service Bus Queue is located.
        /// </summary>
        [Input("serviceBusQueueEndpointId")]
        public Input<string>? ServiceBusQueueEndpointId { get; set; }

        /// <summary>
        /// Specifies the id where the Service Bus Topic is located.
        /// </summary>
        [Input("serviceBusTopicEndpointId")]
        public Input<string>? ServiceBusTopicEndpointId { get; set; }

        /// <summary>
        /// A `storage_blob_dead_letter_destination` block as defined below.
        /// </summary>
        [Input("storageBlobDeadLetterDestination")]
        public Input<Inputs.EventSubscriptionStorageBlobDeadLetterDestinationArgs>? StorageBlobDeadLetterDestination { get; set; }

        /// <summary>
        /// A `storage_queue_endpoint` block as defined below.
        /// </summary>
        [Input("storageQueueEndpoint")]
        public Input<Inputs.EventSubscriptionStorageQueueEndpointArgs>? StorageQueueEndpoint { get; set; }

        /// <summary>
        /// A `subject_filter` block as defined below.
        /// </summary>
        [Input("subjectFilter")]
        public Input<Inputs.EventSubscriptionSubjectFilterArgs>? SubjectFilter { get; set; }

        /// <summary>
        /// A `webhook_endpoint` block as defined below.
        /// 
        /// &gt; **NOTE:** One of `eventhub_endpoint_id`, `hybrid_connection_endpoint_id`, `service_bus_queue_endpoint_id`, `service_bus_topic_endpoint_id`, `storage_queue_endpoint`, `webhook_endpoint` or `azure_function_endpoint` must be specified.
        /// </summary>
        [Input("webhookEndpoint")]
        public Input<Inputs.EventSubscriptionWebhookEndpointArgs>? WebhookEndpoint { get; set; }

        public EventSubscriptionArgs()
        {
        }
        public static new EventSubscriptionArgs Empty => new EventSubscriptionArgs();
    }

    public sealed class EventSubscriptionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A `advanced_filter` block as defined below.
        /// </summary>
        [Input("advancedFilter")]
        public Input<Inputs.EventSubscriptionAdvancedFilterGetArgs>? AdvancedFilter { get; set; }

        /// <summary>
        /// Specifies whether advanced filters should be evaluated against an array of values instead of expecting a singular value. Defaults to `false`.
        /// </summary>
        [Input("advancedFilteringOnArraysEnabled")]
        public Input<bool>? AdvancedFilteringOnArraysEnabled { get; set; }

        /// <summary>
        /// An `azure_function_endpoint` block as defined below.
        /// </summary>
        [Input("azureFunctionEndpoint")]
        public Input<Inputs.EventSubscriptionAzureFunctionEndpointGetArgs>? AzureFunctionEndpoint { get; set; }

        /// <summary>
        /// A `dead_letter_identity` block as defined below.
        /// 
        /// &gt; **Note:** `storage_blob_dead_letter_destination` must be specified when a `dead_letter_identity` is specified
        /// </summary>
        [Input("deadLetterIdentity")]
        public Input<Inputs.EventSubscriptionDeadLetterIdentityGetArgs>? DeadLetterIdentity { get; set; }

        /// <summary>
        /// A `delivery_identity` block as defined below.
        /// </summary>
        [Input("deliveryIdentity")]
        public Input<Inputs.EventSubscriptionDeliveryIdentityGetArgs>? DeliveryIdentity { get; set; }

        [Input("deliveryProperties")]
        private InputList<Inputs.EventSubscriptionDeliveryPropertyGetArgs>? _deliveryProperties;

        /// <summary>
        /// One or more `delivery_property` blocks as defined below.
        /// </summary>
        public InputList<Inputs.EventSubscriptionDeliveryPropertyGetArgs> DeliveryProperties
        {
            get => _deliveryProperties ?? (_deliveryProperties = new InputList<Inputs.EventSubscriptionDeliveryPropertyGetArgs>());
            set => _deliveryProperties = value;
        }

        /// <summary>
        /// Specifies the event delivery schema for the event subscription. Possible values include: `EventGridSchema`, `CloudEventSchemaV1_0`, `CustomInputSchema`. Defaults to `EventGridSchema`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("eventDeliverySchema")]
        public Input<string>? EventDeliverySchema { get; set; }

        /// <summary>
        /// Specifies the id where the Event Hub is located.
        /// </summary>
        [Input("eventhubEndpointId")]
        public Input<string>? EventhubEndpointId { get; set; }

        /// <summary>
        /// Specifies the expiration time of the event subscription (Datetime Format `RFC 3339`).
        /// </summary>
        [Input("expirationTimeUtc")]
        public Input<string>? ExpirationTimeUtc { get; set; }

        /// <summary>
        /// Specifies the id where the Hybrid Connection is located.
        /// </summary>
        [Input("hybridConnectionEndpointId")]
        public Input<string>? HybridConnectionEndpointId { get; set; }

        [Input("includedEventTypes")]
        private InputList<string>? _includedEventTypes;

        /// <summary>
        /// A list of applicable event types that need to be part of the event subscription.
        /// </summary>
        public InputList<string> IncludedEventTypes
        {
            get => _includedEventTypes ?? (_includedEventTypes = new InputList<string>());
            set => _includedEventTypes = value;
        }

        [Input("labels")]
        private InputList<string>? _labels;

        /// <summary>
        /// A list of labels to assign to the event subscription.
        /// </summary>
        public InputList<string> Labels
        {
            get => _labels ?? (_labels = new InputList<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Specifies the name of the EventGrid Event Subscription resource. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A `retry_policy` block as defined below.
        /// </summary>
        [Input("retryPolicy")]
        public Input<Inputs.EventSubscriptionRetryPolicyGetArgs>? RetryPolicy { get; set; }

        /// <summary>
        /// Specifies the scope at which the EventGrid Event Subscription should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        /// <summary>
        /// Specifies the id where the Service Bus Queue is located.
        /// </summary>
        [Input("serviceBusQueueEndpointId")]
        public Input<string>? ServiceBusQueueEndpointId { get; set; }

        /// <summary>
        /// Specifies the id where the Service Bus Topic is located.
        /// </summary>
        [Input("serviceBusTopicEndpointId")]
        public Input<string>? ServiceBusTopicEndpointId { get; set; }

        /// <summary>
        /// A `storage_blob_dead_letter_destination` block as defined below.
        /// </summary>
        [Input("storageBlobDeadLetterDestination")]
        public Input<Inputs.EventSubscriptionStorageBlobDeadLetterDestinationGetArgs>? StorageBlobDeadLetterDestination { get; set; }

        /// <summary>
        /// A `storage_queue_endpoint` block as defined below.
        /// </summary>
        [Input("storageQueueEndpoint")]
        public Input<Inputs.EventSubscriptionStorageQueueEndpointGetArgs>? StorageQueueEndpoint { get; set; }

        /// <summary>
        /// A `subject_filter` block as defined below.
        /// </summary>
        [Input("subjectFilter")]
        public Input<Inputs.EventSubscriptionSubjectFilterGetArgs>? SubjectFilter { get; set; }

        /// <summary>
        /// A `webhook_endpoint` block as defined below.
        /// 
        /// &gt; **NOTE:** One of `eventhub_endpoint_id`, `hybrid_connection_endpoint_id`, `service_bus_queue_endpoint_id`, `service_bus_topic_endpoint_id`, `storage_queue_endpoint`, `webhook_endpoint` or `azure_function_endpoint` must be specified.
        /// </summary>
        [Input("webhookEndpoint")]
        public Input<Inputs.EventSubscriptionWebhookEndpointGetArgs>? WebhookEndpoint { get; set; }

        public EventSubscriptionState()
        {
        }
        public static new EventSubscriptionState Empty => new EventSubscriptionState();
    }
}
