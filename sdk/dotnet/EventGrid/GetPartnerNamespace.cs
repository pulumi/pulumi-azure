// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.EventGrid
{
    public static class GetPartnerNamespace
    {
        /// <summary>
        /// Use this data source to access information about an existing Event Grid Partner Namespace
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.EventGrid.GetPartnerNamespace.Invoke(new()
        ///     {
        ///         Name = "my-eventgrid-partner-namespace",
        ///         ResourceGroupName = "example-resources",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["eventgridPartnerNamespaceEndpoint"] = example.Apply(getPartnerNamespaceResult =&gt; getPartnerNamespaceResult.Endpoint),
        ///     };
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Microsoft.EventGrid` - 2025-02-15
        /// </summary>
        public static Task<GetPartnerNamespaceResult> InvokeAsync(GetPartnerNamespaceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPartnerNamespaceResult>("azure:eventgrid/getPartnerNamespace:getPartnerNamespace", args ?? new GetPartnerNamespaceArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Event Grid Partner Namespace
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.EventGrid.GetPartnerNamespace.Invoke(new()
        ///     {
        ///         Name = "my-eventgrid-partner-namespace",
        ///         ResourceGroupName = "example-resources",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["eventgridPartnerNamespaceEndpoint"] = example.Apply(getPartnerNamespaceResult =&gt; getPartnerNamespaceResult.Endpoint),
        ///     };
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Microsoft.EventGrid` - 2025-02-15
        /// </summary>
        public static Output<GetPartnerNamespaceResult> Invoke(GetPartnerNamespaceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPartnerNamespaceResult>("azure:eventgrid/getPartnerNamespace:getPartnerNamespace", args ?? new GetPartnerNamespaceInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Event Grid Partner Namespace
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.EventGrid.GetPartnerNamespace.Invoke(new()
        ///     {
        ///         Name = "my-eventgrid-partner-namespace",
        ///         ResourceGroupName = "example-resources",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["eventgridPartnerNamespaceEndpoint"] = example.Apply(getPartnerNamespaceResult =&gt; getPartnerNamespaceResult.Endpoint),
        ///     };
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Microsoft.EventGrid` - 2025-02-15
        /// </summary>
        public static Output<GetPartnerNamespaceResult> Invoke(GetPartnerNamespaceInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetPartnerNamespaceResult>("azure:eventgrid/getPartnerNamespace:getPartnerNamespace", args ?? new GetPartnerNamespaceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPartnerNamespaceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Event Grid Partner Namespace resource.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the resource group in which the Event Grid Partner Namespace exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetPartnerNamespaceArgs()
        {
        }
        public static new GetPartnerNamespaceArgs Empty => new GetPartnerNamespaceArgs();
    }

    public sealed class GetPartnerNamespaceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Event Grid Partner Namespace resource.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of the resource group in which the Event Grid Partner Namespace exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetPartnerNamespaceInvokeArgs()
        {
        }
        public static new GetPartnerNamespaceInvokeArgs Empty => new GetPartnerNamespaceInvokeArgs();
    }


    [OutputType]
    public sealed class GetPartnerNamespaceResult
    {
        /// <summary>
        /// The endpoint for the Event Grid Partner Namespace.
        /// </summary>
        public readonly string Endpoint;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// One or more `inbound_ip_rule` blocks as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPartnerNamespaceInboundIpRuleResult> InboundIpRules;
        /// <summary>
        /// Whether local authentication methods are enabled for the Event Grid Partner Namespace.
        /// </summary>
        public readonly bool LocalAuthenticationEnabled;
        /// <summary>
        /// The Azure Region where the Event Grid Partner Namespace exists.
        /// </summary>
        public readonly string Location;
        public readonly string Name;
        /// <summary>
        /// The resource Id of the partner registration associated with this Event Grid Partner Namespace.
        /// </summary>
        public readonly string PartnerRegistrationId;
        /// <summary>
        /// The partner topic routing mode.
        /// </summary>
        public readonly string PartnerTopicRoutingMode;
        /// <summary>
        /// Whether or not public network access is allowed for this server.
        /// </summary>
        public readonly string PublicNetworkAccess;
        public readonly string ResourceGroupName;
        /// <summary>
        /// A mapping of tags which are assigned to the Event Grid Partner Namespace.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;

        [OutputConstructor]
        private GetPartnerNamespaceResult(
            string endpoint,

            string id,

            ImmutableArray<Outputs.GetPartnerNamespaceInboundIpRuleResult> inboundIpRules,

            bool localAuthenticationEnabled,

            string location,

            string name,

            string partnerRegistrationId,

            string partnerTopicRoutingMode,

            string publicNetworkAccess,

            string resourceGroupName,

            ImmutableDictionary<string, string> tags)
        {
            Endpoint = endpoint;
            Id = id;
            InboundIpRules = inboundIpRules;
            LocalAuthenticationEnabled = localAuthenticationEnabled;
            Location = location;
            Name = name;
            PartnerRegistrationId = partnerRegistrationId;
            PartnerTopicRoutingMode = partnerTopicRoutingMode;
            PublicNetworkAccess = publicNetworkAccess;
            ResourceGroupName = resourceGroupName;
            Tags = tags;
        }
    }
}
