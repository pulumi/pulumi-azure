// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.AppService
{
    /// <summary>
    /// Manages an App Service Public Certificate.
    /// 
    /// ## Import
    /// 
    /// App Service Public Certificates can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:appservice/publicCertificate:PublicCertificate example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Web/sites/site1/publicCertificates/publicCertificate1
    /// ```
    /// </summary>
    [AzureResourceType("azure:appservice/publicCertificate:PublicCertificate")]
    public partial class PublicCertificate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the App Service. Changing this forces a new App Service Public Certificate to be created.
        /// </summary>
        [Output("appServiceName")]
        public Output<string> AppServiceName { get; private set; } = null!;

        /// <summary>
        /// The base64-encoded contents of the certificate. Changing this forces a new App Service Public Certificate to be created.
        /// </summary>
        [Output("blob")]
        public Output<string> Blob { get; private set; } = null!;

        /// <summary>
        /// The location of the certificate. Possible values are `CurrentUserMy`, `LocalMachineMy` and `Unknown`. Changing this forces a new App Service Public Certificate to be created.
        /// </summary>
        [Output("certificateLocation")]
        public Output<string> CertificateLocation { get; private set; } = null!;

        /// <summary>
        /// The name of the public certificate. Changing this forces a new App Service Public Certificate to be created.
        /// </summary>
        [Output("certificateName")]
        public Output<string> CertificateName { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the App Service Public Certificate should exist. Changing this forces a new App Service Public Certificate to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// The thumbprint of the public certificate.
        /// </summary>
        [Output("thumbprint")]
        public Output<string> Thumbprint { get; private set; } = null!;


        /// <summary>
        /// Create a PublicCertificate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PublicCertificate(string name, PublicCertificateArgs args, CustomResourceOptions? options = null)
            : base("azure:appservice/publicCertificate:PublicCertificate", name, args ?? new PublicCertificateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PublicCertificate(string name, Input<string> id, PublicCertificateState? state = null, CustomResourceOptions? options = null)
            : base("azure:appservice/publicCertificate:PublicCertificate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PublicCertificate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PublicCertificate Get(string name, Input<string> id, PublicCertificateState? state = null, CustomResourceOptions? options = null)
        {
            return new PublicCertificate(name, id, state, options);
        }
    }

    public sealed class PublicCertificateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the App Service. Changing this forces a new App Service Public Certificate to be created.
        /// </summary>
        [Input("appServiceName", required: true)]
        public Input<string> AppServiceName { get; set; } = null!;

        /// <summary>
        /// The base64-encoded contents of the certificate. Changing this forces a new App Service Public Certificate to be created.
        /// </summary>
        [Input("blob", required: true)]
        public Input<string> Blob { get; set; } = null!;

        /// <summary>
        /// The location of the certificate. Possible values are `CurrentUserMy`, `LocalMachineMy` and `Unknown`. Changing this forces a new App Service Public Certificate to be created.
        /// </summary>
        [Input("certificateLocation", required: true)]
        public Input<string> CertificateLocation { get; set; } = null!;

        /// <summary>
        /// The name of the public certificate. Changing this forces a new App Service Public Certificate to be created.
        /// </summary>
        [Input("certificateName", required: true)]
        public Input<string> CertificateName { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the App Service Public Certificate should exist. Changing this forces a new App Service Public Certificate to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public PublicCertificateArgs()
        {
        }
        public static new PublicCertificateArgs Empty => new PublicCertificateArgs();
    }

    public sealed class PublicCertificateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the App Service. Changing this forces a new App Service Public Certificate to be created.
        /// </summary>
        [Input("appServiceName")]
        public Input<string>? AppServiceName { get; set; }

        /// <summary>
        /// The base64-encoded contents of the certificate. Changing this forces a new App Service Public Certificate to be created.
        /// </summary>
        [Input("blob")]
        public Input<string>? Blob { get; set; }

        /// <summary>
        /// The location of the certificate. Possible values are `CurrentUserMy`, `LocalMachineMy` and `Unknown`. Changing this forces a new App Service Public Certificate to be created.
        /// </summary>
        [Input("certificateLocation")]
        public Input<string>? CertificateLocation { get; set; }

        /// <summary>
        /// The name of the public certificate. Changing this forces a new App Service Public Certificate to be created.
        /// </summary>
        [Input("certificateName")]
        public Input<string>? CertificateName { get; set; }

        /// <summary>
        /// The name of the Resource Group where the App Service Public Certificate should exist. Changing this forces a new App Service Public Certificate to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// The thumbprint of the public certificate.
        /// </summary>
        [Input("thumbprint")]
        public Input<string>? Thumbprint { get; set; }

        public PublicCertificateState()
        {
        }
        public static new PublicCertificateState Empty => new PublicCertificateState();
    }
}
