// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.AppService
{
    /// <summary>
    /// Manages a Function App Running on a Flex Consumption Plan.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Name = "example-resources",
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleAccount = new Azure.Storage.Account("example", new()
    ///     {
    ///         Name = "examplelinuxfunctionappsa",
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///         AccountTier = "Standard",
    ///         AccountReplicationType = "LRS",
    ///     });
    /// 
    ///     var exampleContainer = new Azure.Storage.Container("example", new()
    ///     {
    ///         Name = "example-flexcontainer",
    ///         StorageAccountId = exampleAccount.Id,
    ///         ContainerAccessType = "private",
    ///     });
    /// 
    ///     var exampleServicePlan = new Azure.AppService.ServicePlan("example", new()
    ///     {
    ///         Name = "example-app-service-plan",
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///         SkuName = "FC1",
    ///         OsType = "Linux",
    ///     });
    /// 
    ///     var exampleAppFlexConsumption = new Azure.AppService.AppFlexConsumption("example", new()
    ///     {
    ///         Name = "example-linux-function-app",
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///         ServicePlanId = exampleServicePlan.Id,
    ///         StorageContainerType = "blobContainer",
    ///         StorageContainerEndpoint = Output.Tuple(exampleAccount.PrimaryBlobEndpoint, exampleContainer.Name).Apply(values =&gt;
    ///         {
    ///             var primaryBlobEndpoint = values.Item1;
    ///             var name = values.Item2;
    ///             return $"{primaryBlobEndpoint}{name}";
    ///         }),
    ///         StorageAuthenticationType = "StorageAccountConnectionString",
    ///         StorageAccessKey = exampleAccount.PrimaryAccessKey,
    ///         RuntimeName = "node",
    ///         RuntimeVersion = "20",
    ///         MaximumInstanceCount = 50,
    ///         InstanceMemoryInMb = 2048,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The Function Apps can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:appservice/appFlexConsumption:AppFlexConsumption example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Web/sites/site1
    /// ```
    /// </summary>
    [AzureResourceType("azure:appservice/appFlexConsumption:AppFlexConsumption")]
    public partial class AppFlexConsumption : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A map of key-value pairs for [App
        /// Settings](https://docs.microsoft.com/en-us/azure/azure-functions/functions-app-settings) and custom values.
        /// </summary>
        [Output("appSettings")]
        public Output<ImmutableDictionary<string, string>?> AppSettings { get; private set; } = null!;

        /// <summary>
        /// A `auth_settings` block as defined below.
        /// </summary>
        [Output("authSettings")]
        public Output<Outputs.AppFlexConsumptionAuthSettings?> AuthSettings { get; private set; } = null!;

        /// <summary>
        /// An `auth_settings_v2` block as defined below.
        /// </summary>
        [Output("authSettingsV2")]
        public Output<Outputs.AppFlexConsumptionAuthSettingsV2?> AuthSettingsV2 { get; private set; } = null!;

        /// <summary>
        /// Should the function app use Client Certificates.
        /// </summary>
        [Output("clientCertificateEnabled")]
        public Output<bool?> ClientCertificateEnabled { get; private set; } = null!;

        /// <summary>
        /// Paths to exclude when using client certificates, separated by ;
        /// </summary>
        [Output("clientCertificateExclusionPaths")]
        public Output<string?> ClientCertificateExclusionPaths { get; private set; } = null!;

        /// <summary>
        /// The mode of the Function App's client certificates requirement for incoming requests. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser`. Defaults to `Optional`.
        /// </summary>
        [Output("clientCertificateMode")]
        public Output<string?> ClientCertificateMode { get; private set; } = null!;

        /// <summary>
        /// One or more `connection_string` blocks as defined below.
        /// </summary>
        [Output("connectionStrings")]
        public Output<ImmutableArray<Outputs.AppFlexConsumptionConnectionString>> ConnectionStrings { get; private set; } = null!;

        /// <summary>
        /// The identifier used by App Service to perform domain ownership verification via DNS TXT record.
        /// </summary>
        [Output("customDomainVerificationId")]
        public Output<string> CustomDomainVerificationId { get; private set; } = null!;

        /// <summary>
        /// The default hostname of the Linux Function App.
        /// </summary>
        [Output("defaultHostname")]
        public Output<string> DefaultHostname { get; private set; } = null!;

        /// <summary>
        /// Is the Function App enabled? Defaults to `true`.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// The ID of the App Service Environment used by Function App.
        /// </summary>
        [Output("hostingEnvironmentId")]
        public Output<string> HostingEnvironmentId { get; private set; } = null!;

        /// <summary>
        /// A `identity` block as defined below.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.AppFlexConsumptionIdentity?> Identity { get; private set; } = null!;

        /// <summary>
        /// The memory size of the instances on which your app runs. The [currently supported values](https://learn.microsoft.com/en-us/azure/azure-functions/flex-consumption-plan#instance-memory) are `2048` or `4096`.
        /// </summary>
        [Output("instanceMemoryInMb")]
        public Output<int?> InstanceMemoryInMb { get; private set; } = null!;

        /// <summary>
        /// The Kind value for this Linux Function App.
        /// </summary>
        [Output("kind")]
        public Output<string> Kind { get; private set; } = null!;

        /// <summary>
        /// The Azure Region where the Function App should exist. Changing this forces a new Function App to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The number of workers this function app can scale out to.
        /// </summary>
        [Output("maximumInstanceCount")]
        public Output<int?> MaximumInstanceCount { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Function App. Changing this forces a new Function App to be created. Limit the function name to 32 characters to avoid naming collisions. For more information about [Function App naming rule](https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/resource-name-rules#microsoftweb) and [Host ID Collisions](https://github.com/Azure/azure-functions-host/wiki/Host-IDs#host-id-collisions)
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A list of outbound IP addresses. For example `["52.23.25.3", "52.143.43.12"]`
        /// </summary>
        [Output("outboundIpAddressLists")]
        public Output<ImmutableArray<string>> OutboundIpAddressLists { get; private set; } = null!;

        /// <summary>
        /// A comma separated list of outbound IP addresses as a string. For example `52.23.25.3,52.143.43.12`.
        /// </summary>
        [Output("outboundIpAddresses")]
        public Output<string> OutboundIpAddresses { get; private set; } = null!;

        /// <summary>
        /// A list of possible outbound IP addresses, not all of which are necessarily in use. This is a superset of `outbound_ip_address_list`. For example `["52.23.25.3", "52.143.43.12"]`.
        /// </summary>
        [Output("possibleOutboundIpAddressLists")]
        public Output<ImmutableArray<string>> PossibleOutboundIpAddressLists { get; private set; } = null!;

        /// <summary>
        /// A comma separated list of possible outbound IP addresses as a string. For example `52.23.25.3,52.143.43.12,52.143.43.17`. This is a superset of `outbound_ip_addresses`.
        /// </summary>
        [Output("possibleOutboundIpAddresses")]
        public Output<string> PossibleOutboundIpAddresses { get; private set; } = null!;

        /// <summary>
        /// Should public network access be enabled for the Function App. Defaults to `true`.
        /// </summary>
        [Output("publicNetworkAccessEnabled")]
        public Output<bool?> PublicNetworkAccessEnabled { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Function App should exist. Changing this forces a new Linux Function App to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// The Runtime of the Linux Function App. Possible values are `node`, `dotnet-isolated`, `powershell`, `python`, `java`.
        /// </summary>
        [Output("runtimeName")]
        public Output<string> RuntimeName { get; private set; } = null!;

        /// <summary>
        /// The Runtime version of the Linux Function App. The values are diff from different runtime version. The supported values are `8.0`, `9.0` for `dotnet-isolated`, `20` for `node`, `3.10`, `3.11` for `python`, `11`, `17` for `java`, `7.4` for `powershell`.
        /// </summary>
        [Output("runtimeVersion")]
        public Output<string> RuntimeVersion { get; private set; } = null!;

        /// <summary>
        /// The ID of the App Service Plan within which to create this Function App.
        /// </summary>
        [Output("servicePlanId")]
        public Output<string> ServicePlanId { get; private set; } = null!;

        /// <summary>
        /// A `site_config` block as defined below.
        /// </summary>
        [Output("siteConfig")]
        public Output<Outputs.AppFlexConsumptionSiteConfig> SiteConfig { get; private set; } = null!;

        /// <summary>
        /// A `site_credential` block as defined below.
        /// </summary>
        [Output("siteCredentials")]
        public Output<ImmutableArray<Outputs.AppFlexConsumptionSiteCredential>> SiteCredentials { get; private set; } = null!;

        /// <summary>
        /// A `sticky_settings` block as defined below.
        /// </summary>
        [Output("stickySettings")]
        public Output<Outputs.AppFlexConsumptionStickySettings?> StickySettings { get; private set; } = null!;

        /// <summary>
        /// The access key which will be used to access the backend storage account for the Function App.
        /// 
        /// &gt; **Note:** The `storage_access_key` must be specified when `storage_authentication_type` is set to `StorageAccountConnectionString`.
        /// </summary>
        [Output("storageAccessKey")]
        public Output<string?> StorageAccessKey { get; private set; } = null!;

        /// <summary>
        /// The authentication type which will be used to access the backend storage account for the Function App. Possible values are `StorageAccountConnectionString`, `SystemAssignedIdentity`, and `UserAssignedIdentity`.
        /// </summary>
        [Output("storageAuthenticationType")]
        public Output<string> StorageAuthenticationType { get; private set; } = null!;

        /// <summary>
        /// The backend storage container endpoint which will be used by this Function App.
        /// </summary>
        [Output("storageContainerEndpoint")]
        public Output<string> StorageContainerEndpoint { get; private set; } = null!;

        /// <summary>
        /// The storage container type used for the Function App. The current supported type is `blobContainer`.
        /// </summary>
        [Output("storageContainerType")]
        public Output<string> StorageContainerType { get; private set; } = null!;

        /// <summary>
        /// The user assigned Managed Identity to access the storage account. Conflicts with `storage_account_access_key`.
        /// 
        /// &gt; **Note:** The `storage_user_assigned_identity_id` must be specified when `storage_authentication_type` is set to `UserAssignedIdentity`.
        /// </summary>
        [Output("storageUserAssignedIdentityId")]
        public Output<string?> StorageUserAssignedIdentityId { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags which should be assigned to the Linux Function App.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("virtualNetworkSubnetId")]
        public Output<string?> VirtualNetworkSubnetId { get; private set; } = null!;

        /// <summary>
        /// Should the default WebDeploy Basic Authentication publishing credentials enabled. Defaults to `true`.
        /// 
        /// &gt; **Note:** Setting this value to true will disable the ability to use `zip_deploy_file` which currently relies on the default publishing profile.
        /// </summary>
        [Output("webdeployPublishBasicAuthenticationEnabled")]
        public Output<bool?> WebdeployPublishBasicAuthenticationEnabled { get; private set; } = null!;

        /// <summary>
        /// The local path and filename of the Zip packaged application to deploy to this Linux Function App.
        /// 
        /// &gt; **Note:** Using this value requires either `WEBSITE_RUN_FROM_PACKAGE=1` or `SCM_DO_BUILD_DURING_DEPLOYMENT=true` to be set on the App in `app_settings`. Refer to the [Azure docs](https://learn.microsoft.com/en-us/azure/azure-functions/functions-deployment-technologies) for further details.
        /// </summary>
        [Output("zipDeployFile")]
        public Output<string> ZipDeployFile { get; private set; } = null!;


        /// <summary>
        /// Create a AppFlexConsumption resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AppFlexConsumption(string name, AppFlexConsumptionArgs args, CustomResourceOptions? options = null)
            : base("azure:appservice/appFlexConsumption:AppFlexConsumption", name, args ?? new AppFlexConsumptionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AppFlexConsumption(string name, Input<string> id, AppFlexConsumptionState? state = null, CustomResourceOptions? options = null)
            : base("azure:appservice/appFlexConsumption:AppFlexConsumption", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "customDomainVerificationId",
                    "siteCredentials",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AppFlexConsumption resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AppFlexConsumption Get(string name, Input<string> id, AppFlexConsumptionState? state = null, CustomResourceOptions? options = null)
        {
            return new AppFlexConsumption(name, id, state, options);
        }
    }

    public sealed class AppFlexConsumptionArgs : global::Pulumi.ResourceArgs
    {
        [Input("appSettings")]
        private InputMap<string>? _appSettings;

        /// <summary>
        /// A map of key-value pairs for [App
        /// Settings](https://docs.microsoft.com/en-us/azure/azure-functions/functions-app-settings) and custom values.
        /// </summary>
        public InputMap<string> AppSettings
        {
            get => _appSettings ?? (_appSettings = new InputMap<string>());
            set => _appSettings = value;
        }

        /// <summary>
        /// A `auth_settings` block as defined below.
        /// </summary>
        [Input("authSettings")]
        public Input<Inputs.AppFlexConsumptionAuthSettingsArgs>? AuthSettings { get; set; }

        /// <summary>
        /// An `auth_settings_v2` block as defined below.
        /// </summary>
        [Input("authSettingsV2")]
        public Input<Inputs.AppFlexConsumptionAuthSettingsV2Args>? AuthSettingsV2 { get; set; }

        /// <summary>
        /// Should the function app use Client Certificates.
        /// </summary>
        [Input("clientCertificateEnabled")]
        public Input<bool>? ClientCertificateEnabled { get; set; }

        /// <summary>
        /// Paths to exclude when using client certificates, separated by ;
        /// </summary>
        [Input("clientCertificateExclusionPaths")]
        public Input<string>? ClientCertificateExclusionPaths { get; set; }

        /// <summary>
        /// The mode of the Function App's client certificates requirement for incoming requests. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser`. Defaults to `Optional`.
        /// </summary>
        [Input("clientCertificateMode")]
        public Input<string>? ClientCertificateMode { get; set; }

        [Input("connectionStrings")]
        private InputList<Inputs.AppFlexConsumptionConnectionStringArgs>? _connectionStrings;

        /// <summary>
        /// One or more `connection_string` blocks as defined below.
        /// </summary>
        public InputList<Inputs.AppFlexConsumptionConnectionStringArgs> ConnectionStrings
        {
            get => _connectionStrings ?? (_connectionStrings = new InputList<Inputs.AppFlexConsumptionConnectionStringArgs>());
            set => _connectionStrings = value;
        }

        /// <summary>
        /// Is the Function App enabled? Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// A `identity` block as defined below.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.AppFlexConsumptionIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// The memory size of the instances on which your app runs. The [currently supported values](https://learn.microsoft.com/en-us/azure/azure-functions/flex-consumption-plan#instance-memory) are `2048` or `4096`.
        /// </summary>
        [Input("instanceMemoryInMb")]
        public Input<int>? InstanceMemoryInMb { get; set; }

        /// <summary>
        /// The Azure Region where the Function App should exist. Changing this forces a new Function App to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The number of workers this function app can scale out to.
        /// </summary>
        [Input("maximumInstanceCount")]
        public Input<int>? MaximumInstanceCount { get; set; }

        /// <summary>
        /// The name which should be used for this Function App. Changing this forces a new Function App to be created. Limit the function name to 32 characters to avoid naming collisions. For more information about [Function App naming rule](https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/resource-name-rules#microsoftweb) and [Host ID Collisions](https://github.com/Azure/azure-functions-host/wiki/Host-IDs#host-id-collisions)
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Should public network access be enabled for the Function App. Defaults to `true`.
        /// </summary>
        [Input("publicNetworkAccessEnabled")]
        public Input<bool>? PublicNetworkAccessEnabled { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Function App should exist. Changing this forces a new Linux Function App to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The Runtime of the Linux Function App. Possible values are `node`, `dotnet-isolated`, `powershell`, `python`, `java`.
        /// </summary>
        [Input("runtimeName", required: true)]
        public Input<string> RuntimeName { get; set; } = null!;

        /// <summary>
        /// The Runtime version of the Linux Function App. The values are diff from different runtime version. The supported values are `8.0`, `9.0` for `dotnet-isolated`, `20` for `node`, `3.10`, `3.11` for `python`, `11`, `17` for `java`, `7.4` for `powershell`.
        /// </summary>
        [Input("runtimeVersion", required: true)]
        public Input<string> RuntimeVersion { get; set; } = null!;

        /// <summary>
        /// The ID of the App Service Plan within which to create this Function App.
        /// </summary>
        [Input("servicePlanId", required: true)]
        public Input<string> ServicePlanId { get; set; } = null!;

        /// <summary>
        /// A `site_config` block as defined below.
        /// </summary>
        [Input("siteConfig", required: true)]
        public Input<Inputs.AppFlexConsumptionSiteConfigArgs> SiteConfig { get; set; } = null!;

        /// <summary>
        /// A `sticky_settings` block as defined below.
        /// </summary>
        [Input("stickySettings")]
        public Input<Inputs.AppFlexConsumptionStickySettingsArgs>? StickySettings { get; set; }

        /// <summary>
        /// The access key which will be used to access the backend storage account for the Function App.
        /// 
        /// &gt; **Note:** The `storage_access_key` must be specified when `storage_authentication_type` is set to `StorageAccountConnectionString`.
        /// </summary>
        [Input("storageAccessKey")]
        public Input<string>? StorageAccessKey { get; set; }

        /// <summary>
        /// The authentication type which will be used to access the backend storage account for the Function App. Possible values are `StorageAccountConnectionString`, `SystemAssignedIdentity`, and `UserAssignedIdentity`.
        /// </summary>
        [Input("storageAuthenticationType", required: true)]
        public Input<string> StorageAuthenticationType { get; set; } = null!;

        /// <summary>
        /// The backend storage container endpoint which will be used by this Function App.
        /// </summary>
        [Input("storageContainerEndpoint", required: true)]
        public Input<string> StorageContainerEndpoint { get; set; } = null!;

        /// <summary>
        /// The storage container type used for the Function App. The current supported type is `blobContainer`.
        /// </summary>
        [Input("storageContainerType", required: true)]
        public Input<string> StorageContainerType { get; set; } = null!;

        /// <summary>
        /// The user assigned Managed Identity to access the storage account. Conflicts with `storage_account_access_key`.
        /// 
        /// &gt; **Note:** The `storage_user_assigned_identity_id` must be specified when `storage_authentication_type` is set to `UserAssignedIdentity`.
        /// </summary>
        [Input("storageUserAssignedIdentityId")]
        public Input<string>? StorageUserAssignedIdentityId { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Linux Function App.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("virtualNetworkSubnetId")]
        public Input<string>? VirtualNetworkSubnetId { get; set; }

        /// <summary>
        /// Should the default WebDeploy Basic Authentication publishing credentials enabled. Defaults to `true`.
        /// 
        /// &gt; **Note:** Setting this value to true will disable the ability to use `zip_deploy_file` which currently relies on the default publishing profile.
        /// </summary>
        [Input("webdeployPublishBasicAuthenticationEnabled")]
        public Input<bool>? WebdeployPublishBasicAuthenticationEnabled { get; set; }

        /// <summary>
        /// The local path and filename of the Zip packaged application to deploy to this Linux Function App.
        /// 
        /// &gt; **Note:** Using this value requires either `WEBSITE_RUN_FROM_PACKAGE=1` or `SCM_DO_BUILD_DURING_DEPLOYMENT=true` to be set on the App in `app_settings`. Refer to the [Azure docs](https://learn.microsoft.com/en-us/azure/azure-functions/functions-deployment-technologies) for further details.
        /// </summary>
        [Input("zipDeployFile")]
        public Input<string>? ZipDeployFile { get; set; }

        public AppFlexConsumptionArgs()
        {
        }
        public static new AppFlexConsumptionArgs Empty => new AppFlexConsumptionArgs();
    }

    public sealed class AppFlexConsumptionState : global::Pulumi.ResourceArgs
    {
        [Input("appSettings")]
        private InputMap<string>? _appSettings;

        /// <summary>
        /// A map of key-value pairs for [App
        /// Settings](https://docs.microsoft.com/en-us/azure/azure-functions/functions-app-settings) and custom values.
        /// </summary>
        public InputMap<string> AppSettings
        {
            get => _appSettings ?? (_appSettings = new InputMap<string>());
            set => _appSettings = value;
        }

        /// <summary>
        /// A `auth_settings` block as defined below.
        /// </summary>
        [Input("authSettings")]
        public Input<Inputs.AppFlexConsumptionAuthSettingsGetArgs>? AuthSettings { get; set; }

        /// <summary>
        /// An `auth_settings_v2` block as defined below.
        /// </summary>
        [Input("authSettingsV2")]
        public Input<Inputs.AppFlexConsumptionAuthSettingsV2GetArgs>? AuthSettingsV2 { get; set; }

        /// <summary>
        /// Should the function app use Client Certificates.
        /// </summary>
        [Input("clientCertificateEnabled")]
        public Input<bool>? ClientCertificateEnabled { get; set; }

        /// <summary>
        /// Paths to exclude when using client certificates, separated by ;
        /// </summary>
        [Input("clientCertificateExclusionPaths")]
        public Input<string>? ClientCertificateExclusionPaths { get; set; }

        /// <summary>
        /// The mode of the Function App's client certificates requirement for incoming requests. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser`. Defaults to `Optional`.
        /// </summary>
        [Input("clientCertificateMode")]
        public Input<string>? ClientCertificateMode { get; set; }

        [Input("connectionStrings")]
        private InputList<Inputs.AppFlexConsumptionConnectionStringGetArgs>? _connectionStrings;

        /// <summary>
        /// One or more `connection_string` blocks as defined below.
        /// </summary>
        public InputList<Inputs.AppFlexConsumptionConnectionStringGetArgs> ConnectionStrings
        {
            get => _connectionStrings ?? (_connectionStrings = new InputList<Inputs.AppFlexConsumptionConnectionStringGetArgs>());
            set => _connectionStrings = value;
        }

        [Input("customDomainVerificationId")]
        private Input<string>? _customDomainVerificationId;

        /// <summary>
        /// The identifier used by App Service to perform domain ownership verification via DNS TXT record.
        /// </summary>
        public Input<string>? CustomDomainVerificationId
        {
            get => _customDomainVerificationId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _customDomainVerificationId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The default hostname of the Linux Function App.
        /// </summary>
        [Input("defaultHostname")]
        public Input<string>? DefaultHostname { get; set; }

        /// <summary>
        /// Is the Function App enabled? Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The ID of the App Service Environment used by Function App.
        /// </summary>
        [Input("hostingEnvironmentId")]
        public Input<string>? HostingEnvironmentId { get; set; }

        /// <summary>
        /// A `identity` block as defined below.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.AppFlexConsumptionIdentityGetArgs>? Identity { get; set; }

        /// <summary>
        /// The memory size of the instances on which your app runs. The [currently supported values](https://learn.microsoft.com/en-us/azure/azure-functions/flex-consumption-plan#instance-memory) are `2048` or `4096`.
        /// </summary>
        [Input("instanceMemoryInMb")]
        public Input<int>? InstanceMemoryInMb { get; set; }

        /// <summary>
        /// The Kind value for this Linux Function App.
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        /// <summary>
        /// The Azure Region where the Function App should exist. Changing this forces a new Function App to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The number of workers this function app can scale out to.
        /// </summary>
        [Input("maximumInstanceCount")]
        public Input<int>? MaximumInstanceCount { get; set; }

        /// <summary>
        /// The name which should be used for this Function App. Changing this forces a new Function App to be created. Limit the function name to 32 characters to avoid naming collisions. For more information about [Function App naming rule](https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/resource-name-rules#microsoftweb) and [Host ID Collisions](https://github.com/Azure/azure-functions-host/wiki/Host-IDs#host-id-collisions)
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("outboundIpAddressLists")]
        private InputList<string>? _outboundIpAddressLists;

        /// <summary>
        /// A list of outbound IP addresses. For example `["52.23.25.3", "52.143.43.12"]`
        /// </summary>
        public InputList<string> OutboundIpAddressLists
        {
            get => _outboundIpAddressLists ?? (_outboundIpAddressLists = new InputList<string>());
            set => _outboundIpAddressLists = value;
        }

        /// <summary>
        /// A comma separated list of outbound IP addresses as a string. For example `52.23.25.3,52.143.43.12`.
        /// </summary>
        [Input("outboundIpAddresses")]
        public Input<string>? OutboundIpAddresses { get; set; }

        [Input("possibleOutboundIpAddressLists")]
        private InputList<string>? _possibleOutboundIpAddressLists;

        /// <summary>
        /// A list of possible outbound IP addresses, not all of which are necessarily in use. This is a superset of `outbound_ip_address_list`. For example `["52.23.25.3", "52.143.43.12"]`.
        /// </summary>
        public InputList<string> PossibleOutboundIpAddressLists
        {
            get => _possibleOutboundIpAddressLists ?? (_possibleOutboundIpAddressLists = new InputList<string>());
            set => _possibleOutboundIpAddressLists = value;
        }

        /// <summary>
        /// A comma separated list of possible outbound IP addresses as a string. For example `52.23.25.3,52.143.43.12,52.143.43.17`. This is a superset of `outbound_ip_addresses`.
        /// </summary>
        [Input("possibleOutboundIpAddresses")]
        public Input<string>? PossibleOutboundIpAddresses { get; set; }

        /// <summary>
        /// Should public network access be enabled for the Function App. Defaults to `true`.
        /// </summary>
        [Input("publicNetworkAccessEnabled")]
        public Input<bool>? PublicNetworkAccessEnabled { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Function App should exist. Changing this forces a new Linux Function App to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// The Runtime of the Linux Function App. Possible values are `node`, `dotnet-isolated`, `powershell`, `python`, `java`.
        /// </summary>
        [Input("runtimeName")]
        public Input<string>? RuntimeName { get; set; }

        /// <summary>
        /// The Runtime version of the Linux Function App. The values are diff from different runtime version. The supported values are `8.0`, `9.0` for `dotnet-isolated`, `20` for `node`, `3.10`, `3.11` for `python`, `11`, `17` for `java`, `7.4` for `powershell`.
        /// </summary>
        [Input("runtimeVersion")]
        public Input<string>? RuntimeVersion { get; set; }

        /// <summary>
        /// The ID of the App Service Plan within which to create this Function App.
        /// </summary>
        [Input("servicePlanId")]
        public Input<string>? ServicePlanId { get; set; }

        /// <summary>
        /// A `site_config` block as defined below.
        /// </summary>
        [Input("siteConfig")]
        public Input<Inputs.AppFlexConsumptionSiteConfigGetArgs>? SiteConfig { get; set; }

        [Input("siteCredentials")]
        private InputList<Inputs.AppFlexConsumptionSiteCredentialGetArgs>? _siteCredentials;

        /// <summary>
        /// A `site_credential` block as defined below.
        /// </summary>
        public InputList<Inputs.AppFlexConsumptionSiteCredentialGetArgs> SiteCredentials
        {
            get => _siteCredentials ?? (_siteCredentials = new InputList<Inputs.AppFlexConsumptionSiteCredentialGetArgs>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableArray.Create<Inputs.AppFlexConsumptionSiteCredentialGetArgs>());
                _siteCredentials = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// A `sticky_settings` block as defined below.
        /// </summary>
        [Input("stickySettings")]
        public Input<Inputs.AppFlexConsumptionStickySettingsGetArgs>? StickySettings { get; set; }

        /// <summary>
        /// The access key which will be used to access the backend storage account for the Function App.
        /// 
        /// &gt; **Note:** The `storage_access_key` must be specified when `storage_authentication_type` is set to `StorageAccountConnectionString`.
        /// </summary>
        [Input("storageAccessKey")]
        public Input<string>? StorageAccessKey { get; set; }

        /// <summary>
        /// The authentication type which will be used to access the backend storage account for the Function App. Possible values are `StorageAccountConnectionString`, `SystemAssignedIdentity`, and `UserAssignedIdentity`.
        /// </summary>
        [Input("storageAuthenticationType")]
        public Input<string>? StorageAuthenticationType { get; set; }

        /// <summary>
        /// The backend storage container endpoint which will be used by this Function App.
        /// </summary>
        [Input("storageContainerEndpoint")]
        public Input<string>? StorageContainerEndpoint { get; set; }

        /// <summary>
        /// The storage container type used for the Function App. The current supported type is `blobContainer`.
        /// </summary>
        [Input("storageContainerType")]
        public Input<string>? StorageContainerType { get; set; }

        /// <summary>
        /// The user assigned Managed Identity to access the storage account. Conflicts with `storage_account_access_key`.
        /// 
        /// &gt; **Note:** The `storage_user_assigned_identity_id` must be specified when `storage_authentication_type` is set to `UserAssignedIdentity`.
        /// </summary>
        [Input("storageUserAssignedIdentityId")]
        public Input<string>? StorageUserAssignedIdentityId { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Linux Function App.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("virtualNetworkSubnetId")]
        public Input<string>? VirtualNetworkSubnetId { get; set; }

        /// <summary>
        /// Should the default WebDeploy Basic Authentication publishing credentials enabled. Defaults to `true`.
        /// 
        /// &gt; **Note:** Setting this value to true will disable the ability to use `zip_deploy_file` which currently relies on the default publishing profile.
        /// </summary>
        [Input("webdeployPublishBasicAuthenticationEnabled")]
        public Input<bool>? WebdeployPublishBasicAuthenticationEnabled { get; set; }

        /// <summary>
        /// The local path and filename of the Zip packaged application to deploy to this Linux Function App.
        /// 
        /// &gt; **Note:** Using this value requires either `WEBSITE_RUN_FROM_PACKAGE=1` or `SCM_DO_BUILD_DURING_DEPLOYMENT=true` to be set on the App in `app_settings`. Refer to the [Azure docs](https://learn.microsoft.com/en-us/azure/azure-functions/functions-deployment-technologies) for further details.
        /// </summary>
        [Input("zipDeployFile")]
        public Input<string>? ZipDeployFile { get; set; }

        public AppFlexConsumptionState()
        {
        }
        public static new AppFlexConsumptionState Empty => new AppFlexConsumptionState();
    }
}
