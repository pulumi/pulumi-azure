// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.AppService
{
    public static class GetLinuxFunctionApp
    {
        /// <summary>
        /// Use this data source to access information about an existing Linux Function App.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.AppService.GetLinuxFunctionApp.Invoke(new()
        ///     {
        ///         Name = "existing",
        ///         ResourceGroupName = "existing",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getLinuxFunctionAppResult =&gt; getLinuxFunctionAppResult.Id),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetLinuxFunctionAppResult> InvokeAsync(GetLinuxFunctionAppArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLinuxFunctionAppResult>("azure:appservice/getLinuxFunctionApp:getLinuxFunctionApp", args ?? new GetLinuxFunctionAppArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Linux Function App.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.AppService.GetLinuxFunctionApp.Invoke(new()
        ///     {
        ///         Name = "existing",
        ///         ResourceGroupName = "existing",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getLinuxFunctionAppResult =&gt; getLinuxFunctionAppResult.Id),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetLinuxFunctionAppResult> Invoke(GetLinuxFunctionAppInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLinuxFunctionAppResult>("azure:appservice/getLinuxFunctionApp:getLinuxFunctionApp", args ?? new GetLinuxFunctionAppInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLinuxFunctionAppArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name which should be used for this Linux Function App.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Linux Function App should exist.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetLinuxFunctionAppArgs()
        {
        }
        public static new GetLinuxFunctionAppArgs Empty => new GetLinuxFunctionAppArgs();
    }

    public sealed class GetLinuxFunctionAppInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name which should be used for this Linux Function App.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Linux Function App should exist.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetLinuxFunctionAppInvokeArgs()
        {
        }
        public static new GetLinuxFunctionAppInvokeArgs Empty => new GetLinuxFunctionAppInvokeArgs();
    }


    [OutputType]
    public sealed class GetLinuxFunctionAppResult
    {
        /// <summary>
        /// A map of key-value pairs for [App Settings](https://docs.microsoft.com/azure/azure-functions/functions-app-settings) and custom values.
        /// </summary>
        public readonly ImmutableDictionary<string, string> AppSettings;
        /// <summary>
        /// A `auth_settings` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLinuxFunctionAppAuthSettingResult> AuthSettings;
        /// <summary>
        /// A `auth_settings_v2` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLinuxFunctionAppAuthSettingsV2Result> AuthSettingsV2s;
        /// <summary>
        /// The current availability state. Possible values are `Normal`, `Limited`, and `DisasterRecoveryMode`.
        /// </summary>
        public readonly string Availability;
        /// <summary>
        /// A `backup` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLinuxFunctionAppBackupResult> Backups;
        /// <summary>
        /// Is built in logging enabled?
        /// </summary>
        public readonly bool BuiltinLoggingEnabled;
        /// <summary>
        /// Are Client Certificates enabled?
        /// </summary>
        public readonly bool ClientCertificateEnabled;
        /// <summary>
        /// Paths to exclude when using client certificates, separated by ;
        /// </summary>
        public readonly string ClientCertificateExclusionPaths;
        /// <summary>
        /// The mode of the Function App's client certificates requirement for incoming requests.
        /// </summary>
        public readonly string ClientCertificateMode;
        /// <summary>
        /// A `connection_string` blocks as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLinuxFunctionAppConnectionStringResult> ConnectionStrings;
        /// <summary>
        /// Are the settings for linking the Function App to storage suppressed?
        /// </summary>
        public readonly bool ContentShareForceDisabled;
        /// <summary>
        /// The identifier used by App Service to perform domain ownership verification via DNS TXT record.
        /// </summary>
        public readonly string CustomDomainVerificationId;
        /// <summary>
        /// The amount of memory in gigabyte-seconds that your application is allowed to consume per day.
        /// </summary>
        public readonly int DailyMemoryTimeQuota;
        /// <summary>
        /// The default hostname of the Linux Function App.
        /// </summary>
        public readonly string DefaultHostname;
        /// <summary>
        /// Is this backup job enabled?
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// Are the default FTP Basic Authentication publishing credentials enabled.
        /// </summary>
        public readonly bool FtpPublishBasicAuthenticationEnabled;
        /// <summary>
        /// The runtime version associated with the Function App.
        /// </summary>
        public readonly string FunctionsExtensionVersion;
        /// <summary>
        /// The ID of the App Service Environment used by Function App.
        /// </summary>
        public readonly string HostingEnvironmentId;
        /// <summary>
        /// Can the Function App only be accessed via HTTPS?
        /// </summary>
        public readonly bool HttpsOnly;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A `identity` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLinuxFunctionAppIdentityResult> Identities;
        /// <summary>
        /// The Kind value for this Linux Function App.
        /// </summary>
        public readonly string Kind;
        /// <summary>
        /// The Azure Region where the Linux Function App exists.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The Site Credentials Username used for publishing.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// A list of outbound IP addresses. For example `["52.23.25.3", "52.143.43.12"]`
        /// </summary>
        public readonly ImmutableArray<string> OutboundIpAddressLists;
        /// <summary>
        /// A comma separated list of outbound IP addresses as a string. For example `52.23.25.3,52.143.43.12`.
        /// </summary>
        public readonly string OutboundIpAddresses;
        /// <summary>
        /// A list of possible outbound IP addresses, not all of which are necessarily in use. This is a superset of `outbound_ip_address_list`. For example `["52.23.25.3", "52.143.43.12"]`.
        /// </summary>
        public readonly ImmutableArray<string> PossibleOutboundIpAddressLists;
        /// <summary>
        /// A comma separated list of possible outbound IP addresses as a string. For example `52.23.25.3,52.143.43.12,52.143.43.17`. This is a superset of `outbound_ip_addresses`.
        /// </summary>
        public readonly string PossibleOutboundIpAddresses;
        /// <summary>
        /// Is Public Network Access enabled for this Linux Function App.
        /// </summary>
        public readonly bool PublicNetworkAccessEnabled;
        public readonly string ResourceGroupName;
        /// <summary>
        /// The ID of the App Service Plan within which this Function App has been created.
        /// </summary>
        public readonly string ServicePlanId;
        /// <summary>
        /// A `site_config` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLinuxFunctionAppSiteConfigResult> SiteConfigs;
        /// <summary>
        /// A `site_credential` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLinuxFunctionAppSiteCredentialResult> SiteCredentials;
        /// <summary>
        /// A `sticky_settings` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLinuxFunctionAppStickySettingResult> StickySettings;
        /// <summary>
        /// The access key used to access the backend storage account for the Function App.
        /// </summary>
        public readonly string StorageAccountAccessKey;
        /// <summary>
        /// The backend storage account name used by this Function App.
        /// </summary>
        public readonly string StorageAccountName;
        /// <summary>
        /// The Key Vault Secret ID, including version, that contains the Connection String to connect to the storage account for this Function App.
        /// </summary>
        public readonly string StorageKeyVaultSecretId;
        /// <summary>
        /// Does the Function App use Managed Identity to access the storage account?
        /// </summary>
        public readonly bool StorageUsesManagedIdentity;
        /// <summary>
        /// A mapping of tags which are assigned to the Linux Function App.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// The current usage state. Possible values are `Normal` and `Exceeded`.
        /// </summary>
        public readonly string Usage;
        /// <summary>
        /// The Virtual Network Subnet ID used for this IP Restriction.
        /// </summary>
        public readonly string VirtualNetworkSubnetId;
        /// <summary>
        /// Are the default WebDeploy Basic Authentication publishing credentials enabled.
        /// </summary>
        public readonly bool WebdeployPublishBasicAuthenticationEnabled;

        [OutputConstructor]
        private GetLinuxFunctionAppResult(
            ImmutableDictionary<string, string> appSettings,

            ImmutableArray<Outputs.GetLinuxFunctionAppAuthSettingResult> authSettings,

            ImmutableArray<Outputs.GetLinuxFunctionAppAuthSettingsV2Result> authSettingsV2s,

            string availability,

            ImmutableArray<Outputs.GetLinuxFunctionAppBackupResult> backups,

            bool builtinLoggingEnabled,

            bool clientCertificateEnabled,

            string clientCertificateExclusionPaths,

            string clientCertificateMode,

            ImmutableArray<Outputs.GetLinuxFunctionAppConnectionStringResult> connectionStrings,

            bool contentShareForceDisabled,

            string customDomainVerificationId,

            int dailyMemoryTimeQuota,

            string defaultHostname,

            bool enabled,

            bool ftpPublishBasicAuthenticationEnabled,

            string functionsExtensionVersion,

            string hostingEnvironmentId,

            bool httpsOnly,

            string id,

            ImmutableArray<Outputs.GetLinuxFunctionAppIdentityResult> identities,

            string kind,

            string location,

            string name,

            ImmutableArray<string> outboundIpAddressLists,

            string outboundIpAddresses,

            ImmutableArray<string> possibleOutboundIpAddressLists,

            string possibleOutboundIpAddresses,

            bool publicNetworkAccessEnabled,

            string resourceGroupName,

            string servicePlanId,

            ImmutableArray<Outputs.GetLinuxFunctionAppSiteConfigResult> siteConfigs,

            ImmutableArray<Outputs.GetLinuxFunctionAppSiteCredentialResult> siteCredentials,

            ImmutableArray<Outputs.GetLinuxFunctionAppStickySettingResult> stickySettings,

            string storageAccountAccessKey,

            string storageAccountName,

            string storageKeyVaultSecretId,

            bool storageUsesManagedIdentity,

            ImmutableDictionary<string, string> tags,

            string usage,

            string virtualNetworkSubnetId,

            bool webdeployPublishBasicAuthenticationEnabled)
        {
            AppSettings = appSettings;
            AuthSettings = authSettings;
            AuthSettingsV2s = authSettingsV2s;
            Availability = availability;
            Backups = backups;
            BuiltinLoggingEnabled = builtinLoggingEnabled;
            ClientCertificateEnabled = clientCertificateEnabled;
            ClientCertificateExclusionPaths = clientCertificateExclusionPaths;
            ClientCertificateMode = clientCertificateMode;
            ConnectionStrings = connectionStrings;
            ContentShareForceDisabled = contentShareForceDisabled;
            CustomDomainVerificationId = customDomainVerificationId;
            DailyMemoryTimeQuota = dailyMemoryTimeQuota;
            DefaultHostname = defaultHostname;
            Enabled = enabled;
            FtpPublishBasicAuthenticationEnabled = ftpPublishBasicAuthenticationEnabled;
            FunctionsExtensionVersion = functionsExtensionVersion;
            HostingEnvironmentId = hostingEnvironmentId;
            HttpsOnly = httpsOnly;
            Id = id;
            Identities = identities;
            Kind = kind;
            Location = location;
            Name = name;
            OutboundIpAddressLists = outboundIpAddressLists;
            OutboundIpAddresses = outboundIpAddresses;
            PossibleOutboundIpAddressLists = possibleOutboundIpAddressLists;
            PossibleOutboundIpAddresses = possibleOutboundIpAddresses;
            PublicNetworkAccessEnabled = publicNetworkAccessEnabled;
            ResourceGroupName = resourceGroupName;
            ServicePlanId = servicePlanId;
            SiteConfigs = siteConfigs;
            SiteCredentials = siteCredentials;
            StickySettings = stickySettings;
            StorageAccountAccessKey = storageAccountAccessKey;
            StorageAccountName = storageAccountName;
            StorageKeyVaultSecretId = storageKeyVaultSecretId;
            StorageUsesManagedIdentity = storageUsesManagedIdentity;
            Tags = tags;
            Usage = usage;
            VirtualNetworkSubnetId = virtualNetworkSubnetId;
            WebdeployPublishBasicAuthenticationEnabled = webdeployPublishBasicAuthenticationEnabled;
        }
    }
}
