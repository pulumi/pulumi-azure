// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.AppService
{
    /// <summary>
    /// Manages an App Service Certificate Binding.
    /// 
    /// ## Import
    /// 
    /// App Service Certificate Bindings can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:appservice/certificateBinding:CertificateBinding example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Web/sites/instance1/hostNameBindings/mywebsite.com
    /// ```
    /// </summary>
    [AzureResourceType("azure:appservice/certificateBinding:CertificateBinding")]
    public partial class CertificateBinding : Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the App Service to which the certificate was bound.
        /// </summary>
        [Output("appServiceName")]
        public Output<string> AppServiceName { get; private set; } = null!;

        /// <summary>
        /// The ID of the certificate to bind to the custom domain. Changing this forces a new App Service Certificate Binding to be created.
        /// </summary>
        [Output("certificateId")]
        public Output<string> CertificateId { get; private set; } = null!;

        /// <summary>
        /// The hostname of the bound certificate.
        /// </summary>
        [Output("hostname")]
        public Output<string> Hostname { get; private set; } = null!;

        /// <summary>
        /// The ID of the Custom Domain/Hostname Binding. Changing this forces a new App Service Certificate Binding to be created.
        /// </summary>
        [Output("hostnameBindingId")]
        public Output<string> HostnameBindingId { get; private set; } = null!;

        /// <summary>
        /// The type of certificate binding. Allowed values are `IpBasedEnabled` or `SniEnabled`. Changing this forces a new App Service Certificate Binding to be created.
        /// </summary>
        [Output("sslState")]
        public Output<string> SslState { get; private set; } = null!;

        /// <summary>
        /// The certificate thumbprint.
        /// </summary>
        [Output("thumbprint")]
        public Output<string> Thumbprint { get; private set; } = null!;


        /// <summary>
        /// Create a CertificateBinding resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CertificateBinding(string name, CertificateBindingArgs args, CustomResourceOptions? options = null)
            : base("azure:appservice/certificateBinding:CertificateBinding", name, args ?? new CertificateBindingArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CertificateBinding(string name, Input<string> id, CertificateBindingState? state = null, CustomResourceOptions? options = null)
            : base("azure:appservice/certificateBinding:CertificateBinding", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CertificateBinding resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CertificateBinding Get(string name, Input<string> id, CertificateBindingState? state = null, CustomResourceOptions? options = null)
        {
            return new CertificateBinding(name, id, state, options);
        }
    }

    public sealed class CertificateBindingArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the certificate to bind to the custom domain. Changing this forces a new App Service Certificate Binding to be created.
        /// </summary>
        [Input("certificateId", required: true)]
        public Input<string> CertificateId { get; set; } = null!;

        /// <summary>
        /// The ID of the Custom Domain/Hostname Binding. Changing this forces a new App Service Certificate Binding to be created.
        /// </summary>
        [Input("hostnameBindingId", required: true)]
        public Input<string> HostnameBindingId { get; set; } = null!;

        /// <summary>
        /// The type of certificate binding. Allowed values are `IpBasedEnabled` or `SniEnabled`. Changing this forces a new App Service Certificate Binding to be created.
        /// </summary>
        [Input("sslState", required: true)]
        public Input<string> SslState { get; set; } = null!;

        public CertificateBindingArgs()
        {
        }
    }

    public sealed class CertificateBindingState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the App Service to which the certificate was bound.
        /// </summary>
        [Input("appServiceName")]
        public Input<string>? AppServiceName { get; set; }

        /// <summary>
        /// The ID of the certificate to bind to the custom domain. Changing this forces a new App Service Certificate Binding to be created.
        /// </summary>
        [Input("certificateId")]
        public Input<string>? CertificateId { get; set; }

        /// <summary>
        /// The hostname of the bound certificate.
        /// </summary>
        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        /// <summary>
        /// The ID of the Custom Domain/Hostname Binding. Changing this forces a new App Service Certificate Binding to be created.
        /// </summary>
        [Input("hostnameBindingId")]
        public Input<string>? HostnameBindingId { get; set; }

        /// <summary>
        /// The type of certificate binding. Allowed values are `IpBasedEnabled` or `SniEnabled`. Changing this forces a new App Service Certificate Binding to be created.
        /// </summary>
        [Input("sslState")]
        public Input<string>? SslState { get; set; }

        /// <summary>
        /// The certificate thumbprint.
        /// </summary>
        [Input("thumbprint")]
        public Input<string>? Thumbprint { get; set; }

        public CertificateBindingState()
        {
        }
    }
}
