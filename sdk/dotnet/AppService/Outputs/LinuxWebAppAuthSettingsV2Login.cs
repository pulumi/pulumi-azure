// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.AppService.Outputs
{

    [OutputType]
    public sealed class LinuxWebAppAuthSettingsV2Login
    {
        /// <summary>
        /// External URLs that can be redirected to as part of logging in or logging out of the app. This is an advanced setting typically only needed by Windows Store application backends.
        /// 
        /// &gt; **Note:** URLs within the current domain are always implicitly allowed.
        /// </summary>
        public readonly ImmutableArray<string> AllowedExternalRedirectUrls;
        /// <summary>
        /// The method by which cookies expire. Possible values include: `FixedTime`, and `IdentityProviderDerived`. Defaults to `FixedTime`.
        /// </summary>
        public readonly string? CookieExpirationConvention;
        /// <summary>
        /// The time after the request is made when the session cookie should expire. Defaults to `08:00:00`.
        /// </summary>
        public readonly string? CookieExpirationTime;
        /// <summary>
        /// The endpoint to which logout requests should be made.
        /// </summary>
        public readonly string? LogoutEndpoint;
        /// <summary>
        /// The time after the request is made when the nonce should expire. Defaults to `00:05:00`.
        /// </summary>
        public readonly string? NonceExpirationTime;
        /// <summary>
        /// Should the fragments from the request be preserved after the login request is made. Defaults to `false`.
        /// </summary>
        public readonly bool? PreserveUrlFragmentsForLogins;
        /// <summary>
        /// The number of hours after session token expiration that a session token can be used to call the token refresh API. Defaults to `72` hours.
        /// </summary>
        public readonly double? TokenRefreshExtensionTime;
        /// <summary>
        /// Should the Token Store configuration Enabled. Defaults to `false`
        /// </summary>
        public readonly bool? TokenStoreEnabled;
        /// <summary>
        /// The directory path in the App Filesystem in which the tokens will be stored.
        /// </summary>
        public readonly string? TokenStorePath;
        /// <summary>
        /// The name of the app setting which contains the SAS URL of the blob storage containing the tokens.
        /// </summary>
        public readonly string? TokenStoreSasSettingName;
        /// <summary>
        /// Should the nonce be validated while completing the login flow. Defaults to `true`.
        /// </summary>
        public readonly bool? ValidateNonce;

        [OutputConstructor]
        private LinuxWebAppAuthSettingsV2Login(
            ImmutableArray<string> allowedExternalRedirectUrls,

            string? cookieExpirationConvention,

            string? cookieExpirationTime,

            string? logoutEndpoint,

            string? nonceExpirationTime,

            bool? preserveUrlFragmentsForLogins,

            double? tokenRefreshExtensionTime,

            bool? tokenStoreEnabled,

            string? tokenStorePath,

            string? tokenStoreSasSettingName,

            bool? validateNonce)
        {
            AllowedExternalRedirectUrls = allowedExternalRedirectUrls;
            CookieExpirationConvention = cookieExpirationConvention;
            CookieExpirationTime = cookieExpirationTime;
            LogoutEndpoint = logoutEndpoint;
            NonceExpirationTime = nonceExpirationTime;
            PreserveUrlFragmentsForLogins = preserveUrlFragmentsForLogins;
            TokenRefreshExtensionTime = tokenRefreshExtensionTime;
            TokenStoreEnabled = tokenStoreEnabled;
            TokenStorePath = tokenStorePath;
            TokenStoreSasSettingName = tokenStoreSasSettingName;
            ValidateNonce = validateNonce;
        }
    }
}
