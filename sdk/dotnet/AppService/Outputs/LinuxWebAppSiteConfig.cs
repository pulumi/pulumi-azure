// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.AppService.Outputs
{

    [OutputType]
    public sealed class LinuxWebAppSiteConfig
    {
        /// <summary>
        /// If this Linux Web App is Always On enabled. Defaults to `true`.
        /// 
        /// &gt; **NOTE:** `always_on` must be explicitly set to `false` when using `Free`, `F1`, `D1`, or `Shared` Service Plans.
        /// </summary>
        public readonly bool? AlwaysOn;
        /// <summary>
        /// The URL to the API Definition for this Linux Web App.
        /// </summary>
        public readonly string? ApiDefinitionUrl;
        /// <summary>
        /// The API Management API ID this Linux Web App is associated with.
        /// </summary>
        public readonly string? ApiManagementApiId;
        /// <summary>
        /// The App command line to launch.
        /// </summary>
        public readonly string? AppCommandLine;
        /// <summary>
        /// A `application_stack` block as defined above.
        /// </summary>
        public readonly Outputs.LinuxWebAppSiteConfigApplicationStack? ApplicationStack;
        /// <summary>
        /// Should Auto heal rules be enabled? Required with `auto_heal_setting`.
        /// </summary>
        public readonly bool? AutoHealEnabled;
        /// <summary>
        /// A `auto_heal_setting` block as defined above. Required with `auto_heal`.
        /// </summary>
        public readonly Outputs.LinuxWebAppSiteConfigAutoHealSetting? AutoHealSetting;
        /// <summary>
        /// The Client ID of the Managed Service Identity to use for connections to the Azure Container Registry.
        /// </summary>
        public readonly string? ContainerRegistryManagedIdentityClientId;
        /// <summary>
        /// Should connections for Azure Container Registry use Managed Identity.
        /// </summary>
        public readonly bool? ContainerRegistryUseManagedIdentity;
        /// <summary>
        /// A `cors` block as defined above.
        /// </summary>
        public readonly Outputs.LinuxWebAppSiteConfigCors? Cors;
        /// <summary>
        /// Specifies a list of Default Documents for the Linux Web App.
        /// </summary>
        public readonly ImmutableArray<string> DefaultDocuments;
        public readonly bool? DetailedErrorLoggingEnabled;
        public readonly string? FtpsState;
        /// <summary>
        /// The amount of time in minutes that a node can be unhealthy before being removed from the load balancer. Possible values are between `2` and `10`. Only valid in conjunction with `health_check_path`.
        /// </summary>
        public readonly int? HealthCheckEvictionTimeInMin;
        /// <summary>
        /// The path to the Health Check.
        /// </summary>
        public readonly string? HealthCheckPath;
        /// <summary>
        /// Should the HTTP2 be enabled?
        /// </summary>
        public readonly bool? Http2Enabled;
        /// <summary>
        /// One or more `ip_restriction` blocks as defined above.
        /// </summary>
        public readonly ImmutableArray<Outputs.LinuxWebAppSiteConfigIpRestriction> IpRestrictions;
        public readonly string? LinuxFxVersion;
        /// <summary>
        /// The Site load balancing. Possible values include: `WeightedRoundRobin`, `LeastRequests`, `LeastResponseTime`, `WeightedTotalTraffic`, `RequestHash`, `PerSiteRoundRobin`. Defaults to `LeastRequests` if omitted.
        /// </summary>
        public readonly string? LoadBalancingMode;
        /// <summary>
        /// Use Local MySQL. Defaults to `false`.
        /// </summary>
        public readonly bool? LocalMysqlEnabled;
        /// <summary>
        /// Managed pipeline mode. Possible values include `Integrated`, and `Classic`. Defaults to `Integrated`.
        /// </summary>
        public readonly string? ManagedPipelineMode;
        /// <summary>
        /// The configures the minimum version of TLS required for SSL requests. Possible values include: `1.0`, `1.1`, and `1.2`. Defaults to `1.2`.
        /// </summary>
        public readonly string? MinimumTlsVersion;
        /// <summary>
        /// Should Remote Debugging be enabled? Defaults to `false`.
        /// </summary>
        public readonly bool? RemoteDebuggingEnabled;
        /// <summary>
        /// The Remote Debugging Version. Possible values include `VS2017`, `VS2019` and `VS2022`.
        /// </summary>
        public readonly string? RemoteDebuggingVersion;
        /// <summary>
        /// One or more `scm_ip_restriction` blocks as defined above.
        /// </summary>
        public readonly ImmutableArray<Outputs.LinuxWebAppSiteConfigScmIpRestriction> ScmIpRestrictions;
        /// <summary>
        /// The configures the minimum version of TLS required for SSL requests to the SCM site Possible values include: `1.0`, `1.1`, and `1.2`. Defaults to `1.2`.
        /// </summary>
        public readonly string? ScmMinimumTlsVersion;
        public readonly string? ScmType;
        /// <summary>
        /// Should the Linux Web App `ip_restriction` configuration be used for the SCM also.
        /// </summary>
        public readonly bool? ScmUseMainIpRestriction;
        /// <summary>
        /// Should the Linux Web App use a 32-bit worker? Defaults to `true`.
        /// </summary>
        public readonly bool? Use32BitWorker;
        /// <summary>
        /// Should all outbound traffic have NAT Gateways, Network Security Groups and User Defined Routes applied? Defaults to `false`.
        /// </summary>
        public readonly bool? VnetRouteAllEnabled;
        /// <summary>
        /// Should Web Sockets be enabled? Defaults to `false`.
        /// </summary>
        public readonly bool? WebsocketsEnabled;
        /// <summary>
        /// The number of Workers for this Linux App Service.
        /// </summary>
        public readonly int? WorkerCount;

        [OutputConstructor]
        private LinuxWebAppSiteConfig(
            bool? alwaysOn,

            string? apiDefinitionUrl,

            string? apiManagementApiId,

            string? appCommandLine,

            Outputs.LinuxWebAppSiteConfigApplicationStack? applicationStack,

            bool? autoHealEnabled,

            Outputs.LinuxWebAppSiteConfigAutoHealSetting? autoHealSetting,

            string? containerRegistryManagedIdentityClientId,

            bool? containerRegistryUseManagedIdentity,

            Outputs.LinuxWebAppSiteConfigCors? cors,

            ImmutableArray<string> defaultDocuments,

            bool? detailedErrorLoggingEnabled,

            string? ftpsState,

            int? healthCheckEvictionTimeInMin,

            string? healthCheckPath,

            bool? http2Enabled,

            ImmutableArray<Outputs.LinuxWebAppSiteConfigIpRestriction> ipRestrictions,

            string? linuxFxVersion,

            string? loadBalancingMode,

            bool? localMysqlEnabled,

            string? managedPipelineMode,

            string? minimumTlsVersion,

            bool? remoteDebuggingEnabled,

            string? remoteDebuggingVersion,

            ImmutableArray<Outputs.LinuxWebAppSiteConfigScmIpRestriction> scmIpRestrictions,

            string? scmMinimumTlsVersion,

            string? scmType,

            bool? scmUseMainIpRestriction,

            bool? use32BitWorker,

            bool? vnetRouteAllEnabled,

            bool? websocketsEnabled,

            int? workerCount)
        {
            AlwaysOn = alwaysOn;
            ApiDefinitionUrl = apiDefinitionUrl;
            ApiManagementApiId = apiManagementApiId;
            AppCommandLine = appCommandLine;
            ApplicationStack = applicationStack;
            AutoHealEnabled = autoHealEnabled;
            AutoHealSetting = autoHealSetting;
            ContainerRegistryManagedIdentityClientId = containerRegistryManagedIdentityClientId;
            ContainerRegistryUseManagedIdentity = containerRegistryUseManagedIdentity;
            Cors = cors;
            DefaultDocuments = defaultDocuments;
            DetailedErrorLoggingEnabled = detailedErrorLoggingEnabled;
            FtpsState = ftpsState;
            HealthCheckEvictionTimeInMin = healthCheckEvictionTimeInMin;
            HealthCheckPath = healthCheckPath;
            Http2Enabled = http2Enabled;
            IpRestrictions = ipRestrictions;
            LinuxFxVersion = linuxFxVersion;
            LoadBalancingMode = loadBalancingMode;
            LocalMysqlEnabled = localMysqlEnabled;
            ManagedPipelineMode = managedPipelineMode;
            MinimumTlsVersion = minimumTlsVersion;
            RemoteDebuggingEnabled = remoteDebuggingEnabled;
            RemoteDebuggingVersion = remoteDebuggingVersion;
            ScmIpRestrictions = scmIpRestrictions;
            ScmMinimumTlsVersion = scmMinimumTlsVersion;
            ScmType = scmType;
            ScmUseMainIpRestriction = scmUseMainIpRestriction;
            Use32BitWorker = use32BitWorker;
            VnetRouteAllEnabled = vnetRouteAllEnabled;
            WebsocketsEnabled = websocketsEnabled;
            WorkerCount = workerCount;
        }
    }
}
