// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.AppService.Outputs
{

    [OutputType]
    public sealed class GetWindowsFunctionAppSiteConfigResult
    {
        /// <summary>
        /// Is this Windows Function App Always On?.
        /// </summary>
        public readonly bool AlwaysOn;
        /// <summary>
        /// The URL of the API definition that describes this Windows Function App.
        /// </summary>
        public readonly string ApiDefinitionUrl;
        /// <summary>
        /// The ID of the API Management API for this Windows Function App.
        /// </summary>
        public readonly string ApiManagementApiId;
        /// <summary>
        /// The App command line to launch.
        /// </summary>
        public readonly string AppCommandLine;
        /// <summary>
        /// The number of workers this function app can scale out to.
        /// </summary>
        public readonly int AppScaleLimit;
        /// <summary>
        /// A `app_service_logs` block as defined above.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetWindowsFunctionAppSiteConfigAppServiceLogResult> AppServiceLogs;
        /// <summary>
        /// The Connection String for linking the Windows Function App to Application Insights.
        /// </summary>
        public readonly string ApplicationInsightsConnectionString;
        /// <summary>
        /// The Instrumentation Key for connecting the Windows Function App to Application Insights.
        /// </summary>
        public readonly string ApplicationInsightsKey;
        /// <summary>
        /// A `application_stack` block as defined above.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetWindowsFunctionAppSiteConfigApplicationStackResult> ApplicationStacks;
        /// <summary>
        /// A `cors` block as defined above.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetWindowsFunctionAppSiteConfigCorResult> Cors;
        /// <summary>
        /// A list of Default Documents for the Windows Web App.
        /// </summary>
        public readonly ImmutableArray<string> DefaultDocuments;
        /// <summary>
        /// Is detailed error logging enabled?
        /// </summary>
        public readonly bool DetailedErrorLoggingEnabled;
        /// <summary>
        /// The number of minimum instances for this Windows Function App.
        /// </summary>
        public readonly int ElasticInstanceMinimum;
        /// <summary>
        /// State of FTP / FTPS service for this Windows Function App.
        /// </summary>
        public readonly string FtpsState;
        /// <summary>
        /// The amount of time in minutes that a node can be unhealthy before being removed from the load balancer.
        /// </summary>
        public readonly int HealthCheckEvictionTimeInMin;
        /// <summary>
        /// The path to be checked for this Windows Function App health.
        /// </summary>
        public readonly string HealthCheckPath;
        /// <summary>
        /// Is the HTTP2 protocol enabled?
        /// </summary>
        public readonly bool Http2Enabled;
        /// <summary>
        /// One or more `ip_restriction` blocks as defined above.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetWindowsFunctionAppSiteConfigIpRestrictionResult> IpRestrictions;
        /// <summary>
        /// The Site load balancing mode.
        /// </summary>
        public readonly string LoadBalancingMode;
        /// <summary>
        /// The Managed pipeline mode.
        /// </summary>
        public readonly string ManagedPipelineMode;
        /// <summary>
        /// The minimum version of TLS required for SSL requests.
        /// </summary>
        public readonly string MinimumTlsVersion;
        /// <summary>
        /// The number of pre-warmed instances for this Windows Function App.
        /// </summary>
        public readonly int PreWarmedInstanceCount;
        /// <summary>
        /// Is Remote Debugging enabled?
        /// </summary>
        public readonly bool RemoteDebuggingEnabled;
        /// <summary>
        /// The Remote Debugging Version.
        /// </summary>
        public readonly string RemoteDebuggingVersion;
        /// <summary>
        /// Is Scale Monitoring of the Functions Runtime enabled?
        /// </summary>
        public readonly bool RuntimeScaleMonitoringEnabled;
        /// <summary>
        /// One or more `scm_ip_restriction` blocks as defined above.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetWindowsFunctionAppSiteConfigScmIpRestrictionResult> ScmIpRestrictions;
        /// <summary>
        /// The minimum version of TLS required for SSL requests to the SCM site.
        /// </summary>
        public readonly string ScmMinimumTlsVersion;
        /// <summary>
        /// The SCM type.
        /// </summary>
        public readonly string ScmType;
        /// <summary>
        /// Is the `ip_restriction` configuration used for the SCM?.
        /// </summary>
        public readonly bool ScmUseMainIpRestriction;
        /// <summary>
        /// Is the Windows Function App using a 32-bit worker process?
        /// </summary>
        public readonly bool Use32BitWorker;
        /// <summary>
        /// Are all outbound traffic to NAT Gateways, Network Security Groups and User Defined Routes applied?
        /// </summary>
        public readonly bool VnetRouteAllEnabled;
        /// <summary>
        /// Are Web Sockets enabled?
        /// </summary>
        public readonly bool WebsocketsEnabled;
        /// <summary>
        /// The Windows FX version.
        /// </summary>
        public readonly string WindowsFxVersion;
        /// <summary>
        /// The number of Workers for this Windows Function App.
        /// </summary>
        public readonly int WorkerCount;

        [OutputConstructor]
        private GetWindowsFunctionAppSiteConfigResult(
            bool alwaysOn,

            string apiDefinitionUrl,

            string apiManagementApiId,

            string appCommandLine,

            int appScaleLimit,

            ImmutableArray<Outputs.GetWindowsFunctionAppSiteConfigAppServiceLogResult> appServiceLogs,

            string applicationInsightsConnectionString,

            string applicationInsightsKey,

            ImmutableArray<Outputs.GetWindowsFunctionAppSiteConfigApplicationStackResult> applicationStacks,

            ImmutableArray<Outputs.GetWindowsFunctionAppSiteConfigCorResult> cors,

            ImmutableArray<string> defaultDocuments,

            bool detailedErrorLoggingEnabled,

            int elasticInstanceMinimum,

            string ftpsState,

            int healthCheckEvictionTimeInMin,

            string healthCheckPath,

            bool http2Enabled,

            ImmutableArray<Outputs.GetWindowsFunctionAppSiteConfigIpRestrictionResult> ipRestrictions,

            string loadBalancingMode,

            string managedPipelineMode,

            string minimumTlsVersion,

            int preWarmedInstanceCount,

            bool remoteDebuggingEnabled,

            string remoteDebuggingVersion,

            bool runtimeScaleMonitoringEnabled,

            ImmutableArray<Outputs.GetWindowsFunctionAppSiteConfigScmIpRestrictionResult> scmIpRestrictions,

            string scmMinimumTlsVersion,

            string scmType,

            bool scmUseMainIpRestriction,

            bool use32BitWorker,

            bool vnetRouteAllEnabled,

            bool websocketsEnabled,

            string windowsFxVersion,

            int workerCount)
        {
            AlwaysOn = alwaysOn;
            ApiDefinitionUrl = apiDefinitionUrl;
            ApiManagementApiId = apiManagementApiId;
            AppCommandLine = appCommandLine;
            AppScaleLimit = appScaleLimit;
            AppServiceLogs = appServiceLogs;
            ApplicationInsightsConnectionString = applicationInsightsConnectionString;
            ApplicationInsightsKey = applicationInsightsKey;
            ApplicationStacks = applicationStacks;
            Cors = cors;
            DefaultDocuments = defaultDocuments;
            DetailedErrorLoggingEnabled = detailedErrorLoggingEnabled;
            ElasticInstanceMinimum = elasticInstanceMinimum;
            FtpsState = ftpsState;
            HealthCheckEvictionTimeInMin = healthCheckEvictionTimeInMin;
            HealthCheckPath = healthCheckPath;
            Http2Enabled = http2Enabled;
            IpRestrictions = ipRestrictions;
            LoadBalancingMode = loadBalancingMode;
            ManagedPipelineMode = managedPipelineMode;
            MinimumTlsVersion = minimumTlsVersion;
            PreWarmedInstanceCount = preWarmedInstanceCount;
            RemoteDebuggingEnabled = remoteDebuggingEnabled;
            RemoteDebuggingVersion = remoteDebuggingVersion;
            RuntimeScaleMonitoringEnabled = runtimeScaleMonitoringEnabled;
            ScmIpRestrictions = scmIpRestrictions;
            ScmMinimumTlsVersion = scmMinimumTlsVersion;
            ScmType = scmType;
            ScmUseMainIpRestriction = scmUseMainIpRestriction;
            Use32BitWorker = use32BitWorker;
            VnetRouteAllEnabled = vnetRouteAllEnabled;
            WebsocketsEnabled = websocketsEnabled;
            WindowsFxVersion = windowsFxVersion;
            WorkerCount = workerCount;
        }
    }
}
