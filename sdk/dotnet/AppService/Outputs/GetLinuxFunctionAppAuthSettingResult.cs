// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.AppService.Outputs
{

    [OutputType]
    public sealed class GetLinuxFunctionAppAuthSettingResult
    {
        /// <summary>
        /// An `ActiveDirectory` block as defined above.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLinuxFunctionAppAuthSettingActiveDirectoryResult> ActiveDirectories;
        /// <summary>
        /// A map of login parameters sent to the OpenID Connect authorization endpoint when a user logs in.
        /// </summary>
        public readonly ImmutableDictionary<string, string> AdditionalLoginParameters;
        /// <summary>
        /// External URLs that can be redirected to as part of logging in or logging out of the app.
        /// </summary>
        public readonly ImmutableArray<string> AllowedExternalRedirectUrls;
        /// <summary>
        /// The Default Authentication Provider used when more than one Authentication Provider is configured and the `UnauthenticatedAction` is set to `RedirectToLoginPage`.
        /// </summary>
        public readonly string DefaultProvider;
        /// <summary>
        /// Is this backup job enabled?
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// A `Facebook` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLinuxFunctionAppAuthSettingFacebookResult> Facebooks;
        /// <summary>
        /// A `Github` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLinuxFunctionAppAuthSettingGithubResult> Githubs;
        /// <summary>
        /// A `Google` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLinuxFunctionAppAuthSettingGoogleResult> Googles;
        /// <summary>
        /// The OpenID Connect Issuer URI that represents the entity which issues access tokens for this Linux Web App.
        /// </summary>
        public readonly string Issuer;
        /// <summary>
        /// A `Microsoft` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLinuxFunctionAppAuthSettingMicrosoftResult> Microsofts;
        /// <summary>
        /// The Runtime Version of the Authentication and Authorisation feature of this App.
        /// </summary>
        public readonly string RuntimeVersion;
        /// <summary>
        /// The number of hours after session token expiration that a session token can be used to call the token refresh API.
        /// </summary>
        public readonly double TokenRefreshExtensionHours;
        /// <summary>
        /// Is the Token Store configuration Enabled.
        /// </summary>
        public readonly bool TokenStoreEnabled;
        /// <summary>
        /// A `Twitter` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLinuxFunctionAppAuthSettingTwitterResult> Twitters;
        /// <summary>
        /// The action to taken when an unauthenticated client attempts to access the app.
        /// </summary>
        public readonly string UnauthenticatedClientAction;

        [OutputConstructor]
        private GetLinuxFunctionAppAuthSettingResult(
            ImmutableArray<Outputs.GetLinuxFunctionAppAuthSettingActiveDirectoryResult> activeDirectories,

            ImmutableDictionary<string, string> additionalLoginParameters,

            ImmutableArray<string> allowedExternalRedirectUrls,

            string defaultProvider,

            bool enabled,

            ImmutableArray<Outputs.GetLinuxFunctionAppAuthSettingFacebookResult> facebooks,

            ImmutableArray<Outputs.GetLinuxFunctionAppAuthSettingGithubResult> githubs,

            ImmutableArray<Outputs.GetLinuxFunctionAppAuthSettingGoogleResult> googles,

            string issuer,

            ImmutableArray<Outputs.GetLinuxFunctionAppAuthSettingMicrosoftResult> microsofts,

            string runtimeVersion,

            double tokenRefreshExtensionHours,

            bool tokenStoreEnabled,

            ImmutableArray<Outputs.GetLinuxFunctionAppAuthSettingTwitterResult> twitters,

            string unauthenticatedClientAction)
        {
            ActiveDirectories = activeDirectories;
            AdditionalLoginParameters = additionalLoginParameters;
            AllowedExternalRedirectUrls = allowedExternalRedirectUrls;
            DefaultProvider = defaultProvider;
            Enabled = enabled;
            Facebooks = facebooks;
            Githubs = githubs;
            Googles = googles;
            Issuer = issuer;
            Microsofts = microsofts;
            RuntimeVersion = runtimeVersion;
            TokenRefreshExtensionHours = tokenRefreshExtensionHours;
            TokenStoreEnabled = tokenStoreEnabled;
            Twitters = twitters;
            UnauthenticatedClientAction = unauthenticatedClientAction;
        }
    }
}
