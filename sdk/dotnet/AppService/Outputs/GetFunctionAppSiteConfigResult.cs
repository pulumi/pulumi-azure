// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.AppService.Outputs
{

    [OutputType]
    public sealed class GetFunctionAppSiteConfigResult
    {
        /// <summary>
        /// Is the app loaded at all times?
        /// </summary>
        public readonly bool AlwaysOn;
        /// <summary>
        /// The number of workers this function app can scale out to. Only applicable to apps on the Consumption and Premium plan.
        /// </summary>
        public readonly int AppScaleLimit;
        public readonly string AutoSwapSlotName;
        /// <summary>
        /// A `cors` block as defined above.
        /// </summary>
        public readonly Outputs.GetFunctionAppSiteConfigCorsResult Cors;
        /// <summary>
        /// The version of the .net framework's CLR used in this App Service.
        /// </summary>
        public readonly string DotnetFrameworkVersion;
        /// <summary>
        /// The number of minimum instances for this function app. Only applicable to apps on the Premium plan.
        /// </summary>
        public readonly int ElasticInstanceMinimum;
        /// <summary>
        /// State of FTP / FTPS service for this AppService.
        /// </summary>
        public readonly string FtpsState;
        public readonly string HealthCheckPath;
        /// <summary>
        /// Is HTTP2 Enabled on this App Service?
        /// </summary>
        public readonly bool Http2Enabled;
        /// <summary>
        /// One or more `ip_restriction` blocks as defined above.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFunctionAppSiteConfigIpRestrictionResult> IpRestrictions;
        /// <summary>
        /// Java version hosted by the function app in Azure.
        /// </summary>
        public readonly string JavaVersion;
        /// <summary>
        /// Linux App Framework and version for the AppService.
        /// </summary>
        public readonly string LinuxFxVersion;
        /// <summary>
        /// The minimum supported TLS version for this App Service.
        /// </summary>
        public readonly string MinTlsVersion;
        /// <summary>
        /// The number of pre-warmed instances for this function app. Only applicable to apps on the Premium plan.
        /// </summary>
        public readonly int PreWarmedInstanceCount;
        /// <summary>
        /// Is Runtime Scale Monitoring Enabled on this function app?
        /// </summary>
        public readonly bool RuntimeScaleMonitoringEnabled;
        /// <summary>
        /// One or more `scm_ip_restriction` blocks as defined above.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFunctionAppSiteConfigScmIpRestrictionResult> ScmIpRestrictions;
        /// <summary>
        /// The type of Source Control enabled for this App Service.
        /// </summary>
        public readonly string ScmType;
        /// <summary>
        /// IP security restrictions for scm to use main.
        /// </summary>
        public readonly bool ScmUseMainIpRestriction;
        /// <summary>
        /// Does the App Service run in 32 bit mode, rather than 64 bit mode?
        /// </summary>
        public readonly bool Use32BitWorkerProcess;
        /// <summary>
        /// Are WebSockets enabled for this App Service?
        /// </summary>
        public readonly bool WebsocketsEnabled;

        [OutputConstructor]
        private GetFunctionAppSiteConfigResult(
            bool alwaysOn,

            int appScaleLimit,

            string autoSwapSlotName,

            Outputs.GetFunctionAppSiteConfigCorsResult cors,

            string dotnetFrameworkVersion,

            int elasticInstanceMinimum,

            string ftpsState,

            string healthCheckPath,

            bool http2Enabled,

            ImmutableArray<Outputs.GetFunctionAppSiteConfigIpRestrictionResult> ipRestrictions,

            string javaVersion,

            string linuxFxVersion,

            string minTlsVersion,

            int preWarmedInstanceCount,

            bool runtimeScaleMonitoringEnabled,

            ImmutableArray<Outputs.GetFunctionAppSiteConfigScmIpRestrictionResult> scmIpRestrictions,

            string scmType,

            bool scmUseMainIpRestriction,

            bool use32BitWorkerProcess,

            bool websocketsEnabled)
        {
            AlwaysOn = alwaysOn;
            AppScaleLimit = appScaleLimit;
            AutoSwapSlotName = autoSwapSlotName;
            Cors = cors;
            DotnetFrameworkVersion = dotnetFrameworkVersion;
            ElasticInstanceMinimum = elasticInstanceMinimum;
            FtpsState = ftpsState;
            HealthCheckPath = healthCheckPath;
            Http2Enabled = http2Enabled;
            IpRestrictions = ipRestrictions;
            JavaVersion = javaVersion;
            LinuxFxVersion = linuxFxVersion;
            MinTlsVersion = minTlsVersion;
            PreWarmedInstanceCount = preWarmedInstanceCount;
            RuntimeScaleMonitoringEnabled = runtimeScaleMonitoringEnabled;
            ScmIpRestrictions = scmIpRestrictions;
            ScmType = scmType;
            ScmUseMainIpRestriction = scmUseMainIpRestriction;
            Use32BitWorkerProcess = use32BitWorkerProcess;
            WebsocketsEnabled = websocketsEnabled;
        }
    }
}
