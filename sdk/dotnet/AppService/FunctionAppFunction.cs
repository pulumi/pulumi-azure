// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.AppService
{
    /// <summary>
    /// Manages a Function App Function.
    /// 
    /// ## Example Usage
    /// ### Basic HTTP Trigger
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleAccount = new Azure.Storage.Account("exampleAccount", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         AccountTier = "Standard",
    ///         AccountReplicationType = "LRS",
    ///     });
    /// 
    ///     var exampleServicePlan = new Azure.AppService.ServicePlan("exampleServicePlan", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         OsType = "Linux",
    ///         SkuName = "S1",
    ///     });
    /// 
    ///     var exampleLinuxFunctionApp = new Azure.AppService.LinuxFunctionApp("exampleLinuxFunctionApp", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         ServicePlanId = exampleServicePlan.Id,
    ///         StorageAccountName = exampleAccount.Name,
    ///         StorageAccountAccessKey = exampleAccount.PrimaryAccessKey,
    ///         SiteConfig = new Azure.AppService.Inputs.LinuxFunctionAppSiteConfigArgs
    ///         {
    ///             ApplicationStack = new Azure.AppService.Inputs.LinuxFunctionAppSiteConfigApplicationStackArgs
    ///             {
    ///                 PythonVersion = "3.9",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleFunctionAppFunction = new Azure.AppService.FunctionAppFunction("exampleFunctionAppFunction", new()
    ///     {
    ///         FunctionAppId = exampleLinuxFunctionApp.Id,
    ///         Language = "Python",
    ///         TestData = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["name"] = "Azure",
    ///         }),
    ///         ConfigJson = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["bindings"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["authLevel"] = "function",
    ///                     ["direction"] = "in",
    ///                     ["methods"] = new[]
    ///                     {
    ///                         "get",
    ///                         "post",
    ///                     },
    ///                     ["name"] = "req",
    ///                     ["type"] = "httpTrigger",
    ///                 },
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["direction"] = "out",
    ///                     ["name"] = "$return",
    ///                     ["type"] = "http",
    ///                 },
    ///             },
    ///         }),
    ///     });
    /// 
    /// });
    /// ```
    /// ### HTTP Trigger With Code Upload
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.IO;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleAccount = new Azure.Storage.Account("exampleAccount", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         AccountTier = "Standard",
    ///         AccountReplicationType = "LRS",
    ///     });
    /// 
    ///     var exampleServicePlan = new Azure.AppService.ServicePlan("exampleServicePlan", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         OsType = "Windows",
    ///         SkuName = "S1",
    ///     });
    /// 
    ///     var exampleWindowsFunctionApp = new Azure.AppService.WindowsFunctionApp("exampleWindowsFunctionApp", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         ServicePlanId = exampleServicePlan.Id,
    ///         StorageAccountName = exampleAccount.Name,
    ///         StorageAccountAccessKey = exampleAccount.PrimaryAccessKey,
    ///         SiteConfig = new Azure.AppService.Inputs.WindowsFunctionAppSiteConfigArgs
    ///         {
    ///             ApplicationStack = new Azure.AppService.Inputs.WindowsFunctionAppSiteConfigApplicationStackArgs
    ///             {
    ///                 DotnetVersion = "6",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleFunctionAppFunction = new Azure.AppService.FunctionAppFunction("exampleFunctionAppFunction", new()
    ///     {
    ///         FunctionAppId = exampleWindowsFunctionApp.Id,
    ///         Language = "CSharp",
    ///         Files = new[]
    ///         {
    ///             new Azure.AppService.Inputs.FunctionAppFunctionFileArgs
    ///             {
    ///                 Name = "run.csx",
    ///                 Content = File.ReadAllText("exampledata/run.csx"),
    ///             },
    ///         },
    ///         TestData = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["name"] = "Azure",
    ///         }),
    ///         ConfigJson = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["bindings"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["authLevel"] = "function",
    ///                     ["direction"] = "in",
    ///                     ["methods"] = new[]
    ///                     {
    ///                         "get",
    ///                         "post",
    ///                     },
    ///                     ["name"] = "req",
    ///                     ["type"] = "httpTrigger",
    ///                 },
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["direction"] = "out",
    ///                     ["name"] = "$return",
    ///                     ["type"] = "http",
    ///                 },
    ///             },
    ///         }),
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// a Function App Function can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:appservice/functionAppFunction:FunctionAppFunction example "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Web/sites/site1/functions/function1"
    /// ```
    /// </summary>
    [AzureResourceType("azure:appservice/functionAppFunction:FunctionAppFunction")]
    public partial class FunctionAppFunction : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The config for this Function in JSON format.
        /// </summary>
        [Output("configJson")]
        public Output<string> ConfigJson { get; private set; } = null!;

        /// <summary>
        /// The URL of the configuration JSON.
        /// </summary>
        [Output("configUrl")]
        public Output<string> ConfigUrl { get; private set; } = null!;

        /// <summary>
        /// Should this function be enabled. Defaults to `true`.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// A `file` block as detailed below. Changing this forces a new resource to be created.
        /// </summary>
        [Output("files")]
        public Output<ImmutableArray<Outputs.FunctionAppFunctionFile>> Files { get; private set; } = null!;

        /// <summary>
        /// The ID of the Function App in which this function should reside. Changing this forces a new resource to be created.
        /// </summary>
        [Output("functionAppId")]
        public Output<string> FunctionAppId { get; private set; } = null!;

        /// <summary>
        /// The invocation URL.
        /// </summary>
        [Output("invocationUrl")]
        public Output<string> InvocationUrl { get; private set; } = null!;

        /// <summary>
        /// The language the Function is written in. Possible values are `CSharp`, `Custom`, `Java`, `Javascript`, `Python`, `PowerShell`, and `TypeScript`.
        /// 
        /// &gt; **NOTE:** when using `Custom` language, you must specify the code handler in the `host.json` file for your function. See the [official docs](https://docs.microsoft.com/azure/azure-functions/functions-custom-handlers#hostjson) for more information.
        /// </summary>
        [Output("language")]
        public Output<string?> Language { get; private set; } = null!;

        /// <summary>
        /// The name of the function. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The Script root path URL.
        /// </summary>
        [Output("scriptRootPathUrl")]
        public Output<string> ScriptRootPathUrl { get; private set; } = null!;

        /// <summary>
        /// The script URL.
        /// </summary>
        [Output("scriptUrl")]
        public Output<string> ScriptUrl { get; private set; } = null!;

        /// <summary>
        /// The URL for the Secrets File.
        /// </summary>
        [Output("secretsFileUrl")]
        public Output<string> SecretsFileUrl { get; private set; } = null!;

        /// <summary>
        /// The test data for the function.
        /// </summary>
        [Output("testData")]
        public Output<string?> TestData { get; private set; } = null!;

        /// <summary>
        /// The Test data URL.
        /// </summary>
        [Output("testDataUrl")]
        public Output<string> TestDataUrl { get; private set; } = null!;

        /// <summary>
        /// The function URL.
        /// </summary>
        [Output("url")]
        public Output<string> Url { get; private set; } = null!;


        /// <summary>
        /// Create a FunctionAppFunction resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FunctionAppFunction(string name, FunctionAppFunctionArgs args, CustomResourceOptions? options = null)
            : base("azure:appservice/functionAppFunction:FunctionAppFunction", name, args ?? new FunctionAppFunctionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FunctionAppFunction(string name, Input<string> id, FunctionAppFunctionState? state = null, CustomResourceOptions? options = null)
            : base("azure:appservice/functionAppFunction:FunctionAppFunction", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FunctionAppFunction resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FunctionAppFunction Get(string name, Input<string> id, FunctionAppFunctionState? state = null, CustomResourceOptions? options = null)
        {
            return new FunctionAppFunction(name, id, state, options);
        }
    }

    public sealed class FunctionAppFunctionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The config for this Function in JSON format.
        /// </summary>
        [Input("configJson", required: true)]
        public Input<string> ConfigJson { get; set; } = null!;

        /// <summary>
        /// Should this function be enabled. Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("files")]
        private InputList<Inputs.FunctionAppFunctionFileArgs>? _files;

        /// <summary>
        /// A `file` block as detailed below. Changing this forces a new resource to be created.
        /// </summary>
        public InputList<Inputs.FunctionAppFunctionFileArgs> Files
        {
            get => _files ?? (_files = new InputList<Inputs.FunctionAppFunctionFileArgs>());
            set => _files = value;
        }

        /// <summary>
        /// The ID of the Function App in which this function should reside. Changing this forces a new resource to be created.
        /// </summary>
        [Input("functionAppId", required: true)]
        public Input<string> FunctionAppId { get; set; } = null!;

        /// <summary>
        /// The language the Function is written in. Possible values are `CSharp`, `Custom`, `Java`, `Javascript`, `Python`, `PowerShell`, and `TypeScript`.
        /// 
        /// &gt; **NOTE:** when using `Custom` language, you must specify the code handler in the `host.json` file for your function. See the [official docs](https://docs.microsoft.com/azure/azure-functions/functions-custom-handlers#hostjson) for more information.
        /// </summary>
        [Input("language")]
        public Input<string>? Language { get; set; }

        /// <summary>
        /// The name of the function. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The test data for the function.
        /// </summary>
        [Input("testData")]
        public Input<string>? TestData { get; set; }

        public FunctionAppFunctionArgs()
        {
        }
        public static new FunctionAppFunctionArgs Empty => new FunctionAppFunctionArgs();
    }

    public sealed class FunctionAppFunctionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The config for this Function in JSON format.
        /// </summary>
        [Input("configJson")]
        public Input<string>? ConfigJson { get; set; }

        /// <summary>
        /// The URL of the configuration JSON.
        /// </summary>
        [Input("configUrl")]
        public Input<string>? ConfigUrl { get; set; }

        /// <summary>
        /// Should this function be enabled. Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("files")]
        private InputList<Inputs.FunctionAppFunctionFileGetArgs>? _files;

        /// <summary>
        /// A `file` block as detailed below. Changing this forces a new resource to be created.
        /// </summary>
        public InputList<Inputs.FunctionAppFunctionFileGetArgs> Files
        {
            get => _files ?? (_files = new InputList<Inputs.FunctionAppFunctionFileGetArgs>());
            set => _files = value;
        }

        /// <summary>
        /// The ID of the Function App in which this function should reside. Changing this forces a new resource to be created.
        /// </summary>
        [Input("functionAppId")]
        public Input<string>? FunctionAppId { get; set; }

        /// <summary>
        /// The invocation URL.
        /// </summary>
        [Input("invocationUrl")]
        public Input<string>? InvocationUrl { get; set; }

        /// <summary>
        /// The language the Function is written in. Possible values are `CSharp`, `Custom`, `Java`, `Javascript`, `Python`, `PowerShell`, and `TypeScript`.
        /// 
        /// &gt; **NOTE:** when using `Custom` language, you must specify the code handler in the `host.json` file for your function. See the [official docs](https://docs.microsoft.com/azure/azure-functions/functions-custom-handlers#hostjson) for more information.
        /// </summary>
        [Input("language")]
        public Input<string>? Language { get; set; }

        /// <summary>
        /// The name of the function. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The Script root path URL.
        /// </summary>
        [Input("scriptRootPathUrl")]
        public Input<string>? ScriptRootPathUrl { get; set; }

        /// <summary>
        /// The script URL.
        /// </summary>
        [Input("scriptUrl")]
        public Input<string>? ScriptUrl { get; set; }

        /// <summary>
        /// The URL for the Secrets File.
        /// </summary>
        [Input("secretsFileUrl")]
        public Input<string>? SecretsFileUrl { get; set; }

        /// <summary>
        /// The test data for the function.
        /// </summary>
        [Input("testData")]
        public Input<string>? TestData { get; set; }

        /// <summary>
        /// The Test data URL.
        /// </summary>
        [Input("testDataUrl")]
        public Input<string>? TestDataUrl { get; set; }

        /// <summary>
        /// The function URL.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public FunctionAppFunctionState()
        {
        }
        public static new FunctionAppFunctionState Empty => new FunctionAppFunctionState();
    }
}
