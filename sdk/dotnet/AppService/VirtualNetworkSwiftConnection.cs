// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.AppService
{
    /// <summary>
    /// Manages an App Service Virtual Network Association for [Regional VNet Integration](https://docs.microsoft.com/azure/app-service/web-sites-integrate-with-vnet#regional-vnet-integration).
    /// 
    /// This resource can be used for both App Services and Function Apps.
    /// 
    /// &gt; **Note:** The following resources support associating the vNet for Regional vNet Integration directly on the resource and via the `azure.appservice.VirtualNetworkSwiftConnection` resource. You can't use both simultaneously.
    /// 
    /// - azure.appservice.LinuxFunctionApp
    /// - azure.appservice.LinuxFunctionAppSlot
    /// - azure.appservice.LinuxWebApp
    /// - azure.appservice.LinuxWebAppSlot
    /// - azure.logicapps.Standard
    /// - azure.appservice.WindowsFunctionApp
    /// - azure.appservice.WindowsFunctionAppSlot
    /// - azure.appservice.WindowsWebApp
    /// - azure.appservice.WindowsWebAppSlot
    /// 
    /// This resource requires the `Microsoft.Network/virtualNetworks/subnets/write` permission scope on the subnet.
    /// 
    /// The resource specific vNet integration requires the `Microsoft.Network/virtualNetworks/subnets/join/action` permission scope.
    /// 
    /// There is a hard limit of [one VNet integration per App Service Plan](https://docs.microsoft.com/azure/app-service/web-sites-integrate-with-vnet#regional-vnet-integration).
    /// Multiple apps in the same App Service plan can use the same VNet.
    /// 
    /// ## Example Usage
    /// ### With App Service)
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleVirtualNetwork = new Azure.Network.VirtualNetwork("exampleVirtualNetwork", new()
    ///     {
    ///         AddressSpaces = new[]
    ///         {
    ///             "10.0.0.0/16",
    ///         },
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///     });
    /// 
    ///     var exampleSubnet = new Azure.Network.Subnet("exampleSubnet", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         VirtualNetworkName = exampleVirtualNetwork.Name,
    ///         AddressPrefixes = new[]
    ///         {
    ///             "10.0.1.0/24",
    ///         },
    ///         Delegations = new[]
    ///         {
    ///             new Azure.Network.Inputs.SubnetDelegationArgs
    ///             {
    ///                 Name = "example-delegation",
    ///                 ServiceDelegation = new Azure.Network.Inputs.SubnetDelegationServiceDelegationArgs
    ///                 {
    ///                     Name = "Microsoft.Web/serverFarms",
    ///                     Actions = new[]
    ///                     {
    ///                         "Microsoft.Network/virtualNetworks/subnets/action",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var examplePlan = new Azure.AppService.Plan("examplePlan", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Sku = new Azure.AppService.Inputs.PlanSkuArgs
    ///         {
    ///             Tier = "Standard",
    ///             Size = "S1",
    ///         },
    ///     });
    /// 
    ///     var exampleAppService = new Azure.AppService.AppService("exampleAppService", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         AppServicePlanId = examplePlan.Id,
    ///     });
    /// 
    ///     var exampleVirtualNetworkSwiftConnection = new Azure.AppService.VirtualNetworkSwiftConnection("exampleVirtualNetworkSwiftConnection", new()
    ///     {
    ///         AppServiceId = exampleAppService.Id,
    ///         SubnetId = exampleSubnet.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// ### With Function App)
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleVirtualNetwork = new Azure.Network.VirtualNetwork("exampleVirtualNetwork", new()
    ///     {
    ///         AddressSpaces = new[]
    ///         {
    ///             "10.0.0.0/16",
    ///         },
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///     });
    /// 
    ///     var exampleSubnet = new Azure.Network.Subnet("exampleSubnet", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         VirtualNetworkName = exampleVirtualNetwork.Name,
    ///         AddressPrefixes = new[]
    ///         {
    ///             "10.0.1.0/24",
    ///         },
    ///         Delegations = new[]
    ///         {
    ///             new Azure.Network.Inputs.SubnetDelegationArgs
    ///             {
    ///                 Name = "example-delegation",
    ///                 ServiceDelegation = new Azure.Network.Inputs.SubnetDelegationServiceDelegationArgs
    ///                 {
    ///                     Name = "Microsoft.Web/serverFarms",
    ///                     Actions = new[]
    ///                     {
    ///                         "Microsoft.Network/virtualNetworks/subnets/action",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var examplePlan = new Azure.AppService.Plan("examplePlan", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Sku = new Azure.AppService.Inputs.PlanSkuArgs
    ///         {
    ///             Tier = "Standard",
    ///             Size = "S1",
    ///         },
    ///     });
    /// 
    ///     var exampleAccount = new Azure.Storage.Account("exampleAccount", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         AccountTier = "Standard",
    ///         AccountReplicationType = "LRS",
    ///     });
    /// 
    ///     var exampleFunctionApp = new Azure.AppService.FunctionApp("exampleFunctionApp", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         AppServicePlanId = examplePlan.Id,
    ///         StorageAccountName = exampleAccount.Name,
    ///         StorageAccountAccessKey = exampleAccount.PrimaryAccessKey,
    ///     });
    /// 
    ///     var exampleVirtualNetworkSwiftConnection = new Azure.AppService.VirtualNetworkSwiftConnection("exampleVirtualNetworkSwiftConnection", new()
    ///     {
    ///         AppServiceId = exampleFunctionApp.Id,
    ///         SubnetId = exampleSubnet.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// App Service Virtual Network Associations can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:appservice/virtualNetworkSwiftConnection:VirtualNetworkSwiftConnection myassociation /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Web/sites/instance1/config/virtualNetwork
    /// ```
    /// </summary>
    [AzureResourceType("azure:appservice/virtualNetworkSwiftConnection:VirtualNetworkSwiftConnection")]
    public partial class VirtualNetworkSwiftConnection : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the App Service or Function App to associate to the VNet. Changing this forces a new resource to be created.
        /// </summary>
        [Output("appServiceId")]
        public Output<string> AppServiceId { get; private set; } = null!;

        /// <summary>
        /// The ID of the subnet the app service will be associated to (the subnet must have a `service_delegation` configured for `Microsoft.Web/serverFarms`).
        /// </summary>
        [Output("subnetId")]
        public Output<string> SubnetId { get; private set; } = null!;


        /// <summary>
        /// Create a VirtualNetworkSwiftConnection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VirtualNetworkSwiftConnection(string name, VirtualNetworkSwiftConnectionArgs args, CustomResourceOptions? options = null)
            : base("azure:appservice/virtualNetworkSwiftConnection:VirtualNetworkSwiftConnection", name, args ?? new VirtualNetworkSwiftConnectionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VirtualNetworkSwiftConnection(string name, Input<string> id, VirtualNetworkSwiftConnectionState? state = null, CustomResourceOptions? options = null)
            : base("azure:appservice/virtualNetworkSwiftConnection:VirtualNetworkSwiftConnection", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VirtualNetworkSwiftConnection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VirtualNetworkSwiftConnection Get(string name, Input<string> id, VirtualNetworkSwiftConnectionState? state = null, CustomResourceOptions? options = null)
        {
            return new VirtualNetworkSwiftConnection(name, id, state, options);
        }
    }

    public sealed class VirtualNetworkSwiftConnectionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the App Service or Function App to associate to the VNet. Changing this forces a new resource to be created.
        /// </summary>
        [Input("appServiceId", required: true)]
        public Input<string> AppServiceId { get; set; } = null!;

        /// <summary>
        /// The ID of the subnet the app service will be associated to (the subnet must have a `service_delegation` configured for `Microsoft.Web/serverFarms`).
        /// </summary>
        [Input("subnetId", required: true)]
        public Input<string> SubnetId { get; set; } = null!;

        public VirtualNetworkSwiftConnectionArgs()
        {
        }
        public static new VirtualNetworkSwiftConnectionArgs Empty => new VirtualNetworkSwiftConnectionArgs();
    }

    public sealed class VirtualNetworkSwiftConnectionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the App Service or Function App to associate to the VNet. Changing this forces a new resource to be created.
        /// </summary>
        [Input("appServiceId")]
        public Input<string>? AppServiceId { get; set; }

        /// <summary>
        /// The ID of the subnet the app service will be associated to (the subnet must have a `service_delegation` configured for `Microsoft.Web/serverFarms`).
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        public VirtualNetworkSwiftConnectionState()
        {
        }
        public static new VirtualNetworkSwiftConnectionState Empty => new VirtualNetworkSwiftConnectionState();
    }
}
