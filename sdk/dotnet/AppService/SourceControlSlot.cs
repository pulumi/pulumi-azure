// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.AppService
{
    /// <summary>
    /// Manages an App Service Source Control Slot.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleServicePlan = new Azure.AppService.ServicePlan("exampleServicePlan", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         OsType = "Linux",
    ///         SkuName = "P1v2",
    ///     });
    /// 
    ///     var exampleLinuxWebApp = new Azure.AppService.LinuxWebApp("exampleLinuxWebApp", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleServicePlan.Location,
    ///         ServicePlanId = exampleServicePlan.Id,
    ///         SiteConfig = ,
    ///     });
    /// 
    ///     var exampleLinuxWebAppSlot = new Azure.AppService.LinuxWebAppSlot("exampleLinuxWebAppSlot", new()
    ///     {
    ///         AppServiceId = exampleLinuxWebApp.Id,
    ///         SiteConfig = ,
    ///     });
    /// 
    ///     var exampleSourceControlSlot = new Azure.AppService.SourceControlSlot("exampleSourceControlSlot", new()
    ///     {
    ///         SlotId = exampleLinuxWebAppSlot.Id,
    ///         RepoUrl = "https://github.com/Azure-Samples/python-docs-hello-world",
    ///         Branch = "master",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// an App Service Source Control Slot can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:appservice/sourceControlSlot:SourceControlSlot example "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Web/sites/site1/slots/slot1"
    /// ```
    /// </summary>
    [AzureResourceType("azure:appservice/sourceControlSlot:SourceControlSlot")]
    public partial class SourceControlSlot : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The URL for the repository. Changing this forces a new resource to be created.
        /// </summary>
        [Output("branch")]
        public Output<string> Branch { get; private set; } = null!;

        /// <summary>
        /// A `github_action_configuration` block as detailed below.
        /// </summary>
        [Output("githubActionConfiguration")]
        public Output<Outputs.SourceControlSlotGithubActionConfiguration?> GithubActionConfiguration { get; private set; } = null!;

        /// <summary>
        /// The branch name to use for deployments. Changing this forces a new resource to be created.
        /// </summary>
        [Output("repoUrl")]
        public Output<string> RepoUrl { get; private set; } = null!;

        /// <summary>
        /// Should the Deployment Rollback be enabled? Defaults to `false` Changing this forces a new resource to be created.
        /// </summary>
        [Output("rollbackEnabled")]
        public Output<bool?> RollbackEnabled { get; private set; } = null!;

        /// <summary>
        /// The SCM Type in use. This value is decoded by the service from the repository information supplied.
        /// </summary>
        [Output("scmType")]
        public Output<string> ScmType { get; private set; } = null!;

        /// <summary>
        /// The ID of the Linux or Windows Web App Slot. Changing this forces a new resource to be created.
        /// </summary>
        [Output("slotId")]
        public Output<string> SlotId { get; private set; } = null!;

        /// <summary>
        /// Should the Slot use local Git configuration. Changing this forces a new resource to be created.
        /// </summary>
        [Output("useLocalGit")]
        public Output<bool?> UseLocalGit { get; private set; } = null!;

        /// <summary>
        /// Should code be deployed manually. Set to `true` to disable continuous integration, such as webhooks into online repos such as GitHub. Defaults to `false`. Changing this forces a new resource to be created.
        /// </summary>
        [Output("useManualIntegration")]
        public Output<bool?> UseManualIntegration { get; private set; } = null!;

        /// <summary>
        /// The repository specified is Mercurial. Defaults to `false`. Changing this forces a new resource to be created.
        /// </summary>
        [Output("useMercurial")]
        public Output<bool?> UseMercurial { get; private set; } = null!;

        /// <summary>
        /// Indicates if the Slot uses a GitHub action for deployment. This value is decoded by the service from the repository information supplied.
        /// </summary>
        [Output("usesGithubAction")]
        public Output<bool> UsesGithubAction { get; private set; } = null!;


        /// <summary>
        /// Create a SourceControlSlot resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SourceControlSlot(string name, SourceControlSlotArgs args, CustomResourceOptions? options = null)
            : base("azure:appservice/sourceControlSlot:SourceControlSlot", name, args ?? new SourceControlSlotArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SourceControlSlot(string name, Input<string> id, SourceControlSlotState? state = null, CustomResourceOptions? options = null)
            : base("azure:appservice/sourceControlSlot:SourceControlSlot", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SourceControlSlot resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SourceControlSlot Get(string name, Input<string> id, SourceControlSlotState? state = null, CustomResourceOptions? options = null)
        {
            return new SourceControlSlot(name, id, state, options);
        }
    }

    public sealed class SourceControlSlotArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The URL for the repository. Changing this forces a new resource to be created.
        /// </summary>
        [Input("branch")]
        public Input<string>? Branch { get; set; }

        /// <summary>
        /// A `github_action_configuration` block as detailed below.
        /// </summary>
        [Input("githubActionConfiguration")]
        public Input<Inputs.SourceControlSlotGithubActionConfigurationArgs>? GithubActionConfiguration { get; set; }

        /// <summary>
        /// The branch name to use for deployments. Changing this forces a new resource to be created.
        /// </summary>
        [Input("repoUrl")]
        public Input<string>? RepoUrl { get; set; }

        /// <summary>
        /// Should the Deployment Rollback be enabled? Defaults to `false` Changing this forces a new resource to be created.
        /// </summary>
        [Input("rollbackEnabled")]
        public Input<bool>? RollbackEnabled { get; set; }

        /// <summary>
        /// The ID of the Linux or Windows Web App Slot. Changing this forces a new resource to be created.
        /// </summary>
        [Input("slotId", required: true)]
        public Input<string> SlotId { get; set; } = null!;

        /// <summary>
        /// Should the Slot use local Git configuration. Changing this forces a new resource to be created.
        /// </summary>
        [Input("useLocalGit")]
        public Input<bool>? UseLocalGit { get; set; }

        /// <summary>
        /// Should code be deployed manually. Set to `true` to disable continuous integration, such as webhooks into online repos such as GitHub. Defaults to `false`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("useManualIntegration")]
        public Input<bool>? UseManualIntegration { get; set; }

        /// <summary>
        /// The repository specified is Mercurial. Defaults to `false`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("useMercurial")]
        public Input<bool>? UseMercurial { get; set; }

        public SourceControlSlotArgs()
        {
        }
        public static new SourceControlSlotArgs Empty => new SourceControlSlotArgs();
    }

    public sealed class SourceControlSlotState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The URL for the repository. Changing this forces a new resource to be created.
        /// </summary>
        [Input("branch")]
        public Input<string>? Branch { get; set; }

        /// <summary>
        /// A `github_action_configuration` block as detailed below.
        /// </summary>
        [Input("githubActionConfiguration")]
        public Input<Inputs.SourceControlSlotGithubActionConfigurationGetArgs>? GithubActionConfiguration { get; set; }

        /// <summary>
        /// The branch name to use for deployments. Changing this forces a new resource to be created.
        /// </summary>
        [Input("repoUrl")]
        public Input<string>? RepoUrl { get; set; }

        /// <summary>
        /// Should the Deployment Rollback be enabled? Defaults to `false` Changing this forces a new resource to be created.
        /// </summary>
        [Input("rollbackEnabled")]
        public Input<bool>? RollbackEnabled { get; set; }

        /// <summary>
        /// The SCM Type in use. This value is decoded by the service from the repository information supplied.
        /// </summary>
        [Input("scmType")]
        public Input<string>? ScmType { get; set; }

        /// <summary>
        /// The ID of the Linux or Windows Web App Slot. Changing this forces a new resource to be created.
        /// </summary>
        [Input("slotId")]
        public Input<string>? SlotId { get; set; }

        /// <summary>
        /// Should the Slot use local Git configuration. Changing this forces a new resource to be created.
        /// </summary>
        [Input("useLocalGit")]
        public Input<bool>? UseLocalGit { get; set; }

        /// <summary>
        /// Should code be deployed manually. Set to `true` to disable continuous integration, such as webhooks into online repos such as GitHub. Defaults to `false`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("useManualIntegration")]
        public Input<bool>? UseManualIntegration { get; set; }

        /// <summary>
        /// The repository specified is Mercurial. Defaults to `false`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("useMercurial")]
        public Input<bool>? UseMercurial { get; set; }

        /// <summary>
        /// Indicates if the Slot uses a GitHub action for deployment. This value is decoded by the service from the repository information supplied.
        /// </summary>
        [Input("usesGithubAction")]
        public Input<bool>? UsesGithubAction { get; set; }

        public SourceControlSlotState()
        {
        }
        public static new SourceControlSlotState Empty => new SourceControlSlotState();
    }
}
