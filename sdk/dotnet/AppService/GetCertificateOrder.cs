// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.AppService
{
    public static class GetCertificateOrder
    {
        /// <summary>
        /// Use this data source to access information about an existing App Service Certificate Order.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Azure.AppService.GetCertificateOrder.InvokeAsync(new Azure.AppService.GetCertificateOrderArgs
        ///         {
        ///             Name = "example-cert-order",
        ///             ResourceGroupName = "example-resources",
        ///         }));
        ///         this.CertificateOrderId = example.Apply(example =&gt; example.Id);
        ///     }
        /// 
        ///     [Output("certificateOrderId")]
        ///     public Output&lt;string&gt; CertificateOrderId { get; set; }
        /// }
        /// ```
        /// 
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetCertificateOrderResult> InvokeAsync(GetCertificateOrderArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetCertificateOrderResult>("azure:appservice/getCertificateOrder:getCertificateOrder", args ?? new GetCertificateOrderArgs(), options.WithVersion());
    }


    public sealed class GetCertificateOrderArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the App Service.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The Name of the Resource Group where the App Service exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetCertificateOrderArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetCertificateOrderResult
    {
        /// <summary>
        /// Reasons why App Service Certificate is not renewable at the current moment.
        /// </summary>
        public readonly ImmutableArray<string> AppServiceCertificateNotRenewableReasons;
        /// <summary>
        /// true if the certificate should be automatically renewed when it expires; otherwise, false.
        /// </summary>
        public readonly bool AutoRenew;
        /// <summary>
        /// State of the Key Vault secret. A `certificates` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCertificateOrderCertificateResult> Certificates;
        /// <summary>
        /// Last CSR that was created for this order.
        /// </summary>
        public readonly string Csr;
        /// <summary>
        /// The Distinguished Name for the App Service Certificate Order.
        /// </summary>
        public readonly string DistinguishedName;
        /// <summary>
        /// Domain verification token.
        /// </summary>
        public readonly string DomainVerificationToken;
        /// <summary>
        /// Certificate expiration time.
        /// </summary>
        public readonly string ExpirationTime;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Certificate thumbprint intermediate certificate.
        /// </summary>
        public readonly string IntermediateThumbprint;
        /// <summary>
        /// Whether the private key is external or not.
        /// </summary>
        public readonly bool IsPrivateKeyExternal;
        /// <summary>
        /// Certificate key size.
        /// </summary>
        public readonly int KeySize;
        /// <summary>
        /// The Azure location where the App Service exists.
        /// </summary>
        public readonly string Location;
        public readonly string Name;
        /// <summary>
        /// Certificate product type, such as `Standard` or `WildCard`.
        /// </summary>
        public readonly string ProductType;
        public readonly string ResourceGroupName;
        /// <summary>
        /// Certificate thumbprint for root certificate.
        /// </summary>
        public readonly string RootThumbprint;
        /// <summary>
        /// Certificate thumbprint for signed certificate.
        /// </summary>
        public readonly string SignedCertificateThumbprint;
        /// <summary>
        /// Current order status.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// Duration in years (must be between 1 and 3).
        /// </summary>
        public readonly int ValidityInYears;

        [OutputConstructor]
        private GetCertificateOrderResult(
            ImmutableArray<string> appServiceCertificateNotRenewableReasons,

            bool autoRenew,

            ImmutableArray<Outputs.GetCertificateOrderCertificateResult> certificates,

            string csr,

            string distinguishedName,

            string domainVerificationToken,

            string expirationTime,

            string id,

            string intermediateThumbprint,

            bool isPrivateKeyExternal,

            int keySize,

            string location,

            string name,

            string productType,

            string resourceGroupName,

            string rootThumbprint,

            string signedCertificateThumbprint,

            string status,

            ImmutableDictionary<string, string> tags,

            int validityInYears)
        {
            AppServiceCertificateNotRenewableReasons = appServiceCertificateNotRenewableReasons;
            AutoRenew = autoRenew;
            Certificates = certificates;
            Csr = csr;
            DistinguishedName = distinguishedName;
            DomainVerificationToken = domainVerificationToken;
            ExpirationTime = expirationTime;
            Id = id;
            IntermediateThumbprint = intermediateThumbprint;
            IsPrivateKeyExternal = isPrivateKeyExternal;
            KeySize = keySize;
            Location = location;
            Name = name;
            ProductType = productType;
            ResourceGroupName = resourceGroupName;
            RootThumbprint = rootThumbprint;
            SignedCertificateThumbprint = signedCertificateThumbprint;
            Status = status;
            Tags = tags;
            ValidityInYears = validityInYears;
        }
    }
}
