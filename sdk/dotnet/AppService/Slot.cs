// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.AppService
{
    /// <summary>
    /// ## Example Usage
    /// ### NET 4.X)
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// using Random = Pulumi.Random;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var server = new Random.RandomId("server", new()
    ///     {
    ///         Keepers = 
    ///         {
    ///             { "azi_id", 1 },
    ///         },
    ///         ByteLength = 8,
    ///     });
    /// 
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var examplePlan = new Azure.AppService.Plan("examplePlan", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Sku = new Azure.AppService.Inputs.PlanSkuArgs
    ///         {
    ///             Tier = "Standard",
    ///             Size = "S1",
    ///         },
    ///     });
    /// 
    ///     var exampleAppService = new Azure.AppService.AppService("exampleAppService", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         AppServicePlanId = examplePlan.Id,
    ///         SiteConfig = new Azure.AppService.Inputs.AppServiceSiteConfigArgs
    ///         {
    ///             DotnetFrameworkVersion = "v4.0",
    ///         },
    ///         AppSettings = 
    ///         {
    ///             { "SOME_KEY", "some-value" },
    ///         },
    ///         ConnectionStrings = new[]
    ///         {
    ///             new Azure.AppService.Inputs.AppServiceConnectionStringArgs
    ///             {
    ///                 Name = "Database",
    ///                 Type = "SQLServer",
    ///                 Value = "Server=some-server.mydomain.com;Integrated Security=SSPI",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleSlot = new Azure.AppService.Slot("exampleSlot", new()
    ///     {
    ///         AppServiceName = exampleAppService.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         AppServicePlanId = examplePlan.Id,
    ///         SiteConfig = new Azure.AppService.Inputs.SlotSiteConfigArgs
    ///         {
    ///             DotnetFrameworkVersion = "v4.0",
    ///         },
    ///         AppSettings = 
    ///         {
    ///             { "SOME_KEY", "some-value" },
    ///         },
    ///         ConnectionStrings = new[]
    ///         {
    ///             new Azure.AppService.Inputs.SlotConnectionStringArgs
    ///             {
    ///                 Name = "Database",
    ///                 Type = "SQLServer",
    ///                 Value = "Server=some-server.mydomain.com;Integrated Security=SSPI",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Java 1.8)
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// using Random = Pulumi.Random;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var server = new Random.RandomId("server", new()
    ///     {
    ///         Keepers = 
    ///         {
    ///             { "azi_id", 1 },
    ///         },
    ///         ByteLength = 8,
    ///     });
    /// 
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var examplePlan = new Azure.AppService.Plan("examplePlan", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Sku = new Azure.AppService.Inputs.PlanSkuArgs
    ///         {
    ///             Tier = "Standard",
    ///             Size = "S1",
    ///         },
    ///     });
    /// 
    ///     var exampleAppService = new Azure.AppService.AppService("exampleAppService", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         AppServicePlanId = examplePlan.Id,
    ///         SiteConfig = new Azure.AppService.Inputs.AppServiceSiteConfigArgs
    ///         {
    ///             JavaVersion = "1.8",
    ///             JavaContainer = "JETTY",
    ///             JavaContainerVersion = "9.3",
    ///         },
    ///     });
    /// 
    ///     var exampleSlot = new Azure.AppService.Slot("exampleSlot", new()
    ///     {
    ///         AppServiceName = exampleAppService.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         AppServicePlanId = examplePlan.Id,
    ///         SiteConfig = new Azure.AppService.Inputs.SlotSiteConfigArgs
    ///         {
    ///             JavaVersion = "1.8",
    ///             JavaContainer = "JETTY",
    ///             JavaContainerVersion = "9.3",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// App Service Slots can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:appservice/slot:Slot instance1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Web/sites/website1/slots/instance1
    /// ```
    /// </summary>
    [AzureResourceType("azure:appservice/slot:Slot")]
    public partial class Slot : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the App Service within which to create the App Service Slot.  Changing this forces a new resource to be created.
        /// </summary>
        [Output("appServiceName")]
        public Output<string> AppServiceName { get; private set; } = null!;

        /// <summary>
        /// The ID of the App Service Plan within which to create this App Service Slot. Changing this forces a new resource to be created.
        /// </summary>
        [Output("appServicePlanId")]
        public Output<string> AppServicePlanId { get; private set; } = null!;

        /// <summary>
        /// A key-value pair of App Settings.
        /// </summary>
        [Output("appSettings")]
        public Output<ImmutableDictionary<string, string>> AppSettings { get; private set; } = null!;

        /// <summary>
        /// A `auth_settings` block as defined below.
        /// </summary>
        [Output("authSettings")]
        public Output<Outputs.SlotAuthSettings> AuthSettings { get; private set; } = null!;

        /// <summary>
        /// Should the App Service Slot send session affinity cookies, which route client requests in the same session to the same instance?
        /// </summary>
        [Output("clientAffinityEnabled")]
        public Output<bool> ClientAffinityEnabled { get; private set; } = null!;

        /// <summary>
        /// An `connection_string` block as defined below.
        /// </summary>
        [Output("connectionStrings")]
        public Output<ImmutableArray<Outputs.SlotConnectionString>> ConnectionStrings { get; private set; } = null!;

        /// <summary>
        /// The Default Hostname associated with the App Service Slot - such as `mysite.azurewebsites.net`
        /// </summary>
        [Output("defaultSiteHostname")]
        public Output<string> DefaultSiteHostname { get; private set; } = null!;

        /// <summary>
        /// Is the App Service Slot Enabled? Defaults to `true`.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// Can the App Service Slot only be accessed via HTTPS? Defaults to `false`.
        /// </summary>
        [Output("httpsOnly")]
        public Output<bool?> HttpsOnly { get; private set; } = null!;

        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.SlotIdentity?> Identity { get; private set; } = null!;

        /// <summary>
        /// The User Assigned Identity Id used for looking up KeyVault secrets. The identity must be assigned to the application. See [Access vaults with a user-assigned identity](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references#access-vaults-with-a-user-assigned-identity) for more information.
        /// </summary>
        [Output("keyVaultReferenceIdentityId")]
        public Output<string> KeyVaultReferenceIdentityId { get; private set; } = null!;

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// A `logs` block as defined below.
        /// </summary>
        [Output("logs")]
        public Output<Outputs.SlotLogs> Logs { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the App Service Slot component. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the resource group in which to create the App Service Slot component. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// A `site_config` object as defined below.
        /// </summary>
        [Output("siteConfig")]
        public Output<Outputs.SlotSiteConfig> SiteConfig { get; private set; } = null!;

        /// <summary>
        /// A `site_credential` block as defined below, which contains the site-level credentials used to publish to this App Service slot.
        /// </summary>
        [Output("siteCredentials")]
        public Output<ImmutableArray<Outputs.SlotSiteCredential>> SiteCredentials { get; private set; } = null!;

        /// <summary>
        /// One or more `storage_account` blocks as defined below.
        /// </summary>
        [Output("storageAccounts")]
        public Output<ImmutableArray<Outputs.SlotStorageAccount>> StorageAccounts { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a Slot resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Slot(string name, SlotArgs args, CustomResourceOptions? options = null)
            : base("azure:appservice/slot:Slot", name, args ?? new SlotArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Slot(string name, Input<string> id, SlotState? state = null, CustomResourceOptions? options = null)
            : base("azure:appservice/slot:Slot", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Slot resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Slot Get(string name, Input<string> id, SlotState? state = null, CustomResourceOptions? options = null)
        {
            return new Slot(name, id, state, options);
        }
    }

    public sealed class SlotArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the App Service within which to create the App Service Slot.  Changing this forces a new resource to be created.
        /// </summary>
        [Input("appServiceName", required: true)]
        public Input<string> AppServiceName { get; set; } = null!;

        /// <summary>
        /// The ID of the App Service Plan within which to create this App Service Slot. Changing this forces a new resource to be created.
        /// </summary>
        [Input("appServicePlanId", required: true)]
        public Input<string> AppServicePlanId { get; set; } = null!;

        [Input("appSettings")]
        private InputMap<string>? _appSettings;

        /// <summary>
        /// A key-value pair of App Settings.
        /// </summary>
        public InputMap<string> AppSettings
        {
            get => _appSettings ?? (_appSettings = new InputMap<string>());
            set => _appSettings = value;
        }

        /// <summary>
        /// A `auth_settings` block as defined below.
        /// </summary>
        [Input("authSettings")]
        public Input<Inputs.SlotAuthSettingsArgs>? AuthSettings { get; set; }

        /// <summary>
        /// Should the App Service Slot send session affinity cookies, which route client requests in the same session to the same instance?
        /// </summary>
        [Input("clientAffinityEnabled")]
        public Input<bool>? ClientAffinityEnabled { get; set; }

        [Input("connectionStrings")]
        private InputList<Inputs.SlotConnectionStringArgs>? _connectionStrings;

        /// <summary>
        /// An `connection_string` block as defined below.
        /// </summary>
        public InputList<Inputs.SlotConnectionStringArgs> ConnectionStrings
        {
            get => _connectionStrings ?? (_connectionStrings = new InputList<Inputs.SlotConnectionStringArgs>());
            set => _connectionStrings = value;
        }

        /// <summary>
        /// Is the App Service Slot Enabled? Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Can the App Service Slot only be accessed via HTTPS? Defaults to `false`.
        /// </summary>
        [Input("httpsOnly")]
        public Input<bool>? HttpsOnly { get; set; }

        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.SlotIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// The User Assigned Identity Id used for looking up KeyVault secrets. The identity must be assigned to the application. See [Access vaults with a user-assigned identity](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references#access-vaults-with-a-user-assigned-identity) for more information.
        /// </summary>
        [Input("keyVaultReferenceIdentityId")]
        public Input<string>? KeyVaultReferenceIdentityId { get; set; }

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// A `logs` block as defined below.
        /// </summary>
        [Input("logs")]
        public Input<Inputs.SlotLogsArgs>? Logs { get; set; }

        /// <summary>
        /// Specifies the name of the App Service Slot component. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the resource group in which to create the App Service Slot component. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// A `site_config` object as defined below.
        /// </summary>
        [Input("siteConfig")]
        public Input<Inputs.SlotSiteConfigArgs>? SiteConfig { get; set; }

        [Input("storageAccounts")]
        private InputList<Inputs.SlotStorageAccountArgs>? _storageAccounts;

        /// <summary>
        /// One or more `storage_account` blocks as defined below.
        /// </summary>
        public InputList<Inputs.SlotStorageAccountArgs> StorageAccounts
        {
            get => _storageAccounts ?? (_storageAccounts = new InputList<Inputs.SlotStorageAccountArgs>());
            set => _storageAccounts = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public SlotArgs()
        {
        }
        public static new SlotArgs Empty => new SlotArgs();
    }

    public sealed class SlotState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the App Service within which to create the App Service Slot.  Changing this forces a new resource to be created.
        /// </summary>
        [Input("appServiceName")]
        public Input<string>? AppServiceName { get; set; }

        /// <summary>
        /// The ID of the App Service Plan within which to create this App Service Slot. Changing this forces a new resource to be created.
        /// </summary>
        [Input("appServicePlanId")]
        public Input<string>? AppServicePlanId { get; set; }

        [Input("appSettings")]
        private InputMap<string>? _appSettings;

        /// <summary>
        /// A key-value pair of App Settings.
        /// </summary>
        public InputMap<string> AppSettings
        {
            get => _appSettings ?? (_appSettings = new InputMap<string>());
            set => _appSettings = value;
        }

        /// <summary>
        /// A `auth_settings` block as defined below.
        /// </summary>
        [Input("authSettings")]
        public Input<Inputs.SlotAuthSettingsGetArgs>? AuthSettings { get; set; }

        /// <summary>
        /// Should the App Service Slot send session affinity cookies, which route client requests in the same session to the same instance?
        /// </summary>
        [Input("clientAffinityEnabled")]
        public Input<bool>? ClientAffinityEnabled { get; set; }

        [Input("connectionStrings")]
        private InputList<Inputs.SlotConnectionStringGetArgs>? _connectionStrings;

        /// <summary>
        /// An `connection_string` block as defined below.
        /// </summary>
        public InputList<Inputs.SlotConnectionStringGetArgs> ConnectionStrings
        {
            get => _connectionStrings ?? (_connectionStrings = new InputList<Inputs.SlotConnectionStringGetArgs>());
            set => _connectionStrings = value;
        }

        /// <summary>
        /// The Default Hostname associated with the App Service Slot - such as `mysite.azurewebsites.net`
        /// </summary>
        [Input("defaultSiteHostname")]
        public Input<string>? DefaultSiteHostname { get; set; }

        /// <summary>
        /// Is the App Service Slot Enabled? Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Can the App Service Slot only be accessed via HTTPS? Defaults to `false`.
        /// </summary>
        [Input("httpsOnly")]
        public Input<bool>? HttpsOnly { get; set; }

        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.SlotIdentityGetArgs>? Identity { get; set; }

        /// <summary>
        /// The User Assigned Identity Id used for looking up KeyVault secrets. The identity must be assigned to the application. See [Access vaults with a user-assigned identity](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references#access-vaults-with-a-user-assigned-identity) for more information.
        /// </summary>
        [Input("keyVaultReferenceIdentityId")]
        public Input<string>? KeyVaultReferenceIdentityId { get; set; }

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// A `logs` block as defined below.
        /// </summary>
        [Input("logs")]
        public Input<Inputs.SlotLogsGetArgs>? Logs { get; set; }

        /// <summary>
        /// Specifies the name of the App Service Slot component. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the resource group in which to create the App Service Slot component. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// A `site_config` object as defined below.
        /// </summary>
        [Input("siteConfig")]
        public Input<Inputs.SlotSiteConfigGetArgs>? SiteConfig { get; set; }

        [Input("siteCredentials")]
        private InputList<Inputs.SlotSiteCredentialGetArgs>? _siteCredentials;

        /// <summary>
        /// A `site_credential` block as defined below, which contains the site-level credentials used to publish to this App Service slot.
        /// </summary>
        public InputList<Inputs.SlotSiteCredentialGetArgs> SiteCredentials
        {
            get => _siteCredentials ?? (_siteCredentials = new InputList<Inputs.SlotSiteCredentialGetArgs>());
            set => _siteCredentials = value;
        }

        [Input("storageAccounts")]
        private InputList<Inputs.SlotStorageAccountGetArgs>? _storageAccounts;

        /// <summary>
        /// One or more `storage_account` blocks as defined below.
        /// </summary>
        public InputList<Inputs.SlotStorageAccountGetArgs> StorageAccounts
        {
            get => _storageAccounts ?? (_storageAccounts = new InputList<Inputs.SlotStorageAccountGetArgs>());
            set => _storageAccounts = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public SlotState()
        {
        }
        public static new SlotState Empty => new SlotState();
    }
}
