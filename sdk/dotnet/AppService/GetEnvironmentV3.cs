// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.AppService
{
    public static class GetEnvironmentV3
    {
        /// <summary>
        /// Use this data source to access information about an existing 3rd Generation (v3) App Service Environment.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Azure.AppService.GetEnvironmentV3.InvokeAsync(new Azure.AppService.GetEnvironmentV3Args
        ///         {
        ///             Name = "example-ASE",
        ///             ResourceGroupName = "example-resource-group",
        ///         }));
        ///         this.Id = example.Apply(example =&gt; example.Id);
        ///     }
        /// 
        ///     [Output("id")]
        ///     public Output&lt;string&gt; Id { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetEnvironmentV3Result> InvokeAsync(GetEnvironmentV3Args args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetEnvironmentV3Result>("azure:appservice/getEnvironmentV3:getEnvironmentV3", args ?? new GetEnvironmentV3Args(), options.WithVersion());
    }


    public sealed class GetEnvironmentV3Args : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of this v3 App Service Environment.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the v3 App Service Environment exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetEnvironmentV3Args()
        {
        }
    }


    [OutputType]
    public sealed class GetEnvironmentV3Result
    {
        /// <summary>
        /// Are new Private Endpoint Connections allowed.
        /// </summary>
        public readonly bool AllowNewPrivateEndpointConnections;
        /// <summary>
        /// A `cluster_setting` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetEnvironmentV3ClusterSettingResult> ClusterSettings;
        /// <summary>
        /// The number of Dedicated Hosts used by this ASEv3.
        /// </summary>
        public readonly int DedicatedHostCount;
        /// <summary>
        /// the DNS suffix for this App Service Environment V3.
        /// </summary>
        public readonly string DnsSuffix;
        /// <summary>
        /// The external outbound IP addresses of the App Service Environment V3.
        /// </summary>
        public readonly ImmutableArray<string> ExternalInboundIpAddresses;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// An Inbound Network Dependencies block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetEnvironmentV3InboundNetworkDependencyResult> InboundNetworkDependencies;
        /// <summary>
        /// The internal outbound IP addresses of the App Service Environment V3.
        /// </summary>
        public readonly ImmutableArray<string> InternalInboundIpAddresses;
        /// <summary>
        /// The Internal Load Balancing Mode of this ASEv3.
        /// </summary>
        public readonly string InternalLoadBalancingMode;
        /// <summary>
        /// The number of IP SSL addresses reserved for the App Service Environment V3.
        /// </summary>
        public readonly int IpSslAddressCount;
        /// <summary>
        /// The list of Outbound IP Addresses of Linux based Apps in this App Service Environment V3.
        /// </summary>
        public readonly ImmutableArray<string> LinuxOutboundIpAddresses;
        /// <summary>
        /// The location where the App Service Environment exists.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the Cluster Setting.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Pricing tier for the front end instances.
        /// </summary>
        public readonly string PricingTier;
        public readonly string ResourceGroupName;
        /// <summary>
        /// The ID of the v3 App Service Environment Subnet.
        /// </summary>
        public readonly string SubnetId;
        /// <summary>
        /// A mapping of tags assigned to the v3 App Service Environment.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// Outbound addresses of Windows based Apps in this App Service Environment V3.
        /// </summary>
        public readonly ImmutableArray<string> WindowsOutboundIpAddresses;
        public readonly bool ZoneRedundant;

        [OutputConstructor]
        private GetEnvironmentV3Result(
            bool allowNewPrivateEndpointConnections,

            ImmutableArray<Outputs.GetEnvironmentV3ClusterSettingResult> clusterSettings,

            int dedicatedHostCount,

            string dnsSuffix,

            ImmutableArray<string> externalInboundIpAddresses,

            string id,

            ImmutableArray<Outputs.GetEnvironmentV3InboundNetworkDependencyResult> inboundNetworkDependencies,

            ImmutableArray<string> internalInboundIpAddresses,

            string internalLoadBalancingMode,

            int ipSslAddressCount,

            ImmutableArray<string> linuxOutboundIpAddresses,

            string location,

            string name,

            string pricingTier,

            string resourceGroupName,

            string subnetId,

            ImmutableDictionary<string, string> tags,

            ImmutableArray<string> windowsOutboundIpAddresses,

            bool zoneRedundant)
        {
            AllowNewPrivateEndpointConnections = allowNewPrivateEndpointConnections;
            ClusterSettings = clusterSettings;
            DedicatedHostCount = dedicatedHostCount;
            DnsSuffix = dnsSuffix;
            ExternalInboundIpAddresses = externalInboundIpAddresses;
            Id = id;
            InboundNetworkDependencies = inboundNetworkDependencies;
            InternalInboundIpAddresses = internalInboundIpAddresses;
            InternalLoadBalancingMode = internalLoadBalancingMode;
            IpSslAddressCount = ipSslAddressCount;
            LinuxOutboundIpAddresses = linuxOutboundIpAddresses;
            Location = location;
            Name = name;
            PricingTier = pricingTier;
            ResourceGroupName = resourceGroupName;
            SubnetId = subnetId;
            Tags = tags;
            WindowsOutboundIpAddresses = windowsOutboundIpAddresses;
            ZoneRedundant = zoneRedundant;
        }
    }
}
