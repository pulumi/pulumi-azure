// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.AppService
{
    /// <summary>
    /// Manages an App Service Static Web App.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Name = "example-resources",
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleStaticWebApp = new Azure.AppService.StaticWebApp("example", new()
    ///     {
    ///         Name = "example",
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Static Web Apps can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:appservice/staticWebApp:StaticWebApp example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Web/staticSites/my-static-site1
    /// ```
    /// </summary>
    [AzureResourceType("azure:appservice/staticWebApp:StaticWebApp")]
    public partial class StaticWebApp : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The API key of this Static Web App, which is used for later interacting with this Static Web App from other clients, e.g. GitHub Action.
        /// </summary>
        [Output("apiKey")]
        public Output<string> ApiKey { get; private set; } = null!;

        /// <summary>
        /// A key-value pair of App Settings.
        /// </summary>
        [Output("appSettings")]
        public Output<ImmutableDictionary<string, string>?> AppSettings { get; private set; } = null!;

        /// <summary>
        /// A `basic_auth` block as defined below.
        /// </summary>
        [Output("basicAuth")]
        public Output<Outputs.StaticWebAppBasicAuth?> BasicAuth { get; private set; } = null!;

        /// <summary>
        /// Should changes to the configuration file be permitted. Defaults to `true`.
        /// </summary>
        [Output("configurationFileChangesEnabled")]
        public Output<bool?> ConfigurationFileChangesEnabled { get; private set; } = null!;

        /// <summary>
        /// The default host name of the Static Web App.
        /// </summary>
        [Output("defaultHostName")]
        public Output<string> DefaultHostName { get; private set; } = null!;

        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.StaticWebAppIdentity?> Identity { get; private set; } = null!;

        /// <summary>
        /// The Azure Region where the Static Web App should exist. Changing this forces a new Static Web App to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Static Web App. Changing this forces a new Static Web App to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Are Preview (Staging) environments enabled. Defaults to `true`.
        /// </summary>
        [Output("previewEnvironmentsEnabled")]
        public Output<bool?> PreviewEnvironmentsEnabled { get; private set; } = null!;

        /// <summary>
        /// Should public network access be enabled for the Static Web App. Defaults to `true`.
        /// </summary>
        [Output("publicNetworkAccessEnabled")]
        public Output<bool?> PublicNetworkAccessEnabled { get; private set; } = null!;

        /// <summary>
        /// Repository branch to use for the Static Web App. `repository_url` and `repository_token` must also be set.
        /// </summary>
        [Output("repositoryBranch")]
        public Output<string?> RepositoryBranch { get; private set; } = null!;

        /// <summary>
        /// Repository Token with `admin` privileges to use for the Static Web App. `repository_branch` and `repository_url` must also be set.
        /// </summary>
        [Output("repositoryToken")]
        public Output<string?> RepositoryToken { get; private set; } = null!;

        /// <summary>
        /// Repository URL to use for the Static Web App. `repository_branch` and `repository_token` must also be set.
        /// </summary>
        [Output("repositoryUrl")]
        public Output<string?> RepositoryUrl { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Static Web App should exist. Changing this forces a new Static Web App to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// Specifies the SKU size of the Static Web App. Possible values are `Free` or `Standard`. Defaults to `Free`.
        /// </summary>
        [Output("skuSize")]
        public Output<string?> SkuSize { get; private set; } = null!;

        /// <summary>
        /// Specifies the SKU tier of the Static Web App. Possible values are `Free` or `Standard`. Defaults to `Free`.
        /// </summary>
        [Output("skuTier")]
        public Output<string?> SkuTier { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a StaticWebApp resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public StaticWebApp(string name, StaticWebAppArgs args, CustomResourceOptions? options = null)
            : base("azure:appservice/staticWebApp:StaticWebApp", name, args ?? new StaticWebAppArgs(), MakeResourceOptions(options, ""))
        {
        }

        private StaticWebApp(string name, Input<string> id, StaticWebAppState? state = null, CustomResourceOptions? options = null)
            : base("azure:appservice/staticWebApp:StaticWebApp", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "apiKey",
                    "basicAuth",
                    "repositoryToken",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing StaticWebApp resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static StaticWebApp Get(string name, Input<string> id, StaticWebAppState? state = null, CustomResourceOptions? options = null)
        {
            return new StaticWebApp(name, id, state, options);
        }
    }

    public sealed class StaticWebAppArgs : global::Pulumi.ResourceArgs
    {
        [Input("appSettings")]
        private InputMap<string>? _appSettings;

        /// <summary>
        /// A key-value pair of App Settings.
        /// </summary>
        public InputMap<string> AppSettings
        {
            get => _appSettings ?? (_appSettings = new InputMap<string>());
            set => _appSettings = value;
        }

        [Input("basicAuth")]
        private Input<Inputs.StaticWebAppBasicAuthArgs>? _basicAuth;

        /// <summary>
        /// A `basic_auth` block as defined below.
        /// </summary>
        public Input<Inputs.StaticWebAppBasicAuthArgs>? BasicAuth
        {
            get => _basicAuth;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _basicAuth = Output.Tuple<Input<Inputs.StaticWebAppBasicAuthArgs>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Should changes to the configuration file be permitted. Defaults to `true`.
        /// </summary>
        [Input("configurationFileChangesEnabled")]
        public Input<bool>? ConfigurationFileChangesEnabled { get; set; }

        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.StaticWebAppIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// The Azure Region where the Static Web App should exist. Changing this forces a new Static Web App to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name which should be used for this Static Web App. Changing this forces a new Static Web App to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Are Preview (Staging) environments enabled. Defaults to `true`.
        /// </summary>
        [Input("previewEnvironmentsEnabled")]
        public Input<bool>? PreviewEnvironmentsEnabled { get; set; }

        /// <summary>
        /// Should public network access be enabled for the Static Web App. Defaults to `true`.
        /// </summary>
        [Input("publicNetworkAccessEnabled")]
        public Input<bool>? PublicNetworkAccessEnabled { get; set; }

        /// <summary>
        /// Repository branch to use for the Static Web App. `repository_url` and `repository_token` must also be set.
        /// </summary>
        [Input("repositoryBranch")]
        public Input<string>? RepositoryBranch { get; set; }

        [Input("repositoryToken")]
        private Input<string>? _repositoryToken;

        /// <summary>
        /// Repository Token with `admin` privileges to use for the Static Web App. `repository_branch` and `repository_url` must also be set.
        /// </summary>
        public Input<string>? RepositoryToken
        {
            get => _repositoryToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _repositoryToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Repository URL to use for the Static Web App. `repository_branch` and `repository_token` must also be set.
        /// </summary>
        [Input("repositoryUrl")]
        public Input<string>? RepositoryUrl { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Static Web App should exist. Changing this forces a new Static Web App to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Specifies the SKU size of the Static Web App. Possible values are `Free` or `Standard`. Defaults to `Free`.
        /// </summary>
        [Input("skuSize")]
        public Input<string>? SkuSize { get; set; }

        /// <summary>
        /// Specifies the SKU tier of the Static Web App. Possible values are `Free` or `Standard`. Defaults to `Free`.
        /// </summary>
        [Input("skuTier")]
        public Input<string>? SkuTier { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public StaticWebAppArgs()
        {
        }
        public static new StaticWebAppArgs Empty => new StaticWebAppArgs();
    }

    public sealed class StaticWebAppState : global::Pulumi.ResourceArgs
    {
        [Input("apiKey")]
        private Input<string>? _apiKey;

        /// <summary>
        /// The API key of this Static Web App, which is used for later interacting with this Static Web App from other clients, e.g. GitHub Action.
        /// </summary>
        public Input<string>? ApiKey
        {
            get => _apiKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _apiKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("appSettings")]
        private InputMap<string>? _appSettings;

        /// <summary>
        /// A key-value pair of App Settings.
        /// </summary>
        public InputMap<string> AppSettings
        {
            get => _appSettings ?? (_appSettings = new InputMap<string>());
            set => _appSettings = value;
        }

        [Input("basicAuth")]
        private Input<Inputs.StaticWebAppBasicAuthGetArgs>? _basicAuth;

        /// <summary>
        /// A `basic_auth` block as defined below.
        /// </summary>
        public Input<Inputs.StaticWebAppBasicAuthGetArgs>? BasicAuth
        {
            get => _basicAuth;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _basicAuth = Output.Tuple<Input<Inputs.StaticWebAppBasicAuthGetArgs>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Should changes to the configuration file be permitted. Defaults to `true`.
        /// </summary>
        [Input("configurationFileChangesEnabled")]
        public Input<bool>? ConfigurationFileChangesEnabled { get; set; }

        /// <summary>
        /// The default host name of the Static Web App.
        /// </summary>
        [Input("defaultHostName")]
        public Input<string>? DefaultHostName { get; set; }

        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.StaticWebAppIdentityGetArgs>? Identity { get; set; }

        /// <summary>
        /// The Azure Region where the Static Web App should exist. Changing this forces a new Static Web App to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name which should be used for this Static Web App. Changing this forces a new Static Web App to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Are Preview (Staging) environments enabled. Defaults to `true`.
        /// </summary>
        [Input("previewEnvironmentsEnabled")]
        public Input<bool>? PreviewEnvironmentsEnabled { get; set; }

        /// <summary>
        /// Should public network access be enabled for the Static Web App. Defaults to `true`.
        /// </summary>
        [Input("publicNetworkAccessEnabled")]
        public Input<bool>? PublicNetworkAccessEnabled { get; set; }

        /// <summary>
        /// Repository branch to use for the Static Web App. `repository_url` and `repository_token` must also be set.
        /// </summary>
        [Input("repositoryBranch")]
        public Input<string>? RepositoryBranch { get; set; }

        [Input("repositoryToken")]
        private Input<string>? _repositoryToken;

        /// <summary>
        /// Repository Token with `admin` privileges to use for the Static Web App. `repository_branch` and `repository_url` must also be set.
        /// </summary>
        public Input<string>? RepositoryToken
        {
            get => _repositoryToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _repositoryToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Repository URL to use for the Static Web App. `repository_branch` and `repository_token` must also be set.
        /// </summary>
        [Input("repositoryUrl")]
        public Input<string>? RepositoryUrl { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Static Web App should exist. Changing this forces a new Static Web App to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// Specifies the SKU size of the Static Web App. Possible values are `Free` or `Standard`. Defaults to `Free`.
        /// </summary>
        [Input("skuSize")]
        public Input<string>? SkuSize { get; set; }

        /// <summary>
        /// Specifies the SKU tier of the Static Web App. Possible values are `Free` or `Standard`. Defaults to `Free`.
        /// </summary>
        [Input("skuTier")]
        public Input<string>? SkuTier { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public StaticWebAppState()
        {
        }
        public static new StaticWebAppState Empty => new StaticWebAppState();
    }
}
