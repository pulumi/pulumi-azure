// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.AppService
{
    /// <summary>
    /// Manages a Function App Active Slot.
    /// 
    /// ## Example Usage
    /// ### Windows Function App
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleAccount = new Azure.Storage.Account("exampleAccount", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         AccountTier = "Standard",
    ///         AccountReplicationType = "LRS",
    ///     });
    /// 
    ///     var exampleServicePlan = new Azure.AppService.ServicePlan("exampleServicePlan", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         OsType = "Windows",
    ///         SkuName = "Y1",
    ///     });
    /// 
    ///     var exampleWindowsFunctionApp = new Azure.AppService.WindowsFunctionApp("exampleWindowsFunctionApp", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         StorageAccountName = exampleAccount.Name,
    ///         ServicePlanId = exampleServicePlan.Id,
    ///         SiteConfig = null,
    ///     });
    /// 
    ///     var exampleWindowsFunctionAppSlot = new Azure.AppService.WindowsFunctionAppSlot("exampleWindowsFunctionAppSlot", new()
    ///     {
    ///         FunctionAppId = exampleWindowsFunctionApp.Id,
    ///         StorageAccountName = exampleAccount.Name,
    ///         SiteConfig = null,
    ///     });
    /// 
    ///     var exampleFunctionAppActiveSlot = new Azure.AppService.FunctionAppActiveSlot("exampleFunctionAppActiveSlot", new()
    ///     {
    ///         SlotId = exampleWindowsFunctionAppSlot.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// ### Linux Function App
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleAccount = new Azure.Storage.Account("exampleAccount", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         AccountTier = "Standard",
    ///         AccountReplicationType = "LRS",
    ///     });
    /// 
    ///     var exampleServicePlan = new Azure.AppService.ServicePlan("exampleServicePlan", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         OsType = "Linux",
    ///         SkuName = "Y1",
    ///     });
    /// 
    ///     var exampleLinuxFunctionApp = new Azure.AppService.LinuxFunctionApp("exampleLinuxFunctionApp", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         ServicePlanId = exampleServicePlan.Id,
    ///         StorageAccountName = exampleAccount.Name,
    ///         SiteConfig = null,
    ///     });
    /// 
    ///     var exampleLinuxFunctionAppSlot = new Azure.AppService.LinuxFunctionAppSlot("exampleLinuxFunctionAppSlot", new()
    ///     {
    ///         FunctionAppId = exampleLinuxFunctionApp.Name,
    ///         StorageAccountName = exampleAccount.Name,
    ///         SiteConfig = null,
    ///     });
    /// 
    ///     var exampleFunctionAppActiveSlot = new Azure.AppService.FunctionAppActiveSlot("exampleFunctionAppActiveSlot", new()
    ///     {
    ///         SlotId = exampleLinuxFunctionAppSlot.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// a Function App Active Slot can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:appservice/functionAppActiveSlot:FunctionAppActiveSlot example "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Web/sites/site1"
    /// ```
    /// </summary>
    [AzureResourceType("azure:appservice/functionAppActiveSlot:FunctionAppActiveSlot")]
    public partial class FunctionAppActiveSlot : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The timestamp of the last successful swap with `Production`
        /// </summary>
        [Output("lastSuccessfulSwap")]
        public Output<string> LastSuccessfulSwap { get; private set; } = null!;

        /// <summary>
        /// The swap action should overwrite the Production slot's network configuration with the configuration from this slot. Defaults to `true`. Changing this forces a new resource to be created.
        /// </summary>
        [Output("overwriteNetworkConfig")]
        public Output<bool?> OverwriteNetworkConfig { get; private set; } = null!;

        /// <summary>
        /// The ID of the Slot to swap with `Production`.
        /// </summary>
        [Output("slotId")]
        public Output<string> SlotId { get; private set; } = null!;


        /// <summary>
        /// Create a FunctionAppActiveSlot resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FunctionAppActiveSlot(string name, FunctionAppActiveSlotArgs args, CustomResourceOptions? options = null)
            : base("azure:appservice/functionAppActiveSlot:FunctionAppActiveSlot", name, args ?? new FunctionAppActiveSlotArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FunctionAppActiveSlot(string name, Input<string> id, FunctionAppActiveSlotState? state = null, CustomResourceOptions? options = null)
            : base("azure:appservice/functionAppActiveSlot:FunctionAppActiveSlot", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FunctionAppActiveSlot resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FunctionAppActiveSlot Get(string name, Input<string> id, FunctionAppActiveSlotState? state = null, CustomResourceOptions? options = null)
        {
            return new FunctionAppActiveSlot(name, id, state, options);
        }
    }

    public sealed class FunctionAppActiveSlotArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The swap action should overwrite the Production slot's network configuration with the configuration from this slot. Defaults to `true`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("overwriteNetworkConfig")]
        public Input<bool>? OverwriteNetworkConfig { get; set; }

        /// <summary>
        /// The ID of the Slot to swap with `Production`.
        /// </summary>
        [Input("slotId", required: true)]
        public Input<string> SlotId { get; set; } = null!;

        public FunctionAppActiveSlotArgs()
        {
        }
        public static new FunctionAppActiveSlotArgs Empty => new FunctionAppActiveSlotArgs();
    }

    public sealed class FunctionAppActiveSlotState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The timestamp of the last successful swap with `Production`
        /// </summary>
        [Input("lastSuccessfulSwap")]
        public Input<string>? LastSuccessfulSwap { get; set; }

        /// <summary>
        /// The swap action should overwrite the Production slot's network configuration with the configuration from this slot. Defaults to `true`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("overwriteNetworkConfig")]
        public Input<bool>? OverwriteNetworkConfig { get; set; }

        /// <summary>
        /// The ID of the Slot to swap with `Production`.
        /// </summary>
        [Input("slotId")]
        public Input<string>? SlotId { get; set; }

        public FunctionAppActiveSlotState()
        {
        }
        public static new FunctionAppActiveSlotState Empty => new FunctionAppActiveSlotState();
    }
}
