// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.AppService
{
    /// <summary>
    /// Manages a Function App Hybrid Connection.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleServicePlan = new Azure.AppService.ServicePlan("exampleServicePlan", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         OsType = "Windows",
    ///         SkuName = "S1",
    ///     });
    /// 
    ///     var exampleNamespace = new Azure.Relay.Namespace("exampleNamespace", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         SkuName = "Standard",
    ///     });
    /// 
    ///     var exampleHybridConnection = new Azure.Relay.HybridConnection("exampleHybridConnection", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         RelayNamespaceName = exampleNamespace.Name,
    ///     });
    /// 
    ///     var exampleAccount = new Azure.Storage.Account("exampleAccount", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         AccountTier = "Standard",
    ///         AccountReplicationType = "GRS",
    ///     });
    /// 
    ///     var exampleWindowsWebApp = new Azure.AppService.WindowsWebApp("exampleWindowsWebApp", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         ServicePlanId = exampleServicePlan.Id,
    ///         SiteConfig = null,
    ///     });
    /// 
    ///     var exampleWindowsFunctionApp = new Azure.AppService.WindowsFunctionApp("exampleWindowsFunctionApp", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         ServicePlanId = exampleServicePlan.Id,
    ///         StorageAccountName = exampleAccount.Name,
    ///         StorageAccountAccessKey = exampleAccount.PrimaryAccessKey,
    ///         SiteConfig = null,
    ///     });
    /// 
    ///     var exampleFunctionAppHybridConnection = new Azure.AppService.FunctionAppHybridConnection("exampleFunctionAppHybridConnection", new()
    ///     {
    ///         FunctionAppId = exampleWindowsWebApp.Id,
    ///         RelayId = exampleHybridConnection.Id,
    ///         Hostname = "myhostname.example",
    ///         Port = 8081,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// a Function App Hybrid Connection can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:appservice/functionAppHybridConnection:FunctionAppHybridConnection example "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Web/sites/site1/hybridConnectionNamespaces/hybridConnectionNamespace1/relays/relay1"
    /// ```
    /// </summary>
    [AzureResourceType("azure:appservice/functionAppHybridConnection:FunctionAppHybridConnection")]
    public partial class FunctionAppHybridConnection : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the Function App for this Hybrid Connection. Changing this forces a new resource to be created.
        /// </summary>
        [Output("functionAppId")]
        public Output<string> FunctionAppId { get; private set; } = null!;

        /// <summary>
        /// The hostname of the endpoint.
        /// </summary>
        [Output("hostname")]
        public Output<string> Hostname { get; private set; } = null!;

        /// <summary>
        /// The name of the Relay Namespace.
        /// </summary>
        [Output("namespaceName")]
        public Output<string> NamespaceName { get; private set; } = null!;

        /// <summary>
        /// The port to use for the endpoint
        /// </summary>
        [Output("port")]
        public Output<int> Port { get; private set; } = null!;

        /// <summary>
        /// The ID of the Relay Hybrid Connection to use. Changing this forces a new resource to be created.
        /// </summary>
        [Output("relayId")]
        public Output<string> RelayId { get; private set; } = null!;

        /// <summary>
        /// The name of the Relay in use.
        /// </summary>
        [Output("relayName")]
        public Output<string> RelayName { get; private set; } = null!;

        /// <summary>
        /// The name of the Relay key with `Send` permission to use. Defaults to `RootManageSharedAccessKey`
        /// </summary>
        [Output("sendKeyName")]
        public Output<string?> SendKeyName { get; private set; } = null!;

        /// <summary>
        /// The Primary Access Key for the `send_key_name`
        /// </summary>
        [Output("sendKeyValue")]
        public Output<string> SendKeyValue { get; private set; } = null!;

        /// <summary>
        /// The Service Bus Namespace.
        /// </summary>
        [Output("serviceBusNamespace")]
        public Output<string> ServiceBusNamespace { get; private set; } = null!;

        /// <summary>
        /// The suffix for the endpoint.
        /// </summary>
        [Output("serviceBusSuffix")]
        public Output<string> ServiceBusSuffix { get; private set; } = null!;


        /// <summary>
        /// Create a FunctionAppHybridConnection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FunctionAppHybridConnection(string name, FunctionAppHybridConnectionArgs args, CustomResourceOptions? options = null)
            : base("azure:appservice/functionAppHybridConnection:FunctionAppHybridConnection", name, args ?? new FunctionAppHybridConnectionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FunctionAppHybridConnection(string name, Input<string> id, FunctionAppHybridConnectionState? state = null, CustomResourceOptions? options = null)
            : base("azure:appservice/functionAppHybridConnection:FunctionAppHybridConnection", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "sendKeyValue",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FunctionAppHybridConnection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FunctionAppHybridConnection Get(string name, Input<string> id, FunctionAppHybridConnectionState? state = null, CustomResourceOptions? options = null)
        {
            return new FunctionAppHybridConnection(name, id, state, options);
        }
    }

    public sealed class FunctionAppHybridConnectionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Function App for this Hybrid Connection. Changing this forces a new resource to be created.
        /// </summary>
        [Input("functionAppId", required: true)]
        public Input<string> FunctionAppId { get; set; } = null!;

        /// <summary>
        /// The hostname of the endpoint.
        /// </summary>
        [Input("hostname", required: true)]
        public Input<string> Hostname { get; set; } = null!;

        /// <summary>
        /// The port to use for the endpoint
        /// </summary>
        [Input("port", required: true)]
        public Input<int> Port { get; set; } = null!;

        /// <summary>
        /// The ID of the Relay Hybrid Connection to use. Changing this forces a new resource to be created.
        /// </summary>
        [Input("relayId", required: true)]
        public Input<string> RelayId { get; set; } = null!;

        /// <summary>
        /// The name of the Relay key with `Send` permission to use. Defaults to `RootManageSharedAccessKey`
        /// </summary>
        [Input("sendKeyName")]
        public Input<string>? SendKeyName { get; set; }

        public FunctionAppHybridConnectionArgs()
        {
        }
        public static new FunctionAppHybridConnectionArgs Empty => new FunctionAppHybridConnectionArgs();
    }

    public sealed class FunctionAppHybridConnectionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Function App for this Hybrid Connection. Changing this forces a new resource to be created.
        /// </summary>
        [Input("functionAppId")]
        public Input<string>? FunctionAppId { get; set; }

        /// <summary>
        /// The hostname of the endpoint.
        /// </summary>
        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        /// <summary>
        /// The name of the Relay Namespace.
        /// </summary>
        [Input("namespaceName")]
        public Input<string>? NamespaceName { get; set; }

        /// <summary>
        /// The port to use for the endpoint
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// The ID of the Relay Hybrid Connection to use. Changing this forces a new resource to be created.
        /// </summary>
        [Input("relayId")]
        public Input<string>? RelayId { get; set; }

        /// <summary>
        /// The name of the Relay in use.
        /// </summary>
        [Input("relayName")]
        public Input<string>? RelayName { get; set; }

        /// <summary>
        /// The name of the Relay key with `Send` permission to use. Defaults to `RootManageSharedAccessKey`
        /// </summary>
        [Input("sendKeyName")]
        public Input<string>? SendKeyName { get; set; }

        [Input("sendKeyValue")]
        private Input<string>? _sendKeyValue;

        /// <summary>
        /// The Primary Access Key for the `send_key_name`
        /// </summary>
        public Input<string>? SendKeyValue
        {
            get => _sendKeyValue;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _sendKeyValue = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The Service Bus Namespace.
        /// </summary>
        [Input("serviceBusNamespace")]
        public Input<string>? ServiceBusNamespace { get; set; }

        /// <summary>
        /// The suffix for the endpoint.
        /// </summary>
        [Input("serviceBusSuffix")]
        public Input<string>? ServiceBusSuffix { get; set; }

        public FunctionAppHybridConnectionState()
        {
        }
        public static new FunctionAppHybridConnectionState Empty => new FunctionAppHybridConnectionState();
    }
}
