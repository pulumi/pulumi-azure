// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.AppService
{
    /// <summary>
    /// Manages a Windows Web App Slot.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleServicePlan = new Azure.AppService.ServicePlan("exampleServicePlan", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         OsType = "Windows",
    ///         SkuName = "P1v2",
    ///     });
    /// 
    ///     var exampleWindowsWebApp = new Azure.AppService.WindowsWebApp("exampleWindowsWebApp", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleServicePlan.Location,
    ///         ServicePlanId = exampleServicePlan.Id,
    ///         SiteConfig = null,
    ///     });
    /// 
    ///     var exampleWindowsWebAppSlot = new Azure.AppService.WindowsWebAppSlot("exampleWindowsWebAppSlot", new()
    ///     {
    ///         AppServiceId = exampleWindowsWebApp.Id,
    ///         SiteConfig = null,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Windows Web Apps can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:appservice/windowsWebAppSlot:WindowsWebAppSlot example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Web/sites/site1/slots/slot1
    /// ```
    /// </summary>
    [AzureResourceType("azure:appservice/windowsWebAppSlot:WindowsWebAppSlot")]
    public partial class WindowsWebAppSlot : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the Windows Web App this Deployment Slot will be part of. Changing this forces a new Windows Web App to be created.
        /// </summary>
        [Output("appServiceId")]
        public Output<string> AppServiceId { get; private set; } = null!;

        /// <summary>
        /// A map of key-value pairs of App Settings.
        /// </summary>
        [Output("appSettings")]
        public Output<ImmutableDictionary<string, string>?> AppSettings { get; private set; } = null!;

        /// <summary>
        /// An `auth_settings` block as defined below.
        /// </summary>
        [Output("authSettings")]
        public Output<Outputs.WindowsWebAppSlotAuthSettings?> AuthSettings { get; private set; } = null!;

        /// <summary>
        /// An `auth_settings_v2` block as defined below.
        /// </summary>
        [Output("authSettingsV2")]
        public Output<Outputs.WindowsWebAppSlotAuthSettingsV2?> AuthSettingsV2 { get; private set; } = null!;

        /// <summary>
        /// A `backup` block as defined below.
        /// </summary>
        [Output("backup")]
        public Output<Outputs.WindowsWebAppSlotBackup?> Backup { get; private set; } = null!;

        /// <summary>
        /// Should Client Affinity be enabled?
        /// </summary>
        [Output("clientAffinityEnabled")]
        public Output<bool?> ClientAffinityEnabled { get; private set; } = null!;

        /// <summary>
        /// Should Client Certificates be enabled?
        /// </summary>
        [Output("clientCertificateEnabled")]
        public Output<bool?> ClientCertificateEnabled { get; private set; } = null!;

        /// <summary>
        /// Paths to exclude when using client certificates, separated by ;
        /// </summary>
        [Output("clientCertificateExclusionPaths")]
        public Output<string?> ClientCertificateExclusionPaths { get; private set; } = null!;

        /// <summary>
        /// The Client Certificate mode. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser`. This property has no effect when `client_cert_enabled` is `false`. Defaults to `Required`.
        /// </summary>
        [Output("clientCertificateMode")]
        public Output<string?> ClientCertificateMode { get; private set; } = null!;

        /// <summary>
        /// One or more `connection_string` blocks as defined below.
        /// </summary>
        [Output("connectionStrings")]
        public Output<ImmutableArray<Outputs.WindowsWebAppSlotConnectionString>> ConnectionStrings { get; private set; } = null!;

        /// <summary>
        /// The identifier used by App Service to perform domain ownership verification via DNS TXT record.
        /// </summary>
        [Output("customDomainVerificationId")]
        public Output<string> CustomDomainVerificationId { get; private set; } = null!;

        /// <summary>
        /// The default hostname of the Windows Web App Slot.
        /// </summary>
        [Output("defaultHostname")]
        public Output<string> DefaultHostname { get; private set; } = null!;

        /// <summary>
        /// Should the Windows Web App Slot be enabled? Defaults to `true`.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// Should the default FTP Basic Authentication publishing profile be enabled. Defaults to `true`.
        /// </summary>
        [Output("ftpPublishBasicAuthenticationEnabled")]
        public Output<bool?> FtpPublishBasicAuthenticationEnabled { get; private set; } = null!;

        /// <summary>
        /// The ID of the App Service Environment used by App Service Slot.
        /// </summary>
        [Output("hostingEnvironmentId")]
        public Output<string> HostingEnvironmentId { get; private set; } = null!;

        /// <summary>
        /// Should the Windows Web App Slot require HTTPS connections. Defaults to `false`.
        /// </summary>
        [Output("httpsOnly")]
        public Output<bool?> HttpsOnly { get; private set; } = null!;

        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.WindowsWebAppSlotIdentity?> Identity { get; private set; } = null!;

        /// <summary>
        /// The User Assigned Identity ID used for accessing KeyVault secrets. The identity must be assigned to the application in the `identity` block. [For more information see - Access vaults with a user-assigned identity](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references#access-vaults-with-a-user-assigned-identity)
        /// </summary>
        [Output("keyVaultReferenceIdentityId")]
        public Output<string> KeyVaultReferenceIdentityId { get; private set; } = null!;

        /// <summary>
        /// The Kind value for this Windows Web App Slot.
        /// </summary>
        [Output("kind")]
        public Output<string> Kind { get; private set; } = null!;

        /// <summary>
        /// A `logs` block as defined below.
        /// </summary>
        [Output("logs")]
        public Output<Outputs.WindowsWebAppSlotLogs?> Logs { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A list of outbound IP addresses - such as `["52.23.25.3", "52.143.43.12"]`
        /// </summary>
        [Output("outboundIpAddressLists")]
        public Output<ImmutableArray<string>> OutboundIpAddressLists { get; private set; } = null!;

        /// <summary>
        /// A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12`.
        /// </summary>
        [Output("outboundIpAddresses")]
        public Output<string> OutboundIpAddresses { get; private set; } = null!;

        /// <summary>
        /// A list of possible outbound ip address.
        /// </summary>
        [Output("possibleOutboundIpAddressLists")]
        public Output<ImmutableArray<string>> PossibleOutboundIpAddressLists { get; private set; } = null!;

        /// <summary>
        /// A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12,52.143.43.17` - not all of which are necessarily in use. Superset of `outbound_ip_addresses`.
        /// </summary>
        [Output("possibleOutboundIpAddresses")]
        public Output<string> PossibleOutboundIpAddresses { get; private set; } = null!;

        /// <summary>
        /// Should public network access be enabled for the Web App. Defaults to `true`.
        /// </summary>
        [Output("publicNetworkAccessEnabled")]
        public Output<bool?> PublicNetworkAccessEnabled { get; private set; } = null!;

        /// <summary>
        /// The ID of the Service Plan in which to run this slot. If not specified the same Service Plan as the Windows Web App will be used.
        /// 
        /// &gt; **Note:** `service_plan_id` should only be specified if it differs from the Service Plan of the associated Windows Web App.
        /// </summary>
        [Output("servicePlanId")]
        public Output<string?> ServicePlanId { get; private set; } = null!;

        /// <summary>
        /// A `site_config` block as defined below.
        /// </summary>
        [Output("siteConfig")]
        public Output<Outputs.WindowsWebAppSlotSiteConfig> SiteConfig { get; private set; } = null!;

        /// <summary>
        /// A `site_credential` block as defined below.
        /// </summary>
        [Output("siteCredentials")]
        public Output<ImmutableArray<Outputs.WindowsWebAppSlotSiteCredential>> SiteCredentials { get; private set; } = null!;

        /// <summary>
        /// One or more `storage_account` blocks as defined below.
        /// 
        /// &gt; **Note:** Using this value requires `WEBSITE_RUN_FROM_PACKAGE=1` to be set on the App in `app_settings`. Refer to the [Azure docs](https://docs.microsoft.com/en-us/azure/app-service/deploy-run-package) for further details.
        /// </summary>
        [Output("storageAccounts")]
        public Output<ImmutableArray<Outputs.WindowsWebAppSlotStorageAccount>> StorageAccounts { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags which should be assigned to the Windows Web App Slot.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("virtualNetworkSubnetId")]
        public Output<string?> VirtualNetworkSubnetId { get; private set; } = null!;

        /// <summary>
        /// Should the default WebDeploy Basic Authentication publishing credentials enabled. Defaults to `true`.
        /// 
        /// &gt; **NOTE:** Setting this value to true will disable the ability to use `zip_deploy_file` which currently relies on the default publishing profile.
        /// </summary>
        [Output("webdeployPublishBasicAuthenticationEnabled")]
        public Output<bool?> WebdeployPublishBasicAuthenticationEnabled { get; private set; } = null!;

        /// <summary>
        /// The local path and filename of the Zip packaged application to deploy to this Windows Web App.
        /// </summary>
        [Output("zipDeployFile")]
        public Output<string> ZipDeployFile { get; private set; } = null!;


        /// <summary>
        /// Create a WindowsWebAppSlot resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WindowsWebAppSlot(string name, WindowsWebAppSlotArgs args, CustomResourceOptions? options = null)
            : base("azure:appservice/windowsWebAppSlot:WindowsWebAppSlot", name, args ?? new WindowsWebAppSlotArgs(), MakeResourceOptions(options, ""))
        {
        }

        private WindowsWebAppSlot(string name, Input<string> id, WindowsWebAppSlotState? state = null, CustomResourceOptions? options = null)
            : base("azure:appservice/windowsWebAppSlot:WindowsWebAppSlot", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "customDomainVerificationId",
                    "siteCredentials",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WindowsWebAppSlot resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WindowsWebAppSlot Get(string name, Input<string> id, WindowsWebAppSlotState? state = null, CustomResourceOptions? options = null)
        {
            return new WindowsWebAppSlot(name, id, state, options);
        }
    }

    public sealed class WindowsWebAppSlotArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Windows Web App this Deployment Slot will be part of. Changing this forces a new Windows Web App to be created.
        /// </summary>
        [Input("appServiceId", required: true)]
        public Input<string> AppServiceId { get; set; } = null!;

        [Input("appSettings")]
        private InputMap<string>? _appSettings;

        /// <summary>
        /// A map of key-value pairs of App Settings.
        /// </summary>
        public InputMap<string> AppSettings
        {
            get => _appSettings ?? (_appSettings = new InputMap<string>());
            set => _appSettings = value;
        }

        /// <summary>
        /// An `auth_settings` block as defined below.
        /// </summary>
        [Input("authSettings")]
        public Input<Inputs.WindowsWebAppSlotAuthSettingsArgs>? AuthSettings { get; set; }

        /// <summary>
        /// An `auth_settings_v2` block as defined below.
        /// </summary>
        [Input("authSettingsV2")]
        public Input<Inputs.WindowsWebAppSlotAuthSettingsV2Args>? AuthSettingsV2 { get; set; }

        /// <summary>
        /// A `backup` block as defined below.
        /// </summary>
        [Input("backup")]
        public Input<Inputs.WindowsWebAppSlotBackupArgs>? Backup { get; set; }

        /// <summary>
        /// Should Client Affinity be enabled?
        /// </summary>
        [Input("clientAffinityEnabled")]
        public Input<bool>? ClientAffinityEnabled { get; set; }

        /// <summary>
        /// Should Client Certificates be enabled?
        /// </summary>
        [Input("clientCertificateEnabled")]
        public Input<bool>? ClientCertificateEnabled { get; set; }

        /// <summary>
        /// Paths to exclude when using client certificates, separated by ;
        /// </summary>
        [Input("clientCertificateExclusionPaths")]
        public Input<string>? ClientCertificateExclusionPaths { get; set; }

        /// <summary>
        /// The Client Certificate mode. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser`. This property has no effect when `client_cert_enabled` is `false`. Defaults to `Required`.
        /// </summary>
        [Input("clientCertificateMode")]
        public Input<string>? ClientCertificateMode { get; set; }

        [Input("connectionStrings")]
        private InputList<Inputs.WindowsWebAppSlotConnectionStringArgs>? _connectionStrings;

        /// <summary>
        /// One or more `connection_string` blocks as defined below.
        /// </summary>
        public InputList<Inputs.WindowsWebAppSlotConnectionStringArgs> ConnectionStrings
        {
            get => _connectionStrings ?? (_connectionStrings = new InputList<Inputs.WindowsWebAppSlotConnectionStringArgs>());
            set => _connectionStrings = value;
        }

        /// <summary>
        /// Should the Windows Web App Slot be enabled? Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Should the default FTP Basic Authentication publishing profile be enabled. Defaults to `true`.
        /// </summary>
        [Input("ftpPublishBasicAuthenticationEnabled")]
        public Input<bool>? FtpPublishBasicAuthenticationEnabled { get; set; }

        /// <summary>
        /// Should the Windows Web App Slot require HTTPS connections. Defaults to `false`.
        /// </summary>
        [Input("httpsOnly")]
        public Input<bool>? HttpsOnly { get; set; }

        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.WindowsWebAppSlotIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// The User Assigned Identity ID used for accessing KeyVault secrets. The identity must be assigned to the application in the `identity` block. [For more information see - Access vaults with a user-assigned identity](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references#access-vaults-with-a-user-assigned-identity)
        /// </summary>
        [Input("keyVaultReferenceIdentityId")]
        public Input<string>? KeyVaultReferenceIdentityId { get; set; }

        /// <summary>
        /// A `logs` block as defined below.
        /// </summary>
        [Input("logs")]
        public Input<Inputs.WindowsWebAppSlotLogsArgs>? Logs { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Should public network access be enabled for the Web App. Defaults to `true`.
        /// </summary>
        [Input("publicNetworkAccessEnabled")]
        public Input<bool>? PublicNetworkAccessEnabled { get; set; }

        /// <summary>
        /// The ID of the Service Plan in which to run this slot. If not specified the same Service Plan as the Windows Web App will be used.
        /// 
        /// &gt; **Note:** `service_plan_id` should only be specified if it differs from the Service Plan of the associated Windows Web App.
        /// </summary>
        [Input("servicePlanId")]
        public Input<string>? ServicePlanId { get; set; }

        /// <summary>
        /// A `site_config` block as defined below.
        /// </summary>
        [Input("siteConfig", required: true)]
        public Input<Inputs.WindowsWebAppSlotSiteConfigArgs> SiteConfig { get; set; } = null!;

        [Input("storageAccounts")]
        private InputList<Inputs.WindowsWebAppSlotStorageAccountArgs>? _storageAccounts;

        /// <summary>
        /// One or more `storage_account` blocks as defined below.
        /// 
        /// &gt; **Note:** Using this value requires `WEBSITE_RUN_FROM_PACKAGE=1` to be set on the App in `app_settings`. Refer to the [Azure docs](https://docs.microsoft.com/en-us/azure/app-service/deploy-run-package) for further details.
        /// </summary>
        public InputList<Inputs.WindowsWebAppSlotStorageAccountArgs> StorageAccounts
        {
            get => _storageAccounts ?? (_storageAccounts = new InputList<Inputs.WindowsWebAppSlotStorageAccountArgs>());
            set => _storageAccounts = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Windows Web App Slot.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("virtualNetworkSubnetId")]
        public Input<string>? VirtualNetworkSubnetId { get; set; }

        /// <summary>
        /// Should the default WebDeploy Basic Authentication publishing credentials enabled. Defaults to `true`.
        /// 
        /// &gt; **NOTE:** Setting this value to true will disable the ability to use `zip_deploy_file` which currently relies on the default publishing profile.
        /// </summary>
        [Input("webdeployPublishBasicAuthenticationEnabled")]
        public Input<bool>? WebdeployPublishBasicAuthenticationEnabled { get; set; }

        /// <summary>
        /// The local path and filename of the Zip packaged application to deploy to this Windows Web App.
        /// </summary>
        [Input("zipDeployFile")]
        public Input<string>? ZipDeployFile { get; set; }

        public WindowsWebAppSlotArgs()
        {
        }
        public static new WindowsWebAppSlotArgs Empty => new WindowsWebAppSlotArgs();
    }

    public sealed class WindowsWebAppSlotState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Windows Web App this Deployment Slot will be part of. Changing this forces a new Windows Web App to be created.
        /// </summary>
        [Input("appServiceId")]
        public Input<string>? AppServiceId { get; set; }

        [Input("appSettings")]
        private InputMap<string>? _appSettings;

        /// <summary>
        /// A map of key-value pairs of App Settings.
        /// </summary>
        public InputMap<string> AppSettings
        {
            get => _appSettings ?? (_appSettings = new InputMap<string>());
            set => _appSettings = value;
        }

        /// <summary>
        /// An `auth_settings` block as defined below.
        /// </summary>
        [Input("authSettings")]
        public Input<Inputs.WindowsWebAppSlotAuthSettingsGetArgs>? AuthSettings { get; set; }

        /// <summary>
        /// An `auth_settings_v2` block as defined below.
        /// </summary>
        [Input("authSettingsV2")]
        public Input<Inputs.WindowsWebAppSlotAuthSettingsV2GetArgs>? AuthSettingsV2 { get; set; }

        /// <summary>
        /// A `backup` block as defined below.
        /// </summary>
        [Input("backup")]
        public Input<Inputs.WindowsWebAppSlotBackupGetArgs>? Backup { get; set; }

        /// <summary>
        /// Should Client Affinity be enabled?
        /// </summary>
        [Input("clientAffinityEnabled")]
        public Input<bool>? ClientAffinityEnabled { get; set; }

        /// <summary>
        /// Should Client Certificates be enabled?
        /// </summary>
        [Input("clientCertificateEnabled")]
        public Input<bool>? ClientCertificateEnabled { get; set; }

        /// <summary>
        /// Paths to exclude when using client certificates, separated by ;
        /// </summary>
        [Input("clientCertificateExclusionPaths")]
        public Input<string>? ClientCertificateExclusionPaths { get; set; }

        /// <summary>
        /// The Client Certificate mode. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser`. This property has no effect when `client_cert_enabled` is `false`. Defaults to `Required`.
        /// </summary>
        [Input("clientCertificateMode")]
        public Input<string>? ClientCertificateMode { get; set; }

        [Input("connectionStrings")]
        private InputList<Inputs.WindowsWebAppSlotConnectionStringGetArgs>? _connectionStrings;

        /// <summary>
        /// One or more `connection_string` blocks as defined below.
        /// </summary>
        public InputList<Inputs.WindowsWebAppSlotConnectionStringGetArgs> ConnectionStrings
        {
            get => _connectionStrings ?? (_connectionStrings = new InputList<Inputs.WindowsWebAppSlotConnectionStringGetArgs>());
            set => _connectionStrings = value;
        }

        [Input("customDomainVerificationId")]
        private Input<string>? _customDomainVerificationId;

        /// <summary>
        /// The identifier used by App Service to perform domain ownership verification via DNS TXT record.
        /// </summary>
        public Input<string>? CustomDomainVerificationId
        {
            get => _customDomainVerificationId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _customDomainVerificationId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The default hostname of the Windows Web App Slot.
        /// </summary>
        [Input("defaultHostname")]
        public Input<string>? DefaultHostname { get; set; }

        /// <summary>
        /// Should the Windows Web App Slot be enabled? Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Should the default FTP Basic Authentication publishing profile be enabled. Defaults to `true`.
        /// </summary>
        [Input("ftpPublishBasicAuthenticationEnabled")]
        public Input<bool>? FtpPublishBasicAuthenticationEnabled { get; set; }

        /// <summary>
        /// The ID of the App Service Environment used by App Service Slot.
        /// </summary>
        [Input("hostingEnvironmentId")]
        public Input<string>? HostingEnvironmentId { get; set; }

        /// <summary>
        /// Should the Windows Web App Slot require HTTPS connections. Defaults to `false`.
        /// </summary>
        [Input("httpsOnly")]
        public Input<bool>? HttpsOnly { get; set; }

        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.WindowsWebAppSlotIdentityGetArgs>? Identity { get; set; }

        /// <summary>
        /// The User Assigned Identity ID used for accessing KeyVault secrets. The identity must be assigned to the application in the `identity` block. [For more information see - Access vaults with a user-assigned identity](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references#access-vaults-with-a-user-assigned-identity)
        /// </summary>
        [Input("keyVaultReferenceIdentityId")]
        public Input<string>? KeyVaultReferenceIdentityId { get; set; }

        /// <summary>
        /// The Kind value for this Windows Web App Slot.
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        /// <summary>
        /// A `logs` block as defined below.
        /// </summary>
        [Input("logs")]
        public Input<Inputs.WindowsWebAppSlotLogsGetArgs>? Logs { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("outboundIpAddressLists")]
        private InputList<string>? _outboundIpAddressLists;

        /// <summary>
        /// A list of outbound IP addresses - such as `["52.23.25.3", "52.143.43.12"]`
        /// </summary>
        public InputList<string> OutboundIpAddressLists
        {
            get => _outboundIpAddressLists ?? (_outboundIpAddressLists = new InputList<string>());
            set => _outboundIpAddressLists = value;
        }

        /// <summary>
        /// A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12`.
        /// </summary>
        [Input("outboundIpAddresses")]
        public Input<string>? OutboundIpAddresses { get; set; }

        [Input("possibleOutboundIpAddressLists")]
        private InputList<string>? _possibleOutboundIpAddressLists;

        /// <summary>
        /// A list of possible outbound ip address.
        /// </summary>
        public InputList<string> PossibleOutboundIpAddressLists
        {
            get => _possibleOutboundIpAddressLists ?? (_possibleOutboundIpAddressLists = new InputList<string>());
            set => _possibleOutboundIpAddressLists = value;
        }

        /// <summary>
        /// A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12,52.143.43.17` - not all of which are necessarily in use. Superset of `outbound_ip_addresses`.
        /// </summary>
        [Input("possibleOutboundIpAddresses")]
        public Input<string>? PossibleOutboundIpAddresses { get; set; }

        /// <summary>
        /// Should public network access be enabled for the Web App. Defaults to `true`.
        /// </summary>
        [Input("publicNetworkAccessEnabled")]
        public Input<bool>? PublicNetworkAccessEnabled { get; set; }

        /// <summary>
        /// The ID of the Service Plan in which to run this slot. If not specified the same Service Plan as the Windows Web App will be used.
        /// 
        /// &gt; **Note:** `service_plan_id` should only be specified if it differs from the Service Plan of the associated Windows Web App.
        /// </summary>
        [Input("servicePlanId")]
        public Input<string>? ServicePlanId { get; set; }

        /// <summary>
        /// A `site_config` block as defined below.
        /// </summary>
        [Input("siteConfig")]
        public Input<Inputs.WindowsWebAppSlotSiteConfigGetArgs>? SiteConfig { get; set; }

        [Input("siteCredentials")]
        private InputList<Inputs.WindowsWebAppSlotSiteCredentialGetArgs>? _siteCredentials;

        /// <summary>
        /// A `site_credential` block as defined below.
        /// </summary>
        public InputList<Inputs.WindowsWebAppSlotSiteCredentialGetArgs> SiteCredentials
        {
            get => _siteCredentials ?? (_siteCredentials = new InputList<Inputs.WindowsWebAppSlotSiteCredentialGetArgs>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableArray.Create<Inputs.WindowsWebAppSlotSiteCredentialGetArgs>());
                _siteCredentials = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        [Input("storageAccounts")]
        private InputList<Inputs.WindowsWebAppSlotStorageAccountGetArgs>? _storageAccounts;

        /// <summary>
        /// One or more `storage_account` blocks as defined below.
        /// 
        /// &gt; **Note:** Using this value requires `WEBSITE_RUN_FROM_PACKAGE=1` to be set on the App in `app_settings`. Refer to the [Azure docs](https://docs.microsoft.com/en-us/azure/app-service/deploy-run-package) for further details.
        /// </summary>
        public InputList<Inputs.WindowsWebAppSlotStorageAccountGetArgs> StorageAccounts
        {
            get => _storageAccounts ?? (_storageAccounts = new InputList<Inputs.WindowsWebAppSlotStorageAccountGetArgs>());
            set => _storageAccounts = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Windows Web App Slot.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("virtualNetworkSubnetId")]
        public Input<string>? VirtualNetworkSubnetId { get; set; }

        /// <summary>
        /// Should the default WebDeploy Basic Authentication publishing credentials enabled. Defaults to `true`.
        /// 
        /// &gt; **NOTE:** Setting this value to true will disable the ability to use `zip_deploy_file` which currently relies on the default publishing profile.
        /// </summary>
        [Input("webdeployPublishBasicAuthenticationEnabled")]
        public Input<bool>? WebdeployPublishBasicAuthenticationEnabled { get; set; }

        /// <summary>
        /// The local path and filename of the Zip packaged application to deploy to this Windows Web App.
        /// </summary>
        [Input("zipDeployFile")]
        public Input<string>? ZipDeployFile { get; set; }

        public WindowsWebAppSlotState()
        {
        }
        public static new WindowsWebAppSlotState Empty => new WindowsWebAppSlotState();
    }
}
