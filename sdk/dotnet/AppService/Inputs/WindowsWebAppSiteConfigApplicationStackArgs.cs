// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.AppService.Inputs
{

    public sealed class WindowsWebAppSiteConfigApplicationStackArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Application Stack for the Windows Web App. Possible values include `Dotnet`, `Dotnetcore`, `Node`, `Python`, `Php`, and `Java`.
        /// 
        /// &gt; **Note:** Whilst this property is Optional omitting it can cause unexpected behaviour, in particular for display of settings in the Azure Portal.
        /// 
        /// &gt; **Note:** Windows Web apps can configure multiple `AppStack` properties, it is recommended to always configure this `Optional` value and set it to the primary application stack of your app to ensure correct operation of this resource and display the correct metadata in the Azure Portal.
        /// </summary>
        [Input("currentStack")]
        public Input<string>? CurrentStack { get; set; }

        /// <summary>
        /// The docker image, including tag, to be used. e.g. `azure-app-service/windows/parkingpage:latest`.
        /// </summary>
        [Input("dockerImageName")]
        public Input<string>? DockerImageName { get; set; }

        [Input("dockerRegistryPassword")]
        private Input<string>? _dockerRegistryPassword;

        /// <summary>
        /// The User Name to use for authentication against the registry to pull the image.
        /// 
        /// &gt; **Note:** `DockerRegistryUrl`, `DockerRegistryUsername`, and `DockerRegistryPassword` replace the use of the `AppSettings` values of `DOCKER_REGISTRY_SERVER_URL`, `DOCKER_REGISTRY_SERVER_USERNAME` and `DOCKER_REGISTRY_SERVER_PASSWORD` respectively, these values will be managed by the provider and should not be specified in the `AppSettings` map.
        /// </summary>
        public Input<string>? DockerRegistryPassword
        {
            get => _dockerRegistryPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _dockerRegistryPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The URL of the container registry where the `DockerImageName` is located. e.g. `https://index.docker.io` or `https://mcr.microsoft.com`. This value is required with `DockerImageName`.
        /// </summary>
        [Input("dockerRegistryUrl")]
        public Input<string>? DockerRegistryUrl { get; set; }

        /// <summary>
        /// The User Name to use for authentication against the registry to pull the image.
        /// </summary>
        [Input("dockerRegistryUsername")]
        public Input<string>? DockerRegistryUsername { get; set; }

        /// <summary>
        /// The version of .NET to use when `CurrentStack` is set to `Dotnetcore`. Possible values include `v4.0`.
        /// </summary>
        [Input("dotnetCoreVersion")]
        public Input<string>? DotnetCoreVersion { get; set; }

        /// <summary>
        /// The version of .NET to use when `CurrentStack` is set to `Dotnet`. Possible values include `v2.0`,`v3.0`, `v4.0`, `v5.0`, `v6.0`, `v7.0`, `v8.0` and `v9.0`.
        /// 
        /// &gt; **Note:** The Portal displayed values and the actual underlying API values differ for this setting, as follows:
        /// Portal Value | API value
        /// :--|--:
        /// ASP.NET V3.5 | v2.0
        /// ASP.NET V4.8 | v4.0
        /// .NET 6 (LTS) | v6.0
        /// .NET 7 (STS) | v7.0
        /// .NET 8 (LTS) | v8.0
        /// .NET 9 (STS) | v9.0
        /// </summary>
        [Input("dotnetVersion")]
        public Input<string>? DotnetVersion { get; set; }

        [Input("javaContainer")]
        public Input<string>? JavaContainer { get; set; }

        [Input("javaContainerVersion")]
        public Input<string>? JavaContainerVersion { get; set; }

        /// <summary>
        /// Should the Java Embedded Server (Java SE) be used to run the app.
        /// </summary>
        [Input("javaEmbeddedServerEnabled")]
        public Input<bool>? JavaEmbeddedServerEnabled { get; set; }

        /// <summary>
        /// The version of Java to use when `CurrentStack` is set to `Java`. 
        /// 
        /// &gt; **Note:** For currently supported versions, please see the official documentation. Some example values include: `1.8`, `1.8.0_322`,  `11`, `11.0.14`, `17` and `17.0.2`
        /// </summary>
        [Input("javaVersion")]
        public Input<string>? JavaVersion { get; set; }

        /// <summary>
        /// The version of node to use when `CurrentStack` is set to `Node`. Possible values are `~12`, `~14`, `~16`, `~18`, `~20` and `~22`.
        /// 
        /// &gt; **Note:** This property conflicts with `JavaVersion`.
        /// </summary>
        [Input("nodeVersion")]
        public Input<string>? NodeVersion { get; set; }

        /// <summary>
        /// The version of PHP to use when `CurrentStack` is set to `Php`. Possible values are `7.1`, `7.4` and `Off`.
        /// 
        /// &gt; **Note:** The value `Off` is used to signify latest supported by the service.
        /// </summary>
        [Input("phpVersion")]
        public Input<string>? PhpVersion { get; set; }

        /// <summary>
        /// Specifies whether this is a Python app. Defaults to `False`.
        /// </summary>
        [Input("python")]
        public Input<bool>? Python { get; set; }

        /// <summary>
        /// The version of Tomcat the Java App should use. Conflicts with `JavaEmbeddedServerEnabled`
        /// 
        /// &gt; **Note:** See the official documentation for current supported versions. Some example values include: `10.0`, `10.0.20`.
        /// </summary>
        [Input("tomcatVersion")]
        public Input<string>? TomcatVersion { get; set; }

        public WindowsWebAppSiteConfigApplicationStackArgs()
        {
        }
        public static new WindowsWebAppSiteConfigApplicationStackArgs Empty => new WindowsWebAppSiteConfigApplicationStackArgs();
    }
}
