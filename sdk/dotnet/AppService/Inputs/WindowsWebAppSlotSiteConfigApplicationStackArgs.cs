// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.AppService.Inputs
{

    public sealed class WindowsWebAppSlotSiteConfigApplicationStackArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Application Stack for the Windows Web App. Possible values include `dotnet`, `dotnetcore`, `node`, `python`, `php`, and `java`.
        /// 
        /// &gt; **NOTE:** Whilst this property is Optional omitting it can cause unexpected behaviour, in particular for display of settings in the Azure Portal.
        /// </summary>
        [Input("currentStack")]
        public Input<string>? CurrentStack { get; set; }

        /// <summary>
        /// The name of the container to be used. This value is required with `docker_container_tag`.
        /// </summary>
        [Input("dockerContainerName")]
        public Input<string>? DockerContainerName { get; set; }

        [Input("dockerContainerRegistry")]
        public Input<string>? DockerContainerRegistry { get; set; }

        /// <summary>
        /// The tag of the container to be used. This value is required with `docker_container_name`.
        /// </summary>
        [Input("dockerContainerTag")]
        public Input<string>? DockerContainerTag { get; set; }

        /// <summary>
        /// The docker image, including tag, to be used. e.g. `azure-app-service/windows/parkingpage:latest`.
        /// </summary>
        [Input("dockerImageName")]
        public Input<string>? DockerImageName { get; set; }

        [Input("dockerRegistryPassword")]
        private Input<string>? _dockerRegistryPassword;

        /// <summary>
        /// The User Name to use for authentication against the registry to pull the image.
        /// 
        /// &gt; **NOTE:** `docker_registry_url`, `docker_registry_username`, and `docker_registry_password` replace the use of the `app_settings` values of `DOCKER_REGISTRY_SERVER_URL`, `DOCKER_REGISTRY_SERVER_USERNAME` and `DOCKER_REGISTRY_SERVER_PASSWORD` respectively, these values will be managed by the provider and should not be specified in the `app_settings` map.
        /// </summary>
        public Input<string>? DockerRegistryPassword
        {
            get => _dockerRegistryPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _dockerRegistryPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The URL of the container registry where the `docker_image_name` is located. e.g. `https://index.docker.io` or `https://mcr.microsoft.com`. This value is required with `docker_image_name`.
        /// </summary>
        [Input("dockerRegistryUrl")]
        public Input<string>? DockerRegistryUrl { get; set; }

        /// <summary>
        /// The User Name to use for authentication against the registry to pull the image.
        /// </summary>
        [Input("dockerRegistryUsername")]
        public Input<string>? DockerRegistryUsername { get; set; }

        /// <summary>
        /// The version of .NET to use when `current_stack` is set to `dotnetcore`. Possible values include `v4.0`.
        /// </summary>
        [Input("dotnetCoreVersion")]
        public Input<string>? DotnetCoreVersion { get; set; }

        /// <summary>
        /// The version of .NET to use when `current_stack` is set to `dotnet`. Possible values include `v2.0`,`v3.0`, `v4.0`, `v5.0`, `v6.0`, `v7.0` and `v8.0`.
        /// </summary>
        [Input("dotnetVersion")]
        public Input<string>? DotnetVersion { get; set; }

        [Input("javaContainer")]
        public Input<string>? JavaContainer { get; set; }

        [Input("javaContainerVersion")]
        public Input<string>? JavaContainerVersion { get; set; }

        /// <summary>
        /// Should the Java Embedded Server (Java SE) be used to run the app.
        /// </summary>
        [Input("javaEmbeddedServerEnabled")]
        public Input<bool>? JavaEmbeddedServerEnabled { get; set; }

        /// <summary>
        /// The version of Java to use when `current_stack` is set to `java`. Possible values include `1.7`, `1.8`, `11` and `17`. Required with `java_container` and `java_container_version`.
        /// 
        /// &gt; **NOTE:** For compatible combinations of `java_version`, `java_container` and `java_container_version` users can use `az webapp list-runtimes` from command line.
        /// </summary>
        [Input("javaVersion")]
        public Input<string>? JavaVersion { get; set; }

        /// <summary>
        /// The version of node to use when `current_stack` is set to `node`. Possible values include `~12`, `~14`, `~16`, and `~18`.
        /// 
        /// &gt; **NOTE:** This property conflicts with `java_version`.
        /// </summary>
        [Input("nodeVersion")]
        public Input<string>? NodeVersion { get; set; }

        /// <summary>
        /// The version of PHP to use when `current_stack` is set to `php`. Possible values are `7.1`, `7.4` and `Off`.
        /// 
        /// &gt; **NOTE:** The value `Off` is used to signify latest supported by the service.
        /// </summary>
        [Input("phpVersion")]
        public Input<string>? PhpVersion { get; set; }

        /// <summary>
        /// The app is a Python app. Defaults to `false`.
        /// </summary>
        [Input("python")]
        public Input<bool>? Python { get; set; }

        [Input("pythonVersion")]
        public Input<string>? PythonVersion { get; set; }

        /// <summary>
        /// The version of Tomcat the Java App should use.
        /// 
        /// &gt; **NOTE:** See the official documentation for current supported versions.
        /// </summary>
        [Input("tomcatVersion")]
        public Input<string>? TomcatVersion { get; set; }

        public WindowsWebAppSlotSiteConfigApplicationStackArgs()
        {
        }
        public static new WindowsWebAppSlotSiteConfigApplicationStackArgs Empty => new WindowsWebAppSlotSiteConfigApplicationStackArgs();
    }
}
