// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.AppService.Inputs
{

    public sealed class LinuxFunctionAppSiteConfigApplicationStackDockerGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the Docker image to use.
        /// </summary>
        [Input("imageName", required: true)]
        public Input<string> ImageName { get; set; } = null!;

        /// <summary>
        /// The image tag of the image to use.
        /// </summary>
        [Input("imageTag", required: true)]
        public Input<string> ImageTag { get; set; } = null!;

        [Input("registryPassword")]
        private Input<string>? _registryPassword;

        /// <summary>
        /// The password for the account to use to connect to the registry.
        /// </summary>
        public Input<string>? RegistryPassword
        {
            get => _registryPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _registryPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The URL of the docker registry.
        /// </summary>
        [Input("registryUrl", required: true)]
        public Input<string> RegistryUrl { get; set; } = null!;

        [Input("registryUsername")]
        private Input<string>? _registryUsername;

        /// <summary>
        /// The username to use for connections to the registry.
        /// </summary>
        public Input<string>? RegistryUsername
        {
            get => _registryUsername;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _registryUsername = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public LinuxFunctionAppSiteConfigApplicationStackDockerGetArgs()
        {
        }
        public static new LinuxFunctionAppSiteConfigApplicationStackDockerGetArgs Empty => new LinuxFunctionAppSiteConfigApplicationStackDockerGetArgs();
    }
}
