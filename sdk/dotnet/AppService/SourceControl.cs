// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.AppService
{
    /// <summary>
    /// Manages an App Service Web App or Function App Source Control Configuration.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new Azure.Core.ResourceGroupArgs
    ///         {
    ///             Location = "West Europe",
    ///         });
    ///         var exampleServicePlan = new Azure.AppService.ServicePlan("exampleServicePlan", new Azure.AppService.ServicePlanArgs
    ///         {
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             Location = "West Europe",
    ///             OsType = "Linux",
    ///             SkuName = "P1V2",
    ///         });
    ///         var exampleLinuxWebApp = new Azure.AppService.LinuxWebApp("exampleLinuxWebApp", new Azure.AppService.LinuxWebAppArgs
    ///         {
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             Location = exampleServicePlan.Location,
    ///             ServicePlanId = exampleServicePlan.Id,
    ///             SiteConfig = ,
    ///         });
    ///         var exampleSourceControl = new Azure.AppService.SourceControl("exampleSourceControl", new Azure.AppService.SourceControlArgs
    ///         {
    ///             AppId = exampleLinuxWebApp.Id,
    ///             RepoUrl = "https://github.com/Azure-Samples/python-docs-hello-world",
    ///             Branch = "master",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// App Service Source Controls can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:appservice/sourceControl:SourceControl example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Web/sites/site1
    /// ```
    /// </summary>
    [AzureResourceType("azure:appservice/sourceControl:SourceControl")]
    public partial class SourceControl : Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the Windows or Linux Web App. Changing this forces a new resource to be created.
        /// </summary>
        [Output("appId")]
        public Output<string> AppId { get; private set; } = null!;

        /// <summary>
        /// The branch name to use for deployments. Changing this forces a new resource to be created.
        /// </summary>
        [Output("branch")]
        public Output<string> Branch { get; private set; } = null!;

        /// <summary>
        /// A `github_action_configuration` block as defined below.
        /// </summary>
        [Output("githubActionConfiguration")]
        public Output<Outputs.SourceControlGithubActionConfiguration?> GithubActionConfiguration { get; private set; } = null!;

        /// <summary>
        /// The URL for the repository. Changing this forces a new resource to be created.
        /// </summary>
        [Output("repoUrl")]
        public Output<string> RepoUrl { get; private set; } = null!;

        /// <summary>
        /// Should the Deployment Rollback be enabled? Defaults to `false`. Changing this forces a new resource to be created.
        /// </summary>
        [Output("rollbackEnabled")]
        public Output<bool?> RollbackEnabled { get; private set; } = null!;

        /// <summary>
        /// The SCM Type in use. This value is decoded by the service from the repository information supplied.
        /// </summary>
        [Output("scmType")]
        public Output<string> ScmType { get; private set; } = null!;

        /// <summary>
        /// Should the App use local Git configuration. Changing this forces a new resource to be created.
        /// </summary>
        [Output("useLocalGit")]
        public Output<bool?> UseLocalGit { get; private set; } = null!;

        /// <summary>
        /// Should code be deployed manually. Set to `false` to enable continuous integration, such as webhooks into online repos such as GitHub. Defaults to `false`. Changing this forces a new resource to be created.
        /// </summary>
        [Output("useManualIntegration")]
        public Output<bool?> UseManualIntegration { get; private set; } = null!;

        /// <summary>
        /// The repository specified is Mercurial. Defaults to `false`. Changing this forces a new resource to be created.
        /// </summary>
        [Output("useMercurial")]
        public Output<bool?> UseMercurial { get; private set; } = null!;

        /// <summary>
        /// Indicates if the Slot uses a GitHub action for deployment. This value is decoded by the service from the repository information supplied.
        /// </summary>
        [Output("usesGithubAction")]
        public Output<bool> UsesGithubAction { get; private set; } = null!;


        /// <summary>
        /// Create a SourceControl resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SourceControl(string name, SourceControlArgs args, CustomResourceOptions? options = null)
            : base("azure:appservice/sourceControl:SourceControl", name, args ?? new SourceControlArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SourceControl(string name, Input<string> id, SourceControlState? state = null, CustomResourceOptions? options = null)
            : base("azure:appservice/sourceControl:SourceControl", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SourceControl resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SourceControl Get(string name, Input<string> id, SourceControlState? state = null, CustomResourceOptions? options = null)
        {
            return new SourceControl(name, id, state, options);
        }
    }

    public sealed class SourceControlArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Windows or Linux Web App. Changing this forces a new resource to be created.
        /// </summary>
        [Input("appId", required: true)]
        public Input<string> AppId { get; set; } = null!;

        /// <summary>
        /// The branch name to use for deployments. Changing this forces a new resource to be created.
        /// </summary>
        [Input("branch")]
        public Input<string>? Branch { get; set; }

        /// <summary>
        /// A `github_action_configuration` block as defined below.
        /// </summary>
        [Input("githubActionConfiguration")]
        public Input<Inputs.SourceControlGithubActionConfigurationArgs>? GithubActionConfiguration { get; set; }

        /// <summary>
        /// The URL for the repository. Changing this forces a new resource to be created.
        /// </summary>
        [Input("repoUrl")]
        public Input<string>? RepoUrl { get; set; }

        /// <summary>
        /// Should the Deployment Rollback be enabled? Defaults to `false`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("rollbackEnabled")]
        public Input<bool>? RollbackEnabled { get; set; }

        /// <summary>
        /// Should the App use local Git configuration. Changing this forces a new resource to be created.
        /// </summary>
        [Input("useLocalGit")]
        public Input<bool>? UseLocalGit { get; set; }

        /// <summary>
        /// Should code be deployed manually. Set to `false` to enable continuous integration, such as webhooks into online repos such as GitHub. Defaults to `false`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("useManualIntegration")]
        public Input<bool>? UseManualIntegration { get; set; }

        /// <summary>
        /// The repository specified is Mercurial. Defaults to `false`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("useMercurial")]
        public Input<bool>? UseMercurial { get; set; }

        public SourceControlArgs()
        {
        }
    }

    public sealed class SourceControlState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Windows or Linux Web App. Changing this forces a new resource to be created.
        /// </summary>
        [Input("appId")]
        public Input<string>? AppId { get; set; }

        /// <summary>
        /// The branch name to use for deployments. Changing this forces a new resource to be created.
        /// </summary>
        [Input("branch")]
        public Input<string>? Branch { get; set; }

        /// <summary>
        /// A `github_action_configuration` block as defined below.
        /// </summary>
        [Input("githubActionConfiguration")]
        public Input<Inputs.SourceControlGithubActionConfigurationGetArgs>? GithubActionConfiguration { get; set; }

        /// <summary>
        /// The URL for the repository. Changing this forces a new resource to be created.
        /// </summary>
        [Input("repoUrl")]
        public Input<string>? RepoUrl { get; set; }

        /// <summary>
        /// Should the Deployment Rollback be enabled? Defaults to `false`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("rollbackEnabled")]
        public Input<bool>? RollbackEnabled { get; set; }

        /// <summary>
        /// The SCM Type in use. This value is decoded by the service from the repository information supplied.
        /// </summary>
        [Input("scmType")]
        public Input<string>? ScmType { get; set; }

        /// <summary>
        /// Should the App use local Git configuration. Changing this forces a new resource to be created.
        /// </summary>
        [Input("useLocalGit")]
        public Input<bool>? UseLocalGit { get; set; }

        /// <summary>
        /// Should code be deployed manually. Set to `false` to enable continuous integration, such as webhooks into online repos such as GitHub. Defaults to `false`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("useManualIntegration")]
        public Input<bool>? UseManualIntegration { get; set; }

        /// <summary>
        /// The repository specified is Mercurial. Defaults to `false`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("useMercurial")]
        public Input<bool>? UseMercurial { get; set; }

        /// <summary>
        /// Indicates if the Slot uses a GitHub action for deployment. This value is decoded by the service from the repository information supplied.
        /// </summary>
        [Input("usesGithubAction")]
        public Input<bool>? UsesGithubAction { get; set; }

        public SourceControlState()
        {
        }
    }
}
