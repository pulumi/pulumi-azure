// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.AppService
{
    /// <summary>
    /// Manages an App Service: Service Plan.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new Azure.Core.ResourceGroupArgs
    ///         {
    ///             Location = "West Europe",
    ///         });
    ///         var exampleServicePlan = new Azure.AppService.ServicePlan("exampleServicePlan", new Azure.AppService.ServicePlanArgs
    ///         {
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             Location = exampleResourceGroup.Location,
    ///             OsType = "Linux",
    ///             SkuName = "P1v2",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// AppServices can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:appservice/servicePlan:ServicePlan example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Web/serverfarms/farm1
    /// ```
    /// </summary>
    [AzureResourceType("azure:appservice/servicePlan:ServicePlan")]
    public partial class ServicePlan : Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the App Service Environment to create this Service Plan in.
        /// </summary>
        [Output("appServiceEnvironmentId")]
        public Output<string?> AppServiceEnvironmentId { get; private set; } = null!;

        /// <summary>
        /// A string representing the Kind of Service Plan.
        /// </summary>
        [Output("kind")]
        public Output<string> Kind { get; private set; } = null!;

        /// <summary>
        /// The Azure Region where the Service Plan should exist. Changing this forces a new AppService to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The maximum number of workers to use in an Elastic SKU Plan. Cannot be set unless using an Elastic SKU.
        /// </summary>
        [Output("maximumElasticWorkerCount")]
        public Output<int> MaximumElasticWorkerCount { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Service Plan. Changing this forces a new AppService to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The O/S type for the App Services to be hosted in this plan. Possible values include `Windows`, `Linux`, and `WindowsContainer`.
        /// </summary>
        [Output("osType")]
        public Output<string> OsType { get; private set; } = null!;

        /// <summary>
        /// Should Per Site Scaling be enabled. Defaults to `false`.
        /// </summary>
        [Output("perSiteScalingEnabled")]
        public Output<bool?> PerSiteScalingEnabled { get; private set; } = null!;

        /// <summary>
        /// Whether this is a reserved Service Plan Type. `true` if `os_type` is `Linux`, otherwise `false`.
        /// </summary>
        [Output("reserved")]
        public Output<bool> Reserved { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the AppService should exist. Changing this forces a new AppService to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// The SKU for the plan. Possible values include `B1`, `B2`, `B3`, `D1`, `F1`, `FREE`, `I1`, `I2`, `I3`, `I1v2`, `I2v2`, `I3v2`, `P1v2`, `P2v2`, `P3v2`, `P1v3`, `P2v3`, `P3v3`, `S1`, `S2`, `S3`, `SHARED`, `EP1`, `EP2`, `EP3`, `WS1`, `WS2`, and `WS3`.
        /// </summary>
        [Output("skuName")]
        public Output<string> SkuName { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags which should be assigned to the AppService.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The number of Workers (instances) to be allocated.
        /// </summary>
        [Output("workerCount")]
        public Output<int> WorkerCount { get; private set; } = null!;

        /// <summary>
        /// Should the Service Plan balance across Availability Zones in the region. Defaults to `false`.
        /// </summary>
        [Output("zoneBalancingEnabled")]
        public Output<bool?> ZoneBalancingEnabled { get; private set; } = null!;


        /// <summary>
        /// Create a ServicePlan resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServicePlan(string name, ServicePlanArgs args, CustomResourceOptions? options = null)
            : base("azure:appservice/servicePlan:ServicePlan", name, args ?? new ServicePlanArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServicePlan(string name, Input<string> id, ServicePlanState? state = null, CustomResourceOptions? options = null)
            : base("azure:appservice/servicePlan:ServicePlan", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServicePlan resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServicePlan Get(string name, Input<string> id, ServicePlanState? state = null, CustomResourceOptions? options = null)
        {
            return new ServicePlan(name, id, state, options);
        }
    }

    public sealed class ServicePlanArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the App Service Environment to create this Service Plan in.
        /// </summary>
        [Input("appServiceEnvironmentId")]
        public Input<string>? AppServiceEnvironmentId { get; set; }

        /// <summary>
        /// The Azure Region where the Service Plan should exist. Changing this forces a new AppService to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The maximum number of workers to use in an Elastic SKU Plan. Cannot be set unless using an Elastic SKU.
        /// </summary>
        [Input("maximumElasticWorkerCount")]
        public Input<int>? MaximumElasticWorkerCount { get; set; }

        /// <summary>
        /// The name which should be used for this Service Plan. Changing this forces a new AppService to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The O/S type for the App Services to be hosted in this plan. Possible values include `Windows`, `Linux`, and `WindowsContainer`.
        /// </summary>
        [Input("osType", required: true)]
        public Input<string> OsType { get; set; } = null!;

        /// <summary>
        /// Should Per Site Scaling be enabled. Defaults to `false`.
        /// </summary>
        [Input("perSiteScalingEnabled")]
        public Input<bool>? PerSiteScalingEnabled { get; set; }

        /// <summary>
        /// The name of the Resource Group where the AppService should exist. Changing this forces a new AppService to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The SKU for the plan. Possible values include `B1`, `B2`, `B3`, `D1`, `F1`, `FREE`, `I1`, `I2`, `I3`, `I1v2`, `I2v2`, `I3v2`, `P1v2`, `P2v2`, `P3v2`, `P1v3`, `P2v3`, `P3v3`, `S1`, `S2`, `S3`, `SHARED`, `EP1`, `EP2`, `EP3`, `WS1`, `WS2`, and `WS3`.
        /// </summary>
        [Input("skuName", required: true)]
        public Input<string> SkuName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the AppService.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The number of Workers (instances) to be allocated.
        /// </summary>
        [Input("workerCount")]
        public Input<int>? WorkerCount { get; set; }

        /// <summary>
        /// Should the Service Plan balance across Availability Zones in the region. Defaults to `false`.
        /// </summary>
        [Input("zoneBalancingEnabled")]
        public Input<bool>? ZoneBalancingEnabled { get; set; }

        public ServicePlanArgs()
        {
        }
    }

    public sealed class ServicePlanState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the App Service Environment to create this Service Plan in.
        /// </summary>
        [Input("appServiceEnvironmentId")]
        public Input<string>? AppServiceEnvironmentId { get; set; }

        /// <summary>
        /// A string representing the Kind of Service Plan.
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        /// <summary>
        /// The Azure Region where the Service Plan should exist. Changing this forces a new AppService to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The maximum number of workers to use in an Elastic SKU Plan. Cannot be set unless using an Elastic SKU.
        /// </summary>
        [Input("maximumElasticWorkerCount")]
        public Input<int>? MaximumElasticWorkerCount { get; set; }

        /// <summary>
        /// The name which should be used for this Service Plan. Changing this forces a new AppService to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The O/S type for the App Services to be hosted in this plan. Possible values include `Windows`, `Linux`, and `WindowsContainer`.
        /// </summary>
        [Input("osType")]
        public Input<string>? OsType { get; set; }

        /// <summary>
        /// Should Per Site Scaling be enabled. Defaults to `false`.
        /// </summary>
        [Input("perSiteScalingEnabled")]
        public Input<bool>? PerSiteScalingEnabled { get; set; }

        /// <summary>
        /// Whether this is a reserved Service Plan Type. `true` if `os_type` is `Linux`, otherwise `false`.
        /// </summary>
        [Input("reserved")]
        public Input<bool>? Reserved { get; set; }

        /// <summary>
        /// The name of the Resource Group where the AppService should exist. Changing this forces a new AppService to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// The SKU for the plan. Possible values include `B1`, `B2`, `B3`, `D1`, `F1`, `FREE`, `I1`, `I2`, `I3`, `I1v2`, `I2v2`, `I3v2`, `P1v2`, `P2v2`, `P3v2`, `P1v3`, `P2v3`, `P3v3`, `S1`, `S2`, `S3`, `SHARED`, `EP1`, `EP2`, `EP3`, `WS1`, `WS2`, and `WS3`.
        /// </summary>
        [Input("skuName")]
        public Input<string>? SkuName { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the AppService.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The number of Workers (instances) to be allocated.
        /// </summary>
        [Input("workerCount")]
        public Input<int>? WorkerCount { get; set; }

        /// <summary>
        /// Should the Service Plan balance across Availability Zones in the region. Defaults to `false`.
        /// </summary>
        [Input("zoneBalancingEnabled")]
        public Input<bool>? ZoneBalancingEnabled { get; set; }

        public ServicePlanState()
        {
        }
    }
}
