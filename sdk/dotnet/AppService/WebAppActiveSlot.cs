// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.AppService
{
    /// <summary>
    /// Manages a Web App Active Slot.
    /// 
    /// ## Example Usage
    /// ### Windows Web App
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new Azure.Core.ResourceGroupArgs
    ///         {
    ///             Location = "West Europe",
    ///         });
    ///         var exampleServicePlan = new Azure.AppService.ServicePlan("exampleServicePlan", new Azure.AppService.ServicePlanArgs
    ///         {
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             Location = "West Europe",
    ///             OsType = "Windows",
    ///             SkuName = "P1V2",
    ///         });
    ///         var exampleWindowsWebApp = new Azure.AppService.WindowsWebApp("exampleWindowsWebApp", new Azure.AppService.WindowsWebAppArgs
    ///         {
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             Location = exampleServicePlan.Location,
    ///             ServicePlanId = exampleServicePlan.Id,
    ///             SiteConfig = ,
    ///         });
    ///         var exampleWindowsWebAppSlot = new Azure.AppService.WindowsWebAppSlot("exampleWindowsWebAppSlot", new Azure.AppService.WindowsWebAppSlotArgs
    ///         {
    ///             AppServiceId = exampleWindowsWebApp.Name,
    ///             SiteConfig = ,
    ///         });
    ///         var exampleWebAppActiveSlot = new Azure.AppService.WebAppActiveSlot("exampleWebAppActiveSlot", new Azure.AppService.WebAppActiveSlotArgs
    ///         {
    ///             SlotId = exampleWindowsWebAppSlot.Id,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// a Web App Active Slot can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:appservice/webAppActiveSlot:WebAppActiveSlot example "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Web/sites/site1"
    /// ```
    /// </summary>
    [AzureResourceType("azure:appservice/webAppActiveSlot:WebAppActiveSlot")]
    public partial class WebAppActiveSlot : Pulumi.CustomResource
    {
        /// <summary>
        /// The timestamp of the last successful swap with `Production`.
        /// </summary>
        [Output("lastSuccessfulSwap")]
        public Output<string> LastSuccessfulSwap { get; private set; } = null!;

        /// <summary>
        /// The swap action should overwrite the Production slot's network configuration with the configuration from this slot. Defaults to `true`. Changing this forces a new resource to be created.
        /// </summary>
        [Output("overwriteNetworkConfig")]
        public Output<bool?> OverwriteNetworkConfig { get; private set; } = null!;

        /// <summary>
        /// The ID of the Slot to swap with `Production`.
        /// </summary>
        [Output("slotId")]
        public Output<string> SlotId { get; private set; } = null!;


        /// <summary>
        /// Create a WebAppActiveSlot resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WebAppActiveSlot(string name, WebAppActiveSlotArgs args, CustomResourceOptions? options = null)
            : base("azure:appservice/webAppActiveSlot:WebAppActiveSlot", name, args ?? new WebAppActiveSlotArgs(), MakeResourceOptions(options, ""))
        {
        }

        private WebAppActiveSlot(string name, Input<string> id, WebAppActiveSlotState? state = null, CustomResourceOptions? options = null)
            : base("azure:appservice/webAppActiveSlot:WebAppActiveSlot", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WebAppActiveSlot resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WebAppActiveSlot Get(string name, Input<string> id, WebAppActiveSlotState? state = null, CustomResourceOptions? options = null)
        {
            return new WebAppActiveSlot(name, id, state, options);
        }
    }

    public sealed class WebAppActiveSlotArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The swap action should overwrite the Production slot's network configuration with the configuration from this slot. Defaults to `true`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("overwriteNetworkConfig")]
        public Input<bool>? OverwriteNetworkConfig { get; set; }

        /// <summary>
        /// The ID of the Slot to swap with `Production`.
        /// </summary>
        [Input("slotId", required: true)]
        public Input<string> SlotId { get; set; } = null!;

        public WebAppActiveSlotArgs()
        {
        }
    }

    public sealed class WebAppActiveSlotState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The timestamp of the last successful swap with `Production`.
        /// </summary>
        [Input("lastSuccessfulSwap")]
        public Input<string>? LastSuccessfulSwap { get; set; }

        /// <summary>
        /// The swap action should overwrite the Production slot's network configuration with the configuration from this slot. Defaults to `true`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("overwriteNetworkConfig")]
        public Input<bool>? OverwriteNetworkConfig { get; set; }

        /// <summary>
        /// The ID of the Slot to swap with `Production`.
        /// </summary>
        [Input("slotId")]
        public Input<string>? SlotId { get; set; }

        public WebAppActiveSlotState()
        {
        }
    }
}
