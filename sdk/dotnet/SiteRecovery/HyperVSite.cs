// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.SiteRecovery
{
    /// <summary>
    /// Manages a HyperV Site in Recovery Service Vault.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "eastus",
    ///     });
    /// 
    ///     var exampleVault = new Azure.RecoveryServices.Vault("exampleVault", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Sku = "Standard",
    ///         SoftDeleteEnabled = false,
    ///     });
    /// 
    ///     var exampleHyperVSite = new Azure.SiteRecovery.HyperVSite("exampleHyperVSite", new()
    ///     {
    ///         RecoveryVaultId = exampleVault.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Recovery Services can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:siterecovery/hyperVSite:HyperVSite example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/fabric1
    /// ```
    /// </summary>
    [AzureResourceType("azure:siterecovery/hyperVSite:HyperVSite")]
    public partial class HyperVSite : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name which should be used for this Recovery Service. Changing this forces a new Site to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the Recovery Services Vault where the Site created. Changing this forces a new Site to be created.
        /// </summary>
        [Output("recoveryVaultId")]
        public Output<string> RecoveryVaultId { get; private set; } = null!;


        /// <summary>
        /// Create a HyperVSite resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public HyperVSite(string name, HyperVSiteArgs args, CustomResourceOptions? options = null)
            : base("azure:siterecovery/hyperVSite:HyperVSite", name, args ?? new HyperVSiteArgs(), MakeResourceOptions(options, ""))
        {
        }

        private HyperVSite(string name, Input<string> id, HyperVSiteState? state = null, CustomResourceOptions? options = null)
            : base("azure:siterecovery/hyperVSite:HyperVSite", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing HyperVSite resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static HyperVSite Get(string name, Input<string> id, HyperVSiteState? state = null, CustomResourceOptions? options = null)
        {
            return new HyperVSite(name, id, state, options);
        }
    }

    public sealed class HyperVSiteArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name which should be used for this Recovery Service. Changing this forces a new Site to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the Recovery Services Vault where the Site created. Changing this forces a new Site to be created.
        /// </summary>
        [Input("recoveryVaultId", required: true)]
        public Input<string> RecoveryVaultId { get; set; } = null!;

        public HyperVSiteArgs()
        {
        }
        public static new HyperVSiteArgs Empty => new HyperVSiteArgs();
    }

    public sealed class HyperVSiteState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name which should be used for this Recovery Service. Changing this forces a new Site to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the Recovery Services Vault where the Site created. Changing this forces a new Site to be created.
        /// </summary>
        [Input("recoveryVaultId")]
        public Input<string>? RecoveryVaultId { get; set; }

        public HyperVSiteState()
        {
        }
        public static new HyperVSiteState Empty => new HyperVSiteState();
    }
}
