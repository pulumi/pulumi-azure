// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.SiteRecovery
{
    /// <summary>
    /// Manages an Azure Site Recovery Plan within a Recovery Services vault. A recovery plan gathers machines into recovery groups for the purpose of failover.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var sourceResourceGroup = new Azure.Core.ResourceGroup("sourceResourceGroup", new()
    ///     {
    ///         Location = "west us",
    ///     });
    /// 
    ///     var targetResourceGroup = new Azure.Core.ResourceGroup("targetResourceGroup", new()
    ///     {
    ///         Location = "east us",
    ///     });
    /// 
    ///     var exampleVault = new Azure.RecoveryServices.Vault("exampleVault", new()
    ///     {
    ///         Location = targetResourceGroup.Location,
    ///         ResourceGroupName = targetResourceGroup.Name,
    ///         Sku = "Standard",
    ///     });
    /// 
    ///     var sourceFabric = new Azure.SiteRecovery.Fabric("sourceFabric", new()
    ///     {
    ///         ResourceGroupName = azurerm_resource_group.Example.Name,
    ///         RecoveryVaultName = exampleVault.Name,
    ///         Location = sourceResourceGroup.Location,
    ///     });
    /// 
    ///     var targetFabric = new Azure.SiteRecovery.Fabric("targetFabric", new()
    ///     {
    ///         ResourceGroupName = targetResourceGroup.Name,
    ///         RecoveryVaultName = exampleVault.Name,
    ///         Location = targetResourceGroup.Location,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             sourceFabric,
    ///         },
    ///     });
    /// 
    ///     var exampleReplicationRecoveryPlan = new Azure.SiteRecovery.ReplicationRecoveryPlan("exampleReplicationRecoveryPlan", new()
    ///     {
    ///         RecoveryVaultId = azurerm_recovery_services_vault.Target.Id,
    ///         SourceRecoveryFabricId = sourceFabric.Id,
    ///         TargetRecoveryFabricId = targetFabric.Id,
    ///         RecoveryGroups = new[]
    ///         {
    ///             new Azure.SiteRecovery.Inputs.ReplicationRecoveryPlanRecoveryGroupArgs
    ///             {
    ///                 Type = "Boot",
    ///                 ReplicatedProtectedItems = new[]
    ///                 {
    ///                     azurerm_site_recovery_replicated_vm.Test.Id,
    ///                 },
    ///             },
    ///             new Azure.SiteRecovery.Inputs.ReplicationRecoveryPlanRecoveryGroupArgs
    ///             {
    ///                 Type = "Failover",
    ///             },
    ///             new Azure.SiteRecovery.Inputs.ReplicationRecoveryPlanRecoveryGroupArgs
    ///             {
    ///                 Type = "Shutdown",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Site Recovery Fabric can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:siterecovery/replicationRecoveryPlan:ReplicationRecoveryPlan RecoveryServices/vaults/vaultName/replicationRecoveryPlans/planName
    /// ```
    /// </summary>
    [AzureResourceType("azure:siterecovery/replicationRecoveryPlan:ReplicationRecoveryPlan")]
    public partial class ReplicationRecoveryPlan : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the Replication Plan. The name can contain only letters, numbers, and hyphens. It should start with a letter and end with a letter or a number. Can be a maximum of 63 characters. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Three or more `recovery_group` block.
        /// </summary>
        [Output("recoveryGroups")]
        public Output<ImmutableArray<Outputs.ReplicationRecoveryPlanRecoveryGroup>> RecoveryGroups { get; private set; } = null!;

        /// <summary>
        /// The ID of the vault that should be updated. Changing this forces a new resource to be created.
        /// </summary>
        [Output("recoveryVaultId")]
        public Output<string> RecoveryVaultId { get; private set; } = null!;

        /// <summary>
        /// ID of source fabric to be recovered from. Changing this forces a new Replication Plan to be created.
        /// </summary>
        [Output("sourceRecoveryFabricId")]
        public Output<string> SourceRecoveryFabricId { get; private set; } = null!;

        /// <summary>
        /// ID of target fabric to recover. Changing this forces a new Replication Plan to be created.
        /// </summary>
        [Output("targetRecoveryFabricId")]
        public Output<string> TargetRecoveryFabricId { get; private set; } = null!;


        /// <summary>
        /// Create a ReplicationRecoveryPlan resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ReplicationRecoveryPlan(string name, ReplicationRecoveryPlanArgs args, CustomResourceOptions? options = null)
            : base("azure:siterecovery/replicationRecoveryPlan:ReplicationRecoveryPlan", name, args ?? new ReplicationRecoveryPlanArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ReplicationRecoveryPlan(string name, Input<string> id, ReplicationRecoveryPlanState? state = null, CustomResourceOptions? options = null)
            : base("azure:siterecovery/replicationRecoveryPlan:ReplicationRecoveryPlan", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ReplicationRecoveryPlan resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ReplicationRecoveryPlan Get(string name, Input<string> id, ReplicationRecoveryPlanState? state = null, CustomResourceOptions? options = null)
        {
            return new ReplicationRecoveryPlan(name, id, state, options);
        }
    }

    public sealed class ReplicationRecoveryPlanArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the Replication Plan. The name can contain only letters, numbers, and hyphens. It should start with a letter and end with a letter or a number. Can be a maximum of 63 characters. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("recoveryGroups")]
        private InputList<Inputs.ReplicationRecoveryPlanRecoveryGroupArgs>? _recoveryGroups;

        /// <summary>
        /// Three or more `recovery_group` block.
        /// </summary>
        public InputList<Inputs.ReplicationRecoveryPlanRecoveryGroupArgs> RecoveryGroups
        {
            get => _recoveryGroups ?? (_recoveryGroups = new InputList<Inputs.ReplicationRecoveryPlanRecoveryGroupArgs>());
            set => _recoveryGroups = value;
        }

        /// <summary>
        /// The ID of the vault that should be updated. Changing this forces a new resource to be created.
        /// </summary>
        [Input("recoveryVaultId", required: true)]
        public Input<string> RecoveryVaultId { get; set; } = null!;

        /// <summary>
        /// ID of source fabric to be recovered from. Changing this forces a new Replication Plan to be created.
        /// </summary>
        [Input("sourceRecoveryFabricId", required: true)]
        public Input<string> SourceRecoveryFabricId { get; set; } = null!;

        /// <summary>
        /// ID of target fabric to recover. Changing this forces a new Replication Plan to be created.
        /// </summary>
        [Input("targetRecoveryFabricId", required: true)]
        public Input<string> TargetRecoveryFabricId { get; set; } = null!;

        public ReplicationRecoveryPlanArgs()
        {
        }
        public static new ReplicationRecoveryPlanArgs Empty => new ReplicationRecoveryPlanArgs();
    }

    public sealed class ReplicationRecoveryPlanState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the Replication Plan. The name can contain only letters, numbers, and hyphens. It should start with a letter and end with a letter or a number. Can be a maximum of 63 characters. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("recoveryGroups")]
        private InputList<Inputs.ReplicationRecoveryPlanRecoveryGroupGetArgs>? _recoveryGroups;

        /// <summary>
        /// Three or more `recovery_group` block.
        /// </summary>
        public InputList<Inputs.ReplicationRecoveryPlanRecoveryGroupGetArgs> RecoveryGroups
        {
            get => _recoveryGroups ?? (_recoveryGroups = new InputList<Inputs.ReplicationRecoveryPlanRecoveryGroupGetArgs>());
            set => _recoveryGroups = value;
        }

        /// <summary>
        /// The ID of the vault that should be updated. Changing this forces a new resource to be created.
        /// </summary>
        [Input("recoveryVaultId")]
        public Input<string>? RecoveryVaultId { get; set; }

        /// <summary>
        /// ID of source fabric to be recovered from. Changing this forces a new Replication Plan to be created.
        /// </summary>
        [Input("sourceRecoveryFabricId")]
        public Input<string>? SourceRecoveryFabricId { get; set; }

        /// <summary>
        /// ID of target fabric to recover. Changing this forces a new Replication Plan to be created.
        /// </summary>
        [Input("targetRecoveryFabricId")]
        public Input<string>? TargetRecoveryFabricId { get; set; }

        public ReplicationRecoveryPlanState()
        {
        }
        public static new ReplicationRecoveryPlanState Empty => new ReplicationRecoveryPlanState();
    }
}
