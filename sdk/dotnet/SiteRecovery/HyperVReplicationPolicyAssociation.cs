// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.SiteRecovery
{
    /// <summary>
    /// Manages an Azure Site Recovery replication policy for HyperV within a Recovery Vault.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "East US",
    ///     });
    /// 
    ///     var exampleVault = new Azure.RecoveryServices.Vault("exampleVault", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Sku = "Standard",
    ///     });
    /// 
    ///     var exampleHyperVSite = new Azure.SiteRecovery.HyperVSite("exampleHyperVSite", new()
    ///     {
    ///         RecoveryVaultId = exampleVault.Id,
    ///     });
    /// 
    ///     var exampleHyperVReplicationPolicy = new Azure.SiteRecovery.HyperVReplicationPolicy("exampleHyperVReplicationPolicy", new()
    ///     {
    ///         RecoveryVaultId = exampleVault.Id,
    ///         RecoveryPointRetentionInHours = 2,
    ///         ApplicationConsistentSnapshotFrequencyInHours = 1,
    ///         ReplicationIntervalInSeconds = 300,
    ///     });
    /// 
    ///     var exampleHyperVReplicationPolicyAssociation = new Azure.SiteRecovery.HyperVReplicationPolicyAssociation("exampleHyperVReplicationPolicyAssociation", new()
    ///     {
    ///         HypervSiteId = exampleHyperVSite.Id,
    ///         PolicyId = exampleHyperVReplicationPolicy.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Site Recovery Replication Policies can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:siterecovery/hyperVReplicationPolicyAssociation:HyperVReplicationPolicyAssociation azurerm_site_recovery_hyperv_replication_policy_association.mypolicy /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resource-group-name/providers/Microsoft.RecoveryServices/vaults/recovery-vault-name/replicationFabrics/site-name/replicationProtectionContainers/container-name/replicationProtectionContainerMappings/mapping-name
    /// ```
    /// </summary>
    [AzureResourceType("azure:siterecovery/hyperVReplicationPolicyAssociation:HyperVReplicationPolicyAssociation")]
    public partial class HyperVReplicationPolicyAssociation : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the HyperV site to which the policy should be associated. Changing this forces a new association to be created.
        /// </summary>
        [Output("hypervSiteId")]
        public Output<string> HypervSiteId { get; private set; } = null!;

        /// <summary>
        /// The name of the replication policy association. Changing this forces a new association to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the HyperV replication policy which to be associated. Changing this forces a new association to be created.
        /// </summary>
        [Output("policyId")]
        public Output<string> PolicyId { get; private set; } = null!;


        /// <summary>
        /// Create a HyperVReplicationPolicyAssociation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public HyperVReplicationPolicyAssociation(string name, HyperVReplicationPolicyAssociationArgs args, CustomResourceOptions? options = null)
            : base("azure:siterecovery/hyperVReplicationPolicyAssociation:HyperVReplicationPolicyAssociation", name, args ?? new HyperVReplicationPolicyAssociationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private HyperVReplicationPolicyAssociation(string name, Input<string> id, HyperVReplicationPolicyAssociationState? state = null, CustomResourceOptions? options = null)
            : base("azure:siterecovery/hyperVReplicationPolicyAssociation:HyperVReplicationPolicyAssociation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing HyperVReplicationPolicyAssociation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static HyperVReplicationPolicyAssociation Get(string name, Input<string> id, HyperVReplicationPolicyAssociationState? state = null, CustomResourceOptions? options = null)
        {
            return new HyperVReplicationPolicyAssociation(name, id, state, options);
        }
    }

    public sealed class HyperVReplicationPolicyAssociationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the HyperV site to which the policy should be associated. Changing this forces a new association to be created.
        /// </summary>
        [Input("hypervSiteId", required: true)]
        public Input<string> HypervSiteId { get; set; } = null!;

        /// <summary>
        /// The name of the replication policy association. Changing this forces a new association to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the HyperV replication policy which to be associated. Changing this forces a new association to be created.
        /// </summary>
        [Input("policyId", required: true)]
        public Input<string> PolicyId { get; set; } = null!;

        public HyperVReplicationPolicyAssociationArgs()
        {
        }
        public static new HyperVReplicationPolicyAssociationArgs Empty => new HyperVReplicationPolicyAssociationArgs();
    }

    public sealed class HyperVReplicationPolicyAssociationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the HyperV site to which the policy should be associated. Changing this forces a new association to be created.
        /// </summary>
        [Input("hypervSiteId")]
        public Input<string>? HypervSiteId { get; set; }

        /// <summary>
        /// The name of the replication policy association. Changing this forces a new association to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the HyperV replication policy which to be associated. Changing this forces a new association to be created.
        /// </summary>
        [Input("policyId")]
        public Input<string>? PolicyId { get; set; }

        public HyperVReplicationPolicyAssociationState()
        {
        }
        public static new HyperVReplicationPolicyAssociationState Empty => new HyperVReplicationPolicyAssociationState();
    }
}
