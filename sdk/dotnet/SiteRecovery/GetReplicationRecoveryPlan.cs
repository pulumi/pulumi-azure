// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.SiteRecovery
{
    public static class GetReplicationRecoveryPlan
    {
        /// <summary>
        /// Get information about an Azure Site Recovery Plan within a Recovery Services vault. A recovery plan gathers machines into recovery groups for the purpose of failover.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var vault = Azure.RecoveryServices.GetVault.Invoke(new()
        ///     {
        ///         Name = "tfex-recovery_vault",
        ///         ResourceGroupName = "tfex-resource_group",
        ///     });
        /// 
        ///     var example = Azure.SiteRecovery.GetReplicationRecoveryPlan.Invoke(new()
        ///     {
        ///         Name = "example-recovery-plan",
        ///         RecoveryVaultId = vault.Apply(getVaultResult =&gt; getVaultResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetReplicationRecoveryPlanResult> InvokeAsync(GetReplicationRecoveryPlanArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetReplicationRecoveryPlanResult>("azure:siterecovery/getReplicationRecoveryPlan:getReplicationRecoveryPlan", args ?? new GetReplicationRecoveryPlanArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about an Azure Site Recovery Plan within a Recovery Services vault. A recovery plan gathers machines into recovery groups for the purpose of failover.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var vault = Azure.RecoveryServices.GetVault.Invoke(new()
        ///     {
        ///         Name = "tfex-recovery_vault",
        ///         ResourceGroupName = "tfex-resource_group",
        ///     });
        /// 
        ///     var example = Azure.SiteRecovery.GetReplicationRecoveryPlan.Invoke(new()
        ///     {
        ///         Name = "example-recovery-plan",
        ///         RecoveryVaultId = vault.Apply(getVaultResult =&gt; getVaultResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetReplicationRecoveryPlanResult> Invoke(GetReplicationRecoveryPlanInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetReplicationRecoveryPlanResult>("azure:siterecovery/getReplicationRecoveryPlan:getReplicationRecoveryPlan", args ?? new GetReplicationRecoveryPlanInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetReplicationRecoveryPlanArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Replication Plan.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The ID of the vault that should be updated.
        /// </summary>
        [Input("recoveryVaultId", required: true)]
        public string RecoveryVaultId { get; set; } = null!;

        public GetReplicationRecoveryPlanArgs()
        {
        }
        public static new GetReplicationRecoveryPlanArgs Empty => new GetReplicationRecoveryPlanArgs();
    }

    public sealed class GetReplicationRecoveryPlanInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Replication Plan.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The ID of the vault that should be updated.
        /// </summary>
        [Input("recoveryVaultId", required: true)]
        public Input<string> RecoveryVaultId { get; set; } = null!;

        public GetReplicationRecoveryPlanInvokeArgs()
        {
        }
        public static new GetReplicationRecoveryPlanInvokeArgs Empty => new GetReplicationRecoveryPlanInvokeArgs();
    }


    [OutputType]
    public sealed class GetReplicationRecoveryPlanResult
    {
        public readonly string FailoverDeploymentModel;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Name of the Action.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// `recovery_group` block defined as below.
        /// ---
        /// </summary>
        public readonly ImmutableArray<Outputs.GetReplicationRecoveryPlanRecoveryGroupResult> RecoveryGroups;
        public readonly string RecoveryVaultId;
        /// <summary>
        /// The ID of source fabric to be recovered from.
        /// </summary>
        public readonly string SourceRecoveryFabricId;
        /// <summary>
        /// The ID of target fabric to recover.
        /// </summary>
        public readonly string TargetRecoveryFabricId;

        [OutputConstructor]
        private GetReplicationRecoveryPlanResult(
            string failoverDeploymentModel,

            string id,

            string name,

            ImmutableArray<Outputs.GetReplicationRecoveryPlanRecoveryGroupResult> recoveryGroups,

            string recoveryVaultId,

            string sourceRecoveryFabricId,

            string targetRecoveryFabricId)
        {
            FailoverDeploymentModel = failoverDeploymentModel;
            Id = id;
            Name = name;
            RecoveryGroups = recoveryGroups;
            RecoveryVaultId = recoveryVaultId;
            SourceRecoveryFabricId = sourceRecoveryFabricId;
            TargetRecoveryFabricId = targetRecoveryFabricId;
        }
    }
}
