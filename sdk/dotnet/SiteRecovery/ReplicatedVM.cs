// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.SiteRecovery
{
    /// <summary>
    /// Manages a VM replicated using Azure Site Recovery (Azure to Azure only). A replicated VM keeps a copiously updated image of the VM in another region in order to be able to start the VM in that region in case of a disaster.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var primaryResourceGroup = new Azure.Core.ResourceGroup("primaryResourceGroup", new Azure.Core.ResourceGroupArgs
    ///         {
    ///             Location = "West US",
    ///         });
    ///         var secondaryResourceGroup = new Azure.Core.ResourceGroup("secondaryResourceGroup", new Azure.Core.ResourceGroupArgs
    ///         {
    ///             Location = "East US",
    ///         });
    ///         var primaryVirtualNetwork = new Azure.Network.VirtualNetwork("primaryVirtualNetwork", new Azure.Network.VirtualNetworkArgs
    ///         {
    ///             ResourceGroupName = primaryResourceGroup.Name,
    ///             AddressSpaces = 
    ///             {
    ///                 "192.168.1.0/24",
    ///             },
    ///             Location = primaryResourceGroup.Location,
    ///         });
    ///         var primarySubnet = new Azure.Network.Subnet("primarySubnet", new Azure.Network.SubnetArgs
    ///         {
    ///             ResourceGroupName = primaryResourceGroup.Name,
    ///             VirtualNetworkName = primaryVirtualNetwork.Name,
    ///             AddressPrefixes = 
    ///             {
    ///                 "192.168.1.0/24",
    ///             },
    ///         });
    ///         var primaryPublicIp = new Azure.Network.PublicIp("primaryPublicIp", new Azure.Network.PublicIpArgs
    ///         {
    ///             AllocationMethod = "Static",
    ///             Location = primaryResourceGroup.Location,
    ///             ResourceGroupName = primaryResourceGroup.Name,
    ///             Sku = "Basic",
    ///         });
    ///         var vmNetworkInterface = new Azure.Network.NetworkInterface("vmNetworkInterface", new Azure.Network.NetworkInterfaceArgs
    ///         {
    ///             Location = primaryResourceGroup.Location,
    ///             ResourceGroupName = primaryResourceGroup.Name,
    ///             IpConfigurations = 
    ///             {
    ///                 new Azure.Network.Inputs.NetworkInterfaceIpConfigurationArgs
    ///                 {
    ///                     Name = "vm",
    ///                     SubnetId = primarySubnet.Id,
    ///                     PrivateIpAddressAllocation = "Dynamic",
    ///                     PublicIpAddressId = primaryPublicIp.Id,
    ///                 },
    ///             },
    ///         });
    ///         var vmVirtualMachine = new Azure.Compute.VirtualMachine("vmVirtualMachine", new Azure.Compute.VirtualMachineArgs
    ///         {
    ///             Location = primaryResourceGroup.Location,
    ///             ResourceGroupName = primaryResourceGroup.Name,
    ///             VmSize = "Standard_B1s",
    ///             NetworkInterfaceIds = 
    ///             {
    ///                 vmNetworkInterface.Id,
    ///             },
    ///             StorageImageReference = new Azure.Compute.Inputs.VirtualMachineStorageImageReferenceArgs
    ///             {
    ///                 Publisher = "OpenLogic",
    ///                 Offer = "CentOS",
    ///                 Sku = "7.5",
    ///                 Version = "latest",
    ///             },
    ///             StorageOsDisk = new Azure.Compute.Inputs.VirtualMachineStorageOsDiskArgs
    ///             {
    ///                 Name = "vm-os-disk",
    ///                 OsType = "Linux",
    ///                 Caching = "ReadWrite",
    ///                 CreateOption = "FromImage",
    ///                 ManagedDiskType = "Premium_LRS",
    ///             },
    ///             OsProfile = new Azure.Compute.Inputs.VirtualMachineOsProfileArgs
    ///             {
    ///                 AdminUsername = "test-admin-123",
    ///                 AdminPassword = "test-pwd-123",
    ///                 ComputerName = "vm",
    ///             },
    ///             OsProfileLinuxConfig = new Azure.Compute.Inputs.VirtualMachineOsProfileLinuxConfigArgs
    ///             {
    ///                 DisablePasswordAuthentication = false,
    ///             },
    ///         });
    ///         var vault = new Azure.RecoveryServices.Vault("vault", new Azure.RecoveryServices.VaultArgs
    ///         {
    ///             Location = secondaryResourceGroup.Location,
    ///             ResourceGroupName = secondaryResourceGroup.Name,
    ///             Sku = "Standard",
    ///         });
    ///         var primaryFabric = new Azure.SiteRecovery.Fabric("primaryFabric", new Azure.SiteRecovery.FabricArgs
    ///         {
    ///             ResourceGroupName = secondaryResourceGroup.Name,
    ///             RecoveryVaultName = vault.Name,
    ///             Location = primaryResourceGroup.Location,
    ///         });
    ///         var secondaryFabric = new Azure.SiteRecovery.Fabric("secondaryFabric", new Azure.SiteRecovery.FabricArgs
    ///         {
    ///             ResourceGroupName = secondaryResourceGroup.Name,
    ///             RecoveryVaultName = vault.Name,
    ///             Location = secondaryResourceGroup.Location,
    ///         });
    ///         var primaryProtectionContainer = new Azure.SiteRecovery.ProtectionContainer("primaryProtectionContainer", new Azure.SiteRecovery.ProtectionContainerArgs
    ///         {
    ///             ResourceGroupName = secondaryResourceGroup.Name,
    ///             RecoveryVaultName = vault.Name,
    ///             RecoveryFabricName = primaryFabric.Name,
    ///         });
    ///         var secondaryProtectionContainer = new Azure.SiteRecovery.ProtectionContainer("secondaryProtectionContainer", new Azure.SiteRecovery.ProtectionContainerArgs
    ///         {
    ///             ResourceGroupName = secondaryResourceGroup.Name,
    ///             RecoveryVaultName = vault.Name,
    ///             RecoveryFabricName = secondaryFabric.Name,
    ///         });
    ///         var policy = new Azure.SiteRecovery.ReplicationPolicy("policy", new Azure.SiteRecovery.ReplicationPolicyArgs
    ///         {
    ///             ResourceGroupName = secondaryResourceGroup.Name,
    ///             RecoveryVaultName = vault.Name,
    ///             RecoveryPointRetentionInMinutes = 24 * 60,
    ///             ApplicationConsistentSnapshotFrequencyInMinutes = 4 * 60,
    ///         });
    ///         var container_mapping = new Azure.SiteRecovery.ProtectionContainerMapping("container-mapping", new Azure.SiteRecovery.ProtectionContainerMappingArgs
    ///         {
    ///             ResourceGroupName = secondaryResourceGroup.Name,
    ///             RecoveryVaultName = vault.Name,
    ///             RecoveryFabricName = primaryFabric.Name,
    ///             RecoverySourceProtectionContainerName = primaryProtectionContainer.Name,
    ///             RecoveryTargetProtectionContainerId = secondaryProtectionContainer.Id,
    ///             RecoveryReplicationPolicyId = policy.Id,
    ///         });
    ///         var primaryAccount = new Azure.Storage.Account("primaryAccount", new Azure.Storage.AccountArgs
    ///         {
    ///             Location = primaryResourceGroup.Location,
    ///             ResourceGroupName = primaryResourceGroup.Name,
    ///             AccountTier = "Standard",
    ///             AccountReplicationType = "LRS",
    ///         });
    ///         var secondaryVirtualNetwork = new Azure.Network.VirtualNetwork("secondaryVirtualNetwork", new Azure.Network.VirtualNetworkArgs
    ///         {
    ///             ResourceGroupName = secondaryResourceGroup.Name,
    ///             AddressSpaces = 
    ///             {
    ///                 "192.168.2.0/24",
    ///             },
    ///             Location = secondaryResourceGroup.Location,
    ///         });
    ///         var secondarySubnet = new Azure.Network.Subnet("secondarySubnet", new Azure.Network.SubnetArgs
    ///         {
    ///             ResourceGroupName = secondaryResourceGroup.Name,
    ///             VirtualNetworkName = secondaryVirtualNetwork.Name,
    ///             AddressPrefixes = 
    ///             {
    ///                 "192.168.2.0/24",
    ///             },
    ///         });
    ///         var secondaryPublicIp = new Azure.Network.PublicIp("secondaryPublicIp", new Azure.Network.PublicIpArgs
    ///         {
    ///             AllocationMethod = "Static",
    ///             Location = secondaryResourceGroup.Location,
    ///             ResourceGroupName = secondaryResourceGroup.Name,
    ///             Sku = "Basic",
    ///         });
    ///         var vm_replication = new Azure.SiteRecovery.ReplicatedVM("vm-replication", new Azure.SiteRecovery.ReplicatedVMArgs
    ///         {
    ///             ResourceGroupName = secondaryResourceGroup.Name,
    ///             RecoveryVaultName = vault.Name,
    ///             SourceRecoveryFabricName = primaryFabric.Name,
    ///             SourceVmId = vmVirtualMachine.Id,
    ///             RecoveryReplicationPolicyId = policy.Id,
    ///             SourceRecoveryProtectionContainerName = primaryProtectionContainer.Name,
    ///             TargetResourceGroupId = secondaryResourceGroup.Id,
    ///             TargetRecoveryFabricId = secondaryFabric.Id,
    ///             TargetRecoveryProtectionContainerId = secondaryProtectionContainer.Id,
    ///             ManagedDisks = 
    ///             {
    ///                 new Azure.SiteRecovery.Inputs.ReplicatedVMManagedDiskArgs
    ///                 {
    ///                     DiskId = vmVirtualMachine.StorageOsDisk.Apply(storageOsDisk =&gt; storageOsDisk.ManagedDiskId),
    ///                     StagingStorageAccountId = primaryAccount.Id,
    ///                     TargetResourceGroupId = secondaryResourceGroup.Id,
    ///                     TargetDiskType = "Premium_LRS",
    ///                     TargetReplicaDiskType = "Premium_LRS",
    ///                 },
    ///             },
    ///             NetworkInterfaces = 
    ///             {
    ///                 new Azure.SiteRecovery.Inputs.ReplicatedVMNetworkInterfaceArgs
    ///                 {
    ///                     SourceNetworkInterfaceId = vmNetworkInterface.Id,
    ///                     TargetSubnetName = "network2-subnet",
    ///                     RecoveryPublicIpAddressId = secondaryPublicIp.Id,
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Site Recovery Replicated VM's can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:siterecovery/replicatedVM:ReplicatedVM vmreplication /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resource-group-name/providers/Microsoft.RecoveryServices/vaults/recovery-vault-name/replicationFabrics/fabric-name/replicationProtectionContainers/protection-container-name/replicationProtectedItems/vm-replication-name
    /// ```
    /// </summary>
    [AzureResourceType("azure:siterecovery/replicatedVM:ReplicatedVM")]
    public partial class ReplicatedVM : Pulumi.CustomResource
    {
        /// <summary>
        /// One or more `managed_disk` block.
        /// </summary>
        [Output("managedDisks")]
        public Output<ImmutableArray<Outputs.ReplicatedVMManagedDisk>> ManagedDisks { get; private set; } = null!;

        /// <summary>
        /// The name of the network mapping.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// One or more `network_interface` block.
        /// </summary>
        [Output("networkInterfaces")]
        public Output<ImmutableArray<Outputs.ReplicatedVMNetworkInterface>> NetworkInterfaces { get; private set; } = null!;

        [Output("recoveryReplicationPolicyId")]
        public Output<string> RecoveryReplicationPolicyId { get; private set; } = null!;

        /// <summary>
        /// The name of the vault that should be updated.
        /// </summary>
        [Output("recoveryVaultName")]
        public Output<string> RecoveryVaultName { get; private set; } = null!;

        /// <summary>
        /// Name of the resource group where the vault that should be updated is located.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// Name of fabric that should contains this replication.
        /// </summary>
        [Output("sourceRecoveryFabricName")]
        public Output<string> SourceRecoveryFabricName { get; private set; } = null!;

        /// <summary>
        /// Name of the protection container to use.
        /// </summary>
        [Output("sourceRecoveryProtectionContainerName")]
        public Output<string> SourceRecoveryProtectionContainerName { get; private set; } = null!;

        /// <summary>
        /// Id of the VM to replicate
        /// </summary>
        [Output("sourceVmId")]
        public Output<string> SourceVmId { get; private set; } = null!;

        /// <summary>
        /// Id of availability set that the new VM should belong to when a failover is done.
        /// </summary>
        [Output("targetAvailabilitySetId")]
        public Output<string?> TargetAvailabilitySetId { get; private set; } = null!;

        /// <summary>
        /// Network to use when a failover is done (recommended to set if any network_interface is configured for failover).
        /// </summary>
        [Output("targetNetworkId")]
        public Output<string> TargetNetworkId { get; private set; } = null!;

        /// <summary>
        /// Id of fabric where the VM replication should be handled when a failover is done.
        /// </summary>
        [Output("targetRecoveryFabricId")]
        public Output<string> TargetRecoveryFabricId { get; private set; } = null!;

        /// <summary>
        /// Id of protection container where the VM replication should be created when a failover is done.
        /// </summary>
        [Output("targetRecoveryProtectionContainerId")]
        public Output<string> TargetRecoveryProtectionContainerId { get; private set; } = null!;

        /// <summary>
        /// Id of resource group where the VM should be created when a failover is done.
        /// </summary>
        [Output("targetResourceGroupId")]
        public Output<string> TargetResourceGroupId { get; private set; } = null!;


        /// <summary>
        /// Create a ReplicatedVM resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ReplicatedVM(string name, ReplicatedVMArgs args, CustomResourceOptions? options = null)
            : base("azure:siterecovery/replicatedVM:ReplicatedVM", name, args ?? new ReplicatedVMArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ReplicatedVM(string name, Input<string> id, ReplicatedVMState? state = null, CustomResourceOptions? options = null)
            : base("azure:siterecovery/replicatedVM:ReplicatedVM", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ReplicatedVM resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ReplicatedVM Get(string name, Input<string> id, ReplicatedVMState? state = null, CustomResourceOptions? options = null)
        {
            return new ReplicatedVM(name, id, state, options);
        }
    }

    public sealed class ReplicatedVMArgs : Pulumi.ResourceArgs
    {
        [Input("managedDisks")]
        private InputList<Inputs.ReplicatedVMManagedDiskArgs>? _managedDisks;

        /// <summary>
        /// One or more `managed_disk` block.
        /// </summary>
        public InputList<Inputs.ReplicatedVMManagedDiskArgs> ManagedDisks
        {
            get => _managedDisks ?? (_managedDisks = new InputList<Inputs.ReplicatedVMManagedDiskArgs>());
            set => _managedDisks = value;
        }

        /// <summary>
        /// The name of the network mapping.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networkInterfaces")]
        private InputList<Inputs.ReplicatedVMNetworkInterfaceArgs>? _networkInterfaces;

        /// <summary>
        /// One or more `network_interface` block.
        /// </summary>
        public InputList<Inputs.ReplicatedVMNetworkInterfaceArgs> NetworkInterfaces
        {
            get => _networkInterfaces ?? (_networkInterfaces = new InputList<Inputs.ReplicatedVMNetworkInterfaceArgs>());
            set => _networkInterfaces = value;
        }

        [Input("recoveryReplicationPolicyId", required: true)]
        public Input<string> RecoveryReplicationPolicyId { get; set; } = null!;

        /// <summary>
        /// The name of the vault that should be updated.
        /// </summary>
        [Input("recoveryVaultName", required: true)]
        public Input<string> RecoveryVaultName { get; set; } = null!;

        /// <summary>
        /// Name of the resource group where the vault that should be updated is located.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of fabric that should contains this replication.
        /// </summary>
        [Input("sourceRecoveryFabricName", required: true)]
        public Input<string> SourceRecoveryFabricName { get; set; } = null!;

        /// <summary>
        /// Name of the protection container to use.
        /// </summary>
        [Input("sourceRecoveryProtectionContainerName", required: true)]
        public Input<string> SourceRecoveryProtectionContainerName { get; set; } = null!;

        /// <summary>
        /// Id of the VM to replicate
        /// </summary>
        [Input("sourceVmId", required: true)]
        public Input<string> SourceVmId { get; set; } = null!;

        /// <summary>
        /// Id of availability set that the new VM should belong to when a failover is done.
        /// </summary>
        [Input("targetAvailabilitySetId")]
        public Input<string>? TargetAvailabilitySetId { get; set; }

        /// <summary>
        /// Network to use when a failover is done (recommended to set if any network_interface is configured for failover).
        /// </summary>
        [Input("targetNetworkId")]
        public Input<string>? TargetNetworkId { get; set; }

        /// <summary>
        /// Id of fabric where the VM replication should be handled when a failover is done.
        /// </summary>
        [Input("targetRecoveryFabricId", required: true)]
        public Input<string> TargetRecoveryFabricId { get; set; } = null!;

        /// <summary>
        /// Id of protection container where the VM replication should be created when a failover is done.
        /// </summary>
        [Input("targetRecoveryProtectionContainerId", required: true)]
        public Input<string> TargetRecoveryProtectionContainerId { get; set; } = null!;

        /// <summary>
        /// Id of resource group where the VM should be created when a failover is done.
        /// </summary>
        [Input("targetResourceGroupId", required: true)]
        public Input<string> TargetResourceGroupId { get; set; } = null!;

        public ReplicatedVMArgs()
        {
        }
    }

    public sealed class ReplicatedVMState : Pulumi.ResourceArgs
    {
        [Input("managedDisks")]
        private InputList<Inputs.ReplicatedVMManagedDiskGetArgs>? _managedDisks;

        /// <summary>
        /// One or more `managed_disk` block.
        /// </summary>
        public InputList<Inputs.ReplicatedVMManagedDiskGetArgs> ManagedDisks
        {
            get => _managedDisks ?? (_managedDisks = new InputList<Inputs.ReplicatedVMManagedDiskGetArgs>());
            set => _managedDisks = value;
        }

        /// <summary>
        /// The name of the network mapping.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networkInterfaces")]
        private InputList<Inputs.ReplicatedVMNetworkInterfaceGetArgs>? _networkInterfaces;

        /// <summary>
        /// One or more `network_interface` block.
        /// </summary>
        public InputList<Inputs.ReplicatedVMNetworkInterfaceGetArgs> NetworkInterfaces
        {
            get => _networkInterfaces ?? (_networkInterfaces = new InputList<Inputs.ReplicatedVMNetworkInterfaceGetArgs>());
            set => _networkInterfaces = value;
        }

        [Input("recoveryReplicationPolicyId")]
        public Input<string>? RecoveryReplicationPolicyId { get; set; }

        /// <summary>
        /// The name of the vault that should be updated.
        /// </summary>
        [Input("recoveryVaultName")]
        public Input<string>? RecoveryVaultName { get; set; }

        /// <summary>
        /// Name of the resource group where the vault that should be updated is located.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// Name of fabric that should contains this replication.
        /// </summary>
        [Input("sourceRecoveryFabricName")]
        public Input<string>? SourceRecoveryFabricName { get; set; }

        /// <summary>
        /// Name of the protection container to use.
        /// </summary>
        [Input("sourceRecoveryProtectionContainerName")]
        public Input<string>? SourceRecoveryProtectionContainerName { get; set; }

        /// <summary>
        /// Id of the VM to replicate
        /// </summary>
        [Input("sourceVmId")]
        public Input<string>? SourceVmId { get; set; }

        /// <summary>
        /// Id of availability set that the new VM should belong to when a failover is done.
        /// </summary>
        [Input("targetAvailabilitySetId")]
        public Input<string>? TargetAvailabilitySetId { get; set; }

        /// <summary>
        /// Network to use when a failover is done (recommended to set if any network_interface is configured for failover).
        /// </summary>
        [Input("targetNetworkId")]
        public Input<string>? TargetNetworkId { get; set; }

        /// <summary>
        /// Id of fabric where the VM replication should be handled when a failover is done.
        /// </summary>
        [Input("targetRecoveryFabricId")]
        public Input<string>? TargetRecoveryFabricId { get; set; }

        /// <summary>
        /// Id of protection container where the VM replication should be created when a failover is done.
        /// </summary>
        [Input("targetRecoveryProtectionContainerId")]
        public Input<string>? TargetRecoveryProtectionContainerId { get; set; }

        /// <summary>
        /// Id of resource group where the VM should be created when a failover is done.
        /// </summary>
        [Input("targetResourceGroupId")]
        public Input<string>? TargetResourceGroupId { get; set; }

        public ReplicatedVMState()
        {
        }
    }
}
