// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.SiteRecovery
{
    /// <summary>
    /// Manages a VMWare Replication Policy.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "eastus",
    ///     });
    /// 
    ///     var exampleVault = new Azure.RecoveryServices.Vault("exampleVault", new()
    ///     {
    ///         Location = azurerm_resource_group.Test.Location,
    ///         ResourceGroupName = azurerm_resource_group.Test.Name,
    ///         Sku = "Standard",
    ///         ClassicVmwareReplicationEnabled = true,
    ///         SoftDeleteEnabled = false,
    ///     });
    /// 
    ///     var exampleVMWareReplicationPolicy = new Azure.SiteRecovery.VMWareReplicationPolicy("exampleVMWareReplicationPolicy", new()
    ///     {
    ///         RecoveryVaultId = exampleVault.Id,
    ///         RecoveryPointRetentionInMinutes = 1440,
    ///         ApplicationConsistentSnapshotFrequencyInMinutes = 240,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// VMWare Replication Policy can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:siterecovery/vMWareReplicationPolicy:VMWareReplicationPolicy example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/vault1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationPolicies/policy1
    /// ```
    /// </summary>
    [AzureResourceType("azure:siterecovery/vMWareReplicationPolicy:VMWareReplicationPolicy")]
    public partial class VMWareReplicationPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies the frequency at which to create application consistent recovery points. Must between `0` to `720`.
        /// </summary>
        [Output("applicationConsistentSnapshotFrequencyInMinutes")]
        public Output<int> ApplicationConsistentSnapshotFrequencyInMinutes { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Classic Replication Policy. Changing this forces a new Replication Policy to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Specifies the period up to which the recovery points will be retained. Must between `0` to `21600`.
        /// </summary>
        [Output("recoveryPointRetentionInMinutes")]
        public Output<int> RecoveryPointRetentionInMinutes { get; private set; } = null!;

        /// <summary>
        /// ID of the Recovery Services Vault. Changing this forces a new Replication Policy to be created.
        /// </summary>
        [Output("recoveryVaultId")]
        public Output<string> RecoveryVaultId { get; private set; } = null!;


        /// <summary>
        /// Create a VMWareReplicationPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VMWareReplicationPolicy(string name, VMWareReplicationPolicyArgs args, CustomResourceOptions? options = null)
            : base("azure:siterecovery/vMWareReplicationPolicy:VMWareReplicationPolicy", name, args ?? new VMWareReplicationPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VMWareReplicationPolicy(string name, Input<string> id, VMWareReplicationPolicyState? state = null, CustomResourceOptions? options = null)
            : base("azure:siterecovery/vMWareReplicationPolicy:VMWareReplicationPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VMWareReplicationPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VMWareReplicationPolicy Get(string name, Input<string> id, VMWareReplicationPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new VMWareReplicationPolicy(name, id, state, options);
        }
    }

    public sealed class VMWareReplicationPolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the frequency at which to create application consistent recovery points. Must between `0` to `720`.
        /// </summary>
        [Input("applicationConsistentSnapshotFrequencyInMinutes", required: true)]
        public Input<int> ApplicationConsistentSnapshotFrequencyInMinutes { get; set; } = null!;

        /// <summary>
        /// The name which should be used for this Classic Replication Policy. Changing this forces a new Replication Policy to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the period up to which the recovery points will be retained. Must between `0` to `21600`.
        /// </summary>
        [Input("recoveryPointRetentionInMinutes", required: true)]
        public Input<int> RecoveryPointRetentionInMinutes { get; set; } = null!;

        /// <summary>
        /// ID of the Recovery Services Vault. Changing this forces a new Replication Policy to be created.
        /// </summary>
        [Input("recoveryVaultId", required: true)]
        public Input<string> RecoveryVaultId { get; set; } = null!;

        public VMWareReplicationPolicyArgs()
        {
        }
        public static new VMWareReplicationPolicyArgs Empty => new VMWareReplicationPolicyArgs();
    }

    public sealed class VMWareReplicationPolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the frequency at which to create application consistent recovery points. Must between `0` to `720`.
        /// </summary>
        [Input("applicationConsistentSnapshotFrequencyInMinutes")]
        public Input<int>? ApplicationConsistentSnapshotFrequencyInMinutes { get; set; }

        /// <summary>
        /// The name which should be used for this Classic Replication Policy. Changing this forces a new Replication Policy to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the period up to which the recovery points will be retained. Must between `0` to `21600`.
        /// </summary>
        [Input("recoveryPointRetentionInMinutes")]
        public Input<int>? RecoveryPointRetentionInMinutes { get; set; }

        /// <summary>
        /// ID of the Recovery Services Vault. Changing this forces a new Replication Policy to be created.
        /// </summary>
        [Input("recoveryVaultId")]
        public Input<string>? RecoveryVaultId { get; set; }

        public VMWareReplicationPolicyState()
        {
        }
        public static new VMWareReplicationPolicyState Empty => new VMWareReplicationPolicyState();
    }
}
