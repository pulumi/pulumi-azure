// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Maintenance
{
    /// <summary>
    /// Manages a Dynamic Maintenance Assignment.
    /// 
    /// &gt; **Note:** Only valid for `InGuestPatch` Maintenance Configuration Scopes.
    /// 
    /// ## Import
    /// 
    /// Dynamic Maintenance Assignments can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:maintenance/assignmentDynamicScope:AssignmentDynamicScope example /subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Maintenance/configurationAssignments/assignmentName
    /// ```
    /// </summary>
    [AzureResourceType("azure:maintenance/assignmentDynamicScope:AssignmentDynamicScope")]
    public partial class AssignmentDynamicScope : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A `filter` block as defined below.
        /// </summary>
        [Output("filter")]
        public Output<Outputs.AssignmentDynamicScopeFilter> Filter { get; private set; } = null!;

        /// <summary>
        /// The ID of the Maintenance Configuration Resource. Changing this forces a new Dynamic Maintenance Assignment to be created.
        /// </summary>
        [Output("maintenanceConfigurationId")]
        public Output<string> MaintenanceConfigurationId { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Dynamic Maintenance Assignment. Changing this forces a new Dynamic Maintenance Assignment to be created.
        /// 
        /// &gt; **Note:** The `name` must be unique per subscription.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;


        /// <summary>
        /// Create a AssignmentDynamicScope resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AssignmentDynamicScope(string name, AssignmentDynamicScopeArgs args, CustomResourceOptions? options = null)
            : base("azure:maintenance/assignmentDynamicScope:AssignmentDynamicScope", name, args ?? new AssignmentDynamicScopeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AssignmentDynamicScope(string name, Input<string> id, AssignmentDynamicScopeState? state = null, CustomResourceOptions? options = null)
            : base("azure:maintenance/assignmentDynamicScope:AssignmentDynamicScope", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AssignmentDynamicScope resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AssignmentDynamicScope Get(string name, Input<string> id, AssignmentDynamicScopeState? state = null, CustomResourceOptions? options = null)
        {
            return new AssignmentDynamicScope(name, id, state, options);
        }
    }

    public sealed class AssignmentDynamicScopeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A `filter` block as defined below.
        /// </summary>
        [Input("filter", required: true)]
        public Input<Inputs.AssignmentDynamicScopeFilterArgs> Filter { get; set; } = null!;

        /// <summary>
        /// The ID of the Maintenance Configuration Resource. Changing this forces a new Dynamic Maintenance Assignment to be created.
        /// </summary>
        [Input("maintenanceConfigurationId", required: true)]
        public Input<string> MaintenanceConfigurationId { get; set; } = null!;

        /// <summary>
        /// The name which should be used for this Dynamic Maintenance Assignment. Changing this forces a new Dynamic Maintenance Assignment to be created.
        /// 
        /// &gt; **Note:** The `name` must be unique per subscription.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public AssignmentDynamicScopeArgs()
        {
        }
        public static new AssignmentDynamicScopeArgs Empty => new AssignmentDynamicScopeArgs();
    }

    public sealed class AssignmentDynamicScopeState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A `filter` block as defined below.
        /// </summary>
        [Input("filter")]
        public Input<Inputs.AssignmentDynamicScopeFilterGetArgs>? Filter { get; set; }

        /// <summary>
        /// The ID of the Maintenance Configuration Resource. Changing this forces a new Dynamic Maintenance Assignment to be created.
        /// </summary>
        [Input("maintenanceConfigurationId")]
        public Input<string>? MaintenanceConfigurationId { get; set; }

        /// <summary>
        /// The name which should be used for this Dynamic Maintenance Assignment. Changing this forces a new Dynamic Maintenance Assignment to be created.
        /// 
        /// &gt; **Note:** The `name` must be unique per subscription.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public AssignmentDynamicScopeState()
        {
        }
        public static new AssignmentDynamicScopeState Empty => new AssignmentDynamicScopeState();
    }
}
