// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Maintenance.Inputs
{

    public sealed class ConfigurationInstallPatchesArgs : global::Pulumi.ResourceArgs
    {
        [Input("linuxes")]
        private InputList<Inputs.ConfigurationInstallPatchesLinuxArgs>? _linuxes;

        /// <summary>
        /// A `linux` block as defined above. This property only applies when `scope` is set to `InGuestPatch`
        /// </summary>
        public InputList<Inputs.ConfigurationInstallPatchesLinuxArgs> Linuxes
        {
            get => _linuxes ?? (_linuxes = new InputList<Inputs.ConfigurationInstallPatchesLinuxArgs>());
            set => _linuxes = value;
        }

        /// <summary>
        /// Possible reboot preference as defined by the user based on which it would be decided to reboot the machine or not after the patch operation is completed. Possible values are `Always`, `IfRequired` and `Never`. This property only applies when `scope` is set to `InGuestPatch`.
        /// </summary>
        [Input("reboot")]
        public Input<string>? Reboot { get; set; }

        [Input("windows")]
        private InputList<Inputs.ConfigurationInstallPatchesWindowArgs>? _windows;

        /// <summary>
        /// A `windows` block as defined above. This property only applies when `scope` is set to `InGuestPatch`
        /// </summary>
        public InputList<Inputs.ConfigurationInstallPatchesWindowArgs> Windows
        {
            get => _windows ?? (_windows = new InputList<Inputs.ConfigurationInstallPatchesWindowArgs>());
            set => _windows = value;
        }

        public ConfigurationInstallPatchesArgs()
        {
        }
        public static new ConfigurationInstallPatchesArgs Empty => new ConfigurationInstallPatchesArgs();
    }
}
