// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Maintenance
{
    public static class GetPublicConfigurations
    {
        /// <summary>
        /// Use this data source to access information about existing Public Maintenance Configurations.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var existing = Azure.Maintenance.GetPublicConfigurations.Invoke(new()
        ///     {
        ///         Location = "West Europe",
        ///         Scope = "SQLManagedInstance",
        ///         RecurEvery = "Monday-Thursday",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["name"] = existing.Apply(getPublicConfigurationsResult =&gt; getPublicConfigurationsResult.Configs[0]?.Name),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetPublicConfigurationsResult> InvokeAsync(GetPublicConfigurationsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPublicConfigurationsResult>("azure:maintenance/getPublicConfigurations:getPublicConfigurations", args ?? new GetPublicConfigurationsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about existing Public Maintenance Configurations.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var existing = Azure.Maintenance.GetPublicConfigurations.Invoke(new()
        ///     {
        ///         Location = "West Europe",
        ///         Scope = "SQLManagedInstance",
        ///         RecurEvery = "Monday-Thursday",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["name"] = existing.Apply(getPublicConfigurationsResult =&gt; getPublicConfigurationsResult.Configs[0]?.Name),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetPublicConfigurationsResult> Invoke(GetPublicConfigurationsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPublicConfigurationsResult>("azure:maintenance/getPublicConfigurations:getPublicConfigurations", args ?? new GetPublicConfigurationsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPublicConfigurationsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Azure location to filter the list of Public Maintenance Configurations against.
        /// </summary>
        [Input("location")]
        public string? Location { get; set; }

        /// <summary>
        /// The recurring window to filter the list of Public Maintenance Configurations against. Possible values are `Monday-Thursday` and `Friday-Sunday`
        /// </summary>
        [Input("recurEvery")]
        public string? RecurEvery { get; set; }

        /// <summary>
        /// The scope to filter the list of Public Maintenance Configurations against. Possible values are `Extension`, `Host`, `InGuestPatch`, `OSImage`, `SQLDB` and `SQLManagedInstance`.
        /// </summary>
        [Input("scope")]
        public string? Scope { get; set; }

        public GetPublicConfigurationsArgs()
        {
        }
        public static new GetPublicConfigurationsArgs Empty => new GetPublicConfigurationsArgs();
    }

    public sealed class GetPublicConfigurationsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Azure location to filter the list of Public Maintenance Configurations against.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The recurring window to filter the list of Public Maintenance Configurations against. Possible values are `Monday-Thursday` and `Friday-Sunday`
        /// </summary>
        [Input("recurEvery")]
        public Input<string>? RecurEvery { get; set; }

        /// <summary>
        /// The scope to filter the list of Public Maintenance Configurations against. Possible values are `Extension`, `Host`, `InGuestPatch`, `OSImage`, `SQLDB` and `SQLManagedInstance`.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        public GetPublicConfigurationsInvokeArgs()
        {
        }
        public static new GetPublicConfigurationsInvokeArgs Empty => new GetPublicConfigurationsInvokeArgs();
    }


    [OutputType]
    public sealed class GetPublicConfigurationsResult
    {
        /// <summary>
        /// A `configs` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPublicConfigurationsConfigResult> Configs;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The Azure location of the Public Maintenance Configuration.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// The rate at which a maintenance window is expected to recur.
        /// </summary>
        public readonly string? RecurEvery;
        public readonly string? Scope;

        [OutputConstructor]
        private GetPublicConfigurationsResult(
            ImmutableArray<Outputs.GetPublicConfigurationsConfigResult> configs,

            string id,

            string? location,

            string? recurEvery,

            string? scope)
        {
            Configs = configs;
            Id = id;
            Location = location;
            RecurEvery = recurEvery;
            Scope = scope;
        }
    }
}
