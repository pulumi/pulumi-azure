// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.DataProtection
{
    public static class GetBackupVault
    {
        /// <summary>
        /// Use this data source to access information about an existing Backup Vault.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Azure.DataProtection.GetBackupVault.InvokeAsync(new Azure.DataProtection.GetBackupVaultArgs
        ///         {
        ///             Name = "existing-backup-vault",
        ///             ResourceGroupName = "existing-resource-group",
        ///         }));
        ///         this.AzurermDataProtectionBackupVaultId = data.Azurerm_vpn_gateway.Example.Id;
        ///         this.AzurermDataProtectionBackupVaultPrincipalId = example.Apply(example =&gt; example.Identities?[0]?.PrincipalId);
        ///     }
        /// 
        ///     [Output("azurermDataProtectionBackupVaultId")]
        ///     public Output&lt;string&gt; AzurermDataProtectionBackupVaultId { get; set; }
        ///     [Output("azurermDataProtectionBackupVaultPrincipalId")]
        ///     public Output&lt;string&gt; AzurermDataProtectionBackupVaultPrincipalId { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetBackupVaultResult> InvokeAsync(GetBackupVaultArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetBackupVaultResult>("azure:dataprotection/getBackupVault:getBackupVault", args ?? new GetBackupVaultArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Backup Vault.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Azure.DataProtection.GetBackupVault.InvokeAsync(new Azure.DataProtection.GetBackupVaultArgs
        ///         {
        ///             Name = "existing-backup-vault",
        ///             ResourceGroupName = "existing-resource-group",
        ///         }));
        ///         this.AzurermDataProtectionBackupVaultId = data.Azurerm_vpn_gateway.Example.Id;
        ///         this.AzurermDataProtectionBackupVaultPrincipalId = example.Apply(example =&gt; example.Identities?[0]?.PrincipalId);
        ///     }
        /// 
        ///     [Output("azurermDataProtectionBackupVaultId")]
        ///     public Output&lt;string&gt; AzurermDataProtectionBackupVaultId { get; set; }
        ///     [Output("azurermDataProtectionBackupVaultPrincipalId")]
        ///     public Output&lt;string&gt; AzurermDataProtectionBackupVaultPrincipalId { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetBackupVaultResult> Invoke(GetBackupVaultInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetBackupVaultResult>("azure:dataprotection/getBackupVault:getBackupVault", args ?? new GetBackupVaultInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBackupVaultArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the name of the Backup Vault.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Backup Vault exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetBackupVaultArgs()
        {
        }
    }

    public sealed class GetBackupVaultInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the name of the Backup Vault.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Backup Vault exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetBackupVaultInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetBackupVaultResult
    {
        /// <summary>
        /// Specifies the type of the data store.
        /// </summary>
        public readonly string DatastoreType;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A `identity` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetBackupVaultIdentityResult> Identities;
        /// <summary>
        /// The Azure Region where the Backup Vault exists.
        /// </summary>
        public readonly string Location;
        public readonly string Name;
        /// <summary>
        /// Specifies the backup storage redundancy.
        /// </summary>
        public readonly string Redundancy;
        public readonly string ResourceGroupName;
        /// <summary>
        /// A mapping of tags which are assigned to the Backup Vault.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;

        [OutputConstructor]
        private GetBackupVaultResult(
            string datastoreType,

            string id,

            ImmutableArray<Outputs.GetBackupVaultIdentityResult> identities,

            string location,

            string name,

            string redundancy,

            string resourceGroupName,

            ImmutableDictionary<string, string> tags)
        {
            DatastoreType = datastoreType;
            Id = id;
            Identities = identities;
            Location = location;
            Name = name;
            Redundancy = redundancy;
            ResourceGroupName = resourceGroupName;
            Tags = tags;
        }
    }
}
