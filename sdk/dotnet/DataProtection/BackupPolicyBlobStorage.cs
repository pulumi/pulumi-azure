// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.DataProtection
{
    /// <summary>
    /// Manages a Backup Policy Blob Storage.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Name = "example-resources",
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleBackupVault = new Azure.DataProtection.BackupVault("example", new()
    ///     {
    ///         Name = "example-backup-vault",
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///         DatastoreType = "VaultStore",
    ///         Redundancy = "LocallyRedundant",
    ///     });
    /// 
    ///     var exampleBackupPolicyBlobStorage = new Azure.DataProtection.BackupPolicyBlobStorage("example", new()
    ///     {
    ///         Name = "example-backup-policy",
    ///         VaultId = exampleBackupVault.Id,
    ///         OperationalDefaultRetentionDuration = "P30D",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## API Providers
    /// 
    /// &lt;!-- This section is generated, changes will be overwritten --&gt;
    /// This resource uses the following Azure API Providers:
    /// 
    /// * `Microsoft.DataProtection` - 2024-04-01
    /// 
    /// ## Import
    /// 
    /// Backup Policy Blob Storages can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:dataprotection/backupPolicyBlobStorage:BackupPolicyBlobStorage example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DataProtection/backupVaults/vault1/backupPolicies/backupPolicy1
    /// ```
    /// </summary>
    [AzureResourceType("azure:dataprotection/backupPolicyBlobStorage:BackupPolicyBlobStorage")]
    public partial class BackupPolicyBlobStorage : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies a list of repeating time interval. It should follow `ISO 8601` repeating time interval. Changing this forces a new Backup Policy Blob Storage to be created.
        /// </summary>
        [Output("backupRepeatingTimeIntervals")]
        public Output<ImmutableArray<string>> BackupRepeatingTimeIntervals { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Backup Policy Blob Storage. Changing this forces a new Backup Policy Blob Storage to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The duration of operational default retention rule. It should follow `ISO 8601` duration format. Changing this forces a new Backup Policy Blob Storage to be created.
        /// </summary>
        [Output("operationalDefaultRetentionDuration")]
        public Output<string?> OperationalDefaultRetentionDuration { get; private set; } = null!;

        /// <summary>
        /// One or more `retention_rule` blocks as defined below. Changing this forces a new Backup Policy Blob Storage to be created.
        /// 
        /// &gt; **Note:** Setting `retention_rule` also requires setting `vault_default_retention_duration`.
        /// </summary>
        [Output("retentionRules")]
        public Output<ImmutableArray<Outputs.BackupPolicyBlobStorageRetentionRule>> RetentionRules { get; private set; } = null!;

        /// <summary>
        /// Specifies the Time Zone which should be used by the backup schedule. Changing this forces a new Backup Policy Blob Storage to be created.
        /// </summary>
        [Output("timeZone")]
        public Output<string?> TimeZone { get; private set; } = null!;

        /// <summary>
        /// The duration of vault default retention rule. It should follow `ISO 8601` duration format. Changing this forces a new Backup Policy Blob Storage to be created.
        /// 
        /// &gt; **Note:** Setting `vault_default_retention_duration` also requires setting `backup_repeating_time_intervals`. At least one of `operational_default_retention_duration` or `vault_default_retention_duration` must be specified.
        /// </summary>
        [Output("vaultDefaultRetentionDuration")]
        public Output<string?> VaultDefaultRetentionDuration { get; private set; } = null!;

        /// <summary>
        /// The ID of the Backup Vault within which the Backup Policy Blob Storage should exist. Changing this forces a new Backup Policy Blob Storage to be created.
        /// </summary>
        [Output("vaultId")]
        public Output<string> VaultId { get; private set; } = null!;


        /// <summary>
        /// Create a BackupPolicyBlobStorage resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BackupPolicyBlobStorage(string name, BackupPolicyBlobStorageArgs args, CustomResourceOptions? options = null)
            : base("azure:dataprotection/backupPolicyBlobStorage:BackupPolicyBlobStorage", name, args ?? new BackupPolicyBlobStorageArgs(), MakeResourceOptions(options, ""))
        {
        }

        private BackupPolicyBlobStorage(string name, Input<string> id, BackupPolicyBlobStorageState? state = null, CustomResourceOptions? options = null)
            : base("azure:dataprotection/backupPolicyBlobStorage:BackupPolicyBlobStorage", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BackupPolicyBlobStorage resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BackupPolicyBlobStorage Get(string name, Input<string> id, BackupPolicyBlobStorageState? state = null, CustomResourceOptions? options = null)
        {
            return new BackupPolicyBlobStorage(name, id, state, options);
        }
    }

    public sealed class BackupPolicyBlobStorageArgs : global::Pulumi.ResourceArgs
    {
        [Input("backupRepeatingTimeIntervals")]
        private InputList<string>? _backupRepeatingTimeIntervals;

        /// <summary>
        /// Specifies a list of repeating time interval. It should follow `ISO 8601` repeating time interval. Changing this forces a new Backup Policy Blob Storage to be created.
        /// </summary>
        public InputList<string> BackupRepeatingTimeIntervals
        {
            get => _backupRepeatingTimeIntervals ?? (_backupRepeatingTimeIntervals = new InputList<string>());
            set => _backupRepeatingTimeIntervals = value;
        }

        /// <summary>
        /// The name which should be used for this Backup Policy Blob Storage. Changing this forces a new Backup Policy Blob Storage to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The duration of operational default retention rule. It should follow `ISO 8601` duration format. Changing this forces a new Backup Policy Blob Storage to be created.
        /// </summary>
        [Input("operationalDefaultRetentionDuration")]
        public Input<string>? OperationalDefaultRetentionDuration { get; set; }

        [Input("retentionRules")]
        private InputList<Inputs.BackupPolicyBlobStorageRetentionRuleArgs>? _retentionRules;

        /// <summary>
        /// One or more `retention_rule` blocks as defined below. Changing this forces a new Backup Policy Blob Storage to be created.
        /// 
        /// &gt; **Note:** Setting `retention_rule` also requires setting `vault_default_retention_duration`.
        /// </summary>
        public InputList<Inputs.BackupPolicyBlobStorageRetentionRuleArgs> RetentionRules
        {
            get => _retentionRules ?? (_retentionRules = new InputList<Inputs.BackupPolicyBlobStorageRetentionRuleArgs>());
            set => _retentionRules = value;
        }

        /// <summary>
        /// Specifies the Time Zone which should be used by the backup schedule. Changing this forces a new Backup Policy Blob Storage to be created.
        /// </summary>
        [Input("timeZone")]
        public Input<string>? TimeZone { get; set; }

        /// <summary>
        /// The duration of vault default retention rule. It should follow `ISO 8601` duration format. Changing this forces a new Backup Policy Blob Storage to be created.
        /// 
        /// &gt; **Note:** Setting `vault_default_retention_duration` also requires setting `backup_repeating_time_intervals`. At least one of `operational_default_retention_duration` or `vault_default_retention_duration` must be specified.
        /// </summary>
        [Input("vaultDefaultRetentionDuration")]
        public Input<string>? VaultDefaultRetentionDuration { get; set; }

        /// <summary>
        /// The ID of the Backup Vault within which the Backup Policy Blob Storage should exist. Changing this forces a new Backup Policy Blob Storage to be created.
        /// </summary>
        [Input("vaultId", required: true)]
        public Input<string> VaultId { get; set; } = null!;

        public BackupPolicyBlobStorageArgs()
        {
        }
        public static new BackupPolicyBlobStorageArgs Empty => new BackupPolicyBlobStorageArgs();
    }

    public sealed class BackupPolicyBlobStorageState : global::Pulumi.ResourceArgs
    {
        [Input("backupRepeatingTimeIntervals")]
        private InputList<string>? _backupRepeatingTimeIntervals;

        /// <summary>
        /// Specifies a list of repeating time interval. It should follow `ISO 8601` repeating time interval. Changing this forces a new Backup Policy Blob Storage to be created.
        /// </summary>
        public InputList<string> BackupRepeatingTimeIntervals
        {
            get => _backupRepeatingTimeIntervals ?? (_backupRepeatingTimeIntervals = new InputList<string>());
            set => _backupRepeatingTimeIntervals = value;
        }

        /// <summary>
        /// The name which should be used for this Backup Policy Blob Storage. Changing this forces a new Backup Policy Blob Storage to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The duration of operational default retention rule. It should follow `ISO 8601` duration format. Changing this forces a new Backup Policy Blob Storage to be created.
        /// </summary>
        [Input("operationalDefaultRetentionDuration")]
        public Input<string>? OperationalDefaultRetentionDuration { get; set; }

        [Input("retentionRules")]
        private InputList<Inputs.BackupPolicyBlobStorageRetentionRuleGetArgs>? _retentionRules;

        /// <summary>
        /// One or more `retention_rule` blocks as defined below. Changing this forces a new Backup Policy Blob Storage to be created.
        /// 
        /// &gt; **Note:** Setting `retention_rule` also requires setting `vault_default_retention_duration`.
        /// </summary>
        public InputList<Inputs.BackupPolicyBlobStorageRetentionRuleGetArgs> RetentionRules
        {
            get => _retentionRules ?? (_retentionRules = new InputList<Inputs.BackupPolicyBlobStorageRetentionRuleGetArgs>());
            set => _retentionRules = value;
        }

        /// <summary>
        /// Specifies the Time Zone which should be used by the backup schedule. Changing this forces a new Backup Policy Blob Storage to be created.
        /// </summary>
        [Input("timeZone")]
        public Input<string>? TimeZone { get; set; }

        /// <summary>
        /// The duration of vault default retention rule. It should follow `ISO 8601` duration format. Changing this forces a new Backup Policy Blob Storage to be created.
        /// 
        /// &gt; **Note:** Setting `vault_default_retention_duration` also requires setting `backup_repeating_time_intervals`. At least one of `operational_default_retention_duration` or `vault_default_retention_duration` must be specified.
        /// </summary>
        [Input("vaultDefaultRetentionDuration")]
        public Input<string>? VaultDefaultRetentionDuration { get; set; }

        /// <summary>
        /// The ID of the Backup Vault within which the Backup Policy Blob Storage should exist. Changing this forces a new Backup Policy Blob Storage to be created.
        /// </summary>
        [Input("vaultId")]
        public Input<string>? VaultId { get; set; }

        public BackupPolicyBlobStorageState()
        {
        }
        public static new BackupPolicyBlobStorageState Empty => new BackupPolicyBlobStorageState();
    }
}
