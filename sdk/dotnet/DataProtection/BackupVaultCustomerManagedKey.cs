// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.DataProtection
{
    /// <summary>
    /// Manages a Backup Vault Customer Managed Key.
    /// 
    /// !&gt; **Note:** It is not possible to remove the Customer Managed Key from the Backup Vault once it's been added. To remove the Customer Managed Key, the parent Data Protection Backup Vault must be deleted and recreated.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Name = "example-resources",
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleBackupVault = new Azure.DataProtection.BackupVault("example", new()
    ///     {
    ///         Name = "example-backup-vault",
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///         DatastoreType = "VaultStore",
    ///         Redundancy = "LocallyRedundant",
    ///         Identity = new Azure.DataProtection.Inputs.BackupVaultIdentityArgs
    ///         {
    ///             Type = "SystemAssigned",
    ///         },
    ///     });
    /// 
    ///     var current = Azure.Core.GetClientConfig.Invoke();
    /// 
    ///     var exampleKeyVault = new Azure.KeyVault.KeyVault("example", new()
    ///     {
    ///         Name = "example-key-vault",
    ///         Location = example.Location,
    ///         ResourceGroupName = example.Name,
    ///         EnabledForDiskEncryption = true,
    ///         TenantId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.TenantId),
    ///         SoftDeleteRetentionDays = 7,
    ///         PurgeProtectionEnabled = true,
    ///         SkuName = "standard",
    ///         AccessPolicies = new[]
    ///         {
    ///             new Azure.KeyVault.Inputs.KeyVaultAccessPolicyArgs
    ///             {
    ///                 TenantId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.TenantId),
    ///                 ObjectId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.ObjectId),
    ///                 KeyPermissions = new[]
    ///                 {
    ///                     "Create",
    ///                     "Decrypt",
    ///                     "Encrypt",
    ///                     "Delete",
    ///                     "Get",
    ///                     "List",
    ///                     "Purge",
    ///                     "UnwrapKey",
    ///                     "WrapKey",
    ///                     "Verify",
    ///                     "GetRotationPolicy",
    ///                 },
    ///                 SecretPermissions = new[]
    ///                 {
    ///                     "Set",
    ///                 },
    ///             },
    ///             new Azure.KeyVault.Inputs.KeyVaultAccessPolicyArgs
    ///             {
    ///                 TenantId = exampleBackupVault.Identity.Apply(identity =&gt; identity?.TenantId),
    ///                 ObjectId = exampleBackupVault.Identity.Apply(identity =&gt; identity?.PrincipalId),
    ///                 KeyPermissions = new[]
    ///                 {
    ///                     "Create",
    ///                     "Decrypt",
    ///                     "Encrypt",
    ///                     "Delete",
    ///                     "Get",
    ///                     "List",
    ///                     "Purge",
    ///                     "UnwrapKey",
    ///                     "WrapKey",
    ///                     "Verify",
    ///                     "GetRotationPolicy",
    ///                 },
    ///                 SecretPermissions = new[]
    ///                 {
    ///                     "Set",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleKey = new Azure.KeyVault.Key("example", new()
    ///     {
    ///         Name = "example-key",
    ///         KeyVaultId = exampleKeyVault.Id,
    ///         KeyType = "RSA",
    ///         KeySize = 2048,
    ///         KeyOpts = new[]
    ///         {
    ///             "decrypt",
    ///             "encrypt",
    ///             "sign",
    ///             "unwrapKey",
    ///             "verify",
    ///             "wrapKey",
    ///         },
    ///     });
    /// 
    ///     var exampleBackupVaultCustomerManagedKey = new Azure.DataProtection.BackupVaultCustomerManagedKey("example", new()
    ///     {
    ///         DataProtectionBackupVaultId = exampleBackupVault.Id,
    ///         KeyVaultKeyId = exampleKey.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Backup Vault Customer Managed Keys can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:dataprotection/backupVaultCustomerManagedKey:BackupVaultCustomerManagedKey example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DataProtection/backupVaults/vault1
    /// ```
    /// </summary>
    [AzureResourceType("azure:dataprotection/backupVaultCustomerManagedKey:BackupVaultCustomerManagedKey")]
    public partial class BackupVaultCustomerManagedKey : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the Backup Vault. Changing this forces a new resource to be created.
        /// </summary>
        [Output("dataProtectionBackupVaultId")]
        public Output<string> DataProtectionBackupVaultId { get; private set; } = null!;

        /// <summary>
        /// The ID of the Key Vault Key which should be used to Encrypt the data in this Backup Vault.
        /// </summary>
        [Output("keyVaultKeyId")]
        public Output<string> KeyVaultKeyId { get; private set; } = null!;


        /// <summary>
        /// Create a BackupVaultCustomerManagedKey resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BackupVaultCustomerManagedKey(string name, BackupVaultCustomerManagedKeyArgs args, CustomResourceOptions? options = null)
            : base("azure:dataprotection/backupVaultCustomerManagedKey:BackupVaultCustomerManagedKey", name, args ?? new BackupVaultCustomerManagedKeyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private BackupVaultCustomerManagedKey(string name, Input<string> id, BackupVaultCustomerManagedKeyState? state = null, CustomResourceOptions? options = null)
            : base("azure:dataprotection/backupVaultCustomerManagedKey:BackupVaultCustomerManagedKey", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BackupVaultCustomerManagedKey resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BackupVaultCustomerManagedKey Get(string name, Input<string> id, BackupVaultCustomerManagedKeyState? state = null, CustomResourceOptions? options = null)
        {
            return new BackupVaultCustomerManagedKey(name, id, state, options);
        }
    }

    public sealed class BackupVaultCustomerManagedKeyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Backup Vault. Changing this forces a new resource to be created.
        /// </summary>
        [Input("dataProtectionBackupVaultId", required: true)]
        public Input<string> DataProtectionBackupVaultId { get; set; } = null!;

        /// <summary>
        /// The ID of the Key Vault Key which should be used to Encrypt the data in this Backup Vault.
        /// </summary>
        [Input("keyVaultKeyId", required: true)]
        public Input<string> KeyVaultKeyId { get; set; } = null!;

        public BackupVaultCustomerManagedKeyArgs()
        {
        }
        public static new BackupVaultCustomerManagedKeyArgs Empty => new BackupVaultCustomerManagedKeyArgs();
    }

    public sealed class BackupVaultCustomerManagedKeyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Backup Vault. Changing this forces a new resource to be created.
        /// </summary>
        [Input("dataProtectionBackupVaultId")]
        public Input<string>? DataProtectionBackupVaultId { get; set; }

        /// <summary>
        /// The ID of the Key Vault Key which should be used to Encrypt the data in this Backup Vault.
        /// </summary>
        [Input("keyVaultKeyId")]
        public Input<string>? KeyVaultKeyId { get; set; }

        public BackupVaultCustomerManagedKeyState()
        {
        }
        public static new BackupVaultCustomerManagedKeyState Empty => new BackupVaultCustomerManagedKeyState();
    }
}
