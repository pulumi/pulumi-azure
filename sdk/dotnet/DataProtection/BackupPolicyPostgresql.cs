// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.DataProtection
{
    /// <summary>
    /// Manages a Backup Policy to back up PostgreSQL.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleBackupVault = new Azure.DataProtection.BackupVault("exampleBackupVault", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         DatastoreType = "VaultStore",
    ///         Redundancy = "LocallyRedundant",
    ///     });
    /// 
    ///     var exampleBackupPolicyPostgresql = new Azure.DataProtection.BackupPolicyPostgresql("exampleBackupPolicyPostgresql", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         VaultName = exampleBackupVault.Name,
    ///         BackupRepeatingTimeIntervals = new[]
    ///         {
    ///             "R/2021-05-23T02:30:00+00:00/P1W",
    ///         },
    ///         TimeZone = "India Standard Time",
    ///         DefaultRetentionDuration = "P4M",
    ///         RetentionRules = new[]
    ///         {
    ///             new Azure.DataProtection.Inputs.BackupPolicyPostgresqlRetentionRuleArgs
    ///             {
    ///                 Name = "weekly",
    ///                 Duration = "P6M",
    ///                 Priority = 20,
    ///                 Criteria = new Azure.DataProtection.Inputs.BackupPolicyPostgresqlRetentionRuleCriteriaArgs
    ///                 {
    ///                     AbsoluteCriteria = "FirstOfWeek",
    ///                 },
    ///             },
    ///             new Azure.DataProtection.Inputs.BackupPolicyPostgresqlRetentionRuleArgs
    ///             {
    ///                 Name = "thursday",
    ///                 Duration = "P1W",
    ///                 Priority = 25,
    ///                 Criteria = new Azure.DataProtection.Inputs.BackupPolicyPostgresqlRetentionRuleCriteriaArgs
    ///                 {
    ///                     DaysOfWeeks = new[]
    ///                     {
    ///                         "Thursday",
    ///                     },
    ///                     ScheduledBackupTimes = new[]
    ///                     {
    ///                         "2021-05-23T02:30:00Z",
    ///                     },
    ///                 },
    ///             },
    ///             new Azure.DataProtection.Inputs.BackupPolicyPostgresqlRetentionRuleArgs
    ///             {
    ///                 Name = "monthly",
    ///                 Duration = "P1D",
    ///                 Priority = 15,
    ///                 Criteria = new Azure.DataProtection.Inputs.BackupPolicyPostgresqlRetentionRuleCriteriaArgs
    ///                 {
    ///                     WeeksOfMonths = new[]
    ///                     {
    ///                         "First",
    ///                         "Last",
    ///                     },
    ///                     DaysOfWeeks = new[]
    ///                     {
    ///                         "Tuesday",
    ///                     },
    ///                     ScheduledBackupTimes = new[]
    ///                     {
    ///                         "2021-05-23T02:30:00Z",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Backup Policy PostgreSQL's can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:dataprotection/backupPolicyPostgresql:BackupPolicyPostgresql example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DataProtection/backupVaults/vault1/backupPolicies/backupPolicy1
    /// ```
    /// </summary>
    [AzureResourceType("azure:dataprotection/backupPolicyPostgresql:BackupPolicyPostgresql")]
    public partial class BackupPolicyPostgresql : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies a list of repeating time interval. It supports weekly back. It should follow `ISO 8601` repeating time interval. Changing this forces a new Backup Policy PostgreSQL to be created.
        /// </summary>
        [Output("backupRepeatingTimeIntervals")]
        public Output<ImmutableArray<string>> BackupRepeatingTimeIntervals { get; private set; } = null!;

        /// <summary>
        /// The duration of default retention rule. It should follow `ISO 8601` duration format. Changing this forces a new Backup Policy PostgreSQL to be created.
        /// </summary>
        [Output("defaultRetentionDuration")]
        public Output<string> DefaultRetentionDuration { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Backup Policy PostgreSQL. Changing this forces a new Backup Policy PostgreSQL to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Backup Policy PostgreSQL should exist. Changing this forces a new Backup Policy PostgreSQL to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// One or more `retention_rule` blocks as defined below. Changing this forces a new Backup Policy PostgreSQL to be created.
        /// </summary>
        [Output("retentionRules")]
        public Output<ImmutableArray<Outputs.BackupPolicyPostgresqlRetentionRule>> RetentionRules { get; private set; } = null!;

        /// <summary>
        /// Specifies the Time Zone which should be used by the backup schedule. Changing this forces a new Backup Policy Disk to be created.
        /// </summary>
        [Output("timeZone")]
        public Output<string?> TimeZone { get; private set; } = null!;

        /// <summary>
        /// The name of the Backup Vault where the Backup Policy PostgreSQL should exist. Changing this forces a new Backup Policy PostgreSQL to be created.
        /// </summary>
        [Output("vaultName")]
        public Output<string> VaultName { get; private set; } = null!;


        /// <summary>
        /// Create a BackupPolicyPostgresql resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BackupPolicyPostgresql(string name, BackupPolicyPostgresqlArgs args, CustomResourceOptions? options = null)
            : base("azure:dataprotection/backupPolicyPostgresql:BackupPolicyPostgresql", name, args ?? new BackupPolicyPostgresqlArgs(), MakeResourceOptions(options, ""))
        {
        }

        private BackupPolicyPostgresql(string name, Input<string> id, BackupPolicyPostgresqlState? state = null, CustomResourceOptions? options = null)
            : base("azure:dataprotection/backupPolicyPostgresql:BackupPolicyPostgresql", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BackupPolicyPostgresql resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BackupPolicyPostgresql Get(string name, Input<string> id, BackupPolicyPostgresqlState? state = null, CustomResourceOptions? options = null)
        {
            return new BackupPolicyPostgresql(name, id, state, options);
        }
    }

    public sealed class BackupPolicyPostgresqlArgs : global::Pulumi.ResourceArgs
    {
        [Input("backupRepeatingTimeIntervals", required: true)]
        private InputList<string>? _backupRepeatingTimeIntervals;

        /// <summary>
        /// Specifies a list of repeating time interval. It supports weekly back. It should follow `ISO 8601` repeating time interval. Changing this forces a new Backup Policy PostgreSQL to be created.
        /// </summary>
        public InputList<string> BackupRepeatingTimeIntervals
        {
            get => _backupRepeatingTimeIntervals ?? (_backupRepeatingTimeIntervals = new InputList<string>());
            set => _backupRepeatingTimeIntervals = value;
        }

        /// <summary>
        /// The duration of default retention rule. It should follow `ISO 8601` duration format. Changing this forces a new Backup Policy PostgreSQL to be created.
        /// </summary>
        [Input("defaultRetentionDuration", required: true)]
        public Input<string> DefaultRetentionDuration { get; set; } = null!;

        /// <summary>
        /// The name which should be used for this Backup Policy PostgreSQL. Changing this forces a new Backup Policy PostgreSQL to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Backup Policy PostgreSQL should exist. Changing this forces a new Backup Policy PostgreSQL to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("retentionRules")]
        private InputList<Inputs.BackupPolicyPostgresqlRetentionRuleArgs>? _retentionRules;

        /// <summary>
        /// One or more `retention_rule` blocks as defined below. Changing this forces a new Backup Policy PostgreSQL to be created.
        /// </summary>
        public InputList<Inputs.BackupPolicyPostgresqlRetentionRuleArgs> RetentionRules
        {
            get => _retentionRules ?? (_retentionRules = new InputList<Inputs.BackupPolicyPostgresqlRetentionRuleArgs>());
            set => _retentionRules = value;
        }

        /// <summary>
        /// Specifies the Time Zone which should be used by the backup schedule. Changing this forces a new Backup Policy Disk to be created.
        /// </summary>
        [Input("timeZone")]
        public Input<string>? TimeZone { get; set; }

        /// <summary>
        /// The name of the Backup Vault where the Backup Policy PostgreSQL should exist. Changing this forces a new Backup Policy PostgreSQL to be created.
        /// </summary>
        [Input("vaultName", required: true)]
        public Input<string> VaultName { get; set; } = null!;

        public BackupPolicyPostgresqlArgs()
        {
        }
        public static new BackupPolicyPostgresqlArgs Empty => new BackupPolicyPostgresqlArgs();
    }

    public sealed class BackupPolicyPostgresqlState : global::Pulumi.ResourceArgs
    {
        [Input("backupRepeatingTimeIntervals")]
        private InputList<string>? _backupRepeatingTimeIntervals;

        /// <summary>
        /// Specifies a list of repeating time interval. It supports weekly back. It should follow `ISO 8601` repeating time interval. Changing this forces a new Backup Policy PostgreSQL to be created.
        /// </summary>
        public InputList<string> BackupRepeatingTimeIntervals
        {
            get => _backupRepeatingTimeIntervals ?? (_backupRepeatingTimeIntervals = new InputList<string>());
            set => _backupRepeatingTimeIntervals = value;
        }

        /// <summary>
        /// The duration of default retention rule. It should follow `ISO 8601` duration format. Changing this forces a new Backup Policy PostgreSQL to be created.
        /// </summary>
        [Input("defaultRetentionDuration")]
        public Input<string>? DefaultRetentionDuration { get; set; }

        /// <summary>
        /// The name which should be used for this Backup Policy PostgreSQL. Changing this forces a new Backup Policy PostgreSQL to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Backup Policy PostgreSQL should exist. Changing this forces a new Backup Policy PostgreSQL to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        [Input("retentionRules")]
        private InputList<Inputs.BackupPolicyPostgresqlRetentionRuleGetArgs>? _retentionRules;

        /// <summary>
        /// One or more `retention_rule` blocks as defined below. Changing this forces a new Backup Policy PostgreSQL to be created.
        /// </summary>
        public InputList<Inputs.BackupPolicyPostgresqlRetentionRuleGetArgs> RetentionRules
        {
            get => _retentionRules ?? (_retentionRules = new InputList<Inputs.BackupPolicyPostgresqlRetentionRuleGetArgs>());
            set => _retentionRules = value;
        }

        /// <summary>
        /// Specifies the Time Zone which should be used by the backup schedule. Changing this forces a new Backup Policy Disk to be created.
        /// </summary>
        [Input("timeZone")]
        public Input<string>? TimeZone { get; set; }

        /// <summary>
        /// The name of the Backup Vault where the Backup Policy PostgreSQL should exist. Changing this forces a new Backup Policy PostgreSQL to be created.
        /// </summary>
        [Input("vaultName")]
        public Input<string>? VaultName { get; set; }

        public BackupPolicyPostgresqlState()
        {
        }
        public static new BackupPolicyPostgresqlState Empty => new BackupPolicyPostgresqlState();
    }
}
