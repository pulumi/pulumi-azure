// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.DataProtection
{
    /// <summary>
    /// Manages a Backup Instance to back up a Kubernetes Cluster.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var current = Azure.Core.GetClientConfig.Invoke();
    /// 
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Name = "example",
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var snap = new Azure.Core.ResourceGroup("snap", new()
    ///     {
    ///         Name = "example-snap",
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleBackupVault = new Azure.DataProtection.BackupVault("example", new()
    ///     {
    ///         Name = "example",
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///         DatastoreType = "VaultStore",
    ///         Redundancy = "LocallyRedundant",
    ///         Identity = new Azure.DataProtection.Inputs.BackupVaultIdentityArgs
    ///         {
    ///             Type = "SystemAssigned",
    ///         },
    ///     });
    /// 
    ///     var exampleKubernetesCluster = new Azure.ContainerService.KubernetesCluster("example", new()
    ///     {
    ///         Name = "example",
    ///         Location = example.Location,
    ///         ResourceGroupName = example.Name,
    ///         DnsPrefix = "dns",
    ///         DefaultNodePool = new Azure.ContainerService.Inputs.KubernetesClusterDefaultNodePoolArgs
    ///         {
    ///             Name = "default",
    ///             NodeCount = 1,
    ///             VmSize = "Standard_DS2_v2",
    ///             EnableHostEncryption = true,
    ///         },
    ///         Identity = new Azure.ContainerService.Inputs.KubernetesClusterIdentityArgs
    ///         {
    ///             Type = "SystemAssigned",
    ///         },
    ///     });
    /// 
    ///     var aksClusterTrustedAccess = new Azure.ContainerService.ClusterTrustedAccessRoleBinding("aks_cluster_trusted_access", new()
    ///     {
    ///         KubernetesClusterId = exampleKubernetesCluster.Id,
    ///         Name = "example",
    ///         Roles = new[]
    ///         {
    ///             "Microsoft.DataProtection/backupVaults/backup-operator",
    ///         },
    ///         SourceResourceId = exampleBackupVault.Id,
    ///     });
    /// 
    ///     var exampleAccount = new Azure.Storage.Account("example", new()
    ///     {
    ///         Name = "example",
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///         AccountTier = "Standard",
    ///         AccountReplicationType = "LRS",
    ///     });
    /// 
    ///     var exampleContainer = new Azure.Storage.Container("example", new()
    ///     {
    ///         Name = "example",
    ///         StorageAccountName = exampleAccount.Name,
    ///         ContainerAccessType = "private",
    ///     });
    /// 
    ///     var exampleKubernetesClusterExtension = new Azure.ContainerService.KubernetesClusterExtension("example", new()
    ///     {
    ///         Name = "example",
    ///         ClusterId = exampleKubernetesCluster.Id,
    ///         ExtensionType = "Microsoft.DataProtection.Kubernetes",
    ///         ReleaseTrain = "stable",
    ///         ReleaseNamespace = "dataprotection-microsoft",
    ///         ConfigurationSettings = 
    ///         {
    ///             { "configuration.backupStorageLocation.bucket", exampleContainer.Name },
    ///             { "configuration.backupStorageLocation.config.resourceGroup", example.Name },
    ///             { "configuration.backupStorageLocation.config.storageAccount", exampleAccount.Name },
    ///             { "configuration.backupStorageLocation.config.subscriptionId", current.Apply(getClientConfigResult =&gt; getClientConfigResult.SubscriptionId) },
    ///             { "credentials.tenantId", current.Apply(getClientConfigResult =&gt; getClientConfigResult.TenantId) },
    ///         },
    ///     });
    /// 
    ///     var extensionAndStorageAccountPermission = new Azure.Authorization.Assignment("extension_and_storage_account_permission", new()
    ///     {
    ///         Scope = exampleAccount.Id,
    ///         RoleDefinitionName = "Storage Account Contributor",
    ///         PrincipalId = exampleKubernetesClusterExtension.AksAssignedIdentities.Apply(aksAssignedIdentities =&gt; aksAssignedIdentities[0].PrincipalId),
    ///     });
    /// 
    ///     var vaultMsiReadOnCluster = new Azure.Authorization.Assignment("vault_msi_read_on_cluster", new()
    ///     {
    ///         Scope = exampleKubernetesCluster.Id,
    ///         RoleDefinitionName = "Reader",
    ///         PrincipalId = exampleBackupVault.Identity.Apply(identity =&gt; identity?.PrincipalId),
    ///     });
    /// 
    ///     var vaultMsiReadOnSnapRg = new Azure.Authorization.Assignment("vault_msi_read_on_snap_rg", new()
    ///     {
    ///         Scope = snap.Id,
    ///         RoleDefinitionName = "Reader",
    ///         PrincipalId = exampleBackupVault.Identity.Apply(identity =&gt; identity?.PrincipalId),
    ///     });
    /// 
    ///     var clusterMsiContributorOnSnapRg = new Azure.Authorization.Assignment("cluster_msi_contributor_on_snap_rg", new()
    ///     {
    ///         Scope = snap.Id,
    ///         RoleDefinitionName = "Contributor",
    ///         PrincipalId = exampleKubernetesCluster.Identity.Apply(identity =&gt; identity?.PrincipalId),
    ///     });
    /// 
    ///     var exampleBackupPolicyKubernetesCluster = new Azure.DataProtection.BackupPolicyKubernetesCluster("example", new()
    ///     {
    ///         Name = "example",
    ///         ResourceGroupName = example.Name,
    ///         VaultName = exampleBackupVault.Name,
    ///         BackupRepeatingTimeIntervals = new[]
    ///         {
    ///             "R/2023-05-23T02:30:00+00:00/P1W",
    ///         },
    ///         RetentionRules = new[]
    ///         {
    ///             new Azure.DataProtection.Inputs.BackupPolicyKubernetesClusterRetentionRuleArgs
    ///             {
    ///                 Name = "Daily",
    ///                 Priority = 25,
    ///                 LifeCycles = new[]
    ///                 {
    ///                     new Azure.DataProtection.Inputs.BackupPolicyKubernetesClusterRetentionRuleLifeCycleArgs
    ///                     {
    ///                         Duration = "P84D",
    ///                         DataStoreType = "OperationalStore",
    ///                     },
    ///                 },
    ///                 Criteria = new Azure.DataProtection.Inputs.BackupPolicyKubernetesClusterRetentionRuleCriteriaArgs
    ///                 {
    ///                     DaysOfWeeks = new[]
    ///                     {
    ///                         "Thursday",
    ///                     },
    ///                     MonthsOfYears = new[]
    ///                     {
    ///                         "November",
    ///                     },
    ///                     WeeksOfMonths = new[]
    ///                     {
    ///                         "First",
    ///                     },
    ///                     ScheduledBackupTimes = new[]
    ///                     {
    ///                         "2023-05-23T02:30:00Z",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         DefaultRetentionRule = new Azure.DataProtection.Inputs.BackupPolicyKubernetesClusterDefaultRetentionRuleArgs
    ///         {
    ///             LifeCycles = new[]
    ///             {
    ///                 new Azure.DataProtection.Inputs.BackupPolicyKubernetesClusterDefaultRetentionRuleLifeCycleArgs
    ///                 {
    ///                     Duration = "P14D",
    ///                     DataStoreType = "OperationalStore",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleBackupInstanceKubernetesCluster = new Azure.DataProtection.BackupInstanceKubernetesCluster("example", new()
    ///     {
    ///         Name = "example",
    ///         Location = example.Location,
    ///         VaultId = exampleBackupVault.Id,
    ///         KubernetesClusterId = exampleKubernetesCluster.Id,
    ///         SnapshotResourceGroupName = snap.Name,
    ///         BackupPolicyId = exampleBackupPolicyKubernetesCluster.Id,
    ///         BackupDatasourceParameters = new Azure.DataProtection.Inputs.BackupInstanceKubernetesClusterBackupDatasourceParametersArgs
    ///         {
    ///             ExcludedNamespaces = new[]
    ///             {
    ///                 "test-excluded-namespaces",
    ///             },
    ///             ExcludedResourceTypes = new[]
    ///             {
    ///                 "exvolumesnapshotcontents.snapshot.storage.k8s.io",
    ///             },
    ///             ClusterScopedResourcesEnabled = true,
    ///             IncludedNamespaces = new[]
    ///             {
    ///                 "test-included-namespaces",
    ///             },
    ///             IncludedResourceTypes = new[]
    ///             {
    ///                 "involumesnapshotcontents.snapshot.storage.k8s.io",
    ///             },
    ///             LabelSelectors = new[]
    ///             {
    ///                 "kubernetes.io/metadata.name:test",
    ///             },
    ///             VolumeSnapshotEnabled = true,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// Backup Instance Kubernetes Cluster can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:dataprotection/backupInstanceKubernetesCluster:BackupInstanceKubernetesCluster example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DataProtection/backupVaults/vault1/backupInstances/backupInstance1
    /// ```
    /// </summary>
    [AzureResourceType("azure:dataprotection/backupInstanceKubernetesCluster:BackupInstanceKubernetesCluster")]
    public partial class BackupInstanceKubernetesCluster : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A `backup_datasource_parameters` block as defined below.
        /// </summary>
        [Output("backupDatasourceParameters")]
        public Output<Outputs.BackupInstanceKubernetesClusterBackupDatasourceParameters?> BackupDatasourceParameters { get; private set; } = null!;

        /// <summary>
        /// The ID of the Backup Policy. Changing this forces a new resource to be created.
        /// </summary>
        [Output("backupPolicyId")]
        public Output<string> BackupPolicyId { get; private set; } = null!;

        /// <summary>
        /// The ID of the Kubernetes Cluster. Changing this forces a new resource to be created.
        /// </summary>
        [Output("kubernetesClusterId")]
        public Output<string> KubernetesClusterId { get; private set; } = null!;

        /// <summary>
        /// The location of the Backup Instance Kubernetes Cluster. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Backup Instance Kubernetes Cluster. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group where snapshots are stored. Changing this forces a new resource to be created.
        /// </summary>
        [Output("snapshotResourceGroupName")]
        public Output<string> SnapshotResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// The ID of the Backup Vault within which the Backup Instance Kubernetes Cluster should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("vaultId")]
        public Output<string> VaultId { get; private set; } = null!;


        /// <summary>
        /// Create a BackupInstanceKubernetesCluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BackupInstanceKubernetesCluster(string name, BackupInstanceKubernetesClusterArgs args, CustomResourceOptions? options = null)
            : base("azure:dataprotection/backupInstanceKubernetesCluster:BackupInstanceKubernetesCluster", name, args ?? new BackupInstanceKubernetesClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private BackupInstanceKubernetesCluster(string name, Input<string> id, BackupInstanceKubernetesClusterState? state = null, CustomResourceOptions? options = null)
            : base("azure:dataprotection/backupInstanceKubernetesCluster:BackupInstanceKubernetesCluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BackupInstanceKubernetesCluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BackupInstanceKubernetesCluster Get(string name, Input<string> id, BackupInstanceKubernetesClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new BackupInstanceKubernetesCluster(name, id, state, options);
        }
    }

    public sealed class BackupInstanceKubernetesClusterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A `backup_datasource_parameters` block as defined below.
        /// </summary>
        [Input("backupDatasourceParameters")]
        public Input<Inputs.BackupInstanceKubernetesClusterBackupDatasourceParametersArgs>? BackupDatasourceParameters { get; set; }

        /// <summary>
        /// The ID of the Backup Policy. Changing this forces a new resource to be created.
        /// </summary>
        [Input("backupPolicyId", required: true)]
        public Input<string> BackupPolicyId { get; set; } = null!;

        /// <summary>
        /// The ID of the Kubernetes Cluster. Changing this forces a new resource to be created.
        /// </summary>
        [Input("kubernetesClusterId", required: true)]
        public Input<string> KubernetesClusterId { get; set; } = null!;

        /// <summary>
        /// The location of the Backup Instance Kubernetes Cluster. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name which should be used for this Backup Instance Kubernetes Cluster. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the Resource Group where snapshots are stored. Changing this forces a new resource to be created.
        /// </summary>
        [Input("snapshotResourceGroupName", required: true)]
        public Input<string> SnapshotResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The ID of the Backup Vault within which the Backup Instance Kubernetes Cluster should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("vaultId", required: true)]
        public Input<string> VaultId { get; set; } = null!;

        public BackupInstanceKubernetesClusterArgs()
        {
        }
        public static new BackupInstanceKubernetesClusterArgs Empty => new BackupInstanceKubernetesClusterArgs();
    }

    public sealed class BackupInstanceKubernetesClusterState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A `backup_datasource_parameters` block as defined below.
        /// </summary>
        [Input("backupDatasourceParameters")]
        public Input<Inputs.BackupInstanceKubernetesClusterBackupDatasourceParametersGetArgs>? BackupDatasourceParameters { get; set; }

        /// <summary>
        /// The ID of the Backup Policy. Changing this forces a new resource to be created.
        /// </summary>
        [Input("backupPolicyId")]
        public Input<string>? BackupPolicyId { get; set; }

        /// <summary>
        /// The ID of the Kubernetes Cluster. Changing this forces a new resource to be created.
        /// </summary>
        [Input("kubernetesClusterId")]
        public Input<string>? KubernetesClusterId { get; set; }

        /// <summary>
        /// The location of the Backup Instance Kubernetes Cluster. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name which should be used for this Backup Instance Kubernetes Cluster. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the Resource Group where snapshots are stored. Changing this forces a new resource to be created.
        /// </summary>
        [Input("snapshotResourceGroupName")]
        public Input<string>? SnapshotResourceGroupName { get; set; }

        /// <summary>
        /// The ID of the Backup Vault within which the Backup Instance Kubernetes Cluster should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("vaultId")]
        public Input<string>? VaultId { get; set; }

        public BackupInstanceKubernetesClusterState()
        {
        }
        public static new BackupInstanceKubernetesClusterState Empty => new BackupInstanceKubernetesClusterState();
    }
}
