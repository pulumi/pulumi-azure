// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ElasticSan
{
    public static class Get
    {
        /// <summary>
        /// Use this data source to access information about an existing Elastic SAN.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.ElasticSan.Get.Invoke(new()
        ///     {
        ///         Name = "existing",
        ///         ResourceGroupName = "existing",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getResult =&gt; getResult.Id),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetResult> InvokeAsync(GetArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetResult>("azure:elasticsan/get:get", args ?? new GetArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Elastic SAN.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.ElasticSan.Get.Invoke(new()
        ///     {
        ///         Name = "existing",
        ///         ResourceGroupName = "existing",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getResult =&gt; getResult.Id),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetResult> Invoke(GetInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetResult>("azure:elasticsan/get:get", args ?? new GetInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of this Elastic SAN.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Elastic SAN exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetArgs()
        {
        }
        public static new GetArgs Empty => new GetArgs();
    }

    public sealed class GetInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of this Elastic SAN.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Elastic SAN exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetInvokeArgs()
        {
        }
        public static new GetInvokeArgs Empty => new GetInvokeArgs();
    }


    [OutputType]
    public sealed class GetResult
    {
        /// <summary>
        /// The base size of the Elastic SAN resource in TiB.
        /// </summary>
        public readonly int BaseSizeInTib;
        /// <summary>
        /// The base size of the Elastic SAN resource in TiB.
        /// </summary>
        public readonly int ExtendedSizeInTib;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The Azure Region where the Elastic SAN exists.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The SKU name.
        /// </summary>
        public readonly string Name;
        public readonly string ResourceGroupName;
        /// <summary>
        /// A `sku` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSkusResult> Skus;
        /// <summary>
        /// A mapping of tags assigned to the Elastic SAN.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// Total Provisioned IOps of the Elastic SAN resource.
        /// </summary>
        public readonly int TotalIops;
        /// <summary>
        /// Total Provisioned MBps Elastic SAN resource.
        /// </summary>
        public readonly int TotalMbps;
        /// <summary>
        /// Total size of the Elastic SAN resource in TB.
        /// </summary>
        public readonly int TotalSizeInTib;
        /// <summary>
        /// Total size of the provisioned Volumes in GiB.
        /// </summary>
        public readonly int TotalVolumeSizeInGib;
        /// <summary>
        /// Total number of volume groups in this Elastic SAN resource.
        /// </summary>
        public readonly int VolumeGroupCount;
        /// <summary>
        /// Logical zone for the Elastic SAN resource.
        /// </summary>
        public readonly ImmutableArray<string> Zones;

        [OutputConstructor]
        private GetResult(
            int baseSizeInTib,

            int extendedSizeInTib,

            string id,

            string location,

            string name,

            string resourceGroupName,

            ImmutableArray<Outputs.GetSkusResult> skus,

            ImmutableDictionary<string, string> tags,

            int totalIops,

            int totalMbps,

            int totalSizeInTib,

            int totalVolumeSizeInGib,

            int volumeGroupCount,

            ImmutableArray<string> zones)
        {
            BaseSizeInTib = baseSizeInTib;
            ExtendedSizeInTib = extendedSizeInTib;
            Id = id;
            Location = location;
            Name = name;
            ResourceGroupName = resourceGroupName;
            Skus = skus;
            Tags = tags;
            TotalIops = totalIops;
            TotalMbps = totalMbps;
            TotalSizeInTib = totalSizeInTib;
            TotalVolumeSizeInGib = totalVolumeSizeInGib;
            VolumeGroupCount = volumeGroupCount;
            Zones = zones;
        }
    }
}
