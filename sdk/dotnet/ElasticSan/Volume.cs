// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ElasticSan
{
    /// <summary>
    /// Manages an Elastic SAN Volume resource.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Name = "example-rg",
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleElasticSan = new Azure.ElasticSan.ElasticSan("example", new()
    ///     {
    ///         Name = "example-es",
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///         BaseSizeInTib = 1,
    ///         Sku = new Azure.ElasticSan.Inputs.ElasticSanSkuArgs
    ///         {
    ///             Name = "Premium_LRS",
    ///         },
    ///     });
    /// 
    ///     var exampleVolumeGroup = new Azure.ElasticSan.VolumeGroup("example", new()
    ///     {
    ///         Name = "example-esvg",
    ///         ElasticSanId = exampleElasticSan.Id,
    ///     });
    /// 
    ///     var exampleVolume = new Azure.ElasticSan.Volume("example", new()
    ///     {
    ///         Name = "example-esv",
    ///         VolumeGroupId = exampleVolumeGroup.Id,
    ///         SizeInGib = 1,
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["targetIqn"] = exampleVolume.TargetIqn,
    ///     };
    /// });
    /// ```
    /// 
    /// ## Example of creating an Elastic SAN Volume from a Disk Snapshot
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Name = "example-rg",
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleElasticSan = new Azure.ElasticSan.ElasticSan("example", new()
    ///     {
    ///         Name = "example-es",
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///         BaseSizeInTib = 1,
    ///         Sku = new Azure.ElasticSan.Inputs.ElasticSanSkuArgs
    ///         {
    ///             Name = "Premium_LRS",
    ///         },
    ///     });
    /// 
    ///     var exampleVolumeGroup = new Azure.ElasticSan.VolumeGroup("example", new()
    ///     {
    ///         Name = "example-esvg",
    ///         ElasticSanId = exampleElasticSan.Id,
    ///     });
    /// 
    ///     var exampleManagedDisk = new Azure.Compute.ManagedDisk("example", new()
    ///     {
    ///         Name = "example-disk",
    ///         Location = example.Location,
    ///         ResourceGroupName = example.Name,
    ///         CreateOption = "Empty",
    ///         StorageAccountType = "Standard_LRS",
    ///         DiskSizeGb = 2,
    ///     });
    /// 
    ///     var exampleSnapshot = new Azure.Compute.Snapshot("example", new()
    ///     {
    ///         Name = "example-ss",
    ///         Location = example.Location,
    ///         ResourceGroupName = example.Name,
    ///         CreateOption = "Copy",
    ///         SourceUri = exampleManagedDisk.Id,
    ///     });
    /// 
    ///     var example2 = new Azure.ElasticSan.Volume("example2", new()
    ///     {
    ///         Name = "example-esv2",
    ///         VolumeGroupId = exampleVolumeGroup.Id,
    ///         SizeInGib = 2,
    ///         CreateSource = new Azure.ElasticSan.Inputs.VolumeCreateSourceArgs
    ///         {
    ///             SourceType = "DiskSnapshot",
    ///             SourceId = exampleSnapshot.Id,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## API Providers
    /// 
    /// &lt;!-- This section is generated, changes will be overwritten --&gt;
    /// This resource uses the following Azure API Providers:
    /// 
    /// * `Microsoft.ElasticSan` - 2023-01-01
    /// 
    /// ## Import
    /// 
    /// An existing Elastic SAN Volume can be imported into Pulumi using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:elasticsan/volume:Volume example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.ElasticSan/elasticSans/esan1/volumeGroups/vg1/volumes/vol1
    /// ```
    /// </summary>
    [AzureResourceType("azure:elasticsan/volume:Volume")]
    public partial class Volume : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A `CreateSource` block as defined below.
        /// </summary>
        [Output("createSource")]
        public Output<Outputs.VolumeCreateSource?> CreateSource { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of this Elastic SAN Volume. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Specifies the size of the Elastic SAN Volume in GiB. The size should be within the remaining capacity of the parent Elastic SAN. Possible values are between `1` and `65536` (16 TiB).
        /// 
        /// &gt; **Note:** The size can only be increased. If `CreateSource` is specified, then the size must be equal to or greater than the source's size.
        /// </summary>
        [Output("sizeInGib")]
        public Output<int> SizeInGib { get; private set; } = null!;

        /// <summary>
        /// The iSCSI Target IQN of the Elastic SAN Volume.
        /// </summary>
        [Output("targetIqn")]
        public Output<string> TargetIqn { get; private set; } = null!;

        /// <summary>
        /// The iSCSI Target Portal Host Name of the Elastic SAN Volume.
        /// </summary>
        [Output("targetPortalHostname")]
        public Output<string> TargetPortalHostname { get; private set; } = null!;

        /// <summary>
        /// The iSCSI Target Portal Port of the Elastic SAN Volume.
        /// </summary>
        [Output("targetPortalPort")]
        public Output<int> TargetPortalPort { get; private set; } = null!;

        /// <summary>
        /// Specifies the Volume Group ID within which this Elastic SAN Volume should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("volumeGroupId")]
        public Output<string> VolumeGroupId { get; private set; } = null!;

        /// <summary>
        /// The UUID of the Elastic SAN Volume.
        /// </summary>
        [Output("volumeId")]
        public Output<string> VolumeId { get; private set; } = null!;


        /// <summary>
        /// Create a Volume resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Volume(string name, VolumeArgs args, CustomResourceOptions? options = null)
            : base("azure:elasticsan/volume:Volume", name, args ?? new VolumeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Volume(string name, Input<string> id, VolumeState? state = null, CustomResourceOptions? options = null)
            : base("azure:elasticsan/volume:Volume", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Volume resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Volume Get(string name, Input<string> id, VolumeState? state = null, CustomResourceOptions? options = null)
        {
            return new Volume(name, id, state, options);
        }
    }

    public sealed class VolumeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A `CreateSource` block as defined below.
        /// </summary>
        [Input("createSource")]
        public Input<Inputs.VolumeCreateSourceArgs>? CreateSource { get; set; }

        /// <summary>
        /// Specifies the name of this Elastic SAN Volume. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the size of the Elastic SAN Volume in GiB. The size should be within the remaining capacity of the parent Elastic SAN. Possible values are between `1` and `65536` (16 TiB).
        /// 
        /// &gt; **Note:** The size can only be increased. If `CreateSource` is specified, then the size must be equal to or greater than the source's size.
        /// </summary>
        [Input("sizeInGib", required: true)]
        public Input<int> SizeInGib { get; set; } = null!;

        /// <summary>
        /// Specifies the Volume Group ID within which this Elastic SAN Volume should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("volumeGroupId", required: true)]
        public Input<string> VolumeGroupId { get; set; } = null!;

        public VolumeArgs()
        {
        }
        public static new VolumeArgs Empty => new VolumeArgs();
    }

    public sealed class VolumeState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A `CreateSource` block as defined below.
        /// </summary>
        [Input("createSource")]
        public Input<Inputs.VolumeCreateSourceGetArgs>? CreateSource { get; set; }

        /// <summary>
        /// Specifies the name of this Elastic SAN Volume. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the size of the Elastic SAN Volume in GiB. The size should be within the remaining capacity of the parent Elastic SAN. Possible values are between `1` and `65536` (16 TiB).
        /// 
        /// &gt; **Note:** The size can only be increased. If `CreateSource` is specified, then the size must be equal to or greater than the source's size.
        /// </summary>
        [Input("sizeInGib")]
        public Input<int>? SizeInGib { get; set; }

        /// <summary>
        /// The iSCSI Target IQN of the Elastic SAN Volume.
        /// </summary>
        [Input("targetIqn")]
        public Input<string>? TargetIqn { get; set; }

        /// <summary>
        /// The iSCSI Target Portal Host Name of the Elastic SAN Volume.
        /// </summary>
        [Input("targetPortalHostname")]
        public Input<string>? TargetPortalHostname { get; set; }

        /// <summary>
        /// The iSCSI Target Portal Port of the Elastic SAN Volume.
        /// </summary>
        [Input("targetPortalPort")]
        public Input<int>? TargetPortalPort { get; set; }

        /// <summary>
        /// Specifies the Volume Group ID within which this Elastic SAN Volume should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("volumeGroupId")]
        public Input<string>? VolumeGroupId { get; set; }

        /// <summary>
        /// The UUID of the Elastic SAN Volume.
        /// </summary>
        [Input("volumeId")]
        public Input<string>? VolumeId { get; set; }

        public VolumeState()
        {
        }
        public static new VolumeState Empty => new VolumeState();
    }
}
