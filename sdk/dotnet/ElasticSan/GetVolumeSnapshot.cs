// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ElasticSan
{
    public static class GetVolumeSnapshot
    {
        /// <summary>
        /// Use this data source to access information about an existing Elastic SAN Volume Snapshot.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.ElasticSan.Get.Invoke(new()
        ///     {
        ///         Name = "existing",
        ///         ResourceGroupName = "existing",
        ///     });
        /// 
        ///     var exampleGetVolumeGroup = Azure.ElasticSan.GetVolumeGroup.Invoke(new()
        ///     {
        ///         Name = "existing",
        ///         ElasticSanId = example.Apply(getResult =&gt; getResult.Id),
        ///     });
        /// 
        ///     var exampleGetVolumeSnapshot = Azure.ElasticSan.GetVolumeSnapshot.Invoke(new()
        ///     {
        ///         Name = "existing",
        ///         VolumeGroupId = exampleGetVolumeGroup.Apply(getVolumeGroupResult =&gt; getVolumeGroupResult.Id),
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = exampleGetVolumeSnapshot.Apply(getVolumeSnapshotResult =&gt; getVolumeSnapshotResult.Id),
        ///     };
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Microsoft.ElasticSan` - 2023-01-01
        /// </summary>
        public static Task<GetVolumeSnapshotResult> InvokeAsync(GetVolumeSnapshotArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVolumeSnapshotResult>("azure:elasticsan/getVolumeSnapshot:getVolumeSnapshot", args ?? new GetVolumeSnapshotArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Elastic SAN Volume Snapshot.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.ElasticSan.Get.Invoke(new()
        ///     {
        ///         Name = "existing",
        ///         ResourceGroupName = "existing",
        ///     });
        /// 
        ///     var exampleGetVolumeGroup = Azure.ElasticSan.GetVolumeGroup.Invoke(new()
        ///     {
        ///         Name = "existing",
        ///         ElasticSanId = example.Apply(getResult =&gt; getResult.Id),
        ///     });
        /// 
        ///     var exampleGetVolumeSnapshot = Azure.ElasticSan.GetVolumeSnapshot.Invoke(new()
        ///     {
        ///         Name = "existing",
        ///         VolumeGroupId = exampleGetVolumeGroup.Apply(getVolumeGroupResult =&gt; getVolumeGroupResult.Id),
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = exampleGetVolumeSnapshot.Apply(getVolumeSnapshotResult =&gt; getVolumeSnapshotResult.Id),
        ///     };
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Microsoft.ElasticSan` - 2023-01-01
        /// </summary>
        public static Output<GetVolumeSnapshotResult> Invoke(GetVolumeSnapshotInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVolumeSnapshotResult>("azure:elasticsan/getVolumeSnapshot:getVolumeSnapshot", args ?? new GetVolumeSnapshotInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Elastic SAN Volume Snapshot.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.ElasticSan.Get.Invoke(new()
        ///     {
        ///         Name = "existing",
        ///         ResourceGroupName = "existing",
        ///     });
        /// 
        ///     var exampleGetVolumeGroup = Azure.ElasticSan.GetVolumeGroup.Invoke(new()
        ///     {
        ///         Name = "existing",
        ///         ElasticSanId = example.Apply(getResult =&gt; getResult.Id),
        ///     });
        /// 
        ///     var exampleGetVolumeSnapshot = Azure.ElasticSan.GetVolumeSnapshot.Invoke(new()
        ///     {
        ///         Name = "existing",
        ///         VolumeGroupId = exampleGetVolumeGroup.Apply(getVolumeGroupResult =&gt; getVolumeGroupResult.Id),
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = exampleGetVolumeSnapshot.Apply(getVolumeSnapshotResult =&gt; getVolumeSnapshotResult.Id),
        ///     };
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Microsoft.ElasticSan` - 2023-01-01
        /// </summary>
        public static Output<GetVolumeSnapshotResult> Invoke(GetVolumeSnapshotInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetVolumeSnapshotResult>("azure:elasticsan/getVolumeSnapshot:getVolumeSnapshot", args ?? new GetVolumeSnapshotInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVolumeSnapshotArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Elastic SAN Volume Snapshot.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The Elastic SAN Volume Group ID within which the Elastic SAN Volume Snapshot exists.
        /// </summary>
        [Input("volumeGroupId", required: true)]
        public string VolumeGroupId { get; set; } = null!;

        public GetVolumeSnapshotArgs()
        {
        }
        public static new GetVolumeSnapshotArgs Empty => new GetVolumeSnapshotArgs();
    }

    public sealed class GetVolumeSnapshotInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Elastic SAN Volume Snapshot.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The Elastic SAN Volume Group ID within which the Elastic SAN Volume Snapshot exists.
        /// </summary>
        [Input("volumeGroupId", required: true)]
        public Input<string> VolumeGroupId { get; set; } = null!;

        public GetVolumeSnapshotInvokeArgs()
        {
        }
        public static new GetVolumeSnapshotInvokeArgs Empty => new GetVolumeSnapshotInvokeArgs();
    }


    [OutputType]
    public sealed class GetVolumeSnapshotResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Name;
        /// <summary>
        /// The resource ID from which the Snapshot is created.
        /// </summary>
        public readonly string SourceId;
        /// <summary>
        /// The size of source volume.
        /// </summary>
        public readonly int SourceVolumeSizeInGib;
        public readonly string VolumeGroupId;
        /// <summary>
        /// The source volume name of the Snapshot.
        /// </summary>
        public readonly string VolumeName;

        [OutputConstructor]
        private GetVolumeSnapshotResult(
            string id,

            string name,

            string sourceId,

            int sourceVolumeSizeInGib,

            string volumeGroupId,

            string volumeName)
        {
            Id = id;
            Name = name;
            SourceId = sourceId;
            SourceVolumeSizeInGib = sourceVolumeSizeInGib;
            VolumeGroupId = volumeGroupId;
            VolumeName = volumeName;
        }
    }
}
