// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ElasticSan
{
    public static class GetVolumeGroup
    {
        /// <summary>
        /// Use this data source to access information about an existing Elastic SAN Volume Group.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.ElasticSan.Get.Invoke(new()
        ///     {
        ///         Name = "existing",
        ///         ResourceGroupName = "existing",
        ///     });
        /// 
        ///     var exampleGetVolumeGroup = Azure.ElasticSan.GetVolumeGroup.Invoke(new()
        ///     {
        ///         Name = "existing",
        ///         ElasticSanId = example.Apply(getResult =&gt; getResult.Id),
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = exampleGetVolumeGroup.Apply(getVolumeGroupResult =&gt; getVolumeGroupResult.Id),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetVolumeGroupResult> InvokeAsync(GetVolumeGroupArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVolumeGroupResult>("azure:elasticsan/getVolumeGroup:getVolumeGroup", args ?? new GetVolumeGroupArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Elastic SAN Volume Group.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.ElasticSan.Get.Invoke(new()
        ///     {
        ///         Name = "existing",
        ///         ResourceGroupName = "existing",
        ///     });
        /// 
        ///     var exampleGetVolumeGroup = Azure.ElasticSan.GetVolumeGroup.Invoke(new()
        ///     {
        ///         Name = "existing",
        ///         ElasticSanId = example.Apply(getResult =&gt; getResult.Id),
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = exampleGetVolumeGroup.Apply(getVolumeGroupResult =&gt; getVolumeGroupResult.Id),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetVolumeGroupResult> Invoke(GetVolumeGroupInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVolumeGroupResult>("azure:elasticsan/getVolumeGroup:getVolumeGroup", args ?? new GetVolumeGroupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVolumeGroupArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Elastic SAN ID within which the Elastic SAN Volume Group exists.
        /// </summary>
        [Input("elasticSanId", required: true)]
        public string ElasticSanId { get; set; } = null!;

        /// <summary>
        /// The name of the Elastic SAN Volume Group.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetVolumeGroupArgs()
        {
        }
        public static new GetVolumeGroupArgs Empty => new GetVolumeGroupArgs();
    }

    public sealed class GetVolumeGroupInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Elastic SAN ID within which the Elastic SAN Volume Group exists.
        /// </summary>
        [Input("elasticSanId", required: true)]
        public Input<string> ElasticSanId { get; set; } = null!;

        /// <summary>
        /// The name of the Elastic SAN Volume Group.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetVolumeGroupInvokeArgs()
        {
        }
        public static new GetVolumeGroupInvokeArgs Empty => new GetVolumeGroupInvokeArgs();
    }


    [OutputType]
    public sealed class GetVolumeGroupResult
    {
        public readonly string ElasticSanId;
        /// <summary>
        /// The type of the key used to encrypt the data of the disk.
        /// </summary>
        public readonly string EncryptionType;
        /// <summary>
        /// An `encryption` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVolumeGroupEncryptionResult> Encryptions;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVolumeGroupIdentityResult> Identities;
        public readonly string Name;
        /// <summary>
        /// One or more `network_rule` blocks as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVolumeGroupNetworkRuleResult> NetworkRules;
        /// <summary>
        /// The type of the storage target.
        /// </summary>
        public readonly string ProtocolType;

        [OutputConstructor]
        private GetVolumeGroupResult(
            string elasticSanId,

            string encryptionType,

            ImmutableArray<Outputs.GetVolumeGroupEncryptionResult> encryptions,

            string id,

            ImmutableArray<Outputs.GetVolumeGroupIdentityResult> identities,

            string name,

            ImmutableArray<Outputs.GetVolumeGroupNetworkRuleResult> networkRules,

            string protocolType)
        {
            ElasticSanId = elasticSanId;
            EncryptionType = encryptionType;
            Encryptions = encryptions;
            Id = id;
            Identities = identities;
            Name = name;
            NetworkRules = networkRules;
            ProtocolType = protocolType;
        }
    }
}
