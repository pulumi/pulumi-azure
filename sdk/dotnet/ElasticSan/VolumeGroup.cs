// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ElasticSan
{
    /// <summary>
    /// Manages an Elastic SAN Volume Group resource.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleElasticSan = new Azure.ElasticSan.ElasticSan("exampleElasticSan", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         BaseSizeInTib = 1,
    ///         Sku = new Azure.ElasticSan.Inputs.ElasticSanSkuArgs
    ///         {
    ///             Name = "Premium_LRS",
    ///         },
    ///     });
    /// 
    ///     var current = Azure.Core.GetClientConfig.Invoke();
    /// 
    ///     var exampleUserAssignedIdentity = new Azure.Authorization.UserAssignedIdentity("exampleUserAssignedIdentity", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///     });
    /// 
    ///     var exampleVirtualNetwork = new Azure.Network.VirtualNetwork("exampleVirtualNetwork", new()
    ///     {
    ///         AddressSpaces = new[]
    ///         {
    ///             "10.0.0.0/16",
    ///         },
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///     });
    /// 
    ///     var exampleSubnet = new Azure.Network.Subnet("exampleSubnet", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         VirtualNetworkName = exampleVirtualNetwork.Name,
    ///         AddressPrefixes = new[]
    ///         {
    ///             "10.0.1.0/24",
    ///         },
    ///         ServiceEndpoints = new[]
    ///         {
    ///             "Microsoft.Storage.Global",
    ///         },
    ///     });
    /// 
    ///     var exampleKeyVault = new Azure.KeyVault.KeyVault("exampleKeyVault", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         EnabledForDiskEncryption = true,
    ///         TenantId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.TenantId),
    ///         SoftDeleteRetentionDays = 7,
    ///         PurgeProtectionEnabled = true,
    ///         SkuName = "standard",
    ///     });
    /// 
    ///     var userAssignedIdentity = new Azure.KeyVault.AccessPolicy("userAssignedIdentity", new()
    ///     {
    ///         KeyVaultId = exampleKeyVault.Id,
    ///         TenantId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.TenantId),
    ///         ObjectId = exampleUserAssignedIdentity.PrincipalId,
    ///         KeyPermissions = new[]
    ///         {
    ///             "Get",
    ///             "UnwrapKey",
    ///             "WrapKey",
    ///         },
    ///         SecretPermissions = new[]
    ///         {
    ///             "Get",
    ///         },
    ///     });
    /// 
    ///     var client = new Azure.KeyVault.AccessPolicy("client", new()
    ///     {
    ///         KeyVaultId = exampleKeyVault.Id,
    ///         TenantId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.TenantId),
    ///         ObjectId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.ObjectId),
    ///         KeyPermissions = new[]
    ///         {
    ///             "Get",
    ///             "Create",
    ///             "Delete",
    ///             "List",
    ///             "Restore",
    ///             "Recover",
    ///             "UnwrapKey",
    ///             "WrapKey",
    ///             "Purge",
    ///             "Encrypt",
    ///             "Decrypt",
    ///             "Sign",
    ///             "Verify",
    ///             "GetRotationPolicy",
    ///         },
    ///         SecretPermissions = new[]
    ///         {
    ///             "Get",
    ///         },
    ///     });
    /// 
    ///     var exampleKey = new Azure.KeyVault.Key("exampleKey", new()
    ///     {
    ///         KeyVaultId = exampleKeyVault.Id,
    ///         KeyType = "RSA",
    ///         KeySize = 2048,
    ///         KeyOpts = new[]
    ///         {
    ///             "decrypt",
    ///             "encrypt",
    ///             "sign",
    ///             "unwrapKey",
    ///             "verify",
    ///             "wrapKey",
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             userAssignedIdentity,
    ///             client,
    ///         },
    ///     });
    /// 
    ///     var exampleVolumeGroup = new Azure.ElasticSan.VolumeGroup("exampleVolumeGroup", new()
    ///     {
    ///         ElasticSanId = exampleElasticSan.Id,
    ///         EncryptionType = "EncryptionAtRestWithCustomerManagedKey",
    ///         Encryption = new Azure.ElasticSan.Inputs.VolumeGroupEncryptionArgs
    ///         {
    ///             KeyVaultKeyId = exampleKey.VersionlessId,
    ///             UserAssignedIdentityId = exampleUserAssignedIdentity.Id,
    ///         },
    ///         Identity = new Azure.ElasticSan.Inputs.VolumeGroupIdentityArgs
    ///         {
    ///             Type = "UserAssigned",
    ///             IdentityIds = new[]
    ///             {
    ///                 exampleUserAssignedIdentity.Id,
    ///             },
    ///         },
    ///         NetworkRules = new[]
    ///         {
    ///             new Azure.ElasticSan.Inputs.VolumeGroupNetworkRuleArgs
    ///             {
    ///                 SubnetId = exampleSubnet.Id,
    ///                 Action = "Allow",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing Elastic SAN Volume Group can be imported into Terraform using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:elasticsan/volumeGroup:VolumeGroup example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.ElasticSan/elasticSans/esan1/volumeGroups/vg1
    /// ```
    /// </summary>
    [AzureResourceType("azure:elasticsan/volumeGroup:VolumeGroup")]
    public partial class VolumeGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies the Elastic SAN ID within which this Elastic SAN Volume Group should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("elasticSanId")]
        public Output<string> ElasticSanId { get; private set; } = null!;

        /// <summary>
        /// An `encryption` block as defined below.
        /// 
        /// &gt; **NOTE:** The `encryption` block can only be set when `encryption_type` is set to `EncryptionAtRestWithCustomerManagedKey`.
        /// </summary>
        [Output("encryption")]
        public Output<Outputs.VolumeGroupEncryption?> Encryption { get; private set; } = null!;

        /// <summary>
        /// Specifies the type of the key used to encrypt the data of the disk. Possible values are `EncryptionAtRestWithCustomerManagedKey` and `EncryptionAtRestWithPlatformKey`. Defaults to `EncryptionAtRestWithPlatformKey`.
        /// </summary>
        [Output("encryptionType")]
        public Output<string?> EncryptionType { get; private set; } = null!;

        /// <summary>
        /// An `identity` block as defined below. Specifies the Managed Identity which should be assigned to this Elastic SAN Volume Group.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.VolumeGroupIdentity?> Identity { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of this Elastic SAN Volume Group. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// One or more `network_rule` blocks as defined below.
        /// </summary>
        [Output("networkRules")]
        public Output<ImmutableArray<Outputs.VolumeGroupNetworkRule>> NetworkRules { get; private set; } = null!;

        /// <summary>
        /// Specifies the type of the storage target. The only possible value is `Iscsi`. Defaults to `Iscsi`.
        /// </summary>
        [Output("protocolType")]
        public Output<string?> ProtocolType { get; private set; } = null!;


        /// <summary>
        /// Create a VolumeGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VolumeGroup(string name, VolumeGroupArgs args, CustomResourceOptions? options = null)
            : base("azure:elasticsan/volumeGroup:VolumeGroup", name, args ?? new VolumeGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VolumeGroup(string name, Input<string> id, VolumeGroupState? state = null, CustomResourceOptions? options = null)
            : base("azure:elasticsan/volumeGroup:VolumeGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VolumeGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VolumeGroup Get(string name, Input<string> id, VolumeGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new VolumeGroup(name, id, state, options);
        }
    }

    public sealed class VolumeGroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the Elastic SAN ID within which this Elastic SAN Volume Group should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("elasticSanId", required: true)]
        public Input<string> ElasticSanId { get; set; } = null!;

        /// <summary>
        /// An `encryption` block as defined below.
        /// 
        /// &gt; **NOTE:** The `encryption` block can only be set when `encryption_type` is set to `EncryptionAtRestWithCustomerManagedKey`.
        /// </summary>
        [Input("encryption")]
        public Input<Inputs.VolumeGroupEncryptionArgs>? Encryption { get; set; }

        /// <summary>
        /// Specifies the type of the key used to encrypt the data of the disk. Possible values are `EncryptionAtRestWithCustomerManagedKey` and `EncryptionAtRestWithPlatformKey`. Defaults to `EncryptionAtRestWithPlatformKey`.
        /// </summary>
        [Input("encryptionType")]
        public Input<string>? EncryptionType { get; set; }

        /// <summary>
        /// An `identity` block as defined below. Specifies the Managed Identity which should be assigned to this Elastic SAN Volume Group.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.VolumeGroupIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// Specifies the name of this Elastic SAN Volume Group. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networkRules")]
        private InputList<Inputs.VolumeGroupNetworkRuleArgs>? _networkRules;

        /// <summary>
        /// One or more `network_rule` blocks as defined below.
        /// </summary>
        public InputList<Inputs.VolumeGroupNetworkRuleArgs> NetworkRules
        {
            get => _networkRules ?? (_networkRules = new InputList<Inputs.VolumeGroupNetworkRuleArgs>());
            set => _networkRules = value;
        }

        /// <summary>
        /// Specifies the type of the storage target. The only possible value is `Iscsi`. Defaults to `Iscsi`.
        /// </summary>
        [Input("protocolType")]
        public Input<string>? ProtocolType { get; set; }

        public VolumeGroupArgs()
        {
        }
        public static new VolumeGroupArgs Empty => new VolumeGroupArgs();
    }

    public sealed class VolumeGroupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the Elastic SAN ID within which this Elastic SAN Volume Group should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("elasticSanId")]
        public Input<string>? ElasticSanId { get; set; }

        /// <summary>
        /// An `encryption` block as defined below.
        /// 
        /// &gt; **NOTE:** The `encryption` block can only be set when `encryption_type` is set to `EncryptionAtRestWithCustomerManagedKey`.
        /// </summary>
        [Input("encryption")]
        public Input<Inputs.VolumeGroupEncryptionGetArgs>? Encryption { get; set; }

        /// <summary>
        /// Specifies the type of the key used to encrypt the data of the disk. Possible values are `EncryptionAtRestWithCustomerManagedKey` and `EncryptionAtRestWithPlatformKey`. Defaults to `EncryptionAtRestWithPlatformKey`.
        /// </summary>
        [Input("encryptionType")]
        public Input<string>? EncryptionType { get; set; }

        /// <summary>
        /// An `identity` block as defined below. Specifies the Managed Identity which should be assigned to this Elastic SAN Volume Group.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.VolumeGroupIdentityGetArgs>? Identity { get; set; }

        /// <summary>
        /// Specifies the name of this Elastic SAN Volume Group. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networkRules")]
        private InputList<Inputs.VolumeGroupNetworkRuleGetArgs>? _networkRules;

        /// <summary>
        /// One or more `network_rule` blocks as defined below.
        /// </summary>
        public InputList<Inputs.VolumeGroupNetworkRuleGetArgs> NetworkRules
        {
            get => _networkRules ?? (_networkRules = new InputList<Inputs.VolumeGroupNetworkRuleGetArgs>());
            set => _networkRules = value;
        }

        /// <summary>
        /// Specifies the type of the storage target. The only possible value is `Iscsi`. Defaults to `Iscsi`.
        /// </summary>
        [Input("protocolType")]
        public Input<string>? ProtocolType { get; set; }

        public VolumeGroupState()
        {
        }
        public static new VolumeGroupState Empty => new VolumeGroupState();
    }
}
