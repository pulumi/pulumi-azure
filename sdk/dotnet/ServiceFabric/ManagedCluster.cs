// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ServiceFabric
{
    /// <summary>
    /// Manages a Resource Group.
    /// 
    /// ## Import
    /// 
    /// Resource Groups can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:servicefabric/managedCluster:ManagedCluster example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.ServiceFabric/managedClusters/clusterName1
    /// ```
    /// </summary>
    [AzureResourceType("azure:servicefabric/managedCluster:ManagedCluster")]
    public partial class ManagedCluster : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Controls how connections to the cluster are authenticated. A `authentication` block as defined below.
        /// </summary>
        [Output("authentication")]
        public Output<Outputs.ManagedClusterAuthentication?> Authentication { get; private set; } = null!;

        /// <summary>
        /// If true, backup service is enabled.
        /// </summary>
        [Output("backupServiceEnabled")]
        public Output<bool?> BackupServiceEnabled { get; private set; } = null!;

        /// <summary>
        /// Port to use when connecting to the cluster.
        /// </summary>
        [Output("clientConnectionPort")]
        public Output<int> ClientConnectionPort { get; private set; } = null!;

        /// <summary>
        /// One or more `custom_fabric_setting` blocks as defined below.
        /// </summary>
        [Output("customFabricSettings")]
        public Output<ImmutableArray<Outputs.ManagedClusterCustomFabricSetting>> CustomFabricSettings { get; private set; } = null!;

        /// <summary>
        /// Hostname for the cluster. If unset the cluster's name will be used..
        /// </summary>
        [Output("dnsName")]
        public Output<string> DnsName { get; private set; } = null!;

        /// <summary>
        /// If true, DNS service is enabled.
        /// </summary>
        [Output("dnsServiceEnabled")]
        public Output<bool?> DnsServiceEnabled { get; private set; } = null!;

        /// <summary>
        /// Port that should be used by the Service Fabric Explorer to visualize applications and cluster status.
        /// </summary>
        [Output("httpGatewayPort")]
        public Output<int> HttpGatewayPort { get; private set; } = null!;

        /// <summary>
        /// One or more `lb_rule` blocks as defined below.
        /// </summary>
        [Output("lbRules")]
        public Output<ImmutableArray<Outputs.ManagedClusterLbRule>> LbRules { get; private set; } = null!;

        /// <summary>
        /// The Azure Region where the Resource Group should exist. Changing this forces a new Resource Group to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Resource Group. Changing this forces a new Resource Group to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// One or more `node_type` blocks as defined below.
        /// </summary>
        [Output("nodeTypes")]
        public Output<ImmutableArray<Outputs.ManagedClusterNodeType>> NodeTypes { get; private set; } = null!;

        /// <summary>
        /// Administrator password for the VMs that will be created as part of this cluster.
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Resource Group should exist. Changing this forces a new Resource Group to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// SKU for this cluster. Changing this forces a new resource to be created. Default is `Basic`, allowed values are either `Basic` or `Standard`.
        /// </summary>
        [Output("sku")]
        public Output<string?> Sku { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags which should be assigned to the Resource Group.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Upgrade wave for the fabric runtime. Default is `Wave0`, allowed value must be one of `Wave0`, `Wave1`, or `Wave2`.
        /// </summary>
        [Output("upgradeWave")]
        public Output<string?> UpgradeWave { get; private set; } = null!;

        /// <summary>
        /// Administrator password for the VMs that will be created as part of this cluster.
        /// </summary>
        [Output("username")]
        public Output<string?> Username { get; private set; } = null!;


        /// <summary>
        /// Create a ManagedCluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ManagedCluster(string name, ManagedClusterArgs args, CustomResourceOptions? options = null)
            : base("azure:servicefabric/managedCluster:ManagedCluster", name, args ?? new ManagedClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ManagedCluster(string name, Input<string> id, ManagedClusterState? state = null, CustomResourceOptions? options = null)
            : base("azure:servicefabric/managedCluster:ManagedCluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ManagedCluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ManagedCluster Get(string name, Input<string> id, ManagedClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new ManagedCluster(name, id, state, options);
        }
    }

    public sealed class ManagedClusterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Controls how connections to the cluster are authenticated. A `authentication` block as defined below.
        /// </summary>
        [Input("authentication")]
        public Input<Inputs.ManagedClusterAuthenticationArgs>? Authentication { get; set; }

        /// <summary>
        /// If true, backup service is enabled.
        /// </summary>
        [Input("backupServiceEnabled")]
        public Input<bool>? BackupServiceEnabled { get; set; }

        /// <summary>
        /// Port to use when connecting to the cluster.
        /// </summary>
        [Input("clientConnectionPort", required: true)]
        public Input<int> ClientConnectionPort { get; set; } = null!;

        [Input("customFabricSettings")]
        private InputList<Inputs.ManagedClusterCustomFabricSettingArgs>? _customFabricSettings;

        /// <summary>
        /// One or more `custom_fabric_setting` blocks as defined below.
        /// </summary>
        public InputList<Inputs.ManagedClusterCustomFabricSettingArgs> CustomFabricSettings
        {
            get => _customFabricSettings ?? (_customFabricSettings = new InputList<Inputs.ManagedClusterCustomFabricSettingArgs>());
            set => _customFabricSettings = value;
        }

        /// <summary>
        /// Hostname for the cluster. If unset the cluster's name will be used..
        /// </summary>
        [Input("dnsName")]
        public Input<string>? DnsName { get; set; }

        /// <summary>
        /// If true, DNS service is enabled.
        /// </summary>
        [Input("dnsServiceEnabled")]
        public Input<bool>? DnsServiceEnabled { get; set; }

        /// <summary>
        /// Port that should be used by the Service Fabric Explorer to visualize applications and cluster status.
        /// </summary>
        [Input("httpGatewayPort", required: true)]
        public Input<int> HttpGatewayPort { get; set; } = null!;

        [Input("lbRules", required: true)]
        private InputList<Inputs.ManagedClusterLbRuleArgs>? _lbRules;

        /// <summary>
        /// One or more `lb_rule` blocks as defined below.
        /// </summary>
        public InputList<Inputs.ManagedClusterLbRuleArgs> LbRules
        {
            get => _lbRules ?? (_lbRules = new InputList<Inputs.ManagedClusterLbRuleArgs>());
            set => _lbRules = value;
        }

        /// <summary>
        /// The Azure Region where the Resource Group should exist. Changing this forces a new Resource Group to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name which should be used for this Resource Group. Changing this forces a new Resource Group to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nodeTypes")]
        private InputList<Inputs.ManagedClusterNodeTypeArgs>? _nodeTypes;

        /// <summary>
        /// One or more `node_type` blocks as defined below.
        /// </summary>
        public InputList<Inputs.ManagedClusterNodeTypeArgs> NodeTypes
        {
            get => _nodeTypes ?? (_nodeTypes = new InputList<Inputs.ManagedClusterNodeTypeArgs>());
            set => _nodeTypes = value;
        }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// Administrator password for the VMs that will be created as part of this cluster.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The name of the Resource Group where the Resource Group should exist. Changing this forces a new Resource Group to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// SKU for this cluster. Changing this forces a new resource to be created. Default is `Basic`, allowed values are either `Basic` or `Standard`.
        /// </summary>
        [Input("sku")]
        public Input<string>? Sku { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Resource Group.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Upgrade wave for the fabric runtime. Default is `Wave0`, allowed value must be one of `Wave0`, `Wave1`, or `Wave2`.
        /// </summary>
        [Input("upgradeWave")]
        public Input<string>? UpgradeWave { get; set; }

        /// <summary>
        /// Administrator password for the VMs that will be created as part of this cluster.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public ManagedClusterArgs()
        {
        }
        public static new ManagedClusterArgs Empty => new ManagedClusterArgs();
    }

    public sealed class ManagedClusterState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Controls how connections to the cluster are authenticated. A `authentication` block as defined below.
        /// </summary>
        [Input("authentication")]
        public Input<Inputs.ManagedClusterAuthenticationGetArgs>? Authentication { get; set; }

        /// <summary>
        /// If true, backup service is enabled.
        /// </summary>
        [Input("backupServiceEnabled")]
        public Input<bool>? BackupServiceEnabled { get; set; }

        /// <summary>
        /// Port to use when connecting to the cluster.
        /// </summary>
        [Input("clientConnectionPort")]
        public Input<int>? ClientConnectionPort { get; set; }

        [Input("customFabricSettings")]
        private InputList<Inputs.ManagedClusterCustomFabricSettingGetArgs>? _customFabricSettings;

        /// <summary>
        /// One or more `custom_fabric_setting` blocks as defined below.
        /// </summary>
        public InputList<Inputs.ManagedClusterCustomFabricSettingGetArgs> CustomFabricSettings
        {
            get => _customFabricSettings ?? (_customFabricSettings = new InputList<Inputs.ManagedClusterCustomFabricSettingGetArgs>());
            set => _customFabricSettings = value;
        }

        /// <summary>
        /// Hostname for the cluster. If unset the cluster's name will be used..
        /// </summary>
        [Input("dnsName")]
        public Input<string>? DnsName { get; set; }

        /// <summary>
        /// If true, DNS service is enabled.
        /// </summary>
        [Input("dnsServiceEnabled")]
        public Input<bool>? DnsServiceEnabled { get; set; }

        /// <summary>
        /// Port that should be used by the Service Fabric Explorer to visualize applications and cluster status.
        /// </summary>
        [Input("httpGatewayPort")]
        public Input<int>? HttpGatewayPort { get; set; }

        [Input("lbRules")]
        private InputList<Inputs.ManagedClusterLbRuleGetArgs>? _lbRules;

        /// <summary>
        /// One or more `lb_rule` blocks as defined below.
        /// </summary>
        public InputList<Inputs.ManagedClusterLbRuleGetArgs> LbRules
        {
            get => _lbRules ?? (_lbRules = new InputList<Inputs.ManagedClusterLbRuleGetArgs>());
            set => _lbRules = value;
        }

        /// <summary>
        /// The Azure Region where the Resource Group should exist. Changing this forces a new Resource Group to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name which should be used for this Resource Group. Changing this forces a new Resource Group to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nodeTypes")]
        private InputList<Inputs.ManagedClusterNodeTypeGetArgs>? _nodeTypes;

        /// <summary>
        /// One or more `node_type` blocks as defined below.
        /// </summary>
        public InputList<Inputs.ManagedClusterNodeTypeGetArgs> NodeTypes
        {
            get => _nodeTypes ?? (_nodeTypes = new InputList<Inputs.ManagedClusterNodeTypeGetArgs>());
            set => _nodeTypes = value;
        }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// Administrator password for the VMs that will be created as part of this cluster.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The name of the Resource Group where the Resource Group should exist. Changing this forces a new Resource Group to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// SKU for this cluster. Changing this forces a new resource to be created. Default is `Basic`, allowed values are either `Basic` or `Standard`.
        /// </summary>
        [Input("sku")]
        public Input<string>? Sku { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Resource Group.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Upgrade wave for the fabric runtime. Default is `Wave0`, allowed value must be one of `Wave0`, `Wave1`, or `Wave2`.
        /// </summary>
        [Input("upgradeWave")]
        public Input<string>? UpgradeWave { get; set; }

        /// <summary>
        /// Administrator password for the VMs that will be created as part of this cluster.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public ManagedClusterState()
        {
        }
        public static new ManagedClusterState Empty => new ManagedClusterState();
    }
}
