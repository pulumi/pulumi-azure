// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ServiceFabric.Outputs
{

    [OutputType]
    public sealed class ManagedClusterNodeType
    {
        /// <summary>
        /// Sets the port range available for applications. Format is `&lt;from_port&gt;-&lt;to_port&gt;`, for example `10000-20000`.
        /// </summary>
        public readonly string ApplicationPortRange;
        /// <summary>
        /// Specifies a list of key/value pairs used to set capacity tags for this node type.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Capacities;
        /// <summary>
        /// The size of the data disk in gigabytes..
        /// </summary>
        public readonly int DataDiskSizeGb;
        /// <summary>
        /// The type of the disk to use for storing data. It can be one of `Premium_LRS`, `Standard_LRS`, or `StandardSSD_LRS`. Defaults to `Standard_LRS`.
        /// </summary>
        public readonly string? DataDiskType;
        /// <summary>
        /// Sets the port range available for the OS. Format is `&lt;from_port&gt;-&lt;to_port&gt;`, for example `10000-20000`. There has to be at least 255 ports available and cannot overlap with `application_port_range`..
        /// </summary>
        public readonly string EphemeralPortRange;
        /// <summary>
        /// The ID of the Resource Group.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// If set the node type can be composed of multiple placement groups.
        /// </summary>
        public readonly bool? MultiplePlacementGroupsEnabled;
        /// <summary>
        /// The name which should be used for this node type.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Specifies a list of placement tags that can be used to indicate where services should run..
        /// </summary>
        public readonly ImmutableDictionary<string, string>? PlacementProperties;
        /// <summary>
        /// If set to true, system services will run on this node type. Only one node type should be marked as primary. Primary node type cannot be deleted or changed once they're created.
        /// </summary>
        public readonly bool? Primary;
        /// <summary>
        /// If set to true, only stateless workloads can run on this node type.
        /// </summary>
        public readonly bool? Stateless;
        /// <summary>
        /// The offer type of the marketplace image cluster VMs will use.
        /// </summary>
        public readonly string VmImageOffer;
        /// <summary>
        /// The publisher of the marketplace image cluster VMs will use.
        /// </summary>
        public readonly string VmImagePublisher;
        /// <summary>
        /// The SKU of the marketplace image cluster VMs will use.
        /// </summary>
        public readonly string VmImageSku;
        /// <summary>
        /// The version of the marketplace image cluster VMs will use.
        /// </summary>
        public readonly string VmImageVersion;
        /// <summary>
        /// The number of instances this node type will launch.
        /// </summary>
        public readonly int VmInstanceCount;
        /// <summary>
        /// One or more `vm_secrets` blocks as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.ManagedClusterNodeTypeVmSecret> VmSecrets;
        /// <summary>
        /// The size of the instances in this node type.
        /// </summary>
        public readonly string VmSize;

        [OutputConstructor]
        private ManagedClusterNodeType(
            string applicationPortRange,

            ImmutableDictionary<string, string>? capacities,

            int dataDiskSizeGb,

            string? dataDiskType,

            string ephemeralPortRange,

            string? id,

            bool? multiplePlacementGroupsEnabled,

            string name,

            ImmutableDictionary<string, string>? placementProperties,

            bool? primary,

            bool? stateless,

            string vmImageOffer,

            string vmImagePublisher,

            string vmImageSku,

            string vmImageVersion,

            int vmInstanceCount,

            ImmutableArray<Outputs.ManagedClusterNodeTypeVmSecret> vmSecrets,

            string vmSize)
        {
            ApplicationPortRange = applicationPortRange;
            Capacities = capacities;
            DataDiskSizeGb = dataDiskSizeGb;
            DataDiskType = dataDiskType;
            EphemeralPortRange = ephemeralPortRange;
            Id = id;
            MultiplePlacementGroupsEnabled = multiplePlacementGroupsEnabled;
            Name = name;
            PlacementProperties = placementProperties;
            Primary = primary;
            Stateless = stateless;
            VmImageOffer = vmImageOffer;
            VmImagePublisher = vmImagePublisher;
            VmImageSku = vmImageSku;
            VmImageVersion = vmImageVersion;
            VmInstanceCount = vmInstanceCount;
            VmSecrets = vmSecrets;
            VmSize = vmSize;
        }
    }
}
