// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ServiceFabric
{
    /// <summary>
    /// ## Import
    /// 
    /// Service Fabric Mesh Application can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:servicefabric/meshApplication:MeshApplication application1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.ServiceFabricMesh/applications/application1
    /// ```
    /// </summary>
    [AzureResourceType("azure:servicefabric/meshApplication:MeshApplication")]
    public partial class MeshApplication : Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies the Azure Region where the Service Fabric Mesh Application should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the Service Fabric Mesh Application. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group in which the Service Fabric Mesh Application exists. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// Any number of `service` block as defined below.
        /// </summary>
        [Output("services")]
        public Output<ImmutableArray<Outputs.MeshApplicationService>> Services { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a MeshApplication resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MeshApplication(string name, MeshApplicationArgs args, CustomResourceOptions? options = null)
            : base("azure:servicefabric/meshApplication:MeshApplication", name, args ?? new MeshApplicationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MeshApplication(string name, Input<string> id, MeshApplicationState? state = null, CustomResourceOptions? options = null)
            : base("azure:servicefabric/meshApplication:MeshApplication", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MeshApplication resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MeshApplication Get(string name, Input<string> id, MeshApplicationState? state = null, CustomResourceOptions? options = null)
        {
            return new MeshApplication(name, id, state, options);
        }
    }

    public sealed class MeshApplicationArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the Azure Region where the Service Fabric Mesh Application should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the Service Fabric Mesh Application. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the Resource Group in which the Service Fabric Mesh Application exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("services", required: true)]
        private InputList<Inputs.MeshApplicationServiceArgs>? _services;

        /// <summary>
        /// Any number of `service` block as defined below.
        /// </summary>
        public InputList<Inputs.MeshApplicationServiceArgs> Services
        {
            get => _services ?? (_services = new InputList<Inputs.MeshApplicationServiceArgs>());
            set => _services = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public MeshApplicationArgs()
        {
        }
    }

    public sealed class MeshApplicationState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the Azure Region where the Service Fabric Mesh Application should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the Service Fabric Mesh Application. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the Resource Group in which the Service Fabric Mesh Application exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        [Input("services")]
        private InputList<Inputs.MeshApplicationServiceGetArgs>? _services;

        /// <summary>
        /// Any number of `service` block as defined below.
        /// </summary>
        public InputList<Inputs.MeshApplicationServiceGetArgs> Services
        {
            get => _services ?? (_services = new InputList<Inputs.MeshApplicationServiceGetArgs>());
            set => _services = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public MeshApplicationState()
        {
        }
    }
}
