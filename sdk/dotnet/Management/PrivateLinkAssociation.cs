// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Management
{
    /// <summary>
    /// Manages a Resource Management Private Link Association.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// using Random = Pulumi.Random;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleClientConfig = Azure.Core.GetClientConfig.Invoke();
    /// 
    ///     var exampleGroup = Azure.Management.GetGroup.Invoke(new()
    ///     {
    ///         Name = exampleClientConfig.Apply(getClientConfigResult =&gt; getClientConfigResult.TenantId),
    ///     });
    /// 
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var examplePrivateLink = new Azure.Management.PrivateLink("examplePrivateLink", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///     });
    /// 
    ///     var exampleRandomUuid = new Random.RandomUuid("exampleRandomUuid");
    /// 
    ///     var examplePrivateLinkAssociation = new Azure.Management.PrivateLinkAssociation("examplePrivateLinkAssociation", new()
    ///     {
    ///         ManagementGroupId = azurerm_management_group.Example.Id,
    ///         ResourceManagementPrivateLinkId = examplePrivateLink.Id,
    ///         PublicNetworkAccessEnabled = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing Private Link Association can be imported into Terraform using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:management/privateLinkAssociation:PrivateLinkAssociation example /providers/Microsoft.Management/managementGroups/00000000-0000-0000-0000-000000000000/providers/Microsoft.Authorization/privateLinkAssociations/00000000-0000-0000-0000-000000000000
    /// ```
    /// </summary>
    [AzureResourceType("azure:management/privateLinkAssociation:PrivateLinkAssociation")]
    public partial class PrivateLinkAssociation : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies the Management Group ID within which this Private Link Association should exist. Changing this forces a new Private Link Association to be created.
        /// 
        /// &gt; **Note:** For now, `management_group_id` must be the ID of [Root Management Group](https://learn.microsoft.com/en-us/azure/governance/management-groups/overview#root-management-group-for-each-directory).
        /// </summary>
        [Output("managementGroupId")]
        public Output<string> ManagementGroupId { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of this Private Link Association, which should be a UUID. If `name` is not provided, a UUID will be generated, you should use the `ignore_changes` attribute to ignore changes to this field. Changing this forces a new Private Link Association to be created.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = new Azure.Management.PrivateLinkAssociation("example", new()
        ///     {
        ///         ManagementGroupId = azurerm_management_group.Example.Id,
        ///         ResourceManagementPrivateLinkId = azurerm_resource_management_private_link.Example.Id,
        ///         PublicNetworkAccessEnabled = true,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Whether public network access is allowed. Changing this forces a new Private Link Association to be created.
        /// </summary>
        [Output("publicNetworkAccessEnabled")]
        public Output<bool> PublicNetworkAccessEnabled { get; private set; } = null!;

        /// <summary>
        /// The Resource ID of Resource Management Private Link. Changing this forces a new Private Link Association to be created.
        /// </summary>
        [Output("resourceManagementPrivateLinkId")]
        public Output<string> ResourceManagementPrivateLinkId { get; private set; } = null!;

        /// <summary>
        /// The Tenant ID.
        /// </summary>
        [Output("tenantId")]
        public Output<string> TenantId { get; private set; } = null!;


        /// <summary>
        /// Create a PrivateLinkAssociation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PrivateLinkAssociation(string name, PrivateLinkAssociationArgs args, CustomResourceOptions? options = null)
            : base("azure:management/privateLinkAssociation:PrivateLinkAssociation", name, args ?? new PrivateLinkAssociationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PrivateLinkAssociation(string name, Input<string> id, PrivateLinkAssociationState? state = null, CustomResourceOptions? options = null)
            : base("azure:management/privateLinkAssociation:PrivateLinkAssociation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PrivateLinkAssociation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PrivateLinkAssociation Get(string name, Input<string> id, PrivateLinkAssociationState? state = null, CustomResourceOptions? options = null)
        {
            return new PrivateLinkAssociation(name, id, state, options);
        }
    }

    public sealed class PrivateLinkAssociationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the Management Group ID within which this Private Link Association should exist. Changing this forces a new Private Link Association to be created.
        /// 
        /// &gt; **Note:** For now, `management_group_id` must be the ID of [Root Management Group](https://learn.microsoft.com/en-us/azure/governance/management-groups/overview#root-management-group-for-each-directory).
        /// </summary>
        [Input("managementGroupId", required: true)]
        public Input<string> ManagementGroupId { get; set; } = null!;

        /// <summary>
        /// Specifies the name of this Private Link Association, which should be a UUID. If `name` is not provided, a UUID will be generated, you should use the `ignore_changes` attribute to ignore changes to this field. Changing this forces a new Private Link Association to be created.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = new Azure.Management.PrivateLinkAssociation("example", new()
        ///     {
        ///         ManagementGroupId = azurerm_management_group.Example.Id,
        ///         ResourceManagementPrivateLinkId = azurerm_resource_management_private_link.Example.Id,
        ///         PublicNetworkAccessEnabled = true,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Whether public network access is allowed. Changing this forces a new Private Link Association to be created.
        /// </summary>
        [Input("publicNetworkAccessEnabled", required: true)]
        public Input<bool> PublicNetworkAccessEnabled { get; set; } = null!;

        /// <summary>
        /// The Resource ID of Resource Management Private Link. Changing this forces a new Private Link Association to be created.
        /// </summary>
        [Input("resourceManagementPrivateLinkId", required: true)]
        public Input<string> ResourceManagementPrivateLinkId { get; set; } = null!;

        public PrivateLinkAssociationArgs()
        {
        }
        public static new PrivateLinkAssociationArgs Empty => new PrivateLinkAssociationArgs();
    }

    public sealed class PrivateLinkAssociationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the Management Group ID within which this Private Link Association should exist. Changing this forces a new Private Link Association to be created.
        /// 
        /// &gt; **Note:** For now, `management_group_id` must be the ID of [Root Management Group](https://learn.microsoft.com/en-us/azure/governance/management-groups/overview#root-management-group-for-each-directory).
        /// </summary>
        [Input("managementGroupId")]
        public Input<string>? ManagementGroupId { get; set; }

        /// <summary>
        /// Specifies the name of this Private Link Association, which should be a UUID. If `name` is not provided, a UUID will be generated, you should use the `ignore_changes` attribute to ignore changes to this field. Changing this forces a new Private Link Association to be created.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = new Azure.Management.PrivateLinkAssociation("example", new()
        ///     {
        ///         ManagementGroupId = azurerm_management_group.Example.Id,
        ///         ResourceManagementPrivateLinkId = azurerm_resource_management_private_link.Example.Id,
        ///         PublicNetworkAccessEnabled = true,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Whether public network access is allowed. Changing this forces a new Private Link Association to be created.
        /// </summary>
        [Input("publicNetworkAccessEnabled")]
        public Input<bool>? PublicNetworkAccessEnabled { get; set; }

        /// <summary>
        /// The Resource ID of Resource Management Private Link. Changing this forces a new Private Link Association to be created.
        /// </summary>
        [Input("resourceManagementPrivateLinkId")]
        public Input<string>? ResourceManagementPrivateLinkId { get; set; }

        /// <summary>
        /// The Tenant ID.
        /// </summary>
        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        public PrivateLinkAssociationState()
        {
        }
        public static new PrivateLinkAssociationState Empty => new PrivateLinkAssociationState();
    }
}
