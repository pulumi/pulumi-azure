// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Management
{
    /// <summary>
    /// Manages a Template Deployment at a Management Group Scope.
    /// 
    /// &gt; **Note:** Deleting a Deployment at the Management Group Scope will not delete any resources created by the deployment.
    /// 
    /// &gt; **Note:** Deployments to a Management Group are always Incrementally applied. Existing resources that are not part of the template will not be removed.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleGroup = Azure.Management.GetGroup.Invoke(new()
    ///     {
    ///         Name = "00000000-0000-0000-0000-000000000000",
    ///     });
    /// 
    ///     var exampleGroupTemplateDeployment = new Azure.Management.GroupTemplateDeployment("exampleGroupTemplateDeployment", new()
    ///     {
    ///         Location = "West Europe",
    ///         ManagementGroupId = exampleGroup.Apply(getGroupResult =&gt; getGroupResult.Id),
    ///         TemplateContent = @"{
    ///   ""$schema"": ""https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"",
    ///   ""contentVersion"": ""1.0.0.0"",
    ///   ""parameters"": {
    ///     ""policyAssignmentName"": {
    ///       ""type"": ""string"",
    ///       ""defaultValue"": ""[guid(parameters('policyDefinitionID'), resourceGroup().name)]"",
    ///       ""metadata"": {
    ///         ""description"": ""Specifies the name of the policy assignment, can be used defined or an idempotent name as the defaultValue provides.""
    ///       }
    ///     },
    ///     ""policyDefinitionID"": {
    ///       ""type"": ""string"",
    ///       ""metadata"": {
    ///         ""description"": ""Specifies the ID of the policy definition or policy set definition being assigned.""
    ///       }
    ///     }
    ///   },
    ///   ""resources"": [
    ///     {
    ///       ""type"": ""Microsoft.Authorization/policyAssignments"",
    ///       ""name"": ""[parameters('policyAssignmentName')]"",
    ///       ""apiVersion"": ""2019-09-01"",
    ///       ""properties"": {
    ///         ""scope"": ""[subscriptionResourceId('Microsoft.Resources/resourceGroups', resourceGroup().name)]"",
    ///         ""policyDefinitionId"": ""[parameters('policyDefinitionID')]""
    ///       }
    ///     }
    ///   ]
    /// }
    /// ",
    ///         ParametersContent = @"{
    ///   ""$schema"": ""https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#"",
    ///   ""contentVersion"": ""1.0.0.0"",
    ///   ""parameters"": {
    ///     ""policyDefinitionID"": {
    ///       ""value"": ""/providers/Microsoft.Authorization/policyDefinitions/0a914e76-4921-4c19-b460-a2d36003525a""
    ///     }
    ///   }
    /// }
    /// ",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.IO;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleGroup = Azure.Management.GetGroup.Invoke(new()
    ///     {
    ///         Name = "00000000-0000-0000-0000-000000000000",
    ///     });
    /// 
    ///     var exampleGroupTemplateDeployment = new Azure.Management.GroupTemplateDeployment("exampleGroupTemplateDeployment", new()
    ///     {
    ///         Location = "West Europe",
    ///         ManagementGroupId = exampleGroup.Apply(getGroupResult =&gt; getGroupResult.Id),
    ///         TemplateContent = File.ReadAllText("templates/example-deploy-template.json"),
    ///         ParametersContent = File.ReadAllText("templates/example-deploy-params.json"),
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleGroup = Azure.Management.GetGroup.Invoke(new()
    ///     {
    ///         Name = "00000000-0000-0000-0000-000000000000",
    ///     });
    /// 
    ///     var exampleTemplateSpecVersion = Azure.Core.GetTemplateSpecVersion.Invoke(new()
    ///     {
    ///         Name = "exampleTemplateForManagementGroup",
    ///         ResourceGroupName = "exampleResourceGroup",
    ///         Version = "v1.0.9",
    ///     });
    /// 
    ///     var exampleGroupTemplateDeployment = new Azure.Management.GroupTemplateDeployment("exampleGroupTemplateDeployment", new()
    ///     {
    ///         Location = "West Europe",
    ///         ManagementGroupId = exampleGroup.Apply(getGroupResult =&gt; getGroupResult.Id),
    ///         TemplateSpecVersionId = exampleTemplateSpecVersion.Apply(getTemplateSpecVersionResult =&gt; getTemplateSpecVersionResult.Id),
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Management Group Template Deployments can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:management/groupTemplateDeployment:GroupTemplateDeployment example /providers/Microsoft.Management/managementGroups/my-management-group-id/providers/Microsoft.Resources/deployments/deploy1
    /// ```
    /// </summary>
    [AzureResourceType("azure:management/groupTemplateDeployment:GroupTemplateDeployment")]
    public partial class GroupTemplateDeployment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Debug Level which should be used for this Resource Group Template Deployment. Possible values are `none`, `requestContent`, `responseContent` and `requestContent, responseContent`.
        /// </summary>
        [Output("debugLevel")]
        public Output<string?> DebugLevel { get; private set; } = null!;

        /// <summary>
        /// The Azure Region where the Template should exist. Changing this forces a new Template to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The ID of the Management Group to apply the Deployment Template to.
        /// </summary>
        [Output("managementGroupId")]
        public Output<string> ManagementGroupId { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Template Deployment. Changing this forces a new Template Deployment to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The JSON Content of the Outputs of the ARM Template Deployment.
        /// </summary>
        [Output("outputContent")]
        public Output<string> OutputContent { get; private set; } = null!;

        /// <summary>
        /// The contents of the ARM Template parameters file - containing a JSON list of parameters.
        /// </summary>
        [Output("parametersContent")]
        public Output<string> ParametersContent { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags which should be assigned to the Template.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The contents of the ARM Template which should be deployed into this Resource Group. Cannot be specified with `template_spec_version_id`.
        /// </summary>
        [Output("templateContent")]
        public Output<string> TemplateContent { get; private set; } = null!;

        /// <summary>
        /// The ID of the Template Spec Version to deploy. Cannot be specified with `template_content`.
        /// </summary>
        [Output("templateSpecVersionId")]
        public Output<string?> TemplateSpecVersionId { get; private set; } = null!;


        /// <summary>
        /// Create a GroupTemplateDeployment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GroupTemplateDeployment(string name, GroupTemplateDeploymentArgs args, CustomResourceOptions? options = null)
            : base("azure:management/groupTemplateDeployment:GroupTemplateDeployment", name, args ?? new GroupTemplateDeploymentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GroupTemplateDeployment(string name, Input<string> id, GroupTemplateDeploymentState? state = null, CustomResourceOptions? options = null)
            : base("azure:management/groupTemplateDeployment:GroupTemplateDeployment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GroupTemplateDeployment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GroupTemplateDeployment Get(string name, Input<string> id, GroupTemplateDeploymentState? state = null, CustomResourceOptions? options = null)
        {
            return new GroupTemplateDeployment(name, id, state, options);
        }
    }

    public sealed class GroupTemplateDeploymentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Debug Level which should be used for this Resource Group Template Deployment. Possible values are `none`, `requestContent`, `responseContent` and `requestContent, responseContent`.
        /// </summary>
        [Input("debugLevel")]
        public Input<string>? DebugLevel { get; set; }

        /// <summary>
        /// The Azure Region where the Template should exist. Changing this forces a new Template to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The ID of the Management Group to apply the Deployment Template to.
        /// </summary>
        [Input("managementGroupId", required: true)]
        public Input<string> ManagementGroupId { get; set; } = null!;

        /// <summary>
        /// The name which should be used for this Template Deployment. Changing this forces a new Template Deployment to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The contents of the ARM Template parameters file - containing a JSON list of parameters.
        /// </summary>
        [Input("parametersContent")]
        public Input<string>? ParametersContent { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Template.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The contents of the ARM Template which should be deployed into this Resource Group. Cannot be specified with `template_spec_version_id`.
        /// </summary>
        [Input("templateContent")]
        public Input<string>? TemplateContent { get; set; }

        /// <summary>
        /// The ID of the Template Spec Version to deploy. Cannot be specified with `template_content`.
        /// </summary>
        [Input("templateSpecVersionId")]
        public Input<string>? TemplateSpecVersionId { get; set; }

        public GroupTemplateDeploymentArgs()
        {
        }
        public static new GroupTemplateDeploymentArgs Empty => new GroupTemplateDeploymentArgs();
    }

    public sealed class GroupTemplateDeploymentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Debug Level which should be used for this Resource Group Template Deployment. Possible values are `none`, `requestContent`, `responseContent` and `requestContent, responseContent`.
        /// </summary>
        [Input("debugLevel")]
        public Input<string>? DebugLevel { get; set; }

        /// <summary>
        /// The Azure Region where the Template should exist. Changing this forces a new Template to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The ID of the Management Group to apply the Deployment Template to.
        /// </summary>
        [Input("managementGroupId")]
        public Input<string>? ManagementGroupId { get; set; }

        /// <summary>
        /// The name which should be used for this Template Deployment. Changing this forces a new Template Deployment to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The JSON Content of the Outputs of the ARM Template Deployment.
        /// </summary>
        [Input("outputContent")]
        public Input<string>? OutputContent { get; set; }

        /// <summary>
        /// The contents of the ARM Template parameters file - containing a JSON list of parameters.
        /// </summary>
        [Input("parametersContent")]
        public Input<string>? ParametersContent { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Template.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The contents of the ARM Template which should be deployed into this Resource Group. Cannot be specified with `template_spec_version_id`.
        /// </summary>
        [Input("templateContent")]
        public Input<string>? TemplateContent { get; set; }

        /// <summary>
        /// The ID of the Template Spec Version to deploy. Cannot be specified with `template_content`.
        /// </summary>
        [Input("templateSpecVersionId")]
        public Input<string>? TemplateSpecVersionId { get; set; }

        public GroupTemplateDeploymentState()
        {
        }
        public static new GroupTemplateDeploymentState Empty => new GroupTemplateDeploymentState();
    }
}
