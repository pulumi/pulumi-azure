// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.AppPlatform
{
    public static class GetSpringCloudApp
    {
        /// <summary>
        /// Use this data source to access information about an existing Spring Cloud Application.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Azure.AppPlatform.GetSpringCloudApp.InvokeAsync(new Azure.AppPlatform.GetSpringCloudAppArgs
        ///         {
        ///             Name = azurerm_spring_cloud_app.Example.Name,
        ///             ResourceGroupName = azurerm_spring_cloud_app.Example.Resource_group_name,
        ///             ServiceName = azurerm_spring_cloud_app.Example.Service_name,
        ///         }));
        ///         this.SpringCloudAppId = example.Apply(example =&gt; example.Id);
        ///     }
        /// 
        ///     [Output("springCloudAppId")]
        ///     public Output&lt;string&gt; SpringCloudAppId { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetSpringCloudAppResult> InvokeAsync(GetSpringCloudAppArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetSpringCloudAppResult>("azure:appplatform/getSpringCloudApp:getSpringCloudApp", args ?? new GetSpringCloudAppArgs(), options.WithVersion());
    }


    public sealed class GetSpringCloudAppArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Spring Cloud Application.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Spring Cloud Application exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the Spring Cloud Service.
        /// </summary>
        [Input("serviceName", required: true)]
        public string ServiceName { get; set; } = null!;

        public GetSpringCloudAppArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetSpringCloudAppResult
    {
        /// <summary>
        /// The Fully Qualified DNS Name.
        /// </summary>
        public readonly string Fqdn;
        /// <summary>
        /// Is only https allowed?
        /// </summary>
        public readonly bool HttpsOnly;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSpringCloudAppIdentityResult> Identities;
        /// <summary>
        /// Does the Spring Cloud Application have public endpoint?
        /// </summary>
        public readonly bool IsPublic;
        public readonly string Name;
        /// <summary>
        /// A `persistent_disk` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSpringCloudAppPersistentDiskResult> PersistentDisks;
        public readonly string ResourceGroupName;
        public readonly string ServiceName;
        /// <summary>
        /// Is End to End TLS Enabled?
        /// </summary>
        public readonly bool TlsEnabled;
        /// <summary>
        /// The public endpoint of the Spring Cloud Application.
        /// </summary>
        public readonly string Url;

        [OutputConstructor]
        private GetSpringCloudAppResult(
            string fqdn,

            bool httpsOnly,

            string id,

            ImmutableArray<Outputs.GetSpringCloudAppIdentityResult> identities,

            bool isPublic,

            string name,

            ImmutableArray<Outputs.GetSpringCloudAppPersistentDiskResult> persistentDisks,

            string resourceGroupName,

            string serviceName,

            bool tlsEnabled,

            string url)
        {
            Fqdn = fqdn;
            HttpsOnly = httpsOnly;
            Id = id;
            Identities = identities;
            IsPublic = isPublic;
            Name = name;
            PersistentDisks = persistentDisks;
            ResourceGroupName = resourceGroupName;
            ServiceName = serviceName;
            TlsEnabled = tlsEnabled;
            Url = url;
        }
    }
}
