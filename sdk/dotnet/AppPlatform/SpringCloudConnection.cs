// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.AppPlatform
{
    /// <summary>
    /// Manages a service connector for spring cloud app.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleAccount = new Azure.CosmosDB.Account("exampleAccount", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         OfferType = "Standard",
    ///         Kind = "GlobalDocumentDB",
    ///         ConsistencyPolicy = new Azure.CosmosDB.Inputs.AccountConsistencyPolicyArgs
    ///         {
    ///             ConsistencyLevel = "BoundedStaleness",
    ///             MaxIntervalInSeconds = 10,
    ///             MaxStalenessPrefix = 200,
    ///         },
    ///         GeoLocations = new[]
    ///         {
    ///             new Azure.CosmosDB.Inputs.AccountGeoLocationArgs
    ///             {
    ///                 Location = exampleResourceGroup.Location,
    ///                 FailoverPriority = 0,
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleSqlDatabase = new Azure.CosmosDB.SqlDatabase("exampleSqlDatabase", new()
    ///     {
    ///         ResourceGroupName = exampleAccount.ResourceGroupName,
    ///         AccountName = exampleAccount.Name,
    ///         Throughput = 400,
    ///     });
    /// 
    ///     var exampleSqlContainer = new Azure.CosmosDB.SqlContainer("exampleSqlContainer", new()
    ///     {
    ///         ResourceGroupName = exampleAccount.ResourceGroupName,
    ///         AccountName = exampleAccount.Name,
    ///         DatabaseName = exampleSqlDatabase.Name,
    ///         PartitionKeyPath = "/definition",
    ///     });
    /// 
    ///     var exampleSpringCloudService = new Azure.AppPlatform.SpringCloudService("exampleSpringCloudService", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///     });
    /// 
    ///     var exampleSpringCloudApp = new Azure.AppPlatform.SpringCloudApp("exampleSpringCloudApp", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         ServiceName = exampleSpringCloudService.Name,
    ///         Identity = new Azure.AppPlatform.Inputs.SpringCloudAppIdentityArgs
    ///         {
    ///             Type = "SystemAssigned",
    ///         },
    ///     });
    /// 
    ///     var exampleSpringCloudJavaDeployment = new Azure.AppPlatform.SpringCloudJavaDeployment("exampleSpringCloudJavaDeployment", new()
    ///     {
    ///         SpringCloudAppId = exampleSpringCloudApp.Id,
    ///     });
    /// 
    ///     var exampleSpringCloudConnection = new Azure.AppPlatform.SpringCloudConnection("exampleSpringCloudConnection", new()
    ///     {
    ///         SpringCloudId = exampleSpringCloudJavaDeployment.Id,
    ///         TargetResourceId = exampleSqlDatabase.Id,
    ///         Authentication = new Azure.AppPlatform.Inputs.SpringCloudConnectionAuthenticationArgs
    ///         {
    ///             Type = "systemAssignedIdentity",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Service Connector for spring cloud can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:appplatform/springCloudConnection:SpringCloudConnection example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.AppPlatform/Spring/springcloud/apps/springcloudapp/deployments/deployment/providers/Microsoft.ServiceLinker/linkers/serviceconnector1
    /// ```
    /// </summary>
    [AzureResourceType("azure:appplatform/springCloudConnection:SpringCloudConnection")]
    public partial class SpringCloudConnection : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The authentication info. An `authentication` block as defined below.
        /// </summary>
        [Output("authentication")]
        public Output<Outputs.SpringCloudConnectionAuthentication> Authentication { get; private set; } = null!;

        /// <summary>
        /// The application client type. Possible values are `none`, `dotnet`, `java`, `python`, `go`, `php`, `ruby`, `django`, `nodejs` and `springBoot`. Defaults to `none`.
        /// </summary>
        [Output("clientType")]
        public Output<string?> ClientType { get; private set; } = null!;

        /// <summary>
        /// The name of the service connection. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// An option to store secret value in secure place. An `secret_store` block as defined below.
        /// </summary>
        [Output("secretStore")]
        public Output<Outputs.SpringCloudConnectionSecretStore?> SecretStore { get; private set; } = null!;

        /// <summary>
        /// The ID of the data source spring cloud. Changing this forces a new resource to be created.
        /// </summary>
        [Output("springCloudId")]
        public Output<string> SpringCloudId { get; private set; } = null!;

        /// <summary>
        /// The ID of the target resource. Changing this forces a new resource to be created. Possible target resources are `Postgres`, `PostgresFlexible`, `Mysql`, `Sql`, `Redis`, `RedisEnterprise`, `CosmosCassandra`, `CosmosGremlin`, `CosmosMongo`, `CosmosSql`, `CosmosTable`, `StorageBlob`, `StorageQueue`, `StorageFile`, `StorageTable`, `AppConfig`, `EventHub`, `ServiceBus`, `SignalR`, `WebPubSub`, `ConfluentKafka`. The integration guide can be found [here](https://learn.microsoft.com/en-us/azure/service-connector/how-to-integrate-postgres).
        /// </summary>
        [Output("targetResourceId")]
        public Output<string> TargetResourceId { get; private set; } = null!;

        /// <summary>
        /// The type of the VNet solution. Possible values are `serviceEndpoint`, `privateLink`.
        /// </summary>
        [Output("vnetSolution")]
        public Output<string?> VnetSolution { get; private set; } = null!;


        /// <summary>
        /// Create a SpringCloudConnection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SpringCloudConnection(string name, SpringCloudConnectionArgs args, CustomResourceOptions? options = null)
            : base("azure:appplatform/springCloudConnection:SpringCloudConnection", name, args ?? new SpringCloudConnectionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SpringCloudConnection(string name, Input<string> id, SpringCloudConnectionState? state = null, CustomResourceOptions? options = null)
            : base("azure:appplatform/springCloudConnection:SpringCloudConnection", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SpringCloudConnection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SpringCloudConnection Get(string name, Input<string> id, SpringCloudConnectionState? state = null, CustomResourceOptions? options = null)
        {
            return new SpringCloudConnection(name, id, state, options);
        }
    }

    public sealed class SpringCloudConnectionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The authentication info. An `authentication` block as defined below.
        /// </summary>
        [Input("authentication", required: true)]
        public Input<Inputs.SpringCloudConnectionAuthenticationArgs> Authentication { get; set; } = null!;

        /// <summary>
        /// The application client type. Possible values are `none`, `dotnet`, `java`, `python`, `go`, `php`, `ruby`, `django`, `nodejs` and `springBoot`. Defaults to `none`.
        /// </summary>
        [Input("clientType")]
        public Input<string>? ClientType { get; set; }

        /// <summary>
        /// The name of the service connection. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// An option to store secret value in secure place. An `secret_store` block as defined below.
        /// </summary>
        [Input("secretStore")]
        public Input<Inputs.SpringCloudConnectionSecretStoreArgs>? SecretStore { get; set; }

        /// <summary>
        /// The ID of the data source spring cloud. Changing this forces a new resource to be created.
        /// </summary>
        [Input("springCloudId", required: true)]
        public Input<string> SpringCloudId { get; set; } = null!;

        /// <summary>
        /// The ID of the target resource. Changing this forces a new resource to be created. Possible target resources are `Postgres`, `PostgresFlexible`, `Mysql`, `Sql`, `Redis`, `RedisEnterprise`, `CosmosCassandra`, `CosmosGremlin`, `CosmosMongo`, `CosmosSql`, `CosmosTable`, `StorageBlob`, `StorageQueue`, `StorageFile`, `StorageTable`, `AppConfig`, `EventHub`, `ServiceBus`, `SignalR`, `WebPubSub`, `ConfluentKafka`. The integration guide can be found [here](https://learn.microsoft.com/en-us/azure/service-connector/how-to-integrate-postgres).
        /// </summary>
        [Input("targetResourceId", required: true)]
        public Input<string> TargetResourceId { get; set; } = null!;

        /// <summary>
        /// The type of the VNet solution. Possible values are `serviceEndpoint`, `privateLink`.
        /// </summary>
        [Input("vnetSolution")]
        public Input<string>? VnetSolution { get; set; }

        public SpringCloudConnectionArgs()
        {
        }
        public static new SpringCloudConnectionArgs Empty => new SpringCloudConnectionArgs();
    }

    public sealed class SpringCloudConnectionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The authentication info. An `authentication` block as defined below.
        /// </summary>
        [Input("authentication")]
        public Input<Inputs.SpringCloudConnectionAuthenticationGetArgs>? Authentication { get; set; }

        /// <summary>
        /// The application client type. Possible values are `none`, `dotnet`, `java`, `python`, `go`, `php`, `ruby`, `django`, `nodejs` and `springBoot`. Defaults to `none`.
        /// </summary>
        [Input("clientType")]
        public Input<string>? ClientType { get; set; }

        /// <summary>
        /// The name of the service connection. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// An option to store secret value in secure place. An `secret_store` block as defined below.
        /// </summary>
        [Input("secretStore")]
        public Input<Inputs.SpringCloudConnectionSecretStoreGetArgs>? SecretStore { get; set; }

        /// <summary>
        /// The ID of the data source spring cloud. Changing this forces a new resource to be created.
        /// </summary>
        [Input("springCloudId")]
        public Input<string>? SpringCloudId { get; set; }

        /// <summary>
        /// The ID of the target resource. Changing this forces a new resource to be created. Possible target resources are `Postgres`, `PostgresFlexible`, `Mysql`, `Sql`, `Redis`, `RedisEnterprise`, `CosmosCassandra`, `CosmosGremlin`, `CosmosMongo`, `CosmosSql`, `CosmosTable`, `StorageBlob`, `StorageQueue`, `StorageFile`, `StorageTable`, `AppConfig`, `EventHub`, `ServiceBus`, `SignalR`, `WebPubSub`, `ConfluentKafka`. The integration guide can be found [here](https://learn.microsoft.com/en-us/azure/service-connector/how-to-integrate-postgres).
        /// </summary>
        [Input("targetResourceId")]
        public Input<string>? TargetResourceId { get; set; }

        /// <summary>
        /// The type of the VNet solution. Possible values are `serviceEndpoint`, `privateLink`.
        /// </summary>
        [Input("vnetSolution")]
        public Input<string>? VnetSolution { get; set; }

        public SpringCloudConnectionState()
        {
        }
        public static new SpringCloudConnectionState Empty => new SpringCloudConnectionState();
    }
}
