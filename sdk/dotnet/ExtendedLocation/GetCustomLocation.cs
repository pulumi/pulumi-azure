// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ExtendedLocation
{
    public static class GetCustomLocation
    {
        /// <summary>
        /// Use this data source to access information about an existing Custom Location within an Extended Location.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.ExtendedLocation.GetCustomLocation.Invoke(new()
        ///     {
        ///         Name = exampleAzurermExtendedLocationCustomLocation.Name,
        ///         ResourceGroupName = exampleAzurermResourceGroup.Name,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["customLocationId"] = example.Apply(getCustomLocationResult =&gt; getCustomLocationResult.Id),
        ///     };
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Microsoft.ExtendedLocation`: 2021-08-15
        /// </summary>
        public static Task<GetCustomLocationResult> InvokeAsync(GetCustomLocationArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCustomLocationResult>("azure:extendedlocation/getCustomLocation:getCustomLocation", args ?? new GetCustomLocationArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Custom Location within an Extended Location.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.ExtendedLocation.GetCustomLocation.Invoke(new()
        ///     {
        ///         Name = exampleAzurermExtendedLocationCustomLocation.Name,
        ///         ResourceGroupName = exampleAzurermResourceGroup.Name,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["customLocationId"] = example.Apply(getCustomLocationResult =&gt; getCustomLocationResult.Id),
        ///     };
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Microsoft.ExtendedLocation`: 2021-08-15
        /// </summary>
        public static Output<GetCustomLocationResult> Invoke(GetCustomLocationInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCustomLocationResult>("azure:extendedlocation/getCustomLocation:getCustomLocation", args ?? new GetCustomLocationInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Custom Location within an Extended Location.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.ExtendedLocation.GetCustomLocation.Invoke(new()
        ///     {
        ///         Name = exampleAzurermExtendedLocationCustomLocation.Name,
        ///         ResourceGroupName = exampleAzurermResourceGroup.Name,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["customLocationId"] = example.Apply(getCustomLocationResult =&gt; getCustomLocationResult.Id),
        ///     };
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Microsoft.ExtendedLocation`: 2021-08-15
        /// </summary>
        public static Output<GetCustomLocationResult> Invoke(GetCustomLocationInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetCustomLocationResult>("azure:extendedlocation/getCustomLocation:getCustomLocation", args ?? new GetCustomLocationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCustomLocationArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Custom Location.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Custom Location exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetCustomLocationArgs()
        {
        }
        public static new GetCustomLocationArgs Empty => new GetCustomLocationArgs();
    }

    public sealed class GetCustomLocationInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Custom Location.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Custom Location exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetCustomLocationInvokeArgs()
        {
        }
        public static new GetCustomLocationInvokeArgs Empty => new GetCustomLocationInvokeArgs();
    }


    [OutputType]
    public sealed class GetCustomLocationResult
    {
        /// <summary>
        /// An `authentication` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCustomLocationAuthenticationResult> Authentications;
        /// <summary>
        /// The list of Cluster Extension IDs.
        /// </summary>
        public readonly ImmutableArray<string> ClusterExtensionIds;
        /// <summary>
        /// The display name of the Custom Location.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// The host resource ID.
        /// </summary>
        public readonly string HostResourceId;
        /// <summary>
        /// The host type of the Custom Location.
        /// </summary>
        public readonly string HostType;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The Azure location where the Custom Location exists.
        /// </summary>
        public readonly string Location;
        public readonly string Name;
        /// <summary>
        /// The namespace of the Custom Location.
        /// </summary>
        public readonly string Namespace;
        public readonly string ResourceGroupName;

        [OutputConstructor]
        private GetCustomLocationResult(
            ImmutableArray<Outputs.GetCustomLocationAuthenticationResult> authentications,

            ImmutableArray<string> clusterExtensionIds,

            string displayName,

            string hostResourceId,

            string hostType,

            string id,

            string location,

            string name,

            string @namespace,

            string resourceGroupName)
        {
            Authentications = authentications;
            ClusterExtensionIds = clusterExtensionIds;
            DisplayName = displayName;
            HostResourceId = hostResourceId;
            HostType = hostType;
            Id = id;
            Location = location;
            Name = name;
            Namespace = @namespace;
            ResourceGroupName = resourceGroupName;
        }
    }
}
