// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Monitoring
{
    /// <summary>
    /// Manages an Alert Processing Rule which suppress notifications.
    /// 
    /// ## Import
    /// 
    /// Alert Processing Rules can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:monitoring/alertProcessingRuleSuppression:AlertProcessingRuleSuppression example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.AlertsManagement/actionRules/actionRule1
    /// ```
    /// </summary>
    [AzureResourceType("azure:monitoring/alertProcessingRuleSuppression:AlertProcessingRuleSuppression")]
    public partial class AlertProcessingRuleSuppression : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A `condition` block as defined below.
        /// </summary>
        [Output("condition")]
        public Output<Outputs.AlertProcessingRuleSuppressionCondition?> Condition { get; private set; } = null!;

        /// <summary>
        /// Specifies a description for the Alert Processing Rule.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Should the Alert Processing Rule be enabled? Defaults to `true`.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Alert Processing Rule. Changing this forces a new Alert Processing Rule to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Alert Processing Rule should exist. Changing this forces a new Alert Processing Rule to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// A `schedule` block as defined below.
        /// </summary>
        [Output("schedule")]
        public Output<Outputs.AlertProcessingRuleSuppressionSchedule?> Schedule { get; private set; } = null!;

        /// <summary>
        /// A list of resource IDs which will be the target of Alert Processing Rule.
        /// </summary>
        [Output("scopes")]
        public Output<ImmutableArray<string>> Scopes { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags which should be assigned to the Alert Processing Rule.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a AlertProcessingRuleSuppression resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AlertProcessingRuleSuppression(string name, AlertProcessingRuleSuppressionArgs args, CustomResourceOptions? options = null)
            : base("azure:monitoring/alertProcessingRuleSuppression:AlertProcessingRuleSuppression", name, args ?? new AlertProcessingRuleSuppressionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AlertProcessingRuleSuppression(string name, Input<string> id, AlertProcessingRuleSuppressionState? state = null, CustomResourceOptions? options = null)
            : base("azure:monitoring/alertProcessingRuleSuppression:AlertProcessingRuleSuppression", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AlertProcessingRuleSuppression resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AlertProcessingRuleSuppression Get(string name, Input<string> id, AlertProcessingRuleSuppressionState? state = null, CustomResourceOptions? options = null)
        {
            return new AlertProcessingRuleSuppression(name, id, state, options);
        }
    }

    public sealed class AlertProcessingRuleSuppressionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A `condition` block as defined below.
        /// </summary>
        [Input("condition")]
        public Input<Inputs.AlertProcessingRuleSuppressionConditionArgs>? Condition { get; set; }

        /// <summary>
        /// Specifies a description for the Alert Processing Rule.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Should the Alert Processing Rule be enabled? Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The name which should be used for this Alert Processing Rule. Changing this forces a new Alert Processing Rule to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Alert Processing Rule should exist. Changing this forces a new Alert Processing Rule to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// A `schedule` block as defined below.
        /// </summary>
        [Input("schedule")]
        public Input<Inputs.AlertProcessingRuleSuppressionScheduleArgs>? Schedule { get; set; }

        [Input("scopes", required: true)]
        private InputList<string>? _scopes;

        /// <summary>
        /// A list of resource IDs which will be the target of Alert Processing Rule.
        /// </summary>
        public InputList<string> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<string>());
            set => _scopes = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Alert Processing Rule.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public AlertProcessingRuleSuppressionArgs()
        {
        }
        public static new AlertProcessingRuleSuppressionArgs Empty => new AlertProcessingRuleSuppressionArgs();
    }

    public sealed class AlertProcessingRuleSuppressionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A `condition` block as defined below.
        /// </summary>
        [Input("condition")]
        public Input<Inputs.AlertProcessingRuleSuppressionConditionGetArgs>? Condition { get; set; }

        /// <summary>
        /// Specifies a description for the Alert Processing Rule.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Should the Alert Processing Rule be enabled? Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The name which should be used for this Alert Processing Rule. Changing this forces a new Alert Processing Rule to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Alert Processing Rule should exist. Changing this forces a new Alert Processing Rule to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// A `schedule` block as defined below.
        /// </summary>
        [Input("schedule")]
        public Input<Inputs.AlertProcessingRuleSuppressionScheduleGetArgs>? Schedule { get; set; }

        [Input("scopes")]
        private InputList<string>? _scopes;

        /// <summary>
        /// A list of resource IDs which will be the target of Alert Processing Rule.
        /// </summary>
        public InputList<string> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<string>());
            set => _scopes = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Alert Processing Rule.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public AlertProcessingRuleSuppressionState()
        {
        }
        public static new AlertProcessingRuleSuppressionState Empty => new AlertProcessingRuleSuppressionState();
    }
}
