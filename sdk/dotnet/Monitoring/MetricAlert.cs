// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Monitoring
{
    /// <summary>
    /// Manages a Metric Alert within Azure Monitor.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/monitor_metric_alert.html.markdown.
    /// </summary>
    public partial class MetricAlert : Pulumi.CustomResource
    {
        /// <summary>
        /// One or more `action` blocks as defined below.
        /// </summary>
        [Output("actions")]
        public Output<ImmutableArray<Outputs.MetricAlertActions>> Actions { get; private set; } = null!;

        /// <summary>
        /// Should the alerts in this Metric Alert be auto resolved? Defaults to `false`.
        /// </summary>
        [Output("autoMitigate")]
        public Output<bool?> AutoMitigate { get; private set; } = null!;

        /// <summary>
        /// One or more `criteria` blocks as defined below.
        /// </summary>
        [Output("criterias")]
        public Output<ImmutableArray<Outputs.MetricAlertCriterias>> Criterias { get; private set; } = null!;

        /// <summary>
        /// The description of this Metric Alert.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Should this Metric Alert be enabled? Defaults to `true`.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// The evaluation frequency of this Metric Alert, represented in ISO 8601 duration format. Possible values are `PT1M`, `PT5M`, `PT15M`, `PT30M` and `PT1H`. Defaults to `PT1M`.
        /// </summary>
        [Output("frequency")]
        public Output<string?> Frequency { get; private set; } = null!;

        /// <summary>
        /// The name of the Metric Alert. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the resource group in which to create the Metric Alert instance.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// A set of strings of resource IDs at which the metric criteria should be applied.
        /// </summary>
        [Output("scopes")]
        public Output<string> Scopes { get; private set; } = null!;

        /// <summary>
        /// The severity of this Metric Alert. Possible values are `0`, `1`, `2`, `3` and `4`. Defaults to `3`.
        /// </summary>
        [Output("severity")]
        public Output<int?> Severity { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, object>> Tags { get; private set; } = null!;

        /// <summary>
        /// The period of time that is used to monitor alert activity, represented in ISO 8601 duration format. This value must be greater than `frequency`. Possible values are `PT1M`, `PT5M`, `PT15M`, `PT30M`, `PT1H`, `PT6H`, `PT12H` and `P1D`. Defaults to `PT5M`.
        /// </summary>
        [Output("windowSize")]
        public Output<string?> WindowSize { get; private set; } = null!;


        /// <summary>
        /// Create a MetricAlert resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MetricAlert(string name, MetricAlertArgs args, CustomResourceOptions? options = null)
            : base("azure:monitoring/metricAlert:MetricAlert", name, args, MakeResourceOptions(options, ""))
        {
        }

        private MetricAlert(string name, Input<string> id, MetricAlertState? state = null, CustomResourceOptions? options = null)
            : base("azure:monitoring/metricAlert:MetricAlert", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MetricAlert resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MetricAlert Get(string name, Input<string> id, MetricAlertState? state = null, CustomResourceOptions? options = null)
        {
            return new MetricAlert(name, id, state, options);
        }
    }

    public sealed class MetricAlertArgs : Pulumi.ResourceArgs
    {
        [Input("actions")]
        private InputList<Inputs.MetricAlertActionsArgs>? _actions;

        /// <summary>
        /// One or more `action` blocks as defined below.
        /// </summary>
        public InputList<Inputs.MetricAlertActionsArgs> Actions
        {
            get => _actions ?? (_actions = new InputList<Inputs.MetricAlertActionsArgs>());
            set => _actions = value;
        }

        /// <summary>
        /// Should the alerts in this Metric Alert be auto resolved? Defaults to `false`.
        /// </summary>
        [Input("autoMitigate")]
        public Input<bool>? AutoMitigate { get; set; }

        [Input("criterias", required: true)]
        private InputList<Inputs.MetricAlertCriteriasArgs>? _criterias;

        /// <summary>
        /// One or more `criteria` blocks as defined below.
        /// </summary>
        public InputList<Inputs.MetricAlertCriteriasArgs> Criterias
        {
            get => _criterias ?? (_criterias = new InputList<Inputs.MetricAlertCriteriasArgs>());
            set => _criterias = value;
        }

        /// <summary>
        /// The description of this Metric Alert.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Should this Metric Alert be enabled? Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The evaluation frequency of this Metric Alert, represented in ISO 8601 duration format. Possible values are `PT1M`, `PT5M`, `PT15M`, `PT30M` and `PT1H`. Defaults to `PT1M`.
        /// </summary>
        [Input("frequency")]
        public Input<string>? Frequency { get; set; }

        /// <summary>
        /// The name of the Metric Alert. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the resource group in which to create the Metric Alert instance.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// A set of strings of resource IDs at which the metric criteria should be applied.
        /// </summary>
        [Input("scopes", required: true)]
        public Input<string> Scopes { get; set; } = null!;

        /// <summary>
        /// The severity of this Metric Alert. Possible values are `0`, `1`, `2`, `3` and `4`. Defaults to `3`.
        /// </summary>
        [Input("severity")]
        public Input<int>? Severity { get; set; }

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        /// <summary>
        /// The period of time that is used to monitor alert activity, represented in ISO 8601 duration format. This value must be greater than `frequency`. Possible values are `PT1M`, `PT5M`, `PT15M`, `PT30M`, `PT1H`, `PT6H`, `PT12H` and `P1D`. Defaults to `PT5M`.
        /// </summary>
        [Input("windowSize")]
        public Input<string>? WindowSize { get; set; }

        public MetricAlertArgs()
        {
        }
    }

    public sealed class MetricAlertState : Pulumi.ResourceArgs
    {
        [Input("actions")]
        private InputList<Inputs.MetricAlertActionsGetArgs>? _actions;

        /// <summary>
        /// One or more `action` blocks as defined below.
        /// </summary>
        public InputList<Inputs.MetricAlertActionsGetArgs> Actions
        {
            get => _actions ?? (_actions = new InputList<Inputs.MetricAlertActionsGetArgs>());
            set => _actions = value;
        }

        /// <summary>
        /// Should the alerts in this Metric Alert be auto resolved? Defaults to `false`.
        /// </summary>
        [Input("autoMitigate")]
        public Input<bool>? AutoMitigate { get; set; }

        [Input("criterias")]
        private InputList<Inputs.MetricAlertCriteriasGetArgs>? _criterias;

        /// <summary>
        /// One or more `criteria` blocks as defined below.
        /// </summary>
        public InputList<Inputs.MetricAlertCriteriasGetArgs> Criterias
        {
            get => _criterias ?? (_criterias = new InputList<Inputs.MetricAlertCriteriasGetArgs>());
            set => _criterias = value;
        }

        /// <summary>
        /// The description of this Metric Alert.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Should this Metric Alert be enabled? Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The evaluation frequency of this Metric Alert, represented in ISO 8601 duration format. Possible values are `PT1M`, `PT5M`, `PT15M`, `PT30M` and `PT1H`. Defaults to `PT1M`.
        /// </summary>
        [Input("frequency")]
        public Input<string>? Frequency { get; set; }

        /// <summary>
        /// The name of the Metric Alert. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the resource group in which to create the Metric Alert instance.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// A set of strings of resource IDs at which the metric criteria should be applied.
        /// </summary>
        [Input("scopes")]
        public Input<string>? Scopes { get; set; }

        /// <summary>
        /// The severity of this Metric Alert. Possible values are `0`, `1`, `2`, `3` and `4`. Defaults to `3`.
        /// </summary>
        [Input("severity")]
        public Input<int>? Severity { get; set; }

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        /// <summary>
        /// The period of time that is used to monitor alert activity, represented in ISO 8601 duration format. This value must be greater than `frequency`. Possible values are `PT1M`, `PT5M`, `PT15M`, `PT30M`, `PT1H`, `PT6H`, `PT12H` and `P1D`. Defaults to `PT5M`.
        /// </summary>
        [Input("windowSize")]
        public Input<string>? WindowSize { get; set; }

        public MetricAlertState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class MetricAlertActionsArgs : Pulumi.ResourceArgs
    {
        [Input("actionGroupId", required: true)]
        public Input<string> ActionGroupId { get; set; } = null!;

        [Input("webhookProperties")]
        private InputMap<string>? _webhookProperties;
        public InputMap<string> WebhookProperties
        {
            get => _webhookProperties ?? (_webhookProperties = new InputMap<string>());
            set => _webhookProperties = value;
        }

        public MetricAlertActionsArgs()
        {
        }
    }

    public sealed class MetricAlertActionsGetArgs : Pulumi.ResourceArgs
    {
        [Input("actionGroupId", required: true)]
        public Input<string> ActionGroupId { get; set; } = null!;

        [Input("webhookProperties")]
        private InputMap<string>? _webhookProperties;
        public InputMap<string> WebhookProperties
        {
            get => _webhookProperties ?? (_webhookProperties = new InputMap<string>());
            set => _webhookProperties = value;
        }

        public MetricAlertActionsGetArgs()
        {
        }
    }

    public sealed class MetricAlertCriteriasArgs : Pulumi.ResourceArgs
    {
        [Input("aggregation", required: true)]
        public Input<string> Aggregation { get; set; } = null!;

        [Input("dimensions")]
        private InputList<MetricAlertCriteriasDimensionsArgs>? _dimensions;
        public InputList<MetricAlertCriteriasDimensionsArgs> Dimensions
        {
            get => _dimensions ?? (_dimensions = new InputList<MetricAlertCriteriasDimensionsArgs>());
            set => _dimensions = value;
        }

        [Input("metricName", required: true)]
        public Input<string> MetricName { get; set; } = null!;

        [Input("metricNamespace", required: true)]
        public Input<string> MetricNamespace { get; set; } = null!;

        [Input("operator", required: true)]
        public Input<string> Operator { get; set; } = null!;

        [Input("threshold", required: true)]
        public Input<double> Threshold { get; set; } = null!;

        public MetricAlertCriteriasArgs()
        {
        }
    }

    public sealed class MetricAlertCriteriasDimensionsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the Metric Alert. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("operator", required: true)]
        public Input<string> Operator { get; set; } = null!;

        [Input("values", required: true)]
        private InputList<string>? _values;
        public InputList<string> Values
        {
            get => _values ?? (_values = new InputList<string>());
            set => _values = value;
        }

        public MetricAlertCriteriasDimensionsArgs()
        {
        }
    }

    public sealed class MetricAlertCriteriasDimensionsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the Metric Alert. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("operator", required: true)]
        public Input<string> Operator { get; set; } = null!;

        [Input("values", required: true)]
        private InputList<string>? _values;
        public InputList<string> Values
        {
            get => _values ?? (_values = new InputList<string>());
            set => _values = value;
        }

        public MetricAlertCriteriasDimensionsGetArgs()
        {
        }
    }

    public sealed class MetricAlertCriteriasGetArgs : Pulumi.ResourceArgs
    {
        [Input("aggregation", required: true)]
        public Input<string> Aggregation { get; set; } = null!;

        [Input("dimensions")]
        private InputList<MetricAlertCriteriasDimensionsGetArgs>? _dimensions;
        public InputList<MetricAlertCriteriasDimensionsGetArgs> Dimensions
        {
            get => _dimensions ?? (_dimensions = new InputList<MetricAlertCriteriasDimensionsGetArgs>());
            set => _dimensions = value;
        }

        [Input("metricName", required: true)]
        public Input<string> MetricName { get; set; } = null!;

        [Input("metricNamespace", required: true)]
        public Input<string> MetricNamespace { get; set; } = null!;

        [Input("operator", required: true)]
        public Input<string> Operator { get; set; } = null!;

        [Input("threshold", required: true)]
        public Input<double> Threshold { get; set; } = null!;

        public MetricAlertCriteriasGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class MetricAlertActions
    {
        public readonly string ActionGroupId;
        public readonly ImmutableDictionary<string, string>? WebhookProperties;

        [OutputConstructor]
        private MetricAlertActions(
            string actionGroupId,
            ImmutableDictionary<string, string>? webhookProperties)
        {
            ActionGroupId = actionGroupId;
            WebhookProperties = webhookProperties;
        }
    }

    [OutputType]
    public sealed class MetricAlertCriterias
    {
        public readonly string Aggregation;
        public readonly ImmutableArray<MetricAlertCriteriasDimensions> Dimensions;
        public readonly string MetricName;
        public readonly string MetricNamespace;
        public readonly string Operator;
        public readonly double Threshold;

        [OutputConstructor]
        private MetricAlertCriterias(
            string aggregation,
            ImmutableArray<MetricAlertCriteriasDimensions> dimensions,
            string metricName,
            string metricNamespace,
            string @operator,
            double threshold)
        {
            Aggregation = aggregation;
            Dimensions = dimensions;
            MetricName = metricName;
            MetricNamespace = metricNamespace;
            Operator = @operator;
            Threshold = threshold;
        }
    }

    [OutputType]
    public sealed class MetricAlertCriteriasDimensions
    {
        /// <summary>
        /// The name of the Metric Alert. Changing this forces a new resource to be created.
        /// </summary>
        public readonly string Name;
        public readonly string Operator;
        public readonly ImmutableArray<string> Values;

        [OutputConstructor]
        private MetricAlertCriteriasDimensions(
            string name,
            string @operator,
            ImmutableArray<string> values)
        {
            Name = name;
            Operator = @operator;
            Values = values;
        }
    }
    }
}
