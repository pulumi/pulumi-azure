// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Monitoring
{
    /// <summary>
    /// Manages a Metric Alert within Azure Monitor.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var mainResourceGroup = new Azure.Core.ResourceGroup("mainResourceGroup", new Azure.Core.ResourceGroupArgs
    ///         {
    ///             Location = "West US",
    ///         });
    ///         var toMonitor = new Azure.Storage.Account("toMonitor", new Azure.Storage.AccountArgs
    ///         {
    ///             ResourceGroupName = mainResourceGroup.Name,
    ///             Location = mainResourceGroup.Location,
    ///             AccountTier = "Standard",
    ///             AccountReplicationType = "LRS",
    ///         });
    ///         var mainActionGroup = new Azure.Monitoring.ActionGroup("mainActionGroup", new Azure.Monitoring.ActionGroupArgs
    ///         {
    ///             ResourceGroupName = mainResourceGroup.Name,
    ///             ShortName = "exampleact",
    ///             WebhookReceivers = 
    ///             {
    ///                 new Azure.Monitoring.Inputs.ActionGroupWebhookReceiverArgs
    ///                 {
    ///                     Name = "callmyapi",
    ///                     ServiceUri = "http://example.com/alert",
    ///                 },
    ///             },
    ///         });
    ///         var example = new Azure.Monitoring.MetricAlert("example", new Azure.Monitoring.MetricAlertArgs
    ///         {
    ///             ResourceGroupName = mainResourceGroup.Name,
    ///             Scopes = 
    ///             {
    ///                 toMonitor.Id,
    ///             },
    ///             Description = "Action will be triggered when Transactions count is greater than 50.",
    ///             Criterias = 
    ///             {
    ///                 new Azure.Monitoring.Inputs.MetricAlertCriteriaArgs
    ///                 {
    ///                     MetricNamespace = "Microsoft.Storage/storageAccounts",
    ///                     MetricName = "Transactions",
    ///                     Aggregation = "Total",
    ///                     Operator = "GreaterThan",
    ///                     Threshold = 50,
    ///                     Dimensions = 
    ///                     {
    ///                         new Azure.Monitoring.Inputs.MetricAlertCriteriaDimensionArgs
    ///                         {
    ///                             Name = "ApiName",
    ///                             Operator = "Include",
    ///                             Values = 
    ///                             {
    ///                                 "*",
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             Actions = 
    ///             {
    ///                 new Azure.Monitoring.Inputs.MetricAlertActionArgs
    ///                 {
    ///                     ActionGroupId = mainActionGroup.Id,
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Metric Alerts can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:monitoring/metricAlert:MetricAlert main /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example-resources/providers/microsoft.insights/metricalerts/example-metricalert
    /// ```
    /// </summary>
    [AzureResourceType("azure:monitoring/metricAlert:MetricAlert")]
    public partial class MetricAlert : Pulumi.CustomResource
    {
        /// <summary>
        /// One or more `action` blocks as defined below.
        /// </summary>
        [Output("actions")]
        public Output<ImmutableArray<Outputs.MetricAlertAction>> Actions { get; private set; } = null!;

        /// <summary>
        /// A `application_insights_web_test_location_availability_criteria` block as defined below.
        /// </summary>
        [Output("applicationInsightsWebTestLocationAvailabilityCriteria")]
        public Output<Outputs.MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteria?> ApplicationInsightsWebTestLocationAvailabilityCriteria { get; private set; } = null!;

        /// <summary>
        /// Should the alerts in this Metric Alert be auto resolved? Defaults to `true`.
        /// </summary>
        [Output("autoMitigate")]
        public Output<bool?> AutoMitigate { get; private set; } = null!;

        /// <summary>
        /// One or more (static) `criteria` blocks as defined below.
        /// </summary>
        [Output("criterias")]
        public Output<ImmutableArray<Outputs.MetricAlertCriteria>> Criterias { get; private set; } = null!;

        /// <summary>
        /// The description of this Metric Alert.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// A `dynamic_criteria` block as defined below.
        /// </summary>
        [Output("dynamicCriteria")]
        public Output<Outputs.MetricAlertDynamicCriteria?> DynamicCriteria { get; private set; } = null!;

        /// <summary>
        /// Should this Metric Alert be enabled? Defaults to `true`.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// The evaluation frequency of this Metric Alert, represented in ISO 8601 duration format. Possible values are `PT1M`, `PT5M`, `PT15M`, `PT30M` and `PT1H`. Defaults to `PT1M`.
        /// </summary>
        [Output("frequency")]
        public Output<string?> Frequency { get; private set; } = null!;

        /// <summary>
        /// The name of the Metric Alert. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the resource group in which to create the Metric Alert instance.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// A set of strings of resource IDs at which the metric criteria should be applied.
        /// </summary>
        [Output("scopes")]
        public Output<ImmutableArray<string>> Scopes { get; private set; } = null!;

        /// <summary>
        /// The severity of this Metric Alert. Possible values are `0`, `1`, `2`, `3` and `4`. Defaults to `3`.
        /// </summary>
        [Output("severity")]
        public Output<int?> Severity { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The location of the target resource.
        /// </summary>
        [Output("targetResourceLocation")]
        public Output<string> TargetResourceLocation { get; private set; } = null!;

        /// <summary>
        /// The resource type (e.g. `Microsoft.Compute/virtualMachines`) of the target resource.
        /// </summary>
        [Output("targetResourceType")]
        public Output<string> TargetResourceType { get; private set; } = null!;

        /// <summary>
        /// The period of time that is used to monitor alert activity, represented in ISO 8601 duration format. This value must be greater than `frequency`. Possible values are `PT1M`, `PT5M`, `PT15M`, `PT30M`, `PT1H`, `PT6H`, `PT12H` and `P1D`. Defaults to `PT5M`.
        /// </summary>
        [Output("windowSize")]
        public Output<string?> WindowSize { get; private set; } = null!;


        /// <summary>
        /// Create a MetricAlert resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MetricAlert(string name, MetricAlertArgs args, CustomResourceOptions? options = null)
            : base("azure:monitoring/metricAlert:MetricAlert", name, args ?? new MetricAlertArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MetricAlert(string name, Input<string> id, MetricAlertState? state = null, CustomResourceOptions? options = null)
            : base("azure:monitoring/metricAlert:MetricAlert", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MetricAlert resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MetricAlert Get(string name, Input<string> id, MetricAlertState? state = null, CustomResourceOptions? options = null)
        {
            return new MetricAlert(name, id, state, options);
        }
    }

    public sealed class MetricAlertArgs : Pulumi.ResourceArgs
    {
        [Input("actions")]
        private InputList<Inputs.MetricAlertActionArgs>? _actions;

        /// <summary>
        /// One or more `action` blocks as defined below.
        /// </summary>
        public InputList<Inputs.MetricAlertActionArgs> Actions
        {
            get => _actions ?? (_actions = new InputList<Inputs.MetricAlertActionArgs>());
            set => _actions = value;
        }

        /// <summary>
        /// A `application_insights_web_test_location_availability_criteria` block as defined below.
        /// </summary>
        [Input("applicationInsightsWebTestLocationAvailabilityCriteria")]
        public Input<Inputs.MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaArgs>? ApplicationInsightsWebTestLocationAvailabilityCriteria { get; set; }

        /// <summary>
        /// Should the alerts in this Metric Alert be auto resolved? Defaults to `true`.
        /// </summary>
        [Input("autoMitigate")]
        public Input<bool>? AutoMitigate { get; set; }

        [Input("criterias")]
        private InputList<Inputs.MetricAlertCriteriaArgs>? _criterias;

        /// <summary>
        /// One or more (static) `criteria` blocks as defined below.
        /// </summary>
        public InputList<Inputs.MetricAlertCriteriaArgs> Criterias
        {
            get => _criterias ?? (_criterias = new InputList<Inputs.MetricAlertCriteriaArgs>());
            set => _criterias = value;
        }

        /// <summary>
        /// The description of this Metric Alert.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// A `dynamic_criteria` block as defined below.
        /// </summary>
        [Input("dynamicCriteria")]
        public Input<Inputs.MetricAlertDynamicCriteriaArgs>? DynamicCriteria { get; set; }

        /// <summary>
        /// Should this Metric Alert be enabled? Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The evaluation frequency of this Metric Alert, represented in ISO 8601 duration format. Possible values are `PT1M`, `PT5M`, `PT15M`, `PT30M` and `PT1H`. Defaults to `PT1M`.
        /// </summary>
        [Input("frequency")]
        public Input<string>? Frequency { get; set; }

        /// <summary>
        /// The name of the Metric Alert. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the resource group in which to create the Metric Alert instance.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("scopes", required: true)]
        private InputList<string>? _scopes;

        /// <summary>
        /// A set of strings of resource IDs at which the metric criteria should be applied.
        /// </summary>
        public InputList<string> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<string>());
            set => _scopes = value;
        }

        /// <summary>
        /// The severity of this Metric Alert. Possible values are `0`, `1`, `2`, `3` and `4`. Defaults to `3`.
        /// </summary>
        [Input("severity")]
        public Input<int>? Severity { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The location of the target resource.
        /// </summary>
        [Input("targetResourceLocation")]
        public Input<string>? TargetResourceLocation { get; set; }

        /// <summary>
        /// The resource type (e.g. `Microsoft.Compute/virtualMachines`) of the target resource.
        /// </summary>
        [Input("targetResourceType")]
        public Input<string>? TargetResourceType { get; set; }

        /// <summary>
        /// The period of time that is used to monitor alert activity, represented in ISO 8601 duration format. This value must be greater than `frequency`. Possible values are `PT1M`, `PT5M`, `PT15M`, `PT30M`, `PT1H`, `PT6H`, `PT12H` and `P1D`. Defaults to `PT5M`.
        /// </summary>
        [Input("windowSize")]
        public Input<string>? WindowSize { get; set; }

        public MetricAlertArgs()
        {
        }
    }

    public sealed class MetricAlertState : Pulumi.ResourceArgs
    {
        [Input("actions")]
        private InputList<Inputs.MetricAlertActionGetArgs>? _actions;

        /// <summary>
        /// One or more `action` blocks as defined below.
        /// </summary>
        public InputList<Inputs.MetricAlertActionGetArgs> Actions
        {
            get => _actions ?? (_actions = new InputList<Inputs.MetricAlertActionGetArgs>());
            set => _actions = value;
        }

        /// <summary>
        /// A `application_insights_web_test_location_availability_criteria` block as defined below.
        /// </summary>
        [Input("applicationInsightsWebTestLocationAvailabilityCriteria")]
        public Input<Inputs.MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaGetArgs>? ApplicationInsightsWebTestLocationAvailabilityCriteria { get; set; }

        /// <summary>
        /// Should the alerts in this Metric Alert be auto resolved? Defaults to `true`.
        /// </summary>
        [Input("autoMitigate")]
        public Input<bool>? AutoMitigate { get; set; }

        [Input("criterias")]
        private InputList<Inputs.MetricAlertCriteriaGetArgs>? _criterias;

        /// <summary>
        /// One or more (static) `criteria` blocks as defined below.
        /// </summary>
        public InputList<Inputs.MetricAlertCriteriaGetArgs> Criterias
        {
            get => _criterias ?? (_criterias = new InputList<Inputs.MetricAlertCriteriaGetArgs>());
            set => _criterias = value;
        }

        /// <summary>
        /// The description of this Metric Alert.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// A `dynamic_criteria` block as defined below.
        /// </summary>
        [Input("dynamicCriteria")]
        public Input<Inputs.MetricAlertDynamicCriteriaGetArgs>? DynamicCriteria { get; set; }

        /// <summary>
        /// Should this Metric Alert be enabled? Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The evaluation frequency of this Metric Alert, represented in ISO 8601 duration format. Possible values are `PT1M`, `PT5M`, `PT15M`, `PT30M` and `PT1H`. Defaults to `PT1M`.
        /// </summary>
        [Input("frequency")]
        public Input<string>? Frequency { get; set; }

        /// <summary>
        /// The name of the Metric Alert. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the resource group in which to create the Metric Alert instance.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        [Input("scopes")]
        private InputList<string>? _scopes;

        /// <summary>
        /// A set of strings of resource IDs at which the metric criteria should be applied.
        /// </summary>
        public InputList<string> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<string>());
            set => _scopes = value;
        }

        /// <summary>
        /// The severity of this Metric Alert. Possible values are `0`, `1`, `2`, `3` and `4`. Defaults to `3`.
        /// </summary>
        [Input("severity")]
        public Input<int>? Severity { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The location of the target resource.
        /// </summary>
        [Input("targetResourceLocation")]
        public Input<string>? TargetResourceLocation { get; set; }

        /// <summary>
        /// The resource type (e.g. `Microsoft.Compute/virtualMachines`) of the target resource.
        /// </summary>
        [Input("targetResourceType")]
        public Input<string>? TargetResourceType { get; set; }

        /// <summary>
        /// The period of time that is used to monitor alert activity, represented in ISO 8601 duration format. This value must be greater than `frequency`. Possible values are `PT1M`, `PT5M`, `PT15M`, `PT30M`, `PT1H`, `PT6H`, `PT12H` and `P1D`. Defaults to `PT5M`.
        /// </summary>
        [Input("windowSize")]
        public Input<string>? WindowSize { get; set; }

        public MetricAlertState()
        {
        }
    }
}
