// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Monitoring
{
    /// <summary>
    /// Manages a AutoScale Setting which can be applied to Virtual Machine Scale Sets, App Services and other scalable resources.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Core.ResourceGroup.ResourceGroup("example", new()
    ///     {
    ///         Name = "autoscalingTest",
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleVirtualNetwork = new Azure.Network.VirtualNetwork.VirtualNetwork("example", new()
    ///     {
    ///         Name = "acctvn",
    ///         AddressSpaces = new[]
    ///         {
    ///             "10.0.0.0/16",
    ///         },
    ///         Location = example.Location,
    ///         ResourceGroupName = example.Name,
    ///     });
    /// 
    ///     var exampleSubnet = new Azure.Network.Subnet.Subnet("example", new()
    ///     {
    ///         Name = "acctsub",
    ///         ResourceGroupName = example.Name,
    ///         VirtualNetworkName = exampleVirtualNetwork.Name,
    ///         AddressPrefixes = new[]
    ///         {
    ///             "10.0.2.0/24",
    ///         },
    ///     });
    /// 
    ///     var exampleLinuxVirtualMachineScaleSet = new Azure.Compute.LinuxVirtualMachineScaleSet.LinuxVirtualMachineScaleSet("example", new()
    ///     {
    ///         Name = "exampleset",
    ///         Location = example.Location,
    ///         ResourceGroupName = example.Name,
    ///         UpgradeMode = "Manual",
    ///         Sku = "Standard_F2",
    ///         Instances = 2,
    ///         AdminUsername = "myadmin",
    ///         AdminSshKeys = new[]
    ///         {
    ///             
    ///             {
    ///                 { "username", "myadmin" },
    ///                 { "publicKey", "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDCsTcryUl51Q2VSEHqDRNmceUFo55ZtcIwxl2QITbN1RREti5ml/VTytC0yeBOvnZA4x4CFpdw/lCDPk0yrH9Ei5vVkXmOrExdTlT3qI7YaAzj1tUVlBd4S6LX1F7y6VLActvdHuDDuXZXzCDd/97420jrDfWZqJMlUK/EmCE5ParCeHIRIvmBxcEnGfFIsw8xQZl0HphxWOtJil8qsUWSdMyCiJYYQpMoMliO99X40AUc4/AlsyPyT5ddbKk08YrZ+rKDVHF7o29rh4vi5MmHkVgVQHKiKybWlHq+b71gIAUQk9wrJxD+dqt4igrmDSpIjfjwnd+l5UIn5fJSO5DYV4YT/4hwK7OKmuo7OFHD0WyY5YnkYEMtFgzemnRBdE8ulcT60DQpVgRMXFWHvhyCWy0L6sgj1QWDZlLpvsIvNfHsyhKFMG1frLnMt/nP0+YCcfg+v1JYeCKjeoJxB8DWcRBsjzItY0CGmzP8UYZiYKl/2u+2TgFS5r7NWH11bxoUzjKdaa1NLw+ieA8GlBFfCbfWe6YVB9ggUte4VtYFMZGxOjS2bAiYtfgTKFJv+XqORAwExG6+G2eDxIDyo80/OA9IG7Xv/jwQr7D6KDjDuULFcN/iTxuttoKrHeYz1hf5ZQlBdllwJHYx6fK2g8kha6r2JIQKocvsAXiiONqSfw== hello@world.com" },
    ///             },
    ///         },
    ///         NetworkInterfaces = new[]
    ///         {
    ///             
    ///             {
    ///                 { "name", "TestNetworkProfile" },
    ///                 { "primary", true },
    ///                 { "ipConfigurations", new[]
    ///                 {
    ///                     
    ///                     {
    ///                         { "name", "TestIPConfiguration" },
    ///                         { "primary", true },
    ///                         { "subnetId", exampleSubnet.Id },
    ///                     },
    ///                 } },
    ///             },
    ///         },
    ///         OsDisk = 
    ///         {
    ///             { "caching", "ReadWrite" },
    ///             { "storageAccountType", "StandardSSD_LRS" },
    ///         },
    ///         SourceImageReference = 
    ///         {
    ///             { "publisher", "Canonical" },
    ///             { "offer", "0001-com-ubuntu-server-jammy" },
    ///             { "sku", "22_04-lts" },
    ///             { "version", "latest" },
    ///         },
    ///     });
    /// 
    ///     var exampleAutoscaleSetting = new Azure.Monitoring.AutoscaleSetting.AutoscaleSetting("example", new()
    ///     {
    ///         Name = "myAutoscaleSetting",
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///         TargetResourceId = exampleLinuxVirtualMachineScaleSet.Id,
    ///         Profiles = new[]
    ///         {
    ///             
    ///             {
    ///                 { "name", "defaultProfile" },
    ///                 { "capacity", 
    ///                 {
    ///                     { "default", 1 },
    ///                     { "minimum", 1 },
    ///                     { "maximum", 10 },
    ///                 } },
    ///                 { "rules", new[]
    ///                 {
    ///                     
    ///                     {
    ///                         { "metricTrigger", 
    ///                         {
    ///                             { "metricName", "Percentage CPU" },
    ///                             { "metricResourceId", exampleLinuxVirtualMachineScaleSet.Id },
    ///                             { "timeGrain", "PT1M" },
    ///                             { "statistic", "Average" },
    ///                             { "timeWindow", "PT5M" },
    ///                             { "timeAggregation", "Average" },
    ///                             { "operator", "GreaterThan" },
    ///                             { "threshold", 75 },
    ///                             { "metricNamespace", "microsoft.compute/virtualmachinescalesets" },
    ///                             { "dimensions", new[]
    ///                             {
    ///                                 
    ///                                 {
    ///                                     { "name", "AppName" },
    ///                                     { "operator", "Equals" },
    ///                                     { "values", new[]
    ///                                     {
    ///                                         "App1",
    ///                                     } },
    ///                                 },
    ///                             } },
    ///                         } },
    ///                         { "scaleAction", 
    ///                         {
    ///                             { "direction", "Increase" },
    ///                             { "type", "ChangeCount" },
    ///                             { "value", "1" },
    ///                             { "cooldown", "PT1M" },
    ///                         } },
    ///                     },
    ///                     
    ///                     {
    ///                         { "metricTrigger", 
    ///                         {
    ///                             { "metricName", "Percentage CPU" },
    ///                             { "metricResourceId", exampleLinuxVirtualMachineScaleSet.Id },
    ///                             { "timeGrain", "PT1M" },
    ///                             { "statistic", "Average" },
    ///                             { "timeWindow", "PT5M" },
    ///                             { "timeAggregation", "Average" },
    ///                             { "operator", "LessThan" },
    ///                             { "threshold", 25 },
    ///                         } },
    ///                         { "scaleAction", 
    ///                         {
    ///                             { "direction", "Decrease" },
    ///                             { "type", "ChangeCount" },
    ///                             { "value", "1" },
    ///                             { "cooldown", "PT1M" },
    ///                         } },
    ///                     },
    ///                 } },
    ///             },
    ///         },
    ///         Predictive = 
    ///         {
    ///             { "scaleMode", "Enabled" },
    ///             { "lookAheadTime", "PT5M" },
    ///         },
    ///         Notification = 
    ///         {
    ///             { "email", 
    ///             {
    ///                 { "sendToSubscriptionAdministrator", true },
    ///                 { "sendToSubscriptionCoAdministrator", true },
    ///                 { "customEmails", new[]
    ///                 {
    ///                     "admin@contoso.com",
    ///                 } },
    ///             } },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Repeating On Weekends)
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Core.ResourceGroup.ResourceGroup("example", new()
    ///     {
    ///         Name = "autoscalingTest",
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleVirtualNetwork = new Azure.Network.VirtualNetwork.VirtualNetwork("example", new()
    ///     {
    ///         Name = "acctvn",
    ///         AddressSpaces = new[]
    ///         {
    ///             "10.0.0.0/16",
    ///         },
    ///         Location = example.Location,
    ///         ResourceGroupName = example.Name,
    ///     });
    /// 
    ///     var exampleSubnet = new Azure.Network.Subnet.Subnet("example", new()
    ///     {
    ///         Name = "acctsub",
    ///         ResourceGroupName = example.Name,
    ///         VirtualNetworkName = exampleVirtualNetwork.Name,
    ///         AddressPrefixes = new[]
    ///         {
    ///             "10.0.2.0/24",
    ///         },
    ///     });
    /// 
    ///     var exampleLinuxVirtualMachineScaleSet = new Azure.Compute.LinuxVirtualMachineScaleSet.LinuxVirtualMachineScaleSet("example", new()
    ///     {
    ///         Name = "exampleset",
    ///         Location = example.Location,
    ///         ResourceGroupName = example.Name,
    ///         UpgradeMode = "Manual",
    ///         Sku = "Standard_F2",
    ///         Instances = 2,
    ///         AdminUsername = "myadmin",
    ///         AdminSshKeys = new[]
    ///         {
    ///             
    ///             {
    ///                 { "username", "myadmin" },
    ///                 { "publicKey", "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDCsTcryUl51Q2VSEHqDRNmceUFo55ZtcIwxl2QITbN1RREti5ml/VTytC0yeBOvnZA4x4CFpdw/lCDPk0yrH9Ei5vVkXmOrExdTlT3qI7YaAzj1tUVlBd4S6LX1F7y6VLActvdHuDDuXZXzCDd/97420jrDfWZqJMlUK/EmCE5ParCeHIRIvmBxcEnGfFIsw8xQZl0HphxWOtJil8qsUWSdMyCiJYYQpMoMliO99X40AUc4/AlsyPyT5ddbKk08YrZ+rKDVHF7o29rh4vi5MmHkVgVQHKiKybWlHq+b71gIAUQk9wrJxD+dqt4igrmDSpIjfjwnd+l5UIn5fJSO5DYV4YT/4hwK7OKmuo7OFHD0WyY5YnkYEMtFgzemnRBdE8ulcT60DQpVgRMXFWHvhyCWy0L6sgj1QWDZlLpvsIvNfHsyhKFMG1frLnMt/nP0+YCcfg+v1JYeCKjeoJxB8DWcRBsjzItY0CGmzP8UYZiYKl/2u+2TgFS5r7NWH11bxoUzjKdaa1NLw+ieA8GlBFfCbfWe6YVB9ggUte4VtYFMZGxOjS2bAiYtfgTKFJv+XqORAwExG6+G2eDxIDyo80/OA9IG7Xv/jwQr7D6KDjDuULFcN/iTxuttoKrHeYz1hf5ZQlBdllwJHYx6fK2g8kha6r2JIQKocvsAXiiONqSfw== hello@world.com" },
    ///             },
    ///         },
    ///         NetworkInterfaces = new[]
    ///         {
    ///             
    ///             {
    ///                 { "name", "TestNetworkProfile" },
    ///                 { "primary", true },
    ///                 { "ipConfigurations", new[]
    ///                 {
    ///                     
    ///                     {
    ///                         { "name", "TestIPConfiguration" },
    ///                         { "primary", true },
    ///                         { "subnetId", exampleSubnet.Id },
    ///                     },
    ///                 } },
    ///             },
    ///         },
    ///         OsDisk = 
    ///         {
    ///             { "caching", "ReadWrite" },
    ///             { "storageAccountType", "StandardSSD_LRS" },
    ///         },
    ///         SourceImageReference = 
    ///         {
    ///             { "publisher", "Canonical" },
    ///             { "offer", "0001-com-ubuntu-server-jammy" },
    ///             { "sku", "22_04-lts" },
    ///             { "version", "latest" },
    ///         },
    ///     });
    /// 
    ///     var exampleAutoscaleSetting = new Azure.Monitoring.AutoscaleSetting.AutoscaleSetting("example", new()
    ///     {
    ///         Name = "myAutoscaleSetting",
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///         TargetResourceId = exampleLinuxVirtualMachineScaleSet.Id,
    ///         Profiles = new[]
    ///         {
    ///             
    ///             {
    ///                 { "name", "Weekends" },
    ///                 { "capacity", 
    ///                 {
    ///                     { "default", 1 },
    ///                     { "minimum", 1 },
    ///                     { "maximum", 10 },
    ///                 } },
    ///                 { "rules", new[]
    ///                 {
    ///                     
    ///                     {
    ///                         { "metricTrigger", 
    ///                         {
    ///                             { "metricName", "Percentage CPU" },
    ///                             { "metricResourceId", exampleLinuxVirtualMachineScaleSet.Id },
    ///                             { "timeGrain", "PT1M" },
    ///                             { "statistic", "Average" },
    ///                             { "timeWindow", "PT5M" },
    ///                             { "timeAggregation", "Average" },
    ///                             { "operator", "GreaterThan" },
    ///                             { "threshold", 90 },
    ///                         } },
    ///                         { "scaleAction", 
    ///                         {
    ///                             { "direction", "Increase" },
    ///                             { "type", "ChangeCount" },
    ///                             { "value", "2" },
    ///                             { "cooldown", "PT1M" },
    ///                         } },
    ///                     },
    ///                     
    ///                     {
    ///                         { "metricTrigger", 
    ///                         {
    ///                             { "metricName", "Percentage CPU" },
    ///                             { "metricResourceId", exampleLinuxVirtualMachineScaleSet.Id },
    ///                             { "timeGrain", "PT1M" },
    ///                             { "statistic", "Average" },
    ///                             { "timeWindow", "PT5M" },
    ///                             { "timeAggregation", "Average" },
    ///                             { "operator", "LessThan" },
    ///                             { "threshold", 10 },
    ///                         } },
    ///                         { "scaleAction", 
    ///                         {
    ///                             { "direction", "Decrease" },
    ///                             { "type", "ChangeCount" },
    ///                             { "value", "2" },
    ///                             { "cooldown", "PT1M" },
    ///                         } },
    ///                     },
    ///                 } },
    ///                 { "recurrence", 
    ///                 {
    ///                     { "timezone", "Pacific Standard Time" },
    ///                     { "days", new[]
    ///                     {
    ///                         "Saturday",
    ///                         "Sunday",
    ///                     } },
    ///                     { "hours", 12 },
    ///                     { "minutes", 0 },
    ///                 } },
    ///             },
    ///         },
    ///         Notification = 
    ///         {
    ///             { "email", 
    ///             {
    ///                 { "sendToSubscriptionAdministrator", true },
    ///                 { "sendToSubscriptionCoAdministrator", true },
    ///                 { "customEmails", new[]
    ///                 {
    ///                     "admin@contoso.com",
    ///                 } },
    ///             } },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### For Fixed Dates)
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Core.ResourceGroup.ResourceGroup("example", new()
    ///     {
    ///         Name = "autoscalingTest",
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleVirtualNetwork = new Azure.Network.VirtualNetwork.VirtualNetwork("example", new()
    ///     {
    ///         Name = "acctvn",
    ///         AddressSpaces = new[]
    ///         {
    ///             "10.0.0.0/16",
    ///         },
    ///         Location = example.Location,
    ///         ResourceGroupName = example.Name,
    ///     });
    /// 
    ///     var exampleSubnet = new Azure.Network.Subnet.Subnet("example", new()
    ///     {
    ///         Name = "acctsub",
    ///         ResourceGroupName = example.Name,
    ///         VirtualNetworkName = exampleVirtualNetwork.Name,
    ///         AddressPrefixes = new[]
    ///         {
    ///             "10.0.2.0/24",
    ///         },
    ///     });
    /// 
    ///     var exampleLinuxVirtualMachineScaleSet = new Azure.Compute.LinuxVirtualMachineScaleSet.LinuxVirtualMachineScaleSet("example", new()
    ///     {
    ///         Name = "exampleset",
    ///         Location = example.Location,
    ///         ResourceGroupName = example.Name,
    ///         UpgradeMode = "Manual",
    ///         Sku = "Standard_F2",
    ///         Instances = 2,
    ///         AdminUsername = "myadmin",
    ///         AdminSshKeys = new[]
    ///         {
    ///             
    ///             {
    ///                 { "username", "myadmin" },
    ///                 { "publicKey", "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDCsTcryUl51Q2VSEHqDRNmceUFo55ZtcIwxl2QITbN1RREti5ml/VTytC0yeBOvnZA4x4CFpdw/lCDPk0yrH9Ei5vVkXmOrExdTlT3qI7YaAzj1tUVlBd4S6LX1F7y6VLActvdHuDDuXZXzCDd/97420jrDfWZqJMlUK/EmCE5ParCeHIRIvmBxcEnGfFIsw8xQZl0HphxWOtJil8qsUWSdMyCiJYYQpMoMliO99X40AUc4/AlsyPyT5ddbKk08YrZ+rKDVHF7o29rh4vi5MmHkVgVQHKiKybWlHq+b71gIAUQk9wrJxD+dqt4igrmDSpIjfjwnd+l5UIn5fJSO5DYV4YT/4hwK7OKmuo7OFHD0WyY5YnkYEMtFgzemnRBdE8ulcT60DQpVgRMXFWHvhyCWy0L6sgj1QWDZlLpvsIvNfHsyhKFMG1frLnMt/nP0+YCcfg+v1JYeCKjeoJxB8DWcRBsjzItY0CGmzP8UYZiYKl/2u+2TgFS5r7NWH11bxoUzjKdaa1NLw+ieA8GlBFfCbfWe6YVB9ggUte4VtYFMZGxOjS2bAiYtfgTKFJv+XqORAwExG6+G2eDxIDyo80/OA9IG7Xv/jwQr7D6KDjDuULFcN/iTxuttoKrHeYz1hf5ZQlBdllwJHYx6fK2g8kha6r2JIQKocvsAXiiONqSfw== hello@world.com" },
    ///             },
    ///         },
    ///         NetworkInterfaces = new[]
    ///         {
    ///             
    ///             {
    ///                 { "name", "TestNetworkProfile" },
    ///                 { "primary", true },
    ///                 { "ipConfigurations", new[]
    ///                 {
    ///                     
    ///                     {
    ///                         { "name", "TestIPConfiguration" },
    ///                         { "primary", true },
    ///                         { "subnetId", exampleSubnet.Id },
    ///                     },
    ///                 } },
    ///             },
    ///         },
    ///         OsDisk = 
    ///         {
    ///             { "caching", "ReadWrite" },
    ///             { "storageAccountType", "StandardSSD_LRS" },
    ///         },
    ///         SourceImageReference = 
    ///         {
    ///             { "publisher", "Canonical" },
    ///             { "offer", "0001-com-ubuntu-server-jammy" },
    ///             { "sku", "22_04-lts" },
    ///             { "version", "latest" },
    ///         },
    ///     });
    /// 
    ///     var exampleAutoscaleSetting = new Azure.Monitoring.AutoscaleSetting.AutoscaleSetting("example", new()
    ///     {
    ///         Name = "myAutoscaleSetting",
    ///         Enabled = true,
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///         TargetResourceId = exampleLinuxVirtualMachineScaleSet.Id,
    ///         Profiles = new[]
    ///         {
    ///             
    ///             {
    ///                 { "name", "forJuly" },
    ///                 { "capacity", 
    ///                 {
    ///                     { "default", 1 },
    ///                     { "minimum", 1 },
    ///                     { "maximum", 10 },
    ///                 } },
    ///                 { "rules", new[]
    ///                 {
    ///                     
    ///                     {
    ///                         { "metricTrigger", 
    ///                         {
    ///                             { "metricName", "Percentage CPU" },
    ///                             { "metricResourceId", exampleLinuxVirtualMachineScaleSet.Id },
    ///                             { "timeGrain", "PT1M" },
    ///                             { "statistic", "Average" },
    ///                             { "timeWindow", "PT5M" },
    ///                             { "timeAggregation", "Average" },
    ///                             { "operator", "GreaterThan" },
    ///                             { "threshold", 90 },
    ///                         } },
    ///                         { "scaleAction", 
    ///                         {
    ///                             { "direction", "Increase" },
    ///                             { "type", "ChangeCount" },
    ///                             { "value", "2" },
    ///                             { "cooldown", "PT1M" },
    ///                         } },
    ///                     },
    ///                     
    ///                     {
    ///                         { "metricTrigger", 
    ///                         {
    ///                             { "metricName", "Percentage CPU" },
    ///                             { "metricResourceId", exampleLinuxVirtualMachineScaleSet.Id },
    ///                             { "timeGrain", "PT1M" },
    ///                             { "statistic", "Average" },
    ///                             { "timeWindow", "PT5M" },
    ///                             { "timeAggregation", "Average" },
    ///                             { "operator", "LessThan" },
    ///                             { "threshold", 10 },
    ///                         } },
    ///                         { "scaleAction", 
    ///                         {
    ///                             { "direction", "Decrease" },
    ///                             { "type", "ChangeCount" },
    ///                             { "value", "2" },
    ///                             { "cooldown", "PT1M" },
    ///                         } },
    ///                     },
    ///                 } },
    ///                 { "fixedDate", 
    ///                 {
    ///                     { "timezone", "Pacific Standard Time" },
    ///                     { "start", "2020-07-01T00:00:00Z" },
    ///                     { "end", "2020-07-31T23:59:59Z" },
    ///                 } },
    ///             },
    ///         },
    ///         Notification = 
    ///         {
    ///             { "email", 
    ///             {
    ///                 { "sendToSubscriptionAdministrator", true },
    ///                 { "sendToSubscriptionCoAdministrator", true },
    ///                 { "customEmails", new[]
    ///                 {
    ///                     "admin@contoso.com",
    ///                 } },
    ///             } },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// AutoScale Setting can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:monitoring/autoscaleSetting:AutoscaleSetting example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Insights/autoScaleSettings/setting1
    /// ```
    /// </summary>
    [AzureResourceType("azure:monitoring/autoscaleSetting:AutoscaleSetting")]
    public partial class AutoscaleSetting : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies whether automatic scaling is enabled for the target resource. Defaults to `true`.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// Specifies the supported Azure location where the AutoScale Setting should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the AutoScale Setting. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Specifies a `notification` block as defined below.
        /// </summary>
        [Output("notification")]
        public Output<Outputs.AutoscaleSettingNotification?> Notification { get; private set; } = null!;

        /// <summary>
        /// A `predictive` block as defined below.
        /// </summary>
        [Output("predictive")]
        public Output<Outputs.AutoscaleSettingPredictive?> Predictive { get; private set; } = null!;

        /// <summary>
        /// Specifies one or more (up to 20) `profile` blocks as defined below.
        /// </summary>
        [Output("profiles")]
        public Output<ImmutableArray<Outputs.AutoscaleSettingProfile>> Profiles { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group in the AutoScale Setting should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Specifies the resource ID of the resource that the autoscale setting should be added to. Changing this forces a new resource to be created.
        /// </summary>
        [Output("targetResourceId")]
        public Output<string> TargetResourceId { get; private set; } = null!;


        /// <summary>
        /// Create a AutoscaleSetting resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AutoscaleSetting(string name, AutoscaleSettingArgs args, CustomResourceOptions? options = null)
            : base("azure:monitoring/autoscaleSetting:AutoscaleSetting", name, args ?? new AutoscaleSettingArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AutoscaleSetting(string name, Input<string> id, AutoscaleSettingState? state = null, CustomResourceOptions? options = null)
            : base("azure:monitoring/autoscaleSetting:AutoscaleSetting", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AutoscaleSetting resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AutoscaleSetting Get(string name, Input<string> id, AutoscaleSettingState? state = null, CustomResourceOptions? options = null)
        {
            return new AutoscaleSetting(name, id, state, options);
        }
    }

    public sealed class AutoscaleSettingArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies whether automatic scaling is enabled for the target resource. Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Specifies the supported Azure location where the AutoScale Setting should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the AutoScale Setting. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies a `notification` block as defined below.
        /// </summary>
        [Input("notification")]
        public Input<Inputs.AutoscaleSettingNotificationArgs>? Notification { get; set; }

        /// <summary>
        /// A `predictive` block as defined below.
        /// </summary>
        [Input("predictive")]
        public Input<Inputs.AutoscaleSettingPredictiveArgs>? Predictive { get; set; }

        [Input("profiles", required: true)]
        private InputList<Inputs.AutoscaleSettingProfileArgs>? _profiles;

        /// <summary>
        /// Specifies one or more (up to 20) `profile` blocks as defined below.
        /// </summary>
        public InputList<Inputs.AutoscaleSettingProfileArgs> Profiles
        {
            get => _profiles ?? (_profiles = new InputList<Inputs.AutoscaleSettingProfileArgs>());
            set => _profiles = value;
        }

        /// <summary>
        /// The name of the Resource Group in the AutoScale Setting should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Specifies the resource ID of the resource that the autoscale setting should be added to. Changing this forces a new resource to be created.
        /// </summary>
        [Input("targetResourceId", required: true)]
        public Input<string> TargetResourceId { get; set; } = null!;

        public AutoscaleSettingArgs()
        {
        }
        public static new AutoscaleSettingArgs Empty => new AutoscaleSettingArgs();
    }

    public sealed class AutoscaleSettingState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies whether automatic scaling is enabled for the target resource. Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Specifies the supported Azure location where the AutoScale Setting should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the AutoScale Setting. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies a `notification` block as defined below.
        /// </summary>
        [Input("notification")]
        public Input<Inputs.AutoscaleSettingNotificationGetArgs>? Notification { get; set; }

        /// <summary>
        /// A `predictive` block as defined below.
        /// </summary>
        [Input("predictive")]
        public Input<Inputs.AutoscaleSettingPredictiveGetArgs>? Predictive { get; set; }

        [Input("profiles")]
        private InputList<Inputs.AutoscaleSettingProfileGetArgs>? _profiles;

        /// <summary>
        /// Specifies one or more (up to 20) `profile` blocks as defined below.
        /// </summary>
        public InputList<Inputs.AutoscaleSettingProfileGetArgs> Profiles
        {
            get => _profiles ?? (_profiles = new InputList<Inputs.AutoscaleSettingProfileGetArgs>());
            set => _profiles = value;
        }

        /// <summary>
        /// The name of the Resource Group in the AutoScale Setting should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Specifies the resource ID of the resource that the autoscale setting should be added to. Changing this forces a new resource to be created.
        /// </summary>
        [Input("targetResourceId")]
        public Input<string>? TargetResourceId { get; set; }

        public AutoscaleSettingState()
        {
        }
        public static new AutoscaleSettingState Empty => new AutoscaleSettingState();
    }
}
