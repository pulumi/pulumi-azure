// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Monitoring
{
    public static class GetDataCollectionRule
    {
        /// <summary>
        /// Use this data source to access information about an existing Data Collection Rule.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Monitoring.GetDataCollectionRule.Invoke(new()
        ///     {
        ///         Name = "example-rule",
        ///         ResourceGroupName = azurerm_resource_group.Example.Name,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["ruleId"] = example.Apply(getDataCollectionRuleResult =&gt; getDataCollectionRuleResult.Id),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetDataCollectionRuleResult> InvokeAsync(GetDataCollectionRuleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDataCollectionRuleResult>("azure:monitoring/getDataCollectionRule:getDataCollectionRule", args ?? new GetDataCollectionRuleArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Data Collection Rule.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Monitoring.GetDataCollectionRule.Invoke(new()
        ///     {
        ///         Name = "example-rule",
        ///         ResourceGroupName = azurerm_resource_group.Example.Name,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["ruleId"] = example.Apply(getDataCollectionRuleResult =&gt; getDataCollectionRuleResult.Id),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetDataCollectionRuleResult> Invoke(GetDataCollectionRuleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDataCollectionRuleResult>("azure:monitoring/getDataCollectionRule:getDataCollectionRule", args ?? new GetDataCollectionRuleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDataCollectionRuleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the name of the Data Collection Rule.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the resource group the Data Collection Rule is located in.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetDataCollectionRuleArgs()
        {
        }
        public static new GetDataCollectionRuleArgs Empty => new GetDataCollectionRuleArgs();
    }

    public sealed class GetDataCollectionRuleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the name of the Data Collection Rule.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the resource group the Data Collection Rule is located in.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetDataCollectionRuleInvokeArgs()
        {
        }
        public static new GetDataCollectionRuleInvokeArgs Empty => new GetDataCollectionRuleInvokeArgs();
    }


    [OutputType]
    public sealed class GetDataCollectionRuleResult
    {
        /// <summary>
        /// One or more `data_flow` blocks as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDataCollectionRuleDataFlowResult> DataFlows;
        /// <summary>
        /// A `data_sources` block as defined below. This property is optional and can be omitted if the rule is meant to be used via direct calls to the provisioned endpoint.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDataCollectionRuleDataSourceResult> DataSources;
        /// <summary>
        /// The description of the Data Collection Rule.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Specifies a list of destination names. A `azure_monitor_metrics` data source only allows for stream of kind `Microsoft-InsightsMetrics`.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDataCollectionRuleDestinationResult> Destinations;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The kind of the Data Collection Rule. Possible values are `Linux` and `Windows`. A rule of kind `Linux` does not allow for `windows_event_log` data sources. And a rule of kind `Windows` does not allow for `syslog` data sources. If kind is not specified, all kinds of data sources are allowed.
        /// </summary>
        public readonly string Kind;
        /// <summary>
        /// The Azure Region where the Data Collection Rule should exist. Changing this forces a new Data Collection Rule to be created.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
        /// </summary>
        public readonly string Name;
        public readonly string ResourceGroupName;
        /// <summary>
        /// A mapping of tags which should be assigned to the Data Collection Rule.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;

        [OutputConstructor]
        private GetDataCollectionRuleResult(
            ImmutableArray<Outputs.GetDataCollectionRuleDataFlowResult> dataFlows,

            ImmutableArray<Outputs.GetDataCollectionRuleDataSourceResult> dataSources,

            string description,

            ImmutableArray<Outputs.GetDataCollectionRuleDestinationResult> destinations,

            string id,

            string kind,

            string location,

            string name,

            string resourceGroupName,

            ImmutableDictionary<string, string> tags)
        {
            DataFlows = dataFlows;
            DataSources = dataSources;
            Description = description;
            Destinations = destinations;
            Id = id;
            Kind = kind;
            Location = location;
            Name = name;
            ResourceGroupName = resourceGroupName;
            Tags = tags;
        }
    }
}
