// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Monitoring
{
    public static partial class Invokes
    {
        /// <summary>
        /// Use this data source to access the properties of an AlertingAction scheduled query rule.
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/d/monitor_scheduled_query_rules_alert.html.markdown.
        /// </summary>
        [Obsolete("Use GetScheduledQueryRulesAlert.InvokeAsync() instead")]
        public static Task<GetScheduledQueryRulesAlertResult> GetScheduledQueryRulesAlert(GetScheduledQueryRulesAlertArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetScheduledQueryRulesAlertResult>("azure:monitoring/getScheduledQueryRulesAlert:getScheduledQueryRulesAlert", args ?? InvokeArgs.Empty, options.WithVersion());
    }
    public static class GetScheduledQueryRulesAlert
    {
        /// <summary>
        /// Use this data source to access the properties of an AlertingAction scheduled query rule.
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/d/monitor_scheduled_query_rules_alert.html.markdown.
        /// </summary>
        public static Task<GetScheduledQueryRulesAlertResult> InvokeAsync(GetScheduledQueryRulesAlertArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetScheduledQueryRulesAlertResult>("azure:monitoring/getScheduledQueryRulesAlert:getScheduledQueryRulesAlert", args ?? InvokeArgs.Empty, options.WithVersion());
    }

    public sealed class GetScheduledQueryRulesAlertArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the name of the scheduled query rule.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the resource group where the scheduled query rule is located.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetScheduledQueryRulesAlertArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetScheduledQueryRulesAlertResult
    {
        /// <summary>
        /// An `action` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetScheduledQueryRulesAlertActionsResult> Actions;
        /// <summary>
        /// List of Resource IDs referred into query.
        /// </summary>
        public readonly ImmutableArray<string> AuthorizedResourceIds;
        /// <summary>
        /// The resource URI over which log search query is to be run.
        /// </summary>
        public readonly string DataSourceId;
        /// <summary>
        /// The description of the scheduled query rule.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Whether this scheduled query rule is enabled.
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// Frequency at which rule condition should be evaluated.
        /// </summary>
        public readonly int Frequency;
        public readonly string Location;
        public readonly string Name;
        /// <summary>
        /// Log search query.
        /// </summary>
        public readonly string Query;
        public readonly string QueryType;
        public readonly string ResourceGroupName;
        /// <summary>
        /// Severity of the alert.
        /// </summary>
        public readonly int Severity;
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// Time for which alerts should be throttled or suppressed.
        /// </summary>
        public readonly int Throttling;
        /// <summary>
        /// Time window for which data needs to be fetched for query.
        /// </summary>
        public readonly int TimeWindow;
        /// <summary>
        /// A `trigger` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetScheduledQueryRulesAlertTriggersResult> Triggers;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetScheduledQueryRulesAlertResult(
            ImmutableArray<Outputs.GetScheduledQueryRulesAlertActionsResult> actions,
            ImmutableArray<string> authorizedResourceIds,
            string dataSourceId,
            string description,
            bool enabled,
            int frequency,
            string location,
            string name,
            string query,
            string queryType,
            string resourceGroupName,
            int severity,
            ImmutableDictionary<string, string> tags,
            int throttling,
            int timeWindow,
            ImmutableArray<Outputs.GetScheduledQueryRulesAlertTriggersResult> triggers,
            string id)
        {
            Actions = actions;
            AuthorizedResourceIds = authorizedResourceIds;
            DataSourceId = dataSourceId;
            Description = description;
            Enabled = enabled;
            Frequency = frequency;
            Location = location;
            Name = name;
            Query = query;
            QueryType = queryType;
            ResourceGroupName = resourceGroupName;
            Severity = severity;
            Tags = tags;
            Throttling = throttling;
            TimeWindow = timeWindow;
            Triggers = triggers;
            Id = id;
        }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class GetScheduledQueryRulesAlertActionsResult
    {
        /// <summary>
        /// List of action group reference resource IDs.
        /// </summary>
        public readonly ImmutableArray<string> ActionGroups;
        /// <summary>
        /// Custom payload to be sent for all webhook URI in Azure action group.
        /// </summary>
        public readonly string CustomWebhookPayload;
        /// <summary>
        /// Custom subject override for all email IDs in Azure action group.
        /// </summary>
        public readonly string EmailSubject;

        [OutputConstructor]
        private GetScheduledQueryRulesAlertActionsResult(
            ImmutableArray<string> actionGroups,
            string customWebhookPayload,
            string emailSubject)
        {
            ActionGroups = actionGroups;
            CustomWebhookPayload = customWebhookPayload;
            EmailSubject = emailSubject;
        }
    }

    [OutputType]
    public sealed class GetScheduledQueryRulesAlertTriggersMetricTriggersResult
    {
        public readonly string MetricColumn;
        public readonly string MetricTriggerType;
        /// <summary>
        /// Evaluation operation for rule.
        /// </summary>
        public readonly string Operator;
        /// <summary>
        /// Result or count threshold based on which rule should be triggered.
        /// </summary>
        public readonly double Threshold;

        [OutputConstructor]
        private GetScheduledQueryRulesAlertTriggersMetricTriggersResult(
            string metricColumn,
            string metricTriggerType,
            string @operator,
            double threshold)
        {
            MetricColumn = metricColumn;
            MetricTriggerType = metricTriggerType;
            Operator = @operator;
            Threshold = threshold;
        }
    }

    [OutputType]
    public sealed class GetScheduledQueryRulesAlertTriggersResult
    {
        public readonly ImmutableArray<GetScheduledQueryRulesAlertTriggersMetricTriggersResult> MetricTriggers;
        /// <summary>
        /// Evaluation operation for rule.
        /// </summary>
        public readonly string Operator;
        /// <summary>
        /// Result or count threshold based on which rule should be triggered.
        /// </summary>
        public readonly double Threshold;

        [OutputConstructor]
        private GetScheduledQueryRulesAlertTriggersResult(
            ImmutableArray<GetScheduledQueryRulesAlertTriggersMetricTriggersResult> metricTriggers,
            string @operator,
            double threshold)
        {
            MetricTriggers = metricTriggers;
            Operator = @operator;
            Threshold = threshold;
        }
    }
    }
}
