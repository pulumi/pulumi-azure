// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Monitoring
{
    /// <summary>
    /// Manages an Alert Processing Rule which apply action group.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleActionGroup = new Azure.Monitoring.ActionGroup("exampleActionGroup", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         ShortName = "action",
    ///     });
    /// 
    ///     var exampleAlertProcessingRuleActionGroup = new Azure.Monitoring.AlertProcessingRuleActionGroup("exampleAlertProcessingRuleActionGroup", new()
    ///     {
    ///         ResourceGroupName = "example",
    ///         Scopes = new[]
    ///         {
    ///             exampleResourceGroup.Id,
    ///         },
    ///         AddActionGroupIds = new[]
    ///         {
    ///             exampleActionGroup.Id,
    ///         },
    ///         Condition = new Azure.Monitoring.Inputs.AlertProcessingRuleActionGroupConditionArgs
    ///         {
    ///             TargetResourceType = new Azure.Monitoring.Inputs.AlertProcessingRuleActionGroupConditionTargetResourceTypeArgs
    ///             {
    ///                 Operator = "Equals",
    ///                 Values = new[]
    ///                 {
    ///                     "Microsoft.Compute/VirtualMachines",
    ///                 },
    ///             },
    ///             Severity = new Azure.Monitoring.Inputs.AlertProcessingRuleActionGroupConditionSeverityArgs
    ///             {
    ///                 Operator = "Equals",
    ///                 Values = new[]
    ///                 {
    ///                     "Sev0",
    ///                     "Sev1",
    ///                     "Sev2",
    ///                 },
    ///             },
    ///         },
    ///         Schedule = new Azure.Monitoring.Inputs.AlertProcessingRuleActionGroupScheduleArgs
    ///         {
    ///             EffectiveFrom = "2022-01-01T01:02:03",
    ///             EffectiveUntil = "2022-02-02T01:02:03",
    ///             TimeZone = "Pacific Standard Time",
    ///             Recurrence = new Azure.Monitoring.Inputs.AlertProcessingRuleActionGroupScheduleRecurrenceArgs
    ///             {
    ///                 Dailies = new[]
    ///                 {
    ///                     new Azure.Monitoring.Inputs.AlertProcessingRuleActionGroupScheduleRecurrenceDailyArgs
    ///                     {
    ///                         StartTime = "17:00:00",
    ///                         EndTime = "09:00:00",
    ///                     },
    ///                 },
    ///                 Weeklies = new[]
    ///                 {
    ///                     new Azure.Monitoring.Inputs.AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyArgs
    ///                     {
    ///                         DaysOfWeeks = new[]
    ///                         {
    ///                             "Saturday",
    ///                             "Sunday",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Tags = 
    ///         {
    ///             { "foo", "bar" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Alert Processing Rules can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:monitoring/alertProcessingRuleActionGroup:AlertProcessingRuleActionGroup example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.AlertsManagement/actionRules/actionRule1
    /// ```
    /// </summary>
    [AzureResourceType("azure:monitoring/alertProcessingRuleActionGroup:AlertProcessingRuleActionGroup")]
    public partial class AlertProcessingRuleActionGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies a list of Action Group IDs.
        /// </summary>
        [Output("addActionGroupIds")]
        public Output<ImmutableArray<string>> AddActionGroupIds { get; private set; } = null!;

        /// <summary>
        /// A `condition` block as defined below.
        /// </summary>
        [Output("condition")]
        public Output<Outputs.AlertProcessingRuleActionGroupCondition?> Condition { get; private set; } = null!;

        /// <summary>
        /// Specifies a description for the Alert Processing Rule.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Should the Alert Processing Rule be enabled? Defaults to `true`.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Alert Processing Rule. Changing this forces a new Alert Processing Rule to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Alert Processing Rule should exist. Changing this forces a new Alert Processing Rule to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// A `schedule` block as defined below.
        /// </summary>
        [Output("schedule")]
        public Output<Outputs.AlertProcessingRuleActionGroupSchedule?> Schedule { get; private set; } = null!;

        /// <summary>
        /// A list of resource IDs which will be the target of alert processing rule.
        /// </summary>
        [Output("scopes")]
        public Output<ImmutableArray<string>> Scopes { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags which should be assigned to the Alert Processing Rule.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a AlertProcessingRuleActionGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AlertProcessingRuleActionGroup(string name, AlertProcessingRuleActionGroupArgs args, CustomResourceOptions? options = null)
            : base("azure:monitoring/alertProcessingRuleActionGroup:AlertProcessingRuleActionGroup", name, args ?? new AlertProcessingRuleActionGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AlertProcessingRuleActionGroup(string name, Input<string> id, AlertProcessingRuleActionGroupState? state = null, CustomResourceOptions? options = null)
            : base("azure:monitoring/alertProcessingRuleActionGroup:AlertProcessingRuleActionGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AlertProcessingRuleActionGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AlertProcessingRuleActionGroup Get(string name, Input<string> id, AlertProcessingRuleActionGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new AlertProcessingRuleActionGroup(name, id, state, options);
        }
    }

    public sealed class AlertProcessingRuleActionGroupArgs : global::Pulumi.ResourceArgs
    {
        [Input("addActionGroupIds", required: true)]
        private InputList<string>? _addActionGroupIds;

        /// <summary>
        /// Specifies a list of Action Group IDs.
        /// </summary>
        public InputList<string> AddActionGroupIds
        {
            get => _addActionGroupIds ?? (_addActionGroupIds = new InputList<string>());
            set => _addActionGroupIds = value;
        }

        /// <summary>
        /// A `condition` block as defined below.
        /// </summary>
        [Input("condition")]
        public Input<Inputs.AlertProcessingRuleActionGroupConditionArgs>? Condition { get; set; }

        /// <summary>
        /// Specifies a description for the Alert Processing Rule.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Should the Alert Processing Rule be enabled? Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The name which should be used for this Alert Processing Rule. Changing this forces a new Alert Processing Rule to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Alert Processing Rule should exist. Changing this forces a new Alert Processing Rule to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// A `schedule` block as defined below.
        /// </summary>
        [Input("schedule")]
        public Input<Inputs.AlertProcessingRuleActionGroupScheduleArgs>? Schedule { get; set; }

        [Input("scopes", required: true)]
        private InputList<string>? _scopes;

        /// <summary>
        /// A list of resource IDs which will be the target of alert processing rule.
        /// </summary>
        public InputList<string> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<string>());
            set => _scopes = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Alert Processing Rule.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public AlertProcessingRuleActionGroupArgs()
        {
        }
        public static new AlertProcessingRuleActionGroupArgs Empty => new AlertProcessingRuleActionGroupArgs();
    }

    public sealed class AlertProcessingRuleActionGroupState : global::Pulumi.ResourceArgs
    {
        [Input("addActionGroupIds")]
        private InputList<string>? _addActionGroupIds;

        /// <summary>
        /// Specifies a list of Action Group IDs.
        /// </summary>
        public InputList<string> AddActionGroupIds
        {
            get => _addActionGroupIds ?? (_addActionGroupIds = new InputList<string>());
            set => _addActionGroupIds = value;
        }

        /// <summary>
        /// A `condition` block as defined below.
        /// </summary>
        [Input("condition")]
        public Input<Inputs.AlertProcessingRuleActionGroupConditionGetArgs>? Condition { get; set; }

        /// <summary>
        /// Specifies a description for the Alert Processing Rule.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Should the Alert Processing Rule be enabled? Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The name which should be used for this Alert Processing Rule. Changing this forces a new Alert Processing Rule to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Alert Processing Rule should exist. Changing this forces a new Alert Processing Rule to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// A `schedule` block as defined below.
        /// </summary>
        [Input("schedule")]
        public Input<Inputs.AlertProcessingRuleActionGroupScheduleGetArgs>? Schedule { get; set; }

        [Input("scopes")]
        private InputList<string>? _scopes;

        /// <summary>
        /// A list of resource IDs which will be the target of alert processing rule.
        /// </summary>
        public InputList<string> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<string>());
            set => _scopes = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Alert Processing Rule.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public AlertProcessingRuleActionGroupState()
        {
        }
        public static new AlertProcessingRuleActionGroupState Empty => new AlertProcessingRuleActionGroupState();
    }
}
