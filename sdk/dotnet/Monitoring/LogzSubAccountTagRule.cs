// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Monitoring
{
    /// <summary>
    /// Manages a Logz Sub Account Tag Rule.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleLogzMonitor = new Azure.Monitoring.LogzMonitor("exampleLogzMonitor", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         Plan = new Azure.Monitoring.Inputs.LogzMonitorPlanArgs
    ///         {
    ///             BillingCycle = "MONTHLY",
    ///             EffectiveDate = "2022-06-06T00:00:00Z",
    ///             PlanId = "100gb14days",
    ///             UsageType = "COMMITTED",
    ///         },
    ///         User = new Azure.Monitoring.Inputs.LogzMonitorUserArgs
    ///         {
    ///             Email = "user@example.com",
    ///             FirstName = "Example",
    ///             LastName = "User",
    ///             PhoneNumber = "+12313803556",
    ///         },
    ///     });
    /// 
    ///     var exampleLogzSubAccount = new Azure.Monitoring.LogzSubAccount("exampleLogzSubAccount", new()
    ///     {
    ///         LogzMonitorId = exampleLogzMonitor.Id,
    ///         User = new Azure.Monitoring.Inputs.LogzSubAccountUserArgs
    ///         {
    ///             Email = exampleLogzMonitor.User.Apply(user =&gt; user.Email),
    ///             FirstName = exampleLogzMonitor.User.Apply(user =&gt; user.FirstName),
    ///             LastName = exampleLogzMonitor.User.Apply(user =&gt; user.LastName),
    ///             PhoneNumber = exampleLogzMonitor.User.Apply(user =&gt; user.PhoneNumber),
    ///         },
    ///     });
    /// 
    ///     var exampleLogzSubAccountTagRule = new Azure.Monitoring.LogzSubAccountTagRule("exampleLogzSubAccountTagRule", new()
    ///     {
    ///         LogzSubAccountId = exampleLogzSubAccount.Id,
    ///         SendAadLogs = true,
    ///         SendActivityLogs = true,
    ///         SendSubscriptionLogs = true,
    ///         TagFilters = new[]
    ///         {
    ///             new Azure.Monitoring.Inputs.LogzSubAccountTagRuleTagFilterArgs
    ///             {
    ///                 Name = "name1",
    ///                 Action = "Include",
    ///                 Value = "value1",
    ///             },
    ///             new Azure.Monitoring.Inputs.LogzSubAccountTagRuleTagFilterArgs
    ///             {
    ///                 Name = "name2",
    ///                 Action = "Exclude",
    ///                 Value = "value2",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Logz Sub Account Tag Rules can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:monitoring/logzSubAccountTagRule:LogzSubAccountTagRule example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Logz/monitors/monitor1/accounts/subAccount1/tagRules/ruleSet1
    /// ```
    /// </summary>
    [AzureResourceType("azure:monitoring/logzSubAccountTagRule:LogzSubAccountTagRule")]
    public partial class LogzSubAccountTagRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the Logz Sub Account. Changing this forces a new Logz Sub Account Tag Rule to be created.
        /// </summary>
        [Output("logzSubAccountId")]
        public Output<string> LogzSubAccountId { get; private set; } = null!;

        /// <summary>
        /// Whether AAD logs should be sent to the Monitor resource?
        /// </summary>
        [Output("sendAadLogs")]
        public Output<bool?> SendAadLogs { get; private set; } = null!;

        /// <summary>
        /// Whether activity logs from this Logz Sub Account Tag Rule should be sent to the Monitor resource?
        /// </summary>
        [Output("sendActivityLogs")]
        public Output<bool?> SendActivityLogs { get; private set; } = null!;

        /// <summary>
        /// Whether subscription logs should be sent to the Monitor resource?
        /// </summary>
        [Output("sendSubscriptionLogs")]
        public Output<bool?> SendSubscriptionLogs { get; private set; } = null!;

        /// <summary>
        /// One or more (up to 10) `tag_filter` blocks as defined below.
        /// </summary>
        [Output("tagFilters")]
        public Output<ImmutableArray<Outputs.LogzSubAccountTagRuleTagFilter>> TagFilters { get; private set; } = null!;


        /// <summary>
        /// Create a LogzSubAccountTagRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LogzSubAccountTagRule(string name, LogzSubAccountTagRuleArgs args, CustomResourceOptions? options = null)
            : base("azure:monitoring/logzSubAccountTagRule:LogzSubAccountTagRule", name, args ?? new LogzSubAccountTagRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LogzSubAccountTagRule(string name, Input<string> id, LogzSubAccountTagRuleState? state = null, CustomResourceOptions? options = null)
            : base("azure:monitoring/logzSubAccountTagRule:LogzSubAccountTagRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LogzSubAccountTagRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LogzSubAccountTagRule Get(string name, Input<string> id, LogzSubAccountTagRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new LogzSubAccountTagRule(name, id, state, options);
        }
    }

    public sealed class LogzSubAccountTagRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Logz Sub Account. Changing this forces a new Logz Sub Account Tag Rule to be created.
        /// </summary>
        [Input("logzSubAccountId", required: true)]
        public Input<string> LogzSubAccountId { get; set; } = null!;

        /// <summary>
        /// Whether AAD logs should be sent to the Monitor resource?
        /// </summary>
        [Input("sendAadLogs")]
        public Input<bool>? SendAadLogs { get; set; }

        /// <summary>
        /// Whether activity logs from this Logz Sub Account Tag Rule should be sent to the Monitor resource?
        /// </summary>
        [Input("sendActivityLogs")]
        public Input<bool>? SendActivityLogs { get; set; }

        /// <summary>
        /// Whether subscription logs should be sent to the Monitor resource?
        /// </summary>
        [Input("sendSubscriptionLogs")]
        public Input<bool>? SendSubscriptionLogs { get; set; }

        [Input("tagFilters")]
        private InputList<Inputs.LogzSubAccountTagRuleTagFilterArgs>? _tagFilters;

        /// <summary>
        /// One or more (up to 10) `tag_filter` blocks as defined below.
        /// </summary>
        public InputList<Inputs.LogzSubAccountTagRuleTagFilterArgs> TagFilters
        {
            get => _tagFilters ?? (_tagFilters = new InputList<Inputs.LogzSubAccountTagRuleTagFilterArgs>());
            set => _tagFilters = value;
        }

        public LogzSubAccountTagRuleArgs()
        {
        }
        public static new LogzSubAccountTagRuleArgs Empty => new LogzSubAccountTagRuleArgs();
    }

    public sealed class LogzSubAccountTagRuleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Logz Sub Account. Changing this forces a new Logz Sub Account Tag Rule to be created.
        /// </summary>
        [Input("logzSubAccountId")]
        public Input<string>? LogzSubAccountId { get; set; }

        /// <summary>
        /// Whether AAD logs should be sent to the Monitor resource?
        /// </summary>
        [Input("sendAadLogs")]
        public Input<bool>? SendAadLogs { get; set; }

        /// <summary>
        /// Whether activity logs from this Logz Sub Account Tag Rule should be sent to the Monitor resource?
        /// </summary>
        [Input("sendActivityLogs")]
        public Input<bool>? SendActivityLogs { get; set; }

        /// <summary>
        /// Whether subscription logs should be sent to the Monitor resource?
        /// </summary>
        [Input("sendSubscriptionLogs")]
        public Input<bool>? SendSubscriptionLogs { get; set; }

        [Input("tagFilters")]
        private InputList<Inputs.LogzSubAccountTagRuleTagFilterGetArgs>? _tagFilters;

        /// <summary>
        /// One or more (up to 10) `tag_filter` blocks as defined below.
        /// </summary>
        public InputList<Inputs.LogzSubAccountTagRuleTagFilterGetArgs> TagFilters
        {
            get => _tagFilters ?? (_tagFilters = new InputList<Inputs.LogzSubAccountTagRuleTagFilterGetArgs>());
            set => _tagFilters = value;
        }

        public LogzSubAccountTagRuleState()
        {
        }
        public static new LogzSubAccountTagRuleState Empty => new LogzSubAccountTagRuleState();
    }
}
