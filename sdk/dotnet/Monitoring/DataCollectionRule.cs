// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Monitoring
{
    /// <summary>
    /// Manages a Data Collection Rule.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Core.ResourceGroup.ResourceGroup("example", new()
    ///     {
    ///         Name = "example-resources",
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleUserAssignedIdentity = new Azure.Authorization.UserAssignedIdentity.UserAssignedIdentity("example", new()
    ///     {
    ///         Name = "example-uai",
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///     });
    /// 
    ///     var exampleAnalyticsWorkspace = new Azure.Operationalinsights.AnalyticsWorkspace.AnalyticsWorkspace("example", new()
    ///     {
    ///         Name = "example-workspace",
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///     });
    /// 
    ///     var exampleAnalyticsSolution = new Azure.Operationalinsights.AnalyticsSolution.AnalyticsSolution("example", new()
    ///     {
    ///         SolutionName = "WindowsEventForwarding",
    ///         Location = example.Location,
    ///         ResourceGroupName = example.Name,
    ///         WorkspaceResourceId = exampleAnalyticsWorkspace.Id,
    ///         WorkspaceName = exampleAnalyticsWorkspace.Name,
    ///         Plan = 
    ///         {
    ///             { "publisher", "Microsoft" },
    ///             { "product", "OMSGallery/WindowsEventForwarding" },
    ///         },
    ///     });
    /// 
    ///     var exampleEventHubNamespace = new Azure.Eventhub.EventHubNamespace.EventHubNamespace("example", new()
    ///     {
    ///         Name = "exeventns",
    ///         Location = example.Location,
    ///         ResourceGroupName = example.Name,
    ///         Sku = "Standard",
    ///         Capacity = 1,
    ///     });
    /// 
    ///     var exampleEventHub = new Azure.Eventhub.EventHub.EventHub("example", new()
    ///     {
    ///         Name = "exevent2",
    ///         NamespaceName = exampleEventHubNamespace.Name,
    ///         ResourceGroupName = example.Name,
    ///         PartitionCount = 2,
    ///         MessageRetention = 1,
    ///     });
    /// 
    ///     var exampleAccount = new Azure.Storage.Account.Account("example", new()
    ///     {
    ///         Name = "examstorage",
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///         AccountTier = "Standard",
    ///         AccountReplicationType = "LRS",
    ///     });
    /// 
    ///     var exampleContainer = new Azure.Storage.Container.Container("example", new()
    ///     {
    ///         Name = "examplecontainer",
    ///         StorageAccountName = exampleAccount.Name,
    ///         ContainerAccessType = "private",
    ///     });
    /// 
    ///     var exampleDataCollectionEndpoint = new Azure.Monitoring.DataCollectionEndpoint.DataCollectionEndpoint("example", new()
    ///     {
    ///         Name = "example-dcre",
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///     });
    /// 
    ///     var exampleDataCollectionRule = new Azure.Monitoring.DataCollectionRule.DataCollectionRule("example", new()
    ///     {
    ///         Name = "example-rule",
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///         DataCollectionEndpointId = exampleDataCollectionEndpoint.Id,
    ///         Destinations = 
    ///         {
    ///             { "logAnalytics", new[]
    ///             {
    ///                 
    ///                 {
    ///                     { "workspaceResourceId", exampleAnalyticsWorkspace.Id },
    ///                     { "name", "example-destination-log" },
    ///                 },
    ///             } },
    ///             { "eventHub", 
    ///             {
    ///                 { "eventHubId", exampleEventHub.Id },
    ///                 { "name", "example-destination-eventhub" },
    ///             } },
    ///             { "storageBlobs", new[]
    ///             {
    ///                 
    ///                 {
    ///                     { "storageAccountId", exampleAccount.Id },
    ///                     { "containerName", exampleContainer.Name },
    ///                     { "name", "example-destination-storage" },
    ///                 },
    ///             } },
    ///             { "azureMonitorMetrics", 
    ///             {
    ///                 { "name", "example-destination-metrics" },
    ///             } },
    ///         },
    ///         DataFlows = new[]
    ///         {
    ///             
    ///             {
    ///                 { "streams", new[]
    ///                 {
    ///                     "Microsoft-InsightsMetrics",
    ///                 } },
    ///                 { "destinations", new[]
    ///                 {
    ///                     "example-destination-metrics",
    ///                 } },
    ///             },
    ///             
    ///             {
    ///                 { "streams", new[]
    ///                 {
    ///                     "Microsoft-InsightsMetrics",
    ///                     "Microsoft-Syslog",
    ///                     "Microsoft-Perf",
    ///                 } },
    ///                 { "destinations", new[]
    ///                 {
    ///                     "example-destination-log",
    ///                 } },
    ///             },
    ///             
    ///             {
    ///                 { "streams", new[]
    ///                 {
    ///                     "Custom-MyTableRawData",
    ///                 } },
    ///                 { "destinations", new[]
    ///                 {
    ///                     "example-destination-log",
    ///                 } },
    ///                 { "outputStream", "Microsoft-Syslog" },
    ///                 { "transformKql", "source | project TimeGenerated = Time, Computer, Message = AdditionalContext" },
    ///             },
    ///         },
    ///         DataSources = 
    ///         {
    ///             { "syslogs", new[]
    ///             {
    ///                 
    ///                 {
    ///                     { "facilityNames", new[]
    ///                     {
    ///                         "*",
    ///                     } },
    ///                     { "logLevels", new[]
    ///                     {
    ///                         "*",
    ///                     } },
    ///                     { "name", "example-datasource-syslog" },
    ///                     { "streams", new[]
    ///                     {
    ///                         "Microsoft-Syslog",
    ///                     } },
    ///                 },
    ///             } },
    ///             { "iisLogs", new[]
    ///             {
    ///                 
    ///                 {
    ///                     { "streams", new[]
    ///                     {
    ///                         "Microsoft-W3CIISLog",
    ///                     } },
    ///                     { "name", "example-datasource-iis" },
    ///                     { "logDirectories", new[]
    ///                     {
    ///                         "C:\\Logs\\W3SVC1",
    ///                     } },
    ///                 },
    ///             } },
    ///             { "logFiles", new[]
    ///             {
    ///                 
    ///                 {
    ///                     { "name", "example-datasource-logfile" },
    ///                     { "format", "text" },
    ///                     { "streams", new[]
    ///                     {
    ///                         "Custom-MyTableRawData",
    ///                     } },
    ///                     { "filePatterns", new[]
    ///                     {
    ///                         "C:\\JavaLogs\\*.log",
    ///                     } },
    ///                     { "settings", 
    ///                     {
    ///                         { "text", 
    ///                         {
    ///                             { "recordStartTimestampFormat", "ISO 8601" },
    ///                         } },
    ///                     } },
    ///                 },
    ///             } },
    ///             { "performanceCounters", new[]
    ///             {
    ///                 
    ///                 {
    ///                     { "streams", new[]
    ///                     {
    ///                         "Microsoft-Perf",
    ///                         "Microsoft-InsightsMetrics",
    ///                     } },
    ///                     { "samplingFrequencyInSeconds", 60 },
    ///                     { "counterSpecifiers", new[]
    ///                     {
    ///                         "Processor(*)\\% Processor Time",
    ///                     } },
    ///                     { "name", "example-datasource-perfcounter" },
    ///                 },
    ///             } },
    ///             { "windowsEventLogs", new[]
    ///             {
    ///                 
    ///                 {
    ///                     { "streams", new[]
    ///                     {
    ///                         "Microsoft-WindowsEvent",
    ///                     } },
    ///                     { "xPathQueries", new[]
    ///                     {
    ///                         "*![System/Level=1]",
    ///                     } },
    ///                     { "name", "example-datasource-wineventlog" },
    ///                 },
    ///             } },
    ///             { "extensions", new[]
    ///             {
    ///                 
    ///                 {
    ///                     { "streams", new[]
    ///                     {
    ///                         "Microsoft-WindowsEvent",
    ///                     } },
    ///                     { "inputDataSources", new[]
    ///                     {
    ///                         "example-datasource-wineventlog",
    ///                     } },
    ///                     { "extensionName", "example-extension-name" },
    ///                     { "extensionJson", JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["a"] = 1,
    ///                         ["b"] = "hello",
    ///                     }) },
    ///                     { "name", "example-datasource-extension" },
    ///                 },
    ///             } },
    ///         },
    ///         StreamDeclarations = new[]
    ///         {
    ///             
    ///             {
    ///                 { "streamName", "Custom-MyTableRawData" },
    ///                 { "columns", new[]
    ///                 {
    ///                     
    ///                     {
    ///                         { "name", "Time" },
    ///                         { "type", "datetime" },
    ///                     },
    ///                     
    ///                     {
    ///                         { "name", "Computer" },
    ///                         { "type", "string" },
    ///                     },
    ///                     
    ///                     {
    ///                         { "name", "AdditionalContext" },
    ///                         { "type", "string" },
    ///                     },
    ///                 } },
    ///             },
    ///         },
    ///         Identity = 
    ///         {
    ///             { "type", "UserAssigned" },
    ///             { "identityIds", new[]
    ///             {
    ///                 exampleUserAssignedIdentity.Id,
    ///             } },
    ///         },
    ///         Description = "data collection rule example",
    ///         Tags = 
    ///         {
    ///             { "foo", "bar" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Data Collection Rules can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:monitoring/dataCollectionRule:DataCollectionRule example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.Insights/dataCollectionRules/rule1
    /// ```
    /// </summary>
    [AzureResourceType("azure:monitoring/dataCollectionRule:DataCollectionRule")]
    public partial class DataCollectionRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The resource ID of the Data Collection Endpoint that this rule can be used with.
        /// </summary>
        [Output("dataCollectionEndpointId")]
        public Output<string?> DataCollectionEndpointId { get; private set; } = null!;

        /// <summary>
        /// One or more `data_flow` blocks as defined below.
        /// </summary>
        [Output("dataFlows")]
        public Output<ImmutableArray<Outputs.DataCollectionRuleDataFlow>> DataFlows { get; private set; } = null!;

        /// <summary>
        /// A `data_sources` block as defined below. This property is optional and can be omitted if the rule is meant to be used via direct calls to the provisioned endpoint.
        /// </summary>
        [Output("dataSources")]
        public Output<Outputs.DataCollectionRuleDataSources?> DataSources { get; private set; } = null!;

        /// <summary>
        /// The description of the Data Collection Rule.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// A `destinations` block as defined below.
        /// </summary>
        [Output("destinations")]
        public Output<Outputs.DataCollectionRuleDestinations> Destinations { get; private set; } = null!;

        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.DataCollectionRuleIdentity?> Identity { get; private set; } = null!;

        /// <summary>
        /// The immutable ID of the Data Collection Rule.
        /// </summary>
        [Output("immutableId")]
        public Output<string> ImmutableId { get; private set; } = null!;

        /// <summary>
        /// The kind of the Data Collection Rule. Possible values are `Linux`, `Windows`, `AgentDirectToStore` and `WorkspaceTransforms`. A rule of kind `Linux` does not allow for `windows_event_log` data sources. And a rule of kind `Windows` does not allow for `syslog` data sources. If kind is not specified, all kinds of data sources are allowed.
        /// 
        /// &gt; **NOTE** Once `kind` has been set, changing it forces a new Data Collection Rule to be created.
        /// </summary>
        [Output("kind")]
        public Output<string?> Kind { get; private set; } = null!;

        /// <summary>
        /// The Azure Region where the Data Collection Rule should exist. Changing this forces a new Data Collection Rule to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Data Collection Rule. Changing this forces a new Data Collection Rule to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Data Collection Rule should exist. Changing this forces a new Data Collection Rule to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// A `stream_declaration` block as defined below.
        /// </summary>
        [Output("streamDeclarations")]
        public Output<ImmutableArray<Outputs.DataCollectionRuleStreamDeclaration>> StreamDeclarations { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags which should be assigned to the Data Collection Rule.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a DataCollectionRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DataCollectionRule(string name, DataCollectionRuleArgs args, CustomResourceOptions? options = null)
            : base("azure:monitoring/dataCollectionRule:DataCollectionRule", name, args ?? new DataCollectionRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DataCollectionRule(string name, Input<string> id, DataCollectionRuleState? state = null, CustomResourceOptions? options = null)
            : base("azure:monitoring/dataCollectionRule:DataCollectionRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DataCollectionRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DataCollectionRule Get(string name, Input<string> id, DataCollectionRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new DataCollectionRule(name, id, state, options);
        }
    }

    public sealed class DataCollectionRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The resource ID of the Data Collection Endpoint that this rule can be used with.
        /// </summary>
        [Input("dataCollectionEndpointId")]
        public Input<string>? DataCollectionEndpointId { get; set; }

        [Input("dataFlows", required: true)]
        private InputList<Inputs.DataCollectionRuleDataFlowArgs>? _dataFlows;

        /// <summary>
        /// One or more `data_flow` blocks as defined below.
        /// </summary>
        public InputList<Inputs.DataCollectionRuleDataFlowArgs> DataFlows
        {
            get => _dataFlows ?? (_dataFlows = new InputList<Inputs.DataCollectionRuleDataFlowArgs>());
            set => _dataFlows = value;
        }

        /// <summary>
        /// A `data_sources` block as defined below. This property is optional and can be omitted if the rule is meant to be used via direct calls to the provisioned endpoint.
        /// </summary>
        [Input("dataSources")]
        public Input<Inputs.DataCollectionRuleDataSourcesArgs>? DataSources { get; set; }

        /// <summary>
        /// The description of the Data Collection Rule.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// A `destinations` block as defined below.
        /// </summary>
        [Input("destinations", required: true)]
        public Input<Inputs.DataCollectionRuleDestinationsArgs> Destinations { get; set; } = null!;

        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.DataCollectionRuleIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// The kind of the Data Collection Rule. Possible values are `Linux`, `Windows`, `AgentDirectToStore` and `WorkspaceTransforms`. A rule of kind `Linux` does not allow for `windows_event_log` data sources. And a rule of kind `Windows` does not allow for `syslog` data sources. If kind is not specified, all kinds of data sources are allowed.
        /// 
        /// &gt; **NOTE** Once `kind` has been set, changing it forces a new Data Collection Rule to be created.
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        /// <summary>
        /// The Azure Region where the Data Collection Rule should exist. Changing this forces a new Data Collection Rule to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name which should be used for this Data Collection Rule. Changing this forces a new Data Collection Rule to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Data Collection Rule should exist. Changing this forces a new Data Collection Rule to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("streamDeclarations")]
        private InputList<Inputs.DataCollectionRuleStreamDeclarationArgs>? _streamDeclarations;

        /// <summary>
        /// A `stream_declaration` block as defined below.
        /// </summary>
        public InputList<Inputs.DataCollectionRuleStreamDeclarationArgs> StreamDeclarations
        {
            get => _streamDeclarations ?? (_streamDeclarations = new InputList<Inputs.DataCollectionRuleStreamDeclarationArgs>());
            set => _streamDeclarations = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Data Collection Rule.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public DataCollectionRuleArgs()
        {
        }
        public static new DataCollectionRuleArgs Empty => new DataCollectionRuleArgs();
    }

    public sealed class DataCollectionRuleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The resource ID of the Data Collection Endpoint that this rule can be used with.
        /// </summary>
        [Input("dataCollectionEndpointId")]
        public Input<string>? DataCollectionEndpointId { get; set; }

        [Input("dataFlows")]
        private InputList<Inputs.DataCollectionRuleDataFlowGetArgs>? _dataFlows;

        /// <summary>
        /// One or more `data_flow` blocks as defined below.
        /// </summary>
        public InputList<Inputs.DataCollectionRuleDataFlowGetArgs> DataFlows
        {
            get => _dataFlows ?? (_dataFlows = new InputList<Inputs.DataCollectionRuleDataFlowGetArgs>());
            set => _dataFlows = value;
        }

        /// <summary>
        /// A `data_sources` block as defined below. This property is optional and can be omitted if the rule is meant to be used via direct calls to the provisioned endpoint.
        /// </summary>
        [Input("dataSources")]
        public Input<Inputs.DataCollectionRuleDataSourcesGetArgs>? DataSources { get; set; }

        /// <summary>
        /// The description of the Data Collection Rule.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// A `destinations` block as defined below.
        /// </summary>
        [Input("destinations")]
        public Input<Inputs.DataCollectionRuleDestinationsGetArgs>? Destinations { get; set; }

        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.DataCollectionRuleIdentityGetArgs>? Identity { get; set; }

        /// <summary>
        /// The immutable ID of the Data Collection Rule.
        /// </summary>
        [Input("immutableId")]
        public Input<string>? ImmutableId { get; set; }

        /// <summary>
        /// The kind of the Data Collection Rule. Possible values are `Linux`, `Windows`, `AgentDirectToStore` and `WorkspaceTransforms`. A rule of kind `Linux` does not allow for `windows_event_log` data sources. And a rule of kind `Windows` does not allow for `syslog` data sources. If kind is not specified, all kinds of data sources are allowed.
        /// 
        /// &gt; **NOTE** Once `kind` has been set, changing it forces a new Data Collection Rule to be created.
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        /// <summary>
        /// The Azure Region where the Data Collection Rule should exist. Changing this forces a new Data Collection Rule to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name which should be used for this Data Collection Rule. Changing this forces a new Data Collection Rule to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Data Collection Rule should exist. Changing this forces a new Data Collection Rule to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        [Input("streamDeclarations")]
        private InputList<Inputs.DataCollectionRuleStreamDeclarationGetArgs>? _streamDeclarations;

        /// <summary>
        /// A `stream_declaration` block as defined below.
        /// </summary>
        public InputList<Inputs.DataCollectionRuleStreamDeclarationGetArgs> StreamDeclarations
        {
            get => _streamDeclarations ?? (_streamDeclarations = new InputList<Inputs.DataCollectionRuleStreamDeclarationGetArgs>());
            set => _streamDeclarations = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Data Collection Rule.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public DataCollectionRuleState()
        {
        }
        public static new DataCollectionRuleState Empty => new DataCollectionRuleState();
    }
}
