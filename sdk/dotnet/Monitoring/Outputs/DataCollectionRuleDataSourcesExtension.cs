// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Monitoring.Outputs
{

    [OutputType]
    public sealed class DataCollectionRuleDataSourcesExtension
    {
        /// <summary>
        /// A JSON String which specifies the extension setting.
        /// </summary>
        public readonly string? ExtensionJson;
        /// <summary>
        /// The name of the VM extension.
        /// </summary>
        public readonly string ExtensionName;
        /// <summary>
        /// Specifies a list of data sources this extension needs data from. An item should be a name of a supported data source which produces only one stream. Supported data sources type: `performance_counter`, `windows_event_log`,and `syslog`.
        /// </summary>
        public readonly ImmutableArray<string> InputDataSources;
        /// <summary>
        /// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible values are `Microsoft-Event`, `Microsoft-InsightsMetrics`, `Microsoft-Perf`, `Microsoft-Syslog`,and `Microsoft-WindowsEvent`.
        /// </summary>
        public readonly ImmutableArray<string> Streams;

        [OutputConstructor]
        private DataCollectionRuleDataSourcesExtension(
            string? extensionJson,

            string extensionName,

            ImmutableArray<string> inputDataSources,

            string name,

            ImmutableArray<string> streams)
        {
            ExtensionJson = extensionJson;
            ExtensionName = extensionName;
            InputDataSources = inputDataSources;
            Name = name;
            Streams = streams;
        }
    }
}
