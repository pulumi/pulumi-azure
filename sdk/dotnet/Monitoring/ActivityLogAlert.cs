// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Monitoring
{
    /// <summary>
    /// Manages an Activity Log Alert within Azure Monitor.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/monitor_activity_log_alert.html.markdown.
    /// </summary>
    public partial class ActivityLogAlert : Pulumi.CustomResource
    {
        /// <summary>
        /// One or more `action` blocks as defined below.
        /// </summary>
        [Output("actions")]
        public Output<ImmutableArray<Outputs.ActivityLogAlertActions>> Actions { get; private set; } = null!;

        /// <summary>
        /// A `criteria` block as defined below.
        /// </summary>
        [Output("criteria")]
        public Output<Outputs.ActivityLogAlertCriteria> Criteria { get; private set; } = null!;

        /// <summary>
        /// The description of this activity log alert.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Should this Activity Log Alert be enabled? Defaults to `true`.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// The name of the activity log alert. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the resource group in which to create the activity log alert instance.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// The Scope at which the Activity Log should be applied, for example a the Resource ID of a Subscription or a Resource (such as a Storage Account).
        /// </summary>
        [Output("scopes")]
        public Output<ImmutableArray<string>> Scopes { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a ActivityLogAlert resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ActivityLogAlert(string name, ActivityLogAlertArgs args, CustomResourceOptions? options = null)
            : base("azure:monitoring/activityLogAlert:ActivityLogAlert", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private ActivityLogAlert(string name, Input<string> id, ActivityLogAlertState? state = null, CustomResourceOptions? options = null)
            : base("azure:monitoring/activityLogAlert:ActivityLogAlert", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ActivityLogAlert resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ActivityLogAlert Get(string name, Input<string> id, ActivityLogAlertState? state = null, CustomResourceOptions? options = null)
        {
            return new ActivityLogAlert(name, id, state, options);
        }
    }

    public sealed class ActivityLogAlertArgs : Pulumi.ResourceArgs
    {
        [Input("actions")]
        private InputList<Inputs.ActivityLogAlertActionsArgs>? _actions;

        /// <summary>
        /// One or more `action` blocks as defined below.
        /// </summary>
        public InputList<Inputs.ActivityLogAlertActionsArgs> Actions
        {
            get => _actions ?? (_actions = new InputList<Inputs.ActivityLogAlertActionsArgs>());
            set => _actions = value;
        }

        /// <summary>
        /// A `criteria` block as defined below.
        /// </summary>
        [Input("criteria", required: true)]
        public Input<Inputs.ActivityLogAlertCriteriaArgs> Criteria { get; set; } = null!;

        /// <summary>
        /// The description of this activity log alert.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Should this Activity Log Alert be enabled? Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The name of the activity log alert. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the resource group in which to create the activity log alert instance.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("scopes", required: true)]
        private InputList<string>? _scopes;

        /// <summary>
        /// The Scope at which the Activity Log should be applied, for example a the Resource ID of a Subscription or a Resource (such as a Storage Account).
        /// </summary>
        public InputList<string> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<string>());
            set => _scopes = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public ActivityLogAlertArgs()
        {
        }
    }

    public sealed class ActivityLogAlertState : Pulumi.ResourceArgs
    {
        [Input("actions")]
        private InputList<Inputs.ActivityLogAlertActionsGetArgs>? _actions;

        /// <summary>
        /// One or more `action` blocks as defined below.
        /// </summary>
        public InputList<Inputs.ActivityLogAlertActionsGetArgs> Actions
        {
            get => _actions ?? (_actions = new InputList<Inputs.ActivityLogAlertActionsGetArgs>());
            set => _actions = value;
        }

        /// <summary>
        /// A `criteria` block as defined below.
        /// </summary>
        [Input("criteria")]
        public Input<Inputs.ActivityLogAlertCriteriaGetArgs>? Criteria { get; set; }

        /// <summary>
        /// The description of this activity log alert.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Should this Activity Log Alert be enabled? Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The name of the activity log alert. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the resource group in which to create the activity log alert instance.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        [Input("scopes")]
        private InputList<string>? _scopes;

        /// <summary>
        /// The Scope at which the Activity Log should be applied, for example a the Resource ID of a Subscription or a Resource (such as a Storage Account).
        /// </summary>
        public InputList<string> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<string>());
            set => _scopes = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public ActivityLogAlertState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class ActivityLogAlertActionsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Action Group can be sourced from the `azure.monitoring.ActionGroup` resource.
        /// </summary>
        [Input("actionGroupId", required: true)]
        public Input<string> ActionGroupId { get; set; } = null!;

        [Input("webhookProperties")]
        private InputMap<string>? _webhookProperties;

        /// <summary>
        /// The map of custom string properties to include with the post operation. These data are appended to the webhook payload.
        /// </summary>
        public InputMap<string> WebhookProperties
        {
            get => _webhookProperties ?? (_webhookProperties = new InputMap<string>());
            set => _webhookProperties = value;
        }

        public ActivityLogAlertActionsArgs()
        {
        }
    }

    public sealed class ActivityLogAlertActionsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Action Group can be sourced from the `azure.monitoring.ActionGroup` resource.
        /// </summary>
        [Input("actionGroupId", required: true)]
        public Input<string> ActionGroupId { get; set; } = null!;

        [Input("webhookProperties")]
        private InputMap<string>? _webhookProperties;

        /// <summary>
        /// The map of custom string properties to include with the post operation. These data are appended to the webhook payload.
        /// </summary>
        public InputMap<string> WebhookProperties
        {
            get => _webhookProperties ?? (_webhookProperties = new InputMap<string>());
            set => _webhookProperties = value;
        }

        public ActivityLogAlertActionsGetArgs()
        {
        }
    }

    public sealed class ActivityLogAlertCriteriaArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The email address or Azure Active Directory identifier of the user who performed the operation.
        /// </summary>
        [Input("caller")]
        public Input<string>? Caller { get; set; }

        /// <summary>
        /// The category of the operation. Possible values are `Administrative`, `Autoscale`, `Policy`, `Recommendation`, `ResourceHealth`, `Security` and `ServiceHealth`.
        /// </summary>
        [Input("category", required: true)]
        public Input<string> Category { get; set; } = null!;

        /// <summary>
        /// The severity level of the event. Possible values are `Verbose`, `Informational`, `Warning`, `Error`, and `Critical`.
        /// </summary>
        [Input("level")]
        public Input<string>? Level { get; set; }

        /// <summary>
        /// The Resource Manager Role-Based Access Control operation name. Supported operation should be of the form: `&lt;resourceProvider&gt;/&lt;resourceType&gt;/&lt;operation&gt;`.
        /// </summary>
        [Input("operationName")]
        public Input<string>? OperationName { get; set; }

        /// <summary>
        /// The name of resource group monitored by the activity log alert.
        /// </summary>
        [Input("resourceGroup")]
        public Input<string>? ResourceGroup { get; set; }

        /// <summary>
        /// The specific resource monitored by the activity log alert. It should be within one of the `scopes`.
        /// </summary>
        [Input("resourceId")]
        public Input<string>? ResourceId { get; set; }

        /// <summary>
        /// The name of the resource provider monitored by the activity log alert.
        /// </summary>
        [Input("resourceProvider")]
        public Input<string>? ResourceProvider { get; set; }

        /// <summary>
        /// The resource type monitored by the activity log alert.
        /// </summary>
        [Input("resourceType")]
        public Input<string>? ResourceType { get; set; }

        /// <summary>
        /// The status of the event. For example, `Started`, `Failed`, or `Succeeded`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The sub status of the event.
        /// </summary>
        [Input("subStatus")]
        public Input<string>? SubStatus { get; set; }

        public ActivityLogAlertCriteriaArgs()
        {
        }
    }

    public sealed class ActivityLogAlertCriteriaGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The email address or Azure Active Directory identifier of the user who performed the operation.
        /// </summary>
        [Input("caller")]
        public Input<string>? Caller { get; set; }

        /// <summary>
        /// The category of the operation. Possible values are `Administrative`, `Autoscale`, `Policy`, `Recommendation`, `ResourceHealth`, `Security` and `ServiceHealth`.
        /// </summary>
        [Input("category", required: true)]
        public Input<string> Category { get; set; } = null!;

        /// <summary>
        /// The severity level of the event. Possible values are `Verbose`, `Informational`, `Warning`, `Error`, and `Critical`.
        /// </summary>
        [Input("level")]
        public Input<string>? Level { get; set; }

        /// <summary>
        /// The Resource Manager Role-Based Access Control operation name. Supported operation should be of the form: `&lt;resourceProvider&gt;/&lt;resourceType&gt;/&lt;operation&gt;`.
        /// </summary>
        [Input("operationName")]
        public Input<string>? OperationName { get; set; }

        /// <summary>
        /// The name of resource group monitored by the activity log alert.
        /// </summary>
        [Input("resourceGroup")]
        public Input<string>? ResourceGroup { get; set; }

        /// <summary>
        /// The specific resource monitored by the activity log alert. It should be within one of the `scopes`.
        /// </summary>
        [Input("resourceId")]
        public Input<string>? ResourceId { get; set; }

        /// <summary>
        /// The name of the resource provider monitored by the activity log alert.
        /// </summary>
        [Input("resourceProvider")]
        public Input<string>? ResourceProvider { get; set; }

        /// <summary>
        /// The resource type monitored by the activity log alert.
        /// </summary>
        [Input("resourceType")]
        public Input<string>? ResourceType { get; set; }

        /// <summary>
        /// The status of the event. For example, `Started`, `Failed`, or `Succeeded`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The sub status of the event.
        /// </summary>
        [Input("subStatus")]
        public Input<string>? SubStatus { get; set; }

        public ActivityLogAlertCriteriaGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class ActivityLogAlertActions
    {
        /// <summary>
        /// The ID of the Action Group can be sourced from the `azure.monitoring.ActionGroup` resource.
        /// </summary>
        public readonly string ActionGroupId;
        /// <summary>
        /// The map of custom string properties to include with the post operation. These data are appended to the webhook payload.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? WebhookProperties;

        [OutputConstructor]
        private ActivityLogAlertActions(
            string actionGroupId,
            ImmutableDictionary<string, string>? webhookProperties)
        {
            ActionGroupId = actionGroupId;
            WebhookProperties = webhookProperties;
        }
    }

    [OutputType]
    public sealed class ActivityLogAlertCriteria
    {
        /// <summary>
        /// The email address or Azure Active Directory identifier of the user who performed the operation.
        /// </summary>
        public readonly string? Caller;
        /// <summary>
        /// The category of the operation. Possible values are `Administrative`, `Autoscale`, `Policy`, `Recommendation`, `ResourceHealth`, `Security` and `ServiceHealth`.
        /// </summary>
        public readonly string Category;
        /// <summary>
        /// The severity level of the event. Possible values are `Verbose`, `Informational`, `Warning`, `Error`, and `Critical`.
        /// </summary>
        public readonly string? Level;
        /// <summary>
        /// The Resource Manager Role-Based Access Control operation name. Supported operation should be of the form: `&lt;resourceProvider&gt;/&lt;resourceType&gt;/&lt;operation&gt;`.
        /// </summary>
        public readonly string? OperationName;
        /// <summary>
        /// The name of resource group monitored by the activity log alert.
        /// </summary>
        public readonly string? ResourceGroup;
        /// <summary>
        /// The specific resource monitored by the activity log alert. It should be within one of the `scopes`.
        /// </summary>
        public readonly string? ResourceId;
        /// <summary>
        /// The name of the resource provider monitored by the activity log alert.
        /// </summary>
        public readonly string? ResourceProvider;
        /// <summary>
        /// The resource type monitored by the activity log alert.
        /// </summary>
        public readonly string? ResourceType;
        /// <summary>
        /// The status of the event. For example, `Started`, `Failed`, or `Succeeded`.
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// The sub status of the event.
        /// </summary>
        public readonly string? SubStatus;

        [OutputConstructor]
        private ActivityLogAlertCriteria(
            string? caller,
            string category,
            string? level,
            string? operationName,
            string? resourceGroup,
            string? resourceId,
            string? resourceProvider,
            string? resourceType,
            string? status,
            string? subStatus)
        {
            Caller = caller;
            Category = category;
            Level = level;
            OperationName = operationName;
            ResourceGroup = resourceGroup;
            ResourceId = resourceId;
            ResourceProvider = resourceProvider;
            ResourceType = resourceType;
            Status = status;
            SubStatus = subStatus;
        }
    }
    }
}
