// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Monitoring
{
    /// <summary>
    /// Manages an AlertingAction Scheduled Query Rules Version 2 resource within Azure Monitor
    /// 
    /// ## Import
    /// 
    /// Monitor Scheduled Query Rule Alert can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:monitoring/scheduledQueryRulesAlertV2:ScheduledQueryRulesAlertV2 example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.Insights/scheduledQueryRules/rule1
    /// ```
    /// </summary>
    [AzureResourceType("azure:monitoring/scheduledQueryRulesAlertV2:ScheduledQueryRulesAlertV2")]
    public partial class ScheduledQueryRulesAlertV2 : global::Pulumi.CustomResource
    {
        /// <summary>
        /// An `action` block as defined below.
        /// </summary>
        [Output("action")]
        public Output<Outputs.ScheduledQueryRulesAlertV2Action?> Action { get; private set; } = null!;

        /// <summary>
        /// Specifies the flag that indicates whether the alert should be automatically resolved or not. Value should be `true` or `false`. The default is `false`.
        /// </summary>
        [Output("autoMitigationEnabled")]
        public Output<bool?> AutoMitigationEnabled { get; private set; } = null!;

        /// <summary>
        /// The api-version used when creating this alert rule.
        /// </summary>
        [Output("createdWithApiVersion")]
        public Output<string> CreatedWithApiVersion { get; private set; } = null!;

        /// <summary>
        /// A `criteria` block as defined below.
        /// </summary>
        [Output("criterias")]
        public Output<ImmutableArray<Outputs.ScheduledQueryRulesAlertV2Criteria>> Criterias { get; private set; } = null!;

        /// <summary>
        /// Specifies the description of the scheduled query rule.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Specifies the display name of the alert rule.
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Specifies the flag which indicates whether this scheduled query rule is enabled. Value should be `true` or `false`. Defaults to `true`.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// How often the scheduled query rule is evaluated, represented in ISO 8601 duration format. Possible values are `PT1M`, `PT5M`, `PT10M`, `PT15M`, `PT30M`, `PT45M`, `PT1H`, `PT2H`, `PT3H`, `PT4H`, `PT5H`, `PT6H`, `P1D`.
        /// 
        /// &gt; **Note** `evaluation_frequency` cannot be greater than the query look back which is `window_duration`*`number_of_evaluation_periods`.
        /// 
        /// &gt; **Note** `evaluation_frequency` cannot be greater than the `mute_actions_after_alert_duration`.
        /// </summary>
        [Output("evaluationFrequency")]
        public Output<string?> EvaluationFrequency { get; private set; } = null!;

        /// <summary>
        /// True if this alert rule is a legacy Log Analytic Rule.
        /// </summary>
        [Output("isALegacyLogAnalyticsRule")]
        public Output<bool> IsALegacyLogAnalyticsRule { get; private set; } = null!;

        /// <summary>
        /// The flag indicates whether this Scheduled Query Rule has been configured to be stored in the customer's storage.
        /// </summary>
        [Output("isWorkspaceAlertsStorageConfigured")]
        public Output<bool> IsWorkspaceAlertsStorageConfigured { get; private set; } = null!;

        /// <summary>
        /// Specifies the Azure Region where the Monitor Scheduled Query Rule should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Mute actions for the chosen period of time in ISO 8601 duration format after the alert is fired. Possible values are `PT5M`, `PT10M`, `PT15M`, `PT30M`, `PT45M`, `PT1H`, `PT2H`, `PT3H`, `PT4H`, `PT5H`, `PT6H`, `P1D` and `P2D`.
        /// 
        /// &gt; **Note** `auto_mitigation_enabled` and `mute_actions_after_alert_duration` are mutually exclusive and cannot both be set.
        /// </summary>
        [Output("muteActionsAfterAlertDuration")]
        public Output<string?> MuteActionsAfterAlertDuration { get; private set; } = null!;

        /// <summary>
        /// Specifies the name which should be used for this Monitor Scheduled Query Rule. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Set this if the alert evaluation period is different from the query time range. If not specified, the value is `window_duration`*`number_of_evaluation_periods`. Possible values are `PT5M`, `PT10M`, `PT15M`, `PT20M`, `PT30M`, `PT45M`, `PT1H`, `PT2H`, `PT3H`, `PT4H`, `PT5H`, `PT6H`, `P1D` and `P2D`.
        /// 
        /// &gt; **Note** `query_time_range_override` cannot be less than the query look back which is `window_duration`*`number_of_evaluation_periods`.
        /// </summary>
        [Output("queryTimeRangeOverride")]
        public Output<string?> QueryTimeRangeOverride { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the Resource Group where the Monitor Scheduled Query Rule should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// Specifies the list of resource IDs that this scheduled query rule is scoped to. Changing this forces a new resource to be created. Currently, the API supports exactly 1 resource ID in the scopes list.
        /// </summary>
        [Output("scopes")]
        public Output<string> Scopes { get; private set; } = null!;

        /// <summary>
        /// Severity of the alert. Should be an integer between 0 and 4. Value of 0 is severest.
        /// </summary>
        [Output("severity")]
        public Output<int> Severity { get; private set; } = null!;

        /// <summary>
        /// Specifies the flag which indicates whether the provided query should be validated or not. The default is false.
        /// </summary>
        [Output("skipQueryValidation")]
        public Output<bool?> SkipQueryValidation { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags which should be assigned to the Monitor Scheduled Query Rule.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// List of resource type of the target resource(s) on which the alert is created/updated. For example if the scope is a resource group and targetResourceTypes is `Microsoft.Compute/virtualMachines`, then a different alert will be fired for each virtual machine in the resource group which meet the alert criteria.
        /// </summary>
        [Output("targetResourceTypes")]
        public Output<ImmutableArray<string>> TargetResourceTypes { get; private set; } = null!;

        /// <summary>
        /// Specifies the period of time in ISO 8601 duration format on which the Scheduled Query Rule will be executed (bin size). If `evaluation_frequency` is `PT1M`, possible values are `PT1M`, `PT5M`, `PT10M`, `PT15M`, `PT30M`, `PT45M`, `PT1H`, `PT2H`, `PT3H`, `PT4H`, `PT5H`, and `PT6H`. Otherwise, possible values are `PT5M`, `PT10M`, `PT15M`, `PT30M`, `PT45M`, `PT1H`, `PT2H`, `PT3H`, `PT4H`, `PT5H`, `PT6H`, `P1D`, and `P2D`.
        /// </summary>
        [Output("windowDuration")]
        public Output<string> WindowDuration { get; private set; } = null!;

        /// <summary>
        /// Specifies the flag which indicates whether this scheduled query rule check if storage is configured. Value should be `true` or `false`. The default is `false`.
        /// </summary>
        [Output("workspaceAlertsStorageEnabled")]
        public Output<bool?> WorkspaceAlertsStorageEnabled { get; private set; } = null!;


        /// <summary>
        /// Create a ScheduledQueryRulesAlertV2 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ScheduledQueryRulesAlertV2(string name, ScheduledQueryRulesAlertV2Args args, CustomResourceOptions? options = null)
            : base("azure:monitoring/scheduledQueryRulesAlertV2:ScheduledQueryRulesAlertV2", name, args ?? new ScheduledQueryRulesAlertV2Args(), MakeResourceOptions(options, ""))
        {
        }

        private ScheduledQueryRulesAlertV2(string name, Input<string> id, ScheduledQueryRulesAlertV2State? state = null, CustomResourceOptions? options = null)
            : base("azure:monitoring/scheduledQueryRulesAlertV2:ScheduledQueryRulesAlertV2", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ScheduledQueryRulesAlertV2 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ScheduledQueryRulesAlertV2 Get(string name, Input<string> id, ScheduledQueryRulesAlertV2State? state = null, CustomResourceOptions? options = null)
        {
            return new ScheduledQueryRulesAlertV2(name, id, state, options);
        }
    }

    public sealed class ScheduledQueryRulesAlertV2Args : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An `action` block as defined below.
        /// </summary>
        [Input("action")]
        public Input<Inputs.ScheduledQueryRulesAlertV2ActionArgs>? Action { get; set; }

        /// <summary>
        /// Specifies the flag that indicates whether the alert should be automatically resolved or not. Value should be `true` or `false`. The default is `false`.
        /// </summary>
        [Input("autoMitigationEnabled")]
        public Input<bool>? AutoMitigationEnabled { get; set; }

        [Input("criterias", required: true)]
        private InputList<Inputs.ScheduledQueryRulesAlertV2CriteriaArgs>? _criterias;

        /// <summary>
        /// A `criteria` block as defined below.
        /// </summary>
        public InputList<Inputs.ScheduledQueryRulesAlertV2CriteriaArgs> Criterias
        {
            get => _criterias ?? (_criterias = new InputList<Inputs.ScheduledQueryRulesAlertV2CriteriaArgs>());
            set => _criterias = value;
        }

        /// <summary>
        /// Specifies the description of the scheduled query rule.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Specifies the display name of the alert rule.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Specifies the flag which indicates whether this scheduled query rule is enabled. Value should be `true` or `false`. Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// How often the scheduled query rule is evaluated, represented in ISO 8601 duration format. Possible values are `PT1M`, `PT5M`, `PT10M`, `PT15M`, `PT30M`, `PT45M`, `PT1H`, `PT2H`, `PT3H`, `PT4H`, `PT5H`, `PT6H`, `P1D`.
        /// 
        /// &gt; **Note** `evaluation_frequency` cannot be greater than the query look back which is `window_duration`*`number_of_evaluation_periods`.
        /// 
        /// &gt; **Note** `evaluation_frequency` cannot be greater than the `mute_actions_after_alert_duration`.
        /// </summary>
        [Input("evaluationFrequency")]
        public Input<string>? EvaluationFrequency { get; set; }

        /// <summary>
        /// Specifies the Azure Region where the Monitor Scheduled Query Rule should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Mute actions for the chosen period of time in ISO 8601 duration format after the alert is fired. Possible values are `PT5M`, `PT10M`, `PT15M`, `PT30M`, `PT45M`, `PT1H`, `PT2H`, `PT3H`, `PT4H`, `PT5H`, `PT6H`, `P1D` and `P2D`.
        /// 
        /// &gt; **Note** `auto_mitigation_enabled` and `mute_actions_after_alert_duration` are mutually exclusive and cannot both be set.
        /// </summary>
        [Input("muteActionsAfterAlertDuration")]
        public Input<string>? MuteActionsAfterAlertDuration { get; set; }

        /// <summary>
        /// Specifies the name which should be used for this Monitor Scheduled Query Rule. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Set this if the alert evaluation period is different from the query time range. If not specified, the value is `window_duration`*`number_of_evaluation_periods`. Possible values are `PT5M`, `PT10M`, `PT15M`, `PT20M`, `PT30M`, `PT45M`, `PT1H`, `PT2H`, `PT3H`, `PT4H`, `PT5H`, `PT6H`, `P1D` and `P2D`.
        /// 
        /// &gt; **Note** `query_time_range_override` cannot be less than the query look back which is `window_duration`*`number_of_evaluation_periods`.
        /// </summary>
        [Input("queryTimeRangeOverride")]
        public Input<string>? QueryTimeRangeOverride { get; set; }

        /// <summary>
        /// Specifies the name of the Resource Group where the Monitor Scheduled Query Rule should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Specifies the list of resource IDs that this scheduled query rule is scoped to. Changing this forces a new resource to be created. Currently, the API supports exactly 1 resource ID in the scopes list.
        /// </summary>
        [Input("scopes", required: true)]
        public Input<string> Scopes { get; set; } = null!;

        /// <summary>
        /// Severity of the alert. Should be an integer between 0 and 4. Value of 0 is severest.
        /// </summary>
        [Input("severity", required: true)]
        public Input<int> Severity { get; set; } = null!;

        /// <summary>
        /// Specifies the flag which indicates whether the provided query should be validated or not. The default is false.
        /// </summary>
        [Input("skipQueryValidation")]
        public Input<bool>? SkipQueryValidation { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Monitor Scheduled Query Rule.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("targetResourceTypes")]
        private InputList<string>? _targetResourceTypes;

        /// <summary>
        /// List of resource type of the target resource(s) on which the alert is created/updated. For example if the scope is a resource group and targetResourceTypes is `Microsoft.Compute/virtualMachines`, then a different alert will be fired for each virtual machine in the resource group which meet the alert criteria.
        /// </summary>
        public InputList<string> TargetResourceTypes
        {
            get => _targetResourceTypes ?? (_targetResourceTypes = new InputList<string>());
            set => _targetResourceTypes = value;
        }

        /// <summary>
        /// Specifies the period of time in ISO 8601 duration format on which the Scheduled Query Rule will be executed (bin size). If `evaluation_frequency` is `PT1M`, possible values are `PT1M`, `PT5M`, `PT10M`, `PT15M`, `PT30M`, `PT45M`, `PT1H`, `PT2H`, `PT3H`, `PT4H`, `PT5H`, and `PT6H`. Otherwise, possible values are `PT5M`, `PT10M`, `PT15M`, `PT30M`, `PT45M`, `PT1H`, `PT2H`, `PT3H`, `PT4H`, `PT5H`, `PT6H`, `P1D`, and `P2D`.
        /// </summary>
        [Input("windowDuration", required: true)]
        public Input<string> WindowDuration { get; set; } = null!;

        /// <summary>
        /// Specifies the flag which indicates whether this scheduled query rule check if storage is configured. Value should be `true` or `false`. The default is `false`.
        /// </summary>
        [Input("workspaceAlertsStorageEnabled")]
        public Input<bool>? WorkspaceAlertsStorageEnabled { get; set; }

        public ScheduledQueryRulesAlertV2Args()
        {
        }
        public static new ScheduledQueryRulesAlertV2Args Empty => new ScheduledQueryRulesAlertV2Args();
    }

    public sealed class ScheduledQueryRulesAlertV2State : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An `action` block as defined below.
        /// </summary>
        [Input("action")]
        public Input<Inputs.ScheduledQueryRulesAlertV2ActionGetArgs>? Action { get; set; }

        /// <summary>
        /// Specifies the flag that indicates whether the alert should be automatically resolved or not. Value should be `true` or `false`. The default is `false`.
        /// </summary>
        [Input("autoMitigationEnabled")]
        public Input<bool>? AutoMitigationEnabled { get; set; }

        /// <summary>
        /// The api-version used when creating this alert rule.
        /// </summary>
        [Input("createdWithApiVersion")]
        public Input<string>? CreatedWithApiVersion { get; set; }

        [Input("criterias")]
        private InputList<Inputs.ScheduledQueryRulesAlertV2CriteriaGetArgs>? _criterias;

        /// <summary>
        /// A `criteria` block as defined below.
        /// </summary>
        public InputList<Inputs.ScheduledQueryRulesAlertV2CriteriaGetArgs> Criterias
        {
            get => _criterias ?? (_criterias = new InputList<Inputs.ScheduledQueryRulesAlertV2CriteriaGetArgs>());
            set => _criterias = value;
        }

        /// <summary>
        /// Specifies the description of the scheduled query rule.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Specifies the display name of the alert rule.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Specifies the flag which indicates whether this scheduled query rule is enabled. Value should be `true` or `false`. Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// How often the scheduled query rule is evaluated, represented in ISO 8601 duration format. Possible values are `PT1M`, `PT5M`, `PT10M`, `PT15M`, `PT30M`, `PT45M`, `PT1H`, `PT2H`, `PT3H`, `PT4H`, `PT5H`, `PT6H`, `P1D`.
        /// 
        /// &gt; **Note** `evaluation_frequency` cannot be greater than the query look back which is `window_duration`*`number_of_evaluation_periods`.
        /// 
        /// &gt; **Note** `evaluation_frequency` cannot be greater than the `mute_actions_after_alert_duration`.
        /// </summary>
        [Input("evaluationFrequency")]
        public Input<string>? EvaluationFrequency { get; set; }

        /// <summary>
        /// True if this alert rule is a legacy Log Analytic Rule.
        /// </summary>
        [Input("isALegacyLogAnalyticsRule")]
        public Input<bool>? IsALegacyLogAnalyticsRule { get; set; }

        /// <summary>
        /// The flag indicates whether this Scheduled Query Rule has been configured to be stored in the customer's storage.
        /// </summary>
        [Input("isWorkspaceAlertsStorageConfigured")]
        public Input<bool>? IsWorkspaceAlertsStorageConfigured { get; set; }

        /// <summary>
        /// Specifies the Azure Region where the Monitor Scheduled Query Rule should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Mute actions for the chosen period of time in ISO 8601 duration format after the alert is fired. Possible values are `PT5M`, `PT10M`, `PT15M`, `PT30M`, `PT45M`, `PT1H`, `PT2H`, `PT3H`, `PT4H`, `PT5H`, `PT6H`, `P1D` and `P2D`.
        /// 
        /// &gt; **Note** `auto_mitigation_enabled` and `mute_actions_after_alert_duration` are mutually exclusive and cannot both be set.
        /// </summary>
        [Input("muteActionsAfterAlertDuration")]
        public Input<string>? MuteActionsAfterAlertDuration { get; set; }

        /// <summary>
        /// Specifies the name which should be used for this Monitor Scheduled Query Rule. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Set this if the alert evaluation period is different from the query time range. If not specified, the value is `window_duration`*`number_of_evaluation_periods`. Possible values are `PT5M`, `PT10M`, `PT15M`, `PT20M`, `PT30M`, `PT45M`, `PT1H`, `PT2H`, `PT3H`, `PT4H`, `PT5H`, `PT6H`, `P1D` and `P2D`.
        /// 
        /// &gt; **Note** `query_time_range_override` cannot be less than the query look back which is `window_duration`*`number_of_evaluation_periods`.
        /// </summary>
        [Input("queryTimeRangeOverride")]
        public Input<string>? QueryTimeRangeOverride { get; set; }

        /// <summary>
        /// Specifies the name of the Resource Group where the Monitor Scheduled Query Rule should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// Specifies the list of resource IDs that this scheduled query rule is scoped to. Changing this forces a new resource to be created. Currently, the API supports exactly 1 resource ID in the scopes list.
        /// </summary>
        [Input("scopes")]
        public Input<string>? Scopes { get; set; }

        /// <summary>
        /// Severity of the alert. Should be an integer between 0 and 4. Value of 0 is severest.
        /// </summary>
        [Input("severity")]
        public Input<int>? Severity { get; set; }

        /// <summary>
        /// Specifies the flag which indicates whether the provided query should be validated or not. The default is false.
        /// </summary>
        [Input("skipQueryValidation")]
        public Input<bool>? SkipQueryValidation { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Monitor Scheduled Query Rule.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("targetResourceTypes")]
        private InputList<string>? _targetResourceTypes;

        /// <summary>
        /// List of resource type of the target resource(s) on which the alert is created/updated. For example if the scope is a resource group and targetResourceTypes is `Microsoft.Compute/virtualMachines`, then a different alert will be fired for each virtual machine in the resource group which meet the alert criteria.
        /// </summary>
        public InputList<string> TargetResourceTypes
        {
            get => _targetResourceTypes ?? (_targetResourceTypes = new InputList<string>());
            set => _targetResourceTypes = value;
        }

        /// <summary>
        /// Specifies the period of time in ISO 8601 duration format on which the Scheduled Query Rule will be executed (bin size). If `evaluation_frequency` is `PT1M`, possible values are `PT1M`, `PT5M`, `PT10M`, `PT15M`, `PT30M`, `PT45M`, `PT1H`, `PT2H`, `PT3H`, `PT4H`, `PT5H`, and `PT6H`. Otherwise, possible values are `PT5M`, `PT10M`, `PT15M`, `PT30M`, `PT45M`, `PT1H`, `PT2H`, `PT3H`, `PT4H`, `PT5H`, `PT6H`, `P1D`, and `P2D`.
        /// </summary>
        [Input("windowDuration")]
        public Input<string>? WindowDuration { get; set; }

        /// <summary>
        /// Specifies the flag which indicates whether this scheduled query rule check if storage is configured. Value should be `true` or `false`. The default is `false`.
        /// </summary>
        [Input("workspaceAlertsStorageEnabled")]
        public Input<bool>? WorkspaceAlertsStorageEnabled { get; set; }

        public ScheduledQueryRulesAlertV2State()
        {
        }
        public static new ScheduledQueryRulesAlertV2State Empty => new ScheduledQueryRulesAlertV2State();
    }
}
