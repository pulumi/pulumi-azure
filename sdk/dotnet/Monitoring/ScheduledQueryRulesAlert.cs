// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Monitoring
{
    /// <summary>
    /// Manages an AlertingAction Scheduled Query Rules resource within Azure Monitor.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/monitor_scheduled_query_rules_alert.html.markdown.
    /// </summary>
    public partial class ScheduledQueryRulesAlert : Pulumi.CustomResource
    {
        /// <summary>
        /// An `action` block as defined below.
        /// </summary>
        [Output("action")]
        public Output<Outputs.ScheduledQueryRulesAlertAction> Action { get; private set; } = null!;

        /// <summary>
        /// List of Resource IDs referred into query.
        /// </summary>
        [Output("authorizedResourceIds")]
        public Output<ImmutableArray<string>> AuthorizedResourceIds { get; private set; } = null!;

        /// <summary>
        /// The resource URI over which log search query is to be run.
        /// </summary>
        [Output("dataSourceId")]
        public Output<string> DataSourceId { get; private set; } = null!;

        /// <summary>
        /// The description of the scheduled query rule.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Whether this scheduled query rule is enabled.  Default is `true`.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// Frequency (in minutes) at which rule condition should be evaluated.  Values must be between 5 and 1440 (inclusive).
        /// </summary>
        [Output("frequency")]
        public Output<int> Frequency { get; private set; } = null!;

        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the scheduled query rule. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Log search query.
        /// </summary>
        [Output("query")]
        public Output<string> Query { get; private set; } = null!;

        [Output("queryType")]
        public Output<string?> QueryType { get; private set; } = null!;

        /// <summary>
        /// The name of the resource group in which to create the scheduled query rule instance.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// Severity of the alert. Possible values include: 0, 1, 2, 3, or 4.
        /// </summary>
        [Output("severity")]
        public Output<int?> Severity { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Time (in minutes) for which Alerts should be throttled or suppressed.  Values must be between 0 and 10000 (inclusive).
        /// </summary>
        [Output("throttling")]
        public Output<int?> Throttling { get; private set; } = null!;

        /// <summary>
        /// Time window for which data needs to be fetched for query (must be greater than or equal to `frequency`).  Values must be between 5 and 2880 (inclusive).
        /// </summary>
        [Output("timeWindow")]
        public Output<int> TimeWindow { get; private set; } = null!;

        /// <summary>
        /// The condition that results in the alert rule being run.
        /// </summary>
        [Output("trigger")]
        public Output<Outputs.ScheduledQueryRulesAlertTrigger> Trigger { get; private set; } = null!;


        /// <summary>
        /// Create a ScheduledQueryRulesAlert resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ScheduledQueryRulesAlert(string name, ScheduledQueryRulesAlertArgs args, CustomResourceOptions? options = null)
            : base("azure:monitoring/scheduledQueryRulesAlert:ScheduledQueryRulesAlert", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private ScheduledQueryRulesAlert(string name, Input<string> id, ScheduledQueryRulesAlertState? state = null, CustomResourceOptions? options = null)
            : base("azure:monitoring/scheduledQueryRulesAlert:ScheduledQueryRulesAlert", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ScheduledQueryRulesAlert resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ScheduledQueryRulesAlert Get(string name, Input<string> id, ScheduledQueryRulesAlertState? state = null, CustomResourceOptions? options = null)
        {
            return new ScheduledQueryRulesAlert(name, id, state, options);
        }
    }

    public sealed class ScheduledQueryRulesAlertArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// An `action` block as defined below.
        /// </summary>
        [Input("action", required: true)]
        public Input<Inputs.ScheduledQueryRulesAlertActionArgs> Action { get; set; } = null!;

        [Input("authorizedResourceIds")]
        private InputList<string>? _authorizedResourceIds;

        /// <summary>
        /// List of Resource IDs referred into query.
        /// </summary>
        public InputList<string> AuthorizedResourceIds
        {
            get => _authorizedResourceIds ?? (_authorizedResourceIds = new InputList<string>());
            set => _authorizedResourceIds = value;
        }

        /// <summary>
        /// The resource URI over which log search query is to be run.
        /// </summary>
        [Input("dataSourceId", required: true)]
        public Input<string> DataSourceId { get; set; } = null!;

        /// <summary>
        /// The description of the scheduled query rule.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether this scheduled query rule is enabled.  Default is `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Frequency (in minutes) at which rule condition should be evaluated.  Values must be between 5 and 1440 (inclusive).
        /// </summary>
        [Input("frequency", required: true)]
        public Input<int> Frequency { get; set; } = null!;

        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the scheduled query rule. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Log search query.
        /// </summary>
        [Input("query", required: true)]
        public Input<string> Query { get; set; } = null!;

        [Input("queryType")]
        public Input<string>? QueryType { get; set; }

        /// <summary>
        /// The name of the resource group in which to create the scheduled query rule instance.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Severity of the alert. Possible values include: 0, 1, 2, 3, or 4.
        /// </summary>
        [Input("severity")]
        public Input<int>? Severity { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Time (in minutes) for which Alerts should be throttled or suppressed.  Values must be between 0 and 10000 (inclusive).
        /// </summary>
        [Input("throttling")]
        public Input<int>? Throttling { get; set; }

        /// <summary>
        /// Time window for which data needs to be fetched for query (must be greater than or equal to `frequency`).  Values must be between 5 and 2880 (inclusive).
        /// </summary>
        [Input("timeWindow", required: true)]
        public Input<int> TimeWindow { get; set; } = null!;

        /// <summary>
        /// The condition that results in the alert rule being run.
        /// </summary>
        [Input("trigger", required: true)]
        public Input<Inputs.ScheduledQueryRulesAlertTriggerArgs> Trigger { get; set; } = null!;

        public ScheduledQueryRulesAlertArgs()
        {
        }
    }

    public sealed class ScheduledQueryRulesAlertState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// An `action` block as defined below.
        /// </summary>
        [Input("action")]
        public Input<Inputs.ScheduledQueryRulesAlertActionGetArgs>? Action { get; set; }

        [Input("authorizedResourceIds")]
        private InputList<string>? _authorizedResourceIds;

        /// <summary>
        /// List of Resource IDs referred into query.
        /// </summary>
        public InputList<string> AuthorizedResourceIds
        {
            get => _authorizedResourceIds ?? (_authorizedResourceIds = new InputList<string>());
            set => _authorizedResourceIds = value;
        }

        /// <summary>
        /// The resource URI over which log search query is to be run.
        /// </summary>
        [Input("dataSourceId")]
        public Input<string>? DataSourceId { get; set; }

        /// <summary>
        /// The description of the scheduled query rule.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether this scheduled query rule is enabled.  Default is `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Frequency (in minutes) at which rule condition should be evaluated.  Values must be between 5 and 1440 (inclusive).
        /// </summary>
        [Input("frequency")]
        public Input<int>? Frequency { get; set; }

        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the scheduled query rule. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Log search query.
        /// </summary>
        [Input("query")]
        public Input<string>? Query { get; set; }

        [Input("queryType")]
        public Input<string>? QueryType { get; set; }

        /// <summary>
        /// The name of the resource group in which to create the scheduled query rule instance.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// Severity of the alert. Possible values include: 0, 1, 2, 3, or 4.
        /// </summary>
        [Input("severity")]
        public Input<int>? Severity { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Time (in minutes) for which Alerts should be throttled or suppressed.  Values must be between 0 and 10000 (inclusive).
        /// </summary>
        [Input("throttling")]
        public Input<int>? Throttling { get; set; }

        /// <summary>
        /// Time window for which data needs to be fetched for query (must be greater than or equal to `frequency`).  Values must be between 5 and 2880 (inclusive).
        /// </summary>
        [Input("timeWindow")]
        public Input<int>? TimeWindow { get; set; }

        /// <summary>
        /// The condition that results in the alert rule being run.
        /// </summary>
        [Input("trigger")]
        public Input<Inputs.ScheduledQueryRulesAlertTriggerGetArgs>? Trigger { get; set; }

        public ScheduledQueryRulesAlertState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class ScheduledQueryRulesAlertActionArgs : Pulumi.ResourceArgs
    {
        [Input("actionGroups", required: true)]
        private InputList<string>? _actionGroups;

        /// <summary>
        /// List of action group reference resource IDs.
        /// </summary>
        public InputList<string> ActionGroups
        {
            get => _actionGroups ?? (_actionGroups = new InputList<string>());
            set => _actionGroups = value;
        }

        /// <summary>
        /// Custom payload to be sent for all webhook payloads in alerting action.
        /// </summary>
        [Input("customWebhookPayload")]
        public Input<string>? CustomWebhookPayload { get; set; }

        /// <summary>
        /// Custom subject override for all email ids in Azure action group.
        /// </summary>
        [Input("emailSubject")]
        public Input<string>? EmailSubject { get; set; }

        public ScheduledQueryRulesAlertActionArgs()
        {
        }
    }

    public sealed class ScheduledQueryRulesAlertActionGetArgs : Pulumi.ResourceArgs
    {
        [Input("actionGroups", required: true)]
        private InputList<string>? _actionGroups;

        /// <summary>
        /// List of action group reference resource IDs.
        /// </summary>
        public InputList<string> ActionGroups
        {
            get => _actionGroups ?? (_actionGroups = new InputList<string>());
            set => _actionGroups = value;
        }

        /// <summary>
        /// Custom payload to be sent for all webhook payloads in alerting action.
        /// </summary>
        [Input("customWebhookPayload")]
        public Input<string>? CustomWebhookPayload { get; set; }

        /// <summary>
        /// Custom subject override for all email ids in Azure action group.
        /// </summary>
        [Input("emailSubject")]
        public Input<string>? EmailSubject { get; set; }

        public ScheduledQueryRulesAlertActionGetArgs()
        {
        }
    }

    public sealed class ScheduledQueryRulesAlertTriggerArgs : Pulumi.ResourceArgs
    {
        [Input("metricTrigger")]
        public Input<ScheduledQueryRulesAlertTriggerMetricTriggerArgs>? MetricTrigger { get; set; }

        /// <summary>
        /// Evaluation operation for rule - 'Equal', 'GreaterThan' or 'LessThan'.
        /// </summary>
        [Input("operator", required: true)]
        public Input<string> Operator { get; set; } = null!;

        /// <summary>
        /// Result or count threshold based on which rule should be triggered.  Values must be between 0 and 10000 inclusive.
        /// </summary>
        [Input("threshold", required: true)]
        public Input<double> Threshold { get; set; } = null!;

        public ScheduledQueryRulesAlertTriggerArgs()
        {
        }
    }

    public sealed class ScheduledQueryRulesAlertTriggerGetArgs : Pulumi.ResourceArgs
    {
        [Input("metricTrigger")]
        public Input<ScheduledQueryRulesAlertTriggerMetricTriggerGetArgs>? MetricTrigger { get; set; }

        /// <summary>
        /// Evaluation operation for rule - 'Equal', 'GreaterThan' or 'LessThan'.
        /// </summary>
        [Input("operator", required: true)]
        public Input<string> Operator { get; set; } = null!;

        /// <summary>
        /// Result or count threshold based on which rule should be triggered.  Values must be between 0 and 10000 inclusive.
        /// </summary>
        [Input("threshold", required: true)]
        public Input<double> Threshold { get; set; } = null!;

        public ScheduledQueryRulesAlertTriggerGetArgs()
        {
        }
    }

    public sealed class ScheduledQueryRulesAlertTriggerMetricTriggerArgs : Pulumi.ResourceArgs
    {
        [Input("metricColumn", required: true)]
        public Input<string> MetricColumn { get; set; } = null!;

        [Input("metricTriggerType", required: true)]
        public Input<string> MetricTriggerType { get; set; } = null!;

        /// <summary>
        /// Evaluation operation for rule - 'Equal', 'GreaterThan' or 'LessThan'.
        /// </summary>
        [Input("operator", required: true)]
        public Input<string> Operator { get; set; } = null!;

        /// <summary>
        /// Result or count threshold based on which rule should be triggered.  Values must be between 0 and 10000 inclusive.
        /// </summary>
        [Input("threshold", required: true)]
        public Input<double> Threshold { get; set; } = null!;

        public ScheduledQueryRulesAlertTriggerMetricTriggerArgs()
        {
        }
    }

    public sealed class ScheduledQueryRulesAlertTriggerMetricTriggerGetArgs : Pulumi.ResourceArgs
    {
        [Input("metricColumn", required: true)]
        public Input<string> MetricColumn { get; set; } = null!;

        [Input("metricTriggerType", required: true)]
        public Input<string> MetricTriggerType { get; set; } = null!;

        /// <summary>
        /// Evaluation operation for rule - 'Equal', 'GreaterThan' or 'LessThan'.
        /// </summary>
        [Input("operator", required: true)]
        public Input<string> Operator { get; set; } = null!;

        /// <summary>
        /// Result or count threshold based on which rule should be triggered.  Values must be between 0 and 10000 inclusive.
        /// </summary>
        [Input("threshold", required: true)]
        public Input<double> Threshold { get; set; } = null!;

        public ScheduledQueryRulesAlertTriggerMetricTriggerGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class ScheduledQueryRulesAlertAction
    {
        /// <summary>
        /// List of action group reference resource IDs.
        /// </summary>
        public readonly ImmutableArray<string> ActionGroups;
        /// <summary>
        /// Custom payload to be sent for all webhook payloads in alerting action.
        /// </summary>
        public readonly string? CustomWebhookPayload;
        /// <summary>
        /// Custom subject override for all email ids in Azure action group.
        /// </summary>
        public readonly string? EmailSubject;

        [OutputConstructor]
        private ScheduledQueryRulesAlertAction(
            ImmutableArray<string> actionGroups,
            string? customWebhookPayload,
            string? emailSubject)
        {
            ActionGroups = actionGroups;
            CustomWebhookPayload = customWebhookPayload;
            EmailSubject = emailSubject;
        }
    }

    [OutputType]
    public sealed class ScheduledQueryRulesAlertTrigger
    {
        public readonly ScheduledQueryRulesAlertTriggerMetricTrigger? MetricTrigger;
        /// <summary>
        /// Evaluation operation for rule - 'Equal', 'GreaterThan' or 'LessThan'.
        /// </summary>
        public readonly string Operator;
        /// <summary>
        /// Result or count threshold based on which rule should be triggered.  Values must be between 0 and 10000 inclusive.
        /// </summary>
        public readonly double Threshold;

        [OutputConstructor]
        private ScheduledQueryRulesAlertTrigger(
            ScheduledQueryRulesAlertTriggerMetricTrigger? metricTrigger,
            string @operator,
            double threshold)
        {
            MetricTrigger = metricTrigger;
            Operator = @operator;
            Threshold = threshold;
        }
    }

    [OutputType]
    public sealed class ScheduledQueryRulesAlertTriggerMetricTrigger
    {
        public readonly string MetricColumn;
        public readonly string MetricTriggerType;
        /// <summary>
        /// Evaluation operation for rule - 'Equal', 'GreaterThan' or 'LessThan'.
        /// </summary>
        public readonly string Operator;
        /// <summary>
        /// Result or count threshold based on which rule should be triggered.  Values must be between 0 and 10000 inclusive.
        /// </summary>
        public readonly double Threshold;

        [OutputConstructor]
        private ScheduledQueryRulesAlertTriggerMetricTrigger(
            string metricColumn,
            string metricTriggerType,
            string @operator,
            double threshold)
        {
            MetricColumn = metricColumn;
            MetricTriggerType = metricTriggerType;
            Operator = @operator;
            Threshold = threshold;
        }
    }
    }
}
