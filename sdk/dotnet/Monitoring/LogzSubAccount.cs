// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Monitoring
{
    /// <summary>
    /// Manages a logz Sub Account.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleLogzMonitor = new Azure.Monitoring.LogzMonitor("exampleLogzMonitor", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         Plan = new Azure.Monitoring.Inputs.LogzMonitorPlanArgs
    ///         {
    ///             BillingCycle = "MONTHLY",
    ///             EffectiveDate = "2022-06-06T00:00:00Z",
    ///             UsageType = "COMMITTED",
    ///         },
    ///         User = new Azure.Monitoring.Inputs.LogzMonitorUserArgs
    ///         {
    ///             Email = "user@example.com",
    ///             FirstName = "Example",
    ///             LastName = "User",
    ///             PhoneNumber = "+12313803556",
    ///         },
    ///     });
    /// 
    ///     var exampleLogzSubAccount = new Azure.Monitoring.LogzSubAccount("exampleLogzSubAccount", new()
    ///     {
    ///         LogzMonitorId = exampleLogzMonitor.Id,
    ///         User = new Azure.Monitoring.Inputs.LogzSubAccountUserArgs
    ///         {
    ///             Email = exampleLogzMonitor.User.Apply(user =&gt; user.Email),
    ///             FirstName = exampleLogzMonitor.User.Apply(user =&gt; user.FirstName),
    ///             LastName = exampleLogzMonitor.User.Apply(user =&gt; user.LastName),
    ///             PhoneNumber = exampleLogzMonitor.User.Apply(user =&gt; user.PhoneNumber),
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// logz SubAccounts can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:monitoring/logzSubAccount:LogzSubAccount example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Logz/monitors/monitor1/accounts/subAccount1
    /// ```
    /// </summary>
    [AzureResourceType("azure:monitoring/logzSubAccount:LogzSubAccount")]
    public partial class LogzSubAccount : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether the resource monitoring is enabled? Defaults to `true`.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// The ID of the Logz Monitor. Changing this forces a new logz Sub Account to be created.
        /// </summary>
        [Output("logzMonitorId")]
        public Output<string> LogzMonitorId { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this logz Sub Account. Possible values must be between 1 and 32 characters in length and may contain only letters, numbers, hyphens and underscores. Changing this forces a new logz Sub Account to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags which should be assigned to the logz Sub Account.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A `user` block as defined below.
        /// </summary>
        [Output("user")]
        public Output<Outputs.LogzSubAccountUser> User { get; private set; } = null!;


        /// <summary>
        /// Create a LogzSubAccount resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LogzSubAccount(string name, LogzSubAccountArgs args, CustomResourceOptions? options = null)
            : base("azure:monitoring/logzSubAccount:LogzSubAccount", name, args ?? new LogzSubAccountArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LogzSubAccount(string name, Input<string> id, LogzSubAccountState? state = null, CustomResourceOptions? options = null)
            : base("azure:monitoring/logzSubAccount:LogzSubAccount", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LogzSubAccount resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LogzSubAccount Get(string name, Input<string> id, LogzSubAccountState? state = null, CustomResourceOptions? options = null)
        {
            return new LogzSubAccount(name, id, state, options);
        }
    }

    public sealed class LogzSubAccountArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether the resource monitoring is enabled? Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The ID of the Logz Monitor. Changing this forces a new logz Sub Account to be created.
        /// </summary>
        [Input("logzMonitorId", required: true)]
        public Input<string> LogzMonitorId { get; set; } = null!;

        /// <summary>
        /// The name which should be used for this logz Sub Account. Possible values must be between 1 and 32 characters in length and may contain only letters, numbers, hyphens and underscores. Changing this forces a new logz Sub Account to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the logz Sub Account.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// A `user` block as defined below.
        /// </summary>
        [Input("user", required: true)]
        public Input<Inputs.LogzSubAccountUserArgs> User { get; set; } = null!;

        public LogzSubAccountArgs()
        {
        }
        public static new LogzSubAccountArgs Empty => new LogzSubAccountArgs();
    }

    public sealed class LogzSubAccountState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether the resource monitoring is enabled? Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The ID of the Logz Monitor. Changing this forces a new logz Sub Account to be created.
        /// </summary>
        [Input("logzMonitorId")]
        public Input<string>? LogzMonitorId { get; set; }

        /// <summary>
        /// The name which should be used for this logz Sub Account. Possible values must be between 1 and 32 characters in length and may contain only letters, numbers, hyphens and underscores. Changing this forces a new logz Sub Account to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the logz Sub Account.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// A `user` block as defined below.
        /// </summary>
        [Input("user")]
        public Input<Inputs.LogzSubAccountUserGetArgs>? User { get; set; }

        public LogzSubAccountState()
        {
        }
        public static new LogzSubAccountState Empty => new LogzSubAccountState();
    }
}
