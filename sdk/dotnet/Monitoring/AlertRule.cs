// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Monitoring
{
    /// <summary>
    /// Manages a [metric-based alert rule](https://docs.microsoft.com/en-us/azure/monitoring-and-diagnostics/monitor-quick-resource-metric-alert-portal) in Azure Monitor.
    /// 
    /// &gt; **NOTE:** This resource has been [deprecated](https://docs.microsoft.com/en-us/azure/azure-monitor/platform/monitoring-classic-retirement) in favour of the `azure.monitoring.MetricAlert` resource and will be removed in the next major version of the AzureRM Provider. The new resource shares the same fields as this one, and information on migrating across can be found in this guide.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/metric_alertrule.html.markdown.
    /// </summary>
    public partial class AlertRule : Pulumi.CustomResource
    {
        /// <summary>
        /// Defines how the metric data is combined over time. Possible values are `Average`, `Minimum`, `Maximum`, `Total`, and `Last`.
        /// </summary>
        [Output("aggregation")]
        public Output<string> Aggregation { get; private set; } = null!;

        /// <summary>
        /// A verbose description of the alert rule that will be included in the alert email.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// A `email_action` block as defined below.
        /// </summary>
        [Output("emailAction")]
        public Output<Outputs.AlertRuleEmailAction> EmailAction { get; private set; } = null!;

        /// <summary>
        /// If `true`, the alert rule is enabled. Defaults to `true`.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The metric that defines what the rule monitors.
        /// </summary>
        [Output("metricName")]
        public Output<string> MetricName { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the alert rule. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The operator used to compare the metric data and the threshold. Possible values are `GreaterThan`, `GreaterThanOrEqual`, `LessThan`, and `LessThanOrEqual`.
        /// </summary>
        [Output("operator")]
        public Output<string> Operator { get; private set; } = null!;

        /// <summary>
        /// The period of time formatted in [ISO 8601 duration format](https://en.wikipedia.org/wiki/ISO_8601#Durations) that is used to monitor the alert activity based on the threshold. The period must be between 5 minutes and 1 day.
        /// </summary>
        [Output("period")]
        public Output<string> Period { get; private set; } = null!;

        /// <summary>
        /// The name of the resource group in which to create the alert rule. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// The ID of the resource monitored by the alert rule.
        /// </summary>
        [Output("resourceId")]
        public Output<string> ResourceId { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource. Changing this forces a new resource to be created.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>> Tags { get; private set; } = null!;

        /// <summary>
        /// The threshold value that activates the alert.
        /// </summary>
        [Output("threshold")]
        public Output<double> Threshold { get; private set; } = null!;

        /// <summary>
        /// A `webhook_action` block as defined below.
        /// </summary>
        [Output("webhookAction")]
        public Output<Outputs.AlertRuleWebhookAction> WebhookAction { get; private set; } = null!;


        /// <summary>
        /// Create a AlertRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AlertRule(string name, AlertRuleArgs args, CustomResourceOptions? options = null)
            : base("azure:monitoring/alertRule:AlertRule", name, args, MakeResourceOptions(options, ""))
        {
        }

        private AlertRule(string name, Input<string> id, AlertRuleState? state = null, CustomResourceOptions? options = null)
            : base("azure:monitoring/alertRule:AlertRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AlertRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AlertRule Get(string name, Input<string> id, AlertRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new AlertRule(name, id, state, options);
        }
    }

    public sealed class AlertRuleArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Defines how the metric data is combined over time. Possible values are `Average`, `Minimum`, `Maximum`, `Total`, and `Last`.
        /// </summary>
        [Input("aggregation", required: true)]
        public Input<string> Aggregation { get; set; } = null!;

        /// <summary>
        /// A verbose description of the alert rule that will be included in the alert email.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// A `email_action` block as defined below.
        /// </summary>
        [Input("emailAction")]
        public Input<Inputs.AlertRuleEmailActionArgs>? EmailAction { get; set; }

        /// <summary>
        /// If `true`, the alert rule is enabled. Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The metric that defines what the rule monitors.
        /// </summary>
        [Input("metricName", required: true)]
        public Input<string> MetricName { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the alert rule. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The operator used to compare the metric data and the threshold. Possible values are `GreaterThan`, `GreaterThanOrEqual`, `LessThan`, and `LessThanOrEqual`.
        /// </summary>
        [Input("operator", required: true)]
        public Input<string> Operator { get; set; } = null!;

        /// <summary>
        /// The period of time formatted in [ISO 8601 duration format](https://en.wikipedia.org/wiki/ISO_8601#Durations) that is used to monitor the alert activity based on the threshold. The period must be between 5 minutes and 1 day.
        /// </summary>
        [Input("period", required: true)]
        public Input<string> Period { get; set; } = null!;

        /// <summary>
        /// The name of the resource group in which to create the alert rule. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The ID of the resource monitored by the alert rule.
        /// </summary>
        [Input("resourceId", required: true)]
        public Input<string> ResourceId { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource. Changing this forces a new resource to be created.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The threshold value that activates the alert.
        /// </summary>
        [Input("threshold", required: true)]
        public Input<double> Threshold { get; set; } = null!;

        /// <summary>
        /// A `webhook_action` block as defined below.
        /// </summary>
        [Input("webhookAction")]
        public Input<Inputs.AlertRuleWebhookActionArgs>? WebhookAction { get; set; }

        public AlertRuleArgs()
        {
        }
    }

    public sealed class AlertRuleState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Defines how the metric data is combined over time. Possible values are `Average`, `Minimum`, `Maximum`, `Total`, and `Last`.
        /// </summary>
        [Input("aggregation")]
        public Input<string>? Aggregation { get; set; }

        /// <summary>
        /// A verbose description of the alert rule that will be included in the alert email.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// A `email_action` block as defined below.
        /// </summary>
        [Input("emailAction")]
        public Input<Inputs.AlertRuleEmailActionGetArgs>? EmailAction { get; set; }

        /// <summary>
        /// If `true`, the alert rule is enabled. Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The metric that defines what the rule monitors.
        /// </summary>
        [Input("metricName")]
        public Input<string>? MetricName { get; set; }

        /// <summary>
        /// Specifies the name of the alert rule. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The operator used to compare the metric data and the threshold. Possible values are `GreaterThan`, `GreaterThanOrEqual`, `LessThan`, and `LessThanOrEqual`.
        /// </summary>
        [Input("operator")]
        public Input<string>? Operator { get; set; }

        /// <summary>
        /// The period of time formatted in [ISO 8601 duration format](https://en.wikipedia.org/wiki/ISO_8601#Durations) that is used to monitor the alert activity based on the threshold. The period must be between 5 minutes and 1 day.
        /// </summary>
        [Input("period")]
        public Input<string>? Period { get; set; }

        /// <summary>
        /// The name of the resource group in which to create the alert rule. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// The ID of the resource monitored by the alert rule.
        /// </summary>
        [Input("resourceId")]
        public Input<string>? ResourceId { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource. Changing this forces a new resource to be created.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The threshold value that activates the alert.
        /// </summary>
        [Input("threshold")]
        public Input<double>? Threshold { get; set; }

        /// <summary>
        /// A `webhook_action` block as defined below.
        /// </summary>
        [Input("webhookAction")]
        public Input<Inputs.AlertRuleWebhookActionGetArgs>? WebhookAction { get; set; }

        public AlertRuleState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class AlertRuleEmailActionArgs : Pulumi.ResourceArgs
    {
        [Input("customEmails")]
        private InputList<string>? _customEmails;

        /// <summary>
        /// A list of email addresses to be notified when the alert is triggered.
        /// </summary>
        public InputList<string> CustomEmails
        {
            get => _customEmails ?? (_customEmails = new InputList<string>());
            set => _customEmails = value;
        }

        /// <summary>
        /// If `true`, the administrators (service and co-administrators) of the subscription are notified when the alert is triggered. Defaults to `false`.
        /// </summary>
        [Input("sendToServiceOwners")]
        public Input<bool>? SendToServiceOwners { get; set; }

        public AlertRuleEmailActionArgs()
        {
        }
    }

    public sealed class AlertRuleEmailActionGetArgs : Pulumi.ResourceArgs
    {
        [Input("customEmails")]
        private InputList<string>? _customEmails;

        /// <summary>
        /// A list of email addresses to be notified when the alert is triggered.
        /// </summary>
        public InputList<string> CustomEmails
        {
            get => _customEmails ?? (_customEmails = new InputList<string>());
            set => _customEmails = value;
        }

        /// <summary>
        /// If `true`, the administrators (service and co-administrators) of the subscription are notified when the alert is triggered. Defaults to `false`.
        /// </summary>
        [Input("sendToServiceOwners")]
        public Input<bool>? SendToServiceOwners { get; set; }

        public AlertRuleEmailActionGetArgs()
        {
        }
    }

    public sealed class AlertRuleWebhookActionArgs : Pulumi.ResourceArgs
    {
        [Input("properties")]
        private InputMap<string>? _properties;

        /// <summary>
        /// A dictionary of custom properties to include with the webhook POST operation payload.
        /// </summary>
        public InputMap<string> Properties
        {
            get => _properties ?? (_properties = new InputMap<string>());
            set => _properties = value;
        }

        /// <summary>
        /// The service uri of the webhook to POST the notification when the alert is triggered.
        /// </summary>
        [Input("serviceUri", required: true)]
        public Input<string> ServiceUri { get; set; } = null!;

        public AlertRuleWebhookActionArgs()
        {
        }
    }

    public sealed class AlertRuleWebhookActionGetArgs : Pulumi.ResourceArgs
    {
        [Input("properties")]
        private InputMap<string>? _properties;

        /// <summary>
        /// A dictionary of custom properties to include with the webhook POST operation payload.
        /// </summary>
        public InputMap<string> Properties
        {
            get => _properties ?? (_properties = new InputMap<string>());
            set => _properties = value;
        }

        /// <summary>
        /// The service uri of the webhook to POST the notification when the alert is triggered.
        /// </summary>
        [Input("serviceUri", required: true)]
        public Input<string> ServiceUri { get; set; } = null!;

        public AlertRuleWebhookActionGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class AlertRuleEmailAction
    {
        /// <summary>
        /// A list of email addresses to be notified when the alert is triggered.
        /// </summary>
        public readonly ImmutableArray<string> CustomEmails;
        /// <summary>
        /// If `true`, the administrators (service and co-administrators) of the subscription are notified when the alert is triggered. Defaults to `false`.
        /// </summary>
        public readonly bool SendToServiceOwners;

        [OutputConstructor]
        private AlertRuleEmailAction(
            ImmutableArray<string> customEmails,
            bool sendToServiceOwners)
        {
            CustomEmails = customEmails;
            SendToServiceOwners = sendToServiceOwners;
        }
    }

    [OutputType]
    public sealed class AlertRuleWebhookAction
    {
        /// <summary>
        /// A dictionary of custom properties to include with the webhook POST operation payload.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Properties;
        /// <summary>
        /// The service uri of the webhook to POST the notification when the alert is triggered.
        /// </summary>
        public readonly string ServiceUri;

        [OutputConstructor]
        private AlertRuleWebhookAction(
            ImmutableDictionary<string, string> properties,
            string serviceUri)
        {
            Properties = properties;
            ServiceUri = serviceUri;
        }
    }
    }
}
