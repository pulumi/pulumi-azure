// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Monitoring
{
    /// <summary>
    /// Manages a Diagnostic Setting for an existing Resource.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/monitor_diagnostic_setting.html.markdown.
    /// </summary>
    public partial class DiagnosticSetting : Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies the ID of an Event Hub Namespace Authorization Rule used to send Diagnostics Data. Changing this forces a new resource to be created.
        /// </summary>
        [Output("eventhubAuthorizationRuleId")]
        public Output<string?> EventhubAuthorizationRuleId { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the Event Hub where Diagnostics Data should be sent. Changing this forces a new resource to be created.
        /// </summary>
        [Output("eventhubName")]
        public Output<string?> EventhubName { get; private set; } = null!;

        /// <summary>
        /// One or more `log` blocks as defined below.
        /// </summary>
        [Output("logs")]
        public Output<ImmutableArray<Outputs.DiagnosticSettingLogs>> Logs { get; private set; } = null!;

        /// <summary>
        /// When set to 'Dedicated' logs sent to a Log Analytics workspace will go into resource specific tables, instead of the legacy AzureDiagnostics table.
        /// </summary>
        [Output("logAnalyticsDestinationType")]
        public Output<string?> LogAnalyticsDestinationType { get; private set; } = null!;

        /// <summary>
        /// Specifies the ID of a Log Analytics Workspace where Diagnostics Data should be sent. Changing this forces a new resource to be created.
        /// </summary>
        [Output("logAnalyticsWorkspaceId")]
        public Output<string?> LogAnalyticsWorkspaceId { get; private set; } = null!;

        /// <summary>
        /// One or more `metric` blocks as defined below.
        /// </summary>
        [Output("metrics")]
        public Output<ImmutableArray<Outputs.DiagnosticSettingMetrics>> Metrics { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the Diagnostic Setting. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// With this parameter you can specify a storage account which should be used to send the logs to. Parameter must be a valid Azure Resource ID. Changing this forces a new resource to be created.
        /// </summary>
        [Output("storageAccountId")]
        public Output<string?> StorageAccountId { get; private set; } = null!;

        /// <summary>
        /// The ID of an existing Resource on which to configure Diagnostic Settings. Changing this forces a new resource to be created.
        /// </summary>
        [Output("targetResourceId")]
        public Output<string> TargetResourceId { get; private set; } = null!;


        /// <summary>
        /// Create a DiagnosticSetting resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DiagnosticSetting(string name, DiagnosticSettingArgs args, CustomResourceOptions? options = null)
            : base("azure:monitoring/diagnosticSetting:DiagnosticSetting", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private DiagnosticSetting(string name, Input<string> id, DiagnosticSettingState? state = null, CustomResourceOptions? options = null)
            : base("azure:monitoring/diagnosticSetting:DiagnosticSetting", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DiagnosticSetting resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DiagnosticSetting Get(string name, Input<string> id, DiagnosticSettingState? state = null, CustomResourceOptions? options = null)
        {
            return new DiagnosticSetting(name, id, state, options);
        }
    }

    public sealed class DiagnosticSettingArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the ID of an Event Hub Namespace Authorization Rule used to send Diagnostics Data. Changing this forces a new resource to be created.
        /// </summary>
        [Input("eventhubAuthorizationRuleId")]
        public Input<string>? EventhubAuthorizationRuleId { get; set; }

        /// <summary>
        /// Specifies the name of the Event Hub where Diagnostics Data should be sent. Changing this forces a new resource to be created.
        /// </summary>
        [Input("eventhubName")]
        public Input<string>? EventhubName { get; set; }

        [Input("logs")]
        private InputList<Inputs.DiagnosticSettingLogsArgs>? _logs;

        /// <summary>
        /// One or more `log` blocks as defined below.
        /// </summary>
        public InputList<Inputs.DiagnosticSettingLogsArgs> Logs
        {
            get => _logs ?? (_logs = new InputList<Inputs.DiagnosticSettingLogsArgs>());
            set => _logs = value;
        }

        /// <summary>
        /// When set to 'Dedicated' logs sent to a Log Analytics workspace will go into resource specific tables, instead of the legacy AzureDiagnostics table.
        /// </summary>
        [Input("logAnalyticsDestinationType")]
        public Input<string>? LogAnalyticsDestinationType { get; set; }

        /// <summary>
        /// Specifies the ID of a Log Analytics Workspace where Diagnostics Data should be sent. Changing this forces a new resource to be created.
        /// </summary>
        [Input("logAnalyticsWorkspaceId")]
        public Input<string>? LogAnalyticsWorkspaceId { get; set; }

        [Input("metrics")]
        private InputList<Inputs.DiagnosticSettingMetricsArgs>? _metrics;

        /// <summary>
        /// One or more `metric` blocks as defined below.
        /// </summary>
        public InputList<Inputs.DiagnosticSettingMetricsArgs> Metrics
        {
            get => _metrics ?? (_metrics = new InputList<Inputs.DiagnosticSettingMetricsArgs>());
            set => _metrics = value;
        }

        /// <summary>
        /// Specifies the name of the Diagnostic Setting. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// With this parameter you can specify a storage account which should be used to send the logs to. Parameter must be a valid Azure Resource ID. Changing this forces a new resource to be created.
        /// </summary>
        [Input("storageAccountId")]
        public Input<string>? StorageAccountId { get; set; }

        /// <summary>
        /// The ID of an existing Resource on which to configure Diagnostic Settings. Changing this forces a new resource to be created.
        /// </summary>
        [Input("targetResourceId", required: true)]
        public Input<string> TargetResourceId { get; set; } = null!;

        public DiagnosticSettingArgs()
        {
        }
    }

    public sealed class DiagnosticSettingState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the ID of an Event Hub Namespace Authorization Rule used to send Diagnostics Data. Changing this forces a new resource to be created.
        /// </summary>
        [Input("eventhubAuthorizationRuleId")]
        public Input<string>? EventhubAuthorizationRuleId { get; set; }

        /// <summary>
        /// Specifies the name of the Event Hub where Diagnostics Data should be sent. Changing this forces a new resource to be created.
        /// </summary>
        [Input("eventhubName")]
        public Input<string>? EventhubName { get; set; }

        [Input("logs")]
        private InputList<Inputs.DiagnosticSettingLogsGetArgs>? _logs;

        /// <summary>
        /// One or more `log` blocks as defined below.
        /// </summary>
        public InputList<Inputs.DiagnosticSettingLogsGetArgs> Logs
        {
            get => _logs ?? (_logs = new InputList<Inputs.DiagnosticSettingLogsGetArgs>());
            set => _logs = value;
        }

        /// <summary>
        /// When set to 'Dedicated' logs sent to a Log Analytics workspace will go into resource specific tables, instead of the legacy AzureDiagnostics table.
        /// </summary>
        [Input("logAnalyticsDestinationType")]
        public Input<string>? LogAnalyticsDestinationType { get; set; }

        /// <summary>
        /// Specifies the ID of a Log Analytics Workspace where Diagnostics Data should be sent. Changing this forces a new resource to be created.
        /// </summary>
        [Input("logAnalyticsWorkspaceId")]
        public Input<string>? LogAnalyticsWorkspaceId { get; set; }

        [Input("metrics")]
        private InputList<Inputs.DiagnosticSettingMetricsGetArgs>? _metrics;

        /// <summary>
        /// One or more `metric` blocks as defined below.
        /// </summary>
        public InputList<Inputs.DiagnosticSettingMetricsGetArgs> Metrics
        {
            get => _metrics ?? (_metrics = new InputList<Inputs.DiagnosticSettingMetricsGetArgs>());
            set => _metrics = value;
        }

        /// <summary>
        /// Specifies the name of the Diagnostic Setting. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// With this parameter you can specify a storage account which should be used to send the logs to. Parameter must be a valid Azure Resource ID. Changing this forces a new resource to be created.
        /// </summary>
        [Input("storageAccountId")]
        public Input<string>? StorageAccountId { get; set; }

        /// <summary>
        /// The ID of an existing Resource on which to configure Diagnostic Settings. Changing this forces a new resource to be created.
        /// </summary>
        [Input("targetResourceId")]
        public Input<string>? TargetResourceId { get; set; }

        public DiagnosticSettingState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class DiagnosticSettingLogsArgs : Pulumi.ResourceArgs
    {
        [Input("category", required: true)]
        public Input<string> Category { get; set; } = null!;

        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("retentionPolicy", required: true)]
        public Input<DiagnosticSettingLogsRetentionPolicyArgs> RetentionPolicy { get; set; } = null!;

        public DiagnosticSettingLogsArgs()
        {
        }
    }

    public sealed class DiagnosticSettingLogsGetArgs : Pulumi.ResourceArgs
    {
        [Input("category", required: true)]
        public Input<string> Category { get; set; } = null!;

        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("retentionPolicy", required: true)]
        public Input<DiagnosticSettingLogsRetentionPolicyGetArgs> RetentionPolicy { get; set; } = null!;

        public DiagnosticSettingLogsGetArgs()
        {
        }
    }

    public sealed class DiagnosticSettingLogsRetentionPolicyArgs : Pulumi.ResourceArgs
    {
        [Input("days")]
        public Input<int>? Days { get; set; }

        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        public DiagnosticSettingLogsRetentionPolicyArgs()
        {
        }
    }

    public sealed class DiagnosticSettingLogsRetentionPolicyGetArgs : Pulumi.ResourceArgs
    {
        [Input("days")]
        public Input<int>? Days { get; set; }

        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        public DiagnosticSettingLogsRetentionPolicyGetArgs()
        {
        }
    }

    public sealed class DiagnosticSettingMetricsArgs : Pulumi.ResourceArgs
    {
        [Input("category", required: true)]
        public Input<string> Category { get; set; } = null!;

        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("retentionPolicy", required: true)]
        public Input<DiagnosticSettingMetricsRetentionPolicyArgs> RetentionPolicy { get; set; } = null!;

        public DiagnosticSettingMetricsArgs()
        {
        }
    }

    public sealed class DiagnosticSettingMetricsGetArgs : Pulumi.ResourceArgs
    {
        [Input("category", required: true)]
        public Input<string> Category { get; set; } = null!;

        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("retentionPolicy", required: true)]
        public Input<DiagnosticSettingMetricsRetentionPolicyGetArgs> RetentionPolicy { get; set; } = null!;

        public DiagnosticSettingMetricsGetArgs()
        {
        }
    }

    public sealed class DiagnosticSettingMetricsRetentionPolicyArgs : Pulumi.ResourceArgs
    {
        [Input("days")]
        public Input<int>? Days { get; set; }

        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        public DiagnosticSettingMetricsRetentionPolicyArgs()
        {
        }
    }

    public sealed class DiagnosticSettingMetricsRetentionPolicyGetArgs : Pulumi.ResourceArgs
    {
        [Input("days")]
        public Input<int>? Days { get; set; }

        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        public DiagnosticSettingMetricsRetentionPolicyGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class DiagnosticSettingLogs
    {
        public readonly string Category;
        public readonly bool? Enabled;
        public readonly DiagnosticSettingLogsRetentionPolicy RetentionPolicy;

        [OutputConstructor]
        private DiagnosticSettingLogs(
            string category,
            bool? enabled,
            DiagnosticSettingLogsRetentionPolicy retentionPolicy)
        {
            Category = category;
            Enabled = enabled;
            RetentionPolicy = retentionPolicy;
        }
    }

    [OutputType]
    public sealed class DiagnosticSettingLogsRetentionPolicy
    {
        public readonly int? Days;
        public readonly bool Enabled;

        [OutputConstructor]
        private DiagnosticSettingLogsRetentionPolicy(
            int? days,
            bool enabled)
        {
            Days = days;
            Enabled = enabled;
        }
    }

    [OutputType]
    public sealed class DiagnosticSettingMetrics
    {
        public readonly string Category;
        public readonly bool? Enabled;
        public readonly DiagnosticSettingMetricsRetentionPolicy RetentionPolicy;

        [OutputConstructor]
        private DiagnosticSettingMetrics(
            string category,
            bool? enabled,
            DiagnosticSettingMetricsRetentionPolicy retentionPolicy)
        {
            Category = category;
            Enabled = enabled;
            RetentionPolicy = retentionPolicy;
        }
    }

    [OutputType]
    public sealed class DiagnosticSettingMetricsRetentionPolicy
    {
        public readonly int? Days;
        public readonly bool Enabled;

        [OutputConstructor]
        private DiagnosticSettingMetricsRetentionPolicy(
            int? days,
            bool enabled)
        {
            Days = days;
            Enabled = enabled;
        }
    }
    }
}
