// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.MySql
{
    /// <summary>
    /// Manages an Active Directory administrator on a MySQL Flexible Server
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var current = Azure.Core.GetClientConfig.Invoke();
    /// 
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Name = "example-resources",
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleUserAssignedIdentity = new Azure.Authorization.UserAssignedIdentity("example", new()
    ///     {
    ///         Name = "exampleUAI",
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///     });
    /// 
    ///     var exampleFlexibleServer = new Azure.MySql.FlexibleServer("example", new()
    ///     {
    ///         Name = "example-mysqlfs",
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///         AdministratorLogin = "_admin_Terraform_892123456789312",
    ///         AdministratorPassword = "QAZwsx123",
    ///         SkuName = "B_Standard_B1s",
    ///         Zone = "2",
    ///         Identity = new Azure.MySql.Inputs.FlexibleServerIdentityArgs
    ///         {
    ///             Type = "UserAssigned",
    ///             IdentityIds = new[]
    ///             {
    ///                 exampleUserAssignedIdentity.Id,
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleFlexibleServerActiveDirectoryAdministratory = new Azure.MySql.FlexibleServerActiveDirectoryAdministratory("example", new()
    ///     {
    ///         ServerId = exampleFlexibleServer.Id,
    ///         IdentityId = exampleUserAssignedIdentity.Id,
    ///         Login = "sqladmin",
    ///         ObjectId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.ClientId),
    ///         TenantId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.TenantId),
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// A MySQL Flexible Server Active Directory Administrator can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:mysql/flexibleServerActiveDirectoryAdministratory:FlexibleServerActiveDirectoryAdministratory example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.DBforMySQL/flexibleServers/server1/administrators/ActiveDirectory
    /// ```
    /// </summary>
    [AzureResourceType("azure:mysql/flexibleServerActiveDirectoryAdministratory:FlexibleServerActiveDirectoryAdministratory")]
    public partial class FlexibleServerActiveDirectoryAdministratory : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The resource ID of the identity used for AAD Authentication.
        /// </summary>
        [Output("identityId")]
        public Output<string> IdentityId { get; private set; } = null!;

        /// <summary>
        /// The login name of the principal to set as the server administrator
        /// </summary>
        [Output("login")]
        public Output<string> Login { get; private set; } = null!;

        /// <summary>
        /// The ID of the principal to set as the server administrator. For a managed identity this should be the Client ID of the identity.
        /// </summary>
        [Output("objectId")]
        public Output<string> ObjectId { get; private set; } = null!;

        /// <summary>
        /// The resource ID of the MySQL Flexible Server. Changing this forces a new resource to be created.
        /// </summary>
        [Output("serverId")]
        public Output<string> ServerId { get; private set; } = null!;

        /// <summary>
        /// The Azure Tenant ID.
        /// </summary>
        [Output("tenantId")]
        public Output<string> TenantId { get; private set; } = null!;


        /// <summary>
        /// Create a FlexibleServerActiveDirectoryAdministratory resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FlexibleServerActiveDirectoryAdministratory(string name, FlexibleServerActiveDirectoryAdministratoryArgs args, CustomResourceOptions? options = null)
            : base("azure:mysql/flexibleServerActiveDirectoryAdministratory:FlexibleServerActiveDirectoryAdministratory", name, args ?? new FlexibleServerActiveDirectoryAdministratoryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FlexibleServerActiveDirectoryAdministratory(string name, Input<string> id, FlexibleServerActiveDirectoryAdministratoryState? state = null, CustomResourceOptions? options = null)
            : base("azure:mysql/flexibleServerActiveDirectoryAdministratory:FlexibleServerActiveDirectoryAdministratory", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure:mysql/flexibleServerActiveDirectoryAdministrator:FlexibleServerActiveDirectoryAdministrator" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FlexibleServerActiveDirectoryAdministratory resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FlexibleServerActiveDirectoryAdministratory Get(string name, Input<string> id, FlexibleServerActiveDirectoryAdministratoryState? state = null, CustomResourceOptions? options = null)
        {
            return new FlexibleServerActiveDirectoryAdministratory(name, id, state, options);
        }
    }

    public sealed class FlexibleServerActiveDirectoryAdministratoryArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The resource ID of the identity used for AAD Authentication.
        /// </summary>
        [Input("identityId", required: true)]
        public Input<string> IdentityId { get; set; } = null!;

        /// <summary>
        /// The login name of the principal to set as the server administrator
        /// </summary>
        [Input("login", required: true)]
        public Input<string> Login { get; set; } = null!;

        /// <summary>
        /// The ID of the principal to set as the server administrator. For a managed identity this should be the Client ID of the identity.
        /// </summary>
        [Input("objectId", required: true)]
        public Input<string> ObjectId { get; set; } = null!;

        /// <summary>
        /// The resource ID of the MySQL Flexible Server. Changing this forces a new resource to be created.
        /// </summary>
        [Input("serverId", required: true)]
        public Input<string> ServerId { get; set; } = null!;

        /// <summary>
        /// The Azure Tenant ID.
        /// </summary>
        [Input("tenantId", required: true)]
        public Input<string> TenantId { get; set; } = null!;

        public FlexibleServerActiveDirectoryAdministratoryArgs()
        {
        }
        public static new FlexibleServerActiveDirectoryAdministratoryArgs Empty => new FlexibleServerActiveDirectoryAdministratoryArgs();
    }

    public sealed class FlexibleServerActiveDirectoryAdministratoryState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The resource ID of the identity used for AAD Authentication.
        /// </summary>
        [Input("identityId")]
        public Input<string>? IdentityId { get; set; }

        /// <summary>
        /// The login name of the principal to set as the server administrator
        /// </summary>
        [Input("login")]
        public Input<string>? Login { get; set; }

        /// <summary>
        /// The ID of the principal to set as the server administrator. For a managed identity this should be the Client ID of the identity.
        /// </summary>
        [Input("objectId")]
        public Input<string>? ObjectId { get; set; }

        /// <summary>
        /// The resource ID of the MySQL Flexible Server. Changing this forces a new resource to be created.
        /// </summary>
        [Input("serverId")]
        public Input<string>? ServerId { get; set; }

        /// <summary>
        /// The Azure Tenant ID.
        /// </summary>
        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        public FlexibleServerActiveDirectoryAdministratoryState()
        {
        }
        public static new FlexibleServerActiveDirectoryAdministratoryState Empty => new FlexibleServerActiveDirectoryAdministratoryState();
    }
}
