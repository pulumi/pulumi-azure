// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.MySql
{
    public static class GetFlexibleServer
    {
        /// <summary>
        /// Use this data source to access information about an existing MySQL Flexible Server.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.MySql.GetFlexibleServer.Invoke(new()
        ///     {
        ///         Name = "existingMySqlFlexibleServer",
        ///         ResourceGroupName = "existingResGroup",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getFlexibleServerResult =&gt; getFlexibleServerResult.Id),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetFlexibleServerResult> InvokeAsync(GetFlexibleServerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFlexibleServerResult>("azure:mysql/getFlexibleServer:getFlexibleServer", args ?? new GetFlexibleServerArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing MySQL Flexible Server.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.MySql.GetFlexibleServer.Invoke(new()
        ///     {
        ///         Name = "existingMySqlFlexibleServer",
        ///         ResourceGroupName = "existingResGroup",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getFlexibleServerResult =&gt; getFlexibleServerResult.Id),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetFlexibleServerResult> Invoke(GetFlexibleServerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFlexibleServerResult>("azure:mysql/getFlexibleServer:getFlexibleServer", args ?? new GetFlexibleServerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFlexibleServerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the name of the MySQL Flexible Server.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the resource group for the MySQL Flexible Server.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetFlexibleServerArgs()
        {
        }
        public static new GetFlexibleServerArgs Empty => new GetFlexibleServerArgs();
    }

    public sealed class GetFlexibleServerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the name of the MySQL Flexible Server.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of the resource group for the MySQL Flexible Server.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetFlexibleServerInvokeArgs()
        {
        }
        public static new GetFlexibleServerInvokeArgs Empty => new GetFlexibleServerInvokeArgs();
    }


    [OutputType]
    public sealed class GetFlexibleServerResult
    {
        /// <summary>
        /// The Administrator login of the MySQL Flexible Server.
        /// </summary>
        public readonly string AdministratorLogin;
        /// <summary>
        /// The backup retention days of the MySQL Flexible Server.
        /// </summary>
        public readonly int BackupRetentionDays;
        /// <summary>
        /// The ID of the virtual network subnet the MySQL Flexible Server is created in.
        /// </summary>
        public readonly string DelegatedSubnetId;
        /// <summary>
        /// The fully qualified domain name of the MySQL Flexible Server.
        /// </summary>
        public readonly string Fqdn;
        /// <summary>
        /// Is geo redundant backup enabled?
        /// </summary>
        public readonly bool GeoRedundantBackupEnabled;
        /// <summary>
        /// A `high_availability` block for this MySQL Flexible Server as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFlexibleServerHighAvailabilityResult> HighAvailabilities;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The Azure Region of the MySQL Flexible Server.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// A `maintenance_window` block for this MySQL Flexible Server as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFlexibleServerMaintenanceWindowResult> MaintenanceWindows;
        public readonly string Name;
        /// <summary>
        /// The ID of the Private DNS zone of the MySQL Flexible Server.
        /// </summary>
        public readonly string PrivateDnsZoneId;
        /// <summary>
        /// Is the public network access enabled?
        /// </summary>
        public readonly bool PublicNetworkAccessEnabled;
        /// <summary>
        /// The maximum number of replicas that a primary MySQL Flexible Server can have.
        /// </summary>
        public readonly int ReplicaCapacity;
        /// <summary>
        /// The replication role of the MySQL Flexible Server.
        /// </summary>
        public readonly string ReplicationRole;
        public readonly string ResourceGroupName;
        public readonly string RestorePointInTime;
        /// <summary>
        /// The SKU Name of the MySQL Flexible Server.
        /// </summary>
        public readonly string SkuName;
        /// <summary>
        /// A `storage` block for this MySQL Flexible Server as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFlexibleServerStorageResult> Storages;
        /// <summary>
        /// A mapping of tags which are assigned to the MySQL Flexible Server.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// The version of the MySQL Flexible Server.
        /// </summary>
        public readonly string Version;
        /// <summary>
        /// The Availability Zones where this MySQL Flexible Server is located.
        /// </summary>
        public readonly string Zone;

        [OutputConstructor]
        private GetFlexibleServerResult(
            string administratorLogin,

            int backupRetentionDays,

            string delegatedSubnetId,

            string fqdn,

            bool geoRedundantBackupEnabled,

            ImmutableArray<Outputs.GetFlexibleServerHighAvailabilityResult> highAvailabilities,

            string id,

            string location,

            ImmutableArray<Outputs.GetFlexibleServerMaintenanceWindowResult> maintenanceWindows,

            string name,

            string privateDnsZoneId,

            bool publicNetworkAccessEnabled,

            int replicaCapacity,

            string replicationRole,

            string resourceGroupName,

            string restorePointInTime,

            string skuName,

            ImmutableArray<Outputs.GetFlexibleServerStorageResult> storages,

            ImmutableDictionary<string, string> tags,

            string version,

            string zone)
        {
            AdministratorLogin = administratorLogin;
            BackupRetentionDays = backupRetentionDays;
            DelegatedSubnetId = delegatedSubnetId;
            Fqdn = fqdn;
            GeoRedundantBackupEnabled = geoRedundantBackupEnabled;
            HighAvailabilities = highAvailabilities;
            Id = id;
            Location = location;
            MaintenanceWindows = maintenanceWindows;
            Name = name;
            PrivateDnsZoneId = privateDnsZoneId;
            PublicNetworkAccessEnabled = publicNetworkAccessEnabled;
            ReplicaCapacity = replicaCapacity;
            ReplicationRole = replicationRole;
            ResourceGroupName = resourceGroupName;
            RestorePointInTime = restorePointInTime;
            SkuName = skuName;
            Storages = storages;
            Tags = tags;
            Version = version;
            Zone = zone;
        }
    }
}
