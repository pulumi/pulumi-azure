// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Policy
{
    public static class GetPolicyAssignment
    {
        /// <summary>
        /// Use this data source to access information about an existing Policy Assignment.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Policy.GetPolicyAssignment.Invoke(new()
        ///     {
        ///         Name = "existing",
        ///         ScopeId = data.Azurerm_resource_group.Example.Id,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getPolicyAssignmentResult =&gt; getPolicyAssignmentResult.Id),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetPolicyAssignmentResult> InvokeAsync(GetPolicyAssignmentArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPolicyAssignmentResult>("azure:policy/getPolicyAssignment:getPolicyAssignment", args ?? new GetPolicyAssignmentArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Policy Assignment.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Policy.GetPolicyAssignment.Invoke(new()
        ///     {
        ///         Name = "existing",
        ///         ScopeId = data.Azurerm_resource_group.Example.Id,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getPolicyAssignmentResult =&gt; getPolicyAssignmentResult.Id),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetPolicyAssignmentResult> Invoke(GetPolicyAssignmentInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPolicyAssignmentResult>("azure:policy/getPolicyAssignment:getPolicyAssignment", args ?? new GetPolicyAssignmentInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPolicyAssignmentArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of this Policy Assignment. Changing this forces a new Policy Assignment to be created.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The ID of the scope this Policy Assignment is assigned to. The `scope_id` can be a subscription id, a resource group id, a management group id, or an ID of any resource that is assigned with a policy. Changing this forces a new Policy Assignment to be created.
        /// </summary>
        [Input("scopeId", required: true)]
        public string ScopeId { get; set; } = null!;

        public GetPolicyAssignmentArgs()
        {
        }
        public static new GetPolicyAssignmentArgs Empty => new GetPolicyAssignmentArgs();
    }

    public sealed class GetPolicyAssignmentInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of this Policy Assignment. Changing this forces a new Policy Assignment to be created.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The ID of the scope this Policy Assignment is assigned to. The `scope_id` can be a subscription id, a resource group id, a management group id, or an ID of any resource that is assigned with a policy. Changing this forces a new Policy Assignment to be created.
        /// </summary>
        [Input("scopeId", required: true)]
        public Input<string> ScopeId { get; set; } = null!;

        public GetPolicyAssignmentInvokeArgs()
        {
        }
        public static new GetPolicyAssignmentInvokeArgs Empty => new GetPolicyAssignmentInvokeArgs();
    }


    [OutputType]
    public sealed class GetPolicyAssignmentResult
    {
        /// <summary>
        /// The description of this Policy Assignment.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The display name of this Policy Assignment.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Whether this Policy is enforced or not?
        /// </summary>
        public readonly bool Enforce;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A `identity` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPolicyAssignmentIdentityResult> Identities;
        /// <summary>
        /// The Azure Region where the Policy Assignment exists.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// A JSON mapping of any Metadata for this Policy.
        /// </summary>
        public readonly string Metadata;
        public readonly string Name;
        /// <summary>
        /// A `non_compliance_message` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPolicyAssignmentNonComplianceMessageResult> NonComplianceMessages;
        /// <summary>
        /// A `not_scopes` block as defined below.
        /// </summary>
        public readonly ImmutableArray<string> NotScopes;
        /// <summary>
        /// A JSON mapping of any Parameters for this Policy.
        /// </summary>
        public readonly string Parameters;
        /// <summary>
        /// The ID of the assigned Policy Definition.
        /// </summary>
        public readonly string PolicyDefinitionId;
        public readonly string ScopeId;

        [OutputConstructor]
        private GetPolicyAssignmentResult(
            string description,

            string displayName,

            bool enforce,

            string id,

            ImmutableArray<Outputs.GetPolicyAssignmentIdentityResult> identities,

            string location,

            string metadata,

            string name,

            ImmutableArray<Outputs.GetPolicyAssignmentNonComplianceMessageResult> nonComplianceMessages,

            ImmutableArray<string> notScopes,

            string parameters,

            string policyDefinitionId,

            string scopeId)
        {
            Description = description;
            DisplayName = displayName;
            Enforce = enforce;
            Id = id;
            Identities = identities;
            Location = location;
            Metadata = metadata;
            Name = name;
            NonComplianceMessages = nonComplianceMessages;
            NotScopes = notScopes;
            Parameters = parameters;
            PolicyDefinitionId = policyDefinitionId;
            ScopeId = scopeId;
        }
    }
}
