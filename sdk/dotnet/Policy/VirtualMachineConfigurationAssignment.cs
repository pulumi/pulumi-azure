// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Policy
{
    /// <summary>
    /// Applies a Guest Configuration Policy to a Virtual Machine.
    /// 
    /// &gt; **NOTE:** You can create Guest Configuration Policies without defining a `azure.compute.Extension` resource, however the policies will not be executed until a `azure.compute.Extension` has been provisioned to the virtual machine.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleVirtualNetwork = new Azure.Network.VirtualNetwork("exampleVirtualNetwork", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         AddressSpaces = new[]
    ///         {
    ///             "10.0.0.0/16",
    ///         },
    ///     });
    /// 
    ///     var exampleSubnet = new Azure.Network.Subnet("exampleSubnet", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         VirtualNetworkName = exampleVirtualNetwork.Name,
    ///         AddressPrefixes = new[]
    ///         {
    ///             "10.0.2.0/24",
    ///         },
    ///     });
    /// 
    ///     var exampleNetworkInterface = new Azure.Network.NetworkInterface("exampleNetworkInterface", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         IpConfigurations = new[]
    ///         {
    ///             new Azure.Network.Inputs.NetworkInterfaceIpConfigurationArgs
    ///             {
    ///                 Name = "internal",
    ///                 SubnetId = exampleSubnet.Id,
    ///                 PrivateIpAddressAllocation = "Dynamic",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleWindowsVirtualMachine = new Azure.Compute.WindowsVirtualMachine("exampleWindowsVirtualMachine", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         Size = "Standard_F2",
    ///         AdminUsername = "adminuser",
    ///         AdminPassword = "P@$$w0rd1234!",
    ///         NetworkInterfaceIds = new[]
    ///         {
    ///             exampleNetworkInterface.Id,
    ///         },
    ///         Identity = new Azure.Compute.Inputs.WindowsVirtualMachineIdentityArgs
    ///         {
    ///             Type = "SystemAssigned",
    ///         },
    ///         OsDisk = new Azure.Compute.Inputs.WindowsVirtualMachineOsDiskArgs
    ///         {
    ///             Caching = "ReadWrite",
    ///             StorageAccountType = "Standard_LRS",
    ///         },
    ///         SourceImageReference = new Azure.Compute.Inputs.WindowsVirtualMachineSourceImageReferenceArgs
    ///         {
    ///             Publisher = "MicrosoftWindowsServer",
    ///             Offer = "WindowsServer",
    ///             Sku = "2019-Datacenter",
    ///             Version = "latest",
    ///         },
    ///     });
    /// 
    ///     var exampleExtension = new Azure.Compute.Extension("exampleExtension", new()
    ///     {
    ///         VirtualMachineId = exampleWindowsVirtualMachine.Id,
    ///         Publisher = "Microsoft.GuestConfiguration",
    ///         Type = "ConfigurationforWindows",
    ///         TypeHandlerVersion = "1.0",
    ///         AutoUpgradeMinorVersion = true,
    ///     });
    /// 
    ///     var exampleVirtualMachineConfigurationAssignment = new Azure.Policy.VirtualMachineConfigurationAssignment("exampleVirtualMachineConfigurationAssignment", new()
    ///     {
    ///         Location = exampleWindowsVirtualMachine.Location,
    ///         VirtualMachineId = exampleWindowsVirtualMachine.Id,
    ///         Configuration = new Azure.Policy.Inputs.VirtualMachineConfigurationAssignmentConfigurationArgs
    ///         {
    ///             AssignmentType = "ApplyAndMonitor",
    ///             Version = "1.*",
    ///             Parameters = new[]
    ///             {
    ///                 new Azure.Policy.Inputs.VirtualMachineConfigurationAssignmentConfigurationParameterArgs
    ///                 {
    ///                     Name = "Minimum Password Length;ExpectedValue",
    ///                     Value = "16",
    ///                 },
    ///                 new Azure.Policy.Inputs.VirtualMachineConfigurationAssignmentConfigurationParameterArgs
    ///                 {
    ///                     Name = "Minimum Password Age;ExpectedValue",
    ///                     Value = "0",
    ///                 },
    ///                 new Azure.Policy.Inputs.VirtualMachineConfigurationAssignmentConfigurationParameterArgs
    ///                 {
    ///                     Name = "Maximum Password Age;ExpectedValue",
    ///                     Value = "30,45",
    ///                 },
    ///                 new Azure.Policy.Inputs.VirtualMachineConfigurationAssignmentConfigurationParameterArgs
    ///                 {
    ///                     Name = "Enforce Password History;ExpectedValue",
    ///                     Value = "10",
    ///                 },
    ///                 new Azure.Policy.Inputs.VirtualMachineConfigurationAssignmentConfigurationParameterArgs
    ///                 {
    ///                     Name = "Password Must Meet Complexity Requirements;ExpectedValue",
    ///                     Value = "1",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Policy Virtual Machine Configuration Assignments can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:policy/virtualMachineConfigurationAssignment:VirtualMachineConfigurationAssignment example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Compute/virtualMachines/vm1/providers/Microsoft.GuestConfiguration/guestConfigurationAssignments/assignment1
    /// ```
    /// </summary>
    [AzureResourceType("azure:policy/virtualMachineConfigurationAssignment:VirtualMachineConfigurationAssignment")]
    public partial class VirtualMachineConfigurationAssignment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A `configuration` block as defined below.
        /// </summary>
        [Output("configuration")]
        public Output<Outputs.VirtualMachineConfigurationAssignmentConfiguration> Configuration { get; private set; } = null!;

        /// <summary>
        /// The Azure location where the Policy Virtual Machine Configuration Assignment should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the Guest Configuration that will be assigned in this Guest Configuration Assignment. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The resource ID of the Policy Virtual Machine which this Guest Configuration Assignment should apply to. Changing this forces a new resource to be created.
        /// </summary>
        [Output("virtualMachineId")]
        public Output<string> VirtualMachineId { get; private set; } = null!;


        /// <summary>
        /// Create a VirtualMachineConfigurationAssignment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VirtualMachineConfigurationAssignment(string name, VirtualMachineConfigurationAssignmentArgs args, CustomResourceOptions? options = null)
            : base("azure:policy/virtualMachineConfigurationAssignment:VirtualMachineConfigurationAssignment", name, args ?? new VirtualMachineConfigurationAssignmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VirtualMachineConfigurationAssignment(string name, Input<string> id, VirtualMachineConfigurationAssignmentState? state = null, CustomResourceOptions? options = null)
            : base("azure:policy/virtualMachineConfigurationAssignment:VirtualMachineConfigurationAssignment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VirtualMachineConfigurationAssignment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VirtualMachineConfigurationAssignment Get(string name, Input<string> id, VirtualMachineConfigurationAssignmentState? state = null, CustomResourceOptions? options = null)
        {
            return new VirtualMachineConfigurationAssignment(name, id, state, options);
        }
    }

    public sealed class VirtualMachineConfigurationAssignmentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A `configuration` block as defined below.
        /// </summary>
        [Input("configuration", required: true)]
        public Input<Inputs.VirtualMachineConfigurationAssignmentConfigurationArgs> Configuration { get; set; } = null!;

        /// <summary>
        /// The Azure location where the Policy Virtual Machine Configuration Assignment should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the Guest Configuration that will be assigned in this Guest Configuration Assignment. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The resource ID of the Policy Virtual Machine which this Guest Configuration Assignment should apply to. Changing this forces a new resource to be created.
        /// </summary>
        [Input("virtualMachineId", required: true)]
        public Input<string> VirtualMachineId { get; set; } = null!;

        public VirtualMachineConfigurationAssignmentArgs()
        {
        }
        public static new VirtualMachineConfigurationAssignmentArgs Empty => new VirtualMachineConfigurationAssignmentArgs();
    }

    public sealed class VirtualMachineConfigurationAssignmentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A `configuration` block as defined below.
        /// </summary>
        [Input("configuration")]
        public Input<Inputs.VirtualMachineConfigurationAssignmentConfigurationGetArgs>? Configuration { get; set; }

        /// <summary>
        /// The Azure location where the Policy Virtual Machine Configuration Assignment should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the Guest Configuration that will be assigned in this Guest Configuration Assignment. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The resource ID of the Policy Virtual Machine which this Guest Configuration Assignment should apply to. Changing this forces a new resource to be created.
        /// </summary>
        [Input("virtualMachineId")]
        public Input<string>? VirtualMachineId { get; set; }

        public VirtualMachineConfigurationAssignmentState()
        {
        }
        public static new VirtualMachineConfigurationAssignmentState Empty => new VirtualMachineConfigurationAssignmentState();
    }
}
